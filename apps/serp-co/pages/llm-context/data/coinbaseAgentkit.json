[
  {
    "owner": "coinbase",
    "repo": "agentkit",
    "content": "TITLE: Implementing a Mint NFT Action with create_action Decorator in Python\nDESCRIPTION: This snippet demonstrates the implementation of a 'mint' action using the @create_action decorator and an associated schema (MintSchema) in a provider class. The function mints an NFT by calling the wallet_provider's mint method. It includes exception handling to return error messages as strings and returns transaction metadata (address, hash, and link) upon success. Dependencies: create_action decorator, MintSchema class, CdpWalletProvider class, and the wallet provider's mint method. Inputs: wallet_provider (CdpWalletProvider), args dictionary with 'contract_address' and 'destination'. Output: formatted string with results or error detail.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/CONTRIBUTING-PYTHON.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@create_action(\n    name=\"mint\",\n    description=\"\"\"\nThis tool will mint an NFT (ERC-721) to a specified destination address onchain via a contract invocation.\nIt takes the contract address of the NFT onchain and the destination address onchain that will receive the NFT as inputs.\nDo not use the contract address as the destination address. If you are unsure of the destination address, please ask the user before proceeding.\n    \"\"\",\n    schema=MintSchema,\n)\ndef mint(self, wallet_provider: CdpWalletProvider, args: dict[str, Any]) -> str:\n    \"\"\"Mint an NFT.\"\"\"\n    try:\n        nft_contract = wallet_provider.mint(\n            contract_address=args[\"contract_address\"],\n            destination=args[\"destination\"]\n        ).wait()\n    except Exception as e:\n        return f\"Error deploying NFT {e!s}\"\n\n    return f\"Minted NFT to address {args['destination']}.\\nTransaction hash: {nft_contract.transaction.transaction_hash}\\nTransaction link: {nft_contract.transaction.transaction_link}\"\n```\n\n----------------------------------------\n\nTITLE: Integrating AgentKit with LangChain and OpenAI (Python)\nDESCRIPTION: This snippet shows how to create LangChain tools from an AgentKit instance and use them to build an AI agent with an OpenAI language model. It demonstrates connecting AgentKit's actions to a LangChain-based agent workflow.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/README.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom coinbase_agentkit_langchain import get_langchain_tools\nfrom langgraph.prebuilt import create_react_agent\nfrom langchain_openai import ChatOpenAI\n\ntools = get_langchain_tools(agent_kit)\n\nllm = ChatOpenAI(model=\"gpt-4\")\n\nagent = create_react_agent(\n    llm=llm,\n    tools=tools\n)\n```\n\n----------------------------------------\n\nTITLE: Initialize LangChain Agent with AgentKit Tools - TypeScript\nDESCRIPTION: Illustrates the fundamental setup of a LangChain agent integrated with AgentKit tools. It involves initializing AgentKit with CDP credentials, fetching AgentKit-specific tools, instantiating a ChatOpenAI model, and creating a React-style agent using these components for interacting with onchain actions.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/framework-extensions/langchain/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getLangChainTools } from \"@coinbase/agentkit-langchain\";\nimport { createReactAgent } from \"@langchain/langgraph/prebuilt\";\nimport { ChatOpenAI } from \"@langchain/openai\";\nimport { AgentKit } from \"@coinbase/agentkit\";\n\nconst agentKit = await AgentKit.from({\n  cdpApiKeyName: \"CDP API KEY NAME\",\n  cdpApiKeyPrivateKey: \"CDP API KEY PRIVATE KEY\",\n});\n\nconst tools = await getLangChainTools(agentKit);\n\nconst llm = new ChatOpenAI({\n    model: \"gpt-4o-mini\",\n});\n\nconst agent = createReactAgent({\n    llm,\n    tools,\n});\n```\n\n----------------------------------------\n\nTITLE: Integrating AgentKit with LangChain and OpenAI\nDESCRIPTION: Creates a LangChain agent using AgentKit tools and OpenAI's GPT model. This setup enables AI-powered decision making for onchain actions through the agent.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/agentkit/README.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getLangChainTools } from \"@coinbase/agentkit-langchain\";\nimport { createReactAgent } from \"@langchain/langgraph/prebuilt\";\nimport { ChatOpenAI } from \"@langchain/openai\";\n\nconst tools = await getLangChainTools(agentKit);\n\nconst llm = new ChatOpenAI({\n    model: \"gpt-4o-mini\",\n});\n\nconst agent = createReactAgent({\n    llm,\n    tools,\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing AgentKit with a Specified Wallet Provider (Python)\nDESCRIPTION: This snippet shows how to instantiate AgentKit and explicitly configure it with a specific wallet provider, in this case, the CdpWalletProvider. It requires providing the necessary configuration like API keys and network ID.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/README.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom coinbase_agentkit import (\n    AgentKit,\n    AgentKitConfig,\n    CdpWalletProvider,\n    CdpWalletProviderConfig\n)\n\nwallet_provider = CdpWalletProvider(CdpWalletProviderConfig(\n    api_key_name=\"CDP API KEY NAME\",\n    api_key_private=\"CDP API KEY PRIVATE KEY\",\n    network_id=\"base-mainnet\"\n))\n\nagent_kit = AgentKit(AgentKitConfig(\n    wallet_provider=wallet_provider\n))\n```\n\n----------------------------------------\n\nTITLE: Setting up Basic LangChain Agent with AgentKit Tools (Python)\nDESCRIPTION: This snippet illustrates the basic setup for integrating AgentKit tools into a LangChain agent. It initializes AgentKit, retrieves the compatible tools, sets up a language model (ChatOpenAI), and creates a ReAct agent configured to use these tools and the LLM.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/framework-extensions/langchain/README.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom coinbase_agentkit import AgentKit\nfrom coinbase_agentkit_langchain import get_langchain_tools\nfrom langchain_openai import ChatOpenAI\nfrom langchain.agents import create_react_agent\n\nagentKit = AgentKit()\n\ntools = get_langchain_tools(agentKit)\n\nllm = ChatOpenAI(model=\"gpt-4o-mini\")\n\nagent = create_react_agent(\n    llm=llm,\n    tools=tools,\n)\n```\n\n----------------------------------------\n\nTITLE: Creating and running agent project with Node.js\nDESCRIPTION: These commands create a new fullstack agent project using the `create-onchain-agent` npm package, navigate to the project directory, install dependencies, and run the development server. Requires Node.js 18+, a CDP Secret API Key, and an OpenAI API Key.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Create a new fullstack agent project\nnpm create onchain-agent@latest\n\n# Navigate to your project directory\ncd onchain-agent\n\n# At this point, fill in your CDP API key name, OpenAI API key, and any other environment variables in the .env.local file.\n# Then, rename the .env.local file to .env\nmv .env.local .env\n\n# Install dependencies\nnpm install\n\n# Run the development server\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Creating a Decorated Action Method in a Provider (AgentKit, TypeScript)\nDESCRIPTION: Demonstrates how to implement a custom action in an ActionProvider subclass using the '@CreateAction' decorator. The 'myAction' method asynchronously returns the 'myField' property from the input arguments, which are type-inferred from the 'MyActionSchema'. Dependencies include '@coinbase/agentkit' and 'zod'. The provider must be instantiated as shown for registration. Input: structured object matching schema; Output: the contained string value.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/agentkit/README.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ActionProvider, WalletProvider, Network, CreateAction } from \"@coinbase/agentkit\";\n\nclass MyActionProvider extends ActionProvider<WalletProvider> {\n    constructor() {\n        super(\"my-action-provider\", []);\n    }\n\n    @CreateAction({\n        name: \"my-action\",\n        description: \"My action description\",\n        schema: MyActionSchema,\n    })\n    async myAction(args: z.infer<typeof MyActionSchema>): Promise<string> {\n        return args.myField;\n    }\n\n    supportsNetwork = (network: Network) => true;\n}\n\nexport const myActionProvider = () => new MyActionProvider();\n```\n\n----------------------------------------\n\nTITLE: Implementing an Action Method within a Provider (TypeScript)\nDESCRIPTION: Displays the complete implementation of an action method (`mint`) within an Action Provider class (`Erc721ActionProvider`). It uses the `@CreateAction` decorator to define metadata (name, description, schema), takes an `EvmWalletProvider` and validated arguments (typed via `z.infer<typeof MintSchema>`), performs an on-chain interaction (encoding data, sending transaction, waiting for receipt), and returns a user-friendly status string indicating success or failure.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/CONTRIBUTING-TYPESCRIPT.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// src/action-providers/erc721/erc721ActionProvider.ts\n\nexport class Erc721ActionProvider extends ActionProvider {\n  constructor() {\n    super(\"erc721\", []);\n  }\n\n  @CreateAction({\n    name: \"mint\",\n    description: `\nThis tool will mint an NFT (ERC-721) to a specified destination address onchain via a contract invocation. \nIt takes the contract address of the NFT onchain and the destination address onchain that will receive the NFT as inputs. \nDo not use the contract address as the destination address. If you are unsure of the destination address, please ask the user before proceeding.\n`,\n    schema: MintSchema,\n  })\n  async mint(\n    walletProvider: EvmWalletProvider,\n    args: z.infer<typeof MintSchema>\n  ): Promise<string> {\n    try {\n      const data = encodeFunctionData({\n        abi: ERC721_ABI,\n        functionName: \"mint\",\n        args: [args.destination as Hex, 1n],\n      });\n\n      const hash = await walletProvider.sendTransaction({\n        to: args.contractAddress as `0x${string}`,\n        data,\n      });\n\n      await walletProvider.waitForTransactionReceipt(hash);\n\n      return `Successfully minted NFT ${args.contractAddress} to ${args.destination}`;\n    } catch (error) {\n      return `Error minting NFT ${args.contractAddress} to ${args.destination}: ${error}`;\n    }\n  }\n\n  supportsNetwork = (network: Network) => network.protocolFamily === \"evm\";\n}\n```\n\n----------------------------------------\n\nTITLE: Getting AgentKit Tools and Generating Text with Vercel AI SDK in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to instantiate AgentKit by providing Coinbase Developer Platform API credentials from environment variables, obtain AgentKit AI tools via the getVercelAITools function, and generate AI-powered text responses using the Vercel AI SDK's generateText function. It configures the OpenAI model with \"gpt-4o-mini\", sets a system message, and a prompt requesting wallet details. Multi-step tool usage is enabled with maxSteps set to 10, facilitating complex agent workflows. The snippet requires valid API keys and environment variables for OpenAI and AgentKit.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/framework-extensions/vercel-ai-sdk/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getVercelAITools } from \"@coinbase/agentkit-vercel-ai-sdk\";\nimport { AgentKit } from \"@coinbase/agentkit\";\nimport { generateText } from \"ai\";\nimport { openai } from \"@ai-sdk/openai\";\n\n// Get your Coinbase Developer Platform API key from the Portal: https://portal.cdp.coinbase.com/\n// Or, check out one of the other supported wallet providers: https://github.com/coinbase/agentkit/tree/main/typescript/agentkit\nconst agentKit = await AgentKit.from({\n  cdpApiKeyName: process.env.CDP_API_KEY_NAME,\n  cdpApiKeyPrivateKey: process.env.CDP_API_KEY_PRIVATE_KEY,\n});\n\nconst tools = await getVercelAITools(agentKit);\n\n// There are multiple methods to generate text with AI SDK.\n// See here for more information: https://sdk.vercel.ai/docs/ai-sdk-core/generating-text\nconst { text } = await generateText({\n  model: openai(\"gpt-4o-mini\"), // Make sure to have OPENAI_API_KEY set in your environment variables\n  system: \"You are an onchain AI assistant with access to a wallet.\",\n  prompt: \"Print wallet details\",\n  tools,\n  // Allow multi-step tool usage\n  // See: https://sdk.vercel.ai/docs/foundations/agents#multi-step-tool-usage\n  maxSteps: 10,\n});\n\nconsole.log(text);\n```\n\n----------------------------------------\n\nTITLE: Initializing AgentKit and Creating an OpenAI-Powered Blockchain Agent in Python\nDESCRIPTION: Demonstrates how to import the AgentKit class and OpenAI agents SDK tools, instantiate AgentKit, obtain available tools for blockchain interaction, and create a named Agent with specific instructions and toolset. This setup enables the created agent to execute helpful, blockchain-related commands in Python using the SDK's abstractions.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/framework-extensions/openai-agents-sdk/README.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom coinbase_agentkit import AgentKit\\nfrom coinbase_agentkit_openai_agents_sdk import get_openai_agents_sdk_tools\\nfrom agents import Agent\\n\\nagentKit = AgentKit()\\n\\ntools = get_openai_agents_sdk_tools(agentKit)\\n\\nagent = Agent(\\n    name=\"CDP Agent\",\\n    instructions=\"You are a helpful agent that can interact with the blockchain using AgentKit tools.\",\\n    tools=tools\\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing AgentKit with Specified Action Providers (Python)\nDESCRIPTION: This code illustrates how to initialize AgentKit with a list of predefined action providers. It demonstrates adding multiple providers, such as cdp_api_action_provider and pyth_action_provider, to extend the agent's capabilities.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/README.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom coinbase_agentkit import (\n    AgentKit,\n    AgentKitConfig,\n    cdp_api_action_provider,\n    pyth_action_provider\n)\n\nagent_kit = AgentKit(AgentKitConfig(\n    wallet_provider=wallet_provider,\n    action_providers=[\n        cdp_api_action_provider(\n            api_key_name=\"CDP API KEY NAME\",\n            api_key_private=\"CDP API KEY PRIVATE KEY\"\n        ),\n        pyth_action_provider()\n    ]\n))\n```\n\n----------------------------------------\n\nTITLE: Configuring SmartWalletProvider\nDESCRIPTION: This snippet demonstrates the configuration of the `SmartWalletProvider`, a wallet provider using CDP Smart Wallets. It imports necessary modules from `@coinbase/agentkit` and `viem`. The configuration includes the `networkId`, a `signer` derived from a private key, and `smartWalletAddress`, which is optional. The `paymasterUrl` is also configurable for transaction sponsorship. A new smart wallet will be created if `smartWalletAddress` is not provided.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/agentkit/README.md#_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SmartWalletProvider, SmartWalletConfig } from \"@coinbase/agentkit\";\nimport { generatePrivateKey, privateKeyToAccount } from \"viem/accounts\";\n\nconst networkId = process.env.NETWORK_ID || \"base-sepolia\";\n\nconst privateKey = process.env.PRIVATE_KEY || generatePrivateKey();\nconst signer = privateKeyToAccount(privateKey);\n\n// Configure Wallet Provider\nconst walletProvider = await SmartWalletProvider.configureWithWallet({\n  networkId,\n  signer,\n  smartWalletAddress: undefined, // If not provided a new smart wallet will be created\n  paymasterUrl: undefined, // Sponsor transactions: https://docs.cdp.coinbase.com/paymaster/docs/welcome\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing AgentKit with Default Providers (Python)\nDESCRIPTION: This code demonstrates how to create a basic AgentKit instance using its default configuration. By default, it uses the CdpWalletProvider and WalletActionProvider if no specific providers are specified.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/README.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom coinbase_agentkit import AgentKit, AgentKitConfig\n\nagent_kit = AgentKit()\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Action to an Action Provider (Python)\nDESCRIPTION: This code shows how to define a specific action within a custom action provider using the @create_action decorator. It includes specifying the action's name, description, and input schema, along with the method implementation.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/README.md#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom coinbase_agentkit import ActionProvider, WalletProvider, create_action\nfrom coinbase_agentkit.network import Network\n\nclass MyActionProvider(ActionProvider[WalletProvider]):\n    def __init__(self):\n        super().__init__(\"my-action-provider\", [])\n\n    @create_action(\n        name=\"my-action\",\n        description=\"My action description\",\n        schema=MyActionSchema\n    )\n    def my_action(self, args: dict[str, Any]) -> str:\n        return args[\"my_field\"]\n\n    def supports_network(self, network: Network) -> bool:\n        return True\n\ndef my_action_provider():\n    return MyActionProvider()\n```\n\n----------------------------------------\n\nTITLE: Transferring Native Blockchain Tokens - Wallet\nDESCRIPTION: Transfers native blockchain tokens (e.g., ETH) to a destination address.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/README.md#_snippet_67\n\nLANGUAGE: Wallet\nCODE:\n```\nnative_transfer\n```\n\n----------------------------------------\n\nTITLE: Creating a New Onchain Agent Project using AgentKit CLI (Shell)\nDESCRIPTION: This shell command initializes a new project scaffold via the create-onchain-agent CLI. It prompts the user to select a starter template, such as a Next.js web application (React, Tailwind CSS, ESLint) or an MCP server for Model Context Protocol. Requires Node.js v18+ and npm v9+ installed on the system. Input: none; Output: scaffolds a project folder according to template selection.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/create-onchain-agent/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm create onchain-agent@latest\n```\n\n----------------------------------------\n\nTITLE: Integration Test for Compound Action Provider in Python\nDESCRIPTION: Comprehensive example showing how to test the Compound action provider with wallet integration, including supply, borrow, repay, and withdraw operations against Compound V3 markets.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/coinbase_agentkit/action_providers/compound/README.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport time\nfrom decimal import Decimal\n\nimport pytest\n\nfrom coinbase_agentkit.action_providers.cdp.cdp_api_action_provider import CdpApiActionProvider\nfrom coinbase_agentkit.action_providers.compound.compound_action_provider import (\n    CompoundActionProvider,\n)\nfrom coinbase_agentkit.action_providers.weth.weth_action_provider import WethActionProvider\nfrom coinbase_agentkit.wallet_providers import CdpWalletProvider\n\n# Constants\nUSDC_ASSET = \"usdc\"\nETH_ASSET = \"eth\"\nWAIT_TIME = 15\n\n@pytest.fixture\ndef wallet():\n    \"\"\"Create a real wallet instance for testing using the CDP wallet provider.\"\"\"\n    return CdpWalletProvider()\n\n@pytest.fixture\ndef compound_provider():\n    \"\"\"Create a compound provider instance for testing.\"\"\"\n    return CompoundActionProvider()\n\n@pytest.fixture\ndef weth_provider():\n    \"\"\"Create a WETH provider instance for testing.\"\"\"\n    return WethActionProvider()\n\n@pytest.fixture\ndef cdp_provider():\n    \"\"\"Create a CDP API provider instance for testing.\"\"\"\n    return CdpApiActionProvider()\n\n@pytest.mark.integration\ndef test_compound_integration(wallet, compound_provider, weth_provider, cdp_provider):\n    \"\"\"Test the full Compound integration flow using the new action provider pattern.\"\"\"\n\n    # Step 1: Request funds from faucet using cdp_api provider\n    faucet_result = cdp_provider.request_faucet_funds(wallet, {\"asset_id\": ETH_ASSET})\n    assert \"Received\" in faucet_result and ETH_ASSET in faucet_result, f\"Faucet funds error: {faucet_result}\"\n    time.sleep(WAIT_TIME)\n\n    # Step 2: Wrap ETH to WETH using weth provider\n    wrap_amount = Decimal(\"0.00005\")\n    wrap_result = weth_provider.wrap_eth(wallet, {\"amount_to_wrap\": str(wrap_amount)})\n    assert \"Wrapped\" in wrap_result, f\"Wrap action failed: {wrap_result}\"\n    time.sleep(WAIT_TIME)\n\n    # Step 3: Supply WETH to Compound using compound provider\n    supply_result = compound_provider.supply(wallet, {\"asset_id\": \"weth\", \"amount\": str(wrap_amount)})\n    assert \"Supplied\" in supply_result, f\"Supply action failed: {supply_result}\"\n    assert \"Transaction hash\" in supply_result, f\"Supply result missing transaction hash: {supply_result}\"\n    time.sleep(WAIT_TIME)\n\n    # Step 4: Borrow USDC from Compound\n    borrow_amount = Decimal(\"0.01\")\n    borrow_result = compound_provider.borrow(wallet, {\"asset_id\": USDC_ASSET, \"amount\": str(borrow_amount)})\n    assert \"Borrowed\" in borrow_result, f\"Borrow action failed: {borrow_result}\"\n    time.sleep(WAIT_TIME)\n\n    # Step 5: Check portfolio details\n    portfolio_details = compound_provider.get_portfolio(wallet, {})\n    assert \"**Supply Amount:** 0.000050000000000000\" in portfolio_details\n    assert \"**Borrow Amount:** 0.010000\" in portfolio_details\n\n    # Step 6: Repay USDC\n    repay_result = compound_provider.repay(wallet, {\n        \"asset_id\": USDC_ASSET,\n        \"amount\": str(borrow_amount)\n    })\n    assert \"Repaid\" in repay_result\n    assert \"Transaction hash\" in repay_result\n    time.sleep(WAIT_TIME)\n\n    # Step 7: Withdraw WETH\n    withdraw_result = compound_provider.withdraw(wallet, {\n        \"asset_id\": \"weth\",\n        \"amount\": str(wrap_amount)\n    })\n    assert \"Withdrawn\" in withdraw_result\n    assert \"Transaction hash\" in withdraw_result\n\n    # Step 8: Check the portfolio details again\n    portfolio_details = compound_provider.get_portfolio(wallet, {})\n    assert \"No supplied assets found in your Compound position.\" in portfolio_details\n    assert \"No borrowed assets found in your Compound position.\" in portfolio_details\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Action Provider to AgentKit (Python)\nDESCRIPTION: This code shows how to include a newly created custom action provider in the AgentKit configuration. The AgentKit instance will then make the actions defined within this custom provider available to the agent.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/README.md#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nagent_kit = AgentKit(AgentKitConfig(\n    cdp_api_key_name=\"CDP API KEY NAME\",\n    cdp_api_key_private=\"CDP API KEY PRIVATE KEY\",\n    action_providers=[my_action_provider()]\n))\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Action Provider with Wallet Provider (AgentKit, TypeScript)\nDESCRIPTION: Implements a custom action provider class by extending the AgentKit 'ActionProvider' abstract class parameterized with 'WalletProvider'. The custom provider declares a unique name and an always-true network support method. No additional actions are implemented. Requires '@coinbase/agentkit' as a dependency. Expects use in agent configurations as a reusable provider object.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/agentkit/README.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ActionProvider, WalletProvider, Network } from \"@coinbase/agentkit\";\n\n// Define an action provider that uses a wallet provider.\nclass MyActionProvider extends ActionProvider<WalletProvider> {\n    constructor() {\n        super(\"my-action-provider\", []);\n    }\n\n    // Define if the action provider supports the given network\n    supportsNetwork = (network: Network) => true;\n}\n```\n\n----------------------------------------\n\nTITLE: Transferring ERC-20 Tokens - ERC20\nDESCRIPTION: Transfers a specified amount of ERC-20 tokens to a destination address.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/README.md#_snippet_24\n\nLANGUAGE: ERC20\nCODE:\n```\ntransfer\n```\n\n----------------------------------------\n\nTITLE: Initializing SmartWalletProvider\nDESCRIPTION: Demonstrates how to initialize and configure the `SmartWalletProvider`. It uses the `coinbase_agentkit`, `eth_account`, and `os` libraries. The user must set the `PRIVATE_KEY` environment variable. The output is an `AgentKit` instance using the `SmartWalletProvider`.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/README.md#_snippet_77\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom eth_account import Account\n\nfrom coinbase_agentkit import (\n    AgentKit, \n    AgentKitConfig, \n    SmartWalletProvider, \n    SmartWalletProviderConfig\n)\n\n# See here for creating a private key:\n# https://web3py.readthedocs.io/en/stable/web3.eth.account.html#creating-a-private-key\nprivate_key = os.environ.get(\"PRIVATE_KEY\")\nassert private_key is not None, \"You must set PRIVATE_KEY environment variable\"\nassert private_key.startswith(\"0x\"), \"Private key must start with 0x hex prefix\"\n\nsigner = Account.from_key(private_key)\n\nnetwork_id = os.getenv(\"NETWORK_ID\", \"base-sepolia\")\n\nwallet_provider = SmartWalletProvider(SmartWalletProviderConfig(\n    network_id=network_id,\n    signer=signer,\n    smart_wallet_address=None, # If not provided, a new smart wallet will be created\n    paymaster_url=None, # Sponsor transactions: https://docs.cdp.coinbase.com/paymaster/docs/welcome\n))\n\nagent_kit = AgentKit(AgentKitConfig(\n    wallet_provider=wallet_provider\n))\n```\n\n----------------------------------------\n\nTITLE: Creating a basic AgentKit instance with default providers\nDESCRIPTION: Initializes an AgentKit instance using the default CdpWalletProvider and WalletActionProvider. Requires CDP API key credentials for authentication.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/agentkit/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst agentKit = await AgentKit.from({\n  cdpApiKeyName: \"CDP API KEY NAME\",\n  cdpApiKeyPrivate: \"CDP API KEY PRIVATE KEY\",\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing an Action that Uses a Wallet Provider (Python)\nDESCRIPTION: This snippet demonstrates how a custom action can access and utilize the WalletProvider configured in the AgentKit instance. By including the wallet_provider parameter, the action method gains access to wallet functionalities like signing messages.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/README.md#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom coinbase_agentkit import ActionProvider, WalletProvider, create_action\n\nclass MyActionProvider(ActionProvider[WalletProvider]):\n    @create_action(\n        name=\"my-action\",\n        description=\"My action description\",\n        schema=MyActionSchema\n    )\n    def my_action(self, wallet_provider: WalletProvider, args: dict[str, Any]) -> str:\n        return wallet_provider.sign_message(args[\"my_field\"])\n```\n\n----------------------------------------\n\nTITLE: Creating AgentKit with custom CdpWalletProvider\nDESCRIPTION: Creates an AgentKit instance with a manually configured CdpWalletProvider. This approach gives more control over wallet configuration including network selection.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/agentkit/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CdpWalletProvider } from \"@coinbase/agentkit\";\n\nconst walletProvider = await CdpWalletProvider.configureWithWallet({\n    apiKeyName: \"CDP API KEY NAME\",\n    apiKeyPrivate: \"CDP API KEY PRIVATE KEY\",\n    networkId: \"base-mainnet\",\n});\n\nconst agentKit = await AgentKit.from({\n    walletProvider,\n});\n```\n\n----------------------------------------\n\nTITLE: Defining an Action Schema Using Zod (TypeScript)\nDESCRIPTION: Creates a Zod object schema intended to validate the shape of action inputs. Exports a schema 'MyActionSchema' with a field 'myField' which must be a string. Requires 'zod' library as a dependency. This schema is used to validate arguments in custom actions and ensures type safety and runtime validation. Input: user data object; Output: validates the presence of a string property.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/agentkit/README.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { z } from \"zod\";\n\nexport const MyActionSchema = z.object({\n  myField: z.string(),\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing EthAccountWalletProvider\nDESCRIPTION: This snippet shows how to initialize an `EthAccountWalletProvider` using a private key. It requires the `eth_account`, `coinbase_agentkit`, and `os` libraries, and that the `PRIVATE_KEY` environment variable is set. The `chain_id` is also required. The output is an `AgentKit` instance configured with `EthAccountWalletProvider`.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/README.md#_snippet_74\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom eth_account import Account\n\nfrom coinbase_agentkit import (\n    AgentKit,\n    AgentKitConfig,\n    EthAccountWalletProvider,\n    EthAccountWalletProviderConfig\n)\n\n# See here for creating a private key:\n# https://web3py.readthedocs.io/en/stable/web3.eth.account.html#creating-a-private-key\nprivate_key = os.environ.get(\"PRIVATE_KEY\")\nassert private_key is not None, \"You must set PRIVATE_KEY environment variable\"\nassert private_key.startswith(\"0x\"), \"Private key must start with 0x hex prefix\"\n\naccount = Account.from_key(private_key)\n\nwallet_provider = EthAccountWalletProvider(\n    config=EthAccountWalletProviderConfig(\n        account=account,\n        chain_id=\"84532\",\n    )\n)\n\nagent_kit = AgentKit(AgentKitConfig(\n    wallet_provider=wallet_provider\n))\n```\n\n----------------------------------------\n\nTITLE: Configuring CdpWalletProvider with API Key and Network (AgentKit, TypeScript)\nDESCRIPTION: Asynchronously configures a CdpWalletProvider using API key credentials and a specified network ID via 'configureWithWallet'. Returns a wallet provider connected to the chosen network. Prerequisites: valid API key, private key, and network ID, '@coinbase/agentkit' installed. Input: credentials and network string; Output: WalletProvider instance ready for use.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/agentkit/README.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CdpWalletProvider } from \"@coinbase/agentkit\";\n\nconst walletProvider = await CdpWalletProvider.configureWithWallet({\n    apiKeyName: \"CDP API KEY NAME\",\n    apiKeyPrivate: \"CDP API KEY PRIVATE KEY\",\n    networkId: \"base-mainnet\",\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing AgentKit Instance with Custom Action Providers (TypeScript)\nDESCRIPTION: Shows how to instantiate AgentKit with the 'myActionProvider' for agent actions. Requires valid CDP API credentials and a provider instance array. Input: AgentKit configuration including 'cdpApiKeyName', 'cdpApiKeyPrivate', and 'actionProviders'; Output: initialized AgentKit instance. Dependencies: '@coinbase/agentkit', properly defined provider function.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/agentkit/README.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst agentKit = new AgentKit({\n  cdpApiKeyName: \"CDP API KEY NAME\",\n  cdpApiKeyPrivate: \"CDP API KEY PRIVATE KEY\",\n  actionProviders: [myActionProvider()],\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching Cryptocurrency Price - CDP API\nDESCRIPTION: Retrieves the current price of a cryptocurrency from the CDP API.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/README.md#_snippet_16\n\nLANGUAGE: CDP API\nCODE:\n```\nfetch_price\n```\n\n----------------------------------------\n\nTITLE: Creating an Action with Wallet Provider Parameter (AgentKit, TypeScript)\nDESCRIPTION: Shows an action implementation that uses a WalletProvider for signing messages. The decorated method takes the provider and schema-validated arguments, and returns a signed message using 'walletProvider.signMessage'. Dependencies: '@coinbase/agentkit', a compatible WalletProvider implementation, 'zod'. Input: WalletProvider & schema-matching args; Output: signature string.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/agentkit/README.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyActionProvider extends ActionProvider<WalletProvider> {\n    constructor() {\n        super(\"my-action-provider\", []);\n    }\n\n    @CreateAction({\n        name: \"my-action\",\n        description: \"My action description\",\n        schema: MyActionSchema,\n    })\n    async myAction(walletProvider: WalletProvider, args: z.infer<typeof MyActionSchema>): Promise<string> {\n        return walletProvider.signMessage(args.myField);\n    }\n\n    supportsNetwork = (network: Network) => true;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Action Input Schema: Zod (TypeScript)\nDESCRIPTION: Shows the required pattern for defining the input parameters and their types for a new action using Zod schemas. This schema ensures type safety and is used by the AgentKit framework.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/agentkit/src/action-providers/onramp/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const NewActionSchema = z.object({\n  // Define your action's parameters\n});\n```\n\n----------------------------------------\n\nTITLE: Example agent interaction in Node.js\nDESCRIPTION: This example shows a user prompt to fund a wallet with testnet ETH and the agent's response indicating successful funding and providing a transaction link. It demonstrates the interaction between the user and the agent after the agent project has been setup and ran.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nUser: Fund my wallet with some testnet ETH.\nAgent: Your wallet has been successfully funded with testnet ETH. You can view the transaction [here](https://sepolia.basescan.org/tx/0x03e82934cd04be5b725927729b517c606f6f744611f0f36e834f21ad742ad7ca)\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom AgentKit Action Provider Class (Python)\nDESCRIPTION: This code provides the basic structure for defining a custom action provider by subclassing AgentProvider. It includes the constructor and the required supports_network method, which determines if the provider is compatible with a given network.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/README.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom coinbase_agentkit import ActionProvider, WalletProvider\nfrom coinbase_agentkit.network import Network\n\nclass MyActionProvider(ActionProvider[WalletProvider]):\n    def __init__(self):\n        super().__init__(\"my-action-provider\", [])\n\n    # Define if the action provider supports the given network\n    def supports_network(self, network: Network) -> bool:\n        return True\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Action Provider Class (TypeScript)\nDESCRIPTION: Shows the basic structure for implementing an ActionProvider class (`Erc721ActionProvider`) in TypeScript. It extends `ActionProvider`, sets the provider name ('erc721') and dependencies in the constructor, and includes a `supportsNetwork` method to specify compatibility (e.g., EVM networks). A factory function is also typically exported.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/CONTRIBUTING-TYPESCRIPT.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// src/action-providers/erc721/erc721ActionProvider.ts\n\nexport class Erc721ActionProvider extends ActionProvider {\n  constructor() {\n    super(\"erc721\", []);\n  }\n\n  supportsNetwork = (network: Network) => network.protocolFamily === \"evm\";\n}\n\nexport const erc721ActionProvider = () => new Erc721ActionProvider();\n```\n\n----------------------------------------\n\nTITLE: Running the CDP Agentkit Chatbot in Bash\nDESCRIPTION: Command to execute the chatbot application using uv run. Requires environment variables for CDP and OpenAI API credentials to be properly configured.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/examples/langchain-eth-account-chatbot/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nuv run chatbot.py\n```\n\n----------------------------------------\n\nTITLE: Initializing CdpWalletProvider With Wallet\nDESCRIPTION: This snippet configures the `CdpWalletProvider` by using an existing CDP API Wallet. It imports `CdpWalletProvider`, `CdpWalletProviderConfig`, and `Wallet`. It requires an existing `Wallet` object. The output is a configured `CdpWalletProvider` instance.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/README.md#_snippet_69\n\nLANGUAGE: python\nCODE:\n```\nfrom coinbase_agentkit import CdpWalletProvider, CdpWalletProviderConfig\nfrom cdp import Wallet\n\nwallet_provider = CdpWalletProvider(CdpWalletProviderConfig(\n    wallet=wallet,\n    api_key_name=\"CDP API KEY NAME\",\n    api_key_private=\"CDP API KEY PRIVATE KEY\",\n))\n```\n\n----------------------------------------\n\nTITLE: Implementing Morpho Action Provider in Python\nDESCRIPTION: This code handles integration with the Morpho Protocol by implementing actions such as deposit and withdraw. The snippet references schemas, constants, utils, and the main provider class, facilitating optimized lending and borrowing operations. The implementation supports multiple networks, primarily Base mainnet and sepolia, and guides users on extending functionality via schemas and tests.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/coinbase_agentkit/action_providers/morpho/README.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n# Morpho Action Provider\n\nThis directory contains the **MorphoActionProvider** implementation, which provides actions to interact with **Morpho Protocol** for optimized lending and borrowing operations.\n\n## Directory Structure\n\n```\nmorpho/\n├── morpho_action_provider.py    # Morpho action provider\n├── constants.py                 # Morpho action constants\n├── schemas.py                   # Morpho action schemas\n├── utils.py                     # Morpho action utils\n├── __init__.py                  # Main exports\n└── README.md                    # This file\n```\n\n## From python/coinbase-agentkit/\ntests/action_providers/morpho/\n├── conftest.py                       # Test configuration\n└── test_morpho_action_provider.py    # Test for Morpho action provider\n\n## Actions\n\n- `deposit`: Deposit assets into a Morpho Vault\n- `withdraw`: Withdraw assets from a Morpho Vault\n\n## Adding New Actions\n\n1. Define your action schema in `schemas.py`. See [Defining the input schema](https://github.com/coinbase/agentkit/blob/main/CONTRIBUTING-PYTHON.md#defining-the-input-schema) for more information.\n2. Implement the action in `morpho_action_provider.py`\n3. Implement tests in `tests/action_providers/morpho/test_morpho_action_provider.py`\n\n## Network Support\n\nThe Morpho provider supports Base mainnet and Base sepolia.\n\n## Notes\n\nFor more information on the **Morpho Protocol**, visit [Morpho Documentation](https://docs.morpho.org/).\n```\n\n----------------------------------------\n\nTITLE: Configuring CdpWalletProvider from an Existing Wallet (AgentKit, TypeScript)\nDESCRIPTION: Initializes a CdpWalletProvider using a pre-existing Wallet object along with API credentials by calling 'configureWithWallet'. This allows for reusing or migrating wallets. Dependencies include '@coinbase/agentkit' and '@coinbase/coinbase-sdk' for the 'Wallet' type. Input: Wallet instance, API key, private key; Output: ready-to-use WalletProvider.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/agentkit/README.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CdpWalletProvider } from \"@coinbase/agentkit\";\nimport { Wallet } from \"@coinbase/coinbase-sdk\";\nconst walletProvider = await CdpWalletProvider.configureWithWallet({\n    wallet,\n    apiKeyName: \"CDP API KEY NAME\",\n    apiKeyPrivate: \"CDP API KEY PRIVATE KEY\",\n});\n```\n\n----------------------------------------\n\nTITLE: Generating Custom Action Provider using AgentKit CLI (Bash)\nDESCRIPTION: Uses the `agentkit generate action-provider` command to scaffold a custom action provider template for an AgentKit project. This command requires the `agentkit` CLI tool to be installed, which is included when bootstrapping projects with `create-onchain-agent` v0.3.0+.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/create-onchain-agent/CHANGELOG.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nagentkit generate action-provider\n```\n\n----------------------------------------\n\nTITLE: Configuring EthAccountWalletProvider RPC URL\nDESCRIPTION: This snippet shows how to configure the `EthAccountWalletProvider` with a specific RPC URL. It uses `eth_account`, `coinbase_agentkit`, and `os` libraries. It relies on the `PRIVATE_KEY` environment variable. The output is an `AgentKit` instance using `EthAccountWalletProvider` configured with the specified RPC URL.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/README.md#_snippet_76\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom eth_account import Account\n\nfrom coinbase_agentkit import (\n    AgentKit,\n    AgentKitConfig,\n    EthAccountWalletProvider,\n    EthAccountWalletProviderConfig\n)\n\nprivate_key = os.environ.get(\"PRIVATE_KEY\")\nassert private_key is not None, \"You must set PRIVATE_KEY environment variable\"\nassert private_key.startswith(\"0x\"), \"Private key must start with 0x hex prefix\"\n\naccount = Account.from_key(private_key)\n\nwallet_provider = EthAccountWalletProvider(\n    config=EthAccountWalletProviderConfig(\n        account=account,\n        rpc_url=\"https://sepolia.base.org\",\n    )\n)\n\nagent_kit = AgentKit(AgentKitConfig(\n    wallet_provider=wallet_provider\n))\n```\n\n----------------------------------------\n\nTITLE: Configuring ViemWalletProvider with Wallet Client (AgentKit, TypeScript)\nDESCRIPTION: Demonstrates initializing a ViemWalletProvider using a Viem wallet client with a private key, EVM chain, and transport. Suitable for any EVM-compatible chain supported by Viem. Requires '@coinbase/agentkit' and 'viem' libraries. Input: constructed wallet client; Output: initialized WalletProvider.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/agentkit/README.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ViemWalletProvider } from \"@coinbase/agentkit\";\nimport { privateKeyToAccount } from \"viem/accounts\";\nimport { baseSepolia } from \"viem/chains\";\nimport { http } from \"viem/transports\";\nimport { createWalletClient } from \"viem\";\n\nconst account = privateKeyToAccount(\n  \"0x4c0883a69102937d6231471b5dbb6208ffd70c02a813d7f2da1c54f2e3be9f38\",\n);\n\nconst client = createWalletClient({\n  account,\n  chain: baseSepolia,\n  transport: http(),\n});\n\nconst walletProvider = new ViemWalletProvider(client);\n```\n\n----------------------------------------\n\nTITLE: Creating AgentKit with custom action providers\nDESCRIPTION: Configures an AgentKit instance with specified action providers. This example uses the CDP API action provider and Pyth action provider to enable specific functionality.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/agentkit/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { cdpApiActionProvider, pythActionProvider } from \"@coinbase/agentkit\";\n\nconst agentKit = await AgentKit.from({\n    walletProvider,\n    actionProviders: [\n        cdpApiActionProvider({\n            apiKeyName: \"CDP API KEY NAME\",\n            apiKeyPrivate: \"CDP API KEY PRIVATE KEY\",\n        }),\n        pythActionProvider(),\n    ],\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies (Bash)\nDESCRIPTION: Installs the required Python packages for the chatbot project using the `uv sync` command. This command synchronizes the virtual environment with the project's specified dependencies.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/examples/openai-agents-sdk-cdp-chatbot/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nuv sync\n```\n\n----------------------------------------\n\nTITLE: Using get_onramp_buy_url Action in Python\nDESCRIPTION: Demonstrates how to call the get_onramp_buy_url action using the OnrampActionProvider. This action generates a URL that directs users to Coinbase's interface for purchasing cryptocurrency.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/coinbase_agentkit/action_providers/onramp/README.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nresult = await provider.get_onramp_buy_url(wallet_provider, {})\n```\n\n----------------------------------------\n\nTITLE: Configuring CdpWalletProvider Using Mnemonic Phrase (AgentKit, TypeScript)\nDESCRIPTION: Initializes a CdpWalletProvider with a user-supplied mnemonic and an optional network ID. Falls back to environment variable or default if networkId is unspecified. Requires '@coinbase/agentkit'. Input: mnemonicPhrase string and networkId (optional); Output: WalletProvider.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/agentkit/README.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CdpWalletProvider } from \"@coinbase/agentkit\";\n\nconst walletProvider = await CdpWalletProvider.configureWithWallet({\n    mnemonicPhrase: \"MNEMONIC PHRASE\",\n    networkId: \"base-sepolia\",\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Python and uv Versions (Bash)\nDESCRIPTION: Verifies the installed versions of Python (requires 3.10+) and the uv package manager using their respective command-line flags. This step ensures the necessary tools are available before proceeding with installation and execution.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/examples/openai-agents-sdk-cdp-chatbot/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython --version\nuv --version\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Compiler Options for Decorators (TypeScript)\nDESCRIPTION: Defines the required TypeScript compiler options in tsconfig.json to support decorators and emit type metadata necessary for AgentKit action creation. The 'experimentalDecorators' and 'emitDecoratorMetadata' flags must be enabled. This enables use of the '@CreateAction' decorator in TypeScript source files. No input or output aside from proper configuration.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/agentkit/README.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"compilerOptions\": {\n        \"experimentalDecorators\": true,\n        \"emitDecoratorMetadata\": true\n    }\n} \n```\n\n----------------------------------------\n\nTITLE: Initializing Allora Action Provider with TypeScript\nDESCRIPTION: Demonstrates how to create an instance of the AlloraActionProvider using the createAlloraActionProvider factory function. Supports default initialization with public keys for development and optional custom configuration including API key and network chain slug. Intended for integration within TypeScript projects.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/agentkit/src/action-providers/allora/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAlloraActionProvider } from \"@coinbase/agentkit\";\n\n// With default configuration\nconst provider = createAlloraActionProvider();\n\n// Or with custom configuration\nconst providerWithConfig = createAlloraActionProvider({\n  apiKey: \"your-api-key\", // optional, defaults to a public, development-only key\n  chainSlug: \"testnet\" // optional, defaults to testnet\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Native Wallet Balance - Wallet\nDESCRIPTION: Gets the native currency balance of the connected wallet.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/README.md#_snippet_66\n\nLANGUAGE: Wallet\nCODE:\n```\nget_balance\n```\n\n----------------------------------------\n\nTITLE: Configuring PrivyWalletProvider for a Server Wallet (AgentKit, TypeScript)\nDESCRIPTION: Initializes PrivyWalletProvider with server wallet configuration including app credentials, chain ID, optional wallet/authorization identifiers. Supports both existing and new wallets. Requires '@coinbase/agentkit'. Input: Privy wallet config object; Output: Promise of configured WalletProvider.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/agentkit/README.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrivyWalletProvider } from \"@coinbase/agentkit\";\n\n// Configure Server Wallet Provider\nconst config = {\n    appId: \"PRIVY_APP_ID\",\n    appSecret: \"PRIVY_APP_SECRET\",\n    chainId: \"84532\", // base-sepolia\n    walletId: \"PRIVY_WALLET_ID\", // optional, otherwise a new wallet will be created\n    authorizationPrivateKey: \"PRIVY_WALLET_AUTHORIZATION_PRIVATE_KEY\", // optional, required if your account is using authorization keys\n    authorizationKeyId: \"PRIVY_WALLET_AUTHORIZATION_KEY_ID\", // optional, only required to create a new wallet if walletId is not provided\n};\n\nconst walletProvider = await PrivyWalletProvider.configureWithWallet(config);\n```\n\n----------------------------------------\n\nTITLE: Retrieving ERC-721 NFT Balance - ERC721\nDESCRIPTION: Retrieves the NFT balance for a specified address and ERC-721 contract.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/README.md#_snippet_25\n\nLANGUAGE: ERC721\nCODE:\n```\nget_balance\n```\n\n----------------------------------------\n\nTITLE: Example of Finding a Protocol with DefiLlama API\nDESCRIPTION: Demonstrates using the find_protocol action to search for protocols related to 'eigen'. The response includes detailed information about matching protocols including TVL, market cap, and metadata.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/agentkit/src/action-providers/defillama/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nPrompt: can you search for an eigen protocol?\n\n-------------------\n[\n  {\n    \"id\": \"3107\",\n    \"name\": \"EigenLayer\",\n    \"address\": \"0xec53bf9167f50cdeb3ae105f56099aaab9061f83\",\n    \"symbol\": \"EIGEN\",\n    \"url\": \"https://www.eigenlayer.xyz/\",\n    \"description\": \"EigenLayer is a protocol built on Ethereum that introduces restaking, a new primitive in cryptoeconomic security. This primitive enables the reuse of ETH on the consensus layer\",\n    \"chain\": \"Ethereum\",\n    \"logo\": \"https://icons.llama.fi/eigenlayer.png\",\n    \"audits\": \"2\",\n    \"audit_note\": null,\n    \"gecko_id\": \"eigenlayer\",\n    \"cmcId\": null,\n    \"category\": \"Restaking\",\n    \"chains\": [\n      \"Ethereum\"\n    ],\n    \"module\": \"eigenlayer/index.js\",\n    \"twitter\": \"eigenlayer\",\n    \"oracles\": [],\n    \"forkedFrom\": [],\n    \"audit_links\": [\n      \"https://docs.eigenlayer.xyz/security/audits\"\n    ],\n    \"github\": [\n      \"Layr-Labs\"\n    ],\n    \"listedAt\": 1686776222,\n    \"slug\": \"eigenlayer\",\n    \"tvl\": 8951735130.458426,\n    \"chainTvls\": {\n      \"Ethereum-staking\": 522332864.5310426,\n      \"Ethereum\": 8951735130.458426,\n      \"staking\": 522332864.5310426\n    },\n    \"change_1h\": -0.8573676649778434,\n    \"change_1d\": -11.65410033967217,\n    \"change_7d\": -14.671214345715782,\n    \"tokenBreakdowns\": {},\n    \"mcap\": 336877554.1087164,\n    \"staking\": 522332864.5310426\n  },\n  {\n    \"id\": \"4075\",\n    \"name\": \"Eigenpie\",\n    \"address\": null,\n    \"symbol\": \"-\",\n    \"url\": \"https://www.eigenlayer.magpiexyz.io\",\n    \"description\": \"Eigenpie is an innovative SubDAO created by Magpie, focusing on the restaking of ETH LSTs via EigenLayer. As a liquid restaking platform for Ethereum, Eigenpie's core mechanism enables users to convert their Liquid Staked ETH tokens into Isolated Liquid Restaked ETH tokens. These are restaked versions of ETH LSTs, created by Eigenpie. This process allows users to earn passive income from Ethereum staking and EigenLayer revenue simultaneously, without requiring a lockup period.\",\n    \"chain\": \"Multi-Chain\",\n    \"logo\": \"https://icons.llama.fi/eigenpie.jpg\",\n    \"audits\": \"2\",\n    \"audit_note\": null,\n    \"gecko_id\": null,\n    \"cmcId\": null,\n    \"category\": \"Liquid Restaking\",\n    \"chains\": [\n      \"Zircuit\",\n      \"Ethereum\"\n    ],\n    \"oracles\": [\n      \"Chainlink\"\n    ],\n    \"forkedFrom\": [],\n    \"module\": \"eigenpie/index.js\",\n    \"twitter\": \"Eigenpiexyz_io\",\n    \"parentProtocol\": \"parent#magpie-ecosystem\",\n    \"audit_links\": [\n      \"https://github.com/peckshield/publications/blob/master/audit_reports/PeckShield-Audit-Report-Eigenpie-v1.0.pdf\"\n    ],\n    \"listedAt\": 1706537731,\n    \"slug\": \"eigenpie\",\n    \"tvl\": 552741078.9743935,\n    \"chainTvls\": {\n      \"Zircuit\": 341269361.5768466,\n      \"Ethereum\": 211471717.39754686\n    },\n    \"change_1h\": 3.8755075071811547,\n    \"change_1d\": -7.644740844217878,\n    \"change_7d\": -13.991325628506374,\n    \"tokenBreakdowns\": {},\n    \"mcap\": null\n  }\n]\n-------------------\nI found two protocols related to \"Eigen\":\n\n1. **EigenLayer**\n   - **Description:** EigenLayer is a protocol built on Ethereum that introduces restaking, enabling the reuse of ETH on the consensus layer for cryptoeconomic security.\n   - **Symbol:** EIGEN\n   - **Chain:** Ethereum\n   - **TVL:** $8,951,735,130.46\n   - **Market Cap:** $336,877,554.11\n   - **1h Change:** -0.86%\n   - **1d Change:** -11.65%\n   - **URL:** [EigenLayer](https://www.eigenlayer.xyz/)\n   - **Logo:** ![EigenLayer Logo](https://icons.llama.fi/eigenlayer.png)\n   - **Audit Information:** [Audit Links](https://docs.eigenlayer.xyz/security/audits)\n\n2. **Eigenpie**\n   - **Description:** Eigenpie is an innovative SubDAO created by Magpie, focusing on the restaking of ETH LSTs via EigenLayer, allowing users to earn passive income from both Ethereum staking and EigenLayer revenue.\n   - **Chain:** Multi-Chain (Zircuit, Ethereum)\n   - **TVL:** $552,741,078.97\n   - **1h Change:** +3.88%\n   - **1d Change:** -7.64%\n   - **URL:** [Eigenpie](https://www.eigenlayer.magpiexyz.io)\n   - **Logo:** ![Eigenpie Logo](https://icons.llama.fi/eigenpie.jpg)\n   - **Audit Information:** [Audit Report](https://github.com/peckshield/publications/blob/master/audit_reports/PeckShield-Audit-Report-Eigenpie-v1.0.pdf)\n\nLet me know if you would like more details on either protocol!\n-------------------\n```\n\n----------------------------------------\n\nTITLE: Configuring Gas Parameters in ViemWalletProvider (AgentKit, TypeScript)\nDESCRIPTION: Shows advanced initialization of ViemWalletProvider with custom gas estimation and fee multipliers for fine-tuning transaction costs. Useful for developers needing precise control over EVM gas settings. Dependencies: '@coinbase/agentkit', 'viem', and related packages. Input: wallet client, multiplier options; Output: configured WalletProvider.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/agentkit/README.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ViemWalletProvider } from \"@coinbase/agentkit\";\nimport { privateKeyToAccount } from \"viem/accounts\";\nimport { baseSepolia } from \"viem/chains\";\nimport { http } from \"viem/transports\";\nimport { createWalletClient } from \"viem\";\n\nconst account = privateKeyToAccount(\n  \"0x4c0883a69102937d6231471b5dbb6208ffd70c02a813d7f2da1c54f2e3be9f38\",\n);\n\nconst client = createWalletClient({\n  account,\n  chain: baseSepolia,\n  transport: http(),\n});\n\nconst walletProvider = new ViemWalletProvider(client, {\n    gasLimitMultiplier: 2.0,  // Adjusts gas limit estimation\n    feePerGasMultiplier: 2.0, // Adjusts max fee per gas\n});\n```\n\n----------------------------------------\n\nTITLE: Executing Token Swap - CDP Wallet\nDESCRIPTION: Executes a token swap between two assets at current market rates on mainnet networks.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/README.md#_snippet_15\n\nLANGUAGE: CDP Wallet\nCODE:\n```\ntrade\n```\n\n----------------------------------------\n\nTITLE: Generating AgentKit Components for Onchain Projects (Shell)\nDESCRIPTION: These agentkit CLI shell commands generate various components such as wallet providers and action providers within an onchain agent project. They also support setting up framework-agnostic or framework-specific agent configurations via 'prepare' and 'create-agent' generators. Prerequisites: 'agentkit' CLI installed globally through create-onchain-agent. Inputs: specific generator names; Outputs: files and scaffolding relevant to the selected component.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/create-onchain-agent/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# Generate a custom wallet provider\nagentkit generate wallet-provider\n\n# Generate a custom action provider\nagentkit generate action-provider\n\n# Generate framework-agnostic AgentKit setup.\nagentkit generate prepare\n\n# Generate framework-specific agent creation\nagentkit generate create-agent\n```\n\n----------------------------------------\n\nTITLE: Setting up AgentKit MCP Server - TypeScript\nDESCRIPTION: This TypeScript code snippet demonstrates how to initialize AgentKit with CDP API keys and set up a Model Context Protocol server. It integrates AgentKit's tools into the MCP server, handling both 'ListTools' and 'CallTool' requests via a stdio transport.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/framework-extensions/model-context-protocol/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Server } from \"@modelcontextprotocol/sdk/server/index.js\";\nimport { StdioServerTransport } from \"@modelcontextprotocol/sdk/server/stdio.js\";\nimport { CallToolRequestSchema, ListToolsRequestSchema } from \"@modelcontextprotocol/sdk/types.js\";\nimport { getMcpTools } from \"@coinbase/agentkit-model-context-protocol\";\nimport { AgentKit } from \"@coinbase/agentkit\";\n\nconst agentKit = await AgentKit.from({\n  cdpApiKeyName: \"CDP API KEY NAME\",\n  cdpApiKeyPrivateKey: \"CDP API KEY PRIVATE KEY\",\n});\n\nconst { tools, toolHandler } = await getMcpTools(agentKit);\n\nconst server = new Server(\n  {\n    name: \"agentkit\",\n    version: \"0.1.0\",\n  },\n  {\n    capabilities: {\n      tools: {},\n    },\n  },\n);\n\nserver.setRequestHandler(ListToolsRequestSchema, async () => {\n  return {\n    tools,\n  };\n});\n\nserver.setRequestHandler(CallToolRequestSchema, async (request) => {\n  try {\n    return toolHandler(request.params.name, request.params.arguments);\n  } catch (error) {\n    throw new Error(`Tool ${name} failed: ${error}`);\n  }\n});\n\nconst transport = new StdioServerTransport();\n\nawait server.connect(transport);\n```\n\n----------------------------------------\n\nTITLE: Initializing CdpWalletProvider\nDESCRIPTION: This snippet demonstrates how to initialize a CdpWalletProvider using API keys. It requires the `coinbase_agentkit` library. The user must provide their CDP API key name and private key, and optionally the network ID. The output is a configured CdpWalletProvider instance.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/README.md#_snippet_68\n\nLANGUAGE: python\nCODE:\n```\nfrom coinbase_agentkit import CdpWalletProvider, CdpWalletProviderConfig\n\nwallet_provider = CdpWalletProvider(CdpWalletProviderConfig(\n    api_key_name=\"CDP API KEY NAME\",\n    api_key_private=\"CDP API KEY PRIVATE KEY\",\n    network_id=\"base-mainnet\",\n))\n```\n\n----------------------------------------\n\nTITLE: Implementing New Action Logic: AgentKit/TypeScript\nDESCRIPTION: Illustrates the structure for implementing a new action method within the OnrampActionProvider class. It uses the `@CreateAction` decorator to register the method as an available action, specifying its name, description, and input schema.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/agentkit/src/action-providers/onramp/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@CreateAction({\n  name: \"new_action\",\n  description: \"Description of what your action does\",\n  schema: NewActionSchema,\n})\nasync newAction(\n  walletProvider: EvmWalletProvider,\n  args: z.infer<typeof NewActionSchema>\n): Promise<string> {\n  // Implement your action logic\n}\n```\n\n----------------------------------------\n\nTITLE: Borrowing Assets from Compound - Compound\nDESCRIPTION: Borrows base assets (WETH or USDC) from Compound using supplied collateral.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/README.md#_snippet_20\n\nLANGUAGE: Compound\nCODE:\n```\nborrow\n```\n\n----------------------------------------\n\nTITLE: Configuring ZeroDev Wallet - TypeScript\nDESCRIPTION: This snippet configures the ZeroDev Wallet Provider with a CDP (Coinbase Dedicated Pool) EVM wallet as the signer. It initializes `zeroDevConfig` with the signer from `evmWalletProvider`, the ZeroDev project ID, entry point version and network ID.  It utilizes environment variables and sets the network for the CDP wallet.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/examples/langchain-zerodev-chatbot/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Configure ZeroDev Wallet Provider with CDP Wallet as signer\nconst zeroDevConfig = {\n  signer: evmWalletProvider.toSigner(),\n  projectId: process.env.ZERODEV_PROJECT_ID!,\n  entryPointVersion: \"0.7\" as const,\n  // Use the same network as the CDP wallet\n  networkId: process.env.NETWORK_ID || \"base-mainnet\",\n};\n\n// Initialize ZeroDev Wallet Provider\nconst zeroDevWalletProvider = await ZeroDevWalletProvider.configureWithWallet(zeroDevConfig);\n```\n\n----------------------------------------\n\nTITLE: Minting ERC-721 NFT Token - ERC721\nDESCRIPTION: Creates a new NFT token and assigns it to a specified destination address.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/README.md#_snippet_27\n\nLANGUAGE: ERC721\nCODE:\n```\nmint\n```\n\n----------------------------------------\n\nTITLE: Deploying Smart Contract - CDP Wallet\nDESCRIPTION: Deploys a custom smart contract using specified Solidity version and constructor arguments.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/README.md#_snippet_12\n\nLANGUAGE: CDP Wallet\nCODE:\n```\ndeploy_contract\n```\n\n----------------------------------------\n\nTITLE: Exporting CdpWalletProvider Wallet\nDESCRIPTION: This snippet demonstrates how to export a wallet using the `export_wallet` method of the `CdpWalletProvider`.  It requires `coinbase_agentkit` and a `CdpWalletProvider` instance, typically initialized using a mnemonic phrase. The output is the wallet data.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/README.md#_snippet_71\n\nLANGUAGE: python\nCODE:\n```\nfrom coinbase_agentkit import CdpWalletProvider\n\nwallet_provider = CdpWalletProvider(CdpWalletProviderConfig(\n    mnemonic_phrase=\"MNEMONIC PHRASE\",\n    network_id=\"base-sepolia\",\n))\n\nwallet_data = wallet_provider.export_wallet()\n```\n\n----------------------------------------\n\nTITLE: Importing CdpWalletProvider Wallet\nDESCRIPTION: This snippet demonstrates how to import a wallet from a `WalletData` JSON string using `CdpWalletProvider`. It requires the `coinbase_agentkit` library, the API key and private key, and a `WalletData` JSON string. The output is a configured `CdpWalletProvider` instance.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/README.md#_snippet_72\n\nLANGUAGE: python\nCODE:\n```\nfrom coinbase_agentkit import CdpWalletProvider, CdpWalletProviderConfig\n\nwallet_provider = CdpWalletProvider(CdpWalletProviderConfig(\n    wallet_data=\"WALLET DATA JSON STRING\",\n    api_key_name=\"CDP API KEY NAME\",\n    api_key_private=\"CDP API KEY PRIVATE KEY\",\n))\n```\n\n----------------------------------------\n\nTITLE: Importing a Wallet from WalletData in CdpWalletProvider (AgentKit, TypeScript)\nDESCRIPTION: Shows how to import an existing wallet's exported data into CdpWalletProvider by passing a JSON string and required API credentials. Ensures continuity and recovery of wallets. Requires '@coinbase/agentkit'. Input: cdpWalletData string, API credentials; Output: initialized WalletProvider.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/agentkit/README.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CdpWalletProvider } from \"@coinbase/agentkit\";\n\nconst walletProvider = await CdpWalletProvider.configureWithWallet({\n    cdpWalletData: \"WALLET DATA JSON STRING\",\n    apiKeyName: \"CDP API KEY NAME\",\n    apiKeyPrivate: \"CDP API KEY PRIVATE KEY\",\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Privy (Solana) Wallet\nDESCRIPTION: This snippet configures `PrivyWalletProvider` for Solana-based operations. The configuration includes `appId`, `appSecret`, `chainType` (set to \"solana\"), `networkId`, `walletId`, `authorizationPrivateKey`, and `authorizationKeyId`. This sets up a Privy wallet for Solana-based actions.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/agentkit/README.md#_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrivyWalletProvider, PrivyWalletConfig } from \"@coinbase/agentkit\";\n\n// Configure Wallet Provider\nconst config: PrivyWalletConfig = {\n    appId: \"PRIVY_APP_ID\",\n    appSecret: \"PRIVY_APP_SECRET\",\n    chainType: \"solana\", // optional, defaults to \"evm\". Make sure to set this to \"solana\" if you want to use Solana!\n    networkId: \"solana-devnet\", // optional, defaults to \"solana-devnet\"\n    walletId: \"PRIVY_WALLET_ID\", // optional, otherwise a new wallet will be created\n    authorizationPrivateKey: PRIVY_WALLET_AUTHORIZATION_PRIVATE_KEY, // optional, required if your account is using authorization keys\n    authorizationKeyId: PRIVY_WALLET_AUTHORIZATION_KEY_ID, // optional, only required to create a new wallet if walletId is not provided\n};\n\nconst walletProvider = await PrivyWalletProvider.configureWithWallet(config);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Compound Portfolio Details - Compound\nDESCRIPTION: Retrieves portfolio details including collateral balances and borrowed amounts.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/README.md#_snippet_22\n\nLANGUAGE: Compound\nCODE:\n```\nget_portfolio\n```\n\n----------------------------------------\n\nTITLE: Supplying Assets to Compound - Compound\nDESCRIPTION: Supplies collateral assets (WETH, CBETH, CBBTC, WSTETH, or USDC) to Compound.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/README.md#_snippet_18\n\nLANGUAGE: Compound\nCODE:\n```\nsupply\n```\n\n----------------------------------------\n\nTITLE: Configuring CdpWalletProvider Gas Parameters\nDESCRIPTION: This snippet demonstrates how to configure gas parameters for the `CdpWalletProvider`. It utilizes the `gas` parameter in the `CdpWalletProviderConfig`. Gas parameters only impact the `wallet_provider.send_transaction` behavior.  The output is a configured `CdpWalletProvider` instance.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/README.md#_snippet_73\n\nLANGUAGE: python\nCODE:\n```\nfrom coinbase_agentkit import CdpWalletProvider, CdpWalletProviderConfig\n\nwallet_provider = CdpWalletProvider(CdpWalletProviderConfig(\n    wallet_data=\"WALLET DATA JSON STRING\",\n    api_key_name=\"CDP API KEY NAME\",\n    api_key_private=\"CDP API KEY PRIVATE KEY\",\n    gas={\n        \"gas_limit_multiplier\": 2.0,   # Adjusts gas limit estimation\n        \"fee_per_gas_multiplier\": 2.0  # Adjusts max fee per gas\n    }\n))\n```\n\n----------------------------------------\n\nTITLE: Retrieving Wallet Details - Wallet\nDESCRIPTION: Retrieves wallet address, network info, balances, and provider details.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/README.md#_snippet_65\n\nLANGUAGE: Wallet\nCODE:\n```\nget_wallet_details\n```\n\n----------------------------------------\n\nTITLE: Retrieving ERC-20 Token Balance - ERC20\nDESCRIPTION: Retrieves the token balance for a specified address and ERC-20 contract.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/README.md#_snippet_23\n\nLANGUAGE: ERC20\nCODE:\n```\nget_balance\n```\n\n----------------------------------------\n\nTITLE: Exporting a Wallet Using CdpWalletProvider (AgentKit, TypeScript)\nDESCRIPTION: Demonstrates how to export wallet data after configuring CdpWalletProvider from mnemonic and network. Useful for persisting and backup. Dependencies: '@coinbase/agentkit'. Input: provider instance; Output: wallet export data (JSON object/string).\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/agentkit/README.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CdpWalletProvider } from \"@coinbase/agentkit\";\n\nconst walletProvider = await CdpWalletProvider.configureWithWallet({\n    mnemonicPhrase: \"MNEMONIC PHRASE\",\n    networkId: \"base-sepolia\",\n});\n\nconst walletData = await walletProvider.exportWallet();\n```\n\n----------------------------------------\n\nTITLE: Generating Audio - Hyperbolic\nDESCRIPTION: Generate text-to-speech audio.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/README.md#_snippet_30\n\nLANGUAGE: Hyperbolic\nCODE:\n```\ngenerate_audio\n```\n\n----------------------------------------\n\nTITLE: Exporting Privy Wallet Information\nDESCRIPTION: This snippet illustrates how to export wallet information using the `PrivyWalletProvider`. It calls the `exportWallet` method, which returns different data formats based on the wallet type. For server wallets, it includes `walletId`, `authorizationKey`, and `chainId`. For embedded wallets, it includes `walletId`, `networkId`, and `chainId`. This data is important for server-side operations and wallet management.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/agentkit/README.md#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nconst walletData = await walletProvider.exportWallet();\n\n// For server wallets, walletData will be in the following format:\n{\n    walletId: string;\n    authorizationKey: string | undefined;\n    chainId: string | undefined;\n}\n\n// For embedded wallets, walletData will be in the following format:\n{\n    walletId: string;\n    networkId: string;\n    chainId: string | undefined;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Messari Action Provider in TypeScript\nDESCRIPTION: Demonstrates how to initialize the Messari Action Provider programmatically in TypeScript by passing the API key directly to the `messariActionProvider` function. This method requires importing the function from `@coinbase/agentkit` and providing your specific Messari API key.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/agentkit/src/action-providers/messari/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { messariActionProvider } from \"@coinbase/agentkit\";\n\nconst provider = messariActionProvider({\n  apiKey: \"your_messari_api_key\",\n});\n```\n\n----------------------------------------\n\nTITLE: Checking GPU Resource Status - Hyperbolic\nDESCRIPTION: Check status of GPU resources.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/README.md#_snippet_34\n\nLANGUAGE: Hyperbolic\nCODE:\n```\nget_gpu_status\n```\n\n----------------------------------------\n\nTITLE: Install Agentkit LangChain Packages - npm\nDESCRIPTION: Installs the necessary Node.js packages for the AgentKit LangChain extension using npm. This includes core libraries for AgentKit, LangChain, LangGraph, and OpenAI, enabling agentic workflows with onchain interactions.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/framework-extensions/langchain/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @coinbase/agentkit-langchain @coinbase/agentkit @langchain @langchain/langgraph @langchain/openai\n```\n\n----------------------------------------\n\nTITLE: Configuring ZeroDev with Privy\nDESCRIPTION: This snippet configures the `ZeroDevWalletProvider` using `PrivyWalletProvider` as the signer. It initializes a `PrivyWalletProvider` and then uses its `toSigner()` method to configure the `ZeroDevWalletProvider`. It includes `appId`, `appSecret`, `chainId`, `projectId`, `entryPointVersion`, and `networkId`. This setup allows the ZeroDev wallet to utilize the functionality of the Privy wallet.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/agentkit/README.md#_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ZeroDevWalletProvider, PrivyWalletProvider } from \"@coinbase/agentkit\";\n\n// First create a Privy wallet provider as the signer\nconst privyWalletProvider = await PrivyWalletProvider.configureWithWallet({\n    appId: \"PRIVY_APP_ID\",\n    appSecret: \"PRIVY_APP_SECRET\",\n    chainId: \"8453\", // base-mainnet\n});\n\n// Configure ZeroDev Wallet Provider with Privy signer\nconst walletProvider = await ZeroDevWalletProvider.configureWithWallet({\n    signer: privyWalletProvider.toSigner(),\n    projectId: \"ZERODEV_PROJECT_ID\",\n    entryPointVersion: \"0.7\" as const,\n    networkId: \"base-mainnet\",\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring ZeroDev with Viem\nDESCRIPTION: This snippet demonstrates how to configure the `ZeroDevWalletProvider` using `ViemWalletProvider` as the signer. It sets up a Viem client using a private key. The  `ViemWalletProvider` is then used as a signer for `ZeroDevWalletProvider`. The configuration sets `projectId`, `entryPointVersion`, and `networkId`.  This allows the ZeroDev wallet to sign transactions using a Viem-based wallet.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/agentkit/README.md#_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ZeroDevWalletProvider, ViemWalletProvider } from \"@coinbase/agentkit\";\nimport { privateKeyToAccount } from \"viem/accounts\";\nimport { base } from \"viem/chains\";\nimport { createWalletClient, http } from \"viem\";\n\n// First create a Viem wallet provider as the signer\nconst account = privateKeyToAccount(\"PRIVATE_KEY\");\n\nconst viemWalletProvider = new ViemWalletProvider(\n  createWalletClient({\n    account,\n    chain: base,\n    transport: http(),\n  })\n);\n\n// Configure ZeroDev Wallet Provider with Viem signer\nconst walletProvider = await ZeroDevWalletProvider.configureWithWallet({\n    signer: viemWalletProvider.toSigner(),\n    projectId: \"ZERODEV_PROJECT_ID\",\n    entryPointVersion: \"0.7\" as const,\n    networkId: \"base-mainnet\",\n});\n```\n\n----------------------------------------\n\nTITLE: Uploading Data to Nillion SecretVault - Nillion\nDESCRIPTION: Uploads data into the Nillion SecretVault using a specified schema UUID.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/README.md#_snippet_45\n\nLANGUAGE: Nillion\nCODE:\n```\ndata_upload\n```\n\n----------------------------------------\n\nTITLE: Initializing FlaunchActionProvider - TypeScript\nDESCRIPTION: This snippet demonstrates how to initialize the FlaunchActionProvider. It requires a Pinata JWT for IPFS uploads.  The provider interacts with various contracts to facilitate token operations on the Base network.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/agentkit/src/action-providers/flaunch/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst provider = new FlaunchActionProvider({\n  pinataJwt: \"your-pinata-jwt\", // Required for IPFS uploads\n});\n```\n\n----------------------------------------\n\nTITLE: Creating New Schema - Nillion\nDESCRIPTION: Creates a new schema in the Nillion SecretVault based on a natural language description.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/README.md#_snippet_44\n\nLANGUAGE: Nillion\nCODE:\n```\ncreate_schema\n```\n\n----------------------------------------\n\nTITLE: Generating Image - Hyperbolic\nDESCRIPTION: Generate images using AI models.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/README.md#_snippet_29\n\nLANGUAGE: Hyperbolic\nCODE:\n```\ngenerate_image\n```\n\n----------------------------------------\n\nTITLE: Installing and Building the Chatbot Packages Using Bash\nDESCRIPTION: This snippet shows the commands to install necessary dependencies and build the local packages required for running the CDP Agentkit LangChain Twitter chatbot example. It highlights installing npm packages and compiling the TypeScript code.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/examples/langchain-twitter-chatbot/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Fetching On-Chain Data from Base - CDP API\nDESCRIPTION: Fetches on-chain data from Base blockchain explorer via CDP API.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/README.md#_snippet_17\n\nLANGUAGE: CDP API\nCODE:\n```\nfetch_base_scan\n```\n\n----------------------------------------\n\nTITLE: Configuring PrivyWalletProvider with Custom Solana Connection in TypeScript\nDESCRIPTION: This snippet demonstrates how to configure the PrivyWalletProvider by passing a custom Solana network connection. It requires importing Connection from @solana/web3.js and PrivyWalletProvider and PrivyWalletConfig from @coinbase/agentkit. The configuration object accepts appId, appSecret, connection instance, chainType set as \"solana\", networkId for specifying network environment, walletId for identifying or creating a wallet, and optional authorization keys if the account uses them. The asynchronous call to configureWithWallet initializes and returns a configured wallet provider instance.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/agentkit/README.md#_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrivyWalletProvider, PrivyWalletConfig } from \"@coinbase/agentkit\";\n\nconst connection = new Connection(\"YOUR_RPC_URL\");\n\n// Configure Wallet Provider\nconst config: PrivyWalletConfig = {\n    appId: \"PRIVY_APP_ID\",\n    appSecret: \"PRIVY_APP_SECRET\",\n    connection,\n    chainType: \"solana\", // optional, defaults to \"evm\". Make sure to set this to \"solana\" if you want to use Solana!\n    networkId: \"solana-devnet\", // optional, defaults to \"solana-devnet\"\n    walletId: \"PRIVY_WALLET_ID\", // optional, otherwise a new wallet will be created\n    authorizationPrivateKey: PRIVY_WALLET_AUTHORIZATION_PRIVATE_KEY, // optional, required if your account is using authorization keys\n    authorizationKeyId: PRIVY_WALLET_AUTHORIZATION_KEY_ID, // optional, only required to create a new wallet if walletId is not provided\n};\n\nconst walletProvider = await PrivyWalletProvider.configureWithWallet(config);\n```\n\n----------------------------------------\n\nTITLE: Setting Up a New Project After Generation\nDESCRIPTION: Commands to navigate into the newly created project directory, install dependencies using Poetry, configure environment variables, and run the chatbot.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/create-onchain-agent/README.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncd my-project\npoetry install\nmv .env.local .env\npoetry run python chatbot.py\n```\n\n----------------------------------------\n\nTITLE: Executing Remote Shell Commands - SSH\nDESCRIPTION: Executes shell commands on a remote server via SSH.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/README.md#_snippet_51\n\nLANGUAGE: SSH\nCODE:\n```\nremote_shell\n```\n\n----------------------------------------\n\nTITLE: Establishing SSH Connection - SSH\nDESCRIPTION: Establishes an SSH connection to a remote server.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/README.md#_snippet_50\n\nLANGUAGE: SSH\nCODE:\n```\nssh_connect\n```\n\n----------------------------------------\n\nTITLE: Configuring EthAccountWalletProvider Gas Parameters\nDESCRIPTION: Demonstrates how to configure gas parameters for the `EthAccountWalletProvider`. It requires `eth_account`, `coinbase_agentkit`, and `os` libraries and relies on the `PRIVATE_KEY` environment variable. It uses the `gas` parameter within the `EthAccountWalletProviderConfig`. The output is an `AgentKit` instance using `EthAccountWalletProvider`.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/README.md#_snippet_75\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom eth_account import Account\n\nfrom coinbase_agentkit import (\n    AgentKit,\n    AgentKitConfig,\n    EthAccountWalletProvider,\n    EthAccountWalletProviderConfig\n)\n\nprivate_key = os.environ.get(\"PRIVATE_KEY\")\nassert private_key is not None, \"You must set PRIVATE_KEY environment variable\"\nassert private_key.startswith(\"0x\"), \"Private key must start with 0x hex prefix\"\n\naccount = Account.from_key(private_key)\n\nwallet_provider = EthAccountWalletProvider(\n    config=EthAccountWalletProviderConfig(\n        account=account,\n        chain_id=\"84532\",\n        gas={\n            \"gas_limit_multiplier\": 2,\n            \"fee_per_gas_multiplier\": 2\n        }\n    )\n)\n\nagent_kit = AgentKit(AgentKitConfig(\n    wallet_provider=wallet_provider\n))\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies using uv in Bash\nDESCRIPTION: This command uses the 'uv sync' tool to install or update the project dependencies based on the project's configuration file (e.g., pyproject.toml). It ensures all required packages for the chatbot are present.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/examples/langchain-cdp-chatbot-with-nillion-secretvault/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nuv sync\n```\n\n----------------------------------------\n\nTITLE: Defining an Action Schema using Pydantic (Python)\nDESCRIPTION: This snippet demonstrates how to define the input schema for a custom action using Pydantic's BaseModel. The schema specifies the expected structure and types of arguments that the action will receive.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/README.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom pydantic import BaseModel\n\nclass MyActionSchema(BaseModel):\n    my_field: str\n```\n\n----------------------------------------\n\nTITLE: Running the Chatbot Application using uv in Bash\nDESCRIPTION: Executes the Python chatbot script (`chatbot.py`) using the 'uv run' command. This command manages the execution environment and runs the application. Before running, ensure that the required environment variables (CDP_API_KEY_NAME, CDP_API_KEY_PRIVATE_KEY, OPENAI_API_KEY, NETWORK_ID, NILLION_ORG_ID, NILLION_SECRET_KEY) are correctly set.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/examples/langchain-cdp-chatbot-with-nillion-secretvault/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nuv run chatbot.py\n```\n\n----------------------------------------\n\nTITLE: Initializing CdpWalletProvider With Mnemonic\nDESCRIPTION: This snippet demonstrates how to configure a `CdpWalletProvider` from a mnemonic phrase. It requires the `coinbase_agentkit` library and the user must supply a mnemonic phrase. It utilizes the `network_id` parameter for the network. The output is a configured `CdpWalletProvider` instance.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/README.md#_snippet_70\n\nLANGUAGE: python\nCODE:\n```\nfrom coinbase_agentkit import CdpWalletProvider, CdpWalletProviderConfig\n\nwallet_provider = CdpWalletProvider(CdpWalletProviderConfig(\n    mnemonic_phrase=\"MNEMONIC PHRASE\",\n    network_id=\"base-sepolia\",\n))\n```\n\n----------------------------------------\n\nTITLE: Deploying ERC-20 Token Contract - CDP Wallet\nDESCRIPTION: Deploys a standard ERC-20 token contract with configurable name, symbol, and initial supply.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/README.md#_snippet_14\n\nLANGUAGE: CDP Wallet\nCODE:\n```\ndeploy_token\n```\n\n----------------------------------------\n\nTITLE: Generating Specific Action Providers - Bash\nDESCRIPTION: These examples demonstrate using the `generate:action-provider` script in CLI mode to create action providers with specific configurations. Options like `--name` (-n), `--protocol-family` (-p), and `--wallet-provider` (-w) are used to define the provider's characteristics, specifying the name, supported protocols (e.g., 'all', 'evm'), and an optional wallet provider.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/agentkit/scripts/generate-action-provider/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm run generate:action-provider -- -n example -p all\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm run generate:action-provider -- -n example -p evm\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm run generate:action-provider -- -n example -p evm -w CdpWalletProvider\n```\n\n----------------------------------------\n\nTITLE: Listing Active SSH Connections - SSH\nDESCRIPTION: Lists active SSH connections.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/README.md#_snippet_53\n\nLANGUAGE: SSH\nCODE:\n```\nssh_list_connections\n```\n\n----------------------------------------\n\nTITLE: Creating Superfluid Token Streaming Flow - Superfluid\nDESCRIPTION: Creates a new token streaming flow to a recipient address.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/README.md#_snippet_58\n\nLANGUAGE: Superfluid\nCODE:\n```\ncreate_flow\n```\n\n----------------------------------------\n\nTITLE: Running the Example - Bash\nDESCRIPTION: This is the command used to run the example application. It first installs the necessary dependencies for the specific example and then uses `npm start` to execute the application. This command should be executed from within the `typescript/examples/langchain-zerodev-chatbot` directory.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/examples/langchain-zerodev-chatbot/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Starting the AgentKit Chatbot Example (Bash)\nDESCRIPTION: Starts the Langchain Smart Wallet chatbot example using `npm start` from within the specific example directory (`typescript/examples/langchain-smart-wallet-chatbot`). This command executes the built application, allowing interaction with the Smart Wallet agent, typically prompting for a mode selection (e.g., 'chat mode').\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/examples/langchain-smart-wallet-chatbot/README.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Running the Chatbot using make in Bash\nDESCRIPTION: This snippet is used to run the chatbot using the make command. It assumes a Makefile is present with the run target defined and the necessary environment variables are set.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/examples/langchain-twitter-chatbot/README.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nmake run\n```\n\n----------------------------------------\n\nTITLE: Example of Getting Protocol Details with DefiLlama API\nDESCRIPTION: Shows how to use the get_protocol action to fetch detailed information about a specific protocol (Jito). The response includes protocol metadata, TVL data, token information, and other relevant details.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/agentkit/src/action-providers/defillama/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nPrompt: please use get_protocol for jito\n\n-------------------\n{\n  \"id\": \"2308\",\n  \"name\": \"Jito\",\n  \"address\": \"solana:jtojtomepa8beP8AuQc6eXt5FriJwfFMwQx2v2f9mCL\",\n  \"symbol\": \"JTO\",\n  \"url\": \"https://jito.network\",\n  \"description\": \"MEV-Boosted Staking Rewards\",\n  \"chain\": \"Solana\",\n  \"logo\": \"https://icons.llama.fi/jito.png\",\n  \"audits\": \"2\",\n  \"audit_note\": null,\n  \"gecko_id\": \"jito-governance-token\",\n  \"cmcId\": null,\n  \"category\": \"Liquid Staking\",\n  \"chains\": [\n    \"Solana\"\n  ],\n  \"module\": \"jito/index.js\",\n  \"twitter\": \"jito_sol\",\n  \"forkedFrom\": [\n    \"SPL Stake Pool\"\n  ],\n  \"audit_links\": [\n    \"https://spl.solana.com/stake-pool#security-audits\",\n    \"https://2926710696-files.gitbook.io/~/files/v0/b/gitbook-x-prod.appspot.com/o/spaces%2Ffrb9MGTK6eZJlEQJyylq%2Fuploads%2F1jfEDpGcd5YlnHusbKYO%2FNeodymeJito.pdf\"\n  ],\n  \"oracles\": [],\n  \"oraclesBreakdown\": [\n    {\n      \"name\": \"Switchboard\",\n      \"type\": \"Secondary\",\n      \"proof\": [\n        \"https://github.com/DefiLlama/defillama-server/pull/9193\"\n      ]\n    }\n  ],\n  \"listedAt\": 1669265429,\n  \"github\": [\n    \"jito-foundation\"\n  ],\n  \"chainTvls\": {\n    \"Solana\": {\n      \"tvl\": [\n        {\n          \"date\": 1741842011,\n          \"totalLiquidityUSD\": 2050645658.69502\n        },\n        ...\n      ],\n      \"tokensInUsd\": [\n        {\n          \"date\": 1741842011,\n          \"tokens\": {\n            \"SOL\": 2050645658.69502\n          }\n        },\n        ...\n      ],\n      \"tokens\": [\n        {\n          \"date\": 1741842011,\n          \"tokens\": {\n            \"SOL\": 16533464.95763\n          }\n        },\n        ...\n      ]\n    }\n  },\n  \"tvl\": [\n    {\n      \"date\": 1741842011,\n      \"totalLiquidityUSD\": 2050645658.69502\n    },\n    ...\n  ],\n  \"tokensInUsd\": [\n    {\n      \"date\": 1741842011,\n      \"tokens\": {\n        \"SOL\": 2050645658.69502\n      }\n    },\n    ...\n  ],\n  \"tokens\": [\n    {\n      \"date\": 1741842011,\n      \"tokens\": {\n        \"SOL\": 16533464.95763\n      }\n    },\n    ...\n  ],\n  \"currentChainTvls\": {\n    \"Solana\": 2050645658.69502\n  },\n  \"raises\": [],\n  \"metrics\": {},\n  \"mcap\": 642311894.5063655,\n  \"methodology\": \"Uses the SPL Stake Pool SDK to fetch the total supply of deposited SOL into the Jito Stake Pool\"\n}\n-------------------\nHere are the details for the Jito protocol:\n\n- **Name:** Jito\n- **Address:** [jtojtomepa8beP8AuQc6eXt5FriJwfFMwQx2v2f9mCL](https://explorer.solana.com/address/jtojtomepa8beP8AuQc6eXt5FriJwfFMwQx2v2f9mCL)\n- **Symbol:** JTO\n- **Description:** MEV-Boosted Staking Rewards\n- **Category:** Liquid Staking\n- **Chains:** Solana\n- **Current TVL:** $2,050,645,658.70\n- **Market Cap:** $642,311,894.51\n- **Audits:** 2\n- **Audit Links:**\n  - [Audit 1](https://spl.solana.com/stake-pool#security-audits)\n  - [Audit 2](https://2926710696-files.gitbook.io/~/files/v0/b/gitbook-x-prod.appspot.com/o/spaces%2Ffrb9MGTK6eZJlEQJyylq%2Fuploads%2F1jfEDpGcd5YlnHusbKYO%2FNeodymeJito.pdf)\n- **Twitter:** [@jito_sol](https://twitter.com/jito_sol)\n- **Website:** [jito.network](https://jito.network)\n  \n![Jito Logo](https://icons.llama.fi/jito.png)\n\n### Historical TVL Data:\n- **Date:** 2023-08-07 - TVL: $2,050,645,658.70\n- **Date:** 2023-08-06 - TVL: $2,073,190,249.57\n- **Date:** 2023-08-05 - TVL: $1,878,593,066.31\n- **Date:** 2023-08-04 - TVL: $2,060,444,245.40\n- **Date:** 2023-08-03 - TVL: $2,266,226,563.53\n\nFor more technical inquiries, the protocol utilizes the SPL Stake Pool SDK for its operations.\n-------------------\n```\n\n----------------------------------------\n\nTITLE: Getting Spending History - Hyperbolic\nDESCRIPTION: Get spending history.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/README.md#_snippet_39\n\nLANGUAGE: Hyperbolic\nCODE:\n```\nget_spend_history\n```\n\n----------------------------------------\n\nTITLE: Withdrawing Assets from Compound - Compound\nDESCRIPTION: Withdraws previously supplied collateral assets from Compound.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/README.md#_snippet_19\n\nLANGUAGE: Compound\nCODE:\n```\nwithdraw\n```\n\n----------------------------------------\n\nTITLE: Building AgentKit Example Dependencies (Bash)\nDESCRIPTION: Installs project dependencies using `npm install` and then builds the local AgentKit packages using `npm run build` from the root project directory. This prepares the necessary packages, including local `@coinbase/agentkit-langchain` and `@coinbase/agentkit`, for the chatbot example.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/examples/langchain-smart-wallet-chatbot/README.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nnpm install\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with UV Package Manager\nDESCRIPTION: Command to synchronize and install all required dependencies for the CDP Agentkit chatbot using the uv package manager.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/examples/langchain-eth-account-chatbot/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nuv sync\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies using make in Bash\nDESCRIPTION: This snippet is used to install the necessary dependencies for the chatbot using the make command. It assumes a Makefile is present with the install target defined.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/examples/langchain-twitter-chatbot/README.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nmake install\n```\n\n----------------------------------------\n\nTITLE: Installing AgentKit Python Package\nDESCRIPTION: This snippet shows the command to install the core AgentKit Python library using pip. It is the standard way to add the package to your Python environment.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install coinbase-agentkit\n```\n\n----------------------------------------\n\nTITLE: Starting the Typescript Chatbot Example with npm in Bash\nDESCRIPTION: This command starts the chatbot example from within the typescript/examples/langchain-xmtp-chatbot directory by running 'npm start'. It launches the chatbot in interactive mode, enabling users to interact with the agent for various on-chain and web3 actions. Users may need to select options in the running chatbot terminal interface.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/examples/langchain-xmtp-chatbot/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Depositing Assets into Morpho Vault - Morpho\nDESCRIPTION: Deposits a specified amount of assets into a designated Morpho Vault.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/README.md#_snippet_41\n\nLANGUAGE: Morpho\nCODE:\n```\ndeposit\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js via NVM\nDESCRIPTION: This command installs the latest version of Node.js using Node Version Manager (NVM). NVM is a tool for managing multiple active Node.js versions.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/examples/langchain-farcaster-chatbot/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnvm install node\n```\n\n----------------------------------------\n\nTITLE: Creating Reply to Tweet - Twitter\nDESCRIPTION: Creates a reply to an existing tweet using the tweet's unique identifier.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/README.md#_snippet_64\n\nLANGUAGE: Twitter\nCODE:\n```\npost_tweet_reply\n```\n\n----------------------------------------\n\nTITLE: Running create-onchain-agent in Standard Mode\nDESCRIPTION: Command to run the create-onchain-agent CLI tool in standard mode, which will guide you through the full configuration process for setting up an onchain agent project.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/create-onchain-agent/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npipx run create-onchain-agent\n```\n\n----------------------------------------\n\nTITLE: Starting the Chatbot\nDESCRIPTION: This command starts the chatbot application using npm. It executes the script defined as `start` in the `package.json` file, typically initiating the chatbot's runtime environment.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/examples/langchain-farcaster-chatbot/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies with npm in Bash\nDESCRIPTION: This snippet demonstrates installing all required project dependencies using npm. Running 'npm install' reads the project's package.json and retrieves as well as installs all listed packages and their dependencies. This setup step is necessary before attempting to run or build the chatbot application, ensuring all code requirements are satisfied and minimizing potential runtime errors.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/examples/langchain-privy-chatbot/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with uv (Bash)\nDESCRIPTION: This bash command uses the 'uv' package manager to install or synchronize the project's Python dependencies based on its configuration files.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/examples/openai-agents-sdk-smart-wallet-chatbot/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nuv sync\n```\n\n----------------------------------------\n\nTITLE: Running create-onchain-agent in Beginner Mode\nDESCRIPTION: Command to run the create-onchain-agent CLI tool in beginner mode, which creates a simplified chatbot with recommended configurations for those new to web3 agents.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/create-onchain-agent/README.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npipx run create-onchain-agent --beginner\n```\n\n----------------------------------------\n\nTITLE: Generating Custom Wallet Provider using AgentKit CLI (Bash)\nDESCRIPTION: Uses the `agentkit generate wallet-provider` command to scaffold a custom wallet provider template for an AgentKit project. This command requires the `agentkit` CLI tool to be installed, which is included when bootstrapping projects with `create-onchain-agent` v0.3.0+.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/create-onchain-agent/CHANGELOG.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nagentkit generate wallet-provider\n```\n\n----------------------------------------\n\nTITLE: Configuring ZeroDev with CDP\nDESCRIPTION: This snippet showcases the configuration of the `ZeroDevWalletProvider` using a `CdpWalletProvider` as the signer. It first initializes a `CdpWalletProvider` and then uses its `toSigner()` method to configure the `ZeroDevWalletProvider`. It sets parameters such as `projectId`, `entryPointVersion`, and `networkId`. The `ZeroDevWalletProvider` is designed to facilitate features like gasless transactions using a smart account.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/agentkit/README.md#_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ZeroDevWalletProvider, CdpWalletProvider } from \"@coinbase/agentkit\";\n\n// First create a CDP wallet provider as the signer\nconst cdpWalletProvider = await CdpWalletProvider.configureWithWallet({\n    apiKeyName: \"CDP API KEY NAME\",\n    apiKeyPrivate: \"CDP API KEY PRIVATE KEY\",\n    networkId: \"base-mainnet\",\n});\n\n// Configure ZeroDev Wallet Provider with CDP signer\nconst walletProvider = await ZeroDevWalletProvider.configureWithWallet({\n    signer: cdpWalletProvider.toSigner(),\n    projectId: \"ZERODEV_PROJECT_ID\",\n    entryPointVersion: \"0.7\" as const,\n    networkId: \"base-mainnet\",\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching Price Inference from Allora using Python\nDESCRIPTION: Demonstrates how to call the `get_price_inference` action using the `AlloraActionProvider`. Requires importing `PriceInferenceToken` and `PriceInferenceTimeframe` enums from the `allora_sdk.v2.api_client` library. The action takes a dictionary with `asset` (e.g., `PriceInferenceToken.BTC`) and `timeframe` (e.g., `PriceInferenceTimeframe.EIGHT_HOURS`) as input and returns price inference data.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/coinbase_agentkit/action_providers/allora/README.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom allora_sdk.v2.api_client import PriceInferenceToken, PriceInferenceTimeframe\n\nresult = provider.get_price_inference({\n    \"asset\": PriceInferenceToken.BTC,\n    \"timeframe\": PriceInferenceTimeframe.EIGHT_HOURS\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Price Inference for a Token and Timeframe in TypeScript\nDESCRIPTION: Demonstrates how to call the getPriceInference method passing an asset token from PriceInferenceToken and a timeframe string. This asynchronous call returns predicted price data and a timestamp for the specified token and timeframe, integrating with the Allora Network's prediction capabilities alongside the Allora SDK token enumeration.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/agentkit/src/action-providers/allora/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PriceInferenceToken } from \"@alloralabs/allora-sdk\";\n\nconst result = await provider.getPriceInference({\n  asset: PriceInferenceToken.BTC,\n  timeframe: \"8h\"\n});\n```\n\n----------------------------------------\n\nTITLE: Generating AgentKit Setup Code using CLI (Bash)\nDESCRIPTION: Uses the `agentkit generate prepare` command to generate framework-agnostic setup code for integrating AgentKit into a project. This command requires the `agentkit` CLI tool to be installed, which is included when bootstrapping projects with `create-onchain-agent` v0.3.0+.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/create-onchain-agent/CHANGELOG.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nagentkit generate prepare\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Building the Project - Bash\nDESCRIPTION: This set of commands installs required Node package dependencies and builds the CDP AgentKit Model Context Protocol example locally. 'npm install' installs all package dependencies listed in package.json, and 'npm run build' compiles the project for use. These commands must be run from the project's root directory prior to using the chatbot.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/examples/model-context-protocol-smart-wallet-server/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Installing nightly build in Typescript\nDESCRIPTION: These commands install the latest or specific nightly build of `@coinbase/agentkit` and `@coinbase/agentkit-langchain` using npm.  Replace `@coinbase/agentkit-langchain` with the appropriate framework extension package if using a framework other than Langchain.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @coinbase/agentkit@nightly @coinbase/agentkit-langchain@nightly\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @coinbase/agentkit@0.2.3-nightly.20250220.0 @coinbase/agentkit-langchain@0.2.3-nightly.20250220.0\n```\n\n----------------------------------------\n\nTITLE: Generating Agent Creation Code using AgentKit CLI (Bash)\nDESCRIPTION: Uses the `agentkit generate create-agent` command to generate framework-specific agent creation code for an AgentKit project. This command requires the `agentkit` CLI tool to be installed, which is included when bootstrapping projects with `create-onchain-agent` v0.3.0+.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/create-onchain-agent/CHANGELOG.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nagentkit generate create-agent\n```\n\n----------------------------------------\n\nTITLE: Creating New Tweet - Twitter\nDESCRIPTION: Creates a new tweet on the authenticated Twitter account.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/README.md#_snippet_63\n\nLANGUAGE: Twitter\nCODE:\n```\npost_tweet\n```\n\n----------------------------------------\n\nTITLE: Illustrating AgentKit Monorepo Directory Structure - Plain Text\nDESCRIPTION: This snippet provides a high-level visual representation of the AgentKit monorepo's directory layout. It shows the top-level split between TypeScript and Python projects, detailing subdirectories for core packages, creation utilities, framework extensions, and examples, aiding contributors in navigating the codebase.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: Plain Text\nCODE:\n```\nagentkit/\n├── typescript/\n│   ├── agentkit/\n│   ├── create-onchain-agent/\n│   ├── framework-extensions/\n│   │   ├── langchain/\n│   │   ├── vercel-ai-sdk/\n│   │   └── model-context-protocol/\n│   └── examples/\n│       ├── langchain-cdp-chatbot/\n│       ├── langchain-farcaster-chatbot/\n│       ├── langchain-privy-chatbot/\n│       ├── langchain-solana-chatbot/\n│       ├── langchain-twitter-chatbot/\n│       ├── langchain-xmtp-chatbot/\n│       ├── model-context-protocol-smart-wallet-server/\n│       └── vercel-ai-sdk-smart-wallet-chatbot/\n├── python/\n│   ├── coinbase-agentkit/\n│   ├── create-onchain-agent/\n│   ├── framework-extensions/\n│   │   ├── langchain/\n│   │   └── openai-agents-sdk/\n│   └── examples/\n│       ├── langchain-cdp-chatbot/\n│       ├── langchain-eth-account-chatbot/\n│       ├── langchain-smart-wallet-chatbot/\n│       ├── langchain-twitter-chatbot/\n│       └── openai-agents-cdp-voice-chatbot/\n│       └── openai-agents-sdk-smart-wallet-chatbot/\n```\n\n----------------------------------------\n\nTITLE: Example Messari Tool Output for Token Market Data\nDESCRIPTION: Shows an example output from the Messari `research_question` tool when queried about Ethereum's market data. The response includes key metrics like price, 24-hour change, market capitalization, trading volume, and circulating supply as of a specific date.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/agentkit/src/action-providers/messari/README.md#_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nMessari Research Results:\n\nAs of March 26, 2025, the current metrics for Ethereum (ETH) across major cryptocurrency exchanges are as follows:\n\n- **Current Price**: $2,012.99\n- **24-hour Price Change**:\n  - **Absolute Value**: -$55.31\n  - **Percentage**: -2.67%\n- **Current Market Capitalization**: $242,471,578,768\n- **24-hour Trading Volume**: $7,011,385,937.27\n- **Circulating Supply**: 120,639,295.2 ETH\n\nThe data is based on the latest available information from our asset data sources as of the specified date.\n```\n\n----------------------------------------\n\nTITLE: Retrieving Twitter Account Mentions - Twitter\nDESCRIPTION: Retrieves recent mentions and interactions for the authenticated account.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/README.md#_snippet_62\n\nLANGUAGE: Twitter\nCODE:\n```\naccount_mentions\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Building Packages with npm in Bash\nDESCRIPTION: This set of commands installs all required npm dependencies and builds the local project packages needed for the chatbot example. 'npm install' fetches and installs modules listed in package.json, while 'npm run build' compiles the code and prepares it for execution. These commands must be run from the project's root directory prior to running the chatbot.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/examples/langchain-xmtp-chatbot/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Messari Provider Directory Structure\nDESCRIPTION: Illustrates the file and directory layout for the Messari action provider implementation within the AgentKit project. It highlights key files including constants, tests, the main provider logic, exports, documentation, schemas, type definitions, and utility functions.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/agentkit/src/action-providers/messari/README.md#_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nmessari/\n├── constants.ts                   # API endpoints and other constants\n├── messariActionProvider.test.ts  # Tests for the provider\n├── messariActionProvider.ts       # Main provider with Messari API functionality\n├── index.ts                       # Main exports\n├── README.md                      # Documentation\n├── schemas.ts                     # Messari action schemas\n├── types.ts                       # Type definitions\n└── utils.ts                       # Utility functions\n```\n\n----------------------------------------\n\nTITLE: Configuring SolanaKeypair with RPC\nDESCRIPTION: This snippet demonstrates how to configure `SolanaKeypairWalletProvider` with a custom RPC URL. It uses the `fromRpcUrl` method.  The parameters include `rpcUrl` and  `privateKey`. This allows for overriding the default RPC endpoints.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/agentkit/README.md#_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SOLANA_NETWORK_ID, SolanaKeypairWalletProvider } from \"@coinbase/agentkit\";\n\n// Configure Solana Keypair Wallet Provider\nconst privateKey = process.env.SOLANA_PRIVATE_KEY;\nconst rpcUrl = process.env.SOLANA_RPC_URL;\nconst walletProvider = await SolanaKeypairWalletProvider.fromRpcUrl(network, privateKey);\n```\n\n----------------------------------------\n\nTITLE: Configuring Messari API Key via Environment Variable\nDESCRIPTION: Shows the environment variable `MESSARI_API_KEY` used to configure the Messari Action Provider with the required API key. This is one method for providing authentication credentials obtained from Messari.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/agentkit/src/action-providers/messari/README.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nMESSARI_API_KEY\n```\n\n----------------------------------------\n\nTITLE: Running the Chatbot Script (Bash)\nDESCRIPTION: Executes the main Python chatbot script (`chatbot.py`) using the `uv run` command. This command runs the script within the managed environment. Requires environment variables like `CDP_API_KEY_NAME`, `CDP_API_KEY_PRIVATE_KEY`, `OPENAI_API_KEY`, and optionally `PRIVATE_KEY` and `NETWORK_ID` to be set.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/examples/openai-agents-sdk-cdp-chatbot/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nuv run chatbot.py\n```\n\n----------------------------------------\n\nTITLE: Starting the LangChain Twitter Chatbot in TypeScript Using Bash\nDESCRIPTION: This snippet illustrates how to start the chatbot example application after building. It involves running the `npm start` command from the TypeScript examples directory, which launches the chatbot in chat mode, enabling interaction via terminal with Twitter API integrations.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/examples/langchain-twitter-chatbot/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for ERC20 Action Provider\nDESCRIPTION: Illustrates the file and directory organization for the ERC20 Action Provider module. It shows the location of the main provider implementation, test files, constants, action schemas, main exports, and the README file.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/agentkit/src/action-providers/erc20/README.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nerc20/\n├── erc20ActionProvider.ts         # Main provider with ERC20 token functionality\n├── erc20ActionProvider.test.ts    # Test file for ERC20 provider\n├── constants.ts                   # Constants for ERC20 provider\n├── schemas.ts                     # Token action schemas\n├── index.ts                       # Main exports\n└── README.md                      # This file\n```\n\n----------------------------------------\n\nTITLE: Fetching Inference by Topic ID from Allora using Python\nDESCRIPTION: Illustrates calling the `get_inference_by_topic_id` action on the `AlloraActionProvider`. This action requires a dictionary containing the `topic_id` (obtainable from `get_all_topics`) as input and returns inference data for that specific topic from the Allora Network.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/coinbase_agentkit/action_providers/allora/README.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nresult = provider.get_inference_by_topic_id({\"topic_id\": 1})\n```\n\n----------------------------------------\n\nTITLE: Fetching Twitter Account Details - Twitter\nDESCRIPTION: Fetches profile information and metadata for the authenticated Twitter account.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/README.md#_snippet_61\n\nLANGUAGE: Twitter\nCODE:\n```\naccount_details\n```\n\n----------------------------------------\n\nTITLE: Fetching All Topics from Allora Network with JSON Response\nDESCRIPTION: Shows the expected JSON structure returned by the get_all_topics action which retrieves all available prediction market topics from the Allora Network. Each entry contains metadata such as topic ID, name, description, epoch length, staking info, and activity status. Useful for understanding the data model and UI integration.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/agentkit/src/action-providers/allora/README.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"topic_id\": 1,\n    \"topic_name\": \"Bitcoin 8h\",\n    \"description\": \"Bitcoin price prediction for the next 8 hours\",\n    \"epoch_length\": 100,\n    \"ground_truth_lag\": 10,\n    \"loss_method\": \"method1\",\n    \"worker_submission_window\": 50,\n    \"worker_count\": 5,\n    \"reputer_count\": 3,\n    \"total_staked_allo\": 1000,\n    \"total_emissions_allo\": 500,\n    \"is_active\": true,\n    \"updated_at\": \"2023-01-01T00:00:00Z\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for get_price_inference Action\nDESCRIPTION: Presents an example JSON response for the `get_price_inference` action. The response contains the inferred `price`, the `timestamp` of the inference, the `asset` symbol (e.g., \"BTC\"), and the `timeframe` (e.g., \"8h\").\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/coinbase_agentkit/action_providers/allora/README.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"price\": \"50000.00\",\n  \"timestamp\": 1718198400,\n  \"asset\": \"BTC\",\n  \"timeframe\": \"8h\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MintSchema Input Validation with Pydantic in Python\nDESCRIPTION: This snippet defines a Pydantic schema class, MintSchema, specifying required fields for minting an NFT. Each field is described using the Field function to enforce type and documentation requirements. This schema is used to validate agent action inputs and for generating data schemas for interaction with the LLM. Requires the Pydantic BaseModel and Field imports. Inputs: contract_address (str), destination (str), both required. Outputs: validated MintSchema instance or Pydantic validation errors.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/CONTRIBUTING-PYTHON.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass MintSchema(BaseModel):\n    \"\"\"Input schema for minting an NFT.\"\"\"\n\n    contract_address: str = Field(\n        ...,\n        description=\"The contract address of the NFT to mint\"\n    )\n    destination: str = Field(\n        ...,\n        description=\"The destination address that will receive the NFT\"\n    )\n```\n\n----------------------------------------\n\nTITLE: Formatting, Linting, and Fixing Code Style with pnpm - Bash Script\nDESCRIPTION: This snippet provides commands for formatting code, linting, and automatically fixing linting issues in the AgentKit project. It invokes custom scripts ('format', 'lint', 'lint:fix') defined in the package.json using 'pnpm'. Dependencies: ESLint, Prettier, pnpm, and corresponding scripts in package.json. Inputs: No explicit arguments; commands are run from the repository's root directory. Outputs: Updated code files and console logs of formatting/linting results. Limitations: Assumes scripts are properly configured.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/CONTRIBUTING-TYPESCRIPT.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# Format code\npnpm run format\n\n# Lint code\npnpm run lint\n\n# Fix linting issues\npnpm run lint:fix\n```\n\n----------------------------------------\n\nTITLE: Creating Changelog Entries with towncrier\nDESCRIPTION: Illustrates how to generate changelog entry files using `towncrier` via the `uv` command runner. After navigating to the relevant package directory (e.g., `python/coinbase-agentkit`), use `uv run towncrier create` with a description and a filename specifying the issue/PR number and change type (e.g., `123.bugfix.md`, `124.feature.md`). This creates a markdown file in the `changelog.d` directory. Requires `uv` and `towncrier`.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/CONTRIBUTING-PYTHON.md#_snippet_9\n\nLANGUAGE: Bash\nCODE:\n```\ncd python/coinbase-agentkit\n\n# Create a new changelog entry file for a bugfix relating to issue #123\nuv run towncrier create --content \"Fixed a bug\" 123.bugfix.md\n\n# Or, create a new changelog entry for a feature relating to issue #124\nuv run towncrier create --content \"Added a new feature\" 124.feature.md\n```\n\n----------------------------------------\n\nTITLE: Installing Latest Node.js with nvm (Bash)\nDESCRIPTION: Uses the Node Version Manager (nvm) command `nvm install node` in a Bash shell to download and install the latest available version of Node.js. This command also sets the newly installed version as the active one if nvm is configured correctly.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/examples/langchain-solana-chatbot/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnvm install node\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies Using uv in Bash\nDESCRIPTION: This snippet demonstrates how to install all required project dependencies using the uv package manager, which must be configured prior to this step. Run this command from your project directory after ensuring correct Python and uv setup. This step automatically reads your project's dependency requirements and prepares the environment. No parameters are required; successful installation creates an isolated environment for the Python chatbot.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/examples/openai-agents-cdp-voice-chatbot/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nuv install\n```\n\n----------------------------------------\n\nTITLE: Calling Onramp Buy URL Action: getOnrampBuyUrl (TypeScript)\nDESCRIPTION: Demonstrates how to invoke the `getOnrampBuyUrl` action provided by the OnrampActionProvider. This action generates a URL for the user to purchase cryptocurrency via Coinbase's interface, requiring an `EvmWalletProvider` instance.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/agentkit/src/action-providers/onramp/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await provider.getOnrampBuyUrl(walletProvider);\n```\n\n----------------------------------------\n\nTITLE: Creating an Action Provider for CDP Wallets in Python\nDESCRIPTION: This code snippet shows how to implement a Python action provider class for Coinbase CDP wallets by subclassing ActionProvider. The class CdpWalletActionProvider initializes with a specific provider name and an empty action list, and implements a network check method to ensure compatibility (e.g., supporting only EVM networks). Requires ActionProvider base class and Network class definitions. No explicit inputs or outputs except when the supports_network method is called (expects Network object and returns boolean).\nSOURCE: https://github.com/coinbase/agentkit/blob/main/CONTRIBUTING-PYTHON.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass CdpWalletActionProvider(ActionProvider[CdpWalletProvider]):\n    \"\"\"Provides actions for interacting with CDP wallets.\"\"\"\n\n    def __init__(self):\n        super().__init__(\"cdp-wallet\", [])\n\n    def supports_network(self, network: Network) -> bool:\n        return network.protocol_family == \"evm\"\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js with nvm - Bash\nDESCRIPTION: This command installs the latest version of Node.js using nvm (Node Version Manager). This is used as an alternative if the user doesn't have the correct version of Node.js.  It installs and sets the latest available version.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/examples/langchain-zerodev-chatbot/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnvm install node\n```\n\n----------------------------------------\n\nTITLE: Checking Python and uv Versions - Bash\nDESCRIPTION: This snippet shows the standard command to check the installed versions of Python and the uv package manager. It is used to ensure that the required versions (Python 3.10+) are available before proceeding with the example setup.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/examples/langchain-smart-wallet-chatbot/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython --version\nuv --version\n```\n\n----------------------------------------\n\nTITLE: Running the Python CDP Voice Chatbot via uv\nDESCRIPTION: This snippet executes the main Python script using uv after setting the necessary environment variables. Ensure that CDP_API_KEY_NAME, CDP_API_KEY_PRIVATE_KEY, and OPENAI_API_KEY are set, with NETWORK_ID defaulting to base-sepolia if unspecified. This launches the OpenAI Agents-integrated CDP voice chatbot in your terminal. Inputs are provided through voice; outputs are streamed responses converted to speech. The snippet assumes dependencies are already installed and required environment variables are exported.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/examples/openai-agents-cdp-voice-chatbot/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nuv run python main.py\n```\n\n----------------------------------------\n\nTITLE: Checking Python and uv version in Bash\nDESCRIPTION: This snippet is used to check the versions of Python and uv (package management tool). This is a prerequisite to ensure the correct versions are installed before running the chatbot.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/examples/langchain-twitter-chatbot/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\npython --version\nuv --version\n```\n\n----------------------------------------\n\nTITLE: Installing AgentKit MCP Packages - Bash\nDESCRIPTION: This command installs the necessary Node.js packages for using the AgentKit MCP extension. It includes the core MCP SDK, the AgentKit library, and the AgentKit MCP specific package.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/framework-extensions/model-context-protocol/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @coinbase/agentkit-model-context-protocol @coinbase/agentkit @modelcontextprotocol/sdk\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies\nDESCRIPTION: This command installs the necessary dependencies for the project using npm, the Node Package Manager. It reads the `package.json` file and installs all listed packages.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/examples/langchain-farcaster-chatbot/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Exporting PrivyWalletProvider Wallet Information in TypeScript\nDESCRIPTION: This snippet shows how to export wallet information from an initialized PrivyWalletProvider instance by calling the asynchronous method exportWallet. The returned data includes walletId, optional authorizationKey, and networkId. This export functionality is useful for obtaining stored wallet details programmatically for inspection or further processing.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/agentkit/README.md#_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nconst walletData = await walletProvider.exportWallet();\n\n// walletData will be in the following format:\n{\n    walletId: string;\n    authorizationKey: string | undefined;\n    networkId: string | undefined;\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Current Account Balance - Hyperbolic\nDESCRIPTION: Get current account balance.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/README.md#_snippet_37\n\nLANGUAGE: Hyperbolic\nCODE:\n```\nget_current_balance\n```\n\n----------------------------------------\n\nTITLE: Configuring CdpWalletProvider Gas Parameters (AgentKit, TypeScript)\nDESCRIPTION: Configures gas calculation parameters to control transaction gas estimation and fee calculations in CdpWalletProvider. The 'gas' object allows tuning of 'gasLimitMultiplier' and 'feePerGasMultiplier' for advanced users. Note: Only impacts direct 'sendTransaction' calls, not higher-level actions. Input: wallet data, API credentials, gas parameters; Output: WalletProvider instance.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/agentkit/README.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CdpWalletProvider } from \"@coinbase/agentkit\";\n\nconst walletProvider = await CdpWalletProvider.configureWithWallet({\n    cdpWalletData: \"WALLET DATA JSON STRING\",\n    apiKeyName: \"CDP API KEY NAME\",\n    apiKeyPrivate: \"CDP API KEY PRIVATE KEY\",\n    gas: {\n        gasLimitMultiplier: 2.0,  // Adjusts gas limit estimation\n        feePerGasMultiplier: 2.0, // Adjusts max fee per gas\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Action Description Prompt with @create_action Decorator in Python\nDESCRIPTION: This code snippet illustrates how to define a detailed description prompt for an action using the @create_action decorator in Python. The decorator is provided with a name, a multi-line description explaining the action usage, and the associated input schema class. The description demonstrates how to communicate constraints and required behaviors to AI agents integrating with the action. Requires an imported create_action decorator and a MintSchema class.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/CONTRIBUTING-PYTHON.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@create_action(\n    name=\"mint\",\n    description=\"\"\"\nThis tool will mint an NFT (ERC-721) to a specified destination address onchain via a contract invocation.\nIt takes the contract address of the NFT onchain and the destination address onchain that will receive the NFT as inputs.\nDo not use the contract address as the destination address. If you are unsure of the destination address, please ask the user before proceeding.\n    \"\"\",\n    schema=MintSchema,\n)\n```\n\n----------------------------------------\n\nTITLE: Running the AgentKit Chatbot - Bash\nDESCRIPTION: This command executes the main Python script `chatbot.py` using the uv runner. It launches the terminal-style chatbot application, allowing users to interact with AgentKit actions via the command line after necessary API keys and optional settings are configured in the environment variables.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/examples/langchain-smart-wallet-chatbot/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nuv run chatbot.py\n```\n\n----------------------------------------\n\nTITLE: Example Agent Output Summarizing Protocol News (Hyperliquid)\nDESCRIPTION: Provides a sample agent response summarizing the news regarding Hyperliquid's HLP vault, based on the detailed information from the Messari tool. The agent concisely outlines the key events, the vault's function, governance actions, and community sentiment related to the incident.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/agentkit/src/action-providers/messari/README.md#_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nThe recent news surrounding Hyperliquid's HLP (Hyperliquidity Provider) vault highlights a significant incident that stirred commotion in the community:\n\n### Key Events\n\n1. **Exploit Incident**:\n   - **Date**: Around March 11-12, 2025.\n   - **Details**: A whale manipulated liquidity mechanics, leading to a $4 million loss for the HLP vault. The manipulative action involved a $340 million Ethereum position and strategically timed margin withdrawals that caused forced liquidations. This event was initially feared as a protocol exploit but was later confirmed not to be so.\n   - **Response**: In reaction to the incident, Hyperliquid adjusted its margin requirements and lowered maximum leverage limits on Ethereum and Bitcoin to mitigate future risks.\n\n2. **Price Impact**:\n   - Following the incident, the HYPE token experienced an immediate dip of approximately 8.5%. Over the month leading up to the incident, the token had already seen a decline of about 44%, reflecting broader concerns among investors.\n\n### HLP Vault's Role\nThe HLP vault is critical within Hyperliquid's ecosystem, allowing users to deposit USDC in exchange for potential profit sharing, thus underwriting a portion of the liquidity risk associated with trading on the platform. Despite recent setbacks, it had a solid average annual return of 12.07%.\n\n### Governance Actions\nThe governance team promptly responded to the situation by enhancing the platform's risk parameters, including increasing maintenance margins and reducing leverage thresholds to stabilize operations.\n\n### Community Sentiment\nThe incident has sparked discussions within the community about the risks associated with active liquidity management models and the necessity for robust risk management strategies in DeFi platforms.\n\nThese events have adversely affected Hyperliquid's standing in the market, though the platform has taken proactive steps to address vulnerabilities and restore confidence among its users.\n```\n\n----------------------------------------\n\nTITLE: Starting the Chatbot Application (Bash)\nDESCRIPTION: Executes the `npm start` command in a Bash shell within the specific example directory (`typescript/examples/langchain-solana-chatbot`). This command runs the start script defined in the example's `package.json`, launching the chatbot application.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/examples/langchain-solana-chatbot/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Example Messari Tool Output for Protocol News (Hyperliquid)\nDESCRIPTION: Displays detailed output from the Messari `research_question` tool concerning recent incidents involving Hyperliquid's HLP vault. The response covers an exploit event, its impact on the HYPE token price, the role of the HLP vault, governance responses, and community sentiment.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/agentkit/src/action-providers/messari/README.md#_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nMessari Research Results:\n\nOver the past few months, Hyperliquid's HLP vault has faced significant challenges due to a few critical incidents. Here's a detailed overview:\n\n### Recent Events and Incidents\n\n1. **Exploit Incident**:\n   - **Date**: Around March 11-12, 2025.\n   - **Details**: A significant exploit occurred where a whale managed to manipulate the liquidity mechanics, resulting in a $4 million loss for Hyperliquid's HLP vault. The whale executed a $340 million Ethereum position and, through strategic margin withdrawals, triggered a forced liquidation. Although initially mistaken for a hack, the event was confirmed not to be a protocol exploit.\n   - **Platform Response**: Hyperliquid implemented changes to its margin requirements and reduced the maximum leverage limits on Bitcoin and Ethereum to prevent similar incidents in the future [News Sources].\n\n2. **Price Impact**:\n   - **HYPE Token**: The HYPE token associated with the platform dropped significantly by around 8.5% immediately following the incident, reflecting investor anxiety and loss of confidence. Although it recovered slightly, it's been noted that there has been a decline of about 44% over the month even before the incident [Price Impact].\n\n### Function of HLP in Hyperliquid Ecosystem\n\n- **Role**: The HLP (Hyperliquidity Provider) vault is a crucial component of Hyperliquid, supporting high-throughput financial operations. It allows users to deposit USDC in exchange for potential profit sharing, effectively underwriting a portion of the platform's trading risk.\n- **Performance**: Despite the recent setback, the HLP vault had maintained a strong risk-adjusted performance with an average annual return of 12.07%, continuing to be a high-performing asset on a volatility-adjusted basis.\n\n### Governance and Parameter Changes\n\n- **Governance Response**: To mitigate future risks, Hyperliquid's governance team has quickly responded with parameter changes, including increasing maintenance margins and lowering leverage caps to ensure a more stable operational environment [Governance Sources].\n\n### Community and User Sentiment\n\n- **Concerns and Discussions**: The losses triggered debates over the inherent risks associated with active liquidity management models like HLP, compared to passive models. Discussions have focused on the need for robust risk management strategies within DeFi platforms [Community Discussions].\n\n### Credibility of Sources\n\nThe information is gathered from credible news articles published on established DeFi and cryptocurrency media outlets. The citations used for these details are among recognized sources that specialize in blockchain and financial technology reporting.\n\nOverall, the series of incidents has negatively impacted Hyperliquid's market perception and investor confidence in the short term, though the platform has taken decisive steps to address vulnerabilities and reassure its user base.\n```\n\n----------------------------------------\n\nTITLE: Getting Available GPUs by Type - Hyperbolic\nDESCRIPTION: Get GPUs filtered by model type.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/README.md#_snippet_32\n\nLANGUAGE: Hyperbolic\nCODE:\n```\nget_available_gpus_by_type\n```\n\n----------------------------------------\n\nTITLE: Checking Node.js and pnpm Versions (Bash)\nDESCRIPTION: Shows the bash commands to check the locally installed versions of Node.js and pnpm. AgentKit requires Node.js v18.x+ and pnpm 10.7.x+ for TypeScript development.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/CONTRIBUTING-TYPESCRIPT.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode --version\npnpm --version\n```\n\n----------------------------------------\n\nTITLE: Checking Node.js Version Using Bash\nDESCRIPTION: This snippet checks the installed Node.js version required for the project, ensuring it meets the minimum version of 18. It uses the `node --version` command and provides guidance for installing correct versions using the Node Version Manager (nvm).\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/examples/langchain-twitter-chatbot/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode --version\n```\n\nLANGUAGE: bash\nCODE:\n```\nnvm install node\n```\n\n----------------------------------------\n\nTITLE: Checking Python and uv Versions in Bash\nDESCRIPTION: These commands verify the installed versions of Python and the 'uv' package manager. The project requires Python 3.10 or higher.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/examples/langchain-cdp-chatbot-with-nillion-secretvault/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython --version\nuv --version\n```\n\n----------------------------------------\n\nTITLE: Checking Python and uv Versions (Bash)\nDESCRIPTION: These bash commands verify the installed versions of Python and the 'uv' package manager. The example requires Python 3.10 or higher.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/examples/openai-agents-sdk-smart-wallet-chatbot/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython --version\nuv --version\n```\n\n----------------------------------------\n\nTITLE: Registering Basename Domain - Basename\nDESCRIPTION: Registers a custom .base.eth or .basetest.eth domain name for the wallet address.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/README.md#_snippet_11\n\nLANGUAGE: Basename\nCODE:\n```\nregister_basename\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for get_all_topics Action\nDESCRIPTION: Provides an example structure of the JSON response returned by the `get_all_topics` action. The response is an array of topic objects, each containing details like `topic_id`, `topic_name`, `description`, and various metadata about the prediction market topic on the Allora Network.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/coinbase_agentkit/action_providers/allora/README.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"topic_id\": 1,\n    \"topic_name\": \"Bitcoin 8h\",\n    \"description\": \"Bitcoin price prediction for the next 8 hours\",\n    \"epoch_length\": 100,\n    \"ground_truth_lag\": 10,\n    \"loss_method\": \"method1\",\n    \"worker_submission_window\": 50,\n    \"worker_count\": 5,\n    \"reputer_count\": 3,\n    \"total_staked_allo\": 1000,\n    \"total_emissions_allo\": 500,\n    \"is_active\": true,\n    \"updated_at\": \"2023-01-01T00:00:00Z\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Initializing AlloraActionProvider in Python\nDESCRIPTION: Demonstrates how to import and initialize the `AlloraActionProvider` from `coinbase_agentkit.action_providers.allora`. Shows initialization with default settings and with custom configuration options like `api_key` (optional, defaults to a public key) and `chain_slug` (optional, defaults to testnet). Requires the `coinbase_agentkit` package.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/coinbase_agentkit/action_providers/allora/README.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom coinbase_agentkit.action_providers.allora import allora_action_provider\n\n# With default configuration\nprovider = allora_action_provider()\n\n# Or with custom configuration\nprovider_with_config = allora_action_provider(\n    api_key=\"your-api-key\",  # optional, defaults to a public, development-only key\n    chain_slug=\"testnet\"  # optional, defaults to testnet\n)\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for get_inference_by_topic_id Action\nDESCRIPTION: Shows an example JSON response structure for the `get_inference_by_topic_id` action. The response includes network inference values (raw and normalized), confidence intervals, the corresponding `topic_id`, timestamp, and any extra data associated with the inference.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/coinbase_agentkit/action_providers/allora/README.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"network_inference\": \"0.5\",\n  \"network_inference_normalized\": \"0.5\",\n  \"confidence_interval_percentiles\": [\"0.1\", \"0.5\", \"0.9\"],\n  \"confidence_interval_percentiles_normalized\": [\"0.1\", \"0.5\", \"0.9\"],\n  \"confidence_interval_values\": [\"0.1\", \"0.5\", \"0.9\"],\n  \"confidence_interval_values_normalized\": [\"0.1\", \"0.5\", \"0.9\"],\n  \"topic_id\": \"1\",\n  \"timestamp\": 1718198400,\n  \"extra_data\": \"extra_data\"\n}\n```\n\n----------------------------------------\n\nTITLE: Getting List of Available GPU Types - Hyperbolic\nDESCRIPTION: Get list of available GPU types.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/README.md#_snippet_33\n\nLANGUAGE: Hyperbolic\nCODE:\n```\nget_available_gpus_types\n```\n\n----------------------------------------\n\nTITLE: Checking Python and uv Versions in Bash\nDESCRIPTION: This snippet demonstrates how to check the installed versions of Python and the uv package manager using command-line utilities. It is intended to verify that the development environment meets AgentKit requirements (Python >=3.10 and uv >=0.6.0). No external dependencies are required other than the executables being in the system path. The expected output is the version number for each tool.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/CONTRIBUTING-PYTHON.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython --version\nuv --version\n```\n\n----------------------------------------\n\nTITLE: Setting the OpenAI API Key Environment Variable (Shell)\nDESCRIPTION: This shell command exports the OpenAI API key as an environment variable named 'OPENAI_API_KEY'. This is necessary for the application to authenticate with OpenAI services and potentially enable tracing features. Replace '<your-openai-api-key>' with your actual API key.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/examples/openai-agents-sdk-smart-wallet-chatbot/README.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nexport OPENAI_API_KEY=<your-openai-api-key>\n```\n\n----------------------------------------\n\nTITLE: Defining Action Input Schema with Zod (TypeScript)\nDESCRIPTION: Demonstrates defining an input schema for an AgentKit action using the Zod library in TypeScript. This `MintSchema` specifies required `contractAddress` and `destination` string fields, including descriptions to guide the LLM and for validation. The `.strip()` method ensures only defined fields are accepted.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/CONTRIBUTING-TYPESCRIPT.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// src/action-providers/erc721/schemas.ts\n\nconst MintSchema = z\n  .object({\n    contractAddress: z\n      .string()\n      .describe(\"The contract address of the NFT to mint\"),\n    destination: z\n      .string()\n      .describe(\"The destination address that will receive the NFT\"),\n  })\n  .strip()\n  .describe(\"Instructions for minting an NFT\");\n```\n\n----------------------------------------\n\nTITLE: Launching Memecoin Example - TypeScript\nDESCRIPTION: This code snippet illustrates how to use the `flaunch` action to create a new memecoin.  It takes parameters for the token's name, symbol, image URL, and description, and then uses the `walletProvider` to launch the token.  The output is a transaction hash and the Flaunch URL.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/agentkit/src/action-providers/flaunch/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await provider.flaunch(walletProvider, {\n  name: \"My Memecoin\",\n  symbol: \"MEME\",\n  imageUrl: \"https://example.com/image.png\",\n  description: \"A fun memecoin for the community\",\n});\n```\n\n----------------------------------------\n\nTITLE: Repaying Borrowed Assets on Compound - Compound\nDESCRIPTION: Repays borrowed assets back to Compound.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/README.md#_snippet_21\n\nLANGUAGE: Compound\nCODE:\n```\nrepay\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests in Bash for AgentKit\nDESCRIPTION: This snippet provides commands for running the unit tests associated with an action provider in the AgentKit Python package. Change directory to the package root and invoke make test to run the registered Python test suite. Assumes Makefile and Python test framework are correctly configured. No direct input other than the existence of test files; output is the standard test feedback.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/CONTRIBUTING-PYTHON.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncd python/coinbase-agentkit\nmake test\n```\n\n----------------------------------------\n\nTITLE: Creating and running agent project with Python\nDESCRIPTION: These commands create a new agent chatbot using `create-onchain-agent`, navigate to the project directory, install dependencies using Poetry, and run the chatbot. Requires Python 3.10+, Poetry, a CDP Secret API Key, and an OpenAI API Key.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Create a new agent chatbot\npipx run create-onchain-agent\n\n# Navigate to your project directory\ncd onchain-agent\n\n# At this point, fill in your CDP API key name, OpenAI API key, and any other environment variables in the .env.local file.\n# Then, rename the .env.local file to .env\nmv .env.local .env\n\n# Install dependencies\npoetry install\n\n# Run the chatbot\npoetry run python chatbot.py\n```\n\n----------------------------------------\n\nTITLE: Configuring Privy Embedded Wallet\nDESCRIPTION: This snippet demonstrates the configuration of a Privy embedded wallet provider using the AgentKit. It sets up the necessary parameters like `appId`, `appSecret`, `authorizationPrivateKey`, `walletId`, `networkId`, and `walletType`. The `configureWithWallet` method initializes the provider and prepares it for delegated transaction signing.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/agentkit/README.md#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrivyWalletProvider } from \"@coinbase/agentkit\";\n\n// Configure Embedded Wallet Provider\nconst config = {\n    appId: \"PRIVY_APP_ID\",\n    appSecret: \"PRIVY_APP_SECRET\",\n    authorizationPrivateKey: \"PRIVY_WALLET_AUTHORIZATION_PRIVATE_KEY\",\n    walletId: \"PRIVY_DELEGATED_WALLET_ID\", // The ID of the wallet that was delegated to your server\n    networkId: \"base-mainnet\", // or any supported network\n    walletType: \"embedded\" // Specify \"embedded\" to use the embedded wallet provider\n};\n\nconst walletProvider = await PrivyWalletProvider.configureWithWallet(config);\n```\n\n----------------------------------------\n\nTITLE: Terminating Rented GPU Compute Instance - Hyperbolic\nDESCRIPTION: Terminate a rented GPU compute instance.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/README.md#_snippet_36\n\nLANGUAGE: Hyperbolic\nCODE:\n```\nterminate_compute\n```\n\n----------------------------------------\n\nTITLE: Getting Superfluid Token Streaming Flow Details - Superfluid\nDESCRIPTION: Gets details of an existing token streaming flow.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/README.md#_snippet_60\n\nLANGUAGE: Superfluid\nCODE:\n```\nget_flow\n```\n\n----------------------------------------\n\nTITLE: Retrieving Pyth Price Feed ID - Pyth\nDESCRIPTION: Retrieves the unique price feed identifier for a given token symbol.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/README.md#_snippet_49\n\nLANGUAGE: Pyth\nCODE:\n```\nfetch_price_feed_id\n```\n\n----------------------------------------\n\nTITLE: Retrieving Price Data from Pyth Feed - Pyth\nDESCRIPTION: Retrieves current price data from a specified Pyth price feed.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/README.md#_snippet_48\n\nLANGUAGE: Pyth\nCODE:\n```\nfetch_price\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for OpenAI and CDP API Keys in Bash\nDESCRIPTION: Exports environment variables for OpenAI API key and Coinbase CDP API credentials needed for authentication by the SDK and AgentKit. These keys allow secure access to OpenAI services and blockchain API endpoints necessary to execute agentic workflows onchain.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/framework-extensions/openai-agents-sdk/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=<your-openai-api-key>\\nexport CDP_API_KEY_NAME=<your-cdp-api-key-name>\\nexport CDP_API_KEY_PRIVATE=<your-cdp-api-key-private>\n```\n\n----------------------------------------\n\nTITLE: Getting Onramp Buy URL - Onramp\nDESCRIPTION: Gets a URL to purchase cryptocurrency from Coinbase via Debit card or other payment methods.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/README.md#_snippet_47\n\nLANGUAGE: Onramp\nCODE:\n```\nget_onramp_buy_url\n```\n\n----------------------------------------\n\nTITLE: Configuring SolanaKeypairWalletProvider\nDESCRIPTION: This snippet shows how to configure the `SolanaKeypairWalletProvider` to utilize a specified Solana network.  It leverages the  `fromNetwork` method, requiring the `network` and `privateKey` parameters.  The `networkId` parameter is used to specify the desired Solana network.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/agentkit/README.md#_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SOLANA_NETWORK_ID, SolanaKeypairWalletProvider } from \"@coinbase/agentkit\";\n\n// Configure Solana Keypair Wallet Provider\nconst privateKey = process.env.SOLANA_PRIVATE_KEY;\nconst network = process.env.NETWORK_ID as SOLANA_NETWORK_ID;\nconst walletProvider = await SolanaKeypairWalletProvider.fromNetwork(network, privateKey);\n```\n\n----------------------------------------\n\nTITLE: Deploying ERC-721 NFT Contract - CDP Wallet\nDESCRIPTION: Deploys a standard ERC-721 NFT contract with configurable name, symbol, and metadata URI.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/README.md#_snippet_13\n\nLANGUAGE: CDP Wallet\nCODE:\n```\ndeploy_nft\n```\n\n----------------------------------------\n\nTITLE: Looking Up Schema - Nillion\nDESCRIPTION: Looks up a schema by description and returns both the schema UUID and corresponding JSON schema.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/README.md#_snippet_43\n\nLANGUAGE: Nillion\nCODE:\n```\nlookup_schema\n```\n\n----------------------------------------\n\nTITLE: Generated Files Structure\nDESCRIPTION: This section describes the directory and file organization of generated provider files in 'action_providers' and associated test files, including Python implementation files, schemas, README documentation, and test suites, to ensure consistent project structure and facilitate testing.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/scripts/generate_action_provider/README.md#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Directory Structure Overview in Markdown\nDESCRIPTION: A tree representation of the directory structure for the ERC721 Action Provider, showing the main files and their purposes including the provider implementation, constants, schemas, validators, and test files.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/coinbase_agentkit/action_providers/erc721/README.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```\nerc721/\n├── erc721_action_provider.py      # Main provider with ERC721 token functionality\n├── constants.py                  # Constants including ERC20 ABI\n├── schemas.py                   # Pydantic schemas for action inputs\n├── validators.py                # Input validation utilities\n├── __init__.py                  # Package exports\n└── README.md                     # This file\n\n# From python/coinbase-agentkit/\ntests/action_providers/erc721/\n├── conftest.py                    # Test configuration\n└── test_erc721_action_provider.py  # Test for ERC721 action provider\n```\n```\n\n----------------------------------------\n\nTITLE: Downloading Data from Nillion SecretVault - Nillion\nDESCRIPTION: Downloads all data from the Nillion SecretVault for a specified schema UUID.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/README.md#_snippet_46\n\nLANGUAGE: Nillion\nCODE:\n```\ndata_download\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Coinbase AgentKit Vercel AI SDK Integration using Bash\nDESCRIPTION: This snippet shows the npm commands required to install all necessary packages for using the @coinbase/agentkit-vercel-ai-sdk package alongside AgentKit, AI SDK core, and a model provider such as OpenAI. Installation includes the main extension package, the core AgentKit and AI SDK packages, and a specific AI model provider package. These commands should be run in a bash terminal before usage.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/framework-extensions/vercel-ai-sdk/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @coinbase/agentkit-vercel-ai-sdk @coinbase/agentkit ai @ai-sdk/openai\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @coinbase/agentkit-vercel-ai-sdk\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @coinbase/agentkit ai\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @ai-sdk/openai\n```\n\n----------------------------------------\n\nTITLE: Displaying Directory Structure for the Basename Action Provider\nDESCRIPTION: Shows the file organization of the Basename provider, including main implementation files and test files. The structure illustrates the main provider file, schemas, exports, and associated test files.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/coinbase_agentkit/action_providers/basename/README.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nbasename/\n├── basename_action_provider.py       # Main provider with Basename functionality\n├── schemas.py                        # Domain action schemas\n├── __init__.py                       # Main exports\n└── README.md                         # This file\n\n# From python/coinbase-agentkit/\ntests/action_providers/basename/\n├── conftest.py                       # Test configuration\n└── test_basename_action_provider.py  # Test file for Basename provider\n```\n\n----------------------------------------\n\nTITLE: Fetching Inference Data by Topic ID using TypeScript\nDESCRIPTION: Illustrates how to call the getInferenceByTopicId method of the AlloraActionProvider with a specific topicId parameter. This asynchronous call returns inference details for the given topic including network inference values, confidence intervals, timestamps, and additional metadata, facilitating detailed prediction market analysis.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/agentkit/src/action-providers/allora/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await provider.getInferenceByTopicId({ topicId: 1 });\n```\n\n----------------------------------------\n\nTITLE: Querying Token Prices via DefiLlama in Bash\nDESCRIPTION: This example demonstrates how to query the current price of USDC and WETH tokens on the Ethereum blockchain using their respective contract addresses. The response includes price data, decimals, symbols, timestamps, and confidence scores.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/agentkit/src/action-providers/defillama/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nPrompt: What is the current price of USDC and WETH on Ethereum? USDC's token address is: 0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48, WETH's token address is: 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"coins\": {\n    \"ethereum:0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\": {\n      \"decimals\": 6,\n      \"symbol\": \"USDC\",\n      \"price\": 0.999958,\n      \"timestamp\": 1741115101,\n      \"confidence\": 0.99\n    },\n    \"ethereum:0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\": {\n      \"decimals\": 18,\n      \"symbol\": \"WETH\",\n      \"price\": 2154.41,\n      \"timestamp\": 1741115124,\n      \"confidence\": 0.99\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for ZeroDev Action Provider\nDESCRIPTION: Illustrates the file organization for the ZeroDev action provider module, including the provider implementation (zeroDevWalletActionProvider.ts), tests (zeroDevWalletActionProvider.test.ts), action schemas (schemas.ts), the main export file (index.ts), and the README documentation.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/agentkit/src/action-providers/zerodev/README.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nzerodev/\n├── zeroDevWalletActionProvider.ts     # Provider for ZeroDev Wallet operations\n├── zeroDevWalletActionProvider.test.ts # Tests for ZeroDev Wallet provider\n├── schemas.ts                         # Action schemas for ZeroDev operations\n├── index.ts                           # Main exports\n└── README.md                          # This file\n```\n\n----------------------------------------\n\nTITLE: Fetching All Topics from Allora Network using Python\nDESCRIPTION: Shows how to use an initialized `AlloraActionProvider` instance (`provider`) to call the `get_all_topics` action. This action requires an empty dictionary `{}` as input and returns a list of available topics from the Allora Network.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/coinbase_agentkit/action_providers/allora/README.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult = provider.get_all_topics({})\n```\n\n----------------------------------------\n\nTITLE: Installing AgentKit and OpenAI Agents SDK with pip in Bash\nDESCRIPTION: Installs the core AgentKit library and its OpenAI Agents SDK extension using the pip package manager. This step is necessary to prepare the environment with required dependencies before running Python code that interacts with the SDK.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/framework-extensions/openai-agents-sdk/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install coinbase-agentkit coinbase-agentkit-openai-agents-sdk\n```\n\n----------------------------------------\n\nTITLE: Running Action Provider Generator Script - Bash\nDESCRIPTION: These snippets show the basic commands to run the `generate:action-provider` script using pnpm. The first command runs in interactive mode, while the second and third demonstrate how to pass arguments in CLI or hybrid mode, requiring a `--` separator before the script's options.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/agentkit/scripts/generate-action-provider/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Interactive mode\npnpm run generate:action-provider\n```\n\nLANGUAGE: bash\nCODE:\n```\n# CLI mode with arguments (note the -- before flags)\npnpm run generate:action-provider -- [options]\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Hybrid mode with arguments (note the -- before flags)\npnpm run generate:action-provider -- [options] -i\n```\n\n----------------------------------------\n\nTITLE: Example agent interaction in Python\nDESCRIPTION: This example shows a user prompt to fund a wallet with testnet ETH and the agent's response including the wallet details, transaction information, and a success message with a transaction link. It demonstrates the interaction between the user and the agent after the agent project has been setup and ran.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nPrompt: Fund my wallet with some testnet ETH.\n-------------------\nWallet: ccaf1dbf-3a90-4e52-ad34-89a07aad9e8b on network: base-sepolia with default address: 0xD9b990c7b0079c1c3733D2918Ee50b68f29FCFD5\n-------------------\n\n-------------------\nReceived eth from the faucet. Transaction: https://sepolia.basescan.org/tx/0x03e82934cd04be5b725927729b517c606f6f744611f0f36e834f21ad742ad7ca\n-------------------\nYour wallet has been successfully funded with testnet ETH. You can view the transaction [here](https://sepolia.basescan.org/tx/0x03e82934cd04be5b725927729b517c606f6f744611f0f36e834f21ad742ad7ca).\n-------------------\n```\n\n----------------------------------------\n\nTITLE: Example: Running Tests for coinbase-agentkit Package\nDESCRIPTION: Demonstrates how to run tests specifically for the `python/coinbase-agentkit` package. It involves changing the current directory to the package's root and then executing the `make test` command.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/CONTRIBUTING-PYTHON.md#_snippet_7\n\nLANGUAGE: Bash\nCODE:\n```\ncd python/coinbase-agentkit\nmake test\n```\n\n----------------------------------------\n\nTITLE: Directory Structure Overview for Onramp Module\nDESCRIPTION: Lists the file structure of the onramp module, showing the organization of the package including initialization, constants, provider implementation, utilities, schemas, and documentation.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/coinbase_agentkit/action_providers/onramp/README.md#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nonramp/\n├── __init__.py                    # Package exports\n├── constants.py                   # Version and URL constants\n├── onramp_action_provider.py      # Main provider implementation\n├── utils.py                       # Utility functions\n├── schemas.py                     # Onramp action schemas\n└── README.md                      # This file\n```\n\n----------------------------------------\n\nTITLE: Installing AgentKit LangChain Extension (Bash)\nDESCRIPTION: This snippet demonstrates how to install the required Python packages for Coinbase AgentKit and its LangChain extension using pip. It is necessary to have Python and pip installed on your system before running this command.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/framework-extensions/langchain/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install coinbase-agentkit coinbase-agentkit-langchain\n```\n\n----------------------------------------\n\nTITLE: Sample usage for creating specific action providers\nDESCRIPTION: Examples demonstrate how to generate action providers with specific configurations such as for all networks, for EVM, and with a CDP wallet provider, by providing specific command-line arguments for name, protocol, and wallet options.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/scripts/generate_action_provider/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nuv run generate-action-provider -n example -p all\n\nuv run generate-action-provider -n example -p evm\n\nuv run generate-action-provider -n example -p evm -w CdpWalletProvider\n```\n\n----------------------------------------\n\nTITLE: Parsing JSON Response for Wallet Linking\nDESCRIPTION: This snippet shows the JSON response received after successfully linking a wallet address to the Hyperbolic account. The response includes the success status and confirms that the wallet has been linked.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/coinbase_agentkit/action_providers/hyperboliclabs/README.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"success\": true,\n  \"error_code\": null,\n  \"message\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with npm\nDESCRIPTION: This command installs all the necessary dependencies for the project using npm (Node Package Manager). It reads the `package.json` file in the project directory to identify and install the required packages.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/create-onchain-agent/templates/next/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Documenting ERC20 package and submodules using automodule\nDESCRIPTION: This snippet uses the `automodule` directive to generate documentation for Python modules and their contents.  It specifies the module to document, using the `:members:`, `:undoc-members:`, and `:show-inheritance:` options. These options include documented members, undocumented members and class inheritance to be part of the documentation. It primarily focuses on generating documentation for the specified package and its respective modules.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/docs/coinbase_agentkit.action_providers.erc20.rst#_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: coinbase_agentkit.action_providers.erc20.constants\n   :members:\n   :undoc-members:\n   :show-inheritance:\n\n.. automodule:: coinbase_agentkit.action_providers.erc20.erc20_action_provider\n   :members:\n   :undoc-members:\n   :show-inheritance:\n\n.. automodule:: coinbase_agentkit.action_providers.erc20.schemas\n   :members:\n   :undoc-members:\n   :show-inheritance:\n\n.. automodule:: coinbase_agentkit.action_providers.erc20.utils\n   :members:\n   :undoc-members:\n   :show-inheritance:\n\n.. automodule:: coinbase_agentkit.action_providers.erc20.validators\n   :members:\n   :undoc-members:\n   :show-inheritance:\n\n.. automodule:: coinbase_agentkit.action_providers.erc20\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Installing AgentKit LangChain Extension and Dependencies\nDESCRIPTION: This command installs the necessary Python packages to integrate AgentKit with the LangChain framework. It includes the AgentKit LangChain extension, the LangChain core library, and the LangGraph dependency.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npip install coinbase-agentkit-langchain langchain-openai langgraph\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js Using nvm - Bash\nDESCRIPTION: This command uses Node Version Manager (nvm) to install the latest version of Node.js. It requires that nvm is already installed. Running this command downloads and activates the latest Node.js, preparing your system for the AgentKit example.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/examples/model-context-protocol-smart-wallet-server/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnvm install node\n```\n\n----------------------------------------\n\nTITLE: Generating Action Providers using CLI in Bash\nDESCRIPTION: This code snippet illustrates command-line commands to invoke the script for generating action providers in different modes (interactive, with arguments, hybrid). Dependencies include the 'uv' runtime environment. Key parameters include provider name, protocol family, wallet provider, and interactive mode. The output is a set of boilerplate files for the new action provider, organized into main provider files and test files.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/scripts/generate_action_provider/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Interactive mode\nuv run generate-action-provider\n\n# CLI mode with arguments\nuv run generate-action-provider [options]\n\n# Hybrid mode with arguments\nuv run generate-action-provider [options] -i\n```\n\n----------------------------------------\n\nTITLE: Getting Purchase History - Hyperbolic\nDESCRIPTION: Get purchase history.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/README.md#_snippet_38\n\nLANGUAGE: Hyperbolic\nCODE:\n```\nget_purchase_history\n```\n\n----------------------------------------\n\nTITLE: Renting GPU Compute Resources - Hyperbolic\nDESCRIPTION: Rent GPU compute resources.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/README.md#_snippet_35\n\nLANGUAGE: Hyperbolic\nCODE:\n```\nrent_compute\n```\n\n----------------------------------------\n\nTITLE: Getting Available GPU Resources - Hyperbolic\nDESCRIPTION: Get available GPU resources.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/README.md#_snippet_31\n\nLANGUAGE: Hyperbolic\nCODE:\n```\nget_available_gpus\n```\n\n----------------------------------------\n\nTITLE: Linking Wallet Address - Hyperbolic\nDESCRIPTION: Link a wallet address to your account.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/README.md#_snippet_40\n\nLANGUAGE: Hyperbolic\nCODE:\n```\nlink_wallet_address\n```\n\n----------------------------------------\n\nTITLE: Installing pipx with Specific Python Version\nDESCRIPTION: Commands for installing pipx using a specific Python version (3.10 in this example) when multiple Python versions are installed on the system.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/create-onchain-agent/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npython3.10 -m pip install --user pipx\npython3.10 -m pipx ensurepath\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration for Onramp Action Provider\nDESCRIPTION: Defines the required CDP_PROJECT_ID environment variable needed for creating an OnrampActionProvider. This project ID can be obtained from the Coinbase Developer Portal.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/coinbase_agentkit/action_providers/onramp/README.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nCDP_PROJECT_ID\n```\n\n----------------------------------------\n\nTITLE: Checking Node.js Version Using Bash\nDESCRIPTION: This snippet checks the installed Node.js version by executing the command 'node --version' in a bash terminal. Node.js version 18 or higher is required to run the chatbot example; lower versions may not be compatible. The command outputs the current version number to help verify that the required environment is established before proceeding with installation.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/examples/langchain-xmtp-chatbot/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode --version\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for Price Inference of a Token\nDESCRIPTION: Provides the expected JSON output of the get_price_inference action, including fields for the predicted price as a string, the UNIX timestamp of the inference, the asset token symbol, and the timeframe. Useful for client applications displaying token price predictions.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/agentkit/src/action-providers/allora/README.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"price\": \"50000.00\",\n  \"timestamp\": 1718198400,\n  \"asset\": \"BTC\",\n  \"timeframe\": \"8h\"\n}\n```\n\n----------------------------------------\n\nTITLE: Disconnecting from SSH Server - SSH\nDESCRIPTION: Disconnects from an SSH server.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/README.md#_snippet_54\n\nLANGUAGE: SSH\nCODE:\n```\nssh_disconnect\n```\n\n----------------------------------------\n\nTITLE: Running the CDP Agentkit Chatbot with Environment Variables - Bash\nDESCRIPTION: This snippet demonstrates how to start the main chatbot script using uv after setting the necessary environment variables: 'CDP_API_KEY_NAME', 'CDP_API_KEY_PRIVATE_KEY', 'OPENAI_API_KEY', and optionally 'NETWORK_ID'. The 'uv run chatbot.py' command launches the chatbot application in your terminal, enabling interaction with the Web3 ecosystem.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/examples/langchain-cdp-chatbot/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nuv run chatbot.py\n```\n\n----------------------------------------\n\nTITLE: Running the Python Chatbot (Bash)\nDESCRIPTION: Executes the main Python chatbot script (`chatbot.py`) using the 'uv run' command. This command requires specific environment variables (CDP_API_KEY_NAME, CDP_API_KEY_PRIVATE_KEY, OPENAI_API_KEY) to be set prior to execution. Optionally, PRIVATE_KEY can be set, otherwise a new one is generated. NETWORK_ID defaults to 'base-sepolia' if not set.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/examples/openai-agents-sdk-smart-wallet-chatbot/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nuv run chatbot.py\n```\n\n----------------------------------------\n\nTITLE: Action Provider Directory Structure Example\nDESCRIPTION: Illustrates the recommended directory structure for organizing Action Providers within the AgentKit project (`typescript/agentkit/src/action-providers`). This example shows a 'pyth' provider containing its implementation, schemas, and test files.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/CONTRIBUTING-TYPESCRIPT.md#_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n./typescript/agentkit/src\n└── action-providers\n    └── pyth\n       ├── pythActionProvider.ts\n       ├── schemas.ts\n       └── pythActionProvider.test.ts\n    └── ...\n```\n\n----------------------------------------\n\nTITLE: Checking Node.js Version - Bash\nDESCRIPTION: This snippet checks the installed Node.js version. It's a prerequisite check to ensure the user has the correct Node.js version (18 or higher) required for running the example. The output displays the Node.js version.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/examples/langchain-zerodev-chatbot/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode --version\n```\n\n----------------------------------------\n\nTITLE: Generating Text - Hyperbolic\nDESCRIPTION: Generate text using AI models.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/README.md#_snippet_28\n\nLANGUAGE: Hyperbolic\nCODE:\n```\ngenerate_text\n```\n\n----------------------------------------\n\nTITLE: Example Agent Output Summarizing Token Market Data\nDESCRIPTION: Presents a sample agent response derived from the Messari tool's output regarding Ethereum market data. The agent reformats and summarizes the information, highlighting the current price and other key metrics for user clarity.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/agentkit/src/action-providers/messari/README.md#_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nAs of March 26, 2025, the current price of Ethereum (ETH) is **$2,012.99**. Here are some additional metrics:\n\n- **24-hour Price Change**: \n  - Absolute Value: -$55.31 \n  - Percentage: -2.67%\n- **Current Market Capitalization**: $242,471,578,768\n- **24-hour Trading Volume**: $7,011,385,937.27\n- **Circulating Supply**: 120,639,295.2 ETH\n\nIf you need more information or assistance, feel free to ask!\n```\n\n----------------------------------------\n\nTITLE: Applying Code Style using Make and Ruff\nDESCRIPTION: Provides `make` commands to manage code style using the `ruff` tool. `make format` applies formatting, `make lint` checks for style issues, and `make lint-fix` attempts to automatically fix detected linting problems. These commands rely on corresponding targets being defined in the project's `Makefile`.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/CONTRIBUTING-PYTHON.md#_snippet_8\n\nLANGUAGE: Bash\nCODE:\n```\n# Format code\nmake format\n\n# Lint code\nmake lint\n\n# Fix linting issues\nmake lint-fix\n```\n\n----------------------------------------\n\nTITLE: Running Tests using Make\nDESCRIPTION: Executes the test suite for the current package using the `make test` command. This requires a `Makefile` with a defined `test` target in the current directory.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/CONTRIBUTING-PYTHON.md#_snippet_6\n\nLANGUAGE: Bash\nCODE:\n```\nmake test\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests with pnpm - Bash Script\nDESCRIPTION: This snippet demonstrates how to run the unit tests for specific AgentKit package folders using pnpm. The user navigates to the target package directory with 'cd' and runs the test suite using the 'pnpm test' command. Dependencies: 'pnpm' package manager, Node.js, and a properly configured test script in the package.json. Inputs: No explicit arguments needed; run in the context of the correct package directory. Outputs: Console test reports. Limitations: Requires pnpm and proper setup; tests are run synchronously in the current shell.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/CONTRIBUTING-TYPESCRIPT.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncd typescript/agentkit\npnpm test\n```\n\n----------------------------------------\n\nTITLE: Deleting Superfluid Token Streaming Flow - Superfluid\nDESCRIPTION: Deletes an existing token streaming flow.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/README.md#_snippet_59\n\nLANGUAGE: Superfluid\nCODE:\n```\ndelete_flow\n```\n\n----------------------------------------\n\nTITLE: Transferring ERC-721 NFT Ownership - ERC721\nDESCRIPTION: Transfers ownership of a specific NFT token to a destination address.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/README.md#_snippet_26\n\nLANGUAGE: ERC721\nCODE:\n```\ntransfer\n```\n\n----------------------------------------\n\nTITLE: Checking Node.js Version using Bash\nDESCRIPTION: Executes the `node --version` command in a Bash shell to display the currently installed version of Node.js. This is used as a prerequisite check, requiring Node.js 18 or higher for the example.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/examples/langchain-solana-chatbot/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode --version\n```\n\n----------------------------------------\n\nTITLE: Checking SSH Connection Status - SSH\nDESCRIPTION: Checks status of SSH connections.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/README.md#_snippet_52\n\nLANGUAGE: SSH\nCODE:\n```\nssh_status\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for Inference Data by Topic ID\nDESCRIPTION: Presents the expected JSON response structure for the get_inference_by_topic_id action, containing fields such as network_inference, normalized values, confidence intervals across percentiles and values, topic ID, timestamp, and any extra data. This response aids integrations that require probabilistic inference outputs.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/agentkit/src/action-providers/allora/README.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"network_inference\": \"0.5\",\n  \"network_inference_normalized\": \"0.5\",\n  \"confidence_interval_percentiles\": [\"0.1\", \"0.5\", \"0.9\"],\n  \"confidence_interval_percentiles_normalized\": [\"0.1\", \"0.5\", \"0.9\"],\n  \"confidence_interval_values\": [\"0.1\", \"0.5\", \"0.9\"],\n  \"confidence_interval_values_normalized\": [\"0.1\", \"0.5\", \"0.9\"],\n  \"topic_id\": \"1\",\n  \"timestamp\": 1718198400,\n  \"extra_data\": \"extra_data\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting API Key Environment Variables (Bash)\nDESCRIPTION: This snippet shows how to set environment variables needed to configure AgentKit and access required services like OpenAI and Coinbase CDP. You must replace the placeholder values with your actual API keys and name before running this command in your shell.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/framework-extensions/langchain/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=<your-openai-api-key>\nexport CDP_API_KEY_NAME=<your-cdp-api-key-name>\nexport CDP_API_KEY_PRIVATE=<your-cdp-api-key-private>\n```\n\n----------------------------------------\n\nTITLE: Checking Node.js Version (Bash)\nDESCRIPTION: Checks the currently installed version of Node.js using the `node --version` command. This is a prerequisite step to ensure compatibility with the AgentKit example, which requires Node.js 18 or higher.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/examples/langchain-smart-wallet-chatbot/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nnode --version\n```\n\n----------------------------------------\n\nTITLE: Withdrawing Assets from Morpho Vault - Morpho\nDESCRIPTION: Withdraws a specified amount of assets from a designated Morpho Vault.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/README.md#_snippet_42\n\nLANGUAGE: Morpho\nCODE:\n```\nwithdraw\n```\n\n----------------------------------------\n\nTITLE: Checking Python and UV Versions in Bash\nDESCRIPTION: Commands to verify that the required Python (3.10+) and uv package manager versions are installed on the system before running the chatbot.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/examples/langchain-eth-account-chatbot/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython --version\nuv --version\n```\n\n----------------------------------------\n\nTITLE: Parsing JSON Response for GPU Rental\nDESCRIPTION: This snippet shows the JSON response received after renting a GPU from the Hyperbolic platform. The response includes the status and the instance name of the rented GPU.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/coinbase_agentkit/action_providers/hyperboliclabs/README.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"success\",\n  \"instance_name\": \"mortified-morningglory-wombat\"\n}\n```\n\n----------------------------------------\n\nTITLE: Set OpenAI API Key Environment Variable - bash\nDESCRIPTION: Sets the OPENAI_API_KEY environment variable in the shell. This variable is crucial for authenticating with the OpenAI API when using the @langchain/openai language model within the LangChain agent setup.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/framework-extensions/langchain/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=<your-openai-api-key>\n```\n\n----------------------------------------\n\nTITLE: Exporting the OPENAI_API_KEY in sh\nDESCRIPTION: This snippet exports your OpenAI API key as an environment variable in your current shell session, which is necessary for the chatbot to function and for trace export. Replace <your-openai-api-key> with your actual API key. If this key is not set, the system will log a message and skip trace export. Run this command in your terminal before starting the chatbot application.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/examples/openai-agents-cdp-voice-chatbot/README.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nexport OPENAI_API_KEY=<your-openai-api-key>\n```\n\n----------------------------------------\n\nTITLE: Installing nightly build in Python\nDESCRIPTION: These commands install the latest or specific nightly build of `coinbase-agentkit` and `coinbase-agentkit-langchain` using pip or poetry. Replace `coinbase-agentkit-langchain` with the appropriate framework extension package if using a framework other than Langchain.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npip install --pre coinbase-agentkit coinbase-agentkit-langchain\n```\n\nLANGUAGE: bash\nCODE:\n```\npoetry add coinbase-agentkit coinbase-agentkit-langchain --allow-prereleases\n```\n\nLANGUAGE: bash\nCODE:\n```\npip install coinbase-agentkit==0.1.2.dev20250220 coinbase-agentkit-langchain==0.1.1.dev20250220\n```\n\nLANGUAGE: bash\nCODE:\n```\npoetry add coinbase-agentkit==0.1.2.dev20250220 coinbase-agentkit-langchain==0.1.1.dev20250220 --allow-prereleases\n```\n\n----------------------------------------\n\nTITLE: Uploading Files via SFTP - SSH\nDESCRIPTION: Uploads files to a remote server via SFTP.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/README.md#_snippet_56\n\nLANGUAGE: SSH\nCODE:\n```\nsftp_upload\n```\n\n----------------------------------------\n\nTITLE: Parsing JSON Response for GPU Termination\nDESCRIPTION: This snippet shows the JSON response received after terminating a GPU instance. The response confirms the success of the termination, including the status and relevant messages.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/coinbase_agentkit/action_providers/hyperboliclabs/README.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"success\",\n  \"message\": null,\n  \"error_code\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with uv - Bash\nDESCRIPTION: This command uses the uv package manager to install all project dependencies listed in the `requirements.txt` or similar configuration file. It simplifies the setup process by automating package installation required for the chatbot application.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/examples/langchain-smart-wallet-chatbot/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nuv install\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies with uv - Bash\nDESCRIPTION: This snippet installs all required dependencies for the chatbot project using the uv package manager. The 'uv sync' command fetches and installs all packages specified in the project's dependency list. Ensure uv is installed before running this command in your terminal to prepare the environment for the chatbot.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/examples/langchain-cdp-chatbot/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nuv sync\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Building Project (Bash)\nDESCRIPTION: Runs two npm commands in sequence within a Bash shell from the root directory. `npm install` downloads and installs project dependencies. `npm run build` executes the build script, compiling code and preparing local packages (`@coinbase/agentkit-langchain`, `@coinbase/agentkit`) for use by the example.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/examples/langchain-solana-chatbot/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Building - Bash\nDESCRIPTION: This series of bash commands handles installing dependencies and building the project using npm. The `npm install` command installs all project dependencies from the package.json.  The `npm run build` command builds the packages locally. This should be executed at the project's root directory.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/examples/langchain-zerodev-chatbot/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Reinstalling Dependencies with pnpm (Bash)\nDESCRIPTION: Provides a bash command to recursively find and remove all `node_modules` directories within the current directory (intended to be run from `typescript/`) and then reinstall project dependencies using `pnpm install`. This is useful for contributors migrating from a previous npm-based setup.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/CONTRIBUTING-TYPESCRIPT.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfind . -name \"node_modules\" -type d -exec rm -rf {} + && pnpm i\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js with NVM (Bash)\nDESCRIPTION: Installs the latest version of Node.js using Node Version Manager (nvm). This command should be used if the currently installed Node.js version does not meet the minimum requirement (v18+). Requires nvm to be previously installed.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/examples/langchain-smart-wallet-chatbot/README.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nnvm install node\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js Using nvm in Bash\nDESCRIPTION: This snippet installs the latest version of Node.js using the Node Version Manager (nvm) by running 'nvm install node' in the terminal. nvm must be installed on the user's system in advance. This command fetches, installs, and sets the latest Node.js version as the default, ensuring compatibility with the chatbot requirements.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/examples/langchain-xmtp-chatbot/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnvm install node\n```\n\n----------------------------------------\n\nTITLE: Running All Tests in the AgentKit Package with pnpm - Bash Script\nDESCRIPTION: This snippet shows how to execute all tests in the @coinbase/agentkit package by changing to the correct directory and using the 'pnpm test' command. Dependencies: pnpm, Node.js, @coinbase/agentkit package set up for testing. Inputs: The commands should be run from a shell with access to the codebase. Outputs: Test results are shown in the console. Constraints: Package must be properly installed; pnpm should be available.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/CONTRIBUTING-TYPESCRIPT.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncd typescript/agentkit\npnpm test\n```\n\n----------------------------------------\n\nTITLE: Checking Python and uv Versions in Bash\nDESCRIPTION: This snippet verifies the installed versions of Python and uv to ensure compatibility with the chatbot setup, requiring Python 3.10+. Execute these commands in your terminal to check that you have Python 3.10 or higher and the uv package manager available. No dependencies are required beyond having both programs installed on your system. Outputs are the version numbers of python and uv; ensure both are accessible in your PATH. If not installed, follow the linked uv installation instructions.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/examples/openai-agents-cdp-voice-chatbot/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython --version\nuv --version\n```\n\n----------------------------------------\n\nTITLE: Checking Node.js Version - Bash\nDESCRIPTION: This command checks the installed Node.js version, ensuring compatibility with the chatbot example which requires Node.js 18 or higher. It should be executed in your terminal before proceeding with setup. The command takes no parameters and outputs the current Node.js version in the console.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/examples/model-context-protocol-smart-wallet-server/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode --version\n```\n\n----------------------------------------\n\nTITLE: Adding a Changeset with pnpm - Bash Script\nDESCRIPTION: This snippet demonstrates how to start the Changesets prompt to create a new changelog entry for the project. It uses the script 'pnpm run changeset', which launches an interactive CLI to select affected packages, change types, and enter a changelog summary. Dependencies: changesets installed and configured, pnpm, and package.json scripts. Inputs: User selections and summary text during the prompt. Outputs: New changeset Markdown file in the '.changeset' directory. Limitations: Only works if changesets are set up in the workspace.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/CONTRIBUTING-TYPESCRIPT.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npnpm run changeset\n```\n\n----------------------------------------\n\nTITLE: Installing AgentKit via npm\nDESCRIPTION: Command to install the AgentKit package using npm package manager. This is the first step required before using the framework in your project.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/agentkit/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @coinbase/agentkit\n```\n\n----------------------------------------\n\nTITLE: Configuring Onramp Provider: Environment Variable (plaintext)\nDESCRIPTION: Specifies the environment variable required for configuring the OnrampActionProvider. This variable holds the CDP project ID necessary to connect to Coinbase's onramp services.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/agentkit/src/action-providers/onramp/README.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nCDP_PROJECT_ID\n```\n\n----------------------------------------\n\nTITLE: Installing create-onchain-agent Globally for CLI Usage (Shell)\nDESCRIPTION: This shell command globally installs the create-onchain-agent CLI package, making the agentkit command available system-wide. It is required when 'agentkit: not found' errors occur. Prerequisite: Node.js and npm are properly installed. Input: none; Output: agentkit becomes a globally accessible CLI.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/create-onchain-agent/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm install -g create-onchain-agent/@latest\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for DefiLlama Action Provider\nDESCRIPTION: Shows the file organization of the DefiLlama action provider implementation, including the main provider file, constants, tests, schemas, and type definitions.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/agentkit/src/action-providers/defillama/README.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndefillama/\n├── constants.ts                    # API endpoints and other constants\n├── defillamaActionProvider.test.ts # Tests for the provider\n├── defillamaActionProvider.ts      # Main provider with DefiLlama API functionality\n├── index.ts                        # Main exports\n├── README.md                       # Documentation\n├── schemas.ts                      # DefiLlama action schemas\n└── types.ts                        # Type definitions\n```\n\n----------------------------------------\n\nTITLE: Exporting OpenAI API Key (Shell)\nDESCRIPTION: Sets the `OPENAI_API_KEY` environment variable in the current shell session using the `export` command. This is required for the application to authenticate with the OpenAI API and is often needed if tracing features are enabled or if the key wasn't set previously.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/examples/openai-agents-sdk-cdp-chatbot/README.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nexport OPENAI_API_KEY=<your-openai-api-key>\n```\n\n----------------------------------------\n\nTITLE: Installing LangChain dependencies for framework integration\nDESCRIPTION: Command to install LangChain packages needed for integrating AgentKit with LangChain and OpenAI. Required for using AI capabilities with the agent.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/agentkit/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @langchain @langchain/langgraph @langchain/openai\n```\n\n----------------------------------------\n\nTITLE: Starting the Chatbot Application with npm in Bash\nDESCRIPTION: This snippet provides the command to launch the chatbot application using npm. Executing 'npm start' runs the start script defined in package.json, initializing the chatbot with current configuration and environment variables. This should be performed after setting all required ENV Vars, as missing or incorrect variables may prevent the chatbot from starting correctly.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/examples/langchain-privy-chatbot/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Building Packages\nDESCRIPTION: This command builds the packages locally using npm. It compiles the TypeScript code and prepares the packages for use in the chatbot example. Changes to the packages will be reflected in the chatbot example.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/examples/langchain-farcaster-chatbot/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Running the Development Server\nDESCRIPTION: This command starts the Next.js development server. It allows you to view and test the application in a local development environment. The default port is usually 3000.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/create-onchain-agent/templates/next/README.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Checking Node Version\nDESCRIPTION: This command checks the installed version of Node.js. The example requires Node.js version 18 or higher.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/examples/langchain-farcaster-chatbot/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode --version\n```\n\n----------------------------------------\n\nTITLE: Checking Node.js and npm Versions in Bash\nDESCRIPTION: This snippet provides commands to verify that the system has Node.js version 18 or higher and a compatible version of npm installed. It is essential to confirm these prerequisites before running the chatbot application, as incorrect versions may cause incompatibilities or unexpected errors. The snippet outputs the current versions of Node.js and npm to ensure readiness for subsequent steps.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/examples/langchain-privy-chatbot/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode --version\nnpm --version\n```\n\n----------------------------------------\n\nTITLE: Checking Python and uv Installation - Bash\nDESCRIPTION: This code snippet shows how to verify your Python and uv installations by outputting their versions. 'python --version' checks that Python 3.10+ is installed, while 'uv --version' ensures that the uv package manager is present. Both commands should be run in the terminal prior to progressing with the project setup.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/examples/langchain-cdp-chatbot/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython --version\nuv --version\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Nillion Action Provider\nDESCRIPTION: Shows the organization of files in the nillion directory and related test files. Includes the main provider implementation, schema definitions, and test files.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/coinbase_agentkit/action_providers/nillion/README.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnillion/\n├── nillion_action_provider.py        # Main provider with SecretVault functionality\n├── schemas.py                        # Domain action schemas\n├── __init__.py                       # Main exports\n└── README.md                         # This file\n\n# From python/coinbase-agentkit/\ntests/action_providers/nillion/\n├── conftest.py                       # Test configuration\n└── test_nillion_action_provider.py   # Test file for Nillion provider\n```\n\n----------------------------------------\n\nTITLE: Wallet Action Provider - Directory Structure\nDESCRIPTION: Shows the directory structure of the wallet action provider, including the main provider, test file, schemas, and main exports. It provides context for where different components are located within the wallet directory.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/agentkit/src/action-providers/wallet/README.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nwallet/\n├── walletActionProvider.ts         # Main provider with wallet functionality\n├── walletActionProvider.test.ts    # Test file for wallet provider\n├── schemas.ts                      # Wallet action schemas\n├── index.ts                        # Main exports\n└── README.md                       # This file\n```\n\n----------------------------------------\n\nTITLE: Viewing ERC721 Action Provider Directory Structure\nDESCRIPTION: Illustrates the file organization within the 'erc721' directory. It shows the main provider implementation (`erc721ActionProvider.ts`), tests (`erc721ActionProvider.test.ts`), constants/ABI (`constants.ts`), action schemas (`schemas.ts`), main exports (`index.ts`), and the README file.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/agentkit/src/action-providers/erc721/README.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nerc721/\n├── erc721ActionProvider.ts         # Main provider with NFT functionality\n├── erc721ActionProvider.test.ts    # Test file for ERC721 provider\n├── constants.ts                    # ERC721 contract constants and ABI\n├── schemas.ts                      # NFT action schemas\n├── index.ts                        # Main exports\n└── README.md                       # This file\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Compound Action Provider\nDESCRIPTION: Shows the file organization for the Compound action provider and its tests in the AgentKit project.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/coinbase_agentkit/action_providers/compound/README.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\ncompound/\n├── compound_action_provider.py     # Compound action provider\n├── schemas.py                      # Compound action schemas\n├── __init__.py                     # Main exports\n└── README.md                       # This file\n\n# From python/coinbase-agentkit/\ntests/action_providers/compound/\n├── conftest.py                    # Test configuration\n├── test_compound_borrow.py        # Test for borrow action\n├── test_compound_portfolio.py     # Test for portfolio action\n├── test_compound_provider.py      # Test for provider\n├── test_compound_repay.py         # Test for repay action\n├── test_compound_schemas.py       # Test for schemas\n├── test_compound_supply.py        # Test for supply action\n├── test_compound_utils.py         # Test for utils\n└── test_compound_withdraw.py      # Test for withdraw action\n```\n\n----------------------------------------\n\nTITLE: Directory Structure in Markdown\nDESCRIPTION: Lists the files contained in the across directory, showing the main components of the Across Action Provider implementation including the provider file, tests, schemas, utilities, exports, and documentation.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/agentkit/src/action-providers/across/README.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nacross/\n├── acrossActionProvider.ts        # Main provider with Across Protocol functionality\n├── acrossActionProvider.test.ts   # Tests\n├── schemas.ts                     # Bridge token schema\n├── utils.ts                       # Utility functions for Across integration\n├── index.ts                       # Main exports\n└── README.md                      # This file\n```\n\n----------------------------------------\n\nTITLE: Moving Environment Variable File\nDESCRIPTION: This command renames the `.env.local` file to `.env`. This is typically done to activate or make available a local environment configuration for the application.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/typescript/create-onchain-agent/templates/next/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmv .env.local .env\n```\n\n----------------------------------------\n\nTITLE: Adding SSH Host Key to known_hosts - SSH\nDESCRIPTION: Adds an SSH host key to known_hosts.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/README.md#_snippet_55\n\nLANGUAGE: SSH\nCODE:\n```\nssh_add_host_key\n```\n\n----------------------------------------\n\nTITLE: Downloading Files via SFTP - SSH\nDESCRIPTION: Downloads files from a remote server via SFTP.\nSOURCE: https://github.com/coinbase/agentkit/blob/main/python/coinbase-agentkit/README.md#_snippet_57\n\nLANGUAGE: SSH\nCODE:\n```\nsftp_download\n```"
  }
]