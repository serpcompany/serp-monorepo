[
  {
    "owner": "projectdiscovery",
    "repo": "katana",
    "content": "TITLE: Katana Configuration Options Command\nDESCRIPTION: Complete list of configuration options available in Katana, including depth control, JavaScript crawling, timeouts, and proxy settings.\nSOURCE: https://github.com/projectdiscovery/katana/blob/main/README.md#2025-04-23_snippet_26\n\nLANGUAGE: console\nCODE:\n```\nkatana -h config\n\nFlags:\nCONFIGURATION:\n   -r, -resolvers string[]       list of custom resolver (file or comma separated)\n   -d, -depth int                maximum depth to crawl (default 3)\n   -jc, -js-crawl                enable endpoint parsing / crawling in javascript file\n   -ct, -crawl-duration int      maximum duration to crawl the target for\n   -kf, -known-files string      enable crawling of known files (all,robotstxt,sitemapxml)\n   -mrs, -max-response-size int  maximum response size to read (default 9223372036854775807)\n   -timeout int                  time to wait for request in seconds (default 10)\n   -aff, -automatic-form-fill    enable automatic form filling (experimental)\n   -fx, -form-extraction         enable extraction of form, input, textarea & select elements\n   -retry int                    number of times to retry the request (default 1)\n   -proxy string                 http/socks5 proxy to use\n   -H, -headers string[]         custom header/cookie to include in request\n   -config string                path to the katana configuration file\n   -fc, -form-config string      path to custom form configuration file\n   -flc, -field-config string    path to custom field configuration file\n   -s, -strategy string          Visit strategy (depth-first, breadth-first) (default \"depth-first\")\n```\n\n----------------------------------------\n\nTITLE: Using Katana as a Library in Go\nDESCRIPTION: Demonstrates how to use Katana programmatically as a Go library, showing configuration options and crawler initialization.\nSOURCE: https://github.com/projectdiscovery/katana/blob/main/README.md#2025-04-23_snippet_44\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"math\"\n\n\t\"github.com/projectdiscovery/gologger\"\n\t\"github.com/projectdiscovery/katana/pkg/engine/standard\"\n\t\"github.com/projectdiscovery/katana/pkg/output\"\n\t\"github.com/projectdiscovery/katana/pkg/types\"\n)\n\nfunc main() {\n\toptions := &types.Options{\n\t\tMaxDepth:     3,             // Maximum depth to crawl\n\t\tFieldScope:   \"rdn\",         // Crawling Scope Field\n\t\tBodyReadSize: math.MaxInt,   // Maximum response size to read\n\t\tTimeout:      10,            // Timeout is the time to wait for request in seconds\n\t\tConcurrency:  10,            // Concurrency is the number of concurrent crawling goroutines\n\t\tParallelism:  10,            // Parallelism is the number of urls processing goroutines\n\t\tDelay:        0,             // Delay is the delay between each crawl requests in seconds\n\t\tRateLimit:    150,           // Maximum requests to send per second\n\t\tStrategy:     \"depth-first\", // Visit strategy (depth-first, breadth-first)\n\t\tOnResult: func(result output.Result) { // Callback function to execute for result\n\t\t\tgologger.Info().Msg(result.Request.URL)\n\t\t},\n\t}\n\tcrawlerOptions, err := types.NewCrawlerOptions(options)\n\tif err != nil {\n\t\tgologger.Fatal().Msg(err.Error())\n\t}\n\tdefer crawlerOptions.Close()\n\tcrawler, err := standard.New(crawlerOptions)\n\tif err != nil {\n\t\tgologger.Fatal().Msg(err.Error())\n\t}\n\tdefer crawler.Close()\n\tvar input = \"https://www.hackerone.com\"\n\terr = crawler.Crawl(input)\n\tif err != nil {\n\t\tgologger.Warning().Msgf(\"Could not crawl %s: %s\", input, err.Error())\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Running Katana with URL Input\nDESCRIPTION: Examples of running Katana with single URL, multiple URLs, and file input.\nSOURCE: https://github.com/projectdiscovery/katana/blob/main/README.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nkatana -u https://tesla.com\n\nkatana -u https://tesla.com,https://google.com\n\nkatana -list url_list.txt\n```\n\n----------------------------------------\n\nTITLE: Basic Katana Crawling Example\nDESCRIPTION: A complete example of running Katana against youtube.com, showing the tool's banner and discovered URLs. The output includes various endpoints, resources, and application paths found during crawling.\nSOURCE: https://github.com/projectdiscovery/katana/blob/main/README.md#2025-04-23_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nkatana -u https://youtube.com\n\n   __        __                \n  / /_____ _/ /____ ____  ___ _\n /  '_/ _  / __/ _  / _ \\/ _  /\n/_/\\_\\\\_,_/\\__/\\_,_/_//_/\\_,_/ v0.0.1                     \n\n      projectdiscovery.io\n\n[WRN] Use with caution. You are responsible for your actions.\n[WRN] Developers assume no liability and are not responsible for any misuse or damage.\nhttps://www.youtube.com/\nhttps://www.youtube.com/about/\nhttps://www.youtube.com/about/press/\nhttps://www.youtube.com/about/copyright/\nhttps://www.youtube.com/t/contact_us/\nhttps://www.youtube.com/creators/\nhttps://www.youtube.com/ads/\nhttps://www.youtube.com/t/terms\nhttps://www.youtube.com/t/privacy\nhttps://www.youtube.com/about/policies/\nhttps://www.youtube.com/howyoutubeworks?utm_campaign=ytgen&utm_source=ythp&utm_medium=LeftNav&utm_content=txt&u=https%3A%2F%2Fwww.youtube.com%2Fhowyoutubeworks%3Futm_source%3Dythp%26utm_medium%3DLeftNav%26utm_campaign%3Dytgen\nhttps://www.youtube.com/new\nhttps://m.youtube.com/\nhttps://www.youtube.com/s/desktop/4965577f/jsbin/desktop_polymer.vflset/desktop_polymer.js\nhttps://www.youtube.com/s/desktop/4965577f/cssbin/www-main-desktop-home-page-skeleton.css\nhttps://www.youtube.com/s/desktop/4965577f/cssbin/www-onepick.css\nhttps://www.youtube.com/s/_/ytmainappweb/_/ss/k=ytmainappweb.kevlar_base.0Zo5FUcPkCg.L.B1.O/am=gAE/d=0/rs=AGKMywG5nh5Qp-BGPbOaI1evhF5BVGRZGA\nhttps://www.youtube.com/opensearch?locale=en_GB\nhttps://www.youtube.com/manifest.webmanifest\nhttps://www.youtube.com/s/desktop/4965577f/cssbin/www-main-desktop-watch-page-skeleton.css\nhttps://www.youtube.com/s/desktop/4965577f/jsbin/web-animations-next-lite.min.vflset/web-animations-next-lite.min.js\nhttps://www.youtube.com/s/desktop/4965577f/jsbin/custom-elements-es5-adapter.vflset/custom-elements-es5-adapter.js\nhttps://www.youtube.com/s/desktop/4965577f/jsbin/webcomponents-sd.vflset/webcomponents-sd.js\nhttps://www.youtube.com/s/desktop/4965577f/jsbin/intersection-observer.min.vflset/intersection-observer.min.js\nhttps://www.youtube.com/s/desktop/4965577f/jsbin/scheduler.vflset/scheduler.js\nhttps://www.youtube.com/s/desktop/4965577f/jsbin/www-i18n-constants-en_GB.vflset/www-i18n-constants.js\nhttps://www.youtube.com/s/desktop/4965577f/jsbin/www-tampering.vflset/www-tampering.js\nhttps://www.youtube.com/s/desktop/4965577f/jsbin/spf.vflset/spf.js\nhttps://www.youtube.com/s/desktop/4965577f/jsbin/network.vflset/network.js\nhttps://www.youtube.com/howyoutubeworks/\nhttps://www.youtube.com/trends/\nhttps://www.youtube.com/jobs/\nhttps://www.youtube.com/kids/\n```\n\n----------------------------------------\n\nTITLE: Katana JSON Output Format\nDESCRIPTION: Demonstrates using Katana with JSON output format, showing detailed request and response information including headers, body content, and detected technologies.\nSOURCE: https://github.com/projectdiscovery/katana/blob/main/README.md#2025-04-23_snippet_41\n\nLANGUAGE: console\nCODE:\n```\nkatana -u https://example.com -jsonl | jq .\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"timestamp\": \"2023-03-20T16:23:58.027559+05:30\",\n  \"request\": {\n    \"method\": \"GET\",\n    \"endpoint\": \"https://example.com\",\n    \"raw\": \"GET / HTTP/1.1\\r\\nHost: example.com\\r\\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 11_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36\\r\\nAccept-Encoding: gzip\\r\\n\\r\\n\"\n  },\n  \"response\": {\n    \"status_code\": 200,\n    \"headers\": {\n      \"accept_ranges\": \"bytes\",\n      \"expires\": \"Mon, 27 Mar 2023 10:53:58 GMT\",\n      \"last_modified\": \"Thu, 17 Oct 2019 07:18:26 GMT\",\n      \"content_type\": \"text/html; charset=UTF-8\",\n      \"server\": \"ECS (dcb/7EA3)\",\n      \"vary\": \"Accept-Encoding\",\n      \"etag\": \"\\\"3147526947\\\"\",\n      \"cache_control\": \"max-age=604800\",\n      \"x_cache\": \"HIT\",\n      \"date\": \"Mon, 20 Mar 2023 10:53:58 GMT\",\n      \"age\": \"331239\"\n    },\n    \"body\": \"<!doctype html>\\n<html>\\n<head>\\n    <title>Example Domain</title>\\n\\n    <meta charset=\\\"utf-8\\\" />\\n    <meta http-equiv=\\\"Content-type\\\" content=\\\"text/html; charset=utf-8\\\" />\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1\\\" />\\n    <style type=\\\"text/css\\\">\\n    body {\\n        background-color: #f0f0f2;\\n        margin: 0;\\n        padding: 0;\\n        font-family: -apple-system, system-ui, BlinkMacSystemFont, \\\"Segoe UI\\\", \\\"Open Sans\\\", \\\"Helvetica Neue\\\", Helvetica, Arial, sans-serif;\\n        \\n    }\\n    div {\\n        width: 600px;\\n        margin: 5em auto;\\n        padding: 2em;\\n        background-color: #fdfdff;\\n        border-radius: 0.5em;\\n        box-shadow: 2px 3px 7px 2px rgba(0,0,0,0.02);\\n    }\\n    a:link, a:visited {\\n        color: #38488f;\\n        text-decoration: none;\\n    }\\n    @media (max-width: 700px) {\\n        div {\\n            margin: 0 auto;\\n            width: auto;\\n        }\\n    }\\n    </style>    \\n</head>\\n\\n<body>\\n<div>\\n    <h1>Example Domain</h1>\\n    <p>This domain is for use in illustrative examples in documents. You may use this\\n    domain in literature without prior coordination or asking for permission.</p>\\n    <p><a href=\\\"https://www.iana.org/domains/example\\\">More information...</a></p>\\n</div>\\n</body>\\n</html>\\n\",\n    \"technologies\": [\n      \"Azure\",\n      \"Amazon ECS\",\n      \"Amazon Web Services\",\n      \"Docker\",\n      \"Azure CDN\"\n    ],\n    \"raw\": \"HTTP/1.1 200 OK\\r\\nContent-Length: 1256\\r\\nAccept-Ranges: bytes\\r\\nAge: 331239\\r\\nCache-Control: max-age=604800\\r\\nContent-Type: text/html; charset=UTF-8\\r\\nDate: Mon, 20 Mar 2023 10:53:58 GMT\\r\\nEtag: \\\"3147526947\\\"\\r\\nExpires: Mon, 27 Mar 2023 10:53:58 GMT\\r\\nLast-Modified: Thu, 17 Oct 2019 07:18:26 GMT\\r\\nServer: ECS (dcb/7EA3)\\r\\nVary: Accept-Encoding\\r\\nX-Cache: HIT\\r\\n\\r\\n<!doctype html>\\n<html>\\n<head>\\n    <title>Example Domain</title>\\n\\n    <meta charset=\\\"utf-8\\\" />\\n    <meta http-equiv=\\\"Content-type\\\" content=\\\"text/html; charset=utf-8\\\" />\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1\\\" />\\n    <style type=\\\"text/css\\\">\\n    body {\\n        background-color: #f0f0f2;\\n        margin: 0;\\n        padding: 0;\\n        font-family: -apple-system, system-ui, BlinkMacSystemFont, \\\"Segoe UI\\\", \\\"Open Sans\\\", \\\"Helvetica Neue\\\", Helvetica, Arial, sans-serif;\\n        \\n    }\\n    div {\\n        width: 600px;\\n        margin: 5em auto;\\n        padding: 2em;\\n        background-color: #fdfdff;\\n        border-radius: 0.5em;\\n        box-shadow: 2px 3px 7px 2px rgba(0,0,0,0.02);\\n    }\\n    a:link, a:visited {\\n        color: #38488f;\\n        text-decoration: none;\\n    }\\n    @media (max-width: 700px) {\\n        div {\\n            margin: 0 auto;\\n            width: auto;\\n        }\\n    }\\n    </style>    \\n</head>\\n\\n<body>\\n<div>\\n    <h1>Example Domain</h1>\\n    <p>This domain is for use in illustrative examples in documents. You may use this\\n    domain in literature without prior coordination or asking for permission.</p>\\n    <p><a href=\\\"https://www.iana.org/domains/example\\\">More information...</a></p>\\n</div>\\n</body>\\n</html>\\n\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced DSL-based Filtering in Katana\nDESCRIPTION: Examples of using DSL-based expressions for advanced filtering capabilities, such as matching endpoints with specific status codes, containing certain strings, or with particular technologies.\nSOURCE: https://github.com/projectdiscovery/katana/blob/main/README.md#2025-04-23_snippet_36\n\nLANGUAGE: shell\nCODE:\n```\nkatana -u https://www.hackerone.com -mdc 'status_code == 200'\n```\n\nLANGUAGE: shell\nCODE:\n```\nkatana -u https://www.hackerone.com -mdc 'contains(endpoint, \"default\") && status_code != 403'\n```\n\nLANGUAGE: shell\nCODE:\n```\nkatana -u https://www.hackerone.com -mdc 'contains(to_lower(technologies), \"php\")'\n```\n\nLANGUAGE: shell\nCODE:\n```\nkatana -u https://www.hackerone.com -fdc 'contains(to_lower(technologies), \"cloudflare\")'\n```\n\n----------------------------------------\n\nTITLE: Rate Limiting in Katana\nDESCRIPTION: Examples of using different rate limiting options in Katana to control crawl speed, including delay between requests, concurrency, parallelism, and per-second/per-minute rate limits.\nSOURCE: https://github.com/projectdiscovery/katana/blob/main/README.md#2025-04-23_snippet_38\n\nLANGUAGE: shell\nCODE:\n```\nkatana -u https://tesla.com -delay 20\n```\n\nLANGUAGE: shell\nCODE:\n```\nkatana -u https://tesla.com -c 20\n```\n\nLANGUAGE: shell\nCODE:\n```\nkatana -u https://tesla.com -p 20\n```\n\nLANGUAGE: shell\nCODE:\n```\nkatana -u https://tesla.com -rl 100\n```\n\nLANGUAGE: shell\nCODE:\n```\nkatana -u https://tesla.com -rlm 500\n```\n\n----------------------------------------\n\nTITLE: Scope Control Options in Katana\nDESCRIPTION: Available command-line options for controlling the crawl scope in Katana. These options allow defining URL patterns to include or exclude, managing default scoping behavior, and controlling output display.\nSOURCE: https://github.com/projectdiscovery/katana/blob/main/README.md#2025-04-23_snippet_17\n\nLANGUAGE: console\nCODE:\n```\nkatana -h scope\n\nFlags:\nSCOPE:\n   -cs, -crawl-scope string[]       in scope url regex to be followed by crawler\n   -cos, -crawl-out-scope string[]  out of scope url regex to be excluded by crawler\n   -fs, -field-scope string         pre-defined scope field (dn,rdn,fqdn) (default \"rdn\")\n   -ns, -no-scope                   disables host based default scope\n   -do, -display-out-scope          display external endpoint from scoped crawling\n```\n\n----------------------------------------\n\nTITLE: Katana Filter CLI Options\nDESCRIPTION: A comprehensive list of Katana's command-line options for filtering crawl output, including regex matching, field selection, extension filtering, and DSL-based condition matching.\nSOURCE: https://github.com/projectdiscovery/katana/blob/main/README.md#2025-04-23_snippet_37\n\nLANGUAGE: shell\nCODE:\n```\nkatana -h filter\n\nFlags:\nFILTER:\n   -mr, -match-regex string[]       regex or list of regex to match on output url (cli, file)\n   -fr, -filter-regex string[]      regex or list of regex to filter on output url (cli, file)\n   -f, -field string                field to display in output (url,path,fqdn,rdn,rurl,qurl,qpath,file,ufile,key,value,kv,dir,udir)\n   -sf, -store-field string         field to store in per-host output (url,path,fqdn,rdn,rurl,qurl,qpath,file,ufile,key,value,kv,dir,udir)\n   -em, -extension-match string[]   match output for given extension (eg, -em php,html,js)\n   -ef, -extension-filter string[]  filter output for given extension (eg, -ef png,css)\n   -mdc, -match-condition string    match response with dsl based condition\n   -fdc, -filter-condition string   filter response with dsl based condition\n```\n\n----------------------------------------\n\nTITLE: Creating a Header File for Authenticated Crawling\nDESCRIPTION: Example of creating a text file with multiple headers including cookies, API keys, and tokens to be used for authentication in Katana.\nSOURCE: https://github.com/projectdiscovery/katana/blob/main/README.md#2025-04-23_snippet_24\n\nLANGUAGE: text\nCODE:\n```\nCookie: PHPSESSIONID=XXXXXXXXX\nX-API-KEY: XXXXX\nTOKEN=XX\n```\n\n----------------------------------------\n\nTITLE: Starting Chrome with Remote Debugging for Active Session Crawling\nDESCRIPTION: Command to start Google Chrome with remote debugging enabled, which allows Katana to connect to an active browser session for authenticated crawling.\nSOURCE: https://github.com/projectdiscovery/katana/blob/main/README.md#2025-04-23_snippet_27\n\nLANGUAGE: console\nCODE:\n```\n$ /Applications/Google\\ Chrome.app/Contents/MacOS/Google\\ Chrome --remote-debugging-port=9222\n\n\nDevTools listening on ws://127.0.0.1:9222/devtools/browser/c5316c9c-19d6-42dc-847a-41d1aeebf7d6\n```\n\n----------------------------------------\n\nTITLE: Connecting Katana to Active Browser Session\nDESCRIPTION: Command to connect Katana to an active Chrome browser session using the WebSocket URL, allowing crawling with the browser's authentication state.\nSOURCE: https://github.com/projectdiscovery/katana/blob/main/README.md#2025-04-23_snippet_28\n\nLANGUAGE: console\nCODE:\n```\nkatana -headless -u https://tesla.com -cwu ws://127.0.0.1:9222/devtools/browser/c5316c9c-19d6-42dc-847a-41d1aeebf7d6 -no-incognito\n```\n\n----------------------------------------\n\nTITLE: Custom Field Configuration for Katana in YAML\nDESCRIPTION: YAML configuration for defining custom fields in Katana using regex patterns, which can extract specific information like email addresses and phone numbers from crawled pages.\nSOURCE: https://github.com/projectdiscovery/katana/blob/main/README.md#2025-04-23_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\n- name: email\n  type: regex\n  regex:\n  - '([a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+\\.[a-zA-Z0-9_-]+)'\n  - '([a-zA-Z0-9+._-]+@[a-zA-Z0-9._-]+\\.[a-zA-Z0-9_-]+)'\n\n- name: phone\n  type: regex\n  regex:\n  - '\\d{3}-\\d{8}|\\d{4}-\\d{7}'\n```\n\n----------------------------------------\n\nTITLE: Using Custom Fields to Extract Email and Phone Numbers with Katana\nDESCRIPTION: Command demonstrating how to use custom fields defined in the configuration to extract email addresses and phone numbers from crawled pages.\nSOURCE: https://github.com/projectdiscovery/katana/blob/main/README.md#2025-04-23_snippet_31\n\nLANGUAGE: console\nCODE:\n```\nkatana -u https://tesla.com -f email,phone\n```\n\n----------------------------------------\n\nTITLE: Setting Crawl Depth in Katana\nDESCRIPTION: Example of setting the crawl depth using the depth option in Katana. A higher depth value allows the crawler to follow more links and discover more endpoints, but increases crawl time.\nSOURCE: https://github.com/projectdiscovery/katana/blob/main/README.md#2025-04-23_snippet_18\n\nLANGUAGE: console\nCODE:\n```\nkatana -u https://tesla.com -d 5\n```\n\n----------------------------------------\n\nTITLE: Enabling JavaScript Crawling in Katana\nDESCRIPTION: Example of enabling JavaScript file parsing and endpoint discovery with the js-crawl option in Katana. This allows the crawler to extract and follow URLs found in JavaScript files.\nSOURCE: https://github.com/projectdiscovery/katana/blob/main/README.md#2025-04-23_snippet_19\n\nLANGUAGE: console\nCODE:\n```\nkatana -u https://tesla.com -jc\n```\n\n----------------------------------------\n\nTITLE: Filtering Crawl Output by Extensions in Katana\nDESCRIPTION: Shows how to use the -em (extension-match) option to display only URLs with specific file extensions and the -ef (extension-filter) option to exclude URLs with certain extensions.\nSOURCE: https://github.com/projectdiscovery/katana/blob/main/README.md#2025-04-23_snippet_34\n\nLANGUAGE: shell\nCODE:\n```\nkatana -u https://tesla.com -silent -em js,jsp,json\n```\n\nLANGUAGE: shell\nCODE:\n```\nkatana -u https://tesla.com -silent -ef css,txt,md\n```\n\n----------------------------------------\n\nTITLE: Filtering Crawl Output with Regular Expressions in Katana\nDESCRIPTION: Demonstrates using the -match-regex (-mr) flag to filter output to include only URLs matching a specific pattern, and the -filter-regex (-fr) flag to exclude URLs matching a pattern.\nSOURCE: https://github.com/projectdiscovery/katana/blob/main/README.md#2025-04-23_snippet_35\n\nLANGUAGE: shell\nCODE:\n```\nkatana -u https://tesla.com -mr 'https://shop\\.tesla\\.com/*' -silent\n```\n\nLANGUAGE: shell\nCODE:\n```\nkatana -u https://tesla.com -fr 'https://www\\.tesla\\.com/*' -silent\n```\n\n----------------------------------------\n\nTITLE: Storing Field Data to Files with Katana\nDESCRIPTION: Example of using the store-field option to save extracted data to disk, which stores information like parameter keys, fully qualified domain names, and URLs with query parameters in separate files.\nSOURCE: https://github.com/projectdiscovery/katana/blob/main/README.md#2025-04-23_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\nkatana -u https://tesla.com -sf key,fqdn,qurl -silent\n```\n\n----------------------------------------\n\nTITLE: Katana Response Storage\nDESCRIPTION: Shows how to store HTTP requests and responses using the -store-response option, which saves responses to the katana_response directory.\nSOURCE: https://github.com/projectdiscovery/katana/blob/main/README.md#2025-04-23_snippet_42\n\nLANGUAGE: console\nCODE:\n```\nkatana -u https://example.com -no-scope -store-response\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ cat katana_response/index.txt\n\nkatana_response/example.com/327c3fda87ce286848a574982ddd0b7c7487f816.txt https://example.com (200 OK)\nkatana_response/www.iana.org/bfc096e6dd93b993ca8918bf4c08fdc707a70723.txt http://www.iana.org/domains/reserved (200 OK)\n```\n\n----------------------------------------\n\nTITLE: Adding Cookie Header for Authenticated Crawling in Katana\nDESCRIPTION: Example of adding a cookie header directly in the command line to authenticate requests when crawling a website with Katana.\nSOURCE: https://github.com/projectdiscovery/katana/blob/main/README.md#2025-04-23_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nkatana -u https://tesla.com -H 'Cookie: usrsess=AmljNrESo'\n```\n\n----------------------------------------\n\nTITLE: Using Header File for Authenticated Crawling in Katana\nDESCRIPTION: Command showing how to use a file containing authentication headers with Katana for authenticated web crawling.\nSOURCE: https://github.com/projectdiscovery/katana/blob/main/README.md#2025-04-23_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\nkatana -u https://tesla.com -H cookie.txt\n```\n\n----------------------------------------\n\nTITLE: Using Crawl Out-of-Scope Option in Katana\nDESCRIPTION: Example of using the crawl-out-scope option to exclude URLs containing 'logout' from the crawl. This helps prevent crawling logout endpoints that might terminate sessions.\nSOURCE: https://github.com/projectdiscovery/katana/blob/main/README.md#2025-04-23_snippet_13\n\nLANGUAGE: console\nCODE:\n```\nkatana -u https://tesla.com -cos logout\n```\n\n----------------------------------------\n\nTITLE: Using File-based Crawl Out-of-Scope in Katana\nDESCRIPTION: Example of providing multiple out-of-scope URL patterns through a file for Katana. The file contains patterns for logout endpoints to be excluded from the crawl.\nSOURCE: https://github.com/projectdiscovery/katana/blob/main/README.md#2025-04-23_snippet_14\n\nLANGUAGE: console\nCODE:\n```\nkatana -u https://tesla.com -cos out_of_scope.txt\n```\n\n----------------------------------------\n\nTITLE: Using File-based Crawl Scope in Katana\nDESCRIPTION: Example of providing multiple in-scope URL patterns through a file for Katana. The file contains patterns for login, admin, app, and wordpress directories to be included in the crawl.\nSOURCE: https://github.com/projectdiscovery/katana/blob/main/README.md#2025-04-23_snippet_12\n\nLANGUAGE: console\nCODE:\n```\nkatana -u https://tesla.com -cs in_scope.txt\n```\n\n----------------------------------------\n\nTITLE: Using Crawl Scope with Regex Pattern in Katana\nDESCRIPTION: Example of using the crawl-scope option with a regex pattern to only crawl URLs containing 'login'. This allows for targeted crawling of specific URL patterns.\nSOURCE: https://github.com/projectdiscovery/katana/blob/main/README.md#2025-04-23_snippet_11\n\nLANGUAGE: console\nCODE:\n```\nkatana -u https://tesla.com -cs login\n```\n\n----------------------------------------\n\nTITLE: Filtering Results with Query URL Parameter in Katana\nDESCRIPTION: Example of using Katana's field filtering option to only display URLs that contain query parameters, which is useful for identifying endpoints with potential parameters.\nSOURCE: https://github.com/projectdiscovery/katana/blob/main/README.md#2025-04-23_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\nkatana -u https://tesla.com -f qurl -silent\n\nhttps://shop.tesla.com/en_au?redirect=no\nhttps://shop.tesla.com/en_nz?redirect=no\nhttps://shop.tesla.com/product/men_s-raven-lightweight-zip-up-bomber-jacket?sku=1740250-00-A\nhttps://shop.tesla.com/product/tesla-shop-gift-card?sku=1767247-00-A\nhttps://shop.tesla.com/product/men_s-chill-crew-neck-sweatshirt?sku=1740176-00-A\nhttps://www.tesla.com/about?redirect=no\nhttps://www.tesla.com/about/legal?redirect=no\nhttps://www.tesla.com/findus/list?redirect=no\n```\n\n----------------------------------------\n\nTITLE: Basic Katana Output to File\nDESCRIPTION: Shows how to use Katana to crawl a website and save results to a text file using the -output flag.\nSOURCE: https://github.com/projectdiscovery/katana/blob/main/README.md#2025-04-23_snippet_40\n\nLANGUAGE: console\nCODE:\n```\nkatana -u https://example.com -no-scope -output example_endpoints.txt\n```\n\n----------------------------------------\n\nTITLE: Using STDIN Input with Katana Web Crawler\nDESCRIPTION: Examples of piping URLs to Katana through standard input. The first example crawls a single URL while the second shows how to chain tools to crawl multiple domains.\nSOURCE: https://github.com/projectdiscovery/katana/blob/main/README.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\necho https://tesla.com | katana\n```\n\nLANGUAGE: sh\nCODE:\n```\ncat domains | httpx | katana\n```\n\n----------------------------------------\n\nTITLE: Enabling Known Files Crawling in Katana\nDESCRIPTION: Example of enabling the crawling of robots.txt and sitemap.xml files using the known-files option in Katana. These files often contain valuable URL information for crawlers.\nSOURCE: https://github.com/projectdiscovery/katana/blob/main/README.md#2025-04-23_snippet_21\n\nLANGUAGE: console\nCODE:\n```\nkatana -u https://tesla.com -kf robotstxt,sitemapxml\n```\n\n----------------------------------------\n\nTITLE: Enabling Automatic Form Filling in Katana\nDESCRIPTION: Example of enabling automatic form filling for web forms using the automatic-form-fill option in Katana. This experimental feature helps discover endpoints that require form submission.\nSOURCE: https://github.com/projectdiscovery/katana/blob/main/README.md#2025-04-23_snippet_22\n\nLANGUAGE: console\nCODE:\n```\nkatana -u https://tesla.com -aff\n```\n\n----------------------------------------\n\nTITLE: Setting Crawl Duration Limit in Katana\nDESCRIPTION: Example of setting a time limit for crawling using the crawl-duration option in Katana. This sets a 2-minute time limit for the entire crawl operation.\nSOURCE: https://github.com/projectdiscovery/katana/blob/main/README.md#2025-04-23_snippet_20\n\nLANGUAGE: console\nCODE:\n```\nkatana -u https://tesla.com -ct 2\n```\n\n----------------------------------------\n\nTITLE: Headless Mode CLI Options in Katana\nDESCRIPTION: Available command-line options for the headless crawling mode in Katana. These options control browser behavior, chrome instances, and extraction settings for headless crawling.\nSOURCE: https://github.com/projectdiscovery/katana/blob/main/README.md#2025-04-23_snippet_6\n\nLANGUAGE: console\nCODE:\n```\nkatana -h headless\n\nFlags:\nHEADLESS:\n   -hl, -headless                    enable headless hybrid crawling (experimental)\n   -sc, -system-chrome               use local installed chrome browser instead of katana installed\n   -sb, -show-browser                show the browser on the screen with headless mode\n   -ho, -headless-options string[]   start headless chrome with additional options\n   -nos, -no-sandbox                 start headless chrome in --no-sandbox mode\n   -cdd, -chrome-data-dir string     path to store chrome browser data\n   -scp, -system-chrome-path string  use specified chrome browser for headless crawling\n   -noi, -no-incognito               start headless chrome without incognito mode\n   -cwu, -chrome-ws-url string       use chrome browser instance launched elsewhere with the debugger listening at this URL\n   -xhr, -xhr-extraction             extract xhr requests\n```\n\n----------------------------------------\n\nTITLE: Katana Output CLI Options\nDESCRIPTION: Lists available command-line options for controlling Katana's output behavior.\nSOURCE: https://github.com/projectdiscovery/katana/blob/main/README.md#2025-04-23_snippet_43\n\nLANGUAGE: console\nCODE:\n```\nkatana -h output\n\nOUTPUT:\n   -o, -output string                file to write output to\n   -sr, -store-response              store http requests/responses\n   -srd, -store-response-dir string  store http requests/responses to custom directory\n   -j, -json                         write output in JSONL(ines) format\n   -nc, -no-color                    disable output content coloring (ANSI escape codes)\n   -silent                           display output only\n   -v, -verbose                      display verbose output\n   -version                          display project version\n```\n\n----------------------------------------\n\nTITLE: Katana Rate Limit CLI Options\nDESCRIPTION: A comprehensive list of Katana's command-line options for controlling rate limits during crawling, including concurrency, parallelism, delay, and rate limiting per second or minute.\nSOURCE: https://github.com/projectdiscovery/katana/blob/main/README.md#2025-04-23_snippet_39\n\nLANGUAGE: shell\nCODE:\n```\nkatana -h rate-limit\n\nFlags:\nRATE-LIMIT:\n   -c, -concurrency int          number of concurrent fetchers to use (default 10)\n   -p, -parallelism int          number of concurrent inputs to process (default 10)\n   -rd, -delay int               request delay between each request in seconds\n   -rl, -rate-limit int          maximum requests to send per second (default 150)\n   -rlm, -rate-limit-minute int  maximum number of requests to send per minute\n```\n\n----------------------------------------\n\nTITLE: Listing Stored Field Files Created by Katana\nDESCRIPTION: Command showing how to list the files created by Katana's store-field option, which are stored in the katana_field directory and organized by target URL.\nSOURCE: https://github.com/projectdiscovery/katana/blob/main/README.md#2025-04-23_snippet_33\n\nLANGUAGE: bash\nCODE:\n```\n$ ls katana_field/\n\nhttps_www.tesla.com_fqdn.txt\nhttps_www.tesla.com_key.txt\nhttps_www.tesla.com_qurl.txt\n```\n\n----------------------------------------\n\nTITLE: Displaying Out-of-Scope URLs in Katana Results\nDESCRIPTION: Example of using the display-out-scope option to include external URLs in Katana's output. By default, external URLs are excluded from the output when scope is applied.\nSOURCE: https://github.com/projectdiscovery/katana/blob/main/README.md#2025-04-23_snippet_16\n\nLANGUAGE: console\nCODE:\n```\nkatana -u https://tesla.com -do\n```\n\n----------------------------------------\n\nTITLE: Disabling Default Scope in Katana\nDESCRIPTION: Example of using the no-scope option to disable the default domain-based scoping in Katana. This allows crawling URLs beyond the target domain, effectively crawling the entire internet.\nSOURCE: https://github.com/projectdiscovery/katana/blob/main/README.md#2025-04-23_snippet_15\n\nLANGUAGE: console\nCODE:\n```\nkatana -u https://tesla.com -ns\n```\n\n----------------------------------------\n\nTITLE: Using Field Scope with Domain Name in Katana\nDESCRIPTION: Example of using the field-scope option with the 'dn' (domain name keyword) scope to limit crawling to URLs containing the domain name keyword.\nSOURCE: https://github.com/projectdiscovery/katana/blob/main/README.md#2025-04-23_snippet_10\n\nLANGUAGE: console\nCODE:\n```\nkatana -u https://tesla.com -fs dn\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Chrome Options for Headless Mode in Katana\nDESCRIPTION: Example of providing additional Chrome browser options when running Katana in headless mode. This example disables GPU and sets a proxy server for the Chrome instance.\nSOURCE: https://github.com/projectdiscovery/katana/blob/main/README.md#2025-04-23_snippet_9\n\nLANGUAGE: console\nCODE:\n```\nkatana -u https://tesla.com -headless -system-chrome -headless-options --disable-gpu,proxy-server=http://127.0.0.1:8080\n```\n\n----------------------------------------\n\nTITLE: Disabling Incognito Mode in Headless Chrome for Katana\nDESCRIPTION: Example of running Katana with headless Chrome without incognito mode, which is useful when using the local browser to maintain existing browser state.\nSOURCE: https://github.com/projectdiscovery/katana/blob/main/README.md#2025-04-23_snippet_8\n\nLANGUAGE: console\nCODE:\n```\nkatana -u https://tesla.com -headless -no-incognito\n```\n\n----------------------------------------\n\nTITLE: Using no-sandbox Option with Headless Chrome in Katana\nDESCRIPTION: Example of running Katana with the no-sandbox option for headless Chrome, which is useful when running as a root user to bypass sandbox restrictions.\nSOURCE: https://github.com/projectdiscovery/katana/blob/main/README.md#2025-04-23_snippet_7\n\nLANGUAGE: console\nCODE:\n```\nkatana -u https://tesla.com -headless -no-sandbox\n```\n\n----------------------------------------\n\nTITLE: Installing Katana with Go\nDESCRIPTION: Installs Katana using Go, requiring Go 1.18 or later. CGO must be enabled for successful installation.\nSOURCE: https://github.com/projectdiscovery/katana/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nCGO_ENABLED=1 go install github.com/projectdiscovery/katana/cmd/katana@latest\n```\n\n----------------------------------------\n\nTITLE: Running Katana with Docker\nDESCRIPTION: Instructions for running Katana using Docker in standard and headless modes.\nSOURCE: https://github.com/projectdiscovery/katana/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndocker pull projectdiscovery/katana:latest\n\ndocker run projectdiscovery/katana:latest -u https://tesla.com\n\ndocker run projectdiscovery/katana:latest -u https://tesla.com -system-chrome -headless\n```\n\n----------------------------------------\n\nTITLE: Installing Katana on Ubuntu\nDESCRIPTION: Steps to install Katana and its prerequisites on Ubuntu, including Go and Google Chrome.\nSOURCE: https://github.com/projectdiscovery/katana/blob/main/README.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nsudo apt update\nsudo snap refresh\nsudo apt install zip curl wget git\nsudo snap install golang --classic\nwget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add - \nsudo sh -c 'echo \"deb http://dl.google.com/linux/chrome/deb/ stable main\" >> /etc/apt/sources.list.d/google.list'\nsudo apt update \nsudo apt install google-chrome-stable\n\ngo install github.com/projectdiscovery/katana/cmd/katana@latest\n```"
  }
]