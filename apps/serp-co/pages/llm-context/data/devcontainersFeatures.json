[
  {
    "owner": "devcontainers",
    "repo": "features",
    "content": "TITLE: Configuring Features in devcontainer.json\nDESCRIPTION: Example showing how to reference and configure the go and docker-in-docker Features in a devcontainer.json file. Demonstrates basic Feature configuration with version specifications and options.\nSOURCE: https://github.com/devcontainers/features/blob/main/README.md#2025-04-17_snippet_0\n\nLANGUAGE: jsonc\nCODE:\n```\n\"name\": \"my-project-devcontainer\",\n\"image\": \"mcr.microsoft.com/devcontainers/base:ubuntu\",  // Any generic, debian-based image.\n\"features\": {\n    \"ghcr.io/devcontainers/features/go:1\": {\n        \"version\": \"1.18\"\n    },\n    \"ghcr.io/devcontainers/features/docker-in-docker:1\": {\n        \"version\": \"latest\",\n        \"moby\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Specific .NET SDK Versions\nDESCRIPTION: Configuration for installing specific .NET SDK versions, with a primary version and additional versions to be installed.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/dotnet/NOTES.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"features\": {\n    \"ghcr.io/devcontainers/features/dotnet:2\": {\n        \"version\": \"6.0\",\n        \"additionalVersions\": \"7.0, 8.0\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker-in-Docker Feature in DevContainer\nDESCRIPTION: JSON configuration for enabling Docker-in-Docker feature in a development container. This allows running Docker inside the container with optional version specification and other customization options.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/docker-in-docker/README.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"features\": {\n    \"ghcr.io/devcontainers/features/docker-in-docker:2\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Building Development Container with CLI\nDESCRIPTION: Command line example showing how to build a development container that uses Features using the devcontainer CLI.\nSOURCE: https://github.com/devcontainers/features/blob/main/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone <my-project-with-devcontainer>\ndevcontainer build --workspace-folder <path-to-my-project-with-devcontainer>\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Outside of Docker Feature\nDESCRIPTION: Basic JSON configuration for enabling the docker-outside-of-docker Feature in a devcontainer.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/docker-outside-of-docker/README.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"features\": {\n    \"ghcr.io/devcontainers/features/docker-outside-of-docker:1\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Node.js Feature in Development Container\nDESCRIPTION: JSON configuration for enabling Node.js feature in a development container. This basic configuration uses default settings for installing Node.js and related tools.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/node/README.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"features\": {\n    \"ghcr.io/devcontainers/features/node:1\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Python DevContainer Feature\nDESCRIPTION: JSON configuration for adding Python support to a DevContainer. This minimal example uses the default configuration to install Python and common development tools.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/python/README.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"features\": {\n    \"ghcr.io/devcontainers/features/python:1\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Feature Changes with CLI Command\nDESCRIPTION: Command for testing feature changes using the devcontainer CLI to ensure functionality. This is a required step before submitting pull requests.\nSOURCE: https://github.com/devcontainers/features/blob/main/CONTRIBUTING.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndevcontainer features test\n```\n\n----------------------------------------\n\nTITLE: Configuring Rust Feature in Dev Container JSON\nDESCRIPTION: Example JSON configuration for including the Rust feature in a dev container. This snippet shows how to add the Rust feature to the 'features' section of a devcontainer configuration file.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/rust/README.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"features\": {\n    \"ghcr.io/devcontainers/features/rust:1\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Workload Installation\nDESCRIPTION: Installing additional .NET workloads such as Aspire and WebAssembly tools.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/dotnet/README.md#2025-04-17_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n\"features\": {\n    \"ghcr.io/devcontainers/features/dotnet:2\": {\n      \"workloads\": \"aspire, wasm-tools\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Specific SDK Versions\nDESCRIPTION: Installing specific .NET SDK versions including a primary version and additional versions.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/dotnet/README.md#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"features\": {\n    \"ghcr.io/devcontainers/features/dotnet:2\": {\n        \"version\": \"6.0\",\n        \"additionalVersions\": \"7.0, 8.0\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Additional SDK Version Installation\nDESCRIPTION: Installing an additional LTS SDK version alongside the default version.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/dotnet/README.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"features\": {\n    \"ghcr.io/devcontainers/features/dotnet:2\": {\n        \"additionalVersions\": \"lts\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring common-utils Feature in devcontainer.json\nDESCRIPTION: Example JSON configuration for adding the common-utils feature to a development container. This adds common command line utilities and shell enhancements to the container environment.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/common-utils/README.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"features\": {\n    \"ghcr.io/devcontainers/features/common-utils:2\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Runtime-only Installation\nDESCRIPTION: Installing only .NET Runtime and ASP.NET Core Runtime without the SDK, useful for running but not building applications.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/dotnet/README.md#2025-04-17_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"features\": {\n    \"ghcr.io/devcontainers/features/dotnet:2\": {\n        \"version\": \"none\",\n        \"dotnetRuntimeVersions\": \"latest, lts\",\n        \"aspnetCoreRuntimeVersions\": \"latest, lts\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Dotnet Feature Installation\nDESCRIPTION: Basic configuration to install the latest .NET SDK in a development container.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/dotnet/README.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"features\": {\n    \"ghcr.io/devcontainers/features/dotnet:2\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Java Feature in devcontainer.json\nDESCRIPTION: Example configuration for adding the Java feature to a development container. This JSON snippet shows how to include the Java feature in the 'features' section of a devcontainer.json file.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/java/README.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"features\": {\n    \"ghcr.io/devcontainers/features/java:1\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Increasing Shared Memory Size in Docker Compose YAML\nDESCRIPTION: This YAML snippet shows how to increase the shared memory size allocated to a service to 1GB in a Docker Compose file. This can help resolve application crashes due to insufficient shared memory.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/desktop-lite/NOTES.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  your-service-here:\n    # ...\n    shm_size: '1gb'\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS CLI Feature in devcontainer.json\nDESCRIPTION: Example JSON configuration to add the AWS CLI feature to a development container. This configuration uses the default settings to install the latest version of AWS CLI.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/aws-cli/README.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"features\": {\n    \"ghcr.io/devcontainers/features/aws-cli:1\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Devcontainer Features for Kubernetes Tools\nDESCRIPTION: JSON configuration snippet showing how to enable the kubectl-helm-minikube feature in a devcontainer. This installs the latest versions of the tools by default.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/kubectl-helm-minikube/README.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"features\": {\n    \"ghcr.io/devcontainers/features/kubectl-helm-minikube:1\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Shared Memory in Docker Compose\nDESCRIPTION: YAML configuration for increasing shared memory allocation in a Docker Compose file. Sets the shm_size property to 1GB for a specific service to prevent application crashes in the desktop environment.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/desktop-lite/README.md#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  your-service-here:\n    # ...\n    shm_size: '1gb'\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Go Feature in Dev Container JSON\nDESCRIPTION: Example JSON configuration for including the Go feature in a dev container. This snippet shows how to add the Go feature to the 'features' section of a devcontainer configuration file.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/go/README.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"features\": {\n    \"ghcr.io/devcontainers/features/go:1\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: GPU Host Requirements Configuration in JSON\nDESCRIPTION: Configuration example showing how to enable GPU passthrough in a development container using hostRequirements property. Sets GPU as optional to ensure compatibility with both GPU and CPU environments.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/nvidia-cuda/README.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hostRequirements\": {\n    \"gpu\": \"optional\" \n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding desktop-lite Feature to devcontainer.json\nDESCRIPTION: JSON configuration for adding the desktop-lite feature to a development container. This enables a lightweight Fluxbox desktop environment that can be accessed via VNC or web browser.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/desktop-lite/README.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"features\": {\n    \"ghcr.io/devcontainers/features/desktop-lite:1\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Different Python Version with Conda in Development Containers\nDESCRIPTION: Command to install a specific Python version (3.7) using the Conda package manager. This allows developers to switch between Python versions within the same container environment.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/anaconda/NOTES.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nconda install python=3.7\n```\n\n----------------------------------------\n\nTITLE: Increasing Shared Memory Size in DevContainer JSON\nDESCRIPTION: This JSON snippet demonstrates how to increase the shared memory size allocated to the container to 1GB in the devcontainer.json file. This can help resolve application crashes due to insufficient shared memory.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/desktop-lite/NOTES.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"runArgs\": [\"--shm-size=1g\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring SSH Server Feature in devcontainer.json\nDESCRIPTION: JSON configuration snippet for adding the sshd feature to a dev container. This enables SSH server functionality without any custom options.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/sshd/README.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"features\": {\n    \"ghcr.io/devcontainers/features/sshd:1\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Minikube with Ingress Port Forwarding\nDESCRIPTION: Bash commands for starting Minikube, enabling the ingress addon, and setting up port forwarding to make ingress services accessible via localhost, particularly useful in GitHub Codespaces environments.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/kubectl-helm-minikube/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nminikube start\nminikube addons enable ingress\n# Run this to forward to localhost in the background\nnohup kubectl port-forward --pod-running-timeout=24h -n ingress-nginx service/ingress-nginx-controller :80 &\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Installation in Development Container JSON\nDESCRIPTION: JSON configuration for adding the Git feature to a development container. This snippet shows how to include the Git feature in the container's features section.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/git/README.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"features\": {\n    \"ghcr.io/devcontainers/features/git:1\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Different Python Version with Conda\nDESCRIPTION: This command demonstrates how to install a specific version of Python using Conda. In this example, Python 3.7 is being installed.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/conda/NOTES.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nconda install python=3.7\n```\n\n----------------------------------------\n\nTITLE: Setting Up Ingress and Port Forwarding in Minikube for Codespaces\nDESCRIPTION: A bash script that demonstrates how to start Minikube, enable the ingress addon, and set up port forwarding to make ingress controller accessible on localhost. This workaround is specifically needed for GitHub Codespaces which doesn't support direct IP:port forwarding.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/kubectl-helm-minikube/NOTES.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nminikube start\nminikube addons enable ingress\n# Run this to forward to localhost in the background\nnohup kubectl port-forward --pod-running-timeout=24h -n ingress-nginx service/ingress-nginx-controller :80 &\n```\n\n----------------------------------------\n\nTITLE: Configuring Conda Feature in Dev Container JSON\nDESCRIPTION: Example usage of the Conda feature in a dev container configuration file. This snippet shows how to include the Conda feature in the 'features' section of the JSON configuration.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/conda/README.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"features\": {\n    \"ghcr.io/devcontainers/features/conda:1\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Anaconda Feature in devcontainer.json\nDESCRIPTION: JSON configuration that demonstrates how to add the Anaconda feature to a devcontainer. This allows the container to include Anaconda's conda package manager and Python environment.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/anaconda/README.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"features\": {\n    \"ghcr.io/devcontainers/features/anaconda:1\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PHP Feature in Development Container\nDESCRIPTION: JSON configuration for adding PHP support to a development container. Allows specifying the feature from the GitHub Container Registry with optional version and composer installation settings.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/php/README.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"features\": {\n    \"ghcr.io/devcontainers/features/php:1\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Specific .NET SDK Patch Version\nDESCRIPTION: Configuration for installing a precise .NET SDK patch version when exact control over the SDK version is required.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/dotnet/NOTES.md#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"features\": {\n    \"ghcr.io/devcontainers/features/dotnet:2\": {\n        \"version\": \"6.0.412\",\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Workspace to Host Path in devcontainer.json\nDESCRIPTION: Alternative configuration that changes the workspace folder in the dev container to match the host's absolute path. This enables Docker bind mounts to work without modifying Docker commands or compose files.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/docker-outside-of-docker/NOTES.md#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"workspaceFolder\": \"${localWorkspaceFolder}\",\n\"workspaceMount\": \"source=${localWorkspaceFolder},target=${localWorkspaceFolder},type=bind\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Oryx Feature in Dev Container JSON\nDESCRIPTION: This JSON snippet demonstrates how to include the Oryx feature in a dev container configuration. It specifies the feature's GitHub Container Registry location and version.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/oryx/README.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"features\": {\n    \"ghcr.io/devcontainers/features/oryx:1\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Workspace Environment Variable in devcontainer.json\nDESCRIPTION: Configuration for adding the host's workspace folder path as an environment variable inside the container. This allows Docker commands inside the container to reference host paths for bind mounts.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/docker-outside-of-docker/NOTES.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"remoteEnv\": { \"LOCAL_WORKSPACE_FOLDER\": \"${localWorkspaceFolder}\" }\n```\n\n----------------------------------------\n\nTITLE: Configuring PowerShell Feature in Dev Container JSON\nDESCRIPTION: Example JSON configuration for adding the PowerShell feature to a development container. This feature installs PowerShell and its dependencies in the container environment.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/powershell/README.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"features\": {\n    \"ghcr.io/devcontainers/features/powershell:1\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Nix Package Manager Feature in DevContainer\nDESCRIPTION: JSON configuration for adding the Nix package manager feature to a DevContainer. This is added to the features section of devcontainer.json.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/nix/README.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"features\": {\n    \"ghcr.io/devcontainers/features/nix:1\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Platform for Docker Image in Dockerfile\nDESCRIPTION: This snippet demonstrates how to specify a platform for a Docker image in a Dockerfile. It shows an example that would not work with the Docker-in-Docker feature on an Apple Silicon Mac due to architecture mismatch.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/docker-in-docker/NOTES.md#2025-04-17_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM --platform=linux/amd64 mcr.microsoft.com/devcontainers/typescript-node:16\n```\n\n----------------------------------------\n\nTITLE: Installing Terraform Feature Configuration in devcontainer.json\nDESCRIPTION: JSON configuration for adding the Terraform feature to a development container. This snippet shows the basic setup for installing Terraform CLI and optional tools using the feature.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/terraform/README.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"features\": {\n    \"ghcr.io/devcontainers/features/terraform:1\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure CLI Feature in Dev Container JSON\nDESCRIPTION: This JSON snippet demonstrates how to include the Azure CLI feature in a dev container configuration. It specifies the feature's source and version.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/azure-cli/README.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"features\": {\n    \"ghcr.io/devcontainers/features/azure-cli:1\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Git LFS Feature in DevContainer\nDESCRIPTION: JSON configuration example showing how to enable Git LFS feature in a development container. Uses the ghcr.io registry to pull the feature with version 1.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/git-lfs/README.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"features\": {\n    \"ghcr.io/devcontainers/features/git-lfs:1\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub CLI Feature in Development Container JSON\nDESCRIPTION: This JSON snippet demonstrates how to include the GitHub CLI feature in a development container configuration. It specifies the feature's source and version.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/github-cli/README.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"features\": {\n    \"ghcr.io/devcontainers/features/github-cli:1\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Hugo Feature in Dev Container JSON\nDESCRIPTION: This snippet demonstrates how to include the Hugo feature in a dev container configuration. It uses the latest version of Hugo from the GitHub Container Registry.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/hugo/README.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"features\": {\n    \"ghcr.io/devcontainers/features/hugo:1\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Basic NVIDIA CUDA Feature Configuration in JSON\nDESCRIPTION: Basic configuration to enable NVIDIA CUDA feature in a development container using the feature from the GitHub Container Registry.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/nvidia-cuda/README.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"features\": {\n    \"ghcr.io/devcontainers/features/nvidia-cuda:1\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Different Python Version with Conda\nDESCRIPTION: Bash command to install a specific version of Python using Conda. This example demonstrates how to install Python 3.7 using the conda package manager.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/conda/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nconda install python=3.7\n```\n\n----------------------------------------\n\nTITLE: Increasing Shared Memory for Container Stability\nDESCRIPTION: JSON configuration for increasing the shared memory allocation to prevent application crashes in the desktop environment. Sets the shm-size to 1GB through the runArgs property in devcontainer.json.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/desktop-lite/README.md#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"runArgs\": [\"--shm-size=1g\"]\n```\n\n----------------------------------------\n\nTITLE: NVM Source Command for Non-Interactive Shell\nDESCRIPTION: Command to source NVM in non-interactive shell environments like postCreateCommand. This allows using NVM commands in non-login shell contexts.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/node/README.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"postCreateCommand\": \". ${NVM_DIR}/nvm.sh && nvm install --lts\"\n```\n\n----------------------------------------\n\nTITLE: Installing Only .NET Runtime or ASP.NET Core Runtime\nDESCRIPTION: Configuration for installing only the .NET Runtime or ASP.NET Core Runtime without the SDK. Useful for environments that only need to run .NET applications without building them.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/dotnet/NOTES.md#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"features\": {\n    \"ghcr.io/devcontainers/features/dotnet:2\": {\n        \"version\": \"none\",\n        \"dotnetRuntimeVersions\": \"latest, lts\",\n        \"aspnetCoreRuntimeVersions\": \"latest, lts\",\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing .NET SDK Using dotnet-install.sh Script Examples\nDESCRIPTION: Examples demonstrating various ways to use the dotnet-install.sh script for installing different versions and channels of .NET SDK. The script supports installation of latest versions, specific versions, LTS/STS channels, and various quality levels including GA, preview, and daily builds.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/dotnet/scripts/vendor/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet-install.sh [--version latest] [--channel LTS]\ndotnet-install.sh [--version latest] --channel STS\ndotnet-install.sh [--version latest] --channel 6.0 [--quality GA]\ndotnet-install.sh [--version latest] --channel 6.0.4xx [--quality GA]\ndotnet-install.sh [--version latest] --channel 8.0 --quality preview\ndotnet-install.sh [--version latest] --channel 8.0 --quality daily\ndotnet-install.sh --version 6.0.413\n```\n\n----------------------------------------\n\nTITLE: Configuring Ruby Feature in devcontainer.json\nDESCRIPTION: Example configuration for adding the Ruby feature to a development container. This JSON snippet shows how to include the Ruby feature in the 'features' section of a devcontainer.json file.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/ruby/README.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"features\": {\n    \"ghcr.io/devcontainers/features/ruby:1\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Sourcing NVM in postCreateCommand for Non-Interactive Shells\nDESCRIPTION: Demonstrates how to properly source the nvm startup script before using it in non-interactive, non-login shells like postCreateCommand. This approach explicitly sources the nvm script using the dot operator which works in sh shells.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/node/NOTES.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\". ${NVM_DIR}/nvm.sh && nvm install --lts\"\n```\n\n----------------------------------------\n\nTITLE: Setting Password for Current User with sudo\nDESCRIPTION: Bash command to set a password for the current user when sudo is available. This is needed for SSH authentication after setting up the SSH server.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/sshd/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo passwd $(whoami)\n```\n\n----------------------------------------\n\nTITLE: Installing Google Chrome in Dockerfile\nDESCRIPTION: This Dockerfile snippet shows how to install the full version of Google Chrome in the dev container. It downloads the Chrome .deb package and installs it using apt-get.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/desktop-lite/NOTES.md#2025-04-17_snippet_4\n\nLANGUAGE: dockerfile\nCODE:\n```\nRUN apt-get update && export DEBIAN_FRONTEND=noninteractive \\\n    && curl -sSL https://dl.google.com/linux/direct/google-chrome-stable_current_$(dpkg --print-architecture).deb -o /tmp/chrome.deb \\\n    && apt-get -y install /tmp/chrome.deb\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration with Workspace Binding\nDESCRIPTION: Docker compose configuration example showing how to bind mount the workspace folder with a fallback default value.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/docker-outside-of-docker/README.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"3.9\"\n\nservices:\n  debian:\n    image: debian\n    volumes:\n      - ${LOCAL_WORKSPACE_FOLDER:-./}:/workspace\n```\n\n----------------------------------------\n\nTITLE: Installing Firefox ESR in Dockerfile\nDESCRIPTION: This Dockerfile snippet demonstrates how to install Firefox ESR in the dev container. It updates the package list and installs Firefox ESR using apt-get.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/desktop-lite/NOTES.md#2025-04-17_snippet_3\n\nLANGUAGE: dockerfile\nCODE:\n```\nRUN apt-get update && export DEBIAN_FRONTEND=noninteractive && apt-get install -y firefox-esr\n```\n\n----------------------------------------\n\nTITLE: Docker Run Command with Workspace Binding\nDESCRIPTION: Example of using Docker run command with workspace folder bind mount using environment variable.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/docker-outside-of-docker/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it --rm -v ${LOCAL_WORKSPACE_FOLDER}:/workspace debian bash\n```\n\n----------------------------------------\n\nTITLE: Configuring Port Forwarding for Desktop Access\nDESCRIPTION: JSON configuration for forwarding the noVNC port (6080) in a devcontainer.json file. This enables browser-based access to the desktop environment and adds a descriptive label to the port.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/desktop-lite/README.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n  \"forwardPorts\": [6080],\n  \"portsAttributes\": {\n    \"6080\": {\n      \"label\": \"desktop\"\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Starting Nix Daemon Manually\nDESCRIPTION: Bash command to manually start the Nix daemon when using sudo with password protection. This command can also be used to restart the daemon if it stops.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/nix/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo /usr/local/share/nix-entrypoint.sh\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration with Local Workspace Binding\nDESCRIPTION: Docker Compose configuration that uses the LOCAL_WORKSPACE_FOLDER environment variable for volume binding. Includes a default path to ensure the file works when run outside the container.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/docker-outside-of-docker/NOTES.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"3.9\"\n\nservices:\n  debian:\n    image: debian\n    volumes:\n      - ${LOCAL_WORKSPACE_FOLDER:-./}:/workspace\n```\n\n----------------------------------------\n\nTITLE: Using Interactive Shell to Run NVM Commands\nDESCRIPTION: Alternative approach to running nvm commands in lifecycle scripts by starting an interactive bash shell, which will automatically source nvm. This method uses bash's -i flag to create an interactive environment.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/node/NOTES.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"bash -i -c 'nvm install --lts'\"\n```\n\n----------------------------------------\n\nTITLE: Mounting Remote Filesystem with SSHFS on macOS/Linux\nDESCRIPTION: Command to mount a dev container's filesystem using SSHFS on macOS or Linux. Creates a local directory and mounts the remote workspace with appropriate options for symlink handling and compression.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/sshd/README.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p ~/sshfs/devcontainer\nsshfs \"vscode@localhost:/workspaces\" \"$HOME/sshfs/devcontainer\" -p 2222 -o follow_symlinks -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o GlobalKnownHostsFile=/dev/null -C\n```\n\n----------------------------------------\n\nTITLE: Configuring Port Forwarding for Desktop Environment in DevContainer JSON\nDESCRIPTION: This JSON snippet shows how to set up port forwarding for the noVNC port (6080) in the devcontainer.json file. It forwards the port and adds a label for easy identification.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/desktop-lite/NOTES.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n  \"forwardPorts\": [6080],\n  \"portsAttributes\": {\n    \"6080\": {\n      \"label\": \"desktop\"\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: SSHFS Mount Command for macOS/Linux\nDESCRIPTION: Command to mount remote dev container filesystem using SSHFS on macOS or Linux. Creates mount directory and establishes connection with compression and symlink following enabled.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/sshd/NOTES.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p ~/sshfs/devcontainer\nsshfs \"vscode@localhost:/workspaces\" \"$HOME/sshfs/devcontainer\" -p 2222 -o follow_symlinks -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o GlobalKnownHostsFile=/dev/null -C\n```\n\n----------------------------------------\n\nTITLE: Latest Dotnet SDK Installation\nDESCRIPTION: Different ways to install the latest .NET SDK version using explicit or implicit configuration.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/dotnet/README.md#2025-04-17_snippet_1\n\nLANGUAGE: jsonc\nCODE:\n```\n\"features\": {\n    \"ghcr.io/devcontainers/features/dotnet:2\": \"latest\" // or \"\" or {}\n}\n```\n\n----------------------------------------\n\nTITLE: SSH Connection to Dev Container\nDESCRIPTION: SSH command to connect to the dev container with security checks disabled to avoid known hosts issues. The command uses port 2222 and connects as the vscode user.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/sshd/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nssh -p 2222 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o GlobalKnownHostsFile=/dev/null vscode@localhost\n```\n\n----------------------------------------\n\nTITLE: Enabling Git Dirty Status in Command Prompt\nDESCRIPTION: Bash command to enable the 'dirty' indicator in the git prompt, showing uncommitted changes. This is disabled by default for performance reasons but can be enabled for smaller repositories.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/common-utils/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit config devcontainers-theme.show-dirty 1\n```\n\n----------------------------------------\n\nTITLE: Installing Firefox ESR in Dockerfile\nDESCRIPTION: Dockerfile command to install the Firefox ESR browser in the development container. Uses apt-get to update repositories and install the browser package.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/desktop-lite/README.md#2025-04-17_snippet_2\n\nLANGUAGE: Dockerfile\nCODE:\n```\nRUN apt-get update && export DEBIAN_FRONTEND=noninteractive && apt-get install -y firefox-esr\n```\n\n----------------------------------------\n\nTITLE: Setting Password for Root User\nDESCRIPTION: Bash command to set the password for the root user. This is used when running as root in the container.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/sshd/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npasswd\n```\n\n----------------------------------------\n\nTITLE: Configuring GPU Passthrough in a Development Container\nDESCRIPTION: This JSON configuration enables GPU passthrough to a development container by setting the hostRequirements property. Setting the gpu value to \"optional\" ensures compatibility with both GPU and CPU-only machines.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/nvidia-cuda/NOTES.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hostRequirements\": {\n    \"gpu\": \"optional\" \n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Root Password in Dev Container\nDESCRIPTION: Command to set password when running as root user in the container.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/sshd/NOTES.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npasswd\n```\n\n----------------------------------------\n\nTITLE: Setting Local Workspace Environment Configuration\nDESCRIPTION: JSON configuration for setting up local workspace folder environment variable in devcontainer.json\nSOURCE: https://github.com/devcontainers/features/blob/main/src/docker-outside-of-docker/README.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"remoteEnv\": { \"LOCAL_WORKSPACE_FOLDER\": \"${localWorkspaceFolder}\" }\n```\n\n----------------------------------------\n\nTITLE: Disabling Git Status in Command Prompt (Bash)\nDESCRIPTION: This command completely disables the git-related information in the command prompt for the current folder's repository. This can be useful for large repositories where git operations might slow down the prompt.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/common-utils/NOTES.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit config devcontainers-theme.hide-status 1\n```\n\n----------------------------------------\n\nTITLE: Setting User Password in Dev Container (with sudo)\nDESCRIPTION: Command to set password for current user when sudo is available in the container. Uses whoami to automatically determine the current username.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/sshd/NOTES.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo passwd $(whoami)\n```\n\n----------------------------------------\n\nTITLE: Using Local Workspace Path for Docker Bind Mount\nDESCRIPTION: Example of a Docker run command that uses the LOCAL_WORKSPACE_FOLDER environment variable to bind mount the workspace from the host into a Docker container started from within the dev container.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/docker-outside-of-docker/NOTES.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it --rm -v ${LOCAL_WORKSPACE_FOLDER}:/workspace debian bash\n```\n\n----------------------------------------\n\nTITLE: Pinning Feature Versions\nDESCRIPTION: Example showing how to pin to a specific Feature version using semantic versioning in devcontainer.json configuration.\nSOURCE: https://github.com/devcontainers/features/blob/main/README.md#2025-04-17_snippet_1\n\nLANGUAGE: jsonc\nCODE:\n```\n\"features\": {\n    \"ghcr.io/devcontainers/features/go:1.0.0\": {\n        \"version\": \"1.18\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Mounting Remote Filesystem with SSHFS on Windows\nDESCRIPTION: Windows-specific command for mounting a remote filesystem using SSHFS. Uses the sshfs.r protocol with the port specified after an exclamation mark.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/sshd/README.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n\\\\sshfs.r\\vscode@localhost!2222\\workspaces\n```\n\n----------------------------------------\n\nTITLE: Disabling Git Status in Command Prompt\nDESCRIPTION: Bash command to completely disable the git status information in the command prompt for the current repository. This can improve performance with large repositories.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/common-utils/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit config devcontainers-theme.hide-status 1\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies in requirements.txt\nDESCRIPTION: This requirements.txt file specifies exact versions of Python mathematical libraries to be installed. It includes mpmath 1.3.0 for arbitrary-precision arithmetic and sympy 1.11.1 for symbolic mathematics functionality.\nSOURCE: https://github.com/devcontainers/features/blob/main/test/oryx/sample-python/requirements.txt#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmpmath==1.3.0\nsympy==1.11.1\n```\n\n----------------------------------------\n\nTITLE: SSH Connection to Dev Container\nDESCRIPTION: Command to establish SSH connection to the dev container on localhost with security checks disabled. Uses port 2222 by default and skips host key verification.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/sshd/NOTES.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nssh -p 2222 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o GlobalKnownHostsFile=/dev/null vscode@localhost\n```\n\n----------------------------------------\n\nTITLE: Installing .NET SDK Using dotnet-install.sh Script\nDESCRIPTION: Examples of using dotnet-install.sh script with different configuration options. Shows various combinations of version, channel, and quality parameters to install specific .NET SDK versions. Supports installing latest versions, LTS/STS channels, and specific version numbers.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/oryx/scripts/vendor/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet-install.sh [--version latest] [--channel LTS]\ndotnet-install.sh [--version latest] --channel STS\ndotnet-install.sh [--version latest] --channel 6.0 [--quality GA]\ndotnet-install.sh [--version latest] --channel 6.0.4xx [--quality GA]\ndotnet-install.sh [--version latest] --channel 8.0 --quality preview\ndotnet-install.sh [--version latest] --channel 8.0 --quality daily\ndotnet-install.sh --version 6.0.413\n```\n\n----------------------------------------\n\nTITLE: Installing a Different Python Version with Conda\nDESCRIPTION: Bash command to install a specific version of Python using conda package manager. This demonstrates how to override the default Python version in the Anaconda environment.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/anaconda/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nconda install python=3.7\n```\n\n----------------------------------------\n\nTITLE: Repository Structure Layout\nDESCRIPTION: Directory structure showing the organization of Feature source code and test files in the repository.\nSOURCE: https://github.com/devcontainers/features/blob/main/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n.\n├── README.md\n├── src\n│   ├── dotnet\n│   │   ├── devcontainer-feature.json\n│   │   └── install.sh\n│   ├── go\n│   │   ├── devcontainer-feature.json\n│   │   └── install.sh\n|   ├── ...\n│   │   ├── devcontainer-feature.json\n│   │   └── install.sh\n├── test\n│   ├── dotnet\n│   │   └── test.sh\n│   ├── go\n|   |   ├── scenarios.json\n|   |   ├── test_scenario_1.json\n│   │   └── test.sh\n|   ├── ...\n│   │   └── test.sh\n...\n```\n\n----------------------------------------\n\nTITLE: Executing Install Script with Bash\nDESCRIPTION: Reference to the install.sh script that requires bash shell for execution. This is a fundamental requirement for feature installation.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/python/NOTES.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ninstall.sh\n```\n\n----------------------------------------\n\nTITLE: SSHFS Windows Connection String\nDESCRIPTION: Connection string format for mounting SSHFS filesystem on Windows using WinFsp and SSHFS-Win.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/sshd/NOTES.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n\\\\sshfs.r\\vscode@localhost!2222\\workspaces\n```\n\n----------------------------------------\n\nTITLE: Executing Installation Script with Bash\nDESCRIPTION: The install.sh script for devcontainer features requires bash to be executed. This is a crucial dependency for the installation process.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/hugo/NOTES.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbash install.sh\n```\n\n----------------------------------------\n\nTITLE: Enabling Git Dirty Indicator in Command Prompt (Bash)\nDESCRIPTION: This command enables the 'dirty' indicator in the git-enhanced command prompt, which shows whether there are uncommitted changes in the repository. It's recommended for smaller repositories due to potential performance impact.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/common-utils/NOTES.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit config devcontainers-theme.show-dirty 1\n```\n\n----------------------------------------\n\nTITLE: Workspace Folder Configuration in Devcontainer\nDESCRIPTION: JSON configuration for setting up workspace folder and mount settings in devcontainer.json\nSOURCE: https://github.com/devcontainers/features/blob/main/src/docker-outside-of-docker/README.md#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"workspaceFolder\": \"${localWorkspaceFolder}\",\n\"workspaceMount\": \"source=${localWorkspaceFolder},target=${localWorkspaceFolder},type=bind\"\n```\n\n----------------------------------------\n\nTITLE: Executing AWS CLI Installation Script in Bash\nDESCRIPTION: This snippet indicates that bash is required to execute the install.sh script for installing the AWS CLI in the development container.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/aws-cli/NOTES.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ninstall.sh\n```\n\n----------------------------------------\n\nTITLE: Installing Google Chrome in Dockerfile\nDESCRIPTION: Dockerfile command to download and install Google Chrome in the development container. Uses curl to fetch the appropriate architecture package and installs it with apt-get.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/desktop-lite/README.md#2025-04-17_snippet_3\n\nLANGUAGE: Dockerfile\nCODE:\n```\nRUN apt-get update && export DEBIAN_FRONTEND=noninteractive \\\n    && curl -sSL https://dl.google.com/linux/direct/google-chrome-stable_current_$(dpkg --print-architecture).deb -o /tmp/chrome.deb \\\n    && apt-get -y install /tmp/chrome.deb\n```\n\n----------------------------------------\n\nTITLE: Referencing installation script\nDESCRIPTION: References the main installation script that requires bash to execute\nSOURCE: https://github.com/devcontainers/features/blob/main/src/rust/NOTES.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ninstall.sh\n```\n\n----------------------------------------\n\nTITLE: NVM Interactive Shell Command\nDESCRIPTION: Alternative approach to run NVM commands using an interactive bash shell, ensuring proper NVM initialization.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/node/README.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"postCreateCommand\": \"bash -i -c 'nvm install --lts'\"\n```\n\n----------------------------------------\n\nTITLE: Referencing bash shell requirement\nDESCRIPTION: Indicates that bash shell is required as a dependency for executing the install.sh script in devcontainer features\nSOURCE: https://github.com/devcontainers/features/blob/main/src/rust/NOTES.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbash\n```\n\n----------------------------------------\n\nTITLE: Installing Latest .NET SDK Version\nDESCRIPTION: Default configuration for installing only the most recent .NET SDK version in a development container.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/dotnet/NOTES.md#2025-04-17_snippet_0\n\nLANGUAGE: jsonc\nCODE:\n```\n\"features\": {\n    \"ghcr.io/devcontainers/features/dotnet:2\": \"latest\" // or \"\" or {}\n}\n```\n\n----------------------------------------\n\nTITLE: Executing install.sh script using Bash\nDESCRIPTION: The install.sh script for this devcontainer feature requires bash to be present on the system for execution.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/go/NOTES.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbash\n```\n\n----------------------------------------\n\nTITLE: Installing Additional .NET SDK Version\nDESCRIPTION: Configuration for installing an additional .NET SDK version alongside the default version. Versions are specified as comma-separated values.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/dotnet/NOTES.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"features\": {\n    \"ghcr.io/devcontainers/features/dotnet:2\": {\n        \"additionalVersions\": \"lts\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Specific .NET SDK Feature Band\nDESCRIPTION: Configuration for installing a specific .NET SDK feature band, which allows for more precise version control between major releases.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/dotnet/NOTES.md#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"features\": {\n    \"ghcr.io/devcontainers/features/dotnet:2\": {\n        \"version\": \"6.0.4xx\",\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing .NET Workloads\nDESCRIPTION: Configuration for installing additional .NET workloads such as Aspire or WebAssembly tools. Multiple workloads can be specified as comma-separated values.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/dotnet/NOTES.md#2025-04-17_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"features\": {\n    \"ghcr.io/devcontainers/features/dotnet:2\": {\n      \"workloads\": \"aspire, wasm-tools\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: SDK Feature Band Installation\nDESCRIPTION: Installing a specific .NET SDK feature band version.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/dotnet/README.md#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"features\": {\n    \"ghcr.io/devcontainers/features/dotnet:2\": {\n        \"version\": \"6.0.4xx\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Specific SDK Patch Version\nDESCRIPTION: Installing a specific .NET SDK patch version.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/dotnet/README.md#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"features\": {\n    \"ghcr.io/devcontainers/features/dotnet:2\": {\n        \"version\": \"6.0.412\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Starting Nix Daemon Using Bash\nDESCRIPTION: This command manually starts the Nix daemon using sudo. It's useful when automatic startup is not possible due to password protection. The script also handles daemon restarts and logs output to a specific file.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/nix/NOTES.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo /usr/local/share/nix-entrypoint.sh\n```\n\n----------------------------------------\n\nTITLE: Required Package Managers for Java Feature Installation\nDESCRIPTION: Lists the supported package managers and distributions for installing the Java Feature. Requires bash shell to be present for executing the install.sh script.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/java/NOTES.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\napt\nyum\ndnf\nmicrodnf\n```\n\n----------------------------------------\n\nTITLE: Required Shell for Installation Script\nDESCRIPTION: Specifies the shell requirement for executing the Java Feature installation script.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/java/NOTES.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ninstall.sh\n```\n\n----------------------------------------\n\nTITLE: Executing install.sh script using Bash\nDESCRIPTION: The Feature requires bash to be present on the system to execute the install.sh script. This script is likely responsible for installing and configuring the Feature.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/php/NOTES.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbash install.sh\n```\n\n----------------------------------------\n\nTITLE: Executing DevContainer Features Installation Script in Bash\nDESCRIPTION: This snippet highlights the requirement of bash for executing the install.sh script, which is crucial for setting up DevContainer Features.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/ruby/NOTES.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbash install.sh\n```\n\n----------------------------------------\n\nTITLE: Referencing apt package manager\nDESCRIPTION: References the apt package manager requirement for Debian/Ubuntu-based distributions\nSOURCE: https://github.com/devcontainers/features/blob/main/src/rust/NOTES.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\napt\n```\n\n----------------------------------------\n\nTITLE: Interactive Program License Notice Template\nDESCRIPTION: Template for displaying license information in interactive programs under GPL.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/java/NOTICE.txt#2025-04-17_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nGnomovision version 69, Copyright (C) year name of author Gnomovision comes\nwith ABSOLUTELY NO WARRANTY; for details type 'show w'.  This is free\nsoftware, and you are welcome to redistribute it under certain conditions;\ntype 'show c' for details.\n```\n\n----------------------------------------\n\nTITLE: Example Copyright Notice Template\nDESCRIPTION: Standard template for including GPL copyright notice in source files.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/java/NOTICE.txt#2025-04-17_snippet_11\n\nLANGUAGE: text\nCODE:\n```\nOne line to give the program's name and a brief idea of what it does.\n\nCopyright (C) <year> <name of author>\n\nThis program is free software; you can redistribute it and/or modify it\nunder the terms of the GNU General Public License as published by the Free\nSoftware Foundation; either version 2 of the License, or (at your option)\nany later version.\n\nThis program is distributed in the hope that it will be useful, but WITHOUT\nANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\nFITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for\nmore details.\n\nYou should have received a copy of the GNU General Public License along\nwith this program; if not, write to the Free Software Foundation, Inc.,\n51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n```\n\n----------------------------------------\n\nTITLE: Sample Copyright Header for GNU GPL Software\nDESCRIPTION: Example of the standard copyright notice and license header that should be attached to the start of each source file in a GPL-licensed program. This provides the basic licensing information and warranty disclaimer.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/java/NOTICE.txt#2025-04-17_snippet_14\n\nLANGUAGE: text\nCODE:\n```\nOne line to give the program's name and a brief idea of what it does.\n\nCopyright (C) <year> <name of author>\n\nThis program is free software; you can redistribute it and/or modify it\nunder the terms of the GNU General Public License as published by the Free\nSoftware Foundation; either version 2 of the License, or (at your option)\nany later version.\n\nThis program is distributed in the hope that it will be useful, but WITHOUT\nANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\nFITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for\nmore details.\n\nYou should have received a copy of the GNU General Public License along\nwith this program; if not, write to the Free Software Foundation, Inc.,\n51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n```\n\n----------------------------------------\n\nTITLE: Interactive Program Notice for GNU GPL Software\nDESCRIPTION: Example output notice for interactive programs that informs users about the program's copyright, warranty disclaimer, and redistribution conditions. This should be displayed when the program starts in interactive mode.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/java/NOTICE.txt#2025-04-17_snippet_15\n\nLANGUAGE: text\nCODE:\n```\nGnomovision version 69, Copyright (C) year name of author Gnomovision comes\nwith ABSOLUTELY NO WARRANTY; for details type 'show w'.  This is free\nsoftware, and you are welcome to redistribute it under certain conditions;\ntype 'show c' for details.\n```\n\n----------------------------------------\n\nTITLE: Interactive Program Copyright Notice (Text)\nDESCRIPTION: Example of a short copyright notice for interactive programs, including warranty disclaimer and redistribution terms.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/java/NOTICE.txt#2025-04-17_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nGnomovision version 69, Copyright (C) year name of author Gnomovision comes\nwith ABSOLUTELY NO WARRANTY; for details type 'show w'.  This is free\nsoftware, and you are welcome to redistribute it under certain conditions;\ntype 'show c' for details.\n```\n\n----------------------------------------\n\nTITLE: License Header Template for Source Files\nDESCRIPTION: Standard copyright and license header template to be placed at the start of source code files under GPL.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/java/NOTICE.txt#2025-04-17_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nOne line to give the program's name and a brief idea of what it does.\n\nCopyright (C) <year> <name of author>\n\nThis program is free software; you can redistribute it and/or modify it\nunder the terms of the GNU General Public License as published by the Free\nSoftware Foundation; either version 2 of the License, or (at your option)\nany later version.\n\nThis program is distributed in the hope that it will be useful, but WITHOUT\nANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\nFITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for\nmore details.\n\nYou should have received a copy of the GNU General Public License along\nwith this program; if not, write to the Free Software Foundation, Inc.,\n51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n```\n\n----------------------------------------\n\nTITLE: Interactive Program License Notice\nDESCRIPTION: Example of a short license notice to be displayed when an interactive program starts, including copyright and warranty information.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/java/NOTICE.txt#2025-04-17_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n    Gnomovision version 69, Copyright (C) year name of author Gnomovision comes\n    with ABSOLUTELY NO WARRANTY; for details type 'show w'.  This is free\n    software, and you are welcome to redistribute it under certain conditions;\n    type 'show c' for details.\n```\n\n----------------------------------------\n\nTITLE: Basic GPL License Header Template\nDESCRIPTION: Standard GPL license header template for source code files, including copyright notice and warranty disclaimer.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/java/NOTICE.txt#2025-04-17_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n    One line to give the program's name and a brief idea of what it does.\n\n    Copyright (C) <year> <name of author>\n\n    This program is free software; you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by the Free\n    Software Foundation; either version 2 of the License, or (at your option)\n    any later version.\n\n    This program is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for\n    more details.\n\n    You should have received a copy of the GNU General Public License along\n    with this program; if not, write to the Free Software Foundation, Inc.,\n    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n```\n\n----------------------------------------\n\nTITLE: Copyright Disclaimer Template\nDESCRIPTION: Sample copyright disclaimer template for employers or schools to disclaim copyright interest in programs.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/java/NOTICE.txt#2025-04-17_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nYoyodyne, Inc., hereby disclaims all copyright interest in the program\n'Gnomovision' (which makes passes at compilers) written by James Hacker.\n\nsignature of Ty Coon, 1 April 1989\n\nTy Coon, President of Vice\n```\n\n----------------------------------------\n\nTITLE: Classpath Exception to GPL (Text)\nDESCRIPTION: Special exception to the GPL allowing linking with independent modules under certain conditions.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/java/NOTICE.txt#2025-04-17_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nLinking this library statically or dynamically with other modules is making\na combined work based on this library.  Thus, the terms and conditions of\nthe GNU General Public License cover the whole combination.\n\nAs a special exception, the copyright holders of this library give you\npermission to link this library with independent modules to produce an\nexecutable, regardless of the license terms of these independent modules,\nand to copy and distribute the resulting executable under terms of your\nchoice, provided that you also meet, for each linked independent module,\nthe terms and conditions of the license of that module.  An independent\nmodule is a module which is not derived from or based on this library.  If\nyou modify this library, you may extend this exception to your version of\nthe library, but you are not obligated to do so.  If you do not wish to do\nso, delete this exception statement from your version.\n```\n\n----------------------------------------\n\nTITLE: Classpath Exception Terms\nDESCRIPTION: Special exception terms for linking libraries with independent modules under the GPL license.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/java/NOTICE.txt#2025-04-17_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nLinking this library statically or dynamically with other modules is making\na combined work based on this library.  Thus, the terms and conditions of\nthe GNU General Public License cover the whole combination.\n\nAs a special exception, the copyright holders of this library give you\npermission to link this library with independent modules to produce an\nexecutable, regardless of the license terms of these independent modules,\nand to copy and distribute the resulting executable under terms of your\nchoice, provided that you also meet, for each linked independent module,\nthe terms and conditions of the license of that module.  An independent\nmodule is a module which is not derived from or based on this library.  If\nyou modify this library, you may extend this exception to your version of\nthe library, but you are not obligated to do so.  If you do not wish to do\nso, delete this exception statement from your version.\n```\n\n----------------------------------------\n\nTITLE: Applying GPL Terms to New Programs (Text)\nDESCRIPTION: Example of how to apply GPL terms to a new program, including copyright notice, warranty disclaimer, and distribution terms.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/java/NOTICE.txt#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nOne line to give the program's name and a brief idea of what it does.\n\nCopyright (C) <year> <name of author>\n\nThis program is free software; you can redistribute it and/or modify it\nunder the terms of the GNU General Public License as published by the Free\nSoftware Foundation; either version 2 of the License, or (at your option)\nany later version.\n\nThis program is distributed in the hope that it will be useful, but WITHOUT\nANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\nFITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for\nmore details.\n\nYou should have received a copy of the GNU General Public License along\nwith this program; if not, write to the Free Software Foundation, Inc.,\n51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n```\n\n----------------------------------------\n\nTITLE: Interactive Program Notice Example\nDESCRIPTION: Example of a short notice to be displayed when an interactive program starts.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/java/NOTICE.txt#2025-04-17_snippet_12\n\nLANGUAGE: text\nCODE:\n```\nGnomovision version 69, Copyright (C) year name of author Gnomovision comes\nwith ABSOLUTELY NO WARRANTY; for details type 'show w'.  This is free\nsoftware, and you are welcome to redistribute it under certain conditions;\ntype 'show c' for details.\n```\n\n----------------------------------------\n\nTITLE: Copyright Disclaimer Template\nDESCRIPTION: Template for copyright disclaimer by employer or organization.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/java/NOTICE.txt#2025-04-17_snippet_10\n\nLANGUAGE: text\nCODE:\n```\nYoyodyne, Inc., hereby disclaims all copyright interest in the program\n'Gnomovision' (which makes passes at compilers) written by James Hacker.\n\nsignature of Ty Coon, 1 April 1989\n\nTy Coon, President of Vice\n```\n\n----------------------------------------\n\nTITLE: Copyright Disclaimer Example\nDESCRIPTION: Sample template for a copyright disclaimer from an employer or organization.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/java/NOTICE.txt#2025-04-17_snippet_13\n\nLANGUAGE: text\nCODE:\n```\nYoyodyne, Inc., hereby disclaims all copyright interest in the program\n'Gnomovision' (which makes passes at compilers) written by James Hacker.\n\nsignature of Ty Coon, 1 April 1989\n\nTy Coon, President of Vice\n```\n\n----------------------------------------\n\nTITLE: Copyright Disclaimer Example (Text)\nDESCRIPTION: Sample copyright disclaimer for employers or schools to sign, disclaiming copyright interest in a program.\nSOURCE: https://github.com/devcontainers/features/blob/main/src/java/NOTICE.txt#2025-04-17_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nYoyodyne, Inc., hereby disclaims all copyright interest in the program\n'Gnomovision' (which makes passes at compilers) written by James Hacker.\n\nsignature of Ty Coon, 1 April 1989\n\nTy Coon, President of Vice\n```"
  }
]