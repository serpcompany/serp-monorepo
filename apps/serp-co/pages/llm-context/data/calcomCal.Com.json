[
  {
    "owner": "calcom",
    "repo": "cal.com",
    "content": "TITLE: Using Cal.com Atoms in React Components\nDESCRIPTION: Example of using a Cal.com atom (Connect.GoogleCalendar) in a React component for handling Google Calendar integration.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/platform/quickstart.mdx#2025-04-20_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Connect } from \"@calcom/atoms\";\n\n...\nexport default function Connect() {\n  return (\n    <main>\n\t    <Connect.GoogleCalendar />\n    </main>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic Booker Component in JavaScript\nDESCRIPTION: This snippet demonstrates how to import and implement the basic Booker component with essential props including eventSlug and username, along with an event handler for successful booking creation.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/platform/atoms/booker.mdx#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Booker } from \"@calcom/atoms\";\n\nexport default function Booker( props : BookerProps ) {\n  return (\n    <>\n      <Booker\n        eventSlug={props.eventTypeSlug}\n        username={props.calUsername}\n        onCreateBookingSuccess={() => {\n          console.log(\"booking created successfully\");\n         }}\n      />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Action Listeners for Embedded Cal.com Events in JavaScript\nDESCRIPTION: This code snippet demonstrates how to set up a listener for actions that occur in an embedded Cal.com link. It uses the Cal() function to register a callback for a specified action, allowing developers to respond to events such as event selection or booking completion.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/developing/guides/embeds/embed-events.mdx#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<script>\n  Cal(\"on\", {\n    action: \"ANY_ACTION_NAME\",\n    callback: (e)=>{\n      // `data` is properties for the event.\n      // `type` is the name of the action(You can also call it type of the action.) This would be same as \"ANY_ACTION_NAME\" except when ANY_ACTION_NAME=\"*\" which listens to all the events.\n      // `namespace` tells you the Cal namespace for which the event is fired/\n      const {data, type, namespace} = e.detail;\n    }\n  })\n</script>\n```\n\n----------------------------------------\n\nTITLE: Fetching Upcoming Bookings using useBookings Hook in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the useBookings hook to fetch upcoming bookings for a user. It includes filtering options like take, skip, and status.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/platform/bookings-hooks.mdx#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useBookings } from \"@calcom/atoms\";\n\nexport default function Bookings() {\n  const { isLoading: isLoadingUpcomingBookings, data: upcomingBookings } = useBookings({\n    take: 50,\n    skip: 0,\n    status: [\"upcoming\"],\n  });\n\n  return (\n    <>\n      <h1>Upcoming bookings</h1>\n      {isLoadingUpcomingBookings && <p>Loading...</p>}\n      {!isLoadingUpcomingBookings && !upcomingBookings && <p>No upcoming bookings found</p>}\n      {!isLoading &&\n        upcomingBookings &&\n        (Boolean(upcomingBookings?.length)) &&\n        [...upcomingBookings].map((booking) => {\n            return (\n                <div key={booking.id}><h1>{booking.title}</h1></div>\n            );\n       })}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Payment Form on Separate Page\nDESCRIPTION: This code shows how to set up a separate page for the payment form. It extracts the payment UID from the URL and passes it to the PaymentForm component.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/platform/atoms/payment-form.mdx#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PaymentForm } from \"@calcom/atoms\";\n\nexport default function StripePaymentForm() {\n  // if using nextjs, better to use the usePathname hook\n  const pathname = window.location.pathname;\n  const uid = pathname.split(\"/\").pop();\n\n  return (\n    <>\n      <PaymentForm paymentUid={uid} />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Team Event Type Creation with Cal.com Atoms\nDESCRIPTION: This snippet demonstrates how to implement the CreateEventType atom specifically for team event types by providing the teamId prop. Like the individual event type, it includes callback functions and styling options.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/platform/atoms/event-type.mdx#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { CreateEventType } from \"@calcom/atoms\";\n\nexport default function TeamEventType(teamId: number) {l\n  return (\n    <>\n      <CreateEventType\n        teamId={teamId}\n        onSuccess={(eventType) => {\n          console.log(\"EventType created successfully\", eventType);\n        }}\n        customClassNames={{\n          atomsWrapper: \"border p-4 rounded-md\",\n          buttons: { submit: \"bg-red-500\", cancel: \"bg-gray-300\" },\n        }}\n      />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Yarn\nDESCRIPTION: Command to install all necessary dependencies for Cal.com using Yarn package manager.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/developing/local-development.mdx#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Rendering Multi-User Outlook Calendar Connect Button in React\nDESCRIPTION: This code snippet shows how to render an Outlook calendar connect button that supports multiple users. It uses the isMultiCalendar prop set to true, allowing the application to handle multiple Outlook calendar accounts.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/platform/atoms/outlook-calendar-connect.mdx#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Connect } from \"@calcom/atoms\";\n\nexport default function ConnectCalendar() {\n  return (\n    <>\n      <Connect.OutlookCalendar isMultiCalendar={true} />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-User Apple Calendar Connect Button in React\nDESCRIPTION: This code snippet shows how to implement the Apple Calendar Connect button with multi-user support. It uses the isMultiCalendar prop set to true to enable integration for multiple users within the application.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/platform/atoms/apple-calendar-connect.mdx#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Connect } from \"@calcom/atoms\";\n\nexport default function ConnectCalendar() {\n  return (\n    <>\n      <Connect.AppleCalendar isMultiCalendar={true} />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Booking Cancellation with useCancelBooking Hook\nDESCRIPTION: Code that demonstrates how to use the useCancelBooking hook to create a cancellation function. The mutation is triggered when a cancel button is clicked, handling both single bookings and arrays of recurring bookings.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/platform/guides/booking-redirects.mdx#2025-04-20_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst { mutate: cancelBooking } = useCancelBooking({\n    onSuccess: () => {\n      refetch();\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Quick Start Development Environment (Shell)\nDESCRIPTION: Command to start a local development environment with Docker, including a Postgres instance and test users.\nSOURCE: https://github.com/calcom/cal.com/blob/main/README.md#2025-04-20_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nyarn dx\n```\n\n----------------------------------------\n\nTITLE: Fetching Organization Bookings as Admin using useOrganizationBookings Hook in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the useOrganizationBookings hook to fetch bookings for an entire organization as an admin. It includes filtering options like take, skip, and userIds.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/platform/bookings-hooks.mdx#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useOrganizationBookings } from \"@calcom/atoms\";\n\nexport default function Bookings() {\n  const { isLoading: isLoadingUpcomingBookings, data: upcomingBookings } = useOrganizationBookings({\n    take: 50,\n    skip: 0,\n    userIds: [10, 11],\n  });\n\n  return (\n    <>\n      <h1>Upcoming bookings</h1>\n      {isLoadingUpcomingBookings && <p>Loading...</p>}\n      {!isLoadingUpcomingBookings && !upcomingBookings && <p>No upcoming bookings found</p>}\n      {!isLoading &&\n        upcomingBookings &&\n        (Boolean(upcomingBookings?.length)) &&\n        [...upcomingBookings].map((booking) => {\n            return (\n                <div key={booking.id}><h1>{booking.title}</h1></div>\n            );\n       })}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Example Webhook Payload Structure in JSON\nDESCRIPTION: This snippet demonstrates the structure of a webhook payload sent by Cal.com when a booking is created. It includes details about the event, organizer, attendees, and other relevant information.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/developing/guides/automation/webhooks.mdx#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"triggerEvent\": \"BOOKING_CREATED\",\n    \"createdAt\": \"2023-05-24T09:30:00.538Z\",\n    \"payload\": {\n        \"type\": \"60min\",\n        \"title\": \"60min between Pro Example and John Doe\",\n        \"description\": \"\",\n        \"additionalNotes\": \"\",\n        \"customInputs\": {},\n        \"startTime\": \"2023-05-25T09:30:00Z\",\n        \"endTime\": \"2023-05-25T10:30:00Z\",\n        \"organizer\": {\n            \"id\": 5,\n            \"name\": \"Pro Example\",\n            \"email\": \"pro@example.com\",\n            \"username\": \"pro\",\n            \"timeZone\": \"Asia/Kolkata\",\n            \"language\": {\n                \"locale\": \"en\"\n            },\n            \"timeFormat\": \"h:mma\"\n        },\n        \"responses\": {\n            \"name\": {\n                \"label\": \"your_name\",\n                \"value\": \"John Doe\"\n            },\n            \"email\": {\n                \"label\": \"email_address\",\n                \"value\": \"john.doe@example.com\"\n            },\n            \"location\": {\n                \"label\": \"location\",\n                \"value\": {\n                    \"optionValue\": \"\",\n                    \"value\": \"inPerson\"\n                }\n            },\n            \"notes\": {\n                \"label\": \"additional_notes\"\n            },\n            \"guests\": {\n                \"label\": \"additional_guests\"\n            },\n            \"rescheduleReason\": {\n                \"label\": \"reschedule_reason\"\n            }\n        },\n        \"userFieldsResponses\": {},\n        \"attendees\": [\n            {\n                \"email\": \"john.doe@example.com\",\n                \"name\": \"John Doe\",\n                \"timeZone\": \"Asia/Kolkata\",\n                \"language\": {\n                    \"locale\": \"en\"\n                }\n            }\n        ],\n        \"location\": \"Calcom HQ\",\n        \"destinationCalendar\": {\n            \"id\": 10,\n            \"integration\": \"apple_calendar\",\n            \"externalId\": \"https://caldav.icloud.com/1234567/calendars/XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX/\",\n            \"userId\": 5,\n            \"eventTypeId\": null,\n            \"credentialId\": 1\n        },\n        \"hideCalendarNotes\": false,\n        \"requiresConfirmation\": null,\n        \"eventTypeId\": 7,\n        \"seatsShowAttendees\": true,\n        \"seatsPerTimeSlot\": null,\n        \"uid\": \"bFJeNb2uX8ANpT3JL5EfXw\",\n        \"appsStatus\": [\n            {\n                \"appName\": \"Apple Calendar\",\n                \"type\": \"apple_calendar\",\n                \"success\": 1,\n                \"failures\": 0,\n                \"errors\": [],\n                \"warnings\": []\n            }\n        ],\n        \"eventTitle\": \"60min\",\n        \"eventDescription\": \"\",\n        \"price\": 0,\n        \"currency\": \"usd\",\n        \"length\": 60,\n        \"bookingId\": 91,\n        \"metadata\": {},\n        \"status\": \"ACCEPTED\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Team Event Type with useCreateTeamEventType Hook in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the useCreateTeamEventType hook to create a new team event type. It shows setting up the mutation function with success and error callbacks, and creating a team event type with specified properties including scheduling type and hosts.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/platform/event-types-hooks.mdx#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useCreateTeamEventType } from \"@calcom/atoms\";\n\nexport default function CreateTeamEventType() {\n  const { mutate: createTeamEventType, isPending } = useCreateTeamEventType({\n    onSuccess: () => {\n      console.log(\"Event type created successfully!\");\n    },\n    onError: () => {\n      console.log(\"Error creating event type\");\n    },\n  });\n\n  return (\n    <>\n      <button \n        disabled={isPending}\n        onClick={() => {\n          createTeamEventType({\n            lengthInMinutes: 30,\n            title: \"Daily standup\",\n            slug: \"daily-standup\",\n            description: \"Daily standup for the team\",\n            schedulingType: \"COLLECTIVE\",\n            hosts: [{\"userId\": 1456}, {\"userId\": 2357}],\n            teamId: 1234,\n          })\n        }}>\n        Create team event type\n      </button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Booker Component for Team Events\nDESCRIPTION: Implementation of the Booker component for team events in React. The component requires teamId and eventSlug props, with the isTeamEvent flag set to true to properly render a team-based booking interface.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/platform/guides/teams-setup.mdx#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n    <Booker\n      isTeamEvent={true}\n      teamId={35243}\n      eventSlug=\"daily-standup-for-platform\"\n      onCreateBookingSuccess={(booking) => {\n        console.log(\"booking created successfully\", booking);\n      }}\n    />\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Apple Calendar Connect Button in React\nDESCRIPTION: This code snippet demonstrates how to render a basic Apple Calendar Connect button. It imports the Connect component from the @calcom/atoms library and renders the AppleCalendar component within a React functional component.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/platform/atoms/apple-calendar-connect.mdx#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Connect } from \"@calcom/atoms\";\n\nexport default function ConnectCalendar() {\n  return (\n    <>\n      <Connect.AppleCalendar />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Payment Form Atom in React\nDESCRIPTION: This snippet demonstrates how to import and use the PaymentForm component from Cal.com atoms to create a Stripe payment form. It takes a paymentUid prop to associate the form with a specific payment.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/platform/atoms/payment-form.mdx#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PaymentForm } from \"@calcom/atoms\";\n\nexport default function StripePaymentForm(uid: string) {\n  return (\n    <>\n      <PaymentForm paymentUid={uid} />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Styles for Cal.com Booker Component in React\nDESCRIPTION: This snippet demonstrates how to use the Booker component from @calcom/atoms with custom styling. It applies custom class names to various parts of the booking interface, including the container, date picker, event meta, available time slots, and confirmation buttons.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/platform/atoms/booker.mdx#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Booker } from \"@calcom/atoms\";\n\nexport default function Booker( props : BookerProps ) {\n  return (\n    <>\n      <Booker\n        ...\n        customClassNames={{\n          bookerContainer: \"!bg-[#F5F2FE] [&_button:!rounded-full] border-subtle border\",\n          datePickerCustomClassNames: {\n            datePickerDatesActive: \"!bg-[#D7CEF5]\",\n          },\n          eventMetaCustomClassNames: {\n            eventMetaTitle: \"text-[#7151DC]\",\n          },\n          availableTimeSlotsCustomClassNames: {\n            availableTimeSlotsHeaderContainer: \"!bg-[#F5F2FE]\",\n            availableTimes: \"!bg-[#D7CEF5]\",\n          },\n          confirmStep: {\n            confirmButton: \"!bg-purple-700\",\n            backButton: \"text-purple-700 hover:!bg-purple-700 hover:!text-white\"\n          }\n        }}\n      />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Prefilling Default Booking Fields in Cal.com Booker Component\nDESCRIPTION: Example showing how to pre-fill name and email fields in the Booker atom component by passing values to the defaultFormValues prop.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/platform/guides/booking-fields.mdx#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<Booker\n    defaultFormValues={{\n        name: \"bob\",\n        email: \"bob@gmail.com\",\n    }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Conferencing Apps Atom in React/Next.js\nDESCRIPTION: Code to render the Conferencing Apps settings component with URL callback handling. The component allows users to configure video conferencing apps like Zoom, Google Meet, and Microsoft Teams. It accepts props for redirect URLs and toast notifications control.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/platform/atoms/conferencing-apps.mdx#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ConferencingAppsSettings } from \"@calcom/atoms\";\nimport { usePathname } from \"next/navigation\";\n\nexport default function ConferencingApps() {\n  const pathname = usePathname();\n  const callbackUri = `${window.location.origin}${pathname}`;\n\n  return (\n    <>\n        <ConferencingAppsSettings returnTo={callbackUri} onErrorReturnTo={callbackUri} />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Toast Handlers for AvailabilitySettings\nDESCRIPTION: This snippet demonstrates how to implement custom toast handlers for the AvailabilitySettings component by providing callback functions for success and error scenarios on update and delete operations.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/platform/guides/replacing-toasts.mdx#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<AvailabilitySettings\n    disableToasts={true}\n    onUpdateSuccess={updateSuccessHandler}\n    onUpdateError={updateErrorHandler}\n    onDeleteSuccess={deleteSucessHandler}\n    onDeleteError={deleteErrorHandler}\n/>\n```\n\n----------------------------------------\n\nTITLE: Fetching Team Event Types with useTeamEventTypes Hook in JavaScript\nDESCRIPTION: This snippet shows how to use the useTeamEventTypes hook to fetch and display event types for a specific team. It handles loading states and renders team event slugs.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/platform/event-types-hooks.mdx#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useTeamEventTypes } from \"@calcom/atoms\";\n\nexport default function TeamEventTypes({ id }: { id: number }) {\n  const { isLoading: isLoadingTeamEvents, data: teamEventTypes, refetch: refetchTeamEvents } = useTeamEventTypes(id);\n\n  return (\n    <>\n      {isLoadingTeamEvents && <p>Loading...</p>}\n      {!isLoadingTeamEvents && !teamEventTypes && <p>No team events found</p>}\n      {!isLoadingTeamEvents &&\n        teamEventTypes &&\n        (Boolean(teamEventTypes?.length)) &&\n        teamEventTypes?.map((event) => {\n            return (\n                <div key={event.id}><h1>Team event: {event.slug}</h1></div>\n            );\n       })}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching and Displaying Team Data with useTeams Hook in React\nDESCRIPTION: This snippet shows how to use the useTeams hook from @calcom/atoms to retrieve and display a list of teams associated with the user. It handles loading states and maps through the teams array to render team names.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/platform/user-or-team-related-hooks.mdx#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useTeams } from \"@calcom/atoms\";\n\nexport default function UserTeams() {\n  const { data: teams, isLoading: isLoadingTeams } = useTeams();\n\n  return (\n    <>\n      {isLoadingTeams && <p>Loading...</p>}\n      {!isLoadingTeams && !teams && <p>No teams found</p>}\n      {!isLoadingTeams &&\n        teams &&\n        (Boolean(teams?.length)) &&\n        teams?.map((team) => {\n            return (\n                <div key={team.id}><h1>Team name: {team.name}</h1></div>\n            );\n       })}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Running Cal.com in Development Mode\nDESCRIPTION: Command to start the Cal.com application in development mode for local testing and development.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/developing/local-development.mdx#2025-04-20_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Complete Booking Cancellation Implementation with useBooking and useCancelBooking\nDESCRIPTION: Full implementation of a booking cancellation component that fetches booking data and provides cancellation functionality. It handles both single bookings and arrays of recurring bookings, passing the appropriate booking ID to the cancellation mutation.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/platform/guides/booking-redirects.mdx#2025-04-20_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useBooking, useCancelBooking } from \"@calcom/atoms\";\n\n...\nconst { isLoading, data: booking, refetch } = useBooking((router.query.bookingUid as string) ?? \"\");\nconst { mutate: cancelBooking } = useCancelBooking({\n    onSuccess: () => {\n      refetch();\n    },\n  });\n...\n   return !Array.isArray(booking) ? (\n    <button\n      className=\"underline\"\n      onClick={() => {\n        cancelBooking({\n          id: booking.id,\n          cancellationReason: \"User request\",\n        });\n      }}\n    >\n      Cancel\n    </button>\n  ) : (\n    <>\n      {booking.map((recurrence) => (\n        <button\n          key={recurrence.id}\n          className=\"underline\"\n          onClick={() => {\n            cancelBooking({\n              id: recurrence.id,\n              cancellationReason: \"User request\",\n            });\n          }}\n        >\n          Cancel\n        </button>\n      ))}\n    </>\n  );\n```\n\n----------------------------------------\n\nTITLE: Processing Task Queue with Cron in TypeScript\nDESCRIPTION: Implementation of a cron route handler that processes the queued tasks. This endpoint should be called periodically to execute pending tasks in the queue.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/features/tasker/README.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// /app/api/tasks/cron/route.ts\nimport tasker from \"@calcom/features/tasker\";\n\nexport async function GET() {\n  // authenticate the call...\n  await tasker.processQueue();\n  return Response.json({ success: true });\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Event Types Atom with Stripe Integration\nDESCRIPTION: This code snippet shows how to use the EventTypeSettings component to set up event types with Stripe integration. It allows for configuring payment settings and connecting a Stripe account.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/platform/atoms/payment-form.mdx#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EventTypeSettings } from \"@calcom/atoms\";\n\nexport default function EventType(id: number) {\n      return (\n          <>\n            <EventTypeSettings id={id} allowDelete={true} />\n          </>\n      );\n}\n```\n\n----------------------------------------\n\nTITLE: API Authentication Example\nDESCRIPTION: Example of how to make an authenticated API request using an API key.\nSOURCE: https://github.com/calcom/cal.com/blob/main/apps/api/v1/README.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nGET https://api.cal.com/v1/users?apiKey={INSERT_YOUR_CAL.COM_API_KEY_HERE}\n```\n\n----------------------------------------\n\nTITLE: Team Membership Configuration\nDESCRIPTION: JSON structure for creating team membership with admin privileges, required for managing team event types. This configuration is sent to the memberships endpoint.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/platform/atoms/event-type.mdx#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"userId\": 1006,\n  \"accepted\": true,\n  \"role\": \"OWNER\"\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching User Event Types with useEventTypes Hook in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the useEventTypes hook to fetch and display event types for a specific user. It handles loading states and renders event slugs.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/platform/event-types-hooks.mdx#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useEventTypes } from \"@calcom/atoms\";\n\nexport default function EventTypes({ username }: { username: string }) {\n  const { isLoading: isLoadingEvents, data: eventTypes, refetch } = useEventTypes(username);\n\n  return (\n    <>\n      {isLoadingEvents && <p>Loading...</p>}\n      {!isLoadingEvents && !eventTypes && <p>No event types found</p>}\n      {!isLoadingEvents &&\n        eventTypes &&\n        (Boolean(eventTypes?.length)) &&\n        eventTypes?.map((event) => {\n            return (\n                <div key={event.id}><h1>Event: {event.slug}</h1></div>\n            );\n       })}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current User Data with useMe Hook in React\nDESCRIPTION: This snippet demonstrates how to use the useMe hook from @calcom/atoms to fetch and display the current managed user's details. It handles loading states and conditionally renders user information when available.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/platform/user-or-team-related-hooks.mdx#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useMe } from \"@calcom/atoms\";\n\nexport default function UserDetails() {\n  const { data: userData, isLoading: isLoadingUser } = useMe();\n\n  return (\n    <>\n      {isLoadingUser && <p>Loading...</p>}\n      {!isLoadingUser && !userData && <p>No user found</p>}\n      {!isLoadingUser &&\n        !!userData &&\n        return (\n          <div>Username: {userData.username}</div>\n        )\n      }\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Team Event Type with Cal.com API\nDESCRIPTION: JSON payload for creating a team event type. Includes event properties such as duration, title, slug, description, scheduling type and host user IDs. This is sent to the create-an-event-type endpoint.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/platform/guides/teams-setup.mdx#2025-04-20_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"lengthInMinutes\": 60,\n  \"title\": \"Daily standup\",\n  \"slug\": \"platform-daily-standup\",\n  \"description\": \"Daily standup of the platform team!\",\n  \"schedulingType\": \"COLLECTIVE\",\n  \"hosts\": [{\"userId\": 1399}]\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Connected Calendars using useConnectedCalendars Hook in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the useConnectedCalendars hook to retrieve and display a user's connected calendars. It handles loading states and renders calendar information.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/platform/calendars-hooks.mdx#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useConnectedCalendars } from \"@calcom/atoms\";\n\nexport default function ConnectedCalendars() {\n  const { isLoading: isLoadingConnectedCalendars, data: userCalendars } = useConnectedCalendars({});\n\n  return (\n    <>\n      {isLoadingConnectedCalendars && <p>Loading...</p>}\n      {!isLoadingConnectedCalendars && !userCalendars && <p>No connected calendars</p>}\n      {!isLoadingConnectedCalendars &&\n        userCalendars &&\n        (Boolean(userCalendars?connectedCalendars?.length)) &&\n        userCalendars?connectedCalendars?.map((calendar) => {\n            return (\n                <div key={calendar.credentialId}><h1>Calendar type: {calendar.integration.name}</h1></div>\n            );\n       })}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: SAML Configuration Parameters\nDESCRIPTION: Essential SAML configuration parameters including assertion consumer service URL, entity ID, and security settings for identity provider setup.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/developing/guides/auth-and-provision/sso-setup.mdx#2025-04-20_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nAssertion consumer service URL: https://app.cal.com/api/auth/saml/callback\nEntity ID: https://saml.cal.com\nResponse: Signed\nAssertion Signature: Signed\nSignature Algorithm: RSA-SHA256\nAssertion Encryption: Unencrypted\nName ID Format: EmailAddress\nApplication username: email\n```\n\n----------------------------------------\n\nTITLE: Implementing a Reschedule Booking Component with Booker Atom\nDESCRIPTION: Code snippet showing how to extract rescheduleUid and eventTypeSlug from query parameters and pass them to the Booker atom for handling booking rescheduling functionality.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/platform/guides/booking-redirects.mdx#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst rescheduleUid = (router.query.rescheduleUid as string) ?? \"\";\nconst eventTypeSlugQueryParam = (router.query.eventTypeSlug as string) ?? \"\";\n\n<Booker\n    rescheduleUid={rescheduleUid}\n    eventSlug={eventTypeSlugQueryParam}\n    username={calUsername}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using Cal.com Custom Hooks for Team Data\nDESCRIPTION: Example of using Cal.com's custom hooks (useTeams and useTeamEventTypes) to fetch team information and event types in a React component. This approach simplifies working with team-related data in frontend applications.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/platform/guides/teams-setup.mdx#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useTeams, useTeamEventTypes } from \"@calcom/atoms\";\n\nexport default function TeamEvent(){\n    const { isLoading: isLoadingTeams, data: teams } = useTeams();\n    const { isLoading: isLoadingTeamEventTypes, data: teamEventTypes } = useTeamEventTypes(teams?.[0]?.id || 0);\n\n    return (\n        <><h1>Teams event</h1>\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Cancelling a Booking using useCancelBooking Hook in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the useCancelBooking hook to cancel a booking. It includes optional parameters like cancellationReason and allRemainingBookings.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/platform/bookings-hooks.mdx#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useCancelBooking } from \"@calcom/atoms\";\n\nexport default function CancelBooking() {\n    const { mutate: cancelBooking } = useCancelBooking({\n    onSuccess: () => {\n      console.log(\"Booking canceled successfully!\")\n    },\n  });\n\n  return (\n    <>\n      <button onClick={() => {\n          cancelBooking({\n            uid: \"6L6ADNpVHwLX25V8wXKsBr\",\n            cancellationReason: \"User request\",\n            allRemainingBookings: true,\n          })\n        }}>\n        Cancel booking\n      </button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic AvailabilitySettings Implementation\nDESCRIPTION: Basic implementation of the AvailabilitySettings component with success callback handlers for update and delete operations.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/platform/atoms/availability-settings.mdx#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { AvailabilitySettings } from \"@calcom/atoms\";\n\nexport default function Availability() {\n  return (\n    <>\n       <AvailabilitySettings\n          onUpdateSuccess={() => {\n            console.log(\"Updated schedule successfully\");\n          }}\n          onDeleteSuccess={() => {\n            console.log(\"Deleted schedule successfully\");\n          }}\n       />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Selected Calendar using useAddSelectedCalendar Hook in JavaScript\nDESCRIPTION: This snippet shows how to use the useAddSelectedCalendar hook to add a specific calendar for conflict checking. It includes error handling and success logging.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/platform/calendars-hooks.mdx#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useAddSelectedCalendar } from \"@calcom/atoms\";\n\nexport default function AddSelectedCalendar() {\n  const { mutate: addSelectedCalendar } = useAddSelectedCalendar({\n    onSuccess: () => {\n      console.log(\"Selected calendar added successfully!\");\n    },\n    onError: () => {\n      console.log(\"Error adding selected calendar\");\n    },\n  });\n\n  return (\n    <>\n      <button onClick={() => {\n          addSelectedCalendar({\n            credentialId: 123,\n            integration: \"google_calendar\",\n            externalId: \"613f23c27149a2796f2c155bfe79203a135@group.calendar.google.com\",\n          })\n        }}>\n        Add selected calendar\n      </button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: API Key Authentication in Request Header\nDESCRIPTION: This snippet demonstrates how to include an API key in the Authorization header for API requests to Cal.com. The API key must be prefixed with 'Bearer ' in the header.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/api-reference/v2/introduction.mdx#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n'Authorization': 'Bearer YOUR_API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Advanced Configuration of CalProvider\nDESCRIPTION: Example of using additional props in CalProvider for customizing behavior, language, and labels in Cal.com atoms.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/platform/quickstart.mdx#2025-04-20_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"@calcom/atoms/globals.min.css\";\nimport { CalProvider } from '@calcom/atoms';\n\nfunction MyApp({ Component, pageProps }) {\n  const [accessToken, setAccessToken] = useState(\"\");\n\n  useEffect(() => {\n    fetch(`/api/users/${pageProps.userId}`, {\n    }).then(async (res) => {\n      const data = await res.json();\n      setAccessToken(data.accessToken);\n    });\n  }, []);\n\n  return (\n    <CalProvider\n      accessToken={accessToken}\n      clientId={process.env.CAL_OAUTH_CLIENT_ID ?? \"\"}\n      options={{\n        apiUrl: process.env.CAL_API_URL ?? \"\",\n        refreshUrl: \"/api/refresh\"\n      }}\n      language=\"fr\"\n      labels={{\n        date_overrides: \"Omlette du Fromage!\"\n      }}\n      autoUpdateTimezone={false}\n      onTimezoneChange={() => {\n        console.log(\"Timezone changed successfully\")\n      }}\n      children={<>This is the child component</>}\n    >\n      <Component {...pageProps} />\n    </CalProvider>\n  );\n}\n\nexport default MyApp;\n```\n\n----------------------------------------\n\nTITLE: Task Handler Type Definition in TypeScript\nDESCRIPTION: Type definition for task handler functions in the Tasker system. Each task handler is a function that receives a string payload and returns a Promise that resolves to void.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/features/tasker/README.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype TaskHandler = (payload: string) => Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Adding License Key for Cal.com API Setup\nDESCRIPTION: The staging license key that needs to be added to the CALCOM_LICENSE_KEY variable in the root .env file for local API testing.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/developing/guides/api/how-to-setup-api-in-a-local-instance.mdx#2025-04-20_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n1a1f8138-0bfc-4f37-b4af-1e24fd145839\n```\n\n----------------------------------------\n\nTITLE: Fetching User Bookings as Organization Admin using useOrganizationUserBookings Hook in JavaScript\nDESCRIPTION: This snippet shows how to use the useOrganizationUserBookings hook to fetch bookings for a specific user as an organization admin. It includes filtering options like take, skip, and status.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/platform/bookings-hooks.mdx#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useOrganizationUserBookings } from \"@calcom/atoms\";\n\nexport default function Bookings() {\n  const someUserId = 1218;\n\n  const { isLoading: isLoadingUpcomingBookings, data: upcomingBookings } = useOrganizationUserBookings(someUserId, {\n    take: 50,\n    skip: 0,\n    status: [\"upcoming\"],\n  });\n\n  return (\n    <>\n      <h1>Upcoming bookings</h1>\n      {isLoadingUpcomingBookings && <p>Loading...</p>}\n      {!isLoadingUpcomingBookings && !upcomingBookings && <p>No upcoming bookings found</p>}\n      {!isLoading &&\n        upcomingBookings &&\n        (Boolean(upcomingBookings?.length)) &&\n        [...upcomingBookings].map((booking) => {\n            return (\n                <div key={booking.id}><h1>{booking.title}</h1></div>\n            );\n       })}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Cal.com Atom Appearance\nDESCRIPTION: Examples of customizing the appearance of Cal.com atoms using className props and more complex customization options.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/platform/quickstart.mdx#2025-04-20_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n<Connect.GoogleCalendar className=\"text-white hover:bg-orange-700\" />\n```\n\nLANGUAGE: javascript\nCODE:\n```\n<AvailabilitySettings\n  customClassNames={{\n    subtitlesClassName: \"text-red-500\",\n    ctaClassName: \"border p-4 rounded-md\",\n    editableHeadingClassName: \"underline font-semibold\",\n  }}\n  onUpdateSuccess={() => {\n    console.log(\"Updated successfully\");\n  }}\n  onUpdateError={() => {\n    console.log(\"update error\");\n  }}\n  onDeleteError={() => {\n    console.log(\"delete error\");\n  }}\n  onDeleteSuccess={() => {\n    console.log(\"Deleted successfully\");\n  }}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Fetching Specific Booking using useBooking Hook in JavaScript\nDESCRIPTION: This snippet shows how to use the useBooking hook to fetch details of a specific booking using its unique identifier (bookingUid).\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/platform/bookings-hooks.mdx#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useBooking } from \"@calcom/atoms\";\n\nexport default function Booking() {\n  const { isLoading: isLoadingBooking, data: booking } = useBooking(\"nChHoxEm1GXVPzi7TNAuWc\");\n\n  return (\n    <>\n      {isLoadingBooking && <p>Loading...</p>}\n      {!isLoadingBooking && !booking && <p>No booking found</p>}\n      {!isLoading &&\n        !!booking &&\n        return (\n          <div>Title: {booking.title}</div>\n        )\n        }\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Google Calendar Connect Button for Multiple Users in React\nDESCRIPTION: This code snippet shows how to implement the Google Calendar Connect component with multi-calendar support. By setting the isMultiCalendar prop to true, the application can handle multiple Google Calendar accounts for a more flexible user experience.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/platform/atoms/google-calendar-connect.mdx#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Connect } from \"@calcom/atoms\";\n\nexport default function Connect() {\n  return (\n    <>\n      <Connect.GoogleCalendar isMultiCalendar={true} />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Selected Calendar using useRemoveSelectedCalendar Hook in JavaScript\nDESCRIPTION: This snippet demonstrates the usage of useRemoveSelectedCalendar hook to remove a specific calendar from conflict checking. It includes error handling and success logging.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/platform/calendars-hooks.mdx#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useRemoveSelectedCalendar } from \"@calcom/atoms\";\n\nexport default function RemoveSelectedCalendar() {\n  const { mutate: removeSelectedCalendar } = useRemoveSelectedCalendar({\n    onSuccess: () => {\n      console.log(\"Selected calendar removed successfully!\");\n    },\n    onError: () => {\n      console.log(\"Error removing selected calendar\");\n    },\n  });\n\n  return (\n    <>\n      <button onClick={() => {\n          removeSelectedCalendar({\n            credentialId: 987,\n            integration: \"office365_calendar\",\n            externalId: \"AQMkADAwATM3AADfEpy7w2EpEOi_xwYa7A_cQcACgtJE7RnHEeyisVq2Eq2ENs2gAAAhFDAAAA\",\n          })\n        }}>\n        Remove selected calendar\n      </button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Email Templates with TypeScript in Cal.com\nDESCRIPTION: Demonstrates how to render an email template using the renderEmail function. The function takes a template name and props object containing language settings, email addresses, team information, and join link.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/emails/README.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { renderEmail } from \"@calcom/emails\";\n\nawait renderEmail(\"TeamInviteEmail\", {\n  language: t,\n  from: \"teampro@example.com\",\n  to: \"pro@example.com\",\n  teamName: \"Team Pro\",\n  joinLink: \"https://cal.com\",\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Event Type with useCreateEventType Hook in JavaScript\nDESCRIPTION: This snippet shows how to use the useCreateEventType hook to create a new event type. It demonstrates setting up the mutation function with success and error callbacks, and creating an event type with specified properties.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/platform/event-types-hooks.mdx#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useCreateEventType } from \"@calcom/atoms\";\n\nexport default function CreateEventType() {\n  const { mutate: createEventType, isPending } = useCreateEventType({\n    onSuccess: () => {\n      console.log(\"Event type created successfully!\");\n    },\n    onError: () => {\n      console.log(\"Error creating event type\");\n    },\n  });\n\n  return (\n    <>\n      <button \n        disabled={isPending}\n        onClick={() => {\n          createEventType({\n            lengthInMinutes: 15,\n            title: \"Coffee chat\",\n            slug: \"coffee-chat\",\n            description: \"Quick chat about coffee and life in general!\",\n          })\n        }}>\n        Create event type\n      </button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CalProvider for Cal.com Atoms\nDESCRIPTION: Setting up the CalProvider component to provide necessary information for Cal.com atoms, including client ID and API URL.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/platform/quickstart.mdx#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"@calcom/atoms/globals.min.css\";\nimport { CalProvider } from '@calcom/atoms';\n\nfunction MyApp({ Component, pageProps }) {\n  return (\n    <CalProvider\n      clientId={process.env.CAL_OAUTH_CLIENT_ID ?? \"\"}\n      options={{\n        apiUrl: process.env.CAL_API_URL ?? \"\",\n        refreshUrl: process.env.REFRESH_URL\n      }}\n    >\n      <Component {...pageProps} />\n    </CalProvider>\n  );\n}\n\nexport default MyApp;\n```\n\n----------------------------------------\n\nTITLE: Fetching Specific Event Type with useEventTypeById Hook in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the useEventTypeById hook to fetch and display a specific event type by its ID. It handles loading states and renders the event slug.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/platform/event-types-hooks.mdx#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useEventTypeById } from \"@calcom/atoms\";\n\nexport default function EventType({ id }: { id: number }) {\n  const { isLoading: isLoadingEventType, data: eventType } = useEventTypeById(id);\n\n  return (\n    <>\n      {isLoadingEventType && <p>Loading...</p>}\n      {!isLoadingEventType && !eventType && <p>No event type found</p>}\n      {!isLoadingEventType &&\n        !!eventType &&\n        return (\n          <div>Title: {eventType.slug}</div>\n        )\n        }\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Building and Starting Cal.com with Docker Compose\nDESCRIPTION: Command to build and launch Cal.com using Docker Compose. This creates and starts all necessary containers after configuration.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/self-hosting/docker.mdx#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up --build\n```\n\n----------------------------------------\n\nTITLE: Prefilling Read-Only Fields in Cal.com Booker Component\nDESCRIPTION: Example showing how to use the Booker component with defaultFormValues to populate fields that may be read-only based on their disableOnPrefill property configuration.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/platform/guides/booking-fields.mdx#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<Booker\n    defaultFormValues={{\n        \"coding-language\": \"cobol\",\n        \"help-with\": \"refactoring\"\n    }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Handling useBooking Response in React Components\nDESCRIPTION: Example code showing how to handle the response from the `useBooking` hook, which can return either a single booking object or an array of bookings when dealing with recurring bookings.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/platform/atoms/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { isLoading, data: booking, refetch } = useBooking((router.query.bookingUid as string) ?? \"\");\n\nif (!Array.isArray(booking)) {\n  ...\n  return abc\n} else {\n  ...\n  return xyz\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Booking Display Page with useBooking Hook in React\nDESCRIPTION: Code for creating a page that displays booking information after a successful booking. It uses the useBooking hook to fetch booking details by the bookingUid parameter from the URL, handling both single bookings and arrays of recurring bookings.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/platform/guides/booking-redirects.mdx#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useBooking } from \"@calcom/atoms\";\n\nexport default function Bookings(props: { calUsername: string; calEmail: string }) {\n    const router = useRouter();\n\n    const { isLoading, data: booking, refetch } = useBooking((router.query.bookingUid as string) ?? \"\");\n\n    return (\n        <>\n          {!Array.isArray(booking) ? (\n              <p>{booking.title}</p>\n          ) : (\n              booking.map((recurrence) => <p key={recurrence.id}>{recurrence.title}</p>)\n          )}\n        </>\n    )\n};\n```\n\n----------------------------------------\n\nTITLE: Using Background Colors with Cal.com Semantic Tokens in TSX\nDESCRIPTION: Examples of using background color semantic tokens in Cal.com components. These tokens automatically handle light and dark mode transitions by using CSS variables.\nSOURCE: https://github.com/calcom/cal.com/blob/main/apps/ui-playground/content/design/colors.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// Basic backgrounds\n<div className=\"bg-default\">Default background</div>\n<div className=\"bg-subtle\">Subtle background</div>\n<div className=\"bg-emphasis\">Emphasis background</div>\n\n// Primary backgrounds\n<div className=\"bg-primary-default\">Primary background</div>\n<div className=\"bg-primary-emphasis\">Primary emphasis</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Greeter Button Component in React\nDESCRIPTION: React component implementation for the Greeter button that shows a greeting toast message when clicked. The component checks for app installation and user authentication before rendering.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/developing/guides/appstore-and-integration/build-a-greeter-app.mdx#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n* GreeterButton.tsx\n* It creates a button that can be added anywhere. The button is visible only if the app is installed.\n*/\nimport useApp from \"@calcom/lib/hooks/useApp\";\nimport showToast from \"@calcom/lib/notification\";\nimport { Button } from \"@calcom/ui/button/Button\";\n\nimport useMeQuery from \"@lib/hooks/useMeQuery\";\n\nexport default function GreeterButton() {\n  const { data: user } = useMeQuery();\n  const { data: greeterApp } = useApp(\"greeter\");\n  // Make sure that greeterApp is installed. We shouldn't show the button when app is not installed\n  if (!user || !greeterApp) {\n    return null;\n  }\n  return (\n    <Button\n      onClick={() => {\n        showToast(\"Hello, \" + user.name, \"success\");\n      }}\n    >\n      Greet Me!\n    </Button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Mutating Data with TRPC in Cal.com\nDESCRIPTION: This snippet shows how to use the TRPC useMutation hook for creating, updating, or deleting data in the database. It includes success and error handling callbacks.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/developing/open-source-contribution/contributors-guide.mdx#2025-04-20_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst createWebhookMutation = trpc.viewer.webhook.create.useMutation({\n  async onSuccess() {\n    showToast(t(\"webhook_created_successfully\"), \"success\");\n    await utils.viewer.webhook.list.invalidate();\n    router.back();\n  },\n  onError(error) {\n    showToast(`${error.message}`, \"error\");\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Building and Running Cal.com API V2\nDESCRIPTION: Commands to build and start the Cal.com API V2 using Yarn workspaces, which is required for API functionality.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/self-hosting/installation.mdx#2025-04-20_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nyarn workspace @calcom/api-v2 build\nyarn workspace @calcom/api-v2 start\n```\n\n----------------------------------------\n\nTITLE: Deleting Calendar Credentials using useDeleteCalendarCredentials Hook in JavaScript\nDESCRIPTION: This snippet illustrates how to use the useDeleteCalendarCredentials hook to delete a user's calendar credentials. It includes error handling and success logging.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/platform/calendars-hooks.mdx#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useDeleteCalendarCredentials } from \"@calcom/atoms\";\n\nexport default function DeleteUserCalendar() {\n  const { mutate: deleteCalendarCredentials } = useDeleteCalendarCredentials({\n    onSuccess: () => {\n      console.log(\"Calendar credentials deleted successfully!\");\n    },\n    onError: () => {\n      console.log(\"Error deleting calendar credentials\");\n    },\n  });\n\n  return (\n    <>\n      <button onClick={async () => {\n          await deleteCalendarCredentials({\n            calendar: \"google\",\n            id: 123,\n          })\n        }}>\n        Delete calendar\n      </button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Prefilling Custom Booking Fields in Cal.com Booker Component\nDESCRIPTION: Example demonstrating how to pre-fill custom booking fields using their slugs as keys in the defaultFormValues prop of the Booker atom component.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/platform/guides/booking-fields.mdx#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<Booker\n    defaultFormValues={{\n        \"coding-language\": \"cobol\",\n        \"help-with\": \"refactoring\"\n    }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Okta Well-Known Configuration URL Pattern\nDESCRIPTION: The standard URL pattern for accessing Okta's OIDC configuration endpoint, needed when setting up OIDC integration with Cal.com.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/developing/guides/auth-and-provision/how-to-setup-oidc-with-okta.mdx#2025-04-20_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://{yourOktaDomain}/.well-known/openid-configuration\n```\n\n----------------------------------------\n\nTITLE: Configuring Booker Component with Week View Layout in JavaScript\nDESCRIPTION: This example shows how to set up the Booker component with a specific layout view (WEEK_VIEW). The week layout provides an Overlay Calendar feature that allows users to overlay multiple calendars on their primary calendar.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/platform/atoms/booker.mdx#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Booker } from \"@calcom/atoms\";\n\nexport default function Booker( props : BookerProps ) {\n  return (\n    <>\n      <Booker\n        view=\"WEEK_VIEW\"\n        eventSlug={props.eventTypeSlug}\n        username={props.calUsername}\n        onCreateBookingSuccess={() => {\n          console.log(\"booking created successfully\");\n         }}\n      />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Key-Value Pairs with MultiOptionInput in React\nDESCRIPTION: Shows how to use MultiOptionInput in key-value pair mode for handling environment variables or configuration settings. Includes configuration for key-value labels, placeholders, and delimiters using React Hook Form.\nSOURCE: https://github.com/calcom/cal.com/blob/main/apps/ui-playground/content/design/components/MultiInputField.mdx#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { MultiOptionInput } from \"@calcom/ui/components/form/inputs/MultiOptionInput\";\nimport { useForm, FormProvider } from \"react-hook-form\";\n\ntype FormValues = {\n  envVars: Array<{ label: string; value: string; id: string }>;\n};\n\nconst EnvVarsForm = () => {\n  const methods = useForm<FormValues>();\n  \n  return (\n    <FormProvider {...methods}>\n      <form>\n        <MultiOptionInput<FormValues>\n          fieldArrayName=\"envVars\"\n          keyValueMode={true}\n          keyLabel=\"Environment Variable\"\n          valueLabel=\"Value\"\n          optionPlaceholders={[\"NODE_ENV\", \"PORT\"]}\n          valuePlaceholders={[\"production\", \"3000\"]}\n          keyValueDelimiters={[\":\", \"=\"]} // Optional, defaults to [\":\", \"=\"]\n          defaultNumberOfOptions={2}\n        />\n      </form>\n    </FormProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Individual Event Type Creation with Cal.com Atoms\nDESCRIPTION: This snippet demonstrates how to implement the CreateEventType atom for creating individual event types in Cal.com. It includes an onSuccess callback function and custom styling options through the customClassNames prop.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/platform/atoms/event-type.mdx#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { CreateEventType } from \"@calcom/atoms\";\n\nexport default function EventType() {\n  return (\n    <>\n      <CreateEventType\n        onSuccess={(eventType) => {\n          console.log(\"EventType created successfully\", eventType);\n        }}\n        customClassNames={{\n          atomsWrapper: \"border p-4 rounded-md\",\n          buttons: { submit: \"bg-red-500\", cancel: \"bg-gray-300\" },\n        }}\n      />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Authorized Redirect URIs for Google OAuth Integration\nDESCRIPTION: These URIs are required for the Google OAuth flow to properly redirect after authentication. Replace '<Cal.com URL>' with the actual URL where your Cal.com application is hosted.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/self-hosting/apps/install-apps/google.mdx#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n<Cal.com URL>/api/integrations/googlecalendar/callback\n<Cal.com URL>/api/auth/callback/google\n```\n\n----------------------------------------\n\nTITLE: Implementing Cal Provider in a Next.js or React Application\nDESCRIPTION: Example of how to set up the Cal Provider component in a Next.js or React application root file. It demonstrates importing the necessary styles and component, configuring with environment variables, and wrapping the application with Cal Provider.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/platform/atoms/cal-provider.mdx#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"@calcom/atoms/globals.min.css\";\nimport { CalProvider } from '@calcom/atoms';\n\nfunction MyApp({ Component, pageProps }) {\n  const accessToken = \"managed-user-access-token\";\n\n  return (\n    <CalProvider\n      clientId={process.env.CAL_OAUTH_CLIENT_ID ?? \"\"}\n      options={{\n        apiUrl: process.env.CAL_API_URL ?? \"https://api.cal.com/v2\",\n        refreshUrl: process.env.REFRESH_URL\n      }}\n      accessToken={accessToken}\n    >\n      <Component {...pageProps} />\n    </CalProvider>\n  );\n}\n\nexport default MyApp;\n```\n\n----------------------------------------\n\nTITLE: Implementing Border Radius with Tailwind CSS in TSX\nDESCRIPTION: Examples of how to apply different border radius values using Tailwind CSS classes in React components. Shows implementations for no border radius, default radius, larger radius, and fully rounded elements.\nSOURCE: https://github.com/calcom/cal.com/blob/main/apps/ui-playground/content/design/border-radius.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// No border radius\n<div className=\"rounded-none\">Sharp corners</div>\n\n// Default radius\n<div className=\"rounded\">Default rounded corners</div>\n\n// Larger radius\n<div className=\"rounded-lg\">Larger rounded corners</div>\n\n// Fully rounded (useful for pills, badges)\n<div className=\"rounded-full\">Completely rounded</div>\n```\n\n----------------------------------------\n\nTITLE: Rendering Google Calendar Connect Button for Single User in React\nDESCRIPTION: This code snippet demonstrates how to import and render the Google Calendar Connect component for a single user. The component enables users to connect their Google Calendar to the Cal.com platform for event synchronization.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/platform/atoms/google-calendar-connect.mdx#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Connect } from \"@calcom/atoms\";\n\nexport default function Connect() {\n  return (\n    <>\n      <Connect.GoogleCalendar />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Components and Booker for Documentation\nDESCRIPTION: Imports the necessary components from Storybook and custom components for documentation. It includes Meta, Canvas, and ArgsTable from Storybook blocks, a custom Title component, the BookerWebWrapper component, and its stories.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/platform/atoms/booker/Booker.docs.mdx#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meta, Canvas, ArgsTable } from \"@storybook/blocks\";\nimport { Title } from \"@calcom/storybook/components\";\nimport { BookerWebWrapper as Booker } from \"./BookerWebWrapper\";\nimport * as BookerStories from \"./Booker.stories\";\n```\n\n----------------------------------------\n\nTITLE: Fetching User Access Token for CalProvider\nDESCRIPTION: Fetching the user's access token and providing it to the CalProvider for handling scheduling in Cal.com atoms.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/platform/quickstart.mdx#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"@calcom/atoms/globals.min.css\";\nimport { CalProvider } from '@calcom/atoms';\n\nfunction MyApp({ Component, pageProps }) {\n  const [accessToken, setAccessToken] = useState(\"\");\n\n  useEffect(() => {\n    fetch(`/api/users/${pageProps.userId}`, {\n    }).then(async (res) => {\n      const data = await res.json();\n      setAccessToken(data.accessToken);\n    });\n  }, []);\n\n  return (\n    <CalProvider\n      accessToken={accessToken}\n      clientId={process.env.CAL_OAUTH_CLIENT_ID ?? \"\"}\n      options={{\n        apiUrl: process.env.CAL_API_URL ?? \"\",\n        refreshUrl: \"/api/refresh\"\n      }}\n    >\n      <Component {...pageProps} />\n    </CalProvider>\n  );\n}\n\nexport default MyApp;\n```\n\n----------------------------------------\n\nTITLE: Implementing Standard Options with MultiOptionInput in React\nDESCRIPTION: Demonstrates how to implement the MultiOptionInput component for managing a simple list of options. Includes configuration for placeholders, paste delimiters, move buttons, and minimum options requirements using React Hook Form.\nSOURCE: https://github.com/calcom/cal.com/blob/main/apps/ui-playground/content/design/components/MultiInputField.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { MultiOptionInput } from \"@calcom/ui/components/form/inputs/MultiOptionInput\";\nimport { useForm, FormProvider } from \"react-hook-form\";\n\ntype FormValues = {\n  options: Array<{ label: string; id: string }>;\n};\n\nconst MyForm = () => {\n  const methods = useForm<FormValues>();\n  \n  return (\n    <FormProvider {...methods}>\n      <form>\n        <MultiOptionInput<FormValues>\n          fieldArrayName=\"options\"\n          optionPlaceholders={[\"Option 1\", \"Option 2\"]}\n          defaultNumberOfOptions={2}\n          pasteDelimiters={[\"\\n\", \",\"]} // Optional\n          showMoveButtons={true} // Optional\n          minOptions={1} // Optional\n          addOptionLabel=\"Add another option\" // Optional\n        />\n      </form>\n    </FormProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Outlook Calendar Connect Button in React\nDESCRIPTION: This snippet demonstrates how to render a basic Outlook calendar connect button using the Connect component from the @calcom/atoms package. It allows users to sync their Outlook calendar with the application.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/platform/atoms/outlook-calendar-connect.mdx#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Connect } from \"@calcom/atoms\";\n\nexport default function ConnectCalendar() {\n  return (\n    <>\n      <Connect.OutlookCalendar />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering CalendarSettings Component in React\nDESCRIPTION: This snippet demonstrates how to import and render the CalendarSettings component in a React application. This component allows users to configure how event types interact with calendars, including selecting destination calendars and calendars to check for conflicts.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/platform/atoms/calendar-settings.mdx#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { CalendarSettings } from \"@calcom/atoms\";\n\nexport default function CalendarSettingsComponent() {\n  return (\n    <>\n      <CalendarSettings />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Button onClick Event Example in React\nDESCRIPTION: This snippet demonstrates how to handle click events on buttons using the OnClickExample component.\nSOURCE: https://github.com/calcom/cal.com/blob/main/apps/ui-playground/content/design/components/button.mdx#2025-04-20_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<OnClickExample/>\n```\n\n----------------------------------------\n\nTITLE: Storing App Theme Preference in TypeScript\nDESCRIPTION: This snippet shows how the theme preference for non-booking pages (dashboard pages) is stored in localStorage. It uses a simple key 'app-theme' to store the user's theme choice.\nSOURCE: https://github.com/calcom/cal.com/blob/main/apps/web/lib/how-theming-works.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nStorageKey: app-theme\n```\n\n----------------------------------------\n\nTITLE: Implementing Icons with React in Cal.com\nDESCRIPTION: Examples showing how to use the Icon component from @calcom/ui to render icons with different sizes and colors. The component supports basic usage, custom sizing, and color customization through className props.\nSOURCE: https://github.com/calcom/cal.com/blob/main/apps/ui-playground/content/design/icons.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Icon } from \"@calcom/ui\";\n\n// Basic usage\n<Icon name=\"calendar\" className=\"h-4 w-4\" />\n\n// With different size\n<Icon name=\"user\" className=\"h-6 w-6\" />\n\n// With different color\n<Icon name=\"star\" className=\"h-4 w-4 text-yellow-500\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering Separated Button Group Sizes Example in React\nDESCRIPTION: This snippet demonstrates how to render separated button groups with different sizes using the ButtonGroupSizes component.\nSOURCE: https://github.com/calcom/cal.com/blob/main/apps/ui-playground/content/design/components/button.mdx#2025-04-20_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<ButtonGroupSizes/>\n```\n\n----------------------------------------\n\nTITLE: Using Booker Atom to Handle Payment Flow\nDESCRIPTION: This snippet demonstrates how to use the Booker component to handle the booking process and redirect to a payment page when payment is required. It uses the onCreateBookingSuccess callback to access the payment UID.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/platform/atoms/payment-form.mdx#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Booker } from \"@calcom/atoms\";\n\nexport default function Booker( props : BookerProps ) {\n  return (\n    <>\n      <Booker\n        eventSlug={props.eventTypeSlug}\n        username={props.calUsername}\n        onCreateBookingSuccess={(data) => {\n          if (data.data.paymentRequired) {\n            // assuming you have set up a separate page for payment with the same path\n            // if using nextjs, better to use next/router\n            window.location.href = `/payment/${data.data.paymentUid}`;\n          }           \n         }}\n      />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning the Cal.com Repository with Git\nDESCRIPTION: Command to clone the Cal.com repository from GitHub to get a local copy of the codebase for development.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/developing/local-development.mdx#2025-04-20_snippet_0\n\nLANGUAGE: git\nCODE:\n```\ngit clone https://github.com/calcom/cal.com.git\n```\n\n----------------------------------------\n\nTITLE: Cal.com BOOKING_CREATED Event Payload Structure in JSON\nDESCRIPTION: This JSON structure represents the payload sent when a booking is created in Cal.com. It contains event details (type, title, timing), organizer information, attendee data, location, and various metadata fields. Most sensitive or dynamic values are redacted for security.\nSOURCE: https://github.com/calcom/cal.com/blob/main/apps/web/playwright/integrations.e2e.ts-snapshots/webhookResponse--calcom-web.txt#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"triggerEvent\":\"BOOKING_CREATED\",\"createdAt\":\"[redacted/dynamic]\",\"payload\":{\"type\":\"30 min\",\"title\":\"30 min between PRO and Test Testson\",\"description\":\"\",\"additionalNotes\":\"\",\"customInputs\":{},\"startTime\":\"[redacted/dynamic]\",\"endTime\":\"[redacted/dynamic]\",\"organizer\":{\"name\":\"PRO\",\"email\":\"[redacted/dynamic]\",\"timeZone\":\"[redacted/dynamic]\",\"language\":\"[redacted/dynamic]\"},\"attendees\":[{\"email\":\"test@example.com\",\"name\":\"Test Testson\",\"timeZone\":\"[redacted/dynamic]\",\"language\":\"[redacted/dynamic]\"}],\"location\":\"[redacted/dynamic]\",\"destinationCalendar\":null,\"hideCalendarNotes\":false,\"requiresConfirmation\":\"[redacted/dynamic]\",\"eventTypeId\":\"[redacted/dynamic]\",\"seatsShowAttendees\":true,\"uid\":\"[redacted/dynamic]\",\"videoCallData\":\"[redacted/dynamic]\",\"appsStatus\":\"[redacted/dynamic]\",\"bookingId\":\"[redacted/dynamic]\",\"metadata\":{},\"additionalInformation\":\"[redacted/dynamic]\"}}\n```\n\n----------------------------------------\n\nTITLE: Rendering Button Variants Example in React\nDESCRIPTION: This snippet demonstrates how to render different button variants and colors using the VariantExample component.\nSOURCE: https://github.com/calcom/cal.com/blob/main/apps/ui-playground/content/design/components/button.mdx#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<VariantExample/>\n```\n\n----------------------------------------\n\nTITLE: Custom Webhook Payload Template in JSON\nDESCRIPTION: This snippet shows how to create a custom payload template for webhooks in Cal.com. It demonstrates the use of variables to include dynamic data in the webhook payload.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/developing/guides/automation/webhooks.mdx#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"content\": \"A new event has been scheduled\",\n  \"type\": \"{{type}}\",\n  \"name\": \"{{title}}\",\n  \"organizer\": \"{{organizer.name}}\",\n  \"booker\": \"{{attendees.0.name}}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing DestinationCalendarSettings in React\nDESCRIPTION: This code shows how to use the DestinationCalendarSettings component, which allows users to select which calendar they want to add events to when they're booked. It includes an example of passing a custom loading state and styling through classNames.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/platform/atoms/calendar-settings.mdx#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DestinationCalendarSettings } from \"@calcom/atoms\";\n\nexport default function DestinationCalendars() {\n  const loadingStatus = <>Loading...</>\n\n  return (\n    <>\n      <DestinationCalendarSettings classNames=\"mx-5\" statusLoader={loadingStatus} />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: API Response from Event Type Creation\nDESCRIPTION: JSON response returned after successfully creating a team event type. Contains comprehensive details about the event including booking fields, locations, scheduling settings, and host information.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/platform/guides/teams-setup.mdx#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"success\",\n  \"data\": {\n    \"id\": 1954202,\n    \"lengthInMinutes\": 60,\n    \"title\": \"Daily standup\",\n    \"slug\": \"daily-standup-for-platform\",\n    \"description\": \"This is a team event type for platform teams daily standup\",\n    \"locations\": [\n      {\n        \"type\": \"integration\",\n        \"integration\": \"cal-video\"\n      }\n    ],\n    \"bookingFields\": [\n      {\n        \"isDefault\": true,\n        \"type\": \"name\",\n        \"slug\": \"name\",\n        \"required\": true,\n        \"disableOnPrefill\": false\n      },\n      {\n        \"isDefault\": true,\n        \"type\": \"email\",\n        \"slug\": \"email\",\n        \"required\": true,\n        \"disableOnPrefill\": false\n      },\n      {\n        \"isDefault\": true,\n        \"type\": \"radioInput\",\n        \"slug\": \"location\",\n        \"required\": false,\n        \"hidden\": false\n      },\n      {\n        \"isDefault\": true,\n        \"type\": \"text\",\n        \"slug\": \"title\",\n        \"required\": true,\n        \"disableOnPrefill\": false,\n        \"hidden\": true\n      },\n      {\n        \"isDefault\": true,\n        \"type\": \"textarea\",\n        \"slug\": \"notes\",\n        \"required\": false,\n        \"disableOnPrefill\": false,\n        \"hidden\": false\n      },\n      {\n        \"isDefault\": true,\n        \"type\": \"multiemail\",\n        \"slug\": \"guests\",\n        \"required\": false,\n        \"disableOnPrefill\": false,\n        \"hidden\": false\n      },\n      {\n        \"isDefault\": true,\n        \"type\": \"textarea\",\n        \"slug\": \"rescheduleReason\",\n        \"required\": false,\n        \"disableOnPrefill\": false,\n        \"hidden\": false\n      }\n    ],\n    \"recurrence\": null,\n    \"disableGuests\": false,\n    \"slotInterval\": null,\n    \"minimumBookingNotice\": 120,\n    \"beforeEventBuffer\": 0,\n    \"afterEventBuffer\": 0,\n    \"metadata\": {},\n    \"price\": 0,\n    \"currency\": \"usd\",\n    \"lockTimeZoneToggleOnBookingPage\": false,\n    \"forwardParamsSuccessRedirect\": true,\n    \"successRedirectUrl\": null,\n    \"isInstantEvent\": false,\n    \"scheduleId\": null,\n    \"onlyShowFirstAvailableSlot\": false,\n    \"offsetStart\": 0,\n    \"bookingWindow\": {\n      \"disabled\": true\n    },\n    \"confirmationPolicy\": {\n      \"disabled\": true\n    },\n    \"requiresBookerEmailVerification\": false,\n    \"hideCalendarNotes\": false,\n    \"seats\": {\n      \"disabled\": true\n    },\n    \"useDestinationCalendarEmail\": false,\n    \"hideCalendarEventDetails\": false,\n    \"hosts\": [\n      {\n        \"userId\": 12860,\n        \"name\": \"Rick Astley\",\n        \"avatarUrl\": \"https://i.cal.com/api/avatar/b0b58752-68ad-4c0d-8024-4fa382a77752.png\"\n      }\n    ],\n    \"teamId\": 36447,\n    \"ownerId\": null,\n    \"parentEventTypeId\": null,\n    \"schedulingType\": \"COLLECTIVE\",\n    \"assignAllTeamMembers\": false,\n    \"team\": {\n      \"id\": 361247\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Storing Embed Theme Preference in TypeScript\nDESCRIPTION: This code demonstrates how embed themes are stored in localStorage. It uses a complex key that includes the embed namespace, appearance ID suffix, and an explicit theme suffix to handle multiple embeds with different themes on the same origin.\nSOURCE: https://github.com/calcom/cal.com/blob/main/apps/web/lib/how-theming-works.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nStorageKey: `embed-theme-${embedNamespace}${appearanceIdSuffix}${embedExplicitlySetThemeSuffix}`\n// (Same Namespace, Same Organizer but different themes would still work seamless and not cause theme flicker)\n`embedExplicitlySetThemeSuffix` -> `:${embedTheme}` // `embedTheme` is the theme explicitly configured for the embed)\n```\n\n----------------------------------------\n\nTITLE: Implementing Brand Button Shadows with State Variations\nDESCRIPTION: Code example demonstrating how to apply Cal.com's special shadow system to brand-colored buttons with different states (default, hover, active). This creates depth and visual feedback specific to brand buttons.\nSOURCE: https://github.com/calcom/cal.com/blob/main/apps/ui-playground/content/design/shadows.mdx#2025-04-20_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<button className=\"shadow-button-solid-brand-default hover:shadow-button-solid-brand-hover active:shadow-button-solid-brand-active\">\n  Brand Button\n</button>\n```\n\n----------------------------------------\n\nTITLE: Implementing SelectedCalendarsSettings in React\nDESCRIPTION: This snippet demonstrates how to use the SelectedCalendarsSettings component, which allows users to select which calendars they want to check for conflicts to prevent double bookings. It includes an example of applying custom styling through the classNames prop.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/platform/atoms/calendar-settings.mdx#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { SelectedCalendarsSettings } from \"@calcom/atoms\";\n\nexport default function SelectedCalendars( props : SelectedCalendarsProps ) {\n  return (\n    <>\n      <SelectedCalendarsSettings classNames=\"mx-5 mb-6\" />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Database Schema with Prisma for Cal.com\nDESCRIPTION: Command to deploy the database schema using Prisma. This sets up the database structure defined in the schema.prisma file located in packages/prisma directory.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/self-hosting/deployments/vercel.mdx#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn workspace @calcom/prisma db-deploy\n```\n\n----------------------------------------\n\nTITLE: Scheduling Tasks with Tasker in TypeScript\nDESCRIPTION: Example of how to schedule a non-critical task using the Tasker pattern instead of executing it directly. This converts a direct webhook call into a scheduled task for later processing.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/features/tasker/README.md#2025-04-20_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\nconst examplePayload = { example: \"payload\" };\n- await sendWebhook(examplePayload);\n+ await tasker.create(\"sendWebhook\", JSON.stringify(examplePayload));\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Cal.com API v2\nDESCRIPTION: Environment variables configuration needed for running the Cal.com API v2 locally. Includes database connection strings, API port settings, authentication secrets, and Redis URL.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/platform/examples/base/README.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nNODE_ENV=\"development\"\nAPI_PORT=5555\nDATABASE_READ_URL=\"postgresql://postgres:@localhost:5450/calendso\"\nDATABASE_WRITE_URL=\"postgresql://postgres:@localhost:5450/calendso\"\nAPI_URL=\"http://localhost\"\nNEXTAUTH_SECRET=\"copy from .env of root of repository cloned in step 1\"\nDATABASE_URL=\"postgresql://postgres:@localhost:5450/calendso\"\nJWT_SECRET=\"asjdijI1JIO12I3O89198jojioSAJDU\"\nREDIS_URL=\"redis://localhost:6379\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Outline Button Shadows with State Variations\nDESCRIPTION: Code example showing how to apply Cal.com's shadow system to outline buttons with different states (rested, hover, active). This ensures consistent interaction patterns for outline-styled buttons.\nSOURCE: https://github.com/calcom/cal.com/blob/main/apps/ui-playground/content/design/shadows.mdx#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<button className=\"shadow-outline-gray-rested hover:shadow-outline-gray-hover active:shadow-outline-gray-active\">\n  Outline Button\n</button>\n```\n\n----------------------------------------\n\nTITLE: Importing Greeter Button in Shell Component\nDESCRIPTION: Code snippet showing how to import and use the GreeterButton component in the main Shell.tsx file.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/developing/guides/appstore-and-integration/build-a-greeter-app.mdx#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n* Shell.tsx\n*/\n// ...\nimport GreeterButton from \"@calcom/app-store/greeter/components/GreeterButton\";\n// ...\n\n<GreeterButton />;\n```\n\n----------------------------------------\n\nTITLE: Rendering RawButton EmptyScreen Example in JSX\nDESCRIPTION: This snippet illustrates how to render an EmptyScreen example with a custom button layout.\nSOURCE: https://github.com/calcom/cal.com/blob/main/apps/ui-playground/content/design/components/emptyScreen.mdx#2025-04-20_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n<RawButtonExample/>\n```\n\n----------------------------------------\n\nTITLE: Creating a Team with Cal.com API v2\nDESCRIPTION: JSON payload for creating a team via the Cal.com API. The request includes basic team information such as name, slug, and bio, which are sent to the create-a-team endpoint.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/platform/guides/teams-setup.mdx#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"Platform team\",\n    \"slug\": \"platform-team\",\n    \"bio\": \"This is the platform team!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Credentials Payload to Cal.com Instance in JavaScript\nDESCRIPTION: This code snippet demonstrates the structure of the payload to be sent to the Cal.com instance when a user adds a third-party app. It includes the user ID, app slug, and encrypted app credentials.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/self-hosting/guides/appstore-and-integration/syncing-third-party-apps.mdx#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n// UserId of the Cal.com user\nuserId: number;\n\n// The app slug that is on Cal.com. \n// Can be found in the Cal.com database in the App table\nappSlug: string;\n\n// The credentials from the 3rd party app. (ex. Access token, refresh token).\n// Ideally it should contain the access token and expiry date\n// AES256 encrypted with CALCOM_APP_CREDENTIAL_ENCRYPTION_KEY\nkeys: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Input Component and Related Examples in JavaScript/JSX\nDESCRIPTION: This snippet shows the import statements for the Input component and various example components used in the documentation. It includes imports from both the Cal.com UI library and local example files.\nSOURCE: https://github.com/calcom/cal.com/blob/main/apps/ui-playground/content/design/components/input.mdx#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Input } from \"@calcom/ui/components/form\"\nimport { RenderComponentWithSnippet } from \"@/app/components/render\"\nimport { Row } from \"@/app/components/row\"\nimport { StatesExample } from \"./input.states\"\nimport { TypesExample } from \"./input.types\"\nimport { WidthsExample } from \"./input.widths\"\nimport { ValuesExample } from \"./input.values\"\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Completed Tasks in TypeScript\nDESCRIPTION: Implementation of a cleanup route handler that removes all successfully completed and failed tasks from the queue. This helps maintain the task database by removing tasks that no longer need processing.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/features/tasker/README.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// /app/api/tasks/cleanup/route.ts\nimport tasker from \"@calcom/features/tasker\";\n\nexport async function GET() {\n  // authenticate the call...\n  await tasker.cleanup();\n  return Response.json({ success: true });\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Toggle Group Examples in React/TSX\nDESCRIPTION: Import statement for various Toggle Group component examples including basic, icon-based, disabled, full-width, vertical, and icon-only variations.\nSOURCE: https://github.com/calcom/cal.com/blob/main/apps/ui-playground/content/design/components/toggleGroup.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { BasicExample, WithIconsExample, DisabledExample, FullWidthExample, VerticalExample, IconOnlyExample } from \"./toggleGroup.basic.tsx\"\n```\n\n----------------------------------------\n\nTITLE: Styling Booker Component with Custom CSS Classes in JavaScript\nDESCRIPTION: This snippet demonstrates how to apply custom styling to the Booker component using the customClassNames prop. It shows both root level styling for the entire container and nested styling for specific elements like the date picker.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/platform/atoms/booker.mdx#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Booker } from \"@calcom/atoms\";\n\nexport default function Booker( props : BookerProps ) {\n  return (\n    <>\n      <Booker\n        ...\n        customClassNames={{\n          bookerContainer: \"!bg-[#F5F2FE] [&_button:!rounded-full] border-subtle border\",\n          datePickerCustomClassNames: {\n            datePickerDatesActive: \"!bg-[#D7CEF5]\",\n          },\n        }}\n      />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Text Color Tokens in Cal.com Components\nDESCRIPTION: Examples of using text color semantic tokens in Cal.com components. The tokens provide different emphasis levels from high emphasis to muted text while maintaining theme consistency.\nSOURCE: https://github.com/calcom/cal.com/blob/main/apps/ui-playground/content/design/colors.mdx#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<p className=\"text-emphasis\">High emphasis text</p>\n<p className=\"text-default\">Default text</p>\n<p className=\"text-subtle\">Subtle text</p>\n<p className=\"text-muted\">Muted text</p>\n```\n\n----------------------------------------\n\nTITLE: Importing Button Component in React\nDESCRIPTION: This snippet shows how to import the Button component and related examples from various files.\nSOURCE: https://github.com/calcom/cal.com/blob/main/apps/ui-playground/content/design/components/button.mdx#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button } from \"@calcom/ui/components/button\"\nimport { RenderComponentWithSnippet } from \"@/app/components/render\"\nimport { Row } from \"@/app/components/row\"\nimport { OnClickExample } from \"./button.onClick\"\nimport { VariantExample } from \"./button.variant\"\nimport { IconsExample } from \"./button.icons\"\nimport { LoadingExample } from \"./button.loading\"\nimport { DisabledExample } from \"./button.disabled\"\nimport { ButtonGroupExample,ButtonGroupSizes,ButtonGroupSizesCombined} from \"./button.buttongroup\"\n```\n\n----------------------------------------\n\nTITLE: Parsing Request Body with Zod in Cal.com API\nDESCRIPTION: This snippet shows how to use Zod validation schema to parse and validate the request body in a Cal.com API endpoint. It ensures type safety and proper error handling.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/developing/open-source-contribution/contributors-guide.mdx#2025-04-20_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nasync function postHandler(req: NextApiRequest) {\n  const { userId, isAdmin, prisma, body } = req;\n  const parsedBody = schemaDestinationCalendarCreateBodyParams.parse(body);\n```\n\n----------------------------------------\n\nTITLE: Making a Request to Cal.com API Using curl\nDESCRIPTION: An example of how to make an authenticated request to the Cal.com API using curl. This request retrieves all event types associated with the account.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/api-reference/v1/introduction.mdx#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://api.cal.com/v1/event-types?apiKey=cal_test_xxxxxx\n```\n\n----------------------------------------\n\nTITLE: SAML Attribute Mapping Configuration\nDESCRIPTION: XML attribute mapping configuration for SAML SSO setup, defining the firstName and lastName attribute statements with their corresponding formats and values.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/developing/guides/auth-and-provision/sso-setup.mdx#2025-04-20_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\nfirstName  Basic  user.firstName\nlastName   Basic  user.lastName\n```\n\n----------------------------------------\n\nTITLE: Development Database Migration\nDESCRIPTION: Applies database migrations in development environment. Note that this may clear the development database in some cases.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/self-hosting/upgrading.mdx#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn workspace @calcom/prisma db-migrate\n```\n\n----------------------------------------\n\nTITLE: Cal.com WordPress Shortcode Implementation\nDESCRIPTION: WordPress shortcode syntax for embedding Cal.com booking calendars. Supports parameters for URL, display type (inline/popup), and custom button text.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/app-store/wordpress/DESCRIPTION.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n[cal url=/username/meetingid type=2 text=\"Schedule a call with me\"]\n```\n\n----------------------------------------\n\nTITLE: Generating Encryption Keys (Shell)\nDESCRIPTION: Commands to generate random encryption keys for NEXTAUTH_SECRET and CALENDSO_ENCRYPTION_KEY environment variables.\nSOURCE: https://github.com/calcom/cal.com/blob/main/README.md#2025-04-20_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nopenssl rand -base64 32\n```\n\n----------------------------------------\n\nTITLE: Defining Color Tokens in Cal.com CSS\nDESCRIPTION: This CSS snippet shows how color tokens are defined in Cal.com's globals.css file. It includes variable definitions for both light mode (root) and dark mode, with tokens organized by context such as backgrounds, components, and emphasis levels.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/self-hosting/guides/white-labeling/color-tokens.mdx#2025-04-20_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n**apps/web/styles/globals.css**\n\n  /* background */\n:root {\n  --cal-bg-emphasis: #e5e7eb;\n  --cal-bg: white;\n  --cal-bg-subtle: #f3f4f6;\n  --cal-bg-muted: #f9fafb;\n  --cal-bg-inverted: #111827;\n\n  /* background -> components*/\n  --cal-bg-info: #dee9fc;\n  --cal-bg-success: #e2fbe8;\n  --cal-bg-attention: #fceed8;\n  --cal-bg-error: #f9e3e2;\n  --cal-bg-dark-error: #752522;\n  ...\n}\n.dark {\n  /* background */\n\n  --cal-bg-emphasis: #2b2b2b;\n  --cal-bg: #101010;\n  --cal-bg-subtle: #2b2b2b;\n  --cal-bg-muted: #1c1c1c;\n  --cal-bg-inverted: #f3f4f6;\n\n  /* background -> components*/\n  --cal-bg-info: #dee9fc;\n  --cal-bg-success: #e2fbe8;\n  --cal-bg-attention: #fceed8;\n  --cal-bg-error: #f9e3e2;\n  --cal-bg-dark-error: #752522;\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Managed User Request Body Example\nDESCRIPTION: Example JSON payload for creating a managed user via the Cal.com API with basic user configuration.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/platform/quickstart.mdx#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"email\": \"bob@example.com\",\n    \"timeZone\": \"America/New_York\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Global CSS for Cal.com Atoms\nDESCRIPTION: Importing global CSS styles used by Cal.com atoms in a Next.js or React application.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/platform/quickstart.mdx#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"@calcom/atoms/globals.min.css\";\n\nfunction MyApp({ Component, pageProps }) {\n  return (\n    <Component {...pageProps} />\n  );\n}\n\nexport default MyApp;\n```\n\n----------------------------------------\n\nTITLE: API Response from Team Creation\nDESCRIPTION: JSON response returned after successfully creating a team. Contains the team details including ID, parent ID, name, slug, and other configuration settings.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/platform/guides/teams-setup.mdx#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"success\",\n  \"data\": {\n    \"hideBookATeamMember\": false,\n    \"timeZone\": \"Europe/London\",\n    \"weekStart\": \"Sunday\",\n    \"id\": 35137,\n    \"parentId\": 12575,\n    \"name\": \"Platform team\",\n    \"slug\": \"platform-team\",\n    \"logoUrl\": null,\n    \"calVideoLogo\": null,\n    \"appLogo\": null,\n    \"appIconLogo\": null,\n    \"bio\": \"This is the platform team!\",\n    \"hideBranding\": false,\n    \"isOrganization\": false,\n    \"isPrivate\": false,\n    \"metadata\": null,\n    \"theme\": null,\n    \"brandColor\": null,\n    \"darkBrandColor\": null,\n    \"bannerUrl\": null,\n    \"timeFormat\": null\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: AvailabilitySettings with Date Overrides\nDESCRIPTION: Implementation of AvailabilitySettings component with date overrides enabled for handling special availability cases.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/platform/atoms/availability-settings.mdx#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { AvailabilitySettings } from \"@calcom/atoms\";\n\nexport default function Availability() {\n  return (\n    <>\n       <AvailabilitySettings\n          enableOverrides={true}\n          onUpdateSuccess={() => {\n            console.log(\"Updated schedule successfully\");\n          }}\n          onDeleteSuccess={() => {\n            console.log(\"Deleted schedule successfully\");\n          }}\n       />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Receiving Refreshed Access Token in JSON Response\nDESCRIPTION: This snippet demonstrates the JSON response structure when refreshing an access token. It includes only the new access_token field.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/developing/guides/appstore-and-integration/oauth.mdx#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    access_token: \"exampleAccessToken\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Platform Enums in Cal.com Projects\nDESCRIPTION: Instructions for importing the platform enums module. The import path differs based on the location of the importing code: use '@calcom/platform-enums' for api-v2 and '@calcom/platform-enums/monorepo' for other packages.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/platform/enums/README.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nfrom api-v2 please import from @calcom/platform-enums\n\nfrom any other package please import from @calcom/platform-enums/monorepo\n```\n\n----------------------------------------\n\nTITLE: Using Semantic Color Tokens in Cal.com Components\nDESCRIPTION: Examples of implementing semantic color tokens for different states (info, success, error) in Cal.com components. These tokens are used to convey meaning and maintain consistency across the application.\nSOURCE: https://github.com/calcom/cal.com/blob/main/apps/ui-playground/content/design/colors.mdx#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// Info states\n<div className=\"bg-semantic-info-subtle\">Info subtle</div>\n<div className=\"bg-semantic-info-emphasis\">Info emphasis</div>\n\n// Success states\n<div className=\"bg-semantic-success-subtle\">Success subtle</div>\n<div className=\"bg-semantic-success-emphasis\">Success emphasis</div>\n\n// Error states\n<div className=\"bg-semantic-error-subtle\">Error subtle</div>\n<div className=\"bg-semantic-error-emphasis\">Error emphasis</div>\n```\n\n----------------------------------------\n\nTITLE: Defining Display Typography Styles in JavaScript/JSX\nDESCRIPTION: Exports display typography styles configuration for Cal.com's design system. The configuration includes five display text styles with their corresponding Tailwind classes and detailed specifications for font family, size, line height, and weight.\nSOURCE: https://github.com/calcom/cal.com/blob/main/apps/ui-playground/content/design/typography.mdx#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const displayStyles = {\n  title: 'Display',\n  description: 'Used for large headings and prominent text',\n  styles: [\n    {\n      name: 'Display 3XL',\n      className: 'text-3xl font-medium font-display',\n      specs: {\n        fontFamily: 'InterDisplay',\n        fontSize: '30',\n        lineHeight: '36px',\n        weight: 'medium',\n      },\n    },\n    {\n      name: 'Display 2XL',\n      className: 'text-2xl font-medium font-display',\n      specs: {\n        fontFamily: 'InterDisplay',\n        fontSize: '24',\n        lineHeight: '32px',\n        weight: 'medium',\n      },\n    },\n    {\n      name: 'Display XL',\n      className: 'text-xl font-medium font-display',\n      specs: {\n        fontFamily: 'InterDisplay',\n        fontSize: '20',\n        lineHeight: '28px',\n        weight: 'medium',\n      },\n    },\n    {\n      name: 'Display LG',\n      className: 'text-lg font-medium font-display',\n      specs: {\n        fontFamily: 'InterDisplay',\n        fontSize: '18',\n        lineHeight: '20px',\n        weight: 'medium',\n      },\n    },\n    {\n      name: 'Display Base',\n      className: 'text-base font-medium font-display',\n      specs: {\n        fontFamily: 'InterDisplay',\n        fontSize: '16',\n        lineHeight: '18px',\n        weight: 'medium',\n      },\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Cal.com Atoms Package\nDESCRIPTION: Commands for installing the @calcom/atoms package using different package managers.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/platform/quickstart.mdx#2025-04-20_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nnpm install @calcom/atoms\n```\n\nLANGUAGE: jsx\nCODE:\n```\nyarn add @calcom/atoms\n```\n\nLANGUAGE: jsx\nCODE:\n```\npnpm add @calcom/atoms\n```\n\n----------------------------------------\n\nTITLE: Managed User Creation Response Example\nDESCRIPTION: Example response from the Cal.com API after successfully creating a managed user, containing user details and authentication tokens.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/platform/quickstart.mdx#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"status\": \"success\",\n  \"data\": {\n    \"user\": {\n      \"id\": 179,\n      \"email\": \"bob@example.com\",\n      \"username\": \"bob\"\n    },\n    \"accessToken\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiYWNjZXNzX3Rva2VuIiwiY2xpZW50SWQiOiJjbHUxZmNtYjEwMDAxa2hyN3g3ZHJleWw0Iiwib3duZXJJZCI6MTc5LCJpYXQiOjE3MTE0NDI3OTR9.EsC3JRPHQnigcp_HSijKCIp8EgcWs2kj4AFxYXYc9sM\",\n    \"refreshToken\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoicmVmcmVzaF90b2tlbiIsImNsaWVudElkIjoiY2x1MWZjbWIxMDAwMWtocjd4N2RyZXlsNCIsIm93bmVySWQiOjE3OSwiaWF0IjoxNzExNDQyNzk0fQ.GjklEucgey8yWMoGz7ABntbxYdiqqQFPooQjqGd3B5I\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dropdown Shadows in Cal.com UI\nDESCRIPTION: Code example showing how to apply dropdown shadows to elements using Cal.com's shadow system. This creates the appropriate depth and elevation for dropdown menus and popovers.\nSOURCE: https://github.com/calcom/cal.com/blob/main/apps/ui-playground/content/design/shadows.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<div className=\"shadow-dropdown\">\n  Dropdown Content\n</div>\n```\n\n----------------------------------------\n\nTITLE: Querying Data with TRPC in Cal.com\nDESCRIPTION: This snippet demonstrates how to use the TRPC useQuery hook to fetch data from the database in Cal.com. It includes options for suspense and conditional enabling based on authentication status.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/developing/open-source-contribution/contributors-guide.mdx#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { data: webhooks } = trpc.viewer.webhook.list.useQuery(undefined, {\n  suspense: true,\n  enabled: session.status === \"authenticated\",\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js Redirects\nDESCRIPTION: JavaScript code snippet showing how to configure redirects in Next.js config file.\nSOURCE: https://github.com/calcom/cal.com/blob/main/apps/api/v1/README.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n  \"@calcom/app-store\",\n  \"@calcom/prisma\",\n  \"@calcom/lib\",\n  \"@calcom/features\",\n```\n\n----------------------------------------\n\nTITLE: Refreshing Credentials Request Structure in JavaScript\nDESCRIPTION: This code snippet shows the structure of the request payload that Cal.com sends to refresh app credentials. It includes the Cal.com user ID and the app slug.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/self-hosting/guides/appstore-and-integration/syncing-third-party-apps.mdx#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\ncalcomUserId: string;\n// App slug on Cal.com\nappSlug: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Opening Prisma Studio to Manage Database Content\nDESCRIPTION: Command to launch Prisma Studio, a visual interface for viewing and modifying the database content. Useful for managing user records and other data during setup.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/self-hosting/deployments/vercel.mdx#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn db-studio\n```\n\n----------------------------------------\n\nTITLE: Adding Sendgrid API Key to Environment Variables\nDESCRIPTION: This snippet shows how to add the Sendgrid API key to the .env file. The API key is used for authentication when sending emails through Sendgrid.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/self-hosting/apps/install-apps/sendgrid.mdx#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nSENDGRID_API_KEY\n```\n\n----------------------------------------\n\nTITLE: Defining Zod Validation Schema for Cal.com API\nDESCRIPTION: This snippet demonstrates how to define Zod validation schemas for the Cal.com API. It shows the creation of base and specific schemas for destination calendar parameters.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/developing/open-source-contribution/contributors-guide.mdx#2025-04-20_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const schemaDestinationCalendarBaseBodyParams = DestinationCalendar.pick({\n  integration: true,\n  externalId: true,\n  eventTypeId: true,\n  bookingId: true,\n  userId: true,\n}).partial();\n\nconst schemaDestinationCalendarCreateParams = z\n  .object({\n    integration: z.string(),\n    externalId: z.string(),\n    eventTypeId: z.number().optional(),\n    bookingId: z.number().optional(),\n    userId: z.number().optional(),\n  })\n  .strict();\n\n\nexport const schemaDestinationCalendarCreateBodyParams = schemaDestinationCalendarBaseBodyParams.merge(\n  schemaDestinationCalendarCreateParams\n);\n```\n\n----------------------------------------\n\nTITLE: Running Icon Build Command in Cal.com\nDESCRIPTION: Command to generate the SVG icons in the icons directory of the Cal.com project. This is the required process for updating or adding icons to the application.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/ui/components/icon/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn run build:icons\n```\n\n----------------------------------------\n\nTITLE: Defining Paragraph Typography Styles in JavaScript/JSX\nDESCRIPTION: Exports paragraph typography styles configuration for longer text content with different line heights. The configuration includes three paragraph styles with their corresponding Tailwind classes and detailed specifications for font family, size, line height, and weight.\nSOURCE: https://github.com/calcom/cal.com/blob/main/apps/ui-playground/content/design/typography.mdx#2025-04-20_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const paragraphStyles = {\n  title: 'Paragraph',\n  description: 'Used for longer text content with different line heights',\n  styles: [\n    {\n      name: 'Large Medium Normal',\n      className: 'text-lg font-medium leading-normal',\n      specs: {\n        fontFamily: 'Inter',\n        fontSize: '18',\n        lineHeight: '150%',\n        weight: 'medium',\n      },\n    },\n    {\n      name: 'Base Normal',\n      className: 'text-base font-normal leading-normal',\n      specs: {\n        fontFamily: 'Inter',\n        fontSize: '16',\n        lineHeight: '150%',\n        weight: 'regular',\n      },\n    },\n    {\n      name: 'Small Medium Tight',\n      className: 'text-sm font-medium leading-tight',\n      specs: {\n        fontFamily: 'Inter',\n        fontSize: '14',\n        lineHeight: '125%',\n        weight: 'medium',\n      },\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Installing HTTP Client Libraries for Cal.com API (Node.js and Python)\nDESCRIPTION: Instructions for installing HTTP client libraries to interact with the Cal.com API. For Node.js, it shows how to install axios using npm or yarn. For Python, it demonstrates installation of the requests library using pip.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/api-reference/v1/introduction.mdx#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Install via NPM\nnpm install --save axios\n\n# Install via Yarn\nyarn add axios\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Install via pip\npip install --upgrade requests\n```\n\n----------------------------------------\n\nTITLE: Rendering Combined Button Group Sizes Example in React\nDESCRIPTION: This snippet shows how to render combined button groups with different sizes using the ButtonGroupSizesCombined component.\nSOURCE: https://github.com/calcom/cal.com/blob/main/apps/ui-playground/content/design/components/button.mdx#2025-04-20_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<ButtonGroupSizesCombined/>\n```\n\n----------------------------------------\n\nTITLE: Rendering CustomIcon EmptyScreen Example in JSX\nDESCRIPTION: This snippet shows how to render an EmptyScreen example with a custom icon.\nSOURCE: https://github.com/calcom/cal.com/blob/main/apps/ui-playground/content/design/components/emptyScreen.mdx#2025-04-20_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<CustomIconExample/>\n```\n\n----------------------------------------\n\nTITLE: Running E2E Tests\nDESCRIPTION: Command to run end-to-end tests for Cal.com.\nSOURCE: https://github.com/calcom/cal.com/blob/main/README.md#2025-04-20_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\nyarn test-e2e\n```\n\n----------------------------------------\n\nTITLE: Configuring Zoom OAuth Redirect URL\nDESCRIPTION: This snippet demonstrates the format for the OAuth Redirect URL that needs to be set in the Zoom app settings. The URL should be adjusted to match the Cal.com application URL.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/self-hosting/apps/install-apps/zoom.mdx#2025-04-20_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n<Cal.com URL>/api/integrations/zoomvideo/callback\n```\n\n----------------------------------------\n\nTITLE: Example Response Structure from useBooking Hook in Cal.com\nDESCRIPTION: Sample JSON response from the renamed `useBooking` hook showing the structure of a booking object, including details about hosts, attendees, event type, and booking field responses.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/platform/atoms/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 73,\n  \"uid\": \"wPnPGRQCnEi8nij7eaQ5E1\",\n  \"title\": \"with confirmation and limit between Jane Doe and dojgqhylze-clxyyy21o0003sbk7yw5z6tzg-example\",\n  \"description\": \"\",\n  \"hosts\": [\n    {\n      \"id\": 95,\n      \"name\": \"Jane Doe\",\n      \"timeZone\": \"Europe/Madrid\"\n    }\n  ],\n  \"status\": \"accepted\",\n  \"start\": \"2024-10-07T08:00:00.000Z\",\n  \"end\": \"2024-10-07T09:00:00.000Z\",\n  \"duration\": 60,\n  \"eventTypeId\": 1207,\n  \"eventType\": {\n    \"id\": 1207,\n    \"slug\": \"with-confirmation-and-limit\"\n  },\n  \"attendees\": [\n    {\n      \"name\": \"dojgqhylze-clxyyy21o0003sbk7yw5z6tzg-example\",\n      \"timeZone\": \"Europe/Madrid\",\n      \"language\": \"en\",\n      \"absent\": false\n    }\n  ],\n  \"guests\": [],\n  \"meetingUrl\": \"integrations:daily\",\n  \"location\": \"integrations:daily\",\n  \"absentHost\": false,\n  \"bookingFieldsResponses\": {\n    \"email\": \"dojgqhylze@example.com\",\n    \"name\": \"dojgqhylze-clxyyy21o0003sbk7yw5z6tzg-example\",\n    \"guests\": [],\n    \"phone\": \"+37128224288\",\n    \"location\": {\n      \"value\": \"integrations:daily\",\n      \"optionValue\": \"\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting TypeScript Configuration Inheritance\nDESCRIPTION: Explains the purpose of base tsconfig.json files that serve as shared configuration templates for other TypeScript configurations in the project. These base files provide common settings that can be extended by other tsconfig.json files.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/tsconfig/README.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# `tsconfig`\\n\\nThese are base shared `tsconfig.json`s from which all other `tsconfig.json`'s inherit from.\n```\n\n----------------------------------------\n\nTITLE: Rendering Navigation Items Example Component\nDESCRIPTION: JSX code that renders the ItemsExample component which demonstrates navigation items with different states and variants.\nSOURCE: https://github.com/calcom/cal.com/blob/main/apps/ui-playground/content/design/components/navigation.mdx#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ItemsExample/>\n```\n\n----------------------------------------\n\nTITLE: Adding HubSpot Credentials to Environment Variables\nDESCRIPTION: Environment variables needed for HubSpot integration with Cal.com. These credentials must be obtained from the HubSpot Developer portal and added to your .env file.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/self-hosting/apps/install-apps/hubspot.mdx#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nHUBSPOT_CLIENT_ID\nHUBSPOT_CLIENT_SECRET\n```\n\n----------------------------------------\n\nTITLE: Importing Switch Component - TypeScript\nDESCRIPTION: Shows how to import the Switch component from the Cal.com UI library. The Switch component is used for creating toggle controls in user interfaces.\nSOURCE: https://github.com/calcom/cal.com/blob/main/apps/ui-playground/content/design/components/switch.mdx#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Switch } from \"@calcom/ui\";\n```\n\n----------------------------------------\n\nTITLE: Updating Cal.com Submodule\nDESCRIPTION: Command to update the Cal.com submodule within the Docker project. This ensures you have the latest version of Cal.com code.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/self-hosting/docker.mdx#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit submodule update --remote --init\n```\n\n----------------------------------------\n\nTITLE: Running Cal.com Docker Container on Port 80\nDESCRIPTION: Command to start a Cal.com Docker container in detached mode, mapping host port 80 to container port 80. This makes the Cal.com application accessible via the host's public IP address.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/self-hosting/deployments/gcp.mdx#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -p 80:80 cal/cal.com\n```\n\n----------------------------------------\n\nTITLE: Storing Booking Theme Preference in TypeScript\nDESCRIPTION: This snippet shows how the booking theme preference is stored in localStorage. It uses a dynamic key that includes an appearance ID suffix, which is typically based on the organizer's username.\nSOURCE: https://github.com/calcom/cal.com/blob/main/apps/web/lib/how-theming-works.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nStorageKey: `booking-theme${appearanceIdSuffix}`\nappearanceIdSuffix -> `:${themeBasis}` // themeBasis is usually the username of the organizer.\n```\n\n----------------------------------------\n\nTITLE: Seeding Local Database\nDESCRIPTION: Commands to seed the local database with dummy users using Prisma.\nSOURCE: https://github.com/calcom/cal.com/blob/main/README.md#2025-04-20_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\ncd packages/prisma\nyarn db-seed\n```\n\n----------------------------------------\n\nTITLE: Adding a New CSS Stylesheet to Cal.com\nDESCRIPTION: Example showing how to import a new custom CSS stylesheet in the application. After creating your stylesheet in the styles directory, you need to import it in pages/_app.tsx.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/self-hosting/guides/white-labeling/custom-css.mdx#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"../styles/your-new-stylesheet.css\";\n```\n\n----------------------------------------\n\nTITLE: Setting Zoom Credentials in Environment File\nDESCRIPTION: This snippet shows the environment variables that need to be set in the .env file for the Zoom integration. It includes the Client ID and Client Secret obtained from the Zoom app.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/self-hosting/apps/install-apps/zoom.mdx#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nZOOM_CLIENT_ID\nZOOM_CLIENT_SECRET\n```\n\n----------------------------------------\n\nTITLE: Example Okta Well-Known Configuration URL\nDESCRIPTION: A concrete example of the Well-Known URL for an Okta domain, required for configuring OIDC integration with Cal.com.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/developing/guides/auth-and-provision/how-to-setup-oidc-with-okta.mdx#2025-04-20_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://dev-123456.okta.com/.well-known/openid-configuration\n```\n\n----------------------------------------\n\nTITLE: Rendering Border Variations EmptyScreen Example in JSX\nDESCRIPTION: This snippet demonstrates how to render EmptyScreen examples with different border styles.\nSOURCE: https://github.com/calcom/cal.com/blob/main/apps/ui-playground/content/design/components/emptyScreen.mdx#2025-04-20_snippet_4\n\nLANGUAGE: JSX\nCODE:\n```\n<BorderExample/>\n```\n\n----------------------------------------\n\nTITLE: Adding Stripe Redirect URL for OAuth\nDESCRIPTION: The URL that Stripe will redirect to after a user authorizes the OAuth connection. Must be configured in the Stripe Connect Settings.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/self-hosting/apps/install-apps/stripe.mdx#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n<Cal.com URL>/api/integrations/stripepayment/callback\n```\n\n----------------------------------------\n\nTITLE: Importing Checkbox Component in React\nDESCRIPTION: Shows how to import the Checkbox component from the Cal.com UI library along with other components needed for the documentation page.\nSOURCE: https://github.com/calcom/cal.com/blob/main/apps/ui-playground/content/design/components/checkbox.mdx#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Checkbox } from \"@calcom/ui/components/form\"\nimport { RenderComponentWithSnippet } from \"@/app/components/render\"\nimport { Row } from \"@/app/components/row\"\nimport { BasicExample } from \"./checkbox.basic\"\nimport { DescriptionExample } from \"./checkbox.description\"\nimport { LabelPositionExample } from \"./checkbox.labelPosition\"\nimport { InfoIconExample } from \"./checkbox.infoIcon\"\n```\n\n----------------------------------------\n\nTITLE: Updating Cal.com Git Submodule\nDESCRIPTION: Command to update the Cal.com submodule to the latest version. This is useful for keeping the application up to date after initial setup.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/self-hosting/docker.mdx#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit submodule update --remote --init\n```\n\n----------------------------------------\n\nTITLE: Setting TWILIO_PHONE_NUMBER Environment Variable\nDESCRIPTION: Adds the Twilio phone number to the environment configuration file for Cal.com integration. This number will be used for sending messages.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/self-hosting/apps/install-apps/twilio.mdx#2025-04-20_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nTWILIO_PHONE_NUMBER\n```\n\n----------------------------------------\n\nTITLE: Setting up Stripe Payment Integration for Cal.com Enterprise\nDESCRIPTION: Step-by-step instructions for configuring Stripe payment integration with Cal.com Enterprise Edition. Covers API key setup, OAuth configuration, redirect URLs, webhook configuration, and required environment variables.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/features/ee/README.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Setting up Stripe\n\n1. Create a stripe account or use an existing one. For testing, you should use all stripe dashboard functions with the Test-Mode toggle in the top right activated.\n2. Open [Stripe ApiKeys](https://dashboard.stripe.com/apikeys) save the token starting with `pk_...` to `NEXT_PUBLIC_STRIPE_PUBLIC_KEY` and `sk_...` to `STRIPE_PRIVATE_KEY` in the .env file.\n3. Open [Stripe Connect Settings](https://dashboard.stripe.com/settings/connect) and activate OAuth for Standard Accounts\n4. Add `<CALENDSO URL>/api/integrations/stripepayment/callback` as redirect URL.\n5. Copy your client*id (`ca*...`) to `STRIPE_CLIENT_ID` in the .env file.\n6. Open [Stripe Webhooks](https://dashboard.stripe.com/webhooks) and add `<CALENDSO URL>/api/integrations/stripepayment/webhook` as webhook for connected applications.\n7. Select all `payment_intent` events for the webhook.\n8. Copy the webhook secret (`whsec_...`) to `STRIPE_WEBHOOK_SECRET` in the .env file.\n```\n\n----------------------------------------\n\nTITLE: Running Database Migrations in Production\nDESCRIPTION: Command to run database migrations using Prisma in a production environment.\nSOURCE: https://github.com/calcom/cal.com/blob/main/README.md#2025-04-20_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nyarn workspace @calcom/prisma db-deploy\n```\n\n----------------------------------------\n\nTITLE: Importing Textarea Example Components in React\nDESCRIPTION: Import statements for the Textarea component examples, including basic usage, states, and sizes examples along with rendering utilities.\nSOURCE: https://github.com/calcom/cal.com/blob/main/apps/ui-playground/content/design/components/textarea.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RenderComponentWithSnippet } from \"@/app/components/render\"\nimport { Row } from \"@/app/components/row\"\nimport { BasicExample } from \"./textarea.basic.tsx\"\nimport { StatesExample } from \"./textarea.states.tsx\"\nimport { SizesExample } from \"./textarea.sizes.tsx\"\n```\n\n----------------------------------------\n\nTITLE: Setting HubSpot OAuth Redirect URL\nDESCRIPTION: The redirect URL to configure in HubSpot for OAuth callback. Replace the placeholder with your actual Cal.com instance URL.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/self-hosting/apps/install-apps/hubspot.mdx#2025-04-20_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n<Cal.com URL>/api/integrations/hubspot/callback\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server\nDESCRIPTION: Launches the application in development mode\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/self-hosting/upgrading.mdx#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Form Documentation\nDESCRIPTION: Imports various components needed for the form documentation page, including rendering components and example implementations for different form field types.\nSOURCE: https://github.com/calcom/cal.com/blob/main/apps/ui-playground/content/design/components/form.mdx#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { RenderComponentWithSnippet } from \"@/app/components/render\"\nimport { Row } from \"@/app/components/row\"\nimport { BasicExample } from \"./form.basic\"\nimport { AddOnsExample } from \"./form.addOns\"\nimport { SpecialFieldsExample } from \"./form.specialFields\"\n```\n\n----------------------------------------\n\nTITLE: Configuring SAML Authentication for Cal.com Enterprise\nDESCRIPTION: Instructions for setting up SAML-based authentication in Cal.com Enterprise Edition. Includes database configuration, admin account setup, identity provider integration, and user access management.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/features/ee/README.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## Setting up SAML login\n\n1. Set SAML_DATABASE_URL to a postgres database. Please use a different database than the main Cal instance since the migrations are separate for this database. For example `postgresql://postgres:@localhost:5450/cal-saml`\n2. Set SAML_ADMINS to a comma separated list of admin emails from where the SAML metadata can be uploaded and configured.\n3. Create a SAML application with your Identity Provider (IdP) using the instructions here - [SAML Setup](../../apps/web/docs/saml-setup.md)\n4. Remember to configure access to the IdP SAML app for all your users (who need access to Cal).\n5. You will need the XML metadata from your IdP later, so keep it accessible.\n6. Log in to one of the admin accounts configured in SAML_ADMINS and then navigate to Settings -> Security.\n7. You should see a SAML configuration section, copy and paste the XML metadata from step 5 and click on Save.\n8. Your provisioned users can now log into Cal using SAML.\n```\n\n----------------------------------------\n\nTITLE: Importing Avatar Component Dependencies\nDESCRIPTION: Import statements for the Avatar component and related example components\nSOURCE: https://github.com/calcom/cal.com/blob/main/apps/ui-playground/content/design/components/avatar.mdx#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Avatar } from \"@calcom/ui/components/avatar\"\nimport { RenderComponentWithSnippet } from \"@/app/components/render\"\nimport { Row } from \"@/app/components/row\"\nimport { SizesExample } from \"./avatar.sizes\"\nimport { ImageExample } from \"./avatar.image\"\nimport { TooltipExample } from \"./avatar.tooltip\"\nimport { LinkExample } from \"./avatar.link\"\nimport { IndicatorExample } from \"./avatar.indicator\"\n```\n\n----------------------------------------\n\nTITLE: Importing CSS Stylesheets in Cal.com\nDESCRIPTION: Example showing how to import CSS stylesheets in the application. CSS files must be imported in the pages/_app.tsx file to apply styles globally to all pages and components.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/self-hosting/guides/white-labeling/custom-css.mdx#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"../styles/fonts.css\";\nimport \"../styles/globals.css\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Redirect URI for Microsoft Graph API\nDESCRIPTION: The redirect URI pattern required for Microsoft Graph API integration with Cal.com. Must be configured in Azure App Registration with the actual Cal.com application URL.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/self-hosting/apps/install-apps/microsoft.mdx#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n<Cal.com URL>/api/integrations/office365calendar/callback\n```\n\n----------------------------------------\n\nTITLE: Cloning the Cal.com Repository (Git)\nDESCRIPTION: Command to clone the Cal.com repository from GitHub. For Windows users, there's a special command to handle symlinks.\nSOURCE: https://github.com/calcom/cal.com/blob/main/README.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/calcom/cal.com.git\n```\n\n----------------------------------------\n\nTITLE: Starting API Development Server\nDESCRIPTION: Command to start the API development server using Yarn workspace.\nSOURCE: https://github.com/calcom/cal.com/blob/main/apps/api/v1/README.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn workspace @calcom/api dev\n```\n\n----------------------------------------\n\nTITLE: Vercel Build Command Override for Cal.com\nDESCRIPTION: Custom build command for Vercel deployment that builds the Cal.com application with its dependencies. This command should be used in the Vercel deployment settings.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/self-hosting/deployments/vercel.mdx#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd ../.. && yarn build --include-dependencies --no-deps\n```\n\n----------------------------------------\n\nTITLE: Configuring Mailtrap SMTP Settings in Cal.com Environment File\nDESCRIPTION: This snippet shows the required environment variables for connecting Cal.com to Mailtrap's SMTP server. It includes the host, port, username, and password settings that need to be added to the .env file.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/developing/guides/email/setup-mailtrap-for-email-testing.mdx#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nEMAIL_SERVER_HOST='sandbox.smtp.mailtrap.io' \nEMAIL_SERVER_PORT=2525\nEMAIL_SERVER_USER='XXX'\nEMAIL_SERVER_PASSWORD='XXX'\n```\n\n----------------------------------------\n\nTITLE: Creating a New Cal.com App using Yarn\nDESCRIPTION: This command initializes a new app directory under the packages/app-store/ folder in the Cal.com project. It prompts for a few inputs and sets up the basic app structure.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/developing/guides/appstore-and-integration/build-an-app.mdx#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn create-app\n```\n\n----------------------------------------\n\nTITLE: Importing Alert Example Components\nDESCRIPTION: Import statements for the various example components that demonstrate different Alert component configurations and use cases.\nSOURCE: https://github.com/calcom/cal.com/blob/main/apps/ui-playground/content/design/components/alert.mdx#2025-04-20_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { BasicExample } from \"./alert.basic\"\nimport { ActionsExample } from \"./alert.actions\"\nimport { CustomIconsExample } from \"./alert.customIcons\"\nimport { CustomIconColorExample } from \"./alert.customIconColor\"\nimport { NoTitleExample } from \"./alert.noTitle\"\n```\n\n----------------------------------------\n\nTITLE: Building Cal.com Application\nDESCRIPTION: Command to build the Cal.com project for production deployment. This should be run before pushing code to ensure a successful production build.\nSOURCE: https://github.com/calcom/cal.com/blob/main/CONTRIBUTING.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Importing Additional Components for Documentation\nDESCRIPTION: Shows the import statements for documentation-related components used to showcase the Alert examples in the documentation page.\nSOURCE: https://github.com/calcom/cal.com/blob/main/apps/ui-playground/content/design/components/alert.mdx#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { RenderComponentWithSnippet } from \"@/app/components/render\"\nimport { Row } from \"@/app/components/row\"\n```\n\n----------------------------------------\n\nTITLE: Enabling E2E Email Testing\nDESCRIPTION: Command to enable email checks in E2E tests locally by adding the appropriate environment variable, requiring mailhog container.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/developing/local-development.mdx#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\necho 'E2E_TEST_MAILHOG_ENABLED=1' >> .env\n```\n\n----------------------------------------\n\nTITLE: SAML Database Connection String Examples\nDESCRIPTION: Example PostgreSQL connection strings for SAML database configuration, including options for self-signed certificates.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/self-hosting/sso-setup.mdx#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npostgresql://postgres:@localhost:5450/cal-saml\n```\n\nLANGUAGE: plaintext\nCODE:\n```\npostgresql://postgres:@localhost:5450/cal-saml?sslmode=no-verify\n```\n\n----------------------------------------\n\nTITLE: Setting Up Database with Prisma\nDESCRIPTION: Command to deploy the Prisma schema to set up the database structure for Cal.com.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/developing/local-development.mdx#2025-04-20_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nyarn workspace @calcom/prisma db-deploy\n```\n\n----------------------------------------\n\nTITLE: Building Embed Core for Production\nDESCRIPTION: Command to build the embed core for production deployment. The resulting dist/embed.umd.js should be served at http://cal.com/embed.js.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/embeds/embed-core/README.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access Rules in robots.txt\nDESCRIPTION: This robots.txt configuration restricts web crawlers from accessing private areas of the site while specifically allowing access to necessary API endpoints. It blocks access to sandbox environments, API endpoints, locales, and user settings while explicitly permitting access to social media preview image generation and app store assets.\nSOURCE: https://github.com/calcom/cal.com/blob/main/apps/web/public/robots.txt#2025-04-20_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\nUser-agent: *\nDisallow: /sandbox\nDisallow: /api\nDisallow: /static/locales\nDisallow: /settings\nDisallow: /settings/my-account\n\n# Specifically allow access to OG Image api, otherwise eg Twitter won't render these images.\nAllow: /api/social/og/image\n# Specifically allow access to api/app-store to allow search engines to fetch assets\nAllow: /api/app-store/\n```\n\n----------------------------------------\n\nTITLE: Running Embed Core Development Server\nDESCRIPTION: Command to start the development server for testing the embed on localhost:3100.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/embeds/embed-core/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Installing E2E Test Browsers\nDESCRIPTION: Command to download and install Playwright test browsers for end-to-end testing. Resolves common browser executable missing errors.\nSOURCE: https://github.com/calcom/cal.com/blob/main/CONTRIBUTING.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright install\n```\n\n----------------------------------------\n\nTITLE: Deploying Database Changes\nDESCRIPTION: Command to deploy database changes using Prisma in the Cal.com workspace\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/self-hosting/database-migrations.mdx#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn workspace @calcom/prisma db-deploy\n```\n\n----------------------------------------\n\nTITLE: Alternative Yarn Install Command for Vercel Deployment\nDESCRIPTION: Alternative yarn install command that disables immutable installs, which may help resolve installation failures during Vercel deployment.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/self-hosting/deployments/vercel.mdx#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nYARN_ENABLE_IMMUTABLE_INSTALLS=false yarn install\n```\n\n----------------------------------------\n\nTITLE: Rendering Disabled Button Example in React\nDESCRIPTION: This snippet shows how to render disabled buttons using the DisabledExample component.\nSOURCE: https://github.com/calcom/cal.com/blob/main/apps/ui-playground/content/design/components/button.mdx#2025-04-20_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<DisabledExample/>\n```\n\n----------------------------------------\n\nTITLE: Generating a Random Secret Key\nDESCRIPTION: Command to generate a secure random key for the NEXTAUTH_SECRET environment variable using OpenSSL.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/developing/local-development.mdx#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nopenssl rand -base64 32\n```\n\n----------------------------------------\n\nTITLE: Importing Range Slider Components\nDESCRIPTION: Import statements for rendering components and examples of range slider implementations.\nSOURCE: https://github.com/calcom/cal.com/blob/main/apps/ui-playground/content/design/components/rangeslider.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RenderComponentWithSnippet } from \"@/app/components/render\";\nimport { Row } from \"@/app/components/row\";\n\nimport { BasicExample } from \"./rangeslider.basic.tsx\";\nimport { PopoverExample } from \"./rangeslider.popover\";\n```\n\n----------------------------------------\n\nTITLE: Setting Node Version with NVM (Shell)\nDESCRIPTION: Commands to use the required Node.js version for the project using Node Version Manager (nvm).\nSOURCE: https://github.com/calcom/cal.com/blob/main/README.md#2025-04-20_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnvm use\n```\n\nLANGUAGE: sh\nCODE:\n```\nnvm install && nvm use\n```\n\n----------------------------------------\n\nTITLE: Resolving Applied Migrations\nDESCRIPTION: Command to mark specific migrations as applied in Prisma's migration tracking\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/self-hosting/database-migrations.mdx#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn prisma migrate resolve --applied migration_name\n```\n\n----------------------------------------\n\nTITLE: Development Server Commands\nDESCRIPTION: Commands for starting development server and building production version\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/developing/open-source-contribution/introduction.mdx#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn dev\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Token Refresh Response Format\nDESCRIPTION: Expected response format for the token refresh endpoint that provides a new access token.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/platform/quickstart.mdx#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{ accessToken: \"fresh access token\" }\n```\n\n----------------------------------------\n\nTITLE: NPM Publishing Instructions for Cal.com Embeds\nDESCRIPTION: Step-by-step commands for publishing Cal.com embed packages to NPM. The process involves using changesets for version management and a custom publish command due to workspace prefix limitations.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/embeds/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n1. `yarn changeset` -> Creates changelog files and adds summary to changelog. Select embed packages only here.\n2. `yarn changeset version` -> Bumps the versions as required\n3. Get the PR reviewed and merged\n4. `yarn publish-embed` -> Releases all packages. We can't use `yarn changeset publish` because it doesn't support workspace: prefix removal yet. See https://github.com/changesets/changesets/issues/432#issuecomment-1016365428\n```\n\n----------------------------------------\n\nTITLE: Range Slider Component Examples\nDESCRIPTION: Markdown structure defining the range slider examples with component usage.\nSOURCE: https://github.com/calcom/cal.com/blob/main/apps/ui-playground/content/design/components/rangeslider.mdx#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## Basic\n\nBasic range slider for selecting numeric values.\n\n<BasicExample />\n\n## With Popover\n\nRange slider with a popover showing the current value.\n\n<PopoverExample />\n```\n\n----------------------------------------\n\nTITLE: Receiving Access and Refresh Tokens in JSON Response\nDESCRIPTION: This snippet shows the JSON response structure when requesting an access token. It includes both the access_token and refresh_token fields.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/developing/guides/appstore-and-integration/oauth.mdx#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    access_token: \"exampleAccessToken\"\n    refresh_token: \"exampleRefreshToken\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Jest Tests in Cal.com\nDESCRIPTION: Commands for executing Jest test suite in Cal.com project. Includes basic test execution, filtered test running, and watch mode options.\nSOURCE: https://github.com/calcom/cal.com/blob/main/apps/api/v1/test/README.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn test\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn test -t _post\n```\n\n----------------------------------------\n\nTITLE: Resetting Prisma Migrations Table\nDESCRIPTION: SQL command to clear the Prisma migrations tracking table in PostgreSQL\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/self-hosting/database-migrations.mdx#2025-04-20_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nDELETE FROM \"_prisma_migrations\";\n```\n\n----------------------------------------\n\nTITLE: Defining Body Typography Styles in JavaScript/JSX\nDESCRIPTION: Exports body typography styles configuration for general text content. The configuration includes four body text styles with their corresponding Tailwind classes and detailed specifications for font family, size, line height, and weight.\nSOURCE: https://github.com/calcom/cal.com/blob/main/apps/ui-playground/content/design/typography.mdx#2025-04-20_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const bodyStyles = {\n  title: 'Body',\n  description: 'Used for general text content',\n  styles: [\n    {\n      name: 'Large Semibold',\n      className: 'text-lg font-semibold leading-none',\n      specs: {\n        fontFamily: 'Inter',\n        fontSize: '18',\n        lineHeight: '20px',\n        weight: 'semibold',\n      },\n    },\n    {\n      name: 'Base Normal',\n      className: 'text-base font-normal leading-none',\n      specs: {\n        fontFamily: 'Inter',\n        fontSize: '16',\n        lineHeight: '18px',\n        weight: 'regular',\n      },\n    },\n    {\n      name: 'Base Medium',\n      className: 'text-base font-medium leading-none',\n      specs: {\n        fontFamily: 'Inter',\n        fontSize: '16',\n        lineHeight: '18px',\n        weight: 'medium',\n      },\n    },\n    {\n      name: 'Small Normal',\n      className: 'text-sm font-normal leading-none',\n      specs: {\n        fontFamily: 'Inter',\n        fontSize: '14',\n        lineHeight: '16px',\n        weight: 'regular',\n      },\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Starting Cal.com Development Servers\nDESCRIPTION: Commands for starting the main Cal.com development server and the API server for local testing. The main app runs on port 3000 and the API server runs on port 3003.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/developing/guides/api/how-to-setup-api-in-a-local-instance.mdx#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn dev\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn workspace @calcom/api dev\n```\n\n----------------------------------------\n\nTITLE: Running Development Mode Without Docker\nDESCRIPTION: Alternative command to run the application in development mode without using Docker.\nSOURCE: https://github.com/calcom/cal.com/blob/main/apps/api/v2/README.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn dev:no-docker\n```\n\n----------------------------------------\n\nTITLE: Running API v1 Server\nDESCRIPTION: Command to start the Cal.com API v1 server for local development using Yarn.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/developing/local-development.mdx#2025-04-20_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nyarn workspace @calcom/api dev\n```\n\n----------------------------------------\n\nTITLE: Setting TWILIO_TOKEN Environment Variable\nDESCRIPTION: Adds the Twilio Auth Token to the environment configuration file for Cal.com integration.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/self-hosting/apps/install-apps/twilio.mdx#2025-04-20_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nTWILIO_TOKEN\n```\n\n----------------------------------------\n\nTITLE: Setting TWILIO_SID Environment Variable\nDESCRIPTION: Adds the Twilio Account SID to the environment configuration file for Cal.com integration.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/self-hosting/apps/install-apps/twilio.mdx#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nTWILIO_SID\n```\n\n----------------------------------------\n\nTITLE: Rendering Button Loading State Example in React\nDESCRIPTION: This snippet demonstrates how to render buttons in a loading state using the LoadingExample component.\nSOURCE: https://github.com/calcom/cal.com/blob/main/apps/ui-playground/content/design/components/button.mdx#2025-04-20_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<LoadingExample/>\n```\n\n----------------------------------------\n\nTITLE: Publishing Platform Libraries Command in Dev Environment\nDESCRIPTION: Command to publish the platform libraries package to NPM after local development. Updates version in package.json and publishes to NPM.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/platform/libraries/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn publish\n```\n\n----------------------------------------\n\nTITLE: Running ngrok Server\nDESCRIPTION: Command to start ngrok HTTP tunnel on a specified port for creating public URLs to local server.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/features/ee/organizations/README.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nngrok http 8000\n```\n\n----------------------------------------\n\nTITLE: Example JSON Body for Team Membership Creation\nDESCRIPTION: This snippet shows the JSON structure needed to create a team membership with owner role. This is a prerequisite for creating team event types, as only admins or owners can create team event types.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/platform/atoms/event-type.mdx#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"userId\": 1006,\n  \"accepted\": true,\n  \"role\": \"OWNER\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Logger Level in Shell\nDESCRIPTION: Shell command to set the NEXT_PUBLIC_LOGGER_LEVEL environment variable to control logging verbosity for tRPC queries and mutations.\nSOURCE: https://github.com/calcom/cal.com/blob/main/README.md#2025-04-20_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\necho 'NEXT_PUBLIC_LOGGER_LEVEL=3' >> .env\n```\n\n----------------------------------------\n\nTITLE: Copying API Environment Files\nDESCRIPTION: Commands to copy environment example files for both the main application and API versions (v1 or v2).\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/developing/local-development.mdx#2025-04-20_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ncp apps/api/.env.example apps/api/{version}/.env\ncp .env.example .env\n```\n\n----------------------------------------\n\nTITLE: Setting TWILIO_MESSAGING_SID Environment Variable\nDESCRIPTION: Adds the Twilio Messaging Service SID to the environment configuration file. This identifier links Cal.com to the messaging service created in Twilio.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/self-hosting/apps/install-apps/twilio.mdx#2025-04-20_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nTWILIO_MESSAGING_SID\n```\n\n----------------------------------------\n\nTITLE: Setting TWILIO_VERIFY_SID Environment Variable\nDESCRIPTION: Adds the Twilio Verify Service SID to the environment configuration file. This links Cal.com to the verification service in Twilio for authentication purposes.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/self-hosting/apps/install-apps/twilio.mdx#2025-04-20_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nTWILIO_VERIFY_SID\n```\n\n----------------------------------------\n\nTITLE: Accessing Cal.com Admin Panel for Zoho Calendar Integration\nDESCRIPTION: URL path to access the Cal.com admin panel for configuring app keys for Zoho Calendar integration.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/self-hosting/apps/install-apps/zoho.mdx#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n<Cal.com>/settings/admin/apps\n```\n\n----------------------------------------\n\nTITLE: Post-publishing Command for Platform Libraries\nDESCRIPTION: Command to run after publishing to update the version of @calcom/platform-libraries in API v2 package.json, reset library version to 0.0.0, and run yarn install.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/platform/libraries/README.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn postpublish\n```\n\n----------------------------------------\n\nTITLE: Creating New Cal.com App with Yarn\nDESCRIPTION: Command to initialize a new app in the Cal.com app store ecosystem using yarn.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/developing/guides/appstore-and-integration/build-a-greeter-app.mdx#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn app-store create\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Mode\nDESCRIPTION: Command to add NEXT_PUBLIC_DEBUG=1 to the .env file for enabling trpc query and mutation logging during development.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/developing/local-development.mdx#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\necho 'NEXT_PUBLIC_DEBUG=1' >> .env\n```\n\n----------------------------------------\n\nTITLE: Running Tests\nDESCRIPTION: Various commands for running unit tests, end-to-end tests, and generating test coverage reports.\nSOURCE: https://github.com/calcom/cal.com/blob/main/apps/api/v2/README.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# unit tests\n$ yarn run test\n\n# e2e tests\n$ yarn run test:e2e\n\n# e2e tests in watch mode\n$ yarn test:e2e:watch \n\n# run specific e2e test file in watch mode\n$ yarn test:e2e:watch --testPathPattern=filePath\n\n# test coverage\n$ yarn run test:cov\n```\n\n----------------------------------------\n\nTITLE: Configuring Stripe Webhook URL\nDESCRIPTION: The webhook endpoint URL that Stripe will send events to. This needs to be set up in the Stripe Webhooks dashboard to receive payment event notifications.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/self-hosting/apps/install-apps/stripe.mdx#2025-04-20_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n<Cal.com URL>/api/integrations/stripepayment/webhook\n```\n\n----------------------------------------\n\nTITLE: Setting NEXT_PUBLIC_SENDER_ID Environment Variable\nDESCRIPTION: Adds a custom sender ID to the environment configuration file. This ID will appear as the sender name in SMS messages. If not specified, it defaults to \"Cal\".\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/self-hosting/apps/install-apps/twilio.mdx#2025-04-20_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nNEXT_PUBLIC_SENDER_ID\n```\n\n----------------------------------------\n\nTITLE: Initial Local Build Command for Platform Libraries\nDESCRIPTION: Command to build the platform libraries locally for the first time, which will point v2 API to the local libraries.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/platform/libraries/README.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn local\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server for Cal React Embed\nDESCRIPTION: Command to start a hot reloading development server for the Cal.com React embed component.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/embeds/embed-react/README.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Rendering Button Icons Example in React\nDESCRIPTION: This snippet shows how to render buttons with icons using the IconsExample component.\nSOURCE: https://github.com/calcom/cal.com/blob/main/apps/ui-playground/content/design/components/button.mdx#2025-04-20_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<IconsExample/>\n```\n\n----------------------------------------\n\nTITLE: Git Commands for Managing yarn.lock\nDESCRIPTION: Commands for reverting unintended yarn.lock changes and managing git history\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/developing/open-source-contribution/introduction.mdx#2025-04-20_snippet_4\n\nLANGUAGE: git\nCODE:\n```\ngit checkout HEAD~1 yarn.lock\ngit commit -m \"Revert yarn.lock changes\"\n```\n\nLANGUAGE: git\nCODE:\n```\ngit push origin <your-branch-name> --force\n```\n\nLANGUAGE: git\nCODE:\n```\ngit log yarn.lock\n```\n\nLANGUAGE: git\nCODE:\n```\ngit checkout <commit_hash> yarn.lock\n```\n\nLANGUAGE: git\nCODE:\n```\ngit commit -m \"Revert yarn.lock to its state before unintended changes\"\n```\n\nLANGUAGE: git\nCODE:\n```\ngit pull origin <your-branch-name>\ngit push origin <your-branch-name>\n```\n\n----------------------------------------\n\nTITLE: Production Database Migration\nDESCRIPTION: Safely applies database migrations in production environment\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/self-hosting/upgrading.mdx#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn workspace @calcom/prisma db-deploy\n```\n\n----------------------------------------\n\nTITLE: Setting Zoho Bigin OAuth Redirect URL\nDESCRIPTION: The OAuth redirect URL format for Zoho Bigin integration with Cal.com.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/self-hosting/apps/install-apps/zoho.mdx#2025-04-20_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n<Cal.com URL>/api/integrations/zoho-bigin/callback\n```\n\n----------------------------------------\n\nTITLE: Importing Badge Component and Example Components\nDESCRIPTION: This snippet shows the import statements for the Badge component from the Cal.com UI library and various example components that demonstrate different uses of the Badge component.\nSOURCE: https://github.com/calcom/cal.com/blob/main/apps/ui-playground/content/design/components/badge.mdx#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Badge } from \"@calcom/ui/components/badge\"\nimport { RenderComponentWithSnippet } from \"@/app/components/render\"\nimport { Row } from \"@/app/components/row\"\nimport { VariantsExample } from \"./badge.variants\"\nimport { IconsExample } from \"./badge.icons\"\nimport { DotsExample } from \"./badge.dots\"\nimport { InteractiveExample } from \"./badge.interactive\"\nimport { RoundedExample } from \"./badge.rounded\"\n```\n\n----------------------------------------\n\nTITLE: Rebuild Command for Platform Libraries During Development\nDESCRIPTION: Command to rebuild the platform libraries after making changes in development.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/platform/libraries/README.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn build:dev\n```\n\n----------------------------------------\n\nTITLE: Running Embed Core Tests\nDESCRIPTION: Command to execute tests for the embed core. Requires the development server to be running.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/embeds/embed-core/README.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn embed-tests-quick\n```\n\n----------------------------------------\n\nTITLE: Copying Environment Files\nDESCRIPTION: Commands to copy example environment files to create actual environment files for the API and main project.\nSOURCE: https://github.com/calcom/cal.com/blob/main/apps/api/v1/README.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncp apps/api/.env.example apps/api/.env\ncp .env.example .env\n```\n\n----------------------------------------\n\nTITLE: Installing Updated Dependencies\nDESCRIPTION: Updates project dependencies using Yarn package manager\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/self-hosting/upgrading.mdx#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Installing Docker on Debian/Ubuntu for Cal.com Deployment\nDESCRIPTION: Commands to update package repositories and install Docker on a Debian/Ubuntu-based system. This is a prerequisite for deploying Cal.com using Docker containers.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/self-hosting/deployments/gcp.mdx#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get update\nsudo apt-get install docker.io\n```\n\n----------------------------------------\n\nTITLE: Cloning the Cal.com Repository on Windows with Symlinks Support\nDESCRIPTION: Special Git command for Windows users that enables proper symlink support when cloning the repository, requiring administrator privileges.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/developing/local-development.mdx#2025-04-20_snippet_1\n\nLANGUAGE: git\nCODE:\n```\ngit clone -c core.symlinks=true https://github.com/calcom/cal.com.git\n```\n\n----------------------------------------\n\nTITLE: Documenting Changelog for @calcom/embed-core in Markdown\nDESCRIPTION: A complete changelog for the @calcom/embed-core package documenting version updates from 1.5.2 down to 1.1.5. It includes information about bundle size reduction, type improvements, feature additions like namespacing support, and various fixes.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/embeds/embed-core/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @calcom/embed-core\n\n## 1.5.2\n\n### Patch Changes\n\n- Bundle size reduction for embed-react\n\n## 1.5.1\n\n### Patch Changes\n\n- Ships latest types of new events added like bookingSuccessfulV2\n\n## 1.5.0\n\n### Minor Changes\n\n- Added namespacing support throughout\n\n## 1.4.0\n\n### Minor Changes\n\n- Added a few more events\n\n## 1.3.2\n\n### Patch Changes\n\n- Improve UI instruction layout typings\n\n## 1.3.1\n\n### Patch Changes\n\n- layout type fix as zod-utils can't be used in npm package\n\n## 1.3.0\n\n### Minor Changes\n\n- Supports new booker layout\n\n## 1.2.1\n\n### Patch Changes\n\n- Fix the build for embed-react\n\n## 1.2.0\n\n### Minor Changes\n\n- Fix missing types for @calcom/embed-react. Also, release support for floatingButton config parameter. Though the support is available using embed.js already, for users using getCalApi the TypeScript types would report that config isn't supported.\n\n## 1.1.5\n\n### Patch Changes\n\n- Add changesets. Use prepack instead of prePublish and prepublish only as that works with both yarn and npm\n```\n\n----------------------------------------\n\nTITLE: Building the Cal.com Embed Snippet with Yarn\nDESCRIPTION: Command to build the Cal.com embed snippet, which generates the distributable ES module file. This needs to be run before testing React embeds to ensure they receive the up-to-date snippet.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/embeds/embed-snippet/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Running API v2 Server\nDESCRIPTION: Command to start the Cal.com API v2 server, which requires a running database in Docker.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/developing/local-development.mdx#2025-04-20_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nyarn workspace @calcom/api-v2 dev\n```\n\n----------------------------------------\n\nTITLE: Disabling Default Toasts in AvailabilitySettings Component\nDESCRIPTION: This snippet shows how to disable the default toast notifications in the AvailabilitySettings component by setting the disableToasts prop to true.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/platform/guides/replacing-toasts.mdx#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<AvailabilitySettings\n    disableToasts={true}\n/>\n```\n\n----------------------------------------\n\nTITLE: Starting the Application in Development Mode\nDESCRIPTION: Command to run the NestJS application in development mode.\nSOURCE: https://github.com/calcom/cal.com/blob/main/apps/api/v2/README.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn run start\n```\n\n----------------------------------------\n\nTITLE: Setting Zoho Calendar OAuth Redirect URL\nDESCRIPTION: The OAuth redirect URL format for Zoho Calendar integration with Cal.com.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/self-hosting/apps/install-apps/zoho.mdx#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n<Cal.com URL>/api/integrations/zohocalendar/callback\n```\n\n----------------------------------------\n\nTITLE: Repopulating Cal.com App Store with Google Calendar Integration\nDESCRIPTION: This command updates the Cal.com app store to include the newly added Google Calendar integration. It should be run after adding the Google credentials.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/self-hosting/apps/install-apps/google.mdx#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npnpm db-seed\n```\n\n----------------------------------------\n\nTITLE: SAML Endpoint Configuration\nDESCRIPTION: Standard SAML endpoint configuration string showing the callback URL format for Cal.com instances.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/self-hosting/sso-setup.mdx#2025-04-20_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://<url for your self-hosted instance>/api/auth/saml/callback\n```\n\n----------------------------------------\n\nTITLE: Generating Encryption Key\nDESCRIPTION: Command to generate a 24-character random string for the CALENDSO_ENCRYPTION_KEY environment variable using OpenSSL.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/developing/local-development.mdx#2025-04-20_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nopenssl rand -base64 24\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server\nDESCRIPTION: Command to start the Cal.com development server.\nSOURCE: https://github.com/calcom/cal.com/blob/main/README.md#2025-04-20_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Installing Tunnelmole for Local HTTPS Access\nDESCRIPTION: Command to install Tunnelmole, an open-source tunneling tool for creating HTTPS URLs for local development.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/features/ee/organizations/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -O https://install.tunnelmole.com/8dPBw/install && sudo bash install\n```\n\n----------------------------------------\n\nTITLE: Connecting Local Platform Libraries\nDESCRIPTION: Command to connect local platform libraries to the API when making changes to packages/platform/libraries.\nSOURCE: https://github.com/calcom/cal.com/blob/main/apps/api/v2/README.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn local\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Yarn for Cal.com\nDESCRIPTION: Command to install all project dependencies using Yarn package manager. This is required before running or building the Cal.com application.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/self-hosting/deployments/vercel.mdx#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Setting Google Login Environment Variable in Cal.com\nDESCRIPTION: This environment variable configures the Google integration as an internal app, restricting login access. It should be added to the .env file of the Cal.com project.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/self-hosting/apps/install-apps/google.mdx#2025-04-20_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nGOOGLE_LOGIN_ENABLED=false\n```\n\n----------------------------------------\n\nTITLE: Configuring Database URL in Environment File\nDESCRIPTION: Example of setting the DATABASE_URL environment variable in the .env file for connecting to a PostgreSQL database.\nSOURCE: https://github.com/calcom/cal.com/blob/main/README.md#2025-04-20_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nDATABASE_URL='postgresql://<user>:<pass>@<db-host>:<db-port>'\n```\n\n----------------------------------------\n\nTITLE: Starting Development Environment with Docker\nDESCRIPTION: Command to use the quick-start development script that sets up a local Postgres instance with test users using Docker and Docker Compose.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/developing/local-development.mdx#2025-04-20_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nyarn dx\n```\n\n----------------------------------------\n\nTITLE: Explaining Packaged Code Differences in Markdown\nDESCRIPTION: This markdown snippet outlines the key differences between the packaged code and the source code, including file selection based on package.json and TypeScript file conversion.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/embeds/embed-react/test/packaged/README.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Packaged\n\nThe tests in this file are run on the packaged code that is published to npm. The packaged code is different from the source code in atleast the following ways\n\n- Not all files go to packaged code.If package.json -> files field is specified then only the files that are specified there would be published. So, one might accidentally miss an important file that's available otherwise.\n- The packaged code doesn't have .ts files. Those files are actually converted to .js files and .d.ts files are generated separately for TypeScript support. It allows the package to work in both TypeScript and non TypeScript environments.\n```\n\n----------------------------------------\n\nTITLE: Navigating to Cal.com Directory\nDESCRIPTION: Command to change into the cloned Cal.com directory for further setup operations.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/developing/local-development.mdx#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd cal.com\n```\n\n----------------------------------------\n\nTITLE: Installing Mintlify CLI\nDESCRIPTION: Command to install the Mintlify CLI globally using npm. This tool is required to preview documentation changes locally.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -g mintlify\n```\n\n----------------------------------------\n\nTITLE: Starting a Next.js Development Server with Package Managers\nDESCRIPTION: Commands to start the Next.js development server using different package managers including npm, yarn, pnpm, and bun. Running any of these commands will launch the development server locally.\nSOURCE: https://github.com/calcom/cal.com/blob/main/apps/ui-playground/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Running End-to-End Tests\nDESCRIPTION: Command to execute end-to-end tests for the Cal.com application using Playwright.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/developing/local-development.mdx#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nyarn test-e2e\n```\n\n----------------------------------------\n\nTITLE: Setting HTML Direction for AvailabilitySettings Atom Toggle Animation\nDESCRIPTION: HTML code snippet showing how to set the reading direction on the HTML element to make the toggle animation work in the AvailabilitySettings atom. The direction must be set to 'ltr' (left to right).\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/platform/faq.mdx#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<html dir=\"ltr\"> ... </html>\n```\n\n----------------------------------------\n\nTITLE: Implementing Solid Gray Button Shadows with State Variations\nDESCRIPTION: Code example demonstrating how to apply Cal.com's shadow system to solid gray buttons with different states (rested, hover, active). This creates appropriate visual feedback during user interactions.\nSOURCE: https://github.com/calcom/cal.com/blob/main/apps/ui-playground/content/design/shadows.mdx#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<button className=\"shadow-solid-gray-rested hover:shadow-solid-gray-hover active:shadow-solid-gray-active\">\n  Solid Gray Button\n</button>\n```\n\n----------------------------------------\n\nTITLE: Deleting a Cal.com App using Yarn\nDESCRIPTION: This command allows developers to remove an existing app from the Cal.com project. It requires specifying the app's slug as an argument.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/developing/guides/appstore-and-integration/build-an-app.mdx#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn app-store delete --slug APP_NAME\n```\n\n----------------------------------------\n\nTITLE: Avatar Component Metadata\nDESCRIPTION: Frontmatter metadata for the Avatar component documentation\nSOURCE: https://github.com/calcom/cal.com/blob/main/apps/ui-playground/content/design/components/avatar.mdx#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Avatar\nairtableId: reciflFrJo5cVgGrS\n---\n```\n\n----------------------------------------\n\nTITLE: Running Tunnelmole Server\nDESCRIPTION: Command to start Tunnelmole server on a specified port for local development tunneling.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/features/ee/organizations/README.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntmole 8000\n```\n\n----------------------------------------\n\nTITLE: Development Environment License Key for Cal.com Self-Hosting\nDESCRIPTION: This is a localhost license key to be used specifically for development environments when self-hosting Cal.com. It allows developers to test and work on the platform without needing a production license.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/self-hosting/license-key.mdx#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n59c0bed7-8b21-4280-8514-e022fbfc24c7\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for White Labeling in Cal.com\nDESCRIPTION: Environment variables that need to be updated to customize the branding in a self-hosted Cal.com instance. These variables control the application name, support email address, and company name displayed throughout the application.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/self-hosting/guides/white-labeling/introduction.mdx#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nNEXT_PUBLIC_APP_NAME=\"acme.com\"\nNEXT_PUBLIC_SUPPORT_MAIL_ADDRESS=\"support@acme.com\"\nNEXT_PUBLIC_COMPANY_NAME=\"ACME inc.\"\n```\n\n----------------------------------------\n\nTITLE: Render One-Click Deployment Markdown Link\nDESCRIPTION: HTML anchor tag containing Render deployment button link that directs to automatic deployment of Cal.com's Docker repository on Render platform.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/self-hosting/deployments/render.mdx#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<a href=\"https://render.com/deploy?repo=https://github.com/calcom/docker\" target=\"_blank\">\n    <img src=\"/images/deploy-render.svg\" alt=\"Deploy on Render\" noZoom />\n</a>\n```\n\n----------------------------------------\n\nTITLE: Connecting to GCP Virtual Machine Instance via SSH\nDESCRIPTION: Command to establish an SSH connection to a Google Cloud Platform VM instance using the gcloud CLI tool. Requires project ID, zone, and instance name parameters.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/self-hosting/deployments/gcp.mdx#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngcloud ssh --project=[PROJECT_ID] --zone=[ZONE] [INSTANCE_NAME]\n```\n\n----------------------------------------\n\nTITLE: Setting Up Storybook Documentation with MDX\nDESCRIPTION: Uses MDX syntax to define the Storybook documentation page for the Booker component. It connects the page to BookerStories, adds a title, displays a properties table, and renders the default story in a Canvas.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/platform/atoms/booker/Booker.docs.mdx#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Meta of={BookerStories} />\n\n<Title title=\"Booker\" />\n\n<ArgsTable of={Booker} />\n\n<Canvas of={BookerStories.Default}/>\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration\nDESCRIPTION: YAML frontmatter configuration for the documentation page, setting metadata and layout options.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/introduction.mdx#2025-04-20_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n---\ntitle: Documentation\ndescription: Welcome to the official Cal.com docs. To help get you started, we've put together a few resources to help you learn about how to use Cal.com. We have also provided advanced documentation covering how to build on top of Cal.com both in the codebase, by API and more. These guides will go into depth on how you can best integrate and extend Cal.com for your needs.\nhugeTitle: true\nfullWidth: true\nomitFeedback: true\n---\n```\n\n----------------------------------------\n\nTITLE: Running Code Linting\nDESCRIPTION: Command to check code formatting and style compliance. Should be run before committing changes to ensure code quality standards are met.\nSOURCE: https://github.com/calcom/cal.com/blob/main/CONTRIBUTING.md#2025-04-20_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn lint\n```\n\n----------------------------------------\n\nTITLE: Setting Up Environment Files for Cal.com API\nDESCRIPTION: Commands to copy environment example files to create the required .env files for the Cal.com API.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/self-hosting/installation.mdx#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncp apps/api/.env.example apps/api/V2/.env\ncp .env.example .env\n```\n\n----------------------------------------\n\nTITLE: Running Jest Tests in Cal.com\nDESCRIPTION: Commands for executing Jest tests in the Cal.com project, including running all tests and filtering tests by description. Requires .env.test configuration to be set up from .env.test.example.\nSOURCE: https://github.com/calcom/cal.com/blob/main/apps/web/test/README.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn test\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn test -t getSchedule\n```\n\n----------------------------------------\n\nTITLE: Rendering Card Group for Cal.com App Installation Options\nDESCRIPTION: This markdown snippet creates a card group layout with multiple cards, each representing a different app that can be installed in a self-hosted Cal.com instance. Each card includes a title, icon, and brief description of the app's integration purpose.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/self-hosting/apps/install-apps/introduction.mdx#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<CardGroup cols={2}>\n    <Card href=\"/self-hosting/apps/install-apps/google\" title=\"Google\" icon=\"google\">\n        Install Google for supporting Google Calendar and Google Meet integrations\n    </Card>\n    <Card href=\"/self-hosting/apps/install-apps/microsoft\" title=\"Microsoft\" icon=\"microsoft\">\n        Install Microsoft to support Exchange365 integration\n    </Card>\n    <Card href=\"/self-hosting/apps/install-apps/zoom\" title=\"Zoom\" icon=\"z\">\n        Install Zoom to support Zoom video conferencing integration\n    </Card>\n    <Card href=\"/self-hosting/apps/install-apps/daily\" title=\"Daily\" icon=\"video\">\n        Install Daily to support Cal Video integration\n    </Card>\n    <Card href=\"/self-hosting/apps/install-apps/hubspot\" title=\"HubSpot\" icon=\"hubspot\">\n        Install HubSpot to support HubSpot CRM integration\n    </Card>\n    <Card href=\"/self-hosting/apps/install-apps/sendgrid\" title=\"SendGrid\" icon=\"envelope\">\n        Install SendGrid to support SendGrid Email integration\n    </Card>\n    <Card href=\"/self-hosting/apps/install-apps/stripe\" title=\"Stripe\" icon=\"stripe\">\n        Install Stripe to support Stripe integration for paid bookings\n    </Card>\n    <Card href=\"/self-hosting/apps/install-apps/twilio\" title=\"Twilio\" icon=\"grid-round-2\" iconType=\"solid\">\n        Install Twilio to support Workflows integration for sms reminders\n    </Card>\n    <Card href=\"/self-hosting/apps/install-apps/zoho\" title=\"Zoho\" icon=\"square-dashed\">\n        Install Zoho to support Zoho CRM integration\n    </Card>\n</CardGroup>\n```\n\n----------------------------------------\n\nTITLE: Rate Limit Exceeded Error Response in JSON\nDESCRIPTION: Example of the JSON error response returned when API rate limits are exceeded. The response includes an error object with a code and message indicating that the request rate limit has been exceeded.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/api-reference/v1/rate-limit.mdx#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"error\": {\n    \"code\": \"too_many_requests\",\n    \"message\": \"Rate limit exceeded\",\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Playwright HTML Test Reports\nDESCRIPTION: Command to open the last generated HTML report from Playwright E2E tests to view test results.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/developing/local-development.mdx#2025-04-20_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nyarn playwright show-report test-results/reports/playwright-html-report\n```\n\n----------------------------------------\n\nTITLE: Generating Secret Key for NextAuth\nDESCRIPTION: Command to generate a random secret key for NextAuth authentication which should be added to the .env file under NEXTAUTH_SECRET.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/self-hosting/installation.mdx#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nopenssl rand -base64 32\n```\n\n----------------------------------------\n\nTITLE: Adding Environment Variables for Cal.com Apps\nDESCRIPTION: Explains that environment variables for apps should be added in the zod.ts file, which makes them available for modification by the Cal.com app admin. References the seed.ts file for local development credentials.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/app-store/CONTRIBUTING.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\npackages/app-store/jitsivideo/zod.ts\n```\n\n----------------------------------------\n\nTITLE: Installing Packages for Cal.com API\nDESCRIPTION: Command to install all required packages for the Cal.com API using Yarn package manager.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/self-hosting/installation.mdx#2025-04-20_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Starting Embed Core Server for Testing\nDESCRIPTION: Command to start the server on port 3100 for running tests. Requires the main App to be running on port 3000.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/embeds/embed-core/README.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Yarn\nDESCRIPTION: Command to install project dependencies using Yarn package manager.\nSOURCE: https://github.com/calcom/cal.com/blob/main/apps/api/v2/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn install\n```\n\n----------------------------------------\n\nTITLE: Installing Cal.com Dependencies with Yarn\nDESCRIPTION: Command to install all required dependencies for Cal.com using Yarn package manager.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/self-hosting/installation.mdx#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Understanding AttributeQueryValue JSON Structure in React Awesome Query Builder\nDESCRIPTION: This snippet demonstrates the structure of an AttributeQueryValue object in the JsonTree format. It shows the internal ID generation by RAQB, the group and rule types, and how field properties are defined including operators and value types.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/app-store/routing-forms/README.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    id: \"Some-id-generated-and-used-internally-by-raqb\"\n    type: \"group\",\n    children1: {\n        \"Some-other-id-generated-and-used-internally-by-raqb\": {\n            type: \"rule\",\n            properties: {\n                field: \"ATTRIBUTE.id\",\n                operator: \"multiselect_equals\", // One of many operators possible\n                value: [\"AttributeOption.id\"],\n                // This is the type of the attribute and the operator corresponds to it. The data provided to jsonLogic on which the logic(generated from RAQB config and this queryValue) is applied must also be as per the requirement of the operator.\n                valueType: [\"multiselect\"] \n            }\n        }\n    }\n    \n}\n```\n\n----------------------------------------\n\nTITLE: Starting Cal.com Credentials Server\nDESCRIPTION: Command to start the development server on port 5100 for managing Cal.com app credentials\nSOURCE: https://github.com/calcom/cal.com/blob/main/example-apps/credential-sync/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Importing Dialog Components\nDESCRIPTION: Import statements for the Dialog component system and related Storybook dependencies.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/ui/components/dialog/Dialog.docs.mdx#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meta } from \"@storybook/blocks\";\nimport { Title, CustomArgsTable } from \"@calcom/storybook/components\";\nimport { Dialog, DialogContent, DialogFooter, DialogClose, DialogHeader } from \"./Dialog\";\nimport * as DialogStories from \"./Dialog.stories\";\n```\n\n----------------------------------------\n\nTITLE: Cloning the Cal.com Repository\nDESCRIPTION: Command to git clone the Cal.com repository to get a local copy of the codebase. This is the first step in the installation process.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/self-hosting/installation.mdx#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/calcom/cal.com.git\n```\n\n----------------------------------------\n\nTITLE: API Response from Adding a Team Member\nDESCRIPTION: JSON response returned after successfully adding a member to a team. Contains the membership details including ID, user ID, team ID, role, and basic user information.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/platform/guides/teams-setup.mdx#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"success\",\n  \"data\": {\n    \"id\": 504378,\n    \"userId\": 1278670,\n    \"teamId\": 36147,\n    \"accepted\": true,\n    \"role\": \"ADMIN\",\n    \"disableImpersonation\": false,\n    \"user\": {\n      \"avatarUrl\": \"https://i.cal.com/api/avatar/b0b58752-68ad-4c0d-8024-4fa382a77752.png\",\n      \"username\": \"rick-astley-clvmujib40001p21mxdpkhvu0-gmail\",\n      \"name\": \"Cal\",\n      \"email\": \"rick+clvmujib40001p21mxdpkhvu0@gmail.com\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Dialog Component in React\nDESCRIPTION: Imports the Dialog component from the UI components library along with various example components for demonstration.\nSOURCE: https://github.com/calcom/cal.com/blob/main/apps/ui-playground/content/design/components/dialog.mdx#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Dialog } from \"@calcom/ui/components/dialog\"\nimport { RenderComponentWithSnippet } from \"@/app/components/render\"\nimport { Row } from \"@/app/components/row\"\nimport { BasicExample } from \"./dialog.basic\"\nimport { LargeContentExample } from \"./dialog.largeContent\"\nimport { FormExample } from \"./dialog.form\"\nimport { ConfirmationExample } from \"./dialog.confirmation\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Cal.com Sign-in Redirect URL for OIDC\nDESCRIPTION: The endpoint URL to be used as the sign-in redirect URL (auth URL) when configuring OIDC in Okta for Cal.com.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/developing/guides/auth-and-provision/how-to-setup-oidc-with-okta.mdx#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://app.cal.com/api/auth/oidc\n```\n\n----------------------------------------\n\nTITLE: Cloning the Cal.com Repository in Bash\nDESCRIPTION: Command to clone the forked Cal.com repository to your local machine as part of the manual deployment process.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/self-hosting/deployments/vercel.mdx#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/<your-fork>/cal.com.git\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies\nDESCRIPTION: Commands for installing yarn package manager and project dependencies\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/developing/open-source-contribution/introduction.mdx#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g yarn\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Setting Logo Path in config.json for Cal.com App\nDESCRIPTION: Demonstrates how to set the logo path in the config.json file for a Cal.com app. The logo should be saved in the /static directory and referenced without a path.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/app-store/CONTRIBUTING.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"logo\": \"icon.svg\"\n```\n\n----------------------------------------\n\nTITLE: Importing Dropdown Component in Cal.com\nDESCRIPTION: This code shows the import statements required to use the Dropdown component and related examples in the documentation page.\nSOURCE: https://github.com/calcom/cal.com/blob/main/apps/ui-playground/content/design/components/dropdown.mdx#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Dropdown } from \"@calcom/ui/components/dropdown\"\nimport { RenderComponentWithSnippet } from \"@/app/components/render\"\nimport { Row } from \"@/app/components/row\"\nimport { ButtonTriggerExample } from \"./dropdown.buttonTrigger\"\nimport { AvatarTriggerExample } from \"./dropdown.avatarTrigger\"\nimport { ComplexExample } from \"./dropdown.complex\"\n```\n\n----------------------------------------\n\nTITLE: Cloning Cal.com Repository on Windows with Admin Privileges\nDESCRIPTION: Special git clone command for Windows users that handles symlinks correctly. This requires administrative privileges to work properly.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/self-hosting/installation.mdx#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone -c core.symlinks=true https://github.com/calcom/cal.com.git\n```\n\n----------------------------------------\n\nTITLE: Using AppDeclarativeHandler in Cal.com Apps\nDESCRIPTION: Instructs developers to use the AppDeclarativeHandler across all Cal.com apps. This type is defined in the AppHandler.d.ts file and should be used for app declarations.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/app-store/CONTRIBUTING.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nAppDeclarativeHandler\n```\n\n----------------------------------------\n\nTITLE: Importing Tab Components in React/JSX\nDESCRIPTION: Imports necessary components for rendering tab examples, including render utilities and specific horizontal and vertical tab implementations.\nSOURCE: https://github.com/calcom/cal.com/blob/main/apps/ui-playground/content/design/components/tabs.mdx#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { RenderComponentWithSnippet } from \"@/app/components/render\"\nimport { Row } from \"@/app/components/row\"\nimport { HorizontalExample } from \"./tabs.horizontal\"\nimport { VerticalExample } from \"./tabs.vertical\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Cal.com Sign-out URL for OIDC\nDESCRIPTION: The URL to redirect users to after signing out from Okta when using OIDC with Cal.com.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/developing/guides/auth-and-provision/how-to-setup-oidc-with-okta.mdx#2025-04-20_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://app.cal.com/auth/login\n```\n\n----------------------------------------\n\nTITLE: Defining Tasks for Conferencing Code Organization in Markdown\nDESCRIPTION: A markdown checklist item indicating a potential task to migrate the 'videoClient' functionality to this file or directory.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/features/conferencing/README.md#2025-04-20_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n- [ ] Maybe migrate `videoClient` here\n```\n\n----------------------------------------\n\nTITLE: Accessing Cal.com Calendar Settings\nDESCRIPTION: URL path to access and manage calendars in Cal.com, including Zoho Calendar integration.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/self-hosting/apps/install-apps/zoho.mdx#2025-04-20_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n/settings/my-account/calendars\n```\n\n----------------------------------------\n\nTITLE: Creating Development Branch in Git\nDESCRIPTION: Command to create and checkout a new development branch for working on features or fixes\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/developing/open-source-contribution/introduction.mdx#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b MY_BRANCH_NAME\n```\n\n----------------------------------------\n\nTITLE: SpacingTable Component Import\nDESCRIPTION: Imports the SpacingTable component from the UI components directory, used to display the spacing tokens in a tabular format.\nSOURCE: https://github.com/calcom/cal.com/blob/main/apps/ui-playground/content/design/spacing.mdx#2025-04-20_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { SpacingTable } from '@/components/ui/SpacingTable';\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Config in JSX\nDESCRIPTION: Imports various UI components, icons, and configuration for the documentation page layout.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/introduction.mdx#2025-04-20_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport { Button } from \"@components/uicomp/button\"\nimport { PlainCard } from \"@components/common-alt/plaincard\"\nimport { Discord } from \"@components/icons-alt/discord\"\nimport { GitHub } from \"@components/icons-alt/github\"\nimport { Twitter } from \"@components/icons-alt/twitter\"\nimport config from \"@project-config\"\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Service on Linux for Cal.com Deployment\nDESCRIPTION: Command to start the Docker service using systemctl on Linux systems. This ensures Docker is running before deploying Cal.com containers.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/self-hosting/deployments/gcp.mdx#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl start docker\n```\n\n----------------------------------------\n\nTITLE: Defining Spacing Tokens Array in JavaScript\nDESCRIPTION: Exports an array of spacing tokens that defines the spacing scale used in the application. Each token includes a name, rem value, and pixel equivalent. The scale ranges from 0 to 5rem (80px).\nSOURCE: https://github.com/calcom/cal.com/blob/main/apps/ui-playground/content/design/spacing.mdx#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const spacingTokens = [\n  { name: '0', value: '0', pixels: '0px' },\n  { name: 'px', value: '1px', pixels: '1px' },\n  { name: '0.5', value: '0.125rem', pixels: '2px' },\n  { name: '1', value: '0.25rem', pixels: '4px' },\n  { name: '1.5', value: '0.375rem', pixels: '6px' },\n  { name: '2', value: '0.5rem', pixels: '8px' },\n  { name: '2.5', value: '0.625rem', pixels: '10px' },\n  { name: '3', value: '0.75rem', pixels: '12px' },\n  { name: '4', value: '1rem', pixels: '16px' },\n  { name: '5', value: '1.25rem', pixels: '20px' },\n  { name: '6', value: '1.5rem', pixels: '24px' },\n  { name: '8', value: '2rem', pixels: '32px' },\n  { name: '9', value: '2.25rem', pixels: '36px' },\n  { name: '10', value: '2.5rem', pixels: '40px' },\n  { name: '12', value: '3rem', pixels: '48px' },\n  { name: '14', value: '3.5rem', pixels: '56px' },\n  { name: '16', value: '4rem', pixels: '64px' },\n  { name: '20', value: '5rem', pixels: '80px' },\n];\n```\n\n----------------------------------------\n\nTITLE: Testing and Linting Commands\nDESCRIPTION: Commands for running end-to-end tests and code linting\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/developing/open-source-contribution/introduction.mdx#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn test-e2e\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn lint\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Cal React Embed\nDESCRIPTION: Command to execute tests and update snapshots for the Cal.com React embed component. Note that snapshot updates are currently not prioritized.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/embeds/embed-react/README.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn embed-tests-quick --update-snapshots\n```\n\n----------------------------------------\n\nTITLE: Editing a Cal.com App using Yarn\nDESCRIPTION: This command enables developers to modify an existing app in the Cal.com project. It requires specifying the app's slug as an argument and likely opens the app's configuration for editing.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/developing/guides/appstore-and-integration/build-an-app.mdx#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn app-store edit --slug APP_NAME\n```\n\n----------------------------------------\n\nTITLE: Opening Prisma Studio\nDESCRIPTION: Command to open Prisma Studio for database management and content modification.\nSOURCE: https://github.com/calcom/cal.com/blob/main/README.md#2025-04-20_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nyarn db-studio\n```\n\n----------------------------------------\n\nTITLE: Running Various Application Modes\nDESCRIPTION: Commands for running the application in watch mode and production mode.\nSOURCE: https://github.com/calcom/cal.com/blob/main/apps/api/v2/README.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# watch mode\n$ yarn run start:dev\n\n# production mode\n$ yarn run start:prod\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic EmptyScreen Example in JSX\nDESCRIPTION: This snippet demonstrates how to render a basic example of the EmptyScreen component.\nSOURCE: https://github.com/calcom/cal.com/blob/main/apps/ui-playground/content/design/components/emptyScreen.mdx#2025-04-20_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<BasicExample/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Cal.com Booking Banner in HTML (Light Version)\nDESCRIPTION: HTML code for embedding the light version of the 'Book with Cal.com' banner in an open source project's footer or README. This is an alternative to the dark version and is required for sponsored projects.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/self-hosting/guides/sponsorship/can-calcom-sponsor-my-open-source-project.mdx#2025-04-20_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<img alt=\"Book us with Cal.com\"  src=\"https://cal.com/book-with-cal-light.svg\" />\n```\n\n----------------------------------------\n\nTITLE: Embedding Video Player in HTML\nDESCRIPTION: HTML iframe implementation for embedding a YouTube video player with specific dimensions and security settings.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/app-store/pipedream/DESCRIPTION.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe\n  class=\"aspect-video w-full\"\n  width=\"560\"\n  height=\"315\"\n  src=\"https://www.youtube.com/embed/pRHsQyyfYl0\"\n  title=\"YouTube video player\"\n  frameborder=\"0\"\n  allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n  allowfullscreen></iframe>\n```\n\n----------------------------------------\n\nTITLE: Showing Playwright HTML Report\nDESCRIPTION: Command to open the latest HTML report generated by Playwright for E2E tests.\nSOURCE: https://github.com/calcom/cal.com/blob/main/README.md#2025-04-20_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\nyarn playwright show-report test-results/reports/playwright-html-report\n```\n\n----------------------------------------\n\nTITLE: SAML Entity ID Configuration\nDESCRIPTION: Standard SAML entity ID used for Cal.com SSO setup.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/self-hosting/sso-setup.mdx#2025-04-20_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://saml.cal.com\n```\n\n----------------------------------------\n\nTITLE: Rendering HTML Content EmptyScreen Example in JSX\nDESCRIPTION: This snippet shows how to render an EmptyScreen example with custom HTML content in the headline and description.\nSOURCE: https://github.com/calcom/cal.com/blob/main/apps/ui-playground/content/design/components/emptyScreen.mdx#2025-04-20_snippet_5\n\nLANGUAGE: JSX\nCODE:\n```\n<HtmlContentExample/>\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies\nDESCRIPTION: Command to install project dependencies using Yarn.\nSOURCE: https://github.com/calcom/cal.com/blob/main/apps/api/v1/README.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Cal.com Enterprise Edition Project Logo HTML\nDESCRIPTION: HTML markup for displaying the Cal.com Enterprise Edition project logo and license key link. Contains centered div with logo image and sales link.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/features/ee/README.md#2025-04-20_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- PROJECT LOGO -->\n<div align=\"center\">\n  <a href=\"https://cal.com/enterprise\">\n    <img src=\"https://user-images.githubusercontent.com/8019099/133430653-24422d2a-3c8d-4052-9ad6-0580597151ee.png\" alt=\"Logo\">\n  </a>\n  \n  <a href=\"https://cal.com/sales\">Get a License Key</a>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Displaying Project Logo and Enterprise Link in HTML\nDESCRIPTION: This HTML snippet creates a centered div containing the Cal.com logo and a link to get started with the Enterprise edition. It uses inline styling for alignment and links to external resources.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/app-store/stripepayment/README.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div align=\"center\">\n  <a href=\"https://cal.com/enterprise\">\n    <img src=\"https://user-images.githubusercontent.com/8019099/133430653-24422d2a-3c8d-4052-9ad6-0580597151ee.png\" alt=\"Logo\">\n  </a>\n  \n  <a href=\"https://cal.com/enterprise\">Get Started with Enterprise</a>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory (Shell)\nDESCRIPTION: Command to change the current directory to the cloned Cal.com project folder.\nSOURCE: https://github.com/calcom/cal.com/blob/main/README.md#2025-04-20_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncd cal.com\n```\n\n----------------------------------------\n\nTITLE: Building and Starting Cal.com for Production\nDESCRIPTION: Commands to build the Cal.com application for production and start the server. This should be done after setting up E2E testing and upgrading the database.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/self-hosting/installation.mdx#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn build\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Defining Cal.com Landing Page Component in TypeScript and JSX\nDESCRIPTION: This code snippet defines a React functional component called 'LandingPage'. It renders various sections of the Cal.com landing page, including feature highlights and integration showcases. The component uses custom hooks and utilities for responsive design and internationalization.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/app-store/insihts/DESCRIPTION.md#2025-04-20_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { ArrowRight } from \"@calcom/ui/components/icon\";\nimport { useLocale } from \"@calcom/lib/hooks/useLocale\";\nimport { useResponsive } from \"@calcom/lib/hooks/useResponsive\";\nimport { Button } from \"@calcom/ui\";\nimport LandingPage from \"@components/landing-page\";\n\nexport default function CalDotComLandingPage() {\n  const { t } = useLocale();\n  const { isDesktop } = useResponsive();\n  return (\n    <LandingPage>\n      <div className=\"bg-subtle relative z-10 max-w-[2560px]\">\n        <div className=\"mx-auto flex max-w-[1440px] flex-col gap-6 px-8 py-8 sm:gap-12 sm:py-28 xl:flex-row xl:gap-24\">\n          <div className=\"flex-1\">\n            <div className=\"flex-1 space-y-10\">\n              <h1 className=\"text-emphasis font-cal text-4xl font-bold tracking-tight sm:text-6xl\">\n                {t(\"everything_you_need\")} <br />\n                {t(\"to_schedule_like_a_pro\")}\n              </h1>\n              <p className=\"text-default text-2xl\">\n                {t(\"create_flexible_scheduling_experiences_for_you_and_your_team\")}\n              </p>\n              <div className=\"flex space-x-4\">\n                <Button href=\"/signup\" className=\"w-fit\" color=\"primary\" size=\"lg\" EndIcon={ArrowRight}>\n                  {t(\"start_for_free\")}\n                </Button>\n                <Button href=\"/signup\" className=\"w-fit\" color=\"secondary\" size=\"lg\">\n                  {t(\"contact_sales\")}\n                </Button>\n              </div>\n            </div>\n          </div>\n          <div className=\"flex-1\">\n            <img\n              src=\"/1.png\"\n              alt=\"Cal.com screenshot\"\n              className=\"rounded-md shadow-2xl\"\n              width={isDesktop ? 624 : 312}\n              height={isDesktop ? 468 : 234}\n            />\n          </div>\n        </div>\n      </div>\n    </LandingPage>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Checkly Tests for cal.com\nDESCRIPTION: This command deploys the Checkly tests to the Checkly platform. It's used to update the tests in the production environment after changes or additions.\nSOURCE: https://github.com/calcom/cal.com/blob/main/__checks__/README.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn checkly deploy\n```\n\n----------------------------------------\n\nTITLE: HTML Project Logo and License Link Structure\nDESCRIPTION: HTML structure for displaying the Cal.com project logo and license key acquisition link in a centered layout.\nSOURCE: https://github.com/calcom/cal.com/blob/main/apps/api/v2/src/ee/README.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- PROJECT LOGO -->\n<div align=\"center\">\n  <a href=\"https://cal.com/enterprise\">\n    <img src=\"https://user-images.githubusercontent.com/8019099/133430653-24422d2a-3c8d-4052-9ad6-0580597151ee.png\" alt=\"Logo\">\n  </a>\n  \n  <a href=\"https://go.cal.com/get-license\">Get a License Key</a>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Gallery Items in YAML\nDESCRIPTION: A YAML frontmatter block that defines an array of image files to be included in a gallery. The configuration uses the 'items' key to list three JPEG images.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/app-store/templates/general-app-settings/DESCRIPTION.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nitems:\n  - 1.jpeg\n  - 2.jpeg\n  - 3.jpeg\n---\n```\n\n----------------------------------------\n\nTITLE: Navigating to Cal.com Directory\nDESCRIPTION: Command to change directory to the cloned Cal.com repository folder, which is necessary before running installation commands.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/self-hosting/installation.mdx#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd cal.com\n```\n\n----------------------------------------\n\nTITLE: Production Build and Launch\nDESCRIPTION: Builds and starts the application in production mode\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/self-hosting/upgrading.mdx#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nyarn build\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Rendering Button Group Example in React\nDESCRIPTION: This snippet shows how to render a group of related buttons using the ButtonGroupExample component.\nSOURCE: https://github.com/calcom/cal.com/blob/main/apps/ui-playground/content/design/components/button.mdx#2025-04-20_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<ButtonGroupExample/>\n```\n\n----------------------------------------\n\nTITLE: Generating Prisma Client\nDESCRIPTION: Command to generate Prisma client code for database access.\nSOURCE: https://github.com/calcom/cal.com/blob/main/apps/api/v2/README.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn prisma generate\n```\n\n----------------------------------------\n\nTITLE: Configuring Image List in YAML\nDESCRIPTION: Defines a list of JPEG images using YAML syntax. The configuration uses a simple array structure under an 'items' key with four numbered JPEG files.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/app-store/webex/DESCRIPTION.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nitems:\n  - 1.jpeg\n  - 2.jpeg\n  - 3.jpeg\n  - 4.jpeg\n---\n```\n\n----------------------------------------\n\nTITLE: Importing Navigation Components in React\nDESCRIPTION: Imports necessary components for rendering navigation examples, including a custom rendering component, layout components, and example navigation items.\nSOURCE: https://github.com/calcom/cal.com/blob/main/apps/ui-playground/content/design/components/navigation.mdx#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { RenderComponentWithSnippet } from \"@/app/components/render\"\nimport { Row } from \"@/app/components/row\"\n// import { SidebarExample } from \"./navigation.sidebar.tsx\"\nimport { ItemsExample } from \"./navigation.items.tsx\"\n```\n\n----------------------------------------\n\nTITLE: Changing to Cal.com Docker Directory\nDESCRIPTION: Command to navigate to the cloned Cal.com Docker directory. This is the second step in the setup process.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/self-hosting/docker.mdx#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd calcom-docker\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Verification\nDESCRIPTION: Checks for any changes in environment variables configuration\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/self-hosting/upgrading.mdx#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn predev\n```\n\n----------------------------------------\n\nTITLE: Importing EmptyScreen Component in JSX\nDESCRIPTION: This snippet shows how to import the EmptyScreen component and other related components for the documentation page.\nSOURCE: https://github.com/calcom/cal.com/blob/main/apps/ui-playground/content/design/components/emptyScreen.mdx#2025-04-20_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport { EmptyScreen } from \"@calcom/ui/components/empty-screen\";\nimport { RenderComponentWithSnippet } from \"@/app/components/render\"\nimport { Row } from \"@/app/components/row\"\nimport { BasicExample } from \"./emptyScreen.basic\"\nimport { CustomIconExample } from \"./emptyScreen.customIcon\"\nimport { RawButtonExample } from \"./emptyScreen.rawButton\"\nimport { BorderExample } from \"./emptyScreen.border\"\nimport { HtmlContentExample } from \"./emptyScreen.htmlContent\"\n```\n\n----------------------------------------\n\nTITLE: Watching for Dependency Changes\nDESCRIPTION: Command to watch for changes in platform dependencies and automatically rebuild them.\nSOURCE: https://github.com/calcom/cal.com/blob/main/apps/api/v2/README.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn run dev:build:watch\n```\n\n----------------------------------------\n\nTITLE: Defining Image Assets in YAML Front Matter\nDESCRIPTION: YAML front matter that specifies image assets for the weather calendar application. It defines two JPEG images that are likely used within the calendar interface or documentation.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/app-store/weather_in_your_calendar/DESCRIPTION.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nitems:\n  - 1.jpeg\n  - 2.jpeg\n---\n```\n\n----------------------------------------\n\nTITLE: Seeding App Store in Cal.com (Bash)\nDESCRIPTION: This command repopulates the App store in Cal.com after adding Google credentials. It needs to be run from the packages/prisma directory.\nSOURCE: https://github.com/calcom/cal.com/blob/main/README.md#2025-04-20_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ncd packages/prisma\nyarn seed-app-store\n```\n\n----------------------------------------\n\nTITLE: Pulling Latest Version with Git\nDESCRIPTION: Fetches the most recent version of the codebase from the repository\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/self-hosting/upgrading.mdx#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit pull\n```\n\n----------------------------------------\n\nTITLE: Importing Alert Component in React\nDESCRIPTION: Shows how to import the Alert component from the Cal.com UI library. This is the basic import statement needed before using the Alert component in your React application.\nSOURCE: https://github.com/calcom/cal.com/blob/main/apps/ui-playground/content/design/components/alert.mdx#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Alert } from \"@calcom/ui/components/alert\"\n```\n\n----------------------------------------\n\nTITLE: Setting ZohoCRM Environment Variables\nDESCRIPTION: Environment variables required for ZohoCRM integration with Cal.com.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/self-hosting/apps/install-apps/zoho.mdx#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nZOHOCRM_CLIENT_ID\nZOHOCRM_CLIENT_SECRET\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration for Cal.com Zapier Integration\nDESCRIPTION: YAML front matter that defines image items to be displayed on the page. The configuration references two image files (1.jpg and 2.jpg) that likely demonstrate the Cal.com Zapier integration.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/app-store/zapier/DESCRIPTION.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nitems:\n  - 1.jpg\n  - 2.jpg\n---\n```\n\n----------------------------------------\n\nTITLE: Importing Pagination Component in TypeScript\nDESCRIPTION: Shows how to import the Pagination component from the Cal.com UI library for use in TypeScript projects.\nSOURCE: https://github.com/calcom/cal.com/blob/main/apps/ui-playground/content/design/components/pagination.mdx#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Pagination } from \"@calcom/ui\";\n```\n\n----------------------------------------\n\nTITLE: Bulk Migration Resolution\nDESCRIPTION: Command to automatically resolve all migrations from 2021 in the prisma/migrations directory\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/self-hosting/database-migrations.mdx#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nls -1a prisma/migrations/ | grep 2021 | xargs -I{} prisma migrate resolve --applied {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Cal.com Booking Banner in HTML (Dark Version)\nDESCRIPTION: HTML code for embedding the dark version of the 'Book with Cal.com' banner in an open source project's footer or README. This is required for sponsored projects to include as part of Cal.com's sponsorship criteria.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/self-hosting/guides/sponsorship/can-calcom-sponsor-my-open-source-project.mdx#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<img alt=\"Book us with Cal.com\" src=\"https://cal.com/book-with-cal-dark.svg\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Zoho Bigin Environment Variables\nDESCRIPTION: Environment variables required for Zoho Bigin integration with Cal.com, to be added to the .env.appStore file.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/self-hosting/apps/install-apps/zoho.mdx#2025-04-20_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nZOHO_BIGIN_CLIENT_ID\nZOHO_BIGIN_CLIENT_SECRET\n```\n\n----------------------------------------\n\nTITLE: Placeholder Comment for Bookings Module in Markdown\nDESCRIPTION: A simple markdown comment indicating that booking-related code will be housed in this location in the future.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/features/bookings/README.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Bookings related code will live here\n```\n\n----------------------------------------\n\nTITLE: Database Migration Error Message\nDESCRIPTION: Error message shown when the database schema is not empty and conflicts with existing migrations\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/self-hosting/database-migrations.mdx#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nError: P3005\n\nThe database schema for `localhost:5432` is not empty. Read more about how to baseline an existing production database: https://pris.ly/d/migrate-baseline\n```\n\n----------------------------------------\n\nTITLE: Setting HTML Direction for Availability Toggle Animation\nDESCRIPTION: HTML configuration required for the AvailabilitySettings toggle animation to work properly by setting the reading direction.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/platform/atoms/availability-settings.mdx#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<html dir=\"ltr\"> ... </html>\n```\n\n----------------------------------------\n\nTITLE: Executing Database Migration Command\nDESCRIPTION: Command to migrate the database schema using Prisma in the Cal.com workspace\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/self-hosting/database-migrations.mdx#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn workspace @calcom/prisma db-migrate\n```\n\n----------------------------------------\n\nTITLE: Defining an Item List in YAML Frontmatter\nDESCRIPTION: A YAML frontmatter block that defines an 'items' array containing three JPEG image references. This format is commonly used in static site generators or content management systems to associate metadata with content.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/app-store/templates/booking-pages-tag/DESCRIPTION.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nitems:\n  - 1.jpeg\n  - 2.jpeg\n  - 3.jpeg\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Media Gallery Items in YAML\nDESCRIPTION: A YAML configuration block that defines a list of image files (1.jpg through 4.jpg) to be used in a media gallery.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/app-store/campfire/DESCRIPTION.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nitems:\n  - 1.jpg\n  - 2.jpg\n  - 3.jpg\n  - 4.jpg\n---\n```\n\n----------------------------------------\n\nTITLE: Cloning Cal.com Docker Repository\nDESCRIPTION: Command to clone the Cal.com Docker repository with its submodules. This is the first step in setting up Cal.com with Docker.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/self-hosting/docker.mdx#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone --recursive https://github.com/calcom/docker.git calcom-docker\n```\n\n----------------------------------------\n\nTITLE: Defining Image Gallery Items in YAML\nDESCRIPTION: This YAML snippet defines an 'items' list containing three image filenames. It's likely used to configure which images should be displayed in a gallery or slideshow.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/app-store/intercom/DESCRIPTION.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nitems:\n  - 1.png\n  - 2.png\n  - 3.png\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Image Gallery Items in YAML Frontmatter\nDESCRIPTION: YAML frontmatter that specifies a list of image files to be used in a gallery. The list contains three JPG images that likely showcase the WhatsApp integration functionality.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/app-store/whatsapp/DESCRIPTION.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nitems:\n  - 1.jpg\n  - 2.jpg\n  - 3.jpg\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Attio CRM Media Content with YAML Front Matter\nDESCRIPTION: YAML front matter that defines media content for an Attio CRM marketing page, including a YouTube video embed and references to 6 JPEG images.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/app-store/attio/DESCRIPTION.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nitems:\n  - iframe: { src: https://www.youtube.com/embed/bAm5qHUOFes }\n  - 1.jpeg\n  - 2.jpeg\n  - 3.jpeg\n  - 4.jpeg\n  - 5.jpeg\n  - 6.jpeg\n---\n```\n\n----------------------------------------\n\nTITLE: Pulling Cal.com Docker Image from Docker Hub\nDESCRIPTION: Command to download the Cal.com application Docker image from Docker Hub. This pulls the official Cal.com container image to the local machine for deployment.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/self-hosting/deployments/gcp.mdx#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull cal/calcom\n```\n\n----------------------------------------\n\nTITLE: Embedding Vimeo Video Player with HTML\nDESCRIPTION: An HTML iframe element that embeds a Vimeo video player, configured with specific dimensions, styling, and a Vimeo video ID to showcase the Campfire platform.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/app-store/campfire/DESCRIPTION.md#2025-04-20_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<iframe class=\"w-full aspect-video -mx-2\" width=\"560\" height=\"315\" src=\"https://player.vimeo.com/video/683733529?app_id=122963&h=025a2fae94&referrer=https%3A%2F%2Fwww.campfire.to%2F\" ></iframe>\n```\n\n----------------------------------------\n\nTITLE: Defining Zoom Image Gallery Items in YAML\nDESCRIPTION: A YAML configuration that defines a list of image files for a Zoom integration gallery. The items array contains seven image filenames with jpg and png extensions.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/app-store/zoomvideo/DESCRIPTION.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nitems:\n  - zoom1.jpg\n  - zoom2.png\n  - zoom3.png\n  - zoom4.png\n  - zoom5.jpg\n  - zoom6.png\n  - zoom7.png\n---\n```\n\n----------------------------------------\n\nTITLE: Setting Sender Email Address in Cal.com Environment File\nDESCRIPTION: This snippet shows how to set the EMAIL_FROM environment variable in the .env file to specify the sender address for emails sent through Mailtrap.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/developing/guides/email/setup-mailtrap-for-email-testing.mdx#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nEMAIL_FROM='notifications@yourselfhostedcal.com'\n```\n\n----------------------------------------\n\nTITLE: Defining Media Assets List in YAML\nDESCRIPTION: Simple YAML array configuration specifying a list of JPEG image files named numerically from 1 to 3\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/app-store/paypal/DESCRIPTION.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nitems:\n  - 1.jpeg\n  - 2.jpeg\n  - 3.jpeg\n---\n```\n\n----------------------------------------\n\nTITLE: Defining an Image Array in YAML\nDESCRIPTION: This YAML snippet defines an array named 'items' containing five image filenames. The file uses front matter delimiters (---) to mark the YAML section, which is a common pattern in static site generators and content management systems.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/app-store/telli/DESCRIPTION.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nitems:\n  - 1.jpg\n  - 2.jpg\n  - 3.jpg\n  - 4.jpg\n  - 5.jpg\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Assets in YAML\nDESCRIPTION: YAML configuration that specifies a list of JPEG image files under an 'items' array. The configuration uses simple array notation to list three numbered JPEG files.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/app-store/templates/basic/DESCRIPTION.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nitems:\n  - 1.jpeg\n  - 2.jpeg\n  - 3.jpeg\n---\n```\n\n----------------------------------------\n\nTITLE: Adding Verified Sender Email to Environment Variables\nDESCRIPTION: This snippet demonstrates how to add the verified sender email address to the .env file. This email is used as the sender address for emails sent through Sendgrid.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/self-hosting/apps/install-apps/sendgrid.mdx#2025-04-20_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nSENDGRID_EMAIL\n```\n\n----------------------------------------\n\nTITLE: Defining Design System Documentation Title in Markdown\nDESCRIPTION: Simple markdown frontmatter defining the title of the design system documentation page.\nSOURCE: https://github.com/calcom/cal.com/blob/main/apps/ui-playground/content/design/index.mdx#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Design System\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Image Gallery Items in YAML\nDESCRIPTION: This YAML snippet defines an 'items' list containing a single image filename. It's likely used to configure a simple image gallery or slideshow component.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/app-store/twipla/DESCRIPTION.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nitems:\n  - 1.png\n---\n```\n\n----------------------------------------\n\nTITLE: Documenting Version Updates in Markdown\nDESCRIPTION: This code snippet demonstrates how to document version updates and dependency changes in a changelog using Markdown format. It includes multiple version entries with patch changes and updated dependencies.\nSOURCE: https://github.com/calcom/cal.com/blob/main/apps/web/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @calcom/web\n\n## 4.8.7\n\n### Patch Changes\n\n- Updated dependencies\n  - @calcom/embed-core@1.5.2\n  - @calcom/embed-react@1.5.2\n  - @calcom/embed-snippet@1.3.2\n\n## 4.5.2\n\n### Patch Changes\n\n- Updated dependencies\n  - @calcom/embed-core@1.5.1\n  - @calcom/embed-react@1.5.1\n  - @calcom/embed-snippet@1.3.1\n\n## 4.0.8\n\n### Patch Changes\n\n- Updated dependencies\n  - @calcom/embed-core@1.5.0\n  - @calcom/embed-react@1.5.0\n  - @calcom/embed-snippet@1.3.0\n\n## 3.9.9\n\n### Patch Changes\n\n- Updated dependencies\n  - @calcom/embed-core@1.4.0\n  - @calcom/embed-react@1.4.0\n  - @calcom/embed-snippet@1.2.0\n\n## 3.1.3\n\n### Patch Changes\n\n- Updated dependencies\n  - @calcom/embed-react@1.3.0\n\n## 3.0.10\n\n### Patch Changes\n\n- Updated dependencies\n  - @calcom/embed-snippet@1.1.2\n  - @calcom/embed-react@1.2.2\n  - @calcom/embed-core@1.3.2\n\n## 3.0.9\n\n### Patch Changes\n\n- Updated dependencies\n  - @calcom/embed-snippet@1.1.1\n  - @calcom/embed-react@1.2.1\n  - @calcom/embed-core@1.3.1\n\n## 3.0.8\n\n### Patch Changes\n\n- Updated dependencies\n  - @calcom/embed-core@1.3.0\n  - @calcom/embed-react@1.2.0\n  - @calcom/embed-snippet@1.1.0\n\n## 2.9.4\n\n### Patch Changes\n\n- Updated dependencies\n  - @calcom/embed-snippet@1.0.9\n  - @calcom/embed-react@1.1.1\n  - @calcom/embed-core@1.2.1\n\n## 2.9.3\n\n### Patch Changes\n\n- Updated dependencies\n  - @calcom/embed-react@1.1.0\n  - @calcom/embed-core@1.2.0\n  - @calcom/embed-snippet@1.0.8\n\n## 2.7.16\n\n### Patch Changes\n\n- Updated dependencies\n  - @calcom/embed-snippet@1.0.7\n  - @calcom/embed-react@1.0.12\n  - @calcom/embed-core@1.1.5\n```\n\n----------------------------------------\n\nTITLE: Defining Image Resources in YAML\nDESCRIPTION: A YAML configuration block that declares an 'items' array containing image file references. This structure is likely used for tracking or loading image resources within the application.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/app-store/zoho-bigin/DESCRIPTION.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nitems:\n  - 1.png\n---\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter for Music Classroom Application\nDESCRIPTION: YAML frontmatter that defines the description of the application and references image assets. This configuration defines the project description and lists image files to be included in the documentation.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/app-store/sirius_video/DESCRIPTION.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndescription: Video meetings made for music. Create your own virtual music classroom, easily.\nitems:\n  - 1.jpg\n  - 2.jpg\n  - 3.jpg\n---\n```\n\n----------------------------------------\n\nTITLE: Location of Cron Job Files in Cal.com\nDESCRIPTION: Path to the directory containing cron job files in the Cal.com codebase, which need to be configured based on your hosting platform.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/self-hosting/installation.mdx#2025-04-20_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n/apps/web/pages/api/cron\n```\n\n----------------------------------------\n\nTITLE: Defining Illustration Items in YAML\nDESCRIPTION: A YAML configuration block that defines a list of illustration items. The structure uses the 'items' key to create an array containing a single element '1.png', which is likely a reference to an image file used in the project.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/app-store/umami/DESCRIPTION.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nitems:\n  - 1.png\n---\n```\n\n----------------------------------------\n\nTITLE: Running Database Migrations in Development\nDESCRIPTION: Command to run database migrations using Prisma in a development environment.\nSOURCE: https://github.com/calcom/cal.com/blob/main/README.md#2025-04-20_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nyarn workspace @calcom/prisma db-migrate\n```\n\n----------------------------------------\n\nTITLE: Defining Image Assets in YAML\nDESCRIPTION: A YAML configuration block that defines a list of JPEG image files under an 'items' key. The configuration uses standard YAML array syntax to list three numbered JPEG files.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/app-store/templates/event-type-app-card/DESCRIPTION.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nitems:\n  - 1.jpeg\n  - 2.jpeg\n  - 3.jpeg\n---\n```\n\n----------------------------------------\n\nTITLE: Displaying Cal.com App Directory Structure\nDESCRIPTION: This snippet shows the typical directory structure for a Cal.com app, including configuration files, API endpoints, components, and static assets. It provides an overview of the files and folders developers need to work with.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/developing/guides/appstore-and-integration/build-an-app.mdx#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n├──_example\n| ├──config.json -> Autogenerated by cli. You are free to edit it.\n| ├──api\n| | ├──add.ts -> Autogenerated by cli. You would want to edit it if your app needs to connect with a third party\n|\n| ├──components\n|\n| ├──static -> Add all static assets here\n| | ├──icon.svg -> This is used as the logo for your App.\n\n| ├──index.ts\n| ├──package.json\n| ├──.env.example -> Specify the environmental variables (ex. auth token, API secrets) that your app will need if it's applicable\n| ├──README.mdx -> Customize your app description. You can add an image slider as well.\n```\n\n----------------------------------------\n\nTITLE: Defining Media Items in YAML Frontmatter\nDESCRIPTION: A YAML frontmatter block defining a list of media items (specifically '1.jpg') to be associated with the document.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/app-store/sylapsvideo/DESCRIPTION.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nitems:\n  - 1.jpg\n---\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Yarn (Shell)\nDESCRIPTION: Command to install project dependencies using Yarn package manager.\nSOURCE: https://github.com/calcom/cal.com/blob/main/README.md#2025-04-20_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Defining Image Assets for Google Tag Manager in YAML\nDESCRIPTION: YAML configuration block that defines an items array containing image filenames required for the Google Tag Manager app installation. The images are likely screenshots or UI assets used in the app interface.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/app-store/gtm/DESCRIPTION.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nitems:\n  - 1.jpg\n  - 2.jpg\n---\n```\n\n----------------------------------------\n\nTITLE: Cloning Cal.com Repository\nDESCRIPTION: Command to clone the main Cal.com repository with submodules.\nSOURCE: https://github.com/calcom/cal.com/blob/main/apps/api/v1/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone --recurse-submodules -j8 https://github.com/calcom/cal.com.git\n```\n\n----------------------------------------\n\nTITLE: Defining an Image Collection in YAML\nDESCRIPTION: This YAML snippet defines a collection of image items. The configuration contains an 'items' array listing three JPEG images with numeric filenames.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/app-store/horizon-workrooms/DESCRIPTION.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nitems:\n  - 1.jpeg\n  - 2.jpeg\n  - 3.jpeg\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Image Items in YAML Front Matter\nDESCRIPTION: YAML front matter block that defines an array of image filenames (1.jpg through 4.jpg) under the 'items' key. This is likely used for displaying images related to Office 365 in the document.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/app-store/office365calendar/DESCRIPTION.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nitems:\n  - 1.jpg\n  - 2.jpg\n  - 3.jpg\n  - 4.jpg\n---\n```\n\n----------------------------------------\n\nTITLE: Running Checkly Tests for cal.com\nDESCRIPTION: This command executes Checkly tests locally using Yarn. It's used for running the test suite during development or in CI/CD pipelines.\nSOURCE: https://github.com/calcom/cal.com/blob/main/__checks__/README.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn checkly test\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Items in YAML\nDESCRIPTION: A YAML configuration block that defines a list of image items, specifically three JPG files labeled 1.jpg, 2.jpg, and 3.jpg. This configuration might be used for displaying a gallery or carousel of images related to Cal Video.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/app-store/dailyvideo/DESCRIPTION.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nitems:\n  - 1.jpg\n  - 2.jpg\n  - 3.jpg\n---\n```\n\n----------------------------------------\n\nTITLE: Locating Cron Jobs Directory\nDESCRIPTION: Path to the directory containing cron job implementations for Cal.com features requiring scheduled execution.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/developing/local-development.mdx#2025-04-20_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n/apps/web/pages/api/cron\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Carousel Items in YAML\nDESCRIPTION: YAML configuration that specifies a list of image files (1.jpg, 2.jpg, 3.jpg) to be used in a carousel or slideshow component.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/app-store/roam/DESCRIPTION.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nitems:\n  - 1.jpg\n  - 2.jpg\n  - 3.jpg\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Image Assets for Cal.com Project in YAML\nDESCRIPTION: This YAML snippet defines an 'items' list containing three PNG image filenames. These likely represent assets used in the Cal.com project, such as logos, icons, or screenshots.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/app-store/metapixel/DESCRIPTION.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nitems:\n  - 1.png\n  - 2.png\n  - 3.png\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Assets for 8x8 Integration\nDESCRIPTION: YAML configuration block that specifies required image assets (1.jpeg and 2.jpeg) for the 8x8 video meeting integration.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/app-store/eightxeight/DESCRIPTION.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nitems:\n  - 1.jpeg\n  - 2.jpeg\n---\n```\n\n----------------------------------------\n\nTITLE: Defining JPEG Image List in YAML\nDESCRIPTION: YAML configuration that specifies a list of JPEG image files under an 'items' key. The file appears to be used for managing image assets in the project.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/app-store/templates/event-type-location-video-static/DESCRIPTION.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nitems:\n  - 1.jpeg\n  - 2.jpeg\n  - 3.jpeg\n---\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video for Wipe My Cal Demo in HTML\nDESCRIPTION: HTML iframe code for embedding a demonstration video of the Wipe My Cal feature from YouTube, with specific start time and standard video player settings.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/app-store/wipemycalother/DESCRIPTION.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe class=\"w-full aspect-video\" width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/lPO6SAjkKrQ?start=235\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n```\n\n----------------------------------------\n\nTITLE: Defining Image Assets in YAML\nDESCRIPTION: A YAML configuration block that lists six image files related to Tandem virtual office platform. These images are likely screenshots or promotional material used in the documentation.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/app-store/tandemvideo/DESCRIPTION.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nitems:\n  - tandem1.jpg\n  - tandem2.jpg\n  - tandem3.jpg\n  - tandem4.jpg\n  - tandem5.jpg\n  - tandem6.jpg\n---\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Image Assets\nDESCRIPTION: YAML frontmatter that defines a list of image assets to be used on the page. The configuration specifies three PNG image files for display.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/app-store/ping/DESCRIPTION.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nitems:\n  - 1.png\n  - 2.png\n  - 3.png\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Image Items in YAML\nDESCRIPTION: YAML configuration that defines an items list containing a single image reference '1.png'.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/app-store/posthog/DESCRIPTION.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nitems:\n  - 1.png\n---\n```\n\n----------------------------------------\n\nTITLE: Rendering Event Type Settings Component\nDESCRIPTION: Implementation of EventTypeSettings component with basic configuration including event type ID, delete permission, and success callback. The component allows customization through custom class names for styling.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/platform/atoms/event-type.mdx#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EventTypeSettings } from \"@calcom/atoms\";\n\nexport function EventTypeTabs(eventTypeId: number) {\n  return (\n    <>\n      <EventTypeSettings\n        id={eventTypeId}\n        allowDelete={true}\n        onSuccess={(eventType) => {\n          console.log(\"EventType settings updated successfully\", eventType);\n        }}\n        customClassNames={{ atomsWrapper: \"!w-[70vw] !m-auto\" }}\n      />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Gallery Image Items in YAML\nDESCRIPTION: A YAML frontmatter block that specifies a collection of JPEG images for a gallery. The configuration uses the 'items' key to list three numbered JPEG files that should be included in the gallery display.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/app-store/deel/DESCRIPTION.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nitems:\n  - 1.jpeg\n  - 2.jpeg\n  - 3.jpeg\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Pipedrive Assets in YAML Front Matter\nDESCRIPTION: A YAML front matter block that defines assets related to the Pipedrive integration, specifically referencing a banner image file.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/app-store/pipedrive-crm/DESCRIPTION.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nitems:\n  - pipedrive-banner.jpeg\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Image Items List in YAML\nDESCRIPTION: YAML configuration that defines an 'items' array containing sequential image filenames from 1.jpg to 5.jpg. Used to specify a collection of image resources.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/app-store/lindy/DESCRIPTION.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nitems:\n  - 1.jpg\n  - 2.jpg\n  - 3.jpg\n  - 4.jpg\n  - 5.jpg\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Website Images in YAML\nDESCRIPTION: A YAML configuration block that defines an array of image filenames to be used on a website. The configuration lists three JPEG images named numerically from 1 to 3.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/app-store/routing-forms/DESCRIPTION.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nitems:\n  - 1.jpg\n  - 2.jpg\n  - 3.jpg\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Image Gallery Items in YAML\nDESCRIPTION: This YAML snippet defines an 'items' array containing filenames for JPEG images. It's likely used to configure a gallery or slideshow component, specifying the order and names of images to be displayed.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/app-store/hitpay/DESCRIPTION.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nitems:\n  - 1.jpeg\n  - 2.jpeg\n  - 3.jpeg\n  - 4.jpeg\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Image Gallery Items in YAML\nDESCRIPTION: This YAML snippet defines an 'items' list containing three JPEG image filenames. It's likely used to configure which images should be displayed in a gallery or slideshow component.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/app-store/dialpad/DESCRIPTION.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nitems:\n  - 1.jpeg\n  - 2.jpeg\n  - 3.jpeg\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Resources in YAML\nDESCRIPTION: YAML configuration block specifying image resources, containing a single image file reference '1.jpg'\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/app-store/plausible/DESCRIPTION.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nitems:\n  - 1.jpg\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Image Items List in YAML\nDESCRIPTION: A YAML configuration block that defines an array of image filenames under the 'items' key. The configuration is bounded by triple dashes (---) and contains three PNG image references.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/app-store/basecamp3/DESCRIPTION.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nitems:\n  - 1.png\n  - 2.png\n  - 3.png\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Image List in YAML Frontmatter\nDESCRIPTION: A YAML frontmatter block that defines an 'items' array containing three JPEG image filenames. This configuration likely controls which images are displayed or processed within the project.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/app-store/jelly/DESCRIPTION.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nitems:\n  - 1.jpeg\n  - 2.jpeg\n  - 3.jpeg\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Jitsi Media Items in YAML\nDESCRIPTION: This YAML block defines media items related to Jitsi, specifically referencing a 'jitsi1.jpg' image file that is likely used in the documentation or interface.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/app-store/jitsivideo/DESCRIPTION.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nitems:\n  - jitsi1.jpg\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Content Items in YAML Frontmatter\nDESCRIPTION: YAML frontmatter configuration that specifies a list of content items including a YouTube video iframe and two image files. The configuration uses YAML's array syntax with mixed object and string values.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/app-store/alby/DESCRIPTION.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nitems:\n  - iframe: { src: https://www.youtube.com/embed/tExtOJqnI0Q }\n  - 1.jpg\n  - 2.png\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Mirotalk Assets and Dependencies\nDESCRIPTION: YAML configuration that defines required image assets (1.jpeg and 2.jpeg) for the Mirotalk integration.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/app-store/mirotalk/DESCRIPTION.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nitems:\n  - 1.jpeg\n  - 2.jpeg\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Image Items in YAML for Cal.com Carousel\nDESCRIPTION: A YAML configuration block that defines an array of image filenames to be used in a carousel or gallery component. The configuration lists 8 sequential JPG images (1.jpg through 8.jpg) that will be displayed in order.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/app-store/around/DESCRIPTION.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nitems:\n  - 1.jpg\n  - 2.jpg\n  - 3.jpg\n  - 4.jpg\n  - 5.jpg\n  - 6.jpg\n  - 7.jpg\n  - 8.jpg\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Items in YAML\nDESCRIPTION: YAML configuration that defines a list of image filenames under the 'items' key. Contains references to two Nextcloud Talk related image files.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/app-store/nextcloudtalk/DESCRIPTION.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nitems:\n  - nextcloudtalk1.jpg\n  - nextcloudtalk2.jpg\n---\n```\n\n----------------------------------------\n\nTITLE: Running Mintlify Development Server\nDESCRIPTION: Command to start the Mintlify development server. This should be run at the root of your documentation where the mint.json file is located.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/README.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmintlify dev\n```\n\n----------------------------------------\n\nTITLE: Defining Image Items List in YAML\nDESCRIPTION: A YAML configuration block that defines an array of JPEG image files to be used in a gallery or carousel component. The configuration uses the 'items' key to list three JPEG images that will likely be displayed sequentially.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/app-store/skype/DESCRIPTION.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nitems:\n  - 1.jpeg\n  - 2.jpeg\n  - 3.jpeg\n---\n```\n\n----------------------------------------\n\nTITLE: Setting Database URL Environment Variable\nDESCRIPTION: Example configuration for the DATABASE_URL environment variable in the .env file, specifying PostgreSQL connection details.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/developing/local-development.mdx#2025-04-20_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nDATABASE_URL='postgresql://<user>:<pass>@<db-host>:<db-port>'\n```\n\n----------------------------------------\n\nTITLE: Defining Image Assets in YAML\nDESCRIPTION: YAML configuration specifying required Google Meet integration image assets used for interface elements\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/app-store/googlevideo/DESCRIPTION.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nitems:\n  - gmeet1.png\n  - gmeet2.png\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Image Gallery Items in YAML for Cal.com Project\nDESCRIPTION: A YAML configuration that lists preview images to be included in the Cal.com project gallery. It specifies four different preview images demonstrating various features of the Cal.com application.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/app-store/clic/DESCRIPTION.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nitems:\n  - preview.png\n  - previewcheckins.png\n  - previewcontacts.png\n  - previewcreation.png\n---\n```\n\n----------------------------------------\n\nTITLE: Setting ZohoCRM OAuth Redirect URL\nDESCRIPTION: The OAuth redirect URL format for ZohoCRM integration with Cal.com.\nSOURCE: https://github.com/calcom/cal.com/blob/main/docs/self-hosting/apps/install-apps/zoho.mdx#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n<Cal.com URL>/api/integrations/zohocrm/callback\n```\n\n----------------------------------------\n\nTITLE: Defining an Image Collection in YAML Front Matter\nDESCRIPTION: This YAML front matter block defines an 'items' list containing three JPEG image filenames. This configuration pattern is commonly used to associate multiple images with a document or page in static site generators like Jekyll, Hugo, or Next.js.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/app-store/mock-payment-app/DESCRIPTION.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nitems:\n  - 1.jpeg\n  - 2.jpeg\n  - 3.jpeg\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Assets List in YAML\nDESCRIPTION: A YAML configuration block that defines a list of image files under the 'items' key. The configuration includes two JPEG image files named '1.jpeg' and '2.jpeg'.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/app-store/greetmate-ai/DESCRIPTION.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nitems:\n  - 1.jpeg\n  - 2.jpeg\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Image Assets in YAML\nDESCRIPTION: YAML configuration that lists image assets (1.png through 6.png) that are likely screenshots or diagrams related to Huddle01 integration with Cal.com.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/app-store/huddle01video/DESCRIPTION.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nitems:\n  - 1.png\n  - 2.png\n  - 3.png\n  - 4.png\n  - 5.png\n  - 6.png\n---\n```\n\n----------------------------------------\n\nTITLE: YAML Image Asset Configuration\nDESCRIPTION: YAML configuration block defining image assets related to Microsoft Teams integration, listing 5 image files with different formats.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/app-store/office365video/DESCRIPTION.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nitems:\n  - teams1.png\n  - teams2.png\n  - teams3.jpeg\n  - teams4.png\n  - teams5.png\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Image Gallery Items in YAML\nDESCRIPTION: YAML configuration that specifies a list of four JPEG images to be included in a gallery or slideshow. The images are referenced by their filenames and are organized under an 'items' key.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/app-store/discord/DESCRIPTION.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nitems:\n  - 1.jpg\n  - 2.jpg\n  - 3.jpg\n  - 4.jpg\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Image Assets in YAML for Cal.com Project\nDESCRIPTION: This YAML snippet defines a list of image assets under the 'items' key. It specifies a single image file '1.png' to be used in the Cal.com project.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/app-store/matomo/DESCRIPTION.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nitems:\n  - 1.png\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Assets for Telegram Integration\nDESCRIPTION: YAML configuration block that specifies a list of image assets (1.jpg, 2.jpg, 3.jpg) to be used with the Telegram integration functionality.\nSOURCE: https://github.com/calcom/cal.com/blob/main/packages/app-store/telegram/DESCRIPTION.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nitems:\n  - 1.jpg\n  - 2.jpg\n  - 3.jpg\n---\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js Development Server\nDESCRIPTION: Commands to run the Next.js development server using either npm or yarn. This will start the server and allow you to view your application at http://localhost:3000.\nSOURCE: https://github.com/calcom/cal.com/blob/main/apps/swagger/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n```"
  }
]