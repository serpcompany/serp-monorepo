[
  {
    "owner": "ibm",
    "repo": "api-samples",
    "content": "TITLE: Using Body Parameters with apiclient.py\nDESCRIPTION: Demonstrates how to make a POST request with body parameters and specify the content type. This example bulkloads data to an existing reference set.\nSOURCE: https://github.com/ibm/api-samples/blob/master/apiclient.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython apiclient.py --api /referencedata/sets/bulkLoad/exampleset\n        --method POST --content_type=\"application/json\"\n        --params data=\"['value1','value2','value3']\"\n```\n\n----------------------------------------\n\nTITLE: Manipulating Reference Sets in Python\nDESCRIPTION: This script demonstrates how to interact with reference sets using the REST API. It shows operations for managing IP addresses in suspect and blocked lists, integrating with external systems for IP validation and blocking.\nSOURCE: https://github.com/ibm/api-samples/blob/master/reference_data/readme.md#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n### 01_Sets.py\nIn this sample you will see how data in reference sets can be\nmanipulated using the REST API.\n\nIn this scenario we have already configured two reference sets in the\nproduct, one to capture ip addresses exhibiting suspect behavior and \nanother to hold blocked ip addresses.\n\nA custom rule is defined to identify suspect ip addresses based on\nbusiness rules.\nA second rule is defined to generate offenses based on blocked ip\naddresses accessing certain network resources.\n```\n\n----------------------------------------\n\nTITLE: Creating, Updating, and Deleting Tenants with QRadar API in Python\nDESCRIPTION: This script shows how to perform CRUD operations (Create, Read, Update, Delete) on tenants using the QRadar API. It demonstrates more complex interactions with the API endpoints.\nSOURCE: https://github.com/ibm/api-samples/blob/master/tenant/readme.md#2025-04-22_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n02_CreateUpdateDeleteTenant.py\n```\n\n----------------------------------------\n\nTITLE: Managing Multi-Level Security Authorization with Reference Tables in Python\nDESCRIPTION: This script showcases operations on reference tables via the REST API. It manages a multi-level security authorization system, tracking user access to general and secure networks, and implements business rules for access expiration and reporting.\nSOURCE: https://github.com/ibm/api-samples/blob/master/reference_data/readme.md#2025-04-22_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n### 04_Tables.py\nIn this example we will see how data in reference tables can be manipulated\nusing the REST API.\n \nOur company has has a multi-level security authorization architecture. Users\nare assigned an authorization server that they must use to log in to the\nnetwork. Once inside the general network, some users are authorized to access\nthe secure network. They use a different authorization server and must\nconnect through an assigned port.\n```\n\n----------------------------------------\n\nTITLE: Managing Reference Maps for Server Access Control in Python\nDESCRIPTION: This script shows how to work with reference maps via the REST API. It manages server access for security administrators based on shift schedules and server assignments, integrating with an HR system to update access permissions.\nSOURCE: https://github.com/ibm/api-samples/blob/master/reference_data/readme.md#2025-04-22_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n### 02_Maps.py\nIn this example we will see how data in reference maps can be\nmanipulated using the REST API.\n\nOur organization has several secure servers that can only be accessed\nby security administrators. These administrators can only access these\nservers during their scheduled shift and only one administrator is ever\non duty for a single server at one time (although one administrator can\nsupervise several servers at once). Furthermore some servers are not\nused during some shifts and so should not be accessed at all during this\ntime.\n```\n\n----------------------------------------\n\nTITLE: Creating and Updating Custom Actions and Scripts in Python\nDESCRIPTION: This script demonstrates posting and updating custom action scripts and custom actions. It shows how to create new scripts and actions, as well as update existing ones. Warning: This script modifies the QRadar system.\nSOURCE: https://github.com/ibm/api-samples/blob/master/custom_actions/readme.md#2025-04-22_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n04_postCustomActions.py\n```\n\n----------------------------------------\n\nTITLE: Utilizing Reference Maps of Sets for Login Monitoring in Python\nDESCRIPTION: This script demonstrates the use of reference maps of sets through the REST API. It captures login events on authentication servers, storing usernames associated with server IP addresses to monitor login activity across multiple servers.\nSOURCE: https://github.com/ibm/api-samples/blob/master/reference_data/readme.md#2025-04-22_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n### 03_MapOfSets.py\nIn this example we will see how data in reference maps of sets can be\nmanipulated using the REST API.\n\nOur company is an E-retailer serving customers around the world. We\nhave a number of authentication servers that allow our customers to log\nin securely to our site. The CIO of our company believes that as our business\nis growing these servers are becoming a bottleneck. He wants to monitor the\nactivity on these servers in real time through the digital dashboard of his\nexecutive support system.\n```\n\n----------------------------------------\n\nTITLE: Using Query Parameters with apiclient.py\nDESCRIPTION: Shows how to include query parameters in an API call using the --params flag. This example filters the /help/versions endpoint to only show version 6.0.\nSOURCE: https://github.com/ibm/api-samples/blob/master/apiclient.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython apiclient.py --api /help/versions --method GET --params filter=\"version=6.0\"\n```\n\n----------------------------------------\n\nTITLE: Managing DSM Event Mappings in Python\nDESCRIPTION: This script demonstrates how to work with DSM event mappings, including listing, creating, retrieving, and updating mappings using the API endpoints.\nSOURCE: https://github.com/ibm/api-samples/blob/master/data_classification/readme.md#2025-04-22_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n# 04_DsmEventMappings.py\n# This sample script demonstrates how to\n# + get a list of dsm event mappings\n# + create a new dsmevent mapping\n# + get a dsm event mapping by its id\n# + update an existing dsm event mapping\n```\n\n----------------------------------------\n\nTITLE: Using Path Parameters with apiclient.py\nDESCRIPTION: Demonstrates how to make an API call with path parameters that modify the endpoint. This example retrieves a reference set identified by the name 'exampleset'.\nSOURCE: https://github.com/ibm/api-samples/blob/master/apiclient.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython apiclient.py --api /referencedata/sets/exampleset --method GET\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Action Parameters in Python\nDESCRIPTION: This Python script demonstrates how to access user-defined parameters passed to a custom action in QRadar. It prints out all parameters and their values.\nSOURCE: https://github.com/ibm/api-samples/blob/master/custom_actions/custom_action_samples/readme.md#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport sys\n\nprint(\"Python Custom Action Sample\")\nprint(\"Parameters:\")\n\nfor i in range(1, len(sys.argv)):\n    print(f\"Parameter {i}: {sys.argv[i]}\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving Custom Actions in Python\nDESCRIPTION: This script illustrates how to fetch available custom actions using the Custom Actions REST API. It shows how to retrieve all actions and specific actions. Requires existing custom actions on the target system.\nSOURCE: https://github.com/ibm/api-samples/blob/master/custom_actions/readme.md#2025-04-22_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n03_getCustomActions.py\n```\n\n----------------------------------------\n\nTITLE: Handling QID Records in Python\nDESCRIPTION: This script illustrates how to perform CRUD operations on QID records, including listing, creating, retrieving, and updating records via the API.\nSOURCE: https://github.com/ibm/api-samples/blob/master/data_classification/readme.md#2025-04-22_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n# 03_QidRecories.py\n# This sample script demonstrates how to\n# + get a list of qid records \n# + create a new qid record\n# + get a qid record by its id \n# + update an existing qid record\n```\n\n----------------------------------------\n\nTITLE: POST Domain Modification Operations in Python\nDESCRIPTION: Script demonstrating domain update operations using POST endpoints, including creation of test domains and verification of successful updates.\nSOURCE: https://github.com/ibm/api-samples/blob/master/domain_management/readme.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n03_ModifyDomain.py\n```\n\n----------------------------------------\n\nTITLE: Configuring QRadar API Connection in Python\nDESCRIPTION: Example configuration file structure for connecting to the QRadar API. Includes server IP, authentication details, and optional certificate file path.\nSOURCE: https://github.com/ibm/api-samples/blob/master/readme.md#2025-04-22_snippet_0\n\nLANGUAGE: INI\nCODE:\n```\n[DEFAULT]\nserver_ip = {IP ADDRESS}\nauth_token = {AUTH TOKEN} (Optional)\nusername = {USERNAME} (Optional)\npassword = {PASSWORD} (Optional)\ncertificate_file = {CERTIFICATE FILE} (Optional)\n```\n\n----------------------------------------\n\nTITLE: Basic GET Request with apiclient.py\nDESCRIPTION: Makes a basic GET request to an API endpoint that requires no parameters. This example shows the simplest form of API call.\nSOURCE: https://github.com/ibm/api-samples/blob/master/apiclient.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython apiclient.py --api /help/versions --method GET\n```\n\n----------------------------------------\n\nTITLE: Fetching Custom Action Scripts in Python\nDESCRIPTION: This script shows how to retrieve available custom action scripts using the Custom Actions REST API. It demonstrates fetching all scripts and specific scripts. Requires existing custom action scripts on the target system.\nSOURCE: https://github.com/ibm/api-samples/blob/master/custom_actions/readme.md#2025-04-22_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n02_GetCustomActionScripts.py\n```\n\n----------------------------------------\n\nTITLE: Retrieving Tenant List with QRadar API in Python\nDESCRIPTION: This script demonstrates how to retrieve the list of tenants using a simple request to a QRadar API endpoint. It serves as an introduction to making API calls to QRadar.\nSOURCE: https://github.com/ibm/api-samples/blob/master/tenant/readme.md#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n01_GetTenant.py\n```\n\n----------------------------------------\n\nTITLE: GET Domain Operations in Python\nDESCRIPTION: Script demonstrating read-only GET operations for retrieving domain information including listing all domains, accessing individual domains, and handling non-existent domain scenarios.\nSOURCE: https://github.com/ibm/api-samples/blob/master/domain_management/readme.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n01_GetDomain.py\n```\n\n----------------------------------------\n\nTITLE: Retrieving High-Level Categories in Python\nDESCRIPTION: This script demonstrates how to get a list of high-level categories and retrieve a single high-level category by its ID using the API.\nSOURCE: https://github.com/ibm/api-samples/blob/master/data_classification/readme.md#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n# 01_HighLevelCategories.py\n# This sample script demonstrates how to\n# + get a list of high level categories\n# + get a single high level category by its id\n```\n\n----------------------------------------\n\nTITLE: Retrieving Custom Action Interpreters in Python\nDESCRIPTION: This script demonstrates how to retrieve available custom action interpreters using the Custom Actions REST API. It shows how to fetch all interpreters and specific interpreters.\nSOURCE: https://github.com/ibm/api-samples/blob/master/custom_actions/readme.md#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n01_getCustomActionInterpreters.py\n```\n\n----------------------------------------\n\nTITLE: Custom Configuration Section for QRadar API in Python\nDESCRIPTION: Example of adding a custom configuration section to the config.ini file for the QRadar API client. Allows for multiple configurations in a single file.\nSOURCE: https://github.com/ibm/api-samples/blob/master/readme.md#2025-04-22_snippet_1\n\nLANGUAGE: INI\nCODE:\n```\n[my_custom_config]\nusername = {my_other_username}\npassword = {my_other_password}\n```\n\n----------------------------------------\n\nTITLE: Managing Low-Level Categories in Python\nDESCRIPTION: This script shows how to retrieve a list of low-level categories and get a single low-level category by its ID using the API.\nSOURCE: https://github.com/ibm/api-samples/blob/master/data_classification/readme.md#2025-04-22_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n# 02_LowLevelCategories.py\n# This sample script demonstrates how to\n# + get a list of low level categories\n# + get a single low level category by its id\n```\n\n----------------------------------------\n\nTITLE: Deleting Custom Actions and Scripts in Python\nDESCRIPTION: This script shows how to delete custom action scripts and custom actions from the QRadar system. It demonstrates the process of removing all custom action scripts and actions. Warning: This script modifies the QRadar system.\nSOURCE: https://github.com/ibm/api-samples/blob/master/custom_actions/readme.md#2025-04-22_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n05_deleteCustomActions.py\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Action Parameters in Perl\nDESCRIPTION: This Perl script shows how to access user-defined parameters passed to a custom action in QRadar. It prints out all parameters and their values.\nSOURCE: https://github.com/ibm/api-samples/blob/master/custom_actions/custom_action_samples/readme.md#2025-04-22_snippet_1\n\nLANGUAGE: Perl\nCODE:\n```\n#!/usr/bin/perl\n\nprint \"Perl Custom Action Sample\\n\";\nprint \"Parameters:\\n\";\n\nfor my $i (1 .. $#ARGV) {\n    print \"Parameter $i: $ARGV[$i]\\n\";\n}\n```\n\n----------------------------------------\n\nTITLE: Domain Management Helper Utilities in Python\nDESCRIPTION: Helper module containing utility methods for domain operations, including setup_domain() method for creating new domains via the API.\nSOURCE: https://github.com/ibm/api-samples/blob/master/domain_management/readme.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndomainutil.py\n```\n\n----------------------------------------\n\nTITLE: DELETE Domain Operations in Python\nDESCRIPTION: Script showing how to delete domains and handle repeated deletion attempts. Creates temporary test domains with non-existing source IDs to avoid impacting system functionality.\nSOURCE: https://github.com/ibm/api-samples/blob/master/domain_management/readme.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n02_DeleteDomain.py\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Action Parameters in Bash\nDESCRIPTION: This Bash script demonstrates how to access user-defined parameters passed to a custom action in QRadar. It prints out all parameters and their values.\nSOURCE: https://github.com/ibm/api-samples/blob/master/custom_actions/custom_action_samples/readme.md#2025-04-22_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\n#!/bin/bash\n\necho \"Bash Custom Action Sample\"\necho \"Parameters:\"\n\nfor i in \"$@\"\ndo\n    echo \"Parameter $count: $i\"\n    count=$((count+1))\ndone\n```\n\n----------------------------------------\n\nTITLE: Listing Directory Structure\nDESCRIPTION: Overview of sample script filenames and their purposes. Each script demonstrates different SIEM API operations including offense retrieval, status management, notes handling, and address querying.\nSOURCE: https://github.com/ibm/api-samples/blob/master/siem/readme.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n01_GetOffenses.py\n02_HideOffenses.py\n03_ShowOffense.py\n04_Notes.py\n05_ClosingReasons.py\n06_ClosingAnOffense\n07_ManagingOffenses.py\n08_GetOffenseAddresses.py\n09_GetOffensesForIp.py\n10_GetOffenseTypes.py\n```\n\n----------------------------------------\n\nTITLE: CSV Data Format Example\nDESCRIPTION: Sample format for assignment_data.csv file used in script 07_ManagingOffenses.py. The file contains user assignments with network destinations and closure timeframes.\nSOURCE: https://github.com/ibm/api-samples/blob/master/siem/readme.md#2025-04-22_snippet_1\n\nLANGUAGE: csv\nCODE:\n```\nname,destination_network,days_to_close\n```"
  }
]