[
  {
    "owner": "mercadopago",
    "repo": "sdk-php",
    "content": "TITLE: Requiring Mercado Pago Library\nDESCRIPTION: Includes the necessary Mercado Pago library files using Composer's autoloader.  This makes the Mercado Pago classes and functions available for use in your PHP script. It is a prerequisite to using the SDK.\nSOURCE: https://github.com/mercadopago/sdk-php/blob/master/README.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nrequire_once 'vendor/autoload.php';\n\nuse MercadoPago\\Client\\Common\\RequestOptions;\nuse MercadoPago\\Client\\Order\\OrderClient;\nuse MercadoPago\\Exceptions\\MPApiException;\nuse MercadoPago\\MercadoPagoConfig;\n```\n\n----------------------------------------\n\nTITLE: Setting Mercado Pago Access Token\nDESCRIPTION: Configures the Mercado Pago SDK with your access token, which is required for authentication and authorization when making API requests. Replace `<ACCESS_TOKEN>` with your actual access token.\nSOURCE: https://github.com/mercadopago/sdk-php/blob/master/README.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nMercadoPagoConfig::setAccessToken(\"<ACCESS_TOKEN>\");\n```\n\n----------------------------------------\n\nTITLE: Handling Mercado Pago API Exceptions\nDESCRIPTION: Demonstrates how to catch and handle `MPApiException` and generic `Exception` errors that may occur during API requests.  It retrieves and displays the status code and content of the API response in case of an error.\nSOURCE: https://github.com/mercadopago/sdk-php/blob/master/README.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\ntry{\n    // Do your stuff here\n} catch (MPApiException $e) {\n    // Handle API exceptions\n    echo \"Status code: \" . $e->getApiResponse()->getStatusCode() . \"\\n\";\n    echo \"Content: \";\n    var_dump($e->getApiResponse()->getContent());\n    echo \"\\n\";\n} catch (\\Exception $e) {\n    // Handle all other exceptions\n    echo $e->getMessage();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Mercado Pago PHP SDK with Composer\nDESCRIPTION: Installs the Mercado Pago PHP SDK using Composer. This command adds the SDK as a dependency to your project, allowing you to use its features for integrating with Mercado Pago.\nSOURCE: https://github.com/mercadopago/sdk-php/blob/master/README.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\ncomposer require \"mercadopago/dx-php:3.2.0\"\n```\n\n----------------------------------------\n\nTITLE: Authenticating for Checkout Pro\nDESCRIPTION: Authenticates the application with Mercado Pago by setting the access token.  It retrieves the access token from an environment variable and configures the SDK.  It also demonstrates setting the runtime environment (e.g., LOCAL for testing).\nSOURCE: https://github.com/mercadopago/sdk-php/blob/master/README.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\nprotected function authenticate()\n{\n    // Getting the access token from .env file (create your own function)\n    $mpAccessToken = getVariableFromEnv('mercado_pago_access_token');\n    // Set the token the SDK's config\n    MercadoPagoConfig::setAccessToken($mpAccessToken);\n    // (Optional) Set the runtime enviroment to LOCAL if you want to test on localhost\n    // Default value is set to SERVER\n    MercadoPagoConfig::setRuntimeEnviroment(MercadoPagoConfig::LOCAL);\n}\n```\n\n----------------------------------------\n\nTITLE: MercadoPago v3 Initialization and Payment Client Creation\nDESCRIPTION: This snippet shows the updated initialization process and payment client creation in MercadoPago PHP SDK version 3.  It uses namespaces and the `PaymentClient` for payment operations.\nSOURCE: https://github.com/mercadopago/sdk-php/blob/master/MIGRATION_GUIDE.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nrequire_once './vendor/autoload.php';\n\nuse MercadoPago\\Client\\Payment\\PaymentClient;\nuse MercadoPago\\MercadoPagoConfig;\n\nMercadoPagoConfig::setAccessToken(\"<ACCESS_TOKEN>\");\n\n$client = new PaymentClient();\n```\n\n----------------------------------------\n\nTITLE: Creating Payment Preference for Checkout Pro\nDESCRIPTION: Creates a payment preference using the `PreferenceClient`.  It constructs the request array with product and payer information, sends the request to the Mercado Pago API, and returns the created preference object. Exception handling is included.\nSOURCE: https://github.com/mercadopago/sdk-php/blob/master/README.md#_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\npublic function createPaymentPreference(): ?Preference\n{\n    // Fill the data about the product(s) being purchased\n    $product1 = array(\n        \"id\" => \"1234567890\",\n        \"title\" => \"Product 1 Title\",\n        \"description\" => \"Product 1 Description\",\n        \"currency_id\" => \"BRL\",\n        \"quantity\" => 12,\n        \"unit_price\" => 9.90\n    );\n\n    $product2 = array(\n        \"id\" => \"9012345678\",\n        \"title\" => \"Product 2 Title\",\n        \"description\" => \"Product 2 Description\",\n        \"currency_id\" => \"BRL\",\n        \"quantity\" => 5,\n        \"unit_price\" => 19.90\n    );\n\n    // Mount the array of products that will integrate the purchase amount\n    $items = array($product1, $product2);\n\n    // Retrieve information about the user (use your own function)\n    $user = getSessionUser();\n\n    $payer = array(\n        \"name\" => $user->name,\n        \"surname\" => $user->surname,\n        \"email\" => $user->email,\n    );\n\n    // Create the request object to be sent to the API when the preference is created\n    $request = createPreferenceRequest($item, $payer);\n\n    // Instantiate a new Preference Client\n    $client = new PreferenceClient();\n\n    try {\n        // Send the request that will create the new preference for user's checkout flow\n        $preference = $client->create($request);\n\n        // Useful props you could use from this object is 'init_point' (URL to Checkout Pro) or the 'id'\n        return $preference;\n    } catch (MPApiException $error) {\n        // Here you might return whatever your app needs.\n        // We are returning null here as an example.\n        return null;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: MercadoPago v3 Payment Creation Example\nDESCRIPTION: This example demonstrates payment creation using the PaymentClient in MercadoPago PHP SDK version 3.  It shows how to construct the request array and handle potential API exceptions.\nSOURCE: https://github.com/mercadopago/sdk-php/blob/master/MIGRATION_GUIDE.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n$client = new PaymentClient();\n$request = array(\n    \"transaction_amount\" => 100,\n    \"description\" => \"<PRODUCT_DESCRIPTION>\",\n    \"payment_method_id\" => \"<PAYMENT_METHOD_ID>\",\n    \"payer\" => [\n        \"email\" => \"<PAYER_EMAIL>\",\n        \"first_name\" => \"<PAYER_FIRST_NAME>\",\n        \"last_name\" => \"<PAYER_LAST_NAME>\",\n        \"identification\" => [\n            \"type\" => \"<IDENTIFICATION_TYPE>\",\n            \"number\" => \"<IDENTIFICATION_NUMBER>\"\n        ],\n        \"address\" =>  [\n            \"zip_code\" => \"<ZIP_CODE>\",\n            \"street_name\" => \"<STREET_NAME>\",\n            \"street_number\" => \"<STREET_NUMBER>\",\n            \"neighborhood\" => \"<NEIGHBORHOOD>\",\n            \"city\" => \"<CITY>\",\n            \"federal_unit\" => \"<FEDERAL_UNIT>\"\n        ]\n    ]\n);\n\ntry {\n    $payment = $client->create($request);\n    echo \"Payment ID: $payment->id\\n\";\n    echo \"Payment Status: $payment->status\\n\";\n} catch (MPApiException $e) {\n    var_dump($e);\n} catch (Exception $e) {\n    var_dump($e);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Order Request Array\nDESCRIPTION: Creates an array containing the parameters for creating an order.  This array defines the details of the order, such as the type, amount, external reference, and payer information. The values for email and card token must be replaced with actual data.\nSOURCE: https://github.com/mercadopago/sdk-php/blob/master/README.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n$request = [\n            \"type\" => \"online\",\n            \"processing_mode\" => \"automatic\",\n            \"total_amount\" => \"1000.00\",\n            \"external_reference\" => \"ext_ref_1234\",\n            \"capture_mode\" => \"automatic_async\",\n            \"payer\" => [\n                \"email\" => \"<PAYER_EMAIL>\",\n            ],\n            \"transactions\" => [\n                \"payments\" => [\n                [\n                    \"amount\" => \"1000.00\",\n                    \"payment_method\" => [\n                        \"id\" => \"master\",\n                        \"type\" => \"credit_card\",\n                        \"token\" => \"<CARD_TOKEN>\",\n                        \"installments\" => 1,\n                        \"statement_descriptor\" => \"Store name\",\n                    ]\n                ]\n            ]\n        ],\n    ];\n```\n\n----------------------------------------\n\nTITLE: Creating Order with Request Options\nDESCRIPTION: Creates an order using the `OrderClient`, passing the request array and request options. This sends the request to the Mercado Pago API to create the order.\nSOURCE: https://github.com/mercadopago/sdk-php/blob/master/README.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n$order = $client->create($request, $request_options);\n```\n\n----------------------------------------\n\nTITLE: Creating Preference Request Array for Checkout Pro\nDESCRIPTION: Creates an array containing the parameters for creating a preference for Checkout Pro.  This array defines the items being purchased, payer information, payment methods, back URLs, and other settings related to the checkout experience.\nSOURCE: https://github.com/mercadopago/sdk-php/blob/master/README.md#_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\n// Function that will return a request object to be sent to Mercado Pago API\nfunction createPreferenceRequest($items, $payer): array\n{\n    $paymentMethods = [\n        \"excluded_payment_methods\" => [],\n        \"installments\" => 12,\n        \"default_installments\" => 1\n    ];\n\n    $backUrls = array(\n        'success' => route('mercadopago.success'),\n        'failure' => route('mercadopago.failed')\n    );\n\n    $request = [\n        \"items\" => $items,\n        \"payer\" => $payer,\n        \"payment_methods\" => $paymentMethods,\n        \"back_urls\" => $backUrls,\n        \"statement_descriptor\" => \"NAME_DISPLAYED_IN_USER_BILLING\",\n        \"external_reference\" => \"1234567890\",\n        \"expires\" => false,\n        \"auto_return\" => 'approved',\n    ];\n\n    return $request;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Order Client\nDESCRIPTION: Initializes the `OrderClient` object, which is used to interact with the Mercado Pago Orders API.  This client is responsible for creating and managing orders.\nSOURCE: https://github.com/mercadopago/sdk-php/blob/master/README.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n$client = new OrderClient();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Preference by ID\nDESCRIPTION: Retrieves a preference from Mercado Pago by its ID using the `PreferenceClient`.  This allows you to access and inspect the details of an existing preference.\nSOURCE: https://github.com/mercadopago/sdk-php/blob/master/README.md#_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\n    $client = new PreferenceClient();\n    $client->get(\"123456789\");\n```\n\n----------------------------------------\n\nTITLE: Handling ApiException in MercadoPago v3\nDESCRIPTION: This snippet shows how to catch and handle `MPApiException` in MercadoPago PHP SDK v3, accessing the status code and content of the API response.\nSOURCE: https://github.com/mercadopago/sdk-php/blob/master/MIGRATION_GUIDE.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\ncatch (MPApiException $e) {\n    echo $e->getApiResponse()->getStatusCode();\n    echo $e->getApiResponse()->getContent();\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Request Options for Idempotency\nDESCRIPTION: Creates request options and sets a custom header for idempotency.  The `X-Idempotency-Key` header ensures that the request is processed only once, even if it's sent multiple times. Replace `<SOME_UNIQUE_VALUE>` with a unique identifier for each request.\nSOURCE: https://github.com/mercadopago/sdk-php/blob/master/README.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n$request_options = new RequestOptions();\n$request_options->setCustomHeaders([\"X-Idempotency-Key: <SOME_UNIQUE_VALUE>\"]);\n```\n\n----------------------------------------\n\nTITLE: MercadoPago v2 Payment Creation Example\nDESCRIPTION: This example illustrates how to create a payment in MercadoPago PHP SDK version 2, including setting transaction details, payer information, and saving the payment.\nSOURCE: https://github.com/mercadopago/sdk-php/blob/master/MIGRATION_GUIDE.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n$payment = new MercadoPago\\Payment();\n$payment->transaction_amount = 100;\n$payment->description = \"<PRODUCT_DESCRIPTION>\";\n$payment->payment_method_id = \"<PAYMENT_METHOD_ID>\";\n$payment->payer = array(\n    \"email\" => \"<PAYER_EMAIL>\",\n    \"first_name\" => \"<PAYER_FIRST_NAME>\",\n    \"last_name\" => \"<PAYER_LAST_NAME>\",\n    \"identification\" => array(\n        \"type\" => \"<IDENTIFICATION_TYPE>\",\n        \"number\" => \"<IDENTIFICATION_NUMBER>\"\n     ),\n    \"address\"=>  array(\n        \"zip_code\" => \"<ZIP_CODE>\",\n        \"street_name\" => \"<STREET_NAME>\",\n        \"street_number\" => \"<STREET_NUMBER>\",\n        \"neighborhood\" => \"<NEIGHBORHOOD>\",\n        \"city\" => \"<CITY>\",\n        \"federal_unit\" => \"<FEDERAL_UNIT>\"\n     )\n  );\n\n$payment->save();\n\nvar_dump($payment);\n```\n\n----------------------------------------\n\nTITLE: MercadoPago v2 Initialization and Payment Creation\nDESCRIPTION: This snippet demonstrates how to initialize the MercadoPago SDK and create a payment object in version 2. It requires autoloading dependencies and setting the access token.\nSOURCE: https://github.com/mercadopago/sdk-php/blob/master/MIGRATION_GUIDE.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nrequire_once './vendor/autoload.php';\n\nMercadoPago\\SDK::setAccessToken(\"<ACCESS_TOKEN>\");\n\n$payment = new MercadoPago\\Payment();\n```\n\n----------------------------------------\n\nTITLE: Installing MercadoPago PHP SDK v3 using Composer\nDESCRIPTION: This command installs the latest version 3 of the MercadoPago PHP SDK using Composer. It adds the SDK as a dependency to the project.\nSOURCE: https://github.com/mercadopago/sdk-php/blob/master/MIGRATION_GUIDE.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\ncomposer require \"mercadopago/dx-php:3.0.0\"\n```\n\n----------------------------------------\n\nTITLE: Installing pre-commit git hook scripts\nDESCRIPTION: This code snippet shows how to install the git hook scripts for the pre-commit tool within the SDK project. After navigating to the project directory, the command `pre-commit install` is executed. This sets up the git hooks, which will automatically run before each commit to enforce code style and formatting rules. Pre-commit tool is a prerequisite.\nSOURCE: https://github.com/mercadopago/sdk-php/blob/master/CODING_GUIDELINES.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ pre-commit install\n```\n\n----------------------------------------\n\nTITLE: Checking pre-commit version using command line\nDESCRIPTION: This code snippet demonstrates how to check the installed version of the pre-commit tool using the command line. The command `pre-commit --version` is executed in the terminal, and the expected output shows the installed version number. Ensure pre-commit is installed before running this command.\nSOURCE: https://github.com/mercadopago/sdk-php/blob/master/CODING_GUIDELINES.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ pre-commit --version\npre-commit 2.17.0\n```\n\n----------------------------------------\n\nTITLE: Handling Generic Exception in MercadoPago v3\nDESCRIPTION: This example shows how to catch generic `Exception` objects during MercadoPago operations. It typically handles errors that are not directly related to the MercadoPago API.\nSOURCE: https://github.com/mercadopago/sdk-php/blob/master/MIGRATION_GUIDE.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\ncatch (Exception $e) {\n    echo $e->getMessage();\n}\n```\n\n----------------------------------------\n\nTITLE: Requiring Checkout Pro Libraries\nDESCRIPTION: Includes the necessary Mercado Pago libraries for using Checkout Pro.  These classes are required for creating and managing preferences, which are used to initiate the checkout process.\nSOURCE: https://github.com/mercadopago/sdk-php/blob/master/README.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\nuse MercadoPago\\MercadoPagoConfig;\nuse MercadoPago\\Client\\Preference\\PreferenceClient;\nuse MercadoPago\\Exceptions\\MPApiException;\n```\n\n----------------------------------------\n\nTITLE: License Information - MIT License\nDESCRIPTION: This snippet displays the license information for the Mercado Pago SDK for PHP. It uses the MIT License. Copyright (c) 2023 - Mercado Pago / Mercado Libre. For more details, refer to the LICENSE file.\nSOURCE: https://github.com/mercadopago/sdk-php/blob/master/README.md#_snippet_13\n\nLANGUAGE: Text\nCODE:\n```\nMIT license. Copyright (c) 2023 - Mercado Pago / Mercado Libre\nFor more information, see the LICENSE file.\n```"
  }
]