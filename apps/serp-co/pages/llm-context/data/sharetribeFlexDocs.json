[
  {
    "owner": "sharetribe",
    "repo": "flex-docs",
    "content": "TITLE: Summary of Sharetribe Web Template Installation Steps\nDESCRIPTION: This code block summarizes the installation steps for setting up the Sharetribe Web Template. It includes cloning the repository, installing dependencies, running the configuration script, and starting the development server.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/introduction/getting-started-with-ftw-daily/index.md#2025-04-18_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/sharetribe/web-template.git\ncd web-template/\nyarn install\nyarn run config\nyarn run dev\n```\n\n----------------------------------------\n\nTITLE: Sample Analytics Report Output\nDESCRIPTION: Example output from running the analytics script, showing summary statistics for a marketplace.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/introduction/getting-started-with-integration-api/index.md#2025-04-18_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n================ My Marketplace analytics ================\n\nListings: 80\n - 4 draft(s)\n - 5 pending approval\n - 70 published\n - 1 closed\n\nUsers: 150\nTransactions: 25\n\nThis month, starting from Sun Dec 01 2019:\n - 3 new user(s)\n - 10 new listing(s)\n - 9 new transaction(s)\n```\n\n----------------------------------------\n\nTITLE: Implementing Percentage-Based Commissions in JavaScript\nDESCRIPTION: This snippet demonstrates how to configure percentage-based commissions for both providers and customers in a Sharetribe marketplace. It calculates commissions based on predefined percentages applied to the order total.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/concepts-pricing-and-commissions/commissions-and-monetizing-your-platform/index.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst PROVIDER_COMMISSION_PERCENTAGE = -12; // Provider commission is negative\nconst CUSTOMER_COMMISSION_PERCENTAGE = 10; // Customer commission is positive\n\nconst order = {\n  code,\n  unitPrice,\n  quantity,\n  includeFor: ['customer', 'provider'],\n};\n\nconst providerCommission = {\n  code: 'line-item/provider-commission',\n  unitPrice: calculateTotalFromLineItems([order]),\n  percentage: PROVIDER_COMMISSION_PERCENTAGE,\n  includeFor: ['provider'],\n};\n\nconst customerCommission = {\n  code: 'line-item/customer-commission',\n  unitPrice: calculateTotalFromLineItems([order]),\n  percentage: CUSTOMER_COMMISSION_PERCENTAGE,\n  includeFor: ['customer'],\n};\n\nconst lineItems = [order, providerCommission, customerCommission];\n```\n\n----------------------------------------\n\nTITLE: Configuring Listing Image Aspect Ratio in JavaScript\nDESCRIPTION: Configuration object that specifies the aspect ratio and image variants for marketplace listing images. Sets a 3:1 aspect ratio using the cropImage variant type.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-configuration/configuration-in-ftw-x/index.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport const listingImage = {\n  variantType: 'cropImage',\n  // Aspect ratio for listing image variants (width/height)\n  // Note: This will be converted to separate aspectWidth and aspectHeight values\n  // to make calculations easier.\n  aspectRatio: '3/1',\n  // Listings have custom image variants, which are named here.\n  variantPrefix: 'listing-card',\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Polling Loop with Local File State Storage in JavaScript\nDESCRIPTION: This snippet demonstrates a complete polling loop implementation for Sharetribe Flex events. It uses a local file to store the last processed event's sequence ID, allowing the application to resume polling from the correct position after restarts. The code includes functions for querying events, saving and loading state, and handling events.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-events/reacting-to-events/index.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst fs = require('fs');\n\n// Start polloing from current time on, when there's no stored state\nconst startTime = new Date();\n\n// Polling interval (in ms) when all events have been fetched.\nconst pollIdleWait = 300000; // 5 minutes\n// Polling interval (in ms) when a full page of events is received and there may be more\nconst pollWait = 1000; // 1s\n\n// File to keep state across restarts. Stores the last seen event sequence ID,\n// which allows continuing polling from the correct place\nconst stateFile = './last-sequence-id.state';\n\nconst queryEvents = args => {\n  var filter = { eventTypes: 'listing/created,listing/updated' };\n  return integrationSdk.events.query({ ...args, ...filter });\n};\n\nconst saveLastEventSequenceId = sequenceId => {\n  // Save state to local file\n  try {\n    fs.writeFileSync(stateFile, sequenceId);\n  } catch (err) {\n    throw err;\n  }\n};\n\nconst loadLastEventSequenceId = () => {\n  // Load state from local file, if any\n  try {\n    const data = fs.readFileSync(stateFile);\n    return parseInt(data, 10);\n  } catch (err) {\n    return null;\n  }\n};\n\nconst handleEvent = event => {\n  // detect change and handle event\n  // ...\n\n  // Then store the event's sequence ID\n  saveLastEventSequenceId(event.attributes.sequenceId);\n};\n\nconst pollLoop = sequenceId => {\n  var params = sequenceId\n    ? { startAfterSequenceId: sequenceId }\n    : { createdAtStart: startTime };\n  queryEvents(params).then(res => {\n    const events = res.data.data;\n    const fullPage = events.length === res.data.meta.perPage;\n    const delay = fullPage ? pollWait : pollIdleWait;\n    const lastEvent = events[events.length - 1];\n    const lastSequenceId = lastEvent\n      ? lastEvent.attributes.sequenceId\n      : sequenceId;\n\n    events.forEach(e => {\n      handleEvent(e);\n    });\n\n    setTimeout(() => {\n      pollLoop(lastSequenceId);\n    }, delay);\n  });\n};\n\n// Load state from local file, if any\nconst lastSequenceId = loadLastEventSequenceId();\n\n// kick off the polling loop\npollLoop(lastSequenceId);\n```\n\n----------------------------------------\n\nTITLE: Initiating Payment with Card Saving\nDESCRIPTION: SDK call to initiate payment while also saving card details for future use by setting setupPaymentMethodForSaving flag.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-payments/how-saving-payment-card-works-in-ftw/index.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nsdk.transactions.initiate({\n  processAlias,\n  transition: 'transition/request-payment',\n  params: {\n    listingId,\n    bookingStart,\n    bookingEnd,\n    setupPaymentMethodForSaving: true,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Stripe PaymentIntent Data Structure Example\nDESCRIPTION: Example JSON structure showing how PaymentIntent ID and client secret are stored in the transaction's protectedData map under the stripePaymentIntents key. This data is only accessible to the customer in the transaction.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/concepts-payments/how-payment-intents-work/index.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"default\": {\n    \"stripePaymentIntentId\": \"pi_1EXSEzLSea1GQQ9x5PnNTeuS\",\n    \"stripePaymentIntentClientSecret\": \"pi_1EXSEzLSea1GQQ9x5PnNTeuS_secret_Qau2uE5J5L6baPs8eLPMa2Swb\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Facebook Login in Sharetribe Web Template\nDESCRIPTION: Configure the Sharetribe Web Template with Facebook App ID and App Secret as environment variables. These values correspond to the client ID and client secret of the identity provider in Sharetribe Console.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-users-and-authentication/enable-facebook-login/index.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nREACT_APP_FACEBOOK_APP_ID=\"your_facebook_app_id\"\nFACEBOOK_APP_SECRET=\"your_facebook_app_secret\"\n```\n\n----------------------------------------\n\nTITLE: Confirming Payment Transaction\nDESCRIPTION: SDK call to confirm payment transaction after successful Stripe payment processing.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-payments/how-saving-payment-card-works-in-ftw/index.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nsdk.transactions.transition({\n  id: transactionId,\n  transition: 'transition/confirm-payment',\n  params,\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Sharetribe Web Template\nDESCRIPTION: This snippet demonstrates how to set environment variables for the Sharetribe Web Template using a .env file or directly in the production environment. It includes important notes on variable prefixes and security considerations.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-configuration/ftw-env/index.md#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# Development: Use .env file (gitignored)\n# Production: Set variables directly in the environment\n\n# Example variables:\nREACT_APP_MAPBOX_ACCESS_TOKEN=your_mapbox_token\nREACT_APP_GOOGLE_MAPS_API_KEY=your_google_maps_api_key\nREACT_APP_SHARETRIBE_SDK_CLIENT_ID=your_client_id\nSHARETRIBE_SDK_CLIENT_SECRET=your_client_secret\nREACT_APP_STRIPE_PUBLISHABLE_KEY=your_stripe_key\n\n# Important: Only use REACT_APP prefix for public variables\n# Never prefix sensitive data like client secrets with REACT_APP\n```\n\n----------------------------------------\n\nTITLE: Cloning Example Processes Repository\nDESCRIPTION: Command to clone the Sharetribe example processes repository containing process templates\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/tutorial-transaction-process/create-transaction-process/index.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/sharetribe/example-processes.git\n```\n\n----------------------------------------\n\nTITLE: Defining Transaction Process Structure in EDN Format - Clojure\nDESCRIPTION: Complete example of a transaction process definition including transitions, states, actions, and notifications. Shows how to configure payment flows, booking processes, and automated notifications using Sharetribe's EDN format.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/references/transaction-process-format/index.md#2025-04-18_snippet_0\n\nLANGUAGE: clojure\nCODE:\n```\n{\n :format :v3\n\n :transitions [{\n                :name :transition/request-payment\n                :actor :actor.role/customer\n                :privileged? true\n                :actions [{:name :action/create-pending-booking\n                           :config {:type :time}}\n                          {:name :privileged-set-line-items}\n                          {:name :action/stripe-create-payment-intent}]\n                :to :state/pending-payment\n                }\n\n               {:name :transition/expire-payment\n                :at {:fn/plus [{:fn/timepoint [:time/first-entered-state :state/pending-payment]}\n                               {:fn/period [\"PT15M\"]}]}\n                :actions [{:name :action/decline-booking}\n                          {:name :action/calculate-full-refund}\n                          {:name :action/stripe-refund-payment}]\n                :from :state/pending-payment\n                :to :state/payment-expired}\n\n               {:name :transition/confirm-payment,\n                :actor :actor.role/customer\n                :actions [{:name :action/stripe-confirm-payment-intent}],\n                :from :state/pending-payment\n                :to :state/preauthorized}\n\n               {:name :transition/accept\n                :actor :actor.role/provider\n                :actions [{:name :action/accept-booking}\n                          {:name :action/stripe-capture-payment-intent}]\n                :from :state/preauthorized\n                :to :state/accepted}\n\n               {:name :transition/decline\n                :actor :actor.role/provider\n                :actions [{:name :action/decline-booking}\n                          {:name :action/calculate-full-refund}\n                          {:name :action/stripe-refund-payment}]\n                :from :state/preauthorized\n                :to :state/declined}\n\n               {:name :transition/expire\n                :at {:fn/min [{:fn/plus [{:fn/timepoint [:time/first-entered-state :state/preauthorized]}\n                                         {:fn/period [\"P6D\"]}]}\n                              {:fn/plus [{:fn/timepoint [:time/booking-end]}\n                                         {:fn/period [\"P1D\"]}]}]}\n                :actions [{:name :action/decline-booking}\n                          {:name :action/calculate-full-refund}\n                          {:name :action/stripe-refund-payment}]\n                :from :state/preauthorized\n                :to :state/declined}\n\n               {:name :transition/complete\n                :at {:fn/timepoint [:time/booking-end]}\n                :actions [{:name :action/stripe-create-payout}]\n                :from :state/accepted\n                :to :state/delivered}\n\n               {:name :transition/cancel\n                :actor :actor.role/operator\n                :actions [{:name :action/cancel-booking}\n                          {:name :action/calculate-full-refund}\n                          {:name :action/stripe-refund-payment}]\n                :from :state/accepted\n                :to :state/cancelled}]\n\n :notifications [{\n                  :name :notification/new-booking-request\n                  :on :transition/confirm-payment\n                  :to :actor.role/provider\n                  :template :new-booking-request}\n\n                 {:name :notification/new-booking-request-reminder\n                  :on :transition/confirm-payment\n                  :to :actor.role/provider\n                  :at {:fn/min [{:fn/plus [{:fn/timepoint [:time/first-entered-state :state/preauthorized]}\n                                           {:fn/period [\"P5D\"]}]}\n                                {:fn/timepoint [:time/booking-end]}]}\n                  :template :new-booking-request-reminder}\n\n                 {:name :notification/booking-request-accepted\n                  :on :transition/accept\n                  :to :actor.role/customer\n                  :template :booking-request-accepted}\n\n                 {:name :notification/booking-request-declined\n                  :on :transition/decline\n                  :to :actor.role/customer\n                  :template :booking-request-declined}]}\n```\n\n----------------------------------------\n\nTITLE: Calculating Dynamic Provider Commission in JavaScript\nDESCRIPTION: This code calculates the provider commission percentage based on the booking length. For bookings longer than 5 nights, the commission is reduced by 3 percentage points.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-payments/customize-pricing/index.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Base provider and customer commissions are fetched from assets\nconst PROVIDER_COMMISSION_PERCENTAGE_REDUCTION = 3;\n\nconst calculateProviderCommissionPercentage = (\n  order,\n  providerCommission\n) =>\n  order.quantity > 5\n    ? providerCommission.percentage -\n      PROVIDER_COMMISSION_PERCENTAGE_REDUCTION\n    : providerCommission.percentage;\n```\n\n----------------------------------------\n\nTITLE: Initiating Payment with Saved Card\nDESCRIPTION: SDK call to initiate payment using a previously saved Stripe payment method.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-payments/how-saving-payment-card-works-in-ftw/index.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nsdk.transactions.initiate({\n  processAlias,\n  transition: 'transition/request-payment',\n  params: {\n    listingId,\n    bookingStart,\n    bookingEnd,\n    paymentMethod: stripePaymentMethodId,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Google Identity Provider Client Configuration in Sharetribe Console\nDESCRIPTION: This snippet shows the environment variables needed to configure the Sharetribe Web Template for Google login. It specifies the Client ID and Client Secret from the Google Sign-In project.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-users-and-authentication/enable-google-login/index.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- **`REACT_APP_GOOGLE_CLIENT_ID`** The Client ID of your Google Sing-In.\n  Corresponds to _client ID_ of the identity provider client in Console.\n- **`GOOGLE_CLIENT_SECRET`** The Client Secret of your Google Sign-In.\n```\n\n----------------------------------------\n\nTITLE: Implementing PaymentIntent flow in CheckoutPage component in JavaScript\nDESCRIPTION: Update the CheckoutPage component to handle the new PaymentIntent flow. This includes adding new API calls and executing them in sequence: onInitiateOrder, onConfirmCardPayment, onConfirmPayment, and onSendMessage.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-payments/enable-payment-intents-in-ftw/index.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// CheckoutPage: Add new API calls and execute in sequence\nonInitiateOrder()\n  .then(() => onConfirmCardPayment())\n  .then(() => onConfirmPayment())\n  .then(() => onSendMessage())\n```\n\n----------------------------------------\n\nTITLE: Creating a Static Page Component in React\nDESCRIPTION: This snippet demonstrates how to create a new React component for a static page in the Sharetribe Web Template. It includes necessary imports, component structure, and usage of various Sharetribe components.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-content/how-to-add-static-pages-in-ftw/index.md#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport {\n  NamedLink,\n  ExternalLink,\n  LayoutComposer,\n  Heading,\n} from '../../components';\n\nimport StaticPage from '../PageBuilder/StaticPage';\nimport TopbarContainer from '../TopbarContainer/TopbarContainer';\nimport FooterContainer from '../FooterContainer/FooterContainer';\n\nimport css from './SocialMediaPage.module.css';\n\nconst SocialMediaPage = () => {\n  const layoutAreas = `\n    topbar\n    main\n    footer\n  `;\n\n  return (\n    <StaticPage\n      className={css.root}\n      title=\"Social media\"\n      schema={{\n        '@context': 'http://schema.org',\n        '@type': 'SocialMediaPage',\n        description: 'Description of this page',\n        name: 'Social media page',\n      }}\n    >\n      <LayoutComposer areas={layoutAreas} className={css.layout}>\n        {() => (\n          <>\n            <TopbarContainer />\n            <div className={css.content}>\n              {/* <!-- Add your page content here --> */}\n              <Heading>See Biketribe in Social Media</Heading>\n              <iframe\n                width=\"560\"\n                height=\"315\"\n                src=\"https://www.youtube.com/embed/FHk3pPfaZHA\"\n                title=\"YouTube video player\"\n              ></iframe>\n              <NamedLink className={css.link} name=\"LandingPage\">\n                Go to our home page\n              </NamedLink>\n              or\n              <ExternalLink\n                className={css.link}\n                href=\"https://google.com\"\n              >\n                Go to Google\n              </ExternalLink>\n            </div>\n            <FooterContainer />\n          </>\n        )}\n      </LayoutComposer>\n    </StaticPage>\n  );\n};\n\nexport default SocialMediaPage;\n```\n\n----------------------------------------\n\nTITLE: Server-Side Rendering Process in JavaScript\nDESCRIPTION: This snippet demonstrates the process of server-side rendering in Sharetribe Flex. It loads data based on the current URL, renders the correct page with preloaded state, and sends the rendered HTML string as a response to the client browser.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-routing/how-routing-works-in-ftw/index.md#2025-04-18_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\ndataLoader\n  .loadData(req.url, sdk /* other params */)\n  .then(preloadedState => {\n    const html = renderer.render(req.url /* and other params */);\n    //...\n    res.send(html);\n  });\n```\n\n----------------------------------------\n\nTITLE: Defining State Graph for Transaction Process in JavaScript\nDESCRIPTION: This snippet shows how to define a state graph for a transaction process in JavaScript. It includes states, transitions, and the structure for describing the flow of a transaction process using an Xstate-like format.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-transaction-process/change-transaction-process-in-ftw/index.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport const graph = {\n  // id is defined only to support Xstate format.\n  // However if you have multiple transaction processes defined,\n  // it is best to keep them in sync with transaction process aliases.\n  id: 'default-booking/release-1',\n\n  // This 'initial' state is a starting point for new transaction\n  initial: states.INITIAL,\n\n  // States\n  states: {\n    [states.INITIAL]: {\n      on: {\n        [transitions.INQUIRE]: states.INQUIRY,\n        [transitions.REQUEST_PAYMENT]: states.PENDING_PAYMENT,\n      },\n    },\n    [states.INQUIRY]: {\n      on: {\n        [transitions.REQUEST_PAYMENT_AFTER_INQUIRY]: states.PENDING_PAYMENT,\n      },\n    },\n\n    [states.PENDING_PAYMENT]: {\n      on: {\n        [transitions.EXPIRE_PAYMENT]: states.PAYMENT_EXPIRED,\n        [transitions.CONFIRM_PAYMENT]: states.PREAUTHORIZED,\n      },\n    },\n    // etc.\n```\n\n----------------------------------------\n\nTITLE: Nested Public Data Structure Example (Non-indexed)\nDESCRIPTION: Example showing how not to structure public data with nested attributes since they cannot be indexed for search in Sharetribe.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-search/change-search-filters-in-ftw/index.md#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\npublicData: {\n  instrumentProficiency: {\n    // These attributes cannot be indexed for search in Sharetribe\n    violin: 'professional',\n    guitar: 'intermediate',\n    tuba: 'beginner',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Current User with Default Payment Method in JavaScript\nDESCRIPTION: This code snippet shows how to fetch the current user entity with the stripeCustomer.defaultPaymentMethod relationship included. It uses the Sharetribe SDK to make the API call.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-payments/how-saving-payment-card-works-in-ftw/index.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsdk.currentUser.show({\n  include: ['stripeCustomer.defaultPaymentMethod'],\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Data for ListingPage Component in JavaScript\nDESCRIPTION: This snippet demonstrates how to implement a loadData function for the ListingPage component. It fetches listing data, timeslots for booking calendar, and reviews related to the listing using Redux Thunk calls.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-routing/how-routing-works-in-ftw/index.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexport const loadData = (params, search) => dispatch => {\n  const listingId = new UUID(params.id);\n\n  return Promise.all([\n    dispatch(showListing(listingId)), // fetch listing data\n    dispatch(fetchTimeSlots(listingId)), // fetch timeslots for booking calendar\n    dispatch(fetchReviews(listingId)), // fetch reviews related to this listing\n  ]);\n};\n```\n\n----------------------------------------\n\nTITLE: Combining Reducers for Redux Store in JavaScript\nDESCRIPTION: This code snippet shows how global and page-specific reducers are combined to create the main app reducer using Redux's combineReducers function. It imports reducers from different locations and combines them into a single appReducer.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-data-flow/ftw-redux/index.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { combineReducers } from 'redux';\nimport * as globalReducers from './ducks';\nimport * as pageReducers from './containers/reducers';\n\nconst appReducer = combineReducers({\n  ...globalReducers,\n  ...pageReducers,\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Events in JSON Format with Sharetribe CLI (Bash)\nDESCRIPTION: Example of using the flex-cli command to retrieve events in JSON format. This command outputs events as one-line JSON objects, which can be easily parsed and processed by other tools.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-events/view-events-with-flex-cli/index.md#2025-04-18_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ flex-cli events -m my-marketplace-dev --json | less\n```\n\n----------------------------------------\n\nTITLE: Access Control Configuration JSON Structure\nDESCRIPTION: Defines the marketplace-level permission settings stored in access-control.json asset, including user join requirements, listing posting permissions, and transaction initiation rules.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/concepts-users-and-authentication/user-permissions/index.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"66cc804f-b5ee-44f2-8c7e-ca3e950e534f\",\n  \"type\": \"jsonAsset\",\n  \"attributes\": {\n    \"assetPath\": \"/general/access-control.json\",\n    \"data\": {\n      \"marketplace\": {\n        \"private\": false\n      },\n      \"users\": {\n        \"requireApprovalToJoin\": false,\n        \"requireApprovalToJoinOptions\": {\n          \"callToAction\": {\n            \"type\": \"internal\",\n            \"text\": \"Add a link to request approval to join\",\n            \"href\": \"/p/about/\"\n          }\n        },\n        \"requirePermissionToPostListings\": true,\n        \"requirePermissionToPostListingsOptions\": {\n          \"callToAction\": {\n            \"type\": \"none\"\n          }\n        },\n        \"requirePermissionToInitiateTransactions\": false,\n        \"requirePermissionToInitiateTransactionsOptions\": {\n          \"callToAction\": {\n            \"type\": \"none\"\n          }\n        },\n        \"requirePermissionToRead\": false,\n        \"requirePermissionToReadOptions\": {\n          \"callToAction\": {\n            \"type\": \"none\"\n          }\n        }\n      },\n      \"listings\": {\n        \"requireApprovalToPublish\": false,\n        \"requireApprovalToPublishOptions\": {\n          \"callToAction\": {\n            \"type\": \"none\"\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sorting Listings by Custom Field in Sharetribe\nDESCRIPTION: Example of using the Sharetribe SDK to sort query results by a specific field. This snippet sorts listings by the user skill level stored in public data.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/concepts-listings/how-the-search-works/index.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nsdk.listings.query({ ...params, sort: \"pub_userSkillLevel\" })\n```\n\n----------------------------------------\n\nTITLE: Connecting TransactionPage to Redux Store in React\nDESCRIPTION: This snippet demonstrates how the TransactionPage component is connected to the Redux store using mapStateToProps and mapDispatchToProps functions, along with the compose higher-order function and injectIntl for internationalization.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-data-flow/ftw-redux/index.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst TransactionPage = compose(\n  connect(mapStateToProps, mapDispatchToProps),\n  injectIntl\n)(TransactionPageComponent);\n```\n\n----------------------------------------\n\nTITLE: Creating ID Token for OpenID Connect Proxy in JavaScript\nDESCRIPTION: Function to create a signed JSON Web Token (JWT) from 3rd party identity provider information. Used to wrap Github login data into an OpenID Connect ID token for Sharetribe.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-users-and-authentication/setup-oidc-proxy/index.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{ signingAlg: 'RS256', rsaPrivateKey, keyId }\n```\n\n----------------------------------------\n\nTITLE: Implementing Handlebars Email Template in HTML\nDESCRIPTION: This snippet showcases a complete HTML email template using Handlebars syntax. It includes setting global variables, defining inline functions, and utilizing various Handlebars helpers for data formatting and conditional rendering.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-messaging/edit-email-templates-with-flex-cli/index.md#2025-04-18_snippet_3\n\nLANGUAGE: handlebars\nCODE:\n```\n<!--\n** First, set global variables for the whole file\n-->\n    {{set-translations (asset \"content/email-texts.json\")}}\n    {{set-locale (asset \"general/localization.json\" \"locale\" \"en_US\")}}\n    {{set-timezone transaction.listing.availability-plan.timezone}}\n<html lang=\"en\">\n  <head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html charset=UTF-8\" />\n  </head>\n  <!--\n  ** Define inline functions used in the file to format data\n  -->\n  {{~#*inline \"format-money\"~}}{{format-text \"{amount,number,::.00} {currency}\" amount=money.amount currency=money.currency}}{{~/inline~}}\n  {{~#*inline \"format-day\"~}}{{#with transaction.listing.availability-plan}}{{format-text \"{date,date,::EE}\" date=date}}{{/with}}{{~/inline~}}\n  {{~#*inline \"format-day-before\"~}}{{#with transaction.listing.availability-plan}}{{format-text \"{date,date,::EE}\" date=(date-transform date days=-1)}}{{/with}}{{~/inline~}}\n  {{~#*inline \"format-day-time\"~}}{{#with transaction.listing.availability-plan}}{{format-text \"{date,date,::EEhmma}\" date=date}}{{/with}}{{~/inline~}}\n  {{~#*inline \"format-month-date\"~}}{{#with transaction.listing.availability-plan}}{{format-text \"{date,date,::MMMd}\" date=date}}{{/with}}{{~/inline~}}\n  {{~#*inline \"format-month-date-day-before\"~}}{{#with transaction.listing.availability-plan}}{{format-text \"{date,date,::MMMd}\" date=(date-transform date days=-1)}}{{/with}}{{~/inline~}}\n  <!--\n  ** Use the #with helper to expose the attributes of the transaction to the enclosed block\n  -->\n  {{#with transaction}}\n  <table style=\"background-color:#FFF;margin:0 auto;padding:24px 12px 0;font-family:-apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif\" align=\"center\" border=\"0\" cellPadding=\"0\" cellSpacing=\"0\" role=\"presentation\" width=\"100%\">\n    <tbody>\n      <tr>\n        <td>\n          <table align=\"center\" role=\"presentation\" cellSpacing=\"0\" cellPadding=\"0\" border=\"0\" width=\"100%\" style=\"max-width:600px;margin:0 auto\">\n            <tr style=\"width:100%\">\n              <td>\n                <!--\n                ** The email template uses the 't' helper for rendering content:\n                ** - the first parameter is the message key\n                ** - the second parameter is the fallback message, if the key in the first parameter does not exist\n                ** - the following parameters are the variables used in the messages and their respective values\n                -->\n                <h1 style=\"color:#484848;font-size:26px;line-height:1.3;font-weight:700\">{{t \"BookingNewRequest.Title\" \"You have a new booking request for {listingTitle}\" listingTitle=listing.title}}</h1>\n                <p style=\"font-size:16px;line-height:1.4;margin:16px 0;color:#484848\">{{t \"BookingNewRequest.Description\" \"{customerDisplayName} requested to book {listingTitle} in {marketplaceName}.\" customerDisplayName=customer.display-name listingTitle=listing.title marketplaceName=marketplace.name}}</p>\n                ...\n                <!--\n                ** Omitted section renders the line items related to the transaction\n                -->\n                <p style=\"font-size:16px;line-height:1.4;margin:16px 0;color:#484848;font-weight:700\">{{t \"BookingNewRequest.AcceptText\" \"You need to accept the request by {date,date,::hmmaYYYYMMMd}. Otherwise the request will expire automatically and you won't get paid.\" date=delayed-transition.run-at}}</p>\n                <p style=\"font-size:16px;line-height:1.4;margin:16px 0;color:#484848\">{{t \"BookingNewRequest.DeclineOptionText\" \"If the booked dates don't work for you, you can also choose to decline the request.\"}}</p>\n                <table style=\"padding:16px 0 0\" align=\"center\" border=\"0\" cellPadding=\"0\" cellSpacing=\"0\" role=\"presentation\" width=\"100%\">\n                  <tbody>\n                    <tr>\n                      <td><a href=\"{{marketplace.url}}/sale/{{url-encode id}}/\" target=\"_blank\" style=\"color:#FFF;background-color:#007DF2;border-radius:4px;font-size:15px;text-decoration:none;text-align:center;display:inline-block;min-width:210px;padding:0px 0px;line-height:100%;max-width:100%\"><span><!--[if mso]><i style=\"letter-spacing: undefinedpx;mso-font-width:-100%;mso-text-raise:0\" hidden>&nbsp;</i><![endif]--></span><span style=\"color:#FFF;background-color:#007DF2;border-radius:4px;font-size:15px;text-decoration:none;text-align:center;display:inline-block;min-width:210px;padding:16px 32px;max-width:100%;line-height:120%;text-transform:none;mso-padding-alt:0px;mso-text-raise:0\">{{t \"BookingNewRequest.AcceptOrDeclineLink\" \"Accept or Decline the booking\"}}</span><span><!--[if mso]><i style=\"letter-spacing: undefinedpx;mso-font-width:-100%\" hidden>&nbsp;</i><![endif]--></span></a>\n                        <div>\n                          <p style=\"font-size:14px;line-height:1.5;margin:16px 0;color:#484848\">{{t \"TransactionEmails.AccessibleLinkText\" \"Can't click the button? Here's the link for your convenience:\"}} <a target=\"_blank\" style=\"color:#007DF2;text-decoration:none\" href=\"{{marketplace.url}}/sale/{{url-encode id}}/\">{{marketplace.url}}/sale/{{url-encode id}}/</a></p>\n                        </div>\n                      </td>\n                    </tr>\n                  </tbody>\n                </table>\n                <!--\n                ** Close the 'with' block when transaction attributes are no longer needed\n                -->\n                {{/with}}\n                <div>\n                  <hr style=\"width:100%;border:none;border-top:1px solid #eaeaea;border-color:#E1E1E1;margin:20px 0\" />\n                  <p style=\"font-size:12px;line-height:15px;margin:0 auto;color:#b7b7b7;text-align:left;margin-bottom:50px\">{{t \"TransactionEmails.MembershipParagraph\" \"You have received this email notification because you are a member of {marketplaceName}. If you no longer wish to receive these emails, please contact {marketplaceName} team.\" marketplaceName=marketplace.name}}</p>\n                </div>\n              </td>\n            </tr>\n          </table>\n        </td>\n      </tr>\n    </tbody>\n  </table>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Adding Search Schema with Default Value using Sharetribe CLI\nDESCRIPTION: Demonstrates how to add a search schema with a default value using the Sharetribe CLI. This example adds a 'boolean' type schema for an 'isPromoted' attribute in the metadata scope with a default value of false.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-search/manage-search-schemas-with-flex-cli/index.md#2025-04-18_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ flex-cli search set --key isPromoted --type boolean --scope metadata --default false -m my-marketplace-dev\n```\n\n----------------------------------------\n\nTITLE: Creating Redux Thunk for Updating Likes in Sharetribe Flex\nDESCRIPTION: This snippet defines a Redux thunk action creator 'updateLikes' that handles the logic for adding or removing a listing from a user's liked listings, and updates the user profile accordingly.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-events/like-feature/index.md#2025-04-18_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nexport const updateLikes = listingId => (dispatch, getState, sdk) => {\n  dispatch(updateLikesRequest());\n\n  return dispatch(fetchCurrentUser()).then(() => {\n    const currentUser = getState().user.currentUser;\n    const currentLikes =\n      currentUser?.attributes?.profile?.privateData?.likedListings;\n\n    const queryParams = {\n      expand: true,\n      include: ['profileImage'],\n      'fields.image': [\n        'variants.square-small',\n        'variants.square-small2x',\n      ],\n    };\n\n    // if listingId already exists in currentLikes, it should be removed from currentLikes\n    // if user has current likes, merge listingId into current likes\n    const ifDislike = !!currentLikes?.includes(listingId);\n    const likedListings = ifDislike\n      ? currentLikes.filter(id => id !== listingId)\n      : currentLikes\n      ? [...currentLikes, listingId]\n      : [listingId];\n\n    return sdk.currentUser\n      .updateProfile({ privateData: { likedListings } }, queryParams)\n      .then(response => {\n        dispatch(updateLikesSuccess(response));\n\n        const entities = denormalisedResponseEntities(response);\n        if (entities.length !== 1) {\n          throw new Error(\n            'Expected a resource in the sdk.currentUser.updateProfile response'\n          );\n        }\n        const currentUser = entities[0];\n\n        // Update current user in state.user.currentUser through user.duck.js\n        dispatch(currentUserShowSuccess(currentUser));\n      })\n      .catch(e => {\n        dispatch(updateLikesError(storableError(e)));\n      });\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Transaction Process Transitions\nDESCRIPTION: Defines all possible transitions between states in the instant booking process, including payment, review, and completion transitions.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/tutorial-transaction-process/create-transaction-process/index.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nexport const transitions = {\n  REQUEST_PAYMENT: 'transition/request-payment',\n  INQUIRE: 'transition/inquire',\n  REQUEST_PAYMENT_AFTER_INQUIRY: 'transition/request-payment-after-inquiry',\n  CONFIRM_PAYMENT: 'transition/confirm-payment',\n  EXPIRE_PAYMENT: 'transition/expire-payment',\n  CANCEL: 'transition/cancel',\n  COMPLETE: 'transition/complete',\n  REVIEW_1_BY_PROVIDER: 'transition/review-1-by-provider',\n  REVIEW_2_BY_PROVIDER: 'transition/review-2-by-provider',\n  REVIEW_1_BY_CUSTOMER: 'transition/review-1-by-customer',\n  REVIEW_2_BY_CUSTOMER: 'transition/review-2-by-customer',\n  EXPIRE_CUSTOMER_REVIEW_PERIOD: 'transition/expire-customer-review-period',\n  EXPIRE_PROVIDER_REVIEW_PERIOD: 'transition/expire-provider-review-period',\n  EXPIRE_REVIEW_PERIOD: 'transition/expire-review-period',\n};\n```\n\n----------------------------------------\n\nTITLE: Adding New Transaction Process Configuration in JavaScript\nDESCRIPTION: This snippet shows how to add a configuration for a new transaction process in the configListing.js file. It defines the listing type, label, and transaction type details including process, alias, and unit type.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-transaction-process/change-transaction-process-in-ftw/index.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n  {\n    listingType: 'nightly-booking',\n    label: 'Nightly booking',\n    transactionType: {\n      process: 'negotiated-booking',\n      alias: 'negotiated-booking/release-1',\n      unitType: 'night',\n    },\n```\n\n----------------------------------------\n\nTITLE: Event Details in JSON Format (JSON)\nDESCRIPTION: Detailed JSON output of a user update event, showing changes to user profile information including bio, firstName, displayName, and abbreviatedName. This snippet demonstrates the structure of event data returned by the Sharetribe CLI.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-events/view-events-with-flex-cli/index.md#2025-04-18_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"eventType\": \"user/updated\",\n  \"createdAt\": \"2020-12-07T19:45:38.721Z\",\n  \"resourceType\": \"user\",\n  \"source\": \"source/marketplace-api\",\n  \"resourceId\": \"5fce8536-61f5-4c85-8160-61b1799d256f\",\n  \"id\": \"062569cb-dc3e-5a80-bde5-bb966072ecd6\",\n  \"resource\": {\n    \"deleted\": false,\n    \"banned\": false,\n    \"email\": \"joe@example.com\",\n    \"profileImage\": {\n      \"id\": \"5fce865b-dbc7-432a-85cc-ddb3a993eede\"\n    },\n    \"stripeConnected\": false,\n    \"createdAt\": \"2020-12-07T19:40:38.902Z\",\n    \"identityProviders\": [],\n    \"pendingEmail\": null,\n    \"emailVerified\": true,\n    \"stripeAccount\": null,\n    \"id\": \"5fce8536-61f5-4c85-8160-61b1799d256f\",\n    \"marketplace\": {\n      \"id\": \"5b83f0af-ed76-4fbf-9e71-e76b76c5abce\"\n    },\n    \"profile\": {\n      \"displayName\": \"olli-test F\",\n      \"firstName\": \"olli-test\",\n      \"privateData\": {},\n      \"protectedData\": {},\n      \"bio\": \"Test users for event demo\",\n      \"abbreviatedName\": \"oF\",\n      \"lastName\": \"Foobar5\",\n      \"publicData\": {},\n      \"metadata\": {}\n    }\n  },\n  \"auditData\": {\n    \"userId\": \"5fce8536-61f5-4c85-8160-61b1799d256f\",\n    \"adminId\": null,\n    \"clientId\": \"039f4354-ccfa-4677-9395-2bf3f2294355\",\n    \"requestId\": \"b43fddd6-f893-4a69-8661-ef159013019b\"\n  },\n  \"sequenceId\": 3471843,\n  \"previousValues\": {\n    \"profile\": {\n      \"bio\": null,\n      \"firstName\": \"Olli\",\n      \"displayName\": \"Olli F\",\n      \"abbreviatedName\": \"OF\"\n    },\n    \"profileImage\": null\n  },\n  \"marketplaceId\": \"5b83f0af-ed76-4fbf-9e71-e76b76c5abce\"\n}\n```\n\n----------------------------------------\n\nTITLE: Redux Action and State Management\nDESCRIPTION: Implementation of Redux actions, types and state management for the like feature.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-events/like-feature/index.md#2025-04-18_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nexport const UPDATE_LIKES_REQUEST = 'app/ListingPage/UPDATE_LIKES_REQUEST';\nexport const UPDATE_LIKES_SUCCESS = 'app/ListingPage/UPDATE_LIKES_SUCCESS';\nexport const UPDATE_LIKES_ERROR = 'app/ListingPage/UPDATE_LIKES_ERROR';\n\nexport const updateLikesRequest = params => ({\n  type: UPDATE_LIKES_REQUEST,\n  payload: { params },\n});\nexport const updateLikesSuccess = result => ({\n  type: UPDATE_LIKES_SUCCESS,\n  payload: result.data,\n});\nexport const updateLikesError = error => ({\n  type: UPDATE_LIKES_ERROR,\n  payload: error,\n  error: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Helper Functions for Seat Availability Calculation in BookingDatesForm\nDESCRIPTION: Implements two helper functions to determine the minimum number of available seats across a booking time range by analyzing time slots. These functions help calculate seat availability when a customer selects a date range.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-listing/seats/index.md#2025-04-18_snippet_18\n\nLANGUAGE: jsx\nCODE:\n```\nimport { generateMonths } from '../../../util/generators';\n\n/**\n * Return an array of timeslots for the months between start date and end date\n * @param {*} monthlyTimeSlots\n * @param {*} startDate\n * @param {*} endDate\n * @param {*} timeZone\n * @returns\n */\nconst pickBookingMonthTimeSlots = (\n  monthlyTimeSlots,\n  startDate,\n  endDate,\n  timeZone\n) => {\n  // The generateMonths generator returns the first day of each month that is spanned\n  // by the time range between start date and end date.\n  const monthsInRange = generateMonths(startDate, endDate, timeZone);\n\n  return monthsInRange.reduce((timeSlots, firstOfMonth) => {\n    return [\n      ...timeSlots,\n      ...pickMonthlyTimeSlots(monthlyTimeSlots, firstOfMonth, timeZone),\n    ];\n  }, []);\n};\n\n// Get the time slot for a booking duration that has the least seats\nconst getMinSeatsTimeSlot = (\n  monthlyTimeSlots,\n  timeZone,\n  startDate,\n  endDate\n) => {\n  const timeSlots = pickBookingMonthTimeSlots(\n    monthlyTimeSlots,\n    startDate,\n    endDate,\n    timeZone\n  );\n\n  // Determine the timeslots that fall between start date and end date\n  const bookingTimeslots = timeSlots.filter(ts => {\n    const { start, end } = ts.attributes;\n    return (\n      // booking start date falls within time slot\n      (start < startDate && end > startDate) ||\n      // whole time slot is within booking period\n      (start >= startDate && end <= endDate) ||\n      // booking end date falls within time slot\n      (start < endDate && end > endDate)\n    );\n  });\n\n  // Return the timeslot with the least seats in the booking period\n  return bookingTimeslots.reduce((minSeats, ts) => {\n    if (!minSeats?.seats) {\n      return ts.attributes;\n    }\n\n    return ts.attributes.seats < minSeats.seats\n      ? ts.attributes\n      : minSeats;\n  }, {});\n};\n```\n\n----------------------------------------\n\nTITLE: Confirming Stripe Card Payment\nDESCRIPTION: Stripe API call to confirm card payment using payment intent client secret and payment parameters.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-payments/how-saving-payment-card-works-in-ftw/index.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nstripe.confirmCardPayment(\n  stripePaymentIntentClientSecret,\n  paymentParams\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Auto-Payment Transition in Clojure for Sharetribe\nDESCRIPTION: This code snippet demonstrates how to configure the auto-payment transition in a Sharetribe transaction process. It creates and captures a payment intent using the customer's saved payment method, scheduled to execute 5 minutes after entering the pending-payment state.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/concepts-payments/off-session-payments/index.md#2025-04-18_snippet_0\n\nLANGUAGE: clojure\nCODE:\n```\n{:name :transition/auto-payment,\n   :from :state/pending-payment,\n   :to :state/paid,\n   :at\n   {:fn/plus\n    [{:fn/timepoint [:time/first-entered-state :state/pending-payment]}\n     {:fn/period [\"PT5M\"]}]},\n   :actions\n   [{:name :action/stripe-create-payment-intent,\n     :config { :use-customer-default-payment-method? :true }}\n    {:name :action/stripe-capture-payment-intent}]}\n```\n\n----------------------------------------\n\nTITLE: Implementing Redux Thunk for Asynchronous API Calls in JavaScript\nDESCRIPTION: This snippet demonstrates the use of Redux Thunk middleware to create an asynchronous action creator for fetching reviews. It shows how to dispatch actions for request, success, and error states, and how to use the Sharetribe SDK for API calls.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-data-flow/ftw-redux/index.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport const fetchReviews = listingId => (dispatch, getState, sdk) => {\n  // Make store aware of a request to fetch reviews\n  dispatch(fetchReviewsRequest);\n  // Fetch reviews using Sharetribe SDK\n  return sdk.reviews\n    .query({\n      listingId,\n      state: 'public',\n      include: ['author', 'author.profileImage'],\n      'fields.image': ['variants.square-small'],\n    })\n    .then(response => {\n      const reviews = denormalisedResponseEntities(response);\n      // If fetch succeeds, make store aware of fetched data\n      dispatch(fetchReviewsSuccess(reviews));\n    })\n    .catch(e => {\n      // If fetch throws an error, save the error to the store (so that UI can react to it)\n      dispatch(fetchReviewsError(storableError(e)));\n    });\n};\n```\n\n----------------------------------------\n\nTITLE: Filtering Listings by Price Range in Sharetribe\nDESCRIPTION: Example of using the Sharetribe SDK to query listings within a specific price range. This snippet filters listings to show only those priced between $20 and $100.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/concepts-listings/how-the-search-works/index.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsdk.listings.query({ price: \"2000,10000\" })\n```\n\n----------------------------------------\n\nTITLE: Adding Helper Functions for Like Event Processing in JavaScript\nDESCRIPTION: These functions help determine if an event is a like or dislike, and reduce multiple likes to a single API call. They include methods to get differences between arrays, determine which listing was liked/disliked, and group events by listing ID.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-events/like-feature/index.md#2025-04-18_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// Get the difference between two arrays\nconst getDifference = (arr1, arr2) => {\n  return arr1.filter(x => !arr2.includes(x));\n};\n\n// Compare the amount of likes in the previous event to the current one to\n// determine which listing was liked or disliked\nconst getLikedListingId = (previousLikes, currentLikes) => {\n  if (previousLikes === null) return currentLikes;\n  if (currentLikes === null) return previousLikes;\n  else\n    return previousLikes.length < currentLikes.length\n      ? getDifference(currentLikes, previousLikes)\n      : getDifference(previousLikes, currentLikes);\n};\n\nconst getLikeCount = (previousLikes, currentLikes) => {\n  return previousLikes === null ||\n    previousLikes.length < currentLikes.length\n    ? 1\n    : -1;\n};\n\n// Reducer returns an object with listing ID's as keys and amount of likes as values\nconst groupEvents = events => {\n  return (likesToBeUpdated = events.reduce((likes, event) => {\n    const { resource: user, previousValues } = event.attributes;\n    // we might have a user/updated event that doesn't target likedListings\n    if (\n      !previousValues.attributes?.profile?.privateData?.likedListings\n    ) {\n      return {};\n    }\n    const { likedListings: previouslyLikedListings } =\n      previousValues.attributes.profile.privateData || {};\n    const likedListings =\n      user.attributes.profile?.privateData?.likedListings;\n    const likeCount = getLikeCount(\n      previouslyLikedListings,\n      likedListings\n    );\n    const listingId = getLikedListingId(\n      previouslyLikedListings,\n      likedListings\n    );\n    likes[listingId] = likes[listingId]\n      ? likes[listingId] + likeCount\n      : likeCount;\n    return likes;\n  }, {}));\n};\n```\n\n----------------------------------------\n\nTITLE: Retrieving State Data Based on Process Name in JavaScript\nDESCRIPTION: Demonstrates how the getStateData function in the stateData.js file determines which process-specific function to call based on the process name. This needs to be updated when adding a new transaction process.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-transaction-process/change-transaction-process-in-ftw/index.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport const getStateData = params => {\n  ...\n  if (processName === PURCHASE_PROCESS_NAME) {\n    return getStateDataForPurchaseProcess(params, processInfo());\n  } else if (processName === BOOKING_PROCESS_NAME) {\n    return getStateDataForBookingProcess(params, processInfo());\n  } else {\n    return {};\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Booking Reminder Content with Handlebars\nDESCRIPTION: This snippet uses Handlebars to generate the main content of the booking reminder email. It includes conditional rendering for different booking types (hourly, daily, nightly) and provides customized information based on the transaction details.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/static/tutorial-assets/booking-reminder-customer-html.txt#2025-04-18_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n{{#with transaction}}\n<h1 style=\"color:#484848;font-size:26px;line-height:1.3;font-weight:700\">{{t \"BookingReminder.Title\" \"Your booking for {listingTitle} is approaching!\" listingTitle=listing.title}}</h1>\n{{#each tx-line-items}}\n{{#eq \"line-item/hour\" code}}\n<p style=\"font-size:16px;line-height:1.4;margin:16px 0;color:#484848\">{{t \"BookingReminder.ContentForHourly\" \"You have booked { listingTitle } from {dateStart,date,::hmmaYYYYMMMd} to {dateEnd,date,::hmmaYYYYMMMd}.\" dateStart=booking.start dateEnd=booking.end listingTitle=listing.title}}</p>\n{{/ eq}}\n{{#eq \"line-item/day\" code}}\n<p style=\"font-size:16px;line-height:1.4;margin:16px 0;color:#484848\">{{t \"BookingReminder.ContentForDaily\" \"You have booked { listingTitle } from {dateStart,date,::YYYYMMMd} to {dateEnd,date,::YYYYMMMd}.\" dateStart=booking.start dateEnd=(date-transform booking.end days=-1) listingTitle=listing.title}}</p>\n{{/ eq}}\n{{#eq \"line-item/night\" code}}\n<p style=\"font-size:16px;line-height:1.4;margin:16px 0;color:#484848\">{{t \"BookingReminder.ContentForNightly\" \"You have booked { listingTitle } from {dateStart,date,::YYYYMMMd} to {dateEnd,date,::YYYYMMMd}.\" dateStart=booking.start dateEnd=booking.end listingTitle=listing.title}}</p>\n{{/ eq}}\n{{/each}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Protected Route with Authentication in JavaScript\nDESCRIPTION: Shows how to configure a protected route that requires authentication and includes data loading functionality.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-routing/how-routing-works-in-ftw/index.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  path: '/listings',\n  name: 'ManageListingsPage',\n  auth: true,\n  authPage: 'LoginPage', // the default is 'SingupPage'\n  component: ManageListingsPage,\n  loadData: pageDataLoadingAPI.ManageListingsPage.loadData,\n},\n```\n\n----------------------------------------\n\nTITLE: Querying Asset Delivery API with Sharetribe SDK\nDESCRIPTION: Example of how to fetch landing page content using the Sharetribe SDK's assetByAlias method. This approach provides a more structured way to query the API.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/concepts-development/headless-content-management/index.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsdk.assetByAlias({\n  path: 'content/pages/landing-page.json',\n  alias: 'latest'\n});\n```\n\n----------------------------------------\n\nTITLE: Updating stripe.duck.js with new thunk calls for PaymentIntents in JavaScript\nDESCRIPTION: Add new thunk calls for stripe.confirmCardPayment and stripe.retrievePaymentIntent to replace the deprecated stripe.createToken method. These calls are necessary for handling Strong Customer Authentication (SCA) and retrieving up-to-date PaymentIntent status.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-payments/enable-payment-intents-in-ftw/index.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Add new thunk calls to stripe.duck.js\nstripe.confirmCardPayment\nstripe.retrievePaymentIntent\n```\n\n----------------------------------------\n\nTITLE: Querying Events with Integration API SDK in JavaScript\nDESCRIPTION: Basic example of querying all available events using the Sharetribe Integration API SDK.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-events/reacting-to-events/index.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nintegrationSdk.events.query();\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Import with Loadable Components in JavaScript\nDESCRIPTION: Demonstrates how to implement route-based code splitting using Loadable Components library to create dynamic imports for page components.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-routing/how-code-splitting-works-in-ftw/index.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst AboutPage = loadable(() =>\n  import(\n    /* webpackChunkName: \"AboutPage\" */ './containers/AboutPage/AboutPage'\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Calculating Pricing with UnitPrice, Seats and Units in Sharetribe\nDESCRIPTION: Example of defining line items using unitPrice combined with seats and units when the number of participants affects the price. This is useful for per-person pricing models.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/concepts-pricing-and-commissions/pricing/index.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n| code               | unitPrice              | seats | units | lineTotal               | includeFor               |\n| :----------------- | :--------------------- | :---- | :---- | :---------------------- | :----------------------- |\n| \"line-item/nights\" | new Money(5000, \"USD\") | 3     | 2     | new Money(30000, \"USD\") | [\"customer\", \"provider\"] |\n```\n\n----------------------------------------\n\nTITLE: Adding Delete Account Endpoint to API Router in JavaScript\nDESCRIPTION: This diff shows how to add the delete account endpoint to the API router in the server's apiRouter.js file. It imports the delete-account module and adds a new POST route for the delete-account endpoint.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-users-and-authentication/implement-delete-user/index.md#2025-04-18_snippet_16\n\nLANGUAGE: diff\nCODE:\n```\n  const transitionPrivileged = require('./api/transition-privileged');\n+ const deleteAccount = require('./api/delete-account');\n...\n  router.post('/transition-privileged', transitionPrivileged);\n+ router.post('/delete-account', deleteAccount);\n```\n\n----------------------------------------\n\nTITLE: Updating Error Handling and Line Item Construction in lineItems.js\nDESCRIPTION: Modifies error handling to accommodate both quantity and units/seats combinations, and creates a quantityOrSeats object to be used in the line item construction.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-listing/seats/index.md#2025-04-18_snippet_36\n\nLANGUAGE: diff\nCODE:\n```\n- \tconst { quantity, extraLineItems } = quantityAndExtraLineItems;\n+   const { quantity, units, seats, extraLineItems } = quantityAndExtraLineItems;\n\n  // Throw error if there is no quantity information given\n- if (!quantity) {\n+ if (!quantity && !(units && seats)) {\n    const message = `Error: transition should contain quantity information:\n-      stockReservationQuantity, quantity, or bookingStart & bookingEnd (if \"line-item/day\" or \"line-item/night\" is used)`;\n+      stockReservationQuantity, quantity, units & seats, or bookingStart & bookingEnd (if \"line-item/day\" or \"line-item/night\" is used)`;\n    const error = new Error(message);\n    error.status = 400;\n    error.statusText = message;\n    error.data = {};\n    throw error;\n  }\n\n+ // A booking line item can have either quantity, or units and seats. Add the\n+ // correct values depending on whether units and seats exist.\n+ const quantityOrSeats = !!units && !!seats ? { units, seats } : { quantity };\n```\n\n----------------------------------------\n\nTITLE: Configuring a New User Attribute in JavaScript\nDESCRIPTION: Demonstrates how to add a new top-level attribute 'additionalServices' to the user data model. It includes key, scope, schemaType, and configurations for saving and displaying the attribute.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-users-and-authentication/extend-user-data-in-template/index.md#2025-04-18_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n{\n  key: 'additionalServices',\n  scope: 'public',\n  schemaType: 'boolean',\n  saveConfig: {\n    label: 'Do you offer other services besides bike rentals?',\n    displayInSignUp: true,\n    isRequired: true,\n    placeholderMessage: 'Select...',\n  },\n  showConfig: {\n    label: 'Do you offer other services besides bike rentals?',\n    displayInProfile: true,\n  },\n  // If you have defined user types, you can limit\n  // individual user fields to specific user types:\n  // userTypeConfig: {\n  //   limitToUserTypeIds: true,\n  //   userTypeIds: ['a', 'b', 'c'],\n  // },\n}\n```\n\n----------------------------------------\n\nTITLE: Example EDN Intermediary Format for Sharetribe Flex Data Migration\nDESCRIPTION: A comprehensive example showing the Intermediary format structure for migrating marketplace data, including listings, users, images, reviews, and Stripe accounts. Demonstrates usage of value types, import IDs, aliases, and entity references.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-migrations/migrating-from-outside-sharetribe/index.md#2025-04-18_snippet_9\n\nLANGUAGE: edn\nCODE:\n```\n{\n :ident :marketplace-ident\n :data [[[:im.listing/id #uuid \"b074e697-ab0c-4746-a195-c58d73606b1f\" :listing/rock-sauna]\n         #:im.listing{:createdAt #inst \"2018-04-17T06:55:04.291-00:00\"\n                      :title \"A solid rock sauna\"\n                      :description \"A very nice solid rock sauna built solely of wood.\\nHere's some more sensible stuff.\"\n                      :state :listing.state/pendingApproval\n                      :location #im/location [23.12 21.21]\n                      :price #im/money [12.12M \"EUR\"]\n                      :currentStock 5\n                      :publicData {:categoryLevel1 \"rock\"\n                                   :amenities [\"sauna\" \"pool\"]}\n                      :author #im/ref :user/john}]\n\n        [[:im.image/id #uuid \"8bc7c21d-58f0-412d-8b89-be993893a356\" :avatar/john]\n         #:im.image{:url \"https://asset-url.someservice.com/path/to/avatar.jpg\"}]\n\n        [[:im.user/id :user/john]\n         #:im.user{:createdAt #inst \"2018-04-17T06:55:04.291-00:00\"\n                   :primaryEmail {:im.email/address \"foo@sharetribe.com\"\n                                  :im.email/verified true}\n                   :profile {:im.userProfile/firstName \"John\"\n                             :im.userProfile/lastName \"Doe\"\n                             :im.userProfile/displayName \"John D\"\n                             :im.userProfile/bio \"He's just a poor boy from a poor family.\\nSpare him his life from this monstrosity.\"\n                             :im.userProfile/publicData { :premiumAccount true }\n                             :im.userProfile/avatar #im/ref :avatar/john}\n                   :role [:user.role/customer :user.role/provider]}]\n\n        [[:im.stripeAccount/id]\n         #:im.stripeAccount{:stripeAccountId \"a_stripe_id\"\n                            :user #im/ref :user/john}]\n\n        [[:im.image/id #uuid \"58afd8e1-e336-4ca4-a1e7-ff1d91856a6c\"]\n         #:im.image{:url \"https://asset-url.someservice.com/path/to/img1.jpg\"\n                    :sortOrder 1\n                    :listing #im/ref :listing/rock-sauna}]\n\n        [[:im.image/id]\n         #:im.image{:url \"https://asset-url.someservice.com/path/to/img2.jpg\"\n                    :sortOrder 2\n                    :listing #im/ref [:im.listing/id #uuid \"b074e697-ab0c-4746-a195-c58d73606b1f\"]}]\n\n\n        [[:im.user/id :user/jane]\n         #:im.user{:createdAt #inst \"2018-04-17T06:55:04.291-00:00\"\n                   :primaryEmail {:im.email/address \"bar@sharetribe.com\"\n                                  :im.email/verified true}\n                   :profile {:im.userProfile/firstName \"Jane\"\n                             :im.userProfile/lastName \"Doe\"\n                             :im.userProfile/displayName \"Jane D\"}\n                   :role [:user.role/customer :user.role/provider]}]\n\n        [[:im.review/id]\n         #:im.review{:content \"Exactly as advertised. Bummed this was a one time deal.\"\n                     :rating 5\n                     :type :review.type/ofProvider\n                     :state :review.state/public\n                     :createdAt #inst \"2018-01-06T00:10:10Z\"\n                     :author #im/ref :user/jane\n                     :subject #im/ref :user/john\n                     :listing #im/ref :listing/rock-sauna}]\n\n        [[:im.review/id]\n         #:im.review{:content \"Great customer!\"\n                     :rating 5\n                     :type :review.type/ofCustomer\n                     :state :review.state/public\n                     :createdAt #inst \"2018-01-06T00:10:10Z\"\n                     :author #im/ref :user/john\n                     :subject #im/ref :user/jane}]]}\n```\n\n----------------------------------------\n\nTITLE: Transaction Email Context Structure\nDESCRIPTION: Complete JSON data structure showing available context properties for transaction email templates\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/references/email-templates/index.md#2025-04-18_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"recipient\": {\n    \"id\": \"uuid\",\n    \"first-name\": \"string\",\n    \"last-name\": \"string\",\n    \"display-name\": \"string\",\n    \"private-data\": \"extended-data\",\n    \"public-data\": \"extended-data\",\n    \"protected-data\": \"extended-data\",\n    \"metadata\": \"extended-data\"\n  },\n  \"marketplace\": {\n    \"name\": \"string\",\n    \"url\": \"string\"\n  },\n  \"recipient-role\": \"string\",\n  \"other-party\": {\n    \"id\": \"uuid\",\n    \"first-name\": \"string\",\n    \"last-name\": \"string\",\n    \"display-name\": \"string\",\n    \"private-data\": \"extended-data\",\n    \"public-data\": \"extended-data\",\n    \"protected-data\": \"extended-data\",\n    \"metadata\": \"extended-data\"\n  },\n  \"transaction\": {\n    \"id\": \"uuid\",\n    \"tx-line-items\": [\n      {\n        \"code\": \"string\",\n        \"unit-price\": {\n          \"amount\": \"decimal\",\n          \"currency\": \"string\"\n        },\n        \"line-total\":\n        {\n          \"amount\": \"decimal\",\n          \"currency\": \"string\"\n        },\n        \"include-for\": {\"any-of\": [\"provider\", \"customer\"]},\n        \"quantity\": \"decimal\",\n        \"percentage\": \"decimal\"}\n    ],\n    \"payout-total\": {\n      \"amount\": \"decimal\",\n      \"currency\": \"string\"\n    },\n    \"booking\": {\n      \"start\": \"date\",\n      \"end\": \"date\",\n      \"displayStart\": \"date\",\n      \"displayEnd\": \"date\",\n      \"seats\": \"integer\",\n      \"state\": \"string\"\n    },\n    \"stock-reservation\": {\n      \"quantity\": \"integer\",\n      \"state\": \"string\"\n    },\n    \"reviews\": [\n      {\n        \"content\": \"string\",\n        \"subject\": {\n          \"id\": \"uuid\",\n          \"first-name\": \"string\",\n          \"last-name\": \"string\",\n          \"display-name\": \"string\",\n          \"private-data\": \"extended-data\",\n          \"public-data\": \"extended-data\",\n          \"protected-data\": \"extended-data\",\n          \"metadata\": \"extended-data\"\n        }\n      }\n    ],\n    \"provider\": {\n      \"id\": \"uuid\",\n      \"first-name\": \"string\",\n      \"last-name\": \"string\",\n      \"display-name\": \"string\",\n      \"private-data\": \"extended-data\",\n      \"public-data\": \"extended-data\",\n      \"protected-data\": \"extended-data\",\n      \"metadata\": \"extended-data\"\n    },\n    \"payin-total\": {\n      \"amount\": \"decimal\",\n      \"currency\": \"string\"\n    },\n    \"listing\": {\n      \"id\": \"uuid\",\n      \"title\": \"string,\"\n      \"availability-plan\": {\n        \"type\": \"string\",\n        \"timezone\": \"string\"\n      },\n      \"current-stock\": {\n        \"quantity\": \"integer\"\n      },\n      \"private-data\": \"extended-data\",\n      \"public-data\": \"extended-data\",\n      \"metadata\": \"extended-data\"\n    },\n    \"customer\": {\n      \"id\": \"uuid\",\n      \"first-name\": \"string\",\n      \"last-name\": \"string\",\n      \"display-name\": \"string\",\n      \"private-data\": \"extended-data\",\n      \"public-data\": \"extended-data\",\n      \"protected-data\": \"extended-data\",\n      \"metadata\": \"extended-data\"\n    },\n    \"delayed-transition\": {\n      \"run-at\": \"date\"\n    },\n    \"protected-data\": \"extended-data\",\n    \"metadata\": \"extended-data\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Analytics Example Script\nDESCRIPTION: Execute the example analytics script to generate a summary report of marketplace listings, users, and transactions.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/introduction/getting-started-with-integration-api/index.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnode scripts/analytics.js\n```\n\n----------------------------------------\n\nTITLE: Defining Privileged Transition in Transaction Process\nDESCRIPTION: Example of configuring a privileged transition in a transaction process definition. This snippet shows how to set up a payment request transition with privileged actions for booking creation and line item management.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/concepts-transactions/privileged-transitions/index.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n :name :transition/request-payment\n :actor :actor.role/customer\n :actions [{\n   :name :action/create-pending-booking}\n           {:name :action/privileged-set-line-items}\n           {:name :action/stripe-create-payment-intent}]\n :to :state/pending-payment\n :privileged? true}\n```\n\n----------------------------------------\n\nTITLE: Route Configuration with Data Loading\nDESCRIPTION: Demonstrates how to configure routes with data loading functionality using the page data loading API.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-routing/how-code-splitting-works-in-ftw/index.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n    // import getPageDataLoadingAPI from './containers/pageDataLoadingAPI';\n    // const pageDataLoadingAPI = getPageDataLoadingAPI();\n    {\n      path: '/l/:slug/:id',\n      name: 'ListingPage',\n      component: ListingPage,\n      loadData: pageDataLoadingAPI.ListingPage.loadData,\n    },\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Commission Calculations in JavaScript\nDESCRIPTION: This example demonstrates how to implement dynamically calculated commissions in a Sharetribe marketplace. It includes logic for adjusting customer commission based on quantity and ensuring a minimum provider commission.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/concepts-pricing-and-commissions/commissions-and-monetizing-your-platform/index.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst MINIMUM_PROVIDER_COMMISSION = -1000; // Negative commission in minor units, i.e. in USD cents\nconst CUSTOMER_COMMISSION_PERCENTAGE_REDUCTION = 3;\n\nconst calculateProviderCommission = (order, providerCommission) => {\n  // Use existing helper functions to calculate totals and percentages\n  const price = calculateTotalFromLineItems([order]);\n  const commission = calculateTotalPriceFromPercentage(\n    price,\n    providerCommission\n  );\n\n  // Since provider commissions are negative, comparison must be negative as well\n  if (commission.amount < MINIMUM_PROVIDER_COMMISSION) {\n    return commission;\n  }\n\n  return new Money(MINIMUM_PROVIDER_COMMISSION, price.currency);\n};\n\nconst calculateCustomerCommissionPercentage = (\n  order,\n  customerCommission\n) =>\n  order.quantity > 4\n    ? customerCommission.percentage -\n      CUSTOMER_COMMISSION_PERCENTAGE_REDUCTION\n    : customerCommission.percentage;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst order = {\n  code,\n  unitPrice,\n  quantity,\n  includeFor: ['customer', 'provider'],\n};\n\n// Provider commission reduces the amount of money that is paid out to provider.\n// Therefore, the provider commission line-item should have negative effect to the payout total.\nconst getNegation = percentage => {\n  return -1 * percentage;\n};\n\n// Note: extraLineItems for product selling (aka shipping fee)\n// is not included in either customer or provider commission calculation.\n\n// The provider commission is what the provider pays for the transaction, and\n// it is the subtracted from the order price to get the provider payout:\n// orderPrice - providerCommission = providerPayout\nconst providerCommissionMaybe = hasCommissionPercentage(\n  providerCommission\n)\n  ? [\n      {\n        code: 'line-item/provider-commission',\n        unitPrice: calculateProviderCommission(\n          order,\n          getNegation(providerCommission.percentage)\n        ),\n        quantity: 1,\n        includeFor: ['provider'],\n      },\n    ]\n  : [];\n\n// The customer commission is what the customer pays for the transaction, and\n// it is added on top of the order price to get the customer's payin price:\n// orderPrice + customerCommission = customerPayin\nconst customerCommissionMaybe = hasCommissionPercentage(\n  customerCommission\n)\n  ? [\n      {\n        code: 'line-item/customer-commission',\n        unitPrice: calculateTotalFromLineItems([order]),\n        percentage: calculateCustomerCommissionPercentage(\n          order,\n          customerCommission\n        ),\n        includeFor: ['customer'],\n      },\n    ]\n  : [];\n\n// Let's keep the base price (order) as first line item and provider and customer commissions as last.\n// Note: the order matters only if OrderBreakdown component doesn't recognize line-item.\nconst lineItems = [\n  order,\n  ...extraLineItems,\n  ...providerCommissionMaybe,\n  ...customerCommissionMaybe,\n];\n```\n\n----------------------------------------\n\nTITLE: Adding Insurance Fee to EditListingPricingPanel in JavaScript\nDESCRIPTION: This snippet shows how to add a hard-coded insurance fee to the EditListingPricingPanel component. It determines the fee amount based on the unit type (hourly or daily/nightly) and includes it in the form submission.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-payments/customize-pricing/index.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { HOUR } from '../../../../transactions/transaction';\n...\nconst form = priceCurrencyValid ? (\n  <EditListingPricingForm\n    className={css.form}\n    initialValues={{ price }}\n    const insuranceFeeAmount = unitType === HOUR ? 500 : 2000;\n    onSubmit={values => {\n      const { price } = values;\n      const updatedValues = {\n         price,\n         publicData: {\n           insuranceFee: { amount: insuranceFeeAmount, currency: marketplaceCurrency },\n         }\n      };\n      onSubmit(updatedValues);\n    }}\n    onChange={onChange}\n    saveActionMsg={submitButtonText}\n    disabled={disabled}\n```\n\n----------------------------------------\n\nTITLE: Configuring Display Settings for User Attribute in JavaScript\nDESCRIPTION: Shows how to set up the display configuration for a user attribute on the profile page, including label and visibility options.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-users-and-authentication/extend-user-data-in-template/index.md#2025-04-18_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nshowConfig: {\n  label: 'Do you offer other services besides bike rentals?',\n  displayInProfile: true,\n},\n```\n\n----------------------------------------\n\nTITLE: Updating StripePaymentForm to include billing details in JavaScript\nDESCRIPTION: Modify the StripePaymentForm component to include billing details fields and handle error display for various API calls. The billing address can be optionally removed for UX reasons.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-payments/enable-payment-intents-in-ftw/index.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Add billing details to StripePaymentForm\n<StripePaymentAddress />\n```\n\n----------------------------------------\n\nTITLE: Implementing processCheckoutWithoutPayment Function in JavaScript\nDESCRIPTION: This function handles the checkout process without Stripe payments. It initiates the order, sends an initial message, and processes the transaction steps in sequence.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-payments/removing-stripe/index.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport const processCheckoutWithoutPayment = (orderParams, extraParams) => {\n  const {\n    message,\n    onInitiateOrder,\n    onSendMessage,\n    pageData,\n    process,\n    setPageData,\n    sessionStorageKey,\n  } = extraParams;\n\n  const storedTx = ensureTransaction(pageData.transaction);\n\n  const processAlias = pageData?.listing?.attributes?.publicData?.transactionProcessAlias;\n\n  ////////////////////////////////////////////////\n  // Step 1: initiate order                     //\n  // by requesting booking from Marketplace API //\n  ////////////////////////////////////////////////\n  const fnRequest = fnParams => {\n    // fnParams should be { listingId, deliveryMethod, quantity?, bookingDates?, protectedData }\n\n    const requestTransition =\n      storedTx?.attributes?.lastTransition === process.transitions.INQUIRE\n        ? process.transitions.REQUEST_PAYMENT_AFTER_INQUIRY\n        : process.transitions.REQUEST_PAYMENT;\n    const isPrivileged = process.isPrivileged(requestTransition);\n\n    const orderPromise = onInitiateOrder(\n      fnParams,\n      processAlias,\n      storedTx.id,\n      requestTransition,\n      isPrivileged\n    );\n\n    orderPromise.then(order => {\n      // Store the returned transaction (order)\n      persistTransaction(order, pageData, storeData, setPageData, sessionStorageKey);\n    });\n\n    return orderPromise;\n  };\n\n  //////////////////////////////////\n  // Step 2: send initial message //\n  //////////////////////////////////\n  const fnSendMessage = fnParams => {\n    const orderId = fnParams?.id;\n    return onSendMessage({ id: orderId, message });\n  };\n\n  /////////////////////////////////\n  // Call each step in sequence //\n  ////////////////////////////////\n\n  return fnRequest(orderParams).then(res => fnSendMessage({...res}))\n};\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Fixed Commissions in JavaScript\nDESCRIPTION: This code snippet shows how to set up fixed commissions for both providers and customers in a Sharetribe marketplace. It uses predefined fixed amounts instead of percentages, regardless of the listing price or quantity.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/concepts-pricing-and-commissions/commissions-and-monetizing-your-platform/index.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst FIXED_PROVIDER_COMMISSION = -1500; // Provider commission is negative\nconst FIXED_CUSTOMER_COMMISSION = 1050; // Customer commission is positive\n\nconst calculateCommission = (unitPrice, amount) => {\n  return new Money(amount, unitPrice.currency);\n};\n\nconst order = {\n  code,\n  unitPrice,\n  quantity,\n  includeFor: ['customer', 'provider'],\n};\n\nconst providerCommission = {\n  code: 'line-item/provider-commission',\n  unitPrice: calculateCommission(unitPrice, FIXED_PROVIDER_COMMISSION),\n  quantity: 1,\n  includeFor: ['provider'],\n};\n\nconst customerCommission = {\n  code: 'line-item/customer-commission',\n  unitPrice: calculateCommission(unitPrice, FIXED_CUSTOMER_COMMISSION),\n  quantity: 1,\n  includeFor: ['customer'],\n};\n\nconst lineItems = [\n  order,\n  ...extraLineItems,\n  providerCommission,\n  customerCommission,\n];\n```\n\n----------------------------------------\n\nTITLE: PageBuilder Component Implementation\nDESCRIPTION: React component that handles rendering of page content based on Page Asset Data, including fallback handling\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-content/page-builder/index.md#2025-04-18_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst PageBuilder = props => {\n  const { pageAssetsData, inProgress, fallbackPage, options, ...pageProps } = props;\n\n  if (!pageAssetsData && fallbackPage && !inProgress) {\n    return fallbackPage;\n  }\n```\n\n----------------------------------------\n\nTITLE: Filtering Listings by Multiple Required Values in Sharetribe\nDESCRIPTION: Example of using the Sharetribe SDK to query listings that must have all specified values in their public data. This snippet filters to show only listings with both balcony and floor heating amenities.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/concepts-listings/how-the-search-works/index.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nsdk.listings.query({ pub_amenities: \"has_all:balcony,floorHeating\" })\n```\n\n----------------------------------------\n\nTITLE: Applying Section Overrides to PageBuilder\nDESCRIPTION: Updates the PageBuilder component in LandingPage.js to use the sectionOverrides object via the options prop.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-content/options-prop/index.md#2025-04-18_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n return (\n   <PageBuilder\n     pageAssetsData={pageAssetsData?.[camelize(ASSET_NAME)]?.data}\n     title={schemaTitle}\n     description={schemaDescription}\n     schema={pageSchemaForSEO}\n     contentType={openGraphContentType}\n     inProgress={inProgress}\n+    options={{sectionComponents: sectionOverrides}}\n     fallbackPage={\n       <FallbackPage\n         title={schemaTitle}\n         description={schemaDescription}\n         schema={pageSchemaForSEO}\n         contentType={openGraphContentType}\n       />\n     }\n```\n\n----------------------------------------\n\nTITLE: Merging Hosted and Default Translations in ServerApp\nDESCRIPTION: Implementation of the ServerApp component showing how hosted translations are merged with default locale messages to create a complete set of marketplace texts for rendering.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-content/hosted-microcopy/index.md#2025-04-18_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nexport const ServerApp = props => {\n  const { url, context, helmetContext, store, hostedTranslations = {}, hostedConfig = {} } = props;\n  const appConfig = mergeConfig(hostedConfig, defaultConfig);\n  HelmetProvider.canUseDOM = false;\n  return (\n    <Configurations appConfig={appConfig}>\n      <IntlProvider\n        locale={appConfig.localization.locale}\n        messages={{ ...localeMessages, ...hostedTranslations }}\n        textComponent=\"span\"\n      >\n  {/* etc. */\n```\n\n----------------------------------------\n\nTITLE: Setting Mapbox Access Token Environment Variable\nDESCRIPTION: Configuration for setting the Mapbox access token as an environment variable in the project's .env file for local development.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-search/how-to-set-up-mapbox-for-ftw/index.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nREACT_APP_MAPBOX_ACCESS_TOKEN=my-access-token-here\n```\n\n----------------------------------------\n\nTITLE: Adding a Listing Search Schema with Sharetribe CLI\nDESCRIPTION: This command adds a new search schema for the 'brand' field in the public scope of listings, with an enum type.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-search/manage-search-schemas-with-flex-cli/index.md#2025-04-18_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ flex-cli search set --key brand --type enum --scope public -m my-marketplace-dev\n```\n\n----------------------------------------\n\nTITLE: Filtering Listings by Custom Public Data in Sharetribe\nDESCRIPTION: Example of using the Sharetribe SDK to query listings based on a specific value in their public data. This snippet filters to show only listings with the condition 'used'.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/concepts-listings/how-the-search-works/index.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nsdk.listings.query({ pub_condition: \"used\" })\n```\n\n----------------------------------------\n\nTITLE: Defining a Transition in Clojure\nDESCRIPTION: This snippet demonstrates how to define a transition in a transaction process. It includes properties such as name, actor, actions, from state, and to state.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/references/transaction-process-format/index.md#2025-04-18_snippet_4\n\nLANGUAGE: clojure\nCODE:\n```\n{\n :name :transition/transition-name\n :actor :actor.role/customer ;; actor.role/provider or :actor.role/operator\n :actions []\n :from :state/from-state\n :to :state/to-state}\n```\n\n----------------------------------------\n\nTITLE: Express Route Handler for Server-Side Rendering in JavaScript\nDESCRIPTION: This snippet shows how to set up an Express route handler for server-side rendering in Sharetribe Flex. It uses a wildcard route to catch all paths and render the appropriate page component.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-routing/how-routing-works-in-ftw/index.md#2025-04-18_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\napp.get('*', (req, res) => {\n```\n\n----------------------------------------\n\nTITLE: Checking Login as User Status in React Component\nDESCRIPTION: This code snippet demonstrates how to verify if the current authenticated session was initiated using the 'Login as User' feature. It uses the latest SDK (version 1.21.0) to check the authInfo.isLoggedInAs value.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-users-and-authentication/login-as-user/index.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nauthInfo.isLoggedInAs\n```\n\n----------------------------------------\n\nTITLE: Processing Fetched Translation Assets in Server Data Loading\nDESCRIPTION: Code that processes fetched translation assets and stores them for use in server-side rendering, ensuring the latest translations are available when rendering the page.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-content/hosted-microcopy/index.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n.then(fetchedAssets => {\n  translations = fetchedAssets?.translations?.data || {};\n  return Promise.all(dataLoadingCalls);\n})\n```\n\n----------------------------------------\n\nTITLE: Adding User Profile Search Schema with Sharetribe CLI\nDESCRIPTION: Demonstrates how to add a search schema for user profiles using the Sharetribe CLI. This example adds a 'long' type schema for an 'age' attribute in the protected scope.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-search/manage-search-schemas-with-flex-cli/index.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ flex-cli search set --schema-for userProfile --key age --type long --scope protected -m my-marketplace-dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Listing Detail Editing in Sharetribe Web Template\nDESCRIPTION: Demonstrates how to configure the appearance of an attribute in the listing detail editing panel, including label, placeholder, and required status.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-listing/extend-listing-data-in-ftw/index.md#2025-04-18_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nsaveConfig: {\n  label: 'Accessories',\n  placeholderMessage: 'Select an option…',\n  isRequired: false,\n},\n```\n\n----------------------------------------\n\nTITLE: Implementing Github Authentication Function in Sharetribe Frontend\nDESCRIPTION: This function handles the Github authentication process in the Sharetribe Web Template frontend, redirecting the user to the Github login endpoint.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-users-and-authentication/setup-oidc-proxy/index.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst authWithGithub = () => {\n  const { baseUrl, queryParams } = getDataForSSORoutes();\n  window.location.href = `${baseUrl}/api/auth/github?${queryParams}`;\n};\n```\n\n----------------------------------------\n\nTITLE: Creating EditListingServiceHistoryForm Component\nDESCRIPTION: Implements a new form component for editing service history, including fields for last service date and service details.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-listing/extend-listing-data-in-ftw/index.md#2025-04-18_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { bool, func, string } from 'prop-types';\nimport { compose } from 'redux';\nimport { Form as FinalForm } from 'react-final-form';\nimport classNames from 'classnames';\nimport { futureIsOutsideRange } from '../../../../util/dates';\n\nimport {\n  intlShape,\n  injectIntl,\n  FormattedMessage,\n} from '../../../../util/reactIntl';\nimport {\n  Form,\n  Button,\n  FieldTextInput,\n  FieldDateInput,\n} from '../../../../components';\n\nimport css from './EditListingServiceHistoryForm.module.css';\n\nexport const EditListingServiceHistoryFormComponent = props => (\n  <FinalForm\n    {...props}\n    render={formRenderProps => {\n      const {\n        className,\n        disabled,\n        handleSubmit,\n        intl,\n        invalid,\n        pristine,\n        saveActionMsg,\n        updated,\n        updateError,\n        updateInProgress,\n      } = formRenderProps;\n\n      const errorMessage = updateError ? (\n        <p className={css.error}>\n          <FormattedMessage id=\"EditListingServiceHistoryForm.updateFailed\" />\n        </p>\n      ) : null;\n\n      const classes = classNames(css.root, className);\n      const submitReady = updated && pristine;\n      const submitInProgress = updateInProgress;\n      const submitDisabled = invalid || disabled || submitInProgress;\n\n      return (\n        <Form className={classes} onSubmit={handleSubmit}>\n          {errorMessage}\n          <FieldDateInput\n            className={css.input}\n            id=\"lastServiced\"\n            name=\"lastServiced\"\n            label={intl.formatMessage({\n              id: 'EditListingServiceHistoryForm.lastServiced',\n            })}\n            isOutsideRange={futureIsOutsideRange}\n          />\n\n          <FieldTextInput\n            className={css.input}\n            id=\"serviceDetails\"\n            name=\"serviceDetails\"\n            type=\"textarea\"\n            label={intl.formatMessage({\n              id: 'EditListingServiceHistoryForm.serviceDetails',\n            })}\n          />\n\n          <Button\n            className={css.submitButton}\n            type=\"submit\"\n            inProgress={submitInProgress}\n            disabled={submitDisabled}\n            ready={submitReady}\n          >\n            {saveActionMsg}\n          </Button>\n        </Form>\n      );\n    }}\n  />\n);\n\nexport default compose(injectIntl)(\n  EditListingServiceHistoryFormComponent\n);\n```\n\n----------------------------------------\n\nTITLE: Live Tailing Events with Sharetribe CLI (Bash)\nDESCRIPTION: Example of using the flex-cli command to live tail events as they happen in real-time. This command demonstrates how to monitor events in a marketplace, showing event details such as sequence ID, resource ID, event type, creation time, source, and actor.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-events/view-events-with-flex-cli/index.md#2025-04-18_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n$ flex-cli events tail -m my-marketplace-dev\n```\n\n----------------------------------------\n\nTITLE: Analyzing Listing Publication Events in JavaScript\nDESCRIPTION: Comprehensive example of querying, filtering, and analyzing events to detect newly published listings, including handling different scenarios of listing publication.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-events/reacting-to-events/index.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst now = new Date();\nconst fiveMinutesAgo = new Date(now - 300000);\n\nconst handleListingPublished = event => {\n  const { resourceId, resource: listing } = event.attributes;\n  const listingId = resourceId.uuid;\n  const authorId = listing.relationships.author.data.id.uuid;\n\n  // Do something about the new published listing, such as send notification,\n  // synchronize data to external system, etc.\n  console.log(\n    `A new listing has been published: listingId ${listingId}, author ID: ${authorId}`\n  );\n};\n\nconst analyzeEvent = event => {\n  const {\n    resource: listing,\n    previousValues,\n    eventType,\n  } = event.attributes;\n  const listingState = listing.attributes.state;\n  const { state: previousState } = previousValues.attributes || {};\n\n  const isPublished = listingState === 'published';\n  const isPendingApproval = listingState === 'pendingApproval';\n  const wasDraft = previousState === 'draft';\n  const wasPendingApproval = previousState === 'pendingApproval';\n\n  switch (eventType) {\n    case 'listing/created':\n      if (isPublished) {\n        handleListingPublished(event);\n      }\n      break;\n    case 'listing/updated':\n      if (isPublished && (wasPendingApproval || wasDraft)) {\n        handleListingPublished(event);\n      }\n      break;\n  }\n};\n\nintegrationSdk.events\n  .query({\n    createdAtStart: fiveMinutesAgo,\n    eventTypes: 'listing/created,listing/updated',\n  })\n  .then(res => {\n    const events = res.data.data;\n\n    events.forEach(analyzeEvent);\n  });\n```\n\n----------------------------------------\n\nTITLE: Limiting Event Results\nDESCRIPTION: Example of using the --limit parameter to restrict the number of events returned.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-events/view-events-with-flex-cli/index.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ flex-cli events -l 2 -m my-marketplace-dev\n\nSeq ID   Resource ID                           Event type                     Created at local time   Source           Actor\n3391589  5fca1e5b-2004-4479-a68c-dfc8a03083b8  availabilityException/created  2020-12-04 1:32:43 PM   marketplace-api  jane@example.com\n3391590  5fca1e5c-eda8-4f54-ac30-ee7fe1010d11  availabilityException/created  2020-12-04 1:32:44 PM   marketplace-api  jane@example.com\n```\n\n----------------------------------------\n\nTITLE: Updating getOrderParams Function in CheckoutPageWithPayment.js\nDESCRIPTION: Modifies the getOrderParams function to extract seats data from pageData.orderData and include it in the order parameters for transaction initialization and speculation.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-listing/seats/index.md#2025-04-18_snippet_45\n\nLANGUAGE: diff\nCODE:\n```\nconst getOrderParams = (pageData, shippingDetails, optionalPaymentParams, config) => {\n  const quantity = pageData.orderData?.quantity;\n  const quantityMaybe = quantity ? { quantity } : {};\n+ const seats = pageData.orderData?.seats;\n+ const seatsMaybe = seats ? { seats } : {};\n\n  const deliveryMethod = pageData.orderData?.deliveryMethod;\n  const deliveryMethodMaybe = deliveryMethod ? { deliveryMethod } : {};\n\n...\n\n  // These are the order parameters for the first payment-related transition\n  // which is either initiate-transition or initiate-transition-after-enquiry\n  const orderParams = {\n    listingId: pageData?.listing?.id,\n    ...deliveryMethodMaybe,\n    ...quantityMaybe,\n+   ...seatsMaybe,\n    ...bookingDatesMaybe(pageData.orderData?.bookingDates),\n    ...protectedDataMaybe,\n    ...optionalPaymentParams,\n  };\n  return orderParams;\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Listing Likes Count with Integration API\nDESCRIPTION: This snippet defines a function that updates the 'likes' count in a listing's public data using the Integration API. It retrieves the current likes count, updates it, and saves the new value.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-events/like-feature/index.md#2025-04-18_snippet_13\n\nLANGUAGE: js\nCODE:\n```\n/**\n * @param {string} listingId\n * @param {number} likeAddition – A value representing a like or a dislike that is either added to or subtracted from currentLikes\n */\nconst updateListing = (listingId, likeAddition) => {\n  return integrationSdk.listings\n    .query({\n      ids: listingId,\n    })\n    .then(listings => {\n      const listing = listings.data.data[0];\n      const currentLikes = listing.attributes.publicData.likes || 0;\n      const updatedLikes = currentLikes + likeAddition;\n      return integrationSdk.listings.update(\n        {\n          id: listingId,\n          publicData: {\n            likes: updatedLikes,\n          },\n        },\n        { expand: true }\n      );\n    });\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Custom H1 Component\nDESCRIPTION: Creates a custom H1 component to be used in field overrides, allowing for customized heading styling.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-content/options-prop/index.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nexport const CustomH1 = React.forwardRef((props, ref) => {\n  const { rootClassName: rootClass, as, ...otherProps } = props;\n  return (\n    <Heading\n      rootClassName={rootClass || css.h1custom}\n      as={as || 'h1'}\n      tagRef={ref}\n      {...otherProps}\n    />\n  );\n});\nCustomH1.displayName = 'CustomH1';\n```\n\n----------------------------------------\n\nTITLE: Passing Like Functions as Props to SectionLikes Component in React\nDESCRIPTION: This diff demonstrates how to pass new like-related functions and state as props to the SectionLikes component for handling like interactions.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-events/like-feature/index.md#2025-04-18_snippet_17\n\nLANGUAGE: diff\nCODE:\n```\nconst sectionLikes = (\n  <SectionLikes\n    publicData={currentListing?.attributes?.publicData}\n    listingId={currentListing.id.uuid}\n    onUpdateLikes={onUpdateLikes}\n    currentUser={currentUser}\n    updateLikesInProgress={updateLikesInProgress}\n+   likesOffset={likesOffset}\n+   onSubtractLike={() => updateLikesOffset(likesOffset - 1)}\n+   onAddLike={() => updateLikesOffset(likesOffset + 1)}\n  />\n  )\n```\n\n----------------------------------------\n\nTITLE: Implementing Date Range Units with Seats Helper Function in JSX\nDESCRIPTION: A new helper function to calculate units based on date range with seats support. This function handles booking dates and seats to determine price calculation for daily or nightly bookings.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-listing/seats/index.md#2025-04-18_snippet_33\n\nLANGUAGE: jsx\nCODE:\n```\n/**\n * Calculate units based on days or nights between given bookingDates. Returns units and seats.\n *\n * @param {*} orderData should contain booking dates and seats\n * @param {*} code should be either 'line-item/day' or 'line-item/night'\n */\nconst getDateRangeUnitsSeatsLineItems = (orderData, code) => {\n  const { bookingStart, bookingEnd, seats } = orderData;\n\n  const units =\n    bookingStart && bookingEnd\n      ? calculateQuantityFromDates(bookingStart, bookingEnd, code)\n      : null;\n\n  return { units, seats, extraLineItems: [] };\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Line Items with UnitPrice and Quantity in Sharetribe\nDESCRIPTION: Example of defining line items using unitPrice and quantity parameters to calculate the transaction price. This approach is used when a fixed fee needs to be multiplied by a quantity.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/concepts-pricing-and-commissions/pricing/index.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n| code                                  | unitPrice              | quantity | lineTotal               | includeFor               |\n| :------------------------------------ | :--------------------- | :------- | :---------------------- | :----------------------- |\n| \"line-item/nights\"                    | new Money(5000, \"USD\") | 3        | new Money(15000, \"USD\") | [\"customer\", \"provider\"] |\n| \"line-item/cleaning-fee\"              | new Money(7500, \"USD\") | 1        | new Money(7500, \"USD\")  | [\"customer\", \"provider\"] |\n| \"line-item/fixed-customer-commission\" | new Money(2500, \"USD\") | 1        | new Money(2500, \"USD\")  | [\"customer\"]             |\n```\n\n----------------------------------------\n\nTITLE: Rendering Routes in React with BrowserRouter\nDESCRIPTION: Shows how the ClientApp component sets up BrowserRouter and renders the Routes component with the route configuration.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-routing/how-routing-works-in-ftw/index.md#2025-04-18_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { BrowserRouter } from 'react-router-dom';\nimport Routes from './Routes';\nimport routeConfiguration from './routeConfiguration';\n//...\nexport const ClientApp = props => {\n  return (\n    <BrowserRouter>\n      <Routes routes={routeConfiguration()} />\n    </BrowserRouter>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Viewing Search Schemas with Sharetribe CLI\nDESCRIPTION: This command displays the current search schemas for a marketplace, showing both Console-created and CLI-defined schemas.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-search/manage-search-schemas-with-flex-cli/index.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ flex-cli search -m my-marketplace-dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Routes with Loadable Components in JavaScript\nDESCRIPTION: Demonstrates how routes are configured using dynamic imports with Loadable Components and defines the route configuration array.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-routing/how-routing-works-in-ftw/index.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst AboutPage = loadable(() =>\n  import(\n    /* webpackChunkName: \"AboutPage\" */ './containers/AboutPage/AboutPage'\n  )\n);\nconst AuthenticationPage = loadable(() =>\n  import(\n    /* webpackChunkName: \"AuthenticationPage\" */ './containers/AuthenticationPage/AuthenticationPage'\n  )\n);\n// etc..\n\n// Our routes are exact by default.\n// See behaviour from Routes.js where Route is created.\nconst routeConfiguration = () => {\n  return [\n    {\n      path: '/about',\n      name: 'AboutPage',\n      component: AboutPage,\n    },\n    {\n      path: '/login',\n      name: 'LoginPage',\n      component: AuthenticationPage,\n      extraProps: { tab: 'login' },\n    },\n    {\n      path: '/signup',\n      name: 'SignupPage',\n      component: AuthenticationPage,\n      extraProps: { tab: 'signup' },\n    },\n    //...\n  ];\n};\n\nexport default routeConfiguration;\n```\n\n----------------------------------------\n\nTITLE: Setting Booking Display Times in JSON\nDESCRIPTION: Example showing how to set booking start times with a 10-minute preparation buffer using bookingStart and bookingDisplayStart parameters. The actual booking starts at 12:20 but displays to customers as starting at 12:30.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/references/availability/index.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\nbookingStart: \"2018-04-20T12:20:00.000Z\",\nbookingDisplayStart: \"2018-04-20T12:30:00.000Z\"\n```\n\n----------------------------------------\n\nTITLE: Processing Event Data with jq (Bash)\nDESCRIPTION: Example of using the flex-cli command in combination with jq to process and transform event data. This command filters listing events and extracts specific fields, demonstrating how to analyze event data programmatically.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-events/view-events-with-flex-cli/index.md#2025-04-18_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ flex-cli events --filter listing -m my-marketplace-dev --json | jq '{sequenceId, eventType, source, changedKeys: (.previousValues // {} | keys)}'\n```\n\n----------------------------------------\n\nTITLE: Using Translation Helper in HTML Email Templates\nDESCRIPTION: This snippet demonstrates how to replace static text with the {{t}} translation helper in HTML email templates. It shows the syntax for including variables and fallback messages.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-content/use-translations-in-emails/index.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- original message -->\n<p>{{ marketplace.name }} fee</p>\n\n<!--  becomes {{t \"templatename.messagekey\" \"fallbackmessage\" variableName1=variableValue1 variableName2=variableValue2... }} -->\n\n<p>\n  {{t \"BookingNewRequest.MarketplaceFeeLabel\" \"{marketplaceName} fee\"\n  marketplaceName=marketplace.name}}\n</p>\n```\n\n----------------------------------------\n\nTITLE: Modifying pollLoop Function for Like Event Processing in JavaScript\nDESCRIPTION: This diff shows changes to the pollLoop function to handle like events. It groups events, updates listings with new like counts, and logs the results.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-events/like-feature/index.md#2025-04-18_snippet_15\n\nLANGUAGE: diff\nCODE:\n```\nconst pollLoop = (sequenceId) => {\n  var params = sequenceId ? {startAfterSequenceId: sequenceId} : {createdAtStart: startTime};\n  queryEvents(params)\n    .then(res => {\n      const events = res.data.data;\n      const lastEvent = events[events.length - 1];\n      const fullPage = events.length === res.data.meta.perPage;\n      const delay = fullPage? pollWait : pollIdleWait;\n      const lastSequenceId = lastEvent ? lastEvent.attributes.sequenceId : sequenceId;\n\n-     events.forEach(e => {\n-       analyzeEvent(e);\n-     });\n-\n-     if (lastEvent) saveLastEventSequenceId(lastEvent.attributes.sequenceId);\n-     setTimeout(() => {pollLoop(lastSequenceId);}, delay);\n+     const likesToUpdate = groupEvents(events);\n+     const actions = Object.keys(likesToUpdate).map(key => updateListing(key, likesToUpdate[key]));\n+\n+     const results = Promise.all(actions);\n+     results.then(result => {\n+       result.forEach(el => {\n+         console.log(`Listing ID ${el.data.data.id.uuid} now has ${el.data.data.attributes.publicData.likes} like(s).`)\n+       })\n+\n+       if (lastEvent) saveLastEventSequenceId(lastEvent.attributes.sequenceId);\n+       setTimeout(() => {pollLoop(lastSequenceId);}, delay);\n+     })\n+   });\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring a New Top-Level Attribute in Sharetribe Web Template\nDESCRIPTION: Demonstrates how to configure a new 'accessories' attribute in the configListing.js file. This includes defining the attribute, its possible values, and configurations for saving, filtering, and displaying.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-listing/extend-listing-data-in-ftw/index.md#2025-04-18_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n  {\n    key: 'accessories',\n    scope: 'public',\n    schemaType: 'multi-enum',\n    enumOptions: [\n      { option: 'bell', label: 'Bell' },\n      { option: 'lights', label: 'Lights' },\n      { option: 'lock', label: 'Lock' },\n      { option: 'mudguard', label: 'Mudguard' },\n    ],\n    saveConfig: {\n      label: 'Accessories',\n      placeholderMessage: 'Select an option…',\n      isRequired: false,\n    },\n    filterConfig: {\n      indexForSearch: true,\n      label: 'Accessories',\n      searchMode: 'has_any',\n      group: 'secondary',\n    },\n    showConfig: {\n      label: 'Accessories',\n    },\n  },\n```\n\n----------------------------------------\n\nTITLE: Configuring SearchPage Layout in JavaScript\nDESCRIPTION: This snippet shows how to configure the SearchPage layout in the configLayout.js file. There are two layout variants available: 'map' which displays search results alongside a map, and 'grid' which shows search results in a grid format without a map.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-configuration/configuration-in-ftw-x/index.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// There are 2 SearchPage variants that can be used:\n// 'map' & 'grid'\nexport const searchPage = {\n  variantType: 'map',\n};\n```\n\n----------------------------------------\n\nTITLE: Loading Dynamic CMS Page Data\nDESCRIPTION: Function to fetch page assets for dynamically created CMS pages using the page ID from URL parameters\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-content/page-builder/index.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport const loadData = (params, search) => dispatch => {\n  const pageId = params.pageId;\n  const pageAsset = { [pageId]: `content/pages/${pageId}.json` };\n  const hasFallbackContent = false;\n  return dispatch(fetchPageAssets(pageAsset, hasFallbackContent));\n};\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering of Delete Account Form in JavaScript\nDESCRIPTION: This code snippet shows how to conditionally render the delete account form based on the user's status and any existing delete account errors. It prevents showing the form if there's a 409 Conflict error, indicating unfinished transactions.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-users-and-authentication/implement-delete-user/index.md#2025-04-18_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n// Show form for a valid current user\nconst showDeleteAccountForm =\n  currentUser && currentUser.id && deleteAccountError?.status !== 409;\n```\n\n----------------------------------------\n\nTITLE: Resolving Helmet Fee Price in JSX\nDESCRIPTION: Helper function to resolve the helmet rental fee from a listing's public data, ensuring data integrity by fetching from Marketplace API rather than directly from frontend.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/tutorial-transaction-process/customize-pricing/index.md#2025-04-18_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nconst resolveHelmetFeePrice = listing => {\n  const publicData = listing.attributes.publicData;\n  const helmetFee = publicData && publicData.helmetFee;\n  const { amount, currency } = helmetFee;\n\n  if (amount && currency) {\n    return new Money(amount, currency);\n  }\n\n  return null;\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Github Login Button to Sharetribe Authentication Page\nDESCRIPTION: This JSX code adds a Github login button to the Sharetribe Web Template's authentication page, using the SocialLoginButton component.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-users-and-authentication/setup-oidc-proxy/index.md#2025-04-18_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  showGithubLogin ? (\n    <div className={css.socialButtonWrapper}>\n      <SocialLoginButton onClick={() => authWithGithub()}>\n        <span className={css.buttonIcon}>{GithubLogo}</span>\n        {isLogin ? (\n          <FormattedMessage id=\"AuthenticationPage.loginWithGithub\" />\n        ) : (\n          <FormattedMessage id=\"AuthenticationPage.signupWithGithub\" />\n        )}\n      </SocialLoginButton>\n    </div>\n  ) : null;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Translations and Locale in Handlebars Email Templates\nDESCRIPTION: This snippet shows how to set up translations, locale, and timezone in Handlebars email templates. It includes adding asset references for email texts and localization, and setting the timezone based on the transaction listing's availability plan.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-content/use-translations-in-emails/index.md#2025-04-18_snippet_0\n\nLANGUAGE: handlebars\nCODE:\n```\n{{set-translations (asset \"content/email-texts.json\")}}\n{{set-locale (asset \"general/localization.json\" \"locale\" \"en_US\")}}\n{{set-timezone transaction.listing.availability-plan.timezone}}\n```\n\n----------------------------------------\n\nTITLE: Checking Pending Payouts for Account Deletion in JavaScript\nDESCRIPTION: This code snippet demonstrates how to query transactions and filter for pending payouts created within the last 7 days. This is useful for determining if a user can delete their account based on recent financial activity.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-users-and-authentication/implement-delete-user/index.md#2025-04-18_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nsdk.transactions.query({\n  only: \"sale\"\n})\n.then(resp => {\n // In the default-booking and default-purchase processes, payouts are created on \"transition/complete\". We want to\n // determine the transactions where this transition has been created less than 7 days ago.\n const pendingPayouts = resp.data.data.filter(tx =>{\n     // For the transactions where the user is the provider, check the transitions\n     // to determine whether \"transition/complete\" was created less than 7 days ago.\n     return tx.attributes.transitions.some(tr => {\n         const today = new Date();\n         const sevenDaysFromCreated = new Date(tr.createdAt);\n         sevenDaysFromCreated.setDate(sevenDaysFromCreated.getDate()   7);\n         return tr.transition == 'transition/complete' && today < sevenDaysFromCreated;\n     });\n })\n```\n\n----------------------------------------\n\nTITLE: Importing updateLikes Thunk in ListingPage Component\nDESCRIPTION: This snippet shows how to import the newly created 'updateLikes' thunk into the ListingPage component for use with Redux.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-events/like-feature/index.md#2025-04-18_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  sendEnquiry,\n  fetchTransactionLineItems,\n  setInitialValues,\n  updateLikes,\n} from './ListingPage.duck';\n```\n\n----------------------------------------\n\nTITLE: Server-Side Store Initialization and Asset Fetching\nDESCRIPTION: Code showing how the Redux store is initialized on the server and the process of fetching app assets. The fetchAppAssets thunk is used to retrieve the latest version of translation assets.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-content/hosted-microcopy/index.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nlet translations = {};\nconst store = configureStore({}, sdk);\nreturn store.dispatch(fetchAppAssets(config.appCdnAssets));\n```\n\n----------------------------------------\n\nTITLE: Creating SectionServiceHistory Component for Listing Page in Sharetribe Flex\nDESCRIPTION: This snippet defines the SectionServiceHistoryMaybe component, which is responsible for displaying the service history information on the listing page. It handles formatting and conditional rendering of the service history data.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-listing/extend-listing-data-in-ftw/index.md#2025-04-18_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport SectionTextMaybe from './SectionTextMaybe';\n\nimport css from './ListingPage.module.css';\nimport { formatDateIntoPartials } from '../../util/dates';\n\nconst SectionServiceHistoryMaybe = props => {\n  const { intl, publicData } = props;\n  const { lastServiced, serviceDetails } =\n    publicData?.serviceHistory || {};\n  if (!lastServiced && !serviceDetails) {\n    return null;\n  }\n\n  const formattedServiceDate = formatDateIntoPartials(\n    new Date(lastServiced),\n    intl\n  );\n\n  return (\n    <div className={css.sectionServiceHistory}>\n      <SectionTextMaybe\n        heading={intl.formatMessage({\n          id: 'SectionServiceHistoryMaybe.lastServicedHeading',\n        })}\n        text={formattedServiceDate.date}\n      />\n      <SectionTextMaybe\n        heading={intl.formatMessage({\n          id: 'SectionServiceHistoryMaybe.serviceDetailsHeading',\n        })}\n        text={serviceDetails}\n      />\n    </div>\n  );\n};\n\nexport default SectionServiceHistoryMaybe;\n```\n\n----------------------------------------\n\nTITLE: Updating Transaction Process Configuration\nDESCRIPTION: JavaScript configuration update to use the new instant booking process\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/tutorial-transaction-process/create-transaction-process/index.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n  {\n-   listingType: 'daily-booking',\n-   label: 'Daily booking',\n+   listingType: 'instant-booking',\n+   label: 'Instant booking',\n    transactionType: {\n-     process: 'default-booking',\n-     alias: 'default-booking/release-1',\n+     process: 'biketribe-instant-booking',\n+     alias: 'biketribe-instant-booking/release-1',\n      unitType: 'day',\n    },\n  },\n```\n\n----------------------------------------\n\nTITLE: Moment.js Custom Extension for Minute Intervals\nDESCRIPTION: Extends moment.js with a custom function to handle minute-based interval calculations.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-listing/time-slots/index.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.fn.startOfMinuteBasedInterval = function(unitCount) {\n  const durationInMs = moment\n    .duration(unitCount, 'minutes')\n    .asMilliseconds();\n\n  // Calculate the number of durations since 1970-01-01 00:00:00\n  const durationCount = Math.floor(this.valueOf() / durationInMs);\n  // Return a moment that is rounded to the start of the previous whole number of durations\n  return moment(durationCount * durationInMs);\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Route-Based Code Splitting in React\nDESCRIPTION: Reference to the route configuration file where code splitting is implemented using Loadable Components. This setup enables route-based code splitting to improve initial load performance.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-styling/how-to-improve-performance/index.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsrc/routing/routeConfiguration.js\n```\n\n----------------------------------------\n\nTITLE: Modifying Line Item Helper Function Selection in lineItems.js\nDESCRIPTION: Updates the code to use the new seats-aware helper function when seats are defined in the orderData. This diff shows how to integrate the new function into the existing conditional logic.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-listing/seats/index.md#2025-04-18_snippet_35\n\nLANGUAGE: diff\nCODE:\n```\n  // Here \"extra line-items\" means line-items that are tied to unit type\n  // E.g. by default, \"shipping-fee\" is tied to 'item' aka buying products.\n  const quantityAndExtraLineItems =\n    unitType === 'item'\n      ? getItemQuantityAndLineItems(orderData, publicData, currency)\n      : unitType === 'hour'\n      ? getHourQuantityAndLineItems(orderData)\n+     : ['day', 'night'].includes(unitType) && !!orderData.seats\n+     ? getDateRangeUnitsSeatsLineItems(orderData, code)\n      : ['day', 'night'].includes(unitType)\n      ? getDateRangeQuantityAndLineItems(orderData, code)\n      : {};\n```\n\n----------------------------------------\n\nTITLE: Creating a Dockerfile for Sharetribe Web Template\nDESCRIPTION: A Dockerfile that creates a Node.js-based container for running the Sharetribe Web Template. It sets up the working directory, installs dependencies, copies application files, builds the application, and configures environment variables for production use.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-hosting/run-ftw-in-docker-container/index.md#2025-04-18_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM node:16\nWORKDIR /home/node/app\nCOPY package.json ./\nCOPY yarn.lock ./\nRUN yarn install\nCOPY . .\nENV PORT=4000\nENV NODE_ENV=production\nEXPOSE 4000\nRUN yarn run build\nUSER node\nCMD [\"yarn\", \"start\"]\n```\n\n----------------------------------------\n\nTITLE: Updating getStateData Function in JSX\nDESCRIPTION: Shows the modified getStateData function using the isBookingProcess helper to determine the appropriate state data for different transaction processes.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/tutorial-transaction-process/create-transaction-process/index.md#2025-04-18_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nif (processName === PURCHASE_PROCESS_NAME) {\n  return getStateDataForPurchaseProcess(params, processInfo());\n} else if (isBookingProcess(processName)) {\n  return getStateDataForBookingProcess(params, processInfo());\n} else if (processName === INQUIRY_PROCESS_NAME) {\n  return getStateDataForInquiryProcess(params, processInfo());\n} else {\n  return {};\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DMARC DNS Record for Email Authentication\nDESCRIPTION: Example of setting up a DNS TXT record for DMARC (Domain-based Message Authentication, Reporting, and Conformance) policy. This helps improve email deliverability, especially for Gmail and Yahoo addresses.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-messaging/set-up-outgoing-email-settings/index.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| type | name                | value            |\n| ---- | ------------------- | ---------------- |\n| TXT  | \\_dmarc.example.com | v=DMARC1; p=none |\n```\n\n----------------------------------------\n\nTITLE: Adding Conditional Message Display in LineItemBasePriceMaybe.js\nDESCRIPTION: Adds conditional rendering to display different messages based on whether multiple seats are selected. Uses translation keys to support localization of messages with appropriate values.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-listing/seats/index.md#2025-04-18_snippet_40\n\nLANGUAGE: diff\nCODE:\n```\n+ const message = unitPurchase?.seats > 1\n+   ? (<FormattedMessage id={`${translationKey}Seats`} values={{ unitPrice, quantity, seats: unitPurchase.seats }} />)\n+   : (<FormattedMessage id={translationKey} values={{ unitPrice, quantity }} />)\n\n  return quantity && total ? (\n    <div className={css.lineItem}>\n      <span className={css.itemLabel}>\n-       <FormattedMessage id={translationKey} values={{ unitPrice, quantity }} />\n+       {message}\n      </span>\n      <span className={css.itemValue}>{total}</span>\n    </div>\n```\n\n----------------------------------------\n\nTITLE: Filtering Listings by Availability Date Range in Sharetribe\nDESCRIPTION: Example of using the Sharetribe SDK to query listings based on their availability during a specific date range. This snippet shows listings available for October 22-29, 2022.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/concepts-listings/how-the-search-works/index.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsdk.listings.query({ availability: \"full\", start: \"Sat Oct 22 2022 01:00:00 GMT+0100\", end: \"Sat Oct 29 2022 01:00:00 GMT+0100\" })\n```\n\n----------------------------------------\n\nTITLE: Adding Seat Selection to EditListingAvailabilityExceptionForm in React\nDESCRIPTION: Implements conditional rendering of a seat selection input in the EditListingAvailabilityExceptionForm based on availability status.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-listing/seats/index.md#2025-04-18_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nconst formState = formApi.getState();\nconst isAvailable = formState.values.availability === 'available';\n\nconst seatsSelectionMaybe = isAvailable ? (\n  <FieldTextInput\n    className={css.seats}\n    id=\"seats\"\n    name=\"seats\"\n    type=\"number\"\n    min=\"1\"\n    label={intl.formatMessage({\n      id: 'EditListingAvailabilityExceptionForm.seatsLabel',\n    })}\n    placeholder={intl.formatMessage({\n      id: 'EditListingAvailabilityExceptionForm.seatsPlaceholder',\n    })}\n  />\n) : null;\n```\n\n----------------------------------------\n\nTITLE: Updating handleFormSpyChange to Include Seats in BookingDatesForm\nDESCRIPTION: Modifies the handleFormSpyChange function to extract seat information from form values and include it in the orderData object sent to onFetchTransactionLineItems.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-listing/seats/index.md#2025-04-18_snippet_19\n\nLANGUAGE: js\nCODE:\n```\nconst handleFormSpyChange = (\n  listingId,\n  isOwnListing,\n  fetchLineItemsInProgress,\n  onFetchTransactionLineItems\n) => formValues => {\n  const { seats, bookingDates } = formValues.values;\n\n  const { startDate, endDate } = bookingDates ? bookingDates : {};\n\n  if (startDate && endDate && !fetchLineItemsInProgress) {\n    onFetchTransactionLineItems({\n      orderData: {\n        bookingStart: startDate,\n        bookingEnd: endDate,\n        seats: parseInt(seats, 10),\n      },\n      listingId,\n      isOwnListing,\n    });\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Message with Arguments Example\nDESCRIPTION: Shows how to define and use a message with named arguments in both JSON and JSX formats.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-content/how-to-change-ftw-bundled-ui-microcopy/index.md#2025-04-18_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"EnquiryForm.messageLabel\": \"Message to {authorDisplayName}\"\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<FormattedMessage\n  id=\"EnquiryForm.messageLabel\"\n  values={{ authorDisplayName: 'Jane D' }}\n/>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nintl.formatMessage(\n  { id: 'EnquiryForm.messageLabel' },\n  { authorDisplayName: 'Jane D' }\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Marketplace Text Strings for New Process\nDESCRIPTION: Demonstrates how to add marketplace text strings for a new transaction process by duplicating and modifying existing strings.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/tutorial-transaction-process/create-transaction-process/index.md#2025-04-18_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"EditListingWizard.default-booking.new.saveAvailability\": \"Next: Photos\",\n  \"EditListingWizard.default-booking.new.saveDetails\": \"Next: Location\",\n  \"EditListingWizard.default-booking.new.saveLocation\": \"Next: Pricing\",\n  \"EditListingWizard.default-booking.new.savePhotos\": \"Publish listing\",\n  \"EditListingWizard.default-booking.new.savePricing\": \"Next: Availability\",\n  \"EditListingWizard.biketribe-instant-booking.new.saveAvailability\": \"Next: Photos\",\n  \"EditListingWizard.biketribe-instant-booking.new.saveDetails\": \"Next: Location\",\n  \"EditListingWizard.biketribe-instant-booking.new.saveLocation\": \"Next: Pricing\",\n  \"EditListingWizard.biketribe-instant-booking.new.savePhotos\": \"Publish listing\",\n  \"EditListingWizard.biketribe-instant-booking.new.savePricing\": \"Next: Availability\"\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Events by Type and Resource in Sharetribe CLI (Bash)\nDESCRIPTION: Example of using the flex-cli command to filter events by type (user and listing) and time range. This command retrieves the next 100 user and listing events since December 7, 2020.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-events/view-events-with-flex-cli/index.md#2025-04-18_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ flex-cli events --after-ts 2020-12-07 --filter user,listing -m my-marketplace-dev\n```\n\n----------------------------------------\n\nTITLE: Pushing Process Changes with Flex CLI\nDESCRIPTION: Series of commands to push and update the modified transaction process\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/tutorial-transaction-process/add-email-notification/index.md#2025-04-18_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nflex-cli process push --process=biketribe-instant-booking --path=./biketribe-instant-booking --marketplace=biketribe-dev\n```\n\nLANGUAGE: shell\nCODE:\n```\nflex-cli process list --process=biketribe-instant-booking --marketplace=biketribe-dev\n```\n\nLANGUAGE: shell\nCODE:\n```\nflex-cli process update-alias --alias=release-1 --process=biketribe-instant-booking --version=3 --marketplace=biketribe-dev\n```\n\n----------------------------------------\n\nTITLE: Updating AvailabilityPlanEntries Component for Multiple Seats in JSX\nDESCRIPTION: This snippet shows modifications to the AvailabilityPlanEntries component to add seats handling to the default availability form. It includes importing FieldTextInput, updating the TimeRangeHidden component, and modifying the FieldCheckbox onChange function.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-listing/seats/index.md#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  InlineTextButton,\n  IconClose,\n  FieldSelect,\n  FieldCheckbox,\n  FieldTextInput, // add this row\n} from '../../../../../components';\n\nconst TimeRangeHidden = props => {\n  const { name, value, onChange, intl } = props;\n  return (\n    <div>\n      <div className={css.formRowHidden}>\n        <FieldHidden name={`${name}.startTime`} />\n        <FieldHidden name={`${name}.endTime`} />\n      </div>\n      <FieldTextInput\n        name={`${name}.seats`}\n        type=\"number\"\n        initialValue={value.seats}\n        placeholder={intl.formatMessage({\n          id: 'EditListingAvailabilityPlanForm.seatsPlaceholder',\n        })}\n        min=\"1\"\n        onChange={onChange}\n      />\n    </div>\n  );\n};\n\n<FieldCheckbox\n  key={checkboxName}\n  id={checkboxName}\n  name=\"activePlanDays\"\n  useSuccessColor\n  label={intl.formatMessage({\n    id: `EditListingAvailabilityPlanForm.dayOfWeek.${dayOfWeek}`,\n  })}\n  value={dayOfWeek}\n  onChange={e => {\n    const isChecked = e.target.checked;\n\n    // 'day' and 'night' units use full days\n    if (useFullDays) {\n      if (isChecked) {\n        formApi.mutators.push(dayOfWeek, {\n          startTime: '00:00',\n          endTime: '24:00',\n          seats: 1,\n        });\n      } else {\n        formApi.mutators.remove(dayOfWeek, 0);\n      }\n\n<TimeRangeHidden\n  name={name}\n  key={name}\n  intl={intl}\n  value={entries[0]}\n  onChange={e => {\n    const { value } = e.currentTarget;\n    const { values } = formApi.getState();\n    const currentPlan = values[dayOfWeek][0];\n    formApi.mutators.update(dayOfWeek, 0, { ...currentPlan, seats: value });\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining Non-Final Transitions for Account Deletion in JavaScript\nDESCRIPTION: This snippet defines an array of non-final transitions in a transaction process where account deletion should be prevented. It's based on the default-booking process and can be customized for different marketplace configurations.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-users-and-authentication/implement-delete-user/index.md#2025-04-18_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst nonFinalTransitions = [\n  'transition/request-payment',\n  'transition/request-payment-after-inquiry',\n  'transition/confirm-payment',\n  'transition/accept',\n  'transition/complete',\n  'transition/review-1-by-customer',\n  'transition/review-1-by-provider',\n];\n```\n\n----------------------------------------\n\nTITLE: Updating Order Parameters in CheckoutPage\nDESCRIPTION: Diff showing modifications to include helmet rental fee in order parameters for transaction processing.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/tutorial-transaction-process/customize-pricing/index.md#2025-04-18_snippet_13\n\nLANGUAGE: diff\nCODE:\n```\nconst getOrderParams = (pageData, shippingDetails, optionalPaymentParams, config) => {\n  const quantity = pageData.orderData?.quantity;\n  const quantityMaybe = quantity ? { quantity } : {};\n  const deliveryMethod = pageData.orderData?.deliveryMethod;\n  const deliveryMethodMaybe = deliveryMethod ? { deliveryMethod } : {};\n+ const hasHelmetFee = pageData.orderData?.helmetFee?.length > 0;\n\n  const { listingType, unitType } = pageData?.listing?.attributes?.publicData || {};\n  const protectedDataMaybe = {\n    protectedData: {\n      ...getTransactionTypeData(listingType, unitType, config),\n      ...deliveryMethodMaybe,\n      ...shippingDetails,\n    },\n  };\n\n  const orderParams = {\n    listingId: pageData?.listing?.id,\n    ...deliveryMethodMaybe,\n+   hasHelmetFee,\n    ...quantityMaybe,\n    ...bookingDatesMaybe(pageData.orderData?.bookingDates),\n    ...protectedDataMaybe,\n    ...optionalPaymentParams,\n  };\n  return orderParams;\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Service History Panel in EditListingWizardTab for Sharetribe Flex\nDESCRIPTION: This snippet shows how to add a new case to the switch structure in EditListingWizardTab to render the EditListingServiceHistoryPanel when needed.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-listing/extend-listing-data-in-ftw/index.md#2025-04-18_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\ncase SERVICE_HISTORY: {\n  return (\n    <EditListingServiceHistoryPanel\n      {...panelProps(SERVICE_HISTORY)}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering ClientApp with Hosted Translations\nDESCRIPTION: Code snippet showing how the ClientApp is rendered with hosted translations passed as props, allowing for client-side hydration with the same translation data used in server-side rendering.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-content/hosted-microcopy/index.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n<ClientApp store={store} hostedTranslations={translations} hostedConfig={hostedConfig} />,\n```\n\n----------------------------------------\n\nTITLE: Adding Github Login Routes to Sharetribe API Router\nDESCRIPTION: This snippet adds the necessary routes for Github login to the Sharetribe API router, including the initial authentication and callback routes.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-users-and-authentication/setup-oidc-proxy/index.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// This endpoint is called when the user wants to initiate authentication with Github\nrouter.get('/auth/github', authenticateGithub);\n\n// This is the route for callback URL the user is redirected after authenticating\n// with Github. In this route a Passport.js custom callback is used for calling\n// loginWithIdp endpoint in Sharetribe API to authenticate user to Sharetribe\nrouter.get('/auth/github/callback', authenticateGithubCallback);\n```\n\n----------------------------------------\n\nTITLE: Implementing Facebook Pixel Tracking Script in JavaScript\nDESCRIPTION: This code snippet demonstrates how to set up Facebook Pixel tracking in an external JavaScript file. It initializes the Facebook Pixel, tracks page views, and adds a tracking image to the page.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-analytics/how-to-set-up-analytics-for-ftw/index.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n(function() {\n  if (window.fbq) return;\n\n  (function(f, b, e, v, n, t, s) {\n    if (f.fbq) return;\n    n = f.fbq = function() {\n      n.callMethod\n        ? n.callMethod.apply(n, arguments)\n        : n.queue.push(arguments);\n    };\n    if (!f._fbq) f._fbq = n;\n    n.push = n;\n    n.loaded = !0;\n    n.version = '2.0';\n    n.queue = [];\n    t = b.createElement(e);\n    t.async = !0;\n    t.src = v;\n    s = b.getElementsByTagName(e)[0];\n    s.parentNode.insertBefore(t, s);\n  })(\n    window,\n    document,\n    'script',\n    'https://connect.facebook.net/en_US/fbevents.js'\n  );\n\n  fbq('init', '{your-pixel-id-goes-here}');\n  fbq('track', 'PageView');\n\n  const img = document.createElement('img');\n  img.height = '1';\n  img.width = '1';\n  img.style.display = 'none';\n  img.src = `https://www.facebook.com/tr?id={your-pixel-id-goes-here}&ev=PageView&noscript=1`;\n  document.body.appendChild(img);\n})();\n```\n\n----------------------------------------\n\nTITLE: Implementing Like Logic and Conditional Styling in React Component\nDESCRIPTION: This diff shows the implementation of like functionality in a React component, including conditional styling for liked items and updating the like count in the UI.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-events/like-feature/index.md#2025-04-18_snippet_19\n\nLANGUAGE: diff\nCODE:\n```\n  const currentLikes = currentUser?.attributes?.profile?.privateData?.likedListings;\n+ const alreadyLiked = currentLikes?.includes(listingId);\n  const likes = publicData?.likes ? publicData.likes : 0;\n+  const classes = classNames(currentUser ? css.heartIcon : css.heartDisabled, alreadyLiked ? css.iconLiked : null)\n\n  return (\n-   <span className={css.heartIcon}\n+   <span className={classes}\n      onClick={() => {\n        if (!updateLikesInProgress && currentUser) {\n          onUpdateLikes(listingId);\n+         if (alreadyLiked) {\n+           onSubtractLike();\n+         }\n+         else {\n+           onAddLike();\n+         }\n        }\n      }}>\n\n-     <IconHeart /> { likes }\n+     <IconHeart /> { likes + likesOffset }\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Rounding Function for moment.js\nDESCRIPTION: Adds a custom rounding function to moment.js for handling non-sharp hour bookings with buffer time.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-listing/bookings-with-buffer/index.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Rounding function for moment.js. Rounds the Moment provided by the context\n * to the start of the specified time value in the specified units.\n * @param {*} value the rounding value\n * @param {*} timeUnit time units to specify the value\n * @returns Moment rounded to the start of the specified time value\n */\nmoment.fn.startOfDuration = function(value, timeUnit) {\n  const getMs = (val, unit) =>\n    moment.duration(val, unit).asMilliseconds();\n  const ms = getMs(value, timeUnit);\n\n  // Get UTC offset to account for potential time zone difference between\n  // customer and listing\n  const offsetMs = this._isUTC ? 0 : getMs(this.utcOffset(), 'minute');\n  return moment(Math.floor((this.valueOf() + offsetMs) / ms) * ms);\n};\n```\n\n----------------------------------------\n\nTITLE: Integrating Service History Panel in EditListingWizardTab for Sharetribe Flex\nDESCRIPTION: This diff shows how to import and integrate the EditListingServiceHistoryPanel into the EditListingWizardTab component, allowing it to be used in the listing creation/editing process.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-listing/extend-listing-data-in-ftw/index.md#2025-04-18_snippet_13\n\nLANGUAGE: diff\nCODE:\n```\n// Import modules from this directory\n  import EditListingAvailabilityPanel from './EditListingAvailabilityPanel/EditListingAvailabilityPanel';\nimport EditListingDetailsPanel from './EditListingDetailsPanel/EditListingDetailsPanel';\nimport EditListingDeliveryPanel from './EditListingDeliveryPanel/EditListingDeliveryPanel';\n  import EditListingLocationPanel from './EditListingLocationPanel/EditListingLocationPanel';\nimport EditListingPhotosPanel from './EditListingPhotosPanel/EditListingPhotosPanel';\nimport EditListingPricingPanel from './EditListingPricingPanel/EditListingPricingPanel';\n  import EditListingPricingAndStockPanel from './EditListingPricingAndStockPanel/EditListingPricingAndStockPanel';\n+ import EditListingServiceHistoryPanel from './EditListingServiceHistoryPanel/EditListingServiceHistoryPanel';\n```\n\n----------------------------------------\n\nTITLE: Defining Cancel Transition in Clojure\nDESCRIPTION: Example of defining a transition from :state/accepted to :state/cancelled with multiple actions including booking cancellation, refund calculation and payment processing.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/references/transaction-process-format/index.md#2025-04-18_snippet_1\n\nLANGUAGE: clojure\nCODE:\n```\n{:name :transition/cancel\n :actor :actor.role/operator\n :actions [{:name :action/cancel-booking}\n           {:name :action/calculate-full-refund}\n           {:name :action/stripe-refund-payment}]\n :from :state/accepted\n :to :state/cancelled}\n```\n\n----------------------------------------\n\nTITLE: Detailed Listing Update Event Example\nDESCRIPTION: Comprehensive example of a listing update event showing multiple field changes including availability, public data, and images.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/references/events/index.md#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"ef98e897-5b81-49a5-aca6-01d9759df075\",\n  \"eventType\": \"listing/updated\",\n  \"sequenceId\": 12345678,\n  \"createdAt\": \"2020-11-27T12:30:02.000Z\",\n  \"marketplaceId\": \"9deec37c-b59c-4884-8f60-e4944335c327\",\n  \"source\": \"source/marketplace-api\",\n  \"resourceId\": \"5bbb2f6f-568f-470a-9949-a655e3f6ac46\",\n  \"resourceType\": \"listing\",\n  \"resource\": {\n    \"id\": \"5bbb2f6f-568f-470a-9949-a655e3f6ac46\",\n    \"title\": \"Peugeot eT101\",\n    \"description\": \"7-speed Hybrid\",\n    \"deleted\": false,\n    \"geolocation\": {\n      \"lat\": 40.64542,\n      \"lng\": -74.08508\n    },\n    \"createdAt\": \"2018-03-23T08:40:24.443Z\",\n    \"state\": \"published\",\n    \"availabilityPlan\": {\n      \"type\": \"availability-plan/day\",\n      \"entries\": [\n        {\n          \"dayOfWeek\": \"mon\",\n          \"seats\": 1\n        },\n        {\n          \"dayOfWeek\": \"tue\",\n          \"seats\": 2\n        }\n      ]\n    },\n    \"privateData\": {\n      \"externalServiceId\": \"abcd-service-id-1234\"\n    },\n    \"publicData\": {\n      \"address\": {\n        \"city\": \"New York\",\n        \"country\": \"USA\",\n        \"state\": \"NY\",\n        \"street\": \"230 Hamilton Ave\"\n      },\n      \"categoryLevel1\": \"road\",\n      \"gears\": 22,\n      \"rules\": \"This is a nice, bike! Please, be careful with it.\"\n    },\n    \"metadata\": {\n      \"promoted\": true\n    },\n    \"price\": {\n      \"amount\": 1590,\n      \"currency\": \"USD\"\n    },\n    \"author\": { \"id\": \"5cf4c0eb-513f-419b-a8be-bdb6c14be10a\" },\n    \"marketplace\": { \"id\": \"9deec37c-b59c-4884-8f60-e4944335c327\" },\n    \"images\": [\n      { \"id\": \"209a25aa-e7cf-4967-89c3-0f09b2d482ff\" },\n      { \"id\": \"98e11f3b-ea22-4b1b-8549-e543ae241133\" },\n      { \"id\": \"ee1a647a-a751-43c7-90a4-48e94654f016\" }\n    ]\n  },\n  \"previousValues\": {\n    \"title\": \"old title\",\n    \"availabilityPlan\": {\n      \"type\": \"availability-plan/day\",\n      \"entries\": [\n        {\n          \"dayOfWeek\": \"mon\",\n          \"seats\": 1\n        }\n      ]\n    },\n    \"publicData\": {\n      \"address\": {\n        \"city\": \"New York\",\n        \"country\": \"USA\",\n        \"state\": \"NY\",\n        \"street\": \"222 Hamilton Ave\"\n      },\n      \"rules\": null\n    },\n    \"images\": [\n      { \"id\": \"98e11f3b-ea22-4b1b-8549-e543ae241133\" },\n      { \"id\": \"d12b8ebc-4df8-4bd0-9231-2f05691831a4\" }\n    ]\n  },\n  \"auditData\": {\n    \"userId\": \"5cf4c0eb-513f-419b-a8be-bdb6c14be10a\",\n    \"adminId\": null,\n    \"clientId\": \"69ea8198-201c-48c4-a3bb-78b38e4059b0\",\n    \"requestId\": \"4b66e510-22cb-47ca-953f-8a8377af2ed0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using FormattedMessage with Pluralization in React\nDESCRIPTION: Shows how to use FormattedMessage with a count value that will determine which pluralization form is displayed.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/concepts-development/microcopy/index.md#2025-04-18_snippet_13\n\nLANGUAGE: js\nCODE:\n```\n<FormattedMessage\n  id=\"ManageListingsPage.youHaveListings\"\n  values={{ count: pagination.totalItems }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Adding Phone Number Input Component - JSX\nDESCRIPTION: JSX code for adding a phone number input field to the SignupForm component. Includes field configuration and validation props.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/tutorial-transaction-process/use-protected-data-in-emails/index.md#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<FieldPhoneNumberInput\n  className={css.phone}\n  id={formId ? `${formId}.phoneNumber` : 'phoneNumber'}\n  name=\"phoneNumber\"\n  label={phoneLabel}\n  placeholder={phonePlaceholder}\n  validate={phoneRequired}\n/>\n```\n\n----------------------------------------\n\nTITLE: Transaction Process State Definitions\nDESCRIPTION: Defines the possible states for the instant booking transaction process, including initial, inquiry, pending payment, and review states.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/tutorial-transaction-process/create-transaction-process/index.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexport const states = {\n  INITIAL: 'initial',\n  INQUIRY: 'inquiry',\n  PENDING_PAYMENT: 'pending-payment',\n  PAYMENT_EXPIRED: 'payment-expired',\n  BOOKED: 'booked',\n  CANCELED: 'canceled',\n  DELIVERED: 'delivered',\n  REVIEWED: 'reviewed',\n  REVIEWED_BY_CUSTOMER: 'reviewed-by-customer',\n  REVIEWED_BY_PROVIDER: 'reviewed-by-provider',\n};\n```\n\n----------------------------------------\n\nTITLE: Including Facebook Pixel Script in Sharetribe Web Template\nDESCRIPTION: This snippet shows how to include the Facebook Pixel script in the Sharetribe Web Template's includeScripts.js file. It adds a script tag that references the external Facebook Pixel script.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-analytics/how-to-set-up-analytics-for-ftw/index.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nanalyticsLibraries.push(\n  <script\n    key=\"fb\"\n    src={`${rootURL}/static/scripts/facebook/facebook.js`}\n  ></script>\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Seats Data to Initial Values in ListingPage.shared.js\nDESCRIPTION: Processes the raw seats value by parsing it as an integer and adds it to the orderData object that gets passed to the CheckoutPage as part of the initialValues object.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-listing/seats/index.md#2025-04-18_snippet_43\n\nLANGUAGE: diff\nCODE:\n```\n  const quantity = Number.parseInt(quantityRaw, 10);\n  const quantityMaybe = Number.isInteger(quantity) ? { quantity } : {};\n+ const seats = Number.parseInt(seatsRaw, 10);\n+ const seatsMaybe = Number.isInteger(seats) ? { seats } : {};\n  const deliveryMethodMaybe = deliveryMethod ? { deliveryMethod } : {};\n\n  const initialValues = {\n    listing,\n    orderData: {\n      ...bookingMaybe,\n      ...quantityMaybe,\n+     ...seatsMaybe,\n      ...deliveryMethodMaybe,\n      ...otherOrderData,\n    },\n    confirmPaymentError: null,\n  };\n```\n\n----------------------------------------\n\nTITLE: Gears Filter Configuration Example\nDESCRIPTION: Configuration object for adding a new 'gears' filter, including enum options, filter settings, and validation requirements.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-search/change-search-filters-in-ftw/index.md#2025-04-18_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n{\n  key: 'gears',\n  scope: 'public',\n  schemaType: 'enum',\n  enumOptions: [\n    { option: '1' , label: 'Single speed' },\n    { option: '2to3' , label: '2 to 3' },\n    { option: '4to7' , label: '4 to 7' },\n    { option: '8to15' , label: '8 to 15' },\n    { option: '16to24' , label: '16 to 24' },\n    { option: '25+' , label: 'Over 25' },\n  ],\n  filterConfig: {\n    indexForSearch: true,\n    label: 'Gears',\n    group: 'secondary'\n  },\n  showConfig: {\n    label: 'Gears',\n    isDetail: true,\n  },\n  saveConfig: {\n    label: 'Gears',\n    placeholderMessage: 'Select number of gears...',\n    isRequired: true,\n    requiredMessage: 'You need to select number of gears',\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Formatted Message in JavaScript with React-Intl\nDESCRIPTION: This JavaScript code shows how to use the 'formatMessage' function from react-intl to render the formatted text string in a React component. It passes necessary variables for the select formatting.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/concepts-development/microcopy/index.md#2025-04-18_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst message = intl.formatMessage(\n  { id: `TransactionPage.ActivityFeed.${processName}.${nextState}` },\n  {\n    actor,\n    otherUsersName,\n    listingTitle,\n    reviewLink,\n    deliveryMethod,\n    stateStatus,\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Unsafe Attribute Assignment in React\nDESCRIPTION: Example showing when manual sanitization is required - specifically when user-generated content is used as an HTML attribute value rather than wrapped in JSX.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-security/how-to-sanitize-user-generated-content-in-ftw/index.md#2025-04-18_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<div attr={publicData.saunaRules}>content).\n```\n\n----------------------------------------\n\nTITLE: File Structure for Code Organization\nDESCRIPTION: Shows the directory structure for relevant components and files.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/tutorial-transaction-process/customize-pricing/index.md#2025-04-18_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n└── src\n    └── containers\n        └── EditListingPage\n            └── EditListingWizard\n                └── EditListingPricingPanel\n                    └── EditListingPricingPanel.js\n```\n\n----------------------------------------\n\nTITLE: Fetching Marketplace Texts by Version with Asset Delivery API\nDESCRIPTION: Example of how to fetch marketplace text assets by their specific version using the Sharetribe SDK. Versioned assets can be cached for extended periods to improve performance.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-content/hosted-microcopy/index.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsdk.assetByVersion({\n  path: 'content/translations.json',\n  version: '<some-hash-string>',\n});\n```\n\n----------------------------------------\n\nTITLE: Finding Next Time Boundary Implementation\nDESCRIPTION: Core function for calculating the next available time slot boundary based on custom or default time units.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-listing/time-slots/index.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport const findNextBoundary = (\n  currentDate,\n  unitCount,\n  timeUnit,\n  timeZone\n) => {\n  const customTimeUnitConfig = bookingTimeUnits[timeUnit]?.isCustom\n    ? bookingTimeUnits[timeUnit]\n    : null;\n\n  if (!!customTimeUnitConfig) {\n    // If the time unit is custom, we need to use startOfMinuteBasedInterval function to adjust 00, 15, 30, 45 rounding.\n    const customTimeUnitInMinutes =\n      customTimeUnitConfig?.timeUnitInMinutes;\n    const minuteOffset = !!customTimeUnitInMinutes\n      ? unitCount * customTimeUnitInMinutes\n      : unitCount;\n\n    return moment(currentDate)\n      .clone()\n      .tz(timeZone)\n      .add(minuteOffset, 'minute')\n      .startOfMinuteBasedInterval(customTimeUnitInMinutes)\n      .toDate();\n  } else {\n    // Other time units are handled with the default moment.js functions\n    return moment(currentDate)\n      .clone()\n      .tz(timeZone)\n      .add(unitCount, timeUnit)\n      .startOf(timeUnit)\n      .toDate();\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Using Dynamic Translation Keys in Handlebars Email Template\nDESCRIPTION: This Handlebars template demonstrates how to dynamically construct translation keys based on the recipient's language, enabling support for multiple languages in email templates.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/concepts-development/microcopy/index.md#2025-04-18_snippet_21\n\nLANGUAGE: handlebars\nCODE:\n```\n{{!-- Dynamically construct the translation key based on the recipient's language --}}\n{{t (concat \"NewMessage.Subject\" \"_\" recipient.private-data.language) \"{senderName} has sent you a new message\" senderName=message.sender.display-name}}\n```\n\n----------------------------------------\n\nTITLE: Optional Payment Parameters Handler\nDESCRIPTION: React/JSX code for handling different payment flows including saved cards and saving new cards.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-payments/how-saving-payment-card-works-in-ftw/index.md#2025-04-18_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst optionalPaymentParams =\n  selectedPaymentFlow === USE_SAVED_CARD && hasDefaultPaymentMethodSaved\n    ? { paymentMethod: stripePaymentMethodId }\n    : selectedPaymentFlow === PAY_AND_SAVE_FOR_LATER_USE\n    ? { setupPaymentMethodForSaving: true }\n    : {};\n```\n\n----------------------------------------\n\nTITLE: Saving updated transaction in CheckoutPage using session storage in JavaScript\nDESCRIPTION: Modify the CheckoutPage to save the updated transaction, including the stripePaymentIntentClientSecret, to session storage. This allows customers to continue the payment process after page refreshes or network errors.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-payments/enable-payment-intents-in-ftw/index.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Save updated transaction to session storage\nsessionStorage.setItem('transaction', JSON.stringify(updatedTransaction));\n```\n\n----------------------------------------\n\nTITLE: Configuring an Action in Clojure\nDESCRIPTION: This example shows how to configure an action within a transition. It specifies the action name and includes a configuration map for additional options.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/references/transaction-process-format/index.md#2025-04-18_snippet_5\n\nLANGUAGE: clojure\nCODE:\n```\n{\n :name :action/create-pending-booking\n :config {:type :time}}\n```\n\n----------------------------------------\n\nTITLE: Using FormattedMessage Component with Marketplace Text Key in React\nDESCRIPTION: Shows how to reference a marketplace text key in React code using the FormattedMessage component.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/concepts-development/microcopy/index.md#2025-04-18_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// ManageListingCard.js uses the variable to identify the message\n<FormattedMessage id=\"ManageListingCard.editListing\" />\n```\n\n----------------------------------------\n\nTITLE: Examining Notifications in Clojure Process Configuration\nDESCRIPTION: Excerpt from the process.edn file showing the structure of notifications. This demonstrates how template names in the file system correspond to notification configurations.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-messaging/edit-email-templates-with-flex-cli/index.md#2025-04-18_snippet_2\n\nLANGUAGE: clojure\nCODE:\n```\n:notifications\n [{:name :notification/booking-new-request,\n   :on :transition/confirm-payment,\n   :to :actor.role/provider,\n   :template :booking-new-request}\n  {:name :notification/booking-accepted-request,\n   :on :transition/accept,\n   :to :actor.role/customer,\n   :template :booking-accepted-request}\n  {:name :notification/booking-operator-accepted-request-to-customer,\n   :on :transition/operator-accept,\n   :to :actor.role/customer,\n   :template :booking-accepted-request}\n...\n```\n\n----------------------------------------\n\nTITLE: Setting Search Schemas with Sharetribe CLI\nDESCRIPTION: Command to set (create or update) a data schema using Sharetribe CLI. This enables developers to define or modify search schemas for extended data fields.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/references/extended-data/index.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nflex-cli search set\n```\n\n----------------------------------------\n\nTITLE: Modifying findNextBoundary Function for First Slot Handling\nDESCRIPTION: Updates the findNextBoundary function to handle the first time slot differently by adding isFirst parameter and implementing custom logic for initial boundary calculation.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-listing/time-slots/index.md#2025-04-18_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n- export const findNextBoundary = (currentDate, unitCount, timeUnit, timeZone) => {\n+ export const findNextBoundary = (currentDate, unitCount, timeUnit, timeZone, isFirst = false) => {\n  const customTimeUnitConfig = bookingTimeUnits[timeUnit]?.isCustom\n    ? bookingTimeUnits[timeUnit]\n    : null;\n  ...\n  } else if (timeUnit === 'hour') {\n+   // Add separate handling for the first timeslot so that bookings can start\n+   // from the beginning of the available time slot\n+   const increment = isFirst ? 0 : timeSlotMinutes;\n+   // Revert the millisecondBeforeStartTime change if increment is 0, so that the rounding\n+   // works correctly\n+   const date = isFirst ? new Date(currentDate.getTime() + 1) : currentDate;\n\n    // Replace hourly handling with the defined booking length\n-   return moment(currentDate)\n+   return moment(date)\n      .clone()\n      .tz(timeZone)\n-     .add(timeSlotMinutes, 'minutes')\n-     .startOfMinuteBasedInterval(timeSlotMinutes)\n+     .add(increment, 'minutes')\n+     .startOfMinuteBasedInterval(rounding)\n      .toDate();\n  } else {\n    // Other time units are handled with the default moment.js functions\n    return moment(currentDate)\n    ...\n```\n\n----------------------------------------\n\nTITLE: Configuration Merging Implementation\nDESCRIPTION: Main function that handles merging hosted and local configurations, including handling of analytics, branding, layout, listing, search, and maps configurations\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-configuration/hosted-and-local-configurations/index.md#2025-04-18_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport const mergeConfig = (configAsset = {}, defaultConfigs = {}) => {\n  // defaultConfigs.listingMinimumPriceSubUnits is the backup for listing's minimum price\n  const listingMinimumPriceSubUnits =\n    getListingMinimumPrice(configAsset.transactionSize) ||\n    defaultConfigs.listingMinimumPriceSubUnits;\n\n  return {\n    // Use default configs as a starting point for app config.\n    ...defaultConfigs,\n\n    // Overwrite default configs if hosted config is available\n    listingMinimumPriceSubUnits,\n\n    // Analytics might come from hosted assets at some point.\n    analytics: mergeAnalyticsConfig(\n      configAsset.analytics,\n      defaultConfigs.analytics\n    ),\n\n    // Branding configuration comes entirely from hosted assets,\n    // but defaults to values set in defaultConfigs.branding for\n    // marketplace color, logo, brandImage and Facebook and Twitter images\n    branding: mergeBranding(\n      configAsset.branding,\n      defaultConfigs.branding\n    ),\n\n    // Layout configuration comes entirely from hosted assets,\n    // but defaultConfigs is used if type of the hosted configs is unknown\n    layout: mergeLayouts(configAsset.layout, defaultConfigs.layout),\n\n    // Listing configuration comes entirely from hosted assets\n    listing: mergeListingConfig(configAsset, defaultConfigs),\n\n    // Hosted search configuration does not yet contain sortConfig\n    search: mergeSearchConfig(\n      configAsset.search,\n      defaultConfigs.search\n    ),\n\n    // Map provider info might come from hosted assets. Other map configs come from defaultConfigs.\n    maps: mergeMapConfig(configAsset.maps, defaultConfigs.maps),\n\n    // Include hosted footer config, if it exists\n    // Note: if footer asset is not set, Footer is not rendered.\n    footer: configAsset.footer,\n\n    // Check if all the mandatory info have been retrieved from hosted assets\n    hasMandatoryConfigurations: hasMandatoryConfigs(configAsset),\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Boundary Function in JSX\nDESCRIPTION: Creates a new findNextCustomBoundary function to replace the default usage. It uses a custom rounding function and calculates time increments based on start/end times and buffer periods.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-listing/bookings-with-buffer/index.md#2025-04-18_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nexport const findNextCustomBoundary = (\n  currentMomentOrDate,\n  timeUnit,\n  timeZone,\n  isFirst,\n  isStart\n) => {\n  // For end time slots (i.e. not start slots), add a full hour.\n  // For the first start slot, use the actual start time.\n  // For other start slots, use the buffer time.\n  const increment = !isStart\n    ? hourMinutes\n    : isFirst\n    ? 0\n    : bufferMinutes;\n\n  return moment(currentMomentOrDate)\n    .clone()\n    .tz(timeZone)\n    .add(increment, timeUnit)\n    .startOfDuration(bufferMinutes, timeUnit)\n    .toDate();\n};\n```\n\n----------------------------------------\n\nTITLE: Adding New Payment Method\nDESCRIPTION: SDK call to add a new payment method to existing Stripe customer without default payment method.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-payments/how-saving-payment-card-works-in-ftw/index.md#2025-04-18_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n=> sdk.stripeCustomer.addPaymentMethod({ stripePaymentMethodId }, { expand: true })\n```\n\n----------------------------------------\n\nTITLE: Adding Routes for a New Static Page\nDESCRIPTION: This JavaScript snippet demonstrates how to add routing for the newly created static page in the Sharetribe Web Template. It includes asynchronous import of the page component and route configuration.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-content/how-to-add-static-pages-in-ftw/index.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst SocialMediaPage = loadable(() =>\n  import(\n    /* webpackChunkName: \"SocialMediaPage\" */ '../containers/SocialMediaPage/SocialMediaPage'\n  )\n);\n\n// Add this to the route configuration\n{\n  path: '/social-media',\n  name: 'SocialMediaPage',\n  component: SocialMediaPage,\n},\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Search Path to Default Public Paths\nDESCRIPTION: Example showing how to add a custom search path for mountain bikes to the default sitemap configuration by extending the defaultPublicPaths object.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-analytics/template-sitemap/index.md#2025-04-18_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n  const defaultPublicPaths = {\n    landingPage: { url: '/' },\n    termsOfService: { url: '/terms-of-service' },\n    privacyPolicy: { url: '/privacy-policy' },\n    signup: { url: '/signup' },\n    login: { url: '/login' },\n    search: { url: '/s' },\n+   searchMountainBikes: { url: '/s?pub_categoryLevel1=mountainBike' }\n  };\n```\n\n----------------------------------------\n\nTITLE: Defining Section Overrides Object\nDESCRIPTION: Creates an object that maps the 'article' section to the custom SectionArticleAlignLeft component for use with the options prop.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-content/options-prop/index.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst sectionOverrides = {\n  article: { component: SectionArticleAlignLeft },\n};\n```\n\n----------------------------------------\n\nTITLE: Querying Events with Time Range in Sharetribe CLI (Bash)\nDESCRIPTION: Examples of using the flex-cli command to query events with different time range parameters. These commands demonstrate how to retrieve events before a specific sequence ID, after a certain timestamp, or before a given timestamp.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-events/view-events-with-flex-cli/index.md#2025-04-18_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ flex-cli events --before-seqid 3462912  -m my-marketplace-dev\n...\n\n$ flex-cli events --after-ts 2020-12-05  -m my-marketplace-dev\n...\n\n$ flex-cli events --before-ts 2020-12-05T10:00.000Z  -m my-marketplace-dev\n```\n\n----------------------------------------\n\nTITLE: Rendering the Server App with Translations\nDESCRIPTION: Code from the server renderer that shows how the app is rendered with the given route, preloaded state, and hosted translations, preparing the response for the client.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-content/hosted-microcopy/index.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Render the app with given route, preloaded state, hosted translations.\nreturn renderApp(\n requestUrl,\n context,\n preloadedState,\n translations,\n hostedConfig,\n collectWebChunks\n).then(({ head, body }) => {\n```\n\n----------------------------------------\n\nTITLE: SectionBuilder Component Integration\nDESCRIPTION: Code showing how PageBuilder delegates section rendering to the SectionBuilder component\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-content/page-builder/index.md#2025-04-18_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nconst data = pageAssetsData || {};\nconst sectionsData = data?.sections || [];\n\n<SectionBuilder sections={sectionsData} options={options} />;\n```\n\n----------------------------------------\n\nTITLE: Configuring Stripe Environment Variables\nDESCRIPTION: Adding Stripe publishable key to the application's .env file through yarn command or direct text editor modification.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-payments/set-up-and-use-stripe/index.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn run config\n```\n\n----------------------------------------\n\nTITLE: Adding Transaction Search Schema with Sharetribe CLI\nDESCRIPTION: Illustrates how to add a search schema for transactions using the Sharetribe CLI. This example adds an 'enum' type schema for a 'deliveryMethod' attribute in the protected scope.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-search/manage-search-schemas-with-flex-cli/index.md#2025-04-18_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ flex-cli search set --schema-for transaction --key deliveryMethod --type enum --scope protected -m my-marketplace-dev\n```\n\n----------------------------------------\n\nTITLE: Retrieving notification count in Sharetribe Web Template\nDESCRIPTION: Code snippet showing how the notification count is retrieved from sales transactions that require provider attention in the Sharetribe Web Template application.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/concepts-messages/messages/index.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n1.  A\n    [query is made](https://github.com/sharetribe/web-template/blob/main/src/ducks/user.duck.js#L306)\n    that retrieves all sales transactions (i.e. transactions where the\n    current user is the provider) transactions that are in a state that\n    [requires provider attention](https://github.com/sharetribe/web-template/blob/main/src/transactions/transaction.js#L287)\n2.  The amount of sales transactions determines the\n    [notification count](https://github.com/sharetribe/web-template/blob/main/src/ducks/user.duck.js#L105)\n    shown\n    [in the badge](https://github.com/sharetribe/web-template/blob/main/src/containers/TopbarContainer/Topbar/Topbar.js#L234).\n```\n\n----------------------------------------\n\nTITLE: Updating Transaction Process States in JavaScript\nDESCRIPTION: This snippet shows how to modify the transaction process file to remove Stripe-related states and transitions. It removes the 'pending-payment' and 'expire-payment' states, and updates the transitions to skip the payment confirmation step.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-payments/removing-stripe/index.md#2025-04-18_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n     [STATE_INITIAL]: {\n       on: {\n         [TRANSITION_INQUIRE]: STATE_INQUIRY,\n-        [TRANSITION_REQUEST_PAYMENT]: STATE_PENDING_PAYMENT,\n+        [TRANSITION_REQUEST_PAYMENT]: STATE_PREAUTHORIZED,\n       },\n     },\n     [STATE_INQUIRY]: {\n       on: {\n-        [TRANSITION_REQUEST_PAYMENT_AFTER_INQUIRY]: STATE_PENDING_PAYMENT,\n+        [TRANSITION_REQUEST_PAYMENT_AFTER_INQUIRY]: STATE_PREAUTHORIZED,\n       },\n     },\n-\n-    [STATE_PENDING_PAYMENT]: {\n-      on: {\n-        [TRANSITION_EXPIRE_PAYMENT]: STATE_PAYMENT_EXPIRED,\n-        [TRANSITION_CONFIRM_PAYMENT]: STATE_PREAUTHORIZED,\n-      },\n-    },\n-\n-    [STATE_PAYMENT_EXPIRED]: {},\n     [STATE_PREAUTHORIZED]: {\n       on: {\n         [TRANSITION_DECLINE]: STATE_DECLINED,\n\n```\n\n----------------------------------------\n\nTITLE: Applying Dynamic Provider Commission in JavaScript\nDESCRIPTION: This snippet updates the providerCommissionMaybe calculation to use the dynamic commission percentage based on booking length.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-payments/customize-pricing/index.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst providerCommissionMaybe = hasCommissionPercentage(\n  providerCommission\n)\n  ? [\n      {\n        code: 'line-item/provider-commission',\n        unitPrice: calculateTotalFromLineItems([order]),\n        percentage: getNegation(\n          calculateProviderCommissionPercentage(\n            order,\n            providerCommission\n          )\n        ),\n        includeFor: ['provider'],\n      },\n    ]\n  : [];\n```\n\n----------------------------------------\n\nTITLE: Creating Like Feature UI Component\nDESCRIPTION: React component implementation for the like feature UI, including a heart icon and like counter display.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-events/like-feature/index.md#2025-04-18_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { FormattedMessage } from '../../util/reactIntl';\nimport classNames from 'classnames';\n\nimport css from './ListingPage.module.css';\n\nconst IconHeart = () => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"18\"\n      height=\"18\"\n      viewBox=\"0 0 24 28 \"\n    >\n      <path d=\"M12 4.248c-3.148-5.402-12-3.825-12 2.944 0 4.661 5.571 9.427 12 15.808 6.43-6.381 12-11.147 12-15.808 0-6.792-8.875-8.306-12-2.944z\" />\n    </svg>\n  );\n};\n\nconst SectionLikes = props => {\n  const { publicData } = props;\n\n  const likes = publicData?.likes ? publicData.likes : 0;\n\n  return (\n    <span className={css.heartIcon}>\n      <IconHeart /> {likes}\n    </span>\n  );\n};\n\nexport default SectionLikes;\n```\n\n----------------------------------------\n\nTITLE: Component with rootClassName Implementation\nDESCRIPTION: Example of a React component implementing the rootClassName pattern for style overrides.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-styling/how-to-customize-ftw-styles/index.md#2025-04-18_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport css from './MyComponent.module.css';\n\nexport const MyComponent = props => {\n  const { className, rootClassName } = props;\n  const classes = classNames(rootClassName || css.root, className);\n  return <div className={classes}>Hello World</div>;\n};\n```\n\n----------------------------------------\n\nTITLE: Project Structure for Page Data Loading API in Shell\nDESCRIPTION: This snippet shows the directory structure for the pageDataLoadingAPI.js file, which is used to collect data loading functions for different pages in the Sharetribe Flex project.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-routing/how-routing-works-in-ftw/index.md#2025-04-18_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n└── src\n    └── containers\n        └── pageDataLoadingAPI.js\n```\n\n----------------------------------------\n\nTITLE: Configuring Listing Page Display in Sharetribe Web Template\nDESCRIPTION: Demonstrates how to configure the display of an extended attribute on the listing page, including setting the label.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-listing/extend-listing-data-in-ftw/index.md#2025-04-18_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nshowConfig: {\n  label: 'Accessories',\n},\n```\n\n----------------------------------------\n\nTITLE: Implementing Hour Units with Seats Helper Function in JSX\nDESCRIPTION: A helper function for calculating units and seats for hourly bookings. This alternative implementation is used when working with time-based bookings instead of date-based bookings.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-listing/seats/index.md#2025-04-18_snippet_34\n\nLANGUAGE: jsx\nCODE:\n```\n/**\n * Get quantity for arbitrary units and seats for time-based bookings.\n *\n * @param {*} orderData should contain quantity\n */\nconst getHourUnitsSeatsAndLineItems = orderData => {\n  const { bookingStart, bookingEnd, seats } = orderData || {};\n  const units =\n    bookingStart && bookingEnd\n      ? calculateQuantityFromHours(bookingStart, bookingEnd)\n      : null;\n\n  return { units, seats, extraLineItems: [] };\n};\n```\n\n----------------------------------------\n\nTITLE: Updating TimeRange Component in React\nDESCRIPTION: Modifies the TimeRange component to accept and use the seats prop, displaying the number of available seats in various date formats.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-listing/seats/index.md#2025-04-18_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nexport const TimeRangeComponent = props => {\n  const { rootClassName, className, startDate, endDate, seats, dateType, timeZone, intl } = props;\n  const start = formatDateIntoPartials(startDate, intl, { timeZone });\n...\n```\n\nLANGUAGE: jsx\nCODE:\n```\n...\n  } else if (isSingleDay && dateType === DATE_TYPE_DATETIME) {\n    return (\n      <div className={classes}>\n        <span className={css.dateSection}>{`${start.date}, ${start.time} - ${end.time}`} ({seats})</span>\n      </div>\n    );\n  } else {\n    return (\n      <div className={classes}>\n        <span className={css.dateSection}>{`${start.dateAndTime} - `}</span>\n        <span className={css.dateSection}>{`${end.dateAndTime}`} ({seats})</span>\n      </div>\n    );\n  }\n```\n\n----------------------------------------\n\nTITLE: Creating New Stripe Customer\nDESCRIPTION: SDK call to create a new Stripe customer with payment method when no customer entity exists.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-payments/how-saving-payment-card-works-in-ftw/index.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nsdk.stripeCustomer.create(\n  { stripePaymentMethodId },\n  { expand: true, include: ['defaultPaymentMethod'] }\n);\n```\n\n----------------------------------------\n\nTITLE: Listing Configuration Merge Implementation\nDESCRIPTION: Function that handles merging of listing configurations including listing types and fields from both hosted and local sources\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-configuration/hosted-and-local-configurations/index.md#2025-04-18_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// Note: by default, listing types and fields are only merged if explicitly set for debugging\nconst mergeListingConfig = (hostedConfig, defaultConfigs) => {\n  // Listing configuration is splitted to several assets in Console\n  const hostedListingTypes = restructureListingTypes(\n    hostedConfig.listingTypes?.listingTypes\n  );\n  const hostedListingFields = restructureListingFields(\n    hostedConfig.listingFields?.listingFields\n  );\n\n  // The default values for local debugging\n  const {\n    listingTypes: defaultListingTypes,\n    listingFields: defaultListingFields,\n    ...rest\n  } = defaultConfigs.listing || {};\n\n  // When debugging, include default configs.\n  // Otherwise, use listing types and fields from hosted assets.\n  const shouldMerge = mergeDefaultTypesAndFieldsForDebugging(false);\n  const listingTypes = shouldMerge\n    ? union(hostedListingTypes, defaultListingTypes, 'listingType')\n    : hostedListingTypes;\n  const listingFields = shouldMerge\n    ? union(hostedListingFields, defaultListingFields, 'key')\n    : hostedListingFields;\n\n  const listingTypesInUse = getListingTypeStringsInUse(listingTypes);\n\n  return {\n    ...rest,\n    listingFields: validListingFields(listingFields, listingTypesInUse),\n    listingTypes: validListingTypes(listingTypes),\n    enforceValidListingType:\n      defaultConfigs.listing.enforceValidListingType,\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Interval-Based Filtering Query for Timeslots in ListingPage.duck.js\nDESCRIPTION: Reference to a query in ListingPage.duck.js that implements interval-based filtering to efficiently retrieve availability information. This approach allows fetching significantly less data from the API than regular timeslot queries, which are limited to 500 timeslots per page.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-availability/availability-management/index.md#2025-04-18_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Reference to ListingPage.duck.js line 495\n```\n\n----------------------------------------\n\nTITLE: Conditionally Rendering DeleteAccountForm\nDESCRIPTION: Shows how to conditionally render the DeleteAccountForm based on user authentication status.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-users-and-authentication/implement-delete-user/index.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// Show form for a valid current user\nconst showDeleteAccountForm = currentUser && currentUser.id;\n\nconst deleteAccountForm = showDeleteAccountForm ? (\n  <DeleteAccountForm\n    className={css.form}\n    deleteAccountError={deleteAccountError}\n    currentUser={currentUser}\n    onSubmit={handleDeleteAccount}\n    onChange={onChange}\n    onResetPassword={onResetPassword}\n    resetPasswordInProgress={resetPasswordInProgress}\n    resetPasswordError={resetPasswordError}\n    inProgress={deleteAccountInProgress}\n    ready={accountDeleted}\n  />\n) : null;\n```\n\n----------------------------------------\n\nTITLE: Filtering Listings by Stock Availability in Sharetribe\nDESCRIPTION: Example of using the Sharetribe SDK to query listings based on their stock availability. This snippet filters to show only listings with at least one item in stock.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/concepts-listings/how-the-search-works/index.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nsdk.listings.query({ minStock: 1 })\n```\n\n----------------------------------------\n\nTITLE: Initializing Service History Panel in React for Sharetribe Flex\nDESCRIPTION: This snippet defines the EditListingServiceHistoryPanel component for managing service history in listings. It handles initial values, form submission, and integrates with the listing wizard.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-listing/extend-listing-data-in-ftw/index.md#2025-04-18_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nimport { FormattedMessage } from '../../../../util/reactIntl';\nimport { LISTING_STATE_DRAFT } from '../../../../util/types';\n\n// Import shared components\nimport { ListingLink } from '../../../../components';\n\n// Import modules from this directory\nimport EditListingServiceHistoryForm from './EditListingServiceHistoryForm';\n\n// Create this file using EditListingLocationPanel.module.css\n// as a template.\nimport css from './EditListingServiceHistoryPanel.module.css';\n\nconst getInitialValues = props => {\n  const { serviceHistory } =\n    props.listing?.attributes?.publicData || {};\n  const { lastServiced, serviceDetails } = serviceHistory || {};\n\n  return {\n    lastServiced: {\n      date: (lastServiced && new Date(lastServiced)) || null,\n    },\n    serviceDetails,\n  };\n};\n\nconst EditListingServiceHistoryPanel = props => {\n  const {\n    className,\n    rootClassName,\n    listing,\n    disabled,\n    ready,\n    onSubmit,\n    submitButtonText,\n    panelUpdated,\n    updateInProgress,\n    errors,\n  } = props;\n\n  const classes = classNames(rootClassName || css.root, className);\n  const isPublished =\n    listing?.id && listing?.attributes.state !== LISTING_STATE_DRAFT;\n  const initialValues = getInitialValues(props);\n\n  return (\n    <div className={classes}>\n      <h1 className={css.title}>\n        {isPublished ? (\n          <FormattedMessage\n            id=\"EditListingServiceHistoryPanel.title\"\n            values={{ listingTitle: <ListingLink listing={listing} /> }}\n          />\n        ) : (\n          <FormattedMessage id=\"EditListingServiceHistoryPanel.createListingTitle\" />\n        )}\n      </h1>\n      <EditListingServiceHistoryForm\n        className={css.form}\n        initialValues={initialValues}\n        onSubmit={values => {\n          const { lastServiced, serviceDetails } = values;\n\n          const updateValues = {\n            publicData: {\n              serviceHistory: {\n                lastServiced: lastServiced?.date?.toJSON() || null,\n                serviceDetails,\n              },\n            },\n          };\n\n          onSubmit(updateValues);\n        }}\n        saveActionMsg={submitButtonText}\n        disabled={disabled}\n        ready={ready}\n        updated={panelUpdated}\n        updateInProgress={updateInProgress}\n        fetchErrors={errors}\n        autoFocus\n      />\n    </div>\n  );\n};\n\nexport default EditListingServiceHistoryPanel;\n```\n\n----------------------------------------\n\nTITLE: Updating CheckoutPage to Use loadInitialData in JavaScript\nDESCRIPTION: This code snippet shows how to update the CheckoutPage component to use loadInitialData instead of loadInitialDataForStripePayments for transactions that include bookings or purchases.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-payments/removing-stripe/index.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nif (getProcessName(data) !== INQUIRY_PROCESS_NAME) {\n  // Fetch speculateTransition for transactions that include bookings or purchases\n  loadInitialData({\n    pageData: data || {},\n    fetchSpeculatedTransaction,\n    config,\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Extra Features Form Component\nDESCRIPTION: Implementation of the Final Form component for handling extra features input, including form validation and submission handling.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/tutorial-listings/new-wizard-tab/index.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport const EditListingExtraFeaturesFormComponent = props => (\n  <FinalForm\n    {...props}\n    render={formRenderProps => {\n      const {\n        formId,\n        autoFocus,\n        className,\n        disabled,\n        ready,\n        handleSubmit,\n        intl,\n        invalid,\n        pristine,\n        saveActionMsg,\n        updated,\n        updateInProgress,\n        fetchErrors,\n      } = formRenderProps;\n\n      const classes = classNames(css.root, className);\n      const submitReady = (updated && pristine) || ready;\n      const submitInProgress = updateInProgress;\n      const submitDisabled = invalid || disabled || submitInProgress;\n      const { updateListingError, showListingsError } = fetchErrors || {};\n```\n\n----------------------------------------\n\nTITLE: Pulling a Specific Process Version with Sharetribe CLI\nDESCRIPTION: Command to pull a specific process version from the marketplace. This creates a local directory with all process files including email templates.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-messaging/edit-email-templates-with-flex-cli/index.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nflex-cli process pull --process default-booking --version 1 --path process -m my-marketplace-dev\n```\n\n----------------------------------------\n\nTITLE: Modifying findBookingUnitBoundaries Function in JSX\nDESCRIPTION: Updates the findBookingUnitBoundaries function to use the new findNextCustomBoundary function and pass the isStart and isFirst parameters correctly.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-listing/bookings-with-buffer/index.md#2025-04-18_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\nconst findBookingUnitBoundaries = params => {\n  const {\n    cumulatedResults,\n    currentBoundary,\n    startMoment,\n    endMoment,\n    nextBoundaryFn,\n    intl,\n    timeZone,\n+   isStart,\n    timeUnit = 'hour',\n  } = params;\n\n  if (moment(currentBoundary).isBetween(startMoment, endMoment, null, '[]')) {\n    const timeOfDay = formatDateIntoPartials(currentBoundary, intl, { timeZone })?.time;\n\n+   // The nextBoundaryFn by definition cannot determine the first timepoint, since it\n+   // is always based on a previous boundary, we pass 'false' as the 'isFirst' param\n+   const isFirst = false;\n\n\n    // Choose the previous (aka first) sharp hour boundary,\n    // if daylight saving time (DST) creates the same time of day two times.\n    const newBoundary =\n      cumulatedResults &&\n      cumulatedResults.length > 0 &&\n      cumulatedResults.slice(-1)[0].timeOfDay === timeOfDay\n        ? []\n        : [\n            {\n              timestamp: currentBoundary.valueOf(),\n              timeOfDay,\n            },\n          ];\n\n    return findBookingUnitBoundaries({\n      ...params,\n      cumulatedResults: [...cumulatedResults, ...newBoundary],\n-     currentBoundary: moment(nextBoundaryFn(currentBoundary, timeUnit, timeZone)),\n+     currentBoundary: moment(nextBoundaryFn(currentBoundary, timeUnit, timeZone, isFirst, isStart)),\n    });\n  }\n  return cumulatedResults;\n};\n```\n\n----------------------------------------\n\nTITLE: Route Configuration with Preloadable Components\nDESCRIPTION: Example of route configuration implementation including component loading and data handling setup.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-routing/how-code-splitting-works-in-ftw/index.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n    // const AuthenticationPage = loadable(() => import(/* webpackChunkName: \"AuthenticationPage\" */ './containers/AuthenticationPage/AuthenticationPage'));\n    {\n      path: '/signup',\n      name: 'SignupPage',\n      component: AuthenticationPage,\n      extraProps: { tab: 'signup' },\n    },\n```\n\n----------------------------------------\n\nTITLE: Updating Order Line Item Construction in lineItems.js\nDESCRIPTION: Replaces the hardcoded quantity property with the dynamic quantityOrSeats object that supports both traditional quantity and units/seats combinations.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-listing/seats/index.md#2025-04-18_snippet_37\n\nLANGUAGE: diff\nCODE:\n```\n  const order = {\n    code,\n    unitPrice,\n- \tquantity,\n+   ...quantityOrSeats,\n    includeFor: ['customer', 'provider'],\n  };\n```\n\n----------------------------------------\n\nTITLE: Modifying Listing Configuration Merge Logic\nDESCRIPTION: JavaScript code modification to enable using both hosted and built-in listing configurations\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/tutorial-transaction-process/create-transaction-process/index.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst mergeListingConfig = (hostedConfig, defaultConfigs) => {\n...\n  const shouldMerge = mergeDefaultTypesAndFieldsForDebugging(false);\n- const listingTypes = shouldMerge\n-   ? union(hostedListingTypes, defaultListingTypes, 'listingType')\n-   : hostedListingTypes;\n+ const listingTypes = union(hostedListingTypes, defaultListingTypes, 'listingType');\n  const listingFields = shouldMerge\n    ? union(hostedListingFields, defaultListingFields, 'key')\n    : hostedListingFields;\n...\n```\n\n----------------------------------------\n\nTITLE: Relevant Past Transitions Helper\nDESCRIPTION: Helper function to determine which transitions should be shown in the transaction history.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/tutorial-transaction-process/create-transaction-process/index.md#2025-04-18_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nexport const isRelevantPastTransition = transition => {\n  return [\n    transitions.CANCEL,\n    transitions.COMPLETE,\n    transitions.CONFIRM_PAYMENT,\n    transitions.REVIEW_1_BY_CUSTOMER,\n    transitions.REVIEW_1_BY_PROVIDER,\n    transitions.REVIEW_2_BY_CUSTOMER,\n    transitions.REVIEW_2_BY_PROVIDER,\n  ].includes(transition);\n};\n```\n\n----------------------------------------\n\nTITLE: Updating AvailableExceptionsInfo Component for Seat Display in React\nDESCRIPTION: Modifies the AvailableExceptionsInfo component in WeeklyCalendar to display the number of seats for exceptions.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-listing/seats/index.md#2025-04-18_snippet_16\n\nLANGUAGE: diff\nCODE:\n```\n// Component that renders all the ExceptionEntry components that allow availability (seats > 0)\nconst AvailableExceptionsInfo = ({\n  availableExceptions,\n  useFullDays,\n  isDaily,\n  timeZone,\n  onDeleteAvailabilityException,\n}) => {\n  const hasAvailableExceptions = availableExceptions.length > 0;\n+ const seats = hasAvailableExceptions ? availableExceptions[0].attributes.seats : null;\n\n  return hasAvailableExceptions ? (\n    <>\n      <Heading as=\"h6\" rootClassName={css.exceptionsSubtitle}>\n-       <FormattedMessage id=\"EditListingAvailabilityPanel.WeeklyCalendar.available\" />\n+       <FormattedMessage\n+         id=\"EditListingAvailabilityPanel.WeeklyCalendar.available\"\n+         values={{ seats }}\n        />\n      </Heading>\n```\n\n----------------------------------------\n\nTITLE: Using Handlebars Helper with Complex Formatting for Email Templates\nDESCRIPTION: Shows how to use the 't' Handlebars helper with multiple parameters and pluralization for a complex email template text.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/concepts-development/microcopy/index.md#2025-04-18_snippet_15\n\nLANGUAGE: handlebars\nCODE:\n```\n  <p style=\"font-size:16px;line-height:1.4;margin:16px 0;color:#484848;margin-bottom:1px\">\n    {{t \"BookingNewRequest.PriceForHoursQuantity\"\n    \"{amount, number, ::.00} {currency} × {units, number} {units, plural, one {hour} other {hours}}\"\n    amount=unit-price.amount currency=unit-price.currency units=units}}\n  </p>\n```\n\n----------------------------------------\n\nTITLE: Transaction Process Configuration - Diff\nDESCRIPTION: Changes to the transaction process configuration to reveal provider's protected data during payment confirmation.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/tutorial-transaction-process/use-protected-data-in-emails/index.md#2025-04-18_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n  {:name :transition/confirm-payment,\n   :actor :actor.role/customer,\n   :actions\n   [{:name :action/accept-booking}\n+   {:name :action/reveal-provider-protected-data,\n+    :config {:key-mapping {:phoneNumber :providerPhoneNumber}}}\n    {:name :action/stripe-confirm-payment-intent}\n    {:name :action/stripe-capture-payment-intent}],\n   :from :state/pending-payment,\n   :to :state/booked}\n```\n\n----------------------------------------\n\nTITLE: Configuring Content Security Policy Environment Variable in JavaScript\nDESCRIPTION: This snippet shows how to set the REACT_APP_CSP environment variable to enable Content Security Policy in either report or block mode for the Sharetribe Web Template.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-security/how-to-set-up-csp-for-ftw/index.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nREACT_APP_CSP=report // Enabled, but policy violations are only reported\nREACT_APP_CSP=block // Enabled. Policy violations are reported and requests that violate the policy are blocked\n```\n\n----------------------------------------\n\nTITLE: Adding Email Text Keys for Built-in Notifications\nDESCRIPTION: This JSON snippet demonstrates how to add email text keys and values for built-in notifications to the email texts editor. It shows the structure for defining translation keys and their corresponding messages with variable placeholders.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-content/use-translations-in-emails/index.md#2025-04-18_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n...,\n  \"UserJoined.Greeting\": \"Hi {firstName}, you are welcome to {marketplaceName}!\",\n  \"UserJoined.Subject\": \"Welcome to {marketplaceName}\",\n...\n}\n```\n\n----------------------------------------\n\nTITLE: Using NamedLink for Internal Navigation in React\nDESCRIPTION: Shows examples of using the NamedLink component for creating links to internal routes with various parameters.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-routing/how-routing-works-in-ftw/index.md#2025-04-18_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n// Link to LoginPage:\n<NamedLink name=\"LoginPage\" />log in</NamedLink>\n\n// Link to ListingPage with path `l/<listing-uuid>/<listing-title-as-url-slug>/`:\n<NamedLink name=\"ListingPage\" params={{ id: '<listing-uuid>', slug: '<listing-title-as-url-slug>' }}>some listing</NamedLink>\n\n// Link to SearchPage with query parameter: bounds\n<NamedLink name=\"SearchPage\" to={{ search: '?bounds=60.53,22.38,60.33,22.06' }}>Turku city</NamedLink>\n```\n\n----------------------------------------\n\nTITLE: Querying Recent Events with Timestamp in JavaScript\nDESCRIPTION: Query for events within a specific time range (last 5 minutes) using a timestamp and event type filtering.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-events/reacting-to-events/index.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst now = new Date();\nconst fiveMinutesAgo = new Date(now - 300000);\nintegrationSdk.events.query({\n  createdAtStart: fiveMinutesAgo,\n  eventTypes: 'listing/created,listing/updated',\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a RelativeTime Component in React JSX\nDESCRIPTION: A React functional component that displays a relative time string based on a date input, with proper HTML time element attributes.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/docs/markdown-guide/index.md#2025-04-18_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst RelativeTime = props => {\n  const { date, ...rest } = props;\n  const { relativeTime } = useRelativeTime(date);\n  const isoString = date.toISOString();\n  return (\n    <time title={isoString} dateTime={isoString} {...rest}>\n      {relativeTime}\n    </time>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Process Alias - Bash\nDESCRIPTION: Command to update an alias to point to a new process version.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-messaging/edit-email-templates-with-flex-cli/index.md#2025-04-18_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nflex-cli process update-alias --process default-booking --alias release-1 --version 2 -m my-marketplace-dev\n```\n\n----------------------------------------\n\nTITLE: Initial Values Helper Function\nDESCRIPTION: JavaScript function to extract existing extra features from a listing's public data.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/tutorial-listings/new-wizard-tab/index.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst getInitialValues = params => {\n  const { listing } = params;\n  const { extraFeatures } = listing?.attributes.publicData || {};\n\n  return { extraFeatures };\n};\n```\n\n----------------------------------------\n\nTITLE: Defining New Props in SectionLikes Component for Like Functionality\nDESCRIPTION: This diff shows the addition of new props in the SectionLikes component to handle like functionality, including likesOffset and functions to add or subtract likes.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-events/like-feature/index.md#2025-04-18_snippet_18\n\nLANGUAGE: diff\nCODE:\n```\nconst SectionLikes = props => {\n  const {\n    publicData,\n    onUpdateLikes,\n    listingId,\n    currentUser,\n    updateLikesInProgress,\n+   likesOffset,\n+   onAddLike,\n+   onSubtractLike,\n  } = props;\n```\n\n----------------------------------------\n\nTITLE: Updating Quantity Calculation in LineItemBasePriceMaybe.js\nDESCRIPTION: Updates the quantity calculation in the component to handle both traditional quantity and units from the line item. Uses optional chaining to safely access potentially undefined properties.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-listing/seats/index.md#2025-04-18_snippet_39\n\nLANGUAGE: jsx\nCODE:\n```\n/** Replace this **/\nconst quantity = unitPurchase ? unitPurchase.quantity.toString() : null;\n/** with this **/\nconst quantity = unitPurchase?.units\n  ? unitPurchase.units.toString()\n  : unitPurchase?.quantity\n  ? unitPurchase.quantity.toString()\n  : null;\n```\n\n----------------------------------------\n\nTITLE: Adding Handlebars Template Helper\nDESCRIPTION: Example of adding a new text section in email templates using Handlebars helper syntax\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/tutorial-transaction-process/add-email-notification/index.md#2025-04-18_snippet_1\n\nLANGUAGE: handlebars\nCODE:\n```\n{{ t\n  \"TemplateName.MessageKey\"\n  \"Fallback message in case key not found\"\n  listingFieldVariable=listing.publicData.someListingField\n}}\n```\n\nLANGUAGE: handlebars\nCODE:\n```\n{{ t\n  \"BookingReminder.BrandDescription\"\n  \"You have booked a {brand} bike!\"\n  brand=listing.publicData.brand\n}}\n```\n\n----------------------------------------\n\nTITLE: Adjusting Available Start Times in dates.js\nDESCRIPTION: Updates the getStartHours function to return correct available start times considering the buffer.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-listing/bookings-with-buffer/index.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst bufferMinutes = 15;\nconst hourMinutes = 60;\n\nexport const getStartHours = (startTime, endTime, timeZone, intl) => {\n  const hours = getSharpHours(startTime, endTime, timeZone, intl);\n const removeCount = Math.ceil((hourMinutes + bufferMinutes) / hourMinutes);\n return hours.length < removeCount ? [] : hours.slice(0, -removeCount);\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Select Formatting for UI Text in JSON\nDESCRIPTION: This snippet demonstrates how to use 'select' formatting in a JSON configuration file for UI text. It allows different text to be displayed based on the 'actor' variable.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/concepts-development/microcopy/index.md#2025-04-18_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"TransactionPage.ActivityFeed.default-purchase.purchased\": \"{actor, select, you {You placed an order for {listingTitle}.} other {{otherUsersName} placed an order for {listingTitle}.}}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Attribute Properties in JavaScript\nDESCRIPTION: Shows the minimum required properties for defining an extended data attribute: key, scope, and schemaType.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-users-and-authentication/extend-user-data-in-template/index.md#2025-04-18_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n  key: 'additionalServices',\n  scope: 'public',\n  schemaType: 'boolean',\n```\n\n----------------------------------------\n\nTITLE: Fetching Marketplace Texts by Alias with Asset Delivery API\nDESCRIPTION: Example of how to fetch the latest marketplace text assets using an alias instead of a specific version. The 'latest' alias returns the most recently updated version of the translation file.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-content/hosted-microcopy/index.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nsdk.assetByAlias({\n  path: 'content/translations.json',\n  alias: 'latest',\n});\n```\n\n----------------------------------------\n\nTITLE: Lazy Loading Images with Dimensions in React\nDESCRIPTION: Example of using the lazyLoadWithDimensions helper function to lazy load off-screen images in a React component. This technique is used in the ListingCard component of the Sharetribe Web Template.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-styling/how-to-improve-performance/index.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlazyLoadWithDimensions()\n```\n\n----------------------------------------\n\nTITLE: Enabling Google Maps in Configuration File\nDESCRIPTION: Code snippet showing how to enable Google Maps in the template by changing the mapProvider variable in configMaps.js from 'MAPBOX' to 'GOOGLE_MAPS'.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-search/how-to-use-google-maps-in-ftw/index.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const mapProvider = 'GOOGLE_MAPS';\n```\n\n----------------------------------------\n\nTITLE: Updating HTML Content in Built-in Notifications\nDESCRIPTION: This snippet demonstrates how to replace static HTML content with the {{t}} translation helper in built-in email notifications. It shows the syntax for including variables and fallback messages.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-content/use-translations-in-emails/index.md#2025-04-18_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<!-- original message -->\n<h1>Hi {{recipient.first-name}}, welcome to {{marketplace.name}}!</h1>\n\n<!-- becomes {{t \"templatename.messagekey\" \"fallbackmessage\" variableName1=variableValue1 variableName2=variableValue2... }} -->\n<h1>\n  {{t \"UserJoined.Greeting\" \"Hi {firstName}, welcome to\n  {marketplaceName}!\" firstName=recipient.first-name\n  marketplaceName=marketplace.name}}\n</h1>\n```\n\n----------------------------------------\n\nTITLE: Defining Extended Data Field Configuration in JavaScript\nDESCRIPTION: Configuration object for an extended data field that defines a frame material selector. Includes schema type, enum options, filter settings, display configuration and save settings.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-configuration/configuration-in-ftw-x/index.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n  {\n    key: 'frame',\n    scope: 'public',\n    schemaType: 'enum',\n    enumOptions: [\n      { option: 'aluminium', label: 'Aluminium' },\n      { option: 'steel', label: 'Steel' },\n      { option: 'titanium', label: 'Titanium' },\n    ],\n    filterConfig: {\n      indexForSearch: false,\n      filterType: 'SelectSingleFilter',\n      label: 'Frame material',\n      group: 'primary',\n    },\n    showConfig: {\n      label: 'Frame material',\n      isDetail: true,\n    },\n    saveConfig: {\n      label: 'Frame material',\n      placeholderMessage: 'Select frame material',\n      isRequired: false,\n    },\n  },\n```\n\n----------------------------------------\n\nTITLE: Extending Time Range for Timezone Coverage in SearchPage.duck.js\nDESCRIPTION: Code snippet from SearchPage.duck.js that extends the search time range to cover listings in all possible timezones. The start time is moved 14 hours earlier and the end time is moved 12 hours later to ensure comprehensive coverage.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-availability/availability-management/index.md#2025-04-18_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Reference to SearchPage.duck.js lines 185-186\n```\n\n----------------------------------------\n\nTITLE: Updating getBoundaries Function Call\nDESCRIPTION: Modifies the getBoundaries function to pass the isFirst parameter to findNextBoundary for proper first slot handling.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-listing/time-slots/index.md#2025-04-18_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\nexport const getBoundaries = (startTime, endTime, unitCount, timeUnit, timeZone, intl) => {\n  ...\n  const millisecondBeforeStartTime = new Date(startTime.getTime() - 1);\n  return findBookingUnitBoundaries({\n+   // Add isFirst param to determine first time slot handling\n-   currentBoundary: findNextBoundary(millisecondBeforeStartTime, 1, timeUnit, timeZone),\n+   currentBoundary: findNextBoundary(millisecondBeforeStartTime, 1, timeUnit, timeZone, true),\n    startMoment: moment(startTime),\n    endMoment: moment(endTime),\n    ...\n```\n\n----------------------------------------\n\nTITLE: Filtering Listing-Related Events in JavaScript\nDESCRIPTION: Query for specific listing-related events (created and updated) using event type filtering.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-events/reacting-to-events/index.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nintegrationSdk.events.query({\n  eventTypes: 'listing/created,listing/updated',\n});\n```\n\n----------------------------------------\n\nTITLE: Resolving Github Environment Variables in Sharetribe Backend\nDESCRIPTION: This code resolves the Github-related environment variables in the Sharetribe backend for use in the authentication process.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-users-and-authentication/setup-oidc-proxy/index.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst GITHUB_PROXY_CLIENT_ID = process.env.GITHUB_PROXY_CLIENT_ID;\nconst GITHUB_PROXY_IDP_ID = process.env.GITHUB_PROXY_IDP_ID;\n```\n\n----------------------------------------\n\nTITLE: Querying Events After Specific Sequence ID in JavaScript\nDESCRIPTION: Example of querying for events that occurred after a specific sequence ID, useful for continuous event polling.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-events/reacting-to-events/index.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Given the sequence ID of last processed event, query only for newer events\nconst lastEventSequenceId = 1234;\nintegrationSdk.events.query({\n  startAfterSequenceId: lastEventSequenceId,\n  eventTypes: 'listing/created,listing/updated',\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Call-to-Action Button in HTML Email\nDESCRIPTION: This snippet demonstrates how to create a call-to-action button in an HTML email. It includes fallback text for email clients that don't support buttons and provides an accessible link text alternative.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/static/tutorial-assets/booking-reminder-customer-html.txt#2025-04-18_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<a href=\"{{marketplace.url}}/order/{{url-encode id}}/\" target=\"_blank\"\n  style=\"color:#FFF;background-color:#007DF2;border-radius:4px;font-size:15px;text-decoration:none;text-align:center;display:inline-block;min-width:210px;padding:0px 0px;line-height:100%;max-width:100%\"><span><!--[if mso]><i style=\"letter-spacing: undefinedpx;mso-font-width:-100%;mso-text-raise:0\" hidden>&nbsp;</i><![endif]--></span><span\n    style=\"color:#FFF;background-color:#007DF2;border-radius:4px;font-size:15px;text-decoration:none;text-align:center;display:inline-block;min-width:210px;padding:16px 32px;max-width:100%;line-height:120%;text-transform:none;mso-padding-alt:0px;mso-text-raise:0\">{{t \"BookingReminder.Cta\" \"View order details\"}}</span><span><!--[if mso]><i style=\"letter-spacing: undefinedpx;mso-font-width:-100%\" hidden>&nbsp;</i><![endif]--></span></a>\n<div>\n  <p style=\"font-size:14px;line-height:1.5;margin:16px 0;color:#484848\">{{t \"TransactionEmails.AccessibleLinkText\" \"Can't click the button? Here's the link for your convenience:\"}} <a target=\"_blank\" style=\"color:#007DF2;text-decoration:none\" href=\"{{marketplace.url}}/order/{{url-encode id}}/\">\n      {{marketplace.url}}/order/{{url-encode id}}/</a></p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Updating Tab Order in EditListingWizard.js\nDESCRIPTION: Modifies the TABS_PRODUCT array to include the new SERVICE_HISTORY tab in the correct order.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-listing/extend-listing-data-in-ftw/index.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst TABS_DETAILS_ONLY = [DETAILS];\nconst TABS_PRODUCT = [\n  DETAILS,\n  PRICING_AND_STOCK,\n  SERVICE_HISTORY,\n  DELIVERY,\n  PHOTOS,\n];\nconst TABS_BOOKING = [DETAILS, LOCATION, PRICING, AVAILABILITY, PHOTOS];\nconst TABS_ALL = [...TABS_PRODUCT, ...TABS_BOOKING];\n```\n\n----------------------------------------\n\nTITLE: Generating RSA Key Pair for OpenID Connect Proxy in Shell\nDESCRIPTION: Shell commands to generate an RSA public and private key pair for signing and validating ID tokens in the OpenID Connect proxy implementation.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-users-and-authentication/setup-oidc-proxy/index.md#2025-04-18_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# create an RSA key pair, you can leave out the passphrase when prompted\nssh-keygen -f swt_rsa -t rsa -m PEM\n\n# now you have two files\n# swt_rsa: private key in PEM format\n# swt_rsa.pub: public key in SSH public key format\n\n# convert the public key from previous command to PEM format\nssh-keygen -f swt_rsa.pub -e -m PEM > swt_rsa_pub\n```\n\n----------------------------------------\n\nTITLE: Configuring Search for Extended Attributes in Sharetribe Web Template\nDESCRIPTION: Shows how to configure search functionality for an extended attribute, including indexing for search, label, search mode, and grouping.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-listing/extend-listing-data-in-ftw/index.md#2025-04-18_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nfilterConfig: {\n  indexForSearch: true,\n  label: 'Accessories',\n  searchMode: 'has_any',\n  group: 'secondary',\n},\n```\n\n----------------------------------------\n\nTITLE: Implementing getSeatsArray Function in BookingDatesForm\nDESCRIPTION: Adds a function to calculate available seat options based on the selected date range, using the minimum available seats across all time slots in the range.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-listing/seats/index.md#2025-04-18_snippet_21\n\nLANGUAGE: jsx\nCODE:\n```\nconst getSeatsArray = () => {\n  const formState = formApi.getState();\n  const { bookingDates } = formState.values;\n\n  if (!bookingDates) {\n    return null;\n  }\n\n  const minSeatsTimeSlot = getMinSeatsTimeSlot(\n    monthlyTimeSlots,\n    timeZone,\n    bookingDates.startDate,\n    bookingDates.endDate\n  );\n\n  // Return an array of the seat options a customer\n  // can pick for the time range\n  return Array(minSeatsTimeSlot.seats)\n    .fill()\n    .map((_, i) => i + 1);\n};\n```\n\n----------------------------------------\n\nTITLE: JSON Marketplace Text with Pluralization in Sharetribe\nDESCRIPTION: Demonstrates how to define a marketplace text with pluralization logic to handle singular and plural forms based on a count variable.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/concepts-development/microcopy/index.md#2025-04-18_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ManageListingsPage.youHaveListings\": \"You have {count} {count, plural, one {listing} other {listings}}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Safe JSX Content Rendering in React\nDESCRIPTION: Example of safely rendering user-generated content using React's built-in JSX escaping mechanism. React DOM automatically escapes values embedded in JSX before rendering.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-security/how-to-sanitize-user-generated-content-in-ftw/index.md#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<div>{publicData.saunaRules}</div>\n```\n\n----------------------------------------\n\nTITLE: Modified findNextBoundary with Custom Hour Handling\nDESCRIPTION: Updated version of findNextBoundary function that includes specific handling for hourly time units.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-listing/time-slots/index.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport const findNextBoundary = (\n  currentDate,\n  unitCount,\n  timeUnit,\n  timeZone\n) => {\n  const customTimeUnitConfig = bookingTimeUnits[timeUnit]?.isCustom\n    ? bookingTimeUnits[timeUnit]\n    : null;\n\n  if (!!customTimeUnitConfig) {\n    const customTimeUnitInMinutes =\n      customTimeUnitConfig?.timeUnitInMinutes;\n    const minuteOffset = !!customTimeUnitInMinutes\n      ? unitCount * customTimeUnitInMinutes\n      : unitCount;\n\n    return moment(currentDate)\n      .clone()\n      .tz(timeZone)\n      .add(minuteOffset, 'minute')\n      .startOfMinuteBasedInterval(customTimeUnitInMinutes)\n      .toDate();\n  } else if (timeUnit === 'hour') {\n    return moment(currentDate)\n      .clone()\n      .tz(timeZone)\n      .add(timeSlotMinutes, 'minute')\n      .startOfMinuteBasedInterval(timeSlotMinutes)\n      .toDate();\n  } else {\n    return moment(currentDate)\n      .clone()\n      .tz(timeZone)\n      .add(unitCount, timeUnit)\n      .startOf(timeUnit)\n      .toDate();\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Markdown Links in Sharetribe Articles\nDESCRIPTION: Example showing how to create internal links between articles using Markdown syntax in the Sharetribe Pages feature. The example demonstrates linking to packing list and history pages within article content.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-content/article-blog/index.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n...\nFor a wood-heated cottage, it makes sense to bring your woollen socks – even in summer,\nthe cottage may be cool inside, and [having the right gear](/p/packing-list) reduces\nthe need for heating during the cooler months.\n\nFor [older cottages](/p/history), amenities will likely be more modest.\n...\n```\n\n----------------------------------------\n\nTITLE: Adding Label for Service History Tab\nDESCRIPTION: Updates the tabLabelAndSubmit function to include a label for the new SERVICE_HISTORY tab.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-listing/extend-listing-data-in-ftw/index.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst tabLabelAndSubmit = (\n  intl,\n  tab,\n  isNewListingFlow,\n  processName\n) => {\n  const processNameString = isNewListingFlow ? `${processName}.` : '';\n  const newOrEdit = isNewListingFlow ? 'new' : 'edit';\n\n  let labelKey = null;\n  let submitButtonKey = null;\n  if (tab === DETAILS) {\n    labelKey = 'EditListingWizard.tabLabelDetails';\n    submitButtonKey = `EditListingWizard.${processNameString}${newOrEdit}.saveDetails`;\n  } else if (tab === PRICING) {\n    labelKey = 'EditListingWizard.tabLabelPricing';\n    submitButtonKey = `EditListingWizard.${processNameString}${newOrEdit}.savePricing`;\n  } else if (tab === PRICING_AND_STOCK) {\n    labelKey = 'EditListingWizard.tabLabelPricingAndStock';\n    submitButtonKey = `EditListingWizard.${processNameString}${newOrEdit}.savePricingAndStock`;\n  } else if (tab === SERVICE_HISTORY) {\n    labelKey = 'EditListingWizard.tabLabelServiceHistory';\n    submitButtonKey = `EditListingWizard.${processNameString}${newOrEdit}.saveServiceHistory`;\n  } else if (tab === DELIVERY) {\n    labelKey = 'EditListingWizard.tabLabelDelivery';\n    submitButtonKey = `EditListingWizard.${processNameString}${newOrEdit}.saveDelivery`;\n  } else if (tab === LOCATION) {\n    labelKey = 'EditListingWizard.tabLabelLocation';\n    submitButtonKey = `EditListingWizard.${processNameString}${newOrEdit}.saveLocation`;\n  } else if (tab === AVAILABILITY) {\n    labelKey = 'EditListingWizard.tabLabelAvailability';\n    submitButtonKey = `EditListingWizard.${processNameString}${newOrEdit}.saveAvailability`;\n  } else if (tab === PHOTOS) {\n    labelKey = 'EditListingWizard.tabLabelPhotos';\n    submitButtonKey = `EditListingWizard.${processNameString}${newOrEdit}.savePhotos`;\n  }\n\n  return {\n    label: intl.formatMessage({ id: labelKey }),\n    submitButton: intl.formatMessage({ id: submitButtonKey }),\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Review Resource Example in EDN\nDESCRIPTION: Example of a review resource with rating, content, type, state, and references to author, subject, and listing.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-migrations/migrating-from-outside-sharetribe/index.md#2025-04-18_snippet_8\n\nLANGUAGE: edn\nCODE:\n```\n[[:im.review/id]\n  #:im.review{:content \"Exactly as advertised. Bummed this was a one time deal.\"\n              :rating 5\n              :type :review.type/ofProvider\n              :state :review.state/public\n              :createdAt #inst \"2018-01-06T00:10:10Z\"\n              :author #im/ref :user/jane\n              :subject #im/ref :user/john\n              :listing #im/ref :listing/rock-sauna}]\n```\n\n----------------------------------------\n\nTITLE: Generating Intermediary Data in JavaScript\nDESCRIPTION: This code snippet demonstrates how to generate Intermediary data in edn format using JavaScript libraries jsedn and uuid. It creates sample user and listing data structures.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-migrations/migrating-from-outside-sharetribe/index.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst edn = require('jsedn');\nconst { v4: uuidv4 } = require('uuid');\n\nconst tagged = (tag, value) => new edn.Tagged(new edn.Tag(tag), value);\nconst uuid = () => tagged(\"uuid\", uuidv4());\nconst price = (amount, currency) => tagged(\"im/money\", [amount, currency]);\n\nconst email = data => {\n  const { emailAddress } = data;\n  return new edn.Map([edn.kw(\":im.email/address\"), emailAddress,\n                      edn.kw(\":im.email/verified\"), true]);\n};\n\nconst profile = data => {\n  const { firstName, lastName } = data;\n  return new edn.Map([edn.kw(\":im.userProfile/firstName\"), firstName,\n                      edn.kw(\":im.userProfile/lastName\"), lastName]);\n};\n\nconst user = data => {\n  const { alias, emailAddress, firstName, lastName } = data;\n  const role = new edn.Vector([edn.kw(\":user.role/customer\"), edn.kw(\":user.role/provider\")]);\n\n  return new edn.Vector([new edn.Vector([edn.kw(\":im.user/id\"), uuid(), alias]),\n                         new edn.Map([\n                           edn.kw(\":im.user/primaryEmail\"), email(data),\n                           edn.kw(\":im.user/createdAt\"), tagged(\"inst\", new Date().toISOString()),\n                           edn.kw(\":im.user/role\"), role,\n                           edn.kw(\":im.user/profile\"), profile(data)\n                         ])\n                        ]);\n};\n\nconst listing = data => {\n  const { alias, title, priceAmount, author } = data;\n  return new edn.Vector([new edn.Vector([edn.kw(\":im.listing/id\"), uuid(), alias]),\n                         new edn.Map([\n                           edn.kw(\":im.listing/title\"), title,\n                           edn.kw(\":im.listing/createdAt\"), tagged(\"inst\", new Date().toISOString()),\n                           edn.kw(\":im.listing/state\"), edn.kw(\":listing.state/published\"),\n                           edn.kw(\":im.listing/price\"), price(priceAmount, \"EUR\"),\n                           edn.kw(\":im.listing/author\"), tagged(\"im/ref\", author)\n                         ])\n                        ]);\n\nconst userAlias = edn.kw(\":user/john\");\nconst e = new edn.Map([edn.kw(\":ident\"), edn.kw(\":mymarketplace\"),\n                       edn.kw(\":data\"), new edn.Vector([\n                         listing({\n                           alias: edn.kw(\":listing/rock-sauna\"),\n                           title: \"A solid rock sauna\",\n                           priceAmount: 12.20,\n                           author: userAlias}),\n                         user({\n                           alias: userAlias,\n                           emailAddress: \"foo@sharetribe.com\",\n                           firstName: \"John\",\n                           lastName: \"Doe\"\n                         })\n                       ])\n                      ]);\n\nconsole.log(edn.encode(e)); // or save to file\n```\n\n----------------------------------------\n\nTITLE: Period Function Example in Clojure\nDESCRIPTION: Shows how to use the period function with an ISO 8601 duration string.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/references/transaction-process-time-expressions/index.md#2025-04-18_snippet_3\n\nLANGUAGE: clojure\nCODE:\n```\n{:fn/period [\"PT15M\"]}\n```\n\n----------------------------------------\n\nTITLE: Viewing Updated Search Schemas with Sharetribe CLI\nDESCRIPTION: This command shows the updated list of search schemas after adding the new 'brand' schema, including both Console-created and CLI-defined schemas.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-search/manage-search-schemas-with-flex-cli/index.md#2025-04-18_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ flex-cli search -m my-marketplace-dev\n```\n\n----------------------------------------\n\nTITLE: Resolving Insurance Fee Price in JavaScript\nDESCRIPTION: This function resolves the insurance fee price from a listing's public data. It returns a Money object if the fee is set, or null otherwise.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-payments/customize-pricing/index.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst resolveInsuranceFeePrice = listing => {\n  const { amount, currency } =\n    listing.attributes.publicData?.insuranceFee || {};\n\n  if (amount && currency) {\n    return new Money(amount, currency);\n  }\n\n  return null;\n};\n```\n\n----------------------------------------\n\nTITLE: Using ExternalLink for Safe External Navigation in React\nDESCRIPTION: Demonstrates the use of the ExternalLink component for creating safe links to external resources.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-routing/how-routing-works-in-ftw/index.md#2025-04-18_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n// Bad pattern: <a href=\"externalsite.com\">External site</a>\n// Recommended pattern:\n<ExternalLink href=\"externalsite.com\">External site</ExternalLink>\n```\n\n----------------------------------------\n\nTITLE: Adding Like State to ListingPageCarousel Component in React\nDESCRIPTION: This diff shows the addition of a new state variable 'likesOffset' to the ListingPageComponent for managing temporary like counts.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-events/like-feature/index.md#2025-04-18_snippet_16\n\nLANGUAGE: diff\nCODE:\n```\nexport const ListingPageComponent = props => {\n  const [inquiryModalOpen, setEnquiryModalOpen] = useState(\n    props.inquiryModalOpenForListingId === props.params.id\n  );\n\n+ const [likesOffset, updateLikesOffset] = useState(0);\n\n```\n\n----------------------------------------\n\nTITLE: Greatest Common Factor Calculation for Time Slots\nDESCRIPTION: Implementation of the Euclidean algorithm to calculate the greatest common factor for irregular time slot handling.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-listing/time-slots/index.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst timeSlotMinutes = 45;\nconst hourMinutes = 60;\n\n/**\n * Calculate the greatest common factor (gcf) of two timeslot lengths\n * to determine rounding value using the Euclidean algorithm\n * (https://en.wikipedia.org/wiki/Euclidean_algorithm).\n */\nconst gcf = (a, b) => {\n  return a ? gcf(b % a, a) : b;\n};\n\n/**\n * Define the rounding value.\n * If the first time slot is shorter than general time slot,\n * swap the parameters around so that the first parameter is the shorter one\n */\nconst rounding = gcf(timeSlotMinutes, hourMinutes);\n```\n\n----------------------------------------\n\nTITLE: Adding Helmet Fee Checkbox to Form (JSX)\nDESCRIPTION: This snippet shows the implementation of the helmet fee checkbox in the BookingDatesForm. It conditionally renders the checkbox based on whether a helmet fee is available and handles changes to update line items.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/tutorial-transaction-process/customize-pricing/index.md#2025-04-18_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nconst helmetFeeMaybe = helmetFee ? (\n  <FieldCheckbox\n    className={css.helmetFeeContainer}\n    id={`${formId}.helmetFee`}\n    name=\"helmetFee\"\n    label={helmetFeeLabel}\n    value=\"helmetFee\"\n    onChange={event => {\n      onHandleFetchLineItems({\n        values: {\n          startDate: startDate,\n          endDate: endDate,\n          seats: seatsEnabled ? 1 : undefined,\n          helmetFee: event.target.checked,\n        },\n      });\n    }}\n  />\n) : null;\n```\n\n----------------------------------------\n\nTITLE: Setting Email Subject Translation in Handlebars\nDESCRIPTION: Sets up email translations and generates a localized subject line for booking reminders. Uses the 'set-translations' helper to load translation files and the 't' helper to populate the subject with the listing title.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/static/tutorial-assets/booking-reminder-customer-subject.txt#2025-04-18_snippet_0\n\nLANGUAGE: handlebars\nCODE:\n```\n{{set-translations (asset \"email/translations.json\")}}{{t \"BookingReminder.Subject\" \"Your booking for {listingTitle} is approaching!\" listingTitle=transaction.listing.title }}\n```\n\n----------------------------------------\n\nTITLE: Including Seat Selection in EditListingAvailabilityExceptionForm in React\nDESCRIPTION: Adds the seat selection component to the EditListingAvailabilityExceptionForm.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-listing/seats/index.md#2025-04-18_snippet_14\n\nLANGUAGE: diff\nCODE:\n```\n…\n          timeZone={timeZone}\n          values={values}\n        />\n      )}\n+     {seatsSelectionMaybe}\n    </div>\n    <div className={css.submitButton}>\n…\n```\n\n----------------------------------------\n\nTITLE: Adding Seat Input to TimeRangeSelects Component in React\nDESCRIPTION: This snippet shows how to add a numeric input field for seats to the TimeRangeSelects component.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-listing/seats/index.md#2025-04-18_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<FieldTextInput\n  id={`${name}.seats`}\n  name={`${name}.seats`}\n  className={css.fieldSelect}\n  type=\"number\"\n  min=\"1\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Updating IdP Client ID Resolution in Sharetribe Backend\nDESCRIPTION: This snippet updates the logic for resolving the IdP client ID to include the Github proxy in the Sharetribe backend.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-users-and-authentication/setup-oidc-proxy/index.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst idpClientId =\n  idpId === FACEBOOK_IDP_ID\n    ? FACBOOK_APP_ID\n    : idpId === GOOGLE_IDP_ID\n    ? GOOGLE_CLIENT_ID\n    : idpId === GITHUB_PROXY_IDP_ID\n    ? GITHUB_PROXY_CLIENT_ID\n    : null;\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Attribute Properties in Sharetribe Web Template\nDESCRIPTION: Shows the minimum required properties for defining an extended data attribute in the configListing.js file, including key, scope, schemaType, and enumOptions for multi-enum types.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-listing/extend-listing-data-in-ftw/index.md#2025-04-18_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nkey: 'accessories',\nscope: 'public',\nschemaType: 'multi-enum',\nenumOptions: [\n  { option: 'bell', label: 'Bell' },\n  { option: 'lights', label: 'Lights' },\n  { option: 'lock', label: 'Lock' },\n  { option: 'mudguard', label: 'Mudguard' },\n],\n// If you have multiple listing types, you can define the types that should have this field\n// includeForListingTypes: [...],\n```\n\n----------------------------------------\n\nTITLE: Sending Transaction Message\nDESCRIPTION: SDK call to send an initial message for the transaction.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-payments/how-saving-payment-card-works-in-ftw/index.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nsdk.messages.send({ transactionId: orderId, content: message });\n```\n\n----------------------------------------\n\nTITLE: Using formatMessage with React Intl\nDESCRIPTION: Shows how to use the formatMessage function with injectIntl to access translations in a React component.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-content/how-to-change-ftw-bundled-ui-microcopy/index.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { injectIntl } from 'react-intl';\n\nconst SomeComponent = props => {\n  const { intl } = props;\n\n  const translation = intl.formatMessage({\n    id: 'SomeComponent.someKey',\n  });\n\n  // ...\n};\n\nexport default injectIntl(SomeComponent);\n```\n\n----------------------------------------\n\nTITLE: Styling a Static Page with CSS Modules\nDESCRIPTION: This CSS snippet shows how to style the newly created static page using CSS Modules. It includes custom media queries import and styles for content and links.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-content/how-to-add-static-pages-in-ftw/index.md#2025-04-18_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n/**\n * Import custom media queries for the new page.\n * The template uses route-based code-splitting, every page create their own CSS files.\n * This import ensures that the page and components inside will get correct media queries,\n * when the app is build.\n */\n@import '../../styles/customMediaQueries.css';\n\n.content {\n  margin: 0 auto;\n  max-width: 784px;\n}\n\n.link {\n  display: block;\n  margin-top: 6px;\n  margin-bottom: 6px;\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting updateLikes to mapDispatchToProps in ListingPage\nDESCRIPTION: This diff snippet shows how to connect the 'updateLikes' action to the mapDispatchToProps function in the ListingPage component.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-events/like-feature/index.md#2025-04-18_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\nconst mapDispatchToProps = dispatch => ({\n  onManageDisableScrolling: (componentId, disableScrolling) =>\n    dispatch(manageDisableScrolling(componentId, disableScrolling)),\n+  onUpdateLikes: (listingId) => dispatch(updateLikes(listingId)),\n  callSetInitialValues: (setInitialValues, values, saveToSessionStorage) =>\n    dispatch(setInitialValues(values, saveToSessionStorage)),\n  onFetchTransactionLineItems: (bookingData, listingId, isOwnListing) =>\n```\n\n----------------------------------------\n\nTITLE: Configuring Route with Initial Values in JavaScript\nDESCRIPTION: Demonstrates how to configure a route with a setInitialValues function for passing data between pages.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-routing/how-routing-works-in-ftw/index.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  path: '/l/:slug/:id/checkout',\n  name: 'CheckoutPage',\n  auth: true,\n  component: CheckoutPage,\n  setInitialValues: pageDataLoadingAPI.CheckoutPage.setInitialValues,\n},\n```\n\n----------------------------------------\n\nTITLE: Adding Insurance Fee Line Item in JavaScript\nDESCRIPTION: This snippet updates the transactionLineItems function to include an insurance fee line item if the listing has an insurance fee configured.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-payments/customize-pricing/index.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst insuranceFeePrice = resolveInsuranceFeePrice(listing);\nconst insuranceFeeLineItem = insuranceFeePrice\n  ? [\n      {\n        code: 'line-item/insurance-fee',\n        unitPrice: insuranceFeePrice,\n        quantity: 1,\n        includeFor: ['customer', 'provider'],\n      },\n    ]\n  : [];\n\n  // Provider commission reduces the amount of money that is paid out to provider.\n  // Therefore, the provider commission line-item should have negative effect to the payout total.\n  const getNegation = percentage => {\n    return -1 * percentage;\n  };\n\n  // Note: extraLineItems for product selling (aka shipping fee)\n  // is not included in either customer or provider commission calculation.\n\n  ...\n\n  // Let's keep the base price (order) as first line item and provider and customer commissions as last.\n  // Note: the order matters only if OrderBreakdown component doesn't recognize line-item.\n  const lineItems = [\n    order,\n    ...extraLineItems,\n    ...insuranceFeeLineItem,\n    ...providerCommissionMaybe,\n    ...customerCommissionMaybe,\n  ];\n```\n\n----------------------------------------\n\nTITLE: Default Section Components Definition in React\nDESCRIPTION: Defines the mapping between section types and their corresponding React components for articles, carousel, columns, and features sections.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-content/page-builder/index.md#2025-04-18_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nconst defaultSectionComponents = {\n  article: { component: SectionArticle },\n  carousel: { component: SectionCarousel },\n  columns: { component: SectionColumns },\n  features: { component: SectionFeatures },\n};\n```\n\n----------------------------------------\n\nTITLE: Changing Marketplace Currency\nDESCRIPTION: Diff showing how to change the marketplace currency from USD to EUR in the configDefault.js file.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/tutorial-branding/configuration/index.md#2025-04-18_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n  // Marketplace currency.\n  // The currency used in the Marketplace must be in ISO 4217 currency code. For example USD, EUR, CAD, AUD, etc. The default value is USD.\n  // It should match one of the currencies listed in currencySettings.js\n- currency: 'USD',\n+ currency: 'EUR',\n```\n\n----------------------------------------\n\nTITLE: Updating BookingTimeForm to Include Seats in OrderData\nDESCRIPTION: Modifies the handleOnChange function in BookingTimeForm to extract the seats value from form data and include it in the orderData sent to the line items calculation function.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-listing/seats/index.md#2025-04-18_snippet_31\n\nLANGUAGE: diff\nCODE:\n```\n  handleOnChange(formValues) {\n-   const { bookingStartTime, bookingEndTime } = formValues.values;\n+   const { bookingStartTime, bookingEndTime, seats } = formValues.values;\n    const startDate = bookingStartTime ? timestampToDate(bookingStartTime) : null;\n    const endDate = bookingEndTime ? timestampToDate(bookingEndTime) : null;\n\n    const listingId = this.props.listingId;\n    const isOwnListing = this.props.isOwnListing;\n\n    // We expect values bookingStartTime and bookingEndTime to be strings\n    // which is the default case when the value has been selected through the form\n    const isSameTime = bookingStartTime === bookingEndTime;\n\n    if (bookingStartTime && bookingEndTime && !isSameTime && !this.props.fetchLineItemsInProgress) {\n      this.props.onFetchTransactionLineItems({\n-       orderData: { bookingStart: startDate, bookingEnd: endDate },\n+       orderData: { bookingStart: startDate, bookingEnd: endDate, seats: parseInt(seats, 10) },\n        listingId,\n        isOwnListing,\n      });\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Accessing Currency in React Component\nDESCRIPTION: JavaScript code snippet showing how to access the currency value from the imported configuration in a React component.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/tutorial-branding/configuration/index.md#2025-04-18_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nconst currency = config.currency;\n```\n\n----------------------------------------\n\nTITLE: Declaring Service History Tab in EditListingWizardTab.js\nDESCRIPTION: Adds a new 'SERVICE_HISTORY' tab to the list of supported tabs in the EditListingWizardTab component.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-listing/extend-listing-data-in-ftw/index.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport const DETAILS = 'details';\nexport const PRICING = 'pricing';\nexport const PRICING_AND_STOCK = 'pricing-and-stock';\nexport const SERVICE_HISTORY = 'service-history';\nexport const DELIVERY = 'delivery';\nexport const LOCATION = 'location';\nexport const AVAILABILITY = 'availability';\nexport const PHOTOS = 'photos';\n\n// EditListingWizardTab component supports these tabs\nexport const SUPPORTED_TABS = [\n  DETAILS,\n  PRICING,\n  PRICING_AND_STOCK,\n  SERVICE_HISTORY,\n  DELIVERY,\n  LOCATION,\n  AVAILABILITY,\n  PHOTOS,\n];\n```\n\n----------------------------------------\n\nTITLE: Updating saveException Function for Seat Handling in React\nDESCRIPTION: Modifies the saveException function in EditListingAvailabilityPanel to handle and save seat information for exceptions.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-listing/seats/index.md#2025-04-18_snippet_15\n\nLANGUAGE: js\nCODE:\n```\n  // Save exception click handler\n  const saveException = values => {\n    const {\n      availability,\n      exceptionStartTime,\n      exceptionEndTime,\n      exceptionRange,\n      seats: rawSeats,\n    } = values;\n\n    const seats = availability === 'available' ? rawSeats : 0;\n...\n```\n\n----------------------------------------\n\nTITLE: Adding onClick Event Handler for Like Icon\nDESCRIPTION: This diff snippet demonstrates how to add an onClick event handler to the heart icon in the SectionLikes component to trigger the like/unlike action.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-events/like-feature/index.md#2025-04-18_snippet_11\n\nLANGUAGE: diff\nCODE:\n```\n<span className={css.heartIcon}\n+ onClick={() => {\n+   if (!updateLikesInProgress && currentUser) {\n+     onUpdateLikes(listingId);\n+    }\n+  }}>\n```\n\n----------------------------------------\n\nTITLE: Getting Section Component in JavaScript\nDESCRIPTION: Shows how the appropriate section component is selected based on section type using the getComponent function.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-content/page-builder/index.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst Section = getComponent(section.sectionType);\n```\n\n----------------------------------------\n\nTITLE: Configuring CDN Assets for Translation in Sharetribe Web Template\nDESCRIPTION: Configuration snippet from configDefault.js that specifies the path to hosted marketplace texts as part of the app-wide configuration, indicating where translation assets are stored.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-content/hosted-microcopy/index.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// CDN assets for the app. Configurable through Sharetribe Console.\n// Currently, only translation.json is available.\nconst appCdnAssets = {\n  translations: 'content/translations.json',\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Media Queries Definition\nDESCRIPTION: Defines breakpoints for responsive layouts using custom media queries.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-styling/how-to-customize-ftw-styles/index.md#2025-04-18_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n@custom-media --viewportSmall (min-width: 550px);\n@custom-media --viewportMedium (min-width: 768px);\n@custom-media --viewportLarge (min-width: 1024px);\n// etc.\n```\n\n----------------------------------------\n\nTITLE: Defining Block Overrides\nDESCRIPTION: Creates an object to override a specific block component with a custom implementation.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-content/options-prop/index.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst blockOverrides = {\n  ['defaultBlock']: { component: CustomBlock },\n};\n```\n\n----------------------------------------\n\nTITLE: Flat Public Data Structure Example (Indexed)\nDESCRIPTION: Example showing the correct way to structure public data with flat, top-level attributes that can be indexed for search.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-search/change-search-filters-in-ftw/index.md#2025-04-18_snippet_1\n\nLANGUAGE: js\nCODE:\n```\npublicData: {\n  // These attributes can be indexed for search in Sharetribe\n  violinProficiency: 'professional',\n  guitarProficiency: 'intermediate',\n  tubaProficiency: 'beginner',\n}\n```\n\n----------------------------------------\n\nTITLE: Integration API Event Data Format Example\nDESCRIPTION: Example of an event in Integration API format demonstrating the structured resource format with type definitions and relationships.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/references/events/index.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"ef98e897-5b81-49a5-aca6-01d9759df075\",\n  \"type\": \"event\",\n  \"attributes\": {\n    \"resource\": {\n      \"id\": \"5bbb2f6f-568f-470a-9949-a655e3f6ac46\",\n      \"type\": \"listing\",\n      \"attributes\": {\n        \"title\": \"Listing title\"\n      },\n      \"relationships\": {\n        \"author\": {\"data\": {\"id\": \"5cf4c0eb-513f-419b-a8be-bdb6c14be10a\", \"type\": \"user\"}}\n      }\n    },\n    \"previousValues\": {\n      \"attributes\": {\n        \"title\": \"old title\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Email Template with Handlebars in HTML\nDESCRIPTION: This snippet sets up the basic structure of the email template using HTML and Handlebars. It includes meta tags, language settings, and imports necessary assets for translations and localization.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/static/tutorial-assets/booking-reminder-customer-html.txt#2025-04-18_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!DOCTYPE html\n  PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html lang=\"en\">\n  {{set-translations (asset \"email/translations.json\")}}\n  {{set-locale (asset \"general/localization.json\" \"locale\" \"en_US\")}}\n  {{set-timezone transaction.listing.availability-plan.timezone}}\n  <head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html charset=UTF-8\" />\n  </head>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Start/End Hour Handling\nDESCRIPTION: Updates the time boundary calculation to handle different durations for first and subsequent slots, with separate logic for start and end times.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-listing/time-slots/index.md#2025-04-18_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\nexport const findNextBoundary = (\n  currentDate,\n  unitCount,\n  timeUnit,\n  timeZone,\n- isFirst = false\n+ isFirst = false,\n+ isStart = false,\n) => {\n  ...\n  } else if (timeUnit === 'hour') {\n    // Add separate handling for the first timeslot so that bookings can start\n    // from the beginning of the available time slot\n+   // Use the default booking length for non-first slots\n+   // Use the first booking length for first end boundary\n+   // Use 0 for first start boundary\n-   const increment = isFirst ? 0 : timeSlotMinutes;\n+   const increment = !isFirst\n+     ? timeSlotMinutes\n+     : !isStart\n+     ? firstSlotMinutes\n+     : 0;\n+\n    // Revert the millisecondBeforeStartTime change if increment is 0, so that the rounding\n    // works correctly\n    const date = isFirst ? new Date(currentDate.getTime() + 1) : currentDate;\n    ...\n```\n\n----------------------------------------\n\nTITLE: Adding Auckland as a Default Location in JavaScript\nDESCRIPTION: Shows how to add Auckland, New Zealand as a default location in the configDefaultLocationSearches.js file. It includes the location's id, address, and custom bounding box coordinates.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/tutorial-branding/change-default-locations/index.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  id: 'default-auckland',\n  predictionPlace: {\n    address: 'Auckland, New Zealand',\n    bounds: new LatLngBounds(new LatLng(-36.545, 175.298), new LatLng(-37.047,174.498)),\n  },\n},\n```\n\n----------------------------------------\n\nTITLE: Listing Marketplace Processes with Sharetribe CLI\nDESCRIPTION: Command to list all processes of a marketplace using Sharetribe CLI. This helps in identifying the correct process and version for editing.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-messaging/edit-email-templates-with-flex-cli/index.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflex-cli process list -m my-marketplace-dev\n```\n\n----------------------------------------\n\nTITLE: Updating Helper Function for Privileged Transitions in JavaScript\nDESCRIPTION: This code snippet shows how to update a helper function that identifies privileged transitions in a transaction process. It checks if a given transition is included in an array of privileged transition types.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-transaction-process/change-transaction-process-in-ftw/index.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport const isPrivileged = transition => {\n  return [\n    transitions.REQUEST_PAYMENT,\n    transitions.REQUEST_PAYMENT_AFTER_INQUIRY,\n  ].includes(transition);\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Google Maps API Key in .env File\nDESCRIPTION: Example of adding the Google Maps API key to the .env file for local development. This environment variable is used by the template to authorize Google Maps API requests.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-search/how-to-use-google-maps-in-ftw/index.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nREACT_APP_GOOGLE_MAPS_API_KEY=my-key-here\n```\n\n----------------------------------------\n\nTITLE: Adding DeleteUserAccount Endpoint\nDESCRIPTION: Demonstrates how to add the deleteUserAccount endpoint to the client-side API file.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-users-and-authentication/implement-delete-user/index.md#2025-04-18_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// Check if user can be deleted and then delete the user. Endpoint logic\n// must be modified to accommodate the transaction processes used in\n// the marketplace.\nexport const deleteUserAccount = body => {\n  return post('/api/delete-account', body);\n};\n```\n\n----------------------------------------\n\nTITLE: Pulling Existing Process\nDESCRIPTION: CLI command to fetch the current version of a transaction process\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/tutorial-transaction-process/create-transaction-process/index.md#2025-04-18_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nflex-cli process pull --process=biketribe-instant-booking --alias=release-1 --path=./biketribe-instant-booking --marketplace=biketribe-dev\n```\n\n----------------------------------------\n\nTITLE: Adding Email Text Content in JSON\nDESCRIPTION: JSON configuration for email template text content to be added in the Console\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/tutorial-transaction-process/add-email-notification/index.md#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"BookingReminder.ContactProvider\": \"If you have questions about your booking, you can contact {providerDisplayName} through the order page.\",\n  \"BookingReminder.ContentForDaily\": \"You have booked {listingTitle} {dateStart,date,::YYYYMMMd} to {dateEnd,date,::YYYYMMMd}.\",\n  \"BookingReminder.ContentForHourly\": \"You have booked {listingTitle} from {dateStart,date,::hmmaYYYYMMMd} to {dateEnd,date,::hmmaYYYYMMMd}.\",\n  \"BookingReminder.ContentForNightly\": \"You have booked {listingTitle} from {dateStart,date,::YYYYMMMd} to {dateEnd,date,::YYYYMMMd}.\",\n  \"BookingReminder.Cta\": \"View order details\",\n  \"BookingReminder.Subject\": \"Your booking for {listingTitle} is approaching!\",\n  \"BookingReminder.Title\": \"Your booking for {listingTitle} is approaching!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Translation Helper in Handlebars\nDESCRIPTION: Example of using the 't' helper to handle translations and parameter substitution in email templates using ICU message format.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/references/email-templates/index.md#2025-04-18_snippet_0\n\nLANGUAGE: handlebars\nCODE:\n```\n{{t \"BookingNewRequest.Description\" \"{customerDisplayName} requested to book {listingTitle} in {marketplaceName}.\" customerDisplayName=customer.display-name listingTitle=listing.title marketplaceName=marketplace.name}}\n```\n\n----------------------------------------\n\nTITLE: Renaming Git Remote Origin to Upstream\nDESCRIPTION: Command to rename the original remote repository from 'origin' to 'upstream'\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/tutorial/introduction/index.md#2025-04-18_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit remote rename origin upstream\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Locations in JavaScript\nDESCRIPTION: Demonstrates the structure of the defaultLocations array in the configDefaultLocationSearches.js file. Each location is represented by an object with an id, address, and bounding box coordinates.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/tutorial-branding/change-default-locations/index.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst defaultLocations = [\n  // {\n  //   id: 'default-helsinki',\n  //   predictionPlace: {\n  //     address: 'Helsinki, Finland',\n  //     bounds: new LatLngBounds(new LatLng(60.29783, 25.25448), new LatLng(59.92248, 24.78287)),\n  //   },\n  // },\n  // ...\n  // ** the rest of the default locations **\n];\n\nexport default defaultLocations;\n```\n\n----------------------------------------\n\nTITLE: Defining currentLikes in SectionLikes Component\nDESCRIPTION: This snippet shows how to define the currentLikes variable in the SectionLikes component, which retrieves the liked listings from the user's private data.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-events/like-feature/index.md#2025-04-18_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nconst currentLikes =\n  currentUser?.attributes?.profile?.privateData?.likedListings;\n```\n\n----------------------------------------\n\nTITLE: Configuring Save Settings for User Attribute in JavaScript\nDESCRIPTION: Illustrates how to configure the save settings for a user attribute, including label, display options, and required status.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-users-and-authentication/extend-user-data-in-template/index.md#2025-04-18_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n  saveConfig: {\n    label: 'Do you offer other services besides bike rentals?',\n    displayInSignUp: true,\n    isRequired: true,\n    placeholderMessage: 'Select...',\n  },\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Date Range Function\nDESCRIPTION: Implements a custom isOutsideRange function for the FieldDateInput component to allow selection of past dates.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-listing/extend-listing-data-in-ftw/index.md#2025-04-18_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { isInclusivelyBeforeDay } from 'react-dates';\n...\n/**\n * Determines a custom isOutsideRange function for FieldDateInput\n * that shows past dates\n */\nexport const futureIsOutsideRange = day => {\n  return !isInclusivelyBeforeDay(day, moment());\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Template Content with Handlebars in Sharetribe\nDESCRIPTION: Example of using the Handlebars template language with the 't' helper to render email notification content. The helper supports message keys and fallback messages with variable interpolation.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/concepts-messages/email-notifications/index.md#2025-04-18_snippet_0\n\nLANGUAGE: handlebars\nCODE:\n```\n{{t \"ResetPassword.MembershipParagraph\" \"You have received this email notification\\nbecause you are a member of {marketplaceName}. If you no longer wish to receive\\nthese emails, please contact {marketplaceName} team.\" marketplaceName=marketplace.name}}\n```\n\n----------------------------------------\n\nTITLE: Initiating Payment Transaction\nDESCRIPTION: Basic SDK call to initiate a payment transaction with required process alias and transition parameters.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-payments/how-saving-payment-card-works-in-ftw/index.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsdk.transactions\n  .initiate({ processAlias, transition: 'transition/request-payment', ...})\n```\n\n----------------------------------------\n\nTITLE: Updating getSharpHours Function in JSX\nDESCRIPTION: Modifies the getSharpHours function to use findNextCustomBoundary, pass isStart and isFirst parameters, and adjust the time unit from hours to minutes.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-listing/bookings-with-buffer/index.md#2025-04-18_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n- export const getSharpHours = (startTime, endTime, timeZone, intl) => {\n+ export const getSharpHours = (startTime, endTime, timeZone, intl, isStart = false) => {\n    if (!moment.tz.zone(timeZone)) {\n      throw new Error(\n        'Time zones are not loaded into moment-timezone. \"getSharpHours\" function uses time zones.'\n      );\n    }\n+   const isFirst = true;\n+\n    // Select a moment before startTime to find next possible sharp hour.\n    // I.e. startTime might be a sharp hour.\n    const millisecondBeforeStartTime = new Date(startTime.getTime() - 1);\n    return findBookingUnitBoundaries({\n-     currentBoundary: findNextBoundary(millisecondBeforeStartTime, 'hour', timeZone),\n+     currentBoundary: findNextCustomBoundary(startTime, 'minute', timeZone, isFirst, isStart),\n      startMoment: moment(startTime),\n      endMoment: moment(endTime),\n-     nextBoundaryFn: findNextBoundary,\n+     nextBoundaryFn: findNextCustomBoundary,\n      cumulatedResults: [],\n      intl,\n      timeZone,\n-     timeUnit: 'hour',\n+     isStart,\n+     timeUnit: 'minutes',\n    });\n  };\n```\n\n----------------------------------------\n\nTITLE: Transaction Process Update - Shell Commands\nDESCRIPTION: CLI commands for pulling, updating, and pushing transaction process changes in Sharetribe Flex.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/tutorial-transaction-process/use-protected-data-in-emails/index.md#2025-04-18_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nflex-cli process pull --process=biketribe-instant-booking --alias=release-1 --path=./biketribe-instant-booking --marketplace=biketribe-dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Locale for Performance in Sharetribe Web Template (JavaScript)\nDESCRIPTION: This snippet demonstrates how to configure the locale for improved performance in the Sharetribe Web Template. It sets a hardcoded locale based on the environment.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-content/change-ftw-language/index.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport 'moment/locale/it';\nconst hardCodedLocale = process.env.NODE_ENV === 'test' ? 'en' : 'it';\n```\n\n----------------------------------------\n\nTITLE: Applying CSS Classes in React Components\nDESCRIPTION: JSX code demonstrating how to assign CSS module classes to React components using the className prop.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/tutorial-branding/first-edit/index.md#2025-04-18_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nclassName={css.root}\n```\n\n----------------------------------------\n\nTITLE: Example Asset Structure in Sharetribe Flex\nDESCRIPTION: This snippet demonstrates the typical structure of assets in a Sharetribe Flex marketplace, showing how assets are organized in a directory-like structure with JSON files for branding and translations.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/references/assets/index.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n├── content\n│   └── translations.json\n└── design\n    └── branding.json\n```\n\n----------------------------------------\n\nTITLE: Form URL Encoding with Handlebars Helper\nDESCRIPTION: Example of using the form-encode helper to encode strings for query parameters in email templates\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/references/email-templates/index.md#2025-04-18_snippet_5\n\nLANGUAGE: handlebars\nCODE:\n```\n{{form-encode \"Share & Tribe\"}}\n```\n\n----------------------------------------\n\nTITLE: Modifying SectionArticle Component to Use Custom CSS\nDESCRIPTION: Updates the SectionArticle component to use the custom CSS classes for title and ingress, replacing the default centered styling.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-content/options-prop/index.md#2025-04-18_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n <SectionContainer\n     id={sectionId}\n     className={className}\n     rootClassName={rootClassName}\n     background={background}\n     options={fieldOptions}\n   >\n     {hasHeaderFields ? (\n       <header className={defaultClasses.sectionDetails}>\n-        <Field data={title} className={defaultClasses.title} options={fieldOptions} />\n+        <Field data={title} className={css.title} options={fieldOptions} />\n-        <Field data={ingress} className={defaultClasses.ingress} options={fieldOptions} />\n+        <Field data={ingress} className={css.ingress} options={fieldOptions} />\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Time Slot Duration\nDESCRIPTION: Sets the booking length constant in minutes for custom time intervals.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-listing/time-slots/index.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst timeSlotMinutes = 30;\n```\n\n----------------------------------------\n\nTITLE: Adding Helmet Fee Input to EditListingPricingForm\nDESCRIPTION: Adds a new FieldCurrencyInput component for helmet fee input with optional validation.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/tutorial-transaction-process/customize-pricing/index.md#2025-04-18_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n <FieldCurrencyInput\n  id={`${formId}price`}\n  name=\"price\"\n  className={css.input}\n  autoFocus={autoFocus}\n  label={intl.formatMessage(\n    { id: 'EditListingPricingForm.pricePerProduct' },\n    { unitType }\n  )}\n  placeholder={intl.formatMessage({ id: 'EditListingPricingForm.priceInputPlaceholder' })}\n  currencyConfig={appSettings.getCurrencyFormatting(marketplaceCurrency)}\n  validate={priceValidators}\n/>\n// Additional currency input\n+ <FieldCurrencyInput\n+   id={`${formId}helmetFee`}\n+   name=\"helmetFee\"\n+   className={css.input}\n+   autoFocus={autoFocus}\n+   label={intl.formatMessage(\n+     { id: 'EditListingPricingForm.helmetFee' },\n+     { unitType }\n+   )}\n+   placeholder={intl.formatMessage({ id: 'EditListingPricingForm.helmetFeePlaceholder' })}\n+   currencyConfig={appSettings.getCurrencyFormatting(marketplaceCurrency)}\n+ />\n```\n\n----------------------------------------\n\nTITLE: CSS Module Import in React Component\nDESCRIPTION: JavaScript code showing how to import CSS modules into a React component file.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/tutorial-branding/first-edit/index.md#2025-04-18_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport css from './SectionContainer.module.css';\n```\n\n----------------------------------------\n\nTITLE: Add ExtraFeatures Panel to Switch Statement\nDESCRIPTION: Switch case implementation for rendering the ExtraFeatures panel\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/tutorial-listings/new-wizard-tab/index.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ncase PHOTOS: {\n  return (\n    <EditListingPhotosPanel\n      {...panelProps(PHOTOS)}\n      listingImageConfig={config.layout.listingImage}\n      images={images}\n      onImageUpload={onImageUpload}\n      onRemoveImage={onRemoveImage}\n    />\n  );\n}\ncase EXTRAFEATURES: {\n  return (\n    <EditListingExtraFeaturesPanel\n      {...panelProps(EXTRAFEATURES)}\n    />\n  );\n}\ndefault:\n  return null;\n```\n\n----------------------------------------\n\nTITLE: Creating Conditional Seats Selection Component in FieldDateRangeInput\nDESCRIPTION: Implements a conditional component to display seat selection only when more than one seat is available, generating options from the provided seats array.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-listing/seats/index.md#2025-04-18_snippet_26\n\nLANGUAGE: jsx\nCODE:\n```\nconst seatsSelectionMaybe =\n  seatsArray?.length > 1 ? (\n    <FieldSelect name=\"seats\" id=\"seats\" label={seatsLabel}>\n      {seatsArray.map(s => (\n        <option value={s} key={s}>\n          {s}\n        </option>\n      ))}\n    </FieldSelect>\n  ) : null;\n```\n\n----------------------------------------\n\nTITLE: Updating Existing Payment Method\nDESCRIPTION: SDK calls to update payment method for existing Stripe customer by first deleting existing method and then adding new one.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-payments/how-saving-payment-card-works-in-ftw/index.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n=> sdk.stripeCustomer.deletePaymentMethod({}, { expand: true })\n=> sdk.stripeCustomer.addPaymentMethod({ stripePaymentMethodId }, { expand: true })\n```\n\n----------------------------------------\n\nTITLE: Color Scheme Definition\nDESCRIPTION: Defines the color scheme using CSS custom properties in marketplaceDefaults.css.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-styling/how-to-customize-ftw-styles/index.md#2025-04-18_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n/* ================ Colors ================ */\n\n--colorSuccess: #2ecc71;\n--colorSuccessDark: #239954;\n--colorSuccessLight: #f0fff6;\n--colorFail: #ff0000;\n--colorFailLight: #fff0f0;\n--colorAttention: #ffaa00;\n--colorAttentionLight: #fff7f0;\n--colorBannedLight: var(--marketplaceColorLight);\n--colorBannedDark: var(--marketplaceColor);\n```\n\n----------------------------------------\n\nTITLE: Importing FieldSelect Component in FieldDateRangeInput\nDESCRIPTION: Adds the import for the FieldSelect component that will be used to create the seat selection dropdown.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-listing/seats/index.md#2025-04-18_snippet_24\n\nLANGUAGE: js\nCODE:\n```\nimport { FieldSelect, ValidationError } from '../../components';\n```\n\n----------------------------------------\n\nTITLE: Updating File Structure for InboxPage and TransactionPage\nDESCRIPTION: Shows the file structure for updating InboxPage and TransactionPage state data files.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/tutorial-transaction-process/create-transaction-process/index.md#2025-04-18_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n└── src\n    └── containers\n        └── InboxPage\n            └── InboxPage.stateData.js\n        └── TransactionPage\n            └── TransactionPage.stateData.js\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Time Slot Durations\nDESCRIPTION: Sets up constants for different time slot durations and calculates the greatest common factor for rounding.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-listing/time-slots/index.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst timeSlotMinutes = 30;\nconst firstSlotMinutes = 75;\n\n/**\n * Define the rounding value.\n * If the first time slot is shorter than general time slot,\n * swap the parameters around so that the first parameter is the shorter one\n */\nconst rounding = gcf(timeSlotMinutes, firstSlotMinutes);\n```\n\n----------------------------------------\n\nTITLE: Updating Line Item Calculation in lineItems.js\nDESCRIPTION: Modifies the line item calculation to use the display end time for price calculation.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-listing/bookings-with-buffer/index.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst getHourQuantityAndLineItems = orderData => {\n const { bookingStart, bookingEnd, bookingDisplayEnd } = orderData || {};\n const end = bookingDisplayEnd ?? bookingEnd;\n  const quantity =\n   bookingStart && end ? calculateQuantityFromHours(bookingStart, end) : null;\n\n  return { quantity, extraLineItems: [] };\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Transaction Line Items with Helmet Fee\nDESCRIPTION: Diff showing modifications to add helmet rental fee to transaction line items and include it in provider commission calculations.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/tutorial-transaction-process/customize-pricing/index.md#2025-04-18_snippet_11\n\nLANGUAGE: diff\nCODE:\n```\nexports.transactionLineItems = (listing, orderData) => {\n...\n\n  const order = {\n    code,\n    unitPrice,\n    quantity,\n    includeFor: ['customer', 'provider'],\n  };\n\n+ const helmetFeePrice = orderData.hasHelmetFee ? resolveHelmetFeePrice(listing) : null;\n+ const helmetFee = helmetFeePrice\n+   ? [\n+       {\n+         code: 'line-item/helmet-rental-fee',\n+         unitPrice: helmetFeePrice,\n+         quantity: 1,\n+         includeFor: ['customer', 'provider'],\n+       },\n+     ]\n+   : [];\n+\n\n  const getNegation = percentage => {\n    return -1 * percentage;\n  };\n\n  const providerCommissionMaybe = hasCommissionPercentage(providerCommission)\n    ? [\n        {\n          code: 'line-item/provider-commission',\n-         unitPrice: calculateTotalFromLineItems([order]),\n+         unitPrice: calculateTotalFromLineItems([order, ...helmetFee]),\n          percentage: getNegation(providerCommission.percentage),\n          includeFor: ['provider'],\n        },\n      ]\n    : [];\n\n- const lineItems = [order, ...extraLineItems, ...providerCommissionMaybe];\n+ const lineItems = [order, ...extraLineItems, ...helmetFee, ...providerCommissionMaybe];\n\n\n  return lineItems;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Percentage-based Pricing in Sharetribe\nDESCRIPTION: Example of defining line items using unitPrice and percentage parameters to calculate commissions and discounts as percentages of a subtotal.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/concepts-pricing-and-commissions/pricing/index.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n| code                            | unitPrice               | percentage | lineTotal               | includeFor               |\n| :------------------------------ | :---------------------- | :--------- | :---------------------- | :----------------------- |\n| \"line-item/coupon-discount\"     | new Money(50000, \"USD\") | -15        | new Money(-7500, \"USD\") | [\"customer\", \"provider\"] |\n| \"line-item/customer-commission\" | new Money(50000, \"USD\") | 15         | new Money(7500, \"USD\")  | [\"customer\"]             |\n| \"line-item/provider-commission\" | new Money(50000, \"USD\") | -15        | new Money(-7500, \"USD\") | [\"provider\"]             |\n```\n\n----------------------------------------\n\nTITLE: Updating Subject Lines for Built-in Notifications\nDESCRIPTION: This snippet shows how to update subject line files for built-in notifications to use the {{t}} translation helper. It includes setting translations and replacing the existing syntax with the new helper function.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-content/use-translations-in-emails/index.md#2025-04-18_snippet_6\n\nLANGUAGE: handlebars\nCODE:\n```\n## original message\nWelcome to {{marketplace.name}}\n\n## becomes\n## {{set-translations (asset \"content/email-texts.json\")}}\n## {{t \"templatename.messagekey\" \"fallbackmessage\" variableName1=variableValue1 variableName2=variableValue2...}}\n\n{{set-translations (asset \"content/email-texts.json\")}}{{t \"UserJoined.Subject\" \"Welcome to {marketplaceName}\" marketplaceName=marketplace.name}}\n```\n\n----------------------------------------\n\nTITLE: Modifying Email Template Button Color\nDESCRIPTION: This diff snippet demonstrates how to change the background color of the 'Accept or Decline the booking' button in the email template from #007DF2 to #7C3AED.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-messaging/edit-email-templates-with-flex-cli/index.md#2025-04-18_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n  <a\n    href=\"{{marketplace.url}}/sale/{{url-encode id}}/\"\n    target=\"_blank\"\n    style=\"color:#FFF;background-color:#007DF2;border-radius:4px;font-size:15px;\n    text-decoration:none;text-align:center;display:inline-block;min-width:210px;padding:0px 0px;\n    line-height:100%;max-width:100%\"\n  >\n    <span>\n      <!--[if mso]>\n        <i style=\"letter-spacing: undefinedpx;mso-font-width:-100%;mso-text-raise:0\" hidden>&nbsp;</i>\n      <![endif]-->\n    </span>\n    <span\n-     style=\"color:#FFF;background-color:#007DF2;border-radius:4px;font-size:15px;\n+     style=\"color:#FFF;background-color:#7C3AED;border-radius:4px;font-size:15px;\n      text-decoration:none;text-align:center;display:inline-block;min-width:210px;\n      padding:16px 32px;max-width:100%;line-height:120%;text-transform:none;mso-padding-alt:0px;\n      mso-text-raise:0\"\n    >\n      {{t \"BookingNewRequest.AcceptOrDeclineLink\" \"Accept or Decline the booking\"}}\n    </span>\n    <span>\n      <!--[if mso]>\n        <i style=\"letter-spacing: undefinedpx;mso-font-width:-100%\" hidden>&nbsp;</i>\n      <![endif]-->\n    </span>\n  </a>\n```\n\n----------------------------------------\n\nTITLE: Updated Background Color CSS\nDESCRIPTION: CSS code showing how to apply the custom pastel pink color to odd-numbered sections.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/tutorial-branding/first-edit/index.md#2025-04-18_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n  &:nth-of-type(odd) {\n    background-color: var(--colorPastelPink);\n  }\n```\n\n----------------------------------------\n\nTITLE: User-Level Permissions in CurrentUser Resource\nDESCRIPTION: Shows how individual user permissions are stored in the currentUser resource attributes, including read, transaction, and listing permissions.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/concepts-users-and-authentication/user-permissions/index.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n        \"~:type\": \"~:currentUser\",\n        \"~:attributes\": {\n            \"~:deleted\": false,\n            \"~:banned\": false,\n            \"~:email\": \"pending-approval@example.com\",\n            \"~:permissions\": {\n                \"~:read\": \"~:permission/allow\",\n                \"~:initiateTransactions\": \"~:permission/deny\",\n                \"~:postListings\": \"~:permission/deny\"\n            },\n            \"~:stripeConnected\": false,\n            \"~:stripePayoutsEnabled\": false,\n```\n\n----------------------------------------\n\nTITLE: Importing Custom SectionArticleAlignLeft Component\nDESCRIPTION: Imports the newly created SectionArticleAlignLeft component in the LandingPage.js file for use with the options prop.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-content/options-prop/index.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport SectionArticleAlignLeft from '../../containers/PageBuilder/SectionBuilder/SectionArticleAlignLeft';\n```\n\n----------------------------------------\n\nTITLE: Removing Stripe-related Pages from Navigation in JavaScript\nDESCRIPTION: This diff shows how to remove Stripe-related pages (StripePayoutPage and PaymentMethodsPage) from the account settings side navigation in the LayoutWrapperAccountSettingsSideNav component.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-payments/removing-stripe/index.md#2025-04-18_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n        name: 'PasswordChangePage',\n      },\n    },\n-    {\n-      text: <FormattedMessage id=\"LayoutWrapperAccountSettingsSideNav.paymentsTabTitle\" />,\n-      selected: currentTab === 'StripePayoutPage',\n-      id: 'StripePayoutPageTab',\n-      linkProps: {\n-        name: 'StripePayoutPage',\n-      },\n-    },\n-    {\n-      text: <FormattedMessage id=\"LayoutWrapperAccountSettingsSideNav.paymentMethodsTabTitle\" />,\n-      selected: currentTab === 'PaymentMethodsPage',\n-      id: 'PaymentMethodsPageTab',\n-      linkProps: {\n-        name: 'PaymentMethodsPage',\n-      },\n-    },\n  ];\n\n  return <LayoutWrapperSideNav tabs={tabs} />;\n```\n\n----------------------------------------\n\nTITLE: ServerApp Component Props in Sharetribe Web Template\nDESCRIPTION: Code showing how translations are passed to the ServerApp component as props, which will be used during server-side rendering to display the correct marketplace texts.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-content/hosted-microcopy/index.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n<ServerApp\n  url={url}\n  context={serverContext}\n  helmetContext={helmetContext}\n  store={store}\n  hostedTranslations={hostedTranslations}\n/>\n```\n\n----------------------------------------\n\nTITLE: Running dev server with Sentry DSN environment variable in bash\nDESCRIPTION: This command demonstrates how to start the development server with the Sentry DSN environment variable. The REACT_APP_SENTRY_DSN variable needs to be set with your Sentry project's Data Source Name to enable error logging.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-testing-error-handling/how-to-set-up-sentry/index.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nREACT_APP_SENTRY_DSN='<sentry-dsn>'  yarn run dev-server\n```\n\n----------------------------------------\n\nTITLE: Rendering UI Text Component in JSX\nDESCRIPTION: Demonstrates how to use the UiText component to render text from the ui-texts.json file within a JSX component. This approach allows for easy content management and future translation support.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/docs/coding-conventions.md#2025-04-18_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst MyComponent = () => {\n  return (\n    <P>\n      <UiText id=\"MyComponent.someText\" />\n    </P>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing currentUserNotificationCount in Sharetribe Web Template\nDESCRIPTION: This snippet references the currentUserNotificationCount variable that stores the number of active notifications in the Sharetribe Web Template.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/concepts-messages/messages/index.md#2025-04-18_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nThe variable\n[currentUserNotificationCount](https://github.com/sharetribe/web-template/blob/main/src/ducks/user.duck.js#L64)\nstores the number of active notifications.\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Utilities for Helmet Fee (JSX/Diff)\nDESCRIPTION: This snippet shows the necessary imports for adding the helmet rental fee functionality to the BookingDatesForm component. It includes utility functions for currency formatting and the FieldCheckbox component.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/tutorial-transaction-process/customize-pricing/index.md#2025-04-18_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n  import { propTypes } from '../../util/types';\n+ import { formatMoney } from '../../../util/currency';\n+ import { types as sdkTypes } from '../../../util/sdkLoader';\n  ...\nimport {\n  Form,\n  IconArrowHead,\n  PrimaryButton,\n  FieldDateRangeInput,\n  H6,\n+ FieldCheckbox,\n} from '../../../components';\n\n import EstimatedCustomerBreakdownMaybe from './EstimatedCustomerBreakdownMaybe';\n\n import css from './BookingDatesForm.module.css';\n+ const { Money } = sdkTypes;\n```\n\n----------------------------------------\n\nTITLE: Configuring ListingPage Layout in JavaScript\nDESCRIPTION: This snippet demonstrates how to configure the listing page layout in the configLayout.js file. The 'carousel' option displays images in their original aspect ratio in a carousel format, while the alternative 'coverPhoto' option (not shown) displays a cropped hero image.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-configuration/configuration-in-ftw-x/index.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const listingPage = {\n  variantType: 'carousel',\n};\n```\n\n----------------------------------------\n\nTITLE: Querying Defined Search Schemas with Sharetribe CLI\nDESCRIPTION: Shows how to query and display all defined search schemas for a marketplace using the Sharetribe CLI.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-search/manage-search-schemas-with-flex-cli/index.md#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ flex-cli search -m my-marketplace-dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Locale in Sharetribe Web Template (JavaScript)\nDESCRIPTION: This snippet shows how to change the locale setting in the Sharetribe Web Template configuration file. It sets the locale to 'it' for Italian.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-content/change-ftw-language/index.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlocalization: {\n locale: 'it',\n ...\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Sharetribe Web Template Server - Bash\nDESCRIPTION: Command to start the Node.js/Express server for the production deployment of the Sharetribe Web Template.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-hosting/how-to-deploy-ftw-to-production/index.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: CSS Modules Implementation\nDESCRIPTION: Example of using CSS Modules in a React component with style imports and class application.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-styling/how-to-customize-ftw-styles/index.md#2025-04-18_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport css from './SectionHero.module.css';\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<h1 className={css.heroMainTitle}>Book saunas everywhere</h1>\n```\n\n----------------------------------------\n\nTITLE: Querying Events by Resource ID\nDESCRIPTION: Shows how to query events for a specific resource using the --resource parameter.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-events/view-events-with-flex-cli/index.md#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ flex-cli events --resource 5fce86c7-e435-4047-ab3b-dc4fee02d51d -m my-marketplace-dev\n\nSeq ID   Resource ID                           Event type       Created at local time   Source           Actor\n3471856  5fce86c7-e435-4047-ab3b-dc4fee02d51d  listing/created  2020-12-07 9:47:19 PM   marketplace-api  joe@example.com\n3471857  5fce86c7-e435-4047-ab3b-dc4fee02d51d  listing/updated  2020-12-07 9:47:28 PM   marketplace-api  joe@example.com\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response Structure\nDESCRIPTION: Example of the JSON response structure returned by the Asset Delivery API after making changes to the page title through the Console.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/concepts-development/headless-content-management/index.md#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{ \"data\" :\n   {\"sections\": [\n       { \"title\":\n          {\n            \"content\": \"Test title\"\n            ...\n\n```\n\n----------------------------------------\n\nTITLE: Pushing Updated Process Version - Bash\nDESCRIPTION: Command to push a new version of the process after making template changes.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-messaging/edit-email-templates-with-flex-cli/index.md#2025-04-18_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nflex-cli process push --path process --process default-booking -m my-marketplace-dev\n```\n\n----------------------------------------\n\nTITLE: Sending Test Email with Flex CLI\nDESCRIPTION: Command to send a test email using the new template\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/tutorial-transaction-process/add-email-notification/index.md#2025-04-18_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nflex-cli notifications send --template biketribe-instant-booking/templates/booking-reminder-customer --marketplace=biketribe-dev\n```\n\n----------------------------------------\n\nTITLE: Embedding HTML5 video in Markdown documentation\nDESCRIPTION: HTML markup for embedding a video with multiple source formats (MP4, WebM, OGV) to ensure cross-browser compatibility in documentation pages.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/docs/how-to-add-video.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<video>\n    <source src='./output.mp4' type='video/mp4'>\n    <source src='./output.webm' type='video/webm'>\n    <source src='./output.ogv' type='video/ogg'>\n</video>\n```\n\n----------------------------------------\n\nTITLE: Creating DeleteAccountForm Component Structure\nDESCRIPTION: Shows the file structure for creating the DeleteAccountForm component within the DeleteAccountPage container.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-users-and-authentication/implement-delete-user/index.md#2025-04-18_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n└── src\n    └── containers\n         └── DeleteAccountPage\n             └── DeleteAccountForm\n                   └── DeleteAccountForm.js\n                   └── DeleteAccountForm.module.css\n```\n\n----------------------------------------\n\nTITLE: JSON Marketplace Text with Parameter in Sharetribe\nDESCRIPTION: Demonstrates how to define a marketplace text that includes a dynamic parameter (listingTitle) which will be replaced at runtime.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/concepts-development/microcopy/index.md#2025-04-18_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ManageListingCard.pendingApproval\": \"{listingTitle} is pending admin approval. It's not visible on the marketplace yet.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Seats Selection to FieldDateRangeInput UI\nDESCRIPTION: Adds the conditional seats selection component to the rendered UI after the validation error component.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-listing/seats/index.md#2025-04-18_snippet_27\n\nLANGUAGE: diff\nCODE:\n```\n    return (\n      <div className={classes}>\n        {label}\n        <DateRangeInput {...inputProps} />\n        <ValidationError className={errorClasses} fieldMeta={meta} />\n+       {seatsSelectionMaybe}\n      </div>\n    );\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in Heroku for Sharetribe Web Template\nDESCRIPTION: This snippet lists the essential environment variables that need to be configured in Heroku's Config Vars for deploying the Sharetribe Web Template. It includes variables for Sharetribe SDK, Stripe, Mapbox, and various application settings.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-hosting/how-to-deploy-ftw-to-heroku/index.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- `REACT_APP_SHARETRIBE_SDK_CLIENT_ID`\n\n  Sharetribe client ID. Check this from\n  [Console](https://console.sharetribe.com/advanced/applications).\n\n- `SHARETRIBE_SDK_CLIENT_SECRET`\n\n  Sharetribe client secret. Check this from\n  [Console](https://console.sharetribe.com/advanced/applications).\n\n- `REACT_APP_STRIPE_PUBLISHABLE_KEY`\n\n  Stripe publishable API key for generating tokens with Stripe API. Use\n  the test key (prefix `pk_test`) for development.\n\n- `REACT_APP_MAPBOX_ACCESS_TOKEN`\n\n  If you are using Mapbox instead of Google Maps\n\n- `REACT_APP_MARKETPLACE_ROOT_URL`\n\n  Canonical root URL of the marketplace. Remove trailing slash from the\n  domain.<br />E.g. _`https://<the-name-of-your-app>.herokuapp.com`_\n\n- `REACT_APP_MARKETPLACE_NAME` Marketplace name in self-hosted\n  marketplaces is set through environment variables. If not set, this\n  defaults to 'Biketribe', or whatever value you have set in\n  src/config/configDefault.js.\n\n- `NODE_ENV`\n\n  Defines whether the application is run in production or development\n  mode. Use 'development' for development and 'production' for\n  production.<br/> Use value: 'production'\n\n- `REACT_APP_ENV`\n\n  A more fine-grained env definition than `NODE_ENV`. For example, this\n  sends environment info to the logging service Sentry. (If you have\n  enabled it with `REACT_APP_SENTRY_DSN`).<br/> For this setup, use\n  value: 'development'\n\n- `REACT_APP_SHARETRIBE_USING_SSL`\n\n  Redirect HTTP to HTTPS?<br/> Use value: true\n\n- `SERVER_SHARETRIBE_TRUST_PROXY`\n\n  Set this when running the app behind a reverse proxy, e.g. in\n  Heroku.<br/> Use value: true\n\n- `REACT_APP_CSP`\n\n  Content Security Policy (CSP). Read more from\n  [this article](/template/how-to-set-up-csp-for-template/).<br />\n  Accepts values: _block_ and _report_. The recommended value is\n  _block_.\n```\n\n----------------------------------------\n\nTITLE: Preparing Preloaded State for Client Hydration\nDESCRIPTION: Code showing how the application prepares the preloaded state to be passed to the browser, including the asset version for consistent client-side rendering during hydration.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-content/hosted-microcopy/index.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n.then(() => {\n  return { preloadedState: store.getState(), translations };\n})\n```\n\n----------------------------------------\n\nTITLE: Listing Resource Example in EDN\nDESCRIPTION: Complete example of a listing resource with all supported fields including creation date, title, description, state, location, price, and other metadata.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-migrations/migrating-from-outside-sharetribe/index.md#2025-04-18_snippet_4\n\nLANGUAGE: edn\nCODE:\n```\n[[:im.listing/id #uuid \"b074e697-ab0c-4746-a195-c58d73606b1f\" :listing/rock-sauna]\n         #:im.listing{:createdAt #inst \"2018-04-17T06:55:04.291-00:00\"\n                      :title \"A solid rock sauna\"\n                      :description \"A very nice solid rock sauna built solely of wood.\\nHere's some more sensible stuff.\"\n                      :state :listing.state/pendingApproval\n                      :location #im/location [23.12 21.21]\n                      :price #im/money [12.12M \"EUR\"]\n                      :currentStock 5\n                      :publicData {:categoryLevel1 \"rock\"\n                                   :amenities [\"sauna\" \"pool\"]}\n                      :author #im/ref :user/john}]\n```\n\n----------------------------------------\n\nTITLE: Simplifying getEndHours Function in JSX\nDESCRIPTION: Simplifies the getEndHours function by directly returning the full list from getSharpHours without additional slicing.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-listing/bookings-with-buffer/index.md#2025-04-18_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\n  export const getEndHours = (intl, timeZone, startTime, endTime) => {\n-   const hours = getSharpHours(startTime, endTime, timeZone, intl);\n-   return hours.length < 2 ? [] : hours.slice(1);\n+   return getSharpHours(startTime, endTime, timeZone, intl);\n  };\n```\n\n----------------------------------------\n\nTITLE: Adding Marketplace Text Translations\nDESCRIPTION: Adds necessary marketplace text translations for the delete account feature in the English translation file (en.json).\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-users-and-authentication/implement-delete-user/index.md#2025-04-18_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"DeleteAccountPage.details\": \"This action is permanent and cannot be undone! After deleting your account, you will be logged out immediately and will not be able to access your listings or transactions anymore.\",\n\"DeleteAccountPage.heading\": \"Delete your account\",\n\"DeleteAccountPage.title\": \"Delete your account\",\n\"DeleteAccountPage.error\": \"Cannot delete user profile. You have {errorCause} Please contact Biketribe support or complete the unfinished issues and try again.\",\n\"LayoutWrapperAccountSettingsSideNav.deleteAccountTabTitle\": \"Delete account\",\n```\n\n----------------------------------------\n\nTITLE: Basic JSON Marketplace Text Key-Value Syntax in Sharetribe\nDESCRIPTION: Demonstrates the basic key-value syntax for marketplace texts in Sharetribe where the key combines component name with text key and the value is the displayed text.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/concepts-development/microcopy/index.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"<component name>.<marketplace text key>\": \"<marketplace text>\"\n```\n\n----------------------------------------\n\nTITLE: Example of Permission Override Behavior\nDESCRIPTION: Shows how marketplace-level permission changes can override user-level permissions in the effectivePermissionSet while user-level permissions remain unchanged.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/concepts-users-and-authentication/user-permissions/index.md#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n        \"~:relationships\": {\n            \"~:effectivePermissionSet\": {\n                \"~:data\": {\n                    \"~:id\": \"~u6707a063-994a-4310-92c8-422831800720\",\n                    \"~:type\": \"~:permissionSet\"\n                }\n            }\n        },\n      },\n    \"~:included\": [\n      {\n        \"~:id\": \"~u6707a063-994a-4310-92c8-422831800720\",\n        \"~:type\": \"~:permissionSet\",\n        \"~:attributes\": {\n            \"~:postListings\": \"~:permission/allow\",\n            \"~:read\": \"~:permission/allow\",\n            \"~:initiateTransactions\": \"~:permission/deny\"\n        }\n    }\n  ]\n```\n\n----------------------------------------\n\nTITLE: Example JSON Key-Value for Email Template Text in Sharetribe\nDESCRIPTION: Example of a specific email text entry showing the template name (EmailChanged) and section (Title) paired with the displayed value.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/concepts-development/microcopy/index.md#2025-04-18_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"EmailChanged.Title\": \"Your email address was changed\",\n```\n\n----------------------------------------\n\nTITLE: CSS Custom Property Usage\nDESCRIPTION: Shows how to use a CSS custom property in a component stylesheet.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-styling/how-to-customize-ftw-styles/index.md#2025-04-18_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n/* in component.module.css */\n.linkToHomePage {\n  color: var(--marketplaceColor);\n}\n```\n\n----------------------------------------\n\nTITLE: Merging Upstream Changes\nDESCRIPTION: Command to merge changes from the upstream main branch into the local branch\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-introduction/01-how-to-customize-ftw/index.md#2025-04-18_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit merge upstream/main\n```\n\n----------------------------------------\n\nTITLE: Basic Time Expression Structure in Clojure\nDESCRIPTION: Demonstrates the basic structure of a time expression using a function name mapped to parameters.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/references/transaction-process-time-expressions/index.md#2025-04-18_snippet_0\n\nLANGUAGE: clojure\nCODE:\n```\n{:fn/function-name [function-param1 function-param2]}\n```\n\n----------------------------------------\n\nTITLE: Process Configuration in Transaction.js\nDESCRIPTION: Configuration of supported transaction processes including the new instant booking process.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/tutorial-transaction-process/create-transaction-process/index.md#2025-04-18_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nconst PROCESSES = [\n  {\n    name: PURCHASE_PROCESS_NAME,\n    alias: `${PURCHASE_PROCESS_NAME}/release-1`,\n    process: purchaseProcess,\n    unitTypes: [ITEM],\n  },\n  {\n    name: BOOKING_PROCESS_NAME,\n    alias: `${BOOKING_PROCESS_NAME}/release-1`,\n    process: bookingProcess,\n    unitTypes: [DAY, NIGHT, HOUR],\n  },\n  {\n    name: INQUIRY_PROCESS_NAME,\n    alias: `${INQUIRY_PROCESS_NAME}/release-1`,\n    process: inquiryProcess,\n    unitTypes: [INQUIRY],\n  },\n  {\n    name: INSTANT_PROCESS_NAME,\n    alias: `${INSTANT_PROCESS_NAME}/release-1`,\n    process: instantProcess,\n    unitTypes: [DAY, NIGHT, HOUR],\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Action Options in Clojure\nDESCRIPTION: Example showing how to configure action options for create-pending-booking action using the :config key in the action definition.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/references/transaction-process-format/index.md#2025-04-18_snippet_2\n\nLANGUAGE: clojure\nCODE:\n```\n{\n :name :action/create-pending-booking\n\n :config {:type :time}}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Favicon HTML Snippet in Sharetribe Web Template\nDESCRIPTION: An example HTML snippet for implementing custom favicons in the Sharetribe Web Template's index.html file. It includes links to various icon files for different platforms and browsers, with specific sizes and configurations to ensure proper display across devices.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-styling/how-to-change-ftw-icons/index.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- Start Favicons from https://realfavicongenerator.net/ -->\n<link\n  rel=\"apple-touch-icon\"\n  sizes=\"180x180\"\n  href=\"/static/icons/apple-touch-icon.png\"\n/>\n<link\n  rel=\"icon\"\n  type=\"image/png\"\n  sizes=\"32x32\"\n  href=\"/static/icons/favicon-32x32.png\"\n/>\n<link\n  rel=\"icon\"\n  type=\"image/png\"\n  sizes=\"16x16\"\n  href=\"/static/icons/favicon-16x16.png\"\n/>\n<link\n  rel=\"mask-icon\"\n  href=\"/static/icons/safari-pinned-tab.svg\"\n  color=\"#c0392b\"\n/>\n<link rel=\"shortcut icon\" href=\"/static/icons/favicon.ico\" />\n<meta\n  name=\"msapplication-config\"\n  content=\"/static/icons/browserconfig.xml\"\n/>\n<meta name=\"theme-color\" content=\"#c0392b\" />\n<!-- End Favicons -->\n```\n\n----------------------------------------\n\nTITLE: Adding Buffer Time Helper Function in JavaScript\nDESCRIPTION: Adds a helper function to the dates.js file to calculate the buffer time for bookings.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-listing/bookings-with-buffer/index.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst bufferMinutes = 15;\n\nexport const addBuffer = (date) => moment(date).add(bufferMinutes, 'minutes').toDate();\n```\n\n----------------------------------------\n\nTITLE: File Structure for Listing Configuration in Sharetribe Web Template\nDESCRIPTION: Shows the directory structure for the configListing.js file in the Sharetribe Web Template project.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-listing/extend-listing-data-in-ftw/index.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n└── src\n    └── config\n        └── configListing.js\n```\n\n----------------------------------------\n\nTITLE: Phone Number Field Configuration - JavaScript\nDESCRIPTION: JavaScript code defining labels, placeholders and validation for the phone number input field using the intl (internationalization) system.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/tutorial-transaction-process/use-protected-data-in-emails/index.md#2025-04-18_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// phone number\nconst phoneLabel = intl.formatMessage({\n  id: 'SignupForm.phoneLabel',\n});\nconst phonePlaceholder = intl.formatMessage({\n  id: 'SignupForm.phonePlaceholder',\n});\nconst phoneRequiredMessage = intl.formatMessage({\n  id: 'SignupForm.phoneRequired',\n});\nconst phoneRequired = validators.required(phoneRequiredMessage);\n```\n\n----------------------------------------\n\nTITLE: JSON Structure for Marketplace Text Entry\nDESCRIPTION: Shows the basic key-value pair structure for marketplace text entries in the translations file.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-content/how-to-change-ftw-bundled-ui-microcopy/index.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"<component name>.<marketplace text key>\": \"<message>\"\n```\n\n----------------------------------------\n\nTITLE: Project Structure for Analytics and Routing in Shell\nDESCRIPTION: This snippet illustrates the directory structure for key files related to analytics and routing in the Sharetribe Flex project, including Routes.js, analytics.js, and routing.duck.js.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-routing/how-routing-works-in-ftw/index.md#2025-04-18_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n└── src\n    ├── routing\n    |  └── Routes.js\n    ├──analytics\n    |  └── analytics.js\n    └── ducks\n        └── routing.duck.js\n```\n\n----------------------------------------\n\nTITLE: Creating SimpleOrderForm Component Structure in Shell\nDESCRIPTION: This shell command shows the directory structure for adding the SimpleOrderForm component to the StripePaymentForm folder in the project.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-payments/removing-stripe/index.md#2025-04-18_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n  └── src\n      └── containers\n          └── CheckoutPage\n              └── StripePaymentForm\n                  └── SimpleOrderForm.js\n```\n\n----------------------------------------\n\nTITLE: Checking Git Remote Repositories\nDESCRIPTION: Command to view configured remote repositories in Git\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/tutorial/introduction/index.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit remote -v\n```\n\n----------------------------------------\n\nTITLE: Displaying Project Directory Structure in Bash\nDESCRIPTION: A bash snippet showing the project directory structure for the Flex-Docs project, including the main directories and their purposes.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/docs/overview.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocs/                # Site internal documentation\npublic/              # Build output\nsrc/                 # Site source code\n├── components/      # React components\n├── docs/            # Markdown articles\n├── font-files/      # Font source files\n├── images/          # Shared image files\n├── pages/           # Gatsby page entry points\n└── templates/       # Gatsby templates for page creation\n.cache/              # Gatsby cache directory\n.gitignore           # Files ignored in Git\n.prettierrc          # Prettier configuration\nvercel.json          # Vercel redirects and configurations\ngatsby-browser.js    # Gatsby Browser API usage\ngatsby-config.js     # Gatsby config\ngatsby-node.js       # Gatsby Node API usage\ngatsby-ssr.js        # Gatsby SSR API usage\npackage.json         # Dependencies etc.\nyarn.lock            # Locked versions of the dependencies\n```\n\n----------------------------------------\n\nTITLE: Importing Field Helper Function\nDESCRIPTION: Imports the exposeContentAsChildren function for use in field overrides to ensure proper data validation.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-content/options-prop/index.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { exposeContentAsChildren } from '../PageBuilder/Field/Field.helpers';\n```\n\n----------------------------------------\n\nTITLE: Extracting formApi from props in BookingDatesForm\nDESCRIPTION: Adds formApi to the destructured props to access form state for seat calculations.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-listing/seats/index.md#2025-04-18_snippet_20\n\nLANGUAGE: diff\nCODE:\n```\n      render={fieldRenderProps => {\n        const {\n          endDatePlaceholder,\n          startDatePlaceholder,\n          formId,\n+         form: formApi,\n          handleSubmit,\n          intl,\n          lineItemUnitType,\n          values,\n          monthlyTimeSlots,\n          lineItems,\n          fetchLineItemsError,\n          onFetchTimeSlots,\n        } = fieldRenderProps;\n...\n```\n\n----------------------------------------\n\nTITLE: Applying Field Overrides to PageBuilder\nDESCRIPTION: Shows how to pass field overrides to the PageBuilder component using the options prop.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-content/options-prop/index.md#2025-04-18_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\noptions={{fieldComponents: fieldOverrides}}\n```\n\n----------------------------------------\n\nTITLE: Markdown Table of Supported Event Types for Sharetribe Flex Integration API\nDESCRIPTION: A detailed table listing all supported event types in Sharetribe Flex, including the event type, corresponding Integration API resource, and a brief description of each event. The table covers various aspects of the marketplace such as listings, users, transactions, and inventory management.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/references/events/index.md#2025-04-18_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Event type                    | Integration API resource                                                                                   | Description                                                                                                                                                                               |\n| ----------------------------- | ---------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| listing/created               | [listing](https://www.sharetribe.com/api-reference/integration.html#listings)                              | A new listing was created.                                                                                                                                                                |\n| listing/updated               | [listing](https://www.sharetribe.com/api-reference/integration.html#listings)                              | An existing listing was updated, including when the set of listing images is updated.                                                                                                     |\n| listing/deleted               | [listing](https://www.sharetribe.com/api-reference/integration.html#listings)                              | A listing was deleted.                                                                                                                                                                    |\n| user/created                  | [user](https://www.sharetribe.com/api-reference/integration.html#users)                                    | A new Sharetribe marketplace user was created.                                                                                                                                            |\n| user/updated                  | [user](https://www.sharetribe.com/api-reference/integration.html#users)                                    | An existing user was updated.                                                                                                                                                             |\n| user/deleted                  | [user](https://www.sharetribe.com/api-reference/integration.html#users)                                    | A user was deleted.                                                                                                                                                                       |\n| availabilityException/created | [availabilityException](https://www.sharetribe.com/api-reference/integration.html#availability-exceptions) | A new availability exception was created for a listing.                                                                                                                                   |\n| availabilityException/updated | [availabilityException](https://www.sharetribe.com/api-reference/integration.html#availability-exceptions) | An existing availability exception was updated.                                                                                                                                           |\n| availabilityException/deleted | [availabilityException](https://www.sharetribe.com/api-reference/integration.html#availability-exceptions) | An availability exception was deleted.                                                                                                                                                    |\n| message/created               | [message](https://www.sharetribe.com/api-reference/integration.html#messages)                              | A new message was sent for a transaction.                                                                                                                                                 |\n| message/updated               | [message](https://www.sharetribe.com/api-reference/integration.html#messages)                              | An existing message was updated.                                                                                                                                                          |\n| message/deleted               | [message](https://www.sharetribe.com/api-reference/integration.html#messages)                              | A message was deleted.                                                                                                                                                                    |\n| transaction/initiated         | [transaction](https://www.sharetribe.com/api-reference/integration.html#transactions)                      | A new transaction was initiated.                                                                                                                                                          |\n| transaction/transitioned      | [transaction](https://www.sharetribe.com/api-reference/integration.html#transactions)                      | An existing transaction transitioned to a new state.                                                                                                                                      |\n| transaction/updated           | [transaction](https://www.sharetribe.com/api-reference/integration.html#transactions)                      | An existing transaction was updated without a transition (e.g. via API call to [update metatada](https://www.sharetribe.com/api-reference/integration.html#update-transaction-metadata)). |\n| transaction/deleted           | [transaction](https://www.sharetribe.com/api-reference/integration.html#transactions)                      | An existing transaction was deleted.                                                                                                                                                      |\n| booking/created               | [booking](https://www.sharetribe.com/api-reference/integration.html#bookings)                              | A new booking was created.                                                                                                                                                                |\n| booking/updated               | [booking](https://www.sharetribe.com/api-reference/integration.html#bookings)                              | An existing booking was updated.                                                                                                                                                          |\n| booking/deleted               | [booking](https://www.sharetribe.com/api-reference/integration.html#bookings)                              | A booking was deleted.                                                                                                                                                                    |\n| review/created                | [review](https://www.sharetribe.com/api-reference/integration.html#reviews)                                | A new review was posted.                                                                                                                                                                  |\n| review/updated                | [review](https://www.sharetribe.com/api-reference/integration.html#reviews)                                | An existing review was updated.                                                                                                                                                           |\n| review/deleted                | [review](https://www.sharetribe.com/api-reference/integration.html#reviews)                                | A review was deleted.                                                                                                                                                                     |\n| stockAdjustment/created       | [stockAdjustment](https://www.sharetribe.com/api-reference/integration.html#stock-adjustments)             | A new stock adjustment was created.                                                                                                                                                       |\n| stockAdjustment/updated       | [stockAdjustment](https://www.sharetribe.com/api-reference/integration.html#stock-adjustments)             | An existing stock adjustment was updated.                                                                                                                                                 |\n| stockAdjustment/deleted       | [stockAdjustment](https://www.sharetribe.com/api-reference/integration.html#stock-adjustments)             | A stock adjustment was deleted.                                                                                                                                                           |\n| stockReservation/created      | [stockReservation](https://www.sharetribe.com/api-reference/integration.html#stock-reservations)           | A new stock reservation was created.                                                                                                                                                      |\n| stockReservation/updated      | [stockReservation](https://www.sharetribe.com/api-reference/integration.html#stock-reservations)           | An existing stock reservation was updated.                                                                                                                                                |\n```\n\n----------------------------------------\n\nTITLE: Updating Process Configuration\nDESCRIPTION: Diff showing the addition of a new notification configuration to the process.edn file\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/tutorial-transaction-process/add-email-notification/index.md#2025-04-18_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n :notifications\n  [{:name :notification/booking-confirmed-customer,\n   :on :transition/confirm-payment,\n   :to :actor.role/customer,\n   :template :booking-confirmed-customer}\n+ {:name :notification/booking-reminder-customer\n+  :on :transition/confirm-payment,\n+  :to :actor.role/customer\n+  :template :booking-reminder-customer\n+  :at {:fn/minus\n+       [{:fn/timepoint [:time/booking-start]}\n+        {:fn/period [\"P2D\"]}]}}\n...\n```\n\n----------------------------------------\n\nTITLE: Updating Account Settings Pages Array\nDESCRIPTION: Adds DeleteAccountPage to the ACCOUNT_SETTINGS_PAGES array in routeConfiguration.js.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-users-and-authentication/implement-delete-user/index.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport const ACCOUNT_SETTINGS_PAGES = [\n  'ContactDetailsPage',\n  'PasswordChangePage',\n  'StripePayoutPage',\n  'PaymentMethodsPage',\n  'DeleteAccountPage',\n];\n```\n\n----------------------------------------\n\nTITLE: Adding CSS Class for Seat Input in React\nDESCRIPTION: Adds a CSS class to provide margin for the seat input in the EditListingAvailabilityExceptionForm.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-listing/seats/index.md#2025-04-18_snippet_13\n\nLANGUAGE: css\nCODE:\n```\n.seats {\n  margin-top: 24px;\n}\n```\n\n----------------------------------------\n\nTITLE: Minus Function Example in Clojure\nDESCRIPTION: Demonstrates subtracting a time period from a booking end time.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/references/transaction-process-time-expressions/index.md#2025-04-18_snippet_6\n\nLANGUAGE: clojure\nCODE:\n```\n{fn/minus [{:fn/timepoint [:time/booking-end]} {:fn/period \"P2D\"}]}\n```\n\n----------------------------------------\n\nTITLE: CLI Process Inspection Command Output\nDESCRIPTION: Example output from flex-cli showing process inspection details for a request-payment transition including actions and notifications.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/references/transaction-process-format/index.md#2025-04-18_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n$ flex-cli process --path processes/guide/example --transition transition/request-payment\nName\n  transition/request-payment\nFrom\n  state/initial\nTo\n  state/pending-payment\nActor\n  Customer\nAt\n  -\n\nActions\n\nName                                      Config\n:action.initializer/init-listing-tx\n:action/create-pending-booking            {:type :time}\n:action/privileged-set-line-items\n:action/stripe-create-payment-intent\n\nNotifications\n\n-\n```\n\n----------------------------------------\n\nTITLE: Displaying File Structure for InboxPage and TransactionPage in Shell\nDESCRIPTION: Shows the directory structure for the InboxPage and TransactionPage containers, highlighting the state data files that need to be reviewed and potentially modified for new transaction processes.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-transaction-process/change-transaction-process-in-ftw/index.md#2025-04-18_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n  └── src\n      └── containers\n          ├── InboxPage\n              ├── InboxPage.stateData.js\n              ├── InboxPage.stateDataBooking.js\n              └── InboxPage.stateDataPurchase.js\n          └── TransactionPage\n              ├── TransactionPage.stateData.js\n              ├── TransactionPage.stateDataBooking.js\n              └── TransactionPage.stateDataPurchase.js\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for Process List Command\nDESCRIPTION: Command to show help information for the 'process list' command, which is used to list marketplace processes.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/introduction/getting-started-with-flex-cli/index.md#2025-04-18_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nflex-cli help process list\n```\n\n----------------------------------------\n\nTITLE: Defining Props in SectionLikes Component\nDESCRIPTION: This diff snippet shows how to define the new props in the SectionLikes component for handling likes.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-events/like-feature/index.md#2025-04-18_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\nconst SectionLikes = props => {\n  const {\n    publicData,\n+   onUpdateLikes,\n+   listingId,\n+   currentUser,\n+   updateLikesInProgress,\n  } = props;\n```\n\n----------------------------------------\n\nTITLE: List Process Versions Command\nDESCRIPTION: Command to list all versions of a specific process\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-transaction-process/edit-transaction-process-with-flex-cli/index.md#2025-04-18_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nflex-cli process list --process default-booking -m my-marketplace-dev\n```\n\n----------------------------------------\n\nTITLE: Adding Marketplace Texts for Seats in JSON\nDESCRIPTION: This JSON snippet shows the marketplace texts needed for seat-related functionality in the application.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-listing/seats/index.md#2025-04-18_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n\"EditListingAvailabilityPlanForm.seatsPlaceholder\": \"Select seats...\",\n\"EditListingAvailabilityPanel.WeeklyCalendar.available\": \"Available ({seats})\",\n\"EditListingAvailabilityExceptionForm.seatsLabel\": \"Available seats\",\n\"EditListingAvailabilityExceptionForm.seatsPlaceholder\": \"Select available seats...\",\n\"BookingDatesForm.seatsTitle\": \"Choose number of seats\",\n\"OrderBreakdown.baseUnitDaySeats\": \"{unitPrice} x {quantity, number} {quantity, plural, one {day} other {days}} x { seats, number } { seats, plural, one {seat} other {seats} } \",\n\"OrderBreakdown.baseUnitNightSeats\": \"{unitPrice} x {quantity, number} {quantity, plural, one {night} other {nights}} x { seats, number } { seats, plural, one {seat} other {seats}}\",\n\"OrderBreakdown.baseUnitHourSeats\": \"{unitPrice} x {quantity, number} {quantity, plural, one {hour} other {hours}} x { seats, number } { seats, plural, one {seat} other {seats}}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Pushing Code to New Remote Repository\nDESCRIPTION: Command to push local code to the newly configured remote repository\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/tutorial/introduction/index.md#2025-04-18_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngit push -u origin main\n```\n\n----------------------------------------\n\nTITLE: Listing Search Schemas with Sharetribe CLI\nDESCRIPTION: Command to list all defined data schemas using Sharetribe CLI. This allows developers to view existing search schemas for extended data.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/references/extended-data/index.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflex-cli search\n```\n\n----------------------------------------\n\nTITLE: Define Supported Tabs Constants\nDESCRIPTION: JavaScript constants defining the supported tabs including the new EXTRAFEATURES tab\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/tutorial-listings/new-wizard-tab/index.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexport const DETAILS = 'details';\nexport const PRICING = 'pricing';\nexport const PRICING_AND_STOCK = 'pricing-and-stock';\nexport const EXTRAFEATURES = 'extra-features';\nexport const DELIVERY = 'delivery';\nexport const LOCATION = 'location';\nexport const AVAILABILITY = 'availability';\nexport const PHOTOS = 'photos';\n\n// EditListingWizardTab component supports these tabs\nexport const SUPPORTED_TABS = [\n  DETAILS,\n  PRICING,\n  PRICING_AND_STOCK,\n  EXTRAFEATURES,\n  DELIVERY,\n  LOCATION,\n  AVAILABILITY,\n  PHOTOS,\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Route for Privacy Policy Page in React Router\nDESCRIPTION: Route configuration object defining the path, component and data loading function for the Privacy Policy page\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-content/page-builder/index.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n  {\n     path: '/privacy-policy',\n     name: 'PrivacyPolicyPage',\n     component: PrivacyPolicyPage,\n     loadData: pageDataLoadingAPI.PrivacyPolicyPage.loadData,\n   }\n```\n\n----------------------------------------\n\nTITLE: Adding Seats Selection to the UI in FieldDateAndTimeInput\nDESCRIPTION: Adds the seats selection component to the end of the form in the FieldDateAndTimeInput component.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-listing/seats/index.md#2025-04-18_snippet_30\n\nLANGUAGE: diff\nCODE:\n```\n            </FieldSelect>\n          </div>\n        </div>\n+       {seatsSelectionMaybe}\n      </div>\n```\n\n----------------------------------------\n\nTITLE: Importing Configuration in React Component\nDESCRIPTION: JavaScript code snippet demonstrating how to import and use the configuration, including currency, in a React component using the useConfiguration hook.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/tutorial-branding/configuration/index.md#2025-04-18_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport { useConfiguration } from '../../context/configurationContext';\n...\nconst SomeComponent = props => {\n const config = useConfiguration();\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for App Component in Sharetribe Web Template\nDESCRIPTION: Shell command output showing the directory structure for the main app component that handles both server-side and client-side rendering with translations.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-content/hosted-microcopy/index.md#2025-04-18_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n└── src\n    └── app.js\n```\n\n----------------------------------------\n\nTITLE: Adding Seats Props to FieldDateRangeInput in BookingDatesForm\nDESCRIPTION: Passes the calculated seats array and a localized label to the FieldDateRangeInput component to enable seat selection in the form.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-listing/seats/index.md#2025-04-18_snippet_22\n\nLANGUAGE: diff\nCODE:\n```\n      <FieldDateRangeInput\n        className={css.bookingDates}\n...\n        disabled={fetchLineItemsInProgress}\n        onClose={event =>\n          setCurrentMonth(getStartOf(event?.startDate ?? startOfToday, 'month', timeZone))\n        }\n+       seatsArray={getSeatsArray()}\n+       seatsLabel={intl.formatMessage({ id: 'BookingDatesForm.seatsTitle' })}\n      />\n```\n\n----------------------------------------\n\nTITLE: Process Push Command\nDESCRIPTION: Command to push the modified process to Sharetribe\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-transaction-process/edit-transaction-process-with-flex-cli/index.md#2025-04-18_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nflex-cli process push --path process --process default-booking -m my-marketplace-dev\n```\n\n----------------------------------------\n\nTITLE: Adding Delete Profile Route\nDESCRIPTION: Adds the delete profile route to the array returned by the route configuration function in routeConfiguration.js.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-users-and-authentication/implement-delete-user/index.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n    {\n      path: '/account/delete-profile',\n      name: 'DeleteAccountPage',\n      auth: true,\n      authPage: 'LoginPage',\n      component: DeleteAccountPage,\n    },\n```\n\n----------------------------------------\n\nTITLE: Applying Block Overrides to PageBuilder\nDESCRIPTION: Shows how to pass block overrides to the PageBuilder component using the options prop.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-content/options-prop/index.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\noptions={{blockComponents: blockOverrides}}\n```\n\n----------------------------------------\n\nTITLE: Setting up a Notification in Clojure\nDESCRIPTION: This code snippet illustrates the structure of a notification configuration. It includes properties for name, triggering transition, recipient, and email template.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/references/transaction-process-format/index.md#2025-04-18_snippet_6\n\nLANGUAGE: clojure\nCODE:\n```\n{\n :name :notification/notification-name\n :on :transition/transition-name\n :to :actor.role/customer ;; or :actor.role/provider\n :template :email-template-name}\n```\n\n----------------------------------------\n\nTITLE: Using Handlebars Helper for Email Template Text in Sharetribe\nDESCRIPTION: Shows how to use the 't' Handlebars helper to display email texts with a fallback message.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/concepts-development/microcopy/index.md#2025-04-18_snippet_5\n\nLANGUAGE: handlebars\nCODE:\n```\n<h1 style=\"font-size:26px;line-height:1.3;font-weight:700;color:#484848\">\n  {{t \"EmailChanged.Title\" \"Your email address was changed\"}}\n</h1>\n```\n\n----------------------------------------\n\nTITLE: Example JSON Key-Value for Marketplace Text in Sharetribe\nDESCRIPTION: Example of a specific marketplace text entry showing the component name (ManageListingCard) and text key (editListing) paired with the displayed value.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/concepts-development/microcopy/index.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"ManageListingCard.editListing\": \"Edit listing\"\n```\n\n----------------------------------------\n\nTITLE: Adding Seats to New Time Range in React Inline Button\nDESCRIPTION: This diff demonstrates how to initialize a new time range with 1 seat when adding it to an existing day.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-listing/seats/index.md#2025-04-18_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n  {!useFullDays && fields.length > 0 ? (\n    <InlineTextButton\n      type=\"button\"\n      className={css.buttonAddNew}\n-     onClick={() => fields.push({ startTime: null, endTime: null })}\n+     onClick={() => fields.push({ startTime: null, endTime: null, seats: 1 })}\n    >\n      <FormattedMessage id=\"EditListingAvailabilityPlanForm.addAnother\" />\n    </InlineTextButton>\n  ) : null}\n```\n\n----------------------------------------\n\nTITLE: Passing Props to SectionLikes Component in ListingPage\nDESCRIPTION: This diff snippet demonstrates how to pass the necessary props to the SectionLikes component in the ListingPage for handling likes.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-events/like-feature/index.md#2025-04-18_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n  const sectionLikes = (\n    <SectionLikes\n      publicData={currentListing?.attributes?.publicData}\n+     listingId={currentListing.id.uuid}\n+     onUpdateLikes={onUpdateLikes}\n+     currentUser={currentUser}\n+     updateLikesInProgress={updateLikesInProgress}\n    />\n  )\n```\n\n----------------------------------------\n\nTITLE: Example of Marketplace Text Strings in JavaScript\nDESCRIPTION: Illustrates how transaction process and state-specific text strings are defined in the Sharetribe Web Template. New processes will require adding similar strings for relevant keys and states.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-transaction-process/change-transaction-process-in-ftw/index.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n...\n  \"InboxPage.default-booking.accepted.status\": \"Accepted\",\n  \"InboxPage.default-booking.canceled.status\": \"Canceled\",\n  \"InboxPage.default-booking.declined.status\": \"Declined\",\n  \"InboxPage.default-booking.delivered.status\": \"Delivered\",\n...\n```\n\n----------------------------------------\n\nTITLE: Navigating to CheckoutPageWithPayment.js in File Structure\nDESCRIPTION: Shows the file structure path to locate the CheckoutPageWithPayment.js file which needs modification to pass the seats data to Redux actions for transaction processing.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-listing/seats/index.md#2025-04-18_snippet_44\n\nLANGUAGE: shell\nCODE:\n```\n└── src\n    └── containers\n        └── CheckoutPage\n            └── CheckoutPageWithPayment.js\n```\n\n----------------------------------------\n\nTITLE: Adding DeleteAccountPage to Route Configuration\nDESCRIPTION: Adds the DeleteAccountPage component to the application's route configuration in routeConfiguration.js.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-users-and-authentication/implement-delete-user/index.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst ContactDetailsPage = loadable(() =>\n  import(\n    /* webpackChunkName: \"ContactDetailsPage\" */ '../containers/ContactDetailsPage/ContactDetailsPage'\n  )\n);\nconst DeleteAccountPage = loadable(() =>\n  import(\n    /* webpackChunkName: \"DeleteAccountPage\" */ '../containers/DeleteAccountPage/DeleteAccountPage'\n  )\n);\nconst EditListingPage = loadable(() =>\n  import(\n    /* webpackChunkName: \"EditListingPage\" */ '../containers/EditListingPage/EditListingPage'\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Pulling Process Help Command\nDESCRIPTION: Command to display help information for the process pull command\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-transaction-process/edit-transaction-process-with-flex-cli/index.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nflex-cli help process pull\n```\n\n----------------------------------------\n\nTITLE: JSON Email Text with Parameters in Sharetribe\nDESCRIPTION: Example of an email text definition with two dynamic parameters (senderName and marketplaceName).\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/concepts-development/microcopy/index.md#2025-04-18_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"NewMessage.MessageSentParagraph\": \"{senderName} sent you a message in {marketplaceName}.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using formatMessage with Parameters in React Component\nDESCRIPTION: Shows how to use intl.formatMessage to pass a dynamic parameter to a marketplace text in a React component.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/concepts-development/microcopy/index.md#2025-04-18_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n<Overlay\n  message={intl.formatMessage(\n    { id: 'ManageListingCard.pendingApproval' },\n    { listingTitle: title }\n  )}\n/>\n```\n\n----------------------------------------\n\nTITLE: Examining Detailed Event Information in JSON Format (Bash)\nDESCRIPTION: Example of using the flex-cli command to retrieve detailed information about a specific event in JSON format. This command targets a single event using its sequence ID and outputs the result in a pretty-printed JSON format.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-events/view-events-with-flex-cli/index.md#2025-04-18_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ flex-cli events --seqid 3471843 -m my-marketplace-dev --json-pretty\n```\n\n----------------------------------------\n\nTITLE: Rendering Route Components with Switch in React\nDESCRIPTION: Demonstrates how the Routes component uses Switch to render the first matching Route component.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-routing/how-routing-works-in-ftw/index.md#2025-04-18_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Switch, Route } from 'react-router-dom';\n//...\n\nconst Routes = (props, context) => {\n  //...\n  return (\n    <Switch>\n      {routes.map(toRouteComponent)}\n      <Route component={NotFoundPage} />\n    </Switch>\n  );\n\n```\n\n----------------------------------------\n\nTITLE: Overriding Currency Configuration with diff in configHelpers.js\nDESCRIPTION: This diff shows how to modify the mergeCurrency function in configHelpers.js to override the currency defined in assets and force the template to use the default currency instead of the hosted currency.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-configuration/how-to-set-up-currency-in-ftw/index.md#2025-04-18_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\nconst mergeCurrency = (hostedCurrency, defaultCurrency) => {\n- const currency = hostedCurrency || defaultCurrency;\n+ const currency = defaultCurrency;\n  const supportedCurrencies = Object.keys(subUnitDivisors);\n  if (supportedCurrencies.includes(currency)) {\n    return currency;\n  } else {\n    console.error(\n      `The given currency (${currency}) is not supported.\n      There's a missing entry on subUnitDivisors`\n    );\n    return null;\n  }\n};\n\n```\n\n----------------------------------------\n\nTITLE: Adjusting getStartHours Function in JSX\nDESCRIPTION: Updates the getStartHours function to pass the isStart parameter and adjust the removeCount calculation based on buffer minutes instead of hour minutes.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-listing/bookings-with-buffer/index.md#2025-04-18_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\nexport const getStartHours = (startTime, endTime, timeZone, intl) => {\n- const hours = getSharpHours(startTime, endTime, timeZone, intl);\n- const removeCount = Math.ceil((hourMinutes + bufferMinutes) / hourMinutes)\n+ const hours = getSharpHours(startTime, endTime, timeZone, intl, true);\n+ const removeCount = Math.ceil((hourMinutes + bufferMinutes) / bufferMinutes)\n  return hours.length < removeCount ? [] : hours.slice(0, -removeCount);\n};\n```\n\n----------------------------------------\n\nTITLE: Filtering Events for User Updates in Integration API Script\nDESCRIPTION: This diff snippet shows how to modify the event filtering in an Integration API script to listen for user update events instead of listing events.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-events/like-feature/index.md#2025-04-18_snippet_12\n\nLANGUAGE: diff\nCODE:\n```\nconst queryEvents = (args) => {\n-  var filter = {eventTypes: \"listing/created,listing/updated\"};\n+  var filter = {eventTypes: \"user/updated\"};\n  return integrationSdk.events.query(\n    {...args, ...filter}\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: File Structure for LineItemBasePriceMaybe Component\nDESCRIPTION: Shows the file path structure for the client-side component that displays line items and needs to be modified to handle seats.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-listing/seats/index.md#2025-04-18_snippet_38\n\nLANGUAGE: shell\nCODE:\n```\n└── src\n    └── components\n        └── OrderBreakdown\n            └── LineItemBasePriceMaybe.js\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for Specific Sharetribe CLI Command\nDESCRIPTION: Command to display help information for a specific Sharetribe CLI command, in this case, the 'login' command.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/introduction/getting-started-with-flex-cli/index.md#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nflex-cli help login\n```\n\n----------------------------------------\n\nTITLE: Configuring Multilanguage Email Subjects in JSON\nDESCRIPTION: This JSON snippet shows how to configure email subjects for multiple languages by using language-specific keys.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/concepts-development/microcopy/index.md#2025-04-18_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  // Translation key for the email subject in English\n  \"NewMessage.Subject_en\": \"{senderName} has sent you a new message\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Select Formatting for Email Subject in JSON\nDESCRIPTION: This JSON snippet shows how to configure a select formatting for an email subject line. It chooses between 'shipped' and 'delivered' based on the 'option' variable.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/concepts-development/microcopy/index.md#2025-04-18_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"PurchaseOrderMarkedAsDelivered.Subject\": \"Your order for {listingTitle} was {option, select, shipping {shipped} other {delivered}}\"\n}\n```\n\n----------------------------------------\n\nTITLE: EditListingExtraFeaturesPanel Component Setup\nDESCRIPTION: Initial setup of the panel component including prop destructuring and constant definitions.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/tutorial-listings/new-wizard-tab/index.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst EditListingExtraFeaturesPanel = props => {\n  const {\n    className,\n    rootClassName,\n    listing,\n    disabled,\n    ready,\n    onSubmit,\n    submitButtonText,\n    panelUpdated,\n    updateInProgress,\n    errors,\n  } = props;\n\n  const classes = classNames(rootClassName || css.root, className);\n  const initialValues = getInitialValues(props);\n  const isPublished = listing?.id && listing?.attributes?.state !== LISTING_STATE_DRAFT;\n  const unitType = listing?.attributes?.publicData?.unitType;\n```\n\n----------------------------------------\n\nTITLE: Using Select Formatting in Handlebars Email Template\nDESCRIPTION: This Handlebars template demonstrates how to use the 't' helper with select formatting in an email template. It loads translations from a JSON file and applies them to the email subject.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/concepts-development/microcopy/index.md#2025-04-18_snippet_19\n\nLANGUAGE: handlebars\nCODE:\n```\n{{set-translations (asset \"content/email-texts.json\")}}\n{{t \"PurchaseOrderMarkedAsDelivered.Subject\"\n\"Your order for {listingTitle} was {option, select, shipping {shipped} other {delivered}}\"\nlistingTitle=transaction.listing.title option=transaction.protected-data.deliveryMethod}}\n```\n\n----------------------------------------\n\nTITLE: Querying Events by Sequence ID\nDESCRIPTION: Example of querying events after a specific sequence ID.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-events/view-events-with-flex-cli/index.md#2025-04-18_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ flex-cli events --after-seqid 3391593 -M my-marketplace-dev\n```\n\n----------------------------------------\n\nTITLE: Defining Field Overrides\nDESCRIPTION: Creates an object to override a specific field (H1) with a custom implementation, including data validation.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-content/options-prop/index.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst fieldOverrides = {\n  heading1: {\n    component: CustomH1,\n    pickValidProps: exposeContentAsChildren,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Server CSP Configuration in Node.js\nDESCRIPTION: Implementation reference for adding custom Content Security Policy (CSP) directives to the server configuration file /server/csp.js for enabling analytics tools like Hotjar.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/concepts-integrations/integrations/index.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/server/csp.js\n```\n\n----------------------------------------\n\nTITLE: Example Marketplace Text Entry\nDESCRIPTION: Demonstrates a specific example of a marketplace text entry for the ManageListingCard component.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-content/how-to-change-ftw-bundled-ui-microcopy/index.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"ManageListingCard.viewListing\": \"View listing\"\n```\n\n----------------------------------------\n\nTITLE: Plus Function Example in Clojure\nDESCRIPTION: Shows how to add a time period to a booking start time.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/references/transaction-process-time-expressions/index.md#2025-04-18_snippet_5\n\nLANGUAGE: clojure\nCODE:\n```\n{:fn/plus [{:fn/timepoint [:time/booking-start]} {:fn/period \"P1D\"}]}\n```\n\n----------------------------------------\n\nTITLE: Creating .dockerignore for Sharetribe Web Template\nDESCRIPTION: A .dockerignore file that excludes node_modules directory during the Docker build process, preventing unnecessary files from being copied into the image since dependencies will be installed inside the container.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-hosting/run-ftw-in-docker-container/index.md#2025-04-18_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n# Ignore node_modules because they get installed in the Dockerfile.\nnode_modules\n```\n\n----------------------------------------\n\nTITLE: Locating Environment Variable File\nDESCRIPTION: Shell command showing the location of the .env file where environment variables are stored.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/tutorial-branding/configuration/index.md#2025-04-18_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n└── .env\n```\n\n----------------------------------------\n\nTITLE: Querying Related Events\nDESCRIPTION: Demonstrates querying events related to a specific resource using the --related-resource parameter.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-events/view-events-with-flex-cli/index.md#2025-04-18_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ flex-cli events --related-resource 5fce86c7-e435-4047-ab3b-dc4fee02d51d -m my-marketplace-dev\n\nSeq ID   Resource ID                           Event type                     Created at local time   Source           Actor\n3471856  5fce86c7-e435-4047-ab3b-dc4fee02d51d  listing/created                2020-12-07 9:47:19 PM   marketplace-api  joe@example.com\n3471857  5fce86c7-e435-4047-ab3b-dc4fee02d51d  listing/updated                2020-12-07 9:47:28 PM   marketplace-api  joe@example.com\n```\n\n----------------------------------------\n\nTITLE: Updating tabCompleted Function\nDESCRIPTION: Modifies the tabCompleted function to check if the SERVICE_HISTORY tab has been completed based on the listing's public data.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-listing/extend-listing-data-in-ftw/index.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst tabCompleted = (tab, listing, config) => {\n  const {\n    availabilityPlan,\n    description,\n    geolocation,\n    price,\n    title,\n    publicData,\n    privateData,\n  } = listing.attributes;\n  const images = listing.images;\n\n  const {\n    transactionType,\n    transactionProcessAlias,\n    unitType,\n    serviceHistory,\n    shippingEnabled,\n    pickupEnabled,\n  } = publicData || {};\n\n  const deliveryOptionPicked =\n    publicData && (shippingEnabled || pickupEnabled);\n\n  switch (tab) {\n    case DETAILS:\n      return !!({\n        description &&\n        title &&\n        transactionType &&\n        transactionProcessAlias &&\n        unitType &&\n        hasValidCustomFieldsInExtendedData(\n          publicData,\n          privateData,\n          config\n        )\n      });\n    case PRICING:\n      return !!price;\n    case PRICING_AND_STOCK:\n      return !!price;\n    case SERVICE_HISTORY:\n      return !!serviceHistory;\n    case DELIVERY:\n      return !!deliveryOptionPicked;\n    case LOCATION:\n      return !!(geolocation && publicData?.location?.address);\n    case AVAILABILITY:\n      return !!availabilityPlan;\n    case PHOTOS:\n      return images && images.length > 0;\n    default:\n      return false;\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Import Statements in State Data Files\nDESCRIPTION: Demonstrates the changes in import statements to use the isBookingProcess helper function instead of BOOKING_PROCESS_NAME.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/tutorial-transaction-process/create-transaction-process/index.md#2025-04-18_snippet_13\n\nLANGUAGE: diff\nCODE:\n```\nimport {\n- BOOKING_PROCESS_NAME,\n+ isBookingProcess,\n  INQUIRY_PROCESS_NAME,\n  PURCHASE_PROCESS_NAME,\n  resolveLatestProcessName,\n  getProcess,\n} from '../../transactions/transaction';\n```\n\n----------------------------------------\n\nTITLE: Parent Component JSX Structure\nDESCRIPTION: Shows how a parent component renders a Circle child component with className prop for styling.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-styling/how-to-customize-ftw-styles/index.md#2025-04-18_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n<div className={css.root}>\n  <Circle className={css.circleDimensions} />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Querying Asset Delivery API with cURL\nDESCRIPTION: Example of how to fetch landing page content using a cURL command to the Asset Delivery API. The client_id parameter must be replaced with your actual client ID.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/concepts-development/headless-content-management/index.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://cdn.st-api.com/v1/assets/pub/client_id/content/pages/landing-page.json\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Search Results with Time Availability Parameter in SearchPage.duck.js\nDESCRIPTION: Reference to code in SearchPage.duck.js that specifies the maximum number of results (24 by default) when using the time availability filter. This can be modified to allow up to 100 results, as pagination is not supported with time-based availability queries.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-availability/availability-management/index.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Reference to SearchPage.duck.js line 21\n```\n\n----------------------------------------\n\nTITLE: Collection Contains Check Helper\nDESCRIPTION: Example of using the 'contains' helper to check if a collection contains a specific value.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/references/email-templates/index.md#2025-04-18_snippet_2\n\nLANGUAGE: handlebars\nCODE:\n```\n{{#contains collection value}}true{{else}}false{{/contains}}\n```\n\n----------------------------------------\n\nTITLE: Extra Features Panel Directory Structure\nDESCRIPTION: Shows where to place the new EditListingExtraFeaturesPanel files in the project structure.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/tutorial-listings/new-wizard-tab/index.md#2025-04-18_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n└── src\n    └── containers\n        └── EditListingPage\n            └── EditListingWizard\n                └── EditListingExtraFeaturesPanel\n                    ├── EditListingExtraFeaturesPanel.js\n                    ├── …\n```\n\n----------------------------------------\n\nTITLE: Add SectionTextMaybe Component\nDESCRIPTION: Implementation of the SectionTextMaybe component to display extra features on the listing page\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/tutorial-listings/new-wizard-tab/index.md#2025-04-18_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n<SectionTextMaybe\n  text={publicData.extraFeatures}\n  heading={intl.formatMessage({ id: 'ListingPage.extraFeaturesTitle' })}\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing LinkedIn Passport Strategy from GitHub\nDESCRIPTION: Command to install the updated LinkedIn Passport strategy that supports OpenID Connect directly from the GitHub repository using Yarn.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-users-and-authentication/enable-open-id-connect-login/index.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n## yarn add <git remote url>#<branch/commit/tag>\nyarn add https://github.com/auth0/passport-linkedin-oauth2#v3.0.0\n```\n\n----------------------------------------\n\nTITLE: Global Font Style Definition\nDESCRIPTION: Defines default font styles using a global CSS class with responsive adjustments.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-styling/how-to-customize-ftw-styles/index.md#2025-04-18_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n.marketplaceDefaultFontStyles {\n  font-family: var(--fontFamily);\n  font-weight: var(--fontWeightMedium);\n  font-size: 14px;\n  line-height: 24px;\n  letter-spacing: -0.1px;\n  /* No margins for default font */\n\n  @media (--viewportMedium) {\n    font-size: 16px;\n    line-height: 32px;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending End Time for Fixed Booking Slots in ListingPage.duck.js\nDESCRIPTION: Code snippet from ListingPage.duck.js that extends the end time of timeslot queries for fixed booking slot listings. For a booking slot with fixed duration (e.g., 2 hours), the end time is extended by that duration to correctly show availability at the end of a month.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-availability/availability-management/index.md#2025-04-18_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Reference to ListingPage.duck.js lines 488-493\n```\n\n----------------------------------------\n\nTITLE: Modifying Order Initiation in CheckoutPage.duck.js\nDESCRIPTION: Updates the order initiation process to include buffer time in booking parameters.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-listing/bookings-with-buffer/index.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { addBuffer } from '../../util/dates';\n...\n\nexport const initiateOrder = (orderParams, transactionId) => (dispatch, getState, sdk) => {\n  dispatch(initiateOrderRequest());\n...\n const quantityMaybe = quantity ? { stockReservationQuantity: quantity } : {};\n\n let bookingParamsMaybe = {};\n\n if (bookingDates) {\n   bookingParamsMaybe = {\n     ...bookingDates,\n     bookingEnd: addBuffer(bookingDates.bookingEnd),\n     bookingDisplayEnd: bookingDates.bookingEnd,\n     bookingDisplayStart: bookingDates.bookingStart,\n   }\n }\n\n  // Parameters only for client app's server\n  const orderData = deliveryMethod ? { deliveryMethod } : {};\n...\n```\n\n----------------------------------------\n\nTITLE: Cloning Integration API Examples Repository\nDESCRIPTION: Use Git to clone the Sharetribe Integration API examples repository and navigate to the project directory.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/introduction/getting-started-with-integration-api/index.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/sharetribe/integration-api-examples.git\n```\n\nLANGUAGE: bash\nCODE:\n```\ncd integration-api-examples\n```\n\n----------------------------------------\n\nTITLE: File Structure for Line Items Server Implementation\nDESCRIPTION: Shows the file path structure for the server-side line item calculation implementation file that needs to be modified.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-listing/seats/index.md#2025-04-18_snippet_32\n\nLANGUAGE: shell\nCODE:\n```\n└── server\n    └── api-util\n        └── lineItems.js\n```\n\n----------------------------------------\n\nTITLE: Simple JSON Marketplace Text Example in Sharetribe\nDESCRIPTION: A basic example of a marketplace text definition using ICU message formatting, containing just a simple phrase.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/concepts-development/microcopy/index.md#2025-04-18_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ManageListingCard.editListing\": \"Edit listing\"\n}\n```\n\n----------------------------------------\n\nTITLE: Select Pattern Message Example\nDESCRIPTION: Shows how to use the select pattern for conditional message formatting based on a variable.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-content/how-to-change-ftw-bundled-ui-microcopy/index.md#2025-04-18_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"BookingBreakdown.description\": \"{mode, select, day {You are booking the following days:} night {You are booking the following nights:} other {You are booking the following {unitType}:}}\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst mode = 'class';\nconst unitType = 'yoga class'\nconst description = intl.formatMessage(\n  { id=\"BookingBreakdown.description\" },\n  { mode, unitType }\n);\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<FormattedMessage\n  id=\"BookingBreakdown.description\"\n  values={{ mode: 'day' }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Text Formatting with ICU Message Format\nDESCRIPTION: Example of using the 'format-text' helper to format numbers and currency values in email templates.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/references/email-templates/index.md#2025-04-18_snippet_1\n\nLANGUAGE: handlebars\nCODE:\n```\n{{format-text \"{amount,number,::.00} {currency}\" amount=money.amount currency=money.currency}}\n```\n\n----------------------------------------\n\nTITLE: Directory Structure Shell Commands\nDESCRIPTION: Shows the file structure for EditListingWizard components and where to place new Extra Features panel files.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/tutorial-listings/new-wizard-tab/index.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n└── src\n    └── containers\n        └── EditListingPage\n            └── EditListingWizard\n                ├── …\n                ├── EditListingAvailabilityPanel\n                ├── EditListingDeliveryPanel\n                ├── EditListingDetailsPanel\n                ├── …\n```\n\n----------------------------------------\n\nTITLE: Previewing Email Template with Custom Context - Bash\nDESCRIPTION: Command to preview an email template using a custom context file with flex-cli.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-messaging/edit-email-templates-with-flex-cli/index.md#2025-04-18_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nflex-cli notifications preview --template process/templates/booking-new-request --context sample-template-context.json -m my-marketplace-dev\n```\n\n----------------------------------------\n\nTITLE: Effective Permission Set Structure\nDESCRIPTION: Demonstrates the structure of the effectivePermissionSet relationship in currentUser resource, showing how final permissions are calculated considering both user and marketplace settings.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/concepts-users-and-authentication/user-permissions/index.md#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n        \"~:relationships\": {\n            \"~:effectivePermissionSet\": {\n                \"~:data\": {\n                    \"~:id\": \"~u6707a063-994a-4310-92c8-422831800720\",\n                    \"~:type\": \"~:permissionSet\"\n                }\n            }\n        },\n      },\n    \"~:included\": [\n      {\n        \"~:id\": \"~u6707a063-994a-4310-92c8-422831800720\",\n        \"~:type\": \"~:permissionSet\",\n        \"~:attributes\": {\n            \"~:postListings\": \"~:permission/deny\",\n            \"~:read\": \"~:permission/allow\",\n            \"~:initiateTransactions\": \"~:permission/deny\"\n        }\n    }\n  ]\n```\n\n----------------------------------------\n\nTITLE: Initializing Helmet Fee Values in EditListingPricingPanel\nDESCRIPTION: Gets initial values for price and helmet fee from listing attributes, converting the helmet fee data to a Money object.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/tutorial-transaction-process/customize-pricing/index.md#2025-04-18_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\nconst getInitialValues = params => {\n  const { listing } = params;\n  const { price, publicData } = listing?.attributes || {};\n\n+ const helmetFee = publicData?.helmetFee || null;\n\n+ const helmetFeeAsMoney = helmetFee\n+   ? new Money(helmetFee.amount, helmetFee.currency)\n+   : null;\n\n  return {\n    price,\n+   helmetFee: helmetFeeAsMoney\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Marketplace Text Translations\nDESCRIPTION: JSON translations for the Extra Features panel UI elements\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/tutorial-listings/new-wizard-tab/index.md#2025-04-18_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"EditListingWizard.tabLabelExtraFeatures\": \"Extra features\",\n  \"EditListingExtraFeaturesPanel.createListingTitle\": \"Extra features\",\n  \"EditListingExtraFeaturesPanel.title\": \"Edit the extra features of {listingTitle}\",\n  \"EditListingExtraFeaturesForm.extraFeaturesInputPlaceholder\": \"Explain your bike extra features...\",\n  \"EditListingExtraFeaturesForm.updateFailed\": \"Updating listing failed\",\n  \"EditListingExtraFeaturesForm.showListingFailed\": \"Fetching listing failed\",\n  \"EditListingWizard.default-booking.new.savePricing\": \"Next: Extra features\",\n  \"EditListingWizard.default-booking.new.saveExtraFeatures\": \"Next: Availability\",\n  \"EditListingWizard.edit.saveExtraFeatures\": \"Save changes\",\n  \"ListingPage.extraFeaturesTitle\": \"Extra features\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Github Authentication Functions in Sharetribe API Router\nDESCRIPTION: This code snippet imports the Github authentication functions from the newly created github.js file into the API router.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-users-and-authentication/setup-oidc-proxy/index.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst {\n  authenticateGithub,\n  authenticateGithubCallback,\n} = require('./api/auth/github');\n```\n\n----------------------------------------\n\nTITLE: Email Template Update - Diff\nDESCRIPTION: Modification to the email template to include the provider's phone number from protected data.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/tutorial-transaction-process/use-protected-data-in-emails/index.md#2025-04-18_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n...\n    {{#each}}\n+   <p style=\"font-size:16px;line-height:1.4;margin:16px 0;color:#484848\">In case you need to contact {{provider.display-name}} directly, you can use the following phone number: {{protected-data.providerPhoneNumber}}</p>\n    <p style=\"font-size:16px;line-height:1.4;margin:16px 0;color:#484848\">Your card has been charged for\n      {{> format-money money=payin-total}}. Here&#x27;s the booking breakdown.</p>\n```\n\n----------------------------------------\n\nTITLE: URL Encoding Helper\nDESCRIPTION: Example of using the 'url-encode' helper to safely encode strings for URLs.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/references/email-templates/index.md#2025-04-18_snippet_4\n\nLANGUAGE: handlebars\nCODE:\n```\n{{url-encode \"Share & Tribe\"}}\n```\n\n----------------------------------------\n\nTITLE: Passing Extra Props to Root Component\nDESCRIPTION: Pattern for ensuring that a component passes any extra props to its root element, which is essential for components that need to be extended with styled-components or other higher-order components.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/docs/coding-conventions.md#2025-04-18_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst MyComponent = props => {\n  cosnt { prop1, prop2, ...rest } = props;\n\n  // `rest` props are given as props to the root component\n  return (\n    <div {...rest}>\n      {/* Internal components that use `prop1` and `prop2` */}\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Constructing Article URLs in Markdown\nDESCRIPTION: Demonstrates how article URLs are constructed using the category and slug from the frontmatter. The example shows the structure of a complete URL for the documentation site.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/docs/writing-articles.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://www.sharetribe.com / docs        / introduction / introducing-sharetribe /\n| domain                   | path prefix | category   | slug             | trailing slash\n```\n\n----------------------------------------\n\nTITLE: Basic Component CSS Structure\nDESCRIPTION: Demonstrates the basic CSS structure for a Circle component using the .root class naming convention.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-styling/how-to-customize-ftw-styles/index.md#2025-04-18_snippet_8\n\nLANGUAGE: css\nCODE:\n```\n.root {\n  background-color: tomato;\n  border-radius: 50%;\n}\n```\n\n----------------------------------------\n\nTITLE: Min Function Example in Clojure\nDESCRIPTION: Demonstrates using the min function to compare booking start and display start times.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/references/transaction-process-time-expressions/index.md#2025-04-18_snippet_4\n\nLANGUAGE: clojure\nCODE:\n```\n{:fn/min [{:fn/timepoint [:time/booking-start]} {:fn/timepoint [:time/booking-display-start]}]}\n```\n\n----------------------------------------\n\nTITLE: Formatting Helmet Fee for Display (JSX)\nDESCRIPTION: This code formats the helmet fee for display in the checkbox label. It uses the formatMoney function to ensure localized formatting and creates a label using internationalization.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/tutorial-transaction-process/customize-pricing/index.md#2025-04-18_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nconst formattedHelmetFee = helmetFee\n  ? formatMoney(intl, new Money(helmetFee.amount, helmetFee.currency))\n  : null;\n\nconst helmetFeeLabel = intl.formatMessage(\n  { id: 'BookingDatesForm.helmetFeeLabel' },\n  { fee: formattedHelmetFee }\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Helmet Fee to OrderData Object (JSX/Diff)\nDESCRIPTION: This snippet updates the calculateLineItems function to include the helmet fee selection in the orderData object, which is used for constructing transaction line items.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/tutorial-transaction-process/customize-pricing/index.md#2025-04-18_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\nconst calculateLineItems = (\n  listingId,\n  isOwnListing,\n  fetchLineItemsInProgress,\n  onFetchTransactionLineItems,\n  seatsEnabled\n) => formValues => {\n  const { startDate, endDate, seats } = formValues?.values || {};\n\n  const seatCount = seats ? parseInt(seats, 10) : 1;\n\n+ const hasHelmetFee = formValues.values?.helmetFee;\n\n  const orderData = {\n    bookingStart: startDate,\n    bookingEnd: endDate,\n    ...(seatsEnabled && { seats: seatCount }),\n+   hasHelmetFee,\n  };\n\n  if (startDate && endDate && !fetchLineItemsInProgress) {\n    onFetchTransactionLineItems({\n      orderData,\n      listingId,\n      isOwnListing,\n    });\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Server Data Loading in Sharetribe Web Template\nDESCRIPTION: Shell command output showing the directory structure for the server's data loading functionality, which is responsible for fetching translations during server-side rendering.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-content/hosted-microcopy/index.md#2025-04-18_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n└── server\n    └── dataLoader.js\n```\n\n----------------------------------------\n\nTITLE: Listing Processes with Sharetribe CLI\nDESCRIPTION: Command to list all existing processes in a marketplace using Sharetribe CLI\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-transaction-process/edit-transaction-process-with-flex-cli/index.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflex-cli process list -m my-marketplace-dev\n```\n\n----------------------------------------\n\nTITLE: File Structure for Backend Line Item Updates (Shell)\nDESCRIPTION: This snippet shows the file structure for updating the backend pricing logic to include the new helmet fee line item.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/tutorial-transaction-process/customize-pricing/index.md#2025-04-18_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n└── server\n    └── api-util\n        ├── lineItems.js\n        └── lineItemHelpers.js\n```\n\n----------------------------------------\n\nTITLE: Modifying WeeklyCalendar.PlanEntry Component in React\nDESCRIPTION: Updates the WeeklyCalendar.PlanEntry component to pass the entry.seats value as a new prop to the TimeRange component.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-listing/seats/index.md#2025-04-18_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\n  return (\n    <div className={css.planEntry} {...rest}>\n      <div\n        className={classNames(css.availabilityDot, {\n          [css.isAvailable]: entry.seats > 0,\n        })}\n      />\n      {useFullDays ? (\n        availabilityInfo\n      ) : (\n        <TimeRange\n          className={css.timeRange}\n          startDate={parseLocalizedTime(date, entry.startTime, timeZone)}\n          endDate={getEndTimeAsDate(date, entry.endTime, isDaily, timeZone)}\n+         seats={entry.seats}\n          dateType={useFullDays ? DATE_TYPE_DATE : DATE_TYPE_TIME}\n          timeZone={timeZone}\n        />\n      )}\n    </div>\n  );\n```\n\n----------------------------------------\n\nTITLE: Custom Media Queries Directory Structure\nDESCRIPTION: Shows the file structure for custom media queries CSS implementation.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-routing/how-code-splitting-works-in-ftw/index.md#2025-04-18_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n└── src\n    └── styles\n        └── customMediaQueries.css\n```\n\n----------------------------------------\n\nTITLE: File Structure for Default Location Configuration in Sharetribe Flex\nDESCRIPTION: Shows the file path to the configDefaultLocationSearches.js file where default locations are configured.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/tutorial-branding/change-default-locations/index.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n└── src\n    └── config\n        └── _configDefaultLocationSearches.js\n```\n\n----------------------------------------\n\nTITLE: Supported Hosting Environments List\nDESCRIPTION: List of hosting environments that support Node.js servers for Sharetribe template deployment, including Heroku, Render, Fly.io, Microsoft Azure, and containerized environments.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/introduction/start-customizing/index.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- Heroku\n- Render\n- Fly.io\n- Microsoft Azure\n- Containerized environments\n```\n\n----------------------------------------\n\nTITLE: Filtering Listings by Numeric Range in Sharetribe\nDESCRIPTION: Example of using the Sharetribe SDK to query listings based on a numeric range in their public data. This snippet filters to show only listings with user skill levels between 4 and 7.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/concepts-listings/how-the-search-works/index.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nsdk.listings.query({ pub_userSkillLevel: \"4,7\" })\n```\n\n----------------------------------------\n\nTITLE: Loading Privacy Policy Page Data\nDESCRIPTION: Function to fetch the Privacy Policy page assets using a predefined asset name\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-content/page-builder/index.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const loadData = (params, search) => dispatch => {\n  const pageAsset = {\n    privacyPolicy: `content/pages/${ASSET_NAME}.json`,\n  };\n  return dispatch(fetchPageAssets(pageAsset, true));\n};\n```\n\n----------------------------------------\n\nTITLE: Pulling Process Command\nDESCRIPTION: Command to pull a specific process version from the marketplace\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-transaction-process/edit-transaction-process-with-flex-cli/index.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nflex-cli process pull --process default-booking --version 1 --path process -m my-marketplace-dev\n```\n\n----------------------------------------\n\nTITLE: Pluralization Message Example\nDESCRIPTION: Demonstrates how to implement pluralization in messages using the plural keyword.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-content/how-to-change-ftw-bundled-ui-microcopy/index.md#2025-04-18_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"ManageListingsPage.youHaveListings\":\n  \"You have {count} {count, plural, one {listing} other {listings}}\"\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<FormattedMessage\n  id=\"ManageListingsPage.youHaveListings\"\n  values={{ count: 3 }}\n/>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nintl.formatMessage(\n  { id: 'ManageListingsPage.youHaveListings' },\n  { count: 1 }\n);\n```\n\n----------------------------------------\n\nTITLE: JSON Key-Value Syntax for Email Templates in Sharetribe\nDESCRIPTION: Shows the key-value syntax format used for email templates in Sharetribe, similar to the marketplace text format.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/concepts-development/microcopy/index.md#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"<email template name>.<email template section>\": \"<message>\",\n```\n\n----------------------------------------\n\nTITLE: Cloning Sharetribe Developer Documentation Repository\nDESCRIPTION: Command to clone the Sharetribe Developer documentation repository from GitHub using SSH.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:sharetribe/flex-docs.git\n```\n\n----------------------------------------\n\nTITLE: Directory Structure Example for Avatar Component\nDESCRIPTION: Shows the typical folder structure for a component in Sharetribe Web Template, including the main component file, example file, and CSS module.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/tutorial-branding/first-edit/index.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n├── Avatar.example.js\n├── Avatar.js\n└── Avatar.module.css\n```\n\n----------------------------------------\n\nTITLE: Setting Up Translations and Locale for Built-in Notifications\nDESCRIPTION: This snippet shows how to set up translations and locale for built-in email notifications using Handlebars syntax. It includes adding asset references for email texts and localization.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-content/use-translations-in-emails/index.md#2025-04-18_snippet_4\n\nLANGUAGE: handlebars\nCODE:\n```\n{{set-translations (asset \"content/email-texts.json\")}}\n{{set-locale (asset \"general/localization.json\" \"locale\" \"en_US\")}}\n```\n\n----------------------------------------\n\nTITLE: Timepoint Expression Example in Clojure\nDESCRIPTION: Shows a simple timepoint expression using the booking-end timepoint.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/references/transaction-process-time-expressions/index.md#2025-04-18_snippet_1\n\nLANGUAGE: clojure\nCODE:\n```\n{fn/timepoint [:time/booking-end]\n```\n\n----------------------------------------\n\nTITLE: Updating Account Settings Pages in JavaScript\nDESCRIPTION: This diff demonstrates how to update the ACCOUNT_SETTINGS_PAGES constant in the routeConfiguration.js file to remove Stripe-related pages (StripePayoutPage and PaymentMethodsPage).\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-payments/removing-stripe/index.md#2025-04-18_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n-export const ACCOUNT_SETTINGS_PAGES = [\n-  'ContactDetailsPage',\n-  'PasswordChangePage',\n-  'StripePayoutPage',\n-  'PaymentMethodsPage',\n-];\n+export const ACCOUNT_SETTINGS_PAGES = ['ContactDetailsPage', 'PasswordChangePage'];\n```\n\n----------------------------------------\n\nTITLE: Updating Form Field Change Handlers (JSX/Diff)\nDESCRIPTION: This code updates the onChange handler for the FieldSelect component to include the helmet fee in line item calculations and reset the helmet fee checkbox when seats are changed.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/tutorial-transaction-process/customize-pricing/index.md#2025-04-18_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n<FieldSelect\n  name=\"seats\"\n  id=\"seats\"\n  label={intl.formatMessage({ id: 'BookingDatesForm.seatsTitle' })}\n  disabled={!(startDate && endDate)}\n  className={css.fieldSeats}\n  onChange={values => {\n+   if (helmetFeeMaybe) {\n+     formApi.change('helmetFee', false);\n+   }\n    onHandleFetchLineItems({\n      values: {\n        startDate: startDate,\n        endDate: endDate,\n        seats: values,\n+       helmetFee: helmetFeeMaybe ? false : undefined,\n\n      },\n    });\n  }}\n>\n```\n\n----------------------------------------\n\nTITLE: File Structure for Listing Configuration\nDESCRIPTION: Shows the directory structure for configuring listing extended data in Sharetribe Web Template.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-search/change-search-filters-in-ftw/index.md#2025-04-18_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n└── src\n    └── config\n        └── configListing.js\n```\n\n----------------------------------------\n\nTITLE: Process Validation Command\nDESCRIPTION: Command to validate the modified process.edn file\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-transaction-process/edit-transaction-process-with-flex-cli/index.md#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nflex-cli process --path process\n```\n\n----------------------------------------\n\nTITLE: Modifying Email Template Context Data - Diff\nDESCRIPTION: Example showing how to modify the display name in the email template context JSON file.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-messaging/edit-email-templates-with-flex-cli/index.md#2025-04-18_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n    \"customer\" : {\n      \"id\" : \"ef7f40d5-da66-489a-957b-641313b68204\",\n      \"first-name\" : \"Jane\",\n      \"last-name\" : \"Pritchett\",\n-     \"display-name\" : \"Jane P\",\n+     \"display-name\" : \"Mary P\",\n```\n\n----------------------------------------\n\nTITLE: Import EditListingExtraFeaturesPanel Component\nDESCRIPTION: Diff showing the addition of the import statement for the new ExtraFeatures panel\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/tutorial-listings/new-wizard-tab/index.md#2025-04-18_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n  import EditListingPricingPanel from './EditListingPricingPanel/EditListingPricingPanel';\n  import EditListingPricingAndStockPanel from './EditListingPricingAndStockPanel EditListingPricingAndStockPanel';\n+ import EditListingExtraFeaturesPanel from './EditListingExtraFeaturesPanel/EditListingExtraFeaturesPanel';\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies\nDESCRIPTION: Command to install the required packages for the project using Yarn package manager.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/README.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: CSS Module Style Definition for Section Container\nDESCRIPTION: CSS module code showing the root styling for section containers, including background properties and odd-numbered sibling targeting.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/tutorial-branding/first-edit/index.md#2025-04-18_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.root {\n  background-size: cover;\n  background-position: center center;\n  background-repeat: no-repeat;\n  width: 100%;\n  position: relative;\n\n  &:nth-of-type(odd) {\n    background-color: var(--colorWhite);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Email Text Keys and Values in JSON Format\nDESCRIPTION: This JSON snippet demonstrates how to add email text keys and values to the email texts editor. It shows the structure for defining translation keys and their corresponding messages with variable placeholders.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-content/use-translations-in-emails/index.md#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n...,\n \"BookingNewRequest.MarketplaceFeeLabel\": \"{marketplaceName} fee\",\n \"BookingNewRequest.Subject\": \"{customerDisplayName} requested to book {listingTitle}\",\n...\n}\n```\n\n----------------------------------------\n\nTITLE: Importing DeleteAccountForm in DeleteAccountPage\nDESCRIPTION: Demonstrates how to import the DeleteAccountForm component into the DeleteAccountPage.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-users-and-authentication/implement-delete-user/index.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport DeleteAccountForm from './DeleteAccountForm/DeleteAccountForm';\n```\n\n----------------------------------------\n\nTITLE: Example RSA Private Key Format for OpenID Connect Proxy\nDESCRIPTION: Example of the expected format for the RSA private key file used in the OpenID Connect proxy implementation.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-users-and-authentication/setup-oidc-proxy/index.md#2025-04-18_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# swt_rsa\n\n-----BEGIN RSA PRIVATE KEY-----\nprivate key\nvalue\nhere\n-----END RSA PRIVATE KEY-----\n```\n\n----------------------------------------\n\nTITLE: Removing Stripe Script from HTML\nDESCRIPTION: Instructions for removing the Stripe script from the public/index.html file in the Sharetribe web template.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-payments/removing-stripe/index.md#2025-04-18_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://github.com/sharetribe/web-template/blob/main/public/index.html#L171\"></script>\n```\n\n----------------------------------------\n\nTITLE: Events Command Help Documentation\nDESCRIPTION: Shows the help documentation for the Sharetribe CLI events command, including all available options and parameters.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-events/view-events-with-flex-cli/index.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ flex-cli help events\nGet a list of events.\n\nUSAGE\n  $ flex-cli events\n\nOPTIONS\n  --after-seqid=SEQUENCE_ID               Show events with sequence ID larger than (after) the specified.\n  --after-ts=TIMESTAMP                    Show events created after the given timestamp, e.g. '--after-ts 2020-10-10' or '--after-ts 2020-10-10T10:00.000Z'\n  --before-seqid=SEQUENCE_ID              Show events with sequence ID smaller than (before) the specified.\n  --before-ts=TIMESTAMP                   Show events created before the given timestamp, e.g. '--before-ts 2020-11-15' or '--before-ts 2020-11-15T12:00.000Z'\n  --filter=EVENT_TYPES                    Show only events of given types, e.g. '--filter listing/updated,user'.\n  --json                                  Print full event data as one JSON string.\n  --json-pretty                           Print full event data as indented multi-line JSON string.\n  --related-resource=RELATED_RESOURCE_ID  Show events that are related to a specific resource ID.\n  --resource=RESOURCE_ID                  Show events for a specific resource ID only.\n  --seqid=SEQUENCE_ID                     Get only the event with the given sequence id.\n  -l, --limit=NUMBER                      Show given number of events (default and max is 100). Can be combined with other parameters.\n  -m, --marketplace=MARKETPLACE_ID        marketplace identifier\n```\n\n----------------------------------------\n\nTITLE: Setting RSA Public Key for Github Login in Sharetribe\nDESCRIPTION: This snippet shows the format for the RSA public key used in the Github login integration. The key should be set as an environment variable.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-users-and-authentication/setup-oidc-proxy/index.md#2025-04-18_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n-----BEGIN RSA PUBLIC KEY-----\npublic key\nvalue\nhere\n-----END RSA PUBLIC KEY-----\n```\n\n----------------------------------------\n\nTITLE: Adding Seats Props to FieldDateRangeInput Component\nDESCRIPTION: Adds the seatsArray and seatsLabel props to the destructured props in the FieldDateRangeInput render function.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-listing/seats/index.md#2025-04-18_snippet_25\n\nLANGUAGE: diff\nCODE:\n```\n  render() {\n    /* eslint-disable no-unused-vars */\n    const {\n      className,\n\t...\n      onFocusedInputChange,\n+     seatsArray,\n+ \t  seatsLabel,\n      ...rest\n    } = this.props;\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server\nDESCRIPTION: Command to start the Gatsby development server for local testing and development.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/README.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn run dev\n```\n\n----------------------------------------\n\nTITLE: Styling Like Feature Component\nDESCRIPTION: CSS styles for the like feature heart icon and interaction states.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-events/like-feature/index.md#2025-04-18_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.heartIcon {\n  border-radius: 11px;\n  cursor: pointer;\n  display: inline-block;\n  padding: 5px;\n  &:hover {\n    background-color: #e3e1e1;\n  }\n}\n\n.heartDisabled > svg {\n  fill: var(--marketplaceColorLight);\n}\n\n.heartIcon > svg {\n  fill: #fdb7b0;\n  transition: all 0.2s;\n}\n\n.iconLiked > svg {\n  fill: var(--marketplaceColorLight);\n  transition: all 0.2s;\n}\n```\n\n----------------------------------------\n\nTITLE: User Resource Example in EDN\nDESCRIPTION: Complete example of a user resource including profile information, email, roles, and creation timestamp.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-migrations/migrating-from-outside-sharetribe/index.md#2025-04-18_snippet_5\n\nLANGUAGE: edn\nCODE:\n```\n[[:im.user/id :user/john]\n  #:im.user{:createdAt #inst \"2018-04-17T06:55:04.291-00:00\"\n            :primaryEmail {:im.email/address \"foo@sharetribe.com\"\n                          :im.email/verified true}\n            :profile {:im.userProfile/firstName \"John\"\n                      :im.userProfile/lastName \"Doe\"\n                      :im.userProfile/displayName \"John D\"\n                      :im.userProfile/bio \"He's just a poor boy from a poor family.\\nSpare him his life from this monstrosity.\"\n                      :im.userProfile/publicData { :premiumAccount true }\n                      :im.userProfile/avatar #im/ref :avatar/john}\n            :role [:user.role/customer :user.role/provider]}]\n```\n\n----------------------------------------\n\nTITLE: Updating Subject Line Files with Translation Helper\nDESCRIPTION: This snippet shows how to update subject line files to use the {{t}} translation helper. It includes setting translations and replacing the existing syntax with the new helper function.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-content/use-translations-in-emails/index.md#2025-04-18_snippet_2\n\nLANGUAGE: handlebars\nCODE:\n```\n## original message\n{{transaction.customer.display-name}} has requested to book {{transaction.listing.title}}\n\n## becomes\n## {{set-translations (asset \"content/email-texts.json\")}}\n## {{t \"templatename.messagekey\" \"fallbackmessage\" variableName1=variableValue1 variableName2=variableValue2...}}\n{{set-translations (asset \"content/email-texts.json\")}}{{t \"BookingNewRequest.Subject\" \"{customerDisplayName} requested to book {listingTitle}\" customerDisplayName=transaction.customer.display-name listingTitle=transaction.listing.title}}\n```\n\n----------------------------------------\n\nTITLE: Implementing Seats Selection for Hourly Bookings in FieldDateAndTimeInput\nDESCRIPTION: Creates a seatsArray and conditional selection component for hourly bookings by using the existing selectedTimeSlot data.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-listing/seats/index.md#2025-04-18_snippet_29\n\nLANGUAGE: jsx\nCODE:\n```\nconst seatsArray =\n  Array(selectedTimeSlot?.attributes.seats)\n    .fill()\n    .map((_, i) => i + 1) || null;\n\nconst seatsSelectionMaybe =\n  seatsArray?.length > 1 ? (\n    <FieldSelect name=\"seats\" id=\"seats\" label={seatsLabel}>\n      {seatsArray.map(s => (\n        <option value={s} key={s}>\n          {s}\n        </option>\n      ))}\n    </FieldSelect>\n  ) : null;\n```\n\n----------------------------------------\n\nTITLE: File Structure for Transaction Process\nDESCRIPTION: Shows the directory structure for transaction process files in the src folder.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/tutorial-transaction-process/create-transaction-process/index.md#2025-04-18_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n└── src\n    └── transactions\n        └── transactionProcessBooking.js\n```\n\n----------------------------------------\n\nTITLE: Sending Preview Email\nDESCRIPTION: This bash command shows how to send a test preview email using the Flex CLI. It sends the rendered email to the admin user's email address for verification in an email client software.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-messaging/edit-email-templates-with-flex-cli/index.md#2025-04-18_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nflex-cli notifications send --template process/templates/booking-new-request -m my-marketplace-dev\n```\n\n----------------------------------------\n\nTITLE: Native Event Data Format Example\nDESCRIPTION: Example of an event in native format showing a listing title update with basic event structure including resource and previous values.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/references/events/index.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"ef98e897-5b81-49a5-aca6-01d9759df075\",\n  \"resource\": {\n    \"id\": \"5bbb2f6f-568f-470a-9949-a655e3f6ac46\",\n    \"title\": \"Listing title\",\n    \"author\": {\"id\": \"5cf4c0eb-513f-419b-a8be-bdb6c14be10a\"}\n  },\n  \"previousValues\": {\n    \"title\": \"old title\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Page Data Loading API Directory Structure\nDESCRIPTION: Shows the directory structure for page data loading API implementation.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-routing/how-code-splitting-works-in-ftw/index.md#2025-04-18_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n└── src\n    └── containers\n        └── pageDataLoadingAPI.js\n```\n\n----------------------------------------\n\nTITLE: Clearing Gatsby Cache\nDESCRIPTION: Command to clear the Gatsby cache, which may be necessary after certain changes to the project structure or configuration.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/README.md#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn run clean\n```\n\n----------------------------------------\n\nTITLE: Basic Events Query\nDESCRIPTION: Example of querying events without additional parameters, showing the 100 latest events for a marketplace.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-events/view-events-with-flex-cli/index.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ flex-cli events -m my-marketplace-dev\n\nSeq ID   Resource ID                           Event type                     Created at local time   Source           Actor\n3391589  5fca1e5b-2004-4479-a68c-dfc8a03083b8  availabilityException/created  2020-12-04 1:32:43 PM   marketplace-api  jane@example.com\n3391590  5fca1e5c-eda8-4f54-ac30-ee7fe1010d11  availabilityException/created  2020-12-04 1:32:44 PM   marketplace-api  jane@example.com\n3462923  5dfb4a42-8937-47b5-b482-44679828939c  user/updated                   2020-12-07 3:17:30 PM   console          joe@example.com\n```\n\n----------------------------------------\n\nTITLE: Sample Email Structure in EDN\nDESCRIPTION: Shows the structure of email data within a user resource, including address and verification status.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-migrations/migrating-from-outside-sharetribe/index.md#2025-04-18_snippet_3\n\nLANGUAGE: edn\nCODE:\n```\n:primaryEmail {:im.email/address \"foo@sharetribe.com\"\n               :im.email/verified true}\n```\n\n----------------------------------------\n\nTITLE: Displaying Sharetribe CLI Help\nDESCRIPTION: Command to display the list of available commands in Sharetribe CLI. This is useful for exploring CLI functionality.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/introduction/getting-started-with-flex-cli/index.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nflex-cli help\n```\n\n----------------------------------------\n\nTITLE: Verifying Sharetribe CLI Installation\nDESCRIPTION: Command to verify successful installation of Sharetribe CLI. It displays the CLI version and lists available commands.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/introduction/getting-started-with-flex-cli/index.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nflex-cli\n```\n\n----------------------------------------\n\nTITLE: File Structure for EditListingWizardTab\nDESCRIPTION: Shows the directory structure for the EditListingWizardTab component location\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/tutorial-listings/new-wizard-tab/index.md#2025-04-18_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n└── src\n    └── containers\n        └── EditListingPage\n            └── EditListingWizard\n                ├── EditListingWizardTab.js\n                ├── …\n```\n\n----------------------------------------\n\nTITLE: Starting Server-Side Rendering Development\nDESCRIPTION: Command to run the frontend production build with Express.js server for SSR development\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-introduction/01-how-to-customize-ftw/index.md#2025-04-18_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nyarn run dev-server\n```\n\n----------------------------------------\n\nTITLE: Running Sharetribe Web Template Docker Container\nDESCRIPTION: Shell command to run the Sharetribe Web Template Docker container in detached mode, mapping port 4000 of the container to port 4000 on the host machine.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-hosting/run-ftw-in-docker-container/index.md#2025-04-18_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ docker run -dp 4000:4000 sharetribe-docker\n```\n\n----------------------------------------\n\nTITLE: Importing Moment.js Locale in Sharetribe Web Template (JavaScript)\nDESCRIPTION: This code imports the Italian locale for the Moment.js library, which is used for date and time formatting in the Sharetribe Web Template.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-content/change-ftw-language/index.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport 'moment/locale/it';\n```\n\n----------------------------------------\n\nTITLE: Previewing Email Template with Flex CLI\nDESCRIPTION: Command to preview the newly created email template using Sharetribe Flex CLI\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/tutorial-transaction-process/add-email-notification/index.md#2025-04-18_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nflex-cli notifications preview --template biketribe-instant-booking/templates/booking-reminder-customer --marketplace=biketribe-dev\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server for Sharetribe Web Template\nDESCRIPTION: This command starts the development server for the Sharetribe Web Template. It uses Webpack's dev-server with Hot Module Replacement and automatically opens the application in a browser at http://localhost:3000.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/introduction/getting-started-with-ftw-daily/index.md#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn run dev\n```\n\n----------------------------------------\n\nTITLE: Parsing Raw Seats Value from Form Values in ListingPage.shared.js\nDESCRIPTION: Adds the seats parameter to the destructuring of form values in the handleSubmit function, which extracts the raw seats value from the values submitted through the order panel.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-listing/seats/index.md#2025-04-18_snippet_42\n\nLANGUAGE: diff\nCODE:\n```\n  const {\n    bookingDates,\n    bookingStartTime,\n    bookingEndTime,\n    bookingStartDate, // not relevant (omit)\n    bookingEndDate, // not relevant (omit)\n    quantity: quantityRaw,\n+   seats: seatsRaw,\n    deliveryMethod,\n    ...otherOrderData\n  } = values;\n```\n\n----------------------------------------\n\nTITLE: Installing Sharetribe CLI with Yarn\nDESCRIPTION: Command to install Sharetribe CLI globally using Yarn package manager. This is the standard installation method for most users.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/introduction/getting-started-with-flex-cli/index.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn global add flex-cli\n```\n\n----------------------------------------\n\nTITLE: Displaying Directory Structure for Routing Files\nDESCRIPTION: Shows the file structure for the routing configuration in the Sharetribe Web Template.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-routing/how-routing-works-in-ftw/index.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n└── src\n    └── routing\n        ├── routeConfiguration.js\n        └── Routes.js\n```\n\n----------------------------------------\n\nTITLE: Cloning Sharetribe Web Template Repository\nDESCRIPTION: Command to clone the Sharetribe Web Template repository from GitHub to your local machine.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/introduction/getting-started-with-ftw-daily/index.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/sharetribe/web-template.git\n```\n\n----------------------------------------\n\nTITLE: Security Audit in CI\nDESCRIPTION: Command to perform security vulnerability checks using yarn audit. Compares results against exceptions defined in .auditrc file and reports vulnerable dependencies.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-testing-error-handling/how-to-use-ci-with-ftw/index.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn run audit\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image for Sharetribe Web Template\nDESCRIPTION: Shell command to build a Docker image named 'sharetribe-docker' from the Dockerfile in the current directory.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-hosting/run-ftw-in-docker-container/index.md#2025-04-18_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ docker build -t sharetribe-docker .\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Server Renderer in Sharetribe Web Template\nDESCRIPTION: Shell command output showing the directory structure for the server's renderer, which is responsible for rendering the app with the fetched translations.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-content/hosted-microcopy/index.md#2025-04-18_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n└── server\n    └── renderer.js\n```\n\n----------------------------------------\n\nTITLE: Logging into Sharetribe CLI\nDESCRIPTION: Command to initiate the login process for Sharetribe CLI. This will prompt for the user's API key.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/introduction/getting-started-with-flex-cli/index.md#2025-04-18_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nflex-cli login\n```\n\n----------------------------------------\n\nTITLE: Defining Article Frontmatter in YAML\nDESCRIPTION: Shows the required and optional fields for the frontmatter metadata section of an article. This YAML block is used to provide essential information about the article, such as title, slug, and category.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/docs/writing-articles.md#2025-04-18_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- title (required): title of the article\n- slug (required): the URL slug of the article (see the\n  [Article URL](#article-url) section below)\n- updated (required): date when article was last modified\n- category (required): category of the article\n- ingress (required): ingress text for the article\n- skills (optional): Comma separated list of skills that are\n  required to achieve the goal of the article. When this is defined, the\n  skills are shown in the article info section in the beginning of the\n  article page.\n- toc (optional currently ignored): When defined, a full table\n  of contents will be shown in the content column. This is useful for\n  articles with lots of headers that don't fit in the side column.\n- published (optional, true or false): by default articles are\n  not published. They need to be explicitly published to show up in\n  the site. In dev mode also unpublished articles are shown.\n```\n\n----------------------------------------\n\nTITLE: Using FormattedMessage Component\nDESCRIPTION: Demonstrates how to use the FormattedMessage component for displaying translations in JSX.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-content/how-to-change-ftw-bundled-ui-microcopy/index.md#2025-04-18_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<FormattedMessage id=\"SomeComponent.someKey\" />\n```\n\n----------------------------------------\n\nTITLE: File structure for country codes in Sharetribe Web Template\nDESCRIPTION: Shows the file path structure for the countryCodes.js file which contains ISO 3166-1 alpha-2 country codes used by Stripe API for billing address information in the StripePaymentForm on CheckoutPage.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-content/change-ui-texts/index.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n└── src\n    └── translations\n        └── countryCodes.js\n```\n\n----------------------------------------\n\nTITLE: Creating New Transaction Process\nDESCRIPTION: CLI command to create a new transaction process using an existing template\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/tutorial-transaction-process/create-transaction-process/index.md#2025-04-18_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nflex-cli process create --path=./instant-booking --process=biketribe-instant-booking --marketplace=biketribe-dev\n```\n\n----------------------------------------\n\nTITLE: Importing Test Messages in Sharetribe Web Template (JavaScript)\nDESCRIPTION: This snippet demonstrates how to import localized messages for use in tests in the Sharetribe Web Template. It imports Italian translations for test helpers.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-content/change-ftw-language/index.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport messages from '../translations/it.json';\n```\n\n----------------------------------------\n\nTITLE: Building Sharetribe Web Template for Production - Bash\nDESCRIPTION: Command to build the React application for production deployment. This creates an optimized production build in the build folder.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-hosting/how-to-deploy-ftw-to-production/index.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Listing Marketplace Processes\nDESCRIPTION: Command to list all processes in a specific marketplace. Requires the marketplace ID as an argument.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/introduction/getting-started-with-flex-cli/index.md#2025-04-18_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nflex-cli process list -m my-marketplace-dev\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server\nDESCRIPTION: Command to start the frontend development server for live development\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-introduction/01-how-to-customize-ftw/index.md#2025-04-18_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nyarn run dev\n```\n\n----------------------------------------\n\nTITLE: Adding Translations for DeleteAccountForm\nDESCRIPTION: Shows the translation strings needed for the DeleteAccountForm component.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-users-and-authentication/implement-delete-user/index.md#2025-04-18_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n\"DeleteAccountForm.confirmChangesInfo\": \"To delete your account, please enter your current password.\",\n\"DeleteAccountForm.confirmChangesTitle\": \"Confirm deleting your account\",\n\"DeleteAccountForm.conflictingData\":  \"Unable to delete user profile. You have {errorCause}\",\n\"DeleteAccountForm.genericFailure\": \"Whoops, something went wrong. Please refresh the page and try again.\",\n\"DeleteAccountForm.passwordFailed\": \"Please double-check your current password\",\n\"DeleteAccountForm.passwordLabel\": \"Current password\",\n\"DeleteAccountForm.passwordPlaceholder\": \"Enter your current password…\",\n\"DeleteAccountForm.passwordRequired\": \"Current password is required\",\n\"DeleteAccountForm.passwordTooLong\": \"The password should be at most {maxLength} characters\",\n\"DeleteAccountForm.passwordTooShort\": \"The password should be at least {minLength} characters\",\n\"DeleteAccountForm.resetPasswordInfo\": \"Forgot your password or don't have one? {resetPasswordLink}\",\n\"DeleteAccountForm.resetPasswordLinkSent\": \"The instructions for resetting your password have been sent to {email}.\",\n\"DeleteAccountForm.resetPasswordLinkText\": \"Send reset instructions.\",\n\"DeleteAccountForm.resendPasswordLinkText\": \"Resend instructions.\",\n\"DeleteAccountForm.saveChanges\": \"Yes, delete my Biketribe account permanently\"\n```\n\n----------------------------------------\n\nTITLE: Updating createEntryDayGroups Function in React\nDESCRIPTION: This diff shows how to update the createEntryDayGroups function to handle seats in the availability plan form's initial values.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-listing/seats/index.md#2025-04-18_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n// Create initial entry mapping for form's initial values\nconst createEntryDayGroups = (entries = {}) => {\n  // Collect info about which days are active in the availability plan form:\n  let activePlanDays = [];\n  return entries.reduce((groupedEntries, entry) => {\n-   const { startTime, endTime: endHour, dayOfWeek } = entry;\n+   const { startTime, endTime: endHour, seats, dayOfWeek } = entry;\n    const dayGroup = groupedEntries[dayOfWeek] || [];\n    activePlanDays = activePlanDays.includes(dayOfWeek)\n      ? activePlanDays\n      : [...activePlanDays, dayOfWeek];\n    return {\n      ...groupedEntries,\n      [dayOfWeek]: [\n        ...dayGroup,\n        {\n          startTime,\n          endTime: endHour === '00:00' ? '24:00' : endHour,\n+         seats,\n        },\n      ],\n      activePlanDays,\n    };\n  }, {});\n};\n```\n\n----------------------------------------\n\nTITLE: Parent Component CSS Styling\nDESCRIPTION: CSS styling for parent component showing flex layout and child component dimension control.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-styling/how-to-customize-ftw-styles/index.md#2025-04-18_snippet_10\n\nLANGUAGE: css\nCODE:\n```\n.root {\n  min-width: 60px;\n  min-height: 60px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.circleDimensions {\n  flex-grow: 0;\n  width: 50px;\n  height: 50px;\n  margin: 5px;\n}\n```\n\n----------------------------------------\n\nTITLE: Locating Configuration File\nDESCRIPTION: Shell command showing the location of the configDefault.js file in the Sharetribe Web Template project structure.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/tutorial-branding/configuration/index.md#2025-04-18_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n└── src\n    └── config\n        └── configDefault.js\n```\n\n----------------------------------------\n\nTITLE: Creating Process Alias\nDESCRIPTION: CLI command to create an alias for the newly created transaction process\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/tutorial-transaction-process/create-transaction-process/index.md#2025-04-18_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nflex-cli process create-alias --process=biketribe-instant-booking --version=1 --alias=release-1 --marketplace=biketribe-dev\n```\n\n----------------------------------------\n\nTITLE: Ignore-If-Past Function Example in Clojure\nDESCRIPTION: Shows how to prevent execution of past timepoints using ignore-if-past.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/references/transaction-process-time-expressions/index.md#2025-04-18_snippet_7\n\nLANGUAGE: clojure\nCODE:\n```\n{:fn/ignore-if-past [{:fn/timepoint [:time/booking-start]}]}\n```\n\n----------------------------------------\n\nTITLE: Project Directory Structure\nDESCRIPTION: Shows the file structure for time slot handling implementation.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-listing/time-slots/index.md#2025-04-18_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n└── src\n    └── util\n        └── dates.js\n```\n\n----------------------------------------\n\nTITLE: Fetching Transaction Process with Flex CLI\nDESCRIPTION: Command to pull the latest version of a transaction process using Sharetribe Flex CLI\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/tutorial-transaction-process/add-email-notification/index.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nflex-cli process pull --process=biketribe-instant-booking --alias=release-1 --path=./biketribe-instant-booking --marketplace=biketribe-dev\n```\n\n----------------------------------------\n\nTITLE: Stripe Account Resource Example in EDN\nDESCRIPTION: Example of a Stripe account resource with account ID and user reference.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-migrations/migrating-from-outside-sharetribe/index.md#2025-04-18_snippet_7\n\nLANGUAGE: edn\nCODE:\n```\n[[:im.stripeAccount/id]\n  #:im.stripeAccount{:stripeAccountId \"a_stripe_id\"\n                    :user #im/ref :user/john}]\n```\n\n----------------------------------------\n\nTITLE: Copying Environment Configuration Template\nDESCRIPTION: Create a local environment configuration file by copying the template file for setting up API credentials.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/introduction/getting-started-with-integration-api/index.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncp env-template .env\n```\n\n----------------------------------------\n\nTITLE: Installing Passport Github Strategy for Sharetribe\nDESCRIPTION: This command installs the Passport.js Github strategy as a dependency for the Sharetribe Web Template project.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-users-and-authentication/setup-oidc-proxy/index.md#2025-04-18_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nyarn add passport-github2\n```\n\n----------------------------------------\n\nTITLE: Fallback Page Directory Structure\nDESCRIPTION: Shows the directory structure for fallback pages, using PrivacyPolicyPage as an example.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-content/page-builder/index.md#2025-04-18_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n└── src\n    └── containers\n        └── PrivacyPolicyPage\n            └── FallbackPage.js\n```\n\n----------------------------------------\n\nTITLE: Filter Component File Location\nDESCRIPTION: Shows the directory structure for the FilterComponent.js file where custom filter components need to be added.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-search/change-search-filters-in-ftw/index.md#2025-04-18_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n└── src\n    └── containers\n        └── SearchPage\n            └── FilterComponent.js\n```\n\n----------------------------------------\n\nTITLE: Adding DeleteAccountForm to Page Component\nDESCRIPTION: Illustrates how to add the DeleteAccountForm as a child to the Page component.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-users-and-authentication/implement-delete-user/index.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n  return (\n    <Page title={title} scrollingDisabled={scrollingDisabled}>\n...\n            {pageDetails}\n+           {deleteAccountForm}\n          </div>\n...\n    </Page>\n  );\n```\n\n----------------------------------------\n\nTITLE: Updating SDK Package\nDESCRIPTION: Command to update the Sharetribe SDK package to access the new endpoint.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-users-and-authentication/implement-delete-user/index.md#2025-04-18_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n  yarn upgrade sharetribe-sdk\n```\n\n----------------------------------------\n\nTITLE: Importing Localized Messages in Sharetribe Web Template (JavaScript)\nDESCRIPTION: This code shows how to import localized messages from a JSON file in the Sharetribe Web Template. It imports Italian translations from 'it.json'.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-content/change-ftw-language/index.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport messagesInLocale from './translations/it.json';\n```\n\n----------------------------------------\n\nTITLE: Updating PlanEntry Component to Display Seats in React\nDESCRIPTION: This diff demonstrates how to update the PlanEntry component to display the number of available seats in the weekly calendar.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-listing/seats/index.md#2025-04-18_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n  const isAvailable = entry.seats > 0;\n  const availabilityInfo = isAvailable ? (\n-   <FormattedMessage id=\"EditListingAvailabilityPanel.WeeklyCalendar.available\" />\n+   <FormattedMessage\n+     id=\"EditListingAvailabilityPanel.WeeklyCalendar.available\"\n+     values={{ seats: entry.seats }}\n+   />\n\n  ) : (\n    <FormattedMessage id=\"EditListingAvailabilityPanel.WeeklyCalendar.notAvailable\" />\n  );\n```\n\n----------------------------------------\n\nTITLE: File Structure for FieldDateRangeInput\nDESCRIPTION: Shows the file structure path for the FieldDateRangeInput component that needs to be modified to display the seat selection UI.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-listing/seats/index.md#2025-04-18_snippet_23\n\nLANGUAGE: shell\nCODE:\n```\n└── src\n    └── components\n      └── FieldDateRangeInput\n      \t  └── FieldDateRangeInput.js\n```\n\n----------------------------------------\n\nTITLE: Running Tests in CI\nDESCRIPTION: Command to execute test suite in CI environment.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-testing-error-handling/how-to-use-ci-with-ftw/index.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn run test-ci\n```\n\n----------------------------------------\n\nTITLE: PageBuilder Directory Structure\nDESCRIPTION: Shell command showing the location of the PageBuilder component in the project directory structure\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-content/page-builder/index.md#2025-04-18_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n└── src\n    └── containers\n        └── PageBuilder\n            └── PageBuilder.js\n```\n\n----------------------------------------\n\nTITLE: Filtering Events by Type\nDESCRIPTION: Demonstrates filtering events by specific event types using the --filter parameter.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-events/view-events-with-flex-cli/index.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ flex-cli events --filter user/created,listing -m my-marketplace-dev\n\nSeq ID   Resource ID                           Event type       Created at local time   Source           Actor\n3471813  5fce8536-61f5-4c85-8160-61b1799d256f  user/created     2020-12-07 9:40:38 PM   marketplace-api\n3471856  5fce86c7-e435-4047-ab3b-dc4fee02d51d  listing/created  2020-12-07 9:47:19 PM   marketplace-api  joe@example.com\n3471857  5fce86c7-e435-4047-ab3b-dc4fee02d51d  listing/updated  2020-12-07 9:47:28 PM   marketplace-api  joe@example.com\n```\n\n----------------------------------------\n\nTITLE: Illustrating File Structure for BookingDatesForm\nDESCRIPTION: Shows the file structure path for the BookingDatesForm component that needs to be modified to implement seat selection.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-listing/seats/index.md#2025-04-18_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\n└── src\n    └── components\n        └── OrderPanel\n            └── BookingDatesForm\n                └── BookingDatesForm.js\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Global Styles\nDESCRIPTION: Shows the file structure for marketplace-level styling files in the src/styles directory.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-styling/how-to-customize-ftw-styles/index.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n└── src\n    └── styles\n        ├── customMediaQueries.css\n        └── marketplaceDefaults.css\n```\n\n----------------------------------------\n\nTITLE: Converting video from MOV to MP4, WebM and OGV formats using ffmpeg\nDESCRIPTION: Set of commands to convert a source.mov file to web-compatible formats (MP4, WebM, and OGV) with appropriate codecs and quality settings.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/docs/how-to-add-video.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nffmpeg -i source.mov -vcodec h264 -acodec mp2 output.mp4\n\nffmpeg -i source.mov -c:v libvpx -crf 10 -b:v 1M -c:a libvorbis output.webm\n\nffmpeg -i source.mov -c:v libtheora -b:v 2000K -qscale:v 7 -c:a libvorbis -ar 44100 -b:a 160k output.ogv\n```\n\n----------------------------------------\n\nTITLE: Custom Color Variable Definition\nDESCRIPTION: CSS variable definition for a custom pastel pink color in the marketplace defaults file.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/tutorial-branding/first-edit/index.md#2025-04-18_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n--colorPastelPink: #fbf0ef;\n```\n\n----------------------------------------\n\nTITLE: CSS Custom Property Definition\nDESCRIPTION: Example of defining a CSS custom property (variable) at the root level for marketplace color.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-styling/how-to-customize-ftw-styles/index.md#2025-04-18_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n/* in src/styles/marketplaceDefaults.css */\n:root {\n  --marketplaceColor: #ffff00;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Code Formatting Check in CI\nDESCRIPTION: Command to verify code formatting in CI environment. Fails if there are uncommitted formatting changes. Can be resolved by running 'yarn run format'.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-testing-error-handling/how-to-use-ci-with-ftw/index.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn run format-ci\n```\n\n----------------------------------------\n\nTITLE: Extending Components with Styled-Components\nDESCRIPTION: Pattern for extending a base component with margins while maintaining the principle that components should not define their own outside margins. Parent components should add margins to components they render.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/docs/coding-conventions.md#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// P.js\n//\nconst P = styled.p`\n  font-size: 16px;\n  line-height: 24px;\n`;\nexport default P;\n\n// SomeComponent.js\n//\n\n// Create a version of P with margins added\nconst Paragraph = styled(P)`\n  margin: 24px 0;\n`;\n\nconst SomeComponent = props => {\n  return (\n    <div {...props}>\n      <Paragraph>Some text content.</Paragraph>\n      {/* ... */}\n    </div\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Component Directory Structure\nDESCRIPTION: Shows the file structure for a component with its associated CSS module file.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-styling/how-to-customize-ftw-styles/index.md#2025-04-18_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n└── src\n    └── containers\n        └── AuthenticationPage\n            └── LoginForm\n               └── LoginForm.js\n               └── LoginForm.module.css\n```\n\n----------------------------------------\n\nTITLE: File Structure for EditListingAvailabilityPanel in Shell\nDESCRIPTION: This snippet shows the file structure for the EditListingAvailabilityPanel and its related components, which are being modified to implement multiple seats functionality.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-listing/seats/index.md#2025-04-18_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n└── src\n    └── containers\n        └── EditListingPage\n            └── EditListingWizard\n                └── EditListingAvailabilityPanel\n                    ├── EditListingAvailabilityExceptionForm\n                    │ \t└── EditListingAvailabilityExceptionForm.js\n                    │ \t└── EditListingAvailabilityExceptionForm.module.css\n                    ├── EditListingAvailabilityPlanForm\n                    │ \t└── AvailabilityPlanEntries.js\n                    ├── WeeklyCalendar\n                    │ \t└── WeeklyCalendar.js\n                    └── EditListingAvailabilityPanel.js\n```\n\n----------------------------------------\n\nTITLE: Unsupported Hosting Environments List\nDESCRIPTION: List of hosting environments that do not support Node.js servers for Sharetribe template deployment, specifically front-end only platforms.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/introduction/start-customizing/index.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- Vercel (supports front-end technologies and Next.js)\n- AWS Amplify (supports front-end technologies and Next.js)\n```\n\n----------------------------------------\n\nTITLE: Importing DeleteAccountPage Reducer in Redux Store\nDESCRIPTION: Imports the DeleteAccountPage reducer into the combined reducer file (reducers.js) to integrate it with the Redux store.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-users-and-authentication/implement-delete-user/index.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n  import ContactDetailsPage from './ContactDetailsPage/ContactDetailsPage.duck';\n  import DeleteAccountPage from './DeleteAccountPage/DeleteAccountPage.duck';\n  import EditListingPage from './EditListingPage/EditListingPage.duck';\n  ...\n\n  export {\n    CheckoutPage,\n    ContactDetailsPage,\n    DeleteAccountPage,\n    EditListingPage,\n```\n\n----------------------------------------\n\nTITLE: Modifying createEntriesFromSubmitValues Function in React\nDESCRIPTION: This diff shows how to modify the createEntriesFromSubmitValues function to include the seats value from dayValue instead of using a hard-coded value.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-listing/seats/index.md#2025-04-18_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\nconst createEntriesFromSubmitValues = values =>\n  WEEKDAYS.reduce((allEntries, dayOfWeek) => {\n    const dayValues = values[dayOfWeek] || [];\n    const dayEntries = dayValues.map(dayValue => {\n-     const { startTime, endTime } = dayValue;\n+     const { startTime, endTime, seats } = dayValue;\n+     const seatsValue = seats ? seats : 0;\n\n      // Note: This template doesn't support seats yet.\n      return startTime && endTime\n        ? {\n            dayOfWeek,\n-           seats: 1,\n+           seats: seatsValue,\n            startTime,\n            endTime: endTime === '24:00' ? '00:00' : endTime,\n          }\n        : null;\n    });\n\n    return allEntries.concat(dayEntries.filter(e => !!e));\n  }, []);\n```\n\n----------------------------------------\n\nTITLE: Supported Top Level Types in EDN\nDESCRIPTION: Lists the supported top-level types in the Intermediary format for data migration.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-migrations/migrating-from-outside-sharetribe/index.md#2025-04-18_snippet_2\n\nLANGUAGE: edn\nCODE:\n```\n- :im.user/id\n- :im.listing/id\n- :im.image/id\n- :im.stripeAccount/id\n- :im.review/id\n```\n\n----------------------------------------\n\nTITLE: Running Tests\nDESCRIPTION: Command to start the test watcher for running application tests\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-introduction/01-how-to-customize-ftw/index.md#2025-04-18_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nyarn test\n```\n\n----------------------------------------\n\nTITLE: Implementing Map Function in JavaScript\nDESCRIPTION: A higher-order function implementation that takes a transformation function and returns a new function that maps over an array.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/docs/markdown-guide/index.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst map = fn => xs => {\n  return xs.reduce((acc, x) => {\n    return acc.concat(fn(x));\n  }, []);\n};\n```\n\n----------------------------------------\n\nTITLE: Project Directory Structure for Route Configuration\nDESCRIPTION: Shows the file structure for route configuration in the Sharetribe template.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-routing/how-code-splitting-works-in-ftw/index.md#2025-04-18_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n└── src\n    └── routing\n        └── routeConfiguration.js\n```\n\n----------------------------------------\n\nTITLE: Using FormattedMessage Component with Simple Message in React\nDESCRIPTION: Shows how a basic marketplace text is used in a React component using FormattedMessage.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/concepts-development/microcopy/index.md#2025-04-18_snippet_7\n\nLANGUAGE: js\nCODE:\n```\n// ManageListingCard.js uses the variable to identify the message\n<FormattedMessage id=\"ManageListingCard.editListing\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Yarn\nDESCRIPTION: Install all required dependencies for the Integration API examples using Yarn package manager.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/introduction/getting-started-with-integration-api/index.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Embedding Asciinema Recording in HTML\nDESCRIPTION: This HTML snippet demonstrates how to embed an Asciinema recording in a web page. The 'recording-id' attribute should be replaced with the actual ID of the published Asciinema recording.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/docs/how-to-record-terminal-session.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<asciinema recording-id=\"recoding-id-here\"></asciinema>\n```\n\n----------------------------------------\n\nTITLE: HTML5 Video Embedding Example\nDESCRIPTION: Shows how to embed a video in HTML5 with multiple source formats for cross-browser compatibility using relative file paths.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/docs/markdown-guide/index.md#2025-04-18_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<video>\n  <source src='./sample.mp4' type='video/mp4'>\n  <source src='./sample.ogg' type='video/ogg'>\n  <source src='./sample.webm' type='video/webm'>\n</video>\n```\n\n----------------------------------------\n\nTITLE: Navigating to ListingPage.shared.js in File Structure\nDESCRIPTION: Shows the file structure path to locate the ListingPage.shared.js file which needs modification to pass the seats value to the CheckoutPage.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-listing/seats/index.md#2025-04-18_snippet_41\n\nLANGUAGE: shell\nCODE:\n```\n└── src\n    └── containers\n        └── ListingPage.shared.js\n```\n\n----------------------------------------\n\nTITLE: Using Handlebars Helper with Parameters for Email Templates\nDESCRIPTION: Shows how to use the 't' Handlebars helper to pass multiple parameters to an email template text.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/concepts-development/microcopy/index.md#2025-04-18_snippet_11\n\nLANGUAGE: handlebars\nCODE:\n```\n<p style=\\\"font-size:16px;line-height:1.4;margin:16px 0;color:#484848\">\n  {{t \"NewMessage.MessageSentParagraph\" \"{senderName} sent you a message in {marketplaceName}.\" senderName=sender.display-name marketplaceName=marketplace.name}}\n</p>\n```\n\n----------------------------------------\n\nTITLE: Defining Custom CSS Rules for SectionArticle Component\nDESCRIPTION: Creates new CSS rules for title and ingress elements without applying centering, to be used in a custom SectionArticle component.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-content/options-prop/index.md#2025-04-18_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.title {\n  max-width: 30ch;\n}\n.ingress {\n  max-width: 65ch;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing New Props in ListingPage Component\nDESCRIPTION: This diff snippet demonstrates how to initialize new props in the ListingPage component that are connected to the Redux store for the 'like' functionality.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-events/like-feature/index.md#2025-04-18_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n  render() {\n    const {\n      unitType,\n      isAuthenticated,\n      currentUser,\n      getListing,\n      getOwnListing,\n      intl,\n      onManageDisableScrolling,\n+     onUpdateLikes,\n+     updateLikesInProgress,\n      params: rawParams,\n      location,\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Sharetribe Web Template\nDESCRIPTION: Command to install the required dependency libraries using Yarn package manager.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/introduction/getting-started-with-ftw-daily/index.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Example Rate Limited Listing Creation Script Reference\nDESCRIPTION: Reference to an example implementation of rate-limited listing creation in the Integration API examples repository.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/concepts-api-sdk/rate-limiting/index.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncreate-listings.js\n```\n\n----------------------------------------\n\nTITLE: Listing Process Versions - Bash\nDESCRIPTION: Command to list all versions of a specific process.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-messaging/edit-email-templates-with-flex-cli/index.md#2025-04-18_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nflex-cli process list --process default-booking -m my-marketplace-dev\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies\nDESCRIPTION: Command to install all required dependency libraries using Yarn\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-introduction/01-how-to-customize-ftw/index.md#2025-04-18_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Displaying Project Directory Structure\nDESCRIPTION: Shows the file structure for configHelpers.js location in the project\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-configuration/hosted-and-local-configurations/index.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n└── src\n    └── util\n        └── configHelpers.js\n```\n\n----------------------------------------\n\nTITLE: Fetching Upstream Changes\nDESCRIPTION: Command to fetch the latest changes from the upstream repository\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-introduction/01-how-to-customize-ftw/index.md#2025-04-18_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit fetch upstream\n```\n\n----------------------------------------\n\nTITLE: Phone Input Styling - CSS\nDESCRIPTION: CSS styles for the phone number input field with responsive margin adjustments for different viewport sizes.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/tutorial-transaction-process/use-protected-data-in-emails/index.md#2025-04-18_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.phone {\n  margin-top: 24px;\n\n  @media (--viewportMedium) {\n    margin-top: 32px;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Navigating to Web Template Directory\nDESCRIPTION: Command to change directory to the cloned web-template folder.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/introduction/getting-started-with-ftw-daily/index.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd web-template/\n```\n\n----------------------------------------\n\nTITLE: Displaying File Structure for configUser.js\nDESCRIPTION: Shows the location of the configUser.js file in the project structure, which is used for configuring user extended data.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-users-and-authentication/extend-user-data-in-template/index.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n└── src\n    └── config\n        └── configUser.js\n```\n\n----------------------------------------\n\nTITLE: Marketplace Text Translations - JavaScript\nDESCRIPTION: Translation strings for phone number field labels and validation messages in the en.json file.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/tutorial-transaction-process/use-protected-data-in-emails/index.md#2025-04-18_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n\"SignupForm.phoneLabel\": \"Phone number\",\n\"SignupForm.phonePlaceholder\": \"+358 12 3456789\",\n\"SignupForm.phoneRequired\": \"You need to add your phone number\",\n```\n\n----------------------------------------\n\nTITLE: Unsetting Search Schemas with Sharetribe CLI\nDESCRIPTION: Command to unset (remove) a data schema using Sharetribe CLI. This allows developers to remove search schemas for extended data fields when they are no longer needed.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/references/extended-data/index.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nflex-cli search unset\n```\n\n----------------------------------------\n\nTITLE: Building Project in CI\nDESCRIPTION: Command to execute project build process and verify build success in CI environment.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-testing-error-handling/how-to-use-ci-with-ftw/index.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn run build\n```\n\n----------------------------------------\n\nTITLE: Asset Helper Usage in Email Templates\nDESCRIPTION: Examples of using the asset helper to retrieve data from JSON assets and set localization settings in email templates\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/references/email-templates/index.md#2025-04-18_snippet_6\n\nLANGUAGE: handlebars\nCODE:\n```\n{{asset \"design/branding.json\" \"marketplaceColors.notificationPrimaryButton\" \"#007DF2\"}}\n\n{{set-translations (asset \"content/email-texts.json\")}}\n{{set-locale (asset \"general/localization.json\" \"locale\" \"en_US\")}}\n```\n\n----------------------------------------\n\nTITLE: Running Server-Side Rendering Locally for Sharetribe Web Template\nDESCRIPTION: This command starts the Node/Express server to enable server-side rendering for testing purposes. It simulates how the client application would run in a production environment.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/tutorial-branding/deploy-to-render/index.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn run dev-server\n```\n\n----------------------------------------\n\nTITLE: Date Formatting Helper\nDESCRIPTION: Example of using the 'date' helper to format dates with localization and timezone support.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/references/email-templates/index.md#2025-04-18_snippet_3\n\nLANGUAGE: handlebars\nCODE:\n```\n{{date d format=\"d. MMM, YYYY\" lang=\"fi-FI\" tz=\"Europe/Helsinki\"}}\n```\n\n----------------------------------------\n\nTITLE: First Entered State Timepoint Example in Clojure\nDESCRIPTION: Example of using the first-entered-state timepoint with a specific state name.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/references/transaction-process-time-expressions/index.md#2025-04-18_snippet_2\n\nLANGUAGE: clojure\nCODE:\n```\n{:fn/timepoint [:time/first-entered-state :state/state-name]}\n```\n\n----------------------------------------\n\nTITLE: JSON Email Text with Complex Formatting and Pluralization\nDESCRIPTION: Example of a complex email text that includes number formatting, currency formatting, and pluralization based on units.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/concepts-development/microcopy/index.md#2025-04-18_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"BookingNewRequest.PriceForHoursQuantity\": \"{amount, number, ::.00} {currency} × {units, number} {units, plural, one {hour} other {hours}}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Custom H1 Component\nDESCRIPTION: Updates the index.js file to export the newly created CustomH1 component along with other heading components.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-content/options-prop/index.md#2025-04-18_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nexport { CustomH1, H1, H2, H3, H4, H5, H6 } from './Heading';\n```\n\n----------------------------------------\n\nTITLE: Updating Content Security Policy for Facebook Pixel in JavaScript\nDESCRIPTION: This code snippet demonstrates how to update the Content Security Policy (CSP) in the Sharetribe Web Template to allow Facebook Pixel to function properly. It adds necessary domains to various CSP directives.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-analytics/how-to-set-up-analytics-for-ftw/index.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { imgSrc = [self] } = defaultDirectives;\nconst imgSrcOverride = imgSrc.concat('www.facebook.com');\n\nconst { scriptSrc = [self] } = defaultDirectives;\nconst scriptSrcOverride = scriptSrc.concat(\n  'connect.facebook.net',\n  'www.facebook.com'\n);\n\nconst { frameSrc = [self] } = defaultDirectives;\nconst frameSrcOverride = frameSrc.concat(\n  'connect.facebook.net',\n  'www.facebook.com'\n);\n\nconst { connectSrc = [self] } = defaultDirectives;\nconst connectSrcOverride = connectSrc.concat('www.facebook.com');\n\nconst customDirectives = {\n  imgSrc: imgSrcOverride,\n  scriptSrc: scriptSrcOverride,\n  frameSrc: frameSrcOverride,\n  connectSrc: connectSrcOverride,\n};\n```\n\n----------------------------------------\n\nTITLE: Running Sharetribe Web Template Configuration Script\nDESCRIPTION: Command to execute the configuration script for setting up environment variables in Sharetribe Web Template.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/tutorial-branding/configuration/index.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn run config\n```\n\n----------------------------------------\n\nTITLE: File Structure for Hourly Booking Components\nDESCRIPTION: Shows the file structure paths for components that need to be modified to implement seat selection for hourly booking types.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-listing/seats/index.md#2025-04-18_snippet_28\n\nLANGUAGE: shell\nCODE:\n```\n└── src\n    └── components\n        └── OrderPanel\n            └── BookingTimeForm\n                └── BookingTimeForm.js\n      \t        └── FieldDateAndTimeInput.js\n```\n\n----------------------------------------\n\nTITLE: Modified Listing Configuration Merge\nDESCRIPTION: Example of modifying the mergeListingConfig function to always merge listing types from both hosted and local configurations\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-configuration/hosted-and-local-configurations/index.md#2025-04-18_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst mergeListingConfig = (hostedConfig, defaultConfigs) => {\n...\n  const shouldMerge = mergeDefaultTypesAndFieldsForDebugging(false);\n- const listingTypes = shouldMerge\n-   ? union(hostedListingTypes, defaultListingTypes, 'listingType')\n-   : hostedListingTypes;\n+ const listingTypes = union(hostedListingTypes, defaultListingTypes, 'listingType');\n  const listingFields = shouldMerge\n    ? union(hostedListingFields, defaultListingFields, 'key')\n    : hostedListingFields;\n...\n```\n\n----------------------------------------\n\nTITLE: Running Configuration Script for Sharetribe Web Template\nDESCRIPTION: This command starts the configuration script to set up environment variables for the Sharetribe Web Template. It prompts the user to enter required credentials and creates a .env file in the local repository.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/introduction/getting-started-with-ftw-daily/index.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn run config\n```\n\n----------------------------------------\n\nTITLE: Importing FieldTextInput Component in React\nDESCRIPTION: Imports the FieldTextInput component for handling seat input in the EditListingAvailabilityExceptionForm.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-listing/seats/index.md#2025-04-18_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  FieldTextInput, // add this row\n  Form,\n  H3,\n  PrimaryButton,\n} from '../../../../../components';\n```\n\n----------------------------------------\n\nTITLE: Adding New Git Remote Origin\nDESCRIPTION: Command to add new GitHub repository as remote origin\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/tutorial/introduction/index.md#2025-04-18_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit remote add origin https://github.com/<your-github-account>/<the-name-of-your-new-repo>.git\n```\n\n----------------------------------------\n\nTITLE: Integrating SectionServiceHistory in ListingPage for Sharetribe Flex\nDESCRIPTION: This snippet demonstrates how to import and integrate the SectionServiceHistoryMaybe component into the ListingPage component, allowing the service history to be displayed on the listing page.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-listing/extend-listing-data-in-ftw/index.md#2025-04-18_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\nimport SectionServiceHistoryMaybe from './SectionServiceHistoryMaybe';\n\n// In the render function\n<div className={css.mainContent}>\n  {/* other sections */}\n\n  <SectionServiceHistoryMaybe publicData={publicData} intl={intl} />\n  {/* other sections */}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Initializing Time Range with Seats in React Form API\nDESCRIPTION: This diff shows how to initialize a time range with 1 seat when the daily checkbox is first checked.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-listing/seats/index.md#2025-04-18_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n    } else {\n      const shouldAddEntry = isChecked && !hasEntries;\n      if (shouldAddEntry) {\n        // The 'hour' unit is not initialized with any value,\n+       // except seats,\n        // because user need to pick them themselves.\n-       formApi.mutators.push(dayOfWeek, { startTime: null, endTime: null });\n+       formApi.mutators.push(dayOfWeek, { startTime: null, endTime: null, seats: 1 });\n      } else if (!isChecked) {\n        // If day of week checkbox is unchecked,\n        // we'll remove all the entries for that day.\n        formApi.mutators.removeBatch(dayOfWeek, entries);\n      }\n    }\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Like Feature Implementation\nDESCRIPTION: Shows the file structure for implementing the like feature in the ListingPage directory.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-events/like-feature/index.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n└── src\n    └── containers\n        └── ListingPage\n            ├── SectionLikes.js\n            ├── ListingPageCarousel.js\n            └── ListingPage.module.css\n```\n\n----------------------------------------\n\nTITLE: Updating Email Templates with Helmet Fee\nDESCRIPTION: Diff showing how to add helmet rental fee to email notification templates.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/tutorial-transaction-process/customize-pricing/index.md#2025-04-18_snippet_14\n\nLANGUAGE: diff\nCODE:\n```\n...\n-       {{/if}}{{/eq}}{{#eq \"line-item/provider-commission\" code}}\n+       {{/if}}{{/eq}}\n+       {{#eq \"line-item/helmet-rental-fee\" code}}\n+       <table align=\"center\" border=\"0\" cellPadding=\"0\" cellSpacing=\"0\" role=\"presentation\" width=\"100%\">\n+         <tbody>\n+           <tr>\n+             <td>\n+               <td>\n+                 <p style=\"font-size:16px;line-height:1.4;margin:16px 0;color:#484848;margin-top:1px\">Helmet rental fee</p>\n+               </td>\n+               <td style=\"text-align:right\">\n+                 <p style=\"font-size:16px;line-height:1.4;margin:16px 0;color:#484848;margin-top:1px\">{{> format-money money=line-total}}</p>\n+               </td>\n+             </td>\n+           </tr>\n+         </tbody>\n+       </table>\n+       {{/eq}}\n+       {{#eq \"line-item/provider-commission\" code}}\n        <table align=\"center\" border=\"0\" cellPadding=\"0\" cellSpacing=\"0\" role=\"presentation\" width=\"100%\">\n...\n```\n\n----------------------------------------\n\nTITLE: Updating Transaction Process Names in JavaScript\nDESCRIPTION: This code snippet demonstrates how to update the transaction.js file to include new process definitions. It exports constants for supported process names, including a new negotiation process.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-transaction-process/change-transaction-process-in-ftw/index.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Then names of supported processes\nexport const PURCHASE_PROCESS_NAME = 'default-purchase';\nexport const BOOKING_PROCESS_NAME = 'default-booking';\n// Add new processes with a descriptive name\nexport const NEGOTIATION_PROCESS_NAME = 'negotiated-booking';\n```\n\n----------------------------------------\n\nTITLE: Project Structure for Checkout Page\nDESCRIPTION: Shell command showing the file structure for the CheckoutPage component location.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/tutorial-transaction-process/customize-pricing/index.md#2025-04-18_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n└── src\n    └── containers\n        └── CheckoutPage\n            └── CheckoutPageWithPayment.js\n```\n\n----------------------------------------\n\nTITLE: Simplifying handlePublishListing Function in JavaScript\nDESCRIPTION: This code snippet shows how to simplify the handlePublishListing function in EditListingWizard.js by removing Stripe-related checks. It directly calls the onPublishListingDraft prop with the listing id.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-payments/removing-stripe/index.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n  handlePublishListing(id) {\n    this.props.onPublishListingDraft(id);\n  }\n```\n\n----------------------------------------\n\nTITLE: Updating OrderPanel with Helmet Fee Props\nDESCRIPTION: Modifies OrderPanel component to pass helmet fee data to BookingDatesForm component.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/tutorial-transaction-process/customize-pricing/index.md#2025-04-18_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst helmetFee = listing?.attributes?.publicData.helmetFee;\n```\n\n----------------------------------------\n\nTITLE: Using UI Text as a String in JavaScript\nDESCRIPTION: Shows how to use the static function of the UiText component to get a UI text as a string in JavaScript code. This is useful for situations where JSX cannot be used directly.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/docs/coding-conventions.md#2025-04-18_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconsole.log(`My UI text is ${UiText.fn('MyComponent.someText')}.`);\n```\n\n----------------------------------------\n\nTITLE: Adding Delete Account Tab to Account Settings Navigation\nDESCRIPTION: Adds a new tab for account deletion to the Account Settings side navigation in LayoutWrapperAccountSettingsSideNav.js.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-users-and-authentication/implement-delete-user/index.md#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n      linkProps: {\n        name: 'PaymentMethodsPage',\n      },\n    },\n    {\n      text: <FormattedMessage id=\"LayoutWrapperAccountSettingsSideNav.deleteAccountTabTitle\" />,\n      selected: currentPage === 'DeleteAccountPage',\n      id: 'DeleteAccountPageTab',\n      linkProps: {\n        name: 'DeleteAccountPage',\n      },\n    },\n  ];\n```\n\n----------------------------------------\n\nTITLE: Previewing Email Template Changes\nDESCRIPTION: This bash command demonstrates how to preview changes made to the email template using the Flex CLI. It renders the template with sample data and opens a browser tab with the output HTML.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-messaging/edit-email-templates-with-flex-cli/index.md#2025-04-18_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nflex-cli notifications preview --template process/templates/booking-new-request -m my-marketplace-dev\n```\n\n----------------------------------------\n\nTITLE: Image Resource Example in EDN\nDESCRIPTION: Example of an image resource with URL, sort order, and listing reference.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-migrations/migrating-from-outside-sharetribe/index.md#2025-04-18_snippet_6\n\nLANGUAGE: edn\nCODE:\n```\n[[:im.image/id #uuid \"58afd8e1-e336-4ca4-a1e7-ff1d91856a6c\"]\n  #:im.image{:url \"https://asset-url.someservice.com/path/to/img1.jpg\"\n            :sortOrder 1\n            :listing #im/ref :listing/rock-sauna}]\n```\n\n----------------------------------------\n\nTITLE: Importing DeleteUserAccount Endpoint\nDESCRIPTION: Shows how to import the deleteUserAccount endpoint in the DeleteAccountPage.duck.js file.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-users-and-authentication/implement-delete-user/index.md#2025-04-18_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { deleteUserAccount } from '../../util/api';\n```\n\n----------------------------------------\n\nTITLE: Update Alias Command\nDESCRIPTION: Command to update an alias to point to a new process version\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-transaction-process/edit-transaction-process-with-flex-cli/index.md#2025-04-18_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nflex-cli process update-alias --process default-booking --alias release-1 --version 2 -m my-marketplace-dev\n```\n\n----------------------------------------\n\nTITLE: Formatting Markdown Files with Yarn Script\nDESCRIPTION: A bash command that runs Prettier formatting on all Markdown files in the src/ directory using a predefined yarn script.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/docs/markdown-guide/index.md#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn run format-docs\n```\n\n----------------------------------------\n\nTITLE: EDN Format Example\nDESCRIPTION: Example showing the syntax and structure of EDN format used in process definitions\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-transaction-process/edit-transaction-process-with-flex-cli/index.md#2025-04-18_snippet_3\n\nLANGUAGE: clojure\nCODE:\n```\n;; This is a comment. Comments in edn start with \";;\"\n;;\n\n{:number 1 ;; a number, for example `1`, `2.2`, `-500`, `1.23456M`\n           ;; (where `M` denotes that exact precision is desired)\n :string \"This is a string\"\n :boolean true ;; or false\n :keyword :this-is-a-keyword\n :namespaced-keyword :namespaced/keyword\n :vector [1, \"abc\", false] ;; same as \"array\" in JSON\n :map {:first-name \"John\",\n       :last-name \"Doe\",\n       :age 55} ;; same as \"object\" in JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Running Jest Test Watcher\nDESCRIPTION: Command to start the test watcher that automatically updates when files change\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-testing-error-handling/how-to-test-ftw/index.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn test\n```\n\n----------------------------------------\n\nTITLE: Intermediary Data Format Examples in EDN\nDESCRIPTION: These code snippets illustrate various ways to specify data rows in the Intermediary format, including different tuple structures for IDs and referencing between entities.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/howto-migrations/migrating-from-outside-sharetribe/index.md#2025-04-18_snippet_1\n\nLANGUAGE: edn\nCODE:\n```\n;; 1 element tuple\n[:im.stripeAccount/id]\n\n;; 2 element tuple with import id\n[:im.image/id #uuid \"58afd8e1-e336-4ca4-a1e7-ff1d91856a6c\"]\n\n;; 2 element tuple with alias\n[:im.user/id :user/jane]\n\n;; 3 element tuple\n[:im.listing/id #uuid \"b074e697-ab0c-4746-a195-c58d73606b1f\" :listing/rock-sauna]\n```\n\nLANGUAGE: edn\nCODE:\n```\n;; Referencing a listing by alias\n[[:im.image/id #uuid \"58afd8e1-e336-4ca4-a1e7-ff1d91856a6c\"]\n  #:im.image{:url \"https://asset-url.someservice.com/path/to/img1.jpg\"\n            :sortOrder 1\n            :listing #im/ref :listing/rock-sauna}]\n\n;; Referencing a listing by UUID\n[[:im.image/id]\n  #:im.image{:url \"https://asset-url.someservice.com/path/to/img2.jpg\"\n            :sortOrder 2\n            :listing #im/ref [:im.listing/id #uuid \"b074e697-ab0c-4746-a195-c58d73606b1f\"]}]\n```\n\n----------------------------------------\n\nTITLE: Changing to Project Directory\nDESCRIPTION: Command to change the current working directory to the cloned flex-docs project folder.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd flex-docs/\n```\n\n----------------------------------------\n\nTITLE: Test File Directory Structure\nDESCRIPTION: Example of how test files and snapshots are organized in the project directory structure\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-testing-error-handling/how-to-test-ftw/index.md#2025-04-18_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n├── ManageListingCard.example.js\n├── ManageListingCard.js\n├── ManageListingCard.module.css\n├── ManageListingCard.test.js\n├── MenuIcon.js\n├── Overlay.js\n├── Overlay.module.css\n└── __snapshots__\n    └── ManageListingCard.test.js.snap\n```\n\n----------------------------------------\n\nTITLE: Running Single Test Pass\nDESCRIPTION: Command to run tests once without starting the watcher, also runs the linter\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-testing-error-handling/how-to-test-ftw/index.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nCI=true yarn test\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables\nDESCRIPTION: Command to run the configuration script that creates and sets up the .env file\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-introduction/01-how-to-customize-ftw/index.md#2025-04-18_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nyarn run config\n```\n\n----------------------------------------\n\nTITLE: Creating New Git Branch for Updates\nDESCRIPTION: Command to create and switch to a new branch for pulling upstream changes\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/ftw-introduction/01-how-to-customize-ftw/index.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout -b updates-from-upstream\n```\n\n----------------------------------------\n\nTITLE: Installing Sharetribe CLI with Yarn Modern\nDESCRIPTION: Alternative command to install Sharetribe CLI using Yarn Modern. This method is used for newer versions of Yarn.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/introduction/getting-started-with-flex-cli/index.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn dlx add flex-cli\n```\n\n----------------------------------------\n\nTITLE: Creating a Horizontal Line in Markdown\nDESCRIPTION: Demonstrates how to add a horizontal line in Markdown using three hyphens on their own line.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/docs/markdown-guide/index.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\n```\n\n----------------------------------------\n\nTITLE: Installing ffmpeg via Homebrew on Mac OS\nDESCRIPTION: Command to install the ffmpeg video conversion tool using the Homebrew package manager on Mac OS.\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/docs/how-to-add-video.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew install ffmpeg\n```\n\n----------------------------------------\n\nTITLE: Push Payment Transitions in Clojure\nDESCRIPTION: Example of push payment related transitions that can be removed from the process\nSOURCE: https://github.com/sharetribe/flex-docs/blob/master/src/docs/tutorial-transaction-process/create-transaction-process/index.md#2025-04-18_snippet_4\n\nLANGUAGE: clojure\nCODE:\n```\n  {:name :transition/request-push-payment,\n   :actor :actor.role/customer,\n   :actions\n   [{:name :action/update-protected-data}\n    {:name :action/create-pending-booking, :config {:type :time}}\n    {:name :action/privileged-set-line-items}\n    {:name :action/stripe-create-payment-intent-push}],\n   :to :state/pending-payment,\n   :privileged? true}\n   ...\n   {:name :transition/request-push-payment-after-inquiry,\n   :actor :actor.role/customer,\n   :actions\n   [{:name :action/update-protected-data}\n    {:name :action/create-pending-booking, :config {:type :time}}\n    {:name :action/privileged-set-line-items}\n    {:name :action/stripe-create-payment-intent-push}],\n   :from :state/inquiry,\n   :to :state/pending-payment,\n   :privileged? true}\n```"
  }
]