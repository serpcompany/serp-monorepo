[
  {
    "owner": "jetbrains",
    "repo": "intellij-sdk-docs",
    "content": "TITLE: Implementing Action Behavior in Java\nDESCRIPTION: Shows the structure of the AnAction.actionPerformed() method where the main logic of an action is implemented. It demonstrates how to access project, editor, and file information from the action event.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/action_system.md#2025-04-06_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\npublic void actionPerformed(AnActionEvent e) {\n    Project project = e.getProject();\n    Editor editor = e.getData(CommonDataKeys.EDITOR);\n    PsiFile psiFile = e.getData(CommonDataKeys.PSI_FILE);\n    \n    // Implement action logic here\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SerializablePersistentStateComponent in Kotlin\nDESCRIPTION: Example of implementing a persistent state component using SerializablePersistentStateComponent with an immutable data class for state storage.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/persisting_state_of_components.md#2025-04-06_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n@Service\n@State(...)\nclass MySettings : SerializablePersistentStateComponent<MySettings.State>(State()) {\n\n  var stringValue: String\n    get() = state.stringValue\n    set(value) {\n      updateState {\n        it.copy(stringValue = value)\n      }\n    }\n\n  data class State (\n    @JvmField val stringValue: String = \"default value\"\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Plugin Paid Product Descriptor Configuration in XML\nDESCRIPTION: XML configuration for a paid or freemium plugin descriptor in plugin.xml, which includes required attributes like code, release-date, and release-version, plus optional attributes for freemium and EAP specification.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/plugin_structure/plugin_configuration_file.md#2025-04-06_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<idea-version since-build=\"213.7172.25\"/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Simple Completion Contributor in Java\nDESCRIPTION: Creates a basic completion contributor that adds 'Hello' to completion variants. Extends CompletionContributor to provide custom code completion for Simple Language property files.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/custom_language_support/completion_contributor.md#2025-04-06_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class SimpleCompletionContributor extends CompletionContributor {\n    public SimpleCompletionContributor() {\n        extend(CompletionType.BASIC, PlatformPatterns.psiElement(),\n                new CompletionProvider<>() {\n                    public void addCompletions(@NotNull CompletionParameters parameters,\n                                             @NotNull ProcessingContext context,\n                                             @NotNull CompletionResultSet resultSet) {\n                        resultSet.addElement(LookupElementBuilder.create(\"Hello\"));\n                    }\n                }\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle Build Script for LSP Plugin with IntelliJ Platform Gradle Plugin 2.x\nDESCRIPTION: Configuration for build.gradle.kts using the IntelliJ Platform Gradle Plugin 2.x to set up a Language Server Protocol plugin targeting IntelliJ IDEA Ultimate.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/custom_language_support/language_server_protocol.md#2025-04-06_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n  id(\"org.jetbrains.intellij.platform\") version \"%intellij-platform-gradle-plugin-version%\"\n}\n\nrepositories {\n  mavenCentral()\n\n  intellijPlatform {\n    defaultRepositories()\n  }\n}\n\ndependencies {\n  intellijPlatform {\n    intellijIdeaUltimate(\"%ijPlatform%\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Language Class in Java\nDESCRIPTION: Implementation of a custom language class that extends the IntelliJ Platform's Language class. This class follows the singleton pattern and defines the 'Simple' language.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/custom_language_support/language_and_filetype.md#2025-04-06_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\npublic class SimpleLanguage extends Language {\n\n  public static final String ID = \"Simple\";\n  public static final SimpleLanguage INSTANCE = new SimpleLanguage();\n\n  private SimpleLanguage() {\n    super(ID);\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Project-Level Service in Java\nDESCRIPTION: Demonstrates implementing a project-level service in Java with proper constructor injection of the Project parameter.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/plugin_structure/plugin_services.md#2025-04-06_snippet_7\n\nLANGUAGE: Java\nCODE:\n```\nfinal class MyProjectServiceImpl implements MyProjectService {\n  private final Project myProject;\n\n  MyProjectServiceImpl(Project project) {\n    myProject = project;\n  }\n\n  public void doSomething(String param) {\n    String projectName = myProject.getName();\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing PSI Element from an Action in IntelliJ Platform\nDESCRIPTION: This code snippet demonstrates how to retrieve the PSI element under the caret from an action event. This is useful for implementing actions that need to analyze or manipulate the code at the cursor position.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/architectural_overview/psi_elements.md#2025-04-06_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nAnActionEvent.getData(CommonDataKeys.PSI_ELEMENT)\n```\n\n----------------------------------------\n\nTITLE: VFS Event Listener Implementation\nDESCRIPTION: Example showing how to implement VFS event listening through BulkFileListener interface. The listener receives notifications for all file system changes across all open projects.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/architectural_overview/virtual_file_system.md#2025-04-06_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nVirtualFileManager.VFS_CHANGES\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom TypedActionHandler\nDESCRIPTION: Custom implementation of TypedActionHandler that inserts text at the beginning of the document when a keystroke event occurs. It demonstrates safe document modification using WriteCommandAction.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/editor_basics/editor_events.md#2025-04-06_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\nfinal class MyTypedHandler implements TypedActionHandler {\n  @Override\n  public void execute(@NotNull Editor editor,\n                      char c,\n                      @NotNull DataContext dataContext) {\n    Document document = editor.getDocument();\n    Project project = editor.getProject();\n    Runnable runnable = () -> document.insertString(0, \"editor_basics\\n\");\n    WriteCommandAction.runWriteCommandAction(project, runnable);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Plugin ID in XML\nDESCRIPTION: Example of setting the unique identifier for a plugin using the <id> element in plugin.xml.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/plugin_structure/plugin_configuration_file.md#2025-04-06_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<id>com.example.framework</id>\n```\n\n----------------------------------------\n\nTITLE: Generating Directory Structure for Gradle-based IntelliJ Platform Plugin\nDESCRIPTION: PlantUML diagram showing the directory structure created by the New Project Wizard for a Gradle-based IntelliJ Platform plugin project.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/build_system/creating_plugin_project.md#2025-04-06_snippet_0\n\nLANGUAGE: plantuml\nCODE:\n```\n@startuml\n\nskinparam TitleFontName JetBrains Sans\nskinparam TitleFontStyle plain\nskinparam TitleFontSize 16\nskinparam DefaultTextAlignment left\n\ntitle\n  my_plugin\n  |_ .run\n    |_ Run IDE with Plugin.run.xml\n  |_ gradle\n    |_ wrapper\n      |_ gradle-wrapper.jar\n      |_ gradle-wrapper.properties\n  |_ src\n    |_ main\n      |_ kotlin\n      |_ resources\n        |_ META-INF\n          |_ plugin.xml\n          |_ pluginIcon.svg\n  |_ .gitignore\n  |_ build.gradle.kts\n  |_ gradle.properties\n  |_ gradlew\n  |_ gradlew.bat\n  |_ settings.gradle.kts\nend title\n@enduml\n```\n\n----------------------------------------\n\nTITLE: Setting Context ClassLoader for ServiceLoader API in IntelliJ Plugins (Java)\nDESCRIPTION: This Java code snippet demonstrates how to properly use ServiceLoader API within IntelliJ plugins by temporarily setting the thread's context class loader to the plugin's class loader. The original class loader is restored afterward to prevent memory leaks.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/plugin_structure/plugin_class_loaders.md#2025-04-06_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nThread currentThread = Thread.currentThread();\nClassLoader originalClassLoader = currentThread.getContextClassLoader();\nClassLoader pluginClassLoader = this.getClass().getClassLoader();\ntry {\n  currentThread.setContextClassLoader(pluginClassLoader);\n  // code working with ServiceLoader here\n} finally {\n  currentThread.setContextClassLoader(originalClassLoader);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Project-Level Service Interface in Kotlin\nDESCRIPTION: Shows how to create an interface for a project-level service in Kotlin.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/plugin_structure/plugin_services.md#2025-04-06_snippet_10\n\nLANGUAGE: Kotlin\nCODE:\n```\ninterface MyProjectService {\n  fun doSomething(param: String)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Project-Level Service in Kotlin\nDESCRIPTION: Demonstrates implementing a project-level service in Kotlin with proper constructor injection of the Project parameter.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/plugin_structure/plugin_services.md#2025-04-06_snippet_11\n\nLANGUAGE: Kotlin\nCODE:\n```\ninternal class MyProjectServiceImpl(private val project: Project)\n    : MyProjectService {\n\n  fun doSomething(param: String) {\n    val projectName = project.name\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing RunLineMarkerContributor in Java\nDESCRIPTION: This snippet demonstrates how to implement RunLineMarkerContributor to provide run configuration information for the editor gutter. It includes the getInfo() method and mentions the getSlowInfo() method for batch processing.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/execution/run_configurations.md#2025-04-06_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class MyRunLineMarkerContributor extends RunLineMarkerContributor {\n    @Nullable\n    @Override\n    public Info getInfo(@NotNull PsiElement element) {\n        // Provide icon, tooltip, and actions for the given PSI element\n    }\n\n    // Optionally implement getSlowInfo() for batch processing\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing IntelliJ Plugin Test Class in Kotlin\nDESCRIPTION: Demonstrates a complete test implementation that sets up a test environment for IntelliJ plugins. The code configures a mock CI server, initializes the IDE with a specific test project, installs a plugin, and runs basic verification steps including waiting for background processes.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/testing_plugins/integration_tests/integration_tests_intro.md#2025-04-06_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PluginTest {\n  init {\n    di = DI {\n      extend(di)\n      bindSingleton<CIServer>(overrides = true) {\n        object : CIServer by NoCIServer {\n          override fun reportTestFailure(\n            testName: String,\n            message: String,\n            details: String,\n            linkToLogs: String?\n          ) {\n            fail { \"$testName fails: $message. \\n$details\" }\n          }\n        }\n      }\n    }\n  }\n  @Test\n  fun simpleTest() {\n    val result = Starter.newContext(\n      \"testExample\",\n      TestCase(\n        IdeProductProvider.IC,\n        GitHubProject.fromGithub(\n          branchName = \"master\",\n          repoRelativeUrl = \"JetBrains/ij-perf-report-aggregator\"\n        )\n      ).withVersion(\"2024.2\")\n    ).apply {\n      val pathToPlugin = System.getProperty(\"path.to.build.plugin\")\n      PluginConfigurator(this).installPluginFromFolder(File(pathToPlugin))\n    }.runIdeWithDriver().useDriverAndCloseIde {\n      waitForIndicators(5.minutes)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Main plugin.xml with Optional Kotlin Dependency\nDESCRIPTION: Example of a complete plugin.xml file that defines a required dependency on the Java plugin and an optional dependency on the Kotlin plugin, along with a Java annotator extension.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/plugin_structure/plugin_dependencies.md#2025-04-06_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<idea-plugin>\n   ...\n   <depends>com.intellij.java</depends>\n\n   <depends\n       optional=\"true\"\n       config-file=\"myPluginId-withKotlin.xml\">org.jetbrains.kotlin</depends>\n\n   <extensions defaultExtensionNs=\"com.intellij\">\n      <annotator\n          language=\"JAVA\"\n          implementationClass=\"com.example.MyJavaAnnotator\"/>\n   </extensions>\n</idea-plugin>\n```\n\n----------------------------------------\n\nTITLE: Finding PSI Element at Specific Offset in PSI File\nDESCRIPTION: This code snippet shows how to find a PSI element at a specific offset within a PSI file. This is typically used when working with editor positions to get the corresponding PSI element.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/architectural_overview/psi_elements.md#2025-04-06_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nPsiFile.findElementAt(offset)\n```\n\n----------------------------------------\n\nTITLE: Defining Actions and Groups in plugin.xml\nDESCRIPTION: XML configuration example showing how to declare actions, action groups, keyboard shortcuts, mouse shortcuts, and override text in different contexts. Demonstrates adding actions to existing groups and setting icons.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/action_system.md#2025-04-06_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<actions>\n\n  <action\n      id=\"VssIntegration.GarbageCollection\"\n      class=\"com.example.impl.CollectGarbage\"\n      text=\"Garbage Collector: Collect _Garbage\"\n      description=\"Run garbage collector\"\n      icon=\"icons/garbage.png\">\n\n    <!--\n    The second <override-text> element uses the alternate attribute\n    \"use-text-of-place\" to define a location (EditorPopup) to use the\n    same text as is used in MainMenu. It is a way to specify the use\n    of an alternate menu text in multiple discrete menu groups.\n    -->\n    <override-text place=\"MainMenu\" text=\"Collect _Garbage\"/>\n    <override-text place=\"EditorPopup\" use-text-of-place=\"MainMenu\"/>\n\n    <!-- Provide alternative names for searching action by name -->\n    <synonym text=\"GC\"/>\n\n    <add-to-group\n        group-id=\"ToolsMenu\"\n        relative-to-action=\"GenerateJavadoc\"\n        anchor=\"after\"/>\n\n    <!-- Add the first and second keystrokes to all keymaps... -->\n    <keyboard-shortcut\n        keymap=\"$default\"\n        first-keystroke=\"control alt G\"\n        second-keystroke=\"C\"/>\n\n    <!-- ...except the \"Mac OS X\" keymap and its children. -->\n    <keyboard-shortcut\n        keymap=\"Mac OS X\"\n        first-keystroke=\"control alt G\"\n        second-keystroke=\"C\"\n        remove=\"true\"/>\n\n    <!-- The \"Mac OS X 10.5+\" keymap and its children will have only\n    this keyboard shortcut for this action. -->\n    <keyboard-shortcut\n        keymap=\"Mac OS X 10.5+\"\n        first-keystroke=\"control alt G\"\n        second-keystroke=\"C\"\n        replace-all=\"true\"/>\n\n    <mouse-shortcut\n        keymap=\"$default\"\n        keystroke=\"control button3 doubleClick\"/>\n  </action>\n\n  <!--\n  This action declares neither a text nor a description attribute.\n  If it has a resource bundle declared, the text and descriptions\n  will be retrieved based on the action-id incorporated in the key\n  for a translated string.\n  -->\n  <action\n      id=\"sdk.action.PopupDialogAction\"\n      class=\"sdk.action.PopupDialogAction\"\n      icon=\"SdkIcons.Sdk_default_icon\"/>\n\n  <group\n      class=\"com.example.impl.MyActionGroup\"\n      id=\"TestActionGroup\"\n      text=\"Test Group\"\n      description=\"Group with test actions\"\n      icon=\"icons/testGroup.png\"\n      popup=\"true\"\n      compact=\"true\">\n\n    <action\n        id=\"VssIntegration.TestAction\"\n        class=\"com.example.impl.TestAction\"\n        text=\"My Test Action\"\n        description=\"My test action\"/>\n\n    <!-- The <separator> element defines a separator between actions.\n    It can also have an <add-to-group> child element. -->\n    <separator/>\n\n    <!-- A group that is excluded from \"Help | Find Action...\"\n    and \"Navigate | Search Everywhere\" -->\n    <group id=\"TestActionSubGroup\" searchable=\"false\"/>\n\n    <!-- The <reference> element allows adding an existing action to\n    the group. The mandatory \"ref\" attribute specifies the ID of\n    the action to add. -->\n    <reference ref=\"EditorCopy\"/>\n\n    <add-to-group\n        group-id=\"MainMenu\"\n        relative-to-action=\"HelpMenu\"\n        anchor=\"before\"/>\n  </group>\n</actions>\n```\n\n----------------------------------------\n\nTITLE: Creating Syntax Highlighter Factory in Java\nDESCRIPTION: Implements a factory class that provides a standard way for the IntelliJ Platform to instantiate the syntax highlighter for Simple Language files. Extends SyntaxHighlighterFactory to create highlighter instances.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/custom_language_support/syntax_highlighter_and_color_settings_page.md#2025-04-06_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\npublic class SimpleSyntaxHighlighterFactory extends SyntaxHighlighterFactory\n```\n\n----------------------------------------\n\nTITLE: Executing Write Action using Application.runWriteAction() in Java\nDESCRIPTION: Shows how to use Application.runWriteAction() to perform a write operation in Java. This API is considered low-level and should be avoided.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/architectural_overview/threading/threading_model.md#2025-04-06_snippet_11\n\nLANGUAGE: java\nCODE:\n```\nApplicationManager.getApplication().runWriteAction(() -> {\n  // write data\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Bean Class for Extension Point\nDESCRIPTION: Java implementation of the bean class used in the extension point declaration.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/plugin_structure/plugin_extension_points.md#2025-04-06_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\npublic final class MyBeanClass extends AbstractExtensionPointBean {\n\n  @Attribute(\"key\")\n  public String key;\n\n  @Attribute(\"implementationClass\")\n  public String implementationClass;\n\n  public String getKey() {\n    return key;\n  }\n\n  public String getClass() {\n    return implementationClass;\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Simple Language Syntax Highlighter in Java\nDESCRIPTION: Defines a syntax highlighter class that extends SyntaxHighlighterBase to provide basic syntax highlighting for Simple Language files. The highlighter specifies text attribute keys as dependencies on standard IntelliJ Platform keys.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/custom_language_support/syntax_highlighter_and_color_settings_page.md#2025-04-06_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\npublic class SimpleSyntaxHighlighter extends SyntaxHighlighterBase\n```\n\n----------------------------------------\n\nTITLE: Defining a Service Interface in Java\nDESCRIPTION: Shows how to create an interface for an application-level service in Java. The interface is used to expose the service's API.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/plugin_structure/plugin_services.md#2025-04-06_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\npublic interface MyAppService {\n  void doSomething(String param);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SimpleFormattingModelBuilder in Java\nDESCRIPTION: Defines a formatter that removes extra spaces except for single spaces around the property separator. It implements the FormattingModelBuilder interface.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/custom_language_support/formatter.md#2025-04-06_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\npublic class SimpleFormattingModelBuilder implements FormattingModelBuilder {\n    @Override\n    public @NotNull FormattingModel createModel(@NotNull FormattingContext formattingContext) {\n        final CommonCodeStyleSettings settings = formattingContext.getCodeStyleSettings()\n                .getCommonSettings(SimpleLanguage.INSTANCE);\n        return FormattingModelProvider\n                .createFormattingModelForPsiFile(formattingContext.getContainingFile(),\n                        new SimpleBlock(formattingContext.getNode(),\n                                Wrap.createWrap(WrapType.NONE, false),\n                                Alignment.createAlignment(),\n                                createSpaceBuilder(settings)),\n                        settings);\n    }\n\n    private static SpacingBuilder createSpaceBuilder(CommonCodeStyleSettings settings) {\n        return new SpacingBuilder(settings.getRootSettings(), SimpleLanguage.INSTANCE)\n                .around(SimpleTypes.SEPARATOR)\n                .spaceIf(settings.SPACE_AROUND_ASSIGNMENT_OPERATORS)\n                .before(SimpleTypes.PROPERTY)\n                .none();\n    }\n\n    @Override\n    public @Nullable TextRange getRangeAffectingIndent(PsiFile file, int offset, ASTNode elementAtOffset) {\n        return null;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Panel Layout in Kotlin UI DSL\nDESCRIPTION: Demonstrates how to create a basic panel layout using the Kotlin UI DSL. The panel contains rows which can hold child components.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/user_interface_components/kotlin_ui_dsl.md#2025-04-06_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\npanel {\n  row {\n    // child components\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Correct and Incorrect IO Dispatcher Usage in Kotlin\nDESCRIPTION: Demonstrates the proper way to use the IO dispatcher for file reading operations. The correct approach limits the IO dispatcher usage to the actual IO operation, while the incorrect approach wraps the entire function in the IO dispatcher.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/architectural_overview/threading/coroutines/coroutine_dispatchers.md#2025-04-06_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nsuspend fun readDataFromFile(): Data {\n  return withContext(Dispatchers.IO) {\n    val fileName = computeFileName()\n    val bytes = readFile(fileName)\n    Data(parseBytes(bytes))\n  }\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nsuspend fun readDataFromFile(): Data {\n  val fileName = computeFileName()\n  val bytes = withContext(Dispatchers.IO) {\n    readFile(fileName)\n  }\n  return Data(parseBytes(bytes))\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Dynamic Extension Points\nDESCRIPTION: Example of declaring a dynamic extension point in plugin.xml for supporting Dynamic Plugins.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/plugin_structure/plugin_extension_points.md#2025-04-06_snippet_4\n\nLANGUAGE: XML\nCODE:\n```\n<extensionPoints>\n  <extensionPoint\n          name=\"myDynamicExtensionPoint\"\n          beanClass=\"com.example.MyBeanClass\"\n          dynamic=\"true\"/>\n</extensionPoints>\n```\n\n----------------------------------------\n\nTITLE: Implementing Logging in Java\nDESCRIPTION: Shows how to set up and use the Logger instance for plugin logging in Java. The Logger abstraction class is used to shield from underlying logging implementation.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/ide_infrastructure.md#2025-04-06_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport com.intellij.openapi.diagnostic.Logger;\n\npublic class MyClass {\n  private static final Logger LOG = Logger.getInstance(MyClass.class);\n\n  public void someMethod() {\n    LOG.info(\"someMethod() was called\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Launching Coroutine from Application Service Scope in Kotlin\nDESCRIPTION: This snippet demonstrates how to create an application-level service that receives its coroutine scope via constructor injection and launches a coroutine from a service method.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/architectural_overview/threading/coroutines/launching_coroutines.md#2025-04-06_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n@Service\nclass MyApplicationService(\n  private val cs: CoroutineScope\n) {\n  fun scheduleSomething() {\n    cs.launch {\n      // do something\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing tearDown Method in Java for IntelliJ Plugin Tests\nDESCRIPTION: This code snippet shows how to properly implement the tearDown method in Java to avoid leaks and side effects from previously run tests. It ensures that super.tearDown() is always called inside a finally block.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/testing_plugins/testing_faq.md#2025-04-06_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nprotected void tearDown() throws Exception {\n  try {\n    // test specific tear-down calls\n  } catch (Exception e) {\n    addSuppressedException(e);\n  } finally {\n    super.tearDown();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing actionPerformed() Method in AnAction Class for IntelliJ Plugin Development\nDESCRIPTION: This code snippet demonstrates how to implement the actionPerformed() method to display a popup dialog when an action is triggered. It retrieves information from the AnActionEvent parameter, checks for Navigatable objects in the current context, and constructs a message dialog with appropriate information.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/action_system/creating_actions_tutorial.md#2025-04-06_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Extending FrameworkTypeEx for Custom Framework in Java\nDESCRIPTION: Creates a new framework class by extending FrameworkTypeEx. This is the foundation for implementing a custom framework type.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/framework.md#2025-04-06_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nfinal class DemoFramework extends FrameworkTypeEx {\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Java Local Variables Using PSI Visitor\nDESCRIPTION: Demonstrates how to use JavaRecursiveElementVisitor to locate all local variable declarations in a Java file. The visitor pattern traverses the PSI tree and prints the offset of each found variable.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/architectural_overview/navigating_psi.md#2025-04-06_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nfile.accept(new JavaRecursiveElementVisitor() {\n  @Override\n  public void visitLocalVariable(@NotNull PsiLocalVariable variable) {\n    super.visitLocalVariable(variable);\n    System.out.println(\"Found a variable at offset \" +\n         variable.getTextRange().getStartOffset());\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring WebStorm Plugin with IntelliJ Platform Gradle Plugin (2.x)\nDESCRIPTION: Demonstrates the minimum Gradle build script setup for WebStorm plugin development using the IntelliJ Platform Gradle Plugin 2.x, including repository configuration and dependencies for WebStorm and the JavaScript plugin.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/products/webstorm/webstorm.md#2025-04-06_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nrepositories {\n  mavenCentral()\n  intellijPlatform {\n    defaultRepositories()\n  }\n}\n\ndependencies {\n  intellijPlatform {\n    webstorm(\"<versionNumber>\")\n    bundledPlugin(\"JavaScript\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Utility to Search Properties in Java\nDESCRIPTION: Creates a SimpleUtil class with methods to search for properties across the project. This utility will be used for features like code completion in the Simple Language Plugin.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/custom_language_support/psi_helper_and_utilities.md#2025-04-06_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\npublic class SimpleUtil {\n\n    public static Project getProject(PsiElement element) {\n        return element.getProject();\n    }\n\n    public static List<SimpleProperty> findProperties(Project project, String key) {\n        List<SimpleProperty> result = new ArrayList<>();\n        Collection<VirtualFile> virtualFiles =\n                FileTypeIndex.getFiles(SimpleFileType.INSTANCE, GlobalSearchScope.allScope(project));\n        for (VirtualFile virtualFile : virtualFiles) {\n            SimpleFile simpleFile = (SimpleFile) PsiManager.getInstance(project).findFile(virtualFile);\n            if (simpleFile != null) {\n                SimpleProperty[] properties = PsiTreeUtil.getChildrenOfType(simpleFile, SimpleProperty.class);\n                if (properties != null) {\n                    for (SimpleProperty property : properties) {\n                        if (key.equals(property.getKey())) {\n                            result.add(property);\n                        }\n                    }\n                }\n            }\n        }\n        return result;\n    }\n\n    public static List<SimpleProperty> findProperties(Project project) {\n        List<SimpleProperty> result = new ArrayList<>();\n        Collection<VirtualFile> virtualFiles =\n                FileTypeIndex.getFiles(SimpleFileType.INSTANCE, GlobalSearchScope.allScope(project));\n        for (VirtualFile virtualFile : virtualFiles) {\n            SimpleFile simpleFile = (SimpleFile) PsiManager.getInstance(project).findFile(virtualFile);\n            if (simpleFile != null) {\n                SimpleProperty[] properties = PsiTreeUtil.getChildrenOfType(simpleFile, SimpleProperty.class);\n                if (properties != null) {\n                    Collections.addAll(result, properties);\n                }\n            }\n        }\n        return result;\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Example Simple Language File Content\nDESCRIPTION: A sample file in the Simple language format showing different syntax elements like comments, key-value pairs, line continuation, and Unicode escapes. Used for testing the lexer and parser implementation.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/custom_language_support/lexer_and_parser_definition.md#2025-04-06_snippet_6\n\nLANGUAGE: properties\nCODE:\n```\n# You are reading the \".properties\" entry.\n! The exclamation mark can also mark text as comments.\nwebsite = https://en.wikipedia.org/\nlanguage = English\n# The backslash below tells the application to continue reading\n# the value onto the next line.\nmessage = Welcome to \\\n          Wikipedia!\n# Add spaces to the key\nkey\\ with\\ spaces = This is the value that could be looked up with the key \"key with spaces\".\n# Unicode\ntab : \\u0009\n```\n\n----------------------------------------\n\nTITLE: Defining Action-Specific Resource Bundle\nDESCRIPTION: XML snippet showing how to define a dedicated resource bundle specifically for actions in plugin.xml. Available since IntelliJ Platform 2020.1.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/action_system.md#2025-04-06_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<actions resource-bundle=\"messages.MyActionsBundle\">\n  <!-- action/group defined here will use keys\n  from MyActionsBundle.properties -->\n</actions>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic LSP Server Support Provider\nDESCRIPTION: Minimal implementation of an LSP plugin showing how to create an LspServerSupportProvider and LspServerDescriptor for handling .foo files with a Language Server.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/custom_language_support/language_server_protocol.md#2025-04-06_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nimport com.intellij.platform.lsp.api.LspServerSupportProvider\nimport com.intellij.platform.lsp.api.ProjectWideLspServerDescriptor\n\ninternal class FooLspServerSupportProvider : LspServerSupportProvider {\n  override fun fileOpened(project: Project, file: VirtualFile, serverStarter: LspServerStarter) {\n    if (file.extension == \"foo\") {\n      serverStarter.ensureServerStarted(FooLspServerDescriptor(project))\n    }\n  }\n}\n\nprivate class FooLspServerDescriptor(project: Project) : ProjectWideLspServerDescriptor(project, \"Foo\") {\n  override fun isSupportedFile(file: VirtualFile) = file.extension == \"foo\"\n  override fun createCommandLine() = GeneralCommandLine(\"foo\", \"--stdio\")\n}\n```\n\n----------------------------------------\n\nTITLE: Applying QuickFix for Comparing String References in Java\nDESCRIPTION: This code snippet demonstrates how to create and apply a QuickFix for comparing string references in Java. It shows the process of creating a replacement PSI tree, replacing placeholders with user code, and updating the original source file.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/architectural_overview/modifying_psi.md#2025-04-06_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nPsiElementFactory factory = JavaPsiFacade.getElementFactory(project);\nPsiMethodCallExpression equalsCall =\n    (PsiMethodCallExpression) factory.createExpressionFromText(\"a.equals(b)\", null);\n\nPsiExpression arg = equalsCall.getArgumentList().getExpressions()[0];\nPsiReferenceExpression ref1 = (PsiReferenceExpression) call.getMethodExpression().getQualifierExpression();\nPsiReferenceExpression ref2 = (PsiReferenceExpression) call.getArgumentList().getExpressions()[0];\nif (ref1 != null && ref2 != null) {\n    equalsCall.getMethodExpression().getQualifierExpression().replace(ref1);\n    arg.replace(ref2);\n}\n\ncall.replace(equalsCall);\n```\n\n----------------------------------------\n\nTITLE: Code Style Settings Provider Implementation\nDESCRIPTION: Implements a settings provider that instantiates CustomCodeStyleSettings for Simple Language by extending CodeStyleSettingsProvider.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/custom_language_support/code_style_settings.md#2025-04-06_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nSimpleCodeStyleSettingsProvider\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle Build Script for Android Studio Plugin (Kotlin)\nDESCRIPTION: Demonstrates how to set up the Gradle build script using the IntelliJ Platform Gradle Plugin 2.x for an Android Studio plugin project. It includes setting the Android Studio version, adding dependencies, and configuring repositories.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/products/androidstudio/android_studio.md#2025-04-06_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nrepositories {\n  mavenCentral()\n  intellijPlatform {\n    defaultRepositories()\n  }\n}\n\ndependencies {\n  intellijPlatform {\n    androidStudio(\"<versionNumber>\")\n    bundledPlugin(\"org.jetbrains.android\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Project-Level Light Service in Kotlin\nDESCRIPTION: Shows how to implement a project-level light service in Kotlin with proper constructor injection of the Project parameter.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/plugin_structure/plugin_services.md#2025-04-06_snippet_3\n\nLANGUAGE: Kotlin\nCODE:\n```\n@Service(Service.Level.PROJECT)\nclass MyProjectService(private val project: Project) {\n  fun doSomething(param: String) {\n    val projectName = project.name\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ValidationInfo for Inline Error Messages in Java\nDESCRIPTION: This snippet demonstrates how to create a ValidationInfo object for displaying inline error messages without associating it with a specific component. This is useful for showing general error messages in dialogs.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/ui/principles/validation_errors.md#2025-04-06_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nnew ValidationInfo(\n    \"The host cannot be reached. Check the address and credentials.\");\n```\n\n----------------------------------------\n\nTITLE: Simulating User Actions in IntelliJ Platform Plugin Tests\nDESCRIPTION: This snippet demonstrates various helper methods provided by the IntelliJ Platform test framework to simulate user actions such as typing, invoking code completion, and performing refactorings.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/testing_plugins/writing_tests.md#2025-04-06_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\ntype()\nperformEditorAction()\ncomplete()\nfindUsages()\nfindSingleIntention()\nlaunchAction()\nrenameElementAtCaret()\nrename()\n```\n\n----------------------------------------\n\nTITLE: Running Process with Progress Synchronously\nDESCRIPTION: Example of running a synchronous process with progress tracking using ProgressManager. Shows implementation for both Kotlin and Java using ThrowableComputable.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/architectural_overview/threading/background_processes.md#2025-04-06_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nProgressManager.getInstance().runProcessWithProgressSynchronously(\n    ThrowableComputable {\n      // operation\n    },\n    \"Synchronizing data\", true, project\n)\n```\n\nLANGUAGE: java\nCODE:\n```\nProgressManager.getInstance().runProcessWithProgressSynchronously(\n    () -> {\n      // operation\n    },\n    \"Synchronizing data\", true, project\n);\n```\n\n----------------------------------------\n\nTITLE: Defining a Service Interface in Kotlin\nDESCRIPTION: Shows how to create an interface for an application-level service in Kotlin.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/plugin_structure/plugin_services.md#2025-04-06_snippet_8\n\nLANGUAGE: Kotlin\nCODE:\n```\ninterface MyAppService {\n  fun doSomething(param: String)\n}\n```\n\n----------------------------------------\n\nTITLE: Language Code Style Settings Provider Implementation\nDESCRIPTION: Implements language-specific code style settings by extending LanguageCodeStyleSettingsProvider to provide common formatting settings for the Simple language.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/custom_language_support/code_style_settings.md#2025-04-06_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\nSimpleLanguageCodeStyleSettingsProvider\n```\n\n----------------------------------------\n\nTITLE: Registering Action in plugin.xml - Full Configuration\nDESCRIPTION: Complete XML configuration for registering a custom action with additional attributes like icons, keyboard shortcuts, and text overrides.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/action_system/creating_actions_tutorial.md#2025-04-06_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<action\n    id=\"org.intellij.sdk.action.PopupDialogAction\"\n    class=\"org.intellij.sdk.action.PopupDialogAction\"\n    text=\"Action Basics Plugin: Popup Dialog Action\"\n    description=\"SDK action example\"\n    icon=\"SdkIcons.Sdk_default_icon\">\n  <override-text place=\"MainMenu\" text=\"Popup Dialog Action\"/>\n  <keyboard-shortcut\n      keymap=\"$default\"\n      first-keystroke=\"control alt A\"\n      second-keystroke=\"C\"/>\n  <mouse-shortcut\n      keymap=\"$default\"\n      keystroke=\"control button3 doubleClick\"/>\n  <add-to-group group-id=\"ToolsMenu\" anchor=\"first\"/>\n</action>\n```\n\n----------------------------------------\n\nTITLE: Configuring PyCharm Plugin with Gradle (Kotlin DSL)\nDESCRIPTION: Demonstrates how to configure a Gradle build script using Kotlin DSL to target PyCharm as the development platform. Sets the type to 'PY' for PyCharm Professional and specifies the version.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/products/dev_alternate_products.md#2025-04-06_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nintellij {\n  type.set(\"PY\")\n  version.set(\"2019.2.3\")\n}\n```\n\n----------------------------------------\n\nTITLE: Creating SimplePropertyIconProvider for Custom Icons\nDESCRIPTION: This class extends IconProvider to provide custom icons for Simple language property elements in the UI.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/custom_language_support/go_to_symbol_contributor.md#2025-04-06_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\npublic class SimplePropertyIconProvider extends IconProvider {\n    @Override\n    public Icon getIcon(@NotNull PsiElement element, @Iconable.IconFlags int flags) {\n        if (element instanceof SimpleProperty) {\n            return SimpleIcons.FILE;\n        }\n        return null;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MultiHostInjector for Regular Expression Injection\nDESCRIPTION: Demonstrates how to implement the MultiHostInjector interface to inject regular expressions into Java string literals. This low-level API provides the most flexibility for language injection.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/custom_language_support/language_injection.md#2025-04-06_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\nfinal class MyRegExpToJavaInjector implements MultiHostInjector {\n\n  @Override\n  public void getLanguagesToInject(@NotNull MultiHostRegistrar registrar,\n                                   @NotNull PsiElement context) {\n    if (context instanceof PsiLiteralExpression && shouldInject(context)) {\n      registrar\n        .startInjecting(RegExpLanguage.INSTANCE)\n        .addPlace(null, null,\n                  (PsiLanguageInjectionHost)context,\n                  innerRangeStrippingQuotes(context))\n        .doneInjecting();\n    }\n  }\n\n  @Override\n  public @NotNull List<? extends Class<? extends PsiElement>> elementsToInjectIn() {\n    return List.of(PsiLiteralExpression.class);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Reference Contributor in plugin.xml\nDESCRIPTION: XML configuration to register the SimpleReferenceContributor with the IntelliJ Platform.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/custom_language_support/reference_contributor.md#2025-04-06_snippet_4\n\nLANGUAGE: XML\nCODE:\n```\n<extensions defaultExtensionNs=\"com.intellij\">\n  <psi.referenceContributor\n      language=\"JAVA\"\n      implementation=\"org.intellij.sdk.language.SimpleReferenceContributor\"/>\n</extensions>\n```\n\n----------------------------------------\n\nTITLE: Implementing SimpleFindUsagesProvider in Java\nDESCRIPTION: Defines a FindUsagesProvider for the Simple Language, implementing methods for word scanning, type and descriptor naming, and usage type determination.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/custom_language_support/find_usages_provider.md#2025-04-06_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\npublic class SimpleFindUsagesProvider implements FindUsagesProvider {\n    @Nullable\n    @Override\n    public WordsScanner getWordsScanner() {\n        return new DefaultWordsScanner(new SimpleLanguageLexerAdapter(),\n                TokenSet.create(SimpleTypes.KEY),\n                TokenSet.create(SimpleTypes.COMMENT),\n                TokenSet.EMPTY);\n    }\n\n    @Override\n    public boolean canFindUsagesFor(@NotNull PsiElement psiElement) {\n        return psiElement instanceof PsiNamedElement;\n    }\n\n    @Nullable\n    @Override\n    public String getHelpId(@NotNull PsiElement psiElement) {\n        return null;\n    }\n\n    @NotNull\n    @Override\n    public String getType(@NotNull PsiElement element) {\n        if (element instanceof SimpleProperty) {\n            return \"simple property\";\n        }\n        return \"\";\n    }\n\n    @NotNull\n    @Override\n    public String getDescriptiveName(@NotNull PsiElement element) {\n        if (element instanceof SimpleProperty) {\n            return ((SimpleProperty) element).getKey();\n        }\n        return \"\";\n    }\n\n    @NotNull\n    @Override\n    public String getNodeText(@NotNull PsiElement element, boolean useFullName) {\n        if (element instanceof SimpleProperty) {\n            return ((SimpleProperty) element).getKey() + \":\" + ((SimpleProperty) element).getValue();\n        }\n        return \"\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Simple Language Grammar in BNF\nDESCRIPTION: BNF grammar definition specifying the structure and rules for parsing Simple Language files. Includes parser class configuration, PSI class settings, and basic grammar rules for properties.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/custom_language_support/grammar_and_parser.md#2025-04-06_snippet_2\n\nLANGUAGE: BNF\nCODE:\n```\n{\n  parserClass=\"org.intellij.sdk.language.parser.SimpleParser\"\n\n  extends=\"com.intellij.extapi.psi.ASTWrapperPsiElement\"\n\n  psiClassPrefix=\"Simple\"\n  psiImplClassSuffix=\"Impl\"\n  psiPackage=\"org.intellij.sdk.language.psi\"\n  psiImplPackage=\"org.intellij.sdk.language.psi.impl\"\n\n  elementTypeHolderClass=\"org.intellij.sdk.language.psi.SimpleTypes\"\n  elementTypeClass=\"org.intellij.sdk.language.psi.SimpleElementType\"\n  tokenTypeClass=\"org.intellij.sdk.language.psi.SimpleTokenType\"\n}\n\nsimpleFile ::= item_*\n\nprivate item_ ::= (property|COMMENT|CRLF)\n\nproperty ::= (KEY? SEPARATOR VALUE?) | KEY\n```\n\n----------------------------------------\n\nTITLE: Correct Line Marker Provider Implementation in Java\nDESCRIPTION: A corrected version of a line marker provider implementation that properly returns marker info for PsiIdentifier instead of PsiMethod. This ensures the line marker icon doesn't blink when methods are partially visible in the editor.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/custom_language_support/line_marker_provider.md#2025-04-06_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nfinal class MyCorrectLineMarkerProvider implements LineMarkerProvider {\n  public LineMarkerInfo getLineMarkerInfo(@NotNull PsiElement element) {\n    if (element instanceof PsiIdentifier &&\n            element.getParent() instanceof PsiMethod) {\n      return new LineMarkerInfo(element, ...);\n    }\n    return null;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Contributed References with File Path in String Literal\nDESCRIPTION: Example showing how the IDE contributes references to string literals based on API semantics. The string \"foo.txt\" gets a reference to the actual file, enabling navigation.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/architectural_overview/psi_references.md#2025-04-06_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nFile file = new File(\"foo.txt\");\n```\n\n----------------------------------------\n\nTITLE: Implementing API Integration Test in Kotlin\nDESCRIPTION: This test demonstrates how to use the remote stubs to interact with the IDE process. It sets up the test environment, installs a plugin, and calls various methods on remote objects to verify their behavior.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/testing_plugins/integration_tests/integration_tests_api.md#2025-04-06_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\n@Test\nfun testStubs() {\n  Starter.newContext(\n    \"testExample\",\n    TestCase(\n      IdeProductProvider.IC,\n      GitHubProject.fromGithub(\n        branchName = \"master\",\n        repoRelativeUrl = \"JetBrains/ij-perf-report-aggregator\"\n      )\n    )\n      .withVersion(\"2024.3\")\n  )\n    .apply {\n      val pathToPlugin = System.getProperty(\"path.to.build.plugin\")\n      PluginConfigurator(this).installPluginFromFolder(File(pathToPlugin))\n    }.runIdeWithDriver().useDriverAndCloseIde {\n      val storage = utility<PluginStorage>().getPluginStorage()\n      val key = storage.getKey()\n      val attributes = storage.getAttributes()\n      Assertions.assertEquals(\"static method\", key)\n      Assertions.assertEquals(listOf(\"static1\", \"static2\"), attributes)\n      val answer = service<PluginService>().getAnswer()\n      Assertions.assertEquals(42, answer)\n      waitForProjectOpen()\n      val project = singleProject()\n      val strings = service<PluginProjectService>(project).getStrings()\n      Assertions.assertArrayEquals(arrayOf(\"foo\", \"bar\"), strings)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Attaching ConsoleView to Process Output in Java\nDESCRIPTION: Attaches a ConsoleView instance to the output of a process. This step is necessary to display the process output in the console.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/execution/execution.md#2025-04-06_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nConsoleView.attachToProcess()\n```\n\n----------------------------------------\n\nTITLE: Creating an EditorTextField for Java Code Fragment\nDESCRIPTION: This snippet demonstrates how to create an EditorTextField for entering Java code. It shows how to get a document from a PsiExpressionCodeFragment and use it to create an EditorTextField with Java file type. This approach enables syntax highlighting and other editor features.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/user_interface_components/editor_components.md#2025-04-06_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nPsiFile psiFile = PsiDocumentManager.getInstance(project)\n        .getPsiFile(editor.getDocument());\nPsiElement element =\n        psiFile.findElementAt(editor.getCaretModel().getOffset());\n\nPsiExpressionCodeFragment code =\n        JavaCodeFragmentFactory.getInstance(project)\n        .createExpressionCodeFragment(\"\", element, null, true);\n\nDocument document =\n        PsiDocumentManager.getInstance(project).getDocument(code);\n\nEditorTextField editorTextField =\n        new EditorTextField(document, project, JavaFileType.INSTANCE);\n```\n\n----------------------------------------\n\nTITLE: Removing Child Entities by Modifying Parent References\nDESCRIPTION: Demonstrates how to remove a child entity by modifying the parent entity's references. This example filters out a content root from a module's content roots collection based on URL.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/workspace_model/workspace_model_entity_mutation.md#2025-04-06_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nbuilder.modifyModuleEntity(module) {\n  contentRoots = contentRoots.filter { it.url != contentUrlToRemove }\n}\n```\n\n----------------------------------------\n\nTITLE: Java PersistentStateComponent with Separate State Class\nDESCRIPTION: Implementation of PersistentStateComponent in Java using a separate state class for data storage.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/persisting_state_of_components.md#2025-04-06_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@Service\n@State(...)\nclass MySettings implements PersistentStateComponent<MySettings.State> {\n\n  static class State {\n    public String value;\n  }\n\n  private State myState = new State();\n\n  @Override\n  public State getState() {\n    return myState;\n  }\n\n  @Override\n  public void loadState(State state) {\n    myState = state;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Multi-Module IntelliJ Plugin Project in Kotlin\nDESCRIPTION: A complete example of configuring a multi-module plugin project in Kotlin, including the settings file, main module build script, and submodule build script. This shows how to properly use the Platform plugin for the root module and Module plugin for submodules.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_plugins.md#2025-04-06_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nrootProject.name = \"...\"\n\ninclude(\":submodule\")\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n  id(\"org.jetbrains.intellij.platform.module\")\n}\n\nrepositories {\n  mavenCentral()\n\n  intellijPlatform {\n    defaultRepositories()\n  }\n}\n\ndependencies {\n  intellijPlatform {\n    intellijIdeaCommunity(\"%ijPlatform%\")\n  }\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n  id(\"org.jetbrains.intellij.platform\") version \"%intellij-platform-gradle-plugin-version%\"\n}\n\nrepositories {\n  mavenCentral()\n\n  intellijPlatform {\n    defaultRepositories()\n  }\n}\n\ndependencies {\n  intellijPlatform {\n    intellijIdeaCommunity(\"%ijPlatform%\")\n    pluginModule(implementation(project(\":submodule\")))\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing getCustomDocumentationElement for Simple Language Properties in Java Strings\nDESCRIPTION: This method extracts SimpleProperty elements from different contexts - either from inside Java string literals or from Simple language files. It uses PSI references to resolve the target element correctly and enable documentation display across language boundaries.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/custom_language_support/documentation_provider.md#2025-04-06_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\n@Override\npublic @Nullable PsiElement getCustomDocumentationElement(@NotNull Editor editor,\n                                                          @NotNull PsiFile file,\n                                                          @Nullable PsiElement context,\n                                                          int targetOffset) {\n  if (context != null) {\n    // In this part the SimpleProperty element\n    // is extracted from inside a Java string\n    if (context instanceof PsiJavaToken &&\n        ((PsiJavaToken) context).getTokenType().equals(JavaTokenType.STRING_LITERAL)) {\n      PsiElement parent = context.getParent();\n      PsiReference[] references = parent.getReferences();\n      for (PsiReference ref : references) {\n        if (ref instanceof SimpleReference) {\n          PsiElement property = ref.resolve();\n          if (property instanceof SimpleProperty) {\n            return property;\n          }\n        }\n      }\n    }\n    // In this part the SimpleProperty element is extracted\n    // when inside of a .simple file\n    else if (context.getLanguage() == SimpleLanguage.INSTANCE) {\n      PsiElement property =\n        PsiTreeUtil.getParentOfType(context, SimpleProperty.class);\n      if (property != null) {\n        return property;\n      }\n    }\n  }\n  return super.getCustomDocumentationElement(\n      editor, file, context, targetOffset);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Plugin Classes for Remote Access in Kotlin\nDESCRIPTION: This snippet defines classes and objects that will be accessed remotely from integration tests. It includes a static object, application-level and project-level services, and a data class.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/testing_plugins/integration_tests/integration_tests_api.md#2025-04-06_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\npackage com.example.demo\n\nobject PluginStorage {\n  @JvmStatic\n  fun getPluginStorage() = Storage(\"static method\", listOf(\"static1\", \"static2\"))\n}\n\n@Service\nclass PluginService {\n  fun someMethod(): Unit = Unit\n  fun getAnswer(): Int = 42\n}\n\n@Service(Service.Level.PROJECT)\nclass PluginProjectService {\n  fun getStrings(): Array<String> = arrayOf(\"foo\", \"bar\")\n}\n\ndata class Storage(val key: String, val attributes: List<String>)\n```\n\n----------------------------------------\n\nTITLE: Enabling Action Visibility in Java\nDESCRIPTION: Demonstrates how to enable or disable an action and set its visibility based on the current context using the AnAction.update() method and Presentation object.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/action_system.md#2025-04-06_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\npublic void update(AnActionEvent e) {\n    // Get the presentation\n    Presentation presentation = e.getPresentation();\n    \n    // Enable or disable the action\n    presentation.setEnabled(/* condition */);\n    \n    // Set the visibility of the action\n    presentation.setVisible(/* condition */);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating PSI File from Language Parser in Java\nDESCRIPTION: Shows how to create a PSI file using a Language instance and its parser definitions. This is typically used when implementing custom language support.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/architectural_overview/psi_files.md#2025-04-06_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nLanguageParserDefinitions.INSTANCE\n    .forLanguage(MyLanguage.INSTANCE)\n    .createFile(fileViewProvider);\n```\n\n----------------------------------------\n\nTITLE: Getting Module SDK Information in Java\nDESCRIPTION: This code snippet shows how to retrieve detailed information about the SDK used by a specified module, including name, version, and home directory.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/project_model/module.md#2025-04-06_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nModuleRootManager moduleRootManager = ModuleRootManager.getInstance(module);\nSdk sdk = moduleRootManager.getSdk();\nString jdkInfo = \"Module: \" + module.getName() +\n    \" SDK: \" + sdk.getName() +\n    \" SDK version: \" + sdk.getVersionString() +\n    \" SDK home directory: \" + sdk.getHomePath();\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Sets in Gradle\nDESCRIPTION: Gradle configuration to include generated parser sources in the project's source sets, shown in both Kotlin and Groovy DSL syntax.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/custom_language_support/grammar_and_parser.md#2025-04-06_snippet_3\n\nLANGUAGE: Kotlin\nCODE:\n```\nsourceSets[\"main\"].java.srcDirs(\"src/main/gen\")\n```\n\nLANGUAGE: Groovy\nCODE:\n```\nsourceSets.main.java.srcDirs 'src/main/gen'\n```\n\n----------------------------------------\n\nTITLE: Getting Package Reference From Java Class\nDESCRIPTION: This code demonstrates how to obtain a reference to the package containing a Java class by first accessing the containing file, then using JavaPsiFacade to find the package based on the package name.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/psi_cookbook.md#2025-04-06_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nPsiJavaFile javaFile = (PsiJavaFile) psiClass.getContainingFile();\nPsiPackage psiPackage = JavaPsiFacade.getInstance(project)\n    .findPackage(javaFile.getPackageName());\n```\n\n----------------------------------------\n\nTITLE: Creating a Project-Level Light Service in Java\nDESCRIPTION: Shows how to implement a project-level light service in Java, including how to properly use the Project parameter in the constructor.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/plugin_structure/plugin_services.md#2025-04-06_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\n@Service(Service.Level.PROJECT)\npublic final class MyProjectService {\n\n  private final Project myProject;\n\n  MyProjectService(Project project) {\n    myProject = project;\n  }\n\n  public void doSomething(String param) {\n    String projectName = myProject.getName();\n    // ...\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Extensions with Fully Qualified Name\nDESCRIPTION: Example of declaring extensions using a fully qualified extension name to register a custom VCS extension.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/plugin_structure/plugin_configuration_file.md#2025-04-06_snippet_16\n\nLANGUAGE: XML\nCODE:\n```\n<extensions>\n  <com.example.vcs.myExtension\n      implementation=\"com.example.MyExtension\"/>\n</extensions>\n```\n\n----------------------------------------\n\nTITLE: Implementing Color Settings Page in Java\nDESCRIPTION: Creates a color settings page class that implements ColorSettingsPage to allow users to customize color settings for Simple Language highlighting.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/custom_language_support/syntax_highlighter_and_color_settings_page.md#2025-04-06_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\npublic class SimpleColorSettingsPage implements ColorSettingsPage\n```\n\n----------------------------------------\n\nTITLE: Implementing ParserDefinition for Properties Language\nDESCRIPTION: Example of implementing ParserDefinition for the Properties language plugin. It demonstrates how to define the parser, file type, and token sets for a custom language.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/custom_language_support/implementing_parser_and_psi.md#2025-04-06_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nParserDefinition for Properties language plugin\n```\n\n----------------------------------------\n\nTITLE: Service Retrieval Flow Diagram\nDESCRIPTION: PlantUML diagram illustrating the complete flow of service retrieval, including initialization checks, thread safety considerations, and error handling.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/plugin_structure/plugin_services.md#2025-04-06_snippet_15\n\nLANGUAGE: plantuml\nCODE:\n```\n@startuml\nskinparam monochrome true\nskinparam DefaultFontName JetBrains Sans\nskinparam DefaultFontSize 13\nskinparam DefaultTextAlignment center\nskinparam NoteTextAlignment left\n\n' default 1.5\nskinparam ActivityBorderThickness 1\n' default 2\nskinparam PartitionBorderThickness 1.5\n\n:getService;\nnote right\n  Allowed in any thread.\n  Call on demand only.\n  Never cache the result.\n  Do not call in constructors\n  unless needed.\nend note\n\nif (Is Light Service) then (yes)\nelse (no)\n  if (Is Service Declaration Found) then (yes)\n  else (no)\n    :Return null;\n    detach\n  endif\nendif\n\nif (Is Created and Initialized?) then (yes)\nelse (no)\n  if (Is Container Active?) then (yes)\n    partition \"synchronized\\non service class\" {\n      if (Is Created and Initialized?) then (yes)\n      else (no)\n        if (Is Initializing?) then (yes)\n          :Throw\n          PluginException\n          (Cyclic Service\n          Initialization);\n          detach\n        else (no)\n          partition \"non-cancelable\" {\n            :Create Instance]\n            note right\n              Avoid getting other\n              services to reduce\n              the initialization tree.\n              The fewer the\n              dependencies,\n              the faster and more\n              reliable initialization.\n            end note\n\n            :Register to be Disposed\n            on Container Dispose\n            (Disposable only)]\n            :Load Persistent State\n            (PersistentStateComponent\n            only)]\n          }\n        endif\n      endif\n    }\n  else (disposed or dispose in progress)\n    :Throw\n    ProcessCanceledException;\n    detach\n  endif\nendif\n\n:Return Instance;\n\n@enduml\n```\n\n----------------------------------------\n\nTITLE: Setting Project SDK Name in Java\nDESCRIPTION: Sets the project-level SDK name using ProjectRootManager. This snippet shows how to set the SDK name and type for a project.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/project_model/sdk.md#2025-04-06_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nProjectRootManager.getInstance(project).setProjectSdkName(name, sdk.getSdkType().getName());\n```\n\n----------------------------------------\n\nTITLE: Integration Test with GitHub Project\nDESCRIPTION: Integration test that opens a GitHub project and verifies plugin behavior with an actual project context.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/testing_plugins/integration_tests/integration_tests_intro.md#2025-04-06_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\n@Test\nfun simpleTest() {\n  Starter.newContext(\n    \"testExample\",\n    TestCase(\n      IdeProductProvider.IC,\n      GitHubProject.fromGithub(\n        branchName = \"master\",\n        repoRelativeUrl = \"JetBrains/ij-perf-report-aggregator\"\n      )\n    ).withVersion(\"2024.2\")\n  ).apply {\n    val pathToPlugin = System.getProperty(\"path.to.build.plugin\")\n    PluginConfigurator(this).installPluginFromFolder(File(pathToPlugin))\n  }.runIdeWithDriver().useDriverAndCloseIde {\n    waitForIndicators(5.minutes)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Parser Definition for Simple Language\nDESCRIPTION: A parser definition class that configures how the Simple language files are parsed. It defines the lexer, token types, element types, and file factory methods required by the IntelliJ Platform's parsing framework.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/custom_language_support/lexer_and_parser_definition.md#2025-04-06_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n// Copyright 2000-2022 JetBrains s.r.o. and other contributors. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.\npackage org.intellij.sdk.language;\n\nimport com.intellij.lang.ASTNode;\nimport com.intellij.lang.ParserDefinition;\nimport com.intellij.lang.PsiParser;\nimport com.intellij.lexer.Lexer;\nimport com.intellij.openapi.project.Project;\nimport com.intellij.psi.FileViewProvider;\nimport com.intellij.psi.PsiElement;\nimport com.intellij.psi.PsiFile;\nimport com.intellij.psi.TokenType;\nimport com.intellij.psi.tree.IFileElementType;\nimport com.intellij.psi.tree.TokenSet;\nimport org.intellij.sdk.language.parser.SimpleParser;\nimport org.intellij.sdk.language.psi.SimpleFile;\nimport org.intellij.sdk.language.psi.SimpleTokenSets;\nimport org.intellij.sdk.language.psi.SimpleTypes;\nimport org.jetbrains.annotations.NotNull;\n\npublic class SimpleParserDefinition implements ParserDefinition {\n\n  public static final IFileElementType FILE = new IFileElementType(SimpleLanguage.INSTANCE);\n\n  @NotNull\n  @Override\n  public Lexer createLexer(Project project) {\n    return new SimpleLexerAdapter();\n  }\n\n  @NotNull\n  @Override\n  public TokenSet getCommentTokens() {\n    return SimpleTokenSets.COMMENTS;\n  }\n\n  @NotNull\n  @Override\n  public TokenSet getStringLiteralElements() {\n    return TokenSet.EMPTY;\n  }\n\n  @NotNull\n  @Override\n  public PsiParser createParser(final Project project) {\n    return new SimpleParser();\n  }\n\n  @NotNull\n  @Override\n  public IFileElementType getFileNodeType() {\n    return FILE;\n  }\n\n  @NotNull\n  @Override\n  public PsiFile createFile(@NotNull FileViewProvider viewProvider) {\n    return new SimpleFile(viewProvider);\n  }\n\n  @NotNull\n  @Override\n  public PsiElement createElement(ASTNode node) {\n    return SimpleTypes.Factory.createElement(node);\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle for GoLand IDE (Kotlin)\nDESCRIPTION: Gradle configuration for targeting GoLand IDE using the Gradle IntelliJ Plugin 1.x. It sets the IntelliJ IDEA version, specifies the GO platform type, and adds a dependency on the Go plugin.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/products/goland/goland.md#2025-04-06_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nintellij {\n  version.set(\"2020.3\")\n  type.set(\"GO\")\n\n  // required if Go language API is needed:\n  plugins.set(listOf(\"org.jetbrains.plugins.go\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Module Content Roots in Java\nDESCRIPTION: This code snippet shows how to access the content roots of a module using the ModuleRootManager class.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/project_model/module.md#2025-04-06_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\nVirtualFile[] contentRoots = ModuleRootManager.getInstance(module).getContentRoots();\n```\n\n----------------------------------------\n\nTITLE: Implementing RunConfiguration for IntelliJ Custom Run Configuration\nDESCRIPTION: Defines the RunConfiguration implementation that holds configuration data, validates settings, and creates the RunProfileState for execution. This class connects the UI with the actual execution logic.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/run_configurations_tutorial.md#2025-04-06_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic class DemoRunConfiguration extends RunConfigurationBase<DemoRunConfigurationOptions> {\n  protected DemoRunConfiguration(Project project, ConfigurationFactory factory, String name) {\n    super(project, factory, name);\n  }\n\n  @Override\n  public @NotNull DemoRunConfigurationOptions getOptions() {\n    return (DemoRunConfigurationOptions) super.getOptions();\n  }\n\n  @Override\n  public void checkConfiguration() throws RuntimeConfigurationException {\n    if (getOptions().getScriptName().isBlank()) {\n      throw new RuntimeConfigurationException(\"Script name can't be empty\");\n    }\n  }\n\n  public String getScriptName() {\n    return getOptions().getScriptName();\n  }\n\n  public void setScriptName(String scriptName) {\n    getOptions().setScriptName(scriptName);\n  }\n\n  public String getScriptParameters() {\n    return getOptions().getScriptParameters();\n  }\n\n  public void setScriptParameters(String scriptParameters) {\n    getOptions().setScriptParameters(scriptParameters);\n  }\n\n  @Override\n  public @Nullable RunProfileState getState(@NotNull Executor executor, @NotNull ExecutionEnvironment environment) {\n    return new CommandLineState(environment) {\n      @Override\n      protected @NotNull ProcessHandler startProcess() throws ExecutionException {\n        GeneralCommandLine commandLine = new GeneralCommandLine(getScriptName());\n        if (!getScriptParameters().isBlank()) {\n          commandLine.addParameters(ParametersListUtil.parse(getScriptParameters()));\n        }\n        OSProcessHandler processHandler = new OSProcessHandler(commandLine);\n        ProcessTerminatedListener.attach(processHandler);\n        return processHandler;\n      }\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ConfigurationType in Java for IntelliJ Run Configuration\nDESCRIPTION: Defines a custom run configuration type named 'Demo' in the IntelliJ Platform. This class specifies the configuration's display name, description, icon, and factory for creating configuration instances.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/run_configurations_tutorial.md#2025-04-06_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class DemoRunConfigurationType implements ConfigurationType {\n  @Override\n  public @NotNull String getDisplayName() {\n    return \"Demo\";\n  }\n\n  @Override\n  public String getConfigurationTypeDescription() {\n    return \"Demo run configuration type\";\n  }\n\n  @Override\n  public @NotNull Icon getIcon() {\n    return AllIcons.General.Information;\n  }\n\n  @Override\n  public @NotNull String getId() {\n    return \"DEMO_RUN_CONFIGURATION\";\n  }\n\n  @Override\n  public ConfigurationFactory[] getConfigurationFactories() {\n    return new ConfigurationFactory[]{new DemoConfigurationFactory(this)};\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Disposable Interface in Java\nDESCRIPTION: Example class implementing the Disposable interface with constructor registration and disposal logic. Shows how to properly register with a parent disposable and clean up resources in the dispose method.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/disposers.md#2025-04-06_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic class Foo<T> extends JBFoo implements Disposable {\n\n  public Foo(@NotNull Project project,\n             @NotNull String name,\n             @Nullable FileEditor fileEditor,\n             @NotNull Disposable parentDisposable) {\n    this(project, name, fileEditor, InitParams.createParams(project),\n        DetachedToolWindowManager.getInstance(project));\n    Disposer.register(parentDisposable, this);\n  }\n\n  @Override\n  public void dispose() {\n    myFooManager.unregister(this);\n    myDetachedToolWindowManager.unregister(myFileEditor);\n    KeyboardFocusManager.getCurrentKeyboardFocusManager()\n        .removePropertyChangeListener(\"focusOwner\", myMyPropertyChangeListener);\n    setToolContext(null);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying and Removing Entities in WorkspaceModel\nDESCRIPTION: Shows how to modify or remove existing entities in the WorkspaceModel. This example demonstrates finding an entity by ID, removing a child entity, and modifying a module entity's properties.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/workspace_model/workspace_model_entity_mutation.md#2025-04-06_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nWorkspaceModel.getInstance(project).updateProjectModel(\"Update module\") { builder ->\n  val module = ModuleId(moduleName).resolve(builder) ?: ...\n  val groupPath = module.groupPath ?: ...\n  builder.removeEntity(groupPath)\n  // a special extension function 'modifyEntity'\n  // is generated for each entity type\n  builder.modifyModuleEntity(module) {\n    name = prefix + name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a File Type for Simple Language\nDESCRIPTION: Implementation of a custom file type for the Simple language. This class defines properties like file extension (.simple), icon, and description for the Simple language files.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/custom_language_support/language_and_filetype.md#2025-04-06_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\npublic class SimpleFileType extends LanguageFileType {\n\n  public static final SimpleFileType INSTANCE = new SimpleFileType();\n\n  private SimpleFileType() {\n    super(SimpleLanguage.INSTANCE);\n  }\n\n  @Override\n  public @NotNull String getName() {\n    return \"Simple File\";\n  }\n\n  @Override\n  public @NotNull String getDescription() {\n    return \"Simple language file\";\n  }\n\n  @Override\n  public @NotNull String getDefaultExtension() {\n    return \"simple\";\n  }\n\n  @Override\n  public Icon getIcon() {\n    return SimpleIcons.FILE;\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Plugin Dependency in plugin.xml\nDESCRIPTION: Example of declaring a dependency on another plugin in the plugin.xml file. The depends tag should contain the plugin ID of the dependency.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/plugin_structure/plugin_dependencies.md#2025-04-06_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<depends>com.example.another-plugin</depends>\n```\n\n----------------------------------------\n\nTITLE: Defining Resource Bundle\nDESCRIPTION: Example of declaring a resource bundle for message localization in the plugin.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/plugin_structure/plugin_configuration_file.md#2025-04-06_snippet_19\n\nLANGUAGE: XML\nCODE:\n```\n<resource-bundle>messages.Bundle</resource-bundle>\n```\n\n----------------------------------------\n\nTITLE: Creating Icon Holder Class in Java\nDESCRIPTION: Demonstrates how to create an icon holder interface in Java that organizes plugin icons as static fields. The class is placed in a top-level package called 'icons' and uses IconLoader to load SVG icons.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/icons.md#2025-04-06_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\npackage icons;\n\npublic interface MyIcons {\n  Icon Action = IconLoader.getIcon(\"/icons/action.svg\", MyIcons.class);\n  Icon ToolWindow = IconLoader.getIcon(\"/icons/toolWindow.svg\", MyIcons.class);\n}\n```\n\n----------------------------------------\n\nTITLE: Local File System Refresh Method\nDESCRIPTION: Method that refreshes and locates a file by path in the local file system.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/architectural_overview/virtual_file_system.md#2025-04-06_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nLocalFileSystem.refreshAndFindFileByPath()\n```\n\n----------------------------------------\n\nTITLE: Searching for Module by Name with Workspace Model in Kotlin\nDESCRIPTION: Demonstrates how to search for a module by its name using the Workspace Model API. It gets the current snapshot of the workspace model and uses it to resolve a module by its ID.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/workspace_model/workspace_model_usages.md#2025-04-06_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval moduleId = ModuleId(\"moduleName\")\nval entityStorage: ImmutableEntityStorage =\n  WorkspaceModel.getInstance(project).currentSnapshot\nentityStorage.resolve(moduleId)\n```\n\n----------------------------------------\n\nTITLE: Resolving PSI Reference to Target Element\nDESCRIPTION: This code snippet demonstrates how to resolve a PSI reference to its target element. This is commonly used when working with references in code, such as resolving a method call to its method declaration.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/architectural_overview/psi_elements.md#2025-04-06_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nPsiReference.resolve()\n```\n\n----------------------------------------\n\nTITLE: Declaring Resource Bundle for Action Localization\nDESCRIPTION: XML snippet showing how to define a resource bundle for action localization in plugin.xml. This allows for locale-specific action text and descriptions rather than hardcoding them.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/action_system.md#2025-04-06_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<resource-bundle>messages.BasicActionsBundle</resource-bundle>\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle Dependencies for Integration Testing\nDESCRIPTION: Gradle configuration that sets up integration test dependencies, source sets, and tasks for IntelliJ plugin testing. Includes setup for test frameworks, dependency injection, and coroutines.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/testing_plugins/integration_tests/integration_tests_intro.md#2025-04-06_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ndependencies {\n  intellijPlatform {\n    //...\n    testFramework(TestFrameworkType.Starter)\n  }\n\nsourceSets {\n  create(\"integrationTest\") {\n    compileClasspath += sourceSets.main.get().output\n    runtimeClasspath += sourceSets.main.get().output\n  }\n}\n\nval integrationTestImplementation by configurations.getting {\n  extendsFrom(configurations.testImplementation.get())\n}\n\ndependencies {\n  integrationTestImplementation(\"org.junit.jupiter:junit-jupiter:5.7.1\")\n  integrationTestImplementation(\"org.kodein.di:kodein-di-jvm:7.20.2\")\n  integrationTestImplementation(\"org.jetbrains.kotlinx:kotlinx-coroutines-core-jvm:1.10.1\")\n}\n\nval integrationTest = task<Test>(\"integrationTest\") {\n  val integrationTestSourceSet = sourceSets.getByName(\"integrationTest\")\n  testClassesDirs = integrationTestSourceSet.output.classesDirs\n  classpath = integrationTestSourceSet.runtimeClasspath\n  systemProperty(\"path.to.build.plugin\", tasks.prepareSandbox.get().pluginDirectory.get().asFile)\n  useJUnitPlatform()\n  dependsOn(tasks.prepareSandbox)\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Project SDK in Java\nDESCRIPTION: Sets the project-level SDK using ProjectRootManager. This snippet demonstrates how to change the SDK for a project.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/project_model/sdk.md#2025-04-06_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nProjectRootManager.getInstance(project).setProjectSdk(sdk);\n```\n\n----------------------------------------\n\nTITLE: Adding a Loader to an ExpandableTextField in Java\nDESCRIPTION: This code demonstrates how to add a loader to an ExpandableTextField using the Extension class. It creates a new ExpandableTextField and adds an extension with the default animated icon.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/ui/controls/loader.md#2025-04-06_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nExpandableTextField textField = new ExpandableTextField();\ntextField.addExtension(\n  Extension.create(new AnimatedIcon.Default(), null, null)\n);\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Execution Events in Kotlin\nDESCRIPTION: Subscribes to execution events using ExecutionManager#EXECUTION_TOPIC. This allows for listening to various phases of the process execution lifecycle.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/execution/execution.md#2025-04-06_snippet_4\n\nLANGUAGE: Kotlin\nCODE:\n```\nExecutionManager#EXECUTION_TOPIC\n```\n\n----------------------------------------\n\nTITLE: Registering TreeStructureProvider Extension in plugin.xml\nDESCRIPTION: XML configuration to register a custom TreeStructureProvider implementation in the plugin.xml file. This extension tells IntelliJ about the custom provider implementation.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/tree_structure_view.md#2025-04-06_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<extensions defaultExtensionNs=\"com.intellij\">\n  <treeStructureProvider implementation=\"org.intellij.sdk.treeStructureProvider.TextOnlyTreeStructureProvider\"/>\n</extensions>\n```\n\n----------------------------------------\n\nTITLE: Basic DialogWrapper Implementation in Java\nDESCRIPTION: Demonstrates minimal implementation of a DialogWrapper subclass with a simple label component. Shows required setup including constructor, title setting, and center panel creation.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/user_interface_components/dialog_wrapper.md#2025-04-06_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class SampleDialogWrapper extends DialogWrapper {\n\n  public SampleDialogWrapper() {\n    super(true); // use current window as parent\n    setTitle(\"Test DialogWrapper\");\n    init();\n  }\n\n  @Nullable\n  @Override\n  protected JComponent createCenterPanel() {\n    JPanel dialogPanel = new JPanel(new BorderLayout());\n\n    JLabel label = new JLabel(\"Testing\");\n    label.setPreferredSize(new Dimension(100, 100));\n    dialogPanel.add(label, BorderLayout.CENTER);\n\n    return dialogPanel;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Write Action using runWriteAction() in Kotlin\nDESCRIPTION: Demonstrates the use of runWriteAction() to perform a write operation in Kotlin. This API is obsolete since 2024.1 and should be replaced with suspending writeAction() for newer versions.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/architectural_overview/threading/threading_model.md#2025-04-06_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nrunWriteAction {\n  // write data\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SimpleChooseByNameContributor for Go To Symbol\nDESCRIPTION: This class contributes Simple language properties to the Navigate | Symbol results. It implements ChooseByNameContributorEx to provide navigation targets.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/custom_language_support/go_to_symbol_contributor.md#2025-04-06_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\npublic class SimpleChooseByNameContributor implements ChooseByNameContributorEx {\n    @NotNull\n    @Override\n    public String @NotNull [] getNames(@NotNull Project project, boolean includeNonProjectItems) {\n        List<String> result = new ArrayList<String>();\n        Collection<SimpleProperty> properties = SimpleUtil.findProperties(project);\n        for (SimpleProperty property : properties) {\n            if (property.getKey() != null && property.getKey().length() > 0) {\n                result.add(property.getKey());\n            }\n        }\n        return result.toArray(new String[0]);\n    }\n\n    @NotNull\n    @Override\n    public NavigationItem @NotNull [] getItemsByName(\n            String name,\n            String pattern,\n            Project project,\n            boolean includeNonProjectItems) {\n        // TODO: include non project items\n        List<SimpleProperty> properties = SimpleUtil.findProperties(project, name);\n        return properties.toArray(new NavigationItem[0]);\n    }\n\n    @Override\n    public @NotNull List<? extends @NotNull NavigationItem> getItemsByNameImpl(\n            @NotNull String name,\n            @NotNull Pattern pattern,\n            @NotNull Project project,\n            boolean includeNonProjectItems\n    ) {\n        List<SimpleProperty> properties = SimpleUtil.findProperties(project, name);\n        return properties;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a VFS Listener in Java\nDESCRIPTION: Implementation of a BulkFileListener that handles Virtual File System events. This class needs to be referenced in the plugin.xml configuration.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/plugin_structure/plugin_listeners.md#2025-04-06_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\npackage myPlugin;\n\nfinal class MyVfsListener implements BulkFileListener {\n  @Override\n  public void after(@NotNull List<? extends VFileEvent> events) {\n    // handle the events\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Editor Instance from Action Event\nDESCRIPTION: Java code showing how to obtain Editor and Project instances from an AnActionEvent in the update method of an action.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/editor_basics/working_with_text.md#2025-04-06_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class EditorIllustrationAction extends AnAction {\n  @Override\n  public void update(@NotNull AnActionEvent event) {\n    // Get required data keys\n    Project project = event.getProject();\n    Editor editor = event.getData(CommonDataKeys.EDITOR);\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Icon Mappings for New UI in JSON\nDESCRIPTION: Demonstrates how to structure the icon mapping file for New UI support. The JSON file maps new icon paths to existing icon paths, allowing the plugin to support both UI variants.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/icons.md#2025-04-06_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"icons\": {\n    \"expui\": {\n      \"dirName\": {\n        \"icon1.svg\": \"icons/icon1.svg\",\n        \"icon2.svg\": \"icons/icon2.svg\"\n      },\n      \"anotherDir\": {\n        \"anotherIcon.svg\": \"images/anotherIcon.svg\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Action Group with Resource Bundle Text in IntelliJ Plugin\nDESCRIPTION: XML snippet showing an action group that uses localized text from a resource bundle instead of explicit text. This approach supports internationalization of the UI.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/plugin_structure/plugin_configuration_file.md#2025-04-06_snippet_29\n\nLANGUAGE: xml\nCODE:\n```\n<group\n    id=\"com.example.myframeworksupport.MyGroup\"\n    popup=\"true\"/>\n```\n\n----------------------------------------\n\nTITLE: Registering Services in plugin.xml\nDESCRIPTION: Shows how to register application-level and project-level services in the plugin.xml file, connecting service interfaces with their implementations.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/plugin_structure/plugin_services.md#2025-04-06_snippet_12\n\nLANGUAGE: XML\nCODE:\n```\n<extensions defaultExtensionNs=\"com.intellij\">\n  <!-- Declare the application-level service -->\n  <applicationService\n          serviceInterface=\"com.example.MyAppService\"\n          serviceImplementation=\"com.example.MyAppServiceImpl\"/>\n\n  <!-- Declare the project-level service -->\n  <projectService\n          serviceInterface=\"com.example.MyProjectService\"\n          serviceImplementation=\"com.example.MyProjectServiceImpl\"/>\n</extensions>\n```\n\n----------------------------------------\n\nTITLE: Displaying Caret Positions in IntelliJ IDEA Plugin\nDESCRIPTION: This Java code defines an action for an IntelliJ IDEA plugin that displays the caret's Logical Position, Visual Position, and Offset. It retrieves the primary caret from the editor, gets its position information, and shows it in an info message dialog.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/editor_basics/coordinates_system.md#2025-04-06_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic class EditorAreaIllustration extends AnAction {\n\n  public void actionPerformed(@NotNull AnActionEvent event) {\n    // Get access to the editor and caret model.\n    Editor editor = event.getRequiredData(CommonDataKeys.EDITOR);\n    CaretModel caretModel = editor.getCaretModel();\n\n    // Getting the primary caret ensures we get the correct one of a possible many.\n    Caret primaryCaret = caretModel.getPrimaryCaret();\n    // Get the caret information\n    LogicalPosition logicalPos = primaryCaret.getLogicalPosition();\n    VisualPosition visualPos = primaryCaret.getVisualPosition();\n    int caretOffset = primaryCaret.getOffset();\n\n    // Build and display the caret report.\n    String report = logicalPos.toString() + \"\\n\" +\n        visualPos.toString() + \"\\n\" +\n        \"Offset: \" + caretOffset;\n    Messages.showInfoMessage(report, \"Caret Parameters Inside The Editor\");\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle to Prioritize Project Dependencies over IDE Bundled Libraries (Kotlin)\nDESCRIPTION: This Kotlin snippet adds a configuration to a Gradle build script that changes the resolution strategy to prioritize project-defined dependencies over the bundled IDE versions. It uses the DEPENDENCY_FIRST sort order to ensure project dependencies are loaded first.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/plugin_structure/plugin_class_loaders.md#2025-04-06_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nconfigurations.all {\n  resolutionStrategy.sortArtifacts(ResolutionStrategy.SortOrder.DEPENDENCY_FIRST)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Grouped Panel in Kotlin UI DSL\nDESCRIPTION: Demonstrates how to create a grouped panel with a title and a text field using Kotlin UI DSL.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/user_interface_components/kotlin_ui_dsl_version_2.md#2025-04-06_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ngroup(\"Title\") {\n  row(\"Row:\") {\n    textField()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Run Configuration in Java\nDESCRIPTION: This snippet demonstrates how to implement the checkConfiguration() method to validate a run configuration. It shows examples of throwing different types of exceptions based on the severity of the configuration issue.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/execution/run_configurations.md#2025-04-06_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic class MyRunConfiguration extends RunConfigurationBase {\n    @Override\n    public void checkConfiguration() throws RuntimeConfigurationException {\n        if (minorIssue) {\n            throw new RuntimeConfigurationWarning(\"Minor configuration issue\");\n        } else if (majorIssue) {\n            throw new RuntimeConfigurationException(\"Major configuration issue\");\n        } else if (fatalIssue) {\n            throw new RuntimeConfigurationError(\"Fatal configuration error\");\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Local JAR Libraries to Test Project\nDESCRIPTION: Shows how to add unpublished JAR files as libraries to a test project using PsiTestUtil, specifying the library name, test data path, and JAR filename.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/testing_plugins/testing_faq.md#2025-04-06_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nPsiTestUtil.addLibrary(model,\n    \"internal-library\", getTestDataPath(), \"internal-library-2.0.jar\");\n```\n\n----------------------------------------\n\nTITLE: Defensive XML PSI Traversal with Null Checking\nDESCRIPTION: Proper but verbose approach to traversing XML structure with PSI, using null checks to avoid exceptions.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/frameworks_and_external_apis/xml_dom_api.md#2025-04-06_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nXmlFile file = ...;\nXmlDocument document = file.getDocument();\nif (document != null) {\n  XmlTag rootTag = document.getRootTag();\n  if (rootTag != null) {\n    XmlTag foo = rootTag.findFirstSubTag(\"foo\");\n    if (foo != null) {\n      XmlTag[] bars = foo.findSubTags(\"bar\");\n      if (bars.length > 1) {\n        String s = bars[1].getValue().getTrimmedText();\n        // do something\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Simple PropertiesParser\nDESCRIPTION: Example of a simple parser implementation for the Properties language. This shows how to create a basic parser that processes tokens and builds an AST.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/custom_language_support/implementing_parser_and_psi.md#2025-04-06_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nSimple PropertiesParser implementation for Properties language plugin\n```\n\n----------------------------------------\n\nTITLE: Retrieving Stored Credentials in Java\nDESCRIPTION: Demonstrates how to retrieve stored credentials using the PasswordSafe API. It shows two methods: one for retrieving full credentials (username and password) and another for retrieving only the password.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/persisting_sensitive_data.md#2025-04-06_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nString key = null; // e.g. serverURL, accountID\nCredentialAttributes attributes = createCredentialAttributes(key);\nPasswordSafe passwordSafe = PasswordSafe.getInstance();\n\nCredentials credentials = passwordSafe.get(attributes);\nif (credentials != null) {\n  String password = credentials.getPasswordAsString();\n}\n\n// or get password only\nString password = passwordSafe.getPassword(attributes);\n```\n\n----------------------------------------\n\nTITLE: Setting Horizontal Alignment in Kotlin UI DSL\nDESCRIPTION: Demonstrates how to set horizontal alignment for a text field component in a row using the horizontalAlign method.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/user_interface_components/kotlin_ui_dsl_version_2.md#2025-04-06_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nrow(\"Row:\") {\n  textField()\n    .horizontalAlign(HorizontalAlign.FILL)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Action Synonyms in XML for IntelliJ Plugin\nDESCRIPTION: XML snippet showing how to define synonyms for an action to make it discoverable in Find Action or Search Everywhere functionality. It demonstrates using both a resource bundle key and explicit text.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/plugin_structure/plugin_configuration_file.md#2025-04-06_snippet_26\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Default action text: Delete Element -->\n<synonym key=\"my.action.text.remove.element\"/>\n<synonym text=\"Remove Element\"/>\n```\n\n----------------------------------------\n\nTITLE: Defining Action Group with Explicit Text in IntelliJ Plugin\nDESCRIPTION: XML snippet demonstrating how to define an action group with explicit text. The group is configured to display its contents in a popup submenu.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/plugin_structure/plugin_configuration_file.md#2025-04-06_snippet_28\n\nLANGUAGE: xml\nCODE:\n```\n<group\n    id=\"com.example.myframeworksupport.MyGroup\"\n    popup=\"true\"\n    text=\"My Tools\">\n  <!-- group children elements -->\n</group>\n```\n\n----------------------------------------\n\nTITLE: Implementing LanguageInjectionContributor in Java\nDESCRIPTION: Demonstrates how to implement the LanguageInjectionContributor interface to provide context-specific language injections. This example shows injecting YAML or JSON based on certain conditions.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/custom_language_support/language_injection.md#2025-04-06_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\nfinal class MyInjector implements LanguageInjectionContributor {\n\n  @Override\n  public @Nullable Injection getInjection(@NotNull PsiElement context) {\n    if (!isConfigPlace(context)) return null;\n    if (shouldInjectYaml(context)) {\n      return new SimpleInjection(\n          YAMLLanguage.INSTANCE, \"\", \"\", null\n      );\n    } else if (shouldInjectJSON(context)) {\n      return new SimpleInjection(\n          JsonLanguage.INSTANCE, \"\", \"\", null\n      );\n    }\n    return null;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SimpleFoldingBuilder in Java\nDESCRIPTION: Custom folding builder implementation that extends FoldingBuilderEx to replace Simple Language property usages with their values. It searches PSI trees for literal expressions with 'simple:' prefix and creates folding regions.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/custom_language_support/folding_builder.md#2025-04-06_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\n@Override\npublic String getPlaceholderText(@NotNull ASTNode node) {\n  String keyText = node.getText();\n  if (keyText.startsWith(\"\\\"simple:\")) {\n    keyText = keyText.substring(1);\n  }\n  if (keyText.endsWith(\"\\\"\")) {\n    keyText = keyText.substring(0, keyText.length() - 1);\n  }\n  String key = keyText.substring(7);\n  return SimpleUtil.findPropertyValue(node.getPsi().getProject(), key);\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Optional Plugin Dependency in plugin.xml\nDESCRIPTION: Example of declaring an optional plugin dependency with the optional attribute set to true and a config-file attribute pointing to an additional configuration file.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/plugin_structure/plugin_dependencies.md#2025-04-06_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<depends\n    optional=\"true\"\n    config-file=\"myPluginId-optionalPluginName.xml\">dependency.plugin.id</depends>\n```\n\n----------------------------------------\n\nTITLE: Declaring Dependency for AppCode Plugin in plugin.xml\nDESCRIPTION: Shows how to properly declare dependencies in the plugin.xml file for AppCode plugin development. For plugins targeting versions 2020.3 and earlier, the com.intellij.modules.appcode module dependency is required. For plugins targeting only versions 2020.3+, the com.intellij.appcode plugin dependency can be used.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/products/appcode/app_code.md#2025-04-06_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<depends>com.intellij.modules.appcode</depends>\n```\n\n----------------------------------------\n\nTITLE: Implementing Simple Language File for PSI Structure\nDESCRIPTION: A custom implementation of the PsiFile interface specific to the Simple language. It represents the root of the PSI tree for Simple language files and provides file-specific behavior.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/custom_language_support/lexer_and_parser_definition.md#2025-04-06_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n// Copyright 2000-2022 JetBrains s.r.o. and other contributors. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.\npackage org.intellij.sdk.language.psi;\n\nimport com.intellij.extapi.psi.PsiFileBase;\nimport com.intellij.openapi.fileTypes.FileType;\nimport com.intellij.psi.FileViewProvider;\nimport org.intellij.sdk.language.SimpleFileType;\nimport org.intellij.sdk.language.SimpleLanguage;\nimport org.jetbrains.annotations.NotNull;\n\npublic class SimpleFile extends PsiFileBase {\n\n  public SimpleFile(@NotNull FileViewProvider viewProvider) {\n    super(viewProvider, SimpleLanguage.INSTANCE);\n  }\n\n  @NotNull\n  @Override\n  public FileType getFileType() {\n    return SimpleFileType.INSTANCE;\n  }\n\n  @Override\n  public String toString() {\n    return \"Simple File\";\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Component Popup using JBPopupFactory in Kotlin\nDESCRIPTION: Example of creating a popup that renders an intention preview using ComponentPopupBuilder.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/user_interface_components/popups.md#2025-04-06_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nIntentionPreviewPopupUpdateProcessor.kt\n```\n\n----------------------------------------\n\nTITLE: Quick Fix PSI Manipulation\nDESCRIPTION: Implementation of LocalQuickFix that converts String reference comparisons from == to .equals(). Shows how to manipulate the PSI tree to modify code.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/code_inspections.md#2025-04-06_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\npublic void applyFix(@NotNull Project project, @NotNull ProblemDescriptor descriptor) {\n    PsiElementFactory factory = PsiElementFactory.getInstance(project);\n    PsiMethodCallExpression equalsCall = (PsiMethodCallExpression)factory.createExpressionFromText(\"a.equals(b)\", null);\n    // Replace original expression\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Complex MultiHostInjector for XML-based DSL\nDESCRIPTION: Demonstrates a more complex implementation of MultiHostInjector for injecting Java code into multiple fragments of an XML-based DSL. This example shows how to inject into method name and body separately.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/custom_language_support/language_injection.md#2025-04-06_snippet_8\n\nLANGUAGE: Java\nCODE:\n```\nfinal class MyDSLInjector implements MultiHostInjector {\n\n  @Override\n  public void getLanguagesToInject(@NotNull MultiHostRegistrar registrar,\n                                   @NotNull PsiElement context) {\n    if (context instanceof XmlText && isMethodTag(context)) {\n      registrar.startInjecting(JavaLanguage.INSTANCE);\n\n      // construct class header, method header,\n      // inject method name, append code block start\n      registrar.addPlace(\"class MyDsl { void \", \"() {\",\n                         (PsiLanguageInjectionHost)context,\n                         rangeForMethodName(context));\n\n      // inject method body, append closing braces\n      // to form a valid Java class structure\n      registrar.addPlace(null, \"}}\", context, rangeForBody(context));\n      registrar.doneInjecting();\n    }\n  }\n\n  @Override\n  public @NotNull List<? extends Class<? extends PsiElement>> elementsToInjectIn() {\n    return List.of(XmlText.class);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing JavaScript in JCEF Browser\nDESCRIPTION: Shows how to execute JavaScript code in the embedded browser from plugin code. Includes example of displaying an alert and handling script execution parameters.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/embedded_browser_jcef.md#2025-04-06_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nbrowser.getCefBrowser().executeJavaScript(\n    \"alert('Hello World!')\",\n    url, lineNumber\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Plugin IDE Version Compatibility Range in XML\nDESCRIPTION: XML configuration to specify the compatible IDE version range for an IntelliJ plugin using the idea-version element with since-build and until-build attributes.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/plugin_structure/plugin_configuration_file.md#2025-04-06_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<idea-version\n    since-build=\"213\" until-build=\"221.*\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring idea.home.path in Gradle Tests (Groovy)\nDESCRIPTION: Configures the system property 'idea.home.path' in the Gradle test task to point to the IntelliJ Community sources, which is required for tests to access mock JDKs.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/testing_plugins/testing_faq.md#2025-04-06_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\ntest {\n  systemProperty \"idea.home.path\", \"/path/to/intellij-community-sources\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Content Root and Source Root for Module with Workspace Model in Kotlin\nDESCRIPTION: Shows how to add a content root and a source root to a module. It creates the necessary entities and adds them to the module within a workspace model update.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/workspace_model/workspace_model_usages.md#2025-04-06_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nval workspaceModel = WorkspaceModel.getInstance(project)\nval virtualFileUrlManager = workspaceModel.getVirtualFileUrlManager()\n\nval moduleEntity = workspaceModel.currentSnapshot\n  .resolve(ModuleId(moduleName)) ?: ...\nval contentRootUrl = virtualFileUrlManager\n  .getOrCreateFromUrl(\"file://foo/bar\")\nval sourceRootUrl = virtualFileUrlManager\n  .getOrCreateFromUrl(\"file://foo/bar/src\")\nworkspaceModel.update(\"Adding source root\") { builder ->\n  val contentRootEntity = ContentRootEntity(contentRootUrl, emptyList(), moduleEntity.entitySource) {\n    val sourceRootEntity =\n      SourceRootEntity(\n        sourceRootUrl,\n        SourceRootTypeId(\"java-source\"),\n        moduleEntity.entitySource\n      )\n    this.sourceRoots = mutableListOf(sourceRootEntity)\n  }\n  builder.modifyModuleEntity(moduleEntity) {\n    this.contentRoots = mutableListOf(contentRootEntity)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Completion Contributor in Plugin XML\nDESCRIPTION: Registers the SimpleCompletionContributor in the plugin configuration file using the completion.contributor extension point for the Simple language.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/custom_language_support/completion_contributor.md#2025-04-06_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<extensions defaultExtensionNs=\"com.intellij\">\n  <completion.contributor\n      language=\"Simple\"\n      implementationClass=\"org.intellij.sdk.language.SimpleCompletionContributor\"/>\n</extensions>\n```\n\n----------------------------------------\n\nTITLE: Using PropertiesComponent for Simple Persistence in Java\nDESCRIPTION: Shows how to use PropertiesComponent for storing simple application-level and project-level values. This method is recommended for temporary, non-roamable properties.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/persisting_state_of_components.md#2025-04-06_snippet_8\n\nLANGUAGE: Java\nCODE:\n```\n// For application-level values\nPropertiesComponent.getInstance().setValue(\"com.example.myCustomSetting\", \"value\");\n\n// For project-level values\nPropertiesComponent.getInstance(project).setValue(\"com.example.myProjectSetting\", \"value\");\n```\n\n----------------------------------------\n\nTITLE: Bottom-up PSI Navigation Example\nDESCRIPTION: Shows how to navigate up the PSI tree from a specific offset to find containing method and class. Uses PsiTreeUtil.getParentOfType() and specific navigation methods.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/architectural_overview/navigating_psi.md#2025-04-06_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nPsiFile psiFile = anActionEvent.getData(CommonDataKeys.PSI_FILE);\nPsiElement element = psiFile.findElementAt(offset);\nPsiMethod containingMethod = PsiTreeUtil.getParentOfType(element, PsiMethod.class);\nPsiClass containingClass = containingMethod.getContainingClass();\n```\n\n----------------------------------------\n\nTITLE: Optional Plugin Dependency Configuration in XML\nDESCRIPTION: XML configuration to specify an optional dependency on another plugin for an IntelliJ platform plugin.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/plugin_structure/plugin_configuration_file.md#2025-04-06_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<depends optional=\"true\">\n  com.example.dependencypluginid\n</depends>\n```\n\n----------------------------------------\n\nTITLE: Adding Localized Text Separator to a Group in IntelliJ Plugin\nDESCRIPTION: XML snippet demonstrating how to add a separator with text defined by a message key from a resource bundle, supporting internationalization.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/plugin_structure/plugin_configuration_file.md#2025-04-06_snippet_36\n\nLANGUAGE: xml\nCODE:\n```\n<separator key=\"message.key\"/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Inlay Hints Provider in Kotlin\nDESCRIPTION: Inlay hints providers support both inline and block hints with custom presentation and behavior. Examples include showing local variable types, decorating markdown tables, and implementing lambda hints.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/custom_language_support/inlay_hints.md#2025-04-06_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass GroovyLocalVariableTypeHintsInlayProvider : InlayHintsProvider {\n    // Shows local variable types in Groovy code\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MarkdownTableInlayProvider : InlayHintsProvider {\n    // Decorates tables in Markdown files\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass KotlinLambdasHintsProvider : InlayHintsProvider {\n    // Implements lambda hints for Kotlin code\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Read Action in Kotlin\nDESCRIPTION: Example of using ReadAction.compute() to perform a read operation on a PsiFile in Kotlin. This method ensures the operation is executed under a read lock.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/architectural_overview/threading/threading_model.md#2025-04-06_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval psiFile = ReadAction.compute<PsiFile, Throwable> {\n  // read and return PsiFile\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic AnAction Class Structure in Java\nDESCRIPTION: Basic implementation structure of a custom action class extending AnAction. Shows required override methods update() and actionPerformed().\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/action_system/creating_actions_tutorial.md#2025-04-06_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class PopupDialogAction extends AnAction {\n\n  @Override\n  public void update(@NotNull AnActionEvent event) {\n    // Using the event, evaluate the context,\n    // and enable or disable the action.\n  }\n\n  @Override\n  public void actionPerformed(@NotNull AnActionEvent event) {\n    // Using the event, implement an action.\n    // For example, create and show a dialog.\n  }\n\n  // Override getActionUpdateThread() when you target 2022.3 or later!\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin Verification in Groovy\nDESCRIPTION: Shows the configuration for plugin verification using the IntelliJ Plugin Verifier CLI tool in Groovy DSL. It covers the same options as the Kotlin example for verification.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_extension.md#2025-04-06_snippet_13\n\nLANGUAGE: groovy\nCODE:\n```\nimport org.jetbrains.intellij.platform.gradle.tasks.VerifyPluginTask\n\nintellij Platform {\n  // ...\n\n  pluginVerification {\n    cliPath = file('/path/to/plugin-verifier-cli.jar')\n    freeArgs = ['foo', 'bar']\n    homeDirectory = file('/path/to/pluginVerifierHomeDirectory/')\n    downloadDirectory = file('/path/to/pluginVerifierHomeDirectory/ides/')\n    failureLevel = VerifyPluginTask.FailureLevel.ALL\n    verificationReportsDirectory = 'build/reports/pluginVerifier'\n    verificationReportsFormats = VerifyPluginTask.VerificationReportsFormats.ALL\n    externalPrefixes = 'com.example'\n    teamCityOutputFormat = false\n    subsystemsToCheck = VerifyPluginTask.Subsystems.ALL\n    ignoredProblemsFile = file('/path/to/ignoredProblems.txt')\n\n    ides {\n      // ...\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Framework Support Provider in Java\nDESCRIPTION: Creates a provider for enabling framework support in the project wizard. This includes creating a configurable component and adding support to a module.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/framework.md#2025-04-06_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\n@NotNull\n@Override\npublic FrameworkSupportInModuleProvider createProvider() {\n  return new FrameworkSupportInModuleProvider() {\n    @NotNull\n    @Override\n    public FrameworkTypeEx getFrameworkType() {\n      return DemoFramework.this;\n    }\n\n    @NotNull\n    @Override\n    public FrameworkSupportInModuleConfigurable createConfigurable(\n        @NotNull FrameworkSupportModel model) {\n      return new FrameworkSupportInModuleConfigurable() {\n\n        @Override\n        public JComponent createComponent() {\n          return new JCheckBox(\"SDK Extra Option\");\n        }\n\n        @Override\n        public void addSupport(@NotNull Module module,\n                               @NotNull ModifiableRootModel model,\n                               @NotNull ModifiableModelsProvider provider) {\n          // This is the place to set up a library, generate a specific file,\n          // and actually add framework support to a module.\n        }\n      };\n    }\n\n    @Override\n    public boolean isEnabledForModuleType(@NotNull ModuleType type) {\n      return true;\n    }\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing VFS Change Listener in Java\nDESCRIPTION: Example of subscribing to Virtual File System changes using BulkFileListener. Shows how to receive notifications when files are modified in the VFS through the message bus infrastructure.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/architectural_overview/virtual_file.md#2025-04-06_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nproject.getMessageBus().connect().subscribe(\n    VirtualFileManager.VFS_CHANGES,\n    new BulkFileListener() {\n      @Override\n      public void after(@NotNull List<? extends VFileEvent> events) {\n        // handle the events\n      }\n    });\n```\n\n----------------------------------------\n\nTITLE: Basic Highlighting Markup Example\nDESCRIPTION: Shows the basic XML-like markup format used for specifying expected highlighting results in test files.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/testing_plugins/testing_highlighting.md#2025-04-06_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<warning descr=\"expected warning message\">code to be highlighted</warning>\n```\n\n----------------------------------------\n\nTITLE: Using IntelliJPlatformType Enum in Groovy\nDESCRIPTION: Gradle configuration in Groovy DSL demonstrating the use of IntelliJPlatformType enum for specifying the IntelliJ Platform type. This approach provides type safety when selecting platform variants.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin.md#2025-04-06_snippet_13\n\nLANGUAGE: groovy\nCODE:\n```\nimport org.jetbrains.intellij.platform.gradle.IntelliJPlatformType\n\ndependencies {\n  intellijPlatform {\n    def version = providers.gradleProperty('platformVersion')\n\n    create(IntelliJPlatformType.IntellijIdeaUltimate, version)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing PsiReference in Java\nDESCRIPTION: Example of implementing PsiReference interface for resolving references in a custom language. This snippet shows the basic structure and key methods to implement.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/custom_language_support/references_and_resolve.md#2025-04-06_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\npublic class MyReference implements PsiReference {\n    @Nullable\n    @Override\n    public PsiElement resolve() {\n        // Implementation for resolving the reference\n        return null;\n    }\n\n    @Override\n    public boolean isReferenceTo(@NotNull PsiElement element) {\n        // Check if this reference resolves to the given element\n        return false;\n    }\n\n    // Other required method implementations...\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Application-Level Listeners in plugin.xml\nDESCRIPTION: XML configuration for registering application-level listeners declaratively in plugin.xml. This approach allows better performance as listener instances are created lazily.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/plugin_structure/plugin_listeners.md#2025-04-06_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<idea-plugin>\n  <applicationListeners>\n    <listener\n        class=\"myPlugin.MyListenerClass\"\n        topic=\"BaseListenerInterface\"/>\n  </applicationListeners>\n</idea-plugin>\n```\n\n----------------------------------------\n\nTITLE: Configuring Project Root Manager Dependency\nDESCRIPTION: Code example showing how to add DumbService dependency to cached values that use ProjectRootManager and depend on indexes.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/architectural_overview/psi_performance.md#2025-04-06_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nCachedValuesManager.getCachedValue(element, () -> {\n    Result result = computeValue();\n    return CachedValueProvider.Result.create(\n        result,\n        ProjectRootManager.getInstance(project),\n        DumbService.getInstance(project)\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Token Type Declaration with IElementType\nDESCRIPTION: Shows how to create token types using IElementType instances, which should be associated with specific languages and reused consistently.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/custom_language_support/implementing_lexer.md#2025-04-06_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\npublic interface TokenType {\n    IElementType WHITE_SPACE = new IElementType(\"WHITE_SPACE\", Language.ANY);\n    IElementType BAD_CHARACTER = new IElementType(\"BAD_CHARACTER\", Language.ANY);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SimpleCommenter in Java\nDESCRIPTION: Defines the SimpleCommenter class that implements the Commenter interface. It sets the line comment prefix as '#' for the Simple Language.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/custom_language_support/commenter.md#2025-04-06_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\npublic class SimpleCommenter implements Commenter {\n\n  @Override\n  public @Nullable String getLineCommentPrefix() {\n    return \"#\";\n  }\n\n  @Override\n  public @Nullable String getBlockCommentPrefix() {\n    return null;\n  }\n\n  @Override\n  public @Nullable String getBlockCommentSuffix() {\n    return null;\n  }\n\n  @Override\n  public @Nullable String getCommentedBlockCommentPrefix() {\n    return null;\n  }\n\n  @Override\n  public @Nullable String getCommentedBlockCommentSuffix() {\n    return null;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Project SDK in Java\nDESCRIPTION: Retrieves the project SDK using ProjectRootManager. This snippet demonstrates how to access the SDK information for a project.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/project_model/sdk.md#2025-04-06_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nSdk projectSdk = ProjectRootManager.getInstance(project).getProjectSdk();\n```\n\n----------------------------------------\n\nTITLE: Implementing Tree-based File Chooser in Java\nDESCRIPTION: Uses TreeFileChooserFactory class to create a file chooser with a tree-based interface, suitable for selecting files by name.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/user_interface_components/file_and_class_choosers.md#2025-04-06_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nTreeFileChooserFactory\n```\n\n----------------------------------------\n\nTITLE: Implementing Complex RegExpParser\nDESCRIPTION: Example of a more complex parser implementation for the RegEx language. This demonstrates advanced parsing techniques for a more sophisticated language structure.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/custom_language_support/implementing_parser_and_psi.md#2025-04-06_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nComplex RegExpParser for RegEx language\n```\n\n----------------------------------------\n\nTITLE: Implementing a Line Marker Provider for Simple Language Properties in Java\nDESCRIPTION: Implementation of SimpleLineMarkerProvider that adds gutter icons next to Java code using Simple Language properties. The provider extends RelatedItemLineMarkerProvider and overrides collectNavigationMarkers() to identify property usages and provide navigation to their definitions.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/custom_language_support/line_marker_provider.md#2025-04-06_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\npublic class SimpleLineMarkerProvider extends RelatedItemLineMarkerProvider {\n  @Override\n  protected void collectNavigationMarkers(@NotNull PsiElement element,\n                                         @NotNull Collection<? super RelatedItemLineMarkerInfo<?>> result) {\n    // This must be an element with a literal expression as a parent\n    if (!(element instanceof PsiIdentifier) ||\n        !(element.getParent() instanceof PsiLiteralExpression)) {\n      return;\n    }\n\n    PsiLiteralExpression literalExpression = (PsiLiteralExpression) element.getParent();\n    String value = literalExpression.getValue() instanceof String ? (String) literalExpression.getValue() : null;\n\n    if (value != null && value.startsWith(SimpleAnnotator.SIMPLE_PREFIX_STR + SimpleAnnotator.SIMPLE_SEPARATOR_STR)) {\n      // Get the Simple language key from the property usage\n      Project project = element.getProject();\n      String possiblePropertyValue = value.substring(\n          SimpleAnnotator.SIMPLE_PREFIX_STR.length() + SimpleAnnotator.SIMPLE_SEPARATOR_STR.length()\n      );\n      final List<SimpleProperty> properties = SimpleUtil.findProperties(project, possiblePropertyValue);\n\n      if (properties.size() > 0) {\n        // Add the property to a collection of line marker info\n        NavigationGutterIconBuilder<PsiElement> builder =\n            NavigationGutterIconBuilder.create(SimpleIcons.FILE)\n                .setTargets(properties)\n                .setTooltipText(\"Navigate to Simple language property\");\n        result.add(builder.createLineMarkerInfo(element));\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing File Template in Java\nDESCRIPTION: Demonstrates how to obtain a file template from the Code category using FileTemplateManager and render its content with properties.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/file_and_code_templates/using_file_templates.md#2025-04-06_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nFileTemplate template = FileTemplateManager.getInstance(project)\n    .getCodeTemplate(\"Test Class.java\");\n\nProperties properties = new Properties();\nproperties.setProperty(\"PROP1\", value1);\nproperties.setProperty(\"PROP2\", value2);\nString renderedText = template.getText(properties);\n```\n\n----------------------------------------\n\nTITLE: Highlighting Individual Identifiers (Recommended Approach)\nDESCRIPTION: Demonstrates the recommended approach for highlighting identifiers individually. This method provides faster highlighting and quicker updates when highlights need to be removed.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/custom_language_support/syntax_highlighting_and_error_highlighting.md#2025-04-06_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nannotate(PsiIdentifier) {\n  <<highlight this identifier if it's relevant>>\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Action Group in Java\nDESCRIPTION: This Java code snippet shows how to extend DefaultActionGroup to create a custom action group. It overrides the update method to enable/disable the group based on context.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/action_system/grouping_actions_tutorial.md#2025-04-06_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\npublic class CustomDefaultActionGroup extends DefaultActionGroup {\n  @Override\n  public void update(AnActionEvent event) {\n    // Enable/disable depending on whether a user is editing...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Module Dependency in plugin.xml\nDESCRIPTION: Example of how to declare a dependency on a module or plugin in the plugin.xml file. This is used to specify which functionality a plugin requires.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/getting_started/plugin_compatibility.md#2025-04-06_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<depends>\n```\n\n----------------------------------------\n\nTITLE: Implementing PsiScopeProcessor in Java\nDESCRIPTION: Example of implementing PsiScopeProcessor interface for custom language resolve support. This processor is used to gather possible declarations during the resolve process.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/custom_language_support/references_and_resolve.md#2025-04-06_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\npublic class MyPsiScopeProcessor implements PsiScopeProcessor {\n    @Override\n    public boolean execute(@NotNull PsiElement element, @NotNull ResolveState state) {\n        // Process the declaration\n        // Return true to continue processing, false to stop\n        return true;\n    }\n\n    // Other required method implementations...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Lexer Adapter for Simple Language\nDESCRIPTION: A lexer adapter that bridges the JFlex-generated lexer with IntelliJ Platform's lexer API. It extends FlexAdapter to adapt SimpleLexer to the platform's requirements.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/custom_language_support/lexer_and_parser_definition.md#2025-04-06_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n// Copyright 2000-2022 JetBrains s.r.o. and other contributors. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.\npackage org.intellij.sdk.language;\n\nimport com.intellij.flexer.FlexAdapter;\nimport com.intellij.lexer.FlexAdapter;\n\npublic class SimpleLexerAdapter extends FlexAdapter {\n\n  public SimpleLexerAdapter() {\n    super(new SimpleLexer(null));\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing JFlex Lexer Rules for Simple Language\nDESCRIPTION: A JFlex configuration file that defines lexer rules for tokenizing Simple language files. It specifies token types, regular expressions for different patterns, and the states and rules for lexical analysis.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/custom_language_support/lexer_and_parser_definition.md#2025-04-06_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n// Copyright 2000-2022 JetBrains s.r.o. and other contributors. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.\npackage org.intellij.sdk.language;\n\nimport com.intellij.lexer.FlexLexer;\nimport com.intellij.psi.tree.IElementType;\nimport org.intellij.sdk.language.psi.SimpleTypes;\nimport com.intellij.psi.TokenType;\n\n%%\n\n%class SimpleLexer\n%implements FlexLexer\n%unicode\n%function advance\n%type IElementType\n%eof{  return;\n%eof}\n\nCRLF=\\R\nWHITE_SPACE=[\\s]\nFIRST_VALUE_CHARACTER=[^ \\n\\f\\r\\t\\[\\]:|]*\nVALUE_CHARACTER=[^\\n\\f\\r\\t\\[\\]:|]*\nEND_OF_LINE_COMMENT=(\"!\"|\";|\"\")[^\\R]*\nSEPARATOR=[:=]\nKEY_CHARACTER=[^:=\\ \\n\\t\\f\\r\\[\\]|]*\n\n%state WAITING_VALUE\n\n%%\n\n<YYINITIAL> {END_OF_LINE_COMMENT}                           { yybegin(YYINITIAL); return SimpleTypes.COMMENT; }\n\n<YYINITIAL> {KEY_CHARACTER}+                                { yybegin(YYINITIAL); return SimpleTypes.KEY; }\n\n<YYINITIAL> {SEPARATOR}                                     { yybegin(WAITING_VALUE); return SimpleTypes.SEPARATOR; }\n\n<WAITING_VALUE> {CRLF}({CRLF}|{WHITE_SPACE})+               { yybegin(YYINITIAL); return TokenType.WHITE_SPACE; }\n\n<WAITING_VALUE> {WHITE_SPACE}+                              { yybegin(WAITING_VALUE); return TokenType.WHITE_SPACE; }\n\n<WAITING_VALUE> {FIRST_VALUE_CHARACTER}{VALUE_CHARACTER}*   { yybegin(YYINITIAL); return SimpleTypes.VALUE; }\n\n({CRLF}|{WHITE_SPACE})+                                     { yybegin(YYINITIAL); return TokenType.WHITE_SPACE; }\n\n[^]                                                         { return TokenType.BAD_CHARACTER; }\n\n```\n\n----------------------------------------\n\nTITLE: Implementing PsiPolyVariantReference in Java\nDESCRIPTION: Example of implementing PsiPolyVariantReference interface for resolving to multiple targets in a custom language. This allows references to resolve to multiple valid targets.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/custom_language_support/references_and_resolve.md#2025-04-06_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\npublic class MyPolyVariantReference extends PsiPolyVariantReferenceBase<PsiElement> {\n    @NotNull\n    @Override\n    public ResolveResult[] multiResolve(boolean incompleteCode) {\n        // Implementation for resolving to multiple targets\n        return ResolveResult.EMPTY_ARRAY;\n    }\n\n    // Other required method implementations...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Refactoring Support in Java\nDESCRIPTION: This snippet shows how to implement the RefactoringListenerProvider interface to support updating run configuration settings when referenced elements are refactored.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/execution/run_configurations.md#2025-04-06_snippet_7\n\nLANGUAGE: java\nCODE:\n```\npublic class MyRunConfiguration extends RunConfigurationBase implements RefactoringListenerProvider {\n    @Nullable\n    @Override\n    public RefactoringElementListener getRefactoringElementListener(PsiElement element) {\n        if (isElementReferenced(element)) {\n            return new RefactoringElementListener() {\n                @Override\n                public void elementMoved(@NotNull PsiElement newElement) {\n                    updateConfigurationForMovedElement(newElement);\n                }\n\n                @Override\n                public void elementRenamed(@NotNull PsiElement newElement) {\n                    updateConfigurationForRenamedElement(newElement);\n                }\n            };\n        }\n        return null;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Required Plugin Dependency Configuration in XML\nDESCRIPTION: XML configuration to specify a required dependency on another plugin or module for an IntelliJ platform plugin.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/plugin_structure/plugin_configuration_file.md#2025-04-06_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<depends>com.example.dependencypluginid</depends>\n```\n\n----------------------------------------\n\nTITLE: Declaring Plugin Dependencies with Gradle IntelliJ Plugin 1.x (Groovy)\nDESCRIPTION: Adds plugin dependencies to the intellij.plugins parameter in the build script using Groovy DSL. This method is now obsolete.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/plugin_structure/plugin_dependencies.md#2025-04-06_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\nintellij {\n  plugins = ['com.example.another-plugin:1.0']\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Token Type Class in Java\nDESCRIPTION: Defines SimpleTokenType class extending IElementType to represent tokens in the Simple Language. Takes debug name and language as constructor parameters.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/custom_language_support/grammar_and_parser.md#2025-04-06_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\npublic class SimpleTokenType extends IElementType {\n    public SimpleTokenType(@NotNull @NonNls String debugName) {\n        super(debugName, SimpleLanguage.INSTANCE);\n    }\n\n    @Override\n    public String toString() {\n        return \"SimpleTokenType.\" + super.toString();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Grammar Rules in BNF for Simple Language\nDESCRIPTION: Defines the grammar rules for the 'property' element in the Simple language, including error recovery and mixin implementations.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/writing_tests_for_plugins/parsing_test.md#2025-04-06_snippet_0\n\nLANGUAGE: BNF\nCODE:\n```\nproperty ::= (KEY? SEPARATOR VALUE?) | KEY {\n  pin=3\n  recoverWhile=\"recover_property\"\n  mixin=\"org.intellij.sdk.language.psi.impl.SimpleNamedElementImpl\"\n  implements=\"org.intellij.sdk.language.psi.SimpleNamedElement\"\n  methods=[getKey getValue getName setName getNameIdentifier getPresentation]\n}\nprivate recover_property ::= !(KEY|SEPARATOR|COMMENT)\n```\n\n----------------------------------------\n\nTITLE: Getting Project SDK Name in Java\nDESCRIPTION: Retrieves the name of the project-level SDK using ProjectRootManager. This snippet shows how to get the SDK name as a string.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/project_model/sdk.md#2025-04-06_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nString projectSdkName = ProjectRootManager.getInstance(project).getProjectSdkName();\n```\n\n----------------------------------------\n\nTITLE: Configuring Keyboard Shortcuts\nDESCRIPTION: Examples of configuring keyboard shortcuts with different keymap configurations\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/plugin_structure/plugin_configuration_file.md#2025-04-06_snippet_23\n\nLANGUAGE: xml\nCODE:\n```\n<keyboard-shortcut\n    keymap=\"$default\"\n    first-keystroke=\"control alt G\"\n    second-keystroke=\"C\"/>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<keyboard-shortcut\n    keymap=\"Mac OS X\"\n    first-keystroke=\"control alt G\"\n    second-keystroke=\"C\"\n    remove=\"true\"/>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<keyboard-shortcut\n    keymap=\"Mac OS X 10.5+\"\n    first-keystroke=\"control alt G\"\n    second-keystroke=\"C\"\n    replace-all=\"true\"/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Named Element Class in Java\nDESCRIPTION: Defines SimpleNamedElement interface that extends PsiNameIdentifierOwner to support element renaming and referencing.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/custom_language_support/reference_contributor.md#2025-04-06_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\npublic interface SimpleNamedElement extends PsiNameIdentifierOwner {\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Notifications Using NotificationGroup (2020.3+)\nDESCRIPTION: Shows how to create and display notifications using a registered NotificationGroup in Java code. Demonstrates getting the group instance and creating an error notification.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/user_interface_components/notifications.md#2025-04-06_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class MyNotifier {\n\n  public static void notifyError(Project project, String content) {\n    NotificationGroupManager.getInstance()\n        .getNotificationGroup(\"Custom Notification Group\")\n        .createNotification(content, NotificationType.ERROR)\n        .notify(project);\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Stub Index Template\nDESCRIPTION: Example showing how JavaClassElementType indexes stub data using an IndexSink parameter.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/indexing_and_psi_stubs/stub_indexes.md#2025-04-06_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nJavaClassElementType.indexStub()\n```\n\n----------------------------------------\n\nTITLE: Iterating Over PSI File Elements Using Visitor Pattern in Java\nDESCRIPTION: Demonstrates how to traverse through elements in a PSI file using PsiRecursiveElementWalkingVisitor. This is a common pattern for processing PSI elements hierarchically.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/architectural_overview/psi_files.md#2025-04-06_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\npsiFile.accept(new PsiRecursiveElementWalkingVisitor() {\n  // visitor implementation ...\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Complex PSI Element Pattern for JSON Arrays in Java\nDESCRIPTION: This code defines a complex PSI element pattern for JSON arrays. It checks for elements after commas or brackets, ensures they're within a JSON array, and excludes string literals. It uses PsiElementPattern and JsonArray classes.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/architectural_overview/element_patterns.md#2025-04-06_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nPsiElementPattern.Capture<PsiElement> AFTER_COMMA_OR_BRACKET_IN_ARRAY =\n    psiElement()\n        .afterLeaf(\"[\", \",\")\n        .withSuperParent(2, JsonArray.class)\n        .andNot(\n            psiElement().withParent(JsonStringLiteral.class)\n        );\n```\n\n----------------------------------------\n\nTITLE: Registering ConfigurationType in plugin.xml\nDESCRIPTION: XML configuration to register the custom run configuration type with IntelliJ Platform using the com.intellij.configurationType extension point.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/run_configurations_tutorial.md#2025-04-06_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<extensions defaultExtensionNs=\"com.intellij\">\n  <configurationType\n      implementation=\"org.jetbrains.sdk.runConfiguration.DemoRunConfigurationType\"/>\n</extensions>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Structure View Factory in Java for IntelliJ Plugin\nDESCRIPTION: Creates a PsiStructureViewFactory implementation that builds the structure view for Simple Language files. It returns a TreeBasedStructureViewBuilder that uses the SimpleStructureViewModel.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/custom_language_support/structure_view_factory.md#2025-04-06_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\npublic class SimpleStructureViewFactory implements PsiStructureViewFactory {\n  @Override\n  public StructureViewBuilder getStructureViewBuilder(@NotNull final PsiFile psiFile) {\n    return new TreeBasedStructureViewBuilder() {\n      @Override\n      @NotNull\n      public StructureViewModel createStructureViewModel(@Nullable Editor editor) {\n        return new SimpleStructureViewModel(psiFile);\n      }\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SimpleBlock Class for Formatting in Java\nDESCRIPTION: Implements the SimpleBlock class based on AbstractBlock to represent the formatting structure of a file as a tree of Block objects.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/custom_language_support/formatter.md#2025-04-06_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\npublic class SimpleBlock extends AbstractBlock {\n    private SpacingBuilder spacingBuilder;\n\n    protected SimpleBlock(@NotNull ASTNode node,\n                         @Nullable Wrap wrap,\n                         @Nullable Alignment alignment,\n                         SpacingBuilder spacingBuilder) {\n        super(node, wrap, alignment);\n        this.spacingBuilder = spacingBuilder;\n    }\n\n    @Override\n    protected List<Block> buildChildren() {\n        List<Block> blocks = new ArrayList<>();\n        ASTNode child = myNode.getFirstChildNode();\n        while (child != null) {\n            if (child.getElementType() != TokenType.WHITE_SPACE) {\n                Block block = new SimpleBlock(child, Wrap.createWrap(WrapType.NONE, false),\n                        Alignment.createAlignment(),\n                        spacingBuilder);\n                blocks.add(block);\n            }\n            child = child.getTreeNext();\n        }\n        return blocks;\n    }\n\n    @Nullable\n    @Override\n    public Spacing getSpacing(@Nullable Block child1, @NotNull Block child2) {\n        return spacingBuilder.getSpacing(this, child1, child2);\n    }\n\n    @Override\n    public boolean isLeaf() {\n        return myNode.getFirstChildNode() == null;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Test Framework Dependency in Groovy\nDESCRIPTION: Shows how to add a dependency on the test framework library for implementing tests in an IntelliJ Platform plugin using Groovy. It includes the TestFrameworkType.Platform and a JUnit dependency.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_dependencies_extension.md#2025-04-06_snippet_7\n\nLANGUAGE: groovy\nCODE:\n```\nimport org.jetbrains.intellij.platform.gradle.TestFrameworkType\n\ndependencies {\n  intellijPlatform {\n    testFramework TestFrameworkType.Platform.INSTANCE\n  }\n\n  testImplementation 'junit:junit:4.13.2'\n}\n```\n\n----------------------------------------\n\nTITLE: File Type Extension Point Registration (2019.2+)\nDESCRIPTION: Example of registering a file type using the com.intellij.fileType extension point. Shows how to associate file extensions, names, and patterns with a custom language file type.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/custom_language_support/registering_file_type.md#2025-04-06_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<extensions defaultExtensionNs=\"com.intellij\">\n  <fileType\n    name=\"SAMPLE\"\n    implementationClass=\"org.example.SampleFileType\"\n    fieldName=\"INSTANCE\"\n    language=\"Sample\"\n    extensions=\"sample;sam\"\n    fileNames=\"specific.file\"\n    patterns=\"*.custom.*\"\n    hashBangs=\"sample\"/>\n</extensions>\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin XML Patching Task in Gradle\nDESCRIPTION: Defines properties for the patchPluginXml task, which patches the plugin.xml file with provided values from the intelliJPlatform.pluginConfiguration extension.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_tasks.md#2025-04-06_snippet_6\n\nLANGUAGE: gradle\nCODE:\n```\ninputFile = regularFileProperty()\noutputFile = regularFileProperty()\npluginId = property<String>()\npluginName = property<String>()\npluginVersion = property<String>()\n```\n\n----------------------------------------\n\nTITLE: Trailing Comma Post-Processor Implementation in Kotlin\nDESCRIPTION: Reference to implementation of a post-format processor that handles trailing commas in Kotlin files.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/custom_language_support/code_formatting.md#2025-04-06_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\norg.jetbrains.kotlin.idea.formatter.TrailingCommaPostFormatProcessor\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin Signing and Publishing in Gradle (Groovy)\nDESCRIPTION: This Groovy code snippet shows how to set up the signPlugin and publishPlugin tasks in Gradle to use environment variables for sensitive data such as certificates, private keys, and publishing tokens.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/plugin_signing.md#2025-04-06_snippet_8\n\nLANGUAGE: groovy\nCODE:\n```\nsignPlugin {\n  certificateChain = providers.environmentVariable(\"CERTIFICATE_CHAIN\")\n  privateKey = providers.environmentVariable(\"PRIVATE_KEY\")\n  password = providers.environmentVariable(\"PRIVATE_KEY_PASSWORD\")\n}\n\npublishPlugin {\n  token = providers.environmentVariable(\"PUBLISH_TOKEN\")\n}\n```\n\n----------------------------------------\n\nTITLE: Running Backgroundable Task with Progress Tracking\nDESCRIPTION: Example of creating and queuing a background task with progress indicator and cancel text. Demonstrates implementation in both Kotlin and Java.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/architectural_overview/threading/background_processes.md#2025-04-06_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nobject : Task.Backgroundable(project, \"Synchronizing data\", true) {\n  override fun run(indicator: ProgressIndicator) {\n    // operation\n  }\n}\n  .setCancelText(\"Stop loading\")\n  .queue()\n```\n\nLANGUAGE: java\nCODE:\n```\nnew Task.Backgroundable(project, \"Synchronizing data\", true) {\n  public void run(ProgressIndicator indicator) {\n    // operation\n  }\n}\n  .setCancelText(\"Stop loading\")\n  .queue();\n```\n\n----------------------------------------\n\nTITLE: Registering DocumentationActionProvider in IntelliJ SDK\nDESCRIPTION: This snippet shows how to register a DocumentationActionProvider using an extension point. The provider allows custom actions to be incorporated into documentation inlays and popups.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/custom_language_support/documentation.md#2025-04-06_snippet_4\n\nLANGUAGE: XML\nCODE:\n```\n<include from=\"snippets.topic\" element-id=\"ep\"><var name=\"ep\" value=\"com.intellij.documentationActionProvider\"/></include>\n```\n\n----------------------------------------\n\nTITLE: Saving Custom SDK Settings in Java\nDESCRIPTION: Demonstrates how to make custom SDK settings persistent by overriding the setupSdkPaths method. This snippet shows how to save SDK version information.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/project_model/sdk.md#2025-04-06_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic boolean setupSdkPaths(@NotNull Sdk sdk, @NotNull SdkModel sdkModel) {\n  SdkModificator modificator = sdk.getSdkModificator();\n  modificator.setVersionString(getVersionString(sdk));\n  modificator.commitChanges(); // save\n  return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Resizable Columns in Kotlin UI DSL\nDESCRIPTION: Illustrates how to mark a column as resizable using the resizableColumn method, allowing it to occupy extra horizontal space and resize with the panel.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/user_interface_components/kotlin_ui_dsl_version_2.md#2025-04-06_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nrow(\"Row\") {\n  textField()\n    .resizableColumn()\n  link(\"Config...\") {}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Structure View Model in Java for IntelliJ Plugin\nDESCRIPTION: Creates a StructureViewModel implementation for Simple Language files. It extends StructureViewModelBase and specifies SimpleProperty as the filterable element type. The model serves as a bridge between the file structure and its presentation in the Structure tool window.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/custom_language_support/structure_view_factory.md#2025-04-06_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\npublic class SimpleStructureViewModel extends StructureViewModelBase implements\n    StructureViewModel.ElementInfoProvider {\n\n  public SimpleStructureViewModel(PsiFile psiFile) {\n    super(psiFile, new SimpleStructureViewElement(psiFile));\n  }\n\n  @Override\n  public Sorter @NotNull [] getSorters() {\n    return new Sorter[]{Sorter.ALPHA_SORTER};\n  }\n\n  @Override\n  public boolean isAlwaysShowsPlus(StructureViewTreeElement element) {\n    return false;\n  }\n\n  @Override\n  public boolean isAlwaysLeaf(StructureViewTreeElement element) {\n    return element instanceof SimplePropertyImpl;\n  }\n\n  @Override\n  protected Class<?> @NotNull [] getSuitableClasses() {\n    return new Class[]{SimpleProperty.class};\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Notifications Using NotificationGroup (Pre-2020.3)\nDESCRIPTION: Shows how to register a NotificationGroup programmatically and use it to display notifications in versions before 2020.3.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/user_interface_components/notifications.md#2025-04-06_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class MyNotifier {\n\n  private static final NotificationGroup NOTIFICATION_GROUP =\n      new NotificationGroup(\"Custom Notification Group\",\n              NotificationDisplayType.BALLOON, true);\n\n  public static void notifyError(Project project, String content) {\n    NOTIFICATION_GROUP.createNotification(content, NotificationType.ERROR)\n        .notify(project);\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Chaining Text Attribute Keys in Java\nDESCRIPTION: Shows how to create a text attribute key that depends on another custom key, creating a chain of fallback options for color scheme resolution.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/color_scheme_management.md#2025-04-06_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nstatic final TextAttributesKey MY_PREDEFINED_SYMBOL =\n  TextAttributesKey.createTextAttributesKey(\"MY_PREDEFINED_SYMBOL\", MY_KEYWORD);\n```\n\n----------------------------------------\n\nTITLE: Adding Library Dependency to Module with Workspace Model in Kotlin\nDESCRIPTION: Demonstrates how to add a project-level library as a dependency to a module. It finds the module entity and modifies its dependencies list to include the library dependency.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/workspace_model/workspace_model_usages.md#2025-04-06_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nval workspaceModel = WorkspaceModel.getInstance(project)\nval moduleEntity = workspaceModel.currentSnapshot\n  .resolve(ModuleId(moduleName)) ?: return\nworkspaceModel.update(\"Adding new module dependency\") { builder ->\n  builder.modifyModuleEntity(moduleEntity) {\n    val libraryId = LibraryId(\n      libraryName,\n      LibraryTableId.ProjectLibraryTableId\n    )\n    this.dependencies.add(\n      LibraryDependency(libraryId, false, DependencyScope.COMPILE)\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Labels to Components in Kotlin UI DSL\nDESCRIPTION: Shows how to add a label to a text field component using the label method with a specified position.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/user_interface_components/kotlin_ui_dsl_version_2.md#2025-04-06_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\nrow {\n  textField()\n    .label(\"Cell label on top:\", LabelPosition.TOP)\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Source Downloads for IntelliJ Platform Plugin\nDESCRIPTION: Example of setting the downloadSources property to true, which instructs the IDE to download sources when working with the IntelliJ Platform Gradle Plugin.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_gradle_properties.md#2025-04-06_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\norg.jetbrains.intellij.platform.downloadSources=true\n```\n\n----------------------------------------\n\nTITLE: Configuring IntelliJ Platform Plugin Dependencies in Kotlin\nDESCRIPTION: Example of setting up plugin dependencies using Kotlin DSL, including repositories configuration, target platform specification, bundled plugin dependency, test framework, and external test libraries.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_dependencies_extension.md#2025-04-06_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport org.jetbrains.intellij.platform.gradle.TestFrameworkType\n\nrepositories {\n  mavenCentral()\n\n  intellijPlatform {\n    defaultRepositories()\n  }\n}\n\ndependencies {\n  intellijPlatform {\n    intellijIdeaCommunity(\"%ijPlatform%\")\n\n    bundledPlugin(\"com.intellij.java\")\n\n    testFramework(TestFrameworkType.Platform)\n  }\n\n  testImplementation(\"junit:junit:4.13.2\")\n  // other dependencies, e.g., 3rd-party libraries\n}\n```\n\n----------------------------------------\n\nTITLE: Tool Window Registration in plugin.xml\nDESCRIPTION: XML configuration for declaratively registering a tool window in plugin.xml. Shows required attributes like id, factoryClass, and optional properties like anchor and secondary group placement.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/user_interface_components/tool_windows.md#2025-04-06_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<extensions defaultExtensionNs=\"com.intellij\">\n    <toolWindow id=\"Sample Calendar\"\n                icon=\"/icons/calendar.svg\"\n                anchor=\"right\"\n                secondary=\"false\"\n                factoryClass=\"org.intellij.sdk.toolWindow.MyToolWindowFactory\"\n                canCloseContents=\"true\"/>\n</extensions>\n```\n\n----------------------------------------\n\nTITLE: Registering Refactoring Support in plugin.xml\nDESCRIPTION: XML configuration to register the SimpleRefactoringSupportProvider for refactoring capabilities.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/custom_language_support/reference_contributor.md#2025-04-06_snippet_5\n\nLANGUAGE: XML\nCODE:\n```\n<extensions defaultExtensionNs=\"com.intellij\">\n  <lang.refactoringSupport\n      language=\"Simple\"\n      implementationClass=\"org.intellij.sdk.language.SimpleRefactoringSupportProvider\"/>\n</extensions>\n```\n\n----------------------------------------\n\nTITLE: Implementing Title Case Macro in Java\nDESCRIPTION: Custom macro implementation that extends MacroBase to provide title case conversion functionality for Live Templates. Includes constructor, context validation, and result calculation logic.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/live_templates/creating_live_template_functions.md#2025-04-06_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n{src=\"live_templates/src/main/java/org/intellij/sdk/liveTemplates/TitleCaseMacro.java\" include-symbol=\"TitleCaseMacro\"}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to VFS Changes Programmatically in Java\nDESCRIPTION: Code example showing how to subscribe to Virtual File System changes using message bus subscription. This approach registers a BulkFileListener to handle VFS events.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/plugin_structure/plugin_listeners.md#2025-04-06_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nmessageBus.connect().subscribe(VirtualFileManager.VFS_CHANGES,\n    new BulkFileListener() {\n      @Override\n      public void after(@NotNull List<? extends VFileEvent> events) {\n        // handle the events\n      }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Up IntelliJ IDEA Community Dependencies in Kotlin\nDESCRIPTION: Basic Gradle configuration in Kotlin DSL for targeting IntelliJ IDEA Community 2023.3. This setup defines the necessary repositories and dependencies for plugin development.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin.md#2025-04-06_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nrepositories {\n  mavenCentral()\n\n  intellijPlatform {\n    defaultRepositories()\n  }\n}\n\ndependencies {\n  intellijPlatform {\n    intellijIdeaCommunity(\"2023.3\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Simple Language Property with Documentation\nDESCRIPTION: Example of a Simple Language property with documentation comments showing the expected format.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/custom_language_support/documentation_provider.md#2025-04-06_snippet_2\n\nLANGUAGE: Properties\nCODE:\n```\n# An application programming interface key (API key) is a unique\n# identifier used to authenticate a user, developer, or calling\n# program to an API.\napikey=ph342m91337h4xX0r5k!11Zz!\n```\n\n----------------------------------------\n\nTITLE: Implementing ChooseByNameContributorEx Methods for Navigation\nDESCRIPTION: Required method implementations for the ChooseByNameContributorEx interface that must be provided when creating Go to Class or Go to Symbol contributors. These methods feed available navigation items to the IDE's search functionality.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/custom_language_support/go_to_class_and_go_to_symbol.md#2025-04-06_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\n* `processNames(@NotNull Processor<? super String> processor, @NotNull GlobalSearchScope scope, @Nullable IdFilter filter)`\n\n  Feeds the processor with a complete list of names available in a specified scope, which the IDE will then filter according to the text typed by the user in the dialog.\n  Using [](indexing_and_psi_stubs.md) to obtain matching candidates is highly recommended to improve performance.\n* `processElementsWithName(String name, Processor<? super NavigationItem> processor, FindSymbolParameters parameters)`\n\n  Feeds the processor with a list of [`NavigationItem`](%gh-ic%/platform/core-api/src/com/intellij/navigation/NavigationItem.java) instances (typically [`PsiElement`](%gh-ic%/platform/core-api/src/com/intellij/psi/PsiElement.java)) matching the given name and parameters.\n  Processed `NavigationItem`s specify the destinations to jump to when a specific item is selected from the list.\n```\n\n----------------------------------------\n\nTITLE: Reporting Progress with ProgressIndicator in Java\nDESCRIPTION: Demonstrates the use of ProgressIndicator methods to report progress in IntelliJ SDK plugins. This includes setting text, progress details, fraction of work completed, and marking progress as determinate or indeterminate.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/architectural_overview/threading/background_processes.md#2025-04-06_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nsetText(String) // sets the progress text displayed above the progress bar\nsetText2(String) // sets the progress details text displayed under the progress bar\nsetFraction(double) // sets the progress fraction between 0.0 and 1.0\nsetIndeterminate(boolean) // marks the progress as indeterminate or determinate\n```\n\n----------------------------------------\n\nTITLE: Basic Theme Configuration with Named Colors\nDESCRIPTION: Demonstrates the basic structure of a theme file with named color definition and usage in UI controls.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/getting_started/theme/themes_customize.md#2025-04-06_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"theme_basics\",\n  \"dark\": false,\n  \"author\": \"IntelliJ Platform SDK\",\n  \"editorScheme\": \"/Lightning.xml\",\n\n  \"colors\": {\n    \"basicBackground\": \"#E1E1E1\"\n  },\n  \"ui\": {\n    \"Panel.background\": \"basicBackground\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering SimpleCommenter in plugin.xml\nDESCRIPTION: XML configuration to register the SimpleCommenter implementation for the Simple Language in the plugin configuration file.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/custom_language_support/commenter.md#2025-04-06_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<extensions defaultExtensionNs=\"com.intellij\">\n  <lang.commenter\n      language=\"Simple\"\n      implementationClass=\"org.intellij.sdk.language.SimpleCommenter\"/>\n</extensions>\n```\n\n----------------------------------------\n\nTITLE: Using Extension Points in Java Code\nDESCRIPTION: Java code demonstrating how to use registered extensions at runtime using ExtensionPointName.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/plugin_structure/plugin_extension_points.md#2025-04-06_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\n@Service\npublic final class MyExtensionUsingService {\n\n  private static final ExtensionPointName<MyBeanClass> EP_NAME =\n      ExtensionPointName.create(\"my.plugin.myExtensionPoint1\");\n\n  public void useRegisteredExtensions() {\n    for (MyBeanClass extension : EP_NAME.getExtensionList()) {\n      String key = extension.getKey();\n      String clazz = extension.getClass();\n      // ...\n    }\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Adding JCEF Browser to UI Component\nDESCRIPTION: Demonstrates how to create a JCEF browser instance and add it to a Swing panel component in the plugin UI. Shows basic browser component integration.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/embedded_browser_jcef.md#2025-04-06_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\n// assume 'JPanel myPanel' is a part of a tool window UI\nJBCefBrowser browser = new JBCefBrowser();\nmyPanel.add(browser.getComponent());\n```\n\n----------------------------------------\n\nTITLE: Retrieving PSI Elements with StubIndex in Java\nDESCRIPTION: Uses StubIndex.getElements() to retrieve a collection of PSI elements corresponding to a certain key (e.g., classes with a specific short name) within a specified scope. This method is part of the IntelliJ Platform SDK's indexing API.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/indexing_and_psi_stubs/stub_indexes.md#2025-04-06_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nStubIndex.getElements()\n```\n\n----------------------------------------\n\nTITLE: UI Thread Checking in Java\nDESCRIPTION: Code snippet demonstrating how to check if the current thread is the EDT/UI thread using Application.isDispatchThread() and UIUtil.invokeLaterIfNeeded().\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/architectural_overview/threading/threading_model.md#2025-04-06_snippet_18\n\nLANGUAGE: java\nCODE:\n```\nApplication.isDispatchThread()\nUIUtil.invokeLaterIfNeeded()\n```\n\n----------------------------------------\n\nTITLE: Creating an Application-Level Light Service in Java\nDESCRIPTION: Demonstrates how to implement a simple application-level light service using the @Service annotation in Java. Light services don't require registration in plugin.xml.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/plugin_structure/plugin_services.md#2025-04-06_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\n@Service\npublic final class MyAppService {\n\n  public void doSomething(String param) {\n    // ...\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Dialog Display Handler Implementation in Java\nDESCRIPTION: Shows how to display a dialog when a button is clicked and handle the user's response using showAndGet() method.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/user_interface_components/dialog_wrapper.md#2025-04-06_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nJButton testButton = new JButton();\ntestButton.addActionListener(actionEvent -> {\n  if (new SampleDialogWrapper().showAndGet()) {\n    // user pressed OK\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Settings Link in Inspection Descriptions (HTML)\nDESCRIPTION: Shows how to include a link to related settings in the inspection description. The link uses a special URL format to open specific settings pages and optionally pre-select UI elements.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/code_inspections.md#2025-04-06_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\nSee <em>Includes</em> tab in <a href=\"settings://fileTemplates\">Settings | Editor | File and Code Templates</a> to configure.\n```\n\n----------------------------------------\n\nTITLE: Incorrect Line Marker Provider Implementation in Java\nDESCRIPTION: An example of an incorrect line marker provider implementation that returns marker info for PsiMethod instead of PsiIdentifier. This causes the line marker icon to blink when the method is not completely visible in the editor window.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/custom_language_support/line_marker_provider.md#2025-04-06_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nfinal class MyWrongLineMarkerProvider implements LineMarkerProvider {\n  public LineMarkerInfo getLineMarkerInfo(@NotNull PsiElement element) {\n    if (element instanceof PsiMethod) {\n      return new LineMarkerInfo(element, ...);\n    }\n    return null;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Extensions with Default Namespace\nDESCRIPTION: Example of declaring extensions using a default namespace (com.intellij) to register an application service.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/plugin_structure/plugin_configuration_file.md#2025-04-06_snippet_15\n\nLANGUAGE: XML\nCODE:\n```\n<extensions defaultExtensionNs=\"com.intellij\">\n  <applicationService\n      serviceImplementation=\"com.example.Service\"/>\n</extensions>\n```\n\n----------------------------------------\n\nTITLE: Executing Suspending Tasks with EDT Dispatcher in Kotlin\nDESCRIPTION: Illustrates how to use the EDT dispatcher to update the UI after performing a suspending task. This example shows the potential execution flow across different threads and the EDT.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/architectural_overview/threading/coroutines/coroutine_dispatchers.md#2025-04-06_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nsuspend fun doSomething() {\n  val fetchedData = suspendingTask()\n  withContext(Dispatchers.EDT) {\n    updateUI(fetchedData)\n  }\n}\n\nsuspend fun suspendingTask(): Data {\n  // fetch data from the internet\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring System Properties for runIde Task\nDESCRIPTION: Shows how to modify system properties of the runIde task using jvmArgumentProviders in both Kotlin and Groovy.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_faq.md#2025-04-06_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks {\n  runIde {\n    jvmArgumentProviders += CommandLineArgumentProvider {\n      listOf(\"-Dname=value\")\n    }\n  }\n}\n```\n\nLANGUAGE: groovy\nCODE:\n```\ntasks {\n  runIde {\n    jvmArgumentProviders.add({\n      [\"-Dname=value\"]\n    } as CommandLineArgumentProvider)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Caret Clone Action with EditorActionHandler\nDESCRIPTION: Implementation of the actionPerformed method that acquires and executes the caret cloning action. It uses EditorActionManager to get the appropriate handler and then executes it.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/editor_basics/editor_events.md#2025-04-06_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\npublic class EditorHandlerIllustration extends AnAction {\n  @Override\n  public void actionPerformed(@NotNull AnActionEvent event) {\n    Editor editor = event.getRequiredData(CommonDataKeys.EDITOR);\n    EditorActionManager actionManager = EditorActionManager.getInstance();\n    EditorActionHandler actionHandler =\n        actionManager.getActionHandler(IdeActions.ACTION_EDITOR_CLONE_CARET_BELOW);\n    actionHandler.execute(editor,\n        editor.getCaretModel().getPrimaryCaret(), event.getDataContext());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependency Resolution Management in Groovy\nDESCRIPTION: Demonstrates how to configure dependency resolution management with IntelliJ Platform repositories in a Groovy-based Gradle settings file.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin.md#2025-04-06_snippet_7\n\nLANGUAGE: groovy\nCODE:\n```\nimport org.jetbrains.intellij.platform.gradle.extensions.intellijPlatform\n\nplugins {\n  id 'org.jetbrains.intellij.platform.settings' version '%intellij-platform-gradle-plugin-version%'\n}\n\ndependencyResolutionManagement {\n  repositoriesMode = RepositoriesMode.FAIL_ON_PROJECT_REPOS\n\n  repositories {\n    mavenCentral()\n\n    intellijPlatform {\n      defaultRepositories()\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering the Simple File Type in plugin.xml\nDESCRIPTION: XML configuration that registers the Simple file type with the IntelliJ Platform. This configuration associates files with the .simple extension to the SimpleFileType class.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/custom_language_support/language_and_filetype.md#2025-04-06_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<extensions defaultExtensionNs=\"com.intellij\">\n  <fileType\n      name=\"Simple File\"\n      implementationClass=\"org.intellij.sdk.language.SimpleFileType\"\n      fieldName=\"INSTANCE\"\n      language=\"Simple\"\n      extensions=\"simple\"/>\n</extensions>\n```\n\n----------------------------------------\n\nTITLE: Visualizing Plugin Structure With Dependencies (PlantUML)\nDESCRIPTION: A PlantUML diagram showing the directory structure of a plugin with dependencies. It illustrates how the plugin JAR and its required libraries are organized in a lib folder under the plugin's root folder in the IDE's plugins directory.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/plugin_structure/plugin_content.md#2025-04-06_snippet_1\n\nLANGUAGE: plantuml\nCODE:\n```\n@startuml\n\nskinparam TitleFontName JetBrains Sans\nskinparam TitleFontStyle plain\nskinparam TitleFontSize 16\nskinparam DefaultTextAlignment left\n\ntitle\n  <IDE directory>\n  |_ plugins\n    |_ sample\n      |_ lib\n        |_ lib_foo.jar // (Required bundled library #1) //\n        |_ lib_bar.jar // (Required bundled library #2) //\n        |_ ...\n        |_ sample.jar // (Plugin distribution) //\n          |_ com\n            |_ company\n              |_ Sample.class // (Class \"\"com.company.Sample\"\") //\n          |_ ...\n          |_ META-INF\n            |_ plugin.xml // (Plugin Configuration File) //\n            |_ pluginIcon.svg // (Plugin Logo) //\n            |_ pluginIcon_dark.svg // (Plugin Logo, dark variant) //\nend title\n@enduml\n```\n\n----------------------------------------\n\nTITLE: Creating ConsoleView Instance in Java\nDESCRIPTION: Creates a ConsoleView instance using TextConsoleBuilderFactory. This is typically used when manually handling process output display.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/execution/execution.md#2025-04-06_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nTextConsoleBuilderFactory.createBuilder(project).getConsole()\n```\n\n----------------------------------------\n\nTITLE: Adding Background Images to a Theme in JSON\nDESCRIPTION: Configuration for adding background images to both the editor/tools area and the empty frame. The example specifies an image file with transparency settings, scaling, and centering options.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/getting_started/theme/themes_extras.md#2025-04-06_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Theme Basics\",\n  \"dark\": false,\n  \"author\": \"IntelliJ Platform SDK\",\n  \"ui\": {\n  },\n  \"background\": {\n    \"image\": \"/austria.png\",\n    \"transparency\": 10,\n    \"fill\": \"scale\",\n    \"anchor\": \"center\"\n  },\n  \"emptyFrameBackground\": {\n    \"image\": \"/austria.png\",\n    \"transparency\": 20,\n    \"fill\": \"scale\",\n    \"anchor\": \"center\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Publishing Token in Gradle (Gradle IntelliJ Plugin 1.x)\nDESCRIPTION: Kotlin configuration for setting up publishing token in Gradle using IntelliJ Gradle Plugin 1.x.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/getting_started/publishing_plugin.md#2025-04-06_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks {\n  publishPlugin {\n    token = providers.gradleProperty(\"intellijPlatformPublishingToken\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Storage Location with @State and @Storage Annotations in Java\nDESCRIPTION: Demonstrates how to use @State and @Storage annotations to specify where persisted values are stored for a PersistentStateComponent. It shows various options for storage locations and explains the parameters of these annotations.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/persisting_state_of_components.md#2025-04-06_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\n@State(\n    name = \"YourStateName\",\n    storages = {\n        @Storage(\"yourName.xml\"),\n        @Storage(StoragePathMacros.WORKSPACE_FILE)\n    }\n)\nclass YourPersistentComponent implements PersistentStateComponent<YourStateClass> {\n    // Implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Plugin Code From JavaScript in IntelliJ JCEF\nDESCRIPTION: This snippet demonstrates how to create a JBCefJSQuery, add a handler to open links, and inject JavaScript code to call the handler from the browser.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/embedded_browser_jcef.md#2025-04-06_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\nJBCefJSQuery openLinkQuery = JBCefJSQuery.create(browser); // 1\nopenLinkQuery.addHandler((link) -> { // 2\n    if (LinkUtil.isExternal(link)) {\n      BrowserUtil.browse(link);\n    } else {\n      EditorUtil.openFileInEditor(link);\n    }\n    return null; // 3\n});\n\nbrowser.getCefBrowser().executeJavaScript( // 4\n    \"window.openLink = function(link) {\" +\n      openLinkQuery.inject(\"link\") + // 5\n      \"};\",\n    browser.getCefBrowser().getURL(), 0\n);\n\nbrowser.getCefBrowser().executeJavaScript( // 6\n    \"\"\"\n    document.addEventListener('click', function (e) {\n      const link = e.target.closest('a').href;\n      if (link) {\n        window.openLink(link);\n      }\n    });\"\"\",\n    browser.getCefBrowser().getURL(), 0\n);\n```\n\n----------------------------------------\n\nTITLE: Checking Object Validity in Consecutive Read Actions in Java\nDESCRIPTION: Shows how to check object validity between consecutive read actions in Java. This ensures that the objects read in the first action are still valid when used in the second action.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/architectural_overview/threading/threading_model.md#2025-04-06_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nVirtualFile virtualFile = ReadAction.compute(() -> { // read action 1\n  // read a virtual file\n});\n// do other time-consuming work...\nPsiFile psiFile = ReadAction.compute(() -> { // read action 2\n  if (virtualFile.isValid()) { // check if the virtual file is valid\n    return PsiManager.getInstance(project).findFile(virtualFile);\n  }\n  return null;\n});\n```\n\n----------------------------------------\n\nTITLE: Using ReadAction for Cancellable Operations in Java\nDESCRIPTION: Example of using ReadAction.nonBlocking() and ReadAction.computeCancellable() for implementing cancellable read operations in IntelliJ Platform plugins.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/architectural_overview/threading/threading_model.md#2025-04-06_snippet_17\n\nLANGUAGE: java\nCODE:\n```\nReadAction.nonBlocking()\nReadAction.computeCancellable()\n```\n\n----------------------------------------\n\nTITLE: IntelliJPlatformType Enum Definition - Platform Types\nDESCRIPTION: Enum that defines all available IntelliJ Platform types for plugin development, including their product codes and artifact coordinates. Used for dependency resolution and plugin verification.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_types.md#2025-04-06_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Symbolic Reference Implementation in Kotlin\nDESCRIPTION: Shows how symbolic references are implemented between workspace entities, specifically in the context of module dependencies. Demonstrates the use of ModuleId and ModuleDependencyItem.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/workspace_model/workspace_model_entity_properties.md#2025-04-06_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nWorkspaceEntityWithSymbolicId\nSymbolicEntityId\nModuleId\nModuleDependencyItem\nModuleEntity.dependencies\n```\n\n----------------------------------------\n\nTITLE: Adding Different Types of Library Roots with Workspace Model in Kotlin\nDESCRIPTION: Demonstrates how to add different types of library roots (source and compiled) to a library entity. It also shows how to add an exclude root to the library configuration.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/workspace_model/workspace_model_usages.md#2025-04-06_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nval workspaceModel = WorkspaceModel.getInstance(project)\nval virtualFileUrlManager = workspaceModel.getVirtualFileUrlManager()\nval libraryEntity = workspaceModel.currentSnapshot\n  .resolve(\n    LibraryId(\n      libraryName,\n      LibraryTableId.ProjectLibraryTableId\n    )\n  ) ?: ...\n\nval sourceRoot = LibraryRoot(\n  virtualFileUrlManager\n    .getOrCreateFromUrl(\"file://foo/bar\"), LibraryRootTypeId.SOURCES\n)\nval compiledRoot = LibraryRoot(\n  virtualFileUrlManager\n    .getOrCreateFromUrl(\"file://foo/baz\"), LibraryRootTypeId.COMPILED\n)\nworkspaceModel.update(\"Adding library roots\") { builder ->\n  builder.modifyLibraryEntity(libraryEntity) {\n    this.roots = mutableListOf(sourceRoot, compiledRoot)\n    // Adding new exclude root\n    val virtualFileUrl = virtualFileUrlManager\n      .getOrCreateFromUrl(\"file://foo/out\")\n    this.excludedRoots =\n      excludedRoots + ExcludeUrlEntity(virtualFileUrl, this.entitySource)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin Signing and Publishing in Gradle (Kotlin)\nDESCRIPTION: This Kotlin code snippet demonstrates how to configure the signPlugin and publishPlugin tasks in Gradle to use environment variables for sensitive information like certificates, private keys, and publishing tokens.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/plugin_signing.md#2025-04-06_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nsignPlugin {\n  certificateChain.set(providers.environmentVariable(\"CERTIFICATE_CHAIN\"))\n  privateKey.set(providers.environmentVariable(\"PRIVATE_KEY\"))\n  password.set(providers.environmentVariable(\"PRIVATE_KEY_PASSWORD\"))\n}\n\npublishPlugin {\n  token.set(providers.environmentVariable(\"PUBLISH_TOKEN\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Entity Request Using WorkspaceModel in Kotlin\nDESCRIPTION: Demonstrates how to access the current snapshot of WorkspaceModel and query entities of a specific type. Shows two approaches: using the entities() method with a class reference and using the generic extension function.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/workspace_model/workspace_model_entity_read.md#2025-04-06_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n// Take a copy of the current storage\nval currentSnapshot: ImmutableEntityStorage =\n  WorkspaceModel.getInstance(project).currentSnapshot\n// Search for the module with the given name throughout the whole list\nval moduleEntity: ModuleEntity? =\n  currentSnapshot.entities(ModuleEntity::class.java)\n    .find { it.name == moduleName }\n\n// Extension function shortcut for\n// EntityStorage.entities(E::class.java)\ncurrentSnapshot.entities<ModuleEntity>()\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin Signing in Gradle IntelliJ Plugin with Kotlin DSL\nDESCRIPTION: Example configuration for the signPlugin task in Gradle using Kotlin DSL. It demonstrates how to set up certificate chain, private key, and password directly in the build script for plugin signing.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/plugin_signing.md#2025-04-06_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nsignPlugin {\n  certificateChain.set(\"\"\"\n    -----BEGIN CERTIFICATE-----\n    MIIElgCCAn4CCQDo83LWYj2QSTANBgkqhkiG9w0BAQsFADANMQswCQYDVQQGEwJQ\n    ...\n    gdZzxCN8t1EmH8kD2Yve6YKGFCRAIIzveEg=\n    -----END CERTIFICATE-----\n  \"\"\".trimIndent())\n\n  privateKey.set(\"\"\"\n    -----BEGIN RSA PRIVATE KEY-----\n    MIIJKgIBAAKCAgEAwU8awS22Rw902BmwVDDBMlTREX440BAAVM40NW3E0lJ7YTJG\n    ...\n    EnNBfIVFhh6khisKqTBWSEo5iS2RYJcuZs961riCn1LARztiaXL4l17oW8t+Qw==\n    -----END RSA PRIVATE KEY-----\n  \"\"\".trimIndent())\n\n  password.set(\"8awS22%#3(4wVDDBMlTREX\")\n}\n\npublishPlugin {\n  token.set(\"perm:a961riC....l17oW8t+Qw==\")\n}\n```\n\n----------------------------------------\n\nTITLE: Applying IntelliJ Platform Gradle Plugin in Kotlin\nDESCRIPTION: Shows how to apply the IntelliJ Platform Gradle Plugin in a Kotlin-based Gradle build file.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin.md#2025-04-06_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n  id(\"org.jetbrains.intellij.platform\") version \"%intellij-platform-gradle-plugin-version%\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Entities by EntitySource in Kotlin\nDESCRIPTION: Shows how to use the EntitySource index to find all entities matching a source predicate. This example filters entities that have a GradleEntitySource.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/workspace_model/workspace_model_entity_read.md#2025-04-06_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval currentSnapshot: ImmutableEntityStorage =\n  WorkspaceModel.getInstance(project).currentSnapshot\n// Querying all entities of different types\n// but with concrete entitySource\ncurrentSnapshot.entitiesBySource { it is GradleEntitySource }.forEach {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Scheduling Tasks with Fixed Delay in Kotlin Coroutines\nDESCRIPTION: Demonstrates how to implement a scheduleWithFixedDelay-like functionality using coroutines, allowing for both suspending and non-suspending actions.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/architectural_overview/threading/coroutines/coroutine_tips_and_tricks.md#2025-04-06_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval job = coroutineScope.launch {\n  delay(initialDelayMs)\n  while (true) {\n    action() // can be suspending as well\n    delay(delayMs)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a DirectNavigationProvider Extension Point\nDESCRIPTION: XML snippet showing how to register a DirectNavigationProvider extension point in a plugin.xml file.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/custom_language_support/navigation.md#2025-04-06_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<com.intellij.lang.directNavigationProvider>\n```\n\n----------------------------------------\n\nTITLE: Using File Paths for Plugin Signing in Gradle with Kotlin DSL\nDESCRIPTION: Alternative configuration using file paths instead of direct content for the certificate chain and private key in Kotlin DSL. This approach is useful for keeping sensitive data outside the build script.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/plugin_signing.md#2025-04-06_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nsignPlugin {\n  certificateChainFile.set(file(\"certificate/chain.crt\"))\n  privateKeyFile.set(file(\"certificate/private.pem\"))\n  password.set(\"8awS22%#3(4wVDDBMlTREX\")\n}\n\npublishPlugin {\n  token.set(\"perm:a961riC....l17oW8t+Qw==\")\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Read Action using Application.runReadAction() in Java\nDESCRIPTION: Shows how to use Application.runReadAction() to perform a read operation in Java. This API is considered low-level and should be avoided.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/architectural_overview/threading/threading_model.md#2025-04-06_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nPsiFile psiFile = ApplicationManager.getApplication()\n    .runReadAction((Computable<PsiFile>)() -> {\n      // read and return PsiFile\n    });\n```\n\n----------------------------------------\n\nTITLE: Custom Safe Delete Processor for Properties Files\nDESCRIPTION: Example of a SafeDeleteProcessorDelegate implementation for the Properties language plugin. This demonstrates how to customize the Safe Delete behavior for specific element types.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/custom_language_support/safe_delete_refactoring.md#2025-04-06_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nSafeDeleteProcessorDelegate\n```\n\n----------------------------------------\n\nTITLE: Defining Input Test Data in Properties File\nDESCRIPTION: Creates a properties file 'RenameTestData.simple' in the testData directory to serve as input for the rename test.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/writing_tests_for_plugins/rename_test.md#2025-04-06_snippet_0\n\nLANGUAGE: Properties\nCODE:\n```\nwebsite = https://en.wikipedia.org/\n```\n\n----------------------------------------\n\nTITLE: ProductRelease.Channel Enum - Release Channels\nDESCRIPTION: Enum defining the available release channels for JetBrains IDEs and Android Studio, used to describe different types of binary releases like RELEASE, EAP, BETA, etc.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_types.md#2025-04-06_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Publishing Messages in Java\nDESCRIPTION: This snippet illustrates how to publish messages to a topic. It retrieves the message bus, gets a publisher for the ChangeActionNotifier topic, and calls the topic's methods to publish messages.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/messaging_infrastructure.md#2025-04-06_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic void doChange(Context context) {\n  ChangeActionNotifier publisher = project.getMessageBus()\n      .syncPublisher(ChangeActionNotifier.CHANGE_ACTION_TOPIC);\n  publisher.beforeAction(context);\n  try {\n    // do action\n  } finally {\n    publisher.afterAction(context);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Filling External Mapping Index with Arbitrary Data in Kotlin\nDESCRIPTION: Demonstrates how to associate custom data with workspace entities using external mappings. This code shows the process of creating an external mapping and adding an association between a ModuleEntity and a custom data class.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/workspace_model/workspace_model_entity_read.md#2025-04-06_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\n// Сlass whose instances we want to store in the index\ndata class Foo(val someData: String)\n// Unique identifier of the concrete mapping\nval externalMappingKey = ExternalMappingKey.create<Foo>(\"intellij.foo\")\n\nval mutableEntityStorage = WorkspaceModel.getInstance(project)\n  .currentSnapshot.toBuilder()\n// Getting mutable instance of specific mapping\nval mutableFooExternalMapping =\n  mutableEntityStorage.getMutableExternalMapping(externalMappingKey)\n\nval moduleEntity = mutableEntityStorage\n  .entities(ModuleEntity::class.java).single()\n// Associate data with specific `ModuleEntity`\nmutableFooExternalMapping.addMapping(moduleEntity, Foo(\"someData\"))\n```\n\n----------------------------------------\n\nTITLE: Configuring Root Module for Multi-Module Projects in Kotlin\nDESCRIPTION: Gradle configuration in Kotlin DSL for the root module of a multi-module IntelliJ plugin project. This applies the main platform plugin that provides tasks for signing, publishing, and running the plugin.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin.md#2025-04-06_snippet_18\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n  id(\"org.jetbrains.intellij.platform\") version \"%intellij-platform-gradle-plugin-version%\"\n}\n```\n\n----------------------------------------\n\nTITLE: Converting PsiElement to UElement in Kotlin\nDESCRIPTION: Shows how to convert a PsiElement to a UElement using the extension function in Kotlin code.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/architectural_overview/uast.md#2025-04-06_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nelement.toUElement()\n```\n\n----------------------------------------\n\nTITLE: Registering RuntimeDictionaryProvider Extension Point in Java\nDESCRIPTION: Register a custom RuntimeDictionaryProvider implementation in the plugin.xml file using the com.intellij.spellchecker.dictionary.runtimeDictionaryProvider extension point.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/custom_language_support/spell_checking.md#2025-04-06_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<extension point=\"com.intellij.spellchecker.dictionary.runtimeDictionaryProvider\"/>\n```\n\n----------------------------------------\n\nTITLE: Using Named Color Keys in Java\nDESCRIPTION: Java code example showing how to use JBColor.namedColor() to define color constants with light and dark theme defaults.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/themes_metadata.md#2025-04-06_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nprivate static final JBColor SECTION_HEADER_FOREGROUND =\n    JBColor.namedColor(\n      \"Plugins.SectionHeader.foreground\",\n      new JBColor(0x787878,0x999999)\n    );\n```\n\n----------------------------------------\n\nTITLE: Build Plugin Task Configuration\nDESCRIPTION: Task configuration for assembling a plugin and preparing ZIP archive for deployment. Extends Gradle's Zip task.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/gradle_intellij_plugin/tools_gradle_intellij_plugin.md#2025-04-06_snippet_12\n\nLANGUAGE: groovy\nCODE:\n```\nbuildPlugin { archiveBaseName = \"${prepareSandboxTask.pluginName}\" }\n```\n\n----------------------------------------\n\nTITLE: Obtaining ProjectFileIndex for Project Files in Java\nDESCRIPTION: This snippet shows how to get an instance of ProjectFileIndex from ProjectRootManager. The ProjectFileIndex provides methods to check file relationships with the project structure.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/project_model/project.md#2025-04-06_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nProjectFileIndex projectFileIndex =\n    ProjectRootManager.getInstance(project).getFileIndex();\n```\n\n----------------------------------------\n\nTITLE: Implementing Rename Test Method in Java\nDESCRIPTION: Adds a testRename() method to the SimpleCodeInsightTest class to configure the test fixture, perform the rename operation, and compare input and output files.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/writing_tests_for_plugins/rename_test.md#2025-04-06_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\npublic void testRename() {\n    myFixture.testRename(\"RenameTestData.java\", \"RenameTestDataAfter.simple\", \"websiteUrl\");\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Additional Index Roots Extension Point\nDESCRIPTION: Demonstrates how to register the extension point for adding additional files/directories to be indexed.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/indexing_and_psi_stubs/file_based_indexes.md#2025-04-06_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<com.intellij.indexedRootsProvider>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Project-Level Tool Window Listener in Java\nDESCRIPTION: Implementation of a ToolWindowManagerListener that receives project instance through constructor injection. This allows the listener to access project-specific services and data.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/plugin_structure/plugin_listeners.md#2025-04-06_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\npackage myPlugin;\n\nfinal class MyToolWindowListener implements ToolWindowManagerListener {\n  private final Project project;\n\n  MyToolWindowListener(Project project) {\n    this.project = project;\n  }\n\n  @Override\n  public void stateChanged(@NotNull ToolWindowManager toolWindowManager) {\n    // handle the state change\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Parametrizing IntelliJ Platform Dependencies in Kotlin\nDESCRIPTION: Gradle configuration in Kotlin DSL that allows dynamic configuration of the target platform using properties defined in gradle.properties. This enables flexible platform version selection.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin.md#2025-04-06_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\ndependencies {\n  intellijPlatform {\n    val type = providers.gradleProperty(\"platformType\")\n    val version = providers.gradleProperty(\"platformVersion\")\n\n    create(type, version)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Legacy CLion Plugin Dependency\nDESCRIPTION: XML configuration for declaring CLion plugin dependency in plugin.xml for versions prior to 2020.3\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/getting_started/plugin_compatibility.md#2025-04-06_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<depends>com.intellij.modules.clion</depends>\n```\n\n----------------------------------------\n\nTITLE: Adding Child Entities to Parent Entity\nDESCRIPTION: Demonstrates how to add a child entity to an existing parent entity. This example shows creating a ContentRootEntity and associating it with a module.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/workspace_model/workspace_model_entity_mutation.md#2025-04-06_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval contentRoot = ContentRootEntity(url, emptyList(), entitySource) {\n  this.module = module\n}\nbuilder.addEntity(contentRoot)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Structure View Element in Java for IntelliJ Plugin\nDESCRIPTION: Creates a StructureViewTreeElement implementation that represents nodes in the structure view tree. It handles the navigation, presentation, and child elements for Simple Language structures, with special handling for SimpleProperty elements.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/custom_language_support/structure_view_factory.md#2025-04-06_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\npublic class SimpleStructureViewElement implements StructureViewTreeElement, SortableTreeElement {\n\n  private final PsiElement myElement;\n\n  public SimpleStructureViewElement(PsiElement element) {\n    this.myElement = element;\n  }\n\n  @Override\n  public Object getValue() {\n    return myElement;\n  }\n\n  @Override\n  public void navigate(boolean requestFocus) {\n    if (myElement instanceof NavigationItem) {\n      ((NavigationItem) myElement).navigate(requestFocus);\n    }\n  }\n\n  @Override\n  public boolean canNavigate() {\n    return myElement instanceof NavigationItem &&\n           ((NavigationItem) myElement).canNavigate();\n  }\n\n  @Override\n  public boolean canNavigateToSource() {\n    return myElement instanceof NavigationItem &&\n           ((NavigationItem) myElement).canNavigateToSource();\n  }\n\n  @Override\n  @NotNull\n  public String getAlphaSortKey() {\n    String name = myElement instanceof SimpleProperty ?\n            ((SimpleProperty) myElement).getKey() :\n            myElement.toString();\n    return name;\n  }\n\n  @Override\n  @NotNull\n  public ItemPresentation getPresentation() {\n    ItemPresentation presentation = myElement instanceof NavigationItem ?\n            ((NavigationItem) myElement).getPresentation() : null;\n    return presentation != null ? presentation : new PresentationData();\n  }\n\n  @Override\n  @NotNull\n  public TreeElement[] getChildren() {\n    if (myElement instanceof SimpleFile) {\n      SimplePropertyList propertyList = PsiTreeUtil.getChildOfType(myElement, SimplePropertyList.class);\n      if (propertyList == null) {\n        return EMPTY_ARRAY;\n      }\n      List<SimpleProperty> properties = PsiTreeUtil.getChildrenOfTypeAsList(propertyList, SimpleProperty.class);\n      List<TreeElement> treeElements = new ArrayList<>(properties.size());\n      for (SimpleProperty property : properties) {\n        treeElements.add(new SimpleStructureViewElement(property));\n      }\n      return treeElements.toArray(new TreeElement[0]);\n    }\n    return EMPTY_ARRAY;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Bundling API Sources in Kotlin Gradle Build Script\nDESCRIPTION: Kotlin Gradle configuration that creates a source JAR containing Java and Kotlin API sources from a specific package and adds it to the plugin distribution in the required location.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/bundling_plugin_openapi_sources.md#2025-04-06_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks {\n  val createOpenApiSourceJar by registering(Jar::class) {\n    // Java sources\n    from(sourceSets.main.get().java) {\n      include(\"**/com/example/plugin/openapi/**/*.java\")\n    }\n    // Kotlin sources\n    from(kotlin.sourceSets.main.get().kotlin) {\n      include(\"**/com/example/plugin/openapi/**/*.kt\")\n    }\n    destinationDirectory.set(layout.buildDirectory.dir(\"libs\"))\n    archiveClassifier.set(\"src\")\n  }\n\n  buildPlugin {\n    dependsOn(createOpenApiSourceJar)\n    from(createOpenApiSourceJar) { into(\"lib/src\") }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Data Binding in Kotlin UI DSL\nDESCRIPTION: Illustrates various ways to bind UI components to data model properties using specific binding methods for different component types.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/user_interface_components/kotlin_ui_dsl_version_2.md#2025-04-06_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\nrow {\n  checkBox(\"Checkbox\")\n    .bindSelected(model::checkbox)\n}\nrow(\"textField:\") {\n  textField()\n    .bindText(model::textField)\n}\nrow(\"intTextField(0..100):\") {\n  intTextField()\n    .bindIntText(model::intTextField)\n}\nrow(\"comboBox:\") {\n  comboBox(Color.values())\n    .bindItem(model::comboBoxColor)\n}\nrow(\"slider:\") {\n  slider(0, 100, 10, 50)\n    .bindValue(model::slider)\n}\nrow(\"spinner:\") {\n  spinner(0..100)\n    .bindIntValue(model::spinner)\n}\nbuttonsGroup(title = \"radioButton:\") {\n for (value in Color.values()) {\n  row {\n   radioButton(value.name, value)\n  }\n }\n}.bind(model::radioButtonColor)\n```\n\n----------------------------------------\n\nTITLE: Adding a Header to Got It Tooltip in Java\nDESCRIPTION: This snippet shows how to add a header to a Got It tooltip using Java. It creates a new GotItTooltip instance with an ID, text, and parent disposable, then adds a header using the withHeader method.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/ui/controls/got_it_tooltip.md#2025-04-06_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nnew GotItTooltip(TOOLTIP_ID, GET_IT_TEXT, parentDisposable)\n    .withHeader(\"The reader mode is on\");\n```\n\n----------------------------------------\n\nTITLE: Registering IntelliJ Platform Testing Tasks in Kotlin\nDESCRIPTION: Example of using the intellijPlatformTesting extension to register custom tasks in Kotlin. It shows how to set up containers for running the IDE, testing, UI testing, and performance testing.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_testing_extension.md#2025-04-06_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nintellijPlatformTesting {\n  runIde\n  testIde\n  testIdeUi\n  testIdePerformance\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Project Leak with Application Scope in Kotlin\nDESCRIPTION: This snippet demonstrates how using the application's coroutine scope can cause a project leak. When a project is closed while a coroutine referencing it continues running in the application scope, the project cannot be garbage collected properly.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/architectural_overview/threading/coroutines/coroutine_scopes.md#2025-04-06_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\napplication.coroutineScope.launch {\n  project.getService(PsiDirectoryFactory::class.java)\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Module Dependencies in Java\nDESCRIPTION: This snippet demonstrates how to get an array of dependent modules or their names for a given module using the ModuleRootManager class.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/project_model/module.md#2025-04-06_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nModuleRootManager moduleRootManager = ModuleRootManager.getInstance(module);\nModule[] dependentModules = moduleRootManager.getDependencies();\nString[] dependentModulesNames = moduleRootManager.getDependencyModuleNames();\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Action Group with Icon in IntelliJ Plugin\nDESCRIPTION: XML snippet demonstrating a group with custom implementation class and a specific icon. This allows for specialized behavior beyond the default group functionality.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/plugin_structure/plugin_configuration_file.md#2025-04-06_snippet_30\n\nLANGUAGE: xml\nCODE:\n```\n<group\n    id=\"com.example.myframeworksupport.MyGroup\"\n    class=\"com.example.impl.MyGroup\"\n    icon=\"AllIcons.Actions.GC\"/>\n```\n\n----------------------------------------\n\nTITLE: Registering PsiDocumentationTargetProvider Extension Point\nDESCRIPTION: Example of how to register a PsiDocumentationTargetProvider extension point in a plugin.xml file.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/custom_language_support/documentation.md#2025-04-06_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<extensions defaultExtensionNs=\"com.intellij\">\n  <platform.backend.documentation.psiTargetProvider\n      implementation=\"fully.qualified.ClassName\"/>\n</extensions>\n```\n\n----------------------------------------\n\nTITLE: Registering Simple Action Group in XML\nDESCRIPTION: This XML snippet shows how to register a simple action group in the plugin.xml file. It defines a group with a unique ID, display text, popup attribute, and icon.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/action_system/grouping_actions_tutorial.md#2025-04-06_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<group\n    id=\"org.intellij.sdk.action.GroupedActions\"\n    text=\"Static Grouped Actions\"\n    popup=\"true\"\n    icon=\"SdkIcons.Sdk_default_icon\"/>\n```\n\n----------------------------------------\n\nTITLE: Implementing a NamedEnum for Custom XML Value Conversion\nDESCRIPTION: Example of creating an enum that implements NamedEnum to match XML values that aren't valid Java identifiers.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/frameworks_and_external_apis/xml_dom_api.md#2025-04-06_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nenum CmpVersion implements NamedEnum {\n  CmpVersion_1_X (\"1.x\"),\n  CmpVersion_2_X (\"2.x\");\n\n  private final String value;\n\n  CmpVersion(String value) {\n    this.value = value;\n  }\n\n  public String getValue() {\n    return value;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CLion Plugin Dependency (2020.3+)\nDESCRIPTION: XML configuration for declaring CLion plugin dependency in plugin.xml for version 2020.3 and later\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/getting_started/plugin_compatibility.md#2025-04-06_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<depends>com.intellij.clion</depends>\n```\n\n----------------------------------------\n\nTITLE: Implementing Incremental Computation with Kotlin Flow in Workspace Model\nDESCRIPTION: Demonstrates how to set up incremental computation using Kotlin Flow to build and update indexes based on Workspace Model events. The code shows handling both initial index building and subsequent updates.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/workspace_model/workspace_model_event_listening.md#2025-04-06_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nworkspaceModel.eventLog.collectIndexed { index, event ->\n  if (index == 0) {\n    buildIndex(event.storageAfter)\n  } else {\n    updateIndex(event)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SimplePersistentStateComponent in Kotlin\nDESCRIPTION: Example of implementing a persistent state component using SimplePersistentStateComponent base class with BaseState for property delegation.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/persisting_state_of_components.md#2025-04-06_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n@Service\n@State(...)\nclass MySettings : SimplePersistentStateComponent<MySettings.State>(State()) {\n  class State : BaseState() {\n    var value by string(\"default value\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Explicit JetBrains Runtime Dependency in Kotlin\nDESCRIPTION: This snippet demonstrates how to add an explicit dependency on JetBrains Runtime using the IntelliJ Platform Gradle Plugin in Kotlin. It configures repositories and dependencies for both the IntelliJ IDEA Community Edition and JetBrains Runtime.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_faq.md#2025-04-06_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nrepositories {\n  mavenCentral()\n\n  intellijPlatform {\n    defaultRepositories()\n    jetbrainsRuntime()\n  }\n}\n\ndependencies {\n  intellijPlatform {\n    intellijIdeaCommunity(\"%ijPlatform%\")\n    jetbrainsRuntime(\"...\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Searching Entities by VirtualFileUrl in Kotlin\nDESCRIPTION: Demonstrates how to find entities referring to a particular VirtualFileUrl using the VirtualFileUrlIndex. This index provides a way to quickly locate entities by their file path.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/workspace_model/workspace_model_entity_read.md#2025-04-06_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval currentSnapshot: ImmutableEntityStorage =\n  WorkspaceModel.getInstance(project).currentSnapshot\n// Searching all entities with the given path\ncurrentSnapshot.getVirtualFileUrlIndex()\n  .findEntitiesByUrl(virtualFileUrl)\n```\n\n----------------------------------------\n\nTITLE: Creating Soft References with SymbolicEntityId in Kotlin\nDESCRIPTION: This example demonstrates implementing soft references between entities using SymbolicEntityId. MavenEntity implements WorkspaceEntityWithSymbolicId and provides a custom MavenId, while KotlinEntity references MavenEntity through this ID.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/workspace_model/workspace_model_entity_declaration.md#2025-04-06_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ninterface MavenEntity : WorkspaceEntityWithSymbolicId {\n  val version: Int\n  val name: String\n  override val symbolicId: MavenId\n    get() = MavenId(true, name)\n}\n\ninterface KotlinEntity : WorkspaceEntity {\n  val name: String\n  val mavenId: MavenId\n}\n\ndata class MavenId(\n  val valid: Boolean,\n  override val presentableName: String\n) : SymbolicEntityId<MavenEntity>\n```\n\n----------------------------------------\n\nTITLE: Fixed Multiple Child Elements with Same Tag\nDESCRIPTION: Method declarations for accessing multiple child elements with the same tag name but different indices.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/frameworks_and_external_apis/xml_dom_api.md#2025-04-06_snippet_13\n\nLANGUAGE: java\nCODE:\n```\n@SubTag(value = \"ejb-relationship-role\", index = 0)\nEjbRelationshipRole getEjbRelationshipRole1();\n\n@SubTag(value = \"ejb-relationship-role\", index = 1)\nEjbRelationshipRole getEjbRelationshipRole2();\n```\n\n----------------------------------------\n\nTITLE: Hypothetical Intersection Scope API in Kotlin\nDESCRIPTION: This snippet demonstrates a hypothetical API for retrieving the Project×Plugin intersection scope. The method would return the correct coroutine scope for the project and plugin by a given plugin class.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/architectural_overview/threading/coroutines/coroutine_scopes.md#2025-04-06_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\n/**\n * Returns the correct intersection scope for the project and plugin\n * by a given plugin class.\n */\nfun Project.getCoroutineScope(pluginClass: Class<*>): CoroutineScope\n```\n\n----------------------------------------\n\nTITLE: Checking File Belonging to Module Source Root in Java\nDESCRIPTION: This snippet demonstrates how to check if a virtual file or directory belongs to a module source root using the ProjectFileIndex class.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/project_model/module.md#2025-04-06_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\nVirtualFile moduleSourceRoot = ProjectRootManager.getInstance(project).getFileIndex().getSourceRootForFile(virtualFileOrDirectory);\n```\n\n----------------------------------------\n\nTITLE: Loading SVG Images in IntelliJ Platform\nDESCRIPTION: Replace SVGLoader with ImageLoader.loadFromResource() to load SVG images.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/api_internal/api_internal.md#2025-04-06_snippet_10\n\nLANGUAGE: Java\nCODE:\n```\nImage image = ImageLoader.loadFromResource(\"/path/to/image.svg\", MyClass.class);\n```\n\n----------------------------------------\n\nTITLE: Creating RunConfigurationOptions for Storing Run Configuration Settings\nDESCRIPTION: Implements a class for storing and persisting run configuration settings. This extends RunConfigurationOptions and defines properties for script path and program parameters.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/run_configurations_tutorial.md#2025-04-06_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic class DemoRunConfigurationOptions extends RunConfigurationOptions {\n  private final Property<String> myScriptName = string(\"\").provideDelegate(this, \"scriptName\");\n  private final Property<String> myScriptParameters = string(\"\").provideDelegate(this, \"scriptParameters\");\n\n  public @NotNull String getScriptName() {\n    return myScriptName.get();\n  }\n\n  public void setScriptName(@NotNull String scriptName) {\n    myScriptName.set(scriptName);\n  }\n\n  public @NotNull String getScriptParameters() {\n    return myScriptParameters.get();\n  }\n\n  public void setScriptParameters(@NotNull String scriptParameters) {\n    myScriptParameters.set(scriptParameters);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Project Components in IntelliJ Plugin XML\nDESCRIPTION: Demonstrates the XML structure for defining deprecated project components in an IntelliJ plugin configuration. Project components are contained within the project-components element.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/plugin_structure/plugin_configuration_file.md#2025-04-06_snippet_39\n\nLANGUAGE: XML\nCODE:\n```\n<project-components>\n  <component>\n    <!-- Component definition -->\n  </component>\n</project-components>\n```\n\n----------------------------------------\n\nTITLE: Registering SurroundDescriptor in IntelliJ Plugin\nDESCRIPTION: To support the Surround With action, plugins need to register SurroundDescriptor implementations in the com.intellij.lang.surroundDescriptor extension point. This code snippet shows the XML configuration for registering a SurroundDescriptor.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/custom_language_support/surround_with.md#2025-04-06_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<extensions defaultExtensionNs=\"com.intellij\">\n  <lang.surroundDescriptor language=\"MyLanguage\" implementationClass=\"com.example.MySurroundDescriptor\"/>\n</extensions>\n```\n\n----------------------------------------\n\nTITLE: Registering Folding Builder in plugin.xml\nDESCRIPTION: XML configuration to register the SimpleFoldingBuilder with the IntelliJ Platform, specifying it works with Java language files.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/custom_language_support/folding_builder.md#2025-04-06_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<extensions defaultExtensionNs=\"com.intellij\">\n  <lang.foldingBuilder\n      language=\"JAVA\"\n      implementationClass=\"org.intellij.sdk.language.SimpleFoldingBuilder\"/>\n</extensions>\n```\n\n----------------------------------------\n\nTITLE: Mixed Collection Child Elements\nDESCRIPTION: Method declarations for accessing collections of mixed child elements with different tag names.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/frameworks_and_external_apis/xml_dom_api.md#2025-04-06_snippet_15\n\nLANGUAGE: java\nCODE:\n```\n// <foo> elements\nList<Foo> getFoos();\n\n// <bar> elements\nList<Bar> getBars();\n\n// all <foo> and <bar> elements\n@SubTagsList({ \"foo\", \"bar\" })\nList<FooBar> getMergedListOfFoosAndBars();\n```\n\n----------------------------------------\n\nTITLE: Implementing SpellcheckingStrategy for Simple Language in Java\nDESCRIPTION: Implementation of the SpellcheckingStrategy class for the Simple language that specifies which elements should be checked for spelling. It defines a custom tokenizer for Simple property values and uses the empty tokenizer for other elements.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/custom_language_support/spell_checking_strategy.md#2025-04-06_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\npublic class SimpleSpellcheckingStrategy extends SpellcheckingStrategy {\n  @Override\n  public @NotNull Tokenizer getTokenizer(PsiElement element) {\n    if (element instanceof SimpleProperty) {\n      return new SimplePropertyTokenizer();\n    }\n    return EMPTY_TOKENIZER;\n  }\n\n  /**\n   * A tokenizer that only spellchecks property values\n   */\n  private static class SimplePropertyTokenizer extends Tokenizer<SimpleProperty> {\n    @Override\n    public void tokenize(@NotNull SimpleProperty element, TokenConsumer consumer) {\n      Text text = new TextOccurrence(element.getValue(), 0, element.getValue().getTextLength());\n      consumer.consumeToken(element, text, false, 0, TextRange.allOf(text.toString()), PlainTextSplitter.getInstance());\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Publishing Token in Gradle (IntelliJ Platform Plugin 2.x)\nDESCRIPTION: Kotlin configuration for setting up publishing token in Gradle using IntelliJ Platform Plugin 2.x.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/getting_started/publishing_plugin.md#2025-04-06_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nintellijPlatform {\n  publishing {\n    token = providers.gradleProperty(\"intellijPlatformPublishingToken\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Storing Credentials in Java\nDESCRIPTION: Shows how to store credentials using the PasswordSafe API. It creates CredentialAttributes and Credentials objects, then uses PasswordSafe to set the credentials. To remove stored credentials, null can be passed for the credentials parameter.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/persisting_sensitive_data.md#2025-04-06_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nCredentialAttributes attributes = createCredentialAttributes(key);\nCredentials credentials = new Credentials(username, password);\nPasswordSafe.getInstance().set(attributes, credentials);\n```\n\n----------------------------------------\n\nTITLE: Configuring idea.home.path in Gradle Tests (Kotlin)\nDESCRIPTION: Configures the system property 'idea.home.path' in the Gradle test task to point to the IntelliJ Community sources, which is required for tests to access mock JDKs.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/testing_plugins/testing_faq.md#2025-04-06_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\ntest {\n  systemProperty(\"idea.home.path\", \"/path/to/intellij-community-sources\")\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a ModuleEntity in 2024.3+ with Workspace Model in Kotlin\nDESCRIPTION: Shows how to create a new module entity using the Workspace Model API in version 2024.3+. It creates the appropriate entity source and adds the module to the workspace model.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/workspace_model/workspace_model_usages.md#2025-04-06_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nimport com.intellij.workspaceModel.ide.legacyBridge.LegacyBridgeJpsEntitySourceFactory\n// ...\n\nval workspaceModel = WorkspaceModel.getInstance(project)\nval moduleId = ModuleId(moduleName)\nif (moduleId in workspaceModel.currentSnapshot) {\n  // Module with such `ModuleId` already exists\n  ...\n}\n\nval baseModuleDir = workspaceModel.getVirtualFileUrlManager()\n  .getOrCreateFromUrl(\"file://foo/bar\")\nval moduleEntitySource =\n    LegacyBridgeJpsEntitySourceFactory.getInstance(project)\n        .createEntitySourceForModule(baseModuleDir, null)\nWorkspaceModel.getInstance(project).update(\"Add new module\") { builder ->\n  val moduleEntity =\n      ModuleEntity(moduleName, emptyList(), moduleEntitySource)\n  builder.addEntity(moduleEntity)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Parent-Child Relationship between Maven and Kotlin Entities\nDESCRIPTION: This example shows how to set up a parent-child relationship between two entity types. The MavenEntity (parent) has a list of KotlinEntity children, and each KotlinEntity references back to its parent.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/workspace_model/workspace_model_entity_declaration.md#2025-04-06_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ninterface MavenEntity : WorkspaceEntity {\n  val version: Int\n  val name: String\n  val root: VirtualFileUrl\n\n  val kotlinEntities: List<@Child KotlinEntity>\n}\n\ninterface KotlinEntity : WorkspaceEntity {\n  val name: String\n  val maven: MavenEntity\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Vue Component Slots with Scoped Properties\nDESCRIPTION: Illustrates how to define Vue component slots in Web Types, including support for scoped slots with vue-properties that define the properties available in the slot scope.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/custom_language_support/websymbols_web_types.md#2025-04-06_snippet_6\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"slots\": [{\n      \"name\": \"img\",\n      \"description\": \"Expects the [v-img](/components/images) component.\",\n      \"doc-url\": \"https://vuetifyjs.com/en/api/v-app-bar/#slots\",\n      \"vue-properties\": [\n        {\n          \"name\": \"props\",\n          \"type\": \"{ height: string, src: string | srcObject }\"\n        }\n      ]\n    }]\n}\n```\n\n----------------------------------------\n\nTITLE: Using MutableEntityStorage.replaceBySource in Kotlin\nDESCRIPTION: Shows the method for replacing entities in MutableEntityStorage, which can affect how EntityPointers resolve. This highlights why developers should also subscribe to storage changes when using EntityPointers.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/workspace_model/workspace_model_usages.md#2025-04-06_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nMutableEntityStorage.replaceBySource()\n```\n\n----------------------------------------\n\nTITLE: Creating a LibraryEntity in 2024.3+ with Workspace Model in Kotlin\nDESCRIPTION: Shows how to create a new library entity using the Workspace Model API in version 2024.3+. It checks if the library exists and creates it with the appropriate entity source.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/workspace_model/workspace_model_usages.md#2025-04-06_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nimport com.intellij.workspaceModel.ide.legacyBridge.LegacyBridgeJpsEntitySourceFactory\n// ...\n\nval currentSnapshot = WorkspaceModel.getInstance(project).currentSnapshot\nval libraryTableId = LibraryTableId.ProjectLibraryTableId\n\nval libraryId = LibraryId(libraryName, libraryTableId)\nif (libraryId in currentSnapshot) {\n  // Library with such `LibraryId` already exist\n  ...\n}\n\nval libraryEntitySource =\n    LegacyBridgeJpsEntitySourceFactory.getInstance(project)\n        .createEntitySourceForProjectLibrary(null)\nval libraryEntity = LibraryEntity(\n  libraryName,\n  libraryTableId, emptyList(),\n  libraryEntitySource\n)\nWorkspaceModel.getInstance(project).update(\"Add new library\") { builder ->\n  builder.addEntity(libraryEntity)\n}\n```\n\n----------------------------------------\n\nTITLE: Java PersistentStateComponent as State Class\nDESCRIPTION: Implementation of PersistentStateComponent in Java where the component itself serves as the state class.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/persisting_state_of_components.md#2025-04-06_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@Service\n@State(...)\nclass MySettings implements PersistentStateComponent<MySettings> {\n\n  public String stateValue;\n\n  @Override\n  public MySettings getState() {\n    return this;\n  }\n\n  @Override\n  public void loadState(MySettings state) {\n    XmlSerializerUtil.copyBean(state, this);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Note Block Warning About Internal APIs\nDESCRIPTION: Markdown block quote explaining that the documented API lists are not complete and providing guidance on finding API documentation.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/api_internal/api_internal.md#2025-04-06_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n> The lists are not complete and will be updated continuously.\\n>\\nCheck the corresponding code documentation when encountering any API not listed on this page.\\nIn some cases, such documentation might not be available inside the IDE for the current target platform version.\\nUse <control>Go to file</control> to browse the latest version in the [intellij-community](%gh-ic-master%/) GitHub repository instead.\\n>\\nUse the feedback form at the bottom of this page if you encounter missing or unclear information.\n```\n\n----------------------------------------\n\nTITLE: Implementing ProjectSdkSetupValidator in Kotlin\nDESCRIPTION: Creates a custom ProjectSdkSetupValidator to notify users about missing SDKs. This snippet checks for a 'DemoSdk' configuration and provides a fix handler.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/project_model/sdk.md#2025-04-06_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\ninternal class DemoProjectSdkSetupValidator : ProjectSdkSetupValidator {\n  override fun isApplicableFor(project: Project, file: VirtualFile): Boolean {\n    return file.fileType == DemoFileType\n  }\n\n  override fun getErrorMessage(project: Project, file: VirtualFile): String? {\n    if (ProjectJdkTable.getInstance().getSdksOfType(DemoSdkType.getInstance()).isEmpty()) {\n      return \"No DemoSdks are configured for this project!\"\n    }\n    return null\n  }\n\n  override fun getFixHandler(project: Project, file: VirtualFile):\n        EditorNotificationPanel.ActionHandler {\n    return SdkPopupFactory.newBuilder()\n        .withProject(project)\n        .withSdkTypeFilter { it is DemoSdkType }\n        .updateSdkForFile(file)\n        .buildEditorNotificationPanelHandler()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Application Component in IntelliJ Plugin XML\nDESCRIPTION: Specifies the structure for defining a deprecated application component in an IntelliJ plugin's XML configuration. Includes elements for implementation class, interface class, and various options.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/plugin_structure/plugin_configuration_file.md#2025-04-06_snippet_38\n\nLANGUAGE: XML\nCODE:\n```\n<component>\n  <implementation-class>fully.qualified.ImplementationClassName</implementation-class>\n  <interface-class>fully.qualified.InterfaceClassName</interface-class>\n  <headless-implementation-class>fully.qualified.HeadlessImplementationClassName</headless-implementation-class>\n  <option name=\"optionName\" value=\"optionValue\"/>\n  <loadForDefaultProject/>\n  <skipForDefaultProject/>\n</component>\n```\n\n----------------------------------------\n\nTITLE: Registering MultiHostInjector in XML\nDESCRIPTION: Shows how to register the MultiHostInjector implementation in the plugin.xml file.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/custom_language_support/language_injection.md#2025-04-06_snippet_7\n\nLANGUAGE: XML\nCODE:\n```\n<multiHostInjector\n    implementation=\"MyRegExpToJavaInjector\"/>\n```\n\n----------------------------------------\n\nTITLE: Registering PostfixTemplateProvider in plugin.xml\nDESCRIPTION: Register an implementation of PostfixTemplateProvider in the com.intellij.codeInsight.template.postfixTemplateProvider extension point.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/postfix_completion/postfix_templates.md#2025-04-06_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<extensionPoint name=\"com.intellij.codeInsight.template.postfixTemplateProvider\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Symbols Context with .ws-context JSON File\nDESCRIPTION: Example of a .ws-context JSON file that defines framework contexts and template syntax versions for different file patterns. Supports nested path patterns and context overrides for specific file locations.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/custom_language_support/websymbols_context.md#2025-04-06_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"framework\": \"vue\",\n  \"angular-template-syntax\": \"V_2\",\n  \"src/**/app/**\": {\n    \"framework\": null,\n    \"app.component.html\" : {\n      \"framework\": \"angular\",\n      \"angular-template-syntax\": \"V_17\"\n    }\n  },\n  \"src/**/p*-editor/*.html\" : {\n    \"framework\" : \"angular\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Tool Window Factory Implementation\nDESCRIPTION: Kotlin example showing implementation of ToolWindowFactory interface for creating tool window content when user activates the window.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/user_interface_components/tool_windows.md#2025-04-06_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyToolWindowFactory : ToolWindowFactory {\n    override fun createToolWindowContent(project: Project, toolWindow: ToolWindow) {\n        val contentManager = toolWindow.contentManager\n        val content = contentManager.factory.createContent(component, \"Tab Title\", false)\n        contentManager.addContent(content)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Plugin Vendor Information Configuration in XML\nDESCRIPTION: XML configuration for specifying plugin vendor information including name, website URL and contact email as displayed in the Plugins settings dialog and JetBrains Marketplace.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/plugin_structure/plugin_configuration_file.md#2025-04-06_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<vendor email=\"joe@example.com\">Joe Doe</vendor>\n```\n\n----------------------------------------\n\nTITLE: Handling Query Response in IntelliJ JCEF\nDESCRIPTION: This snippet shows how to handle a query response by returning a JBCefJSQuery.Response and using callbacks in the inject method.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/embedded_browser_jcef.md#2025-04-06_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\nopenLinkQuery.inject(\n  \"link\",\n  \"function(response) { /* success handler code */ }\",\n  \"function(error_code, error_message) { /* error handler code */ }\"\n);\n```\n\n----------------------------------------\n\nTITLE: Registering IntelliJ Platform Testing Tasks in Groovy\nDESCRIPTION: Example of using the intellijPlatformTesting extension to register custom tasks in Groovy. It demonstrates setting up containers for running the IDE, testing, UI testing, and performance testing.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_testing_extension.md#2025-04-06_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\nintellijPlatformTesting {\n  runIde\n  testIde\n  testIdeUi\n  testIdePerformance\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a ModuleEntity in 2024.2 with Workspace Model in Kotlin\nDESCRIPTION: Shows how to create a new module entity using the Workspace Model API in version 2024.2. It uses the LegacyBridgeJpsEntitySourceFactory to create the appropriate entity source.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/workspace_model/workspace_model_usages.md#2025-04-06_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nimport com.intellij.workspaceModel.ide.impl.LegacyBridgeJpsEntitySourceFactory\n// ...\n\nval workspaceModel = WorkspaceModel.getInstance(project)\nval moduleId = ModuleId(moduleName)\nif (moduleId in workspaceModel.currentSnapshot) {\n  // Module with such `ModuleId` already exists\n  ...\n}\n\nval baseModuleDir = workspaceModel.getVirtualFileUrlManager()\n  .getOrCreateFromUrl(\"file://foo/bar\")\nval moduleEntitySource =\n    LegacyBridgeJpsEntitySourceFactory\n        .createEntitySourceForModule(project, baseModuleDir, null)\nWorkspaceModel.getInstance(project).update(\"Add new module\") { builder ->\n  val moduleEntity =\n      ModuleEntity(moduleName, emptyList(), moduleEntitySource)\n  builder.addEntity(moduleEntity)\n}\n```\n\n----------------------------------------\n\nTITLE: Blocking Framework Context Extension\nDESCRIPTION: Example of registering a context blocker to prevent framework detection in certain scenarios\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/custom_language_support/websymbols_context.md#2025-04-06_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<idea-plugin>\n  <extensions defaultExtensionNs=\"com.intellij\">\n    <webSymbols.context\n        kind=\"framework\" name=\"any\"\n        implementation=\"com.intellij.python.js.PyTemplatesWebContextBlocker\"/>\n  </extensions>\n</idea-plugin>\n```\n\n----------------------------------------\n\nTITLE: Creating External Links in Java\nDESCRIPTION: Demonstrates how to create an external link with an arrow icon in Java. The link will open the specified URL in a browser when clicked.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/ui/controls/link.md#2025-04-06_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nActionLink externalLink = new ActionLink(\n    \"External link\",\n    event -> BrowserUtil.browse(\"https://www.jetbrains.com\")\n);\nexternalLink.setExternalLinkIcon();\n```\n\n----------------------------------------\n\nTITLE: Switching Between Background Threads and EDT in Kotlin Coroutines\nDESCRIPTION: Demonstrates the recommended approach for switching between background threads and EDT using coroutines, avoiding the invokeLater-style often found in Java.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/architectural_overview/threading/coroutines/coroutine_tips_and_tricks.md#2025-04-06_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nlaunch(Dispatchers.EDT) {\n  val uiData = collectUiData()\n  // switch to Default:\n  val result = withContext(Dispatchers.Default) {\n    compute(uiData)\n  }\n  // this will be resumed on EDT automatically:\n  applyUiData(result)\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Converter for PersistentStateComponent\nDESCRIPTION: Example of implementing a custom Converter for serializing LocalDateTime objects in persistent state components.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/persisting_state_of_components.md#2025-04-06_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nclass LocalDateTimeConverter extends Converter<LocalDateTime> {\n  public LocalDateTime fromString(@NotNull String value) {\n    long epochMilli = Long.parseLong(value);\n    ZoneId zoneId = ZoneId.systemDefault();\n    return Instant.ofEpochMilli(epochMilli)\n        .atZone(zoneId)\n        .toLocalDateTime();\n  }\n\n  public String toString(LocalDateTime value) {\n    ZoneId zoneId = ZoneId.systemDefault();\n    long toEpochMilli = value.atZone(zoneId)\n        .toInstant()\n        .toEpochMilli();\n    return Long.toString(toEpochMilli);\n  }\n}\n```\n\nLANGUAGE: java\nCODE:\n```\nclass State {\n  @OptionTag(converter = LocalDateTimeConverter.class)\n  public LocalDateTime dateTime;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining XML Attribute Value Pattern for FXML Files in Java\nDESCRIPTION: This snippet demonstrates how to create an XML attribute value pattern that checks if a PSI element is an XML attribute value inside a .fxml file. It uses XmlPatterns and PlatformPatterns classes.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/architectural_overview/element_patterns.md#2025-04-06_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nXmlAttributeValuePattern attributeValueInFxml =\n    XmlPatterns.xmlAttributeValue().inVirtualFile(\n        virtualFile().withExtension(JavaFxFileTypeFactory.FXML_EXTENSION)\n    );\n```\n\n----------------------------------------\n\nTITLE: Setting Plugin Name in XML\nDESCRIPTION: Example of defining the user-visible display name for a plugin using the <name> element in plugin.xml.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/plugin_structure/plugin_configuration_file.md#2025-04-06_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<name>My Framework Support</name>\n```\n\n----------------------------------------\n\nTITLE: Declaring Attribute Accessor with PsiClass Type\nDESCRIPTION: Method declaration for accessing an XML attribute named 'some-class' that references a PsiClass type.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/frameworks_and_external_apis/xml_dom_api.md#2025-04-06_snippet_10\n\nLANGUAGE: java\nCODE:\n```\n@Attribute(\"some-class\")\nGenericAttributeValue<PsiClass> getMyAttributeValue();\n```\n\n----------------------------------------\n\nTITLE: Web Types JSON with Explicit Namespace Organization\nDESCRIPTION: Alternative longer form for defining contributions with explicit namespace declaration. This example shows how to use the 'html' property to explicitly define attributes under that namespace.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/custom_language_support/websymbols_web_types.md#2025-04-06_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"name\": \"my-element\",\n  \"description\": \"A custom HTML element\",\n  \"html\": {\n    \"attributes\": [\n      {\n        \"name\": \"foo\",\n        \"description\": \"A custom attribute of `my-element`\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle Build Script for LSP Plugin with Gradle IntelliJ Plugin 1.x\nDESCRIPTION: Configuration for build.gradle.kts using the Gradle IntelliJ Plugin 1.x to set up a Language Server Protocol plugin targeting IntelliJ IDEA Ultimate.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/custom_language_support/language_server_protocol.md#2025-04-06_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n  // ...\n  id(\"org.jetbrains.intellij\") version \"%gradle-intellij-plugin-version%\"\n}\n\nintellij {\n  version = \"%ijPlatform%\"\n  type = \"IU\"\n}\n```\n\n----------------------------------------\n\nTITLE: Required Java Module Dependency Configuration in XML\nDESCRIPTION: XML configuration to specify a required dependency on the IntelliJ IDEA Java Module for an IntelliJ platform plugin.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/plugin_structure/plugin_configuration_file.md#2025-04-06_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<depends>com.intellij.modules.java</depends>\n```\n\n----------------------------------------\n\nTITLE: Controlling Action Visibility Based on Editor State\nDESCRIPTION: Method to determine when the editor action should be enabled and visible. It checks if a project is open, an editor is available, and at least one caret exists.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/editor_basics/editor_events.md#2025-04-06_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\npublic class EditorHandlerIllustration extends AnAction {\n  @Override\n  public void update(@NotNull AnActionEvent event) {\n    Project project = event.getProject();\n    Editor editor = event.getData(CommonDataKeys.EDITOR);\n\n    // Make sure at least one caret is available\n    boolean menuAllowed = false;\n    if (editor != null && project != null) {\n      // Ensure the list of carets in the editor is not empty\n      menuAllowed = !editor.getCaretModel().getAllCarets().isEmpty();\n    }\n    event.getPresentation().setEnabledAndVisible(menuAllowed);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic IDE Integration Test Implementation\nDESCRIPTION: Simple integration test that starts the IDE with a plugin installed, waits for background processes, and performs a shutdown.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/testing_plugins/integration_tests/integration_tests_intro.md#2025-04-06_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PluginTest {\n  @Test\n  fun simpleTestWithoutProject() {\n    Starter.newContext(\n      testName = \"testExample\",\n      TestCase(IdeProductProvider.IC, projectInfo = NoProject)\n        .withVersion(\"2024.3\")\n    ).apply {\n      val pathToPlugin = System.getProperty(\"path.to.build.plugin\")\n      PluginConfigurator(this).installPluginFromFolder(File(pathToPlugin))\n    }.runIdeWithDriver().useDriverAndCloseIde {\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Port Number Validation in Kotlin UI DSL\nDESCRIPTION: Validates a port number input field to ensure it falls between 0 and 65535. Performs immediate validation on input with error tooltips.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/ui/principles/validation_errors.md#2025-04-06_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval MESSAGE =\n    \"The port number must be between 0 and 65535\";\ntextField()\n  .validationOnInput {\n    val portString = it.text\n    if (portString.isNotEmpty()) {\n      try {\n        val portValue = portString.toInt()\n        if (portValue < 0 || portValue > 65535) {\n          error(MESSAGE)\n        } else {\n          null\n        }\n      } catch (_: NumberFormatException) {\n        error(MESSAGE)\n      }\n    } else {\n      null\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Changing Modality State in Kotlin Coroutines\nDESCRIPTION: Demonstrates the recommended approach for changing modality state when launching coroutines, ensuring proper context management.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/architectural_overview/threading/coroutines/coroutine_tips_and_tricks.md#2025-04-06_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\ncs.launch(ModalityState.current().asContextElement()) {\n  // ...\n  withContext(Dispatchers.EDT) {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Library File Status in Java\nDESCRIPTION: Demonstrates checking if a file belongs to library classes or sources using ProjectFileIndex.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/project_model/library.md#2025-04-06_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nProjectFileIndex.isLibraryClassFile(virtualFile)\n```\n\nLANGUAGE: java\nCODE:\n```\nProjectFileIndex.isInLibraryClasses(virtualFileorDirectory)\n```\n\nLANGUAGE: java\nCODE:\n```\nProjectFileIndex.isInLibrarySource(virtualFileorDirectory)\n```\n\n----------------------------------------\n\nTITLE: Using Messages for Displaying Dialogs in IntelliJ Platform\nDESCRIPTION: The Messages class provides methods for showing message boxes, input dialogs, and chooser dialogs. It includes a function for implementing 'Do not show this again' checkbox on messages.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/user_interface_components/misc_swing_components.md#2025-04-06_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nMessages.showCheckboxMessageDialog()\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Project Structure Change Notifications in Java\nDESCRIPTION: This snippet demonstrates how to subscribe to the PROJECT_ROOTS topic on the message bus to receive notifications when project structure changes occur. The ModuleRootListener interface is implemented to handle rootsChanged events, which are triggered when modules, libraries, or dependencies are modified.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/project_model/project.md#2025-04-06_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nproject.getMessageBus().connect().subscribe(\n    ProjectTopics.PROJECT_ROOTS,\n    new ModuleRootListener() {\n      @Override\n      public void rootsChanged(@NotNull ModuleRootEvent event) {\n        // action\n      }\n    });\n```\n\n----------------------------------------\n\nTITLE: Backward Shift Alignment Example in Java\nDESCRIPTION: Example showing how alignment works with backward shift, demonstrating alignment of equals signs in variable declarations.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/custom_language_support/code_formatting.md#2025-04-06_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nint start  = 1;\nint finish = 2;\n```\n\n----------------------------------------\n\nTITLE: Plugin Description with HTML Formatting in XML\nDESCRIPTION: XML configuration for plugin description with HTML formatting elements wrapped in CDATA section, used to display information in the Plugins settings dialog and JetBrains Marketplace.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/plugin_structure/plugin_configuration_file.md#2025-04-06_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<description><![CDATA[\nProvides support for My Framework.\nThe support includes:\n<ul>\n  <li>code completion</li>\n  <li>references</li>\n</ul>\nFor more information visit the\n<a href=\"https://example.com\">project site</a>.\n]]></description>\n```\n\n----------------------------------------\n\nTITLE: XML Structure Example for DOM API Usage\nDESCRIPTION: Sample XML structure used to demonstrate DOM API advantages over direct PSI manipulation.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/frameworks_and_external_apis/xml_dom_api.md#2025-04-06_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<root>\n  <foo>\n    <bar>42</bar>\n    <bar>239</bar>\n  </foo>\n</root>\n```\n\n----------------------------------------\n\nTITLE: Extension Point Definitions in android-editing-metrics.xml\nDESCRIPTION: Defines extension point for code editing metrics listener.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/resources/android_plugin_extension_point_list.md#2025-04-06_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\ncom.android.tools.idea.editing.metrics.codeEditedListener\n```\n\n----------------------------------------\n\nTITLE: Creating Java Test Data File with Simple Language Reference\nDESCRIPTION: Creates a Java file 'RenameTestData.java' in the testData directory containing a Simple Language reference with a caret position for testing.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/writing_tests_for_plugins/rename_test.md#2025-04-06_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\npublic class Test {\n    public static void main(String[] args) {\n        System.out.println(\"simple:website<caret>\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering SpellcheckingStrategy Extension Point in Java\nDESCRIPTION: Register a custom SpellcheckingStrategy implementation in the plugin.xml file using the com.intellij.spellchecker.support extension point.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/custom_language_support/spell_checking.md#2025-04-06_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<extension point=\"com.intellij.spellchecker.support\"/>\n```\n\n----------------------------------------\n\nTITLE: Adding Text Separator to a Group in IntelliJ Plugin\nDESCRIPTION: XML snippet showing how to add a separator with text displayed on it, which can help categorize groups of actions in menus.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/plugin_structure/plugin_configuration_file.md#2025-04-06_snippet_35\n\nLANGUAGE: xml\nCODE:\n```\n<separator text=\"Group By\"/>\n```\n\n----------------------------------------\n\nTITLE: Adding Action to Group\nDESCRIPTION: Example showing how to add an action to an existing action group with positioning\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/plugin_structure/plugin_configuration_file.md#2025-04-06_snippet_22\n\nLANGUAGE: xml\nCODE:\n```\n<add-to-group\n    group-id=\"ToolsMenu\"\n    anchor=\"after\"\n    relative-to-action=\"GenerateJavadoc\"/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Table Cell Validation in Kotlin\nDESCRIPTION: This code snippet shows how to implement real-time validation for table cells in Kotlin. It adds a document listener to a text field used as a cell editor, applies error styling based on the input, and customizes the cell renderer to match the editor's size.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/ui/principles/validation_errors.md#2025-04-06_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nval cellEditor = JTextField()\ncellEditor.putClientProperty(DarculaUIUtil.COMPACT_PROPERTY, true)\ncellEditor.document.addDocumentListener(object : DocumentAdapter() {\n  override fun textChanged(e: DocumentEvent) {\n    val outline =\n      if (cellEditor.text.contains(\".\")) \"error\" else null\n    cellEditor.putClientProperty(\"JComponent.outline\", outline)\n  }\n})\nval firstColumn = table.columnModel.getColumn(0)\nfirstColumn.cellEditor = DefaultCellEditor(cellEditor)\nfirstColumn.cellRenderer = object : DefaultTableCellRenderer() {\n  override fun getPreferredSize(): Dimension {\n    val size = super.preferredSize\n    val editorSize = cellEditor.preferredSize\n    size.height = max(size.height, editorSize.height)\n    return size\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Read Action using runReadAction() in Kotlin\nDESCRIPTION: Demonstrates the use of runReadAction() to perform a read operation in Kotlin. This API is obsolete since 2024.1 and should be replaced with suspending readAction() for newer versions.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/architectural_overview/threading/threading_model.md#2025-04-06_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nval psiFile = runReadAction {\n  // read and return PsiFile\n}\n```\n\n----------------------------------------\n\nTITLE: Initial Java Method with Expression\nDESCRIPTION: Example showing a Java method with an unassigned method chain expression that could benefit from postfix completion.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/postfix_completion.md#2025-04-06_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nvoid confirmOrder(Cart cart) {\n  cart.getDeliveryType().getDeliveryCost()\n}\n```\n\n----------------------------------------\n\nTITLE: Showing Process Details for Long Operations (Markdown/HTML)\nDESCRIPTION: Illustrates how to provide process details for operations lasting longer than 4 seconds, including time left or current step information.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/ui/controls/progress_indicators.md#2025-04-06_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n![](empty_state_details.png){width=576}\n```\n\n----------------------------------------\n\nTITLE: Implementing ConfigurationFactory for IntelliJ Run Configuration\nDESCRIPTION: Creates a factory for producing run configuration instances. This class handles the creation of new configurations and defines their default settings.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/run_configurations_tutorial.md#2025-04-06_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class DemoConfigurationFactory extends ConfigurationFactory {\n  private static final String FACTORY_NAME = \"Demo configuration factory\";\n\n  protected DemoConfigurationFactory(@NotNull ConfigurationType type) {\n    super(type);\n  }\n\n  @Override\n  public @NotNull String getName() {\n    return FACTORY_NAME;\n  }\n\n  @Override\n  public @NotNull RunConfiguration createTemplateConfiguration(@NotNull Project project) {\n    return new DemoRunConfiguration(project, this, \"Demo\");\n  }\n\n  @Override\n  public @NotNull Class<? extends BaseState> getOptionsClass() {\n    return DemoRunConfigurationOptions.class;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RegExp Injection for Java String.matches() Method in XML\nDESCRIPTION: XML configuration that injects RegExp language into the first argument of the String.matches() method in Java. This snippet demonstrates how to define context-specific language injection using element patterns.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/custom_language_support/language_injection.md#2025-04-06_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<injection language=\"RegExp\" injector-id=\"java\">\n  <display-name>String (java.lang)</display-name>\n  ...\n  <place><![CDATA[\n    psiParameter()\n      .ofMethod(0, psiMethod().withName(\"matches\")\n      .withParameters(\"java.lang.String\")\n      .definedInClass(\"java.lang.String\"))\n  ]]></place>\n</injection>\n```\n\n----------------------------------------\n\nTITLE: Plugin Change Notes with HTML Formatting in XML\nDESCRIPTION: XML configuration for plugin change notes with HTML formatting to summarize new features, bugfixes, and changes in the latest version, displayed in the Plugins settings dialog and JetBrains Marketplace.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/plugin_structure/plugin_configuration_file.md#2025-04-06_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<change-notes><![CDATA[\n<h2>New Features</h2>\n<ul>\n  <li>Feature 1</li>\n  <li>Feature 2</li>\n</ul>\n<h2>Bug Fixes</h2>\n<ul>\n  <li>Fixed issue 1</li>\n  <li>Fixed issue 2</li>\n</ul>\n]]></change-notes>\n```\n\n----------------------------------------\n\nTITLE: Theme Provider XML Configuration in plugin.xml\nDESCRIPTION: XML configuration for declaring a theme provider extension in the plugin.xml file. It specifies a unique ID and the path to the theme description JSON file.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/getting_started/theme/theme_structure.md#2025-04-06_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<extensions defaultExtensionNs=\"com.intellij\">\n  <themeProvider\n      id=\"eb9b7461-397b-4b98-a422-224fc0a74564\"\n      path=\"/theme_basics.theme.json\"/>\n</extensions>\n```\n\n----------------------------------------\n\nTITLE: Initializing Extension Point Registration in android-templates.xml\nDESCRIPTION: Registers extension point for providing additional template actions in Android project templates. Used to extend template functionality in Android Studio.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/resources/android_plugin_extension_point_list.md#2025-04-06_snippet_4\n\nLANGUAGE: XML\nCODE:\n```\ncom.android.tools.idea.templates.additionalTemplateActionsProvider\n```\n\n----------------------------------------\n\nTITLE: Resulting Code After Template Expansion\nDESCRIPTION: The final code after the postfix template is expanded, showing the generated variable assignment with an inferred type and suggested variable name.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/postfix_completion.md#2025-04-06_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nvoid confirmOrder(Cart cart) {\n  Money deliveryCost = cart.getDeliveryType().getDeliveryCost();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Annotations for Warnings or Errors in IntelliJ Platform (2020.1+)\nDESCRIPTION: Code snippet showing how to create warning or error annotations in IntelliJ Platform plugins using the new annotation API introduced in version 2020.1. The code also demonstrates adding quick fixes to the annotations.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/custom_language_support/syntax_highlighting_and_error_highlighting.md#2025-04-06_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nholder.newAnnotation(HighlightSeverity.WARNING, \"Invalid code\") // or HighlightSeverity.ERROR\n    .withFix(new MyFix(psiElement))\n    .create();\n```\n\n----------------------------------------\n\nTITLE: Adding Separator Between Actions in a Group in IntelliJ Plugin\nDESCRIPTION: XML snippet showing how to add a separator between actions within a group to visually separate related actions.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/plugin_structure/plugin_configuration_file.md#2025-04-06_snippet_33\n\nLANGUAGE: xml\nCODE:\n```\n<group ...>\n  <action .../>\n  <separator/>\n  <action .../>\n</group>\n```\n\n----------------------------------------\n\nTITLE: Generic DOM Value Interface Definition\nDESCRIPTION: Definition of a generic interface for DOM elements that only have values, supporting both typed and string access.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/frameworks_and_external_apis/xml_dom_api.md#2025-04-06_snippet_8\n\nLANGUAGE: java\nCODE:\n```\ninterface GenericDomValue<T> {\n  T getValue();\n  void setValue(T t);\n\n  @TagValue\n  String getStringValue();\n\n  @TagValue\n  void setStringValue(String s);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Service Interface in Kotlin\nDESCRIPTION: Demonstrates implementing an application-level service interface in Kotlin.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/plugin_structure/plugin_services.md#2025-04-06_snippet_9\n\nLANGUAGE: Kotlin\nCODE:\n```\ninternal class MyAppServiceImpl : MyAppService {\n  override fun doSomething(param: String) {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Showing Progress Bar in Tool Window (Markdown/HTML)\nDESCRIPTION: Demonstrates the use of a progress bar at the top of a tool window when there's no space for a loader in the top right corner.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/ui/controls/progress_indicators.md#2025-04-06_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n![](progress_tool_window.png){width=605}\n```\n\n----------------------------------------\n\nTITLE: Registering NotificationGroup for Balloons in plugin.xml (2020.3+)\nDESCRIPTION: Demonstrates how to register a NotificationGroup in plugin.xml to create balloon notifications. The group is defined with a display type and localized name key.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/user_interface_components/notifications.md#2025-04-06_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<extensions defaultExtensionNs=\"com.intellij\">\n  <notificationGroup id=\"Custom Notification Group\"\n                     displayType=\"BALLOON\"\n                     key=\"notification.group.name\"/>\n</extensions>\n```\n\n----------------------------------------\n\nTITLE: Registering Live Template Macro Extension\nDESCRIPTION: XML configuration to register the custom macro implementation with the IntelliJ Platform using the liveTemplateMacro extension point.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/live_templates/creating_live_template_functions.md#2025-04-06_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<extensions defaultExtensionNs=\"com.intellij\">\n  <liveTemplateMacro\n      implementation=\"org.intellij.sdk.liveTemplates.TitleCaseMacro\"/>\n</extensions>\n```\n\n----------------------------------------\n\nTITLE: Showing Loader in Tree View (Markdown/HTML)\nDESCRIPTION: Illustrates how to display a loader instead of a node icon in a tree view when each node loads independently.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/ui/controls/progress_indicators.md#2025-04-06_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n![](tree_loader_icon.png){width=372}\n```\n\n----------------------------------------\n\nTITLE: Executing Read Action using Application.runReadAction() in Kotlin\nDESCRIPTION: Demonstrates how to use Application.runReadAction() to perform a read operation in Kotlin. This API is considered low-level and should be avoided.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/architectural_overview/threading/threading_model.md#2025-04-06_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval psiFile = ApplicationManager.application.runReadAction {\n  // read and return PsiFile\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Facet Manager in IntelliJ IDEA SDK\nDESCRIPTION: Demonstrates how to use the FacetManager class to create, search, and access the list of facets for a module in an IntelliJ IDEA plugin project.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/project_model/facet.md#2025-04-06_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nFacetManager\n```\n\n----------------------------------------\n\nTITLE: PlantUML Diagram of Disposer Tree Structure\nDESCRIPTION: Visualization of the Disposer's tree structure showing relationships between different disposable objects in the IntelliJ Platform.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/disposers.md#2025-04-06_snippet_1\n\nLANGUAGE: plantuml\nCODE:\n```\n@startuml\n\nskinparam DefaultFontName JetBrains Sans\nskinparam DefaultFontSize 13\nskinparam DefaultTextAlignment center\nhide empty members\nhide circle\n\nrectangle \"Root\\nDisposable\" as root\n\nrectangle \"Application\" as application\nrectangle \"App\\nListener\" as listener\nrectangle \"Dialog\\nWrapper\" as dialogDisposable\nrectangle \"Dialog\\nResource\" as dialogResource\n\nrectangle \"Services of\\nApplication\" as applicationServices\nrectangle \"App\\nService 1\" as appService1\nrectangle \"App\\nService 2\" as appService2\n\nrectangle \"My\\nProject\" as project\nrectangle \"My\\nListener\" as projectListener\nrectangle \"My\\nAlarm\" as projectAlarm\n\nrectangle \"Services of\\nMy Project\" as projectServices\nrectangle \"Project\\nService A\" as projectService1\nrectangle \"Project\\nService B\" as projectService2\n\nroot -- application\nroot -- applicationServices\nroot -- project\nroot -- projectServices\n\napplication -- listener\napplication -- dialogDisposable\ndialogDisposable -- dialogResource\n\napplicationServices -- appService1\napplicationServices -- appService2\n\nproject -- projectListener\nproject -- projectAlarm\n\nprojectServices -- projectService1\nprojectServices -- projectService2\n\n@enduml\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle Dependencies for Java Plugin (Kotlin)\nDESCRIPTION: Gradle configuration in Kotlin DSL to add Java plugin dependency required for PSI literal expression support.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/custom_language_support/annotator.md#2025-04-06_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nintellij {\n  plugins.set(listOf(\"com.intellij.java\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Theme Metadata Provider in plugin.xml\nDESCRIPTION: XML configuration to register a theme metadata file using the com.intellij.themeMetadataProvider extension point.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/themes_metadata.md#2025-04-06_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<idea-plugin>\n  <extensions defaultExtensionNs=\"com.intellij\">\n    <themeMetadataProvider path=\"/META-INF/MyPlugin.themeMetadata.json\"/>\n  </extensions>\n</idea-plugin>\n```\n\n----------------------------------------\n\nTITLE: Disabling Paid Plugin Searchable Options Warning in Gradle Properties\nDESCRIPTION: Demonstrates how to disable the warning for paid plugin searchable options in the gradle.properties file. This feature is relevant for paid plugins that cannot run in headless mode to collect searchable options.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/gradle_intellij_plugin/tools_gradle_intellij_plugin_build_features.md#2025-04-06_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\norg.jetbrains.intellij.buildFeature.paidPluginSearchableOptionsWarning=false\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Framework as Extension Point in XML\nDESCRIPTION: Registers the newly created framework class as an extension point in the plugin.xml configuration file.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/framework.md#2025-04-06_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<extensions defaultExtensionNs=\"com.intellij\">\n  <framework.type\n      implementation=\"org.intellij.sdk.framework.DemoFramework\"/>\n</extensions>\n```\n\n----------------------------------------\n\nTITLE: Checking Module Dependency in Java\nDESCRIPTION: This code snippet shows how to check if one module depends on another using the ModuleManager class.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/project_model/module.md#2025-04-06_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\nboolean isDependent = ModuleManager.getInstance(project).isModuleDependent(module1, module2);\n```\n\n----------------------------------------\n\nTITLE: Declaring Plugin Dependencies with IntelliJ Platform Gradle Plugin 2.x\nDESCRIPTION: Defines dependencies on plugins using helper functions in the dependencies block of build.gradle.kts. Uses bundledPlugin() for bundled plugins and plugin() for non-bundled plugins.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/plugin_structure/plugin_dependencies.md#2025-04-06_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ndependencies {\n  intellijPlatform {\n    bundledPlugin(\"<pluginId>\")\n    plugin(\"<nonBundledPluginId>:<version>\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Formatter Test Method in Java\nDESCRIPTION: Defines a test method 'testFormatter()' in the SimpleCodeInsightTest class. This method configures the test fixture, sets code style settings, formats the file, and compares the result with expected output.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/writing_tests_for_plugins/formatter_test.md#2025-04-06_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Service Retrieval in Java\nDESCRIPTION: Demonstrates how to retrieve application-level and project-level services in Java, including both direct retrieval and static getInstance() wrapper methods.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/plugin_structure/plugin_services.md#2025-04-06_snippet_13\n\nLANGUAGE: java\nCODE:\n```\nMyAppService applicationService =\n    ApplicationManager.getApplication().getService(MyAppService.class);\n\nMyProjectService projectService =\n    project.getService(MyProjectService.class);\n```\n\nLANGUAGE: java\nCODE:\n```\nMyAppService applicationService = MyAppService.getInstance();\n\nMyProjectService projectService = MyProjectService.getInstance(project);\n```\n\n----------------------------------------\n\nTITLE: Defining Module Components in IntelliJ Plugin XML\nDESCRIPTION: Shows the XML structure for defining deprecated module components in an IntelliJ plugin configuration. Module components are contained within the module-components element.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/plugin_structure/plugin_configuration_file.md#2025-04-06_snippet_40\n\nLANGUAGE: XML\nCODE:\n```\n<module-components>\n  <component>\n    <!-- Component definition -->\n  </component>\n</module-components>\n```\n\n----------------------------------------\n\nTITLE: Configuring plugin.xml for Rider Plugin with Dot-Separated ID\nDESCRIPTION: Example of a plugin.xml configuration for a Rider plugin where the plugin ID contains dots. This structure determines the path for custom .DotSettings files in the plugin JAR.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/products/rider/rider.md#2025-04-06_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<idea-plugin>\n  <id>com.example.awesomeplugin</id>\n  <!-- ... -->\n</idea-plugin>\n```\n\n----------------------------------------\n\nTITLE: Adding Separator to a Specific Group in IntelliJ Plugin\nDESCRIPTION: XML snippet demonstrating how to add a separator directly to a specific group using the add-to-group element and specifying its position.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/plugin_structure/plugin_configuration_file.md#2025-04-06_snippet_34\n\nLANGUAGE: xml\nCODE:\n```\n<actions>\n  <separator>\n    <add-to-group\n        group-id=\"com.example.MyGroup\"\n        anchor=\"first\"/>\n  </separator>\n</group>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Serialization with JDOM Element in Java\nDESCRIPTION: Demonstrates how to use org.jdom.Element as the state class for custom serialization when the state doesn't map cleanly to a JavaBean. This approach allows for building an XML element with arbitrary structure.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/persisting_state_of_components.md#2025-04-06_snippet_7\n\nLANGUAGE: Java\nCODE:\n```\npublic class YourComponent implements PersistentStateComponent<Element> {\n    @Override\n    public Element getState() {\n        Element element = new Element(\"root\");\n        // Add custom XML structure\n        return element;\n    }\n\n    @Override\n    public void loadState(Element state) {\n        // Custom deserialization logic\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Shortcut to Got It Tooltip in Java\nDESCRIPTION: This Java snippet shows how to add a shortcut to a Got It tooltip. It creates a tooltip with dynamic text that includes a shortcut for a specific action using a lambda expression.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/ui/controls/got_it_tooltip.md#2025-04-06_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nnew GotItTooltip(\n    TOOLTIP_ID,\n    gotItTextBuilder -> {\n        String shortcut = gotItTextBuilder.shortcut(\"My.Action\");\n        return \"You can rename usages \" + shortcut;\n    },\n    parentDisposable\n);\n```\n\n----------------------------------------\n\nTITLE: Custom Dialog Builder for File Templates\nDESCRIPTION: Example of building a custom dialog with multiple file template types for different entity types.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/file_and_code_templates/using_file_templates.md#2025-04-06_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@Override\nprotected void buildDialog(Project project, PsiDirectory directory,\n    CreateFileFromTemplateDialog.Builder builder) {\n  builder\n    .setTitle(\"My File\")\n    .addKind(\"Class\", MyIcons.CLASS_ICON, \"My Class\")\n    .addKind(\"Record\", MyIcons.RECORD_ICON, \"My Record\")\n    .addKind(\"Enum\", MyIcons.ENUM_ICON, \"My Enum\");\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Table Definition - Action Component Properties\nDESCRIPTION: HTML table defining the properties available for Action-related components like AnAction and ActionToolbar.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/ide_tooling/internal_actions/internal_ui_inspector.md#2025-04-06_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n| Type                                | Properties                                                                                                                                                                                                                                                          |\n|-------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| [`AnAction`](action_system.md)      | <p><control>Action</control> - [`AnAction`](%gh-ic%/platform/editor-ui-api/src/com/intellij/openapi/actionSystem/AnAction.java) implementation</p><p><control>Action ID</control> - Action `id`</p><p><control>Action Plugin ID</control> - contributing plugin</p> |\n| [`ActionToolbar`](action_system.md) | <p><control>Toolbar Group</control> - Action Group ID</p><p><control>All Toolbar Groups</control> - contained Action Group IDs</p><p><control>Target component</control> - `ActionToolbar.setTargetComponent()`</p>                                                 |\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Module Builder Class\nDESCRIPTION: Initial implementation of a custom module builder class extending ModuleBuilder with empty setup method.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/project_wizard/adding_new_steps.md#2025-04-06_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class DemoModuleWizardStep extends ModuleBuilder {\n  public void setupRootModel(ModifiableRootModel modifiableRootModel)\n      throws ConfigurationException {\n\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Help Text for Control Groups in Kotlin UI DSL\nDESCRIPTION: Example of adding help text to a group of related controls using Panel.group() in Kotlin UI DSL. The code demonstrates how to create bordered sections with titles and explanatory text.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/ui/controls/inline_help_text.md#2025-04-06_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\npanel {\n  group(\"Build and Run\") {\n    row(\"Build and run with:\") {\n      comboBox(listOf(\"IntelliJ IDEA\", \"Gradle\"))\n    }\n    row(\"Run tests with:\") {\n      comboBox(listOf(\"IntelliJ IDEA\", \"Gradle\"))\n    }\n    row {\n      comment(\"\"\"\n        <p>By default IntelliJ IDEA uses Gradle to build the project\n        and run the tasks.</p>\n        <p>In a pure Java/Kotlin project, building and running\n        by means of IDE might be faster, thanks to optimizations.\n        Note, that the IDE doesn't support all Gradle plugins and\n        the project might not be built correctly with some of them.</p>\n        \"\"\".trimIndent()\n      )\n    }\n  }\n  group(\"Gradle\") {\n    row(\"Use Gradle from:\") {\n      comboBox(gradleModel)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle Dependencies for PhpStorm Plugin with IntelliJ Platform Gradle Plugin 2.x\nDESCRIPTION: Basic Gradle build script setup for PhpStorm plugin development using the IntelliJ Platform Gradle Plugin 2.x. It demonstrates how to define repository dependencies and specify required PhpStorm and PHP plugin dependencies.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/products/phpstorm/phpstorm.md#2025-04-06_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nrepositories {\n  mavenCentral()\n  intellijPlatform {\n    defaultRepositories()\n  }\n}\n\ndependencies {\n  intellijPlatform {\n    phpstorm(\"<versionNumber>\")\n    bundledPlugin(\"com.jetbrains.php\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Module for File in Java\nDESCRIPTION: This snippet demonstrates how to find the module to which a specified file belongs using the ModuleUtil class.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/project_model/module.md#2025-04-06_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\nString pathToFile = \"/Users/john/plugins/myPlugin/src/MyAction.java\";\nVirtualFile virtualFile = LocalFileSystem.getInstance().findFileByPath(pathToFile);\nModule module = ModuleUtil.findModuleForFile(virtualFile, myProject);\nString moduleName = module == null ? \"Module not found\" : module.getName();\n```\n\n----------------------------------------\n\nTITLE: Declaring Extension Points in plugin.xml\nDESCRIPTION: Example of declaring interface and bean extension points in the plugin.xml file.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/plugin_structure/plugin_extension_points.md#2025-04-06_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<idea-plugin>\n  <id>my.plugin</id>\n\n  <extensionPoints>\n    <extensionPoint\n        name=\"myExtensionPoint1\"\n        interface=\"com.example.MyInterface\"/>\n\n    <extensionPoint\n        name=\"myExtensionPoint2\"\n        beanClass=\"com.example.MyBeanClass\"/>\n  </extensionPoints>\n\n</idea-plugin>\n```\n\n----------------------------------------\n\nTITLE: Implementing Inline Help Text for Form Fields in Kotlin UI DSL\nDESCRIPTION: Example of adding short help texts to the right of form fields using Kotlin UI DSL. The code shows how to attach comments to combo boxes and text fields with relevant context information.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/ui/controls/inline_help_text.md#2025-04-06_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\npanel {\n  row(\"Plugin update policy:\") {\n      comboBox(listOf(\"Default\", \"Non default\"))\n      comment(\"Ignore by Maven 3+\")\n  }\n  row(\"Thread count:\") {\n      textField()\n      comment(\"-T option\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: FailureLevel Enum Definition - IntelliJ Platform Gradle Plugin\nDESCRIPTION: Enum class that defines different levels of failures that can occur during plugin verification. Used by the verifyPlugin task to determine which issues should trigger build failures.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_types.md#2025-04-06_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Adding Action Reference to a Group in IntelliJ Plugin\nDESCRIPTION: XML snippet showing how to add a reference to an existing action into a group. This allows reusing actions defined elsewhere without duplicating their definition.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/plugin_structure/plugin_configuration_file.md#2025-04-06_snippet_31\n\nLANGUAGE: xml\nCODE:\n```\n<group ...>\n  <reference ref=\"EditorCopy\"/>\n</group>\n```\n\n----------------------------------------\n\nTITLE: Registering Child Disposable with Parent\nDESCRIPTION: Example showing how to register a child disposable with a parent disposable using the Disposer API.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/disposers.md#2025-04-06_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nDisposer.register(parentDisposable, childDisposable);\n```\n\n----------------------------------------\n\nTITLE: Accessing Last Parameter in PHP Parameter List\nDESCRIPTION: Demonstrates the recommended way to access the last parameter in a parameter list after the PHP 8 change allowing trailing commas. This approach is safer as it accounts for the possibility of a trailing comma being the last element.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/products/phpstorm/php_open_api_breaking_changes_203.md#2025-04-06_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nParameterList.getParameter(int)\n```\n\n----------------------------------------\n\nTITLE: Registering Plugin Action with Explicit Text\nDESCRIPTION: Example of registering an action with explicit text, description and icon attributes\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/plugin_structure/plugin_configuration_file.md#2025-04-06_snippet_21\n\nLANGUAGE: xml\nCODE:\n```\n<action\n    id=\"com.example.myframeworksupport.MyAction\"\n    class=\"com.example.impl.MyAction\"\n    text=\"Do Action\"\n    description=\"Do something with the code\"\n    icon=\"AllIcons.Actions.GC\">\n  <!-- action children elements -->\n</action>\n```\n\n----------------------------------------\n\nTITLE: Creating External Links in Kotlin\nDESCRIPTION: Demonstrates how to create an external link with an arrow icon in Kotlin. The link will open the specified URL in a browser when clicked.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/ui/controls/link.md#2025-04-06_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nval externalLink = ActionLink(\"External link\") {\n  BrowserUtil.browse(\"https://www.jetbrains.com\")\n}.apply {\n  setExternalLinkIcon()\n}\n```\n\n----------------------------------------\n\nTITLE: Renaming a Module with Workspace Model in Kotlin\nDESCRIPTION: Shows how to change a module's name using the Workspace Model update mechanism. It finds the module entity by ID and modifies its name property within a write action.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/workspace_model/workspace_model_usages.md#2025-04-06_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval workspaceModel = WorkspaceModel.getInstance(project)\nval moduleEntity: ModuleEntity =\n  workspaceModel.currentSnapshot.resolve(ModuleId(moduleName))\nwriteAction {\n  workspaceModel.update(\"Change module name\") { builder ->\n    builder.modifyModuleEntity(moduleEntity) {\n      this.name = newModuleName\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Task with PluginAware Interface in Groovy\nDESCRIPTION: Example showing how to create a custom Gradle task that implements the PluginAware interface to access plugin information in Groovy. The task retrieves the plugin name from the plugin.xml file and writes it to a text file.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_task_awares.md#2025-04-06_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\nimport org.jetbrains.intellij.platform.gradle.tasks.aware.PluginAware\n\nabstract class RetrievePluginNameTask extends DefaultTask implements PluginAware {}\n\ntasks.register('retrievePluginName', RetrievePluginNameTask) {\n  def outputFile = layout.buildDirectory.file(\"pluginName.txt\")\n\n  doLast {\n    outputFile.get().asFile.writeText(pluginXml.parse { name }.get())\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Documentation Provider in IntelliJ Custom Language Plugin\nDESCRIPTION: Test method that verifies documentation generation for Simple Language properties. Uses DocumentationManager to find target element and retrieve documentation string, then compares against expected output. Requires test data files DocumentationTestData.java and DocumentationTestData.simple.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/writing_tests_for_plugins/documentation_test.md#2025-04-06_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic void testDocumentation() {\n    myFixture.configureByFiles(\"DocumentationTestData.java\", \"DocumentationTestData.simple\");\n    PsiElement element = myFixture.getElementAtCaret();\n    DocumentationManager.getInstance(getProject())\n            .setDocumentationIsShown(true);\n    PsiElement originalElement = DocumentationManager.getInstance(getProject())\n            .findTargetElement(myFixture.getEditor(), element.getContainingFile(), element);\n    assertNotNull(originalElement);\n    DocumentationProvider provider = DocumentationManager.getProviderFromElement(originalElement);\n    String documentationString = provider.generateDoc(originalElement, null);\n    assertSameLinesWithFile(getTestDataPath() + \"/DocumentationTestData.expected.html\", documentationString);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Live Template Text Structure\nDESCRIPTION: Basic text structure for a Markdown link reference template that defines two variables - TEXT and LINK with an END marker.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/live_templates/providing_live_templates.md#2025-04-06_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n[$TEXT$]($LINK$)$END$\n```\n\n----------------------------------------\n\nTITLE: Checking for Nullsafe Operator in PHP Member Reference\nDESCRIPTION: Shows the new structure of a MemberReference PSI element that may now include the nullsafe operator (?->) between the class reference and the arrow operator.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/products/phpstorm/php_open_api_breaking_changes_203.md#2025-04-06_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\ncom.jetbrains.php.lang.psi.elements.MemberReference\n```\n\n----------------------------------------\n\nTITLE: Finding Content and Source Roots for Files in Java\nDESCRIPTION: This code demonstrates how to determine which content root and source root a specific file or directory belongs to in a project. It uses the ProjectFileIndex methods to retrieve the appropriate roots for a given VirtualFile.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/project_model/project.md#2025-04-06_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nVirtualFile moduleContentRoot = ProjectRootManager.getInstance(project)\n    .getFileIndex().getContentRootForFile(virtualFileOrDirectory);\nVirtualFile moduleSourceRoot = ProjectRootManager.getInstance(project)\n    .getFileIndex().getSourceRootForFile(virtualFileOrDirectory);\n```\n\n----------------------------------------\n\nTITLE: Specifying Plugin Compatibility for Specific Build Number in XML\nDESCRIPTION: This XML snippet demonstrates how to specify plugin compatibility for IntelliJ-based IDEs starting from a specific build number (2021.3.3 in this case) using the idea-version element in plugin.xml.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/getting_started/build_number_ranges.md#2025-04-06_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<idea-version since-build=\"213.7172.25\"/>\n```\n\n----------------------------------------\n\nTITLE: Executing Read Action in Java\nDESCRIPTION: Example of using ReadAction.compute() to perform a read operation on a PsiFile in Java. This method ensures the operation is executed under a read lock.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/architectural_overview/threading/threading_model.md#2025-04-06_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nPsiFile psiFile = ReadAction.compute(() -> {\n  // read and return PsiFile\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Stimulus Context Provider\nDESCRIPTION: Kotlin implementation of StimulusContextProvider that checks for JavaScript imports and caches results\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/custom_language_support/websymbols_context.md#2025-04-06_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass StimulusContextProvider : WebSymbolsContextProvider {\n  override fun isEnabled(file: PsiFile): Boolean {\n    if (file is HtmlCompatibleFile) {\n      return CachedValuesManager.getCachedValue(file) {\n        CachedValueProvider.Result.create(hasStimulusImport(file), file)\n      }\n    }\n    return super.isEnabled(file)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Plugin Version in XML\nDESCRIPTION: Example of setting the version number for a plugin using the <version> element in plugin.xml. Version must follow semantic versioning.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/plugin_structure/plugin_configuration_file.md#2025-04-06_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<version>1.3.18</version>\n```\n\n----------------------------------------\n\nTITLE: Registering File-Based Index Extension Point\nDESCRIPTION: Shows how to register a file-based index extension point in the plugin.xml file.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/indexing_and_psi_stubs/file_based_indexes.md#2025-04-06_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<include from=\"snippets.topic\" element-id=\"ep\"><var name=\"ep\" value=\"com.intellij.fileBasedIndex\"/></include>\n```\n\n----------------------------------------\n\nTITLE: Project Settings Text Examples in Markdown\nDESCRIPTION: Example table showing improvements in project settings terminology and phrasing, emphasizing clearer and more concise language.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/ui/text/writing_short.md#2025-04-06_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<table>\n<tr>\n<td width=\"30%\"> Before </td>\n<td width=\"30%\"> After </td>\n<td width=\"40%\"> Explanation </td>\n</tr>\n<tr>\n    <td> Project name Project SDK Project language level </td>\n    <td> Project name SDK Language level </td>\n    <td> \"Project\" can be left only for the first field. All others will be understood as project settings because they appear in the same group of UI elements. </td>\n</tr>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle Build Script for PyCharm Plugin Development using IntelliJ Platform Gradle Plugin 2.x\nDESCRIPTION: Minimal Gradle Kotlin DSL setup for PyCharm plugin development using the IntelliJ Platform Gradle Plugin 2.x. It configures repositories and dependencies including the PyCharm Community platform and the required PythonCore bundled plugin.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/products/pycharm/pycharm.md#2025-04-06_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nrepositories {\n  mavenCentral()\n  intellijPlatform {\n    defaultRepositories()\n  }\n}\n\ndependencies {\n  intellijPlatform {\n    pycharmCommunity(\"<versionNumber>\")\n    bundledPlugin(\"PythonCore\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Loader in Search Field (Markdown/HTML)\nDESCRIPTION: Demonstrates the placement of a loader in a search field to show that a search is being performed.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/ui/controls/progress_indicators.md#2025-04-06_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n![](search_field_loader.png){width=262}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Arbitrary Data from External Mapping in Kotlin\nDESCRIPTION: Shows how to retrieve custom data that has been associated with a workspace entity. This example demonstrates how to access the immutable version of an external mapping and get the data associated with a specific ModuleEntity.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/workspace_model/workspace_model_entity_read.md#2025-04-06_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\n// Сlass whose instances we want to store in the index\ndata class Foo(val someData: String)\n\n// Unique identifier of the concrete mapping\nval externalMappingKey = ExternalMappingKey.create<Foo>(\"intellij.foo\")\n\nval entityStorage = WorkspaceModel.getInstance(project).currentSnapshot\n// Immutable instance of specific mapping\nval fooExternalMapping = entityStorage\n  .getExternalMapping(externalMappingKey)\n\nval moduleEntity = entityStorage\n  .entities(ModuleEntity::class.java).single()\n// Getting the data associated with specific `ModuleEntity`\nval foo = fooExternalMapping.getDataByEntity(moduleEntity)\n```\n\n----------------------------------------\n\nTITLE: Checking Text Selection in Editor\nDESCRIPTION: Java code demonstrating how to check if text is selected in the editor and enable/disable action visibility accordingly.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/editor_basics/working_with_text.md#2025-04-06_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class EditorIllustrationAction extends AnAction {\n  @Override\n  public void update(@NotNull AnActionEvent event) {\n    // Get required data keys\n    Project project = event.getProject();\n    Editor editor = event.getData(CommonDataKeys.EDITOR);\n\n    // Set visibility only in the case of\n    // existing project editor, and selection\n    event.getPresentation().setEnabledAndVisible(project != null\n        && editor != null && editor.getSelectionModel().hasSelection());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Write Action using WriteAction.run() in Kotlin\nDESCRIPTION: Demonstrates how to use WriteAction.run() to perform a write operation in Kotlin.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/architectural_overview/threading/threading_model.md#2025-04-06_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nWriteAction.run<Throwable> {\n  // write data\n}\n```\n\n----------------------------------------\n\nTITLE: Binding Checkbox with Custom Getter/Setter in Kotlin UI DSL\nDESCRIPTION: Shows how to bind a checkbox with a custom getter and setter for more complex property mappings in Kotlin UI DSL.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/user_interface_components/kotlin_ui_dsl.md#2025-04-06_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\ncheckBox(\n  \"Show file extensions in editor tabs\",\n  { !uiSettings.hideKnownExtensionInTabs },\n  { uiSettings.hideKnownExtensionInTabs = !it })\n```\n\n----------------------------------------\n\nTITLE: Defining Vue Component Props in Web Types\nDESCRIPTION: Shows how to define props for Vue components in Web Types, including name, description, type, and default value properties.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/custom_language_support/websymbols_web_types.md#2025-04-06_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"props\": [{\n      \"name\": \"appear\",\n      \"description\": \"Whether to apply transition on initial render.\",\n      \"type\": \"boolean\",\n      \"default\": \"false\"\n    }]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ComboBox with Browse Button in Kotlin\nDESCRIPTION: Creates a combo box with an extendable text field that includes a browse button. The implementation uses ExtendableTextComponent.Extension to add a browse icon with hover state and click handler.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/ui/controls/built_in_button.md#2025-04-06_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nval browseExtension = ExtendableTextComponent.Extension.create(\n    AllIcons.General.OpenDisk,\n    AllIcons.General.OpenDiskHover,\n    \"Open file\",\n    { System.out.println(\"Browse file clicked\") }\n)\nval extComboBox = ComboBox<String>(STRING_VALUES)\nextComboBox.setEditable(true)\nextComboBox.setEditor(object : BasicComboBoxEditor() {\n  override fun createEditorComponent(): JTextField {\n    val ecbEditor = ExtendableTextField()\n    ecbEditor.addExtension(browseExtension)\n    ecbEditor.setBorder(null)\n    return ecbEditor\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Registering Module Type Extension in plugin.xml\nDESCRIPTION: XML configuration to register a new module type extension with the IntelliJ Platform. Defines the module type ID and implementation class.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/project_wizard/module_types.md#2025-04-06_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<extensions defaultExtensionNs=\"com.intellij\">\n  <moduleType\n      id=\"DEMO_MODULE_TYPE\"\n      implementationClass=\"org.intellij.sdk.module.DemoModuleType\"/>\n</extensions>\n```\n\n----------------------------------------\n\nTITLE: Run Configuration Class Diagram in PlantUML\nDESCRIPTION: UML diagram showing the relationships between key run configuration classes including RunProfile, ConfigurationType, ConfigurationFactory, RunConfiguration, and SettingsEditor.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/execution/run_configurations.md#2025-04-06_snippet_0\n\nLANGUAGE: plantuml\nCODE:\n```\n@startuml\n\nskinparam DefaultFontName JetBrains Sans\nskinparam DefaultFontSize 14\nhide empty members\nhide circle\n\ninterface RunProfile\ninterface ConfigurationType\nabstract class ConfigurationFactory\ninterface RunConfiguration\nabstract class SettingsEditor\n\n\nConfigurationType *-- \"*\" ConfigurationFactory\nConfigurationFactory --> RunConfiguration: creates\nRunConfiguration o-- \"0..*\" SettingsEditor\nRunConfiguration -l|> RunProfile\n\n@enduml\n```\n\n----------------------------------------\n\nTITLE: Implementing a Service Interface in Java\nDESCRIPTION: Demonstrates implementing an application-level service interface in Java. This is the concrete implementation that will be instantiated by the platform.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/plugin_structure/plugin_services.md#2025-04-06_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\nfinal class MyAppServiceImpl implements MyAppService {\n  @Override\n  public void doSomething(String param) {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Plugin Compatibility for Any 213 Branch Version in XML\nDESCRIPTION: This XML snippet shows how to specify plugin compatibility for any 2021.3.x version of IntelliJ-based IDEs using the idea-version element in plugin.xml.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/getting_started/build_number_ranges.md#2025-04-06_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<idea-version since-build=\"213\" until-build=\"213.*\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle for GoLand IDE (Groovy)\nDESCRIPTION: Gradle configuration for targeting GoLand IDE using the Gradle IntelliJ Plugin 1.x, written in Groovy. It sets the IntelliJ IDEA version, specifies the GO platform type, and adds a dependency on the Go plugin.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/products/goland/goland.md#2025-04-06_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\nintellij {\n  version = '2020.3'\n  type = 'GO'\n\n  // required if Go language API is needed:\n  plugins = ['org.jetbrains.plugins.go']\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Titled Separator in Kotlin UI DSL\nDESCRIPTION: Illustrates how to add a titled separator with nested controls using the Kotlin UI DSL.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/user_interface_components/kotlin_ui_dsl.md#2025-04-06_snippet_19\n\nLANGUAGE: kotlin\nCODE:\n```\ntitledRow(\"Appearance\") {\n  row { checkBox(...) }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Combo Box Editability in IntelliJ Platform\nDESCRIPTION: Code snippet demonstrating how to make a ComboBox component editable, allowing users to enter custom values in addition to selecting from predefined options.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/ui/controls/combo_box.md#2025-04-06_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\ncomboBox.setEditable(true);\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle Dependencies for GoLand Plugin (Kotlin)\nDESCRIPTION: Minimum build.gradle.kts setup for a GoLand plugin project using the IntelliJ Platform Gradle Plugin 2.x. It defines dependencies on GoLand and the bundled Go plugin.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/products/goland/goland.md#2025-04-06_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nrepositories {\n  mavenCentral()\n  intellijPlatform {\n    defaultRepositories()\n  }\n}\n\ndependencies {\n  intellijPlatform {\n    goland(\"<versionNumber>\")\n    bundledPlugin(\"org.jetbrains.plugins.go\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Spinner in Kotlin UI DSL\nDESCRIPTION: Shows how to add a spinner with specified value range and step in the Kotlin UI DSL.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/user_interface_components/kotlin_ui_dsl.md#2025-04-06_snippet_16\n\nLANGUAGE: kotlin\nCODE:\n```\nspinner(retypeOptions::retypeDelay, minValue = 0, maxValue = 5000, step = 50)\n```\n\n----------------------------------------\n\nTITLE: Declaring Dependencies in Multi-Module Project with Kotlin\nDESCRIPTION: Configures project dependencies in a multi-module Gradle project using Kotlin DSL. Shows both standard implementation dependency and the special instrumentedJar configuration needed for proper code instrumentation.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/gradle_intellij_plugin/tools_gradle_intellij_plugin.md#2025-04-06_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\ndependencies {\n  implementation(project(\":shared\"))\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndependencies {\n  implementation(project(\":shared\", \"instrumentedJar\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Registering AbstractVcs Implementation in plugin.xml\nDESCRIPTION: This XML snippet shows how to register an AbstractVcs implementation in the plugin.xml file. It uses the com.intellij.vcs extension point to define a new VCS with a unique name and implementation class.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/vcs_integration_for_plugins.md#2025-04-06_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<idea-plugin>\n  ...\n  <extensions defaultExtensionNs=\"com.intellij\">\n    <vcs name=\"svn\" vcsClass=\"org.jetbrains.idea.svn.SvnVcs\"/>\n  </extensions>\n</idea-plugin>\n```\n\n----------------------------------------\n\nTITLE: Implementing Logging in Kotlin\nDESCRIPTION: Demonstrates logging implementation in Kotlin using dedicated logger instance and the convenience method thisLogger() for exception reporting.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/ide_infrastructure.md#2025-04-06_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nimport com.intellij.openapi.diagnostic.logger\n\nprivate val LOG = logger<MyClass>()\n\nclass MyClass {\n  fun someMethod() {\n    LOG.info(\"someMethod() was called\")\n  }\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ntry {\n  // some code\n} catch (e: Throwable) {\n  thisLogger().error(\"some code failed\", e)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin Verification in Kotlin\nDESCRIPTION: Example showing how to configure plugin verification settings including IDE selection, local IDE paths, and recommended IDE configurations using Kotlin DSL.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_extension.md#2025-04-06_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\nimport org.jetbrains.intellij.platform.gradle.IntelliJPlatformType\nimport org.jetbrains.intellij.platform.gradle.models.ProductRelease\n\nintellij Platform {\n  // ...\n\n  pluginVerification {\n    // ...\n\n    ides {\n      ide(IntelliJPlatformType.RustRover, \"2023.3\")\n      local(file(\"/path/to/ide/\"))\n      recommended()\n      select {\n        types = listOf(IntelliJPlatformType.PhpStorm)\n        channels = listOf(ProductRelease.Channel.RELEASE)\n        sinceBuild = \"232\"\n        untilBuild = \"241.*\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Link with Click Handler in Kotlin UI DSL\nDESCRIPTION: Demonstrates how to add a link with a click handler using the Kotlin UI DSL.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/user_interface_components/kotlin_ui_dsl.md#2025-04-06_snippet_17\n\nLANGUAGE: kotlin\nCODE:\n```\nlink(\"Forgot password?\") {\n  // handle click, e.g. showing dialog\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DataGrip Extension Points in XML\nDESCRIPTION: Example of how DataGrip extension points are defined in XML configuration files. This snippet shows the structure for the 'com.intellij.database.configValidator' extension point.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/resources/data_grip_extension_point_list.md#2025-04-06_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<extensions defaultExtensionNs=\"com.intellij\">\n  <database.configValidator implementation=\"com.example.MyDatabaseConfigValidator\"/>\n</extensions>\n```\n\n----------------------------------------\n\nTITLE: Enabling Control Based on Other Controls in Kotlin UI DSL\nDESCRIPTION: Demonstrates how to enable or disable a control based on the state of other controls using the enableIf method in the Kotlin UI DSL.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/user_interface_components/kotlin_ui_dsl.md#2025-04-06_snippet_22\n\nLANGUAGE: kotlin\nCODE:\n```\ncheckBox(\"Show tabs in single row\", uiSettings::scrollTabLayoutInEditor)\n  .enableIf(myEditorTabPlacement.selectedValueIs(SwingConstants.TOP))\n```\n\n----------------------------------------\n\nTITLE: Implementing DemoModuleBuilder for Module Construction\nDESCRIPTION: Java class extending ModuleBuilder to handle the construction and setup of the custom module type. Implements necessary methods for module creation and configuration.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/project_wizard/module_types.md#2025-04-06_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n```java\n{src=\"module/src/main/java/org/intellij/sdk/module/DemoModuleBuilder.java\" include-symbol=\"DemoModuleBuilder\"}\n```\n```\n\n----------------------------------------\n\nTITLE: Referencing Icons in Plugin XML Configuration\nDESCRIPTION: Shows how to reference icons in plugin.xml using both direct file paths and icon constants from holder classes. Includes examples for actions and tool windows.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/icons.md#2025-04-06_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<actions>\n  <action icon=\"/icons/myAction.svg\" ... />\n</actions>\n\n<extensions defaultExtensionNs=\"com.intellij\">\n  <toolWindow icon=\"/icons/myToolWindow.svg\" ... />\n</extensions>\n```\n\n----------------------------------------\n\nTITLE: Comparing Test Data Comment Lines\nDESCRIPTION: Example showing the difference between regular test data comment line and one that enables preview testing in LightQuickFixTestCase.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/code_intentions_preview.md#2025-04-06_snippet_0\n\nLANGUAGE: Plain Text\nCODE:\n```\n// \"Replace Arrays.asList().stream() with Stream.of()\" \"true\"\n```\n\nLANGUAGE: Plain Text\nCODE:\n```\n// \"Replace Arrays.asList().stream() with Stream.of()\" \"true-preview\"\n```\n\n----------------------------------------\n\nTITLE: Searching for Library by Root Type and URL with Workspace Model in Kotlin\nDESCRIPTION: Demonstrates how to search for libraries that contain a specific URL as a source root. It uses the VirtualFileUrlIndex to find entities by URL and filters for LibraryEntity instances.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/workspace_model/workspace_model_usages.md#2025-04-06_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nval workspaceModel = WorkspaceModel.getInstance(project)\nval virtualFileUrlManager = workspaceModel.getVirtualFileUrlManager()\n// URL that we will look for in library entities\nval virtualFileUrl = virtualFileUrlManager\n  .getOrCreateFromUrl(\"file://foo/bar\")\nworkspaceModel.currentSnapshot.getVirtualFileUrlIndex()\n  .findEntitiesByUrl(virtualFileUrl).filterIsInstance<LibraryEntity>().filter {\n    it.roots.any {\n      it.url == virtualFileUrl &&\n              it.type == LibraryRootTypeId.SOURCES\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle Build Script for Android Studio Plugin (Kotlin - Legacy)\nDESCRIPTION: Shows how to configure the Gradle build script using the Gradle IntelliJ Plugin 1.x for an Android Studio plugin project. It sets the IntelliJ Platform version, specifies plugin dependencies, and configures the IDE development instance.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/products/androidstudio/android_studio.md#2025-04-06_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nintellij {\n  version.set(\"191.8026.42\")\n  type.set(\"IC\")\n  plugins.set(listOf(\"org.jetbrains.android\"))\n}\n\ntasks {\n  runIde {\n    ideDir.set(file(\"/Applications/Android Studio.app/Contents\"))\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: UI Layout Configuration for Cell Sizing\nDESCRIPTION: Configuration for setting minimum and maximum cell sizes in a two-cell layout, using CCFlags.growX and CCFlags.pushX flags.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/user_interface_components/kotlin_ui_dsl.md#2025-04-06_snippet_24\n\nLANGUAGE: kotlin\nCODE:\n```\nCCFlags.growX and CCFlags.pushX\n```\n\n----------------------------------------\n\nTITLE: Verifying Plugin Signature Using CLI Tool\nDESCRIPTION: This bash command demonstrates how to use the Marketplace ZIP Signer CLI tool to verify the signature of a signed plugin ZIP file. It requires the input signed ZIP and the certificate file.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/plugin_signing.md#2025-04-06_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\njava -jar marketplace-zip-signer-cli.jar verify\\\n  -in \"signed.zip\"\\\n  -cert \"/path/to/chain.crt\"\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Basic Java References with Method Declaration\nDESCRIPTION: A simple Java method example showing five references: String, System, out, println, and the parameter message. References can be resolved to their corresponding declarations.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/architectural_overview/psi_references.md#2025-04-06_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic void hello(String message) {\n  System.out.println(message);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring IntelliJ Extension in Groovy build script\nDESCRIPTION: Sets up the IntelliJ extension for the Gradle IntelliJ Plugin using Groovy DSL. Configures the IntelliJ Platform version, type (Ultimate Edition), and PHP plugin dependency.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/gradle_intellij_plugin/tools_gradle_intellij_plugin.md#2025-04-06_snippet_7\n\nLANGUAGE: groovy\nCODE:\n```\nintellij {\n  version = \"2022.1.1\"\n  type = \"IU\"\n  plugins = [\"com.jetbrains.php:221.5787.21\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Multiple Carets in IntelliJ Platform (Java)\nDESCRIPTION: Core functionality for accessing and manipulating multiple carets is available through the CaretModel interface. This snippet shows the method for running an operation on each caret.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/multiple_carets.md#2025-04-06_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nCaretModel.runForEachCaret()\n```\n\n----------------------------------------\n\nTITLE: Implementing Find Usages Test Method in Java\nDESCRIPTION: Defines a test method 'testFindUsages()' in the SimpleCodeInsightTest class. This method verifies that the find usage functionality correctly identifies the 'key with spaces' across different file types.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/writing_tests_for_plugins/find_usages_test.md#2025-04-06_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic void testFindUsages() {\n    // Define the expected usage\n    Collection<UsageInfo> usages = myFixture.testFindUsages(\"FindUsagesTestData.simple\", \"FindUsagesTestData.java\");\n    // Verify the correct usage is found\n    assertEquals(1, usages.size());\n}\n\n```\n\n----------------------------------------\n\nTITLE: Registering Template Action in XML\nDESCRIPTION: Shows how to register a custom file template action in the plugin.xml configuration file.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/file_and_code_templates/using_file_templates.md#2025-04-06_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<actions>\n  <action id=\"Create.MyClass\" class=\"com.example.CreateMyClassAction\" icon=\"MyIcons.CLASS_ICON\">\n    <add-to-group group-id=\"NewGroup\"/>\n  </action>\n</actions>\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Panel with Text Field in Kotlin UI DSL\nDESCRIPTION: Demonstrates how to create a simple panel with a labeled text field using Kotlin UI DSL.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/user_interface_components/kotlin_ui_dsl_version_2.md#2025-04-06_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\npanel {\n  row(\"Enter value:\") {\n    textField()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing AutoPopupController Method in IntelliJ Platform 2019.3\nDESCRIPTION: The 'runTransactionWithEverythingCommitted' method in 'AutoPopupController' has been removed. Users should use the equivalent method in 'AutoPopupControllerImpl' instead.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/reference_guide/api_changes_list_2019.md#2025-04-06_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\ncom.intellij.codeInsight.AutoPopupController.runTransactionWithEverythingCommitted(Project, Runnable)\n```\n\n----------------------------------------\n\nTITLE: Aligning Components to Right in Kotlin UI DSL\nDESCRIPTION: Shows how to align components to the right side of a grid row using the right method in Kotlin UI DSL.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/user_interface_components/kotlin_ui_dsl.md#2025-04-06_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nrow {\n  rememberCheckBox()\n  right {\n    link(\"Forgot password\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Module Type for Wizard Step\nDESCRIPTION: Implementation adding module type definition to the custom module builder, specifying EMPTY type.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/project_wizard/adding_new_steps.md#2025-04-06_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class DemoModuleWizardStep extends ModuleBuilder {\n  public void setupRootModel(ModifiableRootModel modifiableRootModel)\n      throws ConfigurationException {\n\n  }\n\n  public ModuleType getModuleType() {\n    return ModuleType.EMPTY; //or it could be any other module type\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering ExtendWordSelectionHandler in plugin.xml\nDESCRIPTION: XML configuration to register a custom ExtendWordSelectionHandler implementation in the plugin.xml file.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/text_selection.md#2025-04-06_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<extensions defaultExtensionNs=\"com.intellij\">\n  <extendWordSelectionHandler implementation=\"your.package.YourExtendWordSelectionHandler\"/>\n</extensions>\n```\n\n----------------------------------------\n\nTITLE: Declaring Project Settings with XML Extension Point\nDESCRIPTION: Example of declaring project-level settings using the com.intellij.projectConfigurable extension point. This shows configuration similar to application settings but with the additional nonDefaultProject attribute.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/settings_guide.md#2025-04-06_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<extensions defaultExtensionNs=\"com.intellij\">\n  <projectConfigurable\n      parentId=\"tools\"\n      instance=\"com.example.ProjectSettingsConfigurable\"\n      id=\"com.example.ProjectSettingsConfigurable\"\n      displayName=\"My Project Settings\"\n      nonDefaultProject=\"true\"/>\n</extensions>\n```\n\n----------------------------------------\n\nTITLE: Registering Static Action Group in plugin.xml\nDESCRIPTION: XML configuration for registering a custom action group with a static action in the editor popup menu. Includes group and action definitions with icons.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/action_system/grouping_actions_tutorial.md#2025-04-06_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<group\n    id=\"org.intellij.sdk.action.CustomDefaultActionGroup\"\n    class=\"org.intellij.sdk.action.CustomDefaultActionGroup\"\n    popup=\"true\"\n    icon=\"SdkIcons.Sdk_default_icon\">\n  <add-to-group group-id=\"EditorPopupMenu\" anchor=\"first\"/>\n  <action\n      id=\"org.intellij.sdk.action.CustomGroupedAction\"\n      class=\"org.intellij.sdk.action.PopupDialogAction\"\n      icon=\"SdkIcons.Sdk_default_icon\"/>\n</group>\n```\n\n----------------------------------------\n\nTITLE: Generating Certificate Chain for Plugin Signing\nDESCRIPTION: Command to generate a certificate chain using the private key. This creates a self-signed X509 certificate valid for 365 days that will be used with the signPlugin.certificateChain property.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/plugin_signing.md#2025-04-06_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nopenssl req\\\n  -key private.pem\\\n  -new\\\n  -x509\\\n  -days 365\\\n  -out chain.crt\n```\n\n----------------------------------------\n\nTITLE: Setting Got It Tooltip Timeout in Java\nDESCRIPTION: This Java snippet shows how to set a custom timeout for a Got It tooltip. It uses the withTimeout method to specify the duration in milliseconds.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/ui/controls/got_it_tooltip.md#2025-04-06_snippet_11\n\nLANGUAGE: java\nCODE:\n```\nnew GotItTooltip(TOOLTIP_ID, GOT_IT_TEXT, parentDisposable)\n    .withTimeout(3000);\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Component in Kotlin UI DSL\nDESCRIPTION: Illustrates how to add a custom component that doesn't have a factory method in the Kotlin UI DSL.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/user_interface_components/kotlin_ui_dsl.md#2025-04-06_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nval customComponent = MyCustomComponent()\npanel {\n  row { customComponent() }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Split Icon Button in Java for IntelliJ SDK\nDESCRIPTION: The SplitButtonAction class is used to implement split icon buttons in the IntelliJ SDK. It is located in the com.intellij.openapi.actionSystem package.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/ui/controls/split_icon_button.md#2025-04-06_snippet_0\n\nLANGUAGE: java\nCODE:\n```\ncom.intellij.openapi.actionSystem.SplitButtonAction\n```\n\n----------------------------------------\n\nTITLE: Registering LanguageInjectionContributor in XML\nDESCRIPTION: Shows how to register the LanguageInjectionContributor implementation in the plugin.xml file.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/custom_language_support/language_injection.md#2025-04-06_snippet_5\n\nLANGUAGE: XML\nCODE:\n```\n<languageInjectionContributor\n    implementationClass=\"MyInjector\"\n    language=\"YourLanguage\"/>\n```\n\n----------------------------------------\n\nTITLE: Overriding Action Text\nDESCRIPTION: Examples of overriding action text in different contexts using override-text element\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/plugin_structure/plugin_configuration_file.md#2025-04-06_snippet_25\n\nLANGUAGE: xml\nCODE:\n```\n<action\n    class=\"com.example.CollectGarbage\"\n    text=\"Garbage Collector: Collect _Garbage\"\n    ...>\n  <override-text\n      place=\"MainMenu\"\n      text=\"Collect _Garbage\"/>\n</action>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<override-text\n    place=\"EditorPopup\"\n    use-text-of-place=\"MainMenu\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Local IDE with JetBrains Runtime in Kotlin\nDESCRIPTION: This snippet demonstrates how to configure a local IDE installation with bundled JetBrains Runtime using the IntelliJ Platform Gradle Plugin in Kotlin. It sets up repositories and dependencies for a specific local IDE path.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_faq.md#2025-04-06_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nrepositories {\n  mavenCentral()\n\n  intellijPlatform {\n    defaultRepositories()\n  }\n}\n\ndependencies {\n  intellijPlatform {\n    local(\"/Users/hsz/Applications/IntelliJ IDEA Ultimate.app\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Got It Tooltip Location in Kotlin\nDESCRIPTION: This Kotlin code demonstrates how to set the location of a Got It tooltip. It uses a predefined point provider (TOP_MIDDLE) to position the tooltip relative to a gutter component.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/ui/controls/got_it_tooltip.md#2025-04-06_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nGotItTooltip(TOOLTIP_ID, GOT_IT_TEXT, parentDisposable)\n    .show(gutterComponent, GotItTooltip.TOP_MIDDLE)\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Documentation Provider Class in Java\nDESCRIPTION: Initial implementation of a documentation provider class extending AbstractDocumentationProvider for the Simple Language.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/custom_language_support/documentation_provider.md#2025-04-06_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nfinal class SimpleDocumentationProvider extends AbstractDocumentationProvider { }\n```\n\n----------------------------------------\n\nTITLE: Optional Configuration File for Kotlin Support\nDESCRIPTION: Example of an additional plugin configuration file that defines the Kotlin-specific extensions. This file is only loaded when the Kotlin plugin is available.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/plugin_structure/plugin_dependencies.md#2025-04-06_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<idea-plugin>\n   <extensions defaultExtensionNs=\"com.intellij\">\n      <annotator\n          language=\"kotlin\"\n          implementationClass=\"com.example.MyKotlinAnnotator\"/>\n   </extensions>\n</idea-plugin>\n```\n\n----------------------------------------\n\nTITLE: Registering Action in plugin.xml - Basic Configuration\nDESCRIPTION: Basic XML configuration for registering a custom action in the plugin.xml file, including action ID, class, text, and description.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/action_system/creating_actions_tutorial.md#2025-04-06_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<actions>\n  <action\n      id=\"org.intellij.sdk.action.PopupDialogAction\"\n      class=\"org.intellij.sdk.action.PopupDialogAction\"\n      text=\"Popup Dialog Action\"\n      description=\"SDK action example\">\n    <add-to-group group-id=\"ToolsMenu\" anchor=\"first\"/>\n  </action>\n</actions>\n```\n\n----------------------------------------\n\nTITLE: Theme Metadata JSON Structure\nDESCRIPTION: JSON structure defining UI customization keys with their properties including name, deprecation status, source class, and descriptions.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/themes_metadata.md#2025-04-06_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"My Plugin\",\n  \"fixed\": false,\n  \"ui\": [\n    {\n      \"key\": \"MyComponent.border\",\n      \"description\": \"The border for my component. Not used anymore.\",\n      \"deprecated\": true,\n      \"source\": \"com.example.MyComponent\"\n    },\n    {\n      [more keys...]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Syntax Highlighter Factory in XML\nDESCRIPTION: XML configuration to register the syntax highlighter factory with the IntelliJ Platform using the lang.syntaxHighlighterFactory extension point.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/custom_language_support/syntax_highlighter_and_color_settings_page.md#2025-04-06_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<extensions defaultExtensionNs=\"com.intellij\">\n  <lang.syntaxHighlighterFactory\n      language=\"Simple\"\n      implementationClass=\"org.intellij.sdk.language.SimpleSyntaxHighlighterFactory\"/>\n</extensions>\n```\n\n----------------------------------------\n\nTITLE: Registering a Line Marker Provider in plugin.xml\nDESCRIPTION: XML configuration to register the SimpleLineMarkerProvider with the IntelliJ Platform. The provider is registered for the Java language using the codeInsight.lineMarkerProvider extension point.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/custom_language_support/line_marker_provider.md#2025-04-06_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<extensions defaultExtensionNs=\"com.intellij\">\n  <codeInsight.lineMarkerProvider\n      language=\"JAVA\"\n      implementationClass=\"org.intellij.sdk.language.SimpleLineMarkerProvider\"/>\n</extensions>\n```\n\n----------------------------------------\n\nTITLE: Defining SplitModeAware.SplitModeTarget Enum in Kotlin\nDESCRIPTION: Enum describing where a plugin can be installed when running in split mode. Options include BACKEND, FRONTEND, and BOTH.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_types.md#2025-04-06_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nenum class SplitModeTarget {\n    BACKEND,\n    FRONTEND,\n    BOTH\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Node.js Remote Interpreter Extension Points in XML\nDESCRIPTION: XML configuration for Node.js remote interpreter extension points in IntelliJ-based IDEs. This includes functionality for setting up remote Node.js run configurations.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/resources/webstorm_extension_point_list.md#2025-04-06_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<extensionPoints>\n  <extensionPoint name=\"org.jetbrains.plugins.node-remote-interpreter.nodeRemoteTargetRunSetupFactory\" interface=\"NodeRemoteTargetRunSetupFactory\"/>\n</extensionPoints>\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugins for Custom RunIde Task in Groovy\nDESCRIPTION: Example of configuring plugins for a custom runIde task in Groovy. It demonstrates how to add a plugin and disable a plugin using the plugins block.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_testing_extension.md#2025-04-06_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\nintellijPlatformTesting.runIde {\n  runIdeWithPlugins {\n    // ...\n    plugins {\n      plugin(\"pluginId\", \"1.0.0\")\n      disablePlugin(\"pluginId\")\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Rendering Handler in JCEF\nDESCRIPTION: Reference to JBCefOsrHandlerBrowser class that provides wrapper functionality for CefBrowser, enabling custom render handling for off-screen rendering scenarios.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/api_notable/api_notable_list_2021.md#2025-04-06_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nJBCefOsrHandlerBrowser\n```\n\n----------------------------------------\n\nTITLE: Loading Language Injection Configuration in XML\nDESCRIPTION: Creates an XML file to load the language injection configuration for a custom language plugin. This snippet shows how to register the configuration in the plugin.xml file.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/custom_language_support/language_injection.md#2025-04-06_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<idea-plugin>\n  <extensions defaultExtensionNs=\"org.intellij.intelliLang\">\n    <injectionConfig config=\"path/to/your/injections.xml\"/>\n  </extensions>\n</idea-plugin>\n```\n\n----------------------------------------\n\nTITLE: Defining Test Data in Java with Embedded Simple Language\nDESCRIPTION: Creates a Java test file that contains an embedded Simple Language prefix and key. This file is used to test the find usages functionality across different file types.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/writing_tests_for_plugins/find_usages_test.md#2025-04-06_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class Test {\n    public static void main(String[] args) {\n        System.out.println(\"simple:key with spaces\");\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Files to Plugin Distribution\nDESCRIPTION: Shows how to include additional files in the plugin distribution using the prepareSandbox task.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/gradle_intellij_plugin/tools_gradle_intellij_plugin_faq.md#2025-04-06_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks {\n  prepareSandbox {\n    from(\"yourFile\") {\n      into(\"${intellij.pluginName.get()}/lib/\")\n    }\n  }\n}\n```\n\nLANGUAGE: groovy\nCODE:\n```\nprepareSandbox {\n  from(\"yourFile\") {\n    into \"${intellij.pluginName.get()}/lib/\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Got It Tooltip Timeout in Kotlin\nDESCRIPTION: This Kotlin snippet demonstrates how to set a custom timeout for a Got It tooltip. It uses the withTimeout method to specify the duration in milliseconds.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/ui/controls/got_it_tooltip.md#2025-04-06_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nGotItTooltip(TOOLTIP_ID, GOT_IT_TEXT, parentDisposable)\n    .withTimeout(3000)\n```\n\n----------------------------------------\n\nTITLE: RubyMine Coverage Deserializer Extension Point\nDESCRIPTION: This extension point allows implementing custom coverage information deserializers for Ruby projects. It's defined in the intellij.ruby.coverage.xml configuration file and requires implementing the RubyCoverageDeserializationProvider interface.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/resources/rubymine_extension_point_list.md#2025-04-06_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\norg.jetbrains.plugins.ruby.coverage.deserializer\n```\n\n----------------------------------------\n\nTITLE: Adding an Editor Scheme to a Theme in JSON Format\nDESCRIPTION: Example of adding a custom editor scheme named 'Lightning' to a theme JSON file. The key 'editorScheme' points to the XML file containing the custom color scheme definitions.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/getting_started/theme/themes_extras.md#2025-04-06_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Theme Basics\",\n  \"dark\": false,\n  \"author\": \"IntelliJ Platform SDK\",\n  \"editorScheme\": \"/Lightning.xml\",\n  \"ui\": {\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Project Structure Diagram in PlantUML\nDESCRIPTION: UML diagram illustrating a simple one-module project structure using DataNode hierarchy with ProjectData, ModuleData, LibraryData, ContentRootData, and LibraryDependencyData nodes.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/frameworks_and_external_apis/external_system_integration.md#2025-04-06_snippet_1\n\nLANGUAGE: plantuml\nCODE:\n```\n@startuml\n\nskinparam DefaultFontName JetBrains Sans\nskinparam DefaultFontSize 14\nskinparam DefaultTextAlignment center\nhide empty members\nhide circle\n\nrectangle \"DataNode<ProjectData>\" as root\nrectangle \"DataNode<ModuleData>\" as child1\nrectangle \"DataNode<LibraryData>\\n(JUnit)\" as child2\nrectangle \"DataNode<ContentRootData>\" as child11\nrectangle \"DataNode<LibraryDependencyData>\\n(JUnit)\" as child12\n\nroot -- child1\nroot -- child2\n\nchild1 -- child11\nchild1 -- child12\n\n@enduml\n```\n\n----------------------------------------\n\nTITLE: Sample Java Code with Simple Language Property\nDESCRIPTION: Example Java code demonstrating the usage of Simple Language property that will be annotated by the plugin.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/custom_language_support/annotator.md#2025-04-06_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic class Test {\n  public static void main(String[] args) {\n    System.out.println(\"simple:website\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Plugin Configuration XML\nDESCRIPTION: Example of required XML configuration for dynamic plugin support in plugin.xml\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/plugin_structure/dynamic_plugins.md#2025-04-06_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<idea-plugin require-restart=\"true\">\n```\n\n----------------------------------------\n\nTITLE: Implementing HighlightedReference in Java\nDESCRIPTION: Example of implementing HighlightedReference interface to add additional highlighting for references in non-obvious places, such as inside string literals.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/custom_language_support/references_and_resolve.md#2025-04-06_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\npublic class MyHighlightedReference implements PsiReference, HighlightedReference {\n    @Override\n    public boolean shouldBeHighlighted() {\n        // Determine if this reference should be highlighted\n        return true;\n    }\n\n    // Other PsiReference method implementations...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom RunIde Task in Kotlin\nDESCRIPTION: Example of registering a custom runIde task for PhpStorm in Kotlin. It shows how to set various properties like type, version, sandbox directory, and how to configure plugins.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_testing_extension.md#2025-04-06_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval runPhpStorm by intellijPlatformTesting.runIde.registering {\n  type = IntelliJPlatformType.PhpStorm\n  version = ...\n  useInstaller = ...\n  localPath = ...\n\n  sandboxDirectory = ...\n\n  splitMode = ...\n  splitModeTarget = ...\n\n  task {\n    ...\n  }\n\n  prepareSandboxTask {\n    ...\n  }\n\n  plugins {\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Custom Structure View Factory Extension Point\nDESCRIPTION: Specifies the extension point for custom structure view factories in YAML files. It references the YAMLCustomStructureViewFactory implementation.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/resources/intellij_community_plugins_extension_point_list.md#2025-04-06_snippet_18\n\nLANGUAGE: XML\nCODE:\n```\n<extensionPoint name=\"yaml.customStructureViewFactory\" interface=\"org.jetbrains.yaml.structureView.YAMLCustomStructureViewFactory\"/>\n```\n\n----------------------------------------\n\nTITLE: Checking Object Validity in Consecutive Read Actions in Kotlin\nDESCRIPTION: Illustrates how to check object validity between consecutive read actions in Kotlin. This ensures that the objects read in the first action are still valid when used in the second action.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/architectural_overview/threading/threading_model.md#2025-04-06_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nval virtualFile = runReadAction { // read action 1\n  // read a virtual file\n}\n// do other time-consuming work...\nval psiFile = runReadAction { // read action 2\n  if (virtualFile.isValid()) { // check if the virtual file is valid\n    PsiManager.getInstance(project).findFile(virtualFile)\n  } else null\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Foojay Toolchains for JBR\nDESCRIPTION: Shows how to configure Gradle to use JetBrains Runtime through Foojay Toolchains plugin in both Kotlin and Groovy.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_jetbrains_runtime.md#2025-04-06_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n  jvmToolchain {\n    languageVersion = JavaLanguageVersion.of(17)\n    vendor = JvmVendorSpec.JETBRAINS\n  }\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n  id(\"org.gradle.toolchains.foojay-resolver-convention\") version \"...\"\n}\n```\n\nLANGUAGE: groovy\nCODE:\n```\njava {\n  toolchain {\n    languageVersion = JavaLanguageVersion.of(17)\n    vendor = JvmVendorSpec.JETBRAINS\n  }\n}\n```\n\nLANGUAGE: groovy\nCODE:\n```\nplugins {\n  id 'org.gradle.toolchains.foojay-resolver-convention' version '...'\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ClassImportFilter Extension Point in Kotlin\nDESCRIPTION: Extension point for implementing custom class import filters in Kotlin. It allows customization of which classes can be imported automatically.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/resources/intellij_community_plugins_extension_point_list.md#2025-04-06_snippet_11\n\nLANGUAGE: XML\nCODE:\n```\n<extensionPoint name=\"classImportFilter\" interface=\"org.jetbrains.kotlin.idea.util.ClassImportFilter\"/>\n```\n\n----------------------------------------\n\nTITLE: Using IntelliJ Platform Extensions in Kotlin Build Scripts\nDESCRIPTION: Example showing how to use the various extensions provided by the IntelliJ Platform Gradle plugin in Kotlin build scripts.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_plugins.md#2025-04-06_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nrepositories {\n  ...\n\n  // Repositories Extension\n  intellijPlatform { ... }\n}\n\ndependencies {\n  ...\n\n  // Dependencies Extension\n  intellijPlatform { ... }\n}\n\n// IntelliJ Platform Extension\nintelllijPlatform { ... }\n```\n\n----------------------------------------\n\nTITLE: Loading Language Injection Configuration in plugin.xml\nDESCRIPTION: XML extension point declarations for loading language injection configurations. This snippet shows how to register a custom language support implementation and load injection configuration from an XML file.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/custom_language_support/language_injection.md#2025-04-06_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<extensions defaultExtensionNs=\"org.intellij.intelliLang\">\n  <languageSupport\n      implementation=\"org.intellij.plugins.intelliLang.inject.java.JavaLanguageInjectionSupport\"/>\n  <injectionConfig config=\"resources/javaInjections.xml\"/>\n</extensions>\n```\n\n----------------------------------------\n\nTITLE: Organizational Vendor Information Configuration in XML\nDESCRIPTION: XML configuration specifying an organizational vendor with website URL and contact email for an IntelliJ platform plugin.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/plugin_structure/plugin_configuration_file.md#2025-04-06_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<vendor\n    url=\"https://mycompany.example.com\"\n    email=\"contact@example.com\">\n  My Company\n</vendor>\n```\n\n----------------------------------------\n\nTITLE: Dependency Configuration for Code Instrumentation in IntelliJ Platform\nDESCRIPTION: Demonstrates the configuration of dependencies required for code instrumentation using the instrumentationTools() and javaCompiler() helper functions. These helpers ensure proper Java bytecode adjustment during the instrumentation process.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_dependencies_extension.md#2025-04-06_snippet_8\n\nLANGUAGE: gradle\nCODE:\n```\ninstrumentationTools()\njavaCompiler()\njavaCompiler(version)\n```\n\n----------------------------------------\n\nTITLE: Using JBTextField Placeholder\nDESCRIPTION: Shows how to set placeholder text in a JBTextField using the getEmptyText() method, which creates a grey placeholder that disappears when the user starts typing.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/ui/controls/input_field.md#2025-04-06_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nJBTextField.getEmptyText().setText(...)\n```\n\n----------------------------------------\n\nTITLE: Implementing getSupportedVcs Method for VcsLogFileHistoryHandler (Kotlin)\nDESCRIPTION: A new abstract method getSupportedVcs() has been added to VcsLogFileHistoryHandler that must be implemented to specify which VCS systems are supported.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/reference_guide/api_changes_list_2024.md#2025-04-06_snippet_20\n\nLANGUAGE: Kotlin\nCODE:\n```\nfun getSupportedVcs(): VcsKey\n```\n\n----------------------------------------\n\nTITLE: Using Dispatchers.EDT in Kotlin Coroutines\nDESCRIPTION: Example of code that runs on the EDT dispatcher which currently gets an implicit write intent lock. In future IntelliJ Platform releases, this implicit lock will be removed and explicit locks will be required.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/architectural_overview/threading/coroutines/coroutine_edt_and_locks.md#2025-04-06_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nwithContext(Dispatchers.EDT) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Extension Point for Custom Module Builder in IntelliJ SDK\nDESCRIPTION: This snippet shows the extension point configuration for adding a custom module builder to the IntelliJ Project Wizard. It defines the extension point name, implementation class, and the base extension point class.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/code_samples/project_wizard/README.md#2025-04-06_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n| Name                         | Implementation                                    | Extension Point Class |\n|------------------------------|---------------------------------------------------|-----------------------|\n| `com.intellij.moduleBuilder` | [DemoModuleWizardStep][file:DemoModuleWizardStep] | `ModuleBuilder`       |\n```\n\n----------------------------------------\n\nTITLE: Defining Token Sets for Simple Language Parser\nDESCRIPTION: A utility class that groups related token types into sets for use by the parser. It defines constants for comments and identifiers that are used in the parser definition.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/custom_language_support/lexer_and_parser_definition.md#2025-04-06_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n// Copyright 2000-2022 JetBrains s.r.o. and other contributors. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.\npackage org.intellij.sdk.language.psi;\n\nimport com.intellij.psi.tree.TokenSet;\n\npublic interface SimpleTokenSets {\n\n  TokenSet IDENTIFIERS = TokenSet.create(SimpleTypes.KEY);\n\n  TokenSet COMMENTS = TokenSet.create(SimpleTypes.COMMENT);\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Help Text Below Form Fields in Kotlin UI DSL\nDESCRIPTION: Example of adding help text below a text field with browse button in Kotlin UI DSL. This pattern is used when the help text provides additional context about the field's purpose.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/ui/controls/inline_help_text.md#2025-04-06_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\npanel {\n  row(\"Default directory:\") {\n    textFieldWithBrowseButton()\n      .comment(\n        \"Preselected in Open and New | Project dialogs\"\n      )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing XML Format with Annotations in Java\nDESCRIPTION: Shows how to use various annotations like @Tag, @Attribute, @Property, @MapAnnotation, @XMap, and @XCollection to customize the XML format of persisted values when using default bean serialization.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/persisting_state_of_components.md#2025-04-06_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\npublic class YourState {\n    @Tag(\"custom-tag\")\n    private String myField;\n\n    @Attribute(\"custom-attribute\")\n    private int myAttribute;\n\n    @Property(surroundWithTag = false)\n    private boolean myProperty;\n\n    @MapAnnotation\n    private Map<String, String> myMap;\n\n    // Getters and setters\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Auto-Reload Configuration\nDESCRIPTION: Examples of how to disable automatic reload of dynamic plugins globally and for specific tasks.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_faq.md#2025-04-06_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nintellijPlatform {\n  autoReload = false\n}\n```\n\nLANGUAGE: groovy\nCODE:\n```\nintellijPlatform {\n  autoReload = false\n}\n```\n\n----------------------------------------\n\nTITLE: PSI Element Caching Pattern\nDESCRIPTION: Example showing how to cache PSI element computation results in a subtree using ASTDelegatePsiElement.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/architectural_overview/psi_performance.md#2025-04-06_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nclass MyPsiElement extends ASTDelegatePsiElement {\n    private Object cachedValue;\n    \n    @Override\n    public void subtreeChanged() {\n        cachedValue = null;\n        super.subtreeChanged();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Parametrizing IntelliJ Platform Dependencies in Groovy\nDESCRIPTION: Gradle configuration in Groovy DSL that allows dynamic configuration of the target platform using properties defined in gradle.properties. This enables flexible platform version selection.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin.md#2025-04-06_snippet_11\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n  intellijPlatform {\n    def type = providers.gradleProperty('platformType')\n    def version = providers.gradleProperty('platformVersion')\n\n    create(type, version)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Extension Points in DomPlugin.xml\nDESCRIPTION: Lists extension points defined in DomPlugin.xml, including their names, implementations, and any special attributes like deprecated or obsolete.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/resources/intellij_platform_extension_point_list.md#2025-04-06_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<extensionPoints>\n  <extensionPoint name=\"dom.converter\" interface=\"n/a\"/>\n  <extensionPoint name=\"dom.customAnnotationChecker\" interface=\"com.intellij.util.xml.highlighting.DomCustomAnnotationChecker\"/>\n  <extensionPoint name=\"dom.extender\" interface=\"com.intellij.util.xml.reflect.DomExtender\"/>\n  <extensionPoint name=\"dom.fileDescription\" interface=\"com.intellij.util.xml.DomFileDescription\" deprecated=\"true\"/>\n  <!-- Additional extension points omitted for brevity -->\n</extensionPoints>\n```\n\n----------------------------------------\n\nTITLE: Visualizing IntelliJ Platform Gradle Plugin Architecture with Mermaid\nDESCRIPTION: A flowchart diagram illustrating the dependencies between plugins provided with the IntelliJ Platform Gradle Plugin, showing which plugins should be applied at settings level versus project level.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_plugins.md#2025-04-06_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TB\n\n    subgraph SETTINGS_LEVEL [\"<div style='margin: 5px auto; font-size: 0.8rem'>settings.gradle.kts</div>\"]\n        Settings(\"<b>Settings</b>\")\n    end\n\n    subgraph PROJECT_LEVEL [\"<div style='margin: 5px auto; font-size: 0.8rem'>build.gradle.kts</div>\"]\n        Platform(\"<b>Platform</b>\")\n        Module(\"<b>Module</b>\")\n        Migration\n        Base\n    end\n\n    Module --> Base\n    Platform --> Module & Base\n    Migration --> Platform\n\n    click Platform \"#platform\"\n    click Module \"#module\"\n    click Settings \"#settings\"\n    click Migration \"#migration\"\n    click Base \"#base\"\n\n    style Platform stroke-width: 3px\n    style Module stroke-width: 3px\n    style Settings stroke-width: 3px\n    style SETTINGS_LEVEL fill:transparent,stroke:#666,stroke-dasharray: 10 10\n    style PROJECT_LEVEL fill:transparent,stroke:#666,stroke-dasharray: 10 10\n```\n\n----------------------------------------\n\nTITLE: Implementing Code Vision Provider in Kotlin\nDESCRIPTION: Code vision providers allow displaying block inlay hints for code elements like classes, methods, and fields. They can be bound to PSI changes (DaemonBoundCodeVisionProvider) or independent (CodeVisionProvider), and require a corresponding settings provider (CodeVisionGroupSettingProvider).\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/custom_language_support/inlay_hints.md#2025-04-06_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass JavaInheritorsCodeVisionProvider : DaemonBoundCodeVisionProvider {\n    // Shows number of Java class or method inheritors\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass JavaReferencesCodeVisionProvider : DaemonBoundCodeVisionProvider {\n    // Shows number of usages of Java class or member\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass VcsCodeVisionProvider : CodeVisionProvider {\n    // Shows the author of a given element based on VCS information\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Ternary Operator to If Statement in Java\nDESCRIPTION: This code snippet demonstrates the conversion of a ternary operator to an if statement. It shows both the original code with a ternary operator and the resulting code after conversion.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/code_samples/conditional_operator_intention/README.md#2025-04-06_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class X {\n  void f(boolean isMale) {\n    String title = isMale ? \"Mr.\" : \"Ms.\";\n    System.out.println(\"title = \" + title);\n }\n}\n```\n\nLANGUAGE: java\nCODE:\n```\npublic class X {\n  void f(boolean isMale) {\n    String title;\n    if (isMale) {\n      title = \"Mr.\";\n    } else {\n      title = \"Ms.\";\n    }\n    System.out.println(\"title = \" + title);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Input Test Data for Annotator in Java\nDESCRIPTION: This snippet shows the content of the AnnotatorTestData.java file, which contains test cases for the Simple Language annotator. It includes both valid and invalid uses of the Simple Language syntax within Java code.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/writing_tests_for_plugins/annotator_test.md#2025-04-06_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class Test {\n  public static void main(String[] args) {\n    System.out.println(\"simple:website\");\n    System.out.println(\"simple:<error descr=\\\"Unresolved property\\\">websit</error>\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing ComboBoxButton Implementation in Java\nDESCRIPTION: This code snippet references the Java implementation of the ComboBoxButton class, which is used for creating toolbar drop-down lists in the IntelliJ platform.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/ui/controls/toolbar_drop_down.md#2025-04-06_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[`ComboBoxButton`](%gh-ic%/platform/platform-api/src/com/intellij/openapi/actionSystem/ex/ComboBoxAction.java)\n```\n\n----------------------------------------\n\nTITLE: Application Settings Configurable Implementation Example (Java)\nDESCRIPTION: Example of application-level settings configurable implementation for console configuration.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/settings_guide.md#2025-04-06_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nConsoleConfigurable\n```\n\n----------------------------------------\n\nTITLE: Setting Breakpoint Location for ElementPattern Debugging\nDESCRIPTION: Example of where to set a breakpoint in the ElementPattern class to debug pattern matching. This targets the accepts() method which is called whenever a pattern is evaluated against an element.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/architectural_overview/element_patterns.md#2025-04-06_snippet_2\n\nLANGUAGE: text\nCODE:\n```\ncom.intellij.patterns.ElementPattern#accepts(\n  java.lang.Object,\n  com.intellij.util.ProcessingContext\n)\n```\n\n----------------------------------------\n\nTITLE: UI Control Key Example - Markdown\nDESCRIPTION: Example showing the key format for UI Controls in LaF Defaults window.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/ide_tooling/internal_actions/internal_ui_laf_defaults.md#2025-04-06_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nkey\n```\n\n----------------------------------------\n\nTITLE: Registering Parser Definition in plugin.xml\nDESCRIPTION: XML configuration that registers the Simple language parser definition with the IntelliJ Platform. This extension point registration makes the parser available for handling Simple language files.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/custom_language_support/lexer_and_parser_definition.md#2025-04-06_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<extensions defaultExtensionNs=\"com.intellij\">\n  <lang.parserDefinition\n      language=\"Simple\"\n      implementationClass=\"org.intellij.sdk.language.SimpleParserDefinition\"/>\n</extensions>\n```\n\n----------------------------------------\n\nTITLE: Implementing Form Validation with Error State in Java\nDESCRIPTION: Shows how to implement validation on focus lost using ComponentValidator in Java.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/ui/principles/validation_errors.md#2025-04-06_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nnew ComponentValidator(parentDisposable)\n    .withValidator(...)\n    .andStartOnFocusLost()\n    .installOn(textField);\n```\n\n----------------------------------------\n\nTITLE: Implementing Annotator Test Method in Java\nDESCRIPTION: This snippet defines the testAnnotator() method in the SimpleCodeInsightTest class. It configures the test fixture with the necessary test files and calls checkHighlighting() to verify weak warnings.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/writing_tests_for_plugins/annotator_test.md#2025-04-06_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic void testAnnotator() {\n  myFixture.configureByFiles(\"AnnotatorTestData.java\", \"DefaultTestData.simple\");\n  myFixture.checkHighlighting(false, false, true, true);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Snapshot Repository in Kotlin\nDESCRIPTION: Demonstrates how to configure the snapshot repository for using the latest snapshot version of the plugin in a Kotlin-based Gradle settings file.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin.md#2025-04-06_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\npluginManagement {\n  repositories {\n    maven(\"https://oss.sonatype.org/content/repositories/snapshots/\")\n    gradlePluginPortal()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Properties Plugin Extension Points\nDESCRIPTION: Extension points for the com.intellij.properties plugin, including property inspection suppressors and usage providers.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/resources/intellij_community_plugins_extension_point_list.md#2025-04-06_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\ncom.intellij.properties.alphaUnsortedInspectionSuppressor\ncom.intellij.properties.duplicatePropertyKeyAnnotationSuppressor\ncom.intellij.properties.implicitPropertyUsageProvider\n```\n\n----------------------------------------\n\nTITLE: Implementing ProjectViewNodeDecorator in Java for IntelliJ IDEA Plugins\nDESCRIPTION: To modify project view node representations, implement the ProjectViewNodeDecorator interface and register it as a com.intellij.projectViewNodeDecorator extension. Only the decorate() method needs to be implemented to modify ProjectViewNodes.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/project_view.md#2025-04-06_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nProjectViewNodeDecorator\n```\n\n----------------------------------------\n\nTITLE: Setting Up Repositories in Groovy\nDESCRIPTION: Shows how to set up repositories for IntelliJ Platform SDK artifacts and JetBrains Marketplace dependencies in a Groovy-based Gradle build file.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin.md#2025-04-06_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\nrepositories {\n  mavenCentral()\n\n  intellijPlatform {\n    releases()\n    marketplace()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Markup for Inlay Hints Preview (2023.2+)\nDESCRIPTION: Shows the markup syntax for displaying hints in preview files for inlay hint providers in IntelliJ Platform 2023.2 and newer versions. These previews appear in the Settings UI under Editor > Inlay Hints.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/custom_language_support/inlay_hints.md#2025-04-06_snippet_0\n\nLANGUAGE: markup\nCODE:\n```\n/*<# Displayed Hint #>*/\n```\n\n----------------------------------------\n\nTITLE: Parsing Plugin XML in Kotlin with PluginAware Interface\nDESCRIPTION: Demonstrates how to use the pluginXml property and parse method from the PluginAware interface to access plugin information in a custom Gradle task.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_task_awares.md#2025-04-06_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nabstract class RetrievePluginNameTask : DefaultTask(), PluginAware\n\nval retrievePluginName by tasks.registering(RetrievePluginNameTask::class) {\n    doLast {\n        val name = pluginXml.parse { name }.get()\n        println(\"Plugin Name: $name\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Maven File Template Group Factory Implementation\nDESCRIPTION: Example implementation of FileTemplateGroupDescriptorFactory for Maven file templates, demonstrating how to register custom templates in the 'Other' category.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/file_and_code_templates/providing_file_templates.md#2025-04-06_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nMavenFileTemplateGroupFactory\n```\n\n----------------------------------------\n\nTITLE: Setting Link Color in IntelliJ UI\nDESCRIPTION: Specifies the color property for links in description text areas using the default link color variable.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/ui/controls/description_text.md#2025-04-06_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nLink.activeForeground\n```\n\n----------------------------------------\n\nTITLE: Qodana Coverage Plugin Extensions\nDESCRIPTION: Extension point for Qodana Coverage plugin that processes cloud artifacts for coverage information.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/resources/oss_plugins_extension_point_list.md#2025-04-06_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\nintellij.qodana.coverage.xml\n```\n\n----------------------------------------\n\nTITLE: Configuring Snapshot Repository in Groovy\nDESCRIPTION: Demonstrates how to configure the snapshot repository for using the latest snapshot version of the plugin in a Groovy-based Gradle settings file.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin.md#2025-04-06_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\npluginManagement {\n  repositories {\n    maven {\n      url 'https://oss.sonatype.org/content/repositories/snapshots/'\n    }\n    gradlePluginPortal()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Element Factory for Simple Language\nDESCRIPTION: Factory class for creating Simple language PSI elements and files programmatically.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/custom_language_support/reference_contributor.md#2025-04-06_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\npackage org.intellij.sdk.language.psi;\n\nimport com.intellij.openapi.project.Project;\nimport com.intellij.psi.*;\nimport org.intellij.sdk.language.SimpleFileType;\n\npublic class SimpleElementFactory {\n\n  public static SimpleProperty createProperty(Project project, String name) {\n    SimpleFile file = createFile(project, name);\n    return (SimpleProperty) file.getFirstChild();\n  }\n\n  public static SimpleFile createFile(Project project, String text) {\n    String name = \"dummy.simple\";\n    return (SimpleFile) PsiFileFactory.getInstance(project).\n        createFileFromText(name, SimpleFileType.INSTANCE, text);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Package Migration for IntelliJ UI DSL\nDESCRIPTION: Shows the package changes between version 1 and version 2 of the UI DSL. Version 1 is in the com.intellij.ui.layout package, while version 2 is in com.intellij.ui.dsl.builder package.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/user_interface_components/kotlin_ui_dsl_version_2.md#2025-04-06_snippet_15\n\nLANGUAGE: java\nCODE:\n```\ncom.intellij.ui.layout         // Version 1 package\ncom.intellij.ui.dsl.builder    // Version 2 package\n```\n\n----------------------------------------\n\nTITLE: Listener Registration with Disposable Interface Example\nDESCRIPTION: Example interface showing how to register listeners with support for automatic disposal using a parent disposable.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/disposers.md#2025-04-06_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic interface PomModel {\n  // ...\n  void addModelListener(PomModelListener listener);\n  void addModelListener(PomModelListener listener, Disposable parentDisposable);\n  void removeModelListener(PomModelListener listener);\n}\n```\n\n----------------------------------------\n\nTITLE: Blade Template Extension Points\nDESCRIPTION: Extension points for PHP Blade templating engine support, including directive contributors.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/resources/php_extension_point_list.md#2025-04-06_snippet_4\n\nLANGUAGE: text\nCODE:\n```\ncom.jetbrains.php.blade.bladeDirectiveContributor\n```\n\n----------------------------------------\n\nTITLE: Configuring App Inspection Extension Point\nDESCRIPTION: Defines extension point for artifact resolver factory used in Android app inspection. Enables custom artifact resolution for app inspection tools.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/resources/android_plugin_extension_point_list.md#2025-04-06_snippet_5\n\nLANGUAGE: XML\nCODE:\n```\ncom.android.tools.idea.appinspection.ide.resolver.artifactResolverFactoryToken\n```\n\n----------------------------------------\n\nTITLE: Defining Subsystems Enum in Kotlin for VerifyPluginTask\nDESCRIPTION: Enum specifying which subsystems of the IDE should be checked by the IntelliJ Plugin Verifier CLI tool. Options include ALL, ANDROID_ONLY, and WITHOUT_ANDROID.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_types.md#2025-04-06_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nenum class Subsystems {\n    ALL,\n    ANDROID_ONLY,\n    WITHOUT_ANDROID\n}\n```\n\n----------------------------------------\n\nTITLE: PhpStorm Listeners Table\nDESCRIPTION: Markdown table listing PhpStorm listeners with their corresponding topics and implementations\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/resources/php_extension_point_list.md#2025-04-06_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Topic | Listener |\n|-------|----------|\n| [ComposerInstalledPackagesService#PACKAGE_MANAGER_TOPIC] | `ComposerUpdateListener` |\n| [RepositoriesComposerConfig#TOPIC] | `ComposerRepositoriesChangedListener` |\n| [StateChangedListener#TOPIC] | `StateChangedListener` |\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependency Resolution Management in Kotlin\nDESCRIPTION: Demonstrates how to configure dependency resolution management with IntelliJ Platform repositories in a Kotlin-based Gradle settings file.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin.md#2025-04-06_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nimport org.jetbrains.intellij.platform.gradle.extensions.intellijPlatform\n\nplugins {\n  id(\"org.jetbrains.intellij.platform.settings\") version \"%intellij-platform-gradle-plugin-version%\"\n}\n\ndependencyResolutionManagement {\n  repositoriesMode = RepositoriesMode.FAIL_ON_PROJECT_REPOS\n\n  repositories {\n    mavenCentral()\n\n    intellijPlatform {\n      defaultRepositories()\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering SymbolDocumentationTargetProvider Extension Point\nDESCRIPTION: Example of how to register a SymbolDocumentationTargetProvider extension point in a plugin.xml file.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/custom_language_support/documentation.md#2025-04-06_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<extensions defaultExtensionNs=\"com.intellij\">\n  <platform.backend.documentation.symbolTargetProvider\n      implementation=\"fully.qualified.ClassName\"/>\n</extensions>\n```\n\n----------------------------------------\n\nTITLE: Configuring runIdeForUiTests Task in Kotlin\nDESCRIPTION: Example of registering and configuring the runIdeForUiTests task with Robot Server plugin and specific JVM arguments in Kotlin DSL.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_tasks.md#2025-04-06_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nval runIdeForUiTests by intellijPlatformTesting.runIde.registering {\n  task {\n    jvmArgumentProviders += CommandLineArgumentProvider {\n      listOf(\n        \"-Drobot-server.port=8082\",\n        \"-Dide.mac.message.dialogs.as.sheets=false\",\n        \"-Djb.privacy.policy.text=<!--999.999-->\",\n        \"-Djb.consents.confirmation.enabled=false\",\n      )\n    }\n  }\n  plugins {\n    robotServerPlugin()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Annotator in plugin.xml\nDESCRIPTION: XML configuration to register the Simple Language annotator for Java language in the plugin configuration file.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/custom_language_support/annotator.md#2025-04-06_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<extensions defaultExtensionNs=\"com.intellij\">\n  <annotator\n      language=\"JAVA\"\n      implementationClass=\"org.intellij.sdk.language.SimpleAnnotator\"/>\n</extensions>\n```\n\n----------------------------------------\n\nTITLE: Displaying Loader in Breadcrumb (Markdown/HTML)\nDESCRIPTION: Shows how to place a loader after breadcrumbs or a dialog label to indicate that a page is being loaded.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/ui/controls/progress_indicators.md#2025-04-06_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n![](breadcrumb_loader.png){width=274}\n```\n\n----------------------------------------\n\nTITLE: Adding Maven Dependencies to Test Project\nDESCRIPTION: Demonstrates how to add standard libraries from Maven repositories to a test project using MavenDependencyUtil, which is useful for JVM language testing.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/testing_plugins/testing_faq.md#2025-04-06_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nMavenDependencyUtil.addFromMaven(model,\n    \"org.jetbrains.kotlin:kotlin-stdlib:1.6.10\");\n```\n\n----------------------------------------\n\nTITLE: Explicit JBR Version Configuration in Gradle\nDESCRIPTION: Demonstrates how to explicitly specify JBR version, variant, and architecture in Gradle build configuration using both Kotlin and Groovy DSL.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_jetbrains_runtime.md#2025-04-06_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nrepositories {\n  mavenCentral()\n  intellijPlatform {\n    defaultRepositories()\n    jetbrainsRuntime()\n    // ...\n  }\n}\n\ndependencies {\n  intellijPlatform {\n    intellijIdeaCommunity(\"%ijPlatform%\")\n\n    jetbrainsRuntime(version, variant, architecture)\n    // or\n    jetbrainsRuntimeExplicit(explicitVersion)\n\n    // ...\n  }\n}\n```\n\nLANGUAGE: groovy\nCODE:\n```\nrepositories {\n  mavenCentral()\n  intellijPlatform {\n    defaultRepositories()\n    jetbrainsRuntime()\n    // ...\n  }\n}\n\ndependencies {\n  intellijPlatform {\n    intellijIdeaCommunity '%ijPlatform%'\n\n    jetbrainsRuntime(version, variant, architecture)\n    // or\n    jetbrainsRuntimeExplicit(explicitVersion)\n\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin Verification in Groovy\nDESCRIPTION: Example showing how to configure plugin verification settings including IDE selection, local IDE paths, and recommended IDE configurations using Groovy DSL.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_extension.md#2025-04-06_snippet_15\n\nLANGUAGE: groovy\nCODE:\n```\nimport org.jetbrains.intellij.platform.gradle.IntelliJPlatformType\nimport org.jetbrains.intellij.platform.gradle.models.ProductRelease\n\nintellij Platform {\n  // ...\n\n  pluginVerification {\n    // ...\n\n    ides {\n      ide IntelliJPlatformType.RustRover, \"2023.3\"\n      local file('/path/to/ide/')\n      recommended()\n      select {\n        it.types = [IntelliJPlatformType.PhpStorm]\n        it.channels = [ProductRelease.Channel.RELEASE]\n        it.sinceBuild = '232'\n        it.untilBuild = '241.*'\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Documentation Provider Extension in XML\nDESCRIPTION: Plugin XML configuration to register the documentation provider as a language extension for Simple Language.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/custom_language_support/documentation_provider.md#2025-04-06_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<extensions defaultExtensionNs=\"com.intellij\">\n  <!-- Other extensions… -->\n  <lang.documentationProvider\n      language=\"Simple\"\n      implementationClass=\"org.intellij.sdk.language.SimpleDocumentationProvider\"/>\n</extensions>\n```\n\n----------------------------------------\n\nTITLE: Implementing tearDown Method in Kotlin for IntelliJ Plugin Tests\nDESCRIPTION: This code snippet demonstrates the proper implementation of the tearDown method in Kotlin for IntelliJ plugin tests. It ensures that super.tearDown() is always called inside a finally block to prevent leaks and side effects.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/testing_plugins/testing_faq.md#2025-04-06_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\noverride fun tearDown() {\n  try {\n    // test specific tear-down calls\n  } catch (e: Throwable) {\n    addSuppressedException(e)\n  } finally {\n    super.tearDown()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding IntelliJ Plugin Numeric Rating Badge in Markdown\nDESCRIPTION: Adds a badge showing the numeric rating of an IntelliJ plugin. Requires replacing :pluginId with the actual plugin ID.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/resources/marketing.md#2025-04-06_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n![Rating](https://img.shields.io/jetbrains/plugin/r/rating/:pluginId)\n```\n\n----------------------------------------\n\nTITLE: Extension Point Definitions in aiplugin-api.xml\nDESCRIPTION: Defines extension points for ML-related functionality including MIME type augmentation and Studio Bot external flags.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/resources/android_plugin_extension_point_list.md#2025-04-06_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\ncom.android.tools.idea.ml.mimetypeAugmenter\ncom.android.tools.idea.ml.studioBotExternalFlags\n```\n\n----------------------------------------\n\nTITLE: Checking Latest EAP Release with Gradle Task in Groovy\nDESCRIPTION: This snippet shows the Groovy equivalent of the printProductsReleases Gradle task for checking the latest EAP release of IntelliJ IDEA Community Edition. It configures the task to filter EAP releases and retrieve the latest build.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_faq.md#2025-04-06_snippet_7\n\nLANGUAGE: groovy\nCODE:\n```\nimport org.jetbrains.intellij.platform.gradle.IntelliJPlatformType\nimport org.jetbrains.intellij.platform.gradle.models.ProductRelease\n\ntasks {\n  printProductsReleases {\n    channels = [ProductRelease.Channel.EAP]\n    types = [IntelliJPlatformType.IntellijIdeaCommunity]\n    untilBuild = null\n\n    doLast {\n      def latestEap = productsReleases.get().max()\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Extension Points in Editor.xml\nDESCRIPTION: Lists extension points defined in Editor.xml, including their names and implementations.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/resources/intellij_platform_extension_point_list.md#2025-04-06_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<extensionPoints>\n  <extensionPoint name=\"editorFactoryListener\" interface=\"com.intellij.openapi.editor.event.EditorFactoryListener\"/>\n  <extensionPoint name=\"syntaxHighlighter\" interface=\"com.intellij.openapi.fileTypes.SyntaxHighlighter\"/>\n</extensionPoints>\n```\n\n----------------------------------------\n\nTITLE: Behat Extension Points\nDESCRIPTION: Extension points for PHP Behat testing framework integration, specifically for Gherkin context providers.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/resources/php_extension_point_list.md#2025-04-06_snippet_3\n\nLANGUAGE: text\nCODE:\n```\ncom.jetbrains.php.behat.gherkinContextProvider\n```\n\n----------------------------------------\n\nTITLE: Disabling JetBrains Cache Redirector\nDESCRIPTION: Example of disabling the use of JetBrains Cache Redirector for resolving Maven repositories and other resources by setting the useCacheRedirector property to false.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_gradle_properties.md#2025-04-06_snippet_10\n\nLANGUAGE: properties\nCODE:\n```\norg.jetbrains.intellij.platform.useCacheRedirector=false\n```\n\n----------------------------------------\n\nTITLE: Registering FormattingModelBuilder Extension Point in plugin.xml\nDESCRIPTION: Register the FormattingModelBuilder implementation as an extension point in the plugin.xml file.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/custom_language_support/code_formatting.md#2025-04-06_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<include from=\"snippets.topic\" element-id=\"ep\"><var name=\"ep\" value=\"com.intellij.lang.formatter\"/></include>\n```\n\n----------------------------------------\n\nTITLE: Initializing IntelliJ Platform Plugin Properties in Gradle\nDESCRIPTION: Defines various properties for the initializeIntelliJPlatformPlugin task, including offline mode, self-update checks, coroutines Java agent, and plugin version information.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_tasks.md#2025-04-06_snippet_3\n\nLANGUAGE: gradle\nCODE:\n```\noffline = property<Boolean>()\nselfUpdateCheck = property<Boolean>()\nselfUpdateLock = regularFileProperty()\ncoroutinesJavaAgent = property<Boolean>()\npluginVersion = property<String>()\nlatestPluginVersion = property<String>()\nmodule = property<String>()\n```\n\n----------------------------------------\n\nTITLE: Using Installer for IntelliJ Platform Dependency in Groovy\nDESCRIPTION: Example showing how to specify IntelliJ Platform dependency using the installer (default approach), which resolves IDE final distribution from JetBrains Download CDN.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_dependencies_extension.md#2025-04-06_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\nrepositories {\n  intellijPlatform {\n    defaultRepositories()\n  }\n}\n\ndependencies {\n  intellijPlatform {\n    intellijIdeaCommunity '%ijPlatform%'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Loader in Push Dialog (Markdown/HTML)\nDESCRIPTION: Illustrates the use of a single loader in the top right corner for simultaneous processes with similar execution times.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/ui/controls/progress_indicators.md#2025-04-06_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n![](tree_loader_push.png){width=400}\n```\n\n----------------------------------------\n\nTITLE: Extension Point Declaration XML Example\nDESCRIPTION: Example showing how extension points are declared in plugin.xml file using the defaultExtensionNs attribute.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/resources/explore_api.md#2025-04-06_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<extensions defaultExtensionNs=\"com.intellij\">\n```\n\n----------------------------------------\n\nTITLE: Using Installer for IntelliJ Platform Dependency in Kotlin\nDESCRIPTION: Example showing how to specify IntelliJ Platform dependency using the installer (default approach), which resolves IDE final distribution from JetBrains Download CDN.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_dependencies_extension.md#2025-04-06_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nrepositories {\n  intellijPlatform {\n    defaultRepositories()\n  }\n}\n\ndependencies {\n  intellijPlatform {\n    intellijIdeaCommunity(\"%ijPlatform%\")\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Adding Test Framework Dependency in Kotlin\nDESCRIPTION: Demonstrates how to add a dependency on the test framework library for implementing tests in an IntelliJ Platform plugin using Kotlin. It includes the TestFrameworkType.Platform and a JUnit dependency.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_dependencies_extension.md#2025-04-06_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nimport org.jetbrains.intellij.platform.gradle.TestFrameworkType\n\ndependencies {\n  intellijPlatform {\n    testFramework(TestFrameworkType.Platform)\n  }\n\n  testImplementation(\"junit:junit:4.13.2\")\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Dynamic Action Group in plugin.xml\nDESCRIPTION: XML configuration for registering a dynamic action group in the Tools menu, positioned after another specific action.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/action_system/grouping_actions_tutorial.md#2025-04-06_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<group\n    id=\"org.intellij.sdk.action.DynamicActionGroup\"\n    class=\"org.intellij.sdk.action.DynamicActionGroup\"\n    popup=\"true\"\n    text=\"Dynamically Grouped Actions\"\n    description=\"SDK dynamically grouped action example\"\n    icon=\"SdkIcons.Sdk_default_icon\">\n  <add-to-group\n      group-id=\"ToolsMenu\"\n      anchor=\"after\"\n      relative-to-action=\"org.intellij.sdk.action.GroupedActions\"/>\n</group>\n```\n\n----------------------------------------\n\nTITLE: Implementing Parsing Test for Simple Language in Java\nDESCRIPTION: Creates a Java class that extends ParsingTestCase to test the parsing of Simple language files. It overrides getTestDataPath() to specify the location of test data.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/writing_tests_for_plugins/parsing_test.md#2025-04-06_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\npackage org.intellij.sdk.language;\n\nimport com.intellij.testFramework.ParsingTestCase;\n\npublic class SimpleParsingTest extends ParsingTestCase {\n\n  public SimpleParsingTest() {\n    super(\"testData\", \"simple\");\n  }\n\n  public void testParsingTestData() {\n    doTest(true);\n  }\n\n  @Override\n  protected String getTestDataPath() {\n    return \"src/test/java/org/intellij/sdk/language\";\n  }\n\n  @Override\n  protected boolean skipSpaces() {\n    return false;\n  }\n\n  @Override\n  protected boolean includeRanges() {\n    return true;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing testCompletion() for SimpleCodeInsightTest\nDESCRIPTION: This method defines the completion test. It configures the test using input files, calls the completion functionality, and checks the returned lookup strings against expected completion variants.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/writing_tests_for_plugins/completion_test.md#2025-04-06_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n```java\n```\n```\n\n----------------------------------------\n\nTITLE: Extension Points Configuration in RefactoringExtensionPoints.xml\nDESCRIPTION: Defines extension points for refactoring operations including rename handlers, inline handlers, and other refactoring-related functionality.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/resources/intellij_platform_extension_point_list.md#2025-04-06_snippet_10\n\nLANGUAGE: XML\nCODE:\n```\nRefactoringExtensionPoints.xml\n\nExtension Points:\n- com.intellij.automaticRenamerFactory\n- com.intellij.findInProjectSearchEngine\n- com.intellij.inlineActionHandler\n- com.intellij.lang.namesValidator\n- com.intellij.lang.refactoringSupport\n- com.intellij.nameSuggestionProvider\n- com.intellij.qualifiedNameProvider\n- com.intellij.refactoring.elementListenerProvider\n- com.intellij.refactoring.helper\n- com.intellij.refactoring.inlineHandler\n- com.intellij.rename.inplace.resolveSnapshotProvider\n- com.intellij.renameHandler\n- com.intellij.renameInputValidator\n- com.intellij.renamePsiElementProcessor\n- com.intellij.renameRefactoringDialogProvider\n- com.intellij.renamerFactory\n- com.intellij.testSourcesFilter\n- com.intellij.updateAddedFileProcessor\n- com.intellij.vetoRenameCondition\n- com.intellij.virtualFileQualifiedNameProvider\n```\n\n----------------------------------------\n\nTITLE: Using Multi-OS Archives for IntelliJ Platform Dependency in Groovy\nDESCRIPTION: Example showing how to specify IntelliJ Platform dependency using Multi-OS ZIP archives instead of installers by setting useInstaller parameter to false.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_dependencies_extension.md#2025-04-06_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\nrepositories {\n  intellijPlatform {\n    defaultRepositories()\n  }\n}\n\ndependencies {\n  intellijPlatform {\n    intellijIdeaCommunity \"%ijPlatform%\", false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Grazie Plugin Extension Points (tanvd.grazi)\nDESCRIPTION: Extension points for the Grazie plugin providing grammar checking, text extraction, and problem filtering functionality.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/resources/intellij_community_plugins_extension_point_list.md#2025-04-06_snippet_25\n\nLANGUAGE: XML\nCODE:\n```\n<!-- tanvd.grazi extension points -->\n<extensionPoints>\n  <extensionPoint name=\"disableChecking\" />\n  <extensionPoint name=\"grammar.strategy\" />\n  <extensionPoint name=\"problemFilter\" />\n  <extensionPoint name=\"textChecker\" />\n  <extensionPoint name=\"textExtractor\" />\n</extensionPoints>\n```\n\n----------------------------------------\n\nTITLE: Machine Learning Extension Points Configuration\nDESCRIPTION: Extension point definitions for ML task approach building and smart pipeline running implementations. These are internal platform APIs for machine learning functionality.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/resources/intellij_platform_extension_point_list.md#2025-04-06_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\nml.xml\n```\n\n----------------------------------------\n\nTITLE: Configuring runIdeForUiTests Task in Groovy\nDESCRIPTION: Example of registering and configuring the runIdeForUiTests task with Robot Server plugin and specific JVM arguments in Groovy DSL.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_tasks.md#2025-04-06_snippet_11\n\nLANGUAGE: groovy\nCODE:\n```\nintellijPlatformTesting.runIde {\n  runIdeForUiTests {\n    task {\n      jvmArgumentProviders.add({\n        [\n          \"-Drobot-server.port=8082\",\n          \"-Dide.mac.message.dialogs.as.sheets=false\",\n          \"-Djb.privacy.policy.text=<!--999.999-->\",\n          \"-Djb.consents.confirmation.enabled=false\",\n        ]\n      } as CommandLineArgumentProvider)\n    }\n    plugins {\n      robotServerPlugin()\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Local Link to Got It Tooltip in Kotlin\nDESCRIPTION: This Kotlin code demonstrates how to add a local link to a Got It tooltip. The link is associated with an action method reference.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/ui/controls/got_it_tooltip.md#2025-04-06_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nGotItTooltip(TOOLTIP_ID, TOOLTIP_TEXT, parentDisposable)\n    .withLink(\"Disable for all files\", this::actionMethodReference)\n```\n\n----------------------------------------\n\nTITLE: Converting Encrypted Private Key to RSA Format\nDESCRIPTION: Command to convert the encrypted private key to RSA format for use with the plugin signing process. The resulting private.pem file will be used for the signPlugin.privateKey property.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/plugin_signing.md#2025-04-06_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nopenssl rsa\\\n  -in private_encrypted.pem\\\n  -out private.pem\n```\n\n----------------------------------------\n\nTITLE: Font Style Definitions using JBFont in Java\nDESCRIPTION: Standard font style definitions for different heading levels and text styles using JBFont utility class. These are used to maintain consistent typography across the IDE interface.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/ui/principles/typography.md#2025-04-06_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nJBFont.h0().asBold()\n```\n\nLANGUAGE: Java\nCODE:\n```\nJBFont.h1().asBold()\n```\n\nLANGUAGE: Java\nCODE:\n```\nJBFont.h2()\n```\n\nLANGUAGE: Java\nCODE:\n```\nJBFont.h2().asBold()\n```\n\nLANGUAGE: Java\nCODE:\n```\nJBFont.h3()\n```\n\nLANGUAGE: Java\nCODE:\n```\nJBFont.h3().asBold()\n```\n\nLANGUAGE: Java\nCODE:\n```\nJBFont.h4().asBold()\n```\n\nLANGUAGE: Java\nCODE:\n```\nJBFont.regular().asBold()\n```\n\nLANGUAGE: Java\nCODE:\n```\nJBFont.regular()\n```\n\nLANGUAGE: Java\nCODE:\n```\nJBFont.medium()\n```\n\nLANGUAGE: Java\nCODE:\n```\nJBFont.medium().asBold()\n```\n\nLANGUAGE: Java\nCODE:\n```\nJBFont.small()\n```\n\n----------------------------------------\n\nTITLE: Adding Spring Bean Reference in DOM Element\nDESCRIPTION: Template for adding a reference to a Spring bean in a DOM element using Spring API. The code shows how to define a getter method with conversion to SpringBeanPointer and optional bean type restriction.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/products/idea/spring_api.md#2025-04-06_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@Convert(SpringBeanResolveConverter.class)\n@RequiredBeanType(\"fqn.to.required.class\") // optional\nGenericAttributeValue<SpringBeanPointer> getMyAttributeName();\n```\n\n----------------------------------------\n\nTITLE: HTML Table Definition - IDE and UI Component Properties\nDESCRIPTION: HTML table defining the properties available for IDE and UI components like DialogWrapper, ToolWindow, and Tree.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/ide_tooling/internal_actions/internal_ui_inspector.md#2025-04-06_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n| Type                                 | Properties                                                                                                                                                                                                                                              |\n|--------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| [`DialogWrapper`](dialog_wrapper.md) | <control>dialogWrapperClass</control> - [`DialogWrapper`](%gh-ic%/platform/platform-api/src/com/intellij/openapi/ui/DialogWrapper.java) implementation                                                                                                  |\n| [`ToolWindow`](tool_windows.md)      | <p><control>Tool Window ID</control> - `id`</p><p><control>Tool Window Icon</control> - `icon`</p><p><control>Tool Window Factory</control> - [`ToolWindowFactory`](%gh-ic%/platform/platform-api/src/com/intellij/openapi/wm/ToolWindowFactory.kt)</p> |\n| [`Tree`](lists_and_trees.md)         | <control>treeModelClass</control> - `javax.swing.tree.TreeModel` implementation                                                                                                                                                                         |\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Task with PluginAware Interface in Kotlin\nDESCRIPTION: Example showing how to create a custom Gradle task that implements the PluginAware interface to access plugin information in Kotlin. The task retrieves the plugin name from the plugin.xml file and writes it to a text file.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_task_awares.md#2025-04-06_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport org.jetbrains.intellij.platform.gradle.tasks.aware.PluginAware\n\nabstract class RetrievePluginNameTask : DefaultTask(), PluginAware\n\nval retrievePluginName by tasks.registering(RetrievePluginNameTask::class) {\n    val outputFile = layout.buildDirectory.file(\"pluginName.txt\")\n\n    doLast {\n        outputFile.get().asFile.writeText(pluginXml.parse { name }.get())\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Live Template Variable in XML\nDESCRIPTION: This XML snippet demonstrates how to define a variable for a live template. It includes attributes for the variable name, expression, default value, and whether to always stop at this variable during template expansion.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/live_templates/live_templates_configuration_file.md#2025-04-06_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<variable\n    name=\"MY_VAR\"\n    expression=\"\"\n    defaultValue=\"\"\n    alwaysStopAt=\"true\"/>\n```\n\n----------------------------------------\n\nTITLE: Declaring Dynamic Action Group Class\nDESCRIPTION: Java class declaration for a dynamic action group that will contain variable sets of actions.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/action_system/grouping_actions_tutorial.md#2025-04-06_snippet_8\n\nLANGUAGE: java\nCODE:\n```\npublic class DynamicActionGroup extends ActionGroup {\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Multiple Old Icons to a Single New UI Icon in JSON\nDESCRIPTION: Shows how to map multiple existing icons to a single new icon in the New UI. This is useful when consolidating icons or updating the icon set for the new interface.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/icons.md#2025-04-06_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n\"vcs.svg\": [\n  \"toolwindows/toolWindowChanges.svg\",\n  \"vcs/branch.svg\"\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing PythonCore Extension Point in Kotlin\nDESCRIPTION: Example of how to implement a PythonCore extension point in Kotlin. This snippet shows a basic implementation of the PyCondaSdkCustomizer interface.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/resources/intellij_community_plugins_extension_point_list.md#2025-04-06_snippet_23\n\nLANGUAGE: Kotlin\nCODE:\n```\nclass MyCondaSdkCustomizer : PyCondaSdkCustomizer {\n    override fun customizeCondaSdk(condaSdk: PyCondaSdk) {\n        // Implementation\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing UAST and PSI Tree Traversal in Kotlin\nDESCRIPTION: This snippet demonstrates the potential mismatch between UAST and PSI tree structures by comparing two different ways of traversing the tree: one using UAST parents and another using PSI parents.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/architectural_overview/uast.md#2025-04-06_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\ngenerateSequence(uElement, UElement::uastParent).mapNotNull { it.sourcePsi }\ngenerateSequence(uElement.sourcePsi) { it.parent }\n```\n\n----------------------------------------\n\nTITLE: Local IDE Path Configuration\nDESCRIPTION: Path configuration for using a locally installed IDE distribution to build the plugin. Provides examples for Windows, macOS and Linux paths.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/gradle_intellij_plugin/tools_gradle_intellij_plugin.md#2025-04-06_snippet_10\n\nLANGUAGE: properties\nCODE:\n```\nintellij.localPath=C:\\Users\\user\\AppData\\Local\\JetBrains\\Toolbox\\apps\\IDEA-U\\ch-0\\211.7142.45\n```\n\n----------------------------------------\n\nTITLE: Debug and Eclipse Integration Extensions\nDESCRIPTION: Interfaces for stream debugger library support and Eclipse project nature importing functionality.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/resources/intellij_community_plugins_extension_point_list.md#2025-04-06_snippet_17\n\nLANGUAGE: text\nCODE:\n```\nLibrarySupportProvider\nEclipseNatureImporter\n```\n\n----------------------------------------\n\nTITLE: Adding idea-ext Plugin Dependency in Groovy\nDESCRIPTION: Shows how to add an explicit dependency on the gradle-idea-ext-plugin in Groovy build script.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_migration.md#2025-04-06_snippet_9\n\nLANGUAGE: groovy\nCODE:\n```\nplugins {\n  id 'org.jetbrains.gradle.plugin.idea-ext' version '1.1.9'\n}\n```\n\n----------------------------------------\n\nTITLE: Adding an External Link to Got It Tooltip in Kotlin\nDESCRIPTION: This Kotlin snippet demonstrates how to add an external browser link to a Got It tooltip. It uses the withBrowserLink method to specify the link text and URL.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/ui/controls/got_it_tooltip.md#2025-04-06_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nGotItTooltip(TOOLTIP_ID, GOT_IT_TEXT, parentDisposable)\n    .withBrowserLink(\"How to use\", new URL(\"https://example.com\"))\n```\n\n----------------------------------------\n\nTITLE: Creating Template Example Files\nDESCRIPTION: Create before.$EXTENSION$.template and after.$EXTENSION$.template files to show examples of the template usage.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/postfix_completion/postfix_templates.md#2025-04-06_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\n// File: resources/postfixTemplates/CustomPostfixTemplate/before.java.template\n<spot>expression</spot>$key\n```\n\nLANGUAGE: Java\nCODE:\n```\n// File: resources/postfixTemplates/CustomPostfixTemplate/after.java.template\nCustomType result = expression;<spot></spot>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating PHP File Path Utility Usage\nDESCRIPTION: PHP code snippet demonstrating the usage of __DIR__ concatenation, which PhpFilePathUtils can interpret for path resolution and autocompletion.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/products/phpstorm/php_open_api.md#2025-04-06_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n// in file: /bin/folder/file.php\n__DIR__ . \"/file2.php\";\n```\n\n----------------------------------------\n\nTITLE: Grouping Components in Cell in Kotlin UI DSL\nDESCRIPTION: Demonstrates how to group multiple components into a single cell using the cell method in Kotlin UI DSL.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/user_interface_components/kotlin_ui_dsl.md#2025-04-06_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nrow {\n  // These two components will occupy two columns in the grid\n  label(...)\n  textField(...)\n\n  // These two components will be placed in the same grid cell\n  cell {\n    label(...)\n    textField(...)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Repositories in Gradle (Kotlin)\nDESCRIPTION: Configures Maven repositories for accessing IntelliJ Platform releases and dependencies using Kotlin DSL in Gradle build script.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/intellij_artifacts.md#2025-04-06_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nrepositories {\n  maven(\"https://www.jetbrains.com/intellij-repository/releases\")\n  maven(\"https://cache-redirector.jetbrains.com/intellij-dependencies\")\n}\n```\n\n----------------------------------------\n\nTITLE: Adding idea-ext Plugin Dependency in Kotlin\nDESCRIPTION: Shows how to add an explicit dependency on the gradle-idea-ext-plugin which is no longer included by default.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_migration.md#2025-04-06_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n  id(\"org.jetbrains.gradle.plugin.idea-ext\") version \"1.1.9\"\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Internal Template in XML\nDESCRIPTION: Shows how to register an internal file template to make it available in the Files category.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/file_and_code_templates/using_file_templates.md#2025-04-06_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<internalFileTemplate name=\"My Record\"/>\n```\n\n----------------------------------------\n\nTITLE: Registering SpellcheckingStrategy in plugin.xml\nDESCRIPTION: XML configuration that registers the SimpleSpellcheckingStrategy with the IntelliJ Platform for the Simple language through the spellchecker.support extension point.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/custom_language_support/spell_checking_strategy.md#2025-04-06_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<extensions defaultExtensionNs=\"com.intellij\">\n  <spellchecker.support language=\"Simple\" implementationClass=\"org.intellij.sdk.language.SimpleSpellcheckingStrategy\"/>\n</extensions>\n```\n\n----------------------------------------\n\nTITLE: Registering an Editor Action in plugin.xml\nDESCRIPTION: XML configuration to register a custom editor action in the plugin.xml file. This adds an 'Editor Add Caret' action to the editor context menu.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/editor_basics/editor_events.md#2025-04-06_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<actions>\n  <action\n      id=\"EditorBasics.EditorHandlerIllustration\"\n      class=\"org.intellij.sdk.editor.EditorHandlerIllustration\"\n      text=\"Editor Add Caret\"\n      description=\"Adds a second caret below the existing one.\"\n      icon=\"SdkIcons.Sdk_default_icon\">\n    <add-to-group group-id=\"EditorPopupMenu\" anchor=\"first\"/>\n  </action>\n</action>\n```\n\n----------------------------------------\n\nTITLE: Specifying Skip Before/After Preview for Intentions in XML\nDESCRIPTION: XML configuration to indicate that an intention cannot show a meaningful before/after preview. This is used for intentions that do not modify code.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/api_notable/api_notable_list_2023.md#2025-04-06_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<skipBeforeAfter>true</skipBeforeAfter>\n```\n\n----------------------------------------\n\nTITLE: Converting PsiElement to Multiple UElement Alternatives in Kotlin\nDESCRIPTION: Shows how to convert a PsiElement that represents multiple UElements (e.g., a Kotlin primary constructor parameter) in Kotlin.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/architectural_overview/uast.md#2025-04-06_snippet_7\n\nLANGUAGE: Kotlin\nCODE:\n```\nUastFacade.convertToAlternatives(element,\n    UField::class.java, UParameter::class.java)\n```\n\n----------------------------------------\n\nTITLE: Enabling Profiling for External Build Process\nDESCRIPTION: VM option to enable CPU profiling in the external build process. When enabled, every build process run will generate a CPU snapshot for performance analysis.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/frameworks_and_external_apis/external_builder_api.md#2025-04-06_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\n-Dprofiling.mode=true\n```\n\n----------------------------------------\n\nTITLE: Test Framework Class for Java Code Insight Testing\nDESCRIPTION: Reference to LightJavaCodeInsightFixtureTestCase4 class, a JUnit4 variant for Java code insight testing fixtures.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/api_notable/api_notable_list_2021.md#2025-04-06_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nLightJavaCodeInsightFixtureTestCase4\n```\n\n----------------------------------------\n\nTITLE: Adding Local Plugin Dependencies\nDESCRIPTION: Shows how to add dependencies on plugins available in the local file system.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/gradle_intellij_plugin/tools_gradle_intellij_plugin_faq.md#2025-04-06_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nintellij {\n    plugins.set(listOf(file(\"/path/to/plugin/\")))\n}\n```\n\nLANGUAGE: groovy\nCODE:\n```\nintellij {\n    plugins = [file(\"/path/to/plugin/\")]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin Signing in Gradle IntelliJ Plugin with Groovy DSL\nDESCRIPTION: Example configuration for the signPlugin task in Gradle using Groovy DSL. It shows how to set up certificate chain, private key, and password directly in the build script for plugin signing.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/plugin_signing.md#2025-04-06_snippet_4\n\nLANGUAGE: groovy\nCODE:\n```\nsignPlugin {\n  certificateChain = \"\"\"\n    -----BEGIN CERTIFICATE-----\n    MIIElgCCAn4CCQDo83LWYj2QSTANBgkqhkiG9w0BAQsFADANMQswCQYDVQQGEwJQ\n    ...\n    gdZzxCN8t1EmH8kD2Yve6YKGFCRAIIzveEg=\n    -----END CERTIFICATE-----\n  \"\"\".stripIndent()\n\n  privateKey = \"\"\"\n    -----BEGIN RSA PRIVATE KEY-----\n    MIIJKgIBAAKCAgEAwU8awS22Rw902BmwVDDBMlTREX440BAAVM40NW3E0lJ7YTJG\n    ...\n    EnNBfIVFhh6khisKqTBWSEo5iS2RYJcuZs961riCn1LARztiaXL4l17oW8t+Qw==\n    -----END RSA PRIVATE KEY-----\n  \"\"\".stripIndent()\n\n  password = \"8awS22%#3(4wVDDBMlTREX\"\n}\n\npublishPlugin {\n  token = \"perm:a961riC....l17oW8t+Qw==\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Multi-OS Archives for IntelliJ Platform Dependency in Kotlin\nDESCRIPTION: Example showing how to specify IntelliJ Platform dependency using Multi-OS ZIP archives instead of installers by setting useInstaller parameter to false.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_dependencies_extension.md#2025-04-06_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nrepositories {\n  intellijPlatform {\n    defaultRepositories()\n  }\n}\n\ndependencies {\n  intellijPlatform {\n    intellijIdeaCommunity(\"%ijPlatform%\", useInstaller = false)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Union Types Example\nDESCRIPTION: Example demonstrating union types where a variable can have multiple possible types based on runtime conditions.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/products/phpstorm/php_open_api_php_type_providers.md#2025-04-06_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$a = 100;\nif (rand(0, 10) > 5) {\n  $a = \"Hello World!\";\n}\n\n$a; // (1)\n```\n\n----------------------------------------\n\nTITLE: Mixed Collection Element Addition Methods\nDESCRIPTION: Method declarations for adding elements to mixed collections with different tag names.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/frameworks_and_external_apis/xml_dom_api.md#2025-04-06_snippet_16\n\nLANGUAGE: java\nCODE:\n```\n@SubTagsList(value = { \"foo\", \"bar\" }, tagName = \"foo\")\nFooBar addFoo();\n\n@SubTagsList(value = { \"foo\", \"bar\" }, tagName = \"bar\")\nFooBar addBar(int index);\n```\n\n----------------------------------------\n\nTITLE: Registering Additional Text Attributes in plugin.xml\nDESCRIPTION: XML configuration for the plugin.xml file to register additional text attributes for specific color schemes. This example adds custom attributes for the 'Default' scheme.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/color_scheme_management.md#2025-04-06_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<extensions defaultExtensionNs=\"com.intellij\">\n  ...\n  <additionalTextAttributes\n      scheme=\"Default\"\n      file=\"colorSchemes/MyLangDefault.xml\"/>\n  ...\n</extensions>\n```\n\n----------------------------------------\n\nTITLE: Defining inputArchiveFile Property for VerifyPluginSignature Task in Gradle\nDESCRIPTION: Specifies the inputArchiveFile property for the VerifyPluginSignature task. It defines the input signed ZIP archive file and is provided by the signPlugin task.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/gradle_intellij_plugin/tools_gradle_intellij_plugin.md#2025-04-06_snippet_19\n\nLANGUAGE: markdown\nCODE:\n```\n#### `inputArchiveFile`\n{#tasks-verifypluginsignature-inputarchivefile}\n\nInput, signed ZIP archive file.\nRefers to `in` CLI option.\n\nProvided by the [`signPlugin`](#tasks-signplugin) task.\n```\n\n----------------------------------------\n\nTITLE: Test Data File Path Example\nDESCRIPTION: File path annotation used to mark test data file parameters in test methods\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/testing_plugins/test_project_and_testdata_directories.md#2025-04-06_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\n@TestDataFile\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Plugin Repository with Authentication in Kotlin\nDESCRIPTION: Demonstrates how to add a custom plugin repository with HTTP header authentication credentials in Kotlin. The example shows setting up a repository pointing to a plugins.xml listing file with an Authorization header.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_repositories_extension.md#2025-04-06_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nimport com.jetbrains.plugin.structure.intellij.repository.CustomPluginRepositoryListingType\n\nrepositories {\n  intellijPlatform {\n    customPluginRepository(\"https://example.com/plugins.xml\", CustomPluginRepositoryType.SIMPLE) {\n      credentials<HttpHeaderCredentials> {\n        name = \"Authorization\"\n        value = \"Automation amFrdWJfdGVzdDotX...MkV2UkFwekFWTnNwZjA=\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: XML Configuration for Live Template Definition\nDESCRIPTION: XML configuration that defines the template structure, variables, and formatting options for a Markdown link reference template.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/live_templates/providing_live_templates.md#2025-04-06_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<templateSet group=\"Markdown\">\n  <template\n      name=\"{\"\n      value=\"[$TEXT$]($LINK$)$END$\"\n      description=\"SDK: New link reference\"\n      toReformat=\"false\"\n      toShortenFQNames=\"false\">\n    <variable\n        name=\"TEXT\"\n        expression=\"\"\n        defaultValue=\"\"\n        alwaysStopAt=\"true\"/>\n    <variable\n        name=\"LINK\"\n        expression=\"complete()\"\n        defaultValue=\"\"\n        alwaysStopAt=\"true\"/>\n  </template>\n</templateSet>\n```\n\n----------------------------------------\n\nTITLE: Registering About Popup Description Provider Extension Point\nDESCRIPTION: Example of registering an About Popup Description Provider to add custom information to the IDE's About dialog.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/api_notable/api_notable_list_2020.md#2025-04-06_snippet_6\n\nLANGUAGE: XML\nCODE:\n```\n<com.intellij.aboutPopupDescriptionProvider/>\n```\n\n----------------------------------------\n\nTITLE: Converting PsiElement to Multiple UElement Alternatives in Java\nDESCRIPTION: Demonstrates how to convert a PsiElement that represents multiple UElements (e.g., a Kotlin primary constructor parameter) in Java.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/architectural_overview/uast.md#2025-04-06_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\nUastFacade.INSTANCE.convertToAlternatives(element,\n    new Class[]{UField.class, UParameter.class});\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-Caret Code Insight Actions (Java)\nDESCRIPTION: To support multiple carets in code insight actions, developers should subclass MultiCaretCodeInsightAction instead of CodeInsightAction. This allows for different editor and PSI instances for each caret.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/multiple_carets.md#2025-04-06_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nclass MyAction extends MultiCaretCodeInsightAction {\n    // Implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Java PlainTextSymbolCompletionContributor Reference\nDESCRIPTION: Reference to the Java class for implementing symbol completion in plain text editors like VCS commit messages.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/api_notable/api_notable_list_2019.md#2025-04-06_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nPlainTextSymbolCompletionContributor\n```\n\n----------------------------------------\n\nTITLE: Configuring Debug Log Settings for LSP Communication\nDESCRIPTION: This code snippet shows the configuration entry to add to the Debug Log Settings dialog to include IDE and LSP server communication logs in the IDE log file. It enables logging for the com.intellij.platform.lsp package.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/custom_language_support/language_server_protocol.md#2025-04-06_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n#com.intellij.platform.lsp\n```\n\n----------------------------------------\n\nTITLE: Class Relationship Diagram in PlantUML\nDESCRIPTION: UML diagram showing relationships between key classes in the Execution API, including Configuration classes (RunProfile, RunConfiguration, RunProfileState) and Execution classes (Executor, ProgramRunner, ExecutionEnvironment, etc).\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/execution/execution.md#2025-04-06_snippet_0\n\nLANGUAGE: plantuml\nCODE:\n```\n@startuml\n\nskinparam DefaultFontName JetBrains Sans\nskinparam DefaultFontSize 14\nhide empty members\nhide circle\n\npackage Configuration <<Rectangle>> {\ninterface RunProfile\ninterface RunConfiguration\ninterface RunProfileState\n}\n\npackage Execution <<Rectangle>> {\nabstract class Executor\ninterface ProgramRunner\nclass ExecutionEnvironment\nclass RunContentBuilder\nabstract class ExecutionResult\ninterface ExecutionConsole\nabstract class ProcessHandler\n}\n\nRunProfile <|.. RunConfiguration\nRunProfile --> RunProfileState: creates\n\nRunProfileState --> ExecutionResult: prepares\n\nExecutionResult o-- \"1\" ExecutionConsole\nExecutionResult o-- \"1\" ProcessHandler\n\nProgramRunner --> RunProfile: executes\nProgramRunner --> Executor\nProgramRunner --> ExecutionEnvironment\nProgramRunner -r-> RunContentBuilder\n\n@enduml\n```\n\n----------------------------------------\n\nTITLE: Adding a Header to Got It Tooltip in Kotlin\nDESCRIPTION: This snippet demonstrates how to add a header to a Got It tooltip using Kotlin. It creates a new GotItTooltip instance with an ID, text, and parent disposable, then adds a header using the withHeader method.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/ui/controls/got_it_tooltip.md#2025-04-06_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nGotItTooltip(TOOLTIP_ID, GET_IT_TEXT, parentDisposable)\n    .withHeader(\"The reader mode is on\")\n```\n\n----------------------------------------\n\nTITLE: Implementing update() Method in AnAction Class for Dynamic Action Control\nDESCRIPTION: This code snippet shows how to implement the update() method to control an action's visibility and availability based on context. It enables the action only when a Project object is available, ensuring consistent behavior by setting both enabled state and visibility on the Presentation object.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/action_system/creating_actions_tutorial.md#2025-04-06_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: PhpTypeProvider4 Interface Definition\nDESCRIPTION: Java interface definition for implementing custom PHP type providers in PhpStorm plugins.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/products/phpstorm/php_open_api_php_type_providers.md#2025-04-06_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npublic interface PhpTypeProvider4 {\n  ExtensionPointName<PhpTypeProvider4> EP_NAME = ExtensionPointName.create(\"com.jetbrains.php.typeProvider4\");\n\n  char getKey();\n\n  @Nullable\n  PhpType getType(PsiElement element);\n\n  @Nullable\n  PhpType complete(String expression, Project project);\n\n  Collection<? extends PhpNamedElement> getBySignature(String expression, Set<String> visited, int depth, Project project);\n\n  default boolean emptyResultIsComplete() {\n    return false;\n  }\n\n  @Internal\n  default boolean interceptsNativeSignature() {\n    return false;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring IntelliJ Platform Settings Plugin in Groovy\nDESCRIPTION: Configuration example for settings.gradle using the IntelliJ Platform Settings plugin with Groovy syntax for dependency repository management.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_plugins.md#2025-04-06_snippet_8\n\nLANGUAGE: groovy\nCODE:\n```\nimport org.jetbrains.intellij.platform.gradle.extensions.intellijPlatform\n\nplugins {\n  id 'org.jetbrains.intellij.platform.settings' version '%intellij-platform-gradle-plugin-version%'\n}\n\nrootProject.name = '...'\n\ndependencyResolutionManagement {\n  repositoriesMode = RepositoriesMode.FAIL_ON_PROJECT_REPOS\n\n  repositories {\n    mavenCentral()\n\n    intellijPlatform {\n      defaultRepositories()\n    }\n  }\n}\n\ninclude ':submodule'\n```\n\n----------------------------------------\n\nTITLE: Configuring freeArgs for runPluginVerifier Task in Gradle\nDESCRIPTION: The freeArgs property allows passing arbitrary command line arguments to the IntelliJ Plugin Verifier. It accepts a list of strings, where arguments requiring values must be provided as separate elements.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/gradle_intellij_plugin/tools_gradle_intellij_plugin.md#2025-04-06_snippet_14\n\nLANGUAGE: Gradle\nCODE:\n```\nfreeArgs = [\"-team-city\"]\n// or\nfreeArgs = [\"-suppress-internal-api-usages\", \"jetbrains-plugins\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Framework Dependencies Note for IntelliJ Platform\nDESCRIPTION: This snippet contains a note about explicitly declaring all required test-framework dependencies for IntelliJ Platform plugin testing. It's marked as applicable for version 2024.2 and newer.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/testing_plugins/tests_and_fixtures.md#2025-04-06_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n> All required [test-framework dependencies](tools_intellij_platform_gradle_plugin_dependencies_extension.md#testing) must be declared explicitly.\n>\n{title=\"Configuring Test Frameworks (2024.2+)\"}\n```\n\n----------------------------------------\n\nTITLE: Defining Live Template XML Configuration\nDESCRIPTION: XML configuration for a Live Template that uses the custom titleCase function. Defines template name, value, description, and variable with expression using the new function.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/live_templates/creating_live_template_functions.md#2025-04-06_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<template\n    name=\"mc\"\n    value=\"$TITLE$\"\n    description=\"SDK: Convert to title case\"\n    toReformat=\"true\"\n    toShortenFQNames=\"false\">\n  <variable\n      name=\"TITLE\"\n      expression=\"titleCase(SELECTION)\"\n      defaultValue=\"the quick brown fox\"\n      alwaysStopAt=\"true\"/>\n  <context>\n    <option name=\"MARKDOWN\" value=\"true\"/>\n  </context>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle to Prioritize Project Dependencies over IDE Bundled Libraries (Groovy)\nDESCRIPTION: This Groovy snippet adds a configuration to a Gradle build script that changes the resolution strategy to prioritize project-defined dependencies over the bundled IDE versions. It uses the DEPENDENCY_FIRST sort order to ensure project dependencies are loaded first.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/plugin_structure/plugin_class_loaders.md#2025-04-06_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\nconfigurations.all {\n  resolutionStrategy.sortArtifacts(ResolutionStrategy.SortOrder.DEPENDENCY_FIRST)\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom TypedActionHandler\nDESCRIPTION: Static initialization block that registers a custom TypedActionHandler with the EditorActionManager. This ensures the handler receives editor keystroke events.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/editor_basics/editor_events.md#2025-04-06_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\npublic class EditorHandlerIllustration extends AnAction {\n  static {\n    EditorActionManager actionManager = EditorActionManager.getInstance();\n    TypedAction typedAction = actionManager.getTypedAction();\n    typedAction.setupHandler(new MyTypedHandler());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Legacy Gradle Plugin Sandbox Path (1.x)\nDESCRIPTION: Default sandbox directory paths for IntelliJ Gradle Plugin 1.x on Windows and Linux/macOS systems.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/ide_development_instance.md#2025-04-06_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nWindows: $PROJECT_DIRECTORY$\\build\\idea-sandbox\nLinux/macOS: $PROJECT_DIRECTORY$/build/idea-sandbox\n```\n\n----------------------------------------\n\nTITLE: Configuring Until Build Version with Null Provider\nDESCRIPTION: Example showing how to unset the until-build attribute using a null provider.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_extension.md#2025-04-06_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nintellijPlatform {\n  pluginConfiguration {\n    ideaVersion {\n      untilBuild = provider { null }\n    }\n  }\n}\n```\n\nLANGUAGE: groovy\nCODE:\n```\nintellijPlatform {\n  pluginConfiguration {\n    ideaVersion {\n      untilBuild = provider { null }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Icon Replacement\nDESCRIPTION: Demonstrates how to replace default icons with custom SVG icons.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/getting_started/theme/themes_customize.md#2025-04-06_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"icons\": {\n    \"/actions/compile.svg\": \"/factory.svg\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Project Structure Detector for Module Creation\nDESCRIPTION: Java implementation of the setupProjectStructure method to create a module when importing a project from existing sources, used with ProjectStructureDetector.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/project_wizard.md#2025-04-06_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void setupProjectStructure(@NotNull Collection<DetectedProjectRoot> roots,\n                              @NotNull ProjectDescriptor projectDescriptor,\n                              @NotNull ProjectFromSourcesBuilder builder) {\n  List<ModuleDescriptor> modules = projectDescriptor.getModules();\n  if (modules.isEmpty()) {\n    modules = new ArrayList<>();\n    for (DetectedProjectRoot root : roots) {\n      modules.add(new ModuleDescriptor(root.getDirectory(),\n          MyModuleType.getInstance(), ContainerUtil.emptyList()));\n    }\n    projectDescriptor.setModules(modules);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Module Builder Extension in plugin.xml\nDESCRIPTION: XML configuration to register a new module builder extension in the plugin.xml file that adds a custom wizard step.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/project_wizard/adding_new_steps.md#2025-04-06_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<extensions defaultExtensionNs=\"com.intellij\">\n  <moduleBuilder\n      builderClass=\"org.intellij.sdk.project.wizard.DemoModuleWizardStep\"\n      id=\"DEMO_STEP\"\n      order=\"first\"/>\n</extensions>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Match Arms from PHP Match Expression\nDESCRIPTION: Shows how to access the list of match arms and the default arm in a PHP 8 match expression using the new PSI elements.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/products/phpstorm/php_open_api_breaking_changes_203.md#2025-04-06_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nPhpMatchExpression#getMatchArms()\nPhpMatchExpression#getDefaultMatchArm()\n```\n\n----------------------------------------\n\nTITLE: Removing ConcurrentHashSet Class in IntelliJ Platform 2019.3\nDESCRIPTION: The 'ConcurrentHashSet' class has been removed. Users should use 'ContainerUtil#newConcurrentSet' instead.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/reference_guide/api_changes_list_2019.md#2025-04-06_snippet_7\n\nLANGUAGE: Java\nCODE:\n```\ncom.intellij.util.containers.ConcurrentHashSet\n```\n\n----------------------------------------\n\nTITLE: Configuring IntelliJ Extension in Kotlin build script\nDESCRIPTION: Sets up the IntelliJ extension for the Gradle IntelliJ Plugin using Kotlin DSL. Configures the IntelliJ Platform version, type (Ultimate Edition), and PHP plugin dependency.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/gradle_intellij_plugin/tools_gradle_intellij_plugin.md#2025-04-06_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nintellij {\n  version.set(\"2022.1.1\")\n  type.set(\"IU\")\n  plugins.set(listOf(\"com.jetbrains.php:221.5787.21\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Coroutine Dump Structure\nDESCRIPTION: Shows the basic hierarchical structure of a coroutine dump with parent-child relationships and stackframes.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/architectural_overview/threading/coroutines/coroutine_dumps.md#2025-04-06_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n- parent coroutine header\n\tat stackframe\n\tat stackframe\n\t...\n\t- child coroutine 0 header\n\t\tat stackframe\n\t\tat stackframe\n\t\t...\n\t\t- grandchild coroutine header\n\t\t\tat stackframe\n\t\t\tat stackframe\n\t\t\t...\n\t- child coroutine 1 header\n\t- child coroutine 2 header\n\t\tat stackframe\n\t\tat stackframe\n\t\t...\n```\n\n----------------------------------------\n\nTITLE: Implementing ModuleBuilder Required Methods\nDESCRIPTION: Java code showing the mandatory methods to implement when extending ModuleBuilder: setupRootModel to configure the module root and getModuleType to specify the module type.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/project_wizard.md#2025-04-06_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic abstract void setupRootModel(\n    ModifiableRootModel modifiableRootModel) throws ConfigurationException;\n```\n\nLANGUAGE: java\nCODE:\n```\npublic abstract ModuleType getModuleType();\n```\n\n----------------------------------------\n\nTITLE: Reporting Progress with ProgressManager in Java\nDESCRIPTION: Shows how to use ProgressManager methods to report progress when a ProgressIndicator instance is not available in the current context. It includes methods for reporting progress texts and obtaining a ProgressIndicator instance.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/architectural_overview/threading/background_processes.md#2025-04-06_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nprogress() // counterpart of ProgressIndicator.setText()\nprogress2() // counterpart of ProgressIndicator.setText2()\ngetProgressIndicator() // gets an indicator instance associated with the current thread\n```\n\n----------------------------------------\n\nTITLE: Registering Console Filter Provider in XML\nDESCRIPTION: Registers a ConsoleFilterProvider implementation in the plugin.xml file. This allows for custom console filters to be applied to process output.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/execution/execution.md#2025-04-06_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<include from=\"snippets.topic\" element-id=\"ep\"><var name=\"ep\" value=\"com.intellij.consoleFilterProvider\"/></include>\n```\n\n----------------------------------------\n\nTITLE: Configuring Product Descriptor in IntelliJ Platform Plugin\nDESCRIPTION: Example showing how to configure the product descriptor for a plugin, including code, release date, version and other settings.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_extension.md#2025-04-06_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nintellijPlatform {\n  // ...\n\n  pluginConfiguration {\n    // ...\n\n    productDescriptor {\n      code = \"MY_CODE\"\n      releaseDate = \"20240217\"\n      releaseVersion = \"20241\"\n      optional = false\n      eap = false\n    }\n  }\n}\n```\n\nLANGUAGE: groovy\nCODE:\n```\nintellijPlatform {\n  // ...\n\n  pluginConfiguration {\n    // ...\n\n    productDescriptor {\n      code = 'MY_CODE'\n      releaseDate = '20240217'\n      releaseVersion = '20241'\n      optional = false\n      eap = false\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extension Point Interface - Dart Completion Extension\nDESCRIPTION: Interface for extending Dart code completion functionality\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/resources/oss_plugins_extension_point_list.md#2025-04-06_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nDart.completionExtension\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-line Values in .properties File\nDESCRIPTION: This example demonstrates how to create a multi-line value using a backslash to continue the value on the next line.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/code_samples/simple_language_plugin/src/test/testData/ParsingTestData.txt#2025-04-06_snippet_1\n\nLANGUAGE: Properties\nCODE:\n```\n# The backslash below tells the application to continue reading\n# the value onto the next line.\nmessage = Welcome to \\n          Wikipedia!\n```\n\n----------------------------------------\n\nTITLE: Logging Output Example for Dynamic Plugin Memory Leak\nDESCRIPTION: Example log output showing a chain of field references causing a memory leak that prevents dynamic plugin unloading\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/plugin_structure/dynamic_plugins.md#2025-04-06_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n2020-12-26 14:43:24,563 [ 251086]   INFO - lij.ide.plugins.DynamicPlugins - Snapshot analysis result: Root 1:\n  ROOT: Global JNI\n  sun.awt.X11.XInputMethod.clientComponentWindow\n  com.intellij.openapi.wm.impl.IdeFrameImpl.rootPane\n  com.intellij.openapi.wm.impl.IdeRootPane.myToolbar\n  com.intellij.openapi.actionSystem.impl.ActionToolbarImpl.myVisibleActions\n  java.util.ArrayList.elementData\n  java.lang.Object[]\n  com.example.ActionExample.<class>\n  com.example.ActionExample.<loader>\n* com.intellij.ide.plugins.cl.PluginClassLoader\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugins for Custom RunIde Task in Kotlin\nDESCRIPTION: Example of configuring plugins for a custom runIde task in Kotlin. It shows how to add a plugin and disable a plugin using the plugins block.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_testing_extension.md#2025-04-06_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\n  val runIdeWithPlugins by intellijPlatformTesting.runIde.registering {\n  // ...\n  plugins {\n    plugin(\"pluginId\", \"1.0.0\")\n    disablePlugin(\"pluginId\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Publishing Options in Kotlin\nDESCRIPTION: Demonstrates how to set up publishing options for the IntelliJ Platform Gradle plugin using Kotlin DSL. It includes settings for host, token, channels, IDE services, and visibility.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_extension.md#2025-04-06_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nintellijPlatform {\n  // ...\n\n  publishing {\n    host = \"\"\n    token = \"7hR4nD0mT0k3n_8f2eG\"\n    channels = listOf(\"default\")\n    ideServices = false\n    hidden = false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Spring Bean Reference in JAM Element\nDESCRIPTION: Code snippet for adding a reference to a Spring bean in a JAM (Java Annotation Model) element using Spring API's JamAttributeMeta. This approach was introduced in Version 14.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/products/idea/spring_api.md#2025-04-06_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nJamStringAttributeMeta.Single<SpringBeanPointer> ATTRIBUTE_META =\n    JamAttributeMeta.singleString(\"attributeName\",\n        new SpringBeanReferenceJamConverter(\"fqn.to.required.class\"));\n```\n\n----------------------------------------\n\nTITLE: PrettierJS Plugin Extensions\nDESCRIPTION: Extension point for PrettierJS plugin that handles code style installation functionality.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/resources/oss_plugins_extension_point_list.md#2025-04-06_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\nintellij.prettierJS\n```\n\n----------------------------------------\n\nTITLE: Defining Extension Points in duplicates-analysis.xml\nDESCRIPTION: Lists the extension point defined in duplicates-analysis.xml, including its name and implementation.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/resources/intellij_platform_extension_point_list.md#2025-04-06_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<extensionPoints>\n  <extensionPoint name=\"equivalenceDescriptorProvider\" interface=\"com.intellij.dupLocator.equivalence.EquivalenceDescriptorProvider\"/>\n</extensionPoints>\n```\n\n----------------------------------------\n\nTITLE: Applying Gradle IntelliJ Plugin in Groovy build script\nDESCRIPTION: Configures the Gradle IntelliJ Plugin in a Groovy build script by adding it to the plugins section with the specified version.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/gradle_intellij_plugin/tools_gradle_intellij_plugin.md#2025-04-06_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\nplugins {\n  id \"org.jetbrains.intellij\" version \"%gradle-intellij-plugin-version%\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a DynamicBundle-based Message Bundle Class in Java\nDESCRIPTION: Implementation of an ExampleBundle message bundle class in Java that delegates to DynamicBundle. This pattern provides type-safe access to internationalized messages with parameter substitution.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/localization/internationalization.md#2025-04-06_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nfinal class ExampleBundle {\n  @NonNls\n  private static final String BUNDLE = \"messages.ExampleBundle\";\n  private static final DynamicBundle INSTANCE =\n      new DynamicBundle(ExampleBundle.class, BUNDLE);\n\n  private ExampleBundle() {}\n\n  public static @NotNull @Nls String message(\n      @NotNull @PropertyKey(resourceBundle = BUNDLE) String key,\n      Object @NotNull ... params\n  ) {\n    return INSTANCE.getMessage(key, params);\n  }\n\n  public static Supplier<@Nls String> lazyMessage(\n      @NotNull @PropertyKey(resourceBundle = BUNDLE) String key,\n      Object @NotNull ... params\n  ) {\n    return INSTANCE.getLazyMessage(key, params);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Local Link to Got It Tooltip in Java\nDESCRIPTION: This Java code shows how to add a local link to a Got It tooltip. The link is associated with an action method reference.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/ui/controls/got_it_tooltip.md#2025-04-06_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nnew GotItTooltip(TOOLTIP_ID, TOOLTIP_TEXT, parentDisposable)\n    .withLink(\"Disable for all files\", this::actionMethodReference);\n```\n\n----------------------------------------\n\nTITLE: Displaying Progress Text in Empty State (Markdown/HTML)\nDESCRIPTION: Demonstrates the use of progress text in an empty state, such as in search dialogs or details panels.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/ui/controls/progress_indicators.md#2025-04-06_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n![](empty_state_text.png){width=708}\n```\n\n----------------------------------------\n\nTITLE: Learning Resources Notice (Markdown)\nDESCRIPTION: A markdown notice block that directs developers to learn Kotlin Coroutines basics before implementing them in IntelliJ Platform context.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/_shared/coroutines_snippets.md#2025-04-06_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n> This section focuses on explaining coroutines in the specific context of the [IntelliJ Platform](intellij_platform.md).\\n> If you are not experienced with Kotlin Coroutines, it is highly recommended to get familiar with\\n> [](kotlin_coroutines.md#learning-resources) first.\n```\n\n----------------------------------------\n\nTITLE: Setting Custom JetBrains IDEs Releases URL\nDESCRIPTION: Example of specifying a custom URL for fetching the list of JetBrains IDEs releases using the productsReleasesJetBrainsIdesUrl property.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_gradle_properties.md#2025-04-06_snippet_7\n\nLANGUAGE: properties\nCODE:\n```\norg.jetbrains.intellij.platform.productsReleasesJetBrainsIdesUrl=https://...\n```\n\n----------------------------------------\n\nTITLE: WebSymbols Extension Points Declaration\nDESCRIPTION: Defines extension points for web symbols functionality including code completion, context providers, declaration providers, and documentation customization.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/resources/intellij_platform_extension_point_list.md#2025-04-06_snippet_14\n\nLANGUAGE: XML\nCODE:\n```\ncom.intellij.webSymbols.codeCompletionItemCustomizer -> WebSymbolCodeCompletionItemCustomizer\ncom.intellij.webSymbols.context -> WebSymbolsContextProvider\ncom.intellij.webSymbols.declarationProvider -> WebSymbolDeclarationProvider\ncom.intellij.webSymbols.documentationCustomizer -> WebSymbolDocumentationCustomizer\n```\n\n----------------------------------------\n\nTITLE: Creating Credential Attributes in Java\nDESCRIPTION: A utility method to create CredentialAttributes for storing and retrieving credentials. It generates a service name using the 'MySystem' prefix and a provided key.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/persisting_sensitive_data.md#2025-04-06_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nprivate CredentialAttributes createCredentialAttributes(String key) {\n  return new CredentialAttributes(\n    CredentialAttributesKt.generateServiceName(\"MySystem\", key)\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Live Template Context in XML\nDESCRIPTION: This XML snippet shows how to define the context for a live template. It specifies which code contexts the template is applicable to, such as Java code, comments, or strings.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/live_templates/live_templates_configuration_file.md#2025-04-06_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<context>\n  <option name=\"JAVA_CODE\" value=\"true\"/>\n  <option name=\"JAVA_COMMENT\" value=\"false\"/>\n  <option name=\"JAVA_STRING\" value=\"false\"/>\n</context>\n```\n\n----------------------------------------\n\nTITLE: Disabling buildSearchableOptions in Gradle Properties\nDESCRIPTION: Shows how to disable the buildSearchableOptions feature in the gradle.properties file. This is suggested when the plugin doesn't implement any Settings for better performance.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/gradle_intellij_plugin/tools_gradle_intellij_plugin_build_features.md#2025-04-06_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\norg.jetbrains.intellij.buildFeature.buildSearchableOptions=false\n```\n\n----------------------------------------\n\nTITLE: Configuring PyCharm Plugin with Gradle (Groovy DSL)\nDESCRIPTION: Demonstrates how to configure a Gradle build script using Groovy DSL to target PyCharm as the development platform. Sets the type to 'PY' for PyCharm Professional and specifies the version.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/products/dev_alternate_products.md#2025-04-06_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\nintellij {\n  type = 'PY'\n  version = '2019.2.3'\n}\n```\n\n----------------------------------------\n\nTITLE: Plugin Name Configuration\nDESCRIPTION: Property for specifying the plugin name used in ZIP distribution and sandbox directory.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/gradle_intellij_plugin/tools_gradle_intellij_plugin.md#2025-04-06_snippet_9\n\nLANGUAGE: properties\nCODE:\n```\nintellij.pluginName=${project.name}\n```\n\n----------------------------------------\n\nTITLE: Terminal Plugin Extension Points (terminal.xml)\nDESCRIPTION: Extension points for the Terminal plugin including shell command handling, history providers, and terminal customization.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/resources/intellij_community_plugins_extension_point_list.md#2025-04-06_snippet_26\n\nLANGUAGE: XML\nCODE:\n```\n<!-- terminal.xml extension points -->\n<extensionPoints>\n  <extensionPoint name=\"shellCommandHandler\" />\n  <extensionPoint name=\"commandHistoryProvider\" />\n  <extensionPoint name=\"localTerminalCustomizer\" />\n  <extensionPoint name=\"shellSupport\" />\n</extensionPoints>\n```\n\n----------------------------------------\n\nTITLE: Disabling Auto-reload for Dynamic Plugins\nDESCRIPTION: Shows how to disable automatic reload of dynamic plugins in the development instance.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/gradle_intellij_plugin/tools_gradle_intellij_plugin_faq.md#2025-04-06_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks {\n  runIde {\n    autoReloadPlugins.set(false)\n  }\n}\n```\n\nLANGUAGE: groovy\nCODE:\n```\nrunIde {\n  autoReloadPlugins = false\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Predicates for Control Enabling in Kotlin UI DSL\nDESCRIPTION: Shows how to combine multiple predicates to control the enabled state of a component in the Kotlin UI DSL.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/user_interface_components/kotlin_ui_dsl.md#2025-04-06_snippet_23\n\nLANGUAGE: kotlin\nCODE:\n```\ncheckBox(\"Hide tabs if there is no space\", uiSettings::hideTabsIfNeed)\n  .enableIf(myEditorTabPlacement.selectedValueMatches { it != UISettings.TABS_NONE } and\n              myScrollTabLayoutInEditorCheckBox.selected)\n```\n\n----------------------------------------\n\nTITLE: Template Package Property Provider Implementation\nDESCRIPTION: Example from Java Plugin showing how to implement DefaultTemplatePropertiesProvider to provide custom PACKAGE_NAME property based on file creation directory.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/file_and_code_templates/providing_file_templates.md#2025-04-06_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nTemplatePackagePropertyProvider\n```\n\n----------------------------------------\n\nTITLE: Declaring Plugin Dependencies with Gradle IntelliJ Plugin 1.x (Kotlin)\nDESCRIPTION: Adds plugin dependencies to the intellij.plugins parameter in the build script using Kotlin DSL. This method is now obsolete.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/plugin_structure/plugin_dependencies.md#2025-04-06_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nintellij {\n  plugins.set(listOf(\"com.example.another-plugin:1.0\"))\n}\n```\n\n----------------------------------------\n\nTITLE: UI Designer Extension Points\nDESCRIPTION: Extension points for the UI Designer plugin, including palette item providers and form inspection tools.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/resources/intellij_community_plugins_extension_point_list.md#2025-04-06_snippet_5\n\nLANGUAGE: XML\nCODE:\n```\ncom.intellij.paletteItemProvider\ncom.intellij.uiDesigner.formInspectionTool\n```\n\n----------------------------------------\n\nTITLE: Example of Plugin Leak with Intersection Scope in Kotlin\nDESCRIPTION: This snippet illustrates how even using intersection scopes can lead to plugin leaks if not used correctly. When one plugin's service is accessed in a coroutine launched with another plugin's scope, it can cause memory leaks when the first plugin is unloaded.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/architectural_overview/threading/coroutines/coroutine_scopes.md#2025-04-06_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nproject.getCoroutineScope(PluginBService::class.java).launch {\n  project.getService(PluginAService::class.java)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ExtendWordSelectionHandler in Java\nDESCRIPTION: Java code snippet showing the structure of an ExtendWordSelectionHandler implementation with canSelect and select methods.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/text_selection.md#2025-04-06_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\npublic class YourExtendWordSelectionHandler implements ExtendWordSelectionHandler {\n    @Override\n    public boolean canSelect(@NotNull PsiElement e) {\n        // Return true for elements you want to provide additional ranges for\n        return e instanceof YourFunctionCallElement;\n    }\n\n    @Override\n    public List<TextRange> select(@NotNull PsiElement e, @NotNull CharSequence editorText, int cursorOffset, @NotNull Editor editor) {\n        // Compute and return additional text ranges\n        if (e instanceof YourFunctionCallElement) {\n            // Extract range for arguments\n            TextRange argumentsRange = // ... calculate range\n            return Collections.singletonList(argumentsRange);\n        }\n        return Collections.emptyList();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Bundling API Sources in Groovy Gradle Build Script\nDESCRIPTION: Groovy Gradle configuration that creates a source JAR containing Java and Kotlin API sources from a specific package and adds it to the plugin distribution in the required location.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/bundling_plugin_openapi_sources.md#2025-04-06_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\ntask createOpenApiSourceJar(type: Jar) {\n  // Java sources\n  from(sourceSets.main.java) {\n    include '**/com/example/plugin/openapi/**/*.java'\n  }\n  // Kotlin sources\n  from(sourceSets.main.kotlin) {\n    include '**/com/example/plugin/openapi/**/*.kt'\n  }\n  destinationDirectory = layout.buildDirectory.dir('libs')\n  archiveClassifier = 'src'\n}\n\nbuildPlugin {\n  dependsOn(createOpenApiSourceJar)\n  from(createOpenApiSourceJar) { into 'lib/src' }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Self-Update Check in Gradle Properties\nDESCRIPTION: Shows how to disable the self-update check feature in the gradle.properties file. This feature checks if the currently used Gradle IntelliJ Plugin is outdated and if a new release is available.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/gradle_intellij_plugin/tools_gradle_intellij_plugin_build_features.md#2025-04-06_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\norg.jetbrains.intellij.buildFeature.selfUpdateCheck=false\n```\n\n----------------------------------------\n\nTITLE: Plugin Logo File Paths Structure\nDESCRIPTION: Illustrates the required file structure for plugin logo files in the META-INF directory. The plugin logo files must be placed in the resources/META-INF folder of the plugin project.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/plugin_structure/plugin_icon_file.md#2025-04-06_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nresources/META-INF/\n    pluginIcon.svg\n    pluginIcon_dark.svg\n```\n\n----------------------------------------\n\nTITLE: Defining ResolveOptimizingOptionsProvider Extension Point in Kotlin\nDESCRIPTION: Extension point for providing resolve optimizing options in Kotlin. It allows customization of options used during code resolution to optimize performance.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/resources/intellij_community_plugins_extension_point_list.md#2025-04-06_snippet_12\n\nLANGUAGE: XML\nCODE:\n```\n<extensionPoint name=\"idea.caches.resolve.resolveOptimizingOptionsProvider\" interface=\"org.jetbrains.kotlin.idea.caches.resolve.ResolveOptimizingOptionsProvider\"/>\n```\n\n----------------------------------------\n\nTITLE: Adding IntelliJ Plugin Version Badge in Markdown\nDESCRIPTION: Adds a badge showing the version of an IntelliJ plugin. Requires replacing :pluginId with the actual plugin ID.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/resources/marketing.md#2025-04-06_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n![Version](https://img.shields.io/jetbrains/plugin/v/:pluginId)\n```\n\n----------------------------------------\n\nTITLE: Platform Execution Actions Configuration\nDESCRIPTION: Extension points for execution-related functionality including display descriptor choosers and experimental multilaunch condition and task templates.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/resources/intellij_platform_extension_point_list.md#2025-04-06_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\nPlatformExecutionActions.xml\n```\n\n----------------------------------------\n\nTITLE: Adding Integer Text Field in Kotlin UI DSL\nDESCRIPTION: Shows how to add an integer text field with specified columns and range using the Kotlin UI DSL.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/user_interface_components/kotlin_ui_dsl.md#2025-04-06_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nintTextField(uiSettings::editorTabLimit, columns = 4, range = EDITOR_TABS_RANGE)\n```\n\n----------------------------------------\n\nTITLE: Registering Stub Index Extension Point\nDESCRIPTION: Example of registering a stub element type holder in plugin.xml for a custom language.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/indexing_and_psi_stubs/stub_indexes.md#2025-04-06_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<extension point=\"com.intellij.stubIndex\"/>\n```\n\n----------------------------------------\n\nTITLE: CustomCodeStyleSettings Implementation for Simple Language\nDESCRIPTION: Creates custom code style settings by extending CustomCodeStyleSettings. Defines formatting options specific to the Simple language.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/custom_language_support/code_style_settings.md#2025-04-06_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nSimpleCodeStyleSettings\n```\n\n----------------------------------------\n\nTITLE: Replacing AnAction.applyTextOverride() in IntelliJ Platform\nDESCRIPTION: Instead of using the internal API AnAction.applyTextOverride(), developers should use the plugin configuration file to override action text.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/api_internal/api_internal.md#2025-04-06_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<idea-plugin>\\n  <actions>\\n    <action>\\n      <override-text />\\n    </action>\\n  </actions>\\n</idea-plugin>\n```\n\n----------------------------------------\n\nTITLE: Coroutine Header Example\nDESCRIPTION: Shows an example of a coroutine header with its components including name, class, state and context.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/architectural_overview/threading/coroutines/coroutine_dumps.md#2025-04-06_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n-[x5 of] \"my task\":StandaloneCoroutine{Active}, state: SUSPENDED [ComponentManager(ApplicationImpl@xxxxxxxx), Dispatchers.EDT]\n```\n\n----------------------------------------\n\nTITLE: Parent-Child Relationship Example in Kotlin\nDESCRIPTION: Demonstrates the structure of parent-child relationships between workspace entities. Shows how ContentRootEntity is defined as a child of ModuleEntity, with annotations for optional and mandatory relationships.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/workspace_model/workspace_model_entity_properties.md#2025-04-06_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n@Child ChildEntity? // Zero or one child entities\nList<@Child ChildEntity> // Zero, one, or more child entities\nParentEntity // Mandatory parent\nParentEntity? // Optional parent\n```\n\n----------------------------------------\n\nTITLE: PhpStorm Extension Points Configuration\nDESCRIPTION: Markdown table defining PhpStorm extension points for Phing, Psalm, and PhpStan integrations\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/resources/php_extension_point_list.md#2025-04-06_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Extension Point | Implementation |\n|-----------------|----------------|\n| [com.intellij.phing.phpFileDescriptionProvider] | `PhingPhpFileDescriptionProvider` |\n| [com.intellij.phing.propertyFilesManager] | `PropertyFilesManager` |\n| [com.jetbrains.php.tools.quality.Psalm.PsalmConfigurationProvider] | `PsalmConfigurationProvider` |\n| [com.jetbrains.php.tools.quality.PhpStan.PhpStanConfigurationProvider] | `PhpStanConfigurationProvider` |\n```\n\n----------------------------------------\n\nTITLE: Applying IntelliJ Platform Gradle Plugin in Groovy\nDESCRIPTION: Shows how to apply the IntelliJ Platform Gradle Plugin in a Groovy-based Gradle build file.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin.md#2025-04-06_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\nplugins {\n  id 'org.jetbrains.intellij.platform' version '%intellij-platform-gradle-plugin-version%'\n}\n```\n\n----------------------------------------\n\nTITLE: Plugin Logo File Names\nDESCRIPTION: Demonstrates the required naming convention for plugin logo files. The main logo file must be named 'pluginIcon.svg' and the optional dark theme version must be named 'pluginIcon_dark.svg'.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/plugin_structure/plugin_icon_file.md#2025-04-06_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\npluginIcon.svg\npluginIcon_dark.svg\n```\n\n----------------------------------------\n\nTITLE: Conditional Component Enabling in Kotlin UI DSL\nDESCRIPTION: Shows how to conditionally enable a text field based on the state of a checkbox using the enabledIf method.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/user_interface_components/kotlin_ui_dsl_version_2.md#2025-04-06_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nrow {\n  val mailCheckBox = checkBox(\"Use mail:\")\n                      .gap(RightGap.SMALL)\n  textField()\n    .enabledIf(mailCheckBox.selected)\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Table Syntax\nDESCRIPTION: Shows the syntax for creating tables in markdown documentation.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/intro/sdk_style.md#2025-04-06_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n| Column 1 | Column 2 | Column 3 |\n|----------|----------|----------|\n| Blah     | Blah     | Blah     |\n```\n\n----------------------------------------\n\nTITLE: VCS Extension Points Registration XML\nDESCRIPTION: Extension points definition for the Version Control System integration in IntelliJ Platform. Located in VcsExtensionPoints.xml, this file defines the contract between the platform and VCS implementations.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/resources/intellij_platform_extension_point_list.md#2025-04-06_snippet_12\n\nLANGUAGE: XML\nCODE:\n```\n<!-- Extension points schema reference -->\n<extensionPoints>\n    <extensionPoint name=\"com.intellij.changesGroupingPolicy\"\n                    interface=\"com.intellij.openapi.vcs.changes.ui.ChangesGroupingPolicyFactory\"/>\n    <extensionPoint name=\"com.intellij.changesViewContent\"\n                    interface=\"com.intellij.openapi.vcs.changes.ui.ChangesViewContentProvider\"\n                    area=\"PROJECT_SCOPE\"/>\n    <!-- Additional extension points omitted for brevity -->\n</extensionPoints>\n```\n\n----------------------------------------\n\nTITLE: Configuring Component Visibility in Kotlin UI DSL\nDESCRIPTION: Demonstrates how to bind the visibility of a checkbox to the state of another checkbox using Kotlin UI DSL.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/user_interface_components/kotlin_ui_dsl_version_2.md#2025-04-06_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nlateinit var checkBox: Cell<JBCheckBox>\nrow {\n  checkBox = checkBox(\"Check to enable option\")\n}\nrow {\n  checkBox(\"Option 1\")\n}.enabledIf(checkBox.selected)\n```\n\n----------------------------------------\n\nTITLE: Converting PsiElement to Multiple Possible UElement Types in Java\nDESCRIPTION: Demonstrates converting a PsiElement to one of several possible UElement types in Java using UastFacade.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/architectural_overview/uast.md#2025-04-06_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\nUastFacade.INSTANCE.convertElementWithParent(element,\n    new Class[]{UInjectionHost.class, UReferenceExpression.class});\n```\n\n----------------------------------------\n\nTITLE: Enabling OK Button with Validation in Kotlin UI DSL\nDESCRIPTION: Shows how to enable the OK button while maintaining validation state in Kotlin.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/ui/principles/validation_errors.md#2025-04-06_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nerror(\"The host cannot be reached\")\n    .withOkEnabled()\n```\n\n----------------------------------------\n\nTITLE: DOM Control Interface\nDESCRIPTION: Core interface for DOM controls that connects DOM model with Swing components. Used for creating and managing GUI elements that interact with XML data.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/frameworks_and_external_apis/xml_dom_api.md#2025-04-06_snippet_22\n\nLANGUAGE: Java\nCODE:\n```\nDomUIControl\n```\n\n----------------------------------------\n\nTITLE: Version History Table in Markdown\nDESCRIPTION: Markdown table displaying version history for Android Studio Electric Eel releases, including canary builds, AI plugin versions, and corresponding IntelliJ IDEA platform versions from May to August 2022.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/_generated/android_studio_releases.md#2025-04-06_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| <p><b>Electric Eel </b></p><p> 2022.1.1 Canary 10</p> | ![Canary][canary] | **2022.1.1.10**<p>AI&#8209;221.6008.13.2211.8963757</p> | **2022.1.4**<p>221.6008.13</p> | Aug&nbsp;26,&nbsp;2022 |\n| <p><b>Electric Eel </b></p><p> 2022.1.1 Canary 9</p> | ![Canary][canary] | **2022.1.1.9**<p>AI&#8209;221.5921.22.2211.8881706</p> | **2022.1.3**<p>221.5921.22</p> | Aug&nbsp;3,&nbsp;2022 |\n| <p><b>Electric Eel </b></p><p> 2022.1.1 Canary 8</p> | ![Canary][canary] | **2022.1.1.8**<p>AI&#8209;221.5921.22.2211.8786657</p> | **2022.1.3**<p>221.5921.22</p> | Jul&nbsp;6,&nbsp;2022 |\n| <p><b>Electric Eel </b></p><p> 2022.1.1 Canary 7</p> | ![Canary][canary] | **2022.1.1.7**<p>AI&#8209;221.5591.52.2211.8767654</p> | **2022.1.1**<p>221.5591.52</p> | Jun&nbsp;29,&nbsp;2022 |\n| <p><b>Electric Eel </b></p><p> 2022.1.1 Canary 6</p> | ![Canary][canary] | **2022.1.1.6**<p>AI&#8209;221.4501.155.2211.8738788</p> | **2022.1**<p>221.4501.155</p> | Jun&nbsp;27,&nbsp;2022 |\n| <p><b>Electric Eel </b></p><p> 2022.1.1 Canary 5</p> | ![Canary][canary] | **2022.1.1.5**<p>AI&#8209;221.4165.146.2211.8713749</p> | **2022.1**<p>221.4165.146</p> | Jun&nbsp;16,&nbsp;2022 |\n| <p><b>Electric Eel </b></p><p> 2022.1.1 Canary 4</p> | ![Canary][canary] | **2022.1.1.4**<p>AI&#8209;221.3427.89.2211.8689873</p> | **2022.1**<p>221.3427.89</p> | Jun&nbsp;13,&nbsp;2022 |\n| <p><b>Electric Eel </b></p><p> 2022.1.1 Canary 3</p> | ![Canary][canary] | **2022.1.1.3**<p>AI&#8209;213.7172.25.2211.8624637</p> | **2021.3.3**<p>213.7172.25</p> | Jun&nbsp;3,&nbsp;2022 |\n| <p><b>Electric Eel </b></p><p> 2022.1.1 Canary 2</p> | ![Canary][canary] | **2022.1.1.2**<p>AI&#8209;213.7172.25.2211.8571212</p> | **2021.3.3**<p>213.7172.25</p> | May&nbsp;13,&nbsp;2022 |\n| <p><b>Electric Eel </b></p><p> 2022.1.1 Canary 1</p> | ![Canary][canary] | **2022.1.1.1**<p>AI&#8209;213.7172.25.2211.8563311</p> | **2021.3.3**<p>213.7172.25</p> | May&nbsp;11,&nbsp;2022 |\n```\n\n----------------------------------------\n\nTITLE: Defining Gradle Entity with Default and Computable Fields in Kotlin\nDESCRIPTION: This snippet demonstrates how to create a GradleEntity interface with different property kinds: a standard property, a field with default value, a composite property via a data class, and a computable field derived from another property.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/workspace_model/workspace_model_entity_declaration.md#2025-04-06_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ninterface GradleEntity : WorkspaceEntity {\n  val test: String\n\n  // Field with default value\n  val version: Int\n    @Default get() = 5\n  val description: Description\n\n  // Computable field\n  val name: String\n    get() = description.name\n}\n\ndata class Description(\n  val name: String,\n  val valid: Boolean,\n  val modifications: Int\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle Build Script for RubyMine Plugin Using IntelliJ Platform Gradle Plugin 2.x\nDESCRIPTION: Basic Gradle build script configuration for RubyMine plugin development using the IntelliJ Platform Gradle Plugin 2.x. It sets up repositories and dependencies including the required Ruby plugin.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/products/rubymine/rubymine.md#2025-04-06_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nrepositories {\n  mavenCentral()\n  intellijPlatform {\n    defaultRepositories()\n  }\n}\n\ndependencies {\n  intellijPlatform {\n    rubymine(\"<versionNumber>\")\n    bundledPlugin(\"org.jetbrains.plugins.ruby\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Ruby Plugin Extension Points in XML\nDESCRIPTION: This XML snippet defines various extension points for Ruby plugins in IntelliJ-based IDEs. It includes points for project structure, debugging, gem management, Rails integration, and other Ruby-specific features.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/resources/rubymine_extension_point_list.md#2025-04-06_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<!-- ruby-plugin.xml -->\n<extensionPoints>\n  <extensionPoint name=\"com.intellij.ruby.projectStructure.sourceRootEditHandler\" interface=\"RubyModuleSourceRootEditProvider\"/>\n  <extensionPoint name=\"org.jetbrains.plugins.ruby.breadcrumbsCustomizer\" interface=\"RubyBreadcrumbsCustomizer\"/>\n  <extensionPoint name=\"org.jetbrains.plugins.ruby.debug.infoProvider\" interface=\"ContextInfoProvider\"/>\n  <!-- ... other extension points ... -->\n</extensionPoints>\n\n<!-- ruby-rbs.xml -->\n<extensionPoints>\n  <extensionPoint name=\"com.intellij.lang.ruby.rbs.containerHierarchyMapper\" interface=\"RbsContainerHierarchyMapper\"/>\n</extensionPoints>\n```\n\n----------------------------------------\n\nTITLE: Configuring Signing Options in Groovy\nDESCRIPTION: Shows the configuration of plugin signing options using Groovy DSL. It covers the same settings as the Kotlin example for signing.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_extension.md#2025-04-06_snippet_11\n\nLANGUAGE: groovy\nCODE:\n```\nintellijPlatform {\n  // ...\n\n  signing {\n    cliPath = file('/path/to/marketplace-zip-signer-cli.jar')\n    keyStore = file('/path/to/keyStore.ks')\n    keyStorePassword = '...'\n    keyStoreKeyAlias = '...'\n    keyStoreType = '...'\n    keyStoreProviderName = '...'\n    privateKey = '...'\n    privateKeyFile = file('/path/to/private.pem')\n    password = '...'\n    certificateChain = '...'\n    certificateChainFile = file('/path/to/chain.crt')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating RSA Private Key with OpenSSL for Plugin Signing\nDESCRIPTION: Command to generate an encrypted 4096-bit RSA private key using OpenSSL. This key will be used for signing plugins to ensure their integrity in JetBrains Marketplace.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/plugin_signing.md#2025-04-06_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nopenssl genpkey\\\n  -aes-256-cbc\\\n  -algorithm RSA\\\n  -out private_encrypted.pem\\\n  -pkeyopt rsa_keygen_bits:4096\n```\n\n----------------------------------------\n\nTITLE: Localizing Action Group Text\nDESCRIPTION: Properties file entries for localizing action and group text and descriptions in English. Defines translations for both the action and its containing group.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/action_system/grouping_actions_tutorial.md#2025-04-06_snippet_6\n\nLANGUAGE: properties\nCODE:\n```\naction.org.intellij.sdk.action.CustomGroupedAction.text=A Popup Action [EN]\naction.org.intellij.sdk.action.CustomGroupedAction.description=SDK popup grouped action example [EN]\ngroup.org.intellij.sdk.action.CustomDefaultActionGroup.text=Popup Grouped Actions [EN]\ngroup.org.intellij.sdk.action.CustomDefaultActionGroup.description=Custom defaultActionGroup demo [EN]\n```\n\n----------------------------------------\n\nTITLE: Markdown Version History Table\nDESCRIPTION: A markdown table displaying IntelliJ SDK version history with build numbers, release types, and dates from 2018-2019.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/_generated/android_studio_releases.md#2025-04-06_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| <b>3.4 Canary 5</b> | ![Canary][canary] | **3.4.0.4**<p>AI&#8209;183.4284.36.34.5141831</p> | **2018.3**<p>183.4284.36</p> | Nov&nbsp;26,&nbsp;2018 |\n| <b>3.4 Canary 4</b> | ![Canary][canary] | **3.4.0.3**<p>AI&#8209;183.4139.22.34.5129585</p> | **2018.3**<p>183.4139.22</p> | Nov&nbsp;15,&nbsp;2018 |\n```\n\n----------------------------------------\n\nTITLE: Registering Assistant Extension Points\nDESCRIPTION: Configures multiple extension points for the Android Studio assistant functionality, including action handlers, state management, and navigation listeners.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/resources/android_plugin_extension_point_list.md#2025-04-06_snippet_6\n\nLANGUAGE: XML\nCODE:\n```\ncom.android.tools.idea.assistant.actionHandler\ncom.android.tools.idea.assistant.actionStateManager\ncom.android.tools.idea.assistant.assistantBundleCreator\n```\n\n----------------------------------------\n\nTITLE: Adding Indented Row in Kotlin UI DSL Panel\nDESCRIPTION: Shows how to create indented rows within a panel using Kotlin UI DSL.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/user_interface_components/kotlin_ui_dsl_version_2.md#2025-04-06_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nrow {\n  label(\"Not indented row\")\n}\nindent {\n  row {\n    label(\"Indented row\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing getTestDataPath() for SimpleCodeInsightTest\nDESCRIPTION: This method overrides getTestDataPath() in the SimpleCodeInsightTest class to return the path to the testData directory.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/writing_tests_for_plugins/completion_test.md#2025-04-06_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n```java\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Extension Point Example\nDESCRIPTION: Example showing how to implement the previously defined extension point with type restrictions.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/plugin_structure/plugin_configuration_file.md#2025-04-06_snippet_18\n\nLANGUAGE: XML\nCODE:\n```\n<myExtension ...\n    myClass=\"com.example.MyCustomType\">\n  <someClass>com.example.MyComparable</someClass>\n</myExtension>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom DomElementVisitor in Java\nDESCRIPTION: Example of creating a custom DomElementVisitor with specific visit methods for Foo and Bar DOM elements. This demonstrates how to implement type-specific visitor methods in addition to the general visitDomElement method.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/frameworks_and_external_apis/xml_dom_api.md#2025-04-06_snippet_18\n\nLANGUAGE: java\nCODE:\n```\nclass MyVisitor implements DomElementVisitor {\n  void visitDomElement(DomElement element) {}\n  void visitFoo(Foo foo) {}\n  void visitBar(Bar bar) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Updating JavascriptParserDefinition in JavaScript Plugin 2023.1\nDESCRIPTION: The return type of the createFile method in JavascriptParserDefinition has been changed from JSFile to PsiFile to support the Astro file format.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/reference_guide/api_changes_list_2023.md#2025-04-06_snippet_13\n\nLANGUAGE: Java\nCODE:\n```\ncom.intellij.lang.javascript.JavascriptParserDefinition.createFile(FileViewProvider)\n```\n\n----------------------------------------\n\nTITLE: Fixed Child Element Accessors\nDESCRIPTION: Method declarations for accessing child elements with fixed cardinality in XML DOM structure.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/frameworks_and_external_apis/xml_dom_api.md#2025-04-06_snippet_12\n\nLANGUAGE: java\nCODE:\n```\nGenericDomValue<String> getEjbName();\nGenericDomValue<String> getEjbClass();\nCmpField getCmpField();\n```\n\n----------------------------------------\n\nTITLE: Registering DocumentationProvider Extension Point\nDESCRIPTION: Example of how to register a DocumentationProvider extension point in a plugin.xml file.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/custom_language_support/documentation.md#2025-04-06_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<extensions defaultExtensionNs=\"com.intellij\">\n  <lang.documentationProvider\n      language=\"languageID\"\n      implementationClass=\"fully.qualified.ClassName\"/>\n</extensions>\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle Build Script for PhpStorm Plugin Development in Kotlin\nDESCRIPTION: Example Kotlin DSL configuration for a Gradle build script that targets PhpStorm. It sets the IntelliJ Platform type to Ultimate Edition, specifies the base version, declares PHP plugin dependency, and configures the IDE development instance path.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/products/dev_alternate_products.md#2025-04-06_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nintellij {\n  // Define IntelliJ Platform against which to build the plugin project.\n  type.set(\"IU\")\n\n  // Use the IntelliJ Platform BRANCH.BUILD version matching\n  // \"targetIDE\" (PhpStorm):\n  version.set(\"192.7142.36\")   // baseIntelliJPlatformVersion\n\n  // Require the targetIDE plugin or library. Use the stable version\n  // compatible with intellij.version and intellij.type specified above:\n  plugins.set(listOf(\"com.jetbrains.php:192.6603.42\"))\n}\n\nrunIde {\n  // Absolute path to the installed targetIDE to use as IDE Development\n  // Instance (the \"Contents\" directory is macOS specific):\n  ideDir.set(file(\"/Users/$USERNAME$/Library/Application Support/JetBrains/Toolbox/apps/PhpStorm/ch-0/192.7142.41/PhpStorm.app/Contents\"))\n}\n```\n\n----------------------------------------\n\nTITLE: CLion Gradle Config in Kotlin DSL\nDESCRIPTION: Kotlin DSL configuration for declaring CLion plugin dependency in Gradle build script\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/getting_started/plugin_compatibility.md#2025-04-06_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nintellij {\n  plugins.set(listOf(\"com.intellij.clion\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Signing Options in Kotlin\nDESCRIPTION: Illustrates how to set up plugin signing options using Kotlin DSL. It includes various settings for key stores, private keys, and certificate chains.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_extension.md#2025-04-06_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nintellijPlatform {\n  // ...\n\n  signing {\n    cliPath = file(\"/path/to/marketplace-zip-signer-cli.jar\")\n    keyStore = file(\"/path/to/keyStore.ks\")\n    keyStorePassword = \"...\"\n    keyStoreKeyAlias = \"...\"\n    keyStoreType = \"...\"\n    keyStoreProviderName = \"...\"\n    privateKey = \"...\"\n    privateKeyFile = file(\"/path/to/private.pem\")\n    password = \"...\"\n    certificateChain = \"...\"\n    certificateChainFile = file(\"/path/to/chain.crt\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using File Paths for Plugin Signing in Gradle with Groovy DSL\nDESCRIPTION: Alternative configuration using file paths instead of direct content for the certificate chain and private key in Groovy DSL. This approach references external files containing the credentials.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/plugin_signing.md#2025-04-06_snippet_6\n\nLANGUAGE: groovy\nCODE:\n```\nsignPlugin {\n  certificateChainFile = file(\"certificate/chain.crt\")\n  privateKeyFile = file(\"certificate/private.pem\")\n  password = \"8awS22%#3(4wVDDBMlTREX\"\n}\n\npublishPlugin {\n  token = \"perm:a961riC....l17oW8t+Qw==\"\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for Intention Preview Mode\nDESCRIPTION: Use IntentionPreviewUtils.isIntentionPreviewActive() to determine if code is running in preview mode. This allows implementing conditional logic for preview vs. normal execution.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/code_intentions_preview.md#2025-04-06_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nIntentionPreviewUtils.isIntentionPreviewActive()\n```\n\n----------------------------------------\n\nTITLE: Accessing BaseTypeDescriptor in Database Plugin 2023.1\nDESCRIPTION: The BaseTypeDescriptor class has been moved to the package com.intellij.database.dataSource.url.ui. UI elements have been extracted from TypesRegistry to TypesRegistryUi. New extension points are introduced for registering parameter descriptors and editors.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/reference_guide/api_changes_list_2023.md#2025-04-06_snippet_10\n\nLANGUAGE: Java\nCODE:\n```\ncom.intellij.database.dataSource.url.ui.TypesRegistry.BaseTypeDescriptor\n```\n\n----------------------------------------\n\nTITLE: Creating Text Attribute Key with Dependency in Java\nDESCRIPTION: Demonstrates how to create a text attribute key that depends on a standard key from DefaultLanguageHighlighterColors. This approach allows for proper color scheme inheritance when no specific attributes are defined.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/color_scheme_management.md#2025-04-06_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nstatic final TextAttributesKey MY_KEYWORD =\n  TextAttributesKey.createTextAttributesKey(\"MY_KEYWORD\", DefaultLanguageHighlighterColors.KEYWORD);\n```\n\n----------------------------------------\n\nTITLE: Creating Text Attribute Key with Dependency in Java\nDESCRIPTION: Demonstrates how to create a text attribute key that depends on a standard key from DefaultLanguageHighlighterColors. This approach allows for proper color scheme inheritance when no specific attributes are defined.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/color_scheme_management.md#2025-04-06_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nstatic final TextAttributesKey MY_KEYWORD =\n  TextAttributesKey.createTextAttributesKey(\"MY_KEYWORD\", DefaultLanguageHighlighterColors.KEYWORD);\n```\n\n----------------------------------------\n\nTITLE: Implementing Form Validation with Error State in Kotlin\nDESCRIPTION: Shows how to implement validation on form submission in Kotlin UI DSL.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/ui/principles/validation_errors.md#2025-04-06_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ntextField()\n  .validationOnApply { ... }\n```\n\n----------------------------------------\n\nTITLE: Formatting Long Radio Button Labels with HTML in Kotlin UI DSL\nDESCRIPTION: Example of how to implement a multi-line radio button label using HTML formatting in Kotlin UI DSL. This technique helps improve readability when working with long labels that would otherwise take up too much horizontal space.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/ui/controls/radio_button.md#2025-04-06_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nradioButton(\n    \"<html>Show options before adding<br>to version control</html>\")\n```\n\n----------------------------------------\n\nTITLE: Getting Source Roots for All Project Modules in Java\nDESCRIPTION: This snippet demonstrates how to retrieve and display a list of all source roots for a project using ProjectRootManager. It gets the project name, retrieves all content source roots, and formats them as a list of URLs to display in a message dialog.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/project_model/project.md#2025-04-06_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nString projectName = project.getName();\nVirtualFile[] vFiles = ProjectRootManager.getInstance(project)\n    .getContentSourceRoots();\nString sourceRootsList = Arrays.stream(vFiles)\n    .map(VirtualFile::getUrl)\n    .collect(Collectors.joining(\"\\n\"));\nMessages.showInfoMessage(\"Source roots for the \" + projectName +\n    \" plugin:\\n\" + sourceRootsList, \"Project Properties\");\n```\n\n----------------------------------------\n\nTITLE: Implicit Attribute Name Declaration\nDESCRIPTION: Method declaration showing how attribute names can be derived from method names without explicit annotation.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/frameworks_and_external_apis/xml_dom_api.md#2025-04-06_snippet_11\n\nLANGUAGE: java\nCODE:\n```\nGenericAttributeValue<PsiClass> getSomeClass();\n```\n\n----------------------------------------\n\nTITLE: Updating WipVm Methods in JavaScript Debugger Plugin 2023.1\nDESCRIPTION: The return types of initDomains() and ready() methods in WipVm have been changed to Promise<*> to make WIP/CDP domains-dependent and connection-dependent initialization logic possible.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/reference_guide/api_changes_list_2023.md#2025-04-06_snippet_14\n\nLANGUAGE: Java\nCODE:\n```\norg.jetbrains.wip.WipVm.initDomains()\norg.jetbrains.wip.WipVm.ready()\n```\n\n----------------------------------------\n\nTITLE: Registering DocumentationTargetProvider Extension Point\nDESCRIPTION: Example of how to register a DocumentationTargetProvider extension point in a plugin.xml file.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/custom_language_support/documentation.md#2025-04-06_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<extensions defaultExtensionNs=\"com.intellij\">\n  <platform.backend.documentation.targetProvider\n      implementation=\"fully.qualified.ClassName\"/>\n</extensions>\n```\n\n----------------------------------------\n\nTITLE: Executing Run Configuration Programmatically in Java\nDESCRIPTION: This snippet shows how to programmatically execute an existing run configuration using ProgramRunnerUtil.executeConfiguration(). It demonstrates retrieving the configuration settings and executor.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/execution/run_configurations.md#2025-04-06_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nRunnerAndConfigurationSettings settings = RunManager.getInstance(project).getConfigurationSettings(configurationType);\nExecutor executor = ExecutorRegistry.getInstance().getExecutorById(DefaultRunExecutor.EXECUTOR_ID);\nProgramRunnerUtil.executeConfiguration(settings, executor);\n```\n\n----------------------------------------\n\nTITLE: Creating a Loader with Label in Java\nDESCRIPTION: This snippet shows how to create a loader with a label using AnimatedIcon.Default in Java. It creates a new JLabel with the text \"Loading...\" and the default animated icon.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/ui/controls/loader.md#2025-04-06_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nnew JLabel(\n    \"Loading...\",\n    new AnimatedIcon.Default(),\n    SwingConstants.LEFT\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Fields with Auto-Generated Getters and Setters in Java\nDESCRIPTION: Example Java code showing a situation where highlighting would incorrectly report errors. It demonstrates a class with an annotated field that would have getters and setters generated at build time, making IDE error highlighting invalid.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/controlling_highlighting.md#2025-04-06_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nclass Person {\n    @GetterSetter\n    private int age;\n}\n\n// usage:\nperson.setAge(47); // valid at runtime\n```\n\n----------------------------------------\n\nTITLE: Generating TrustStore for Self-Signed Certificates\nDESCRIPTION: This bash command shows how to use keytool to generate a TrustStore with a self-signed certificate for plugin verification. It imports the public key into a new keystore file.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/plugin_signing.md#2025-04-06_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nkeytool -import -alias IdeaPlugin -file chain.crt -keystore pluginKeystore.jks -storepass changeit\n```\n\n----------------------------------------\n\nTITLE: Installing SpeedSearch on List\nDESCRIPTION: Code to add keyboard-based speed search functionality to a list component\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/user_interface_components/lists_and_trees.md#2025-04-06_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nnew ListSpeedSearch(list)\n```\n\n----------------------------------------\n\nTITLE: Updating PhpIncludePathManager in PHP Plugin 2023.1\nDESCRIPTION: The getRoots() method has been removed from PhpIncludePathManager. Use getIncludePaths() for paths configured in Include Path Settings and getAllIncludedRoots() for all additional paths to use as roots for resolving.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/reference_guide/api_changes_list_2023.md#2025-04-06_snippet_16\n\nLANGUAGE: Java\nCODE:\n```\ncom.jetbrains.php.config.library.PhpIncludePathManager.getRoots()\n```\n\n----------------------------------------\n\nTITLE: Implementing Theme Color Key in Kotlin\nDESCRIPTION: Shows how to define a named color using JBColor for theme support with fallback values for light and dark themes. Uses CompletionPopup.selectionBackground as an example with specific hex color values.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/ui/principles/platform_theme_colors.md#2025-04-06_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval SELECTED_BACKGROUND_COLOR: Color =\n    JBColor.namedColor(\n        \"CompletionPopup.selectionBackground\",\n        JBColor(0xc5dffc, 0x113a5c)\n    )\n```\n\n----------------------------------------\n\nTITLE: Showing Progress Bar in Status Bar (Markdown/HTML)\nDESCRIPTION: Demonstrates the use of a progress bar in the main window's status bar for long background processes.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/ui/controls/progress_indicators.md#2025-04-06_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n![](status_bar_progress.png){width=238}\n```\n\n----------------------------------------\n\nTITLE: Binding Action Group to UI Component in XML\nDESCRIPTION: This XML snippet demonstrates how to bind a custom action group to an existing menu item using the <add-to-group> element. It places the group after a specific action in the Tools menu.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/action_system/grouping_actions_tutorial.md#2025-04-06_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<group\n    id=\"org.intellij.sdk.action.GroupedActions\"\n    text=\"Static Grouped Actions\"\n    popup=\"true\"\n    icon=\"SdkIcons.Sdk_default_icon\">\n  <add-to-group\n      group-id=\"ToolsMenu\"\n      anchor=\"after\"\n      relative-to-action=\"org.intellij.sdk.action.PopupDialogAction\"/>\n</group>\n```\n\n----------------------------------------\n\nTITLE: Vue Store Context Configuration\nDESCRIPTION: Web Types JSON configuration for Vue store context rules including Vuex and Pinia detection\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/custom_language_support/websymbols_context.md#2025-04-06_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://json.schemastore.org/web-types\",\n  \"name\": \"vue-store-contexts\",\n  \"version\": \"0.0.0\",\n  \"contexts-config\": {\n    \"vue-store\": {\n      \"vuex\": {\n        \"enable-when\": {\n          \"node-packages\": [\n            \"vuex\"\n          ],\n          \"ide-libraries\": [\n            \"vuex\"\n          ]\n        }\n      },\n      \"pinia\": {\n        \"enable-when\": {\n          \"node-packages\": [\n            \"pinia\"\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Generic XML Attribute Value Interface in Java\nDESCRIPTION: Interface definition for handling generic attribute values in XML DOM, extending GenericDomValue with ability to access XML attributes.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/frameworks_and_external_apis/xml_dom_api.md#2025-04-06_snippet_9\n\nLANGUAGE: java\nCODE:\n```\ninterface GenericAttributeValue<T> extends GenericDomValue<T> {\n  XmlAttribute getXmlAttribute();\n}\n```\n\n----------------------------------------\n\nTITLE: Illegal Key Attempts in .properties File\nDESCRIPTION: This snippet shows examples of illegal key attempts in a .properties file, which would result in parsing errors.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/code_samples/simple_language_plugin/src/test/testData/ParsingTestData.txt#2025-04-06_snippet_4\n\nLANGUAGE: Properties\nCODE:\n```\n# test for illegal key attempt\nkey\\\nwith\\\nendofline = test\n```\n\n----------------------------------------\n\nTITLE: Setting Busy State for JBList\nDESCRIPTION: Method call to enable busy indicator in JBList component\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/user_interface_components/lists_and_trees.md#2025-04-06_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nsetPaintBusy()\n```\n\n----------------------------------------\n\nTITLE: Visualizing Plugin ZIP Structure with PlantUML\nDESCRIPTION: A PlantUML diagram showing the expected structure of a plugin ZIP distribution file, including the required location for API source JARs in the lib/src directory.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/bundling_plugin_openapi_sources.md#2025-04-06_snippet_0\n\nLANGUAGE: plantuml\nCODE:\n```\n@startuml\n\nskinparam TitleFontName JetBrains Sans\nskinparam TitleFontStyle plain\nskinparam TitleFontSize 16\nskinparam DefaultTextAlignment left\n\ntitle\n  example-plugin.zip // (Plugin distribution file) //\n  |_ example-plugin\n    |_ lib\n      |_ example-plugin.jar // (Plugin) //\n      |_ src\n        |_ example-plugin-api-src.jar // (API sources JAR) //\nend title\n@enduml\n```\n\n----------------------------------------\n\nTITLE: IntelliJ API Status Change Reference Table\nDESCRIPTION: Markdown table documenting IntelliJ Platform APIs that were marked with @ApiStatus.Internal but have changed or will change their status. Each entry includes the API reference and the version when it was/will be made public.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/api_internal/api_internal.md#2025-04-06_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n| Internal API                                                                                                                                         | Note                                            |\n|------------------------------------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------|\n| [`AnAction.setShortcutSet()`](%gh-ic%/platform/editor-ui-api/src/com/intellij/openapi/actionSystem/AnAction.java)                                    | Made public in 2023.3                           |\n| [`AnimatedIcon.ANIMATION_IN_RENDERER_ALLOWED`](%gh-ic%/platform/ide-core/src/com/intellij/ui/AnimatedIcon.java)                                      | Made public in 2021.3                           |\n| [`BaseExpirableExecutor.expireWith()`](%gh-ic%/platform/core-api/src/com/intellij/openapi/application/BaseExpirableExecutor.java)                    | Made public in 2023.2                           |\n| [`BundleBase`](%gh-ic%/platform/util/src/com/intellij/BundleBase.kt)                                                                                 | Made public in 2022.1                           |\n| [`CodeVisionPlaceholderCollector`](%gh-ic%/platform/lang-impl/src/com/intellij/codeInsight/codeVision/CodeVisionPlaceholderCollector.kt)             | Made public in 2024.2                           |\n| [`IdFilter`](%gh-ic%/platform/indexing-api/src/com/intellij/util/indexing/IdFilter.java)                                                             | Made public in 2021.2/3                         |\n| [`HashingStrategy`](%gh-ic%/platform/util/base/src/com/intellij/util/containers/HashingStrategy.java)                                                | Made public in 2023.1                           |\n| [`JsonCustomStructureViewFactory`](%gh-ic%/json/src/com/intellij/json/structureView/JsonCustomStructureViewFactory.java)                             | Made public in 2023.2                           |\n| [`RunAnythingCommandLineProvider`](%gh-ic%/platform/lang-impl/src/com/intellij/ide/actions/runAnything/activity/RunAnythingCommandLineProvider.kt)   | Made public in 2021.3                           |\n| [`SearchEverywhereFoundElementInfo`](%gh-ic%/platform/lang-impl/src/com/intellij/ide/actions/searcheverywhere/SearchEverywhereFoundElementInfo.java) | Made public in 2023.3                           |\n| `PhpExpectedFunctionArgument`                                                                                                                        | Made public in 2022.1                           |\n| `org.jetbrains.yaml.meta.*`                                                                                                                          | YAML Metadata API will be made public in 2023.1 |\n```\n\n----------------------------------------\n\nTITLE: Configuring JVM Toolchain with JetBrains Vendor in Groovy\nDESCRIPTION: This snippet shows the Groovy equivalent for configuring the JVM Toolchain to use JetBrains as the vendor for the Java runtime. It sets the Java language version to 17 and specifies JetBrains as the vendor.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_faq.md#2025-04-06_snippet_13\n\nLANGUAGE: groovy\nCODE:\n```\njava {\n  toolchain {\n    languageVersion = JavaLanguageVersion.of(17)\n    vendor = JvmVendorSpec.JETBRAINS\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Module Dependency in plugin.xml\nDESCRIPTION: Example XML syntax for the 'depends' element used to declare a dependency on the core platform module. This is the recommended minimum dependency for all plugins to indicate compatibility with IntelliJ Platform products.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/getting_started/plugin_compatibility.md#2025-04-06_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<depends>com.intellij.modules.platform</depends>\n```\n\n----------------------------------------\n\nTITLE: Customizing Window Borders in IntelliJ Platform Theme JSON\nDESCRIPTION: This JSON snippet shows how to customize the border appearance for all windows in an IntelliJ Platform theme. It sets the border width and color using the 'Window.border' property in the 'ui' section of the theme description file.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/getting_started/theme/themes_customize.md#2025-04-06_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ui\": {\n    \"Window.border\" : \"4,4,4,4,E6E6E6\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling OK Button with Validation in Java\nDESCRIPTION: Shows how to enable the OK button while maintaining validation state in Java.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/ui/principles/validation_errors.md#2025-04-06_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nnew ValidationInfo(\"The host cannot be reached\", myHostField)\n    .withOkEnabled();\n```\n\n----------------------------------------\n\nTITLE: TLDR Implementation Reference\nDESCRIPTION: Provides a quick reference to the TitledSeparator implementation class using HTML and markdown syntax.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/ui/controls/group_header.md#2025-04-06_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<tldr>\\n\\n**Implementation:** [`TitledSeparator`](%gh-ic%/platform/platform-api/src/com/intellij/ui/TitledSeparator.java)\\n\\n</tldr>\n```\n\n----------------------------------------\n\nTITLE: VCS ChangeProvider Method Signatures\nDESCRIPTION: Key method signatures that must be implemented in a ChangeProvider to handle different types of file changes. These methods interact with ChangelistBuilder to report various states of files in the VCS.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/vcs_integration_for_plugins.md#2025-04-06_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nprocessChange()           // For checked out, modified, added, deleted, moved files\nprocessUnversionedFile()    // For untracked files not ignored by VCS\nprocessLocallyDeletedFile() // For files in VCS but missing from disk\nprocessIgnoredFile()       // For files ignored through .cvsignore\nprocessSwitchedFile()      // For files on different branches than parent\n```\n\n----------------------------------------\n\nTITLE: Creating an updatePlugins.xml File for Custom Plugin Repository\nDESCRIPTION: This XML structure defines the format for the updatePlugins.xml file that describes plugins available in a custom repository. It includes required elements for plugin ID, download URL, version, and compatibility information.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/resources/custom_plugin_repository.md#2025-04-06_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!--\nThe <plugins> element (required) contains the description of the plugins\navailable at this repository.\n-->\n<plugins>\n  <!--\n  Each <plugin> element (required) describes one plugin in the repository.\n  Attributes:\n   - \"id\" (required) - used by JetBrains IDEs to uniquely identify\n     a plugin. Must match <id> in the plugin.xml file.\n   - \"url\" (required) - URL to download the plugin JAR/ZIP file.\n     Must be HTTPS.\n   - \"version\" (required) - version of this plugin. Must match <version>\n     in the plugin.xml file.\n  -->\n  <plugin\n          id=\"fully.qualified.id.of.this.plugin\"\n          url=\"https://mycompany.example.com/my_repo/my_plugin.jar\"\n          version=\"major.minor.update\">\n    <!--\n    The <idea-version> element (required) must match the same element\n    in the plugin.xml file.\n    -->\n    <idea-version since-build=\"181.3\" until-build=\"191.*\"/>\n  </plugin>\n  <plugin\n          id=\"id.of.different.plugin\"\n          url=\"https://othercompany.example.com/other_repo/other_plugin.jar\"\n          version=\"major.minor\">\n    <idea-version since-build=\"181.3\" until-build=\"191.*\"/>\n  </plugin>\n  <!-- And so on for other plugins... -->\n</plugins>\n```\n\n----------------------------------------\n\nTITLE: Displaying Loader for Long Processes (Markdown/HTML)\nDESCRIPTION: Shows the use of a loader to indicate that a long process is not frozen when progress details cannot be provided.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/ui/controls/progress_indicators.md#2025-04-06_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n![](empty_state_loader.png){width=576}\n```\n\n----------------------------------------\n\nTITLE: Plugin Extension Registration (2020.1-2022.3)\nDESCRIPTION: XML configuration for registering live template extensions in IntelliJ Platform versions 2020.1 through 2022.3.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/live_templates/providing_live_templates.md#2025-04-06_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<extensions defaultExtensionNs=\"com.intellij\">\n  <defaultLiveTemplates file=\"/liveTemplates/Markdown.xml\"/>\n  <liveTemplateContext\n      implementation=\"org.intellij.sdk.liveTemplates.MarkdownContext\"/>\n</extensions>\n```\n\n----------------------------------------\n\nTITLE: Virtual File System API Call\nDESCRIPTION: Example showing the basic Virtual File API method for retrieving child files within a directory.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/architectural_overview/virtual_file_system.md#2025-04-06_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nVirtualFile.getChildren()\n```\n\n----------------------------------------\n\nTITLE: Creating Warning ValidationInfo in Kotlin UI DSL\nDESCRIPTION: This Kotlin snippet shows how to create a warning ValidationInfo using the Kotlin UI DSL. It's used to display a warning message for a specific field without preventing form submission.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/ui/principles/validation_errors.md#2025-04-06_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nwarning(\"Target name is not specified\")\n```\n\n----------------------------------------\n\nTITLE: Code Style Settings Provider Registration\nDESCRIPTION: XML configuration to register the SimpleCodeStyleSettingsProvider with the IntelliJ Platform.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/custom_language_support/code_style_settings.md#2025-04-06_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<extensions defaultExtensionNs=\"com.intellij\">\n  <codeStyleSettingsProvider\n      implementation=\"org.intellij.sdk.language.SimpleCodeStyleSettingsProvider\"/>\n</extensions>\n```\n\n----------------------------------------\n\nTITLE: Creating Plugin Run Configuration Steps in Markdown\nDESCRIPTION: Procedural steps for creating a Plugin run configuration to test theme plugins in IntelliJ IDEA. Details the UI navigation and configuration settings required.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/getting_started/theme/running_and_debugging_a_theme.md#2025-04-06_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. Go to <ui-path>Run | Edit Configurations...</ui-path>.\n2. Click the <control>Add New Configuration...</control> button (<control>+</control>) and select the <control>Plugin</control> type.\n3. Provide the configuration <control>Name</control>, e.g., _Run Theme_.\n4. Ensure that <control>Use classpath of module</control> specifies the current theme plugin module.\n5. Click the <control>Apply</control> button.\n```\n\n----------------------------------------\n\nTITLE: Searching for Module by Path with Workspace Model in Kotlin\nDESCRIPTION: Shows how to search for modules that contain a specific path by looking for content roots and source roots with the required URL. It determines the ModuleEntity to which they belong.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/workspace_model/workspace_model_usages.md#2025-04-06_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nval workspaceModel = WorkspaceModel.getInstance(project)\nval virtualFileUrl = workspaceModel.getVirtualFileUrlManager()\n  .getOrCreateFromUrl(\"file://foo/bar/src\")\n\nworkspaceModel.currentSnapshot.getVirtualFileUrlIndex()\n  .findEntitiesByUrl(virtualFileUrl)\n  .mapNotNull {\n    if (it is SourceRootEntity) {\n      it.contentRoot.module\n    } else if (it is ContentRootEntity) {\n      it.module\n    } else {\n      null\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Formatting Long Radio Button Labels with HTML in Java\nDESCRIPTION: Example of how to implement a multi-line radio button label using HTML formatting in Java. This approach splits long labels into multiple lines to maintain readability and proper UI layout.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/ui/controls/radio_button.md#2025-04-06_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nnew JRadioButton(\n    \"<html>Show options before adding<br>to version control</html>\");\n```\n\n----------------------------------------\n\nTITLE: Format Tag Implementation\nDESCRIPTION: Defines formatting for correct/incorrect examples using custom format tags with color and style attributes.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/ui/controls/group_header.md#2025-04-06_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<format color=\"Red\" style=\"bold\">Incorrect</format>\n```\n\nLANGUAGE: html\nCODE:\n```\n<format color=\"Green\" style=\"bold\">Correct</format>\n```\n\n----------------------------------------\n\nTITLE: Adding Combo Box with Property Binding in Kotlin UI DSL\nDESCRIPTION: Shows how to add a combo box bound to a property using the Kotlin UI DSL.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/user_interface_components/kotlin_ui_dsl.md#2025-04-06_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\ncomboBox(DefaultComboBoxModel<Int>(tabPlacements), uiSettings::editorTabPlacement)\n```\n\n----------------------------------------\n\nTITLE: Handling Multiple Carets in Typing Actions (Java)\nDESCRIPTION: The EditorModificationUtil class provides a method for inserting text at multiple caret positions. This is useful for implementing typing actions that support multiple carets.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/multiple_carets.md#2025-04-06_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nEditorModificationUtil.typeInStringAtCaretHonorMultipleCarets()\n```\n\n----------------------------------------\n\nTITLE: WebSymbol Properties Structure\nDESCRIPTION: Core properties of the WebSymbol interface including namespace, kind and name that define basic symbol characteristics. These properties are used to identify and categorize symbols within the Web Symbols framework.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/custom_language_support/websymbols_implementation.md#2025-04-06_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nnamespace: String // Language or concept the symbol belongs to\nkind: String     // Group within the namespace (plural form)\nname: String     // Symbol name used for matching\norigin: Origin   // Source information and loading interface\nicon: Icon?      // Optional symbol icon\npriority: Int    // Precedence in matching and completion\nproximity: Int   // Additional sorting weight for completion\n```\n\n----------------------------------------\n\nTITLE: Limiting Dispatcher Parallelism in Kotlin Coroutines\nDESCRIPTION: Illustrates the correct way to limit dispatcher parallelism by storing the dispatcher instance in a static property, avoiding the creation of new independent instances.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/architectural_overview/threading/coroutines/coroutine_tips_and_tricks.md#2025-04-06_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nprivate val myDispatcher = Dispatchers.Default.limitedParallelism(3)\n\nsuspend fun doSomething() {\n  withContext(myDispatcher) {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Editor Tabs in IntelliJ Platform Theme JSON\nDESCRIPTION: This JSON snippet demonstrates how to customize the appearance of editor tabs in an IntelliJ Platform theme. It includes properties for selected tab colors, underline styles, and background colors for both active and inactive tabs.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/getting_started/theme/themes_customize.md#2025-04-06_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ui\": {\n    \"EditorTabs\": {\n      \"selectedForeground\": \"#FFFFFF\",\n      \"selectedBackground\": \"#0e5d73\",\n      \"inactiveMaskColor\": \"#000000FF\",\n\n      \"underlineColor\": \"#1AEBFF\",\n      \"underlineHeight\": 4,\n\n      \"underlinedTabBackground\": \"#000000\",\n      \"inactiveColoredFileBackground\": \"#00000000\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Table Definition - Editor Component Properties\nDESCRIPTION: HTML table defining the properties available for Editor-related components like ActiveGutterRenderer, GutterIconRenderer, GutterMark, and Inlay components.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/ide_tooling/internal_actions/internal_ui_inspector.md#2025-04-06_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n| Type                                                                                                                                           | Properties                                                                                                                                                                                                                                                                                                                                                                                                                                                    |\n|------------------------------------------------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| <p>[`ActiveGutterRenderer`](%gh-ic%/platform/editor-ui-api/src/com/intellij/openapi/editor/markup/ActiveGutterRenderer.java)<br/>(2023.1+)</p> | <p><control>Clicked Renderer (Class)</control> - `ActiveGutterRenderer` instance/class</p>                                                                                                                                                                                                                                                                                    |\n| <p>[`GutterIconRenderer`](%gh-ic%/platform/editor-ui-api/src/com/intellij/openapi/editor/markup/GutterIconRenderer.java)<br/>(2023.1+)</p>     | <p><control>Clicked Renderer (Class)</control> - `GutterIconRenderer` instance/class</p><p><control>Accessible Name</control> - `GutterIconRenderer.getAccessibleName()`</p><p><control>Icon</control> - `GutterIconRenderer.getIcon()`</p><p><control>Marker Info - Element / Navigation Handler</control> - [`LineMarkerInfo.getElement() / getNavigationHandler()`](%gh-ic%/platform/lang-api/src/com/intellij/codeInsight/daemon/LineMarkerInfo.java)</p> |\n```\n\n----------------------------------------\n\nTITLE: Configuring Debug Logging for IntelliJ Plugin Tests in Groovy\nDESCRIPTION: This Gradle configuration snippet demonstrates how to enable DEBUG level logging for specific categories in IntelliJ plugin tests using Groovy DSL. It sets the system property for debug categories.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/testing_plugins/testing_faq.md#2025-04-06_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\ntest {\n  systemProperty(\"idea.log.debug.categories\", \"com.my.plugin.ui,com.my.plugin.backend\")\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Document from PsiFile in Preview Mode\nDESCRIPTION: Instead of using PsiDocumentManager.getDocument() which doesn't work with non-physical files, use the ViewProvider to get the document in preview mode.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/code_intentions_preview.md#2025-04-06_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\npsiFile.getViewProvider().getDocument()\n```\n\n----------------------------------------\n\nTITLE: Setting Got It Tooltip Location in Java\nDESCRIPTION: This Java code shows how to set the location of a Got It tooltip. It uses a predefined point provider (TOP_MIDDLE) to position the tooltip relative to a gutter component.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/ui/controls/got_it_tooltip.md#2025-04-06_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nnew GotItTooltip(TOOLTIP_ID, GOT_IT_TEXT, parentDisposable)\n    .show(gutterComponent, GotItTooltip.TOP_MIDDLE);\n```\n\n----------------------------------------\n\nTITLE: Markdown ID Attribute\nDESCRIPTION: Custom ID attribute for rules section in markdown.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/ui/text/capitalization.md#2025-04-06_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n{id=\"rules_1\"}\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom IntelliJ Platform Cache Directory\nDESCRIPTION: Example of setting a custom location for the IntelliJ Platform cache directory using the intellijPlatformCache property.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_gradle_properties.md#2025-04-06_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\norg.jetbrains.intellij.platform.intellijPlatformCache=/path/to/intellijPlatformCache/\n```\n\n----------------------------------------\n\nTITLE: Defining Spring Boot MVC Template Availability Provider in XML\nDESCRIPTION: Extension point for providing template availability in Spring Boot MVC. It uses the TemplateAvailabilityProvider implementation.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/resources/spring_extension_point_list.md#2025-04-06_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<extensionPoints>\n  <extensionPoint name=\"com.intellij.spring.boot.mvc.templateAvailabilityProvider\" interface=\"TemplateAvailabilityProvider\"/>\n</extensionPoints>\n```\n\n----------------------------------------\n\nTITLE: Registering File Type Extension Point with Hashbang Support\nDESCRIPTION: Example of registering a file type with hashbang (#!) support to map file types based on interpreter directives.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/api_notable/api_notable_list_2020.md#2025-04-06_snippet_5\n\nLANGUAGE: XML\nCODE:\n```\n<com.intellij.fileType/>\n```\n\n----------------------------------------\n\nTITLE: Registering Icon Description Bundle Extension Point\nDESCRIPTION: Example of registering a resource bundle to provide tooltip descriptions for icons in SimpleColoredComponent renderers.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/api_notable/api_notable_list_2020.md#2025-04-06_snippet_4\n\nLANGUAGE: XML\nCODE:\n```\n<com.intellij.iconDescriptionBundle/>\n```\n\n----------------------------------------\n\nTITLE: Example Error Message for Implicit Locks in Coroutines\nDESCRIPTION: Sample error message displayed when accessing resources without an explicit read lock in a coroutine running on EDT. This warning appears only when IDE internal mode is enabled and indicates code that should be updated to use explicit locks.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/architectural_overview/threading/coroutines/coroutine_edt_and_locks.md#2025-04-06_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nAccess is allowed with explicit read lock.\nNow each coroutine scheduled on EDT wrapped in implicit write intent\nlock (which implies read lock too). This implicit lock will be removed\nin future releases.\nPlease, use explicit lock API like ReadAction.run(),\nWriteIntentReadAction.run(), readAction() or writeIntentReadAction()\nto wrap code which needs lock to access model or PSI.\nPlease note, that read action API can re-schedule your code\nto background threads, if you are sure that your code need\nto be executed on EDT, you need to use write intent read action.\n```\n\n----------------------------------------\n\nTITLE: Registering a Module Type in plugin.xml\nDESCRIPTION: XML configuration to register a custom module type in the plugin.xml file. The moduleType extension defines the ID and implementation class for the module type.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/project_wizard.md#2025-04-06_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<moduleType\n    id=\"MY_MODULE\"\n    implementationClass=\"st.redline.smalltalk.module.MyModuleType\"/>\n```\n\n----------------------------------------\n\nTITLE: Creating UI Components for Settings Panel\nDESCRIPTION: Java implementation of AppSettingsComponent that builds and manages the UI components for the settings panel. It creates a form with a text field and checkbox, and provides methods to access and modify their values.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/settings_tutorial.md#2025-04-06_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\npublic class AppSettingsComponent {\n\n  private final JPanel myMainPanel;\n  private final JBTextField myUserNameText = new JBTextField();\n  private final JBCheckBox myIdeaUserStatus = new JBCheckBox(\"Do you use IntelliJ IDEA? \");\n\n  public AppSettingsComponent() {\n    myMainPanel = FormBuilder.createFormBuilder()\n        .addLabeledComponent(new JBLabel(\"Enter user name: \"), myUserNameText, 1, false)\n        .addComponent(myIdeaUserStatus, 1)\n        .addComponentFillVertically(new JPanel(), 0)\n        .getPanel();\n  }\n\n  public JPanel getPanel() {\n    return myMainPanel;\n  }\n\n  public JComponent getPreferredFocusedComponent() {\n    return myUserNameText;\n  }\n\n  @NotNull\n  public String getUserNameText() {\n    return myUserNameText.getText();\n  }\n\n  public void setUserNameText(@NotNull String newText) {\n    myUserNameText.setText(newText);\n  }\n\n  public boolean getIdeaUserStatus() {\n    return myIdeaUserStatus.isSelected();\n  }\n\n  public void setIdeaUserStatus(boolean newStatus) {\n    myIdeaUserStatus.setSelected(newStatus);\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Debug Logging for IntelliJ Plugin Tests in Kotlin\nDESCRIPTION: This Gradle configuration snippet shows how to enable DEBUG level logging for specific categories in IntelliJ plugin tests using Kotlin DSL. It sets the system property for debug categories.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/testing_plugins/testing_faq.md#2025-04-06_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks {\n  test {\n    systemProperty(\"idea.log.debug.categories\", \"com.my.plugin.ui,com.my.plugin.backend\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Showing Progress Bar in Settings Dialog (Markdown/HTML)\nDESCRIPTION: Illustrates the use of a progress bar in a settings dialog for processes that take significant time, such as plugin installation.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/ui/controls/progress_indicators.md#2025-04-06_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n![](settings_loader.png){width=251}\n```\n\n----------------------------------------\n\nTITLE: Referencing JBTable Implementation in IntelliJ Platform API\nDESCRIPTION: References the JBTable class in the IntelliJ Platform API, which is the recommended implementation for tables in IntelliJ-based IDEs.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/ui/controls/table.md#2025-04-06_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\ncom/intellij/ui/table/JBTable.java\n```\n\n----------------------------------------\n\nTITLE: HTML Comment with Copyright Notice\nDESCRIPTION: Copyright notice for JetBrains documentation in HTML comment format.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/plugin_user_experience.md#2025-04-06_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Copyright 2000-2024 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license. -->\n```\n\n----------------------------------------\n\nTITLE: Virtual File Lookup Method\nDESCRIPTION: Method for finding a specific child file within a VirtualFile directory.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/architectural_overview/virtual_file_system.md#2025-04-06_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nVirtualFile.findChild()\n```\n\n----------------------------------------\n\nTITLE: Standard Tag Value Accessors in DOM Interface\nDESCRIPTION: Standard getter and setter methods for accessing XML tag values in a DOM interface.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/frameworks_and_external_apis/xml_dom_api.md#2025-04-06_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nString getValue();\nvoid setValue(String s);\n```\n\n----------------------------------------\n\nTITLE: Registering Text Editor Customizer Extension Point\nDESCRIPTION: Example of registering a Text Editor Customizer implementation to customize created text editors.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/api_notable/api_notable_list_2020.md#2025-04-06_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<com.intellij.textEditorCustomizer/>\n```\n\n----------------------------------------\n\nTITLE: Registering Intention Action with Language Specification\nDESCRIPTION: XML snippet for registering an intention action with language specification in the IntelliJ Platform. This helps avoid instantiating language-specific intentions in non-relevant contexts.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/api_notable/api_notable_list_2022.md#2025-04-06_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<com.intellij.intentionAction>\\n  <language>\\n</com.intellij.intentionAction>\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle Build Script for DataGrip Plugin (IntelliJ Platform Gradle Plugin 2.x)\nDESCRIPTION: The minimum Gradle build script setup required for a DataGrip plugin using the IntelliJ Platform Gradle Plugin 2.x. It configures repositories and dependencies including the required database plugin.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/products/datagrip/data_grip.md#2025-04-06_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nrepositories {\n  mavenCentral()\n  intellijPlatform {\n    defaultRepositories()\n  }\n}\n\ndependencies {\n  intellijPlatform {\n    datagrip(\"<versionNumber>\")\n    bundledPlugin(\"com.intellij.database\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Coroutine Header Format\nDESCRIPTION: Defines the standard format for coroutine headers showing all possible components.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/architectural_overview/threading/coroutines/coroutine_dumps.md#2025-04-06_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n-[xN of] \"name\":CoroutineClass{JobState}, state: STATE [context]\n```\n\n----------------------------------------\n\nTITLE: Implementing ComboBox with Browse Button in Java\nDESCRIPTION: Java implementation of a combo box with an extendable text field that includes a browse button. The code creates an ExtendableTextComponent.Extension with icon, hover icon, tooltip, and click handler.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/ui/controls/built_in_button.md#2025-04-06_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nExtendableTextComponent.Extension browseExtension =\n  ExtendableTextComponent.Extension.create(\n    AllIcons.General.OpenDisk,\n    AllIcons.General.OpenDiskHover,\n    \"Open file\",\n    () -> System.out.println(\"Browse file clicked\")\n  );\nComboBox<String> extComboBox = new ComboBox<>(STRING_VALUES);\nextComboBox.setEditable(true);\nextComboBox.setEditor(new BasicComboBoxEditor() {\n  @Override\n  protected JTextField createEditorComponent() {\n    ExtendableTextField ecbEditor = new ExtendableTextField();\n    ecbEditor.addExtension(browseExtension);\n    ecbEditor.setBorder(null);\n    return ecbEditor;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Up a Multi-Module Java Project for Heavy Tests\nDESCRIPTION: Code snippet demonstrating how to create and configure a multi-module Java project for heavy tests in IntelliJ Platform plugin development. The example shows how to create a test fixture builder, set up a code insight fixture, and add and configure multiple Java modules.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/testing_plugins/light_and_heavy_tests.md#2025-04-06_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nTestFixtureBuilder<IdeaProjectTestFixture> projectBuilder =\n    IdeaTestFixtureFactory.getFixtureFactory().createFixtureBuilder(getName());\n\n// fixture must be created before adding modules:\nmyFixture = JavaTestFixtureFactory.getFixtureFactory()\n    .createCodeInsightFixture(projectBuilder.getFixture());\n\n// add and configure modules:\nJavaModuleFixtureBuilder<?> builder1 =\n    projectBuilder.addModule(JavaModuleFixtureBuilder.class);\n// optionally, configure the module, e.g.:\n// builder1.setLanguageLevel(...);\n// builder1.addJdk(...);\n\nJavaModuleFixtureBuilder<?> builder2 =\n    projectBuilder.addModule(JavaModuleFixtureBuilder.class);\n// configure another module...\n```\n\n----------------------------------------\n\nTITLE: Removing BuildNumber Method in IntelliJ Platform 2019.3\nDESCRIPTION: The 'getBuildNumber()' method in 'BuildNumber' has been removed. Users should use alternative methods like 'asString', 'getBaselineVersion()', or 'getComponents()' instead.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/reference_guide/api_changes_list_2019.md#2025-04-06_snippet_10\n\nLANGUAGE: Java\nCODE:\n```\ncom.intellij.openapi.util.BuildNumber.getBuildNumber()\n```\n\n----------------------------------------\n\nTITLE: Basic Shapes Table HTML\nDESCRIPTION: HTML table displaying basic shape examples and their dimensions for icon design including squares, circles and rectangles.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/ui/principles/icons_style.md#2025-04-06_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<table style=\"none\">\n    <tr>\n        <td width=\"50%\"><img src=\"shape_square.png\" alt=\"\" width=\"192\" /> <emphasis>Square 12px x 12px</emphasis></td>\n        <td width=\"50%\"><img src=\"shape_circle.png\" alt=\"\" width=\"195\" /> <emphasis>Circle 14px</emphasis></td>\n    </tr>\n    <tr>\n        <td><img src=\"shape_rect_horizontal.png\" alt=\"\" width=\"192\" /> <emphasis>Horizontal rectangle 10px x 14px</emphasis></td>\n        <td><img src=\"shape_rect_vertical.png\" alt=\"\" width=\"192\" /> <emphasis>Vertical rectangle 14px x 10px</emphasis></td>\n    </tr>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Link Summary Tag\nDESCRIPTION: XML tag containing concise description of settings mechanism for link contexts.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/settings.md#2025-04-06_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<link-summary>Settings mechanism allows users to configure and persist application- or project-level plugin preferences.</link-summary>\n```\n\n----------------------------------------\n\nTITLE: Creating Radio Button Group with Multiple Bindings in Kotlin UI DSL\nDESCRIPTION: Shows how to create a radio button group with multiple boolean property bindings in Kotlin UI DSL.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/user_interface_components/kotlin_ui_dsl.md#2025-04-06_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nbuttonGroup {\n  row { radioButton(\"The tab on the left\") }\n  row { radioButton(\"The tab on the right\", uiSettings::activeRightEditorOnClose) }\n  row { radioButton(\"Most recently opened tab\", uiSettings::activeMruEditorOnClose) }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Actions Resource Bundle\nDESCRIPTION: Example showing how to define a resource bundle for action text localization\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/plugin_structure/plugin_configuration_file.md#2025-04-06_snippet_20\n\nLANGUAGE: xml\nCODE:\n```\n<actions resource-bundle=\"messages.ActionsBundle\">\n  <!--\n  Actions/Groups defined here will use keys\n  from the ActionsBundle.properties bundle.\n  -->\n</actions>\n```\n\n----------------------------------------\n\nTITLE: XML Plugin Configuration Example\nDESCRIPTION: Example of plugin dependencies configuration in plugin.xml, showing support for transitive optional plugin dependencies.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/api_notable/api_notable_list_2019.md#2025-04-06_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<depends>\n```\n\n----------------------------------------\n\nTITLE: Creating Warning ValidationInfo in Java\nDESCRIPTION: This Java code demonstrates how to create a warning ValidationInfo for a specific field. It creates a warning message that doesn't prevent form submission but alerts the user to potential issues.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/ui/principles/validation_errors.md#2025-04-06_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nnew ValidationInfo(\"Target name is not specified\", myNameField)\n    .asWarning();\n```\n\n----------------------------------------\n\nTITLE: ProductInfo Data Class - Product Information Model\nDESCRIPTION: Kotlin data class that represents detailed information about an IntelliJ Platform product, including version, build number, and various product-specific configurations retrieved from product-info.json.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_types.md#2025-04-06_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Configuring Submodule Build Script in Groovy\nDESCRIPTION: Example of a submodule build.gradle file using the IntelliJ Platform Module plugin with Groovy syntax.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_plugins.md#2025-04-06_snippet_10\n\nLANGUAGE: groovy\nCODE:\n```\nplugins {\n  id 'org.jetbrains.intellij.platform.module'\n}\n\ndependencies {\n  intellijPlatform {\n    intellijIdeaCommunity '%ijPlatform%'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Icons for Simple Language Files\nDESCRIPTION: Implementation of an icon provider class that loads and provides the icon used for Simple language files. The icon is loaded from the resources directory.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/custom_language_support/language_and_filetype.md#2025-04-06_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\npublic class SimpleIcons {\n\n  public static final Icon FILE = IconLoader.getIcon(\"/icons/jar-gray.png\", SimpleIcons.class);\n\n}\n```\n\n----------------------------------------\n\nTITLE: Nested Highlighting Tags Example\nDESCRIPTION: Demonstrates how to use nested highlighting tags for overlapping highlights.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/testing_plugins/testing_highlighting.md#2025-04-06_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<warning>warning_highlight<info>warning_and_info_highlight</info>warning_highlight</warning>\n```\n\n----------------------------------------\n\nTITLE: Accessing Artifacts Mapping in Gradle Project Resolver\nDESCRIPTION: The method for building dependencies in GradleProjectResolverUtil has changed its parameter type from Map<String, String> to ArtifactMappingService. Developers should update their code to use the new ArtifactMappingService interface.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/reference_guide/api_changes_list_2023.md#2025-04-06_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\norg.jetbrains.plugins.gradle.service.project.GradleProjectResolverUtil.buildDependencies(ProjectResolverContext, Map, ArtifactMappingService, DataNode, Collection, DataNode)\n```\n\n----------------------------------------\n\nTITLE: Handling Iframe Click Events\nDESCRIPTION: JavaScript event listener that responds to messages from the iframe to toggle menu visibility when icons are clicked.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/ui/resources/icons_list.md#2025-04-06_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.addEventListener('message', function (event) {\n  if (event.data === 'iframeClick') {\n    toggleMenu(false);\n  }\n}, false);\n```\n\n----------------------------------------\n\nTITLE: Note Callout Syntax\nDESCRIPTION: Demonstrates how to create styled note callouts in documentation.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/intro/sdk_style.md#2025-04-06_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n> This is a simple note.\n>\n{style=\"note\"}\n```\n\n----------------------------------------\n\nTITLE: Embedding Code Snippets in Inspection Descriptions (HTML)\nDESCRIPTION: Demonstrates how to include syntax-highlighted code snippets in inspection descriptions using HTML structure. The language is determined by the inspection's registration or can be explicitly specified.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/code_inspections.md#2025-04-06_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<p>\n  The following code will be shown with syntax highlighting:\n</p>\n<pre>\n  <code>\n    // code snippet\n  </code>\n</pre>\n```\n\n----------------------------------------\n\nTITLE: Adding an External Link to Got It Tooltip in Java\nDESCRIPTION: This Java snippet shows how to add an external browser link to a Got It tooltip. It uses the withBrowserLink method to specify the link text and URL.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/ui/controls/got_it_tooltip.md#2025-04-06_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nnew GotItTooltip(TOOLTIP_ID, GOT_IT_TEXT, parentDisposable)\n    .withBrowserLink(\"How to use\", new URL(\"https://example.com\"));\n```\n\n----------------------------------------\n\nTITLE: Package Removal in Dependency Analysis Plugin 2024.2\nDESCRIPTION: The com.jetbrains.dependencyAnalysis package has been removed. Code should be updated to use the new package com.jetbrains.dependencyAnalysis.core instead.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/reference_guide/api_changes_list_2024.md#2025-04-06_snippet_14\n\nLANGUAGE: java\nCODE:\n```\ncom.jetbrains.dependencyAnalysis\n```\n\nLANGUAGE: java\nCODE:\n```\ncom.jetbrains.dependencyAnalysis.core\n```\n\n----------------------------------------\n\nTITLE: Type Change in PyElementTypes Field in Python Plugin 2024.2\nDESCRIPTION: The STATEMENT_LIST field type has changed from PyElementType to IElementType. Code that uses this field needs to be updated to handle the new type.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/reference_guide/api_changes_list_2024.md#2025-04-06_snippet_10\n\nLANGUAGE: java\nCODE:\n```\ncom.jetbrains.python.PyElementTypes.STATEMENT_LIST\n```\n\n----------------------------------------\n\nTITLE: Implementing Port Number Validation in Java\nDESCRIPTION: Java implementation of port number validation using ComponentValidator. Validates input on change and ensures values are between 0 and 65535.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/ui/principles/validation_errors.md#2025-04-06_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n// Fields initializers\nprivate JTextField myPort = new JTextField();\nprivate static final String MESSAGE =\n    \"The port number must be between 0 and 65535\";\n\n// Components initialization\nnew ComponentValidator(parentDisposable).withValidator(() -> {\n  String pt = myPort.getText();\n  if (StringUtil.isNotEmpty(pt)) {\n    try {\n      int portValue = Integer.parseInt(pt);\n      if (portValue >= 0 && portValue <= 65535) {\n        return null;\n      } else {\n        return new ValidationInfo(MESSAGE, myPort);\n      }\n    } catch (NumberFormatException nfe) {\n      return new ValidationInfo(MESSAGE, myPort);\n    }\n  } else {\n    return null;\n  }\n}).installOn(myPort);\nmyPort.getDocument().addDocumentListener(new DocumentAdapter() {\n  @Override\n  protected void textChanged(@NotNull DocumentEvent e) {\n    ComponentValidator.getInstance(myPort)\n        .ifPresent(v -> v.revalidate());\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Publishing Plugin to JetBrains Marketplace\nDESCRIPTION: Task configuration for publishing a plugin to the JetBrains Marketplace. Handles plugin upload and distribution.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_tasks.md#2025-04-06_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\npublishPlugin {\n    dependsOn(buildPlugin, signPlugin)\n}\n```\n\n----------------------------------------\n\nTITLE: Applying the Platform Plugin in Kotlin\nDESCRIPTION: This snippet demonstrates how to apply the top-level Platform plugin in a Kotlin build script. This plugin provides all the tooling necessary for plugin development for IntelliJ-based IDEs.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_plugins.md#2025-04-06_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n  id(\"org.jetbrains.intellij.platform\") version \"%intellij-platform-gradle-plugin-version%\"\n}\n```\n\n----------------------------------------\n\nTITLE: JBR Archive Naming Pattern\nDESCRIPTION: Shows the naming pattern used for JBR archives in GitHub releases.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_jetbrains_runtime.md#2025-04-06_snippet_2\n\nLANGUAGE: text\nCODE:\n```\njbr_[prefix]-[jdk]-[os]-[arch]-b[build].tar.gz\n```\n\n----------------------------------------\n\nTITLE: Unsupported Overlapping Tags Example\nDESCRIPTION: Shows an example of overlapping tags that are not supported in the test framework but display correctly in the editor.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/testing_plugins/testing_highlighting.md#2025-04-06_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<warning>warning_highlight<info>warning-and_info_highlight</warning>info_highlight</info>\n```\n\n----------------------------------------\n\nTITLE: Java For Loop Template Example\nDESCRIPTION: Example showing the expanded form of a 'fori' live template that creates a basic for loop structure with placeholders for customization.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/live_templates.md#2025-04-06_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nfor (int i = [|]; i < []; i++) {\n  []\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Release Channels with IntelliJ Platform Gradle Plugin 2.x in Groovy\nDESCRIPTION: Sets up the publishing channels for an IntelliJ plugin using the IntelliJ Platform Gradle Plugin 2.x in Groovy. This example configures the plugin to be published to the 'beta' channel.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/getting_started/publishing_plugin.md#2025-04-06_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\nintellijPlatform {\n  publishing {\n    channels = ['beta']\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle Build Script for Android Studio Plugin (Groovy - Legacy)\nDESCRIPTION: Illustrates the Gradle build script configuration using the Gradle IntelliJ Plugin 1.x for an Android Studio plugin project in Groovy. It sets the IntelliJ Platform version, specifies plugin dependencies, and configures the IDE development instance.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/products/androidstudio/android_studio.md#2025-04-06_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\nintellij {\n  version = '191.8026.42'\n  type = 'IC'\n  plugins = ['org.jetbrains.android']\n}\n\nrunIde {\n  ideDir = file('/Applications/Android Studio.app/Contents')\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing Plugin Structure Without Dependencies (PlantUML)\nDESCRIPTION: A PlantUML diagram illustrating the directory structure of a plugin without dependencies. It shows how a single JAR file is placed in the IDE's plugins directory, containing the compiled classes, plugin.xml configuration file, and plugin icons.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/plugin_structure/plugin_content.md#2025-04-06_snippet_0\n\nLANGUAGE: plantuml\nCODE:\n```\n@startuml\n\nskinparam TitleFontName JetBrains Sans\nskinparam TitleFontStyle plain\nskinparam TitleFontSize 16\nskinparam DefaultTextAlignment left\n\ntitle\n  <IDE directory>\n  |_ plugins\n    |_ sample.jar // (Plugin distribution) //\n      |_ com\n        |_ company\n          |_ Sample.class // (Class \"\"com.company.Sample\"\") //\n      |_ ...\n      |_ META-INF\n        |_ plugin.xml // (Plugin Configuration File) //\n        |_ pluginIcon.svg // (Plugin Logo) //\n        |_ pluginIcon_dark.svg // (Plugin Logo, dark variant) //\nend title\n@enduml\n```\n\n----------------------------------------\n\nTITLE: Adding Inline Help Text to Checkboxes in Kotlin UI DSL\nDESCRIPTION: Example of implementing inline help text to the right of checkboxes using Kotlin UI DSL. The code demonstrates how to add contextual information that explains when settings take effect.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/ui/controls/inline_help_text.md#2025-04-06_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\npanel {\n  row {\n    checkBox(\"Build project automatically\")\n    comment(\"Works while not running / debugging\")\n  }\n  row {\n    checkBox(\"Compile independent modules in parallel\")\n    comment(\"May require larger heap size\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Database Dialog Modification\nDESCRIPTION: Migration path for the old table modification dialog to new implementation using ModifyObjectAction.showDialog()\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/reference_guide/api_changes_list_2025.md#2025-04-06_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\ncom.intellij.database.actions.ddl.ModifyObjectAction.showDialog()\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Properties in a .properties File\nDESCRIPTION: This snippet shows how to define basic key-value pairs in a .properties file, including comments and a URL value.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/code_samples/simple_language_plugin/src/test/testData/ParsingTestData.txt#2025-04-06_snippet_0\n\nLANGUAGE: Properties\nCODE:\n```\n# You are reading the \".properties\" entry.\n! The exclamation mark can also mark text as comments.\nwebsite = https://en.wikipedia.org/\n\nlanguage = English\n```\n\n----------------------------------------\n\nTITLE: Embedding IntelliJ Icons Design Site\nDESCRIPTION: HTML iframe element that embeds the IntelliJ icons design site with full width display.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/ui/resources/icons_list.md#2025-04-06_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe class=\"iconsSite\" src=\"https://intellij-icons.jetbrains.design\" width=\"100%\"></iframe>\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Repositories with IntelliJ Platform Gradle Plugin in Groovy\nDESCRIPTION: Example showing how to set up Maven Central and default IntelliJ Platform repositories in a Gradle build script using Groovy DSL. This configuration provides all necessary repositories for building plugins and running common tasks.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_repositories_extension.md#2025-04-06_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\nrepositories {\n  mavenCentral()\n\n  intellijPlatform {\n    defaultRepositories()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Release Channels with Gradle IntelliJ Plugin 1.x in Kotlin\nDESCRIPTION: Sets up the publishing channels for an IntelliJ plugin using the Gradle IntelliJ Plugin 1.x in Kotlin. This example configures the publishPlugin task to deploy the plugin to the 'beta' channel.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/getting_started/publishing_plugin.md#2025-04-06_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks {\n  publishPlugin {\n    channels = listOf(\"beta\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Local IDE Instance Dependencies\nDESCRIPTION: Demonstrates how to set up a dependency on a local IDE installation instead of using the deprecated intellij.localPath property.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_migration.md#2025-04-06_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nrepositories {\n  mavenCentral()\n  intellijPlatform {\n    defaultRepositories()\n  }\n}\n\ndependencies {\n  intellijPlatform {\n    local(localPath)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Java Test Input File\nDESCRIPTION: This snippet demonstrates the content of CompleteTestData.java, which contains a Simple Language reference within Java code. The <caret> marker indicates the position for completion testing.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/writing_tests_for_plugins/completion_test.md#2025-04-06_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n```java\n```\n```\n\n----------------------------------------\n\nTITLE: Basic Document Generation Method in Java\nDESCRIPTION: Initial implementation of generateDoc method for determining the correct PSI element.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/custom_language_support/documentation_provider.md#2025-04-06_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\n@Override\npublic @Nullable String generateDoc(PsiElement element,\n                                    @Nullable PsiElement originalElement) {\n  return super.generateDoc(element, originalElement);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable for Publishing Token\nDESCRIPTION: Bash command to set environment variable for storing JetBrains Marketplace publishing token.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/getting_started/publishing_plugin.md#2025-04-06_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport ORG_GRADLE_PROJECT_intellijPlatformPublishingToken='YOUR_TOKEN'\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle Build Script for CLion Plugin (2.x)\nDESCRIPTION: Minimum Gradle build script configuration using IntelliJ Platform Gradle Plugin 2.x. Sets up dependencies for CLion plugin development including the required com.intellij.clion bundled plugin.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/products/clion/clion.md#2025-04-06_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nrepositories {\n  mavenCentral()\n  intellijPlatform {\n    defaultRepositories()\n  }\n}\n\ndependencies {\n  intellijPlatform {\n    clion(\"<versionNumber>\")\n    bundledPlugin(\"com.intellij.clion\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Required Module Dependency with Additional Configuration in XML\nDESCRIPTION: XML configuration to specify a required module dependency with additional configuration file for an IntelliJ platform plugin.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/plugin_structure/plugin_configuration_file.md#2025-04-06_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<depends\n    config-file=\"myPluginId-withJava.xml\">\n  com.intellij.modules.java\n</depends>\n```\n\n----------------------------------------\n\nTITLE: Defining Simple Language Test Properties\nDESCRIPTION: This snippet shows the content of the DefaultTestData.simple file, which contains test Simple language properties used for completion testing.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/writing_tests_for_plugins/completion_test.md#2025-04-06_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\n```properties\n```\n```\n\n----------------------------------------\n\nTITLE: Disabling Profiling for External Build Process\nDESCRIPTION: VM option to disable CPU profiling in the external build process when it's no longer needed.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/frameworks_and_external_apis/external_builder_api.md#2025-04-06_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\n-Dprofiling.mode=false\n```\n\n----------------------------------------\n\nTITLE: Creating Animated Icons\nDESCRIPTION: Demonstrates how to create animated icons by defining a set of frames that loop with a specified delay. Shows using the AnimatedIcon class with fixed delay between frames.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/icons.md#2025-04-06_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\nAnimatedIcon icon = new AnimatedIcon(\n    500,\n    AllIcons.Ide.Macro.Recording_1,\n    AllIcons.Ide.Macro.Recording_2);\n```\n\n----------------------------------------\n\nTITLE: Setting Up Plugin Dependencies in Gradle\nDESCRIPTION: Shows how to configure plugin dependencies from gradle.properties, separating bundled plugins from marketplace plugins.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_migration.md#2025-04-06_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nrepositories {\n  mavenCentral()\n  intellijPlatform {\n    defaultRepositories()\n  }\n}\n\ndependencies {\n  intellijPlatform {\n    plugins(providers.gradleProperty(\"platformPlugins\").map { it.split(',') })\n    bundledPlugins(providers.gradleProperty(\"platformBundledPlugins\").map { it.split(',') })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Release Channels with Gradle IntelliJ Plugin 1.x in Groovy\nDESCRIPTION: Sets up the publishing channels for an IntelliJ plugin using the Gradle IntelliJ Plugin 1.x in Groovy. This example configures the publishPlugin task to deploy the plugin to the 'beta' channel.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/getting_started/publishing_plugin.md#2025-04-06_snippet_7\n\nLANGUAGE: groovy\nCODE:\n```\ntasks {\n  publishPlugin {\n    channels = ['beta']\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Searchable Options Build\nDESCRIPTION: Shows how to disable building searchable options using the intellijPlatform extension.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_faq.md#2025-04-06_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nintellijPlatform {\n  buildSearchableOptions = false\n}\n```\n\nLANGUAGE: groovy\nCODE:\n```\nintellijPlatform {\n  buildSearchableOptions = false\n}\n```\n\n----------------------------------------\n\nTITLE: Inspection Plugin XML Configuration\nDESCRIPTION: Plugin configuration file entry for declaring a local inspection that analyzes Java code. Demonstrates how to register an inspection with the localInspection extension point.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/code_inspections.md#2025-04-06_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<localInspection implementationClass=\"org.example.MyInspection\" language=\"JAVA\"/>\n```\n\n----------------------------------------\n\nTITLE: Adding Combo Box with Custom Getter/Setter in Kotlin UI DSL\nDESCRIPTION: Demonstrates how to add a combo box with custom getter and setter functions in the Kotlin UI DSL.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/user_interface_components/kotlin_ui_dsl.md#2025-04-06_snippet_15\n\nLANGUAGE: kotlin\nCODE:\n```\ncomboBox<PgpKey>(\n  pgpListModel,\n  { getSelectedPgpKey() ?: pgpListModel.items.firstOrNull() },\n  { mySettings.state.pgpKeyId = if (usePgpKey.isSelected) it?.keyId else null })\n```\n\n----------------------------------------\n\nTITLE: Customizing Editor Line Numbers Color in XML\nDESCRIPTION: XML snippet showing how to customize the color of line numbers displayed in the editor. The color is specified in six-digit RGB hexadecimal format.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/getting_started/theme/themes_extras.md#2025-04-06_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<colors>\n  <option name=\"LINE_NUMBERS_COLOR\" value=\"999999\"/>\n</colors>\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle Build Script for PhpStorm Plugin Development in Groovy\nDESCRIPTION: Example Groovy DSL configuration for a Gradle build script that targets PhpStorm. It sets the IntelliJ Platform type to Ultimate Edition, specifies the base version, declares PHP plugin dependency, and configures the IDE development instance path.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/products/dev_alternate_products.md#2025-04-06_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\nintellij {\n  // Define IntelliJ Platform against which to build the plugin project.\n  type = 'IU'\n\n  // Use the IntelliJ Platform BRANCH.BUILD version matching\n  // \"targetIDE\" (PhpStorm):\n  version = '192.7142.36'      // baseIntelliJPlatformVersion\n\n  // Require the targetIDE plugin or library. Use the stable version\n  // compatible with intellij.version and intellij.type specified above:\n  plugins = ['com.jetbrains.php:192.6603.42']\n}\n\nrunIde {\n  // Absolute path to the installed targetIDE to use as IDE Development\n  // Instance (the \"Contents\" directory is macOS specific):\n  ideDir = file('/Users/$USERNAME$/Library/Application Support/JetBrains/Toolbox/apps/PhpStorm/ch-0/192.7142.41/PhpStorm.app/Contents')\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Root Module for Multi-Module Projects in Groovy\nDESCRIPTION: Gradle configuration in Groovy DSL for the root module of a multi-module IntelliJ plugin project. This applies the main platform plugin that provides tasks for signing, publishing, and running the plugin.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin.md#2025-04-06_snippet_19\n\nLANGUAGE: groovy\nCODE:\n```\nplugins {\n  id 'org.jetbrains.intellij.platform' version '%intellij-platform-gradle-plugin-version%'\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Radio Button Group with Property Binding in Kotlin UI DSL\nDESCRIPTION: Demonstrates how to create a radio button group bound to a single property using the Kotlin UI DSL.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/user_interface_components/kotlin_ui_dsl.md#2025-04-06_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nbuttonGroup(mySettings::providerType) {\n  row { radioButton(\"In native Keychain\", ProviderType.KEYCHAIN) }\n  row { radioButton(\"In KeePass\", ProviderType.KEEPASS) }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Debug Port for External Builder in VM Options\nDESCRIPTION: VM option to fix the port number for debugging the external builder process. This allows reusing a \"Remote\" run configuration to connect to the build process.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/frameworks_and_external_apis/external_builder_api.md#2025-04-06_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\n-Dcompiler.process.debug.port=<port-number>\n```\n\n----------------------------------------\n\nTITLE: Accessing Database Connection Config in Database Plugin\nDESCRIPTION: Instead of using DbDataSource.getDelegate(), use DbDataSource.getConnectionConfig() for connection configuration and DbImplUtil.getMaybeLocalDataSource(DasDataSource) for LocalDataSource.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/api_internal/api_internal.md#2025-04-06_snippet_11\n\nLANGUAGE: Java\nCODE:\n```\nConnectionConfig config = dbDataSource.getConnectionConfig();\\nLocalDataSource localDataSource = DbImplUtil.getMaybeLocalDataSource(dbDataSource);\n```\n\n----------------------------------------\n\nTITLE: Configuring IDEA Version Compatibility\nDESCRIPTION: Configuration for specifying IDE version compatibility range using sinceBuild and untilBuild properties.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_extension.md#2025-04-06_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nintellijPlatform {\n  // ...\n\n  pluginConfiguration {\n    // ...\n\n    ideaVersion {\n      sinceBuild = \"241\"\n      untilBuild = \"241.*\"\n    }\n  }\n}\n```\n\nLANGUAGE: groovy\nCODE:\n```\nintellijPlatform {\n  // ...\n\n  pluginConfiguration {\n    // ...\n\n    ideaVersion {\n      sinceBuild = '241'\n      untilBuild = '241.*'\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Release Channels with IntelliJ Platform Gradle Plugin 2.x in Kotlin\nDESCRIPTION: Sets up the publishing channels for an IntelliJ plugin using the IntelliJ Platform Gradle Plugin 2.x in Kotlin. This example configures the plugin to be published to the 'beta' channel.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/getting_started/publishing_plugin.md#2025-04-06_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nintellijPlatform {\n  publishing {\n    channels = listOf(\"beta\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom LSP Server Widget Item in Kotlin\nDESCRIPTION: This snippet demonstrates how to override the createLspServerWidgetItem function to provide a custom icon and settings link for the Language Services status bar widget. It uses FooIcons.PluginIcon for the icon and links to the FooConfigurable settings page.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/custom_language_support/language_server_protocol.md#2025-04-06_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\noverride fun createLspServerWidgetItem(\n  lspServer: LspServer,\n  currentFile: VirtualFile?\n) =\n  LspServerWidgetItem(\n    lspServer, currentFile,\n    FooIcons.PluginIcon, FooConfigurable::class.java\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Action to Static Group in XML\nDESCRIPTION: This XML snippet shows how to add a new action to a static action group. It reuses an existing action implementation with a new ID and display text.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/action_system/grouping_actions_tutorial.md#2025-04-06_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<group\n    id=\"org.intellij.sdk.action.GroupedActions\"\n    text=\"Static Grouped Actions\"\n    popup=\"true\"\n    icon=\"SdkIcons.Sdk_default_icon\">\n  <add-to-group\n      group-id=\"ToolsMenu\"\n      anchor=\"after\"\n      relative-to-action=\"org.intellij.sdk.action.PopupDialogAction\"/>\n  <action\n      class=\"org.intellij.sdk.action.PopupDialogAction\"\n      id=\"org.intellij.sdk.action.GroupPopDialogAction\"\n      text=\"A Group Action\"\n      description=\"SDK static grouped action example\"\n      icon=\"SdkIcons.Sdk_default_icon\">\n  </action>\n</group>\n```\n\n----------------------------------------\n\nTITLE: Adding ReSharper Plugin Downloads Badge in Markdown\nDESCRIPTION: Adds a badge showing the number of downloads for a ReSharper plugin. Requires replacing :packageName with the actual package name.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/resources/marketing.md#2025-04-06_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n![Downloads](https://img.shields.io/resharper/dt/:packageName)\n```\n\n----------------------------------------\n\nTITLE: Declaring PHP Plugin Dependency in plugin.xml\nDESCRIPTION: XML snippet showing how to declare a dependency on the PHP plugin in an IntelliJ platform plugin's plugin.xml file.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/products/phpstorm/php_open_api.md#2025-04-06_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<depends>com.jetbrains.php</depends>\n```\n\n----------------------------------------\n\nTITLE: Setting Empty Text for JBList\nDESCRIPTION: Example of customizing empty state text message in JBList component\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/user_interface_components/lists_and_trees.md#2025-04-06_snippet_0\n\nLANGUAGE: java\nCODE:\n```\ngetEmptyText().setText()\n```\n\n----------------------------------------\n\nTITLE: Implementing Tooltip with Paragraphs in Java\nDESCRIPTION: This snippet shows how to create a tooltip with multiple paragraphs using the HelpTooltip class in Java. It demonstrates setting a long description text with HTML paragraph tags for improved readability.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/ui/controls/tooltip.md#2025-04-06_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nString LONG_TEXT = \"A new overloading method will be created with \" +\n    \"the new parameter added to this method definition.<p>\" +\n    \"The method with the old signature will be kept and the call \" +\n    \"to the new method will be added to it. The necessary value \" +\n    \"or expression will be passed to the new method call.\";\nnew HelpTooltip().setDescription(LONG_TEXT).installOn(component);\n```\n\n----------------------------------------\n\nTITLE: Configuring Submodules for Multi-Module Projects in Groovy\nDESCRIPTION: Gradle configuration in Groovy DSL for submodules in a multi-module IntelliJ plugin project. This uses the module plugin which avoids polluting submodules with tasks specific to the root module.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin.md#2025-04-06_snippet_21\n\nLANGUAGE: groovy\nCODE:\n```\nplugins {\n  id 'org.jetbrains.intellij.platform.module'\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Vue Directive Modifiers in Web Types\nDESCRIPTION: Illustrates how to define modifiers for Vue directives, including name, description, and type properties for each modifier.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/custom_language_support/websymbols_web_types.md#2025-04-06_snippet_10\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"modifiers\": [\n      {\n        \"name\": \"body\",\n        \"description\": \"Make the mask append to the body element\",\n        \"type\": \"boolean\"\n      },\n      {\n        \"name\": \"fullscreen\",\n        \"type\": \"boolean\"\n      }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring IntelliJ Platform Plugin Dependencies in Groovy\nDESCRIPTION: Example of setting up plugin dependencies using Groovy DSL, including repositories configuration, target platform specification, bundled plugin dependency, test framework, and external test libraries.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_dependencies_extension.md#2025-04-06_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\nimport org.jetbrains.intellij.platform.gradle.TestFrameworkType\n\nrepositories {\n  mavenCentral()\n\n  intellijPlatform {\n    defaultRepositories()\n  }\n}\n\ndependencies {\n  intellijPlatform {\n    intellijIdeaCommunity '%ijPlatform%'\n\n    bundledPlugin 'com.intellij.java'\n\n    testFramework TestFrameworkType.Platform.INSTANCE\n  }\n\n  testImplementation 'junit:junit:4.13.2'\n  // other dependencies, e.g., 3rd-party libraries\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring IntelliJ Plugin Tasks in Gradle\nDESCRIPTION: Configuration properties for various Gradle tasks used in IntelliJ plugin development, including sandbox preparation, plugin XML patching, and plugin publishing.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/gradle_intellij_plugin/tools_gradle_intellij_plugin.md#2025-04-06_snippet_13\n\nLANGUAGE: gradle\nCODE:\n```\npublishPlugin {\n    token = \"your-token-here\"\n    channels = [\"default\"]\n    hidden = false\n    host = \"https://plugins.jetbrains.com\"\n    toolboxEnterprise = false\n}\n```\n\nLANGUAGE: gradle\nCODE:\n```\npatchPluginXml {\n    destinationDir = \"${project.buildDir}/patchedPluginXmlFiles\"\n    pluginDescription = \"Your plugin description\"\n    sinceBuild = \"192\"\n    untilBuild = \"192.*\"\n    version = \"${project.version}\"\n}\n```\n\nLANGUAGE: gradle\nCODE:\n```\nrunIde {\n    ideDir = file(\"path/to/ide\")\n    jbrVersion = \"11_0_2b159\"\n    jbrVariant = \"jcef\"\n    pluginsDir = file(\"path/to/plugins\")\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Extension Point for PostStartupActivity\nDESCRIPTION: XML snippet demonstrating how to register an extension point for post-startup activities in plugin.xml file.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/plugin_structure/plugin_components.md#2025-04-06_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<com.intellij.postStartupActivity/>\n```\n\n----------------------------------------\n\nTITLE: Adding IntelliJ Plugin Downloads Badge in Markdown\nDESCRIPTION: Adds a badge showing the number of downloads for an IntelliJ plugin. Requires replacing :pluginId with the actual plugin ID.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/resources/marketing.md#2025-04-06_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n![Downloads](https://img.shields.io/jetbrains/plugin/d/:pluginId)\n```\n\n----------------------------------------\n\nTITLE: Adding GitHub Actions Workflow Badge in Markdown\nDESCRIPTION: Adds a badge showing the status of a GitHub Actions workflow. Requires replacing <OWNER>, <REPOSITORY>, and <WORKFLOW_FILE> with actual values.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/resources/marketing.md#2025-04-06_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n![Build](https://github.com/<OWNER>/<REPOSITORY>/actions/workflows/<WORKFLOW_FILE>/badge.svg)\n```\n\n----------------------------------------\n\nTITLE: Incomplete Type Example - Function Usage\nDESCRIPTION: Second part of incomplete type example showing function usage requiring cross-file type resolution.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/products/phpstorm/php_open_api_php_type_providers.md#2025-04-06_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$a = foo();\necho $a;\n```\n\n----------------------------------------\n\nTITLE: Project manifest generation task properties\nDESCRIPTION: Configuration properties for the generateManifest task that creates the MANIFEST.MF file containing project metadata.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_tasks.md#2025-04-06_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\npluginVersion: Property<String>\ngradleVersion: Property<String>\nproductInfo: Property<ProductInfo>\nversion: Property<String>\ngeneratedManifest: RegularFileProperty\n```\n\n----------------------------------------\n\nTITLE: Checking Project Trust Status in Kotlin\nDESCRIPTION: Demonstrates how to check if a project is trusted using the Kotlin extension method Project.isTrusted(). This method is available in platform releases 2021.2.4/2021.3.1 and later.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/project_model/trusted_projects.md#2025-04-06_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nProject.isTrusted()\n```\n\n----------------------------------------\n\nTITLE: Configuring Submodules for Multi-Module Projects in Kotlin\nDESCRIPTION: Gradle configuration in Kotlin DSL for submodules in a multi-module IntelliJ plugin project. This uses the module plugin which avoids polluting submodules with tasks specific to the root module.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin.md#2025-04-06_snippet_20\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n  id(\"org.jetbrains.intellij.platform.module\")\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Vue Directive Arguments in Web Types\nDESCRIPTION: Shows how to define arguments for Vue directives, including name, description and pattern matching for available values.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/custom_language_support/websymbols_web_types.md#2025-04-06_snippet_9\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"argument\": {\n      \"name\": \"attribute or property name\",\n      \"description\": \"Optional attribute or property name\",\n      \"pattern\": {\n        \"items\": [\n          {\n            \"path\": \"/html/attributes\",\n            \"includeVirtual\": false\n          }\n        ]\n      }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Internal Mode Enable Tip Snippet\nDESCRIPTION: A markdown snippet providing instructions for enabling the Internal Actions menu when it's not visible in the IDE.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/ide_tooling/internal_actions/internal_actions_intro.md#2025-04-06_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n> If the menu item <ui-path>Tools | Internal Actions</ui-path> is not available in the IDE, then the first step is [Enabling Internal Mode](enabling_internal.md).\n>\n```\n\n----------------------------------------\n\nTITLE: Configuring Vendor Information\nDESCRIPTION: Example of configuring vendor details including name, email and URL for the plugin.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_extension.md#2025-04-06_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nintellijPlatform {\n  // ...\n\n  pluginConfiguration {\n    // ...\n\n    vendor {\n      name = \"JetBrains\"\n      email = \"hello@jetbrains.com\"\n      url = \"https://www.jetbrains.com\"\n    }\n  }\n}\n```\n\nLANGUAGE: groovy\nCODE:\n```\nintellijPlatform {\n  // ...\n\n  pluginConfiguration {\n    // ...\n\n    vendor {\n      name = 'JetBrains'\n      email = 'hello@jetbrains.com'\n      url = 'https://www.jetbrains.com'\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Spring Icons in Java\nDESCRIPTION: Update references to SpringApiIcons class which has been moved to the com.intellij.spring package.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/reference_guide/api_changes_list_2021.md#2025-04-06_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\nimport com.intellij.spring.SpringApiIcons;\n\n// Use SpringApiIcons for accessing Spring-related icons\n```\n\n----------------------------------------\n\nTITLE: Extension Points Configuration in ProjectModelImpl.xml\nDESCRIPTION: Defines extension points for project model implementation including library roots providers, directory index policies, project extensions, and workspace model contributors.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/resources/intellij_platform_extension_point_list.md#2025-04-06_snippet_9\n\nLANGUAGE: XML\nCODE:\n```\nProjectModelImpl.xml\n\nExtension Points:\n- com.intellij.additionalLibraryRootsProvider\n- com.intellij.directoryIndexExcludePolicy\n- com.intellij.projectExtension\n- com.intellij.projectPathMacroContributor\n- com.intellij.workspaceModel.entityLifecycleSupporter\n- com.intellij.workspaceModel.facetContributor\n- com.intellij.workspaceModel.fileIndexContributor\n- com.intellij.workspaceModel.moduleExtensionBridgeFactory\n```\n\n----------------------------------------\n\nTITLE: Setting Gradle Properties in build.gradle.kts for IntelliJ Plugin\nDESCRIPTION: This snippet demonstrates how to set version, sinceBuild, and untilBuild properties in the patchPluginXml DSL block of a Gradle build script for an IntelliJ Platform plugin.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/intro/sdk_code_guidelines.md#2025-04-06_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n// Patches <version> value in plugin.xml\nversion.set(project.version)\nsinceBuild.set(\"221\")\nuntilBuild.set(\"223.*\")\n```\n\n----------------------------------------\n\nTITLE: Implementing PhpUnitFiledInitializedInSetUpMethodsTP Type Provider in Java\nDESCRIPTION: This code defines a custom PHP Type Provider that handles fields initialized in PHPUnit setUp methods. It implements the PhpTypeProvider4 interface and provides type information for fields in PHPUnit test classes.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/products/phpstorm/php_open_api_php_type_providers.md#2025-04-06_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nimport com.intellij.openapi.project.Project;\nimport com.intellij.psi.PsiElement;\nimport com.intellij.util.containers.MultiMap;\nimport com.jetbrains.php.PhpIndex;\nimport com.jetbrains.php.lang.psi.elements.*;\nimport com.jetbrains.php.lang.psi.elements.impl.PhpClassImpl;\nimport com.jetbrains.php.phpunit.PhpUnitUtil;\nimport org.jetbrains.annotations.NotNull;\nimport org.jetbrains.annotations.Nullable;\n\nimport java.util.Collection;\nimport java.util.Set;\n\npublic class PhpUnitFiledInitializedInSetUpMethodsTP implements PhpTypeProvider4 {\n\n  @Override\n  public char getKey() {\n    return 'Ю';\n  }\n\n  @Nullable\n  @Override\n  public PhpType getType(PsiElement element) {\n    if (element instanceof Field) {\n      PhpClass phpClass = ((Field) element).getContainingClass();\n      if (phpClass != null) {\n        MultiMap<String, AssignmentExpression> accessMap = PhpClassImpl.getPhpUnitSetUpAssignmentsPerField(phpClass);\n        if (accessMap.containsKey(((Field) element).getName())) {\n          Collection<AssignmentExpression> expressions = accessMap.get(((Field) element).getName());\n          for (AssignmentExpression expression : expressions) {\n            PhpType type = expression.getType();\n            if (!type.isEmpty()) {\n              PhpType phpType = new PhpType();\n              String classFQN = phpClass.getFQN();\n              for (String t : type.getTypes()) {\n                phpType.add(\"#\" + getKey() + classFQN + getKey() + t);\n              }\n              return phpType;\n            }\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n  @Nullable\n  @Override\n  public PhpType complete(String expression, Project project) {\n    int indexOfSign = expression.indexOf(getKey());\n    int indexOfDelimiter = expression.indexOf(getKey(), indexOfSign + 1);\n    String classFqn = expression.substring(indexOfSign + 1, indexOfDelimiter);\n    String type = expression.substring(indexOfDelimiter + 1);\n    if (isPhpUnitClass(project, classFqn)) {\n      return new PhpType().add(type);\n    }\n    return null;\n  }\n\n  static boolean isPhpUnitClass(Project project, @NotNull String classFqn) {\n    return PhpIndex.getInstance(project).getClassesByFQN(classFqn).stream().anyMatch(PhpUnitUtil::extendsRootTestClass);\n  }\n\n  @Override\n  public Collection<? extends PhpNamedElement> getBySignature(String expression, Set<String> visited, int depth, Project project) {\n    return null;\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing CaretModel and Editor in IntelliJ Plugin Action\nDESCRIPTION: Demonstrates how to obtain the Editor and CaretModel objects from an AnActionEvent in an IntelliJ plugin action.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/editor_basics/coordinates_system.md#2025-04-06_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\npublic class EditorAreaIllustration extends AnAction {\n  @Override\n  public void actionPerformed(@NotNull AnActionEvent event) {\n    // Get access to the editor and caret model. update() validated editor's existence.\n    Editor editor = event.getRequiredData(CommonDataKeys.EDITOR);\n    CaretModel caretModel = editor.getCaretModel();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Project Trust Status in Java\nDESCRIPTION: Shows how to check if a project is trusted using the static method TrustedProjects.isTrusted(Project) in Java. This method is available in platform releases 2021.2.4/2021.3.1 and later.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/project_model/trusted_projects.md#2025-04-06_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nTrustedProjects.isTrusted(Project)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Plugin Dependencies in Groovy\nDESCRIPTION: Gradle configuration in Groovy DSL for specifying both bundled plugins and external plugins from JetBrains Marketplace. This example shows how to include Java and Scala plugin dependencies.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin.md#2025-04-06_snippet_17\n\nLANGUAGE: groovy\nCODE:\n```\nrepositories {\n  intellijPlatform {\n    defaultRepositories()\n  }\n}\n\ndependencies {\n  intellijPlatform {\n    intellijIdeaCommunity '%ijPlatform%'\n\n    bundledPlugin 'com.intellij.java'\n    plugin 'org.intellij.scala', '2024.1.4'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Structure-Aware Navbar in Java\nDESCRIPTION: Java class implementing StructureAwareNavBarModelExtension to provide custom navigation bar functionality for the Simple language. This implementation enables displaying specific file elements in the navigation bar based on caret position.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/custom_language_support/structure_aware_navbar.md#2025-04-06_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class SimpleStructureAwareNavbar extends StructureAwareNavBarModelExtension {}\n```\n\n----------------------------------------\n\nTITLE: Defining JavaScript Extension Points in XML\nDESCRIPTION: XML configuration for JavaScript-related extension points in IntelliJ-based IDEs. These extension points cover various aspects of JavaScript development, including code analysis, completion, and framework support.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/resources/webstorm_extension_point_list.md#2025-04-06_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<extensionPoints>\n  <extensionPoint name=\"JavaScript.FlowJSAnnotatorCheckerProvider\" interface=\"FlowJSAnnotatorCheckerProvider\"/>\n  <extensionPoint name=\"JavaScript.JSImplicitElementsIndexFileTypeProvider\" interface=\"JSImplicitElementsIndexFileTypeProvider\"/>\n  <extensionPoint name=\"JavaScript.TypeScriptAnnotatorCheckerProvider\" interface=\"TypeScriptAnnotatorCheckerProvider\"/>\n  <!-- Additional extension points omitted for brevity -->\n</extensionPoints>\n```\n\n----------------------------------------\n\nTITLE: AppCode Gradle Config in Groovy DSL\nDESCRIPTION: Groovy DSL configuration for declaring AppCode plugin dependency in Gradle build script\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/getting_started/plugin_compatibility.md#2025-04-06_snippet_8\n\nLANGUAGE: groovy\nCODE:\n```\nintellij {\n  plugins = ['com.intellij.appcode']\n}\n```\n\n----------------------------------------\n\nTITLE: TokenSet Group Definition\nDESCRIPTION: Example structure for creating groups of related token types using TokenSet, which should be organized in a dedicated class for the language.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/custom_language_support/implementing_lexer.md#2025-04-06_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\npublic class LanguageTokenSets {\n    public static final TokenSet KEYWORDS = TokenSet.create(\n        KEYWORD_1,\n        KEYWORD_2\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Extension Points in CoreImpl.xml\nDESCRIPTION: Lists extension points defined in CoreImpl.xml, including their names, implementations, and any special attributes like internal or experimental.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/resources/intellij_platform_extension_point_list.md#2025-04-06_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<extensionPoints>\n  <extensionPoint name=\"controlFlowProvider\" interface=\"com.intellij.codeInsight.controlflow.ControlFlowProvider\"/>\n  <extensionPoint name=\"diagnostic.freezeProfiler\" interface=\"com.intellij.diagnostic.FreezeProfiler\" internal=\"true\"/>\n  <extensionPoint name=\"documentWriteAccessGuard\" interface=\"com.intellij.openapi.editor.impl.DocumentWriteAccessGuard\" experimental=\"true\"/>\n  <!-- Additional extension points omitted for brevity -->\n</extensionPoints>\n```\n\n----------------------------------------\n\nTITLE: README Template Structure - Markdown\nDESCRIPTION: Template structure for README.md files in IntelliJ SDK code samples, showing the required sections including header, quickstart guide, extension points, actions, and listeners documentation.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/intro/sdk_code_guidelines.md#2025-04-06_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n# Plugin Title\n\n[IntelliJ Platform SDK Docs](link)\n\n## Quickstart\n\n## Extension Points\n\n## Actions\n\n## Listeners\n\n<!-- Link definitions -->\n```\n\n----------------------------------------\n\nTITLE: Registering PhpUnitFiledInitializedInSetUpMethodsTP in plugin.xml\nDESCRIPTION: This XML snippet shows how to register the PhpUnitFiledInitializedInSetUpMethodsTP implementation in the plugin configuration file. It uses the com.jetbrains.php.typeProvider4 extension point to integrate the custom type provider with the IntelliJ Platform.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/products/phpstorm/php_open_api_php_type_providers.md#2025-04-06_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<extensions defaultExtensionNs=\"com.jetbrains\">\n  <php.typeProvider4\n          implementation=\"com.jetbrains.php.lang.psi.resolve.types.PhpUnitFiledInitializedInSetUpMethodsTP\"/>\n</extensions>\n```\n\n----------------------------------------\n\nTITLE: Icon Color Palette Override\nDESCRIPTION: Shows how to override default icon colors in the ColorPalette section.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/getting_started/theme/themes_customize.md#2025-04-06_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"icons\": {\n    \"ColorPalette\": {\n      \"#DB5860\": \"#D61A26\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Write Action using Application.runWriteAction() in Kotlin\nDESCRIPTION: Demonstrates how to use Application.runWriteAction() to perform a write operation in Kotlin. This API is considered low-level and should be avoided.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/architectural_overview/threading/threading_model.md#2025-04-06_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nApplicationManager.application.runWriteAction {\n  // write data\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Plugin Dependencies in Kotlin\nDESCRIPTION: Gradle configuration in Kotlin DSL for specifying both bundled plugins and external plugins from JetBrains Marketplace. This example shows how to include Java and Scala plugin dependencies.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin.md#2025-04-06_snippet_16\n\nLANGUAGE: kotlin\nCODE:\n```\nrepositories {\n  intellijPlatform {\n    defaultRepositories()\n  }\n}\n\ndependencies {\n  intellijPlatform {\n    intellijIdeaCommunity(\"%ijPlatform%\")\n\n    bundledPlugin(\"com.intellij.java\")\n    plugin(\"org.intellij.scala\", \"2024.1.4\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Default Navigation Bar Extension Path\nDESCRIPTION: File path reference to the default navigation bar extension implementation\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/custom_language_support/navbar.md#2025-04-06_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nplatform/lang-impl/src/com/intellij/ide/navigationToolbar/DefaultNavBarExtension.java\n```\n\n----------------------------------------\n\nTITLE: Extension Point Interface - Cucumber Steps Extension\nDESCRIPTION: Interface for extending Cucumber JVM step definitions support\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/resources/oss_plugins_extension_point_list.md#2025-04-06_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\norg.jetbrains.plugins.cucumber.steps.cucumberJvmExtensionPoint\n```\n\n----------------------------------------\n\nTITLE: Com.jetbrains.php Package Extension Points\nDESCRIPTION: Core PHP extension points for debug configuration, type providers, dead code analysis, and various other PHP language features.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/resources/php_extension_point_list.md#2025-04-06_snippet_2\n\nLANGUAGE: text\nCODE:\n```\ncom.intellij.php.debug.template.configurable\ncom.intellij.php.debug.templateLanguage\ncom.intellij.php.typeProvider2\ncom.intellij.phpDeadCode\ncom.intellij.phpRunConfigurationExtension\n```\n\n----------------------------------------\n\nTITLE: Implementing Element Type Class in Java\nDESCRIPTION: Defines SimpleElementType class extending IElementType to represent PSI elements in the Simple Language grammar. Takes debug name as constructor parameter.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/custom_language_support/grammar_and_parser.md#2025-04-06_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\npublic class SimpleElementType extends IElementType {\n    public SimpleElementType(@NotNull @NonNls String debugName) {\n        super(debugName, SimpleLanguage.INSTANCE);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Search Everywhere ML Extension Points\nDESCRIPTION: Extension points for the search everywhere machine learning functionality, including ranking services and embedding providers.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/resources/intellij_community_plugins_extension_point_list.md#2025-04-06_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\ncom.intellij.searchEverywhereMl.itemSelectedListener\ncom.intellij.searchEverywhereMl.rankingService\ncom.intellij.searchEverywhereMl.searchEverywhereSessionPropertyProvider\ncom.intellij.searchEverywhereMl.textEmbeddingProvider\n```\n\n----------------------------------------\n\nTITLE: Executing Write Action using WriteAction.run() in Java\nDESCRIPTION: Shows how to use WriteAction.run() to perform a write operation in Java.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/architectural_overview/threading/threading_model.md#2025-04-06_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nWriteAction.run(() -> {\n  // write data\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Gradle IntelliJ Plugin in Kotlin build script\nDESCRIPTION: Configures the Gradle IntelliJ Plugin in a Kotlin build script by adding it to the plugins section with the specified version.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/gradle_intellij_plugin/tools_gradle_intellij_plugin.md#2025-04-06_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n  id(\"org.jetbrains.intellij\") version \"%gradle-intellij-plugin-version%\"\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Publishing Token as Gradle Parameter\nDESCRIPTION: Command line example showing how to pass the publishing token as a Gradle parameter.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/getting_started/publishing_plugin.md#2025-04-06_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n-PintellijPlatformPublishingToken=YOUR_TOKEN\n```\n\n----------------------------------------\n\nTITLE: Java Expression Visitor Implementation\nDESCRIPTION: Implementation of a PSI tree visitor that inspects binary expressions comparing String references. Shows how to traverse and analyze Java code structures.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/code_inspections.md#2025-04-06_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\npublic PsiElementVisitor buildVisitor() {\n    return new JavaElementVisitor() {\n        @Override\n        public void visitBinaryExpression(PsiBinaryExpression expression) {\n            // Check for String == String\n        }\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Local IntelliJ Platform IDE Instance in Groovy\nDESCRIPTION: Gradle configuration in Groovy DSL that references a locally installed IntelliJ-based IDE for development. This is useful for testing against specific local IDE installations.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin.md#2025-04-06_snippet_15\n\nLANGUAGE: groovy\nCODE:\n```\nrepositories {\n  intellijPlatform {\n    defaultRepositories()\n  }\n}\n\ndependencies {\n  intellijPlatform {\n    local '/Users/user/Applications/IntelliJ IDEA Ultimate.app'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Core Navigation Bar Interface Path\nDESCRIPTION: File path reference to the core NavBarModelExtension interface implementation\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/custom_language_support/navbar.md#2025-04-06_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nplatform/lang-impl/src/com/intellij/ide/navigationToolbar/NavBarModelExtension.java\n```\n\n----------------------------------------\n\nTITLE: Defining Rider Code Cleanup Extension Points in XML\nDESCRIPTION: This XML snippet defines extension points for code cleanup and profiling actions in JetBrains Rider IDE. It includes points for code cleanup support, profile action printing, and cleanup actions.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/resources/rider_extension_point_list.md#2025-04-06_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<extensionPoints>\n  <extensionPoint name=\"com.intellij.code.cleanup.support\" interface=\"RiderCodeCleanupSupportPolicy\"/>\n  <extensionPoint name=\"com.intellij.rider.ProfileActionPrinter\" interface=\"ProfileActionPrinter\"/>\n  <extensionPoint name=\"com.intellij.rider.cleanupAction\" interface=\"CleanupAction\"/>\n</extensionPoints>\n```\n\n----------------------------------------\n\nTITLE: Disabling Paid Plugin Searchable Options Warning\nDESCRIPTION: Example of disabling the warning for paid plugins when running the searchable options task by setting the paidPluginSearchableOptionsWarning property to false.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_gradle_properties.md#2025-04-06_snippet_5\n\nLANGUAGE: properties\nCODE:\n```\norg.jetbrains.intellij.platform.paidPluginSearchableOptionsWarning=false\n```\n\n----------------------------------------\n\nTITLE: Setting Up Mandatory Attributes for Custom Framework in Java\nDESCRIPTION: Implements mandatory attributes for the custom framework, including a unique ID, presentable name, and icon.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/framework.md#2025-04-06_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nfinal class DemoFramework extends FrameworkTypeEx {\n\n  public static final String FRAMEWORK_ID =\n      \"org.intellij.sdk.framework.DemoFramework\";\n\n  DemoFramework() {\n    super(FRAMEWORK_ID);\n  }\n\n  @NotNull\n  @Override\n  public String getPresentableName() {\n    return \"SDK Demo Framework\";\n  }\n\n  @NotNull\n  @Override\n  public Icon getIcon() {\n    return SdkIcons.Sdk_default_icon;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Vue.js Plugin Extension Points in XML\nDESCRIPTION: This XML snippet defines extension points for the Vue.js plugin in IntelliJ. It includes extension points for container info providers and template scopes providers.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/resources/oss_plugins_extension_point_list.md#2025-04-06_snippet_8\n\nLANGUAGE: XML\nCODE:\n```\n<extensions defaultExtensionNs=\"com.intellij\">\n  <vuejs.containerInfoProvider implementation=\"org.jetbrains.vuejs.model.source.VueContainerInfoProvider\"/>\n  <vuejs.templateScopesProvider implementation=\"org.jetbrains.vuejs.codeInsight.template.VueTemplateScopesProvider\"/>\n</extensions>\n```\n\n----------------------------------------\n\nTITLE: Dispatching to the End of a Queue in Kotlin Coroutines\nDESCRIPTION: Shows how to exit the current EDT event and continue after all events in the queue are processed using coroutines, replacing the invokeLater chain approach.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/architectural_overview/threading/coroutines/coroutine_tips_and_tricks.md#2025-04-06_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nwithContext(Dispatchers.EDT) {\n  step1()\n  yield() // suspends here, dispatches the following block again on EDT\n  step2()\n  yield()\n  step3()\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Repositories in Kotlin\nDESCRIPTION: Shows how to set up repositories for IntelliJ Platform SDK artifacts and JetBrains Marketplace dependencies in a Kotlin-based Gradle build file.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin.md#2025-04-06_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nrepositories {\n  mavenCentral()\n\n  intellijPlatform {\n    releases()\n    marketplace()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle Plugin Sandbox Path (2.x)\nDESCRIPTION: Default sandbox directory paths for IntelliJ Platform Gradle Plugin 2.x on Windows and Linux/macOS systems.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/ide_development_instance.md#2025-04-06_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nWindows: $PROJECT_DIRECTORY$\\build\\$TARGET_IDE$\\idea-sandbox\nLinux/macOS: $PROJECT_DIRECTORY$/build/$TARGET_IDE$/idea-sandbox\n```\n\n----------------------------------------\n\nTITLE: Configuring Local IntelliJ Platform IDE Instance in Kotlin\nDESCRIPTION: Gradle configuration in Kotlin DSL that references a locally installed IntelliJ-based IDE for development. This is useful for testing against specific local IDE installations.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin.md#2025-04-06_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\nrepositories {\n  intellijPlatform {\n    defaultRepositories()\n  }\n}\n\ndependencies {\n  intellijPlatform {\n    local(\"/Users/user/Applications/IntelliJ IDEA Ultimate.app\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up IntelliJ IDEA Community Dependencies in Groovy\nDESCRIPTION: Basic Gradle configuration in Groovy DSL for targeting IntelliJ IDEA Community 2023.3. This setup defines the necessary repositories and dependencies for plugin development.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin.md#2025-04-06_snippet_9\n\nLANGUAGE: groovy\nCODE:\n```\nrepositories {\n  mavenCentral()\n\n  intellijPlatform {\n    defaultRepositories()\n  }\n}\n\ndependencies {\n  intellijPlatform {\n    intellijIdeaCommunity('2023.3')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Interface Registration Reference\nDESCRIPTION: Extension point registration reference for NavBarModelExtension interface in plugin.xml\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/custom_language_support/navbar.md#2025-04-06_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\ncom.intellij.navbar\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Gradle for IntelliJ Plugin Projects\nDESCRIPTION: A procedural guide explaining how to run tests for a simple language plugin using the Gradle Tool Window. It includes steps for navigating the Gradle task tree, running the test task, and troubleshooting common issues like 'Test events were not received'.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/_shared/custom_language_testing_snippets.md#2025-04-06_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<procedure title=\"Running tests\" collapsible=\"true\" default-state=\"collapsed\">\n\n1. Open the <control>Gradle</control> Tool Window.\n2. Select the <control>simple_language_plugin</control> node.\n  You may need to reimport it as a Gradle project.\n3. Drill down under <control>simple_language_plugin</control> to <control>Tasks</control>, <control>verification</control>, <control>test</control> task.\n4. Run the <control>test</control> task.\n\nThe results are displayed in the <control>Run</control> Tool Window, and also written to the <path>simple_language_plugin/build/test-results/test</path> directory.\n\nIf the <control>Run</control> Tool Window displays the error *Test events were not received*, do the following:\n1. In the <control>Gradle</control> Tool Window, drill down under <control>simple_language_plugin</control> to <control>Tasks</control>, <control>build</control>, <control>clean</control> task.\n2. Run the <control>clean</control> task, which deletes the <path>simple_language_plugin/build</path> directory.\n3. Restart the test.\n\n</procedure>\n```\n\n----------------------------------------\n\nTITLE: Legacy AppCode Plugin Dependency\nDESCRIPTION: XML configuration for declaring AppCode plugin dependency in plugin.xml for versions prior to 2020.3\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/getting_started/plugin_compatibility.md#2025-04-06_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<depends>com.intellij.modules.appcode</depends>\n```\n\n----------------------------------------\n\nTITLE: Markdown Link Summary\nDESCRIPTION: Link summary element describing the UI guidelines for capitalization.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/ui/text/capitalization.md#2025-04-06_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<link-summary>UI guidelines for using title and sentence capitalization in various contexts.</link-summary>\n```\n\n----------------------------------------\n\nTITLE: Protobuf Editor Plugin Extensions\nDESCRIPTION: Extension points for the Protobuf Editor plugin including code implementation searching, file resolution, code conversion, name generation, project settings configuration, and schema provision.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/resources/oss_plugins_extension_point_list.md#2025-04-06_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\nidea.plugin.protoeditor\n```\n\n----------------------------------------\n\nTITLE: Example of Plugin Leak with Project Scope in Kotlin\nDESCRIPTION: This snippet shows how using a project's coroutine scope can cause a plugin leak. When a plugin is unloaded while a coroutine referencing it continues running in the project scope, the plugin classes cannot be garbage collected properly.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/architectural_overview/threading/coroutines/coroutine_scopes.md#2025-04-06_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nproject.coroutineScope.launch {\n  project.getService(MyPluginService::class.java)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring IntelliJ Platform Extension in Groovy\nDESCRIPTION: Example of how to configure the intellijPlatform extension in a Groovy-based Gradle build script. It shows the same configuration as the Kotlin example but using Groovy syntax.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_extension.md#2025-04-06_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\nintellijPlatform {\n  buildSearchableOptions = true\n  instrumentCode = true\n  projectName = project.name\n  sandboxContainer = '...'\n\n  pluginConfiguration {\n    // ...\n  }\n  publishing {\n    // ...\n  }\n  signing {\n    // ...\n  }\n  pluginVerification {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom runIdeForUiTests Task in Kotlin\nDESCRIPTION: Shows how to create a custom runIde task with Robot Server Plugin for UI testing to replace the deprecated runIdeForUiTests task.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_migration.md#2025-04-06_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nval runIdeForUiTests by intellijPlatformTesting.runIde.registering {\n  task {\n    jvmArgumentProviders += CommandLineArgumentProvider {\n      listOf(\n        \"-Drobot-server.port=8082\",\n        \"-Dide.mac.message.dialogs.as.sheets=false\",\n        \"-Djb.privacy.policy.text=<!--999.999-->\",\n        \"-Djb.consents.confirmation.enabled=false\",\n      )\n    }\n  }\n\n  plugins {\n    robotServerPlugin()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing RunToolbarSettingsConfigurableProvider in Kotlin\nDESCRIPTION: This snippet demonstrates how to reference the RunToolbarSettingsConfigurableProvider class, which is an example implementation of ConfigurableProvider in Kotlin.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/settings_guide.md#2025-04-06_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\ncom.intellij.execution.runToolbar.RunToolbarSettingsConfigurableProvider\n```\n\n----------------------------------------\n\nTITLE: Configuring Snapshot Repository in Kotlin settings file\nDESCRIPTION: Sets up the Gradle settings file to use the snapshot repository for the Gradle IntelliJ Plugin when using Kotlin DSL. This allows using pre-release versions built from the latest main branch.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/gradle_intellij_plugin/tools_gradle_intellij_plugin.md#2025-04-06_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n  id(\"org.jetbrains.intellij\") version \"...\"\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\npluginManagement {\n  repositories {\n    maven(\"https://oss.sonatype.org/content/repositories/snapshots/\")\n    gradlePluginPortal()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Expression Selector Java Example\nDESCRIPTION: Example demonstrating a Java expression where postfix template could be applied to different parts, showing why expression selection is needed.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/postfix_completion/advanced_postfix_templates.md#2025-04-06_snippet_0\n\nLANGUAGE: java\nCODE:\n```\norder.calculateWeight() > getMaxWeight(order.getDeliveryType()).var\n```\n\n----------------------------------------\n\nTITLE: Defining Expected Output for Rename Test\nDESCRIPTION: Creates a properties file 'RenameTestDataAfter.simple' in the testData directory with the expected outcome after renaming.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/writing_tests_for_plugins/rename_test.md#2025-04-06_snippet_2\n\nLANGUAGE: Properties\nCODE:\n```\nwebsiteUrl = https://en.wikipedia.org/\n```\n\n----------------------------------------\n\nTITLE: Implementing Configurable Interface for Settings\nDESCRIPTION: Java implementation of AppSettingsConfigurable that implements the Configurable interface to manage the settings UI component lifecycle and data binding. It connects the UI components to the persistent settings store.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/settings_tutorial.md#2025-04-06_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\npublic class AppSettingsConfigurable implements Configurable {\n\n  private AppSettingsComponent mySettingsComponent;\n\n  // A default constructor with no arguments is required because this implementation\n  // is registered as an applicationConfigurable EP\n\n  @Nls(capitalization = Nls.Capitalization.Title)\n  @Override\n  public String getDisplayName() {\n    return \"SDK: Application Settings Example\";\n  }\n\n  @Override\n  public JComponent getPreferredFocusedComponent() {\n    return mySettingsComponent.getPreferredFocusedComponent();\n  }\n\n  @Nullable\n  @Override\n  public JComponent createComponent() {\n    mySettingsComponent = new AppSettingsComponent();\n    return mySettingsComponent.getPanel();\n  }\n\n  @Override\n  public boolean isModified() {\n    AppSettings settings = AppSettings.getInstance();\n    boolean modified = !mySettingsComponent.getUserNameText().equals(settings.getUserId());\n    modified |= mySettingsComponent.getIdeaUserStatus() != settings.getIdeaStatus();\n    return modified;\n  }\n\n  @Override\n  public void apply() throws ConfigurationException {\n    AppSettings settings = AppSettings.getInstance();\n    settings.setUserId(mySettingsComponent.getUserNameText());\n    settings.setIdeaStatus(mySettingsComponent.getIdeaUserStatus());\n  }\n\n  @Override\n  public void reset() {\n    AppSettings settings = AppSettings.getInstance();\n    mySettingsComponent.setUserNameText(settings.getUserId());\n    mySettingsComponent.setIdeaUserStatus(settings.getIdeaStatus());\n  }\n\n  @Override\n  public void disposeUIResources() {\n    mySettingsComponent = null;\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: UI Filter Example - Markdown\nDESCRIPTION: Example of a filter term used to search UI controls in the LaF Defaults window.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/ide_tooling/internal_actions/internal_ui_laf_defaults.md#2025-04-06_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nPanel\n```\n\n----------------------------------------\n\nTITLE: Defining Perforce Plugin Extension Point in XML\nDESCRIPTION: This XML snippet defines an experimental extension point for the Perforce plugin in IntelliJ. It includes an extension point for P4 connection parameters providers.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/resources/oss_plugins_extension_point_list.md#2025-04-06_snippet_10\n\nLANGUAGE: XML\nCODE:\n```\n<extensions defaultExtensionNs=\"Perforce\">\n  <P4ConnectionParametersProvider implementation=\"org.jetbrains.idea.perforce.perforce.connections.P4ConnectionParametersProvider\"/>\n</extensions>\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Local Platform Artifacts Directory\nDESCRIPTION: Example of setting a custom location for the local platform artifacts directory using the localPlatformArtifacts property.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_gradle_properties.md#2025-04-06_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\norg.jetbrains.intellij.platform.localPlatformArtifacts=/path/to/localPlatformArtifacts/\n```\n\n----------------------------------------\n\nTITLE: Action Icon Color Customization\nDESCRIPTION: Example of customizing the color for blue-colored action icons in toolbars.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/getting_started/theme/themes_customize.md#2025-04-06_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"icons\": {\n    \"ColorPalette\": {\n      \"Actions.Blue\": \"#5BC0DE\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing VcsManagerConfigurableProvider in Java\nDESCRIPTION: This snippet shows how to reference the VcsManagerConfigurableProvider class, which is an example implementation of ConfigurableProvider in Java.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/settings_guide.md#2025-04-06_snippet_7\n\nLANGUAGE: java\nCODE:\n```\ncom.intellij.openapi.vcs.configurable.VcsManagerConfigurableProvider\n```\n\n----------------------------------------\n\nTITLE: Implementing PostfixTemplate Class in Java\nDESCRIPTION: Extend the PostfixTemplate class and implement key methods isApplicable() and expand() to create a custom postfix template.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/postfix_completion/postfix_templates.md#2025-04-06_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\npublic class CustomPostfixTemplate extends PostfixTemplate {\n    @Override\n    public boolean isApplicable(@NotNull PsiElement context, @NotNull Document document, int offset) {\n        // Determine if template is applicable\n    }\n\n    @Override\n    public void expand(@NotNull PsiElement context, @NotNull Editor editor) {\n        // Insert template content\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Kotlin Extension Function for Logging\nDESCRIPTION: Kotlin extension function that provides a more concise way to implement guarded logging using lambda expressions.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/using_kotlin.md#2025-04-06_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ninline fun Logger.debug(lazyMessage: () -> String) {\n  if (isDebugEnabled) {\n    debug(lazyMessage())\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JaCoCo Test Coverage\nDESCRIPTION: Shows how to configure JaCoCo test coverage reporting for IntelliJ plugins using PathClassLoader.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/gradle_intellij_plugin/tools_gradle_intellij_plugin_faq.md#2025-04-06_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks {\n  withType<Test> {\n    configure<JacocoTaskExtension> {\n      isIncludeNoLocationClasses = true\n      excludes = listOf(\"jdk.internal.*\")\n    }\n  }\n\n  jacocoTestReport {\n    classDirectories.setFrom(instrumentCode)\n  }\n\n  jacocoTestCoverageVerification {\n    classDirectories.setFrom(instrumentCode)\n  }\n}\n```\n\nLANGUAGE: groovy\nCODE:\n```\ntest {\n  jacoco {\n    includeNoLocationClasses = true\n    excludes = [\"jdk.internal.*\"]\n  }\n}\n\njacocoTestReport {\n  classDirectories.setFrom(instrumentCode)\n}\n\njacocoTestCoverageVerification {\n  classDirectories.setFrom(instrumentCode)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin Signing Properties in Gradle\nDESCRIPTION: This snippet shows the various properties available for configuring plugin signing in the IntelliJ Platform Gradle Plugin. It includes options for specifying key stores, private keys, passwords, and certificate chains.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_tasks.md#2025-04-06_snippet_12\n\nLANGUAGE: Kotlin\nCODE:\n```\nsignPlugin {\n    keyStoreProviderName.set(\"provider\")\n    privateKey.set(\"encoded_private_key\")\n    privateKeyFile.set(file(\"path/to/private_key.pem\"))\n    password.set(\"key_password\")\n    certificateChain.set(\"x509_cert_chain\")\n    certificateChainFile.set(file(\"path/to/cert_chain.pem\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Spring Boot Run Extension Points in XML\nDESCRIPTION: Extension points for Spring Boot run configurations, including application update policies, URL path providers, endpoints, and live beans panel content. Some extensions are marked as experimental or project-level.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/resources/spring_extension_point_list.md#2025-04-06_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<extensionPoints>\n  <extensionPoint name=\"com.intellij.spring.boot.run.applicationUpdatePolicy\" interface=\"SpringBootApplicationUpdatePolicy\"/>\n  <extensionPoint name=\"com.intellij.spring.boot.run.applicationUrlPathProviderFactory\" interface=\"SpringBootApplicationUrlPathProviderFactory\"/>\n  <extensionPoint name=\"com.intellij.spring.boot.run.endpoint\" interface=\"Endpoint\"/>\n  <extensionPoint name=\"com.intellij.spring.boot.run.endpointTabConfigurable\" interface=\"EndpointTabConfigurable\"/>\n  <extensionPoint name=\"com.intellij.spring.boot.run.liveBeansPanelContent\" interface=\"LiveBeansPanelContent\"/>\n</extensionPoints>\n```\n\n----------------------------------------\n\nTITLE: Kotlin Stdlib Gradle Configuration\nDESCRIPTION: Gradle properties configuration to opt out of automatic Kotlin standard library dependency inclusion.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/using_kotlin.md#2025-04-06_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nkotlin.stdlib.default.dependency = false\n```\n\n----------------------------------------\n\nTITLE: Disabling Searchable Options Warning\nDESCRIPTION: Example of disabling the warning for when buildSearchableOptions doesn't produce any results by setting the noSearchableOptionsWarning property to false.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_gradle_properties.md#2025-04-06_snippet_4\n\nLANGUAGE: properties\nCODE:\n```\norg.jetbrains.intellij.platform.buildSearchableOptions=false\n```\n\n----------------------------------------\n\nTITLE: Specific UI Control Color Override\nDESCRIPTION: Example of setting specific UI control colors while maintaining global defaults.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/getting_started/theme/themes_customize.md#2025-04-06_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ui\": {\n    \"*\": {\n      \"background\": \"#AED7E3\"\n     },\n    \"Label.background\": \"#F6E9C9\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Theme Description JSON Structure\nDESCRIPTION: The minimal structure of a theme description file in JSON format. It includes keys for name, author, dark mode, editor scheme, and UI customization.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/getting_started/theme/theme_structure.md#2025-04-06_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"theme_basics\",\n  \"author\": \"\",\n  \"dark\": false,\n  \"editorScheme\": \"/theme_basics.xml\",\n  \"ui\": {\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: XML Context Definition for Template\nDESCRIPTION: XML configuration that defines the context where the template should be available.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/live_templates/providing_live_templates.md#2025-04-06_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<template>\n  <variable ... />\n  <context>\n    <option name=\"MARKDOWN\" value=\"true\"/>\n  </context>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Controlling Syntax Error Highlighting Implementation\nDESCRIPTION: Demonstrates implementation of HighlightErrorFilter interface to control syntax error highlighting in the editor. The shouldHighlightErrorElement() method determines whether a given PsiErrorElement should be highlighted.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/syntax_errors.md#2025-04-06_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class CustomHighlightErrorFilter extends HighlightErrorFilter {\n    @Override\n    public boolean shouldHighlightErrorElement(@NotNull PsiErrorElement element) {\n        // Return false to suppress highlighting for this error element\n        return true; // Default behavior: show all errors\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing ActionButton Implementation in Java\nDESCRIPTION: This snippet shows the reference to the ActionButton class implementation in the IntelliJ platform. It's used to create icon buttons in the IDE's user interface.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/ui/controls/icon_button.md#2025-04-06_snippet_0\n\nLANGUAGE: java\nCODE:\n```\ncom.intellij.openapi.actionSystem.impl.ActionButton\n```\n\n----------------------------------------\n\nTITLE: SwingUtilities Threading Change\nDESCRIPTION: Changes in SwingUtilities.invokeLater and invokeAndWait behavior regarding write-intent lock. Developers need to explicitly use ReadAction.compute() or WriteAction.run() for proper lock handling.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/reference_guide/api_changes_list_2025.md#2025-04-06_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nSwingUtilities.invokeLater(() -> {\n    ReadAction.compute(() -> {\n        // your code here\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Extension Points for JetBrains Rider IDE in XML\nDESCRIPTION: This XML snippet defines various extension points for the JetBrains Rider IDE. Each extension point is specified with its name, implementation class, and attributes like non-dynamic and project-level. These extension points allow for customization and extension of Rider's functionality.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/resources/rider_extension_point_list.md#2025-04-06_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<extensionPoints>\n  <extensionPoint name=\"com.intellij.fileSystemExplorerCustomization\" interface=\"FileSystemExplorerCustomization\" />\n  <extensionPoint name=\"com.intellij.moveProviderExtension\" interface=\"MoveProviderExtension\" />\n  <extensionPoint name=\"com.intellij.nestingRulesLanguageExtensions\" interface=\"RiderNestingRulesLanguageExtensions\" />\n  <!-- Additional extension points omitted for brevity -->\n</extensionPoints>\n```\n\n----------------------------------------\n\nTITLE: Using Kotlin Logging Extension\nDESCRIPTION: Example of using the Kotlin logging extension function for concise debug logging.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/using_kotlin.md#2025-04-06_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nlogger.debug { \"...\" + expensiveComputation() }\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Android Studio Releases URL\nDESCRIPTION: Example of specifying a custom URL for fetching the list of Android Studio releases using the productsReleasesAndroidStudioUrl property.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_gradle_properties.md#2025-04-06_snippet_6\n\nLANGUAGE: properties\nCODE:\n```\norg.jetbrains.intellij.platform.productsReleasesAndroidStudioUrl=https://...\n```\n\n----------------------------------------\n\nTITLE: Referencing ConfigurableProvider Class in Java\nDESCRIPTION: This snippet shows the import statement for the ConfigurableProvider class in Java. It demonstrates how to reference the class in the IntelliJ Platform SDK.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/settings_guide.md#2025-04-06_snippet_5\n\nLANGUAGE: java\nCODE:\n```\ncom.intellij.openapi.options.ConfigurableProvider\n```\n\n----------------------------------------\n\nTITLE: Displaying Loader in Combo Box (Markdown/HTML)\nDESCRIPTION: Shows how to place a loader inside an input field or combo box to indicate content loading or checking.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/ui/controls/progress_indicators.md#2025-04-06_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n![](combo_box_loader.png){width=201}\n```\n\n----------------------------------------\n\nTITLE: Legacy Template Provider Implementation\nDESCRIPTION: Java implementation of DefaultLiveTemplatesProvider for IntelliJ Platform versions 2019.3 and earlier.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/live_templates/providing_live_templates.md#2025-04-06_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npackage org.intellij.sdk.liveTemplates;\n\nimport com.intellij.codeInsight.template.impl.DefaultLiveTemplatesProvider;\nimport org.jetbrains.annotations.Nullable;\n\nfinal class MarkdownTemplateProvider implements DefaultLiveTemplatesProvider {\n  @Override\n  public String[] getDefaultLiveTemplateFiles() {\n    return new String[]{\"liveTemplates/Markdown\"};\n  }\n\n  @Nullable\n  @Override\n  public String[] getHiddenLiveTemplateFiles() {\n    return null;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Caret Logical and Visual Positions in IntelliJ Plugin\nDESCRIPTION: Shows how to obtain the Logical and Visual positions of the primary caret in an IntelliJ editor using the CaretModel and Caret objects.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/editor_basics/coordinates_system.md#2025-04-06_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\npublic class EditorAreaIllustration extends AnAction {\n  @Override\n  public void actionPerformed(@NotNull AnActionEvent event) {\n    // Get access to the editor and caret model.\n    Editor editor = event.getRequiredData(CommonDataKeys.EDITOR);\n    CaretModel caretModel = editor.getCaretModel();\n    Caret primaryCaret = caretModel.getPrimaryCaret();\n    LogicalPosition logicalPos = primaryCaret.getLogicalPosition();\n    VisualPosition visualPos = primaryCaret.getVisualPosition();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Searching Entities by VirtualFileUrl in Kotlin\nDESCRIPTION: This snippet demonstrates how to find entities referencing a specific VirtualFileUrl using the Workspace Model API. It shows obtaining the VirtualFileUrlManager, creating a VirtualFileUrl from a string path, and querying the index to find entities with that URL.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/workspace_model/workspace_model_entity_properties.md#2025-04-06_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval workspaceModel = WorkspaceModel.getInstance(project)\n// Getting VirtualFileUrlManager\nval virtualFileManager = workspaceModel.getVirtualFileUrlManager()\n// Find or create VirtualFileUrl from the URL\nval path = virtualFileManager.findByUrl(\"file:///foo/bar\")\n// Searching all entities with the path\nworkspaceModel.currentSnapshot.getVirtualFileUrlIndex()\n  .findEntitiesByUrl(path)\n```\n\n----------------------------------------\n\nTITLE: Accessing Library Table in IntelliJ Platform\nDESCRIPTION: Use LibraryTablesRegistrar.getLibraryTable() instead of ProjectLibraryTable to access the library table.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/api_internal/api_internal.md#2025-04-06_snippet_9\n\nLANGUAGE: Java\nCODE:\n```\nLibraryTable libraryTable = LibraryTablesRegistrar.getInstance().getLibraryTable(project);\n```\n\n----------------------------------------\n\nTITLE: Defining Test Data in Simple Language\nDESCRIPTION: Creates a test data file in the Simple language format. This file contains key-value pairs that will be used for testing the find usages functionality.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/writing_tests_for_plugins/find_usages_test.md#2025-04-06_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\n# You are reading the \".properties\" entry.\n!The exclamation mark can also mark text as comments.\n# The key characters =, and : should be written as \\= and \\: respectively.\n# The backslash character \\ may also be used to wrap all characters on the line:\n# The backslash escapes itself, so \\\\ is valid.\n\nwebsite = https://en.wikipedia.org/\nfoo:bar\nlanguage = English\nLanguage = English\nkey\\ with\\ spaces = This is the value that could be looked up with the key \"key with spaces\".\nkey\\=with\\=equals = This is the value for the key \"key=with=equals\".\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Main Build Script with IntelliJ Platform Plugin in Kotlin\nDESCRIPTION: Example of build.gradle.kts configuration using the IntelliJ Platform plugin without specifying the version (as it's defined in settings.gradle.kts).\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_plugins.md#2025-04-06_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n  id(\"org.jetbrains.intellij.platform\")\n}\n\ndependencies {\n  intellijPlatform {\n    intellijIdeaCommunity(\"%ijPlatform%\")\n    pluginModule(implementation(project(\":submodule\")))\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing JBScrollBar Implementation in Java\nDESCRIPTION: This snippet shows the Java class reference for the JBScrollBar implementation in the IntelliJ Platform API. It's used to create custom scrollbars in IntelliJ-based IDEs.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/ui/controls/scrollbar.md#2025-04-06_snippet_0\n\nLANGUAGE: java\nCODE:\n```\ncom.intellij.ui.components.JBScrollBar\n```\n\n----------------------------------------\n\nTITLE: Registering Python External Documentation Provider in plugin.xml\nDESCRIPTION: Example of registering a language-specific documentation provider with ordering preference. This snippet demonstrates how to register an external documentation provider for Python that will be called before the default Python documentation provider.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/code_documentation.md#2025-04-06_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<lang.documentationProvider\n  language=\"Python\"\n  implementationClass=\"com.jetbrains.python.documentation.PythonExternalDocumentationProvider\"\n  order=\"before pythonDocumentationProvider\"/>\n```\n\n----------------------------------------\n\nTITLE: Java Method with Selection Example\nDESCRIPTION: Example showing a Java method with a selected code fragment that will be wrapped using a live template.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/live_templates.md#2025-04-06_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic void testMethod() {\n  <selection>getActions()</selection>\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Structure View Factory in plugin.xml for IntelliJ Plugin\nDESCRIPTION: Registers the SimpleStructureViewFactory implementation with the IntelliJ Platform through the plugin configuration file using the lang.psiStructureViewFactory extension point, associating it with the Simple language.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/custom_language_support/structure_view_factory.md#2025-04-06_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<extensions defaultExtensionNs=\"com.intellij\">\n  <lang.psiStructureViewFactory\n      language=\"Simple\"\n      implementationClass=\"org.intellij.sdk.language.SimpleStructureViewFactory\"/>\n</extensions>\n```\n\n----------------------------------------\n\nTITLE: Implementing Split Button in Kotlin using JBOptionButton\nDESCRIPTION: Reference to the JBOptionButton class in the IntelliJ Platform SDK, which is used to implement split buttons in Kotlin.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/ui/controls/split_button.md#2025-04-06_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nJBOptionButton\n```\n\n----------------------------------------\n\nTITLE: Contributing Path Macros in IntelliJ Platform\nDESCRIPTION: Replace PathMacros.setMacro() with the com.intellij.pathMacroContributor extension point to contribute custom path macros.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/api_internal/api_internal.md#2025-04-06_snippet_7\n\nLANGUAGE: XML\nCODE:\n```\n<extensions defaultExtensionNs=\\\"com.intellij\\\">\\n  <pathMacroContributor implementation=\\\"com.example.MyPathMacroContributor\\\"/>\\n</extensions>\n```\n\n----------------------------------------\n\nTITLE: Creating Test Input Data for Simple Language Parsing\nDESCRIPTION: Defines a properties file with various key-value pairs and an intentionally incorrect key for testing the parser.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/writing_tests_for_plugins/parsing_test.md#2025-04-06_snippet_1\n\nLANGUAGE: Properties\nCODE:\n```\n# You are reading the \".properties\" entry.\n! The exclamation mark can also mark text as comments.\n# The key characters =, and : should be written with\n# a preceding backslash to ensure that they are properly loaded.\n# However, there is no need to precede the value characters =, and : by a backslash.\nwebsite = https://en.wikipedia.org/\nlanguage = English\n# The backslash below tells the application to continue reading\n# the value onto the next line.\nmessage = Welcome to \\\n          Wikipedia!\n# Add spaces to the key\nkey\\ with\\ spaces = This is the value that could be looked up with the key \"key with spaces\".\n# Unicode\ntab : \\u0009\n# If you want your property to include a backslash, it should be escaped by another backslash\npath c:\\\\wiki\\\\templates\n# However, some editors will handle this automatically\n# This is an incorrect key-value pair and will be skipped\n```\n\n----------------------------------------\n\nTITLE: Configuring Submodule Build Script in Kotlin\nDESCRIPTION: Example of a submodule build.gradle.kts file that uses the IntelliJ Platform Module plugin to integrate with the main project.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_plugins.md#2025-04-06_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n  id(\"org.jetbrains.intellij.platform.module\")\n}\n\ndependencies {\n  intellijPlatform {\n    intellijIdeaCommunity(\"%ijPlatform%\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using ToolbarDecorator for Table Toolbars\nDESCRIPTION: References the ToolbarDecorator class used to implement toolbars for manipulating data in tables (add, remove, import, etc.).\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/ui/controls/table.md#2025-04-06_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\ncom/intellij/ui/ToolbarDecorator.java\n```\n\n----------------------------------------\n\nTITLE: Launching Coroutine from Project Service Scope in Kotlin\nDESCRIPTION: This snippet shows how to create a project-level service that receives both the project and its coroutine scope via constructor injection and launches a coroutine from a service method.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/architectural_overview/threading/coroutines/launching_coroutines.md#2025-04-06_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n@Service(Service.Level.PROJECT)\nclass MyProjectService(\n  private val project: Project,\n  private val cs: CoroutineScope\n) {\n  fun scheduleSomething() {\n    cs.launch {\n      // do something\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Navigation Bar Extension in Plugin XML\nDESCRIPTION: XML configuration for registering the SimpleStructureAwareNavbar implementation with the IntelliJ Platform using the com.intellij.navbar extension point.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/custom_language_support/structure_aware_navbar.md#2025-04-06_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<extensions defaultExtensionNs=\"com.intellij\">\n  <navbar implementation=\"org.intellij.sdk.language.SimpleStructureAwareNavbar\"/>\n</extensions>\n```\n\n----------------------------------------\n\nTITLE: Adding Explicit JetBrains Runtime Dependency in Groovy\nDESCRIPTION: This snippet shows the Groovy equivalent for adding an explicit dependency on JetBrains Runtime using the IntelliJ Platform Gradle Plugin. It configures repositories and dependencies for both the IntelliJ IDEA Community Edition and JetBrains Runtime.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_faq.md#2025-04-06_snippet_11\n\nLANGUAGE: groovy\nCODE:\n```\nrepositories {\n  mavenCentral()\n\n  intellijPlatform {\n    defaultRepositories()\n    jetbrainsRuntime()\n  }\n}\n\ndependencies {\n  intellijPlatform {\n    intellijIdeaCommunity '%ijPlatform%'\n    jetbrainsRuntime '...'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Test Results in IntelliJ Platform Plugin Tests\nDESCRIPTION: This snippet shows methods for comparing test results with expected outcomes, including checking individual files and entire directories.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/testing_plugins/writing_tests.md#2025-04-06_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\ncheckResultByFile()\nPlatformTestUtil.assertDirectoriesEqual()\n```\n\n----------------------------------------\n\nTITLE: Registering HTML Embedded Content Support Extension Point\nDESCRIPTION: Example of registering a custom HTML embedded content support implementation to the extension point system. This allows embedding arbitrary tokens into HTML tags or attributes.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/api_notable/api_notable_list_2020.md#2025-04-06_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<com.intellij.html.embeddedContentSupport/>\n```\n\n----------------------------------------\n\nTITLE: Updating BNF Grammar for Property Elements\nDESCRIPTION: BNF grammar definition for Simple language property elements with mixin and interface implementations.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/custom_language_support/reference_contributor.md#2025-04-06_snippet_3\n\nLANGUAGE: BNF\nCODE:\n```\nproperty ::= (KEY? SEPARATOR VALUE?) | KEY {\n  mixin=\"org.intellij.sdk.language.psi.impl.SimpleNamedElementImpl\"\n  implements=\"org.intellij.sdk.language.psi.SimpleNamedElement\"\n  methods=[getKey getValue getName setName getNameIdentifier]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Main Build Script with IntelliJ Platform Plugin in Groovy\nDESCRIPTION: Example of build.gradle configuration using the IntelliJ Platform plugin with Groovy syntax, referencing a submodule.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_plugins.md#2025-04-06_snippet_9\n\nLANGUAGE: groovy\nCODE:\n```\nplugins {\n  id 'org.jetbrains.intellij.platform'\n}\n\ndependencies {\n  intellijPlatform {\n    intellijIdeaCommunity '%ijPlatform%'\n    pluginModule(implementation(project(':submodule')))\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JBR with Maven Repository in Gradle\nDESCRIPTION: Shows how to configure repositories and dependencies for obtaining JBR from the IntelliJ Maven Repository using both Kotlin and Groovy DSL.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_jetbrains_runtime.md#2025-04-06_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nrepositories {\n  mavenCentral()\n  intellijPlatform {\n    defaultRepositories()\n    jetbrainsRuntime()\n    // ...\n  }\n}\n\ndependencies {\n  intellijPlatform {\n    intellijIdeaCommunity(\"%ijPlatform%\")\n\n    jetbrainsRuntime()\n\n    // ...\n  }\n}\n```\n\nLANGUAGE: groovy\nCODE:\n```\nrepositories {\n  mavenCentral()\n  intellijPlatform {\n    defaultRepositories()\n    jetbrainsRuntime()\n    // ...\n  }\n}\n\ndependencies {\n  intellijPlatform {\n    intellijIdeaCommunity '%ijPlatform%'\n\n    jetbrainsRuntime()\n\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Logging Guard Pattern in Java\nDESCRIPTION: Traditional Java approach for guarding expensive logging operations to avoid unnecessary parameter construction.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/using_kotlin.md#2025-04-06_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nif (logger.isDebugEnabled()) {\n  logger.debug(\"...\"+expensiveComputation());\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Quick Fix for Simple Language Properties in Java\nDESCRIPTION: Quick Fix implementation that creates a new property in a Simple Language file when referenced from Java code. Includes property creation and navigation functionality.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/custom_language_support/quick_fix.md#2025-04-06_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class SimpleCreatePropertyQuickFix implements LocalQuickFix {\n  private String key;\n\n  SimpleCreatePropertyQuickFix(String key) {\n    this.key = key;\n  }\n\n  @Override\n  @NotNull\n  public String getName() {\n    return \"Create property \\\"\" + key + \"\\\"\";\n  }\n\n  @Override\n  @NotNull\n  public String getFamilyName() {\n    return \"Create property\";\n  }\n\n  @Override\n  public void applyFix(@NotNull Project project, @NotNull ProblemDescriptor descriptor) {\n    List<SimpleFile> properties = FileBasedIndex.getInstance().getFilesByName(\n            SimpleFileType.INSTANCE.getDefaultExtension(),\n            GlobalSearchScope.projectScope(project))\n            .stream()\n            .map(virtualFile -> (SimpleFile) PsiManager.getInstance(project).findFile(virtualFile))\n            .filter(Objects::nonNull)\n            .collect(Collectors.toList());\n\n    if (properties.isEmpty()) {\n      return;\n    }\n\n    SimpleFile file;\n    if (properties.size() == 1) {\n      file = properties.get(0);\n    } else {\n      file = chooseFile(properties, project);\n    }\n\n    if (file != null) {\n      insertProperty(project, file);\n    }\n  }\n\n  private void insertProperty(Project project, SimpleFile file) {\n    WriteCommandAction.writeCommandAction(project).run(() -> {\n      PsiElement lastChild = file.getLastChild();\n      if (lastChild != null && !lastChild.getText().equals(\"\\n\")) {\n        file.add(SimpleElementFactory.createCRLF(project));\n      }\n      file.add(SimpleElementFactory.createProperty(project, key));\n    });\n\n    FileEditorManager.getInstance(project).openFile(file.getVirtualFile(), true);\n  }\n\n  private SimpleFile chooseFile(List<SimpleFile> files, Project project) {\n    JBPopupFactory jbPopupFactory = JBPopupFactory.getInstance();\n    IPopupChooserBuilder<SimpleFile> builder = jbPopupFactory.createPopupChooserBuilder(files);\n    builder.setTitle(\"Choose file\").setItemChosenCallback((file) -> insertProperty(project, file));\n    builder.createPopup().showCenteredInCurrentWindow(project);\n    return null;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Path Reference Plugin XML\nDESCRIPTION: XML file path reference for plugin configuration.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/ui/controls/toggle_button.md#2025-04-06_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\nplugin.xml\n```\n\n----------------------------------------\n\nTITLE: Using Unicode Characters in .properties File\nDESCRIPTION: This example demonstrates how to include Unicode characters in a .properties file, specifically showing a tab character.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/code_samples/simple_language_plugin/src/test/testData/ParsingTestData.txt#2025-04-06_snippet_3\n\nLANGUAGE: Properties\nCODE:\n```\n# Unicode\ntab : \\u0009\n```\n\n----------------------------------------\n\nTITLE: Replacing JSElementTypes.toModuleContentType Method in Java\nDESCRIPTION: The toModuleContentType method has been removed from JSElementTypes. Use the equivalent method in JSModuleContentType class instead.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/reference_guide/api_changes_list_2025.md#2025-04-06_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\ncom.intellij.lang.javascript.JSModuleContentType.toModuleContentType(IElementType type)\n```\n\n----------------------------------------\n\nTITLE: Updating Simple Language Annotator with Quick Fix in Java\nDESCRIPTION: Annotator implementation that registers Quick Fix actions for invalid Simple Language properties in Java code.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/custom_language_support/quick_fix.md#2025-04-06_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class SimpleAnnotator implements Annotator {\n  @Override\n  public void annotate(@NotNull final PsiElement element, @NotNull AnnotationHolder holder) {\n    if (element instanceof PsiLiteralExpression literalExpression) {\n      String value = literalExpression.getValue() instanceof String ? (String) literalExpression.getValue() : null;\n      if (value == null || !value.startsWith(SimpleAnnotator.SIMPLE_PREFIX_STR + SimpleAnnotator.SIMPLE_SEPARATOR_STR)) {\n        return;\n      }\n      String key = value.substring(SimpleAnnotator.SIMPLE_PREFIX_STR.length() + SimpleAnnotator.SIMPLE_SEPARATOR_STR.length());\n      Project project = element.getProject();\n      final List<SimpleProperty> properties = SimpleUtil.findProperties(project, key);\n      if (properties.isEmpty()) {\n        holder.newAnnotation(HighlightSeverity.ERROR, \"Unresolved property\")\n                .range(element)\n                .withFix(new SimpleCreatePropertyQuickFix(key))\n                .create();\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom RunIde Task in Groovy\nDESCRIPTION: Example of registering a custom runIde task for PhpStorm in Groovy. It demonstrates setting various properties like type, version, sandbox directory, and configuring plugins.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_testing_extension.md#2025-04-06_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\nintellijPlatformTesting.runIde {\n  runPhpStorm {\n    type = IntelliJPlatformType.PhpStorm\n    version = ...\n    useInstaller = ...\n    localPath = ...\n\n    sandboxDirectory = ...\n\n    splitMode = ...\n    splitModeTarget = ...\n\n    task {\n      ...\n    }\n\n    prepareSandboxTask {\n      ...\n    }\n\n    plugins {\n      ...\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Searchable Options JAR Task in Gradle\nDESCRIPTION: Defines properties for the jarSearchableOptions task, which creates a JAR file with searchable options to be distributed with the plugin.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_tasks.md#2025-04-06_snippet_5\n\nLANGUAGE: gradle\nCODE:\n```\ndestinationDirectory = directoryProperty()\nnoSearchableOptionsWarning = property<Boolean>()\n```\n\n----------------------------------------\n\nTITLE: Incorrect Chained XML PSI Calls with NullPointerException Risk\nDESCRIPTION: Example of an incorrect approach to XML traversal that doesn't handle potential null values and can cause exceptions.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/frameworks_and_external_apis/xml_dom_api.md#2025-04-06_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nfile.getDocument()\n    .getRootTag()\n    .findFirstSubTag(\"foo\")\n    .findSubTags(\"bar\")[1]\n    .getValue()\n    .getTrimmedText();\n```\n\n----------------------------------------\n\nTITLE: Registering a Module Builder in plugin.xml\nDESCRIPTION: XML configuration to register a custom module builder as an extension point in the plugin.xml file.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/project_wizard.md#2025-04-06_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<extensions defaultExtensionNs=\"com.intellij\">\n  <moduleBuilder\n      builderClass=\"org.jetbrains.plugins.ruby.rails.facet.versions.MyModuleBuilder\"/>\n</extensions>\n```\n\n----------------------------------------\n\nTITLE: Adding JUnit4 Runtime Dependency\nDESCRIPTION: Shows how to add JUnit4 test runtime dependency to resolve JUnit5 Test Framework references to JUnit4.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_faq.md#2025-04-06_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ndependencies {\n  // ...\n  testRuntimeOnly(\"junit:junit:4.13.2\")\n}\n```\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n  // ...\n  testRuntimeOnly 'junit:junit:4.13.2'\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Code Instrumentation Task in Gradle\nDESCRIPTION: Defines properties for the instrumentCode task, which executes code instrumentation using Ant tasks provided by the IntelliJ Platform dependency.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_tasks.md#2025-04-06_snippet_4\n\nLANGUAGE: gradle\nCODE:\n```\nsourceSetCompileClasspath = configurableFileCollection()\nclassesDirs = configurableFileCollection()\nformsDirs = configurableFileCollection()\nsourceDirs = configurableFileCollection()\ninstrumentationLogs = property<Boolean>()\noutputDirectory = directoryProperty()\n```\n\n----------------------------------------\n\nTITLE: Renamed KtModule Class in Kotlin Plugin 2024.2\nDESCRIPTION: The KtModule class has been renamed to KaModule. All code using the old class name needs to be updated to use the new name.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/reference_guide/api_changes_list_2024.md#2025-04-06_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\norg.jetbrains.kotlin.analysis.project.structure.KtModule\n```\n\nLANGUAGE: kotlin\nCODE:\n```\norg.jetbrains.kotlin.analysis.api.projectStructure.KaModule\n```\n\n----------------------------------------\n\nTITLE: Creating a LibraryEntity in 2024.2 with Workspace Model in Kotlin\nDESCRIPTION: Shows how to create a new library entity using the Workspace Model API in version 2024.2. It creates the appropriate entity source with LegacyBridgeJpsEntitySourceFactory.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/workspace_model/workspace_model_usages.md#2025-04-06_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nimport com.intellij.workspaceModel.ide.impl.LegacyBridgeJpsEntitySourceFactory\n// ...\n\nval currentSnapshot = WorkspaceModel.getInstance(project).currentSnapshot\nval libraryTableId = LibraryTableId.ProjectLibraryTableId\n\nval libraryId = LibraryId(libraryName, libraryTableId)\nif (libraryId in currentSnapshot) {\n  // Library with such `LibraryId` already exist\n  ...\n}\n\nval libraryEntitySource =\n    LegacyBridgeJpsEntitySourceFactory\n        .createEntitySourceForProjectLibrary(project, null)\nval libraryEntity = LibraryEntity(\n  libraryName,\n  libraryTableId, emptyList(),\n  libraryEntitySource\n)\nWorkspaceModel.getInstance(project).update(\"Add new library\") { builder ->\n  builder.addEntity(libraryEntity)\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Gradle Grammar-Kit Plugin in Kotlin build script\nDESCRIPTION: Shows how to register the Grammar-Kit plugin in a Kotlin-based Gradle build script by adding it to the plugins section.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/tools_gradle_grammar_kit_plugin.md#2025-04-06_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n  id(\"org.jetbrains.grammarkit\") version \"%gradle-grammar-kit-plugin-version%\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JaCoCo Test Coverage\nDESCRIPTION: Demonstrates how to configure JaCoCo for proper test coverage reporting with PathClassLoader.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_faq.md#2025-04-06_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks {\n  withType<Test> {\n    configure<JacocoTaskExtension> {\n      isIncludeNoLocationClasses = true\n      excludes = listOf(\"jdk.internal.*\")\n    }\n  }\n\n  jacocoTestReport {\n    classDirectories.setFrom(instrumentCode)\n  }\n\n  jacocoTestCoverageVerification {\n    classDirectories.setFrom(instrumentCode)\n  }\n}\n```\n\nLANGUAGE: groovy\nCODE:\n```\ntest {\n  jacoco {\n    includeNoLocationClasses = true\n    excludes = [\"jdk.internal.*\"]\n  }\n}\n\njacocoTestReport {\n  classDirectories.setFrom(instrumentCode)\n}\n\njacocoTestCoverageVerification {\n  classDirectories.setFrom(instrumentCode)\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Using Colors in IntelliJ Platform Plugins\nDESCRIPTION: Demonstrates how to properly retrieve and use colors in IntelliJ platform plugins, ensuring compatibility with different themes and color schemes.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/user_interface_components/ui_faq.md#2025-04-06_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nJBColor.lazy(() -> {\n    // Lambda to retrieve the color\n    // This will be called every time the color is needed\n    return someMethodToRetrieveColor();\n});\n```\n\n----------------------------------------\n\nTITLE: Extension Point Reference Table - Markdown\nDESCRIPTION: Comprehensive table documenting extension point attributes, their requirements, values, and implementation details for Settings Configurables in the IntelliJ Platform.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/settings_guide.md#2025-04-06_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute           | Required                        | <p>Attribute</p><p>Value</p>                                                                                                                                                                                                                                                                                                                                                        | <p>Implementation</p><p>Basis</p>                  |\n|---------------------|---------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------------------------------------|\n```\n\n----------------------------------------\n\nTITLE: Creating a Loader with Label in Kotlin\nDESCRIPTION: This snippet demonstrates how to create a loader with a label using AnimatedIcon.Default in Kotlin. It creates a JLabel with the text \"Loading...\" and the default animated icon.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/ui/controls/loader.md#2025-04-06_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nJLabel(\n    \"Loading...\",\n    AnimatedIcon.Default(),\n    SwingConstants.LEFT\n)\n```\n\n----------------------------------------\n\nTITLE: Declaring IntelliJ Platform Dependencies in Gradle (Groovy)\nDESCRIPTION: Specifies dependencies on IntelliJ Platform modules using Groovy DSL in Gradle build script. Shows how to declare both API and implementation dependencies.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/intellij_artifacts.md#2025-04-06_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n  implementation \"com.jetbrains.intellij.platform:jps-model-serialization:182.2949.4\"\n  implementation \"com.jetbrains.intellij.platform:jps-model-impl:182.2949.4\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin Details in Kotlin\nDESCRIPTION: Example of configuring plugin details such as ID, name, version, and description using the pluginConfiguration block in a Kotlin-based Gradle build script.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_extension.md#2025-04-06_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nintellijPlatform {\n  // ...\n\n  pluginConfiguration {\n    id = \"my-plugin-id\"\n    name = \"My Awesome Plugin\"\n    version = \"1.0.0\"\n    description = \"It's an awesome plugin!\"\n    changeNotes =\n      \"\"\"\n      A descriptive release note...\n      \"\"\".trimIndent()\n\n    productDescriptor {\n      // ...\n    }\n    ideaVersion {\n      // ...\n    }\n    vendor {\n      // ...\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Plugin Group Type Enumeration\nDESCRIPTION: The FEATURED enum in PluginsGroupType has been renamed to STAFF_PICKS. Developers should update their code to use the new enum value.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/reference_guide/api_changes_list_2023.md#2025-04-06_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\ncom.intellij.ide.plugins.enums.PluginsGroupType.STAFF_PICKS\n```\n\n----------------------------------------\n\nTITLE: Modifying Parent Entity to Include Child Entity\nDESCRIPTION: Shows an alternative way to add a child entity by modifying the parent entity's properties. This example adds a ContentRootEntity to a module by updating the module's contentRoots collection.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/workspace_model/workspace_model_entity_mutation.md#2025-04-06_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval contentRoot = ContentRootEntity(url, emptyList(), entitySource)\nbuilder.modifyContentRootEntity(module) {\n  this.contentRoots = this.contentRoots + contentRoot\n}\n```\n\n----------------------------------------\n\nTITLE: Python IDE Extension Points Configuration\nDESCRIPTION: Configuration for Python IDE features including file type handling, dialect token sets, and code annotation.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/resources/intellij_community_plugins_extension_point_list.md#2025-04-06_snippet_8\n\nLANGUAGE: XML\nCODE:\n```\nPythonid.miscFileType\nPythonid.dialectsTokenSetContributor\nPythonid.pyAnnotator\n```\n\n----------------------------------------\n\nTITLE: Configuring Local IDE with JetBrains Runtime in Groovy\nDESCRIPTION: This snippet shows the Groovy equivalent for configuring a local IDE installation with bundled JetBrains Runtime using the IntelliJ Platform Gradle Plugin. It sets up repositories and dependencies for a specific local IDE path.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_faq.md#2025-04-06_snippet_9\n\nLANGUAGE: groovy\nCODE:\n```\nrepositories {\n  mavenCentral()\n\n  intellijPlatform {\n    defaultRepositories()\n  }\n}\n\ndependencies {\n  intellijPlatform {\n    local '/Users/hsz/Applications/IntelliJ IDEA Ultimate.app'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Table Cell Validation in Java\nDESCRIPTION: This Java code snippet demonstrates how to add real-time validation to table cells. It sets up a document listener on a text field cell editor, applies error styling conditionally, and adjusts the cell renderer to match the editor's dimensions.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/ui/principles/validation_errors.md#2025-04-06_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nJTextField cellEditor = new JTextField();\ncellEditor.putClientProperty(\n    DarculaUIUtil.COMPACT_PROPERTY, Boolean.TRUE);\ncellEditor.getDocument().addDocumentListener(new DocumentAdapter() {\n    @Override\n    protected void textChanged(@NotNull DocumentEvent e) {\n      Object outline = cellEditor.getText().contains(\".\") ?\n          \"error\" : null;\n      cellEditor.putClientProperty(\"JComponent.outline\", outline);\n    }\n});\nTableColumn firstColumn = table.getColumnModel().getColumn(0);\nfirstColumn.setCellEditor(new DefaultCellEditor(cellEditor));\nfirstColumn.setCellRenderer(new DefaultTableCellRenderer() {\n    @Override\n    public Dimension getPreferredSize() {\n      Dimension size = super.getPreferredSize();\n      Dimension editorSize = cellEditor.getPreferredSize();\n      size.height = Math.max(size.height, editorSize.height);\n      return size;\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Declaring Parent-Child Settings Using Separate Extension Points in XML\nDESCRIPTION: This snippet demonstrates how to declare a parent-child relationship for project settings using two separate extension point declarations. The parent is added to the 'tools' group, and the child is added to the parent's ID.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/settings_groups.md#2025-04-06_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<extensions defaultExtensionNs=\"com.intellij\">\n  <projectConfigurable\n      parentId=\"tools\"\n      id=\"com.intellij.sdk.tasks\"\n      displayName=\"Tasks\"\n      nonDefaultProject=\"true\"\n      instance=\"com.intellij.sdk.TaskConfigurable\"/>\n\n  <projectConfigurable\n      parentId=\"com.intellij.sdk.tasks\"\n      id=\"com.intellij.sdk.tasks.servers\"\n      displayName=\"Servers\"\n      nonDefaultProject=\"true\"\n      instance=\"com.intellij.sdk.TaskRepositoriesConfigurable\"/>\n</extensions>\n```\n\n----------------------------------------\n\nTITLE: Implementing Legal Notice Text in Kotlin UI DSL\nDESCRIPTION: Example of adding a multi-line legal notice as an inline help text for a checkbox using Kotlin UI DSL. The code demonstrates how to format HTML content with paragraphs and links.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/ui/controls/inline_help_text.md#2025-04-06_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\npanel {\n  row {\n    checkBox(\"Send usage statistics when using EAP versions\")\n      .comment(\"\"\"\n        <p>Help JetBrains improve its products by sending anonymous\n        data about features and plugins used, hardware and software\n        configuration, statistics on types of files, number of files\n        per project, etc.</p>\n        <br/>\n        <p>Please note that this will not include personal data or\n        any sensitive information, such as source code, file names,\n        etc. The data sent complies with the\n        <a href=\\\"https://www.jetbrains.com\\\">\n        JetBrains Privacy Policy</a></p>\n        \"\"\".trimIndent()\n      )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting System Properties for runIde Task\nDESCRIPTION: Demonstrates how to configure system properties for the runIde task execution.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/gradle_intellij_plugin/tools_gradle_intellij_plugin_faq.md#2025-04-06_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks {\n  runIde {\n    systemProperty(\"name\", \"value\")\n  }\n}\n```\n\nLANGUAGE: groovy\nCODE:\n```\nrunIde {\n  systemProperty(\"name\", \"value\")\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom runIdeForUiTests Task in Groovy\nDESCRIPTION: Shows how to create a custom runIde task with Robot Server Plugin for UI testing in Groovy build script to replace the deprecated runIdeForUiTests task.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_migration.md#2025-04-06_snippet_7\n\nLANGUAGE: groovy\nCODE:\n```\nval runIdeForUiTests by intellijPlatformTesting.runIde.registering {\n  task {\n    jvmArgumentProviders.add({\n      [\n        '-Drobot-server.port=8082',\n        '-Dide.mac.message.dialogs.as.sheets=false',\n        '-Djb.privacy.policy.text=<!--999.999-->',\n        '-Djb.consents.confirmation.enabled=false',\n      ]\n    } as CommandLineArgumentProvider)\n  }\n\n  plugins {\n    robotServerPlugin()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing TemplateContextType Extensions in IntelliJ Platform 2022.3\nDESCRIPTION: The EP_NAME field in TemplateContextType class has been removed. Use TemplateContextTypes to get TemplateContextType extensions instead.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/reference_guide/api_changes_list_2022.md#2025-04-06_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\ncom.intellij.codeInsight.template.TemplateContextType.EP_NAME\n```\n\n----------------------------------------\n\nTITLE: Extension Property for Cross-Module References\nDESCRIPTION: Second part of cross-module reference example showing the Kotlin module implementation with an extension property on MavenEntity using the WorkspaceEntity.extension() delegate.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/workspace_model/workspace_model_entity_declaration.md#2025-04-06_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\ninterface KotlinEntity: WorkspaceEntity {\n  val name: String\n  val maven: MavenEntity\n}\nval MavenEntity.kotlinEntity: @Child KotlinEntity\n  by WorkspaceEntity.extension()\n```\n\n----------------------------------------\n\nTITLE: Defining KotlinIndicesHelperExtension Extension Point in Kotlin\nDESCRIPTION: Project-level extension point for extending Kotlin indices helper functionality. It allows adding custom logic for working with Kotlin code indices.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/resources/intellij_community_plugins_extension_point_list.md#2025-04-06_snippet_13\n\nLANGUAGE: XML\nCODE:\n```\n<extensionPoint name=\"kotlinIndicesHelperExtension\" interface=\"org.jetbrains.kotlin.idea.core.extension.KotlinIndicesHelperExtension\" area=\"PROJECT\"/>\n```\n\n----------------------------------------\n\nTITLE: Defining Extension Point for Facet Type in IntelliJ SDK\nDESCRIPTION: This snippet shows the extension point definition for implementing a custom facet type in the IntelliJ SDK. It specifies the extension point name, implementation class, and the base extension point class.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/code_samples/facet_basics/README.md#2025-04-06_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                     | Implementation                      | Extension Point Class |\n|--------------------------|-------------------------------------|-----------------------|\n| `com.intellij.facetType` | [DemoFacetType][file:DemoFacetType] | `FacetType`           |\n```\n\n----------------------------------------\n\nTITLE: Implementing Declarative Inspection Options in Java\nDESCRIPTION: Shows how to use the declarative API to create inspection options with string list and checkbox controls bound to class fields. The example demonstrates the implementation of getOptionsPane() method.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/inspection_options.md#2025-04-06_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic OrderedSet<String> ignoredTypes = new OrderedSet<>();\npublic boolean ignoreNegations = false;\n\n@Override\npublic @NotNull OptPane getOptionsPane() {\n  return pane(\n    stringList(\n      \"ignoredTypes\",\n      message(\"options.label.ignored.classes\"),\n      new JavaClassValidator()),\n    checkbox(\n      \"ignoreNegations\",\n      message(\"size.replaceable.by.isempty.negation.ignore\"))\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Link Summary Implementation\nDESCRIPTION: Defines a link summary for the group header documentation with appropriate HTML tags.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/ui/controls/group_header.md#2025-04-06_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<link-summary>UI guidelines on using group headers.</link-summary>\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle IntelliJ Plugin Build Features in Properties\nDESCRIPTION: Demonstrates how to enable or disable Gradle IntelliJ Plugin build features by adding a Project property to the gradle.properties file. The example shows how to disable the selfUpdateCheck feature.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/gradle_intellij_plugin/tools_gradle_intellij_plugin_build_features.md#2025-04-06_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\norg.jetbrains.intellij.buildFeature.<buildFeatureName>=<true|false>\n```\n\nLANGUAGE: properties\nCODE:\n```\norg.jetbrains.intellij.buildFeature.selfUpdateCheck=false\n```\n\n----------------------------------------\n\nTITLE: Registering FindUsagesProvider in plugin.xml\nDESCRIPTION: XML configuration to register the SimpleFindUsagesProvider with the IntelliJ Platform for the Simple language.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/custom_language_support/find_usages_provider.md#2025-04-06_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<extensions defaultExtensionNs=\"com.intellij\">\n  <lang.findUsagesProvider\n      language=\"Simple\"\n      implementationClass=\"org.intellij.sdk.language.SimpleFindUsagesProvider\"/>\n</extensions>\n```\n\n----------------------------------------\n\nTITLE: Microservices Plugin Parameter Type Change\nDESCRIPTION: Details the parameter type change in UrlPathInlayAction.isAvailable() method from UrlPathContext to UrlPathInlayHint in version 2022.3.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/reference_guide/api_changes_list_2022.md#2025-04-06_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\ncom.intellij.microservices.url.inlay.UrlPathInlayHint.getContext\n```\n\n----------------------------------------\n\nTITLE: Basic Web Types JSON Example for HTML Element\nDESCRIPTION: A simple example of a Web Types JSON file that defines a custom HTML element 'my-element' with a 'foo' attribute. Includes basic metadata like schema reference, version, and description markup.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/custom_language_support/websymbols_web_types.md#2025-04-06_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"$schema\": \"https://raw.githubusercontent.com/JetBrains/web-types/master/schema/web-types.json\",\n  \"name\": \"example\",\n  \"version\": \"0.0.1\",\n  \"description-markup\": \"markdown\",\n  \"contributions\": {\n    \"html\": {\n      \"elements\": [\n        {\n          \"name\": \"my-element\",\n          \"description\": \"A custom HTML element\",\n          \"doc-url\": \"https://example.com/docs/my-element\",\n          \"attributes\": [\n            {\n              \"name\": \"foo\",\n              \"description\": \"A custom attribute of `my-element`\"\n            }\n          ]\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Parcelize Availability Provider Extension Point\nDESCRIPTION: Specifies a project-level extension point for Parcelize availability providers in Kotlin. It references the ParcelizeAvailabilityProvider implementation.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/resources/intellij_community_plugins_extension_point_list.md#2025-04-06_snippet_20\n\nLANGUAGE: XML\nCODE:\n```\n<extensionPoint name=\"org.jetbrains.kotlin.idea.compilerPlugin.parcelize.availabilityProvider\" interface=\"org.jetbrains.kotlin.idea.compilerPlugin.parcelize.ParcelizeAvailabilityProvider\" area=\"PROJECT\"/>\n```\n\n----------------------------------------\n\nTITLE: Defining Extension Point for DemoFramework in IntelliJ SDK\nDESCRIPTION: This snippet shows the extension point configuration for the DemoFramework. It uses the com.intellij.framework.type extension point and implements the FrameworkTypeEx class.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/code_samples/framework_basics/README.md#2025-04-06_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n| Name                          | Implementation                      | Extension Point Class |\n|-------------------------------|-------------------------------------|-----------------------|\n| `com.intellij.framework.type` | [DemoFramework][file:DemoFramework] | `FrameworkTypeEx`     |\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Repositories in Gradle (Groovy)\nDESCRIPTION: Configures Maven repositories for accessing IntelliJ Platform releases and dependencies using Groovy DSL in Gradle build script.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/intellij_artifacts.md#2025-04-06_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\nrepositories {\n  maven { url \"https://www.jetbrains.com/intellij-repository/releases\" }\n  maven { url \"https://cache-redirector.jetbrains.com/intellij-dependencies\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Notification Implementation Reference\nDESCRIPTION: Core implementation class reference for the notifications system in IntelliJ platform.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/ui/controls/balloon.md#2025-04-06_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`Notifications`](%gh-ic%/platform/ide-core/src/com/intellij/notification/Notifications.java)\n```\n\n----------------------------------------\n\nTITLE: Setting Gradle Property for IntelliJ Platform Plugin\nDESCRIPTION: Example of how to set a Gradle property for the IntelliJ Platform Plugin in the gradle.properties file. The property name follows a specific pattern and can be used to enable or disable features.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_gradle_properties.md#2025-04-06_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\norg.jetbrains.intellij.platform.<name>=<value>\n```\n\n----------------------------------------\n\nTITLE: Defining QuickFixContributor Extension Point in Kotlin\nDESCRIPTION: Extension point for contributing additional quick fixes in Kotlin. It allows plugins to provide custom quick fix actions for Kotlin code.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/resources/intellij_community_plugins_extension_point_list.md#2025-04-06_snippet_14\n\nLANGUAGE: XML\nCODE:\n```\n<extensionPoint name=\"quickFixContributor\" interface=\"org.jetbrains.kotlin.idea.quickfix.QuickFixContributor\"/>\n```\n\n----------------------------------------\n\nTITLE: System Property Configuration for Test Execution\nDESCRIPTION: Configuration required to fix test execution failures with classloader issues. Sets a system property to force use of core classloader.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/reference_guide/api_changes_list_2021.md#2025-04-06_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nidea.force.use.core.classloader=true\n```\n\n----------------------------------------\n\nTITLE: Defining Vue Component Properties with Domain-Specific Syntax\nDESCRIPTION: JSON configuration showing how to define Vue component properties using a more domain-specific approach with props definition.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/custom_language_support/websymbols_integration.md#2025-04-06_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"contributions\": {\n    \"html\": {\n      \"vue-components\": [\n        {\n          \"name\": \"MyVueComponent\",\n          \"description\": \"This is the component you always needed in your application\",\n          \"props\": [\n            {\n              \"name\": \"listen-to\",\n              \"type\": \"string | HTMLElement | Document | Window | (() => HTMLElement)\",\n              \"description\": \"The scrolling element to listen to.\",\n              \"default\": \"document\"\n            }\n          ]\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing PythonCore Extension Point in Java\nDESCRIPTION: Example of how to implement a PythonCore extension point in Java. This snippet shows a basic implementation of the PyBreakpointHandlerFactory interface.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/resources/intellij_community_plugins_extension_point_list.md#2025-04-06_snippet_22\n\nLANGUAGE: Java\nCODE:\n```\npublic class MyBreakpointHandler implements PyBreakpointHandlerFactory {\n    @Override\n    public PyBreakpointHandler createBreakpointHandler() {\n        // Implementation\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining VerificationReportsFormats Enum in Kotlin for VerifyPluginTask\nDESCRIPTION: Enum describing the type of results produced by the IntelliJ Plugin Verifier CLI tool. Options include PLAIN, HTML, MARKDOWN, ALL, and NONE.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_types.md#2025-04-06_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nenum class VerificationReportsFormats {\n    PLAIN,\n    HTML,\n    MARKDOWN,\n    ALL,\n    NONE\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom FileViewProviderFactory in plugin.xml\nDESCRIPTION: XML configuration for registering a custom FileViewProviderFactory implementation in the plugin.xml file. This allows a plugin to create custom FileViewProvider instances for specific file types that need to handle multiple language PSI trees.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/architectural_overview/file_view_providers.md#2025-04-06_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<extensions defaultExtensionNs=\"com.intellij\">\n  <fileType.fileViewProviderFactory\n      filetype=\"$FILE_TYPE$\"\n      implementationClass=\"com.example.MyFileViewProviderFactory\"/>\n</extensions>\n```\n\n----------------------------------------\n\nTITLE: Implementing a BasicDomElementComponent for UI Form\nDESCRIPTION: Implementation of a UI component class that extends BasicDomElementComponent to bind DOM properties to UI controls. The component uses automatic property binding based on field naming conventions.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/frameworks_and_external_apis/xml_dom_api.md#2025-04-06_snippet_25\n\nLANGUAGE: Java\nCODE:\n```\npublic class ConverterComponent extends BasicDomElementComponent<Converter> {\n  private JPanel myRootPane;\n  private TextPanel myConverterId;\n  private PsiClassPanel myConverterClass;\n\n  public ConverterComponent(Converter domElement) {\n    super(domElement);\n    bindProperties();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Showing Loader in Top Right Corner (Markdown/HTML)\nDESCRIPTION: Demonstrates placing a loader in the top right corner of a content area when it applies to the whole content.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/ui/controls/progress_indicators.md#2025-04-06_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n![](tree_loader_corner.png){width=400}\n```\n\n----------------------------------------\n\nTITLE: Checking for Preview Element\nDESCRIPTION: Use IntentionPreviewUtils.isPreviewElement() instead of PsiElement.isPhysical() to correctly handle non-physical elements in preview mode.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/code_intentions_preview.md#2025-04-06_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\nIntentionPreviewUtils.isPreviewElement()\n```\n\n----------------------------------------\n\nTITLE: Removing EditorFactoryImpl Constructor in IntelliJ Platform 2019.3\nDESCRIPTION: The constructor 'EditorFactoryImpl(EditorActionManager)' has been removed. Users should use 'EditorFactory.getInstance()' instead.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/reference_guide/api_changes_list_2019.md#2025-04-06_snippet_8\n\nLANGUAGE: Java\nCODE:\n```\ncom.intellij.openapi.editor.impl.EditorFactoryImpl(EditorActionManager)\n```\n\n----------------------------------------\n\nTITLE: Registering ProblemFilter Extension Point for Grazie in Java\nDESCRIPTION: Register a custom ProblemFilter implementation in the plugin.xml file using the com.intellij.grazie.problemFilter extension point for Grazie grammar checks.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/custom_language_support/spell_checking.md#2025-04-06_snippet_4\n\nLANGUAGE: XML\nCODE:\n```\n<extension point=\"com.intellij.grazie.problemFilter\"/>\n```\n\n----------------------------------------\n\nTITLE: Extension Point Mapping Table\nDESCRIPTION: A table mapping extension point IDs to their implementation classes, with indicators for Project-Level, DumbAware, and Experimental extensions.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/resources/intellij_platform_extension_point_list.md#2025-04-06_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| Extension Point | Implementation |\n|-----------------|----------------|\n| [com.intellij.aliasingPsiTargetMapper](https://jb.gg/ipe?extensions=com.intellij.aliasingPsiTargetMapper) | [`AliasingPsiTargetMapper`] |\n| [com.intellij.analyzeStacktraceFilter](https://jb.gg/ipe?extensions=com.intellij.analyzeStacktraceFilter) ![Project-Level][project-level] ![DumbAware][dumb-aware] | [`Filter`] |\n```\n\n----------------------------------------\n\nTITLE: Configuring JBSplitter in IntelliJ Platform\nDESCRIPTION: JBSplitter is a replacement for JSplitPane with a different API. It supports adding components and remembering split proportions.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/user_interface_components/misc_swing_components.md#2025-04-06_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nsetFirstComponent()\nsetSecondComponent()\nsetSplitterProportionKey()\n```\n\n----------------------------------------\n\nTITLE: Implementing Commenter Test Method in Java for IntelliJ IDEA Plugin\nDESCRIPTION: This code snippet defines a test method 'testCommenter()' in the SimpleCodeInsightTest class. It tests the commenter functionality by inserting and removing a comment character in a Simple Language properties file.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/writing_tests_for_plugins/commenter_test.md#2025-04-06_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\npublic void testCommenter() {\n    // Arrange\n    myFixture.configureByText(SimpleFileType.INSTANCE, \"<caret>test = test\");\n    CommentByLineCommentAction commentAction = new CommentByLineCommentAction();\n\n    // Act\n    commentAction.actionPerformedImpl(getProject(), myFixture.getEditor(), myFixture.getFile());\n    // Assert\n    myFixture.checkResult(\"#test = test\");\n\n    // Act\n    commentAction.actionPerformedImpl(getProject(), myFixture.getEditor(), myFixture.getFile());\n    // Assert\n    myFixture.checkResult(\"test = test\");\n}\n```\n\n----------------------------------------\n\nTITLE: Component Query Examples\nDESCRIPTION: Demonstrates different ways to query UI components using XPath and QueryBuilder methods.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/testing_plugins/integration_tests/integration_tests_ui.md#2025-04-06_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nxQuery { byAccessibleName(\"Current File\") }\nxQuery { byVisibleText(\"Current File\") }\nxQuery {\n  byType(\"com.intellij.execution.ui.RedesignedRunConfigurationSelector\\$createCustomComponent$1\")\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Package Chooser in Java\nDESCRIPTION: Uses PackageChooserDialog class to create a chooser for selecting Java packages.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/user_interface_components/file_and_class_choosers.md#2025-04-06_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\nPackageChooserDialog\n```\n\n----------------------------------------\n\nTITLE: HTML Table Structure for Icon Display\nDESCRIPTION: HTML table structure used to display icon examples and their color codes in the documentation.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/ui/principles/icons_style.md#2025-04-06_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<table style=\"none\">\n    <tr>\n        <td width=\"50%\">\n            <img src=\"action_red.png\" width=\"64\" />\n            <br/>\n            <p><b>Red</b></p><p>#DB5860</p>\n        </td>\n        <td width=\"50%\">\n            <img src=\"action_red_d.png\" width=\"64\" />\n            <br/>\n            <p><b>Red dark</b></p><p>#C75450</p>\n        </td>\n    </tr>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Declaring Application Settings with XML Extension Point\nDESCRIPTION: Example of declaring application-level settings using the com.intellij.applicationConfigurable extension point. This shows how to specify parent group, implementation class, unique ID, and display name.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/settings_guide.md#2025-04-06_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<extensions defaultExtensionNs=\"com.intellij\">\n  <applicationConfigurable\n      parentId=\"tools\"\n      instance=\"com.example.ApplicationSettingsConfigurable\"\n      id=\"com.example.ApplicationSettingsConfigurable\"\n      displayName=\"My Application Settings\"/>\n</extensions>\n```\n\n----------------------------------------\n\nTITLE: Removing CompletionContributor Method in IntelliJ Platform 2019.3\nDESCRIPTION: The 'getActionShortcut' method in 'CompletionContributor' has been removed. Users should use the equivalent method in 'CompletionUtil' instead.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/reference_guide/api_changes_list_2019.md#2025-04-06_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\ncom.intellij.codeInsight.completion.CompletionContributor.getActionShortcut(String)\n```\n\n----------------------------------------\n\nTITLE: Registering BundledDictionaryProvider Extension Point in Java\nDESCRIPTION: Register a custom BundledDictionaryProvider implementation in the plugin.xml file using the com.intellij.spellchecker.bundledDictionaryProvider extension point.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/custom_language_support/spell_checking.md#2025-04-06_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<extension point=\"com.intellij.spellchecker.bundledDictionaryProvider\"/>\n```\n\n----------------------------------------\n\nTITLE: Defining TSLint Plugin Extension Point in XML\nDESCRIPTION: This XML snippet defines an extension point for the TSLint plugin in IntelliJ. It includes an extension point for TSLint config detectors.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/resources/oss_plugins_extension_point_list.md#2025-04-06_snippet_11\n\nLANGUAGE: XML\nCODE:\n```\n<extensions defaultExtensionNs=\"com.intellij\">\n  <tslint.configDetector implementation=\"com.intellij.lang.javascript.linter.tslint.config.TsLintConfigDetector\"/>\n</extensions>\n```\n\n----------------------------------------\n\nTITLE: Referencing ComboBox Implementation in IntelliJ Platform\nDESCRIPTION: A reference to the ComboBox class implementation in the IntelliJ Platform API, which is used to create drop-down lists in IntelliJ-based IDEs.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/ui/controls/drop_down.md#2025-04-06_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nComboBox\n```\n\n----------------------------------------\n\nTITLE: Adding Postfix Template Abbreviation\nDESCRIPTION: Shows how to add the .var postfix template abbreviation to generate a variable assignment.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/postfix_completion.md#2025-04-06_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nvoid confirmOrder(Cart cart) {\n  cart.getDeliveryType().getDeliveryCost().var\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Spring EL Contexts and Injection in XML\nDESCRIPTION: Extension points for Spring Expression Language (EL) contexts and injection. It includes points for defining EL contexts extensions and injection contexts.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/resources/spring_extension_point_list.md#2025-04-06_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<extensionPoints>\n  <extensionPoint name=\"com.intellij.spring.el.contexts\" interface=\"SpringElContextsExtension\"/>\n  <extensionPoint name=\"com.intellij.spring.el.injection.context\" interface=\"SpringElInjectionContext\"/>\n</extensionPoints>\n```\n\n----------------------------------------\n\nTITLE: Creating Class Chooser in Java\nDESCRIPTION: Uses TreeClassChooserFactory class to create a chooser for selecting Java classes, with options to specify scope and class restrictions.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/user_interface_components/file_and_class_choosers.md#2025-04-06_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\nTreeClassChooserFactory\n```\n\n----------------------------------------\n\nTITLE: Tasks Plugin Extension Points\nDESCRIPTION: Extension points for task management functionality including repository types and dialog panel providers.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/resources/intellij_community_plugins_extension_point_list.md#2025-04-06_snippet_4\n\nLANGUAGE: XML\nCODE:\n```\ncom.intellij.tasks.commitPlaceholderProvider\ncom.intellij.tasks.dialogPanelProvider\ncom.intellij.tasks.repositoryType\n```\n\n----------------------------------------\n\nTITLE: Implementing JDOMExternalizable for Component State Persistence in Java\nDESCRIPTION: The JDOMExternalizable interface is used for older components to persist state. It requires implementing readExternal() to read state from a JDOM element and writeExternal() to write state. Developers can manually store state or use DefaultJDOMExternalizer for automatic storage of public fields.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/persisting_state_of_components.md#2025-04-06_snippet_9\n\nLANGUAGE: Java\nCODE:\n```\npublic class MyComponent implements JDOMExternalizable {\n    public void readExternal(Element element) throws InvalidDataException {\n        // Read state from JDOM element\n    }\n\n    public void writeExternal(Element element) throws WriteExternalException {\n        // Write state to JDOM element\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Python Plugin Package and Method Changes in 2019.3\nDESCRIPTION: Documentation of several changes in the Python plugin including class relocations, method removals, and icon field replacements. Alternative methods and fields are provided for each removed element.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/reference_guide/api_changes_list_2019.md#2025-04-06_snippet_14\n\nLANGUAGE: Java\nCODE:\n```\n// Class moved to different package\ncom.jetbrains.python.inspections.PythonVisitorFilter -> com.jetbrains.python.psi.PythonVisitorFilter\n\n// Methods removed with alternatives\ncom.jetbrains.python.psi.PyUtil.addElementToStatementList(PsiElement, PyStatementList, boolean)\n// Use instead:\ncom.jetbrains.python.refactoring.PyRefactoringUtil.addElementToStatementList(PsiElement, PyStatementList, boolean)\n\ncom.jetbrains.python.psi.search.PyProjectScopeBuilder.excludeSdkTestsScope(Project)\n// Use instead:\ncom.jetbrains.python.psi.search.PySearchUtilBase.excludeSdkTestsScope(Project)\n\n// Fields removed with alternatives\nicons.PythonIcons.Python.PropertySetter -> icons.PythonPsiApiIcons.PropertySetter\nicons.PythonIcons.Python.PropertyGetter -> icons.PythonPsiApiIcons.PropertyGetter\n\n// Resource bundle properties moved\nPARSE.expected.colon from com.jetbrains.python.PyBundle -> com.jetbrains.python.PyPsiBundle\nPARSE.expected.expression from com.jetbrains.python.PyBundle -> com.jetbrains.python.PyPsiBundle\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Trust State Changes\nDESCRIPTION: Demonstrates how to subscribe to changes in the project's trust state using the TrustStateListener interface. This allows plugins to react when a project becomes trusted.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/project_model/trusted_projects.md#2025-04-06_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nTrustStateListener.onProjectTrusted()\n```\n\n----------------------------------------\n\nTITLE: Defining Rider Extension Points in XML\nDESCRIPTION: This XML snippet defines extension points for JetBrains Rider IDE. It includes points for run configurations, unit testing, solution management, and other IDE functionalities. Each extension point is linked to its implementation class.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/resources/rider_extension_point_list.md#2025-04-06_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<extensionPoints>\n  <extensionPoint name=\"com.intellij.rider.run.configurations.host\" interface=\"RunConfigurationHostExtensions\"/>\n  <extensionPoint name=\"com.intellij.rider.run.configurations.host.executor\" interface=\"RunConfigurationHostExecutorExtensions\"/>\n  <extensionPoint name=\"com.intellij.rider.run.configurations.launchSettings\" interface=\"LaunchSettingsConfigurationExtension\"/>\n  <extensionPoint name=\"com.intellij.rider.run.configurations.launchSettings.command\" interface=\"LaunchSettingsCommandExtension\"/>\n  <extensionPoint name=\"com.intellij.rider.run.configurations.launchSettings.generator\" interface=\"LaunchSettingsConfigGeneratorExtension\"/>\n  <extensionPoint name=\"com.intellij.rider.run.configurations.multiPlatform.mac.extension\" interface=\"MacRunConfigurationExtension\"/>\n  <extensionPoint name=\"com.intellij.rider.run.configurations.project\" interface=\"DotNetProjectConfigurationExtension\"/>\n  <extensionPoint name=\"com.intellij.rider.run.configurations.riderCoreDumpConfigurationProvider\" interface=\"RiderCoreDumpConfigurationProvider\"/>\n  <extensionPoint name=\"com.intellij.rider.run.configurations.uwp\" interface=\"UwpConfigurationExtension\"/>\n  <extensionPoint name=\"com.intellij.rider.run.dotNetProfileConsoleViewProvider\" interface=\"DotNetProfileConsoleViewProviderExtension\"/>\n  <extensionPoint name=\"com.intellij.rider.runToPopupShowPolicy\" interface=\"RiderRunToPopupShowPolicy\"/>\n  <extensionPoint name=\"com.intellij.rider.runWidgetSuspenderExtension\" interface=\"RunWidgetSuspenderExtension\"/>\n  <extensionPoint name=\"com.intellij.rider.runtime.dotNetRuntimeAutodetect\" interface=\"DotNetRuntimeAutodetect\"/>\n  <extensionPoint name=\"com.intellij.rider.solutionConfigurationPresenter\" interface=\"SolutionConfigurationPresenter\"/>\n  <extensionPoint name=\"com.intellij.rider.solutionConfigurationToolbarCustomizer\" interface=\"SolutionConfigurationToolbarCustomizer\"/>\n  <extensionPoint name=\"com.intellij.rider.unitTesting.actionsProvider\" interface=\"RiderUnitTestActionsProvider\"/>\n  <extensionPoint name=\"com.intellij.rider.unitTesting.sessionHandler\" interface=\"IRiderUnitTestDebuggerSessionsHandler\"/>\n  <extensionPoint name=\"com.intellij.rider.unityDetector\" interface=\"UnityDetector\"/>\n  <extensionPoint name=\"com.intellij.rider.web.extensions.companionDebugStarter\" interface=\"DotNetCompanionDebugStarter\"/>\n  <extensionPoint name=\"com.intellij.rider.web.extensions.webBrowserDebugSupport\" interface=\"WebBrowserDebugSupport\"/>\n  <extensionPoint name=\"com.intellij.rider.writingAccessProvider\" interface=\"RiderDebugWritingAccessProvider\"/>\n  <extensionPoint name=\"com.intellij.rider.xaml.preview.editor\" interface=\"XamlPreviewEditorExtension\"/>\n  <extensionPoint name=\"com.intellij.solutionExplorerCustomization\" interface=\"SolutionExplorerCustomization\"/>\n  <extensionPoint name=\"com.intellij.solutionExplorerRootProvider\" interface=\"SolutionExplorerRootProvider\"/>\n  <extensionPoint name=\"com.intellij.solutionManagerExtensions\" interface=\"SolutionManagerExtensions\"/>\n  <extensionPoint name=\"com.intellij.solutionViewPsiNodeNavigator\" interface=\"SolutionViewPsiNodeNavigator\"/>\n</extensionPoints>\n```\n\n----------------------------------------\n\nTITLE: Registering Terminal Shell Command Handler Extension Point\nDESCRIPTION: Example of registering a Terminal Shell Command Handler to delegate Run Anything/Terminal commands to IDE features.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/api_notable/api_notable_list_2020.md#2025-04-06_snippet_7\n\nLANGUAGE: XML\nCODE:\n```\n<com.intellij.terminal.shellCommandHandler/>\n```\n\n----------------------------------------\n\nTITLE: Defining Special Markup in Test Files\nDESCRIPTION: Special markup used to specify caret position and text selection in test files when opened in the in-memory editor.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/testing_plugins/test_project_and_testdata_directories.md#2025-04-06_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<caret>               // Specifies caret position\n<selection></selection> // Specifies selected text range\n<block></block>         // Specifies column selection points\n```\n\n----------------------------------------\n\nTITLE: Defining Osmorc Plugin Extension Point in XML\nDESCRIPTION: This XML snippet defines an extension point for the Osmorc plugin in IntelliJ. It includes an extension point for framework integrators.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/resources/oss_plugins_extension_point_list.md#2025-04-06_snippet_9\n\nLANGUAGE: XML\nCODE:\n```\n<extensions defaultExtensionNs=\"Osmorc\">\n  <frameworkIntegrator implementation=\"org.osmorc.frameworkintegration.FrameworkIntegrator\"/>\n</extensions>\n```\n\n----------------------------------------\n\nTITLE: Creating File Chooser with Text Field in Java\nDESCRIPTION: Uses TextFieldWithBrowseButton component with addBrowseFolderListener() method to create a text field with a file chooser button.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/user_interface_components/file_and_class_choosers.md#2025-04-06_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nTextFieldWithBrowseButton\n```\n\nLANGUAGE: Java\nCODE:\n```\naddBrowseFolderListener()\n```\n\n----------------------------------------\n\nTITLE: Theme Extension Point Configuration Table\nDESCRIPTION: Markdown table defining the theme provider extension point configuration, showing the implementation file and extension point class.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/code_samples/theme_basics/README.md#2025-04-06_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                         | Implementation                                          | Extension Point Class |\n|------------------------------|---------------------------------------------------------|-----------------------|\n| `com.intellij.themeProvider` | [theme_basics.theme.json][file:theme_basics.theme.json] |                       |\n```\n\n----------------------------------------\n\nTITLE: Legacy Plugin Extension Registration\nDESCRIPTION: XML configuration for registering live template extensions in IntelliJ Platform versions 2019.3 and earlier.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/live_templates/providing_live_templates.md#2025-04-06_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<extensions defaultExtensionNs=\"com.intellij\">\n  <defaultLiveTemplatesProvider\n      implementation=\"org.intellij.sdk.liveTemplates.MarkdownTemplateProvider\"/>\n  <liveTemplateContext\n      implementation=\"org.intellij.sdk.liveTemplates.MarkdownContext\"/>\n</extensions>\n```\n\n----------------------------------------\n\nTITLE: Defining IntelliJ Platform Dependencies\nDESCRIPTION: Shows how to set up IntelliJ Platform dependencies with the new approach using the dependencies block instead of the intellij extension properties.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_migration.md#2025-04-06_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nrepositories {\n  mavenCentral()\n  intellijPlatform {\n    defaultRepositories()\n  }\n}\n\ndependencies {\n  intellijPlatform {\n    create(type, version)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Type Example - Function Parameter\nDESCRIPTION: Example demonstrating complete type inference for a function parameter with explicit type hint.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/products/phpstorm/php_open_api_php_type_providers.md#2025-04-06_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nfunction foo(string $a): string {\n  echo $a;\n}\n```\n\n----------------------------------------\n\nTITLE: ContainerUtil Changes - Unmodifiable Collections in Java\nDESCRIPTION: Methods in ContainerUtil marked with @Unmodifiable annotation now return truly unmodifiable collections. This change is currently active only in internal/test mode.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/api_notable/api_notable_list_2025.md#2025-04-06_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@Unmodifiable\npublic static <T> Collection<T> someMethod() {\n    // Returns unmodifiable collection\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring IDE Type for Plugin Development\nDESCRIPTION: Configuration property for specifying the type of IntelliJ-based IDE distribution to build against. Supports various JetBrains IDEs like IntelliJ IDEA, CLion, PyCharm etc.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/gradle_intellij_plugin/tools_gradle_intellij_plugin.md#2025-04-06_snippet_8\n\nLANGUAGE: properties\nCODE:\n```\nintellij.type=IC\n```\n\n----------------------------------------\n\nTITLE: Angular Custom Events Pattern in Web Types\nDESCRIPTION: Complex example from Angular plugin Web Types showing how to define custom events with modifiers. Uses pattern templates to create flexible event handling with modifiers like 'prevent' and 'stop'.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/custom_language_support/websymbols_web_types.md#2025-04-06_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"ng-custom-events\": [\n    {\n      \"name\": \"Custom modifiers for declarative events handling\",\n      \"priority\": \"normal\",\n      \"pattern\": {\n        \"template\": [\n          {\n            \"items\": {\n              \"path\": \"/js/events\",\n              \"includeVirtual\": false\n            }\n          },\n          {\n            \"items\": \"ng-event-plugins-modifiers\",\n            \"template\": [\n              \".\",\n              \"#...\",\n              \"#item:modifiers\"\n            ],\n            \"priority\": \"high\",\n            \"repeat\": true,\n            \"unique\": true,\n            \"required\": false\n          }\n        ]\n      },\n      \"ng-event-plugins-modifiers\": [\n        {\n          \"name\": \"prevent\"\n        },\n        {\n          \"name\": \"stop\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Tag Recogniser Extension Point\nDESCRIPTION: Declares an experimental extension point for YAML tag recognisers. It points to the YamlTagRecogniser implementation in Kotlin.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/resources/intellij_community_plugins_extension_point_list.md#2025-04-06_snippet_19\n\nLANGUAGE: XML\nCODE:\n```\n<extensionPoint name=\"yaml.tagRecogniser\" interface=\"org.jetbrains.yaml.psi.YamlTagRecogniser\"/>\n```\n\n----------------------------------------\n\nTITLE: Choosing Files with FileChooser in Java\nDESCRIPTION: Uses FileChooser.chooseFiles() method to let a user choose files or directories. FileChooserDescriptor controls which files can be selected.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/user_interface_components/file_and_class_choosers.md#2025-04-06_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nFileChooser.chooseFiles()\n```\n\n----------------------------------------\n\nTITLE: TOML JSON Schema Extension Points Configuration\nDESCRIPTION: Defines extension point for TOML JSON schema completion file filtering.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/resources/intellij_community_plugins_extension_point_list.md#2025-04-06_snippet_10\n\nLANGUAGE: XML\nCODE:\n```\norg.toml.ide.json.tomlJsonSchemaCompletionFileFilter\n```\n\n----------------------------------------\n\nTITLE: Collection Child Elements Accessor\nDESCRIPTION: Method declaration for accessing a collection of child elements with the same tag name.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/frameworks_and_external_apis/xml_dom_api.md#2025-04-06_snippet_14\n\nLANGUAGE: java\nCODE:\n```\nList<Entity> getEntities();\n```\n\n----------------------------------------\n\nTITLE: Configuring Publishing Options in Groovy\nDESCRIPTION: Shows the configuration of publishing options for the IntelliJ Platform Gradle plugin using Groovy DSL. It covers the same settings as the Kotlin example.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_extension.md#2025-04-06_snippet_9\n\nLANGUAGE: groovy\nCODE:\n```\nintellijPlatform {\n  // ...\n\n  publishing {\n    host = ''\n    token = '7hR4nD0mT0k3n_8f2eG'\n    channels = ['default']\n    ideServices = false\n    hidden = false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Return Type References in Java (Pre-2020.2)\nDESCRIPTION: Illustrates how to handle return type references before PhpStorm 2020.2. This method uses the now-deprecated getClassReference() method, which is no longer suitable for union types.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/products/phpstorm/php_open_api_breaking_changes_202.md#2025-04-06_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nprivate void handleReturnTypeBefore(PhpReturnType returnType) {\n  ClassReference classReference = returnType.getClassReference();\n  handleReference(classReference);\n}\n```\n\n----------------------------------------\n\nTITLE: Using ApplicationInfo.getBuild() in IntelliJ Platform\nDESCRIPTION: Replace BuildNumber.currentVersion() with ApplicationInfo.getBuild() to get the current build number of the application.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/api_internal/api_internal.md#2025-04-06_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nApplicationInfo.getInstance().getBuild()\n```\n\n----------------------------------------\n\nTITLE: Registering Web Types Resource\nDESCRIPTION: XML configuration for registering Web Types file in plugin.xml\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/custom_language_support/websymbols_context.md#2025-04-06_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<idea-plugin>\n  <extensions defaultExtensionNs=\"com.intellij\">\n    <webSymbols.webTypes\n        source=\"web-types/vue-store-contexts@0.0.0.web-types.json\"\n        enableByDefault=\"true\"/>\n  </extensions>\n</idea-plugin>\n```\n\n----------------------------------------\n\nTITLE: Defining PythonCore Extension Point in plugin.xml\nDESCRIPTION: Example of how to define a PythonCore extension point in a plugin.xml file. This snippet shows the basic structure for declaring an extension point for the PythonCore plugin.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/resources/intellij_community_plugins_extension_point_list.md#2025-04-06_snippet_21\n\nLANGUAGE: XML\nCODE:\n```\n<extensions defaultExtensionNs=\"Pythonid\">\n  <extensionPoint name=\"someExtensionPoint\" interface=\"com.example.SomeInterface\"/>\n</extensions>\n```\n\n----------------------------------------\n\nTITLE: Complete UI Test Implementation\nDESCRIPTION: A complete example of a UI test demonstrating component interaction, assertion checking, and error handling.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/testing_plugins/integration_tests/integration_tests_ui.md#2025-04-06_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\n@Test\nfun simpleTestForCustomUIElement() {\n  Starter.newContext(\n    \"testExample\",\n    TestCase(\n      IdeProductProvider.IC,\n      GitHubProject.fromGithub(\n        branchName = \"master\",\n        repoRelativeUrl = \"JetBrains/ij-perf-report-aggregator\"\n      )\n    )\n      .withVersion(\"2024.3\")\n  )\n    .apply {\n      val pathToPlugin = System.getProperty(\"path.to.build.plugin\")\n      PluginConfigurator(this).installPluginFromFolder(File(pathToPlugin))\n    }.runIdeWithDriver().useDriverAndCloseIde {\n      waitForIndicators(1.minutes)\n      ideFrame {\n        x(xQuery { byVisibleText(\"Current File\") }).click()\n        val configurations = popup().jBlist(\n          xQuery { contains(byVisibleText(\"Edit Configurations\")) }\n        )\n        configurations.shouldBe(\"Configuration list is not present\", present)\n        Assertions.assertTrue(\n          configurations.rawItems.contains(\"backup-data\"),\n          \"Configurations list doesn't contain 'backup-data' item: ${configurations.rawItems}\"\n        )\n      }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting PsiElement to Specific UElement Type in Kotlin\nDESCRIPTION: Shows how to convert a PsiElement to a specific UElement type (UCallExpression) in Kotlin.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/architectural_overview/uast.md#2025-04-06_snippet_3\n\nLANGUAGE: Kotlin\nCODE:\n```\nelement.toUElement(UCallExpression::class.java)\n```\n\n----------------------------------------\n\nTITLE: Configuring Spring Graph Gutter Diagram Action Provider in XML\nDESCRIPTION: Extension point for providing gutter diagram actions in Spring graphs. It uses the SpringGutterDiagramActionProvider implementation.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/resources/spring_extension_point_list.md#2025-04-06_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<extensionPoints>\n  <extensionPoint name=\"com.intellij.spring.gutterDiagramActionProvider\" interface=\"SpringGutterDiagramActionProvider\"/>\n</extensionPoints>\n```\n\n----------------------------------------\n\nTITLE: Build plugin archive file property\nDESCRIPTION: Property for specifying the output archive file location for the buildPlugin task.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_tasks.md#2025-04-06_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\narchiveFile: RegularFileProperty\n```\n\n----------------------------------------\n\nTITLE: Handling Parameter Type References in Java (Pre-2020.2)\nDESCRIPTION: Demonstrates how to fetch a class reference directly from a parameter before PhpStorm 2020.2. This method is no longer valid in newer versions due to changes in the PSI structure.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/products/phpstorm/php_open_api_breaking_changes_202.md#2025-04-06_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nprivate void handleParameterBefore(Parameter parameter) {\n  ClassReference classReference = PsiTreeUtil.getChildOfType(parameter, ClassReference.class);\n  handleReference(classReference);\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP Client Plugin API Change - HttpRequestVariableSubstitutor\nDESCRIPTION: Migration instructions for HttpRequestVariableSubstitutor class conversion to interface in version 2022.3. Details the new construction method using HttpRequestVariableSubstitutorImpl.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/reference_guide/api_changes_list_2022.md#2025-04-06_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\ncom.intellij.httpClient.http.request.HttpRequestVariableSubstitutorImpl.create(Project, HttpRequestEnvironment)\n```\n\n----------------------------------------\n\nTITLE: Defining Expected PSI Tree Output for Simple Language Parsing\nDESCRIPTION: Specifies the expected PSI (Program Structure Interface) tree structure resulting from parsing the test input data.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/writing_tests_for_plugins/parsing_test.md#2025-04-06_snippet_2\n\nLANGUAGE: Properties\nCODE:\n```\nSimple File\n  Property\n    PsiElement(KEY)('website')\n    PsiElement(SEPARATOR)('=')\n    PsiElement(VALUE)('https://en.wikipedia.org/')\n  Property\n    PsiElement(KEY)('language')\n    PsiElement(SEPARATOR)('=')\n    PsiElement(VALUE)('English')\n  Property\n    PsiElement(KEY)('message')\n    PsiElement(SEPARATOR)('=')\n    PsiElement(VALUE)('Welcome to           Wikipedia!')\n  Property\n    PsiElement(KEY)('key with spaces')\n    PsiElement(SEPARATOR)('=')\n    PsiElement(VALUE)('This is the value that could be looked up with the key \"key with spaces\".')\n  Property\n    PsiElement(KEY)('tab')\n    PsiElement(SEPARATOR)(':')\n    PsiElement(VALUE)('\\u0009')\n  Property\n    PsiElement(KEY)('path')\n    PsiElement(VALUE)('c:\\\\wiki\\\\templates')\n  Property\n    PsiElement(KEY)('This')\n  PsiElement(COMMENT)('# However, some editors will handle this automatically')\n```\n\n----------------------------------------\n\nTITLE: Coverage Extension Points Configuration in intellij.platform.coverage.xml\nDESCRIPTION: Defines extension points for code coverage functionality including coverage engine, runners, and filtering options.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/resources/intellij_community_plugins_extension_point_list.md#2025-04-06_snippet_7\n\nLANGUAGE: XML\nCODE:\n```\ncom.intellij.coverageEngine\ncom.intellij.coverageModifiedFilesFilterFactory\ncom.intellij.coverageOptions\ncom.intellij.coverageRunner\n```\n\n----------------------------------------\n\nTITLE: Hierarchical UI Navigation in Kotlin\nDESCRIPTION: Demonstrates the hierarchical navigation pattern using the Driver framework's Kotlin DSL to interact with the IDE's UI elements.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/testing_plugins/integration_tests/integration_tests_ui.md#2025-04-06_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nideFrame { // 1\n  invokeAction(\"SearchEverywhere\") // 2\n  searchEverywherePopup { // 3\n    actionButtonByXpath(xQuery { byAccessibleName(\"Preview\") }) // 4\n      .click()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: UI Component HTML Structure\nDESCRIPTION: Example of HTML representation of an IDE UI component showing various attributes used for component identification.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/testing_plugins/integration_tests/integration_tests_ui.md#2025-04-06_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div accessiblename=\"Current File\"\n     asstring=\"<result of calling toString on component>\"\n     class=\"ActionButtonWithText\"\n     enabled=\"true\" hide_dropdown_icon=\"HIDE_DROPDOWN_ICON\"\n     javaclass=\"com.intellij.execution.ui.RedesignedRunConfigurationSelector$createCustomComponent$1\"\n     myaction=\"Select Run/Debug Configuration (null)\"\n     tool_tip_text_key=\"ToolTipText\"\n     visible=\"true\" visible_text=\"Current File\" visible_text_keys=\"\"/>\n```\n\n----------------------------------------\n\nTITLE: Markup for Inlay Hints Preview (Pre-2023.2)\nDESCRIPTION: Shows the markup syntax for displaying hints in preview files for inlay hint providers in IntelliJ Platform versions before 2023.2. These previews appear in the Settings UI under Editor > Inlay Hints.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/custom_language_support/inlay_hints.md#2025-04-06_snippet_1\n\nLANGUAGE: markup\nCODE:\n```\n<# Displayed Hint #>\n```\n\n----------------------------------------\n\nTITLE: Configuring a Multi-Module IntelliJ Plugin Project in Groovy\nDESCRIPTION: A complete example of configuring a multi-module plugin project in Groovy, including the settings file, main module build script, and submodule build script. This demonstrates how to use the Platform plugin for the root module and Module plugin for submodules.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_plugins.md#2025-04-06_snippet_4\n\nLANGUAGE: groovy\nCODE:\n```\nrootProject.name = '...'\n\ninclude ':submodule'\n```\n\nLANGUAGE: groovy\nCODE:\n```\nplugins {\n  id 'org.jetbrains.intellij.platform.module'\n}\n\nrepositories {\n  mavenCentral()\n\n  intellijPlatform {\n    defaultRepositories()\n  }\n}\n\ndependencies {\n  intellijPlatform {\n    intellijIdeaCommunity '%ijPlatform%'\n  }\n}\n```\n\nLANGUAGE: groovy\nCODE:\n```\nplugins {\n  id 'org.jetbrains.intellij.platform' version '%intellij-platform-gradle-plugin-version%'\n}\n\nrepositories {\n  mavenCentral()\n\n  intellijPlatform {\n    defaultRepositories()\n  }\n}\n\ndependencies {\n  intellijPlatform {\n    intellijIdeaCommunity '%ijPlatform%'\n    pluginModule(implementation(project(':submodule')))\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle Build Script for IntelliJ Platform Plugin\nDESCRIPTION: Demonstrates the minimum Gradle build script setup for an IntelliJ IDEA plugin using the IntelliJ Platform Gradle Plugin 2.x. It configures necessary repositories and dependencies for plugin development.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/products/idea/idea.md#2025-04-06_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nrepositories {\n  mavenCentral()\n  intellijPlatform {\n    defaultRepositories()\n  }\n}\n\ndependencies {\n  intellijPlatform {\n    intellijIdeaCommunity(\"<versionNumber>\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Plugin Package Migration - WebPackConfigManager\nDESCRIPTION: Documents the package relocation of WebPackConfigManager and its Companion class to the webpack package in version 2022.3.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/reference_guide/api_changes_list_2022.md#2025-04-06_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\ncom.intellij.webpack.WebpackConfigManager\n```\n\n----------------------------------------\n\nTITLE: Configuring Internal Mode in idea.properties\nDESCRIPTION: This code snippet shows the property that needs to be added to the idea.properties file to enable Internal Mode in JetBrains IDEs. It allows access to additional developer tools and menus.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/ide_tooling/internal_actions/enabling_internal.md#2025-04-06_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nidea.is.internal=true\n```\n\n----------------------------------------\n\nTITLE: File Path Format Example\nDESCRIPTION: Example showing the proper format for icon file paths using camelCase naming convention.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/ui/principles/icons_style.md#2025-04-06_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n<path>iconName.svg</path>\n\n<path>iconName_dark.svg</path>\n```\n\n----------------------------------------\n\nTITLE: Structural Search XML Pattern\nDESCRIPTION: XML pattern used for structural search to find plugin.xml files containing idea-plugin tag.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/resources/explore_api.md#2025-04-06_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<idea-plugin>\n```\n\n----------------------------------------\n\nTITLE: Syntax Highlighting Answer File Format\nDESCRIPTION: Shows the format used in answer files for syntax highlighting tests, including token values and text attribute keys with fallbacks.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/testing_plugins/testing_highlighting.md#2025-04-06_snippet_2\n\nLANGUAGE: text\nCODE:\n```\ntoken_value\n    EXPECTED_TEXT_ATTRIBUTE_KEY => FALLBACK_KEY\nstring␣value\n    MY_TEXT_ATTRIBUTE_KEY => MY_FALLBACK_KEY => DEFAULT_STRING\n```\n\n----------------------------------------\n\nTITLE: Testing Documentation Note Block\nDESCRIPTION: A markdown snippet containing a note block that references a tutorial and code samples for plugin testing\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/testing_plugins/testing_plugins.md#2025-04-06_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n> Check out [this step-by-step tutorial](writing_tests_for_plugins.md) teaching how to write and run automated tests for your custom language plugin.\\n>\\n> Also, code samples\\n> [comparing_string_references_inspection](%gh-sdk-samples-master%/comparing_string_references_inspection)\\n> and [conditional_operator_intention](%gh-sdk-samples-master%/conditional_operator_intention) demonstrate using tests.\\n>\\n{style=\"note\" title=\"Testing Tutorial and Code Samples\"}\n```\n\n----------------------------------------\n\nTITLE: Declaring Dependencies in Multi-Module Project with Groovy\nDESCRIPTION: Configures project dependencies in a multi-module Gradle project using Groovy DSL. Shows both standard implementation dependency and the special instrumentedJar configuration needed for proper code instrumentation.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/gradle_intellij_plugin/tools_gradle_intellij_plugin.md#2025-04-06_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n  implementation project(':shared')\n}\n```\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n  implementation project(path: ':shared', configuration: 'instrumentedJar')\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JVM Toolchain with JetBrains Vendor in Kotlin\nDESCRIPTION: This snippet demonstrates how to configure the JVM Toolchain to use JetBrains as the vendor for the Java runtime in Kotlin. It sets the Java language version to 17 and specifies JetBrains as the vendor.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_faq.md#2025-04-06_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n  jvmToolchain {\n    languageVersion = JavaLanguageVersion.of(17)\n    vendor = JvmVendorSpec.JETBRAINS\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updated Kotlin IR Element Visitor Methods (Kotlin)\nDESCRIPTION: New abstract methods have been added to IrElementVisitor and IrElementVisitorVoid interfaces to handle new IR elements: IrInlinedFunctionBlock and IrReturnableBlock.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/reference_guide/api_changes_list_2024.md#2025-04-06_snippet_21\n\nLANGUAGE: Kotlin\nCODE:\n```\n// IrElementVisitor\nfun visitInlinedFunctionBlock(inlinedFunctionBlock: IrInlinedFunctionBlock, data: D)\nfun visitReturnableBlock(returnableBlock: IrReturnableBlock, data: D)\n\n// IrElementVisitorVoid\nfun visitInlinedFunctionBlock(inlinedFunctionBlock: IrInlinedFunctionBlock)\nfun visitInlinedFunctionBlock(inlinedFunctionBlock: IrInlinedFunctionBlock, data: Nothing?)\nfun visitReturnableBlock(returnableBlock: IrReturnableBlock)\nfun visitReturnableBlock(retunrableBlock: IrReturnableBlock, data: Nothing?)\n```\n\n----------------------------------------\n\nTITLE: Markdown Plugin API Changes - Class and Method Removals\nDESCRIPTION: Breaking changes in the Markdown plugin including removal of companion object methods, interface conversions, and parameter changes. Impacts markdown parsing and HTML generation functionality.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/reference_guide/api_changes_list_2022.md#2025-04-06_snippet_8\n\nLANGUAGE: Java\nCODE:\n```\norg.intellij.markdown.parser.constraints.MarkdownConstraints.Companion\norg.intellij.markdown.parser.constraints.MarkdownConstraints\norg.intellij.markdown.parser.markerblocks.providers.AtxHeaderProvider\norg.intellij.markdown.html.HtmlGenerator.generateHtml()\norg.intellij.markdown.parser.markerblocks.MarkerBlockProvider.Companion.passSmallIndent()\n```\n\n----------------------------------------\n\nTITLE: Incomplete Type Example - Function Definition\nDESCRIPTION: First part of incomplete type example showing function definition in a separate file.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/products/phpstorm/php_open_api_php_type_providers.md#2025-04-06_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nfunction foo(): string {\n  return \"Hello World!\";\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Page Excerpt with Custom Tag\nDESCRIPTION: Every page should provide a short excerpt using the dedicated <link-summary> tag before the main page contents.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/intro/sdk_style.md#2025-04-06_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<link-summary>Defining groups of related settings.</link-summary>\n```\n\n----------------------------------------\n\nTITLE: Extension Point Definitions in adt-ui.xml\nDESCRIPTION: Defines extension point for Android tool window factory implementation that is DumbAware.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/resources/android_plugin_extension_point_list.md#2025-04-06_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\ncom.intellij.android.toolWindow\n```\n\n----------------------------------------\n\nTITLE: Accessing Project Settings Service in IntelliJ Platform\nDESCRIPTION: This code snippet shows how to use the ProjectSettingsService to programmatically open project structure-related entries. It's a Java import statement referencing the ProjectSettingsService class.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/project_model.md#2025-04-06_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nProjectSettingsService\n```\n\n----------------------------------------\n\nTITLE: Registering Welcome Tab Factory Extension Point\nDESCRIPTION: Example of registering a custom Welcome Tab Factory implementation to customize the IDE welcome screen with additional tabs.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/api_notable/api_notable_list_2020.md#2025-04-06_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<com.intellij.welcomeTabFactory/>\n```\n\n----------------------------------------\n\nTITLE: Disabling Self-Update Check for IntelliJ Platform Plugin\nDESCRIPTION: Example of disabling the self-update check for the IntelliJ Platform Gradle Plugin by setting the selfUpdateCheck property to false.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_gradle_properties.md#2025-04-06_snippet_8\n\nLANGUAGE: properties\nCODE:\n```\norg.jetbrains.intellij.platform.selfUpdateCheck=false\n```\n\n----------------------------------------\n\nTITLE: Accessing IDE Dependency in Gradle Configuration\nDESCRIPTION: The setupDependencies.idea property provides a reference to the resolved IDE dependency used for building the plugin. This can be used in Gradle configuration to access the IDE dependency classpath.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/gradle_intellij_plugin/tools_gradle_intellij_plugin.md#2025-04-06_snippet_15\n\nLANGUAGE: Gradle\nCODE:\n```\nsetupDependencies.idea\n```\n\n----------------------------------------\n\nTITLE: Method Visibility Change in HTTP Client Plugin 2024.2\nDESCRIPTION: The visibility of toRequestConfig method has changed from public to private as it's an implementation detail. Client code should not be calling this method directly.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/reference_guide/api_changes_list_2024.md#2025-04-06_snippet_13\n\nLANGUAGE: java\nCODE:\n```\ncom.intellij.httpClient.http.request.HttpRequestPsiConverter.toRequestConfig(HttpRequest)\n```\n\n----------------------------------------\n\nTITLE: Removed DependenciesKt Method in IntelliJ Platform 2024.2\nDESCRIPTION: The modifyEntity method has been removed. Code should be updated to use modifyLibraryEntity method instead.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/reference_guide/api_changes_list_2024.md#2025-04-06_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\ncom.intellij.platform.workspace.jps.entities.DependenciesKt.modifyEntity(MutableEntityStorage, LibraryEntity, Function1)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ncom.intellij.platform.workspace.jps.entities.DependenciesKt.modifyLibraryEntity(MutableEntityStorage, LibraryEntity, Function1)\n```\n\n----------------------------------------\n\nTITLE: CLion Extension Points XML Configuration\nDESCRIPTION: XML configuration defining CLion-specific extension points for handling Clang-related functionality, including CLangTidy annotations, completion providers, and Clangd bridge interfaces.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/resources/clion_extension_point_list.md#2025-04-06_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<!-- CLion Extension Points -->\n<extensions defaultExtensionNs=\"clangd\">\n    <clangTidyAnnotationApplier implementation=\"ClangTidyAnnotationApplier\"/>\n    <clangTidyResolveInfoProvider implementation=\"ClangTidyResolveInfoProvider\"/>\n    <clangdAnnotatorUtil implementation=\"ClangAnnotatorUtil\"/>\n    <clangdBridge implementation=\"ClangdBridgeInterface\"/>\n    <externalCompletionProvider implementation=\"ExternalCompletionProvider\"/>\n</extensions>\n```\n\n----------------------------------------\n\nTITLE: Coroutines Dispatcher Change\nDESCRIPTION: Change in behavior of Coroutines running under Dispatchers.Main regarding write-intent lock. Migration to Dispatchers.EDT is recommended to maintain previous behavior.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/reference_guide/api_changes_list_2025.md#2025-04-06_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nwithContext(Dispatchers.EDT) {\n    // your code here\n}\n```\n\n----------------------------------------\n\nTITLE: Video Embed Tag\nDESCRIPTION: HTML video tag embedding a YouTube video about feedback best practices.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/plugin_user_experience.md#2025-04-06_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<video src=\"https://www.youtube.com/watch?v=J3VEfTUX6Bs\"/>\n```\n\n----------------------------------------\n\nTITLE: Path Reference in Gradle Scripts\nDESCRIPTION: Example showing Gradle build script file paths in both Kotlin and Groovy formats\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/glossary.md#2025-04-06_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nbuild.gradle.kts\\nbuild.gradle\n```\n\n----------------------------------------\n\nTITLE: Using IntelliJPlatformType Enum in Kotlin\nDESCRIPTION: Gradle configuration in Kotlin DSL demonstrating the use of IntelliJPlatformType enum for specifying the IntelliJ Platform type. This approach provides type safety when selecting platform variants.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin.md#2025-04-06_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nimport org.jetbrains.intellij.platform.gradle.IntelliJPlatformType\n\ndependencies {\n  intellijPlatform {\n    val version = providers.gradleProperty(\"platformVersion\")\n\n    create(IntelliJPlatformType.IntellijIdeaUltimate, version)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JVM Arguments for runIde Task\nDESCRIPTION: Shows how to add JVM arguments to the runIde task configuration for launching the IDE with custom properties.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/gradle_intellij_plugin/tools_gradle_intellij_plugin_faq.md#2025-04-06_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks {\n  runIde {\n    jvmArgs(\"-DmyProperty=value\")\n  }\n}\n```\n\nLANGUAGE: groovy\nCODE:\n```\nrunIde {\n  jvmArgs \"-DmyProperty=value\"\n}\n```\n\n----------------------------------------\n\nTITLE: Added Abstract Methods to DataGrid in Database Plugin 2024.2\nDESCRIPTION: Three new abstract methods have been added to the DataGrid interface: getCoroutineScope(), getModificationTracker(), and adaptForNewQuery(). Implementations that delegate to an actual DataGrid implementation only need recompilation.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/reference_guide/api_changes_list_2024.md#2025-04-06_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\ncom.intellij.database.datagrid.DataGrid.getCoroutineScope()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ncom.intellij.database.datagrid.DataGrid.getModificationTracker()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ncom.intellij.database.datagrid.DataGrid.adaptForNewQuery()\n```\n\n----------------------------------------\n\nTITLE: Removed UmlGraphBuilder Constructor in UML Plugin 2024.2\nDESCRIPTION: The UmlGraphBuilder constructor with 5 parameters has been removed. Code should be updated to use the constructor that includes GraphThreadingType parameter.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/reference_guide/api_changes_list_2024.md#2025-04-06_snippet_8\n\nLANGUAGE: java\nCODE:\n```\ncom.intellij.uml.UmlGraphBuilder(Project, Graph2D, Graph2DView, DiagramDataModel<?>, DiagramPresentationModel)\n```\n\nLANGUAGE: java\nCODE:\n```\ncom.intellij.uml.UmlGraphBuilder(Project, Graph2D, Graph2DView, DiagramDataModel<?>, GraphThreadingType, DiagramPresentationModel)\n```\n\n----------------------------------------\n\nTITLE: Java Extension Point Registration\nDESCRIPTION: Examples of extension point registrations for background startup activities and highlighting pass factories.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/api_notable/api_notable_list_2019.md#2025-04-06_snippet_2\n\nLANGUAGE: java\nCODE:\n```\ncom.intellij.backgroundPostStartupActivity\\ncom.intellij.highlightingPassFactory\n```\n\n----------------------------------------\n\nTITLE: Markdown Table - Android Studio Version History\nDESCRIPTION: Markdown formatted table documenting Android Studio release history with version numbers, release channels, IntelliJ IDEA compatibility, and release dates. Includes image shield references for visual indicators of release channels.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/_generated/android_studio_releases.md#2025-04-06_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n| Release Name | Channel | Version | IntelliJ IDEA Version | Release Date |\n|--------------|---------|---------|-----------------------|--------------|\\n| <b>2.4 Preview 7</b> | ![Preview][preview] | **2.4.0.6**<p>AI&#8209;171.3934896</p> | **2017.2**<p>171.3934896.0</p> | Apr&nbsp;28,&nbsp;2017 |\\n| <b>2.4 Preview 6</b> | ![Preview][preview] | **2.4.0.5**<p>AI&#8209;171.3909050</p> | **2017.2**<p>171.3909050.0</p> | Apr&nbsp;13,&nbsp;2017 |\\n\\n[release]: https://img.shields.io/badge/-Release-blue?style=flat-square\\n[patch]: https://img.shields.io/badge/-Patch-orange?style=flat-square\\n[rc]: https://img.shields.io/badge/-RC-red?style=flat-square\\n[beta]: https://img.shields.io/badge/-Beta-darkred?style=flat-square\\n[canary]: https://img.shields.io/badge/-Canary-lightgrey?style=flat-square\\n[preview]: https://img.shields.io/badge/-Preview-darkgrey?style=flat-square\n```\n\n----------------------------------------\n\nTITLE: Link Summary HTML Tag\nDESCRIPTION: HTML tag containing a summary of the page content for linking purposes.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/plugin_user_experience.md#2025-04-06_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<link-summary>Ensuring a good user experience for your plugin.</link-summary>\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Headers\nDESCRIPTION: Core document structure for toolbar UI guidelines including copyright notice and section headers.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/ui/controls/toolbar.md#2025-04-06_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- Copyright 2000-2025 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license. -->\n\n# Toolbar\n\n<link-summary>UI guidelines on using toolbars.</link-summary>\n\n<tldr>\n\n**Related:** [](action_system.md#buildingToolbarPopupMenu)\n\n</tldr>\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Plugin Repository with Authentication in Groovy\nDESCRIPTION: Demonstrates how to add a custom plugin repository with HTTP header authentication credentials in Groovy. The example shows setting up a repository pointing to a plugins.xml listing file with an Authorization header.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_repositories_extension.md#2025-04-06_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\nimport com.jetbrains.plugin.structure.intellij.repository.CustomPluginRepositoryListingType\n\nrepositories {\n  intellijPlatform {\n    customPluginRepository('https://example.com/plugins.xml', CustomPluginRepositoryListingType.SIMPLE) { repository ->\n      repository.credentials(HttpHeaderCredentials) {\n        name = 'Authorization'\n        value = 'Automation amFrdWJfdGVzdDotX...MkV2UkFwekFWTnNwZjA='\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Grammar-Kit extension in Groovy build script\nDESCRIPTION: Demonstrates how to configure the Grammar-Kit plugin using the grammarKit extension in a Groovy-based Gradle build script, setting the JFlex and Grammar-Kit release versions.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/tools_gradle_grammar_kit_plugin.md#2025-04-06_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\ngrammarKit {\n  jflexRelease = \"1.7.0-1\"\n  grammarKitRelease = \"2021.1.2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing DataGrid in Database Plugin 2023.1\nDESCRIPTION: Several methods have been removed from the DataGrid interface, and new abstract methods have been added. Classes implementing DataGrid and delegating calls to an actual DataGrid implementation will need to be recompiled.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/reference_guide/api_changes_list_2023.md#2025-04-06_snippet_11\n\nLANGUAGE: Java\nCODE:\n```\ncom.intellij.database.datagrid.DataGrid.countSortedColumns()\ncom.intellij.database.datagrid.DataGrid.getAppearance()\ncom.intellij.database.datagrid.DataGrid.getHoveredRowBackground()\ncom.intellij.database.datagrid.DataGrid.getStripeRowBackground()\n```\n\n----------------------------------------\n\nTITLE: Using Path.startsWith() Instead of NioPathUtil (Java)\nDESCRIPTION: The NioPathUtil.isAncestor method has been removed. Code should be updated to use the standard Java Path.startsWith() method instead.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/reference_guide/api_changes_list_2024.md#2025-04-06_snippet_17\n\nLANGUAGE: Java\nCODE:\n```\n// Old code\ncom.intellij.openapi.util.io.NioPathUtil.isAncestor(path1, path2, strict);\n\n// New code\npath2.startsWith(path1);\n```\n\n----------------------------------------\n\nTITLE: Customizing Editor Scroll Bar Colors in XML\nDESCRIPTION: XML snippet demonstrating how to set custom colors for macOS scroll bars in an editor scheme. This example sets the track color to black and the thumb color to white with transparency.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/getting_started/theme/themes_extras.md#2025-04-06_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<color>\n  <option name=\"ScrollBar.Mac.trackColor\" value=\"000000\"/>\n  <option name=\"ScrollBar.Mac.thumbColor\" value=\"FFFFFFBE\"/>\n</color>\n```\n\n----------------------------------------\n\nTITLE: Kotlin XML Attribute Split/Join Context Implementation\nDESCRIPTION: Example implementation from the XML plugin showing how to handle splitting and joining of XML attributes using the ListSplitJoinContext extension point.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/custom_language_support/additional_minor_features.md#2025-04-06_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nclass XmlAttributesSplitJoinContext : DefaultListSplitJoinContext<XmlAttribute>(XmlElementType.XML_ATTRIBUTE) {\\n    // Implementation details\\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Action Reference with Group Assignment in IntelliJ Plugin\nDESCRIPTION: XML snippet demonstrating how to add a reference to an existing action and assign it to a specific group using the add-to-group element.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/plugin_structure/plugin_configuration_file.md#2025-04-06_snippet_32\n\nLANGUAGE: xml\nCODE:\n```\n<actions>\n  <reference ref=\"com.example.MyAction\">\n    <add-to-group group-id=\"ToolsMenu\"/>\n  </reference>\n</group>\n```\n\n----------------------------------------\n\nTITLE: Visualizing EDT Modality Solution with Mermaid Gantt Chart\nDESCRIPTION: A Gantt chart demonstrating how using Application.invokeLater() with proper modality state solves the problem by postponing background operations until the dialog is closed, ensuring data consistency.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/architectural_overview/threading/threading_model.md#2025-04-06_snippet_14\n\nLANGUAGE: mermaid\nCODE:\n```\n---\ndisplayMode: compact\n---\ngantt\n    dateFormat X\n    %% do not remove trailing space in axisFormat:\n    axisFormat ‎\n    section EDT\n        1. Start action          : 0, 2\n        3. Show dialog           : 2, 3\n        5. Answer dialog         : 3, 4\n        6. Work on correct data  : 4, 6\n        7. Modify data           : active, 6, 7\n    section BGT\n        2. invokeLater()         : active, 1, 2\n        4. Wait for dialog close : done, 2, 4\n```\n\n----------------------------------------\n\nTITLE: Extension Point Interface - Flex Breakpoint Provider\nDESCRIPTION: Interface for providing breakpoint functionality in Flex debugging\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/resources/oss_plugins_extension_point_list.md#2025-04-06_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\ncom.intellij.flex.breakpoint.type.provider\n```\n\n----------------------------------------\n\nTITLE: Converting PsiElement to Multiple Possible UElement Types in Kotlin\nDESCRIPTION: Shows how to convert a PsiElement to one of several possible UElement types in Kotlin using UastFacade.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/architectural_overview/uast.md#2025-04-06_snippet_5\n\nLANGUAGE: Kotlin\nCODE:\n```\nUastFacade.convertElementWithParent(element,\n    UInjectionHost::class.java, UReferenceExpression::class.java)\n```\n\n----------------------------------------\n\nTITLE: Accessing Console History Copy Handler Prompt Length Marker\nDESCRIPTION: The PROMPT_LENGTH_MARKER field has been moved from ConsoleHistoryCopyHandler to a Kotlin file. Developers should update their code to use the new constant location.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/reference_guide/api_changes_list_2023.md#2025-04-06_snippet_4\n\nLANGUAGE: Kotlin\nCODE:\n```\ncom.intellij.execution.console.ConsoleHistoryCopyHandlerKt.PROMPT_LENGTH_MARKER\n```\n\n----------------------------------------\n\nTITLE: Create IrDeclarationOrigin by Delegation (Kotlin)\nDESCRIPTION: The IrDeclarationOriginImpl class is now final and can't be extended. Custom declaration origins should be created by delegation instead.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/reference_guide/api_changes_list_2024.md#2025-04-06_snippet_22\n\nLANGUAGE: Kotlin\nCODE:\n```\n// Example of creating a custom declaration origin\nval MY_ORIGIN = object : IrDeclarationOrigin {\n    override val name: String = \"MY_ORIGIN\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Vue Component Events in Web Types\nDESCRIPTION: Shows how to define custom events emitted by Vue components using the 'js.events' property in Web Types JSON.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/custom_language_support/websymbols_web_types.md#2025-04-06_snippet_7\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"js\": {\n      \"events\": [\n        {\n          \"name\": \"input\",\n          \"description\": \"The updated bound model\"\n        }\n      ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Link Summary Tag in Markdown\nDESCRIPTION: Custom HTML-like tag providing a summary description for linking purposes\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/platform/fundamentals.md#2025-04-06_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<link-summary>Fundamental low-level building blocks of the IntelliJ Platform.</link-summary>\n```\n\n----------------------------------------\n\nTITLE: Database Tools and SQL Plugin API Changes\nDESCRIPTION: Breaking changes in the Database Tools plugin including parameter type changes for data processing, modifications to data consumer interfaces, and removal of database-specific formatting methods.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/reference_guide/api_changes_list_2022.md#2025-04-06_snippet_9\n\nLANGUAGE: Java\nCODE:\n```\ncom.intellij.database.datagrid.DataProducer.processRequest(GridDataRequest)\ncom.intellij.database.datagrid.DataRequest.RawQueryRequest.afterLastRowAdded(GridDataRequest.Context, int)\ncom.intellij.database.datagrid.DataConsumer.addRows(GridDataRequest.Context, List<? extends GridRow>)\ncom.intellij.database.extractors.ObjectFormatter\ncom.intellij.database.DatabaseDataKeys\n```\n\n----------------------------------------\n\nTITLE: Theme Sample Plugin Reference in Markdown\nDESCRIPTION: A markdown snippet that provides a reference to the Theme Basics sample project in the IntelliJ SDK Code Samples repository, formatted as a note-style callout.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/getting_started/theme/developing_themes.md#2025-04-06_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n> To see a full example theme project, see the [Theme Basics](%gh-sdk-samples-master%/theme_basics) in IntelliJ SDK Code Samples.\\n>\\n{title=\"Theme Plugin Sample\" style=\"note\"}\n```\n\n----------------------------------------\n\nTITLE: Visualizing EDT Modality Problem with Mermaid Gantt Chart\nDESCRIPTION: A Gantt chart illustrating the problem that occurs when operations are scheduled on EDT without proper modality state management. It shows how data can be modified while a dialog is open, resulting in invalid data state.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/architectural_overview/threading/threading_model.md#2025-04-06_snippet_13\n\nLANGUAGE: mermaid\nCODE:\n```\n---\ndisplayMode: compact\n---\ngantt\n    dateFormat X\n    %% do not remove trailing space in axisFormat:\n    axisFormat ‎\n    section EDT\n        1. Start action         : 0, 2\n        3. Show dialog          : 2, 3\n        4. Modify data          : crit, active, 3, 4\n        5. Answer dialog        : 4, 5\n        6. Work on invalid data : crit, 5, 7\n    section BGT\n        2. invokeLater()        : crit, active, 1, 2\n```\n\n----------------------------------------\n\nTITLE: Applying the Migration Plugin alongside IntelliJ Platform Gradle Plugin\nDESCRIPTION: Shows how to apply both the main IntelliJ Platform Gradle Plugin and the dedicated migration plugin to assist with transitioning from 1.x version.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_migration.md#2025-04-06_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n  id(\"org.jetbrains.intellij.platform\") version \"%intellij-platform-gradle-plugin-version%\"\n  id(\"org.jetbrains.intellij.platform.migration\") version \"%intellij-platform-gradle-plugin-version%\"\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Context Presence\nDESCRIPTION: Example of checking for the presence of a specific context using WebSymbolsContext.get()\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/custom_language_support/websymbols_context.md#2025-04-06_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nWebSymbolsContext.get(\"stimulus-context\", psiElement) == \"true\"\n```\n\n----------------------------------------\n\nTITLE: Remote Development Gateway Plugin Method Replacements\nDESCRIPTION: Documents the removal of getSshConfig() and setSshConfig() methods from SshMultistagePanelContext class and their replacements in version 2022.3.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/reference_guide/api_changes_list_2022.md#2025-04-06_snippet_7\n\nLANGUAGE: Java\nCODE:\n```\ncom.jetbrains.gateway.ssh.SshMultistagePanelContext.getConfig()\ncom.jetbrains.gateway.ssh.SshMultistagePanelContext.setConfig(SshConfig)\n```\n\n----------------------------------------\n\nTITLE: Android Studio Version History Table in Markdown\nDESCRIPTION: Markdown table documenting Android Studio version history with release channels, build numbers, IntelliJ IDEA versions, and release dates for the 3.x series.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/_generated/android_studio_releases.md#2025-04-06_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Release Name | Channel | Version | IntelliJ IDEA Version | Release Date |\n|--------------|---------|---------|-----------------------|--------------|\n```\n\n----------------------------------------\n\nTITLE: HTML Attribute Support Properties\nDESCRIPTION: Special properties for HTML attribute symbol support, defining value types, requirements and expression handling.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/custom_language_support/websymbols_implementation.md#2025-04-06_snippet_2\n\nLANGUAGE: Kotlin\nCODE:\n```\nattributeValue: AttributeValue? // HTML attribute configuration\n  - kind: Kind       // plain, expression, no-value\n  - type: Type       // boolean, number, string, enum, complex, of-match\n  - required: Boolean // Whether value is required\n  - defaultValue: Any? // Default attribute value\n  - langType: Type    // Expression result type\n```\n\n----------------------------------------\n\nTITLE: Extension Point Implementation References\nDESCRIPTION: References to implementation classes for various language-related extension points, including code insight, annotations, and UI components.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/resources/intellij_platform_extension_point_list.md#2025-04-06_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\ncom.intellij.psi.targets.AliasingPsiTargetMapper\ncom.intellij.execution.filters.Filter\ncom.intellij.unscramble.StacktraceTabContentProvider\n```\n\n----------------------------------------\n\nTITLE: Extension Point Definition for String Comparison Inspection\nDESCRIPTION: Table showing the extension point configuration for implementing a local inspection tool that checks String reference comparisons. The implementation extends AbstractBaseJavaLocalInspectionTool via the com.intellij.localInspection extension point.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/code_samples/comparing_string_references_inspection/README.md#2025-04-06_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                           | Implementation                                                                  | Extension Point Class                 |\n|--------------------------------|---------------------------------------------------------------------------------|---------------------------------------|\n| `com.intellij.localInspection` | [ComparingStringReferencesInspection][file:ComparingStringReferencesInspection] | `AbstractBaseJavaLocalInspectionTool` |\n```\n\n----------------------------------------\n\nTITLE: Application Listeners Configuration Table\nDESCRIPTION: Markdown table defining the application listener configuration for project management.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/code_samples/max_opened_projects/README.md#2025-04-06_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Name     | Implementation                                        | Listener Class           |\n|----------|-------------------------------------------------------|---------------------------|\n| listener | [ProjectOpenCloseListener][file:ProjectCloseListener] | `ProjectManagerListener` |\n```\n\n----------------------------------------\n\nTITLE: Breaking Change Pattern Examples in Markdown\nDESCRIPTION: Example patterns showing how to document different types of breaking changes in the IntelliJ Platform API, including class, method, constructor, and field changes.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/reference_guide/api_changes_list.md#2025-04-06_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<class name> class removed\n<class name> class renamed to <new class name>\n<class name> class moved to package <package name>\n\n<class name>.<method name>(<human-readable parameters>) marked abstract\n<class name>.<method name>(<human-readable parameters>) abstract method added\n<class name>.<method name>(<human-readable parameters>) method removed\n```\n\n----------------------------------------\n\nTITLE: Class Reference - Breaking Change Examples\nDESCRIPTION: Various code references showing class, method and property changes across different IntelliJ SDK modules. These represent breaking changes that require updates in dependent code.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/reference_guide/api_changes_list_2023.md#2025-04-06_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\ncom.intellij.collaboration.ui.codereview.action.CodeReviewCheckoutRemoteBranchAction\n```\n\nLANGUAGE: Java\nCODE:\n```\ncom.intellij.collaboration.ui.codereview.details.CodeReviewDetailsBranchComponentFactory.create(CoroutineScope, CodeReviewBranchesViewModel, AnAction, DataContext)\n```\n\nLANGUAGE: Java\nCODE:\n```\ncom.intellij.collaboration.ui.codereview.diff.viewer.DiffEditorUtilKt\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\norg.jetbrains.kotlin.idea.actions.JavaToKotlinAction.Companion\n```\n\n----------------------------------------\n\nTITLE: Adding IntelliJ Ultimate Dependency in plugin.xml\nDESCRIPTION: XML configuration in plugin.xml to specify the dependency on the IntelliJ Platform Ultimate module, which is required for LSP support.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/custom_language_support/language_server_protocol.md#2025-04-06_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<idea-plugin>\n  <!-- ... -->\n  <depends>com.intellij.modules.ultimate</depends>\n</idea-plugin>\n```\n\n----------------------------------------\n\nTITLE: Implementing DependencyAnalyzerExtension in IntelliJ Platform 2022.3\nDESCRIPTION: Abstract method isApplicable(ProjectSystemId) added to DependencyAnalyzerExtension. The createContributor method's signature changed, removing ProjectSystemId parameter and changing return type.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/reference_guide/api_changes_list_2022.md#2025-04-06_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\ncom.intellij.openapi.externalSystem.dependency.analyzer.DependencyAnalyzerExtension.isApplicable(ProjectSystemId)\n```\n\nLANGUAGE: Java\nCODE:\n```\ncom.intellij.openapi.externalSystem.dependency.analyzer.DependencyAnalyzerExtension.createContributor(Project, Disposable)\n```\n\n----------------------------------------\n\nTITLE: Creating Conditional Breakpoint for Pattern Debugging in Java\nDESCRIPTION: A Java condition to apply to the breakpoint that filters for specific pattern implementations. This condition checks if the pattern's string representation contains 'MarkdownLinkDestinationImpl' to focus on Markdown link patterns.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/architectural_overview/element_patterns.md#2025-04-06_snippet_3\n\nLANGUAGE: java\nCODE:\n```\ntoString().contains(\"MarkdownLinkDestinationImpl\")\n```\n\n----------------------------------------\n\nTITLE: Adding ReSharper Plugin Version Badge (including pre-releases) in Markdown\nDESCRIPTION: Adds a badge showing the version of a ReSharper plugin, including pre-releases. Requires replacing :packageName with the actual package name.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/resources/marketing.md#2025-04-06_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n![Version](https://img.shields.io/resharper/v/:packageName?include_prereleases)\n```\n\n----------------------------------------\n\nTITLE: Shell Plugin Extension Points (sh.xml)\nDESCRIPTION: Extension points for the Shell plugin including run marker conditions and occurrence highlighting suppressors.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/resources/intellij_community_plugins_extension_point_list.md#2025-04-06_snippet_24\n\nLANGUAGE: XML\nCODE:\n```\n<!-- sh.xml extension points -->\n<extensionPoints>\n  <extensionPoint name=\"runMarkerContributionAdditionalCondition\" />\n  <extensionPoint name=\"shellOccurrencesHighlightingSuppressor\" />\n</extensionPoints>\n```\n\n----------------------------------------\n\nTITLE: Extension Points Configuration Table\nDESCRIPTION: Markdown table defining the extension point configuration for post-startup activity implementation.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/code_samples/max_opened_projects/README.md#2025-04-06_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                               | Implementation                                                | Extension Point Class |\n|------------------------------------|---------------------------------------------------------------|-----------------------|\n| `com.intellij.postStartupActivity` | [ProjectOpenStartupActivity][file:ProjectOpenStartupActivity] | `StartupActivity`     |\n```\n\n----------------------------------------\n\nTITLE: Accessing GitHub Authentication in Java\nDESCRIPTION: Use GithubAuthenticationManager instead of deprecated GithubAuthData and GithubSettings methods for GitHub authentication in plugins.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/reference_guide/api_changes_list_2021.md#2025-04-06_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\nimport org.jetbrains.plugins.github.authentication.GithubAuthenticationManager;\n\n// Use GithubAuthenticationManager for authentication operations\n```\n\n----------------------------------------\n\nTITLE: Declaring Extensions in plugin.xml\nDESCRIPTION: Sample XML showing how to declare extensions in a plugin.xml file, demonstrating both platform and custom plugin extension points. The example includes extensions for appStarter, projectTemplatesFactory, and a custom extension point.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/plugin_structure/plugin_extensions.md#2025-04-06_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<!--\n  Declare extensions to access extension points in the IntelliJ Platform.\n  These extension points have been declared using \"interface\".\n -->\n<extensions defaultExtensionNs=\"com.intellij\">\n  <appStarter\n      implementation=\"com.example.MyAppStarter\"/>\n  <projectTemplatesFactory\n      implementation=\"com.example.MyProjectTemplatesFactory\"/>\n</extensions>\n\n<!--\n  Declare extensions to access extension points in a custom plugin \"another.plugin\".\n  The \"myExtensionPoint\" extension point has been declared using \"beanClass\"\n  and exposes custom properties \"key\" and \"implementationClass\".\n-->\n<extensions defaultExtensionNs=\"another.plugin\">\n  <myExtensionPoint\n      key=\"keyValue\"\n      implementationClass=\"com.example.MyExtensionPointImpl\"/>\n</extensions>\n```\n\n----------------------------------------\n\nTITLE: Resolving Entities by SymbolicEntityId in Kotlin\nDESCRIPTION: Shows how to find an entity using its symbolic ID. The example creates a ModuleId and uses it to resolve a specific module entity from storage.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/workspace_model/workspace_model_entity_read.md#2025-04-06_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval moduleId = ModuleId(\"moduleName\")\nval entityStorage: ImmutableEntityStorage =\n  WorkspaceModel.getInstance(project).currentSnapshot\nentityStorage.resolve(moduleId)\n```\n\n----------------------------------------\n\nTITLE: Modified Method Parameter in Ruby 2019.3\nDESCRIPTION: Documentation of a breaking change in the RubyTypeProvider class where the Context parameter was removed from createTypeBySymbolFromProviders method as part of moving to a Context-less approach.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/reference_guide/api_changes_list_2019.md#2025-04-06_snippet_13\n\nLANGUAGE: Java\nCODE:\n```\norg.jetbrains.plugins.ruby.ruby.codeInsight.types.RubyTypeProvider.createTypeBySymbolFromProviders(Symbol symbol, Context context)\n```\n\n----------------------------------------\n\nTITLE: Disposer Leak Stack Trace Example\nDESCRIPTION: Example stack trace showing how memory leaks are reported by the Disposer system when objects are not properly disposed. Includes allocation tracking information for debugging purposes.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/disposers.md#2025-04-06_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n    java.lang.RuntimeException:\n    Memory leak detected: <instance> of class com.example.ClassType\n    See the cause for the corresponding Disposer.register() stacktrace:\n        at ObjectTree.assertIsEmpty(ObjectTree.java:209)\n        at Disposer.assertIsEmpty(Disposer.java:125)\n        at Disposer.assertIsEmpty(Disposer.java:121)\n        at ApplicationImpl.disposeSelf(ApplicationImpl.java:323)\n        at ApplicationImpl.doExit(ApplicationImpl.java:780)\n        …\n    Caused by: java.lang.Throwable\n        at ObjectTree.getOrCreateNodeFor(ObjectTree.java:101)\n        at ObjectTree.register(ObjectTree.java:62)\n        at Disposer.register(Disposer.java:81)\n        at Disposer.register(Disposer.java:75)\n        …\n        at ProjectManagerEx.createProject(ProjectManagerEx.java:69)\n        at NewProjectWizardDynamic.doFinish(NewProjectWizardDynamic.java:235)\n        at DynamicWizard$1.run(DynamicWizard.java:433)\n        at CoreProgressManager$5.run(CoreProgressManager.java:237)\n        at CoreProgressManager$TaskRunnable.run(CoreProgressManager.java:563)\n        …\n```\n\n----------------------------------------\n\nTITLE: Adding IntelliJ Plugin Stars Rating Badge in Markdown\nDESCRIPTION: Adds a badge showing the star rating of an IntelliJ plugin. Requires replacing :pluginId with the actual plugin ID.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/resources/marketing.md#2025-04-06_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n![Rating](https://img.shields.io/jetbrains/plugin/r/stars/:pluginId)\n```\n\n----------------------------------------\n\nTITLE: Updated CachedValueBase with Additional Abstract Methods (Java)\nDESCRIPTION: Two new abstract methods have been added to CachedValueBase that must be implemented: setData and getRawData.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/reference_guide/api_changes_list_2024.md#2025-04-06_snippet_18\n\nLANGUAGE: Java\nCODE:\n```\npublic abstract void setData(CachedValueBase.Data data);\npublic abstract CachedValueBase.Data getRawData();\n```\n\n----------------------------------------\n\nTITLE: Adding Checkbox with Explanatory Text in Kotlin UI DSL\nDESCRIPTION: Demonstrates how to add a checkbox with explanatory text using the comment parameter in the Kotlin UI DSL.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/user_interface_components/kotlin_ui_dsl.md#2025-04-06_snippet_20\n\nLANGUAGE: kotlin\nCODE:\n```\ncheckBox(message(\"checkbox.smart.tab.reuse\"),\n       uiSettings::reuseNotModifiedTabs,\n       comment = message(\"checkbox.smart.tab.reuse.inline.help\"))\n```\n\n----------------------------------------\n\nTITLE: ExternalSystem Model Task Event Class Renames\nDESCRIPTION: Multiple implementation classes in external system model task event package renamed to remove 'Impl' suffix and simplify naming. Requires updating import statements and class references.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/reference_guide/api_changes_list_2024.md#2025-04-06_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\ncom.intellij.openapi.externalSystem.model.task.event.ExternalSystemStartEventImpl\ncom.intellij.openapi.externalSystem.model.task.event.TaskOperationDescriptorImpl\ncom.intellij.openapi.externalSystem.model.task.event.DefaultOperationResult\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Options Binding Protocol for Inspection Options\nDESCRIPTION: Demonstrates how to customize the binding between UI controls and data model using a custom OptionController. The example shows binding checkboxes to a map-based configuration.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/inspection_options.md#2025-04-06_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nprivate NotNullLazyValue<InconsistentResourceBundleInspectionProvider[]> myProviders = ...;\nprivate Map<String, Boolean> mySettings = new LinkedHashMap<>();\n\n@Override\npublic @NotNull OptPane getOptionsPane() {\n  return new OptPane(ContainerUtil.map(\n    myProviders.getValue(),\n    provider -> checkbox(provider.getName(), provider.getPresentableName())));\n}\n\n@Override\npublic @NotNull OptionController getOptionController() {\n  return OptionController.of(\n    (bindId) -> ContainerUtil.getOrElse(mySettings, bindId, true),\n    (bindId, value) -> {\n      boolean boolValue = (Boolean)value;\n      if (boolValue) {\n        mySettings.remove(bindId);\n      } else {\n        mySettings.put(bindId, false);\n      }\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Library Dependencies for a Module in Java\nDESCRIPTION: Shows how to retrieve a list of libraries that a module depends on using OrderEnumerator.forEachLibrary.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/project_model/library.md#2025-04-06_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nList<String> libraryNames = new ArrayList<>();\nModuleRootManager.getInstance(module).orderEntries().forEachLibrary(library -> {\n  libraryNames.add(library.getName());\n  return true;\n});\nMessages.showInfoMessage(StringUtil.join(libraryNames, \"\\n\"), \"Libraries in Module\");\n```\n\n----------------------------------------\n\nTITLE: Updating JSAsyncLanguageServiceBase.JSLanguageServiceInfoReporter Package in Java\nDESCRIPTION: The JSLanguageServiceInfoReporter class has been moved to a new package. All usages of this class need to be updated to reflect the new package location.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/reference_guide/api_changes_list_2025.md#2025-04-06_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\ncom.intellij.lang.javascript.service.JSAsyncLanguageServiceBase.JSLanguageServiceInfoReporter\n```\n\n----------------------------------------\n\nTITLE: XML Plugin Configuration Example\nDESCRIPTION: Example registration of extension point in plugin.xml configuration file.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/custom_language_support/additional_minor_features.md#2025-04-06_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<idea-plugin>\\n    <extensions defaultExtensionNs=\\\"com.intellij\\\">\\n        <lang.braceMatcher language=\\\"LANGUAGE\\\" implementationClass=\\\"com.example.MyBraceMatcher\\\"/>\\n    </extensions>\\n</idea-plugin>\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation for IntelliJ Platform Changes\nDESCRIPTION: Structured documentation detailing API changes, feature updates, and deprecations for IntelliJ Platform versions in 2024. Includes information about testing framework changes, bundled plugins, and various platform improvements.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/api_notable/api_notable_list_2024.md#2025-04-06_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- Copyright 2000-2025 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license. -->\n\n# Notable Changes in IntelliJ Platform and Plugins API 2024.*\n\n<link-summary>List of known Notable API Changes in 2024.*</link-summary>\n\n_Early Access Program_ (EAP) releases of upcoming versions are available [here](https://eap.jetbrains.com).\n```\n\n----------------------------------------\n\nTITLE: Removed VirtualFileUrlManager Method in IntelliJ Platform 2024.2\nDESCRIPTION: The getOrCreateFromUri method has been removed. Code should be updated to use getOrCreateFromUrl method instead.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/reference_guide/api_changes_list_2024.md#2025-04-06_snippet_6\n\nLANGUAGE: java\nCODE:\n```\ncom.intellij.platform.workspace.storage.url.VirtualFileUrlManager.getOrCreateFromUri(String)\n```\n\nLANGUAGE: java\nCODE:\n```\ncom.intellij.platform.workspace.storage.url.VirtualFileUrlManager.getOrCreateFromUrl(String)\n```\n\n----------------------------------------\n\nTITLE: Adding Password Field in Kotlin UI DSL\nDESCRIPTION: Illustrates how to add a password field, which doesn't have a factory function, in the Kotlin UI DSL.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/user_interface_components/kotlin_ui_dsl.md#2025-04-06_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nval passwordField = JPasswordField()\nval panel = panel {\n  // ...\n  row { passwordField() }\n}\n```\n\n----------------------------------------\n\nTITLE: Removed ExecutorAction Wrap Method in IntelliJ Platform 2024.2\nDESCRIPTION: The wrap method taking RunContextAction and Int has been removed. Code should be updated to use the alternative method that takes AnAction, Executor, and Int parameters.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/reference_guide/api_changes_list_2024.md#2025-04-06_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\ncom.intellij.execution.lineMarker.ExecutorAction.Companion.wrap(RunContextAction, Int)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ncom.intellij.execution.lineMarker.ExecutorAction.Companion.wrap(AnAction, Executor, Int)\n```\n\n----------------------------------------\n\nTITLE: FlexAdapter Basic Implementation\nDESCRIPTION: Template for implementing a JFlex-based lexer using FlexAdapter to make it compatible with IntelliJ Platform's Lexer API.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/custom_language_support/implementing_lexer.md#2025-04-06_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\npublic class CustomLexer extends FlexAdapter {\n    public CustomLexer() {\n        super(new _CustomLexer());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: FlexAdapter Basic Implementation\nDESCRIPTION: Template for implementing a JFlex-based lexer using FlexAdapter to make it compatible with IntelliJ Platform's Lexer API.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/custom_language_support/implementing_lexer.md#2025-04-06_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\npublic class CustomLexer extends FlexAdapter {\n    public CustomLexer() {\n        super(new _CustomLexer());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing UI Freeze Problem with Mermaid Gantt Chart\nDESCRIPTION: A Gantt chart illustrating how long read actions in background threads can cause UI freezes by blocking write actions on EDT, leading to poor user experience.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/basics/architectural_overview/threading/threading_model.md#2025-04-06_snippet_15\n\nLANGUAGE: mermaid\nCODE:\n```\n---\ndisplayMode: compact\n---\ngantt\n    dateFormat X\n    %% do not remove trailing space in axisFormat:\n    axisFormat ‎\n    section BGT\n        very long read action               : 0, 6\n    section EDT\n        write action (waiting for the lock) : done, 2, 6\n        write action (executing)            : 6, 8\n        UI freeze                           : crit, 2, 8\n        UI update (frozen)                  : crit, 8, 10\n```\n\n----------------------------------------\n\nTITLE: Release History Table in Markdown\nDESCRIPTION: Markdown table showing detailed release information including version numbers, channels, build numbers and release dates for IntelliJ IDE releases in 2022.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/_generated/android_studio_releases.md#2025-04-06_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Release Name | Channel | Version | IntelliJ IDEA Version | Release Date |\n|--------------|---------|---------|-----------------------|--------------|\n```\n\n----------------------------------------\n\nTITLE: Web Types JSON with Nested Namespace Contributions\nDESCRIPTION: Example showing how to nest contributions across different namespaces. The HTML element 'my-element' has both HTML attributes and CSS properties defined in different namespaces.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/custom_language_support/websymbols_web_types.md#2025-04-06_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"contributions\": {\n    \"html\": {\n      \"elements\": [\n        {\n          \"name\": \"my-element\",\n          \"description\": \"A custom HTML element\",\n          \"attributes\": [\n            {\n              \"name\": \"foo\",\n              \"description\": \"A custom HTML attribute of `my-element`\"\n            }\n          ],\n          \"css\": {\n            \"properties\": [\n              {\n                \"name\": \"--bg-color\",\n                \"description\": \"Background color of my-element\"\n              }\n            ]\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: UI Inspector Information Block in Markdown\nDESCRIPTION: A markdown snippet providing information about using the UI Inspector tool to examine Swing component implementations and inspect UI at runtime.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/user_interface_components/user_interface_components.md#2025-04-06_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n> Use [UI Inspector](internal_ui_inspector.md) to locate the underlying Swing component implementation or to inspect an existing UI at runtime.\\n>\\n{title=\\\"Inspecting existing UI\\\"}\n```\n\n----------------------------------------\n\nTITLE: Updating ECMA6SyntaxHighlighter Constructor in Java\nDESCRIPTION: The ECMA6SyntaxHighlighter constructor no longer accepts the skipKeywordHighlights parameter. Use the constructor version without this parameter.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/reference_guide/api_changes_list_2025.md#2025-04-06_snippet_7\n\nLANGUAGE: Java\nCODE:\n```\ncom.intellij.lang.javascript.dialects.ECMA6SyntaxHighlighterFactory.ECMA6SyntaxHighlighter(DialectOptionHolder dialectOptionsHolder)\n```\n\n----------------------------------------\n\nTITLE: Adding Labeled Row in Kotlin UI DSL\nDESCRIPTION: Shows how to add a labeled row to a panel using the Kotlin UI DSL. The label is specified as a parameter to the row method.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/user_interface_components/kotlin_ui_dsl.md#2025-04-06_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nrow(\"Parameters\") { ... }\n```\n\n----------------------------------------\n\nTITLE: Removing TailType Method in IntelliJ Platform 2019.3\nDESCRIPTION: The method 'getLocalCodeStyleSettings' in the 'TailType' class has been removed. Users should use the equivalent method in 'CommonCodeStyleSettings' instead.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/reference_guide/api_changes_list_2019.md#2025-04-06_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\ncom.intellij.codeInsight.TailType.getLocalCodeStyleSettings(Editor, int)\n```\n\n----------------------------------------\n\nTITLE: Language Code Style Settings Provider Registration\nDESCRIPTION: XML configuration to register the SimpleLanguageCodeStyleSettingsProvider with the IntelliJ Platform.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/custom_language_support/code_style_settings.md#2025-04-06_snippet_4\n\nLANGUAGE: XML\nCODE:\n```\n<extensions defaultExtensionNs=\"com.intellij\">\n  <langCodeStyleSettingsProvider\n      implementation=\"org.intellij.sdk.language.SimpleLanguageCodeStyleSettingsProvider\"/>\n</extensions>\n```\n\n----------------------------------------\n\nTITLE: Adding Help Text Below Tables in Kotlin UI DSL\nDESCRIPTION: Implementation of help text below a table component using Kotlin UI DSL. The code shows how to format multi-line HTML text that explains the content displayed in the table.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/ui/controls/inline_help_text.md#2025-04-06_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nimport javax.swing.JTable\n\npanel {\n  row {\n    cell(createTable()) // Actual table creation\n      .align(Align.FILL)\n      .comment(\"\"\"\n        &lt;Project> is content roots of all modules,\n        all immediate descendants<br/>of the projects base\n        directory, and .idea directory contents\n        \"\"\".trimIndent()\n      )\n  }.resizableRow()\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Vue Directive Value Type in Web Types\nDESCRIPTION: Demonstrates how to specify the type and requirements for Vue directive attribute values using the 'attribute-value' property in Web Types JSON.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/custom_language_support/websymbols_web_types.md#2025-04-06_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"attribute-value\": {\n      \"type\": \"boolean\",\n      \"required\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry Extensions Configuration\nDESCRIPTION: Extension point definition for OpenTelemetry exporter provider implementation. This is an internal API for telemetry functionality.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/resources/intellij_platform_extension_point_list.md#2025-04-06_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\nOpenTelemetryExtensions.xml\n```\n\n----------------------------------------\n\nTITLE: DataGrip and Kotlin Plugin Breaking Changes in 2019.1\nDESCRIPTION: Documentation of field type changes in DataGrip Database Tools and Kotlin Plugin that require code recompilation to ensure compatibility with the updated APIs.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/reference_guide/api_changes_list_2019.md#2025-04-06_snippet_17\n\nLANGUAGE: Java\nCODE:\n```\n// Field type changes in DataGrip\ncom.intellij.sql.psi.SqlTokens.SQL_IDENT // Type changed from SqlTokenType.impl to SqlTokenType\n\n// Field type changes in Kotlin Plugin API 1.3\norg.jetbrains.kotlin.KtNodeTypes.BOOLEAN_CONSTANT // Type changed from KtNodeType to IElementType\norg.jetbrains.kotlin.KtNodeTypes.CHARACTER_CONSTANT // Type changed from KtNodeType to IElementType\norg.jetbrains.kotlin.KtNodeTypes.FLOAT_CONSTANT // Type changed from KtNodeType to IElementType\norg.jetbrains.kotlin.KtNodeTypes.INTEGER_CONSTANT // Type changed from KtNodeType to IElementType\norg.jetbrains.kotlin.KtNodeTypes.STRING_TEMPLATE // Type changed from KtNodeType to IElementType\n```\n\n----------------------------------------\n\nTITLE: XML Redirect Configuration\nDESCRIPTION: Shows how to configure redirects for renamed documentation pages using XML attributes.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/intro/sdk_style.md#2025-04-06_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<toc-element\n        id=\"themes_getting_started.md\"\n        accepts-web-file-names=\"themes.html,themes-intro.html\"/>\n```\n\n----------------------------------------\n\nTITLE: Markdown Plugin Package Migration (2023.3)\nDESCRIPTION: Migration instructions for removed Markdown plugin packages and methods, with new replacement paths in the intellij.markdown.images module.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/reference_guide/api_changes_list_2023.md#2025-04-06_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\norg.intellij.plugins.markdown.images.editor.ImagePsiElementFactory.createHtmlBlockWithImage\norg.intellij.plugins.markdown.images.editor.ImagePsiElementFactory.createHtmlImageTag\norg.intellij.plugins.markdown.images.editor.ImagePsiElementFactory.createImage\n```\n\n----------------------------------------\n\nTITLE: Configuring IntelliJ Platform Extension in Kotlin\nDESCRIPTION: Example of how to configure the intellijPlatform extension in a Kotlin-based Gradle build script. It demonstrates setting various properties and nested configuration blocks.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_extension.md#2025-04-06_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nintellijPlatform {\n  buildSearchableOptions = true\n  instrumentCode = true\n  projectName = project.name\n  sandboxContainer = \"...\"\n\n  pluginConfiguration {\n    // ...\n  }\n  publishing {\n    // ...\n  }\n  signing {\n    // ...\n  }\n  pluginVerification {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown ID Attribute for Examples\nDESCRIPTION: Custom ID attribute for examples section in markdown.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/ui/text/capitalization.md#2025-04-06_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n{id=\"examples_1\"}\n```\n\n----------------------------------------\n\nTITLE: Defining Vue Model Directive Configuration\nDESCRIPTION: Demonstrates how to configure the Vue v-model directive by specifying which prop and event to use for two-way binding.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/custom_language_support/websymbols_web_types.md#2025-04-06_snippet_8\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"vue-model\": {\n      \"prop\": \"show\",\n      \"event\": \"input\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: AntSupport Extension Point Configuration\nDESCRIPTION: Defines the AntMessageCustomizer extension point for the AntSupport plugin that allows customizing Ant build messages.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/resources/intellij_community_plugins_extension_point_list.md#2025-04-06_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<extensions defaultExtensionNs=\"AntSupport\">\n  <AntMessageCustomizer implementation=\"com.intellij.lang.ant.config.execution.AntMessageCustomizer\"/>\n</extensions>\n```\n\n----------------------------------------\n\nTITLE: Removing CompletionUtil Method in IntelliJ Platform 2019.3\nDESCRIPTION: The 'sortMatching' method in 'CompletionUtil' has been removed. Users should use the equivalent method in 'PrefixMatcher' instead.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/reference_guide/api_changes_list_2019.md#2025-04-06_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\ncom.intellij.codeInsight.completion.CompletionUtil.sortMatching(PrefixMatcher, Collection)\n```\n\n----------------------------------------\n\nTITLE: Database Plugin Method Changes (2023.3)\nDESCRIPTION: Method changes in DataGrid interface including removal of binary display methods and addition of new abstract methods for display type handling.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/reference_guide/api_changes_list_2023.md#2025-04-06_snippet_8\n\nLANGUAGE: Java\nCODE:\n```\ncom.intellij.database.datagrid.DataGrid.setDisplayType(ModelIndex<GridColumn>, DisplayType)\ncom.intellij.database.datagrid.DataGrid.getDisplayType(ModelIndex<GridColumn>)\ncom.intellij.database.datagrid.DataGrid.getPureDisplayType(ModelIndex<GridColumn>)\n```\n\n----------------------------------------\n\nTITLE: Adding Entities to MutableEntityStorage in Kotlin\nDESCRIPTION: Demonstrates how to create a new entity and add it to the MutableEntityStorage. This example shows creating a ModuleEntity with required parameters and optional properties, then adding it to the WorkspaceModel.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/workspace_model/workspace_model_entity_mutation.md#2025-04-06_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n// mandatory properties are passed as parameters\nval module = ModuleEntity(moduleName, dependencies, entitySource) {\n  // optional properties can be initialized in the lambda\n  // passed as the last parameter\n  type = ModuleTypeId.JAVA_MODULE\n}\n\nWorkspaceModel.getInstance(project).update(\"Add module\") { builder ->\n  builder.addEntity(module)\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Comment and Link Summary\nDESCRIPTION: HTML comment containing copyright information and a custom link-summary tag for the Editors section overview.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/editors.md#2025-04-06_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- Copyright 2000-2023 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license. -->\n\n<link-summary>The Editors section overview.</link-summary>\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Module Change Notifications in Java\nDESCRIPTION: This code snippet shows how to receive notifications about module changes (added, removed, or renamed) using the message bus and ProjectTopics.MODULES topic.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/project_model/module.md#2025-04-06_snippet_7\n\nLANGUAGE: Java\nCODE:\n```\nproject.getMessageBus().connect().subscribe(\n    ProjectTopics.MODULES,\n    new ModuleListener() {\n      @Override\n      public void moduleAdded(@NotNull Project project, @NotNull Module module) {\n        // action\n      }\n    });\n```\n\n----------------------------------------\n\nTITLE: Git Extension Points Configuration in intellij.vcs.git.xml\nDESCRIPTION: Defines Git-related extension points for features like repository hosting, branch protection, fetch handling, and annotation providers.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/resources/intellij_community_plugins_extension_point_list.md#2025-04-06_snippet_6\n\nLANGUAGE: XML\nCODE:\n```\nGit4Idea.GitCheckinExplicitMovementProvider\nGit4Idea.GitHttpAuthDataProvider\nGit4Idea.gitAnnotationPerformanceListener\nGit4Idea.gitCurrentBranchPresenter\nGit4Idea.gitFetchHandler\nGit4Idea.gitPostUpdateHandler\nGit4Idea.gitProtectedBranchProvider\nGit4Idea.gitPushNotificationCustomizer\nGit4Idea.gitRawAnnotationProvider\nGit4Idea.gitRepositoryHostingService\nGit4Idea.instantGitTokenProvider\n```\n\n----------------------------------------\n\nTITLE: IntelliJ SDK 2021 Version Table\nDESCRIPTION: Markdown table displaying version history for IntelliJ SDK 2021 releases, including release names, channels, version numbers, IDE versions and release dates organized chronologically.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/_generated/android_studio_releases.md#2025-04-06_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Release Name | Channel | Version | IntelliJ IDEA Version | Release Date |\n|--------------|---------|---------|-----------------------|--------------|\n```\n\n----------------------------------------\n\nTITLE: Updating TypeScriptHighlighter Constructor in Java\nDESCRIPTION: The TypeScriptHighlighter constructor no longer accepts the skipKeywordHighlights parameter. Use the constructor version without this parameter.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/reference_guide/api_changes_list_2025.md#2025-04-06_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\ncom.intellij.lang.javascript.highlighting.TypeScriptHighlighter(DialectOptionHolder dialectOptionsHolder)\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Shim Server Port\nDESCRIPTION: Example of specifying a custom port for the Shim server used to proxy requests to authorized custom plugin repositories.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/tools/intellij_platform_gradle_plugin/tools_intellij_platform_gradle_plugin_gradle_properties.md#2025-04-06_snippet_9\n\nLANGUAGE: properties\nCODE:\n```\norg.jetbrains.intellij.platform.shimServerPort=7348\n```\n\n----------------------------------------\n\nTITLE: Adding Copyright Notice in HTML Comment\nDESCRIPTION: Each Markdown file must start with a copyright notice formatted using HTML comment notation.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/intro/sdk_style.md#2025-04-06_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- Copyright 2000-2025 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license. -->\n```\n\n----------------------------------------\n\nTITLE: Implementing Cross-Module References with Extension Properties\nDESCRIPTION: This example shows how to create a reference between entities in different modules using extension properties. The KotlinEntity references MavenEntity directly, while MavenEntity references KotlinEntity through an extension property.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/workspace_model/workspace_model_entity_declaration.md#2025-04-06_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\ninterface MavenEntity: WorkspaceEntity {\n  val version: Int\n  val name: String\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Interface Extension References\nDESCRIPTION: Lists of interfaces and classes used for extending Markdown functionality in IntelliJ, including preview panels, export providers, and language support.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/resources/intellij_community_plugins_extension_point_list.md#2025-04-06_snippet_15\n\nLANGUAGE: text\nCODE:\n```\nAdditionalFenceLanguageSuggester\nProvider\nCodeFenceGeneratingProvider\nCodeFenceLanguageProvider\nMarkdownFlavourProvider\nMarkdownHtmlPanelProvider\nMarkdownExportProvider\nMarkdownRunner\nMarkdownPreviewStylesProvider\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle Dependencies for Java Plugin (Groovy)\nDESCRIPTION: Gradle configuration in Groovy DSL to add Java plugin dependency required for PSI literal expression support.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/custom_language_support/annotator.md#2025-04-06_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\nintellij {\n  plugins = ['com.intellij.java']\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Comment with Copyright Notice\nDESCRIPTION: Copyright notice for JetBrains documentation in HTML comment format.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/ui/text/capitalization.md#2025-04-06_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- Copyright 2000-2024 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license. -->\n```\n\n----------------------------------------\n\nTITLE: PHP Framework Extension Points\nDESCRIPTION: Extension points for PHP framework integration and description providers.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/resources/php_extension_point_list.md#2025-04-06_snippet_5\n\nLANGUAGE: text\nCODE:\n```\ncom.jetbrains.php.framework.descriptionProvider\n```\n\n----------------------------------------\n\nTITLE: Visualizing replaceBySource() Operation with Mermaid Diagram\nDESCRIPTION: A mermaid flowchart that visualizes how the replaceBySource() operation works. It shows the original storage, a separate MutableEntityStorage instance, and the resulting storage after applying the operation with a predicate filtering by a specific entity source type.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/workspace_model/workspace_model_entity_mutation.md#2025-04-06_snippet_5\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart\n    subgraph WorkspaceModel\n        direction TB\n        subgraph Original\n            aa[ModuleEntity]\n            bb[ContentRootEntity1]\n            cc[ContentRootEntity2]\n            dd[SourceRootEntity1]\n            ee[SourceRootEntity2]\n            ff[SourceRootEntity]\n            aa --> bb\n            aa --> cc\n            bb --> dd\n            cc --> ee\n            cc --> ff\n            style aa fill: #FF9\n            style bb fill: #FF9\n            style dd fill: #FF9\n            style cc fill: #9F9\n            style ee fill: #9F9\n            style ff fill: #9F9\n        end\n\n        subgraph Result\n            gg[ModuleEntity]\n            hh[ContentRootEntity1]\n            ii[ContentRootEntity3]\n            jj[ContentRootEntity2]\n            kk[SourceRootEntity]\n            ll[SourceRootEntity1]\n            mm[SourceRootEntity2]\n            nn[SourceRootEntity3]\n            oo[SourceRootEntity4]\n            gg --> hh\n            gg --> ii\n            gg --> jj\n            hh --> nn\n            hh --> ll\n            hh --> oo\n            jj --> mm\n            jj --> kk\n            style gg fill: #FF9\n            style hh fill: #FF9\n            style nn fill: #FF9\n            style ll fill: #FF9\n            style oo fill: #FF9\n            style ii fill: #FF9\n            style jj fill: #9F9\n            style mm fill: #9F9\n            style kk fill: #9F9\n        end\n\n    end\n\n    subgraph MutableEntityStorage\n        a[ModuleEntity]\n        b[ContentRootEntity3]\n        d[ContentRootEntity1]\n        e[SourceRootEntity1]\n        k[SourceRootEntity3]\n        f[SourceRootEntity4]\n        a --> b\n        a --> d\n        d --> k\n        d --> e\n        d --> f\n        style a fill: #FF9\n        style b fill: #FF9\n        style d fill: #FF9\n        style k fill: #FF9\n        style e fill: #FF9\n        style f fill: #FF9\n\n    end\n    MutableEntityStorage ==  \"**replaceBySource()**\"  ==> Original\n```\n\n----------------------------------------\n\nTITLE: Defining Rider Settings Sync Extension Point in XML\nDESCRIPTION: This XML snippet defines an extension point for machine-dependent backend settings in JetBrains Rider IDE. It is used for synchronizing settings across different machines.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/resources/rider_extension_point_list.md#2025-04-06_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<extensionPoints>\n  <extensionPoint name=\"com.intellij.rider.settings.machineDependentBackendSetting\" interface=\"n/a\"/>\n</extensionPoints>\n```\n\n----------------------------------------\n\nTITLE: Highlighting All File Identifiers (Legacy Approach)\nDESCRIPTION: Example showing the legacy approach of highlighting identifiers at file level scope. This approach is no longer recommended as it's less efficient and slower to update.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/reference_guide/custom_language_support/syntax_highlighting_and_error_highlighting.md#2025-04-06_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nannotate(PsiFile) {\n  <<highlight all relevant identifiers>>\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Tooltip with Paragraphs in Kotlin\nDESCRIPTION: This snippet demonstrates how to create a tooltip with multiple paragraphs using the HelpTooltip class in Kotlin. It shows how to set a long description text with HTML paragraph tags for better readability.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/ui/controls/tooltip.md#2025-04-06_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval LONG_TEXT = \"\"\"A new overloading method will be created with\n    the new parameter added to this method definition.<p>\n    The method with the old signature will be kept and the call\n    to the new method will be added to it. The necessary value\n    or expression will be passed to the new method call.\"\"\"\nHelpTooltip().setDescription(LONG_TEXT).installOn(component)\n```\n\n----------------------------------------\n\nTITLE: Project View Extension Point Configuration Table\nDESCRIPTION: Markdown table defining the implementation details of the com.intellij.projectViewPane extension point, showing the extension point name, implementation class, and base class.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/code_samples/project_view_pane/README.md#2025-04-06_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                           | Implementation                                      | Extension Point Class     |\n|--------------------------------|-----------------------------------------------------|---------------------------|\n| `com.intellij.projectViewPane` | [ImagesProjectViewPane][file:ImagesProjectViewPane] | `AbstractProjectViewPane` |\n```\n\n----------------------------------------\n\nTITLE: Extension Point Definitions in android-adb.xml\nDESCRIPTION: Defines extension points for device name rendering and device provisioning functionality.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/resources/android_plugin_extension_point_list.md#2025-04-06_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\ncom.android.run.deviceNameRenderer\ncom.android.tools.idea.deviceProvisioner\n```\n\n----------------------------------------\n\nTITLE: Plugin Extension Registration (2022.3+)\nDESCRIPTION: XML configuration for registering live template extensions in IntelliJ Platform version 2022.3 and later.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/live_templates/providing_live_templates.md#2025-04-06_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<extensions defaultExtensionNs=\"com.intellij\">\n  <defaultLiveTemplates file=\"/liveTemplates/Markdown.xml\"/>\n  <liveTemplateContext\n          contextId=\"MARKDOWN\"\n          implementation=\"org.intellij.sdk.liveTemplates.MarkdownContext\"/>\n</extensions>\n```\n\n----------------------------------------\n\nTITLE: Setting up Designer Extension Points\nDESCRIPTION: Registers extension points for UI Builder functionality including view handlers, property editors, and scene decorators. Enables customization of the Android Studio design tools.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/resources/android_plugin_extension_point_list.md#2025-04-06_snippet_7\n\nLANGUAGE: XML\nCODE:\n```\ncom.android.tools.idea.uibuilder.handlers.viewHandlerProvider\ncom.android.tools.idea.uibuilder.property.motionEditorNlPropertiesModelProvider\n```\n\n----------------------------------------\n\nTITLE: Adding ReSharper Plugin Version Badge in Markdown\nDESCRIPTION: Adds a badge showing the version of a ReSharper plugin. Requires replacing :packageName with the actual package name.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/appendix/resources/marketing.md#2025-04-06_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n![Version](https://img.shields.io/resharper/v/:packageName)\n```\n\n----------------------------------------\n\nTITLE: HTML Copyright Notice\nDESCRIPTION: Copyright notice and license information for JetBrains documentation\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/tutorials/actions_tutorial.md#2025-04-06_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- Copyright 2000-2025 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license. -->\n```\n\n----------------------------------------\n\nTITLE: Defining Page Title in Markdown\nDESCRIPTION: The copyright notice must be followed by a header defining the page title using a level 1 heading in Markdown.\nSOURCE: https://github.com/JetBrains/intellij-sdk-docs/blob/main/topics/intro/sdk_style.md#2025-04-06_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# Contributing to the IntelliJ Platform SDK\n```"
  }
]