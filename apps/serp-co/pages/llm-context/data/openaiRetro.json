[
  {
    "owner": "openai",
    "repo": "retro",
    "content": "TITLE: Create a Gym Retro environment\nDESCRIPTION: This Python code imports the retro library and creates a Gym environment for the specified game.  It requires the retro package to be installed.\nSOURCE: https://github.com/openai/retro/blob/master/docs/getting_started.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport retro\nenv = retro.make(game='Airstriker-Genesis')\n```\n\n----------------------------------------\n\nTITLE: Binding an Internal Enumeration with pybind11 (C++)\nDESCRIPTION: This snippet shows how to bind an internal enumeration type (e.g., `Pet::Kind`) using pybind11. It ensures that the `Kind` type is created within the scope of `Pet` and exports the enum entries for use in Python.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/classes.rst#_snippet_27\n\nLANGUAGE: cpp\nCODE:\n```\npy::class_<Pet> pet(m, \"Pet\");\n\npet.def(py::init<const std::string &, Pet::Kind>())\n    .def_readwrite(\"name\", &Pet::name)\n    .def_readwrite(\"type\", &Pet::type);\n\npy::enum_<Pet::Kind>(pet, \"Kind\")\n    .value(\"Dog\", Pet::Kind::Dog)\n    .value(\"Cat\", Pet::Kind::Cat)\n    .export_values();\n```\n\n----------------------------------------\n\nTITLE: Nesting Structs (Cap'n Proto)\nDESCRIPTION: This example shows how to nest struct definitions in Cap'n Proto. Nested types have a scope that must be specified using dots.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/doc/language.md#_snippet_19\n\nLANGUAGE: capnp\nCODE:\n```\nstruct Foo {\n  struct Bar {\n    #...\n  }\n  bar @0 :Bar;\n}\n\nstruct Baz {\n  bar @0 :Foo.Bar;\n}\n{% endhighlight %}\n```\n\n----------------------------------------\n\nTITLE: Entropy Function for PRNG Initialization (Windows)\nDESCRIPTION: This function provides entropy for initializing Dr. Gladman's pseudo-random number generator (PRNG). It leverages the Windows performance counter, system time, process ID, and thread ID to generate a sequence of pseudo-random bytes. The function takes a buffer and its length as input and fills the buffer with entropy data. It requires the Windows API functions QueryPerformanceCounter, GetSystemTimeAsFileTime, GetCurrentProcessId, and GetCurrentThreadId.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/libzip/docs/aes_coding_tips.txt#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint entropy_fun(\n unsigned char buf[],\n unsigned int len)\n    {\n    unsigned __int64 pentium_tsc[1];\n    unsigned int     i;\n    static unsigned int num = 0;\n    // this sample code returns the following sequence of entropy information\n    // - the current 8-byte Windows performance counter value\n    // - an 8-byte representation of the current date/time\n    // - an 8-byte value built from the current process ID and thread ID\n    // - all subsequent calls return the then-current 8-byte performance\n    // counter value\n    switch (num)\n        {\n    case 1:\n        ++num;\n        // use a value that is unlikely to repeat across system reboots\n        GetSystemTimeAsFileTime((FILETIME *)pentium_tsc);\n        break;\n    case 2:\n        ++num;\n        {\n        // use a value that distinguishes between different instances of this\n        // code that might be running on different processors at the same time\n        unsigned __int32 processtest = GetCurrentProcessId();\n        unsigned __int32 threadtest = GetCurrentThreadId();\n        pentium_tsc[0] = processtest;\n        pentium_tsc[0] = (pentium_tsc[0] << 32) + threadtest;\n        }\n        break;\n    case 0:\n        ++num;\n        // fall through to default case\n    default:\n        // use a rapidly-changing value\n        //  Note: check QueryPerformanceFrequency() first to\n        //  ensure that QueryPerformanceCounter() will work.\n        QueryPerformanceCounter((LARGE_INTEGER *)pentium_tsc);\n        break;\n        }\n    for(i = 0; i < 8 && i < len; ++i)\n        buf[i] = ((unsigned char*)pentium_tsc)[i];\n    return i;\n    }\n```\n\n----------------------------------------\n\nTITLE: Compiling schema to C++ with `capnp`\nDESCRIPTION: This command compiles a Cap'n Proto schema (`myschema.capnp`) into C++ source code files (`myschema.capnp.h` and `myschema.capnp.c++`). The `-oc++` option specifies the target language, which triggers the `capnpc-c++` compiler plugin.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/doc/capnp-tool.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncapnp compile -oc++ myschema.capnp\n```\n\n----------------------------------------\n\nTITLE: Generating Man Pages using FOREACH Loop (CMake)\nDESCRIPTION: This CMake code iterates through each man page defined in the `MAN_PAGES` variable. It constructs the source file and subdirectory names, copies the files if different, and installs the generated man pages to the specified destination directory. It also creates custom commands for updating both man pages and HTML files.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/libzip/man/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nFOREACH(MAN_PAGE ${MAN_PAGES})\n  STRING(REGEX REPLACE \"[1-9]$\" \"${MANFMT}\" SOURCE_FILE ${MAN_PAGE})\n  STRING(REGEX REPLACE \".*(.)$\" \"man\\\\1\" SUBDIR ${MAN_PAGE})\n  # CONFIGURE_FILE does not find out about updates to the sources, and it does not provide a target\n  #CONFIGURE_FILE(${SOURCE_FILE} ${MAN_PAGE} COPYONLY)\n  ADD_CUSTOM_COMMAND(OUTPUT ${MAN_PAGE}\n    DEPENDS ${SOURCE_FILE}\n    COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_CURRENT_SOURCE_DIR}/${SOURCE_FILE} ${CMAKE_CURRENT_BINARY_DIR}/${MAN_PAGE}\n    COMMENT \"Preparing ${MAN_PAGE}\"\n    )\n  INSTALL(FILES ${CMAKE_CURRENT_BINARY_DIR}/${MAN_PAGE} DESTINATION ${CMAKE_INSTALL_MANDIR}/${SUBDIR})\n\n  STRING(REGEX REPLACE \"[1-9]$\" \"html\" HTML_FILE ${MAN_PAGE})\n  STRING(REGEX REPLACE \"[1-9]$\" \"man\" MAN_FILE ${MAN_PAGE})\n  STRING(REGEX REPLACE \"[1-9]$\" \"mdoc\" MDOC_FILE ${MAN_PAGE})\n\n  # html re-generation\n  ADD_CUSTOM_COMMAND(OUTPUT ${CMAKE_CURRENT_SOURCE_DIR}/${HTML_FILE}\n    DEPENDS ${MDOC_FILE}\n    COMMAND ${CMAKE_COMMAND} -DIN=${MDOC_FILE} -DOUT=${HTML_FILE} -DDIR=${CMAKE_CURRENT_SOURCE_DIR} -P ${CMAKE_CURRENT_SOURCE_DIR}/update-html.cmake\n    )\n  LIST(APPEND UPDATEHTML ${CMAKE_CURRENT_SOURCE_DIR}/${HTML_FILE})\n\n  # man re-generation\n  ADD_CUSTOM_COMMAND(OUTPUT ${CMAKE_CURRENT_SOURCE_DIR}/${MAN_FILE}\n    DEPENDS ${MDOC_FILE}\n    COMMAND ${CMAKE_COMMAND} -DIN=${MDOC_FILE} -DOUT=${MAN_FILE} -DDIR=${CMAKE_CURRENT_SOURCE_DIR} -P ${CMAKE_CURRENT_SOURCE_DIR}/update-man.cmake\n    )\n  LIST(APPEND UPDATEMAN ${CMAKE_CURRENT_SOURCE_DIR}/${MAN_FILE})\nENDFOREACH()\n```\n\n----------------------------------------\n\nTITLE: Python Constructor Call Example\nDESCRIPTION: This Python code demonstrates the importance of calling the C++ constructor from a derived Python class using `Dog.__init__(self)`.  Failure to do so can lead to undefined behavior.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/classes.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass Dachschund(Dog):\n    def __init__(self, name):\n        Dog.__init__(self) # Without this, undefind behavior may occur if the C++ portions are referenced.\n        self.name = name\n    def bark(self):\n        return \"yap!\"\n```\n\n----------------------------------------\n\nTITLE: Installing pkg-config Files (non-MSVC)\nDESCRIPTION: Installs pkg-config files (kj.pc, capnp.pc, kj-async.pc, capnp-rpc.pc, capnp-json.pc) for non-MSVC builds, allowing other projects to find and use Cap'n Proto using pkg-config. The files kj-async.pc, capnp-rpc.pc and capnp-json.pc are conditionally installed based on the CAPNP_LITE option.  Variables for the configuration are set before configuring the files, and unset after the installation.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/c++/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT MSVC)  # Don't install pkg-config files when building with MSVC\n  # Variables for pkg-config files\n  set(prefix \"${CMAKE_INSTALL_PREFIX}\")\n  set(exec_prefix \"\") # not needed since we use absolute paths in libdir and includedir\n  set(libdir \"${CMAKE_INSTALL_FULL_LIBDIR}\")\n  set(includedir \"${CMAKE_INSTALL_FULL_INCLUDEDIR}\")\n  set(PTHREAD_CFLAGS \"-pthread\")\n  set(STDLIB_FLAG)  # TODO: Unsupported\n\n  configure_file(kj.pc.in \"${CMAKE_CURRENT_BINARY_DIR}/kj.pc\" @ONLY)\n  install(FILES \"${CMAKE_CURRENT_BINARY_DIR}/kj.pc\" DESTINATION \"${CMAKE_INSTALL_LIBDIR}/pkgconfig\")\n\n  configure_file(capnp.pc.in \"${CMAKE_CURRENT_BINARY_DIR}/capnp.pc\" @ONLY)\n  install(FILES \"${CMAKE_CURRENT_BINARY_DIR}/capnp.pc\" DESTINATION \"${CMAKE_INSTALL_LIBDIR}/pkgconfig\")\n\n  if(NOT CAPNP_LITE)\n    configure_file(kj-async.pc.in \"${CMAKE_CURRENT_BINARY_DIR}/kj-async.pc\" @ONLY)\n    install(FILES \"${CMAKE_CURRENT_BINARY_DIR}/kj-async.pc\" DESTINATION \"${CMAKE_INSTALL_LIBDIR}/pkgconfig\")\n\n    configure_file(capnp-rpc.pc.in \"${CMAKE_CURRENT_BINARY_DIR}/capnp-rpc.pc\" @ONLY)\n    install(FILES \"${CMAKE_CURRENT_BINARY_DIR}/capnp-rpc.pc\" DESTINATION \"${CMAKE_INSTALL_LIBDIR}/pkgconfig\")\n\n    configure_file(capnp-json.pc.in \"${CMAKE_CURRENT_BINARY_DIR}/capnp-json.pc\" @ONLY)\n    install(FILES \"${CMAKE_CURRENT_BINARY_DIR}/capnp-json.pc\" DESTINATION \"${CMAKE_INSTALL_LIBDIR}/pkgconfig\")\n  endif()\n\n  unset(STDLIB_FLAG)\n  unset(PTHREAD_CFLAGS)\n  unset(includedir)\n  unset(libdir)\n  unset(exec_prefix)\n  unset(prefix)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Compressing Files using Zlib in Visual Basic\nDESCRIPTION: This Visual Basic subroutine, `subCompressFile`, compresses a file using the zlib library. It reads the file content into a byte array, allocates a compressed byte array, calls the `compress2` function, and writes the compressed data along with the original file size to a new file with a `.cpr` extension. The compression level can be specified (1-9).\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/third-party/zlib/old/visual-basic.txt#_snippet_2\n\nLANGUAGE: Visual Basic\nCODE:\n```\nPrivate Declare Function lngfncCpr Lib \"zlib.dll\" Alias \"compress2\" (ByRef\ndest As Any, ByRef destLen As Any, ByRef src As Any, ByVal srcLen As Long,\nByVal level As Integer) As Long\n\nPublic Sub subCompressFile(ByVal strargOriFilPth As String, Optional ByVal\nstrargCprFilPth As String, Optional ByVal intLvl As Integer = 9)\n    Dim strCprPth As String\n    Dim lngOriSiz As Long\n    Dim lngCprSiz As Long\n    Dim bytaryOri() As Byte\n    Dim bytaryCpr() As Byte\n    lngOriSiz = FileLen(strargOriFilPth)\n    ReDim bytaryOri(lngOriSiz - 1)\n    Open strargOriFilPth For Binary Access Read As #1\n        Get #1, , bytaryOri()\n    Close #1\n    strCprPth = IIf(strargCprFilPth = \"\", strargOriFilPth, strargCprFilPth)\n'Select file path and name\n    strCprPth = strCprPth & IIf(Right(strCprPth, Len(strFilExt)) =\nstrFilExt, \"\", strFilExt) 'Add file extension if not exists\n    lngCprSiz = (lngOriSiz * 1.01) + 12 'Compression needs temporary a bit\nmore space then original file size\n    ReDim bytaryCpr(lngCprSiz - 1)\n    If lngfncCpr(bytaryCpr(0), lngCprSiz, bytaryOri(0), lngOriSiz, intLvl) =\nSUCCESS Then\n        lngpvtPcnSml = (1# - (lngCprSiz / lngOriSiz)) * 100\n        ReDim Preserve bytaryCpr(lngCprSiz - 1)\n        Open strCprPth For Binary Access Write As #1\n            Put #1, , bytaryCpr()\n            Put #1, , lngOriSiz 'Add the the original size value to the end\n(last 4 bytes)\n        Close #1\n    Else\n        MsgBox \"Compression error\"\n    End If\n    Erase bytaryCpr\n    Erase bytaryOri\nEnd Sub\n```\n\n----------------------------------------\n\nTITLE: Setting Reader Options in Cap'n Proto\nDESCRIPTION: This snippet refers to setting reader options like nesting depth and traversal limits in Cap'n Proto using the `capnp::ReaderOptions` structure. These options control the artificial limits applied to messages for security reasons, such as preventing stack overflows and defending against malicious messages with pointer cycles.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/doc/cxx.md#_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\n`capnp::ReaderOptions`\n```\n\n----------------------------------------\n\nTITLE: Uncompressing Files using Zlib in Visual Basic\nDESCRIPTION: This Visual Basic subroutine, `subUncompressFile`, uncompresses a file compressed using the `subCompressFile` routine. It reads the compressed data and the original file size from the compressed file, allocates a byte array for the uncompressed data, calls the `uncompress` function, and writes the uncompressed data to a new file with the `.cpr` extension removed.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/third-party/zlib/old/visual-basic.txt#_snippet_3\n\nLANGUAGE: Visual Basic\nCODE:\n```\nPrivate Declare Function lngfncUcp Lib \"zlib.dll\" Alias \"uncompress\" (ByRef\ndest As Any, ByRef destLen As Any, ByRef src As Any, ByVal srcLen As Long)\nAs Long\n\nPublic Sub subUncompressFile(ByVal strargFilPth As String)\n    Dim bytaryCpr() As Byte\n    Dim bytaryOri() As Byte\n    Dim lngOriSiz As Long\n    Dim lngCprSiz As Long\n    Dim strOriPth As String\n    lngCprSiz = FileLen(strargFilPth)\n    ReDim bytaryCpr(lngCprSiz - 1)\n    Open strargFilPth For Binary Access Read As #1\n        Get #1, , bytaryCpr()\n    Close #1\n    'Read the original file size value:\n    lngOriSiz = bytaryCpr(lngCprSiz - 1) * (2 ^ 24) _\n              + bytaryCpr(lngCprSiz - 2) * (2 ^ 16) _\n              + bytaryCpr(lngCprSiz - 3) * (2 ^ 8) _\n              + bytaryCpr(lngCprSiz - 4)\n    ReDim Preserve bytaryCpr(lngCprSiz - 5) 'Cut of the original size value\n    ReDim bytaryOri(lngOriSiz - 1)\n    If lngfncUcp(bytaryOri(0), lngOriSiz, bytaryCpr(0), lngCprSiz) = SUCCESS\nThen\n        strOriPth = Left(strargFilPth, Len(strargFilPth) - Len(strFilExt))\n        Open strOriPth For Binary Access Write As #1\n            Put #1, , bytaryOri()\n        Close #1\n    Else\n        MsgBox \"Uncompression error\"\n    End If\n    Erase bytaryCpr\n    Erase bytaryOri\nEnd Sub\n```\n\n----------------------------------------\n\nTITLE: Creating Libraries with Custom Compiler Flags in CMake\nDESCRIPTION: This snippet creates libraries with non-standard compiler flags, such as disabling exceptions or RTTI. These libraries are used to test Google Mock's behavior under different compiler settings.  It also contains logic to conditionally build libraries based on MSVC versions and tuple support.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googlemock/CMakeLists.txt#_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nif (gmock_build_tests)\n  cxx_library(gmock_main_no_exception \"${cxx_no_exception}\"\n    \"${gtest_dir}/src/gtest-all.cc\" src/gmock-all.cc src/gmock_main.cc)\n\n  cxx_library(gmock_main_no_rtti \"${cxx_no_rtti}\"\n    \"${gtest_dir}/src/gtest-all.cc\" src/gmock-all.cc src/gmock_main.cc)\n\n  if (NOT MSVC OR MSVC_VERSION LESS 1600)  # 1600 is Visual Studio 2010.\n    # Visual Studio 2010, 2012, and 2013 define symbols in std::tr1 that\n    # conflict with our own definitions. Therefore using our own tuple does not\n    # work on those compilers.\n    cxx_library(gmock_main_use_own_tuple \"${cxx_use_own_tuple}\"\n      \"${gtest_dir}/src/gtest-all.cc\" src/gmock-all.cc src/gmock_main.cc)\n\n    cxx_test_with_flags(gmock_use_own_tuple_test \"${cxx_use_own_tuple}\"\n      gmock_main_use_own_tuple test/gmock-spec-builders_test.cc)\n  endif()\n\n  cxx_test_with_flags(gmock-more-actions_no_exception_test \"${cxx_no_exception}\"\n    gmock_main_no_exception test/gmock-more-actions_test.cc)\n\n  cxx_test_with_flags(gmock_no_rtti_test \"${cxx_no_rtti}\"\n    gmock_main_no_rtti test/gmock-spec-builders_test.cc)\n\n  cxx_shared_library(shared_gmock_main \"${cxx_default}\"\n    \"${gtest_dir}/src/gtest-all.cc\" src/gmock-all.cc src/gmock_main.cc)\n\n  # Tests that a binary can be built with Google Mock as a shared library.  On\n  # some system configurations, it may not possible to run the binary without\n  # knowing more details about the system configurations. We do not try to run\n  # this binary. To get a more robust shared library coverage, configure with\n  # -DBUILD_SHARED_LIBS=ON.\n  cxx_executable_with_flags(shared_gmock_test_ \"${cxx_default}\"\n    shared_gmock_main test/gmock-spec-builders_test.cc)\n  set_target_properties(shared_gmock_test_\n    PROPERTIES\n    COMPILE_DEFINITIONS \"GTEST_LINKED_AS_SHARED_LIBRARY=1\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Using LZMA Encoder/Decoder Executable\nDESCRIPTION: This snippet describes the usage of the LZMA encoder/decoder executable.  It lists the command line parameters and switches to encode, decode, benchmark, and adjust compression settings like dictionary size, fast bytes, literal context bits, literal position bits, and position bits. It shows how to set compression mode.\nSOURCE: https://github.com/openai/retro/blob/master/cores/genesis/core/cd_hw/libchdr/deps/lzma/DOC/lzma-sdk.txt#_snippet_2\n\nLANGUAGE: CommandLine\nCODE:\n```\nUsage:  LZMA <e|d> inputFile outputFile [<switches>...]\n\n  e: encode file\n\n  d: decode file\n\n  b: Benchmark. There are two tests: compressing and decompressing \n     with LZMA method. Benchmark shows rating in MIPS (million \n     instructions per second). Rating value is calculated from \n     measured speed and it is normalized with Intel's Core 2 results.\n     Also Benchmark checks possible hardware errors (RAM \n     errors in most cases). Benchmark uses these settings:\n     (-a1, -d21, -fb32, -mfbt4). You can change only -d parameter. \n     Also you can change the number of iterations. Example for 30 iterations:\n       LZMA b 30\n     Default number of iterations is 10.\n\n<Switches>\n  \n\n  -a{N}:  set compression mode 0 = fast, 1 = normal\n          default: 1 (normal)\n\n  d{N}:   Sets Dictionary size - [0, 30], default: 23 (8MB)\n          The maximum value for dictionary size is 1 GB = 2^30 bytes.\n          Dictionary size is calculated as DictionarySize = 2^N bytes. \n          For decompressing file compressed by LZMA method with dictionary \n          size D = 2^N you need about D bytes of memory (RAM).\n\n  -fb{N}: set number of fast bytes - [5, 273], default: 128\n          Usually big number gives a little bit better compression ratio \n          and slower compression process.\n\n  -lc{N}: set number of literal context bits - [0, 8], default: 3\n          Sometimes lc=4 gives gain for big files.\n\n  -lp{N}: set number of literal pos bits - [0, 4], default: 0\n          lp switch is intended for periodical data when period is \n          equal 2^N. For example, for 32-bit (4 bytes) \n          periodical data you can use lp=2. Often it's better to set lc0, \n          if you change lp switch.\n\n  -pb{N}: set number of pos bits - [0, 4], default: 2\n          pb switch is intended for periodical data \n          when period is equal 2^N.\n\n  -mf{MF_ID}: set Match Finder. Default: bt4. \n              Algorithms from hc* group doesn't provide good compression \n              ratio, but they often works pretty fast in combination with \n              fast mode (-a0).\n\n              Memory requirements depend from dictionary size \n              (parameter \"d\" in table below). \n\n               MF_ID     Memory                   Description\n\n                bt2    d *  9.5 + 4MB  Binary Tree with 2 bytes hashing.\n                bt3    d * 11.5 + 4MB  Binary Tree with 3 bytes hashing.\n```\n\n----------------------------------------\n\nTITLE: Adding Tests with CMake\nDESCRIPTION: This snippet adds several test executables and links them against the shared libpng library if `PNG_TESTS` and `PNG_SHARED` are enabled.  It then defines tests using the `add_test` command, specifying the executable and any required arguments, including PNG image files.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/third-party/libpng/CMakeLists.txt#_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\nif(PNG_TESTS AND PNG_SHARED)\n  # does not work with msvc due to png_lib_ver issue\n  add_executable(pngtest ${pngtest_sources})\n  target_link_libraries(pngtest ${PNG_LIB_NAME})\n  add_test(pngtest ./pngtest ${CMAKE_CURRENT_SOURCE_DIR}/pngtest.png)\n  #\n  add_executable(pngvalid ${pngvalid_sources})\n  target_link_libraries(pngvalid ${PNG_LIB_NAME})\n  add_test(pngvalid ./pngvalid)\n  add_executable(pngstest ${pngstest_sources})\n  target_link_libraries(pngstest ${PNG_LIB_NAME})\n  add_test(pngstest ./pngstest\n    ${CMAKE_CURRENT_SOURCE_DIR}/contrib/pngsuite/basn0g01.png\n    ${CMAKE_CURRENT_SOURCE_DIR}/contrib/pngsuite/basn0g02.png\n    ${CMAKE_CURRENT_SOURCE_DIR}/contrib/pngsuite/basn0g04.png\n    ${CMAKE_CURRENT_SOURCE_DIR}/contrib/pngsuite/basn0g08.png\n    ${CMAKE_CURRENT_SOURCE_DIR}/contrib/pngsuite/basn0g16.png\n    ${CMAKE_CURRENT_SOURCE_DIR}/contrib/pngsuite/basn2c08.png\n    ${CMAKE_CURRENT_SOURCE_DIR}/contrib/pngsuite/basn2c16.png\n    ${CMAKE_CURRENT_SOURCE_DIR}/contrib/pngsuite/basn3p01.png\n    ${CMAKE_CURRENT_SOURCE_DIR}/contrib/pngsuite/basn3p02.png\n    ${CMAKE_CURRENT_SOURCE_DIR}/contrib/pngsuite/basn3p04.png\n    ${CMAKE_CURRENT_SOURCE_DIR}/contrib/pngsuite/basn3p08.png\n    ${CMAKE_CURRENT_SOURCE_DIR}/contrib/pngsuite/basn4a08.png\n    ${CMAKE_CURRENT_SOURCE_DIR}/contrib/pngsuite/basn4a16.png\n    ${CMAKE_CURRENT_SOURCE_DIR}/contrib/pngsuite/basn6a08.png\n    ${CMAKE_CURRENT_SOURCE_DIR}/contrib/pngsuite/basn6a16.png\n    ${CMAKE_CURRENT_SOURCE_DIR}/contrib/pngsuite/ftbbn0g01.png\n    ${CMAKE_CURRENT_SOURCE_DIR}/contrib/pngsuite/ftbbn0g02.png\n    ${CMAKE_CURRENT_SOURCE_DIR}/contrib/pngsuite/ftbbn0g04.png\n    ${CMAKE_CURRENT_SOURCE_DIR}/contrib/pngsuite/ftbbn2c16.png\n    ${CMAKE_CURRENT_SOURCE_DIR}/contrib/pngsuite/ftbbn3p08.png\n    ${CMAKE_CURRENT_SOURCE_DIR}/contrib/pngsuite/ftbgn2c16.png\n    ${CMAKE_CURRENT_SOURCE_DIR}/contrib/pngsuite/ftbgn3p08.png\n    ${CMAKE_CURRENT_SOURCE_DIR}/contrib/pngsuite/ftbrn2c08.png\n    ${CMAKE_CURRENT_SOURCE_DIR}/contrib/pngsuite/ftbwn0g16.png\n    ${CMAKE_CURRENT_SOURCE_DIR}/contrib/pngsuite/ftbwn3p08.png\n    ${CMAKE_CURRENT_SOURCE_DIR}/contrib/pngsuite/ftbyn3p08.png\n    ${CMAKE_CURRENT_SOURCE_DIR}/contrib/pngsuite/ftp0n0g08.png\n    ${CMAKE_CURRENT_SOURCE_DIR}/contrib/pngsuite/ftp0n2c08.png\n    ${CMAKE_CURRENT_SOURCE_DIR}/contrib/pngsuite/ftp0n3p08.png\n    ${CMAKE_CURRENT_SOURCE_DIR}/contrib/pngsuite/ftp1n3p08.png\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Define C++ Executables and Python Tests (CMake)\nDESCRIPTION: This section defines multiple C++ executables and links them to corresponding Python tests.  It utilizes `cxx_executable` to create the executables and `py_test` to define Python tests. Some executables are created with specific compiler flags based on whether exceptions are enabled.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\ncxx_executable(gtest_break_on_failure_unittest_ test gtest)\npy_test(gtest_break_on_failure_unittest)\n\n# Visual Studio .NET 2003 does not support STL with exceptions disabled.\nif (NOT MSVC OR MSVC_VERSION GREATER 1310)  # 1310 is Visual Studio .NET 2003\n    cxx_executable_with_flags(\n      gtest_catch_exceptions_no_ex_test_\n      \"${cxx_no_exception}\"\n      gtest_main_no_exception\n      test/gtest_catch_exceptions_test_.cc)\n  endif()\n\ncxx_executable_with_flags(\n    gtest_catch_exceptions_ex_test_\n    \"${cxx_exception}\"\n    gtest_main\n    test/gtest_catch_exceptions_test_.cc)\npy_test(gtest_catch_exceptions_test)\n\ncxx_executable(gtest_color_test_ test gtest)\npy_test(gtest_color_test)\n\ncxx_executable(gtest_env_var_test_ test gtest)\npy_test(gtest_env_var_test)\n\ncxx_executable(gtest_filter_unittest_ test gtest)\npy_test(gtest_filter_unittest)\n\ncxx_executable(gtest_help_test_ test gtest_main)\npy_test(gtest_help_test)\n\ncxx_executable(gtest_list_tests_unittest_ test gtest)\npy_test(gtest_list_tests_unittest)\n\ncxx_executable(gtest_output_test_ test gtest)\npy_test(gtest_output_test)\n\ncxx_executable(gtest_shuffle_test_ test gtest)\npy_test(gtest_shuffle_test)\n\n# MSVC 7.1 does not support STL with exceptions disabled.\nif (NOT MSVC OR MSVC_VERSION GREATER 1310)\n    cxx_executable(gtest_throw_on_failure_test_ test gtest_no_exception)\n    set_target_properties(gtest_throw_on_failure_test_\n      PROPERTIES\n      COMPILE_FLAGS \"${cxx_no_exception}\")\n    py_test(gtest_throw_on_failure_test)\n  endif()\n\ncxx_executable(gtest_uninitialized_test_ test gtest)\npy_test(gtest_uninitialized_test)\n\ncxx_executable(gtest_xml_outfile1_test_ test gtest_main)\ncxx_executable(gtest_xml_outfile2_test_ test gtest_main)\npy_test(gtest_xml_outfiles_test)\n\ncxx_executable(gtest_xml_output_unittest_ test gtest)\npy_test(gtest_xml_output_unittest)\n```\n\n----------------------------------------\n\nTITLE: Linking to pybind11 Interface Library\nDESCRIPTION: This snippet demonstrates how to link an independently constructed target (created with `add_library`) to the `pybind11::module` interface library in CMake.  This provides necessary headers, Python headers/libraries, and compile definitions.  It requires CMake 3.0 or greater.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/compiling.rst#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.0)\nproject(example)\n\nfind_package(pybind11 REQUIRED)  # or add_subdirectory(pybind11)\n\nadd_library(example MODULE main.cpp)\ntarget_link_libraries(example PRIVATE pybind11::module)\nset_target_properties(example PROPERTIES PREFIX \"${PYTHON_MODULE_PREFIX}\"\n                                             SUFFIX \"${PYTHON_MODULE_EXTENSION}\")\n```\n\n----------------------------------------\n\nTITLE: Guarded Class Template for Overflow Detection in C++\nDESCRIPTION: This C++ template class, `Guarded`, is designed to wrap integer types and provide compile-time guarantees that the stored value will not exceed a specified maximum. It utilizes `static_assert` to detect potential overflows during construction and arithmetic operations. The `guardedAdd` template is used for safe addition of the max values, detecting overflows during compilation.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/doc/_posts/2015-03-02-security-advisory-and-integer-overflow-protection.md#_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <uint64_t maxN, typename T>\nclass Guarded {\n  // Wraps T (a basic integer type) and statically guarantees\n  // that the value can be no more than `maxN` and no less than\n  // zero.\n\n  static_assert(maxN <= T(kj::maxValue), \"possible overflow detected\");\n  // If maxN is not representable in type T, we can no longer\n  // guarantee no overflows.\n\npublic:\n  // ...\n\n  template <uint64_t otherMax, typename OtherT>\n  inline constexpr Guarded(const Guarded<otherMax, OtherT>& other)\n      : value(other.value) {\n    // You cannot construct a Guarded from another Guarded\n    // with a higher maximum.\n    static_assert(otherMax <= maxN, \"possible overflow detected\");\n  }\n\n  // ...\n\n  template <uint64_t otherMax, typename otherT>\n  inline constexpr Guarded<guardedAdd<maxN, otherMax>(),\n                           decltype(T() + otherT())>\n      operator+(const Guarded<otherMax, otherT>& other) const {\n    // Addition operator also computes the new maximum.\n    // (`guardedAdd` is a constexpr template that adds two\n    // constants while detecting overflow.)\n    return Guarded<guardedAdd<maxN, otherMax>(),\n                   decltype(T() + otherT())>(\n        value + other.value, unsafe);\n  }\n\n  // ...\n\nprivate:\n  T value;\n};\n```\n\n----------------------------------------\n\nTITLE: Cap'n Proto Integration (CMake)\nDESCRIPTION: This snippet handles integration with Cap'n Proto, especially when using an external installation. It searches for the Cap'n Proto package using `find_package` and then attempts to locate the `capnp` and `capnpc-c++` executables, either through environment variables or by searching common paths. It also sets the `CAPNP_INCLUDE_DIRECTORY` variable.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/c++/src/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (EXTERNAL_CAPNP)\n  # Setup CAPNP_GENERATE_CPP for compiling test schemas\n  find_package(CapnProto CONFIG QUIET)\n  if (NOT CapnProto_FOUND)\n    # Try and find the executables from an autotools-based installation\n    # Setup paths to the schema compiler for generating ${test_capnp_files}\n    if(NOT EXTERNAL_CAPNP AND NOT CAPNP_LITE)\n      set(CAPNP_EXECUTABLE $<TARGET_FILE:capnp_tool>)\n      set(CAPNPC_CXX_EXECUTABLE $<TARGET_FILE:capnpc_cpp>)\n    else()\n      # Allow paths to tools to be set with either environment variables or find_program()\n      if (NOT CAPNP_EXECUTABLE)\n          if (DEFINED ENV{CAPNP})\n            set(CAPNP_EXECUTABLE \"$ENV{CAPNP}\")\n          else()\n            find_program(CAPNP_EXECUTABLE capnp)\n          endif()\n      endif()\n\n      if(NOT CAPNPC_CXX_EXECUTABLE)\n        if (DEFINED ENV{CAPNPC_CXX})\n          set(CAPNPC_CXX_EXECUTABLE \"$ENV{CAPNPC_CXX}\")\n        else()\n          # Also search in the same directory that `capnp` was found in\n          get_filename_component(capnp_dir \"${CAPNP_EXECUTABLE}\" DIRECTORY)\n          find_program(CAPNPC_CXX_EXECUTABLE capnpc-c++ HINTS \"${capnp_dir}\")\n        endif()\n      endif()\n    endif()\n  endif()\n\n  set(CAPNP_INCLUDE_DIRECTORY \"${CMAKE_CURRENT_SOURCE_DIR}\")\n  #TODO(someday) It would be nice to use targets instead of variables in CAPNP_GENERATE_CPP macro\nendif()\n```\n\n----------------------------------------\n\nTITLE: Specifying setuptools Requirements\nDESCRIPTION: This code snippet defines the setuptools package version and SHA256 hashes to verify integrity during installation. The use of SHA256 hashes adds a layer of security, preventing the installation of potentially malicious or corrupted packages. It ensures that the correct and trusted version of setuptools is used within the retro project.\nSOURCE: https://github.com/openai/retro/blob/master/docker/linux/build_scripts/requirements.txt#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nsetuptools==40.5.0 \\\n    --hash=sha256:e329a5c458c6acb5edc2b5c4ad44280c053ba827dc82fd5e84a83e22bb05460d \\\n    --hash=sha256:2a2a200f4a760adbded23a091a00be2eca4e28efed65c6120ea275f7e89a1eab\n```\n\n----------------------------------------\n\nTITLE: Defining Cap'n Proto Test Files\nDESCRIPTION: This snippet defines the Cap'n Proto schema files used for testing. These files contain definitions for data structures and RPC interfaces used in the test suite. They ensure the library correctly handles various schema features and corner cases.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/c++/src/capnp/CMakeLists.txt#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\nif(BUILD_TESTING)\n  set(test_capnp_files\n    test.capnp\n    test-import.capnp\n    test-import2.capnp\n  )\n\n  # Add \"/capnp\" to match the path used to import the files in the test sources\n  set(CAPNPC_OUTPUT_DIR \"${CMAKE_CURRENT_BINARY_DIR}/test_capnp/capnp\")\n  include_directories(\"${CMAKE_CURRENT_BINARY_DIR}/test_capnp\")  # Note: no \"/capnp\"\n  file(MAKE_DIRECTORY \"${CAPNPC_OUTPUT_DIR}\")\n\n  capnp_generate_cpp(test_capnp_cpp_files test_capnp_h_files ${test_capnp_files})\n\n  if(CAPNP_LITE)\n    set(test_libraries capnp kj-test kj)\n  else()\n    set(test_libraries capnp-json capnp-rpc capnp capnpc kj-async kj-test kj)\n  endif()\n\n  add_executable(capnp-tests\n    common-test.c++\n    blob-test.c++\n    endian-test.c++\n    endian-fallback-test.c++\n    layout-test.c++\n    any-test.c++\n    message-test.c++\n    encoding-test.c++\n    orphan-test.c++\n    serialize-test.c++\n    serialize-packed-test.c++\n    canonicalize-test.c++\n    fuzz-test.c++\n    test-util.c++\n    ${test_capnp_cpp_files}\n    ${test_capnp_h_files}\n  )\n  target_link_libraries(capnp-tests ${test_libraries})\n  add_dependencies(check capnp-tests)\n  add_test(NAME capnp-tests-run COMMAND capnp-tests)\n\n  if(NOT CAPNP_LITE)\n    add_executable(capnp-heavy-tests\n      endian-reverse-test.c++\n      capability-test.c++\n      membrane-test.c++\n      schema-test.c++\n      schema-loader-test.c++\n      schema-parser-test.c++\n      dynamic-test.c++\n      stringify-test.c++\n      serialize-async-test.c++\n      serialize-text-test.c++\n      rpc-test.c++\n      rpc-twoparty-test.c++\n      ez-rpc-test.c++\n      compiler/lexer-test.c++\n      compiler/md5-test.c++\n      test-util.c++\n      compat/json-test.c++\n      ${test_capnp_cpp_files}\n      ${test_capnp_h_files}\n    )\n    target_link_libraries(capnp-heavy-tests ${test_libraries})\n    if(NOT MSVC)\n      set_target_properties(capnp-heavy-tests\n        PROPERTIES COMPILE_FLAGS \"-Wno-deprecated-declarations\"\n      )\n    endif()\n\n    add_dependencies(check capnp-heavy-tests)\n    add_test(NAME capnp-heavy-tests-run COMMAND capnp-heavy-tests)\n\n    add_executable(capnp-evolution-tests compiler/evolution-test.c++)\n    target_link_libraries(capnp-evolution-tests capnpc capnp kj)\n    add_dependencies(check capnp-evolution-tests)\n    add_test(NAME capnp-evolution-tests-run COMMAND capnp-evolution-tests)\n  endif()  # NOT CAPNP_LITE\nendif()  # BUILD_TESTING\n```\n\n----------------------------------------\n\nTITLE: Installing pybind11 headers and CMake config\nDESCRIPTION: This section installs the pybind11 header files to the specified include directory. It also configures and installs the CMake package configuration files, enabling other projects to easily find and use pybind11 as a dependency. It supports both installation of the headers and generation of package configuration files.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/CMakeLists.txt#_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nif (PYBIND11_INSTALL)\n  install(DIRECTORY ${PYBIND11_INCLUDE_DIR}/pybind11 DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})\n  # GNUInstallDirs \"DATADIR\" wrong here; CMake search path wants \"share\".\n  set(PYBIND11_CMAKECONFIG_INSTALL_DIR \"share/cmake/${PROJECT_NAME}\" CACHE STRING \"install path for pybind11Config.cmake\")\n\n  configure_package_config_file(tools/${PROJECT_NAME}Config.cmake.in\n                                \"${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Config.cmake\"\n                                INSTALL_DESTINATION ${PYBIND11_CMAKECONFIG_INSTALL_DIR})\n  # Remove CMAKE_SIZEOF_VOID_P from ConfigVersion.cmake since the library does\n  # not depend on architecture specific settings or libraries.\n  set(_PYBIND11_CMAKE_SIZEOF_VOID_P ${CMAKE_SIZEOF_VOID_P})\n  unset(CMAKE_SIZEOF_VOID_P)\n  write_basic_package_version_file(${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake\n                                   VERSION ${${PROJECT_NAME}_VERSION}\n                                   COMPATIBILITY AnyNewerVersion)\n  set(CMAKE_SIZEOF_VOID_P ${_PYBIND11_CMAKE_SIZEOF_VOID_P})\n  install(FILES ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Config.cmake\n                ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake\n                tools/FindPythonLibsNew.cmake\n                tools/pybind11Tools.cmake\n          DESTINATION ${PYBIND11_CMAKECONFIG_INSTALL_DIR})\n\n  if(NOT (CMAKE_VERSION VERSION_LESS 3.0))\n    if(NOT PYBIND11_EXPORT_NAME)\n      set(PYBIND11_EXPORT_NAME \"${PROJECT_NAME}Targets\")\n    endif()\n\n    install(TARGETS pybind11 module embed\n            EXPORT \"${PYBIND11_EXPORT_NAME}\")\n    if(PYBIND11_MASTER_PROJECT)\n      install(EXPORT \"${PYBIND11_EXPORT_NAME}\"\n              NAMESPACE \"${PROJECT_NAME}::\"\n              DESTINATION ${PYBIND11_CMAKECONFIG_INSTALL_DIR})\n    endif()\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Parsing INI File in C\nDESCRIPTION: This code snippet demonstrates how to use the inih library in C to parse an INI file. It defines a configuration struct and a handler function that populates the struct with values from the INI file. The `ini_parse` function is used to parse the file, and the results are printed to the console. It requires including the `stdio.h`, `stdlib.h`, `string.h`, and `ini.h` headers. The INI file name to parse is specified as \"test.ini\".\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/third-party/inih/README.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include \"../ini.h\"\n\ntypedef struct\n{\n    int version;\n    const char* name;\n    const char* email;\n} configuration;\n\nstatic int handler(void* user, const char* section, const char* name,\n                   const char* value)\n{\n    configuration* pconfig = (configuration*)user;\n\n    #define MATCH(s, n) strcmp(section, s) == 0 && strcmp(name, n) == 0\n    if (MATCH(\"protocol\", \"version\")) {\n        pconfig->version = atoi(value);\n    } else if (MATCH(\"user\", \"name\")) {\n        pconfig->name = strdup(value);\n    } else if (MATCH(\"user\", \"email\")) {\n        pconfig->email = strdup(value);\n    } else {\n        return 0;  /* unknown section/name, error */\n    }\n    return 1;\n}\n\nint main(int argc, char* argv[])\n{\n    configuration config;\n\n    if (ini_parse(\"test.ini\", handler, &config) < 0) {\n        printf(\"Can't load 'test.ini'\\n\");\n        return 1;\n    }\n    printf(\"Config loaded from 'test.ini': version=%d, name=%s, email=%s\\n\",\n        config.version, config.name, config.email);\n    return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Mozilla Public License Version 2.0\nDESCRIPTION: This snippet contains the full text of the Mozilla Public License Version 2.0 (MPLv2). It defines the terms under which the software can be used, modified, and distributed, including the rights and responsibilities of contributors and users.\nSOURCE: https://github.com/openai/retro/blob/master/LICENSES.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nMozilla Public License Version 2.0\n==================================\n\n1. Definitions\n--------------\n\n1.1. \"Contributor\"\n    means each individual or legal entity that creates, contributes to\n    the creation of, or owns Covered Software.\n\n1.2. \"Contributor Version\"\n    means the combination of the Contributions of others (if any) used\n    by a Contributor and that particular Contributor's Contribution.\n\n1.3. \"Contribution\"\n    means Covered Software of a particular Contributor.\n\n1.4. \"Covered Software\"\n    means Source Code Form to which the initial Contributor has attached\n    the notice in Exhibit A, the Executable Form of such Source Code\n    Form, and Modifications of such Source Code Form, in each case\n    including portions thereof.\n\n1.5. \"Incompatible With Secondary Licenses\"\n    means\n\n    (a) that the initial Contributor has attached the notice described\n        in Exhibit B to the Covered Software; or\n\n    (b) that the Covered Software was made available under the terms of\n        version 1.1 or earlier of the License, but not also under the\n        terms of a Secondary License.\n\n1.6. \"Executable Form\"\n    means any form of the work other than Source Code Form.\n\n1.7. \"Larger Work\"\n    means a work that combines Covered Software with other material, in \n    a separate file or files, that is not Covered Software.\n\n1.8. \"License\"\n    means this document.\n\n1.9. \"Licensable\"\n    means having the right to grant, to the maximum extent possible,\n    whether at the time of the initial grant or subsequently, any and\n    all of the rights conveyed by this License.\n\n1.10. \"Modifications\"\n    means any of the following:\n\n    (a) any file in Source Code Form that results from an addition to,\n        deletion from, or modification of the contents of Covered\n        Software; or\n\n    (b) any new file in Source Code Form that contains any Covered\n        Software.\n\n1.11. \"Patent Claims\" of a Contributor\n    means any patent claim(s), including without limitation, method,\n    process, and apparatus claims, in any patent Licensable by such\n    Contributor that would be infringed, but for the grant of the\n    License, by the making, using, selling, offering for sale, having\n    made, import, or transfer of either its Contributions or its\n    Contributor Version.\n\n1.12. \"Secondary License\"\n    means either the GNU General Public License, Version 2.0, the GNU\n    Lesser General Public License, Version 2.1, the GNU Affero General\n    Public License, Version 3.0, or any later versions of those\n    licenses.\n\n1.13. \"Source Code Form\"\n    means the form of the work preferred for making modifications.\n\n1.14. \"You\" (or \"Your\")\n    means an individual or a legal entity exercising rights under this\n    License. For legal entities, \"You\" includes any entity that\n    controls, is controlled by, or is under common control with You. For\n    purposes of this definition, \"control\" means (a) the power, direct\n    or indirect, to cause the direction or management of such entity,\n    whether by contract or otherwise, or (b) ownership of more than\n    fifty percent (50%) of the outstanding shares or beneficial\n    ownership of such entity.\n\n2. License Grants and Conditions\n--------------------------------\n\n2.1. Grants\n\nEach Contributor hereby grants You a world-wide, royalty-free,\nnon-exclusive license:\n\n(a) under intellectual property rights (other than patent or trademark)\n    Licensable by such Contributor to use, reproduce, make available,\n    modify, display, perform, distribute, and otherwise exploit its\n    Contributions, either on an unmodified basis, with Modifications, or\n    as part of a Larger Work; and\n\n(b) under Patent Claims of such Contributor to make, use, sell, offer\n    for sale, have made, import, and otherwise transfer either its\n    Contributions or its Contributor Version.\n\n2.2. Effective Date\n\nThe licenses granted in Section 2.1 with respect to any Contribution\nbecome effective for each Contribution on the date the Contributor first\ndistributes such Contribution.\n\n2.3. Limitations on Grant Scope\n\nThe licenses granted in this Section 2 are the only rights granted under\nthis License. No additional rights or licenses will be implied from the\ndistribution or licensing of Covered Software under this License.\nNotwithstanding Section 2.1(b) above, no patent license is granted by a\nContributor:\n\n(a) for any code that a Contributor has removed from Covered Software;\n    or\n\n(b) for infringements caused by: (i) Your and any other third party's\n    modifications of Covered Software, or (ii) the combination of its\n    Contributions with other software (except as part of its Contributor\n    Version); or\n\n(c) under Patent Claims infringed by Covered Software in the absence of\n    its Contributions.\n\nThis License does not grant any rights in the trademarks, service marks,\nor logos of any Contributor (except as may be necessary to comply with\nthe notice requirements in Section 3.4).\n\n2.4. Subsequent Licenses\n\nNo Contributor makes additional grants as a result of Your choice to\ndistribute the Covered Software under a subsequent version of this\nLicense (see Section 10.2) or under the terms of a Secondary License (if\npermitted under the terms of Section 3.3).\n\n2.5. Representation\n\nEach Contributor represents that the Contributor believes its\nContributions are its original creation(s) or it has sufficient rights\nto grant the rights to its Contributions conveyed by this License.\n\n2.6. Fair Use\n\nThis License is not intended to limit any rights You have under\napplicable copyright doctrines of fair use, fair dealing, or other\nequivalents.\n\n2.7. Conditions\n\nSections 3.1, 3.2, 3.3, and 3.4 are conditions of the licenses granted\nin Section 2.1.\n\n3. Responsibilities\n-------------------\n\n3.1. Distribution of Source Form\n\nAll distribution of Covered Software in Source Code Form, including any\nModifications that You create or to which You contribute, must be under\nthe terms of this License. You must inform recipients that the Source\nCode Form of the Covered Software is governed by the terms of this\nLicense, and how they can obtain a copy of this License. You may not\nattempt to alter or restrict the recipients' rights in the Source Code\nForm.\n\n3.2. Distribution of Executable Form\n\nIf You distribute Covered Software in Executable Form then:\n\n(a) such Covered Software must also be made available in Source Code\n    Form, as described in Section 3.1, and You must inform recipients of\n    the Executable Form how they can obtain a copy of such Source Code\n    Form by reasonable means in a timely manner, at a charge no more\n    than the cost of distribution to the recipient; and\n\n(b) You may distribute such Executable Form under the terms of this\n    License, or sublicense it under different terms, provided that the\n    license for the Executable Form does not attempt to limit or alter\n    the recipients' rights in the Source Code Form under this License.\n\n3.3. Distribution of a Larger Work\n\nYou may create and distribute a Larger Work under terms of Your choice,\nprovided that You also comply with the requirements of this License for\nthe Covered Software. If the Larger Work is a combination of Covered\nSoftware with a work governed by one or more Secondary Licenses, and the\nCovered Software is not Incompatible With Secondary Licenses, this\nLicense permits You to additionally distribute such Covered Software\nunder the terms of such Secondary License(s), so that the recipient of\nthe Larger Work may, at their option, further distribute the Covered\nSoftware under the terms of either this License or such Secondary\nLicense(s).\n\n3.4. Notices\n\nYou may not remove or alter the substance of any license notices\n(including copyright notices, patent notices, disclaimers of warranty,\nor limitations of liability) contained within the Source Code Form of\nthe Covered Software, except that You may alter any license notices to\nthe extent required to remedy known factual inaccuracies.\n\n3.5. Application of Additional Terms\n\nYou may choose to offer, and to charge a fee for, warranty, support,\nindemnity or liability obligations to one or more recipients of Covered\nSoftware. However, You may do so only on Your own behalf, and not on\nbehalf of any Contributor. You must make it absolutely clear that any\nsuch warranty, support, indemnity, or liability obligation is offered by\nYou alone, and You hereby agree to indemnify every Contributor for any\nliability incurred by such Contributor as a result of warranty, support,\nindemnity or liability terms You offer. You may include additional\ndisclaimers of warranty and limitations of liability specific to any\njurisdiction.\n\n4. Inability to Comply Due to Statute or Regulation\n---------------------------------------------------\n\nIf it is impossible for You to comply with any of the terms of this\nLicense with respect to some or all of the Covered Software due to\nstatute, judicial order, or regulation then You must: (a) comply with\nthe terms of this License to the maximum extent possible; and (b)\ndescribe the limitations and the code they affect. Such description must\nbe placed in a text file included with all distributions of the Covered\nSoftware under this License. Except to the extent prohibited by statute\nor regulation, such description must be sufficiently detailed for a\nrecipient of ordinary skill to be able to understand it.\n\n5. Termination\n--------------\n\n5.1. The rights granted under this License will terminate automatically\nif You fail to comply with any of its terms. However, if You become\ncompliant, then the rights granted under this License from a particular\nContributor are reinstated (a) provisionally, unless and until such\nContributor explicitly and finally terminates Your grants, and (b) on an\ngoing basis, if such Contributor fails to notify You of the\n\n```\n\n----------------------------------------\n\nTITLE: Creating Symlinks with CMake Macro\nDESCRIPTION: This macro, `CREATE_SYMLINK`, handles creating symbolic links from source to destination files, or copies the file if symlinking is not possible (e.g., on Windows without Cygwin/MSYS).  It first removes the destination file and then uses `CMAKE_COMMAND` to create the symlink or copy the file. The macro ensures that the target is built before creating symlinks.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/third-party/libpng/CMakeLists.txt#_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\nmacro(CREATE_SYMLINK SRC_FILE DEST_FILE)\n  FILE(REMOVE ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/${DEST_FILE})\n  if(WIN32 AND NOT CYGWIN AND NOT MSYS)\n    ADD_CUSTOM_COMMAND(\n        OUTPUT ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/${DEST_FILE}   ${CMAKE_CURRENT_BINARY_DIR}/${DEST_FILE}\n        COMMAND ${CMAKE_COMMAND} -E copy_if_different  \"${SRC_FILE}\" ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/${DEST_FILE}\n        COMMAND ${CMAKE_COMMAND} -E copy_if_different  \"${SRC_FILE}\" ${CMAKE_CURRENT_BINARY_DIR}/${DEST_FILE}\n        DEPENDS ${PNG_LIB_TARGETS}\n        )\n    ADD_CUSTOM_TARGET(${DEST_FILE}_COPY ALL DEPENDS ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/${DEST_FILE})\n  else(WIN32 AND NOT CYGWIN AND NOT MSYS)\n    get_filename_component(LINK_TARGET \"${SRC_FILE}\" NAME)\n    execute_process(COMMAND ${CMAKE_COMMAND} -E make_directory ${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_LIBRARY_OUTPUT_DIRECTORY})\n    execute_process(COMMAND ${CMAKE_COMMAND} -E create_symlink \"${LINK_TARGET}\" ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/${DEST_FILE} WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR})\n    execute_process(COMMAND ${CMAKE_COMMAND} -E create_symlink \"${LINK_TARGET}\" ${DEST_FILE} WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR})\n  endif(WIN32 AND NOT CYGWIN AND NOT MSYS)\nendmacro()\n```\n\n----------------------------------------\n\nTITLE: FilesInfo Structure\nDESCRIPTION: Describes the FilesInfo structure, which contains information about the files stored in the archive, including empty streams, empty files, anti-files, timestamps, names, and attributes.  The `PropertyType` switch statement handles different file properties, and the `External` flag dictates whether data is stored externally or internally.\nSOURCE: https://github.com/openai/retro/blob/master/cores/pce/deps/lzma-16.04/DOC/7zFormat.txt#_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nBYTE NID::kFilesInfo;  (0x05)\nUINT64 NumFiles\n\nfor (;;)\n{\n  BYTE PropertyType;\n  if (aType == 0)\n    break;\n\n  UINT64 Size;\n\n  switch(PropertyType)\n  {\n    kEmptyStream:   (0x0E)\n      for(NumFiles)\n        BIT IsEmptyStream\n\n    kEmptyFile:     (0x0F)\n      for(EmptyStreams)\n        BIT IsEmptyFile\n\n    kAnti:          (0x10)\n      for(EmptyStreams)\n        BIT IsAntiFile\n    \n    case kCTime: (0x12)\n    case kATime: (0x13)\n    case kMTime: (0x14)\n      BYTE AllAreDefined\n      if (AllAreDefined == 0)\n      {\n        for(NumFiles)\n          BIT TimeDefined\n      }\n      BYTE External;\n      if(External != 0)\n        UINT64 DataIndex\n      []\n      for(Definded Items)\n        UINT64 Time\n      []\n    \n    kNames:     (0x11)\n      BYTE External;\n      if(External != 0)\n        UINT64 DataIndex\n      []\n      for(Files)\n      {\n        wchar_t Names[NameSize];\n        wchar_t 0;\n      }\n      []\n\n    kAttributes:  (0x15)\n      BYTE AllAreDefined\n      if (AllAreDefined == 0)\n      {\n        for(NumFiles)\n          BIT AttributesAreDefined\n      }\n      BYTE External;\n      if(External != 0)\n        UINT64 DataIndex\n      []\n      for(Definded Attributes)\n        UINT32 Attributes\n      []\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Package Requirements with Hashes\nDESCRIPTION: This snippet shows how to specify Python package dependencies along with version numbers and SHA256 hashes using pip's requirements file format. This allows for verifying the integrity of the downloaded packages and ensures that the correct versions are installed.\nSOURCE: https://github.com/openai/retro/blob/master/docker/linux/build_scripts/py36-requirements.txt#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ncertifi==2018.10.15 \\\n    --hash=sha256:339dc09518b07e2fa7eda5450740925974815557727d6bd35d319c1524a04a4c \\\n    --hash=sha256:6d58c986d22b038c8c0df30d639f23a3e6d172a05c3583e766f4c0b785c0986a\n```\n\nLANGUAGE: Python\nCODE:\n```\nauditwheel==1.9.0 \\\n    --hash=sha256:daa496bb307012502dd70ba6116b14e28849a30e93b290fb403e83b4926c8918 \\\n    --hash=sha256:fe8cbf74d16e7d1a89fd96b689f8e16f196edfb66cc98eb8a345bc03e28fed63\n```\n\nLANGUAGE: Python\nCODE:\n```\npyelftools==0.25 \\\n    --hash=sha256:1ec62792b31d9d4e5399a686a515a31091be84e307c4680fd3627121500a1be7\n```\n\nLANGUAGE: Python\nCODE:\n```\ntyping==3.6.6 \\\n    --hash=sha256:a4c8473ce11a65999c8f59cb093e70686b6c84c98df58c1dae9b3b196089858a \\\n    --hash=sha256:57dcf675a99b74d64dacf6fba08fb17cf7e3d5fdff53d4a30ea2a5e7e52543d4 \\\n    --hash=sha256:4027c5f6127a6267a435201981ba156de91ad0d1d98e9ddc2aa173453453492d\n```\n\n----------------------------------------\n\nTITLE: Setting Man Pages Variable in CMake\nDESCRIPTION: This CMake snippet sets a variable `MAN_PAGES` that lists all the man pages to be processed. It includes various zip-related man pages, such as `zip_add.3` and `zip_close.3`, and utilities like `zipcmp.1` and `zipmerge.1`.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/libzip/man/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nSET(MAN_PAGES\n  ZIP_SOURCE_GET_ARGS.3\n  libzip.3\n  zip_add.3\n  zip_add_dir.3\n  zip_close.3\n  zip_delete.3\n  zip_dir_add.3\n  zip_discard.3\n  zip_error_clear.3\n  zip_error_code_system.3\n  zip_error_code_zip.3\n  zip_error_fini.3\n  zip_error_get.3\n  zip_error_get_sys_type.3\n  zip_error_init.3\n  zip_error_set.3\n  zip_error_strerror.3\n  zip_error_system_type.3\n  zip_error_to_data.3\n  zip_error_to_str.3\n  zip_errors.3\n  zip_fclose.3\n  zip_fdopen.3\n  zip_file_add.3\n  zip_file_extra_field_delete.3\n  zip_file_extra_field_get.3\n  zip_file_extra_field_set.3\n  zip_file_extra_fields_count.3\n  zip_file_get_comment.3\n  zip_file_get_error.3\n  zip_file_get_external_attributes.3\n  zip_file_rename.3\n  zip_file_set_comment.3\n  zip_file_set_encryption.3\n  zip_file_set_external_attributes.3\n  zip_file_set_mtime.3\n  zip_file_strerror.3\n  zip_fopen.3\n  zip_fopen_encrypted.3\n  zip_fread.3\n  zip_fseek.3\n  zip_ftell.3\n  zip_get_archive_comment.3\n  zip_get_archive_flag.3\n  zip_get_error.3\n  zip_get_file_comment.3\n  zip_get_name.3\n  zip_get_num_entries.3\n  zip_get_num_files.3\n  zip_libzip_version.3\n  zip_name_locate.3\n  zip_open.3\n  zip_register_progress_callback.3\n  zip_register_progress_callback_with_state.3\n  zip_rename.3\n  zip_set_archive_comment.3\n  zip_set_archive_flag.3\n  zip_set_default_password.3\n  zip_set_file_comment.3\n  zip_set_file_compression.3\n  zip_source.3\n  zip_source_begin_write.3\n  zip_source_buffer.3\n  zip_source_buffer_fragment.3\n  zip_source_close.3\n  zip_source_commit_write.3\n  zip_source_error.3\n  zip_source_file.3\n  zip_source_filep.3\n  zip_source_free.3\n  zip_source_function.3\n  zip_source_is_deleted.3\n  zip_source_keep.3\n  zip_source_make_command_bitmap.3\n  zip_source_open.3\n  zip_source_read.3\n  zip_source_rollback_write.3\n  zip_source_seek.3\n  zip_source_seek_compute_offset.3\n  zip_source_seek_write.3\n  zip_source_stat.3\n  zip_source_tell.3\n  zip_source_tell_write.3\n  zip_source_win32a.3\n  zip_source_win32handle.3\n  zip_source_win32w.3\n  zip_source_write.3\n  zip_source_zip.3\n  zip_stat.3\n  zip_stat_init.3\n  zip_unchange.3\n  zip_unchange_all.3\n  zip_unchange_archive.3\n  zipcmp.1\n  zipmerge.1\n  ziptool.1\n)\n```\n\n----------------------------------------\n\nTITLE: Defining a filesystem interface with a singleton-ish design in Cap'n Proto\nDESCRIPTION: This code shows an alternative file system interface design that merges the `File` and `Directory` interfaces into a single `Filesystem` interface. All operations take a path as an argument, avoiding multiple round trips for file access in high-latency scenarios. It addresses the latency but at the expense of object-oriented elegance and introduces the issues associated with singleton patterns. It also necessitates path string manipulation.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/doc/rpc.md#_snippet_2\n\nLANGUAGE: capnp\nCODE:\n```\n# A sad, singleton-ish interface.\n\ninterface Filesystem {\n  list @0 (path :Text) -> (list :List(Text));\n  create @1 (path :Text, data :Data);\n  delete @2 (path :Text);\n  link @3 (path :Text, target :Text);\n\n  fileSize @4 (path :Text) -> (size: UInt64);\n  read @5 (path :Text, startAt :UInt64, amount :UInt64)\n       -> (data :Data);\n  readAll @6 (path :Text) -> (data: Data);\n  write @7 (path :Text, startAt :UInt64, data :Data);\n  truncate @8 (path :Text, size :UInt64);\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Constructors API C++\nDESCRIPTION: This example demonstrates the deprecation of the placement-new custom constructors and the introduction of the new py::init() API using factory functions. The new approach improves type safety by preventing accidental calls with incompatible types or multiple initializations.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/upgrade.rst#_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\n// old -- deprecated (runtime warning shown only in debug mode)\npy::class<Foo>(m, \"Foo\")\n    .def(\"__init__\", [](Foo &self, ...) {\n        new (&self) Foo(...); // uses placement-new\n    });\n\n// new\npy::class<Foo>(m, \"Foo\")\n    .def(py::init([](...) { // Note: no `self` argument\n        return new Foo(...); // return by raw pointer\n        // or: return std::make_unique<Foo>(...); // return by holder\n        // or: return Foo(...); // return by value (move constructor)\n    }));\n```\n\n----------------------------------------\n\nTITLE: Calculate Huffman Code Values - C-like pseudocode\nDESCRIPTION: This code calculates Huffman code values from bit lengths for each symbol in an alphabet, used within the DEFLATE compression algorithm. It iterates through code lengths, determines base values for each length, and assigns consecutive code values to symbols of the same length. bl_count[N] represents the number of codes of length N, next_code[bits] stores the smallest code value for each bit length, and tree[n].Len and tree[n].Code hold the bit length and calculated code for each symbol, respectively. MAX_BITS represents the maximum allowed bit length for codes and max_code represents the index of the last symbol in the tree.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/third-party/zlib/doc/rfc1951.txt#_snippet_0\n\nLANGUAGE: pseudocode\nCODE:\n```\ncode = 0;\nbl_count[0] = 0;\nfor (bits = 1; bits <= MAX_BITS; bits++) {\n    code = (code + bl_count[bits-1]) << 1;\n    next_code[bits] = code;\n}\n\nfor (n = 0;  n <= max_code; n++) {\n    len = tree[n].Len;\n    if (len != 0) {\n        tree[n].Code = next_code[len];\n        next_code[len]++;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: LIBASND License Redistribution Terms\nDESCRIPTION: This snippet outlines the redistribution terms for the LIBASND library used in Gamecube & Wii ports. It details the requirements for redistributing the library in both source and binary forms, emphasizing the need to retain copyright notices and disclaimers.  It also prohibits the use of contributors' names for endorsement without prior written permission.\nSOURCE: https://github.com/openai/retro/blob/master/cores/genesis/LICENSE.txt#_snippet_2\n\nLANGUAGE: Text\nCODE:\n```\nCopyright (c) 2008 Hermes <www.entuwii.net>\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification, are \npermitted provided that the following conditions are met:\n\n- Redistributions of source code must retain the above copyright notice, this list of \n  conditions and the following disclaimer. \n- Redistributions in binary form must reproduce the above copyright notice, this list \n  of conditions and the following disclaimer in the documentation and/or other \n  materials provided with the distribution. \n- The names of the contributors may not be used to endorse or promote products derived \n  from this software without specific prior written permission. \n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY \nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF \nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL \nTHE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, \nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, \nPROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS \nINTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, \nSTRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF \nTHE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n```\n\n----------------------------------------\n\nTITLE: Defining CREATE_LIBTOOL_FILE Macro CMake\nDESCRIPTION: Defines a macro to create a libtool file. This macro retrieves various target properties and writes them to a .la file, which is used by libtool for managing libraries.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/libzip/lib/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nMACRO(CREATE_LIBTOOL_FILE _target _install_DIR)\n  GET_TARGET_PROPERTY(_target_location ${_target} LOCATION)\n  GET_TARGET_PROPERTY_WITH_DEFAULT(_target_static_lib ${_target} STATIC_LIB \"\")\n  GET_TARGET_PROPERTY_WITH_DEFAULT(_target_dependency_libs ${_target} LT_DEPENDENCY_LIBS \"\")\n  GET_TARGET_PROPERTY_WITH_DEFAULT(_target_current ${_target} LT_VERSION_CURRENT 4)\n  GET_TARGET_PROPERTY_WITH_DEFAULT(_target_revision ${_target} LT_VERSION_REVISION 0)\n  GET_TARGET_PROPERTY_WITH_DEFAULT(_target_age ${_target} LT_VERSION_AGE 0)\n  GET_TARGET_PROPERTY_WITH_DEFAULT(_target_installed ${_target} LT_INSTALLED yes)\n  GET_TARGET_PROPERTY_WITH_DEFAULT(_target_shouldnotlink ${_target} LT_SHOULDNOTLINK yes)\n  GET_TARGET_PROPERTY_WITH_DEFAULT(_target_dlopen ${_target} LT_DLOPEN \"\")\n  GET_TARGET_PROPERTY_WITH_DEFAULT(_target_dlpreopen ${_target} LT_DLPREOPEN \"\")\n  GET_FILENAME_COMPONENT(_laname ${_target_location} NAME_WE)\n  GET_FILENAME_COMPONENT(_soname ${_target_location} NAME)\n  SET(_laname ${_laname}.la)\n  FILE(WRITE ${_laname} \"# ${_laname} - a libtool library file, generated by cmake \\n\")\n  FILE(APPEND ${_laname} \"# The name that we can dlopen(3).\\n\")\n  FILE(APPEND ${_laname} \"dlname='${_soname}'\\n\")\n  FILE(APPEND ${_laname} \"# Names of this library\\n\")\n  FILE(APPEND ${_laname} \"library_names='${_soname}.${_target_current}.${_target_age}.${_target_revision} ${_soname}.${_target_current} ${_soname}'\\n\")\n  FILE(APPEND ${_laname} \"# The name of the static archive\\n\")\n  FILE(APPEND ${_laname} \"old_library='${_target_static_lib}'\\n\")\n  FILE(APPEND ${_laname} \"# Libraries that this one depends upon.\\n\")\n  FILE(APPEND ${_laname} \"dependency_libs='${_target_dependency_libs}'\\n\")\n  FILE(APPEND ${_laname} \"# Version information.\\n\")\n  FILE(APPEND ${_laname} \"current=${_target_current}\\n\")\n  FILE(APPEND ${_laname} \"age=${_target_age}\\n\")\n  FILE(APPEND ${_laname} \"revision=${_target_revision}\\n\")\n  FILE(APPEND ${_laname} \"# Is this an already installed library?\\n\")\n  FILE(APPEND ${_laname} \"installed=${_target_installed}\\n\")\n  FILE(APPEND ${_laname} \"# Should we warn about portability when linking against -modules?\\n\")\n  FILE(APPEND ${_laname} \"shouldnotlink=${_target_shouldnotlink}\\n\")\n  FILE(APPEND ${_laname} \"# Files to dlopen/dlpreopen\\n\")\n  FILE(APPEND ${_laname} \"dlopen='${_target_dlopen}'\\n\")\n  FILE(APPEND ${_laname} \"dlpreopen='${_target_dlpreopen}'\\n\")\n  FILE(APPEND ${_laname} \"# Directory that this library needs to be installed in:\\n\")\n  FILE(APPEND ${_laname} \"libdir='${CMAKE_INSTALL_PREFIX}/${_install_DIR}'\\n\")\n  INSTALL( FILES ${_laname} ${_soname} DESTINATION ${CMAKE_INSTALL_PREFIX}${_install_DIR})\nENDMACRO()\n```\n\n----------------------------------------\n\nTITLE: Parsing INI File in C++\nDESCRIPTION: This C++ code snippet demonstrates how to use the INIReader class (from INIReader.h) to parse an INI file. It reads the \"test.ini\" file, retrieves values for various keys, and prints them to the console using `std::cout`. The snippet uses the `INIReader.Get...()` methods to retrieve integer, string, real (double), and boolean values, providing default values if the keys are not found. This example includes iostream and INIReader.h.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/third-party/inih/README.md#_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <iostream>\n#include \"INIReader.h\"\n\nint main()\n{\n    INIReader reader(\"../examples/test.ini\");\n\n    if (reader.ParseError() < 0) {\n        std::cout << \"Can't load 'test.ini'\\n\";\n        return 1;\n    }\n    std::cout << \"Config loaded from 'test.ini': version=\"\n              << reader.GetInteger(\"protocol\", \"version\", -1) << \", name=\"\n              << reader.Get(\"user\", \"name\", \"UNKNOWN\") << \", email=\"\n              << reader.Get(\"user\", \"email\", \"UNKNOWN\") << \", pi=\"\n              << reader.GetReal(\"user\", \"pi\", -1) << \", active=\"\n              << reader.GetBoolean(\"user\", \"active\", true) << \"\\n\";\n    return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating interface libraries for pybind11\nDESCRIPTION: This code block, which only executes with CMake versions 3.0 or greater, defines interface libraries for pybind11, module, and embed. These interface libraries expose the necessary include directories, compile options, and link libraries to downstream projects that use pybind11. They facilitate proper linking and compilation of Python modules.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT (CMAKE_VERSION VERSION_LESS 3.0))  # CMake >= 3.0\n  # Build an interface library target:\n  add_library(pybind11 INTERFACE)\n  add_library(pybind11::pybind11 ALIAS pybind11)  # to match exported target\n  target_include_directories(pybind11 INTERFACE $<BUILD_INTERFACE:${PYBIND11_INCLUDE_DIR}>\n                                                $<BUILD_INTERFACE:${PYTHON_INCLUDE_DIRS}>\n                                                $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>)\n  target_compile_options(pybind11 INTERFACE $<BUILD_INTERFACE:${PYBIND11_CPP_STANDARD}>)\n\n  add_library(module INTERFACE)\n  add_library(pybind11::module ALIAS module)\n  if(NOT MSVC)\n    target_compile_options(module INTERFACE -fvisibility=hidden)\n  endif()\n  target_link_libraries(module INTERFACE pybind11::pybind11)\n  if(WIN32 OR CYGWIN)\n    target_link_libraries(module INTERFACE $<BUILD_INTERFACE:${PYTHON_LIBRARIES}>)\n  elseif(APPLE)\n    target_link_libraries(module INTERFACE \"-undefined dynamic_lookup\")\n  endif()\n\n  add_library(embed INTERFACE)\n  add_library(pybind11::embed ALIAS embed)\n  target_link_libraries(embed INTERFACE pybind11::pybind11 $<BUILD_INTERFACE:${PYTHON_LIBRARIES}>)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Custom Type Caster for inty in C++\nDESCRIPTION: Implements a custom type caster for the `inty` struct using `pybind11::detail::type_caster<inty>`. This involves defining the `load` and `cast` methods for converting between Python objects and the C++ `inty` type. The `load` method handles Python to C++ conversion, and the `cast` method handles C++ to Python conversion.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/cast/custom.rst#_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nnamespace pybind11 { namespace detail {\n    template <> struct type_caster<inty> {\n    public:\n        /**\n         * This macro establishes the name 'inty' in\n         * function signatures and declares a local variable\n         * 'value' of type inty\n         */\n        PYBIND11_TYPE_CASTER(inty, _(\"inty\"));\n\n        /**\n         * Conversion part 1 (Python->C++): convert a PyObject into a inty\n         * instance or return false upon failure. The second argument\n         * indicates whether implicit conversions should be applied.\n         */\n        bool load(handle src, bool) {\n            /* Extract PyObject from handle */\n            PyObject *source = src.ptr();\n            /* Try converting into a Python integer value */\n            PyObject *tmp = PyNumber_Long(source);\n            if (!tmp)\n                return false;\n            /* Now try to convert into a C++ int */\n            value.long_value = PyLong_AsLong(tmp);\n            Py_DECREF(tmp);\n            /* Ensure return code was OK (to avoid out-of-range errors etc) */\n            return !(value.long_value == -1 && !PyErr_Occurred());\n        }\n\n        /**\n         * Conversion part 2 (C++ -> Python): convert an inty instance into\n         * a Python object. The second and third arguments are used to\n         * indicate the return value policy and parent object (for\n         * ``return_value_policy::reference_internal``) and are generally\n         * ignored by implicit casters.\n         */\n        static handle cast(inty src, return_value_policy /* policy */, handle /* parent */) {\n            return PyLong_FromLong(src.long_value);\n        }\n    };\n}} // namespace pybind11::detail\n```\n\n----------------------------------------\n\nTITLE: Generated C++ Code for the Directory Interface\nDESCRIPTION: This C++ code is generated from the Cap'n Proto interface. It includes structures and classes representing the Directory, Client, Server, and related parameters/results for each method (create, open, remove).  It outlines the basic structure of the generated code, including the Client and Server classes with their respective methods.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/doc/cxxrpc.md#_snippet_5\n\nLANGUAGE: c++\nCODE:\n```\nstruct Directory {\n  Directory() = delete;\n\n  class Client;\n  class Server;\n\n  struct CreateParams;\n  struct CreateResults;\n  struct OpenParams;\n  struct OpenResults;\n  struct RemoveParams;\n  struct RemoveResults;\n  // Each of these is equivalent to what would be generated for\n  // a Cap'n Proto struct with one field for each parameter /\n  // result.\n};\n\nclass Directory::Client\n    : public virtual capnp::Capability::Client {\npublic:\n  Client(std::nullptr_t);\n  Client(kj::Own<Directory::Server> server);\n  Client(kj::Promise<Client> promise);\n  Client(kj::Exception exception);\n\n  capnp::Request<CreateParams, CreateResults> createRequest();\n  capnp::Request<OpenParams, OpenResults> openRequest();\n  capnp::Request<RemoveParams, RemoveResults> removeRequest();\n};\n\nclass Directory::Server\n    : public virtual capnp::Capability::Server {\nprotected:\n  typedef capnp::CallContext<CreateParams, CreateResults> CreateContext;\n  typedef capnp::CallContext<OpenParams, OpenResults> OpenContext;\n  typedef capnp::CallContext<RemoveParams, RemoveResults> RemoveContext;\n  // Convenience typedefs.\n\n  virtual kj::Promise<void> create(CreateContext context);\n  virtual kj::Promise<void> open(OpenContext context);\n  virtual kj::Promise<void> remove(RemoveContext context);\n  // Methods for you to implement.\n};\n```\n\n----------------------------------------\n\nTITLE: Defining a file system interface in Cap'n Proto\nDESCRIPTION: This code snippet defines a clean, object-oriented interface for interacting with a file system in Cap'n Proto. It includes interfaces for `Node`, `Directory`, and `File`, each with methods for listing entries, creating, opening, deleting, linking files, reading, writing, and truncating data. This structure allows for a clear separation of concerns and is designed for low latency operations due to promise pipelining.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/doc/rpc.md#_snippet_0\n\nLANGUAGE: capnp\nCODE:\n```\n# A happy, object-oriented interface!\n\ninterface Node {}\n\ninterface Directory extends(Node) {\n  list @0 () -> (list: List(Entry));\n  struct Entry {\n    name @0 :Text;\n    file @1 :Node;\n  }\n\n  create @1 (name :Text) -> (node :Node);\n  open @2 (name :Text) -> (node :Node);\n  delete @3 (name :Text);\n  link @4 (name :Text, node :Node);\n}\n\ninterface File extends(Node) {\n  size @0 () -> (size: UInt64);\n  read @1 (startAt :UInt64, amount :UInt64) -> (data: Data);\n  write @2 (startAt :UInt64, data :Data);\n  truncate @3 (size :UInt64);\n}\n```\n\n----------------------------------------\n\nTITLE: LZMA Length Decoder Class Definition in C++\nDESCRIPTION: This code defines the `CLenDecoder` class, which is responsible for decoding the length of a match in LZMA. It includes probability variables (`Choice`, `Choice2`) and bit tree decoders (`LowCoder`, `MidCoder`, `HighCoder`) for different length ranges. The `Init` method initializes these variables, and the `Decode` method decodes the length based on the input range decoder and position state.\nSOURCE: https://github.com/openai/retro/blob/master/cores/genesis/core/cd_hw/libchdr/deps/lzma/DOC/lzma-specification.txt#_snippet_18\n\nLANGUAGE: cpp\nCODE:\n```\nclass CLenDecoder\n{\n  CProb Choice;\n  CProb Choice2;\n  CBitTreeDecoder<3> LowCoder[1 << kNumPosBitsMax];\n  CBitTreeDecoder<3> MidCoder[1 << kNumPosBitsMax];\n  CBitTreeDecoder<8> HighCoder;\n\npublic:\n\n  void Init()\n  {\n    Choice = PROB_INIT_VAL;\n    Choice2 = PROB_INIT_VAL;\n    HighCoder.Init();\n    for (unsigned i = 0; i < (1 << kNumPosBitsMax); i++)\n    {\n      LowCoder[i].Init();\n      MidCoder[i].Init();\n    }\n  }\n\n  unsigned Decode(CRangeDecoder *rc, unsigned posState)\n  {\n    if (rc->DecodeBit(&Choice) == 0)\n      return LowCoder[posState].Decode(rc);\n    if (rc->DecodeBit(&Choice2) == 0)\n      return 8 + MidCoder[posState].Decode(rc);\n    return 16 + HighCoder.Decode(rc);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Decoding a Literal in C++\nDESCRIPTION: The `DecodeLiteral` function decodes a single literal. It determines the previous byte, calculates `litState` based on the output window position and the previous byte, selects the appropriate probabilities from `LitProbs`, and decodes the literal bit by bit using the `RangeDec.DecodeBit()` function. If `state` is greater than or equal to 7, it also uses a match byte from the output stream.\nSOURCE: https://github.com/openai/retro/blob/master/cores/genesis/core/cd_hw/libchdr/deps/lzma/DOC/lzma-specification.txt#_snippet_15\n\nLANGUAGE: C++\nCODE:\n```\nvoid DecodeLiteral(unsigned state, UInt32 rep0)\n  {\n    unsigned prevByte = 0;\n    if (!OutWindow.IsEmpty())\n      prevByte = OutWindow.GetByte(1);\n    \n    unsigned symbol = 1;\n    unsigned litState = ((OutWindow.TotalPos & ((1 << lp) - 1)) << lc) + (prevByte >> (8 - lc));\n    CProb *probs = &LitProbs[(UInt32)0x300 * litState];\n    \n    if (state >= 7)\n    {\n      unsigned matchByte = OutWindow.GetByte(rep0 + 1);\n      do\n      {\n        unsigned matchBit = (matchByte >> 7) & 1;\n        matchByte <<= 1;\n        unsigned bit = RangeDec.DecodeBit(&probs[((1 + matchBit) << 8) + symbol]);\n        symbol = (symbol << 1) | bit;\n        if (matchBit != bit)\n          break;\n      }\n      while (symbol < 0x100);\n    }\n    while (symbol < 0x100)\n      symbol = (symbol << 1) | RangeDec.DecodeBit(&probs[symbol]);\n    OutWindow.PutByte((Byte)(symbol - 0x100));\n  }\n```\n\n----------------------------------------\n\nTITLE: ASSERT_DEATH() Statement Examples (C++)\nDESCRIPTION: This example illustrates various ways to use `ASSERT_DEATH()` to verify that a statement causes a process to terminate. The statement can be a simple function call, a complex expression, or a compound statement. The second parameter is the regular expression that matches the error message output to stderr before the process terminates.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/FAQ.md#_snippet_22\n\nLANGUAGE: cpp\nCODE:\n```\n// A death test can be a simple function call.\nTEST(MyDeathTest, FunctionCall) {\n  ASSERT_DEATH(Xyz(5), \"Xyz failed\");\n}\n\n// Or a complex expression that references variables and functions.\nTEST(MyDeathTest, ComplexExpression) {\n  const bool c = Condition();\n  ASSERT_DEATH((c ? Func1(0) : object2.Method(\"test\")), \\\n               \"(Func1|Method) failed\");\n}\n\n// Death assertions can be used any where in a function. In\n// particular, they can be inside a loop.\nTEST(MyDeathTest, InsideLoop) {\n  // Verifies that Foo(0), Foo(1), ..., and Foo(4) all die.\n  for (int i = 0; i < 5; i++) {\n    EXPECT_DEATH_M(Foo(i), \"Foo has \\\\d+ errors\",\n                   ::testing::Message() << \"where i is \" << i);\n  }\n}\n\n// A death assertion can contain a compound statement.\nTEST(MyDeathTest, CompoundStatement) {\n  // Verifies that at lease one of Bar(0), Bar(1), ..., and\n  // Bar(4) dies.\n  ASSERT_DEATH({\n    for (int i = 0; i < 5; i++) {\n      Bar(i);\n    }\n  },\n  \"Bar has \\\\d+ errors\");}\n```\n\n----------------------------------------\n\nTITLE: Setting LIBZIP_SOURCES CMake\nDESCRIPTION: Sets the list of source files for the libzip library.  This includes all the C source files that make up the library's core functionality.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/libzip/lib/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nSET(LIBZIP_SOURCES\n  gladman-fcrypt.c\n  zip_add.c\n  zip_add_dir.c\n  zip_add_entry.c\n  zip_algorithm_bzip2.c\n  zip_algorithm_deflate.c\n  zip_buffer.c\n  zip_close.c\n  zip_delete.c\n  zip_dir_add.c\n  zip_dirent.c\n  zip_discard.c\n  zip_entry.c\n  zip_err_str.c\n  zip_error.c\n  zip_error_clear.c\n  zip_error_get.c\n  zip_error_get_sys_type.c\n  zip_error_strerror.c\n  zip_error_to_str.c\n  zip_extra_field.c\n  zip_extra_field_api.c\n  zip_fclose.c\n  zip_fdopen.c\n  zip_file_add.c\n  zip_file_error_clear.c\n  zip_file_error_get.c\n  zip_file_get_comment.c\n  zip_file_get_external_attributes.c\n  zip_file_get_offset.c\n  zip_file_rename.c\n  zip_file_replace.c\n  zip_file_set_comment.c\n  zip_file_set_encryption.c\n  zip_file_set_external_attributes.c\n  zip_file_set_mtime.c\n  zip_file_strerror.c\n  zip_filerange_crc.c\n  zip_fopen.c\n  zip_fopen_encrypted.c\n  zip_fopen_index.c\n  zip_fopen_index_encrypted.c\n  zip_fread.c\n  zip_fseek.c\n  zip_ftell.c\n  zip_get_archive_comment.c\n  zip_get_archive_flag.c\n  zip_get_encryption_implementation.c\n  zip_get_file_comment.c\n  zip_get_name.c\n  zip_get_num_entries.c\n  zip_get_num_files.c\n  zip_hash.c\n  zip_io_util.c\n  zip_libzip_version.c\n  zip_memdup.c\n  zip_name_locate.c\n  zip_new.c\n  zip_open.c\n  zip_progress.c\n  zip_rename.c\n  zip_replace.c\n  zip_set_archive_comment.c\n  zip_set_archive_flag.c\n  zip_set_default_password.c\n  zip_set_file_comment.c\n  zip_set_file_compression.c\n  zip_set_name.c\n  zip_source_begin_write.c\n  zip_source_begin_write_cloning.c\n  zip_source_buffer.c\n  zip_source_call.c\n  zip_source_close.c\n  zip_source_commit_write.c\n  zip_source_compress.c\n  zip_source_crc.c\n  zip_source_error.c\n  zip_source_filep.c\n  zip_source_free.c\n  zip_source_function.c\n  zip_source_get_compression_flags.c\n  zip_source_is_deleted.c\n  zip_source_layered.c\n  zip_source_open.c\n  zip_source_pkware.c\n  zip_source_read.c\n  zip_source_remove.c\n  zip_source_rollback_write.c\n  zip_source_seek.c\n  zip_source_seek_write.c\n  zip_source_stat.c\n  zip_source_supports.c\n  zip_source_tell.c\n  zip_source_tell_write.c\n  zip_source_window.c\n  zip_source_winzip_aes_decode.c\n  zip_source_winzip_aes_encode.c\n  zip_source_write.c\n  zip_source_zip.c\n  zip_source_zip_new.c\n  zip_stat.c\n  zip_stat_index.c\n  zip_stat_init.c\n  zip_strerror.c\n  zip_string.c\n  zip_unchange.c\n  zip_unchange_all.c\n  zip_unchange_archive.c\n  zip_unchange_data.c\n  zip_utf-8.c\n)\n```\n\n----------------------------------------\n\nTITLE: Boilerplate main() Function\nDESCRIPTION: This snippet presents a boilerplate `main()` function for Google Test, including necessary headers, a sample test fixture, and tests. It demonstrates how to initialize Google Test and run all tests using `::testing::InitGoogleTest()` and `RUN_ALL_TESTS()`.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/Primer.md#_snippet_7\n\nLANGUAGE: cpp\nCODE:\n```\n#include \"this/package/foo.h\"\n#include \"gtest/gtest.h\"\n\nnamespace {\n\n// The fixture for testing class Foo.\nclass FooTest : public ::testing::Test {\n protected:\n  // You can remove any or all of the following functions if its body\n  // is empty.\n\n  FooTest() {\n    // You can do set-up work for each test here.\n  }\n\n  virtual ~FooTest() {\n    // You can do clean-up work that doesn't throw exceptions here.\n  }\n\n  // If the constructor and destructor are not enough for setting up\n  // and cleaning up each test, you can define the following methods:\n\n  virtual void SetUp() {\n    // Code here will be called immediately after the constructor (right\n    // before each test).\n  }\n\n  virtual void TearDown() {\n    // Code here will be called immediately after each test (right\n    // before the destructor).\n  }\n\n  // Objects declared here can be used by all tests in the test case for Foo.\n};\n\n// Tests that the Foo::Bar() method does Abc.\nTEST_F(FooTest, MethodBarDoesAbc) {\n  const string input_filepath = \"this/package/testdata/myinputfile.dat\";\n  const string output_filepath = \"this/package/testdata/myoutputfile.dat\";\n  Foo f;\n  EXPECT_EQ(0, f.Bar(input_filepath, output_filepath));\n}\n\n// Tests that Foo does Xyz.\nTEST_F(FooTest, DoesXyz) {\n  // Exercises the Xyz feature of Foo.\n}\n\n}  // namespace\n\nint main(int argc, char **argv) {\n  ::testing::InitGoogleTest(&argc, argv);\n  return RUN_ALL_TESTS();\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for Function Existence in CMake\nDESCRIPTION: This snippet uses the `CHECK_FUNCTION_EXISTS` macro to check for the existence of various C functions.  For each function, it sets a CMake variable (e.g., `HAVE__CHMOD`) to 1 if the function exists, and 0 otherwise.  These variables can then be used to conditionally compile code.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/libzip/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nCHECK_FUNCTION_EXISTS(_chmod HAVE__CHMOD)\nCHECK_FUNCTION_EXISTS(_close HAVE__CLOSE)\nCHECK_FUNCTION_EXISTS(_dup HAVE__DUP)\nCHECK_FUNCTION_EXISTS(_fdopen HAVE__FDOPEN)\nCHECK_FUNCTION_EXISTS(_fileno HAVE__FILENO)\nCHECK_FUNCTION_EXISTS(_open HAVE__OPEN)\nCHECK_FUNCTION_EXISTS(_setmode HAVE__SETMODE)\nCHECK_FUNCTION_EXISTS(_snprintf HAVE__SNPRINTF)\nCHECK_FUNCTION_EXISTS(_strdup HAVE__STRDUP)\nCHECK_FUNCTION_EXISTS(_stricmp HAVE__STRICMP)\nCHECK_FUNCTION_EXISTS(_strtoi64 HAVE__STRTOI64)\nCHECK_FUNCTION_EXISTS(_strtoui64 HAVE__STRTOUI64)\nCHECK_FUNCTION_EXISTS(_umask HAVE__UMASK)\nCHECK_FUNCTION_EXISTS(_unlink HAVE__UNLINK)\nCHECK_FUNCTION_EXISTS(clonefile HAVE_CLONEFILE)\nCHECK_FUNCTION_EXISTS(explict_bzero HAVE_EXPLICIT_BZERO)\nCHECK_FUNCTION_EXISTS(explicit_memset HAVE_EXPLICIT_MEMSET)\nCHECK_FUNCTION_EXISTS(fileno HAVE_FILENO)\nCHECK_FUNCTION_EXISTS(fseeko HAVE_FSEEKO)\nCHECK_FUNCTION_EXISTS(ftello HAVE_FTELLO)\nCHECK_FUNCTION_EXISTS(getprogname HAVE_GETPROGNAME)\nCHECK_FUNCTION_EXISTS(open HAVE_OPEN)\nCHECK_FUNCTION_EXISTS(mkstemp HAVE_MKSTEMP)\nCHECK_FUNCTION_EXISTS(setmode HAVE_SETMODE)\nCHECK_FUNCTION_EXISTS(snprintf HAVE_SNPRINTF)\nCHECK_FUNCTION_EXISTS(strcasecmp HAVE_STRCASECMP)\nCHECK_FUNCTION_EXISTS(strdup HAVE_STRDUP)\nCHECK_FUNCTION_EXISTS(stricmp HAVE_STRICMP)\nCHECK_FUNCTION_EXISTS(strtoll HAVE_STRTOLL)\nCHECK_FUNCTION_EXISTS(strtoull HAVE_STRTOULL)\n```\n\n----------------------------------------\n\nTITLE: Accessing Current Test Info in Google Test (C++)\nDESCRIPTION: This code snippet demonstrates how to retrieve the `TestInfo` object for the currently running test using `::testing::UnitTest::GetInstance()->current_test_info()`. It then prints the test case name and test name using the `name()` and `test_case_name()` methods of the `TestInfo` object. Requires including the Google Test headers.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/AdvancedGuide.md#_snippet_41\n\nLANGUAGE: C++\nCODE:\n```\n// Gets information about the currently running test.\n// Do NOT delete the returned object - it's managed by the UnitTest class.\nconst ::testing::TestInfo* const test_info =\n  ::testing::UnitTest::GetInstance()->current_test_info();\nprintf(\"We are in test %s of test case %s.\\n\",\n       test_info->name(), test_info->test_case_name());\n```\n\n----------------------------------------\n\nTITLE: Setting Up a Cap'n Proto Client using EZ RPC in C++\nDESCRIPTION: This C++ code demonstrates how to set up a Cap'n Proto client using the EZ RPC classes. It includes necessary headers, parses command-line arguments for the server address, initializes the client, requests the bootstrap capability, makes a call to the capability, and waits for the result.  It shows the basic steps for connecting to a Cap'n Proto server.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/doc/cxxrpc.md#_snippet_8\n\nLANGUAGE: c++\nCODE:\n```\n#include <capnp/ez-rpc.h>\n#include \"my-interface.capnp.h\"\n#include <iostream>\n\nint main(int argc, const char* argv[]) {\n  // We expect one argument specifying the server address.\n  if (argc != 2) {\n    std::cerr << \"usage: \" << argv[0] << \" HOST[:PORT]\" << std::endl;\n    return 1;\n  }\n\n  // Set up the EzRpcClient, connecting to the server on port\n  // 5923 unless a different port was specified by the user.\n  capnp::EzRpcClient client(argv[1], 5923);\n  auto& waitScope = client.getWaitScope();\n\n  // Request the bootstrap capability from the server.\n  MyInterface::Client cap = client.getMain<MyInterface>();\n\n  // Make a call to the capability.\n  auto request = cap.fooRequest();\n  request.setParam(123);\n  auto promise = request.send();\n\n  // Wait for the result.  This is the only line that blocks.\n  auto response = promise.wait(waitScope);\n\n  // All done.\n  std::cout << response.getResult() << std::endl;\n  return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Applying LGPL: Adding Notices to Library Files\nDESCRIPTION: This snippet provides the standard notices to include at the start of each source file of a library when applying the GNU Lesser General Public License.  It includes the library's name, copyright information, licensing terms, warranty disclaimer, and contact information for the Free Software Foundation. It requires the name of the library, the copyright year, and the author's name.\nSOURCE: https://github.com/openai/retro/blob/master/cores/genesis/core/ntsc/license.txt#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n<one line to give the library's name and a brief idea of what it does.>\nCopyright (C) <year>  <name of author>\n\nThis library is free software; you can redistribute it and/or\nmodify it under the terms of the GNU Lesser General Public\nLicense as published by the Free Software Foundation; either\nversion 2.1 of the License, or (at your option) any later version.\n\nThis library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nLesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public\nLicense along with this library; if not, write to the Free Software\nFoundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Constructor for Eigen Matrix with pybind11\nDESCRIPTION: This code defines a custom constructor for an Eigen Matrix (`Eigen::MatrixXd`) that accepts a Python buffer object as input. It checks the buffer's format and dimensions for compatibility and then initializes the Eigen matrix using the buffer's data. This allows creating Eigen matrices directly from NumPy arrays.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/pycpp/numpy.rst#_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\n/* Bind MatrixXd (or some other Eigen type) to Python */\ntypedef Eigen::MatrixXd Matrix;\n\ntypedef Matrix::Scalar Scalar;\nconstexpr bool rowMajor = Matrix::Flags & Eigen::RowMajorBit;\n\npy::class_<Matrix>(m, \"Matrix\", py::buffer_protocol())\n    .def(\"__init__\", [](Matrix &m, py::buffer b) {\n        typedef Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> Strides;\n\n        /* Request a buffer descriptor from Python */\n        py::buffer_info info = b.request();\n\n        /* Some sanity checks ... */\n        if (info.format != py::format_descriptor<Scalar>::format())\n            throw std::runtime_error(\"Incompatible format: expected a double array!\");\n\n        if (info.ndim != 2)\n            throw std::runtime_error(\"Incompatible buffer dimension!\");\n\n        auto strides = Strides(\n            info.strides[rowMajor ? 0 : 1] / (py::ssize_t)sizeof(Scalar),\n            info.strides[rowMajor ? 1 : 0] / (py::ssize_t)sizeof(Scalar));\n\n        auto map = Eigen::Map<Matrix, 0, Strides>(\n            static_cast<Scalar *>(info.ptr), info.shape[0], info.shape[1], strides);\n\n        new (&m) Matrix(map);\n    });\n```\n\n----------------------------------------\n\nTITLE: COutWindow Class for LZMA Decoding in C++\nDESCRIPTION: This C++ code defines a COutWindow class to implement a cyclic buffer for the sliding window in an LZMA decoder. It provides methods for creating the buffer, putting a byte, getting a byte from a distance, copying a match (sequence of bytes), checking distance validity, and checking if the buffer is empty.\nSOURCE: https://github.com/openai/retro/blob/master/cores/genesis/core/cd_hw/libchdr/deps/lzma/DOC/lzma-specification.txt#_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\nclass COutWindow\n{\n  Byte *Buf;\n  UInt32 Pos;\n  UInt32 Size;\n  bool IsFull;\n\npublic:\n  unsigned TotalPos;\n  COutStream OutStream;\n\n  COutWindow(): Buf(NULL) {}\n  ~COutWindow() { delete []Buf; }\n \n  void Create(UInt32 dictSize)\n  {\n    Buf = new Byte[dictSize];\n    Pos = 0;\n    Size = dictSize;\n    IsFull = false;\n    TotalPos = 0;\n  }\n\n  void PutByte(Byte b)\n  {\n    TotalPos++;\n    Buf[Pos++] = b;\n    if (Pos == Size)\n    {\n      Pos = 0;\n      IsFull = true;\n    }\n    OutStream.WriteByte(b);\n  }\n\n  Byte GetByte(UInt32 dist) const\n  {\n    return Buf[dist <= Pos ? Pos - dist : Size - dist + Pos];\n  }\n\n  void CopyMatch(UInt32 dist, unsigned len)\n  {\n    for (; len > 0; len--)\n      PutByte(GetByte(dist));\n  }\n\n  bool CheckDistance(UInt32 dist) const\n  {\n    return dist <= Pos || IsFull;\n  }\n\n  bool IsEmpty() const\n  {\n    return Pos == 0 && !IsFull;\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Expression Evaluation\nDESCRIPTION: Expression to be evaluated using calculator interface. Shows dependency between calls and how calls can be paralellized. Cap'n Proto is able to send all 6 calls at once vs. other systems needing to wait for some to complete before sending subsequent calls.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/doc/_posts/2013-12-13-promise-pipelining-capnproto-vs-ice.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n((5 * 2) + ((7 - 3) * 10)) / (6 - 4)\n  (10    + (   4    * 10)) /    2      # 1\n  (10    +         40)     /    2      # 2\n        50                 /    2      # 3\n                          25           # 4\n```\n\n----------------------------------------\n\nTITLE: Adding NumPy Arrays with Pybind11\nDESCRIPTION: This snippet defines a function `add_arrays` that takes two NumPy arrays as input, performs element-wise addition, and returns a new NumPy array containing the result.  It includes error handling for dimension and size mismatches. It then uses `PYBIND11_MODULE` to expose this function to Python, making it callable from Python code.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/pycpp/numpy.rst#_snippet_10\n\nLANGUAGE: cpp\nCODE:\n```\nauto buf1 = input1.request(), buf2 = input2.request();\n\n        if (buf1.ndim != 1 || buf2.ndim != 1)\n            throw std::runtime_error(\"Number of dimensions must be one\");\n\n        if (buf1.size != buf2.size)\n            throw std::runtime_error(\"Input shapes must match\");\n\n        /* No pointer is passed, so NumPy will allocate the buffer */\n        auto result = py::array_t<double>(buf1.size);\n\n        auto buf3 = result.request();\n\n        double *ptr1 = (double *) buf1.ptr,\n               *ptr2 = (double *) buf2.ptr,\n               *ptr3 = (double *) buf3.ptr;\n\n        for (size_t idx = 0; idx < buf1.shape[0]; idx++)\n            ptr3[idx] = ptr1[idx] + ptr2[idx];\n\n        return result;\n    }\n\n    PYBIND11_MODULE(test, m) {\n        m.def(\"add_arrays\", &add_arrays, \"Add two NumPy arrays\");\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating Symlinks (CMake)\nDESCRIPTION: This snippet creates symbolic links for the shared and static libraries on Cygwin, MinGW and other non-Windows platforms. It uses `CREATE_SYMLINK` and `install` commands to generate and install these symlinks in the installation directory.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/third-party/libpng/CMakeLists.txt#_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\nif(PNG_SHARED)\n    # Create a symlink for libpng.dll.a => libpng16.dll.a on Cygwin\n    if(CYGWIN OR MINGW)\n       get_target_property(BUILD_TARGET_LOCATION ${PNG_LIB_NAME} LOCATION_${CMAKE_BUILD_TYPE})\n       CREATE_SYMLINK(${BUILD_TARGET_LOCATION} libpng${CMAKE_IMPORT_LIBRARY_SUFFIX})\n       install(FILES ${CMAKE_CURRENT_BINARY_DIR}/libpng${CMAKE_IMPORT_LIBRARY_SUFFIX}\n         DESTINATION ${CMAKE_INSTALL_LIBDIR})\n    endif(CYGWIN OR MINGW)\n\n    if(NOT WIN32)\n      get_target_property(BUILD_TARGET_LOCATION ${PNG_LIB_NAME} LOCATION_${CMAKE_BUILD_TYPE})\n      CREATE_SYMLINK(${BUILD_TARGET_LOCATION} libpng${CMAKE_SHARED_LIBRARY_SUFFIX})\n      install(FILES ${CMAKE_CURRENT_BINARY_DIR}/libpng${CMAKE_SHARED_LIBRARY_SUFFIX}\n         DESTINATION ${CMAKE_INSTALL_LIBDIR})\n    endif(NOT WIN32)\n  endif(PNG_SHARED)\n\n  if(PNG_STATIC)\n    if(NOT WIN32 OR CYGWIN OR MINGW)\n      get_target_property(BUILD_TARGET_LOCATION ${PNG_LIB_NAME_STATIC} LOCATION_${CMAKE_BUILD_TYPE})\n      CREATE_SYMLINK(${BUILD_TARGET_LOCATION} libpng${CMAKE_STATIC_LIBRARY_SUFFIX})\n      install(FILES ${CMAKE_CURRENT_BINARY_DIR}/libpng${CMAKE_STATIC_LIBRARY_SUFFIX}\n         DESTINATION ${CMAKE_INSTALL_LIBDIR})\n    endif(NOT WIN32 OR CYGWIN OR MINGW)\n endif()\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Target for Test Input Generation in CMake\nDESCRIPTION: This snippet defines a custom target named 'testinput' that generates input files for testing. It uses the ziptool executable to extract specific files from archive `manyfiles-zip.zip` and `bigzero-zip.zip` into individual files.  This target depends on the `ziptool` executable and the archive files.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/libzip/regress/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nADD_CUSTOM_TARGET(testinput\n  ALL\n  VERBATIM\n  COMMAND ziptool ${CMAKE_CURRENT_SOURCE_DIR}/manyfiles-zip.zip cat 0 > manyfiles.zip\n  COMMAND ziptool ${CMAKE_CURRENT_SOURCE_DIR}/manyfiles-zip.zip cat 1 > manyfiles-133000.zip\n  COMMAND ziptool ${CMAKE_CURRENT_SOURCE_DIR}/manyfiles-zip.zip cat 2 > manyfiles-65536.zip\n  COMMAND ziptool ${CMAKE_CURRENT_SOURCE_DIR}/manyfiles-zip.zip cat 3 > manyfiles-zip64-modulo.zip\n  COMMAND ziptool ${CMAKE_CURRENT_SOURCE_DIR}/manyfiles-zip.zip cat 4 > manyfiles-zip64.zip\n  COMMAND ziptool ${CMAKE_CURRENT_SOURCE_DIR}/manyfiles-zip.zip cat 5 > manyfiles-fewer.zip\n  COMMAND ziptool ${CMAKE_CURRENT_SOURCE_DIR}/manyfiles-zip.zip cat 6 > manyfiles-more.zip\n  COMMAND ziptool ${CMAKE_CURRENT_SOURCE_DIR}/bigzero-zip.zip cat 0 > bigzero.zip\n  DEPENDS ziptool ${CMAKE_CURRENT_SOURCE_DIR}/manyfiles-zip.zip ${CMAKE_CURRENT_SOURCE_DIR}/bigzero-zip.zip\n)\n```\n\n----------------------------------------\n\nTITLE: Type Caster and Visit Helper Specialization for Boost::variant in pybind11\nDESCRIPTION: This code snippet showcases how to specialize the `type_caster` for `boost::variant` (or any similar `std::variant`-like container) and how to provide a `visit_helper` if the variant uses a custom visitation function (e.g., `boost::apply_visitor` instead of `visit`). This allows pybind11 to properly handle and convert the variant type between C++ and Python.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/cast/stl.rst#_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\n// `boost::variant` as an example -- can be any `std::variant`-like container\nnamespace pybind11 { namespace detail {\n    template <typename... Ts>\n    struct type_caster<boost::variant<Ts...>> : variant_caster<boost::variant<Ts...>> {};\n\n    // Specifies the function used to visit the variant -- `apply_visitor` instead of `visit`\n    template <>\n    struct visit_helper<boost::variant> {\n        template <typename... Args>\n        static auto call(Args &&...args) -> decltype(boost::apply_visitor(args...)) {\n            return boost::apply_visitor(args...);\n        }\n    };\n}} // namespace pybind11::detail\n```\n\n----------------------------------------\n\nTITLE: Decode Literal C++\nDESCRIPTION: Decodes a single literal and puts it into the Sliding Window buffer. It uses the previous byte from the output window and current position to select the appropriate probability table. If the state is greater than or equal to 7, it uses 'matchByte' to decode the literal, otherwise, it uses the basic decoding loop.\nSOURCE: https://github.com/openai/retro/blob/master/cores/pce/deps/lzma-16.04/DOC/lzma-specification.txt#_snippet_14\n\nLANGUAGE: C++\nCODE:\n```\nvoid DecodeLiteral(unsigned state, UInt32 rep0)\n{\n  unsigned prevByte = 0;\n  if (!OutWindow.IsEmpty())\n    prevByte = OutWindow.GetByte(1);\n  \n  unsigned symbol = 1;\n  unsigned litState = ((OutWindow.TotalPos & ((1 << lp) - 1)) << lc) + (prevByte >> (8 - lc));\n  CProb *probs = &LitProbs[(UInt32)0x300 * litState];\n  \n  if (state >= 7)\n  {\n    unsigned matchByte = OutWindow.GetByte(rep0 + 1);\n    do\n    {\n      unsigned matchBit = (matchByte >> 7) & 1;\n      matchByte <<= 1;\n      unsigned bit = RangeDec.DecodeBit(&probs[((1 + matchBit) << 8) + symbol]);\n      symbol = (symbol << 1) | bit;\n      if (matchBit != bit)\n        break;\n    }\n    while (symbol < 0x100);\n  }\n  while (symbol < 0x100)\n    symbol = (symbol << 1) | RangeDec.DecodeBit(&probs[symbol]);\n  OutWindow.PutByte((Byte)(symbol - 0x100));\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AddressBook Operations with HTTP Mapping in Cap'n Proto\nDESCRIPTION: This Cap'n Proto code defines additional operations for interacting with an `AddressBook` via HTTP. It defines methods for adding a person (`addPerson`) and retrieving all people (`getAll`), specifying HTTP methods (POST, GET), routes, and JSON serialization. The `$httpQuery` annotation maps a parameter to a query parameter in the URL.  The `$httpBody(type = jsonField)` annotation indicates the returned ID is a field within a JSON response.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/doc/slides-2017.05.18/index.md#_snippet_21\n\nLANGUAGE: capnp\nCODE:\n```\naddPerson @2 (person :Person $httpBody(type = json))\n          -> (id :UInt32 $httpBody(type = jsonField));\n    $http(method = post, route = \"person\");\n# POST /person\n# JSON request body\n# JSON response body (object containing field `id`)\n\ngetAll @3 (page :UInt32 = 0 $httpQuery)\n       -> (people: List(Person) $httpBody(type = json));\n    $http(method = get);\n# GET /?page=<num>\n# Query is optional.\n# JSAN (JSON array) repsonse body.\n```\n\n----------------------------------------\n\nTITLE: GZIP Member Structure\nDESCRIPTION: This structure defines the format of a single member within a GZIP file. It includes fields for identification, compression method, flags, modification time, extra flags, operating system, extra field, original file name, file comment, header CRC, and compressed data blocks. The presence of the extra field, file name, file comment, and header CRC are determined by the FLG bits.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/third-party/zlib/doc/rfc1952.txt#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n+---+---+---+---+---+---+---+---+---+---+\n|ID1|ID2|CM |FLG|     MTIME     |XFL|OS | (more-->)\n+---+---+---+---+---+---+---+---+---+---+\n\n(if FLG.FEXTRA set)\n\n+---+---+=================================+\n| XLEN  |...XLEN bytes of \"extra field\"...| (more-->)\n+---+---+=================================+\n\n(if FLG.FNAME set)\n\n+=========================================+\n|...original file name, zero-terminated...| (more-->)\n+=========================================+\n\n(if FLG.FCOMMENT set)\n\n+===================================+\n|...file comment, zero-terminated...| (more-->)\n+===================================+\n\n(if FLG.FHCRC set)\n\n+---+---+\n| CRC16 |\n+---+---+\n\n+=======================+\n|...compressed blocks...| (more-->)\n+=======================+\n```\n\n----------------------------------------\n\nTITLE: Folder Structure Definition\nDESCRIPTION: Describes the structure of a folder within the 7z archive. It includes information about coders, bind pairs, and packed streams used in the folder. The `CodecIdSize` and `Is Complex Coder` flags determine how the codec ID and stream counts are read. The code accounts for variable sizes and flags to interpret the folder structure correctly.\nSOURCE: https://github.com/openai/retro/blob/master/cores/pce/deps/lzma-16.04/DOC/7zFormat.txt#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nUINT64 NumCoders;\nfor (NumCoders)\n{\n  BYTE \n  {\n    0:3 CodecIdSize\n    4:  Is Complex Coder\n    5:  There Are Attributes\n    6:  Reserved\n    7:  There are more alternative methods. (Not used anymore, must be 0).\n  } \n  BYTE CodecId[CodecIdSize]\n  if (Is Complex Coder)\n  {\n    UINT64 NumInStreams;\n    UINT64 NumOutStreams;\n  }\n  if (There Are Attributes)\n  {\n    UINT64 PropertiesSize\n    BYTE Properties[PropertiesSize]\n  }\n}\n  \nNumBindPairs = NumOutStreamsTotal - 1;\n\nfor (NumBindPairs)\n{\n  UINT64 InIndex;\n  UINT64 OutIndex;\n}\n\nNumPackedStreams = NumInStreamsTotal - NumBindPairs;\nif (NumPackedStreams > 1)\n  for(NumPackedStreams)\n  {\n    UINT64 Index;\n  };\n```\n\n----------------------------------------\n\nTITLE: Defining a Google Test Event Listener (C++)\nDESCRIPTION: This code snippet defines a custom event listener, `MinimalistPrinter`, by subclassing `::testing::EmptyTestEventListener`. It overrides the `OnTestStart`, `OnTestPartResult`, and `OnTestEnd` methods to print minimalist output for test start, test part result, and test end events. This custom listener allows for altering or replacing the default Google Test output.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/AdvancedGuide.md#_snippet_42\n\nLANGUAGE: C++\nCODE:\n```\nclass MinimalistPrinter : public ::testing::EmptyTestEventListener {\n  // Called before a test starts.\n  virtual void OnTestStart(const ::testing::TestInfo& test_info) {\n    printf(\"*** Test %s.%s starting.\\n\",\n           test_info.test_case_name(), test_info.name());\n  }\n\n  // Called after a failed assertion or a SUCCEED() invocation.\n  virtual void OnTestPartResult(\n      const ::testing::TestPartResult& test_part_result) {\n    printf(\"%s in %s:%d\\n%s\\n\",\n           test_part_result.failed() ? \"*** Failure\" : \"Success\",\n           test_part_result.file_name(),\n           test_part_result.line_number(),\n           test_part_result.summary());\n  }\n\n  // Called after a test ends.\n  virtual void OnTestEnd(const ::testing::TestInfo& test_info) {\n    printf(\"*** Test %s.%s ending.\\n\",\n           test_info.test_case_name(), test_info.name());\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling Testing in CMake\nDESCRIPTION: This snippet enables testing using the enable_testing() command. This command is necessary for running tests with 'make test' or ctest. It also defines various C++ tests using the cxx_test macro.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googlemock/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nif (gmock_build_tests)\n  # This must be set in the root directory for the tests to be run by\n  # 'make test' or ctest.\n  enable_testing()\n\n  ############################################################\n  # C++ tests built with standard compiler flags.\n\n  cxx_test(gmock-actions_test gmock_main)\n  cxx_test(gmock-cardinalities_test gmock_main)\n  cxx_test(gmock_ex_test gmock_main)\n  cxx_test(gmock-generated-actions_test gmock_main)\n  cxx_test(gmock-generated-function-mockers_test gmock_main)\n  cxx_test(gmock-generated-internal-utils_test gmock_main)\n  cxx_test(gmock-generated-matchers_test gmock_main)\n  cxx_test(gmock-internal-utils_test gmock_main)\n  cxx_test(gmock-matchers_test gmock_main)\n  cxx_test(gmock-more-actions_test gmock_main)\n  cxx_test(gmock-nice-strict_test gmock_main)\n  cxx_test(gmock-port_test gmock_main)\n  cxx_test(gmock-spec-builders_test gmock_main)\n  cxx_test(gmock_link_test gmock_main test/gmock_link2_test.cc)\n  cxx_test(gmock_test gmock_main)\n\n  if (CMAKE_USE_PTHREADS_INIT)\n    cxx_test(gmock_stress_test gmock)\n  endif()\n\n  # gmock_all_test is commented to save time building and running tests.\n  # Uncomment if necessary.\n  # cxx_test(gmock_all_test gmock_main)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building Google Mock with Make\nDESCRIPTION: These commands build Google Mock and run its tests using the standard GNU make process. `make` compiles the library, and `make check` builds and executes all the tests to ensure they pass. This verifies the integrity of the build and confirms that changes haven't introduced any regressions.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googlemock/README.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nmake        # Standard makefile following GNU conventions\nmake check  # Builds and runs all tests - all should pass.\n```\n\n----------------------------------------\n\nTITLE: Applying LGPL v2.1 to a New Library\nDESCRIPTION: This snippet provides a template for applying the GNU Lesser General Public License v2.1 to a new software library. It includes the necessary copyright notice, license information, warranty disclaimer, and instructions for obtaining a copy of the license.  It should be added to the start of each source file within the library.\nSOURCE: https://github.com/openai/retro/blob/master/cores/genesis/gcw0/opk-data/LICENSE.txt#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n<one line to give the library's name and a brief idea of what it does.>\nCopyright (C) <year>  <name of author>\n\nThis library is free software; you can redistribute it and/or\nmodify it under the terms of the GNU Lesser General Public\nLicense as published by the Free Software Foundation; either\nversion 2.1 of the License, or (at your option) any later version.\n\nThis library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nLesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public\nLicense along with this library; if not, write to the Free Software\nFoundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n```\n\n----------------------------------------\n\nTITLE: Creating 3DSX and CIA files\nDESCRIPTION: This snippet generates the 3DSX (homebrew executable) and CIA (installable archive) files using `3DSXTOOL`, `STRIP`, and `MAKEROM`. It also creates custom targets for building these files and specifies dependencies.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/platform/3ds/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_command(OUTPUT ${BINARY_NAME}.3dsx\n                   COMMAND ${3DSXTOOL} ${BINARY_NAME}.elf ${BINARY_NAME}.3dsx --smdh=${BINARY_NAME}.smdh\n                   DEPENDS ${BINARY_NAME}.elf ${BINARY_NAME}.smdh ${BINARY_NAME}.xml)\nadd_custom_target(${BINARY_NAME}.3dsx ALL DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/${BINARY_NAME}.3dsx)\n\nadd_custom_command(OUTPUT ${BINARY_NAME}.cia\n                   COMMAND ${STRIP} -o ${BINARY_NAME}-stripped.elf ${BINARY_NAME}.elf\n                   COMMAND ${MAKEROM} -f cia -o ${BINARY_NAME}.cia -rsf cia.rsf -target t -exefslogo -elf ${BINARY_NAME}-stripped.elf -icon ${BINARY_NAME}.smdh -banner ${BINARY_NAME}.bnr -major ${LIB_VERSION_MAJOR} -minor ${LIB_VERSION_MINOR} -micro ${LIB_VERSION_PATCH}\n                   DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/cia.rsf ${BINARY_NAME}.elf ${BINARY_NAME}.smdh ${BINARY_NAME}.bnr)\nadd_custom_target(${BINARY_NAME}.cia ALL DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/${BINARY_NAME}.cia)\n```\n\n----------------------------------------\n\nTITLE: Binding Eigen References with No Conversion in pybind11\nDESCRIPTION: This code demonstrates how to bind Eigen references in pybind11 while preventing implicit data conversion and copying of NumPy arrays that don't match the expected Eigen type or stride layout.  It utilizes `py::arg().noconvert()` to enforce type and layout compatibility, raising a `RuntimeError` if the input array is incompatible instead of creating a temporary copy.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/cast/eigen.rst#_snippet_8\n\nLANGUAGE: cpp\nCODE:\n```\n// The method and function to be bound:\nclass MyClass {\n    // ...\n    double some_method(const Eigen::Ref<const MatrixXd> &matrix) { /* ... */ }\n};\nfloat some_function(const Eigen::Ref<const MatrixXf> &big,\n                    const Eigen::Ref<const MatrixXf> &small) {\n    // ...\n}\n\n// The associated binding code:\nusing namespace pybind11::literals; // for \"arg\"_a\npy::class_<MyClass>(m, \"MyClass\")\n    // ... other class definitions\n    .def(\"some_method\", &MyClass::some_method, py::arg().noconvert());\n\nm.def(\"some_function\", &some_function,\n    \"big\"_a.noconvert(), // <- Don't allow copying for this arg\n    \"small\"_a            // <- This one can be copied if needed\n);\n```\n\n----------------------------------------\n\nTITLE: LZMA Distance Decoding Function in C++\nDESCRIPTION: This code snippet implements the `DecodeDistance` function, which decodes the zero-based match distance in LZMA. It uses `PosSlotDecoder`, `PosDecoders`, and `AlignDecoder` to decode different parts of the distance value based on the `posSlot`. The function takes the length (`len`) as input to calculate `lenState` and uses `RangeDec` for decoding bits.\nSOURCE: https://github.com/openai/retro/blob/master/cores/genesis/core/cd_hw/libchdr/deps/lzma/DOC/lzma-specification.txt#_snippet_23\n\nLANGUAGE: cpp\nCODE:\n```\nunsigned DecodeDistance(unsigned len)\n{\n  unsigned lenState = len;\n  if (lenState > kNumLenToPosStates - 1)\n    lenState = kNumLenToPosStates - 1;\n  \n  unsigned posSlot = PosSlotDecoder[lenState].Decode(&RangeDec);\n  if (posSlot < 4)\n    return posSlot;\n  \n  unsigned numDirectBits = (unsigned)((posSlot >> 1) - 1);\n  UInt32 dist = ((2 | (posSlot & 1)) << numDirectBits);\n  if (posSlot < kEndPosModelIndex)\n    dist += BitTreeReverseDecode(PosDecoders + dist - posSlot, numDirectBits, &RangeDec);\n  else\n  {\n    dist += RangeDec.DecodeDirectBits(numDirectBits - kNumAlignBits) << kNumAlignBits;\n    dist += AlignDecoder.ReverseDecode(&RangeDec);\n  }\n  return dist;\n}\n```\n\n----------------------------------------\n\nTITLE: Sliding Window Implementation in C++\nDESCRIPTION: This C++ code defines a `COutWindow` class for implementing the sliding window technique used in LZMA decoding. It includes methods for creating the buffer, putting bytes into it, retrieving bytes based on distance, copying matches, and checking the distance.\nSOURCE: https://github.com/openai/retro/blob/master/cores/pce/deps/lzma-16.04/DOC/lzma-specification.txt#_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\nclass COutWindow\n{\n  Byte *Buf;\n  UInt32 Pos;\n  UInt32 Size;\n  bool IsFull;\n\npublic:\n  unsigned TotalPos;\n  COutStream OutStream;\n\n  COutWindow(): Buf(NULL) {}\n  ~COutWindow() { delete []Buf; }\n \n  void Create(UInt32 dictSize)\n  {\n    Buf = new Byte[dictSize];\n    Pos = 0;\n    Size = dictSize;\n    IsFull = false;\n    TotalPos = 0;\n  }\n\n  void PutByte(Byte b)\n  {\n    TotalPos++;\n    Buf[Pos++] = b;\n    if (Pos == Size)\n    {\n      Pos = 0;\n      IsFull = true;\n    }\n    OutStream.WriteByte(b);\n  }\n\n  Byte GetByte(UInt32 dist) const\n  {\n    return Buf[dist <= Pos ? Pos - dist : Size - dist + Pos];\n  }\n\n  void CopyMatch(UInt32 dist, unsigned len)\n  {\n    for (; len > 0; len--)\n      PutByte(GetByte(dist));\n  }\n\n  bool CheckDistance(UInt32 dist) const\n  {\n    return dist <= Pos || IsFull;\n  }\n\n  bool IsEmpty() const\n  {\n    return Pos == 0 && !IsFull;\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Defining AddressBook Service with HTTP Pipeline in Cap'n Proto\nDESCRIPTION: This Cap'n Proto code defines an `AddressBookService` interface, which allows accessing an `AddressBook` instance based on a key. The `$httpPipeline` annotation enables chaining calls.  The `$httpPath` annotation designates the `key` as part of the HTTP route. The comments show example HTTP requests resulting from the defined service.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/doc/slides-2017.05.18/index.md#_snippet_22\n\nLANGUAGE: capnp\nCODE:\n```\ninterface AddressBookService {\n  getAddressBook @0 (key :String $httpPath)\n                 -> (result :AddressBook $httpPipeline);\n      $http(route = \"book\");\n  # GET /book/JrpmUduyHd8uW3x3TOXn2g/person/123\n  # Becomes:\n  #     service.getAddressBook(\"JrpmUduyHd8uW3x3TOXn2g\").send()\n  #            .getResult().getPerson(123).send()\n  #\n  # GET /book/JrpmUduyHd8uW3x3TOXn2g\n  # Becomes:\n  #     service.getAddressBook(\"JrpmUduyHd8uW3x3TOXn2g\").send()\n  #            .getResult().getAll().send()\n}\n```\n\n----------------------------------------\n\nTITLE: Binding Opaque std::vector with py::class_\nDESCRIPTION: This code demonstrates how to bind an opaque `std::vector<int>` using `py::class_` after declaring it opaque with `PYBIND11_MAKE_OPAQUE`.  It includes defining methods like `clear`, `pop_back`, `__len__`, and `__iter__` to mimic Python list behavior. The `py::keep_alive` call ensures the vector remains alive while the iterator is used.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/cast/stl.rst#_snippet_7\n\nLANGUAGE: cpp\nCODE:\n```\npy::class_<std::vector<int>>(m, \"IntVector\")\n    .def(py::init<>())\n    .def(\"clear\", &std::vector<int>::clear)\n    .def(\"pop_back\", &std::vector<int>::pop_back)\n    .def(\"__len__\", [](const std::vector<int> &v) { return v.size(); })\n    .def(\"__iter__\", [](std::vector<int> &v) {\n       return py::make_iterator(v.begin(), v.end());\n    }, py::keep_alive<0, 1>()) /* Keep vector alive while iterator is used */\n    // ....\n```\n\n----------------------------------------\n\nTITLE: Generating icons.c and uishader files using custom commands\nDESCRIPTION: This set of custom commands uses `RAW2C` and `PICASSO` tools to generate `icons.c` from a raw image, and `uishader.shbin` and associated header/source files from PICA shader code.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/platform/3ds/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_command(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/icons.c\n                   COMMAND ${RAW2C} ${CMAKE_SOURCE_DIR}/src/platform/3ds/icons.raw\n                   DEPENDS ${CMAKE_SOURCE_DIR}/src/platform/3ds/icons.raw)\n\nadd_custom_command(\n\tOUTPUT ${CMAKE_CURRENT_BINARY_DIR}/uishader.shbin ${CMAKE_CURRENT_BINARY_DIR}/uishader.shbin.h\n\tDEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/uishader.v.pica ${CMAKE_CURRENT_SOURCE_DIR}/uishader.g.pica\n\tCOMMAND ${PICASSO}\n\t\t-o ${CMAKE_CURRENT_BINARY_DIR}/uishader.shbin\n\t\t-h ${CMAKE_CURRENT_BINARY_DIR}/uishader.shbin.h\n\t\t${CMAKE_CURRENT_SOURCE_DIR}/uishader.v.pica\n\t\t${CMAKE_CURRENT_SOURCE_DIR}/uishader.g.pica\n\tCOMMENT \"picasso uishader.shbin\")\n\nadd_custom_command(\n\tOUTPUT ${CMAKE_CURRENT_BINARY_DIR}/uishader.c ${CMAKE_CURRENT_BINARY_DIR}/uishader.h\n\tMAIN_DEPENDENCY ${CMAKE_CURRENT_BINARY_DIR}/uishader.shbin\n\tCOMMAND ${RAW2C} ${CMAKE_CURRENT_BINARY_DIR}/uishader.shbin\n\tWORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n\tCOMMENT \"raw2c uishader.shbin\")\n```\n\n----------------------------------------\n\nTITLE: Define pybind11 Build Test Function\nDESCRIPTION: Defines a CMake function `pybind11_add_build_test` to create build and test targets for pybind11 projects. It parses arguments, sets build options (compiler, Python executable, C++ standard), and uses `add_custom_target` with `CMAKE_CTEST_COMMAND` to execute the tests.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/tests/test_cmake_build/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(CMakeParseArguments)\nfunction(pybind11_add_build_test name)\n  cmake_parse_arguments(ARG \"INSTALL\" \"\" \"\" ${ARGN})\n\n  set(build_options \"-DCMAKE_PREFIX_PATH=${PROJECT_BINARY_DIR}/mock_install\"\n                    \"-DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}\"\n                    \"-DPYTHON_EXECUTABLE:FILEPATH=${PYTHON_EXECUTABLE}\"\n                    \"-DPYBIND11_CPP_STANDARD=${PYBIND11_CPP_STANDARD}\")\n  if(NOT ARG_INSTALL)\n    list(APPEND build_options \"-DPYBIND11_PROJECT_DIR=${PROJECT_SOURCE_DIR}\")\n  endif()\n\n  add_custom_target(test_${name} ${CMAKE_CTEST_COMMAND}\n    --quiet --output-log ${name}.log\n    --build-and-test \"${CMAKE_CURRENT_SOURCE_DIR}/${name}\"\n                     \"${CMAKE_CURRENT_BINARY_DIR}/${name}\"\n    --build-config Release\n    --build-noclean\n    --build-generator ${CMAKE_GENERATOR}\n    $<$<BOOL:${CMAKE_GENERATOR_PLATFORM}>:--build-generator-platform> ${CMAKE_GENERATOR_PLATFORM}\n    --build-makeprogram ${CMAKE_MAKE_PROGRAM}\n    --build-target check\n    --build-options ${build_options}\n  )\n  if(ARG_INSTALL)\n    add_dependencies(test_${name} mock_install)\n  endif()\n  add_dependencies(test_cmake_build test_${name})\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Declaring Zlib Functions for Win16 in Visual Basic\nDESCRIPTION: This code declares functions from the ZLIB.DLL library for use in 16-bit Windows environments. The functions include compress, uncompress, gzopen, gzread, gzwrite, and gzclose. Parameters and return types are defined for interoperability with the DLL.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/third-party/zlib/old/visual-basic.txt#_snippet_0\n\nLANGUAGE: Visual Basic\nCODE:\n```\n#If Win16 Then   'Use Win16 calls.\nDeclare Function compress Lib \"ZLIB.DLL\" (ByVal compr As\n        String, comprLen As Any, ByVal buf As String, ByVal buflen\n        As Long) As Integer\nDeclare Function uncompress Lib \"ZLIB.DLL\" (ByVal uncompr\n        As String, uncomprLen As Any, ByVal compr As String, ByVal\n        lcompr As Long) As Integer\nDeclare Function gzopen Lib \"ZLIB.DLL\" (ByVal filePath As\n        String, ByVal mode As String) As Long\nDeclare Function gzread Lib \"ZLIB.DLL\" (ByVal file As\n        Long, ByVal uncompr As String, ByVal uncomprLen As Integer)\n        As Integer\nDeclare Function gzwrite Lib \"ZLIB.DLL\" (ByVal file As\n        Long, ByVal uncompr As String, ByVal uncomprLen As Integer)\n        As Integer\nDeclare Function gzclose Lib \"ZLIB.DLL\" (ByVal file As\n        Long) As Integer\n#Else\n```\n\n----------------------------------------\n\nTITLE: Creating SDL Executable in CMake\nDESCRIPTION: This CMake code adds an executable target named `${BINARY_NAME}-sdl`. It includes platform-specific source files, main source files, and then sets the compilation definitions.  It then links the executable against the main binary and necessary libraries (PLATFORM_LIBRARY, OPENGL_LIBRARY, OPENGLES2_LIBRARY) and defines properties based on the operating system. Finally, the target is installed to the appropriate directory.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/platform/sdl/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(${BINARY_NAME}-sdl WIN32 ${PLATFORM_SRC} ${MAIN_SRC})\nset_target_properties(${BINARY_NAME}-sdl PROPERTIES COMPILE_DEFINITIONS \"${FEATURE_DEFINES};${FUNCTION_DEFINES}\")\ntarget_link_libraries(${BINARY_NAME}-sdl ${BINARY_NAME} ${PLATFORM_LIBRARY} ${OPENGL_LIBRARY} ${OPENGLES2_LIBRARY})\nif(NOT WIN32)\n\tset_target_properties(${BINARY_NAME}-sdl PROPERTIES OUTPUT_NAME ${BINARY_NAME})\nendif()\ninstall(TARGETS ${BINARY_NAME}-sdl DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT ${BINARY_NAME}-sdl)\nif(UNIX)\n\tinstall(FILES ${CMAKE_SOURCE_DIR}/doc/mgba.6 DESTINATION ${MANDIR}/man6 COMPONENT ${BINARY_NAME}-sdl)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Sharing Resources Between Tests using static member variables, SetUpTestCase(), and TearDownTestCase() in Google Test C++\nDESCRIPTION: This code snippet illustrates how to share resources between tests in the same test case by using static member variables and the `SetUpTestCase()` and `TearDownTestCase()` methods. These methods are used for per-test-case setup and teardown respectively.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/AdvancedGuide.md#_snippet_19\n\nLANGUAGE: C++\nCODE:\n```\nclass FooTest : public ::testing::Test {\n protected:\n  // Per-test-case set-up.\n  // Called before the first test in this test case.\n  // Can be omitted if not needed.\n  static void SetUpTestCase() {\n    shared_resource_ = new ...;\n  }\n\n  // Per-test-case tear-down.\n  // Called after the last test in this test case.\n  // Can be omitted if not needed.\n  static void TearDownTestCase() {\n    delete shared_resource_;\n    shared_resource_ = NULL;\n  }\n\n  // You can define per-test set-up and tear-down logic as usual.\n  virtual void SetUp() { ... }\n  virtual void TearDown() { ... }\n\n  // Some expensive resource shared by all tests.\n  static T* shared_resource_;\n};\n\nT* FooTest::shared_resource_ = NULL;\n\nTEST_F(FooTest, Test1) {\n  ... you can refer to shared_resource here ...\n}\nTEST_F(FooTest, Test2) {\n  ... you can refer to shared_resource here ...\n}\n```\n\n----------------------------------------\n\nTITLE: Applying GNU Lesser General Public License\nDESCRIPTION: This snippet demonstrates how to apply the GNU Lesser General Public License to a new library. It includes adding copyright notices, specifying the license version, disclaiming warranty, and providing contact information for the copyright holder. This ensures the library can be freely redistributed and modified under the terms of the LGPL.\nSOURCE: https://github.com/openai/retro/blob/master/cores/genesis/LICENSE.txt#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n<one line to give the library's name and a brief idea of what it does.>\nCopyright (C) <year>  <name of author>\n\nThis library is free software; you can redistribute it and/or\nmodify it under the terms of the GNU Lesser General Public\nLicense as published by the Free Software Foundation; either\nversion 2.1 of the License, or (at your option) any later version.\n\nThis library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nLesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public\nLicense along with this library; if not, write to the Free Software\nFoundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n```\n\n----------------------------------------\n\nTITLE: Making Cap'n Proto Struct Generic (Map)\nDESCRIPTION: This snippet demonstrates how to make the `Map` struct generic by introducing `Key` and `Value` type parameters. The `Entry` struct is updated to use these generic types for its `key` and `value` fields.  All existing uses of the `Map` struct must be updated accordingly.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/doc/language.md#_snippet_27\n\nLANGUAGE: capnp\nCODE:\n```\nstruct Map(Key, Value) {\n  entries @0 :List(Entry);\n  struct Entry {\n    key @0 :Key;\n    value @1 :Value;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Executable for Raspberry Pi in CMake\nDESCRIPTION: This CMake code block configures and builds an executable specifically for Raspberry Pi (`BUILD_RASPI`).  It defines compiler flags, adds source files, sets target properties (compile definitions), links libraries, and installs the resulting executable to a specified destination.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/platform/sdl/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nif(BUILD_RASPI)\n\tadd_definitions(-DBUILD_RASPI)\n\tlist(APPEND PLATFORM_SRC ${CMAKE_SOURCE_DIR}/src/platform/opengl/gles2.c ${CMAKE_SOURCE_DIR}/src/platform/sdl/gl-common.c)\n\tlist(APPEND MAIN_SRC ${CMAKE_SOURCE_DIR}/src/platform/sdl/gles2-sdl.c)\n\tset(OPENGLES2_LIBRARY \"-lEGL -lGLESv2 -lbcm_host\")\n\tset(BUILD_GLES2 ON CACHE BOOL \"Using OpenGL|ES 2\" FORCE)\n\tset(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -fgnu89-inline\")\n\tadd_executable(${BINARY_NAME}-rpi ${PLATFORM_SRC} ${MAIN_SRC})\n\tset_target_properties(${BINARY_NAME}-rpi PROPERTIES COMPILE_DEFINITIONS \"${FEATURE_DEFINES};${FUNCTION_DEFINES}\")\n\ttarget_link_libraries(${BINARY_NAME}-rpi ${BINARY_NAME} ${PLATFORM_LIBRARY} ${OPENGLES2_LIBRARY})\n\tinstall(TARGETS ${BINARY_NAME}-rpi DESTINATION bin COMPONENT ${BINARY_NAME}-rpi)\n\tunset(OPENGLES2_INCLUDE_DIR} CACHE) # Clear NOTFOUND\nendif()\n```\n\n----------------------------------------\n\nTITLE: Declaring Zlib Functions for Win32 in Visual Basic\nDESCRIPTION: This code declares functions from the ZLIB32.DLL library for use in 32-bit Windows environments.  The functions include compress, uncompress, gzopen, gzread, gzwrite, and gzclose. Parameters and return types are defined for interoperability with the DLL.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/third-party/zlib/old/visual-basic.txt#_snippet_1\n\nLANGUAGE: Visual Basic\nCODE:\n```\nDeclare Function compress Lib \"ZLIB32.DLL\"\n        (ByVal compr As String, comprLen As Any, ByVal buf As\n        String, ByVal buflen As Long) As Integer\nDeclare Function uncompress Lib \"ZLIB32.DLL\"\n        (ByVal uncompr As String, uncomprLen As Any, ByVal compr As\n        String, ByVal lcompr As Long) As Long\nDeclare Function gzopen Lib \"ZLIB32.DLL\"\n        (ByVal file As String, ByVal mode As String) As Long\nDeclare Function gzread Lib \"ZLIB32.DLL\"\n        (ByVal file As Long, ByVal uncompr As String, ByVal\n        uncomprLen As Long) As Long\nDeclare Function gzwrite Lib \"ZLIB32.DLL\"\n        (ByVal file As Long, ByVal uncompr As String, ByVal\n        uncomprLen As Long) As Long\nDeclare Function gzclose Lib \"ZLIB32.DLL\"\n        (ByVal file As Long) As Long\n#End If\n```\n\n----------------------------------------\n\nTITLE: Pickling Support with pybind11 (C++)\nDESCRIPTION: This snippet enables pickling support for the `Pickleable` class using pybind11. It defines the `__getstate__` and `__setstate__` methods using `py::pickle()`. The `__getstate__` function returns a tuple containing the `value` and `extra` attributes, while the `__setstate__` function reconstructs the object from the tuple.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/classes.rst#_snippet_27\n\nLANGUAGE: cpp\nCODE:\n```\npy::class_<Pickleable>(m, \"Pickleable\")\n    .def(py::init<std::string>())\n    .def(\"value\", &Pickleable::value)\n    .def(\"extra\", &Pickleable::extra)\n    .def(\"setExtra\", &Pickleable::setExtra)\n    .def(py::pickle(\n        [](const Pickleable &p) { // __getstate__\n            /* Return a tuple that fully encodes the state of the object */\n            return py::make_tuple(p.value(), p.extra());\n        },\n        [](py::tuple t) { // __setstate__\n            if (t.size() != 2)\n                throw std::runtime_error(\"Invalid state!\");\n\n            /* Create a new C++ instance */\n            Pickleable p(t[0].cast<std::string>());\n\n            /* Assign any additional state */\n            p.setExtra(t[1].cast<int>());\n\n            return p;\n        }\n    ));\n```\n\n----------------------------------------\n\nTITLE: Integrating Google Test into Existing CMake Build\nDESCRIPTION: This CMake snippet shows how to integrate the downloaded Google Test project into an existing CMake build. It configures and builds the external project, then adds Google Test as a subdirectory.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/README.md#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n# Download and unpack googletest at configure time\nconfigure_file(CMakeLists.txt.in googletest-download/CMakeLists.txt)\nexecute_process(COMMAND ${CMAKE_COMMAND} -G \"${CMAKE_GENERATOR}\" .\n  RESULT_VARIABLE result\n  WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/googletest-download )\nif(result)\n  message(FATAL_ERROR \"CMake step for googletest failed: ${result}\")\nendif()\nexecute_process(COMMAND ${CMAKE_COMMAND} --build .\n  RESULT_VARIABLE result\n  WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/googletest-download )\nif(result)\n  message(FATAL_ERROR \"Build step for googletest failed: ${result}\")\nendif()\n\n# Prevent overriding the parent project's compiler/linker\n# settings on Windows\nset(gtest_force_shared_crt ON CACHE BOOL \"\" FORCE)\n\n# Add googletest directly to our build. This defines\n# the gtest and gtest_main targets.\nadd_subdirectory(${CMAKE_BINARY_DIR}/googletest-src\n                 ${CMAKE_BINARY_DIR}/googletest-build)\n\n# The gtest/gtest_main targets carry header search path\n# dependencies automatically when using CMake 2.8.11 or\n# later. Otherwise we have to add them here ourselves.\nif (CMAKE_VERSION VERSION_LESS 2.8.11)\n  include_directories(\"${gtest_SOURCE_DIR}/include\")\nendif()\n\n# Now simply link against gtest or gtest_main as needed. Eg\nadd_executable(example example.cpp)\ntarget_link_libraries(example gtest_main)\nadd_test(NAME example_test COMMAND example)\n```\n\n----------------------------------------\n\nTITLE: Setting pybind11 Header List\nDESCRIPTION: This block defines a list of pybind11 header files and replaces the 'include/' prefix with the full path to the include directory within the current source directory. This ensures that the correct header files are used during compilation.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# NB: when adding a header don't forget to also add it to setup.py\nset(PYBIND11_HEADERS\n  include/pybind11/detail/class.h\n  include/pybind11/detail/common.h\n  include/pybind11/detail/descr.h\n  include/pybind11/detail/init.h\n  include/pybind11/detail/internals.h\n  include/pybind11/detail/typeid.h\n  include/pybind11/attr.h\n  include/pybind11/buffer_info.h\n  include/pybind11/cast.h\n  include/pybind11/chrono.h\n  include/pybind11/common.h\n  include/pybind11/complex.h\n  include/pybind11/options.h\n  include/pybind11/eigen.h\n  include/pybind11/embed.h\n  include/pybind11/eval.h\n  include/pybind11/functional.h\n  include/pybind11/numpy.h\n  include/pybind11/operators.h\n  include/pybind11/pybind11.h\n  include/pybind11/pytypes.h\n  include/pybind11/stl.h\n  include/pybind11/stl_bind.h\n)\nstring(REPLACE \"include/\" \"${CMAKE_CURRENT_SOURCE_DIR}/include/\"\n       PYBIND11_HEADERS \"${PYBIND11_HEADERS}\")\n```\n\n----------------------------------------\n\nTITLE: Creating Pkgconfig Files with CMake\nDESCRIPTION: This code segment generates pkg-config files, such as `libpng.pc` and `libpng-config`, used for locating and using the libpng library with other software. It configures these files by replacing variables using the `@ONLY` option and then creates symlinks using the previously defined `CREATE_SYMLINK` macro.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/third-party/libpng/CMakeLists.txt#_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT WIN32 OR CYGWIN OR MINGW)\n  set(prefix      ${CMAKE_INSTALL_PREFIX})\n  set(exec_prefix ${CMAKE_INSTALL_PREFIX})\n  set(libdir      ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR})\n  set(includedir  ${CMAKE_INSTALL_PREFIX}/include)\n  set(LIBS        \"-lz -lm\")\n  configure_file(${CMAKE_CURRENT_SOURCE_DIR}/libpng.pc.in\n    ${CMAKE_CURRENT_BINARY_DIR}/${PNGLIB_NAME}.pc @ONLY)\n  CREATE_SYMLINK(${PNGLIB_NAME}.pc libpng.pc)\n\n  configure_file(${CMAKE_CURRENT_SOURCE_DIR}/libpng-config.in\n    ${CMAKE_CURRENT_BINARY_DIR}/${PNGLIB_NAME}-config @ONLY)\n  CREATE_SYMLINK(${PNGLIB_NAME}-config libpng-config)\nendif(NOT WIN32 OR CYGWIN OR MINGW)\n```\n\n----------------------------------------\n\nTITLE: Usage of LZMA encoder/decoder executable\nDESCRIPTION: This snippet describes the command-line interface for the LZMA encoder/decoder executable. It outlines the syntax for encoding and decoding files, as well as running benchmarks. The description explains the switches to control the compression mode, dictionary size, fast bytes, literal context bits, literal position bits, and position bits. The flags provide control of the LZMA compression parameters.\nSOURCE: https://github.com/openai/retro/blob/master/cores/pce/deps/lzma-16.04/DOC/lzma-sdk.txt#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nLZMA <e|d> inputFile outputFile [<switches>...]\ne: encode file\nd: decode file\nb: Benchmark. There are two tests: compressing and decompressing with LZMA method.\n<Switches>\n-a{N}:  set compression mode 0 = fast, 1 = normal\nd{N}:   Sets Dictionary size - [0, 30]\n-fb{N}: set number of fast bytes - [5, 273]\n-lc{N}: set number of literal context bits - [0, 8]\n-lp{N}: set number of literal pos bits - [0, 4]\n-pb{N}: set number of pos bits - [0, 4]\n-mf{MF_ID}: set Match Finder.\n```\n\n----------------------------------------\n\nTITLE: Registering Structured Types for NumPy Arrays in C++\nDESCRIPTION: This code snippet demonstrates how to register structured types (record types) for use with `py::array_t`. The `PYBIND11_NUMPY_DTYPE` macro is used to define the memory layout of the struct so that pybind11 can correctly interpret the data when working with NumPy arrays of this type. The structure should consist of fundamental arithmetic types, `std::complex`, previously registered substructures, and arrays of any of the above.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/pycpp/numpy.rst#_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\nstruct A {\n    int x;\n    double y;\n};\n\nstruct B {\n    int z;\n    A a;\n};\n\n// ...\nPYBIND11_MODULE(test, m) {\n    // ...\n\n    PYBIND11_NUMPY_DTYPE(A, x, y);\n    PYBIND11_NUMPY_DTYPE(B, z, a);\n    /* now both A and B can be used as template arguments to py::array_t */\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up a Cap'n Proto Server using EZ RPC in C++\nDESCRIPTION: This C++ code illustrates how to set up a Cap'n Proto server using the EZ RPC classes. It includes necessary headers, parses command-line arguments for the bind address, initializes the server with a capability implementation, and runs the server indefinitely, accepting connections and handling requests.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/doc/cxxrpc.md#_snippet_9\n\nLANGUAGE: c++\nCODE:\n```\n#include <capnp/ez-rpc.h>\n#include \"my-interface-impl.h\"\n#include <iostream>\n\nint main(int argc, const char* argv[]) {\n  // We expect one argument specifying the address to which\n  // to bind and accept connections.\n  if (argc != 2) {\n    std::cerr << \"usage: \" << argv[0] << \" ADDRESS[:PORT]\"\n              << std::endl;\n    return 1;\n  }\n\n  // Set up the EzRpcServer, binding to port 5923 unless a\n  // different port was specified by the user.  Note that the\n  // first parameter here can be any \"Client\" object or anything\n  // that can implicitly cast to a \"Client\" object.  You can even\n  // re-export a capability imported from another server.\n  capnp::EzRpcServer server(kj::heap<MyInterfaceImpl>(), argv[1], 5923);\n  auto& waitScope = server.getWaitScope();\n\n  // Run forever, accepting connections and handling requests.\n  kj::NEVER_DONE.wait(waitScope);\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting files from 7z archive (C)\nDESCRIPTION: This code snippet shows the signature of the `SzAr_Extract` function, which is used to extract a file from a 7z archive. It takes the archive database, input stream, file index, block index, output buffer pointer, buffer size, offset, processed size, and memory allocators as parameters. The function extracts the specified file and writes it to the provided output buffer.\nSOURCE: https://github.com/openai/retro/blob/master/cores/pce/deps/lzma-16.04/DOC/7zC.txt#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nSZ_RESULT SzAr_Extract(\n    CArchiveDatabaseEx *db,\n    ILookInStream *inStream, \n    UInt32 fileIndex,         /* index of file */\n    UInt32 *blockIndex,       /* index of solid block */\n    Byte **outBuffer,         /* pointer to pointer to output buffer (allocated with allocMain) */\n    size_t *outBufferSize,    /* buffer size for output buffer */\n    size_t *offset,           /* offset of stream for required file in *outBuffer */\n    size_t *outSizeProcessed, /* size of file in *outBuffer */\n    ISzAlloc *allocMain,\n    ISzAlloc *allocTemp);\n```\n\n----------------------------------------\n\nTITLE: Releasing and Acquiring the GIL in C++\nDESCRIPTION: This example demonstrates how to release the Global Interpreter Lock (GIL) before calling a long-running C++ function and how to acquire it when calling Python code from C++. It uses `py::gil_scoped_release` and `py::gil_scoped_acquire`.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/misc.rst#_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nclass PyAnimal : public Animal {\npublic:\n    /* Inherit the constructors */\n    using Animal::Animal;\n\n    /* Trampoline (need one for each virtual function) */\n    std::string go(int n_times) {\n        /* Acquire GIL before calling Python code */\n        py::gil_scoped_acquire acquire;\n\n        PYBIND11_OVERLOAD_PURE(\n            std::string, /* Return type */\n            Animal,      /* Parent class */\n            go,          /* Name of function */\n            n_times      /* Argument(s) */\n        );\n    }\n};\n\nPYBIND11_MODULE(example, m) {\n    py::class_<Animal, PyAnimal> animal(m, \"Animal\");\n    animal\n        .def(py::init<>())\n        .def(\"go\", &Animal::go);\n\n    py::class_<Dog>(m, \"Dog\", animal)\n        .def(py::init<>());\n\n    m.def(\"call_go\", [](Animal *animal) -> std::string {\n        /* Release GIL before calling into (potentially long-running) C++ code */\n        py::gil_scoped_release release;\n        return call_go(animal);\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for Type Sizes in CMake\nDESCRIPTION: This snippet uses the `CHECK_TYPE_SIZE` macro to determine the size of various C data types in bytes. It defines variables such as `__INT8_LIBZIP`, `INT8_T_LIBZIP`, etc., storing the size of respective datatypes. This information can be used to ensure platform compatibility.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/libzip/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nCHECK_TYPE_SIZE(__int8 __INT8_LIBZIP)\nCHECK_TYPE_SIZE(int8_t INT8_T_LIBZIP)\nCHECK_TYPE_SIZE(uint8_t UINT8_T_LIBZIP)\nCHECK_TYPE_SIZE(__int16 __INT16_LIBZIP)\nCHECK_TYPE_SIZE(int16_t INT16_T_LIBZIP)\nCHECK_TYPE_SIZE(uint16_t UINT16_T_LIBZIP)\nCHECK_TYPE_SIZE(__int32 __INT32_LIBZIP)\nCHECK_TYPE_SIZE(int32_t INT32_T_LIBZIP)\nCHECK_TYPE_SIZE(uint32_t UINT32_T_LIBZIP)\nCHECK_TYPE_SIZE(__int64 __INT64_LIBZIP)\nCHECK_TYPE_SIZE(int64_t INT64_T_LIBZIP)\nCHECK_TYPE_SIZE(uint64_t UINT64_T_LIBZIP)\nCHECK_TYPE_SIZE(\"short\" SHORT_LIBZIP)\nCHECK_TYPE_SIZE(\"int\" INT_LIBZIP)\nCHECK_TYPE_SIZE(\"long\" LONG_LIBZIP)\nCHECK_TYPE_SIZE(\"long long\" LONG_LONG_LIBZIP)\nCHECK_TYPE_SIZE(\"off_t\" SIZEOF_OFF_T)\nCHECK_TYPE_SIZE(\"size_t\" SIZE_T_LIBZIP)\nCHECK_TYPE_SIZE(\"ssize_t\" SSIZE_T_LIBZIP)\n```\n\n----------------------------------------\n\nTITLE: Adding Compiler Options for non-MSVC\nDESCRIPTION: Adds compiler options for non-MSVC compilers, enabling various warnings and disabling specific ones (strict-aliasing, sign-compare, unused-parameter) due to false positives or low signal-to-noise ratio. Also checks if compiler extensions are disabled.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/c++/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nelse()\n  # Note that it's important to add new CXXFLAGS before ones specified by the\n  # user, so that the user's flags override them. This is particularly\n  # important if -Werror was enabled and then certain warnings need to be\n  # disabled, as is done in super-test.sh.\n  #\n  # We enable a lot of warnings, but then disable some:\n  # * strict-aliasing: We use type-punning in known-safe ways that GCC doesn't\n  #   recognize as safe.\n  # * sign-compare: Low S/N ratio.\n  # * unused-parameter: Low S/N ratio.\n  add_compile_options(-Wall -Wextra -Wno-strict-aliasing -Wno-sign-compare -Wno-unused-parameter)\n\n  if(DEFINED CMAKE_CXX_EXTENSIONS AND NOT CMAKE_CXX_EXTENSIONS)\n    message(SEND_ERROR \"Cap'n Proto requires compiler-specific extensions (e.g., -std=gnu++11). Please leave CMAKE_CXX_EXTENSIONS undefined or ON.\")\n  endif()\n\n  if (NOT ANDROID)\n    add_compile_options(-pthread)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: LZMA Distance Decoder Initialization in C++\nDESCRIPTION: This code defines variables and the `InitDist` function used for distance decoding in LZMA.  It initializes `PosSlotDecoder`, `PosDecoders`, and `AlignDecoder`. `PosSlotDecoder` is an array of 6-bit bit tree decoders. `AlignDecoder` is a `kNumAlignBits`-bit bit tree decoder. `PosDecoders` stores probability variables. INIT_PROBS is assumed to be a macro that initializes the probabilities.\nSOURCE: https://github.com/openai/retro/blob/master/cores/genesis/core/cd_hw/libchdr/deps/lzma/DOC/lzma-specification.txt#_snippet_22\n\nLANGUAGE: cpp\nCODE:\n```\n#define kEndPosModelIndex 14\n#define kNumFullDistances (1 << (kEndPosModelIndex >> 1))\n#define kNumAlignBits 4\n\nCBitTreeDecoder<6> PosSlotDecoder[kNumLenToPosStates];\nCProb PosDecoders[1 + kNumFullDistances - kEndPosModelIndex];\nCBitTreeDecoder<kNumAlignBits> AlignDecoder;\n\nvoid InitDist()\n{\n  for (unsigned i = 0; i < kNumLenToPosStates; i++)\n    PosSlotDecoder[i].Init();\n  AlignDecoder.Init();\n  INIT_PROBS(PosDecoders);\n}\n```\n\n----------------------------------------\n\nTITLE: Exposing Virtual Protected Member Functions with Publicist and Trampoline Classes in C++\nDESCRIPTION: This snippet demonstrates how to expose a virtual protected member function `foo` of class `A` using a 'publicist' and 'trampoline' class. The `Publicist` class inherits from `A` and makes the `foo` function public using `using A::foo;`.  The `Trampoline` class is used for allowing Python to override the C++ virtual functions. The protected function is accessed using the Publicist class.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/classes.rst#_snippet_43\n\nLANGUAGE: cpp\nCODE:\n```\nclass A {\npublic:\n    virtual ~A() = default;\n\nprotected:\n    virtual int foo() const { return 42; }\n};\n\nclass Trampoline : public A {\npublic:\n    int foo() const override { PYBIND11_OVERLOAD(int, A, foo, ); }\n};\n\nclass Publicist : public A {\npublic:\n    using A::foo;\n};\n\npy::class_<A, Trampoline>(m, \"A\") // <-- `Trampoline` here\n    .def(\"foo\", &Publicist::foo); // <-- `Publicist` here, not `Trampoline`!\n```\n\n----------------------------------------\n\nTITLE: Conditional Configuration for Tuple Support (CMake)\nDESCRIPTION: This snippet conditionally configures tests related to tuple support, specifically for compilers older than Visual Studio 2010.  It defines a library `gtest_main_use_own_tuple` and creates tests that use this library. It addresses potential conflicts with std::tr1 definitions in older Visual Studio versions.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nif (NOT MSVC OR MSVC_VERSION LESS 1600)  # 1600 is Visual Studio 2010.\n    # Visual Studio 2010, 2012, and 2013 define symbols in std::tr1 that\n    # conflict with our own definitions. Therefore using our own tuple does not\n    # work on those compilers.\n    cxx_library(gtest_main_use_own_tuple \"${cxx_use_own_tuple}\"\n      src/gtest-all.cc src/gtest_main.cc)\n\n    cxx_test_with_flags(gtest-tuple_test \"${cxx_use_own_tuple}\"\n      gtest_main_use_own_tuple test/gtest-tuple_test.cc)\n\n    cxx_test_with_flags(gtest_use_own_tuple_test \"${cxx_use_own_tuple}\"\n      gtest_main_use_own_tuple\n      test/gtest-param-test_test.cc test/gtest-param-test2_test.cc)\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Deriving Test Fixtures in Google Test (C++)\nDESCRIPTION: This code demonstrates how to share test fixture logic using inheritance in Google Test. A base test fixture `BaseTest` is defined, and then a derived fixture `FooTest` extends it, overriding `SetUp()` and `TearDown()` to perform additional setup and cleanup. Tests are then defined using `TEST_F()` with the derived fixture.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/FAQ.md#_snippet_7\n\nLANGUAGE: cpp\nCODE:\n```\n// Defines a base test fixture.\nclass BaseTest : public ::testing::Test {\n  protected:\n   ...\n};\n\n// Derives a fixture FooTest from BaseTest.\nclass FooTest : public BaseTest {\n  protected:\n    virtual void SetUp() {\n      BaseTest::SetUp();  // Sets up the base fixture first.\n      ... additional set-up work ...\n    }\n    virtual void TearDown() {\n      ... clean-up work for FooTest ...\n      BaseTest::TearDown();  // Remember to tear down the base fixture\n                             // after cleaning up FooTest!\n    }\n    ... functions and variables for FooTest ...\n};\n\n// Tests that use the fixture FooTest.\nTEST_F(FooTest, Bar) { ... }\nTEST_F(FooTest, Baz) { ... }\n\n... additional fixtures derived from BaseTest ...\n```\n\n----------------------------------------\n\nTITLE: Call go Function in C++\nDESCRIPTION: This C++ function `call_go` takes a pointer to an `Animal` object and calls its `go` method with a fixed number of times (3). It demonstrates how to interact with the virtual function.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/classes.rst#_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nstd::string call_go(Animal *animal) {\n    return animal->go(3);\n}\n```\n\n----------------------------------------\n\nTITLE: CBitTreeDecoder Class in C++\nDESCRIPTION: The `CBitTreeDecoder` class implements a bit tree decoder. It contains an array of `CProb` values, initializes them using `INIT_PROBS`, and provides methods to decode symbols from the bit tree in both normal and reverse order. The `Decode` method decodes bits from high bit to low bit, and `ReverseDecode` uses the `BitTreeReverseDecode` function to decode in reverse order.\nSOURCE: https://github.com/openai/retro/blob/master/cores/genesis/core/cd_hw/libchdr/deps/lzma/DOC/lzma-specification.txt#_snippet_13\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <unsigned NumBits>\nclass CBitTreeDecoder\n{\n  CProb Probs[(unsigned)1 << NumBits];\n\npublic:\n\n  void Init()\n  {\n    INIT_PROBS(Probs);\n  }\n\n  unsigned Decode(CRangeDecoder *rc)\n  {\n    unsigned m = 1;\n    for (unsigned i = 0; i < NumBits; i++)\n      m = (m << 1) + rc->DecodeBit(&Probs[m]);\n    return m - ((unsigned)1 << NumBits);\n  }\n\n  unsigned ReverseDecode(CRangeDecoder *rc)\n  {\n    return BitTreeReverseDecode(Probs, NumBits, rc);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Match Length Decoder Class Definition C++\nDESCRIPTION: This C++ class decodes the length of a match in the LZMA algorithm. It utilizes probability models (CProb) and bit tree decoders (CBitTreeDecoder) to determine the match length. The class includes methods for initialization and decoding, taking into account the position state.\nSOURCE: https://github.com/openai/retro/blob/master/cores/pce/deps/lzma-16.04/DOC/lzma-specification.txt#_snippet_16\n\nLANGUAGE: C++\nCODE:\n```\nclass CLenDecoder\n{\n  CProb Choice;\n  CProb Choice2;\n  CBitTreeDecoder<3> LowCoder[1 << kNumPosBitsMax];\n  CBitTreeDecoder<3> MidCoder[1 << kNumPosBitsMax];\n  CBitTreeDecoder<8> HighCoder;\n\npublic:\n\n  void Init()\n  {\n    Choice = PROB_INIT_VAL;\n    Choice2 = PROB_INIT_VAL;\n    HighCoder.Init();\n    for (unsigned i = 0; i < (1 << kNumPosBitsMax); i++)\n    {\n      LowCoder[i].Init();\n      MidCoder[i].Init();\n    }\n  }\n\n  unsigned Decode(CRangeDecoder *rc, unsigned posState)\n  {\n    if (rc->DecodeBit(&Choice) == 0)\n      return LowCoder[posState].Decode(rc);\n    if (rc->DecodeBit(&Choice2) == 0)\n      return 8 + MidCoder[posState].Decode(rc);\n    return 16 + HighCoder.Decode(rc);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Define C++ Tests with Standard Flags (CMake)\nDESCRIPTION: This section defines multiple C++ tests using the `cxx_test` macro. Each test is linked against either the `gtest` or `gtest_main` library.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\ncxx_test(gtest-death-test_test gtest_main)\ncxx_test(gtest_environment_test gtest)\ncxx_test(gtest-filepath_test gtest_main)\ncxx_test(gtest-linked_ptr_test gtest_main)\ncxx_test(gtest-listener_test gtest_main)\ncxx_test(gtest_main_unittest gtest_main)\ncxx_test(gtest-message_test gtest_main)\ncxx_test(gtest_no_test_unittest gtest)\ncxx_test(gtest-options_test gtest_main)\ncxx_test(gtest-param-test_test gtest\n    test/gtest-param-test2_test.cc)\ncxx_test(gtest-port_test gtest_main)\ncxx_test(gtest_pred_impl_unittest gtest_main)\ncxx_test(gtest_premature_exit_test gtest\n    test/gtest_premature_exit_test.cc)\ncxx_test(gtest-printers_test gtest_main)\ncxx_test(gtest_prod_test gtest_main\n    test/production.cc)\ncxx_test(gtest_repeat_test gtest)\ncxx_test(gtest_sole_header_test gtest_main)\ncxx_test(gtest_stress_test gtest)\ncxx_test(gtest-test-part_test gtest_main)\ncxx_test(gtest_throw_on_failure_ex_test gtest)\ncxx_test(gtest-typed-test_test gtest_main\n    test/gtest-typed-test2_test.cc)\ncxx_test(gtest_unittest gtest_main)\ncxx_test(gtest-unittest-api_test gtest)\n```\n\n----------------------------------------\n\nTITLE: Defining Interfaces with Inheritance in Cap'n Proto\nDESCRIPTION: This snippet illustrates the definition of interfaces in Cap'n Proto, including inheritance. `Node`, `Directory`, and `File` interfaces are defined, with `Directory` extending `Node` and `File` extending `Node`. Methods and their parameters/results are defined for each interface.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/doc/language.md#_snippet_10\n\nLANGUAGE: capnp\nCODE:\n```\ninterface Node {\n  isDirectory @0 () -> (result :Bool);\n}\n\ninterface Directory extends(Node) {\n  list @0 () -> (list :List(Entry));\n  struct Entry {\n    name @0 :Text;\n    node @1 :Node;\n  }\n\n  create @1 (name :Text) -> (file :File);\n  mkdir @2 (name :Text) -> (directory :Directory);\n  open @3 (name :Text) -> (node :Node);\n  delete @4 (name :Text);\n  link @5 (name :Text, node :Node);\n}\n\ninterface File extends(Node) {\n  size @0 () -> (size :UInt64);\n  read @1 (startAt :UInt64 = 0, amount :UInt64 = 0xffffffffffffffff)\n       -> (data :Data);\n  # Default params = read entire file.\n\n  write @2 (startAt :UInt64, data :Data);\n  truncate @3 (size :UInt64);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AddressBook Interface with HTTP Mapping in Cap'n Proto\nDESCRIPTION: This Cap'n Proto code defines an `AddressBook` interface and maps its methods to HTTP endpoints.  It uses the `$http` annotation to specify the HTTP method and route, as well as `$httpBody` to define how data is serialized/deserialized (in this case, JSON). The `$httpPath` annotation indicates which parameters are part of the URL path.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/doc/slides-2017.05.18/index.md#_snippet_20\n\nLANGUAGE: capnp\nCODE:\n```\ninterface AddressBook {\n  getPerson @0 (id :UInt32 $httpPath)\n            -> (person :Person $httpBody(type = json))\n      $http(method = get, route = \"person\");\n  # GET /person/<id>\n  # JSON response body\n\n  updatePerson @1 (id :UInt32 $httpPath,\n                   person :Person $httpBody(type = json));\n      $http(method = put, route = \"person\");\n  # PUT /person/<id>\n  # JSON request body\n}\n```\n\n----------------------------------------\n\nTITLE: MyClass Binding - C++\nDESCRIPTION: This C++ code snippet shows how to bind the MyClass to Python using pybind11, using different return value policies for the matrix accessor methods. The `get_matrix` and `view_matrix` methods use `reference_internal` to avoid copying, while `copy_matrix` will create a copy of the Eigen matrix in Python. The `reference_internal` policy ensures that the lifetime of the returned array is tied to that of the MyClass object.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/cast/eigen.rst#_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\npy::class_<MyClass>(m, \"MyClass\")\n        .def(py::init<>())\n        .def(\"copy_matrix\", &MyClass::getMatrix) // Makes a copy!\n        .def(\"get_matrix\", &MyClass::getMatrix, py::return_value_policy::reference_internal)\n        .def(\"view_matrix\", &MyClass::viewMatrix, py::return_value_policy::reference_internal)\n        ;\n```\n\n----------------------------------------\n\nTITLE: Buffer Info Definition for Eigen Matrix using pybind11\nDESCRIPTION: This code snippet shows how to define the `def_buffer` function for an Eigen Matrix to describe its buffer layout to Python. It specifies the pointer to the data, the size of each element, the format descriptor, the number of dimensions, the shape, and the strides. This enables direct access to the Eigen Matrix's data from Python.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/pycpp/numpy.rst#_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\n.def_buffer([](Matrix &m) -> py::buffer_info {\n    return py::buffer_info(\n        m.data(),                                /* Pointer to buffer */\n        sizeof(Scalar),                          /* Size of one scalar */\n        py::format_descriptor<Scalar>::format(), /* Python struct-style format descriptor */\n        2,                                       /* Number of dimensions */\n        { m.rows(), m.cols() },                  /* Buffer dimensions */\n        { sizeof(Scalar) * (rowMajor ? m.cols() : 1),\n          sizeof(Scalar) * (rowMajor ? 1 : m.rows()) }\n                                                 /* Strides (in bytes) for each index */\n    );\n })\n```\n\n----------------------------------------\n\nTITLE: Define PyAnimal and PyDog Trampoline Classes\nDESCRIPTION: This code defines the `PyAnimal` and `PyDog` trampoline classes, which inherit from `Animal` and `Dog` respectively, and overrides the virtual functions `go`, `name`, and `bark`.  It uses the `PYBIND11_OVERLOAD_PURE` and `PYBIND11_OVERLOAD` macros to enable Python overrides of the virtual functions.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/classes.rst#_snippet_9\n\nLANGUAGE: cpp\nCODE:\n```\nclass PyAnimal : public Animal {\npublic:\n    using Animal::Animal; // Inherit constructors\n    std::string go(int n_times) override { PYBIND11_OVERLOAD_PURE(std::string, Animal, go, n_times); }\n    std::string name() override { PYBIND11_OVERLOAD(std::string, Animal, name, ); }\n};\nclass PyDog : public Dog {\npublic:\n    using Dog::Dog; // Inherit constructors\n    std::string go(int n_times) override { PYBIND11_OVERLOAD_PURE(std::string, Dog, go, n_times); }\n    std::string name() override { PYBIND11_OVERLOAD(std::string, Dog, name, ); }\n    std::string bark() override { PYBIND11_OVERLOAD(std::string, Dog, bark, ); }\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling/Disabling None with py::arg().none() in C++\nDESCRIPTION: This C++ code snippet demonstrates how to use `py::arg(\"arg_name\").none(true/false)` to control whether a function can be called with `None` from Python. If `none(true)` is specified, `None` is accepted and the C++ function receives a `nullptr`. If `none(false)` is specified, calling the function with `None` raises a `TypeError`. Dependencies: pybind11.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/functions.rst#_snippet_17\n\nLANGUAGE: cpp\nCODE:\n```\npy::class_<Dog>(m, \"Dog\").def(py::init<>());\npy::class_<Cat>(m, \"Cat\").def(py::init<>());\nm.def(\"bark\", [](Dog *dog) -> std::string {\n    if (dog) return \"woof!\"; /* Called with a Dog instance */\n    else return \"(no dog)\"; /* Called with None, d == nullptr */\n}, py::arg(\"dog\").none(true));\nm.def(\"meow\", [](Cat *cat) -> std::string {\n    // Can't be called with None argument\n    return \"meow\";\n}, py::arg(\"cat\").none(false));\n```\n\n----------------------------------------\n\nTITLE: Python Usage of C++ Functions with None Handling\nDESCRIPTION: This Python code demonstrates calling the C++ functions defined in the previous snippet.  It shows how `bark(None)` returns a specific string due to `none(true)` in the C++ definition, while `meow(None)` raises a `TypeError` because `none(false)` was used. Requires the 'animals' module to be built from the C++ code.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/functions.rst#_snippet_18\n\nLANGUAGE: pycon\nCODE:\n```\n>>> from animals import Dog, Cat, bark, meow\n>>> bark(Dog())\n'woof!'\n>>> meow(Cat())\n'meow'\n>>> bark(None)\n'(no dog)'\n>>> meow(None)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: meow(): incompatible function arguments. The following argument types are supported:\n    1. (cat: animals.Cat) -> str\n\nInvoked with: None\n```\n\n----------------------------------------\n\nTITLE: Decoding LZMA Properties in C++\nDESCRIPTION: This C++ code decodes LZMA properties from a byte array. It extracts lc, lp, pb, and dictSize from the encoded form. It also includes a check to ensure that the decoded dictionary size is not smaller than a minimum value (LZMA_DIC_MIN), setting it to the minimum value if it is.\nSOURCE: https://github.com/openai/retro/blob/master/cores/genesis/core/cd_hw/libchdr/deps/lzma/DOC/lzma-specification.txt#_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n  unsigned lc, pb, lp;\n  UInt32 dictSize;\n  UInt32 dictSizeInProperties;\n\n  void DecodeProperties(const Byte *properties)\n  {\n    unsigned d = properties[0];\n    if (d >= (9 * 5 * 5))\n      throw \"Incorrect LZMA properties\";\n    lc = d % 9;\n    d /= 9;\n    pb = d / 5;\n    lp = d % 5;\n    dictSizeInProperties = 0;\n    for (int i = 0; i < 4; i++)\n      dictSizeInProperties |= (UInt32)properties[i + 1] << (8 * i);\n    dictSize = dictSizeInProperties;\n    if (dictSize < LZMA_DIC_MIN)\n      dictSize = LZMA_DIC_MIN;\n  }\n```\n\n----------------------------------------\n\nTITLE: Binding Matrix to Python with Buffer Support using pybind11\nDESCRIPTION: This code snippet shows how to bind the Matrix class to Python using pybind11, enabling the buffer protocol. The `def_buffer` method defines a lambda function that returns a `py::buffer_info` struct, describing the matrix's data layout. This enables efficient data exchange between the C++ Matrix and Python's NumPy arrays.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/pycpp/numpy.rst#_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\npy::class_<Matrix>(m, \"Matrix\", py::buffer_protocol())\n   .def_buffer([](Matrix &m) -> py::buffer_info {\n        return py::buffer_info(\n            m.data(),                               /* Pointer to buffer */\n            sizeof(float),                          /* Size of one scalar */\n            py::format_descriptor<float>::format(), /* Python struct-style format descriptor */\n            2,                                      /* Number of dimensions */\n            { m.rows(), m.cols() },                 /* Buffer dimensions */\n            { sizeof(float) * m.rows(),             /* Strides (in bytes) for each index */\n              sizeof(float) }\n        );\n    });\n```\n\n----------------------------------------\n\nTITLE: Applying GPL: Copyright Notice Template\nDESCRIPTION: This code snippet is a template for adding a copyright notice to the beginning of each source file in a program released under the GNU General Public License.  It specifies the program's name, author, and the terms under which it is distributed. It references the GNU GPL and clarifies the absence of warranty.\nSOURCE: https://github.com/openai/retro/blob/master/cores/snes/docs/gpl-2.0.txt#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n<one line to give the program's name and a brief idea of what it does.>\nCopyright (C) <year>  <name of author>\n\nThis program is free software; you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation; either version 2 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License along\nwith this program; if not, write to the Free Software Foundation, Inc.,\n51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n```\n\n----------------------------------------\n\nTITLE: Building Sample Tests with gtest_main\nDESCRIPTION: This snippet defines several sample tests using `cxx_executable`.  Each test links against `gtest_main` and may include specific source files.  The `gtest_build_samples` option controls whether these sample tests are built. Setting `gtest_build_samples` to `ON` enables building the samples.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif (gtest_build_samples)\n  cxx_executable(sample1_unittest samples gtest_main samples/sample1.cc)\n  cxx_executable(sample2_unittest samples gtest_main samples/sample2.cc)\n  cxx_executable(sample3_unittest samples gtest_main)\n  cxx_executable(sample4_unittest samples gtest_main samples/sample4.cc)\n  cxx_executable(sample5_unittest samples gtest_main samples/sample1.cc)\n  cxx_executable(sample6_unittest samples gtest_main)\n  cxx_executable(sample7_unittest samples gtest_main)\n  cxx_executable(sample8_unittest samples gtest_main)\n  cxx_executable(sample9_unittest samples gtest)\n  cxx_executable(sample10_unittest samples gtest)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Wide Character String Handling in C++\nDESCRIPTION: This C++ code demonstrates the handling of wide character strings (`std::wstring`) in pybind11. It defines two functions, `set_window_text` and `get_window_text`, which interact with Windows API functions to set and retrieve window text. These functions showcase the implicit conversion between Python `str` and C++ `std::wstring` using UTF-16 encoding.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/cast/strings.rst#_snippet_10\n\nLANGUAGE: C++\nCODE:\n```\n#define UNICODE\n#include <windows.h>\n\nm.def(\"set_window_text\",\n    [](HWND hwnd, std::wstring s) {\n        // Call SetWindowText with null-terminated UTF-16 string\n        ::SetWindowText(hwnd, s.c_str());\n    }\n);\nm.def(\"get_window_text\",\n    [](HWND hwnd) {\n        const int buffer_size = ::GetWindowTextLength(hwnd) + 1;\n        auto buffer = std::make_unique< wchar_t[] >(buffer_size);\n\n        ::GetWindowText(hwnd, buffer.data(), buffer_size);\n\n        std::wstring text(buffer.get());\n\n        // wstring will be converted to Python str\n        return text;\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Vector2 Class Definition (C++)\nDESCRIPTION: This snippet defines a `Vector2` class with overloaded operators for addition, scalar multiplication, and compound assignment. It also includes a `toString` method for string representation. This class is used as an example to demonstrate operator overloading with pybind11.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/classes.rst#_snippet_23\n\nLANGUAGE: cpp\nCODE:\n```\nclass Vector2 {\npublic:\n    Vector2(float x, float y) : x(x), y(y) { }\n\n    Vector2 operator+(const Vector2 &v) const { return Vector2(x + v.x, y + v.y); }\n    Vector2 operator*(float value) const { return Vector2(x * value, y * value); }\n    Vector2& operator+=(const Vector2 &v) { x += v.x; y += v.y; return *this; }\n    Vector2& operator*=(float v) { x *= v; y *= v; return *this; }\n\n    friend Vector2 operator*(float f, const Vector2 &v) {\n        return Vector2(f * v.x, f * v.y);\n    }\n\n    std::string toString() const {\n        return \"[\" + std::to_string(x) + \", \" + std::to_string(y) + \"]\";\n    }\nprivate:\n    float x, y;\n};\n```\n\n----------------------------------------\n\nTITLE: Pickling Functions API C++\nDESCRIPTION: This code illustrates the change from using __getstate__ and __setstate__ to py::pickle() for getting and setting object state. This is the preferred way now. The new approach simplifies serialization and deserialization.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/upgrade.rst#_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\n// old -- deprecated (runtime warning shown only in debug mode)\npy::class<Foo>(m, \"Foo\")\n    ...\n    .def(\"__getstate__\", [](const Foo &self) {\n        return py::make_tuple(self.value1(), self.value2(), ...);\n    })\n    .def(\"__setstate__\", [](Foo &self, py::tuple t) {\n        new (&self) Foo(t[0].cast<std::string>(), ...);\n    });\n\n// new\npy::class<Foo>(m, \"Foo\")\n    ...\n    .def(py::pickle(\n        [](const Foo &self) { // __getstate__\n            return py::make_tuple(f.value1(), f.value2(), ...); // unchanged\n        },\n        [](py::tuple t) { // __setstate__, note: no `self` argument\n            return new Foo(t[0].cast<std::string>(), ...);\n            // or: return std::make_unique<Foo>(...); // return by holder\n            // or: return Foo(...); // return by value (move constructor)\n        }\n    ));\n```\n\n----------------------------------------\n\nTITLE: Installation Rules for gtest and gtest_main\nDESCRIPTION: This snippet defines the installation rules for the `gtest` and `gtest_main` targets, including runtime, archive, and library destinations. It also installs the Google Test header files and configures and installs pkgconfig files. The `INSTALL_GTEST` variable controls whether the installation steps are executed.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(INSTALL_GTEST)\n  install(TARGETS gtest gtest_main\n    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}\n    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}\n    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR})\n  install(DIRECTORY ${gtest_SOURCE_DIR}/include/gtest\n    DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})\n\n  # configure and install pkgconfig files\n  configure_file(\n    cmake/gtest.pc.in\n    \"${CMAKE_BINARY_DIR}/gtest.pc\"\n    @ONLY)\n  configure_file(\n    cmake/gtest_main.pc.in\n    \"${CMAKE_BINARY_DIR}/gtest_main.pc\"\n    @ONLY)\n  install(FILES \"${CMAKE_BINARY_DIR}/gtest.pc\" \"${CMAKE_BINARY_DIR}/gtest_main.pc\"\n    DESTINATION \"${CMAKE_INSTALL_LIBDIR}/pkgconfig\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Update CRC Calculation in C\nDESCRIPTION: This code snippet updates a running CRC value with the bytes from a buffer.  It uses the pre-computed CRC table for efficient calculation. The CRC is initialized to zero and pre- and post-conditioning (one's complement) is performed within the function.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/third-party/zlib/doc/rfc1952.txt#_snippet_7\n\nLANGUAGE: C\nCODE:\n```\n/*\n   Update a running crc with the bytes buf[0..len-1] and return\n the updated crc. The crc should be initialized to zero. Pre- and\n post-conditioning (one's complement) is performed within this\n function so it shouldn't be done by the caller. Usage example:\n\n   unsigned long crc = 0L;\n\n   while (read_buffer(buffer, length) != EOF) {\n     crc = update_crc(crc, buffer, length);\n   }\n   if (crc != original_crc) error();\n*/\nunsigned long update_crc(unsigned long crc,\n                unsigned char *buf, int len)\n{\n  unsigned long c = crc ^ 0xffffffffL;\n  int n;\n\n  if (!crc_table_computed)\n    make_crc_table();\n  for (n = 0; n < len; n++) {\n    c = crc_table[(c ^ buf[n]) & 0xff] ^ (c >> 8);\n  }\n  return c ^ 0xffffffffL;\n}\n```\n\n----------------------------------------\n\nTITLE: Generated C++ Code: Classes Foo0 to Foo3\nDESCRIPTION: This C++ code is the result of processing the Pump code in the previous example. It defines classes `Foo0` to `Foo3` with a varying number of template arguments (`A1`, `A2`, `A3`) and different member variables (`a`, `b`, `c`) based on the value of the meta-variable `i` in the Pump code.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/PumpManual.md#_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n// Foo0 does blah for 0-ary predicates.\ntemplate <size_t N>\nclass Foo0 {\n  blah a;\n};\n\n// Foo1 does blah for 1-ary predicates.\ntemplate <size_t N, typename A1>\nclass Foo1 {\n  blah b;\n};\n\n// Foo2 does blah for 2-ary predicates.\ntemplate <size_t N, typename A1, typename A2>\nclass Foo2 {\n  blah b;\n};\n\n// Foo3 does blah for 3-ary predicates.\ntemplate <size_t N, typename A1, typename A2, typename A3>\nclass Foo3 {\n  blah c;\n};\n```\n\n----------------------------------------\n\nTITLE: Pump Code Example: Generating C++ Classes\nDESCRIPTION: This Pump code demonstrates how to generate C++ classes with varying template parameters based on meta-variables and loops.  It defines a meta-variable `n`, iterates through a range using `$for`, and conditionally generates code using `$if`.  The output is C++ code with classes `Foo0`, `Foo1`, `Foo2`, and `Foo3` with different template arguments and members.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/PumpManual.md#_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n$var n = 3     $$ Defines a meta variable n.\n$range i 0..n  $$ Declares the range of meta iterator i (inclusive).\n$for i [[\n               $$ Meta loop.\n// Foo$i does blah for $i-ary predicates.\n$range j 1..i\ntemplate <size_t N $for j [[, typename A$j]]>\nclass Foo$i {\n$if i == 0 [[\n  blah a;\n]] $elif i <= 2 [[\n  blah b;\n]] $else [[\n  blah c;\n]]\n};\n\n]]\n```\n\n----------------------------------------\n\nTITLE: Install zlib on Linux\nDESCRIPTION: Installs the zlib development package on Linux. This library is required for compression and decompression functionalities within Gym Retro.\nSOURCE: https://github.com/openai/retro/blob/master/docs/developing.rst#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt-get install zlib1g-dev\n```\n\n----------------------------------------\n\nTITLE: Python pseudocode simulating file system operations\nDESCRIPTION: This Python pseudocode demonstrates how to interact with the file system defined in the previous Cap'n Proto snippet. It shows a sequence of operations to open a directory, open a file within that directory, get the file size, and read the file data. It emphasizes how Cap'n Proto's promise pipelining can collapse multiple calls into a single network round trip, reducing latency.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/doc/rpc.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# pseudocode\nbar = root.open(\"bar\");    # 1\nfoo = bar.open(\"foo\");     # 2\nsize = foo.size();         # 3\ndata = foo.read(0, size);  # 4\n# The above is four calls but takes only one network\n# round trip with Cap'n Proto!\n```\n\n----------------------------------------\n\nTITLE: Google Mock Expectation Ordering with Sequences\nDESCRIPTION: This code shows how to use sequences to specify the order in which expectations must be matched.  All expected calls in the same sequence must occur in the order they are specified. It defines two sequences, s1 and s2, and specifies that Reset() must be called before both GetSize() and Describe(), and the latter two can occur in any order.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googlemock/docs/CheatSheet.md#_snippet_16\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::Sequence;\nSequence s1, s2;\n...\nEXPECT_CALL(foo, Reset())\n    .InSequence(s1, s2)\n    .WillOnce(Return(true));\nEXPECT_CALL(foo, GetSize())\n    .InSequence(s1)\n    .WillOnce(Return(1));\nEXPECT_CALL(foo, Describe(A<const char*>()))\n    .InSequence(s2)\n    .WillOnce(Return(\"dummy\"));\n```\n\n----------------------------------------\n\nTITLE: XML Report Example\nDESCRIPTION: Example XML report generated by Google Test, showing test suites, test cases, and failures. The report contains information such as test names, status, time, and failure messages, adhering to a JUnit-inspired format.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/AdvancedGuide.md#_snippet_54\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<testsuites tests=\"3\" failures=\"1\" errors=\"0\" time=\"35\" name=\"AllTests\">\n  <testsuite name=\"MathTest\" tests=\"2\" failures=\"1\" errors=\"0\" time=\"15\">\n    <testcase name=\"Addition\" status=\"run\" time=\"7\" classname=\"\">\n      <failure message=\"Value of: add(1, 1)&#x0A; Actual: 3&#x0A;Expected: 2\" type=\"\"/>\n      <failure message=\"Value of: add(1, -1)&#x0A; Actual: 1&#x0A;Expected: 0\" type=\"\"/>\n    </testcase>\n    <testcase name=\"Subtraction\" status=\"run\" time=\"5\" classname=\"\">\n    </testcase>\n  </testsuite>\n  <testsuite name=\"LogicTest\" tests=\"1\" failures=\"0\" errors=\"0\" time=\"5\">\n    <testcase name=\"NonContradiction\" status=\"run\" time=\"5\" classname=\"\">\n    </testcase>\n  </testsuite>\n</testsuites>\n```\n\n----------------------------------------\n\nTITLE: Using SCOPED_TRACE Macro in Sub-routines C++\nDESCRIPTION: This snippet demonstrates the use of the SCOPED_TRACE macro to add file name, line number, and a custom message to failure messages when assertions in sub-routines fail. This helps identify the specific invocation of a sub-routine that caused the failure when it's called from multiple locations. The trace effect is undone when control leaves the lexical scope.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/AdvancedGuide.md#_snippet_13\n\nLANGUAGE: C++\nCODE:\n```\nvoid Sub1(int n) {\n  EXPECT_EQ(1, Bar(n));\n  EXPECT_EQ(2, Bar(n + 1));\n}\n\nTEST(FooTest, Bar) {\n  {\n    SCOPED_TRACE(\"A\");  // This trace point will be included in\n                        // every failure in this scope.\n    Sub1(1);\n  }\n  // Now it won't.\n  Sub1(9);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining additional targets and conditional build\nDESCRIPTION: This section defines targets for running the application via 3DSLink, installing the CIA file, and conditionally building a performance-related 3DSX file based on the `BUILD_PERF` flag.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/platform/3ds/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_target(run ${3DSLINK} ${CMAKE_CURRENT_BINARY_DIR}/${BINARY_NAME}.3dsx\n                  DEPENDS ${BINARY_NAME}.3dsx)\n\nadd_custom_target(install-cia stat -f '0 00000001 %016Xz' '${CMAKE_CURRENT_BINARY_DIR}/${BINARY_NAME}.cia' | xxd -r | cat -- - '${CMAKE_CURRENT_BINARY_DIR}/${BINARY_NAME}.cia' | nc $ENV{N3DS_IP} 5000\n                  DEPENDS ${BINARY_NAME}.cia)\n\nif(BUILD_PERF)\n\tadd_custom_target(${BINARY_NAME}-perf.3dsx ALL\n\t                  ${3DSXTOOL} ../${BINARY_NAME}-perf ${BINARY_NAME}-perf.3dsx --smdh=${BINARY_NAME}.smdh\n\t                  DEPENDS ${BINARY_NAME}-perf ${BINARY_NAME}.smdh)\n\tinstall(FILES\n\t\t    ${CMAKE_CURRENT_BINARY_DIR}/${BINARY_NAME}-perf.3dsx\n\t\t    DESTINATION . COMPONENT ${BINARY_NAME}-3ds)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining a MockTurtle Class in C++ using Google Mock\nDESCRIPTION: This code defines a MockTurtle class that inherits from the Turtle interface and uses Google Mock's MOCK_METHOD macros to create mock implementations of the virtual functions. This allows for setting expectations on how the mock object is used during testing and verifying that the code interacts with the Turtle interface as intended. The `gmock/gmock.h` header is required.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googlemock/docs/ForDummies.md#_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include \"gmock/gmock.h\"  // Brings in Google Mock.\nclass MockTurtle : public Turtle {\n public:\n  ...\n  MOCK_METHOD0(PenUp, void());\n  MOCK_METHOD0(PenDown, void());\n  MOCK_METHOD1(Forward, void(int distance));\n  MOCK_METHOD1(Turn, void(int degrees));\n  MOCK_METHOD2(GoTo, void(int x, int y));\n  MOCK_CONST_METHOD0(GetX, int());\n  MOCK_CONST_METHOD0(GetY, int());\n};\n```\n\n----------------------------------------\n\nTITLE: Match Distance Decoding Function C++\nDESCRIPTION: This C++ function, DecodeDistance, decodes the zero-based match distance in LZMA. It calculates the 'lenState' based on the match length, decodes a 'posSlot' value, and then uses the 'posSlot' to determine the distance value.  It utilizes bit tree decoders and direct bit decoding based on the 'posSlot' value.\nSOURCE: https://github.com/openai/retro/blob/master/cores/pce/deps/lzma-16.04/DOC/lzma-specification.txt#_snippet_19\n\nLANGUAGE: C++\nCODE:\n```\nunsigned DecodeDistance(unsigned len)\n{\n  unsigned lenState = len;\n  if (lenState > kNumLenToPosStates - 1)\n    lenState = kNumLenToPosStates - 1;\n  \n  unsigned posSlot = PosSlotDecoder[lenState].Decode(&RangeDec);\n  if (posSlot < 4)\n    return posSlot;\n  \n  unsigned numDirectBits = (unsigned)((posSlot >> 1) - 1);\n  UInt32 dist = ((2 | (posSlot & 1)) << numDirectBits);\n  if (posSlot < kEndPosModelIndex)\n    dist += BitTreeReverseDecode(PosDecoders + dist - posSlot, numDirectBits, &RangeDec);\n  else\n  {\n    dist += RangeDec.DecodeDirectBits(numDirectBits - kNumAlignBits) << kNumAlignBits;\n    dist += AlignDecoder.ReverseDecode(&RangeDec);\n  }\n  return dist;\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Element from Struct List in Cap'n Proto (Manual)\nDESCRIPTION: This C++ code snippet demonstrates how to remove an element from a list of structs within a Cap'n Proto message by manually re-copying the elements. It involves disowning the existing list, initializing a new list with the reduced size, and copying the elements while skipping the element at the specified index.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/doc/slides-2017.05.18/index.md#_snippet_18\n\nLANGUAGE: c++\nCODE:\n```\ncapnp::MallocMessageBuilder message;\ncapnp::readMessageCopy(input, message);\nauto root = message.getRoot<MyStruct>();\nauto oldListOrphan = root.disownStructList();\nauto oldList = oldListOrphan.getReader();\nauto newList = root.initStructList(oldList.size() - 1);\nfor (auto i: kj::indices(newList)) {\n  newList.setWithCaveats(i,\n      oldList[i < indexToRemove ? i : i + 1]);\n}\ncapnp::MallocMessageBuilder message2;\nmessage2.setRoot(root.asReader());\ncapnp::writeMessage(output, message2);\n```\n\n----------------------------------------\n\nTITLE: Creating custom commands for SMDH, XML, and BNR files\nDESCRIPTION: This section adds custom commands to generate SMDH (application metadata), XML (homebrew launcher metadata), and BNR (banner) files. These files are essential for 3DS homebrew applications.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/platform/3ds/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_command(OUTPUT ${BINARY_NAME}.smdh\n                   COMMAND ${BANNERTOOL} makesmdh -s \"${PROJECT_NAME}\" -l \"${SUMMARY}\" -p \"endrift\" -i ${CMAKE_SOURCE_DIR}/res/mgba-48.png -o ${BINARY_NAME}.smdh\n                   DEPENDS ${CMAKE_SOURCE_DIR}/res/mgba-48.png)\n\nadd_custom_command(OUTPUT ${BINARY_NAME}.xml\n                   COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_SOURCE_DIR}/hbl.xml ${BINARY_NAME}.xml\n                   DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/hbl.xml)\n\nadd_custom_command(OUTPUT ${BINARY_NAME}.bnr\n                   COMMAND ${BANNERTOOL} makebanner -ci ${CMAKE_CURRENT_SOURCE_DIR}/banner.cgfx -a ${CMAKE_CURRENT_SOURCE_DIR}/bios.wav -o ${BINARY_NAME}.bnr\n                   DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/banner.cgfx ${CMAKE_CURRENT_SOURCE_DIR}/bios.wav)\n```\n\n----------------------------------------\n\nTITLE: Specifying pip Requirements\nDESCRIPTION: This code snippet defines the necessary Python packages for the retro project along with specific versions and SHA256 hashes. These hashes are used by pip to verify the integrity of the downloaded packages. Each package is specified with its version and two SHA256 hashes to ensure that the downloaded package matches the expected one, preventing potential security risks or compatibility issues.\nSOURCE: https://github.com/openai/retro/blob/master/docker/linux/build_scripts/requirements.txt#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\npip==18.1 \\\n    --hash=sha256:7909d0a0932e88ea53a7014dfd14522ffef91a464daaaf5c573343852ef98550 \\\n    --hash=sha256:c0a292bd977ef590379a3f05d7b7f65135487b67470f6281289a94e015650ea1\n```\n\n----------------------------------------\n\nTITLE: Setting CMake variables for 3DS build\nDESCRIPTION: This snippet sets CMake variables to configure the 3DS build, including enabling 3DS-specific file support, defining compiler flags, and setting OS-related definitions. It also finds required programs like 3dslink, 3dsxtool, bannertool, makerom, picasso, raw2c, and strip.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/platform/3ds/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(USE_VFS_3DS ON CACHE BOOL \"Use 3DS-specific file support\")\nmark_as_advanced(USE_VFS_3DS)\n\nfind_program(3DSLINK 3dslink)\nfind_program(3DSXTOOL 3dsxtool)\nfind_program(BANNERTOOL bannertool)\nfind_program(MAKEROM makerom)\nfind_program(PICASSO picasso)\nfind_program(RAW2C raw2c)\nfind_program(STRIP ${cross_prefix}strip)\n\nset(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -Wno-format\" PARENT_SCOPE)\nset(OS_DEFINES COLOR_16_BIT COLOR_5_6_5 IOAPI_NO_64)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries with CMake\nDESCRIPTION: This CMake snippet conditionally links necessary libraries for the retro target, including python bindings, retro-base, and static linker flags. It uses variables such as PYTHON_LIBRARY, PYBIND_LIBS, and STATIC_LDFLAGS, which should be set elsewhere in the file or higher-level CMake files. The if statement ensures that the linking only happens when the target retro is defined.\nSOURCE: https://github.com/openai/retro/blob/master/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(RETRO_FOUND)\n    if(PYBIND11_FOUND)\n        if(WIN32)\n            set(PYBIND_LIBS \"${PYTHON_LIBRARIES}\")\n        else()\n            set(PYBIND_LIBS \"${PYTHON_LIBRARY}\")\n        endif()\n        set(PYBIND_LIBS \"${PYTHON_LIBRARY}\")\n    endif()\n    target_link_libraries(retro retro-base ${PYBIND_LIBS} ${STATIC_LDFLAGS})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining the Turtle Interface in C++\nDESCRIPTION: This code defines a Turtle interface with methods for controlling a drawing turtle, including PenUp, PenDown, Forward, Turn, GoTo, GetX, and GetY. The destructor is declared virtual to ensure proper cleanup when inheriting from this class.  This allows for a real implementation to be swapped out for a mock during testing.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googlemock/docs/ForDummies.md#_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nclass Turtle {\n  ...\n  virtual ~Turtle() {}\n  virtual void PenUp() = 0;\n  virtual void PenDown() = 0;\n  virtual void Forward(int distance) = 0;\n  virtual void Turn(int degrees) = 0;\n  virtual void GoTo(int x, int y) = 0;\n  virtual int GetX() const = 0;\n  virtual int GetY() const = 0;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining MyClass with std::vector as a Member\nDESCRIPTION: This C++ code defines a class `MyClass` with a `std::vector<int>` named `contents` as a member. It demonstrates how `def_readwrite` can be used to expose this member to Python. However, modifications such as `append` on the Python side will not modify the original vector within the `MyClass` instance due to copies.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/cast/stl.rst#_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\n/* ... definition ... */\n\nclass MyClass {\n    std::vector<int> contents;\n};\n\n/* ... binding code ... */\n\npy::class_<MyClass>(m, \"MyClass\")\n    .def(py::init<>())\n    .def_readwrite(\"contents\", &MyClass::contents);\n```\n\n----------------------------------------\n\nTITLE: Setting Build Options in CMake\nDESCRIPTION: This snippet defines several build options for Google Test using the `option` command. These options control whether to build shared libraries, force the use of shared run-time libraries, build Google Test's own tests and samples, disable pthreads, and hide internal symbols. These options can be toggled via the CMake GUI or command line.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\noption(BUILD_SHARED_LIBS \"Build shared libraries (DLLs).\" OFF)\n\noption(\n  gtest_force_shared_crt\n  \"Use shared (DLL) run-time lib even when Google Test is built as static lib.\"\n  OFF)\n\noption(gtest_build_tests \"Build all of gtest's own tests.\" OFF)\n\noption(gtest_build_samples \"Build gtest's sample programs.\" OFF)\n\noption(gtest_disable_pthreads \"Disable uses of pthreads in gtest.\" OFF)\n\noption(\n  gtest_hide_internal_symbols\n  \"Build gtest with internal symbols hidden in shared libraries.\"\n  OFF)\n```\n\n----------------------------------------\n\nTITLE: Applying GPL to new programs\nDESCRIPTION: These are example notices to be attached to the program's source files. They convey the exclusion of warranty and provide a reference to the full license text.  It includes the copyright line and a pointer to the complete notice.\nSOURCE: https://github.com/openai/retro/blob/master/LICENSES.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n   <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 2 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program; if not, write to the Free Software\n    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n```\n\n----------------------------------------\n\nTITLE: Accessing MyClass Matrix - Python\nDESCRIPTION: This Python code demonstrates how to access the Eigen matrix within the MyClass object, showcasing different behavior based on the return value policies defined in the C++ binding. 'm' references the original matrix, 'v' provides a read-only view, and 'c' creates a copy. Flags are set appropriately to indicate ownership and writeability.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/cast/eigen.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\na = MyClass()\nm = a.get_matrix()   # flags.writeable = True,  flags.owndata = False\nv = a.view_matrix()  # flags.writeable = False, flags.owndata = False\nc = a.copy_matrix()  # flags.writeable = True,  flags.owndata = True\n# m[5,6] and v[5,6] refer to the same element, c[5,6] does not.\n```\n\n----------------------------------------\n\nTITLE: Coders Info Structure\nDESCRIPTION: Describes the structure of Coders Info within the 7z archive.  It includes information about folders, external data streams, unpack sizes, and CRCs for data integrity. The code demonstrates how the `External` flag impacts folder processing, as well as how unpack sizes and CRCs are organized and read for each folder.\nSOURCE: https://github.com/openai/retro/blob/master/cores/pce/deps/lzma-16.04/DOC/7zFormat.txt#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nBYTE NID::kUnPackInfo  (0x07)\n\n\nBYTE NID::kFolder  (0x0B)\nUINT64 NumFolders\nBYTE External\nswitch(External)\n{\n  case 0:\n    Folders[NumFolders]\n  case 1:\n    UINT64 DataStreamIndex\n}\n\n\nBYTE ID::kCodersUnPackSize  (0x0C)\nfor(Folders)\n  for(Folder.NumOutStreams)\n   UINT64 UnPackSize;\n\n\n[]\nBYTE NID::kCRC   (0x0A)\nUnPackDigests[NumFolders]\n[]\n\n\n\nBYTE NID::kEnd\n```\n\n----------------------------------------\n\nTITLE: Applying LGPL to a New Library\nDESCRIPTION: This snippet provides instructions and a template for applying the GNU Lesser General Public License to a new software library. It includes the necessary copyright notice, license terms, warranty disclaimer, and contact information to be added to each source file.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/third-party/blip_buf/license.txt#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n<one line to give the library's name and a brief idea of what it does.>\nCopyright (C) <year>  <name of author>\n\nThis library is free software; you can redistribute it and/or\nmodify it under the terms of the GNU Lesser General Public\nLicense as published by the Free Software Foundation; either\nversion 2.1 of the License, or (at your option) any later version.\n\nThis library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nLesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public\nLicense along with this library; if not, write to the Free Software\nFoundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n```\n\n----------------------------------------\n\nTITLE: LZMA Encoding Stream Callbacks Setup (C)\nDESCRIPTION: This code segment demonstrates how to set up callback functions for stream input and output, along with a memory allocator, for LZMA encoding in C. It assigns custom read and write functions (`MyRead` and `MyWrite`) to the input and output stream structures, respectively, and defines a custom allocator (`g_Alloc`) using `SzAlloc` and `SzFree`.\nSOURCE: https://github.com/openai/retro/blob/master/cores/genesis/core/cd_hw/libchdr/deps/lzma/DOC/lzma.txt#_snippet_3\n\nLANGUAGE: C\nCODE:\n```\nstatic void *SzAlloc(void *p, size_t size) { p = p; return MyAlloc(size); }\nstatic void SzFree(void *p, void *address) {  p = p; MyFree(address); }\nstatic ISzAlloc g_Alloc = { SzAlloc, SzFree };\n\nCFileSeqInStream inStream;\nCFileSeqOutStream outStream;\n\ninStream.funcTable.Read = MyRead;\ninStream.file = inFile;\noutStream.funcTable.Write = MyWrite;\noutStream.file = outFile;\n```\n\n----------------------------------------\n\nTITLE: Registering an Advanced Exception Translator in pybind11 (C++)\nDESCRIPTION: This code snippet demonstrates how to register a more advanced exception translator using `py::register_exception_translator`. It handles two hypothetical exception classes, `MyCustomException` and `OtherException`, translating the first to a custom Python exception `MyCustomError` and the second to a standard Python `RuntimeError`.  It demonstrates how to use `std::rethrow_exception`, `PyErr_SetString`, and a custom exception's call operator to set Python exceptions.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/exceptions.rst#_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nstatic py::exception<MyCustomException> exc(m, \"MyCustomError\");\npy::register_exception_translator([](std::exception_ptr p) {\n    try {\n        if (p) std::rethrow_exception(p);\n    } catch (const MyCustomException &e) {\n        exc(e.what());\n    } catch (const OtherException &e) {\n        PyErr_SetString(PyExc_RuntimeError, e.what());\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Class Binding Example with pybind11 (C++)\nDESCRIPTION: This code snippet demonstrates how to bind a C++ class to Python using pybind11. It defines a C++ class `cl034` with four methods and then uses `py::class_` to expose this class to Python.  The `PYBIND11_MODULE` macro defines the Python module.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/benchmark.rst#_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nclass cl034 {\npublic:\n    cl279 *fn_000(cl084 *, cl057 *, cl065 *, cl042 *);\n    cl025 *fn_001(cl098 *, cl262 *, cl414 *, cl121 *);\n    cl085 *fn_002(cl445 *, cl297 *, cl145 *, cl421 *);\n    cl470 *fn_003(cl200 *, cl323 *, cl332 *, cl492 *);\n};\n\nPYBIND11_MODULE(example, m) {\n    py::class_<cl034>(m, \"cl034\")\n        .def(\"fn_000\", &cl034::fn_000)\n        .def(\"fn_001\", &cl034::fn_001)\n        .def(\"fn_002\", &cl034::fn_002)\n        .def(\"fn_003\", &cl034::fn_003);\n}\n```\n\n----------------------------------------\n\nTITLE: Read Pointer Register with Modifier (pr_modif_read)\nDESCRIPTION: This snippet describes the pseudo-code for the pr_modif_read function used in SSP160x to read from pointer registers r0-r7 with optional post-increment/decrement. The modifier (m) dictates the post-modification behavior. It also handles the special case of r3 and r7, returning the modifier value directly.\nSOURCE: https://github.com/openai/retro/blob/master/cores/genesis/core/cart_hw/svp/svpdoc.txt#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\npr_modif_read(m,X) - read pointer register rX, applying modifier m:\n if register is r3 or r7, return value m\n else switch on value m:\n 0: return rX;\n 1: tmp = rX; rX++; return tmp; // rX+!\n 2: tmp = rX; modulo_decrement(rX); return tmp; // rX-\n 3: tmp = rX; modulo_increment(rX); return tmp; // rX+\n the modulo value used (if used at all) depends on ST\n RPL bits (see 2.1.5)\n```\n\n----------------------------------------\n\nTITLE: Decoding Direct Bits in C++\nDESCRIPTION: The `CRangeDecoder::DecodeDirectBits()` function decodes a sequence of direct bits. It shifts the `Range` right by 1, subtracts it from `Code`, calculates `t` based on the sign of `Code`, adds `Range & t` to `Code`, updates the `Corrupted` flag if `Code` equals `Range`, normalizes the state, and accumulates the decoded bits into the `res` variable.\nSOURCE: https://github.com/openai/retro/blob/master/cores/genesis/core/cd_hw/libchdr/deps/lzma/DOC/lzma-specification.txt#_snippet_8\n\nLANGUAGE: C++\nCODE:\n```\nUInt32 CRangeDecoder::DecodeDirectBits(unsigned numBits)\n{\n  UInt32 res = 0;\n  do\n  {\n    Range >>= 1;\n    Code -= Range;\n    UInt32 t = 0 - ((UInt32)Code >> 31);\n    Code += Range & t;\n    \n    if (Code == Range)\n      Corrupted = true;\n    \n    Normalize();\n    res <<= 1;\n    res += t + 1;\n  }\n  while (--numBits);\n  return res;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring and Installing pkg-config File in CMake\nDESCRIPTION: This snippet configures and installs the `libzip.pc` pkg-config file. It sets variables like `prefix`, `exec_prefix`, `libdir`, and `includedir`, and then uses `CONFIGURE_FILE` to generate the `libzip.pc` file from `libzip.pc.in`, replacing the variables with their values. Finally, it installs the generated file to the `lib/pkgconfig` directory.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/libzip/CMakeLists.txt#_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nSET(prefix ${CMAKE_INSTALL_PREFIX})\nSET(exec_prefix \\${prefix})\nSET(libdir \\${exec_prefix}/lib)\nSET(includedir \\${prefix}/include)\nIF(BZIP2_FOUND)\n  SET(LIBS \"${LIBS} -lbz2\")\nENDIF()\nSET(LIBS \"${LIBS} -lz\")\nIF(CMAKE_SYSTEM_NAME MATCHES BSD)\n  SET(PKG_CONFIG_RPATH \"-Wl,-R\\${libdir}\")\nENDIF(CMAKE_SYSTEM_NAME MATCHES BSD)\nCONFIGURE_FILE(libzip.pc.in libzip.pc @ONLY)\nINSTALL(FILES ${CMAKE_CURRENT_BINARY_DIR}/libzip.pc DESTINATION lib/pkgconfig)\n```\n\n----------------------------------------\n\nTITLE: Keep Alive Call Policy Example (Constructor)\nDESCRIPTION: This C++ code demonstrates the `py::keep_alive` policy for constructors. It ties the lifetime of an element passed to the `Nurse` constructor to the lifetime of the constructed `Nurse` object. The `keep_alive<1, 2>()` policy ensures that the second argument (a `Patient` object) remains alive as long as the first argument (the implicitly created `Nurse` object) exists. Argument `1` refers to `this`.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/functions.rst#_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\npy::class_<Nurse>(m, \"Nurse\")\n    .def(py::init<Patient &>(), py::keep_alive<1, 2>());\n```\n\n----------------------------------------\n\nTITLE: Decoding a Bit with Probability Model in C++\nDESCRIPTION: The `CRangeDecoder::DecodeBit()` function decodes a single bit using a probability model. It calculates a bound based on the range and probability, determines the symbol based on whether the code is less than the bound, updates the probability, adjusts the range and code, normalizes the state, and returns the decoded symbol.\nSOURCE: https://github.com/openai/retro/blob/master/cores/genesis/core/cd_hw/libchdr/deps/lzma/DOC/lzma-specification.txt#_snippet_11\n\nLANGUAGE: C++\nCODE:\n```\n#define kNumMoveBits 5\n\nunsigned CRangeDecoder::DecodeBit(CProb *prob)\n{\n  unsigned v = *prob;\n  UInt32 bound = (Range >> kNumBitModelTotalBits) * v;\n  unsigned symbol;\n  if (Code < bound)\n  {\n    v += ((1 << kNumBitModelTotalBits) - v) >> kNumMoveBits;\n    Range = bound;\n    symbol = 0;\n  }\n  else\n  {\n    v -= v >> kNumMoveBits;\n    Code -= bound;\n    Range -= bound;\n    symbol = 1;\n  }\n  *prob = (CProb)v;\n  Normalize();\n  return symbol;\n}\n```\n\n----------------------------------------\n\nTITLE: Death Test Example with Style Configuration C++\nDESCRIPTION: This snippet showcases how to define death tests with specific styles. The first test (TestOne) is configured to run in \"threadsafe\" mode, while the second test (TestTwo) uses the default \"fast\" mode. The main function initializes Google Test and sets the default death test style to \"fast\".\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/AdvancedGuide.md#_snippet_12\n\nLANGUAGE: C++\nCODE:\n```\nTEST(MyDeathTest, TestOne) {\n  ::testing::FLAGS_gtest_death_test_style = \"threadsafe\";\n  // This test is run in the \"threadsafe\" style:\n  ASSERT_DEATH(ThisShouldDie(), \"\");\n}\n\nTEST(MyDeathTest, TestTwo) {\n  // This test is run in the \"fast\" style:\n  ASSERT_DEATH(ThisShouldDie(), \"\");\n}\n\nint main(int argc, char** argv) {\n  ::testing::InitGoogleTest(&argc, argv);\n  ::testing::FLAGS_gtest_death_test_style = \"fast\";\n  return RUN_ALL_TESTS();\n}\n```\n\n----------------------------------------\n\nTITLE: Executable Creation and Linking\nDESCRIPTION: This snippet creates an executable named 'test_embed' from the source files 'catch.cpp' and 'test_interpreter.cpp'. It sets the include directories for Catch and enables warnings using pybind11. Depending on the CMake version, it links against pybind11::embed or sets include directories, compile options, and link libraries manually.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/tests/test_embed/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(test_embed\n  catch.cpp\n  test_interpreter.cpp\n)\ntarget_include_directories(test_embed PRIVATE ${CATCH_INCLUDE_DIR})\npybind11_enable_warnings(test_embed)\n\nif(NOT CMAKE_VERSION VERSION_LESS 3.0)\n  target_link_libraries(test_embed PRIVATE pybind11::embed)\nelse()\n  target_include_directories(test_embed PRIVATE ${PYBIND11_INCLUDE_DIR} ${PYTHON_INCLUDE_DIRS})\n  target_compile_options(test_embed PRIVATE ${PYBIND11_CPP_STANDARD})\n  target_link_libraries(test_embed PRIVATE ${PYTHON_LIBRARIES})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Keep Alive Call Policy Example (List Append)\nDESCRIPTION: This C++ code snippet demonstrates the use of the `py::keep_alive` call policy. It ensures that the lifetime of an element appended to a `List` object is tied to the lifetime of the `List` itself. `keep_alive<1, 2>()` specifies that argument 2 (the appended element) should be kept alive until argument 1 (the `this` pointer of the `List` object) is freed by the garbage collector.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/functions.rst#_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\npy::class_<List>(m, \"List\")\n    .def(\"append\", &List::append, py::keep_alive<1, 2>());\n```\n\n----------------------------------------\n\nTITLE: Building Google Test Samples with CMake\nDESCRIPTION: This snippet demonstrates how to build the Google Test samples when using CMake.  It uses the `-Dgtest_build_samples=ON` flag during the cmake configuration step.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/README.md#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ncmake -Dgtest_build_samples=ON ${GTEST_DIR}\n```\n\n----------------------------------------\n\nTITLE: Getting Current Test Information in Google Test (C++)\nDESCRIPTION: This code snippet shows how to obtain information about the currently running test, specifically the test case name and the test name, using the `::testing::TestInfo` class and the `current_test_info()` method of the `::testing::UnitTest` singleton. This information can be useful for tasks like setting up golden file names based on the running test.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/AdvancedGuide.md#_snippet_40\n\nLANGUAGE: C++\nCODE:\n```\nnamespace testing {\n\nclass TestInfo {\n public:\n  // Returns the test case name and the test name, respectively.\n  //\n  // Do NOT delete or free the return value - it's managed by the\n  // TestInfo class.\n  const char* test_case_name() const;\n  const char* name() const;\n};\n\n}  // namespace testing\n```\n\n----------------------------------------\n\nTITLE: C++ Promises Example\nDESCRIPTION: This C++ code snippet demonstrates the usage of promises, similar to Javascript Promises/A+, within the Cap'n Proto RPC framework. It chains asynchronous operations to retrieve tweets, parse URLs, expand URLs, and print the response body, handling potential errors.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/doc/_posts/2013-12-12-capnproto-0.4-time-travel.md#_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n// C++ version of Domenic's Javascript promises example.\ngetTweetsFor(\"domenic\") // returns a promise\n  .then([](vector<Tweet> tweets) {\n    auto shortUrls = parseTweetsForUrls(tweets);\n    auto mostRecentShortUrl = shortUrls[0];\n    // expandUrlUsingTwitterApi returns a promise\n    return expandUrlUsingTwitterApi(mostRecentShortUrl);\n  })\n  .then(httpGet) // promise-returning function\n  .then(\n    [](string responseBody) {\n      cout << \"Most recent link text:\" << responseBody << endl;\n    },\n    [](kj::Exception&& error) {\n      cerr << \"Error with the twitterverse:\" << error << endl;\n    }\n  );\n```\n\n----------------------------------------\n\nTITLE: Conditional Adding of KJ Async Library\nDESCRIPTION: Conditionally adds the KJ asynchronous library if `CAPNP_LITE` is not defined. It also links the library to the core KJ library and sets platform-specific link libraries. Creates a static library called `kj-async` from the source files, then aliases `kj-async` to `CapnProto::kj-async`. Links the `kj-async` target to `kj`.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/c++/src/kj/CMakeLists.txt#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT CAPNP_LITE)\n  add_library(kj-async ${kj-async_sources})\n  add_library(CapnProto::kj-async ALIAS kj-async)\n  target_link_libraries(kj-async PUBLIC kj)\n  if(UNIX)\n    # external clients of this library need to link to pthreads\n    target_compile_options(kj-async INTERFACE \"-pthread\")\n  elseif(WIN32)\n    target_link_libraries(kj-async PUBLIC ws2_32)\n  endif()\n  install(TARGETS kj-async ${INSTALL_TARGETS_DEFAULT_ARGS})\n  install(FILES ${kj-async_headers} DESTINATION \"${CMAKE_INSTALL_INCLUDEDIR}/kj\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Death Test Example in Google Test\nDESCRIPTION: This code snippet shows examples of how to use `ASSERT_DEATH`, `EXPECT_EXIT` and predicates to write death tests. It verifies that `Foo(5)` causes a crash with a specific error message, `NormalExit()` exits with code 0 and prints \"Success\", and `KillMyself()` is killed by a `SIGKILL` signal.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/AdvancedGuide.md#_snippet_9\n\nLANGUAGE: cpp\nCODE:\n```\nTEST(MyDeathTest, Foo) {\n  // This death test uses a compound statement.\n  ASSERT_DEATH({ int n = 5; Foo(&n); }, \"Error on line .* of Foo()\");\n}\nTEST(MyDeathTest, NormalExit) {\n  EXPECT_EXIT(NormalExit(), ::testing::ExitedWithCode(0), \"Success\");\n}\nTEST(MyDeathTest, KillMyself) {\n  EXPECT_EXIT(KillMyself(), ::testing::KilledBySignal(SIGKILL), \"Sending myself unblockable signal\");\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring and installing files\nDESCRIPTION: This snippet configures the `cia.rsf` file from a template and defines installation rules for the generated 3DSX, SMDH, XML, and CIA files, organizing them into a `3dsx` and `cia` subdirectory in the installation directory, based on the `${BINARY_NAME}-3ds` component.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/platform/3ds/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nconfigure_file(${CMAKE_CURRENT_SOURCE_DIR}/cia.rsf.in ${CMAKE_CURRENT_BINARY_DIR}/cia.rsf)\ninstall(FILES\n\t    ${CMAKE_CURRENT_BINARY_DIR}/${BINARY_NAME}.3dsx\n\t    ${CMAKE_CURRENT_BINARY_DIR}/${BINARY_NAME}.smdh\n\t    ${CMAKE_CURRENT_BINARY_DIR}/${BINARY_NAME}.xml\n\t    DESTINATION 3dsx COMPONENT ${BINARY_NAME}-3ds)\ninstall(FILES\n\t    ${CMAKE_CURRENT_BINARY_DIR}/${BINARY_NAME}.cia\n\t    DESTINATION cia COMPONENT ${BINARY_NAME}-3ds)\n```\n\n----------------------------------------\n\nTITLE: Automatic Upcasting with Polymorphic Types\nDESCRIPTION: This code shows how pybind11 automatically upcasts a derived class to its actual type when the C++ classes are polymorphic and a base pointer to a derived instance is returned to Python.  In this example, the `pet_store2` function returns a `PolymorphicPet*` that points to a `PolymorphicDog` instance, and Python correctly identifies the object as a `PolymorphicDog`.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/classes.rst#_snippet_19\n\nLANGUAGE: cpp\nCODE:\n```\n// Again, return a base pointer to a derived instance\nm.def(\"pet_store2\", []() { return std::unique_ptr<PolymorphicPet>(new PolymorphicDog); });\n```\n\n----------------------------------------\n\nTITLE: Adding KJ Tests Executable\nDESCRIPTION: Adds an executable for running KJ tests and links it against the KJ test and core libraries. Also creates a check dependency and adds a test.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/c++/src/kj/CMakeLists.txt#_snippet_22\n\nLANGUAGE: cmake\nCODE:\n```\nif(BUILD_TESTING)\n  add_executable(kj-tests\n    common-test.c++\n    memory-test.c++\n    array-test.c++\n    string-test.c++\n    exception-test.c++\n    debug-test.c++\n    io-test.c++\n    mutex-test.c++\n    threadlocal-test.c++\n    test-test.c++\n    std/iostream-test.c++\n  )\n  # TODO: Link with librt on Solaris for sched_yield\n  target_link_libraries(kj-tests kj-test kj)\n  add_dependencies(check kj-tests)\n  add_test(NAME kj-tests-run COMMAND kj-tests)\n\n  if(NOT CAPNP_LITE)\n    add_executable(kj-heavy-tests\n      async-test.c++\n      async-unix-test.c++\n      async-win32-test.c++\n      async-io-test.c++\n      refcount-test.c++\n      string-tree-test.c++\n      arena-test.c++\n      units-test.c++\n      tuple-test.c++\n      one-of-test.c++\n      function-test.c++\n      threadlocal-pthread-test.c++\n      parse/common-test.c++\n      parse/char-test.c++\n      compat/http-test.c++\n    )\n    target_link_libraries(kj-heavy-tests kj-http kj-async kj-test kj)\n    add_dependencies(check kj-heavy-tests)\n    add_test(NAME kj-heavy-tests-run COMMAND kj-heavy-tests)\n  endif()  # NOT CAPNP_LITE\nendif()  # BUILD_TESTING\n```\n\n----------------------------------------\n\nTITLE: Defining a Person struct in Cap'n Proto\nDESCRIPTION: This code defines a `Person` struct with fields for name, birthdate, email, and phone numbers. It includes nested definitions for `PhoneNumber` and `Date`, along with an enum for phone types. The `@N` annotations specify the field IDs for versioning and compatibility.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/doc/language.md#_snippet_0\n\nLANGUAGE: capnp\nCODE:\n```\n@0xdbb9ad1f14bf0b36;  # unique file ID, generated by `capnp id`\n\nstruct Person {\n  name @0 :Text;\n  birthdate @3 :Date;\n\n  email @1 :Text;\n  phones @2 :List(PhoneNumber);\n\n  struct PhoneNumber {\n    number @0 :Text;\n    type @1 :Type;\n\n    enum Type {\n      mobile @0;\n      home @1;\n      work @2;\n    }\n  }\n}\n\nstruct Date {\n  year @0 :Int16;\n  month @1 :UInt8;\n  day @2 :UInt8;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Cap'n Proto JSON Library\nDESCRIPTION: This snippet creates the Cap'n Proto JSON library, linking it with the core `capnp`, `kj-async`, and `kj` libraries. The library is only built if `CAPNP_LITE` is not defined, excluding it from the lite build configuration. The installed files are placed under the `compat` subdirectory of the main include directory.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/c++/src/capnp/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT CAPNP_LITE)\n  add_library(capnp-json ${capnp-json_sources})\n  add_library(CapnProto::capnp-json ALIAS capnp-json)\n  target_link_libraries(capnp-json PUBLIC capnp kj-async kj)\n  install(TARGETS capnp-json ${INSTALL_TARGETS_DEFAULT_ARGS})\n  install(FILES ${capnp-json_headers} ${capnp-json_schemas} DESTINATION \"${CMAKE_INSTALL_INCLUDEDIR}/capnp/compat\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Type Caster Specialization for Boost::optional in pybind11\nDESCRIPTION: This code snippet demonstrates how to specialize the `type_caster` for `boost::optional` (or any similar `std::optional`-like container) within the `pybind11::detail` namespace to enable automatic conversions.  It needs to be placed in a header file and included in all translation units where the conversion is required.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/cast/stl.rst#_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n// `boost::optional` as an example -- can be any `std::optional`-like container\nnamespace pybind11 { namespace detail {\n    template <typename T>\n    struct type_caster<boost::optional<T>> : optional_caster<boost::optional<T>> {};\n}}\n```\n\n----------------------------------------\n\nTITLE: Adding Tests with Properties in CMake\nDESCRIPTION: This snippet iterates through a list of test case names (EXTRA_TESTS). For each test case, it adds a test using the ADD_TEST command, which executes a Perl script (runtest) with the test case file as an argument. It also sets the SKIP_RETURN_CODE property for each test to 77, indicating that a return code of 77 should be considered a successful test execution.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/libzip/regress/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nFOREACH(CASE ${EXTRA_TESTS})\n  ADD_TEST(${CASE} perl ${CMAKE_BINARY_DIR}/regress/runtest ${CMAKE_CURRENT_SOURCE_DIR}/${CASE})\n  SET_TESTS_PROPERTIES(${CASE} PROPERTIES SKIP_RETURN_CODE 77)\nENDFOREACH()\n```\n\n----------------------------------------\n\nTITLE: Installing Google Mock Targets in CMake\nDESCRIPTION: This snippet defines the installation rules for the gmock and gmock_main targets. It specifies the destination directories for the runtime, library, and archive components. It also installs the Google Mock header files and configures/installs pkg-config files.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googlemock/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nif(INSTALL_GMOCK)\n  install(TARGETS gmock gmock_main\n    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}\n    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}\n    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR})\n  install(DIRECTORY ${gmock_SOURCE_DIR}/include/gmock\n    DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})\n\n  # configure and install pkgconfig files\n  configure_file(\n    cmake/gmock.pc.in\n    \"${CMAKE_BINARY_DIR}/gmock.pc\"\n    @ONLY)\n  configure_file(\n    cmake/gmock_main.pc.in\n    \"${CMAKE_BINARY_DIR}/gmock_main.pc\"\n    @ONLY)\n  install(FILES \"${CMAKE_BINARY_DIR}/gmock.pc\" \"${CMAKE_BINARY_DIR}/gmock_main.pc\"\n    DESTINATION \"${CMAKE_INSTALL_LIBDIR}/pkgconfig\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Install Cap'n Proto from Release Tarball (Unix)\nDESCRIPTION: This snippet demonstrates how to download, extract, configure, build, and install Cap'n Proto from a release tarball on a Unix-like system. It uses `curl` to download the tarball, `tar` to extract it, `./configure` to configure the build, `make` to build the project, and `sudo make install` to install the compiled binaries and headers to the system.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/doc/install.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -O <a href=\"https://capnproto.org/capnproto-c++-0.6.1.tar.gz\">https://capnproto.org/capnproto-c++-0.6.1.tar.gz</a>\ntar zxf capnproto-c++-0.6.1.tar.gz\ncd capnproto-c++-0.6.1\n./configure\nmake -j6 check\nsudo make install\n```\n\n----------------------------------------\n\nTITLE: Factory Functions with Virtual Function Trampolines (C++)\nDESCRIPTION: Demonstrates various approaches for handling factory functions in combination with virtual function trampolines in pybind11, including rvalue-reference constructors and separate factory functions for alias and non-alias cases. Includes an example of *always* returning an alias instance.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/classes.rst#_snippet_17\n\nLANGUAGE: cpp\nCODE:\n```\n#include <pybind11/factory.h>\nclass Example {\npublic:\n    // ...\n    virtual ~Example() = default;\n};\nclass PyExample : public Example {\npublic:\n    using Example::Example;\n    PyExample(Example &&base) : Example(std::move(base)) {}\n};\npy::class_<Example, PyExample>(m, \"Example\")\n    // Returns an Example pointer.  If a PyExample is needed, the Example\n    // instance will be moved via the extra constructor in PyExample, above.\n    .def(py::init([]() { return new Example(); }))\n    // Two callbacks:\n    .def(py::init([]() { return new Example(); } /* no alias needed */,\n                  []() { return new PyExample(); } /* alias needed */))\n    // *Always* returns an alias instance (like py::init_alias<>)\n    .def(py::init([]() { return new PyExample(); }))\n```\n\n----------------------------------------\n\nTITLE: Defining gtest and gtest_main Libraries\nDESCRIPTION: This snippet defines the `gtest` and `gtest_main` libraries using the `cxx_library` macro. It links `gtest_main` to `gtest` using `target_link_libraries`. It also sets interface include directories for both libraries using `target_include_directories` when the CMake version supports it (>= 2.8.11).\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ncxx_library(gtest \"${cxx_strict}\" src/gtest-all.cc)\ncxx_library(gtest_main \"${cxx_strict}\" src/gtest_main.cc)\ntarget_link_libraries(gtest_main gtest)\n\n# If the CMake version supports it, attach header directory information\n# to the targets for when we are part of a parent build (ie being pulled\n# in via add_subdirectory() rather than being a standalone build).\nif (DEFINED CMAKE_VERSION AND NOT \"${CMAKE_VERSION}\" VERSION_LESS \"2.8.11\")\n  target_include_directories(gtest      INTERFACE \"${gtest_SOURCE_DIR}/include\")\n  target_include_directories(gtest_main INTERFACE \"${gtest_SOURCE_DIR}/include\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting macOS Deployment Options in CMake\nDESCRIPTION: This snippet defines deployment options for macOS, including specifying the otool and cross root. It checks if CMAKE_OTOOL is defined and not equal to \"otool\", and if CROSS_ROOT is defined, appending appropriate flags to DEPLOY_OPTIONS. It then uses install(CODE) to execute a Python script for macOS deployment.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/platform/qt/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(DEFINED CMAKE_OTOOL AND NOT CMAKE_OTOOL EQUAL \"otool\")\n\t\t\tset(DEPLOY_OPTIONS ${DEPLOY_OPTIONS} -O \"${CMAKE_OTOOL}\")\n\t\tendif()\n\t\tif(DEFINED CROSS_ROOT)\n\t\t\tset(DEPLOY_OPTIONS ${DEPLOY_OPTIONS} -R \"${CROSS_ROOT}\")\n\t\tendif()\n\t\tinstall(CODE \"execute_process(COMMAND \\\"${CMAKE_SOURCE_DIR}/tools/deploy-mac.py\\\" -v ${DEPLOY_OPTIONS} \\\"\\$ENV{DESTDIR}${CMAKE_INSTALL_PREFIX}/Applications/${PROJECT_NAME}.app\\\")\")\n```\n\n----------------------------------------\n\nTITLE: Combining py::exec and pybind11 API\nDESCRIPTION: This C++ code combines `py::exec` with the pybind11 API. It initializes a Python dictionary using pybind11, passes it as local variables to `py::exec`, and then retrieves the result and prints it to the standard output using C++'s `std::cout`.  It leverages both C++ and Python code for output.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/embedding.rst#_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\n#include <pybind11/embed.h>\n#include <iostream>\n\nnamespace py = pybind11;\nusing namespace py::literals;\n\nint main() {\n    py::scoped_interpreter guard{};\n\n    auto locals = py::dict(\"name\"_a=\"World\", \"number\"_a=42);\npy::exec(R\"(\n            message = \"Hello, {name}! The answer is {number}\".format(**locals())\n        )\", py::globals(), locals);\n\n        auto message = locals[\"message\"].cast<std::string>();\n        std::cout << message;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Tests and Targets in CMake\nDESCRIPTION: This snippet uses CMake to discover all C++ files matching the pattern '*.cpp' within the 'TESTS' variable, creates an executable for each test, and links the 'retro-base' and 'gmock_main' libraries to each test. It also defines a custom target 'build-tests' that depends on all test targets.\nSOURCE: https://github.com/openai/retro/blob/master/tests/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nfile(GLOB TESTS *.cpp)\nset(TEST_TARGETS)\nforeach(TEST IN LISTS TESTS)\n    get_filename_component(TEST_NAME \"${TEST}\" NAME_WE)\n    add_executable(test-${TEST_NAME} ${TEST})\n    list(APPEND TEST_TARGETS test-${TEST_NAME})\n    target_link_libraries(test-${TEST_NAME} retro-base gmock_main)\n    add_test(${TEST_NAME} test-${TEST_NAME})\nendforeach()\n\nadd_custom_target(build-tests DEPENDS ${TEST_TARGETS})\n```\n\n----------------------------------------\n\nTITLE: CRC Table Initialization in C\nDESCRIPTION: This code snippet initializes a CRC table for fast CRC calculation. It calculates the CRC values for all 256 possible byte values and stores them in the `crc_table` array. The `crc_table_computed` flag indicates whether the table has been computed.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/third-party/zlib/doc/rfc1952.txt#_snippet_6\n\nLANGUAGE: C\nCODE:\n```\n/* Table of CRCs of all 8-bit messages. */\nunsigned long crc_table[256];\n\n/* Flag: has the table been computed? Initially false. */\nint crc_table_computed = 0;\n\n/* Make the table for a fast CRC. */\nvoid make_crc_table(void)\n{\n  unsigned long c;\n  int n, k;\n  for (n = 0; n < 256; n++) {\n    c = (unsigned long) n;\n    for (k = 0; k < 8; k++) {\n      if (c & 1) {\n        c = 0xedb88320L ^ (c >> 1);\n      } else {\n        c = c >> 1;\n      }\n    }\n    crc_table[n] = c;\n  }\n  crc_table_computed = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Exposing Protected Member Functions with Publicist Class in C++\nDESCRIPTION: This snippet demonstrates how to expose a protected member function `foo` of class `A` using a 'publicist' class. The `Publicist` class inherits from `A` and makes the `foo` function public using `using A::foo;`. Then, the public `foo` of the Publicist is bound to python. This allows Python code to access the protected member function.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/classes.rst#_snippet_42\n\nLANGUAGE: cpp\nCODE:\n```\nclass A {\nprotected:\n    int foo() const { return 42; }\n};\n\nclass Publicist : public A { // helper type for exposing protected functions\npublic:\n    using A::foo; // inherited with different access modifier\n};\n\npy::class_<A>(m, \"A\") // bind the primary class\n    .def(\"foo\", &Publicist::foo); // expose protected methods via the publicist\n```\n\n----------------------------------------\n\nTITLE: Defining Distance Function for Google Mock Invoke\nDESCRIPTION: This code snippet demonstrates how to define a function, Distance, that can be used with Google Mock's Invoke action. It takes unused parameters and two double parameters representing x and y coordinates, and calculates the distance from the origin using sqrt(x*x + y*y). This function can then be used in an EXPECT_CALL to specify the behavior of a mock function when called with specific arguments.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googlemock/docs/CheatSheet.md#_snippet_12\n\nLANGUAGE: cpp\nCODE:\n```\ndouble Distance(Unused, double x, double y) { return sqrt(x*x + y*y); }\n...\nEXPECT_CALL(mock, Foo(\"Hi\", _, _)).WillOnce(Invoke(Distance));\n```\n\n----------------------------------------\n\nTITLE: Defining Related Test Cases with Typedef in Google Test (C++)\nDESCRIPTION: This snippet shows how to split a test case into two related test cases, such as `FooTest` and `FooDeathTest`, where one contains regular tests and the other contains death tests. A `typedef` is used to relate the two test cases, which assists in code organization and clarity. It requires the Google Test framework to be included.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/FAQ.md#_snippet_23\n\nLANGUAGE: cpp\nCODE:\n```\nclass FooTest : public ::testing::Test { ... };\n\nTEST_F(FooTest, Abc) { ... }\nTEST_F(FooTest, Def) { ... }\n\ntypedef FooTest FooDeathTest;\n\nTEST_F(FooDeathTest, Uvw) { ... EXPECT_DEATH(...) ... }\nTEST_F(FooDeathTest, Xyz) { ... ASSERT_DEATH(...) ... }\n```\n\n----------------------------------------\n\nTITLE: Defining Executables with getopt support in CMake\nDESCRIPTION: This snippet defines a list of programs that use getopt. It then iterates through this list, creating an executable for each program, including the SRC_EXTRA_FILES (which may contain getopt.c if the system doesn't provide getopt), and linking it with the zip library. This ensures that these programs can use getopt regardless of system availability.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/libzip/regress/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nSET(GETOPT_USERS\n  fread\n  tryopen\n)\n\nFOREACH(PROGRAM ${GETOPT_USERS})\n  ADD_EXECUTABLE(${PROGRAM} ${PROGRAM}.c ${SRC_EXTRA_FILES})\n  TARGET_LINK_LIBRARIES(${PROGRAM} zip)\nENDFOREACH()\n```\n\n----------------------------------------\n\nTITLE: Adding Tests (CMake)\nDESCRIPTION: This snippet discovers tests and adds them to CTest. It constructs a command to run pytest with the specified test file and sets the `LD_LIBRARY_PATH`, `DYLD_LIBRARY_PATH` or `PATH` environment variable depending on the OS.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/platform/python/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nfile(GLOB BASE_TESTS ${CMAKE_CURRENT_SOURCE_DIR}/test_*.py)\nfile(GLOB SUBTESTS ${CMAKE_CURRENT_SOURCE_DIR}/tests/*/test_*.py)\nforeach(TEST IN LISTS BASE_TESTS SUBTESTS)\n\tif(APPLE)\n\t\tset(PATH DYLD_LIBRARY_PATH)\n\telseif(WIN32)\n\t\tset(PATH PATH)\n\telse()\n\t\tset(PATH LD_LIBRARY_PATH)\n\tendif()\n\tstring(REGEX REPLACE \"${CMAKE_CURRENT_SOURCE_DIR}/(tests/.*/)?test_\" \"\" TEST_NAME \"${TEST}\")\n\tstring(REPLACE \".py\" \"\" TEST_NAME \"${TEST_NAME}\")\n\tadd_test(python-${TEST_NAME} ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_BINARY_DIR}/setup.py build -b ${CMAKE_CURRENT_BINARY_DIR} pytest --extras --addopts ${TEST})\n\tset_tests_properties(python-${TEST_NAME} PROPERTIES ENVIRONMENT \"${PATH}=${CMAKE_CURRENT_BINARY_DIR}/..\")\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Using Module-Local Bindings in Python\nDESCRIPTION: This snippet demonstrates how to import modules `cats`, `dogs`, and `frogs` after applying `py::module_local()` to the `Pet` bindings. It creates instances of `Cat` and `Dog` and calls the `pet_name` function from each module, demonstrating that the functions operate on the module-local `Pet` instances correctly.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/classes.rst#_snippet_40\n\nLANGUAGE: pycon\nCODE:\n```\n>>> import cats, dogs, frogs  # No error because of the added py::module_local()\n>>> mycat, mydog = cats.Cat(\"Fluffy\"), dogs.Dog(\"Rover\")\n>>> (cats.pet_name(mycat), dogs.pet_name(mydog))\n('Fluffy', 'Rover')\n>>> (cats.pet_name(mydog), dogs.pet_name(mycat), frogs.pet_name(mycat))\n('Rover', 'Fluffy', 'Fluffy')\n```\n\n----------------------------------------\n\nTITLE: Implementing a Cap'n Proto Server in C++\nDESCRIPTION: This C++ code shows an example of implementing a Cap'n Proto server. It overrides the `open` method of the `Directory::Server` interface, retrieves parameters from the context, sets results in the context, and returns a promise. It also demonstrates how to handle exceptions and use a map to store file clients.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/doc/cxxrpc.md#_snippet_7\n\nLANGUAGE: c++\nCODE:\n```\nclass DirectoryImpl final: public Directory::Server {\npublic:\n  kj::Promise<void> open(OpenContext context) override {\n    auto iter = files.find(context.getParams().getName());\n\n    // Throw an exception if not found.\n    KJ_REQUIRE(iter != files.end(), \"File not found.\");\n\n    context.getResults().setFile(iter->second);\n\n    return kj::READY_NOW;\n  }\n\n  // Any method which we don't implement will simply throw\n  // an exception by default.\n\nprivate:\n  std::map<kj::StringPtr, File::Client> files;\n};\n```\n\n----------------------------------------\n\nTITLE: Cap'n Proto Builder Example C++\nDESCRIPTION: Illustrates the usage of `Builder` methods for manipulating struct fields in Cap'n Proto generated C++ code. Shows how to get, set, and initialize primitive types, Text, Structs and Lists.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/doc/cxx.md#_snippet_1\n\nLANGUAGE: c++\nCODE:\n```\n// Example Builder methods:\n\n// myPrimitiveField @0 :Int32;\nint32_t getMyPrimitiveField();\nvoid setMyPrimitiveField(int32_t value);\n\n// myTextField @1 :Text;\n::capnp::Text::Builder getMyTextField();\nvoid setMyTextField(::capnp::Text::Reader value);\n::capnp::Text::Builder initMyTextField(size_t size);\n// (Note that Text::Reader is implicitly constructable from const char*\n// and std::string, and Text::Builder can be implicitly cast to\n// these types.)\n\n// myStructField @2 :MyStruct;\nMyStruct::Builder getMyStructField();\nvoid setMyStructField(MyStruct::Reader value);\nMyStruct::Builder initMyStructField();\n\n// myListField @3 :List(Float64);\n::capnp::List<double>::Builder getMyListField();\nvoid setMyListField(::capnp::List<double>::Reader value);\n::capnp::List<double>::Builder initMyListField(size_t size);\n```\n\n----------------------------------------\n\nTITLE: Calculate Adler-32 Checksum in C\nDESCRIPTION: This C code calculates the Adler-32 checksum of a data buffer. The Adler-32 checksum is used for data integrity verification in the ZLIB compressed data format. The code updates a running Adler-32 checksum with the bytes from the input buffer and returns the updated checksum.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/third-party/zlib/doc/rfc1950.txt#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n      #define BASE 65521 /* largest prime smaller than 65536 */\n\n      /*\n         Update a running Adler-32 checksum with the bytes buf[0..len-1]\n       and return the updated checksum. The Adler-32 checksum should be\n       initialized to 1.\n\n       Usage example:\n\n         unsigned long adler = 1L;\n\n         while (read_buffer(buffer, length) != EOF) {\n           adler = update_adler32(adler, buffer, length);\n         }\n         if (adler != original_adler) error();\n      */\n      unsigned long update_adler32(unsigned long adler,\n         unsigned char *buf, int len)\n      {\n        unsigned long s1 = adler & 0xffff;\n        unsigned long s2 = (adler >> 16) & 0xffff;\n        int n;\n\n        for (n = 0; n < len; n++) {\n```\n\n----------------------------------------\n\nTITLE: Compiling mGBA on Unix-like systems with CMake\nDESCRIPTION: These commands are recommended for using CMake on a Unix-based system to build and install mGBA. It creates a build directory, navigates into it, configures the build using CMake, compiles the code with make, and then installs the compiled files to /usr/bin and /usr/lib. Features that are disabled due to missing dependencies are listed after the `cmake` command.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/README_DE.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmkdir build\ncd build\ncmake -DCMAKE_INSTALL_PREFIX:PATH=/usr ..\nmake\nsudo make install\n```\n\n----------------------------------------\n\nTITLE: Testing Queue Functionality\nDESCRIPTION: These tests use `TEST_F()` to access the queue objects defined in the `QueueTest` fixture. The `IsEmptyInitially` test verifies that a newly created queue is empty. The `DequeueWorks` test verifies that the `Dequeue` method correctly retrieves elements from the queue and updates the queue size.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/Primer.md#_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\nTEST_F(QueueTest, IsEmptyInitially) {\n  EXPECT_EQ(0, q0_.size());\n}\n\nTEST_F(QueueTest, DequeueWorks) {\n  int* n = q0_.Dequeue();\n  EXPECT_EQ(NULL, n);\n\n  n = q1_.Dequeue();\n  ASSERT_TRUE(n != NULL);\n  EXPECT_EQ(1, *n);\n  EXPECT_EQ(0, q1_.size());\n  delete n;\n\n  n = q2_.Dequeue();\n  ASSERT_TRUE(n != NULL);\n  EXPECT_EQ(2, *n);\n  EXPECT_EQ(1, q2_.size());\n  delete n;\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Google Test Event Listener (C++)\nDESCRIPTION: This code snippet demonstrates how to add a custom event listener (`MinimalistPrinter`) to the Google Test event listener list. It first initializes Google Test, retrieves the listener list, appends the custom listener, and releases the default result printer to prevent mingled output. This setup replaces the default output with the custom listener's output.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/AdvancedGuide.md#_snippet_43\n\nLANGUAGE: C++\nCODE:\n```\nint main(int argc, char** argv) {\n  ::testing::InitGoogleTest(&argc, argv);\n  // Gets hold of the event listener list.\n  ::testing::TestEventListeners& listeners =\n      ::testing::UnitTest::GetInstance()->listeners();\n  // Adds a listener to the end.  Google Test takes the ownership.\n  listeners.Append(new MinimalistPrinter);\n  return RUN_ALL_TESTS();\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Value Printing with PrintTo() Function in Google Test\nDESCRIPTION: This code snippet shows how to define a `PrintTo()` function to customize the printing of a user-defined type `Bar` when a Google Test assertion fails. The `PrintTo()` function must be defined in the same namespace as the class. This is an alternative when overloading the `<<` operator is not desired or possible.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/AdvancedGuide.md#_snippet_7\n\nLANGUAGE: cpp\nCODE:\n```\n#include <iostream>\n\nnamespace foo {\n\nclass Bar { ... };\n\n// It's important that PrintTo() is defined in the SAME\n// namespace that defines Bar.  C++'s look-up rules rely on that.\nvoid PrintTo(const Bar& bar, ::std::ostream* os) {\n  *os << bar.DebugString();  // whatever needed to print bar to os\n}\n\n}  // namespace foo\n```\n\n----------------------------------------\n\nTITLE: Example Promise-Based Interfaces in C++\nDESCRIPTION: This code snippet illustrates how to define asynchronous interfaces using `kj::Promise` in C++. The `fetchHttp` function asynchronously fetches the content of an HTTP URL, returning it as a string, while `sendEmail` sends an email to the specified address, with a promise resolving upon successful transmission.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/doc/cxxrpc.md#_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n// Example promise-based interfaces.\n\nkj::Promise<kj::String> fetchHttp(kj::StringPtr url);\n// Asynchronously fetches an HTTP document and returns\n// the content as a string.\n\nkj::Promise<void> sendEmail(kj::StringPtr address,\n    kj::StringPtr title, kj::StringPtr body);\n// Sends an e-mail to the given address with the given title\n// and body.  The returned promise resolves (to nothing) when\n// the message has been successfully sent.\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Visibility and Including Directories\nDESCRIPTION: This snippet sets compiler visibility to 'hidden' if `gtest_hide_internal_symbols` is enabled. It then includes directories for Google Test's header files using `include_directories` and links library directories using `link_directories`. The `config_compiler_and_linker()` function, defined in `internal_utils.cmake`, configures compiler and linker settings.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif (gtest_hide_internal_symbols)\n  set(CMAKE_CXX_VISIBILITY_PRESET hidden)\n  set(CMAKE_VISIBILITY_INLINES_HIDDEN 1)\nendif()\n\n# Define helper functions and macros used by Google Test.\ninclude(cmake/internal_utils.cmake)\n\nconfig_compiler_and_linker()  # Defined in internal_utils.cmake.\n\n# Where Google Test's .h files can be found.\ninclude_directories(\n  ${gtest_SOURCE_DIR}/include\n  ${gtest_SOURCE_DIR})\n\n# Where Google Test's libraries can be found.\nlink_directories(${gtest_BINARY_DIR}/src)\n```\n\n----------------------------------------\n\nTITLE: Install Cap'n Proto from Git (Unix)\nDESCRIPTION: This snippet outlines how to clone the Cap'n Proto repository from Git, configure the build system using autotools, build the project, and install it on a Unix-like system. It assumes that autoconf, automake, and libtool are already installed.  It initializes the autotools configuration using `autoreconf -i`, then configures with `./configure` and compiles with `make`.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/doc/install.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/sandstorm-io/capnproto.git\ncd capnproto/c++\nautoreconf -i\n./configure\nmake -j6 check\nsudo make install\n```\n\n----------------------------------------\n\nTITLE: Generate C++ Code for Calculator\nDESCRIPTION: Generates C++ code from the `calculator.capnp` schema file. It defines variables for generated source and header files.  It creates executables for both a client and server then links against the CapnProto RPC library.  Include directories are set for both targets.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/c++/samples/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ncapnp_generate_cpp(calculatorSources calculatorHeaders calculator.capnp)\nadd_executable(calculator-client calculator-client.c++ ${calculatorSources})\nadd_executable(calculator-server calculator-server.c++ ${calculatorSources})\ntarget_link_libraries(calculator-client CapnProto::capnp-rpc)\ntarget_link_libraries(calculator-server CapnProto::capnp-rpc)\ntarget_include_directories(calculator-client PRIVATE ${CMAKE_CURRENT_BINARY_DIR})\ntarget_include_directories(calculator-server PRIVATE ${CMAKE_CURRENT_BINARY_DIR})\n```\n\n----------------------------------------\n\nTITLE: Defining GUI sources and setting properties\nDESCRIPTION: This snippet defines the GUI source files and sets the `GENERATED` property for automatically generated files. These files are located in the current binary directory and include shader code and icon resources.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/platform/3ds/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND GUI_SRC\n\t${CMAKE_CURRENT_BINARY_DIR}/icons.c\n\t${CMAKE_CURRENT_BINARY_DIR}/uishader.c\n\t${CMAKE_CURRENT_BINARY_DIR}/uishader.h\n\t${CMAKE_CURRENT_BINARY_DIR}/uishader.shbin.h\n\n\t${CMAKE_CURRENT_SOURCE_DIR}/gui-font.c\n\t${CMAKE_CURRENT_SOURCE_DIR}/ctr-gpu.c\n\t${CMAKE_CURRENT_SOURCE_DIR}/ctr-gpu.h)\n\nset_source_files_properties(\n\t${CMAKE_CURRENT_BINARY_DIR}/icons.c\n\t${CMAKE_CURRENT_BINARY_DIR}/uishader.c\n\t${CMAKE_CURRENT_BINARY_DIR}/uishader.h\n\t${CMAKE_CURRENT_BINARY_DIR}/uishader.shbin.h\n\tPROPERTIES GENERATED ON)\n```\n\n----------------------------------------\n\nTITLE: Set OS-specific libraries for linking\nDESCRIPTION: Sets the `OS_LIB` variable, which contains a list of libraries to link against. These libraries provide access to PS Vita system functions, such as graphics, audio, input, and networking. `M_LIBRARY` likely refers to a math library.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/platform/psp2/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(OS_LIB -lvita2d -l${M_LIBRARY}\n    -lSceAppMgr_stub\n    -lSceAppUtil_stub\n    -lSceAudio_stub\n    -lSceCamera_stub\n    -lSceCommonDialog_stub\n    -lSceCtrl_stub\n    -lSceDisplay_stub\n    -lSceGxm_stub\n    -lSceMotion_stub\n    -lScePgf_stub\n    -lScePhotoExport_stub\n    -lScePower_stub\n    -lSceSysmodule_stub\n    -lSceTouch_stub)\n```\n\n----------------------------------------\n\nTITLE: Binding Factory Functions and Constructors (C++)\nDESCRIPTION: Demonstrates how to bind multiple factory functions and regular C++ constructors to a class using pybind11. It shows how to return instances by value, raw pointer, or with a smart pointer (std::unique_ptr).\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/classes.rst#_snippet_16\n\nLANGUAGE: cpp\nCODE:\n```\nclass Example {\n    private:\n        Example(int); // private constructor\n    public:\n        // Factory function - returned by value:\n        static Example create(int a) { return Example(a); }\n\n        // These constructors are publicly callable:\n        Example(double);\n        Example(int, int);\n        Example(std::string);\n    };\n\npy::class_<Example>(m, \"Example\")\n    // Bind the factory function as a constructor:\n    .def(py::init(&Example::create))\n    // Bind a lambda function returning a pointer wrapped in a holder:\n    .def(py::init([](std::string arg) {\n        return std::unique_ptr<Example>(new Example(arg));\n    }))\n    // Return a raw pointer:\n    .def(py::init([](int a, int b) { return new Example(a, b); }))\n    // You can mix the above with regular C++ constructor bindings as well:\n    .def(py::init<double>())\n```\n\n----------------------------------------\n\nTITLE: Setting Google Test Flags Programmatically (C++)\nDESCRIPTION: This code snippet shows how to set Google Test flags programmatically using `::testing::GTEST_FLAG()`. In this example, it disables the printing of elapsed time by setting `::testing::GTEST_FLAG(print_time)` to `false` before initializing Google Test. This allows for customizing Google Test behavior through code rather than command-line arguments or environment variables.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/AdvancedGuide.md#_snippet_45\n\nLANGUAGE: C++\nCODE:\n```\nint main(int argc, char** argv) {\n  // Disables elapsed time by default.\n  ::testing::GTEST_FLAG(print_time) = false;\n\n  // This allows the user to override the flag on the command line.\n  ::testing::InitGoogleTest(&argc, argv);\n\n  return RUN_ALL_TESTS();\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Turtle GetX Calls (Incorrect) (C++)\nDESCRIPTION: This snippet attempts to verify that `turtle.GetX()` is called `n` times and returns different values (10*i) in each call. However, due to sticky expectations, the second call to `turtle.GetX()` will match the latest `EXPECT_CALL()` and cause an error because the upper bound is immediately exceeded.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googlemock/docs/ForDummies.md#_snippet_15\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::Return;\n...\nfor (int i = n; i > 0; i--) {\n  EXPECT_CALL(turtle, GetX())\n      .WillOnce(Return(10*i));\n}\n```\n\n----------------------------------------\n\nTITLE: Error Handling with Promises in C++\nDESCRIPTION: This code demonstrates error handling when using promises in C++. It shows how to provide a second callback to the `then()` method to handle exceptions that might occur during the promise resolution.  The example catches `kj::Exception` and returns a default value (0) in case of an error, preventing the program from crashing.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/doc/cxxrpc.md#_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nkj::Promise<int> lineCountPromise =\n    promise.then([](kj::String&& content) {\n  return countChars(content, '\\n');\n}, [](kj::Exception&& exception) {\n  // Error!  Pretend the document was empty.\n  return 0;\n});\n```\n\n----------------------------------------\n\nTITLE: Extracting pybind11 version from header\nDESCRIPTION: This code extracts the pybind11 version from the `common.h` header file using file(STRINGS) and regular expressions, storing the major, minor, and patch versions in CMake variables. It then constructs the full version string and prints a message to the console.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\n# extract project version from source\nfile(STRINGS \"${PYBIND11_INCLUDE_DIR}/pybind11/detail/common.h\" pybind11_version_defines\n     REGEX \"#define PYBIND11_VERSION_(MAJOR|MINOR|PATCH) \")\nforeach(ver ${pybind11_version_defines})\n  if (ver MATCHES \"#define PYBIND11_VERSION_(MAJOR|MINOR|PATCH) +([^ ]+)$\")\n    set(PYBIND11_VERSION_${CMAKE_MATCH_1} \"${CMAKE_MATCH_2}\" CACHE INTERNAL \"\")\n  endif()\nendforeach()\nset(${PROJECT_NAME}_VERSION ${PYBIND11_VERSION_MAJOR}.${PYBIND11_VERSION_MINOR}.${PYBIND11_VERSION_PATCH})\nmessage(STATUS \"pybind11 v${${PROJECT_NAME}_VERSION}\")\n```\n\n----------------------------------------\n\nTITLE: Playing Back a Gym Retro Movie in Python\nDESCRIPTION: This code shows how to play back a Gym Retro movie (.bk2 file) in Python. It loads the movie, gets the game and initial state from the movie, creates a Retro environment, sets the initial state, and then steps through the movie, applying the recorded actions to the environment.\nSOURCE: https://github.com/openai/retro/blob/master/docs/python.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport retro\n\nmovie = retro.Movie('Airstriker-Genesis-Level1-000000.bk2')\nmovie.step()\n\nenv = retro.make(\n    game=movie.get_game(),\n    state=None,\n    # bk2s can contain any button presses, so allow everything\n    use_restricted_actions=retro.Actions.ALL,\n    players=movie.players,\n)\nenv.initial_state = movie.get_state()\nenv.reset()\n\nwhile movie.step():\n    keys = []\n    for p in range(movie.players):\n        for i in range(env.num_buttons):\n            keys.append(movie.get_key(i, p))\n    env.step(keys)\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for 3DS Toolchain\nDESCRIPTION: This snippet checks if the environment variables DEVKITPRO, DEVKITARM, and CTRULIB are defined. If DEVKITPRO is not defined, the script exits with an error. If DEVKITARM or CTRULIB are not defined, they are set relative to DEVKITPRO. These variables are crucial for locating the necessary toolchain components.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/platform/3ds/CMakeToolchain.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(DEFINED ENV{DEVKITPRO})\n\tset(DEVKITPRO $ENV{DEVKITPRO})\nelse()\n\tmessage(FATAL_ERROR \"Could not find DEVKITPRO in environment\")\nendif()\n\nif(DEFINED ENV{DEVKITARM})\n\tset(DEVKITARM $ENV{DEVKITARM})\nelse()\n\tset(DEVKITARM ${DEVKITPRO}/devkitARM)\nendif()\n\nif(DEFINED ENV{CTRULIB})\n\tset(CTRULIB $ENV{CTRULIB})\nelse()\n\tset(CTRULIB ${DEVKITPRO}/libctru)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Heap Allocation with kj::heap and kj::heapArray in C++\nDESCRIPTION: This snippet describes the recommended way to allocate memory on the heap in the Retro project using `kj::heap` for single objects and `kj::heapArray` for arrays. These functions return \"owned\" pointers (`kj::Own<T>` or `kj::Array<T>`), ensuring RAII and preventing memory leaks.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/style-guide.md#_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\n* Never write `new` or `delete` explicitly. Use `kj::heap` to allocate single objects or `kj::heapArray` for arrays; these return \"owned\" pointers (`kj::Own<T>` or `kj::Array<T>`, respectively) which enforce RAII/ownership semantics. You may transfer ownership of these pointers via move semantics, but otherwise the objects will be automatically deleted when they go out of scope. This makes memory leaks very rare in KJ code.\n```\n\n----------------------------------------\n\nTITLE: Testing Private Class Members by using Accessors (C++)\nDESCRIPTION: This snippet shows how to test private members of a class by creating accessor methods in the test fixture.  This provides a controlled way to access the private members, allowing you to write tests that verify their behavior without directly exposing them. Relies on the friend relationship between the class under test and the fixture.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/FAQ.md#_snippet_17\n\nLANGUAGE: cpp\nCODE:\n```\nclass Foo {\n  friend class FooTest;\n  ...\n};\n\nclass FooTest : public ::testing::Test {\n protected:\n  ...\n  T1 get_private_member1(Foo* obj) {\n    return obj->private_member1_;\n  }\n};\n\nTEST_F(FooTest, Test1) {\n  ...\n  get_private_member1(x)\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Test Fixture for Queue\nDESCRIPTION: This snippet shows how to define a test fixture class named `QueueTest` that inherits from `::testing::Test`. It includes a `SetUp()` method to initialize the queue objects before each test and declares queue objects as protected members.  The SetUp method enqueues some initial values into the queues.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/Primer.md#_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\nclass QueueTest : public ::testing::Test {\n protected:\n  virtual void SetUp() {\n    q1_.Enqueue(1);\n    q2_.Enqueue(2);\n    q2_.Enqueue(3);\n  }\n\n  // virtual void TearDown() {}\n\n  Queue<int> q0_;\n  Queue<int> q1_;\n  Queue<int> q2_;\n};\n```\n\n----------------------------------------\n\nTITLE: Create Executable and Link pybind11 Library\nDESCRIPTION: This snippet creates an executable named `test_cmake_build` from the source file `../embed.cpp` and links it with the pybind11::embed library. It also sets a target property to prevent treating imported target includes as SYSTEM includes, which can help resolve header conflicts.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/tests/test_cmake_build/installed_embed/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(test_cmake_build ../embed.cpp)\ntarget_link_libraries(test_cmake_build PRIVATE pybind11::embed)\n\n# Do not treat includes from IMPORTED target as SYSTEM (Python headers in pybind11::embed).\n# This may be needed to resolve header conflicts, e.g. between Python release and debug headers.\nset_target_properties(test_cmake_build PROPERTIES NO_SYSTEM_FROM_IMPORTED ON)\n```\n\n----------------------------------------\n\nTITLE: Example Test Execution Output\nDESCRIPTION: This code snippet shows an example of the output generated when running Google Test unit tests in Xcode. It provides information about the number of tests run, the test results (passed or failed), and any global test environment setup and teardown.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/XcodeGuide.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n[Session started at 2008-08-06 06:36:13 -0600.]\n[==========] Running 2 tests from 1 test case.\n[----------] Global test environment set-up.\n[----------] 2 tests from WidgetInitializerTest\n[ RUN      ] WidgetInitializerTest.TestConstructor\n[       OK ] WidgetInitializerTest.TestConstructor\n[ RUN      ] WidgetInitializerTest.TestConversion\n[       OK ] WidgetInitializerTest.TestConversion\n[----------] Global test environment tear-down\n[==========] 2 tests from 1 test case ran.\n[  PASSED  ] 2 tests.\n\nThe Debugger has exited with status 0.  \n```\n\n----------------------------------------\n\nTITLE: Making Pipelined Requests with Cap'n Proto C++\nDESCRIPTION: This C++ code demonstrates how to create a request, send it, and then make a pipelined request.  It shows how to access results and wait for responses, using the generated `Client` and `Request` objects. It also highlights how to chain requests using promises and access results.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/doc/cxxrpc.md#_snippet_6\n\nLANGUAGE: c++\nCODE:\n```\nDirectory::Client dir = ...;\n\n// Create a new request for the `open()` method.\nauto request = dir.openRequest();\nrequest.setName(\"foo\");\n\n// Send the request.\nauto promise = request.send();\n\n// Make a pipelined request.\nauto promise2 = promise.getFile().getSizeRequest().send();\n\n// Wait for the full results.\nauto promise3 = promise2.then(\n    [](capnp::Response<File::GetSizeResults>&& response) {\n  cout << \"File size is: \" << response.getSize() << endl;\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Union in Cap'n Proto\nDESCRIPTION: This code defines a union within a `Person` struct to represent employment status.  The union contains several mutually exclusive fields: `unemployed`, `employer`, `school`, and `selfEmployed`. Only one of these fields can be set at a time. The `Void` type is used for the `unemployed` and `selfEmployed` cases.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/doc/language.md#_snippet_5\n\nLANGUAGE: capnp\nCODE:\n```\nstruct Person {\n  # ...\n\n  employment :union {\n    unemployed @4 :Void;\n    employer @5 :Company;\n    school @6 :School;\n    selfEmployed @7 :Void;\n    # We assume that a person is only one of these.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Operator Overloading with pybind11 (C++)\nDESCRIPTION: This snippet shows how to expose overloaded operators of the `Vector2` class to Python using pybind11. It includes the `pybind11/operators.h` header and uses `py::self` to bind the operators. The `__repr__` method is also defined using the `toString` method of the `Vector2` class.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/classes.rst#_snippet_24\n\nLANGUAGE: cpp\nCODE:\n```\n#include <pybind11/operators.h>\n\nPYBIND11_MODULE(example, m) {\n    py::class_<Vector2>(m, \"Vector2\")\n        .def(py::init<float, float>())\n        .def(py::self + py::self)\n        .def(py::self += py::self)\n        .def(py::self *= float())\n        .def(float() * py::self)\n        .def(py::self * float())\n        .def(\"__repr__\", &Vector2::toString);\n}\n```\n\n----------------------------------------\n\nTITLE: Check Condition Flags in SSP160x (C-style)\nDESCRIPTION: This snippet shows the pseudo-code for the check_cond function, used in branch and call instructions to conditionally execute code based on the status flags (Z and N) in the SSP160x. It takes a condition code (c) and flag value (f) as input and returns true if the condition is met, false otherwise.\nSOURCE: https://github.com/openai/retro/blob/master/cores/genesis/core/cart_hw/svp/svpdoc.txt#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ncheck_cond(c,f)    - checks if a flag matches f bit:\n switch (c) {\n case 0: return true;\n case 5: return (Z == f) ? true : false; // check Z flag\n case 7: return (N == f) ? true : false; // check N flag\n } // other conditions are possible, but they are not used\n```\n\n----------------------------------------\n\nTITLE: Catch Testing Framework Setup\nDESCRIPTION: This snippet attempts to find the Catch testing framework (version 1.9.3 or later). If found, it prints a status message indicating that the interpreter tests will be built using Catch. Otherwise, it prints a message that Catch was not detected and interpreter tests will be skipped, suggesting installation or automatic download via CMake.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/tests/test_embed/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(Catch 1.9.3)\nif(CATCH_FOUND)\n  message(STATUS \"Building interpreter tests using Catch v${CATCH_VERSION}\")\nelse()\n  message(STATUS \"Catch not detected. Interpreter tests will be skipped. Install Catch headers\"\n                 \" manually or use `cmake -DDOWNLOAD_CATCH=1` to fetch them automatically.\")\n  return()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Match Symbols Copying with Size Check (C++)\nDESCRIPTION: This code snippet handles copying matched bytes in the LZMA decoder. It checks if the uncompressed size is defined and ensures that the length of the match does not exceed the remaining uncompressed size. If it does, the length is adjusted, and an error flag is set. The `OutWindow.CopyMatch` function copies the bytes, and the uncompressed size is decremented.\nSOURCE: https://github.com/openai/retro/blob/master/cores/pce/deps/lzma-16.04/DOC/lzma-specification.txt#_snippet_32\n\nLANGUAGE: C++\nCODE:\n```\nlen += kMatchMinLen;\nbool isError = false;\nif (unpackSizeDefined && unpackSize < len)\n{\n  len = (unsigned)unpackSize;\nisError = true;\n}\nOutWindow.CopyMatch(rep0 + 1, len);\nunpackSize -= len;\nif (isError)\n  return LZMA_RES_ERROR;\n```\n\n----------------------------------------\n\nTITLE: Decoding LZMA Properties in C++\nDESCRIPTION: This C++ code snippet demonstrates how to decode LZMA properties from a byte array. It extracts lc, lp, pb, and dictSize from the provided properties array. It also handles the minimum dictionary size constraint.\nSOURCE: https://github.com/openai/retro/blob/master/cores/pce/deps/lzma-16.04/DOC/lzma-specification.txt#_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#define LZMA_DIC_MIN (1 << 12)\n\n  unsigned lc, pb, lp;\n  UInt32 dictSize;\n  UInt32 dictSizeInProperties;\n\n  void DecodeProperties(const Byte *properties)\n  {\n    unsigned d = properties[0];\n    if (d >= (9 * 5 * 5))\n      throw \"Incorrect LZMA properties\";\n    lc = d % 9;\n    d /= 9;\n    pb = d / 5;\n    lp = d % 5;\n    dictSizeInProperties = 0;\n    for (int i = 0; i < 4; i++)\n      dictSizeInProperties |= (UInt32)properties[i + 1] << (8 * i);\n    dictSize = dictSizeInProperties;\n    if (dictSize < LZMA_DIC_MIN)\n      dictSize = LZMA_DIC_MIN;\n  }\n```\n\n----------------------------------------\n\nTITLE: Creating Cap'n Proto C++ Compiler Executable\nDESCRIPTION: This snippet creates the `capnpc_cpp` executable, which is a plugin for the Cap'n Proto compiler that generates C++ code from schema definitions. It is linked against the `capnp` and `kj` libraries. A custom property is set to pass the executable location to the Capnp tool.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/c++/src/capnp/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT CAPNP_LITE)\n  add_executable(capnpc_cpp\n    compiler/capnpc-c++.c++\n  )\n  target_link_libraries(capnpc_cpp capnp kj)\n  set_target_properties(capnpc_cpp PROPERTIES OUTPUT_NAME capnpc-c++)\n  #Capnp tool needs capnpc_cpp location. But cmake deprecated LOCATION property.\n  #So we use custom property to pass location\n  set_target_properties(capnpc_cpp PROPERTIES CAPNPC_CXX_EXECUTABLE\n    $<TARGET_FILE:capnpc_cpp>\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Decode Bit with Probability Model C++\nDESCRIPTION: Decodes a single bit using a probability model. It takes a pointer to a CProb variable that contains the estimated probability for symbol 0 and updates the CProb variable after decoding, increasing the estimated probability of the decoded symbol. It also normalizes the Range.\nSOURCE: https://github.com/openai/retro/blob/master/cores/pce/deps/lzma-16.04/DOC/lzma-specification.txt#_snippet_9\n\nLANGUAGE: C++\nCODE:\n```\n#define kNumMoveBits 5\n\nunsigned CRangeDecoder::DecodeBit(CProb *prob)\n{\n  unsigned v = *prob;\n  UInt32 bound = (Range >> kNumBitModelTotalBits) * v;\n  unsigned symbol;\n  if (Code < bound)\n  {\n    v += ((1 << kNumBitModelTotalBits) - v) >> kNumMoveBits;\n    Range = bound;\n    symbol = 0;\n  }\n  else\n  {\n    v -= v >> kNumMoveBits;\n    Code -= bound;\n    Range -= bound;\n    symbol = 1;\n  }\n  *prob = (CProb)v;\n  Normalize();\n  return symbol;\n}\n```\n\n----------------------------------------\n\nTITLE: Google Mock Usage Example\nDESCRIPTION: This example demonstrates how to use Google Mock in a test. It includes creating a mock object, setting expectations on its methods, exercising code that uses the mock, and using Google Test assertions to check the result.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googlemock/docs/ForDummies.md#_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\n#include \"path/to/mock-turtle.h\"\n#include \"gmock/gmock.h\"\n#include \"gtest/gtest.h\"\nusing ::testing::AtLeast;                     // #1\n\nTEST(PainterTest, CanDrawSomething) {\n  MockTurtle turtle;                          // #2\n  EXPECT_CALL(turtle, PenDown())              // #3\n      .Times(AtLeast(1));\n\n  Painter painter(&turtle);                   // #4\n\n  EXPECT_TRUE(painter.DrawCircle(0, 0, 10));\n}                                             // #5\n\nint main(int argc, char** argv) {\n  // The following line must be executed to initialize Google Mock\n  // (and Google Test) before running the tests.\n  ::testing::InitGoogleMock(&argc, argv);\n  return RUN_ALL_TESTS();\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect pybind11 Binding with Default Return Policy\nDESCRIPTION: This code snippet demonstrates a common mistake when binding C++ functions that return pointers to static data structures using pybind11's default return value policy. The default policy assumes ownership of the returned pointer, leading to a crash when Python's garbage collector attempts to delete the statically allocated data.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/functions.rst#_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n/* Function declaration */\nData *get_data() { return _data; /* (pointer to a static data structure) */ }\n...\n\n/* Binding code */\nm.def(\"get_data\", &get_data); // <-- KABOOM, will cause crash when called from Python\n```\n\n----------------------------------------\n\nTITLE: Defining Cap'n Proto Headers\nDESCRIPTION: This snippet defines the header files for the Cap'n Proto core library. These headers provide the necessary interfaces and declarations for using the library in C++ applications. They include fundamental data structures and functionalities like blobs, layouts, messages, and serialization.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/c++/src/capnp/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(capnp_headers\n  c++.capnp.h\n  common.h\n  blob.h\n  endian.h\n  layout.h\n  orphan.h\n  list.h\n  any.h\n  message.h\n  capability.h\n  membrane.h\n  dynamic.h\n  schema.h\n  schema.capnp.h\n  schema-lite.h\n  schema-loader.h\n  schema-parser.h\n  pretty-print.h\n  serialize.h\n  serialize-async.h\n  serialize-packed.h\n  serialize-text.h\n  pointer-helpers.h\n  generated-header-support.h\n  raw-schema.h\n)\n```\n\n----------------------------------------\n\nTITLE: CBitTreeDecoder Class C++\nDESCRIPTION: Defines a template class for decoding bit trees. It includes an array of CProb variables representing the probabilities, an Init() method to initialize the probabilities, a Decode() method to decode a symbol from high bit to low bit, and a ReverseDecode() method to decode a symbol from low bit to high bit.\nSOURCE: https://github.com/openai/retro/blob/master/cores/pce/deps/lzma-16.04/DOC/lzma-specification.txt#_snippet_11\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <unsigned NumBits>\nclass CBitTreeDecoder\n{\n  CProb Probs[(unsigned)1 << NumBits];\n\npublic:\n\n  void Init()\n  {\n    INIT_PROBS(Probs);\n  }\n\n  unsigned Decode(CRangeDecoder *rc)\n  {\n    unsigned m = 1;\n    for (unsigned i = 0; i < NumBits; i++)\n      m = (m << 1) + rc->DecodeBit(&Probs[m]);\n    return m - ((unsigned)1 << NumBits);\n  }\n\n  unsigned ReverseDecode(CRangeDecoder *rc)\n  {\n    return BitTreeReverseDecode(Probs, NumBits, rc);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Encryption/Decryption Stream\nDESCRIPTION: This code snippet initializes the encryption or decryption stream using `fcrypt_init`. It requires the key size, password, salt, and a 2-byte buffer for the password verifier. The `fcrypt_ctx` structure is also required to maintain the encryption context.  The return value indicates success or failure.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/libzip/docs/aes_coding_tips.txt#_snippet_4\n\nLANGUAGE: C\nCODE:\n```\nfcrypt_ctx zctx;     // the encryption context\nint rc = fcrypt_init(\n  KeySize,       // extra data value indicating key size\n  pszPassword,     // the password\n  strlen(pszPassword), // number of bytes in password\n  achSALT,       // the salt\n  achPswdVerifier,   // on return contains password verifier\n  &zctx);       // encryption context\n```\n\n----------------------------------------\n\nTITLE: Example with Parent and Child classes using shared_ptr\nDESCRIPTION: This example demonstrates a scenario with Parent and Child classes using shared_ptr. The Parent class holds a shared_ptr to a Child object.  It highlights the problem of returning raw pointers to objects managed by shared_ptr, which can lead to double frees.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/smart_ptrs.rst#_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\nclass Child { };\n\n    class Parent {\n    public:\n       Parent() : child(std::make_shared<Child>()) { }\n       Child *get_child() { return child.get(); }  /* Hint: ** DON'T DO THIS ** */\n    private:\n        std::shared_ptr<Child> child;\n    };\n\n    PYBIND11_MODULE(example, m) {\n        py::class_<Child, std::shared_ptr<Child>>(m, \"Child\");\n\n        py::class_<Parent, std::shared_ptr<Parent>>(m, \"Parent\")\n           .def(py::init<>()) \n           .def(\"get_child\", &Parent::get_child);\n    }\n```\n\n----------------------------------------\n\nTITLE: Waiting for Promise Resolution in C++\nDESCRIPTION: This C++ snippet shows how to use the `wait()` method to synchronously wait for a promise to resolve within an event loop. It creates a `kj::EventLoop` and a `kj::WaitScope`, then waits for the `contentPromise` to resolve, and finally processes the result.  This approach is common in client-side code but rare in servers.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/doc/cxxrpc.md#_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\nkj::EventLoop loop;\nkj::WaitScope waitScope(loop);\n\nkj::Promise<kj::String> contentPromise =\n    fetchHttp(\"http://example.com\");\n\nkj::String content = contentPromise.wait(waitScope);\n\nint lineCount = countChars(content, '\\n');\n```\n\n----------------------------------------\n\nTITLE: Caching pybind11 variables\nDESCRIPTION: This code snippet caches several variables related to pybind11 and Python include directories, libraries, module prefix, and extension. This allows these variables to be accessible in parent projects that include pybind11 as a subdirectory.  The CACHE INTERNAL flag prevents them from being directly modified by the user.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# Cache variables so pybind11_add_module can be used in parent projects\nset(PYBIND11_INCLUDE_DIR \"${CMAKE_CURRENT_LIST_DIR}/include\" CACHE INTERNAL \"\")\nset(PYTHON_INCLUDE_DIRS ${PYTHON_INCLUDE_DIRS} CACHE INTERNAL \"\")\nset(PYTHON_LIBRARIES ${PYTHON_LIBRARIES} CACHE INTERNAL \"\")\nset(PYTHON_MODULE_PREFIX ${PYTHON_MODULE_PREFIX} CACHE INTERNAL \"\")\nset(PYTHON_MODULE_EXTENSION ${PYTHON_MODULE_EXTENSION} CACHE INTERNAL \"\")\n```\n\n----------------------------------------\n\nTITLE: Embedding a C++ Module for Python Interaction\nDESCRIPTION: This C++ code defines an embedded module named `cpp_module` and sets the attribute `a` to 1. It then imports the python module 'py_module' and interacts with the values returned.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/embedding.rst#_snippet_10\n\nLANGUAGE: cpp\nCODE:\n```\n#include <pybind11/embed.h>\nnamespace py = pybind11;\n\nPYBIND11_EMBEDDED_MODULE(cpp_module, m) {\n    m.attr(\"a\") = 1;\n}\n\nint main() {\n    py::scoped_interpreter guard{};\n\n    auto py_module = py::module::import(\"py_module\");\n\n    auto locals = py::dict(\"fmt\"_a=\"{} + {} = {}\", **py_module.attr(\"__dict__\"));\n    assert(locals[\"a\"].cast<int>() == 1);\n    assert(locals[\"b\"].cast<int>() == 2);\n\n    py::exec(R\"(\n            c = a + b\n            message = fmt.format(a, b, c)\n        )\", py::globals(), locals);\n\n    assert(locals[\"c\"].cast<int>() == 3);\n    assert(locals[\"message\"].cast<std::string>() == \"1 + 2 = 3\");\n}\n```\n\n----------------------------------------\n\nTITLE: Error Handling with zip_error_t in libzip\nDESCRIPTION: This code snippet demonstrates the recommended way to handle errors using the new `zip_error_t` type in libzip. It replaces the deprecated functions for error retrieval with the `zip_error_t` structure and its associated functions. It shows how to initialize the error, obtain the error string, and then clean up.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/libzip/API-CHANGES.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint err;\nif ((za = zip_open(archive, flags, &err)) == NULL) {\n\tzip_error_t error;\n\tzip_error_init_with_code(&error, err);\n\tfprintf(stderr, \"can't open zip archive '%s': %s\\n\", archive, zip_error_strerror(&error));\n\tzip_error_fini(&error);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Groups with Unions in Cap'n Proto\nDESCRIPTION: This example demonstrates how to combine groups with unions in Cap'n Proto. This helps in making the code more self-documenting and allows adding additional members later without breaking compatibility. The radius is a member of circle, so we don't need a comment to explain that the value of circle is its radius.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/doc/language.md#_snippet_8\n\nLANGUAGE: capnp\nCODE:\n```\nstruct Shape {\n  area @0 :Float64;\n\n  union {\n    circle :group {\n      radius @1 :Float64;\n    }\n    rectangle :group {\n      width @2 :Float64;\n      height @3 :Float64;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Exposing Properties Using def_property\nDESCRIPTION: This code snippet shows how to use `def_property` in pybind11 to expose the `name` of the `Pet` class as a property in Python, using the `getName` and `setName` methods as the getter and setter respectively. This allows Python code to access and modify the `name` as if it were a direct member, while actually calling the getter and setter methods.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/classes.rst#_snippet_8\n\nLANGUAGE: cpp\nCODE:\n```\npy::class_<Pet>(m, \"Pet\")\n    .def(py::init<const std::string &>())\n    .def_property(\"name\", &Pet::getName, &Pet::setName)\n    // ... remainder ...\n```\n\n----------------------------------------\n\nTITLE: Defining OS-Specific Source Files and Libraries\nDESCRIPTION: This CMake snippet defines the source files and libraries specific to the Wii platform. The `file(GLOB)` command finds all C files under the Wii platform directory, and the `list(APPEND)` command adds Wii-specific libraries to the `OS_LIB` variable. These are then set with `PARENT_SCOPE` to be available in parent directories.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/platform/wii/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nfile(GLOB OS_SRC ${CMAKE_SOURCE_DIR}/src/platform/wii/wii-*.c)\nlist(APPEND OS_LIB wiiuse bte fat ogc)\nset(OS_SRC ${OS_SRC} PARENT_SCOPE)\nsource_group(\"Wii-specific code\" FILES ${OS_SRC})\nset(CORE_VFS_SRC ${CORE_VFS_SRC} PARENT_SCOPE)\nset(OS_DEFINES ${OS_DEFINES} PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Defining an Embedded Module using PYBIND11_EMBEDDED_MODULE\nDESCRIPTION: This C++ code defines an embedded module named `fast_calc` using the `PYBIND11_EMBEDDED_MODULE` macro. The module defines an `add` function that takes two integers and returns their sum. It then imports and uses this module.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/embedding.rst#_snippet_8\n\nLANGUAGE: cpp\nCODE:\n```\n#include <pybind11/embed.h>\nnamespace py = pybind11;\n\nPYBIND11_EMBEDDED_MODULE(fast_calc, m) {\n    // `m` is a `py::module` which is used to bind functions and classes\n    m.def(\"add\", [](int i, int j) {\n        return i + j;\n    });\n}\n\nint main() {\n    py::scoped_interpreter guard{};\n\n    auto fast_calc = py::module::import(\"fast_calc\");\n    auto result = fast_calc.attr(\"add\")(1, 2).cast<int>();\n    assert(result == 3);\n}\n```\n\n----------------------------------------\n\nTITLE: Annotation Targets (Cap'n Proto)\nDESCRIPTION: This example shows the possible targets for annotations in Cap'n Proto, including `file`, `struct`, `field`, `union`, `enum`, `enumerant`, `interface`, `method`, `parameter`, `annotation`, and `const`.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/doc/language.md#_snippet_23\n\nLANGUAGE: capnp\nCODE:\n```\n# 'baz' can annotate anything!\nannotation baz(*) :Int32;\n\n$baz(1);  # Annotate the file.\n\nstruct MyStruct $baz(2) {\n  myField @0 :Text = \"default\" $baz(3);\n  myUnion :union $baz(4) {\n    # ...\n  }\n}\n\nenum MyEnum $baz(5) {\n  myEnumerant @0 $baz(6);\n}\n\ninterface MyInterface $baz(7) {\n  myMethod @0 (myParam :Text $baz(9)) -> () $baz(8);\n}\n\nannotation myAnnotation(struct) :Int32 $baz(10);\nconst myConst :Int32 = 123 $baz(11);\n{% endhighlight %}\n```\n\n----------------------------------------\n\nTITLE: Restricting the type of an argument or parameter\nDESCRIPTION: This code shows how to restrict the type of an argument or parameter within an action. It uses a conversion to ensure `arg0` can be converted to an integer and `StaticAssertTypeEq` to assert the type of `arg1` is `const char*`. It uses a similar conversion to restrict the type of the parameter `param` to `bool`.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googlemock/docs/DesignDoc.md#_snippet_7\n\nLANGUAGE: cpp\nCODE:\n```\nACTION(Foo) {\n  // Makes sure arg0 can be converted to int.\n  int n = arg0;\n  ... use n instead of arg0 here ...\n}\n\nACTION_P(Bar, param) {\n  // Makes sure the type of arg1 is const char*.\n  ::testing::StaticAssertTypeEq<const char*, arg1_type>();\n\n  // Makes sure param can be converted to bool.\n  bool flag = param;\n}\n```\n\n----------------------------------------\n\nTITLE: Static Qt Linking (Windows)\nDESCRIPTION: This snippet configures linking for static Qt builds on Windows. It finds the `qtpcre` library, links necessary platform support libraries, and sets interface link libraries for `Qt5::Core` and `Qt5::Gui` to ensure all dependencies are correctly linked in a static build.\nSOURCE: https://github.com/openai/retro/blob/master/src/ui/CMakeLists.txt#_snippet_16\n\nLANGUAGE: CMake\nCODE:\n```\nif(QT_STATIC)\n        find_library(QTPCRE NAMES qtpcre qtpcre2)\n        target_link_libraries(gym-retro-integration -lQt5PlatformSupport -limm32)\n        set_target_properties(Qt5::Core PROPERTIES INTERFACE_LINK_LIBRARIES \"${QTPCRE};version;ws2_32;z\")\n        set_target_properties(Qt5::Gui PROPERTIES INTERFACE_LINK_LIBRARIES \"opengl32;winmm\")\n    endif()\n```\n\n----------------------------------------\n\nTITLE: Using GoogleTest in Plain Makefiles\nDESCRIPTION: This Makefile snippet uses `pkg-config` to obtain the necessary compiler and linker flags for GoogleTest.  It defines rules for compiling and linking the `testapp` executable and specifies dependencies between the object file and source file.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/Pkgconfig.md#_snippet_4\n\nLANGUAGE: makefile\nCODE:\n```\nGTEST_CFLAGS = `pkg-config --cflags gtest_main`\nGTEST_LIBS = `pkg-config --libs gtest_main`\n\n.PHONY: tests all\n\ntests: all\n\t./testapp\n\nall: testapp\n\ntestapp: testapp.o\n\t$(CXX) $(CXXFLAGS) $(LDFLAGS) $< -o $@ $(GTEST_LIBS)\n\ntestapp.o: samples/sample3_unittest.cc\n\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) $< -c -o $@ $(GTEST_CFLAGS)\n```\n\n----------------------------------------\n\nTITLE: Trampoline Class for Virtual Functions (C++)\nDESCRIPTION: Defines template classes for handling virtual function overrides in Python. It inherits constructors and uses PYBIND11_OVERLOAD macros to dispatch calls to Python implementations.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/classes.rst#_snippet_11\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <class AnimalBase = Animal> class PyAnimal : public AnimalBase {\n    public:\n        using AnimalBase::AnimalBase; // Inherit constructors\n        std::string go(int n_times) override { PYBIND11_OVERLOAD_PURE(std::string, AnimalBase, go, n_times); }\n        std::string name() override { PYBIND11_OVERLOAD(std::string, AnimalBase, name, ); }\n    };\ntemplate <class DogBase = Dog> class PyDog : public PyAnimal<DogBase> {\n    public:\n        using PyAnimal<DogBase>::PyAnimal; // Inherit constructors\n        // Override PyAnimal's pure virtual go() with a non-pure one:\n        std::string go(int n_times) override { PYBIND11_OVERLOAD(std::string, DogBase, go, n_times); }\n        std::string bark() override { PYBIND11_OVERLOAD(std::string, DogBase, bark, ); }\n    };\n```\n\n----------------------------------------\n\nTITLE: Typed Test Definition C++\nDESCRIPTION: Defines a typed test using `TYPED_TEST()`.  Inside the test, `TypeParam` refers to the current type being tested. Access to members of the fixture class requires `this->` or `TestFixture::` prefixes.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/AdvancedGuide.md#_snippet_31\n\nLANGUAGE: cpp\nCODE:\n```\nTYPED_TEST(FooTest, DoesBlah) {\n  // Inside a test, refer to the special name TypeParam to get the type\n  // parameter.  Since we are inside a derived class template, C++ requires\n  // us to visit the members of FooTest via 'this'.\n  TypeParam n = this->value_;\n\n  // To visit static members of the fixture, add the 'TestFixture::'\n  // prefix.\n  n += TestFixture::shared_;\n\n  // To refer to typedefs in the fixture, add the 'typename TestFixture::'\n  // prefix.  The 'typename' is required to satisfy the compiler.\n  typename TestFixture::List values;\n  values.push_back(n);\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Parser Combinator Example in C++\nDESCRIPTION: This code snippet demonstrates the use of the parser combinator framework within the Cap'n Proto's utility library, KJ. It constructs a parser that parses numbers, including handling of optional decimal fractions. The resulting parser object has a small memory footprint and could potentially be declared constexpr (if C++ allowed empty-capture lambdas to be constexpr).\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/doc/_posts/2013-08-12-capnproto-0.2-no-more-haskell.md#_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n// Construct a parser that parses a number.\nauto number = transform(\n    sequence(\n        oneOrMore(charRange('0', '9')),\n        optional(sequence(\n            exactChar<'.'>(),\n            many(charRange('0', '9'))))),\n    [](Array<char> whole, Maybe<Array<char>> maybeFraction)\n        -> Number* {\n      KJ_IF_MAYBE(fraction, maybeFraction) {\n        return new RealNumber(whole, *fraction);\n      } else {\n        return new WholeNumber(whole);\n      }\n    });\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Target for Python (CMake)\nDESCRIPTION: This snippet adds a custom target named `${BINARY_NAME}-py` that depends on `BINARY_NAME`, `setup.py`, Python headers, and `_builder.py`. The target executes the `setup.py` script to create egg info and build the library.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/platform/python/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(${BINARY_NAME}-py ALL\n                  COMMAND ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_BINARY_DIR}/setup.py egg_info -e ${CMAKE_CURRENT_BINARY_DIR} ${PYLIB_VERSION}\n                  COMMAND BINDIR=${CMAKE_CURRENT_BINARY_DIR}/.. CPPFLAGS=\"${INCLUDE_FLAGS}\" ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_BINARY_DIR}/setup.py build -b ${CMAKE_CURRENT_BINARY_DIR}\n                  WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}\n                  DEPENDS ${BINARY_NAME}\n                  DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/setup.py\n                  DEPENDS ${PYTHON_HEADERS}\n                  DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/_builder.py\n                  DEPENDS ${BINARY_NAME}-pylib)\n```\n\n----------------------------------------\n\nTITLE: Summing 3D NumPy Array Elements\nDESCRIPTION: This snippet demonstrates how to directly access elements of a 3D NumPy array using `unchecked<3>` for improved performance. It calculates the sum of all elements in the array, avoiding bounds checking for each element access.  This is useful when indices are known to be valid.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/pycpp/numpy.rst#_snippet_11\n\nLANGUAGE: cpp\nCODE:\n```\nm.def(\"sum_3d\", [](py::array_t<double> x) {\n        auto r = x.unchecked<3>(); // x must have ndim = 3; can be non-writeable\n        double sum = 0;\n        for (ssize_t i = 0; i < r.shape(0); i++)\n            for (ssize_t j = 0; j < r.shape(1); j++)\n                for (ssize_t k = 0; k < r.shape(2); k++)\n                    sum += r(i, j, k);\n        return sum;\n    });\n```\n\n----------------------------------------\n\nTITLE: Building Framework with CMake\nDESCRIPTION: This snippet builds an OS X framework if the `PNG_FRAMEWORK` option is enabled.  It sets specific properties to create a valid framework bundle, including framework version, identifier, public headers, and output name.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/third-party/libpng/CMakeLists.txt#_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nif(PNG_FRAMEWORK)\n  set(PNG_LIB_NAME_FRAMEWORK ${PNG_LIB_NAME}_framework)\n  add_library(${PNG_LIB_NAME_FRAMEWORK} SHARED ${libpng_sources})\n  list(APPEND PNG_LIB_TARGETS ${PNG_LIB_NAME_FRAMEWORK})\n  set_target_properties(${PNG_LIB_NAME_FRAMEWORK} PROPERTIES\n    FRAMEWORK TRUE\n    FRAMEWORK_VERSION ${PNGLIB_VERSION}\n    MACOSX_FRAMEWORK_SHORT_VERSION_STRING ${PNGLIB_MAJOR}.${PNGLIB_MINOR}\n    MACOSX_FRAMEWORK_BUNDLE_VERSION ${PNGLIB_VERSION}\n    MACOSX_FRAMEWORK_IDENTIFIER org.libpng.libpng\n    XCODE_ATTRIBUTE_INSTALL_PATH \"@rpath\"\n    PUBLIC_HEADER \"${libpng_public_hdrs}\"\n    OUTPUT_NAME png)\n  target_link_libraries(${PNG_LIB_NAME_FRAMEWORK} ${ZLIB_LIBRARY} ${M_LIBRARY})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating Cap'n Proto RPC Library\nDESCRIPTION: This snippet creates the Cap'n Proto RPC library, linking it with the core `capnp`, `kj-async`, and `kj` libraries. The library is only built if `CAPNP_LITE` is not defined, excluding it from the lite build configuration.  The targets and files are then installed.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/c++/src/capnp/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT CAPNP_LITE)\n  add_library(capnp-rpc ${capnp-rpc_sources})\n  add_library(CapnProto::capnp-rpc ALIAS capnp-rpc)\n  target_link_libraries(capnp-rpc PUBLIC capnp kj-async kj)\n  install(TARGETS capnp-rpc ${INSTALL_TARGETS_DEFAULT_ARGS})\n  install(FILES ${capnp-rpc_headers} ${capnp-rpc_schemas} DESTINATION \"${CMAKE_INSTALL_INCLUDEDIR}/capnp\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files with CMake\nDESCRIPTION: This section defines the source files for the libpng library, tests, and validation tools. These file lists are used later in the build process to create the libraries and executables.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/third-party/libpng/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nset(libpng_public_hdrs\n  png.h\n  pngconf.h\n  ${CMAKE_CURRENT_BINARY_DIR}/pnglibconf.h\n)\nset(libpng_sources\n  ${libpng_public_hdrs}\n  pngdebug.h\n  pnginfo.h\n  pngpriv.h\n  pngstruct.h\n  png.c\n  pngerror.c\n  pngget.c\n  pngmem.c\n  pngpread.c\n  pngread.c\n  pngrio.c\n  pngrtran.c\n  pngrutil.c\n  pngset.c\n  pngtrans.c\n  pngwio.c\n  pngwrite.c\n  pngwtran.c\n  pngwutil.c\n)\nset(pngtest_sources\n  pngtest.c\n)\nset(pngvalid_sources\n  contrib/libtests/pngvalid.c\n)\nset(pngstest_sources\n  contrib/libtests/pngstest.c\n)\n```\n\n----------------------------------------\n\nTITLE: LZMA Decoder State Update Functions in C++\nDESCRIPTION: These code snippets define functions to update the decoder's state based on whether a literal, match, repeated match, or short repeated match was decoded. These functions are crucial for maintaining the context of the LZMA decoding process and selecting appropriate probability models.\nSOURCE: https://github.com/openai/retro/blob/master/cores/genesis/core/cd_hw/libchdr/deps/lzma/DOC/lzma-specification.txt#_snippet_24\n\nLANGUAGE: cpp\nCODE:\n```\nunsigned UpdateState_Literal(unsigned state)\n{\n  if (state < 4) return 0;\n  else if (state < 10) return state - 3;\n  else return state - 6;\n}\nunsigned UpdateState_Match   (unsigned state) { return state < 7 ? 7 : 10; }\nunsigned UpdateState_Rep     (unsigned state) { return state < 7 ? 8 : 11; }\nunsigned UpdateState_ShortRep(unsigned state) { return state < 7 ? 9 : 11; }\n```\n\n----------------------------------------\n\nTITLE: Printing a Python List in C++ with py::list\nDESCRIPTION: This C++ snippet defines a function `print_list` that accepts a Python list (`py::list`) as input and iterates through its elements, printing each element to the console. The `py::list` type is a wrapper around the native Python list, allowing C++ code to interact with Python lists without converting the underlying data until necessary.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/cast/overview.rst#_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nvoid print_list(py::list my_list) {\n    for (auto item : my_list)\n        std::cout << item << \" \";\n}\n```\n\n----------------------------------------\n\nTITLE: Evaluating Python expressions from C++ using py::eval, py::exec, py::eval_file\nDESCRIPTION: This snippet demonstrates how to use pybind11's py::eval, py::exec, and py::eval_file functions to evaluate Python expressions, execute Python statements, and evaluate Python files from within C++. It requires including the <pybind11/eval.h> header.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/pycpp/utilities.rst#_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\n// At beginning of file\n#include <pybind11/eval.h>\n\n...\n\n// Evaluate in scope of main module\npy::object scope = py::module::import(\"__main__\").attr(\"__dict__\");\n\n// Evaluate an isolated expression\nint result = py::eval(\"my_variable + 10\", scope).cast<int>();\n\n// Evaluate a sequence of statements\npy::exec(\n    \"print('Hello')\\n\"\n    \"print('world!');\",\n    scope);\n\n// Evaluate the statements in an separate Python file on disk\npy::eval_file(\"script.py\", scope);\n```\n\n----------------------------------------\n\nTITLE: Initializing Range Decoder State in C++\nDESCRIPTION: The `CRangeDecoder::Init()` function initializes the state of the range decoder. It sets `Corrupted` to `false`, `Range` to `0xFFFFFFFF`, and `Code` to 0. It then reads 5 bytes from the input stream and checks for a corrupted stream by verifying if the first byte is 0 and `Code` is equal to `Range`.\nSOURCE: https://github.com/openai/retro/blob/master/cores/genesis/core/cd_hw/libchdr/deps/lzma/DOC/lzma-specification.txt#_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\nbool CRangeDecoder::Init()\n{\n  Corrupted = false;\n  Range = 0xFFFFFFFF;\n  Code = 0;\n\n  Byte b = InStream->ReadByte();\n  \n  for (int i = 0; i < 4; i++)\n    Code = (Code << 8) | InStream->ReadByte();\n  \n  if (b != 0 || Code == Range)\n    Corrupted = true;\n  return b == 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Matcher for Range Checking in Google Test C++\nDESCRIPTION: This code defines a custom matcher named `IsBetween` using the `MATCHER_P2` macro, which takes two parameters `a` and `b`. The matcher checks if an argument is within the range [`a`, `b`], inclusive. The matcher description provides information about whether the argument is within the specified range.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googlemock/docs/CheatSheet.md#_snippet_10\n\nLANGUAGE: C++\nCODE:\n```\nMATCHER_P2(IsBetween, a, b, std::string(negation ? \"isn't\" : \"is\") + \" between \" + PrintToString(a) + \" and \" + PrintToString(b)) { return a <= arg && arg <= b; }\n```\n\n----------------------------------------\n\nTITLE: AssertionResult with Custom Message\nDESCRIPTION: This snippet shows how to use `AssertionResult` to provide more informative messages in boolean assertions.  The `IsEven` function now returns an `AssertionResult` object, allowing it to stream a custom message to the assertion result to show exactly why it succeeded or failed.  Dependencies: Google Test framework.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/AdvancedGuide.md#_snippet_4\n\nLANGUAGE: c++\nCODE:\n```\n::testing::AssertionResult IsEven(int n) {\n  if ((n % 2) == 0)\n    return ::testing::AssertionSuccess() << n << \" is even\";\n  else\n    return ::testing::AssertionFailure() << n << \" is odd\";\n}\n```\n\n----------------------------------------\n\nTITLE: Google Mock with Other Testing Frameworks\nDESCRIPTION: This snippet illustrates how to integrate Google Mock with testing frameworks other than Google Test (e.g., CppUnit or CxxTest). It shows how to configure Google Mock to throw an exception on failure, which the testing framework can then interpret as a test failure. It requires initializing Google Mock and setting the GTEST_FLAG(throw_on_failure) to true.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googlemock/docs/ForDummies.md#_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\nint main(int argc, char** argv) {\n  // The following line causes Google Mock to throw an exception on failure,\n  // which will be interpreted by your testing framework as a test failure.\n  ::testing::GTEST_FLAG(throw_on_failure) = true;\n  ::testing::InitGoogleMock(&argc, argv);\n  ... whatever your testing framework requires ...\n}\n```\n\n----------------------------------------\n\nTITLE: Finding GoogleTest in CMake using pkg-config\nDESCRIPTION: This CMake snippet uses `pkg-config` to find and link GoogleTest. It searches for the `gtest_main` module and sets the compiler options and link libraries accordingly. The `target_compile_options` and `target_link_libraries` commands are used to integrate GoogleTest into the build process.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/Pkgconfig.md#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.0)\n\ncmake_policy(SET CMP0048 NEW)\nproject(my_gtest_pkgconfig VERSION 0.0.1 LANGUAGES CXX)\n\nfind_package(PkgConfig)\npkg_search_module(GTEST REQUIRED gtest_main)\n\nadd_executable(testapp samples/sample3_unittest.cc)\ntarget_link_libraries(testapp ${GTEST_LDFLAGS})\ntarget_compile_options(testapp PUBLIC ${GTEST_CFLAGS})\n\ninclude(CTest)\nadd_test(first_and_only_test testapp)\n```\n\n----------------------------------------\n\nTITLE: Inheriting from Multiple C++ Bases in Python\nDESCRIPTION: This Python code snippet demonstrates how to inherit from multiple C++ base classes using pybind11. It defines a Python class `PyDerived` that inherits from `CppBase1` and `CppBase2`.  C++ bases must be initialized explicitly using `CppBase1.__init__(self)` and `CppBase2.__init__(self)`.  The C++ module providing the base classes must be built with pybind11.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/changelog.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom cpp_module import CppBase1, CppBase2\n\nclass PyDerived(CppBase1, CppBase2):\n    def __init__(self):\n        CppBase1.__init__(self)  # C++ bases must be initialized explicitly\n        CppBase2.__init__(self)\n```\n\n----------------------------------------\n\nTITLE: Creating Cap'n Proto Core Library\nDESCRIPTION: This snippet creates the Cap'n Proto core library using the defined sources and headers. It also sets up an alias for the library and links it with the `kj` library. Include directories are configured to allow external consumers to use the library without manual setup.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/c++/src/capnp/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(capnp ${capnp_sources})\nadd_library(CapnProto::capnp ALIAS capnp)\ntarget_link_libraries(capnp PUBLIC kj)\n#make sure external consumers don't need to manually set the include dirs\ntarget_include_directories(capnp INTERFACE\n  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/..>\n  $<INSTALL_INTERFACE:include>\n)\ninstall(TARGETS capnp ${INSTALL_TARGETS_DEFAULT_ARGS})\ninstall(FILES ${capnp_headers} ${capnp_schemas} DESTINATION \"${CMAKE_INSTALL_INCLUDEDIR}/capnp\")\n```\n\n----------------------------------------\n\nTITLE: Binding C++ Struct to Python with pybind11\nDESCRIPTION: This code snippet demonstrates how to use pybind11 to create Python bindings for the `Pet` struct defined in C++. It uses `py::class_` to define the binding, `py::init` to bind the constructor, and `def` to bind the `setName` and `getName` methods. The module is named \"example\".\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/classes.rst#_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\n#include <pybind11/pybind11.h>\n\nnamespace py = pybind11;\n\nPYBIND11_MODULE(example, m) {\n    py::class_<Pet>(m, \"Pet\")\n        .def(py::init<const std::string &>())\n        .def(\"setName\", &Pet::setName)\n        .def(\"getName\", &Pet::getName);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Root Paths for Finding Dependencies\nDESCRIPTION: This snippet sets the root path for finding dependencies to the DEVKITARM toolchain directory. It also configures the search modes to only search within the toolchain for libraries and includes, but never for programs. This is essential for cross-compilation, ensuring that the host system's libraries and includes are not used by mistake.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/platform/3ds/CMakeToolchain.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_FIND_ROOT_PATH ${DEVKITARM}/arm-none-eabi)\nset(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER CACHE INTERNAL \"\")\nset(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY CACHE INTERNAL \"\")\nset(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY CACHE INTERNAL \"\")\n```\n\n----------------------------------------\n\nTITLE: Base Class Specification Update in pybind11 (C++)\nDESCRIPTION: This snippet shows the deprecation of `py::base<T>()` and the new syntax for specifying base classes in pybind11. The base class is now provided as a template argument to `py::class_`, supporting multiple inheritance and arbitrary ordering of base classes, holder types, and trampoline classes.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/upgrade.rst#_snippet_8\n\nLANGUAGE: cpp\nCODE:\n```\n// old v1.x\npy::class_<Derived>(\"Derived\", py::base<Base>());\n\n// new v2.x\npy::class_<Derived, Base>(\"Derived\");\n\n// new -- multiple inheritance\npy::class_<Derived, Base1, Base2>(\"Derived\");\n\n// new -- apart from `Derived` the argument order can be arbitrary\npy::class_<Derived, Base1, Holder, Base2, Trampoline>(\"Derived\");\n```\n\n----------------------------------------\n\nTITLE: Google Test Example: Factorial Tests\nDESCRIPTION: This code demonstrates how to create test cases and tests using Google Test. It defines two tests, HandlesZeroInput and HandlesPositiveInput, within the FactorialTest test case.  The tests use EXPECT_EQ to assert the expected output of the Factorial function for different inputs.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/Primer.md#_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\n// Tests factorial of 0.\nTEST(FactorialTest, HandlesZeroInput) {\n  EXPECT_EQ(1, Factorial(0));\n}\n\n// Tests factorial of positive numbers.\nTEST(FactorialTest, HandlesPositiveInput) {\n  EXPECT_EQ(1, Factorial(1));\n  EXPECT_EQ(2, Factorial(2));\n  EXPECT_EQ(6, Factorial(3));\n  EXPECT_EQ(40320, Factorial(8));\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a polymorphic action\nDESCRIPTION: This code demonstrates defining a custom action using `MakePolymorphicAction()`. This approach requires more boilerplate code, including defining a class with a `Perform` method that takes a tuple of arguments. While more verbose, it offers greater flexibility in terms of argument types.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googlemock/docs/DesignDoc.md#_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nclass IncrementArg1Action {\n public:\n  template <typename Result, typename ArgumentTuple>\n  Result Perform(const ArgumentTuple& args) const {\n    return ++(*tr1::get<1>(args));\n  }\n};\n\nPolymorphicAction<IncrementArg1Action> IncrementArg1() {\n  return MakePolymorphicAction(IncrementArg1Action());\n}\n\n... WillOnce(IncrementArg1());\n```\n\n----------------------------------------\n\nTITLE: Exposing a Matrix Class with Buffer Protocol in C++\nDESCRIPTION: This code snippet demonstrates how to expose a simple Matrix class to Python using the buffer protocol. It uses pybind11 to create a Python class binding and defines a buffer providing access to the underlying data. This allows casting Matrices into NumPy arrays without copying data.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/pycpp/numpy.rst#_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nclass Matrix {\npublic:\n    Matrix(size_t rows, size_t cols) : m_rows(rows), m_cols(cols) {\n        m_data = new float[rows*cols];\n    }\n    float *data() { return m_data; }\n    size_t rows() const { return m_rows; }\n    size_t cols() const { return m_cols; }\nprivate:\n    size_t m_rows, m_cols;\n    float *m_data;\n};\n```\n\n----------------------------------------\n\nTITLE: MyClass with Matrix - C++\nDESCRIPTION: This C++ class contains an Eigen::MatrixXd and provides methods to access it. The 'getMatrix' method returns a modifiable reference, 'viewMatrix' returns a const reference and 'copy_matrix' returns a copy. Proper return value policies are crucial to manage the lifetime and ownership of the matrix data when interacting with Python.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/cast/eigen.rst#_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nclass MyClass {\n        Eigen::MatrixXd big_mat = Eigen::MatrixXd::Zero(10000, 10000);\n    public:\n        Eigen::MatrixXd &getMatrix() { return big_mat; }\n        const Eigen::MatrixXd &viewMatrix() { return big_mat; }\n    };\n```\n\n----------------------------------------\n\nTITLE: Defining Overloaded Methods in C++\nDESCRIPTION: This code snippet defines a C++ struct named `Pet` with two overloaded `set` methods: one taking an integer (age) and another taking a string (name). This demonstrates a common scenario where method overloading requires disambiguation when binding to Python using pybind11.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/classes.rst#_snippet_21\n\nLANGUAGE: cpp\nCODE:\n```\nstruct Pet {\n    Pet(const std::string &name, int age) : name(name), age(age) { }\n\n    void set(int age_) { age = age_; }\n    void set(const std::string &name_) { name = name_; }\n\n    std::string name;\n    int age;\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Range Decoder State C++\nDESCRIPTION: Initializes the Range Decoder by setting the 'Corrupted' flag to false, the 'Range' to 0xFFFFFFFF, and 'Code' to 0. It then reads the first 5 bytes from the input stream to initialize the state and checks for initial corruption. Returns true if the initial byte is 0, otherwise returns false.\nSOURCE: https://github.com/openai/retro/blob/master/cores/pce/deps/lzma-16.04/DOC/lzma-specification.txt#_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\nbool CRangeDecoder::Init()\n{\n  Corrupted = false;\n  Range = 0xFFFFFFFF;\n  Code = 0;\n\n  Byte b = InStream->ReadByte();\n  \n  for (int i = 0; i < 4; i++)\n    Code = (Code << 8) | InStream->ReadByte();\n  \n  if (b != 0 || Code == Range)\n    Corrupted = true;\n  return b == 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Linked Man Pages (CMake)\nDESCRIPTION: This CMake code reads lines from the `MANPAGE_LINKS` file and installs files from the binary directory to the `man3` subdirectory with a new name. It relies on regular expression matching to extract source and destination filenames from each line.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/libzip/man/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nFILE(STRINGS links MANPAGE_LINKS)\nFOREACH(LINKS_LINE ${MANPAGE_LINKS})\n  IF(${LINKS_LINE} MATCHES \"(.*) (.*)\")\n    INSTALL(FILES ${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_MATCH_1}.3 DESTINATION ${CMAKE_INSTALL_MANDIR}/man3 RENAME ${CMAKE_MATCH_2}.3)\n  ENDIF()\nENDFOREACH()\n```\n\n----------------------------------------\n\nTITLE: Creating and Initializing Literal Probabilities in C++\nDESCRIPTION: The `CreateLiterals` function allocates memory for the `LitProbs` array, which stores CProb values for literal decoding. The size of the array is determined by `(UInt32)0x300 << (lc + lp)`. The `InitLiterals` function initializes all elements of the `LitProbs` array with `PROB_INIT_VAL`.\nSOURCE: https://github.com/openai/retro/blob/master/cores/genesis/core/cd_hw/libchdr/deps/lzma/DOC/lzma-specification.txt#_snippet_14\n\nLANGUAGE: C++\nCODE:\n```\nCProb *LitProbs;\n\n  void CreateLiterals()\n  {\n    LitProbs = new CProb[(UInt32)0x300 << (lc + lp)];\n  }\n  \n  void InitLiterals()\n  {\n    UInt32 num = (UInt32)0x300 << (lc + lp);\n    for (UInt32 i = 0; i < num; i++)\n      LitProbs[i] = PROB_INIT_VAL;\n  }\n```\n\n----------------------------------------\n\nTITLE: Vectorizing a Function with pybind11\nDESCRIPTION: This code snippet shows how to use `py::vectorize` to bind a C++ function to Python so that it can process NumPy array arguments. The `py::vectorize` function automatically creates a wrapper that iterates over the elements of the input arrays and calls the underlying C++ function for each element.  This allows the C++ compiler to create an optimized loop over the elements.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/pycpp/numpy.rst#_snippet_7\n\nLANGUAGE: cpp\nCODE:\n```\ndouble my_func(int x, float y, double z);\n\nm.def(\"vectorized_func\", py::vectorize(my_func));\n```\n\n----------------------------------------\n\nTITLE: Template Metaprogramming: UnConst Example (C++)\nDESCRIPTION: This snippet shows how to define a template metafunction, `UnConst`, to remove the const qualifier from a type. It uses a similar approach to the previous example, defining `UnConst_<T>` and then aliasing its `Type` member using a `using` statement.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/style-guide.md#_snippet_10\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <typename T> struct UnConst_ { typedef T Type; };\ntemplate <typename T> struct UnConst_<const T> { typedef T Type; };\ntemplate <typename T> using UnConst = typename UnConst_<T>::Type;\n// If T is const, return the underlying non-const type.\n// Otherwise, just return T.\n```\n\n----------------------------------------\n\nTITLE: Creating Cap'n Proto Tool Executable\nDESCRIPTION: This snippet creates the `capnp_tool` executable, which serves as the main command-line interface for Cap'n Proto. It is linked against the `capnpc`, `capnp`, and `kj` libraries.  Properties are set to define the output name and include directory.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/c++/src/capnp/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT CAPNP_LITE)\n  add_executable(capnp_tool\n    compiler/module-loader.c++\n    compiler/capnp.c++\n  )\n  target_link_libraries(capnp_tool capnpc capnp kj)\n  set_target_properties(capnp_tool PROPERTIES OUTPUT_NAME capnp)\n  set_target_properties(capnp_tool PROPERTIES CAPNP_INCLUDE_DIRECTORY\n    $<JOIN:$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/..>,$<INSTALL_INTERFACE:${CMAKE_INSTALL_BINDIR}/..>>\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Python Dict Argument Example\nDESCRIPTION: This C++ code demonstrates how to accept a Python dictionary (`py::dict`) as an argument in a pybind11 function. It iterates through the dictionary's key-value pairs, converts them to strings, and prints them to the console. This allows direct interaction with Python dictionary objects from C++ code.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/functions.rst#_snippet_7\n\nLANGUAGE: cpp\nCODE:\n```\nvoid print_dict(py::dict dict) {\n    /* Easily interact with Python types */\n    for (auto item : dict)\n        std::cout << \"key=\" << std::string(py::str(item.first)) << \", \"\n                  << \"value=\" << std::string(py::str(item.second)) << std::endl;\n}\n```\n\n----------------------------------------\n\nTITLE: Incrementing 3D NumPy Array Elements\nDESCRIPTION: This snippet demonstrates how to directly access and modify elements of a 3D NumPy array using `mutable_unchecked<3>` for optimized in-place updates. It increments each element of the array by 1.0.  This approach bypasses bounds checking, but requires the array to be writeable.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/pycpp/numpy.rst#_snippet_12\n\nLANGUAGE: cpp\nCODE:\n```\nm.def(\"increment_3d\", [](py::array_t<double> x) {\n        auto r = x.mutable_unchecked<3>(); // Will throw if ndim != 3 or flags.writeable is false\n        for (ssize_t i = 0; i < r.shape(0); i++)\n            for (ssize_t j = 0; j < r.shape(1); j++)\n                for (ssize_t k = 0; k < r.shape(2); k++)\n                    r(i, j, k) += 1.0;\n    }, py::arg().noconvert());\n```\n\n----------------------------------------\n\nTITLE: Define PyHusky Trampoline Class\nDESCRIPTION: This code defines the `PyHusky` trampoline class, which inherits from `Husky` and overrides the virtual functions `go`, `name`, and `bark`.  It uses the `PYBIND11_OVERLOAD_PURE` and `PYBIND11_OVERLOAD` macros to enable Python overrides of the virtual functions.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/classes.rst#_snippet_10\n\nLANGUAGE: cpp\nCODE:\n```\nclass Husky : public Dog {};\nclass PyHusky : public Husky {\npublic:\n    using Husky::Husky; // Inherit constructors\n    std::string go(int n_times) override { PYBIND11_OVERLOAD_PURE(std::string, Husky, go, n_times); }\n    std::string name() override { PYBIND11_OVERLOAD(std::string, Husky, name, ); }\n    std::string bark() override { PYBIND11_OVERLOAD(std::string, Husky, bark, ); }\n};\n```\n\n----------------------------------------\n\nTITLE: Decode Direct Bits C++\nDESCRIPTION: Decodes a sequence of direct bits (binary symbols with fixed and equal probabilities) from the input stream. The function iterates 'numBits' times, updating 'Range' and 'Code' based on the decoded bit, and normalizing 'Range' after each bit is processed.\nSOURCE: https://github.com/openai/retro/blob/master/cores/pce/deps/lzma-16.04/DOC/lzma-specification.txt#_snippet_8\n\nLANGUAGE: C++\nCODE:\n```\nUInt32 CRangeDecoder::DecodeDirectBits(unsigned numBits)\n{\n  UInt32 res = 0;\n  do\n  {\n    Range >>= 1;\n    Code -= Range;\n    UInt32 t = 0 - ((UInt32)Code >> 31);\n    Code += Range & t;\n    \n    if (Code == Range)\n      Corrupted = true;\n    \n    Normalize();\n    res <<= 1;\n    res += t + 1;\n  }\n  while (--numBits);\n  return res;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Matcher for Divisibility in Google Test C++\nDESCRIPTION: This snippet defines a custom matcher named `IsDivisibleBy` using the `MATCHER_P` macro, which takes one parameter `n`.  The matcher checks if an argument is divisible by `n` and includes additional information about the remainder in the match result explanation. It returns true if the argument is divisible by `n` and false otherwise.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googlemock/docs/CheatSheet.md#_snippet_9\n\nLANGUAGE: C++\nCODE:\n```\nMATCHER_P(IsDivisibleBy, n, \"\") { *result_listener << \"where the remainder is \" << (arg % n); return (arg % n) == 0; }\n```\n\n----------------------------------------\n\nTITLE: Create PS Vita VPK package\nDESCRIPTION: Calls the `vita_create_vpk` function (provided by VitaSDK's CMake module) to create a VPK (Vita Package) file, which is the installation package for PS Vita applications. It specifies the application's ID, SELF file, name, and various assets.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/platform/psp2/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\nvita_create_vpk(${BINARY_NAME}.vpk MGBA00001 ${BINARY_NAME}.self\n                NAME ${PROJECT_NAME}\n                FILE ${CMAKE_CURRENT_SOURCE_DIR}/icon0.png sce_sys/icon0.png\n                FILE ${CMAKE_CURRENT_SOURCE_DIR}/pic0.png sce_sys/pic0.png\n                FILE ${CMAKE_CURRENT_SOURCE_DIR}/bg.png sce_sys/livearea/contents/bg.png\n                FILE ${CMAKE_CURRENT_SOURCE_DIR}/startup.png sce_sys/livearea/contents/startup.png\n                FILE ${CMAKE_CURRENT_BINARY_DIR}/template.xml sce_sys/livearea/contents/template.xml)\n```\n\n----------------------------------------\n\nTITLE: UTF-8 String Handling in C++ with pybind11\nDESCRIPTION: This code snippet demonstrates how pybind11 handles UTF-8 encoded strings passed from Python to C++.  The Python string is encoded to UTF-8 when passed to a C++ function accepting `std::string` or `char*`. The code defines two C++ functions, `utf8_test` and `utf8_charptr`, that receive a UTF-8 string and print it to the console.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/cast/strings.rst#_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nm.def(\"utf8_test\",\n    [](const std::string &s) {\n        cout << \"utf-8 is icing on the cake.\\n\";\n        cout << s;\n    }\n);\nm.def(\"utf8_charptr\",\n    [](const char *s) {\n        cout << \"My favorite food is\\n\";\n        cout << s;\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Target to Run a Python Test\nDESCRIPTION: This snippet adds a custom target named `check` that executes a Python test script using the `CMAKE_COMMAND` and setting the `PYTHONPATH` environment variable. The PYTHONPATH is set to the directory containing the compiled module, allowing Python to find and import the module during the test. The python script is expected to be found at `${PROJECT_SOURCE_DIR}/../test.py`.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/tests/test_cmake_build/subdirectory_target/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_target(check ${CMAKE_COMMAND} -E env PYTHONPATH=$<TARGET_FILE_DIR:test_cmake_build>\n                  ${PYTHON_EXECUTABLE} ${PROJECT_SOURCE_DIR}/../test.py ${PROJECT_NAME})\n```\n\n----------------------------------------\n\nTITLE: Binding std::vector and std::map with stl_bind.h\nDESCRIPTION: This code demonstrates how to use `py::bind_vector` and `py::bind_map` to bind STL containers to Python, making them behave like native Python lists and dictionaries respectively. It assumes the `stl_bind.h` header has been included and the types have been declared opaque.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/cast/stl.rst#_snippet_10\n\nLANGUAGE: cpp\nCODE:\n```\n// later in binding code:\npy::bind_vector<std::vector<int>>(m, \"VectorInt\");\npy::bind_map<std::map<std::string, double>>(m, \"MapStringDouble\");\n```\n\n----------------------------------------\n\nTITLE: Testing Turtle GetX Calls with InSequence (C++)\nDESCRIPTION: This snippet uses `InSequence` to ensure that the calls to `turtle.GetX()` occur in a specific order and return different values (10*i) in each call.  `RetiresOnSaturation()` is used to retire the expectations after they have been met.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googlemock/docs/ForDummies.md#_snippet_17\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::InSequence;\nusing ::testing::Return;\n...\n{\n  InSequence s;\n\n  for (int i = 1; i <= n; i++) {\n    EXPECT_CALL(turtle, GetX())\n        .WillOnce(Return(10*i))\n        .RetiresOnSaturation();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Struct with a Group in Cap'n Proto\nDESCRIPTION: This code snippet shows how to define a struct in Cap'n Proto with a group of fields encapsulated in their own scope, resembling a nested struct. It demonstrates the syntax for declaring a group within a struct, where the group fields are numbered in the same space as the containing struct's fields.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/doc/language.md#_snippet_7\n\nLANGUAGE: capnp\nCODE:\n```\nstruct Person {\n  # ...\n\n  # Note:  This is a terrible way to use groups, and meant\n  #   only to demonstrate the syntax.\n  address :group {\n    houseNumber @8 :UInt32;\n    street @9 :Text;\n    city @10 :Text;\n    country @11 :Text;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Binding Overloaded Methods using Function Pointers in pybind11 (C++)\nDESCRIPTION: This snippet demonstrates how to bind overloaded C++ methods to Python using pybind11 by casting them to function pointers. This disambiguates which method the user intends to select. Binding multiple functions to the same Python name automatically creates a chain of function overloads.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/classes.rst#_snippet_22\n\nLANGUAGE: cpp\nCODE:\n```\npy::class_<Pet>(m, \"Pet\")\n   .def(py::init<const std::string &, int>())\n   .def(\"set\", (void (Pet::*)(int)) &Pet::set, \"Set the pet's age\")\n   .def(\"set\", (void (Pet::*)(const std::string &)) &Pet::set, \"Set the pet's name\");\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Retro Integrations with Python\nDESCRIPTION: This code snippet demonstrates how to add a custom game integration path to the retro environment.  It defines a main function that adds a directory containing custom integrations and then creates an environment for the \"FakeGame-Nes\" game using this integration. Dependencies: retro.\nSOURCE: https://github.com/openai/retro/blob/master/docs/integration.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nSCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))\n\n\ndef main():\n\tretro.data.Integrations.add_custom_path(\n\t\tos.path.join(SCRIPT_DIR, \"custom_integrations\")\n\t)\n\tprint(\"FakeGame-Nes\" in retro.data.list_games(inttype=retro.data.Integrations.ALL))\n\tenv = retro.make(\"FakeGame-Nes\", inttype=retro.data.Integrations.ALL)\n\tprint(env)\n\n\nif __name__ == \"__main__\":\n\tmain()\n```\n\n----------------------------------------\n\nTITLE: Generate C++ Code for Addressbook\nDESCRIPTION: Generates C++ code from the `addressbook.capnp` schema file using the `capnp_generate_cpp` command.  It defines variables for source and header files created and then creates an executable `addressbook` from C++ files and generated source files. Links against CapnProto library and sets include directories.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/c++/samples/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncapnp_generate_cpp(addressbookSources addressbookHeaders addressbook.capnp)\nadd_executable(addressbook addressbook.c++ ${addressbookSources})\ntarget_link_libraries(addressbook CapnProto::capnp)\ntarget_include_directories(addressbook PRIVATE ${CMAKE_CURRENT_BINARY_DIR})\n```\n\n----------------------------------------\n\nTITLE: DYLD_FRAMEWORK_PATH Error Example\nDESCRIPTION: This code snippet shows a typical error message that occurs when the DYLD_FRAMEWORK_PATH environment variable is not set up correctly. This variable tells the dynamic linker where to find the gtest.framework at runtime. Without it, the unit test executable cannot locate the Google Test library.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/XcodeGuide.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n[Session started at 2008-08-15 06:23:57 -0600.]\ndyld: Library not loaded: @loader_path/../Frameworks/gtest.framework/Versions/A/gtest\n  Referenced from: /Users/username/Documents/Sandbox/gtestSample/build/Debug/WidgetFrameworkTest\n  Reason: image not found\n```\n\n----------------------------------------\n\nTITLE: Applying GPL: Interactive Program Notice\nDESCRIPTION: This code snippet provides a template for a short notice that interactive programs should output when they start.  It includes the program name, copyright information, warranty disclaimer, and conditions for redistribution. It also suggests commands or methods to access the full license details.\nSOURCE: https://github.com/openai/retro/blob/master/cores/snes/docs/gpl-2.0.txt#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nGnomovision version 69, Copyright (C) year name of author\nGnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\nThis is free software, and you are welcome to redistribute it\nunder certain conditions; type `show c' for details.\n```\n\n----------------------------------------\n\nTITLE: Define C++ Tests with Specific Compiler Flags (CMake)\nDESCRIPTION: This snippet defines C++ tests using the `cxx_test_with_flags` macro, allowing the specification of compiler flags for each test. Flags are related to exception handling and RTTI. Test source files are also specified.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\ncxx_test_with_flags(gtest-death-test_ex_nocatch_test\n    \"${cxx_exception} -DGTEST_ENABLE_CATCH_EXCEPTIONS_=0\"\n    gtest test/gtest-death-test_ex_test.cc)\ncxx_test_with_flags(gtest-death-test_ex_catch_test\n    \"${cxx_exception} -DGTEST_ENABLE_CATCH_EXCEPTIONS_=1\"\n    gtest test/gtest-death-test_ex_test.cc)\n\ncxx_test_with_flags(gtest_no_rtti_unittest \"${cxx_no_rtti}\"\n    gtest_main_no_rtti test/gtest_unittest.cc)\n```\n\n----------------------------------------\n\nTITLE: Defining Cap'n Proto Core Sources\nDESCRIPTION: This snippet defines the source files for the Cap'n Proto core library. It includes separate lists for lite and heavy versions, combined conditionally based on the `CAPNP_LITE` flag. The lite version contains a smaller subset of files for resource-constrained environments.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/c++/src/capnp/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(capnp_sources_lite\n  c++.capnp.c++\n  blob.c++\n  arena.c++\n  layout.c++\n  list.c++\n  any.c++\n  message.c++\n  schema.capnp.c++\n  serialize.c++\n  serialize-packed.c++\n)\nset(capnp_sources_heavy\n  schema.c++\n  schema-loader.c++\n  dynamic.c++\n  stringify.c++\n)\nif(NOT CAPNP_LITE)\n  set(capnp_sources ${capnp_sources_lite} ${capnp_sources_heavy})\nelse()\n  set(capnp_sources ${capnp_sources_lite})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Corrected pybind11 Binding with `reference` Return Policy\nDESCRIPTION: This code snippet shows the correct way to bind the `get_data` function from the previous example. By specifying the `return_value_policy::reference`, pybind11 knows that the C++ side is responsible for managing the lifetime of the returned data and avoids attempting to delete it when the Python wrapper is garbage collected.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/functions.rst#_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nm.def(\"get_data\", &get_data, return_value_policy::reference);\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Constructors with Lambdas (C++)\nDESCRIPTION: This code snippet demonstrates how to add custom constructors to a class using lambdas with pybind11. It defines a custom constructor for the `Example` class that takes an integer, converts it to a string, and then constructs an `Example` object. `std::make_unique` is used to create a unique pointer.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/changelog.rst#_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nstruct Example {\n    Example(std::string);\n};\n\npy::class_<Example>(m, \"Example\")\n    .def(py::init<std::string>()) // existing constructor\n    .def(py::init([](int n) { // custom constructor\n        return std::make_unique<Example>(std::to_string(n));\n    }));\n```\n\n----------------------------------------\n\nTITLE: Defining the Project and Setting CMake Policies\nDESCRIPTION: This snippet defines the project name as 'gtest' and specifies that both C++ and C languages are used.  It also sets a CMake policy (CMP0048) to NEW for CMake versions 3.0 and later. The `cmake_minimum_required` command specifies the minimum CMake version required to build the project.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (CMAKE_VERSION VERSION_LESS 3.0)\n  project(gtest CXX C)\nelse()\n  cmake_policy(SET CMP0048 NEW)\n  project(gtest VERSION 1.9.0 LANGUAGES CXX C)\nendif()\ncmake_minimum_required(VERSION 2.6.4)\n```\n\n----------------------------------------\n\nTITLE: Using Compiler Standard Flag in CMake\nDESCRIPTION: This snippet showcases how to set the C++ standard flag using the `PYBIND11_CPP_STANDARD` variable in CMake. This allows you to specify the C++ standard to use when compiling the pybind11 module.  The variable must be set before the `add_subdirectory` or `find_package` command.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/compiling.rst#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n# Use just one of these:\n# GCC/clang:\nset(PYBIND11_CPP_STANDARD -std=c++11)\nset(PYBIND11_CPP_STANDARD -std=c++14)\nset(PYBIND11_CPP_STANDARD -std=c++1z) # Experimental C++17 support\n# MSVC:\nset(PYBIND11_CPP_STANDARD /std:c++14)\nset(PYBIND11_CPP_STANDARD /std:c++latest) # Enables some MSVC C++17 features\n\nadd_subdirectory(pybind11)  # or find_package(pybind11)\n```\n\n----------------------------------------\n\nTITLE: Using Mocks in Tests with Google Mock and Google Test in C++\nDESCRIPTION: This snippet demonstrates how to use mocks within a Google Test test case, including creating mock objects, setting default actions using ON_CALL, setting expectations using EXPECT_CALL, exercising the code under test, and verifying the results.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googlemock/docs/CheatSheet.md#_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\nusing ::testing::Return;                            // #1\n\nTEST(BarTest, DoesThis) {\n  MockFoo foo;                                    // #2\n\n  ON_CALL(foo, GetSize())                         // #3\n      .WillByDefault(Return(1));\n  // ... other default actions ...\n\n  EXPECT_CALL(foo, Describe(5))                   // #4\n      .Times(3)\n      .WillRepeatedly(Return(\"Category 5\"));\n  // ... other expectations ...\n\n  EXPECT_EQ(\"good\", MyProductionFunction(&foo));  // #5\n}                                                 // #6\n```\n\n----------------------------------------\n\nTITLE: C++ Custom New Operator Handling\nDESCRIPTION: This shows a custom `new` operator that throws a `CNewException` when memory allocation fails. This is relevant when compiling 7-Zip with MSVC 6.0, which doesn't throw exceptions from the standard `new` operator. The `NewHandler.cpp` file redefines `new` to ensure that exceptions are thrown on allocation failure.\nSOURCE: https://github.com/openai/retro/blob/master/cores/genesis/core/cd_hw/libchdr/deps/lzma/DOC/lzma.txt#_snippet_9\n\nLANGUAGE: C++\nCODE:\n```\noperator new(size_t size)\n{\n  void *p = ::malloc(size);\n  if (p == 0)\n    throw CNewException();\n  return p;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies for mGBA on Windows using MSYS2 (x86_64)\nDESCRIPTION: This command installs the necessary dependencies for compiling mGBA on Windows using MSYS2 for a 64-bit (x86_64) build environment. It uses the `pacman` package manager to install CMake, FFmpeg, GCC, GDB, ImageMagick, libelf, libepoxy, libzip, pkg-config, Qt5, SDL2, and ntldd-git.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/README_DE.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\npacman -Sy mingw-w64-x86_64-{cmake,ffmpeg,gcc,gdb,imagemagick,libelf,libepoxy,libzip,pkg-config,qt5,SDL2,ntldd-git}\n```\n\n----------------------------------------\n\nTITLE: Testing a file with main() (C++)\nDESCRIPTION: This snippet shows how to test a `foo.cc` file that contains a main() function.  By renaming the `main()` function using a preprocessor definition and including the `foo.cc` file, you can avoid a conflict with the test's `main()` function.  This approach is considered a hack and should only be used as a last resort.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/FAQ.md#_snippet_21\n\nLANGUAGE: cpp\nCODE:\n```\n// File foo_unittest.cc\n\n// The headers section\n...\n\n// Renames main() in foo.cc to make room for the unit test main()\n#define main FooMain\n\n#include \"a/b/foo.cc\"\n\n// The tests start here.\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Cap'n Proto Mode in Emacs Lisp\nDESCRIPTION: This snippet configures Emacs to use `capnp-mode` for Cap'n Proto files. It adds the directory containing `capnp-mode.el` to the Emacs load path, loads the `capnp-mode`, and associates the `.capnp` file extension with `capnp-mode`. The path to the `capnproto` directory must be adjusted to match the user's local setup.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/highlighting/emacs/README.md#_snippet_0\n\nLANGUAGE: Emacs Lisp\nCODE:\n```\n(add-to-list 'load-path \"~/src/capnproto/highlighting/emacs\")\n(require 'capnp-mode)\n(add-to-list 'auto-mode-alist '(\"\\\\.capnp\\\\'\" . capnp-mode))\n```\n\n----------------------------------------\n\nTITLE: Static Properties Binding in pybind11 (C++)\nDESCRIPTION: This snippet illustrates the changes in binding static properties in pybind11. Prior to v2.1, the `py::metaclass()` attribute was required. Now, static properties work without it. The code also shows the usage of the new `py::metaclass(python_type)` for custom metaclasses.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/upgrade.rst#_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\n// old -- emits a deprecation warning\npy::class_<Foo>(m, \"Foo\", py::metaclass())\n    .def_property_readonly_static(\"foo\", ...);\n\n// new -- static properties work without the attribute\npy::class_<Foo>(m, \"Foo\")\n    .def_property_readonly_static(\"foo\", ...);\n\n// new -- advanced feature, override pybind11's default metaclass\npy::class_<Bar>(m, \"Bar\", py::metaclass(custom_python_type))\n    ...\n```\n\n----------------------------------------\n\nTITLE: Printing a C++ Vector in C++\nDESCRIPTION: This C++ snippet defines a function `print_vector` that accepts a constant reference to a `std::vector<int>` as input and iterates through its elements, printing each element to the console followed by a newline.  This function illustrates how a C++ vector can receive data converted automatically from a Python list by pybind11.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/cast/overview.rst#_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nvoid print_vector(const std::vector<int> &v) {\n    for (auto item : v)\n        std::cout << item << \"\\n\";\n}\n```\n\n----------------------------------------\n\nTITLE: Binding C++ Function with pybind11\nDESCRIPTION: This code snippet demonstrates how to bind a C++ function to a Python module using pybind11. The `m.def` function is used to define a Python function named 'add' that calls the underlying C++ code. The lambda function takes two integer arguments and returns their sum. The third argument to `m.def` is a docstring for the function.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/misc.rst#_snippet_10\n\nLANGUAGE: C++\nCODE:\n```\nm.def(\"add\", [](int a, int b) { return a + b; }, \"A function which adds two numbers\");\n```\n\n----------------------------------------\n\nTITLE: Creating Python bindings for add function\nDESCRIPTION: This code snippet demonstrates how to create Python bindings for the `add` function using pybind11.  It includes the necessary header, defines the `add` function, and uses the `PYBIND11_MODULE` macro to create a Python module named `example` which exposes the `add` function to Python with an optional docstring.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/basics.rst#_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\n#include <pybind11/pybind11.h>\n\nint add(int i, int j) {\n    return i + j;\n}\n\nPYBIND11_MODULE(example, m) {\n    m.doc() = \"pybind11 example plugin\"; // optional module docstring\n\n    m.def(\"add\", &add, \"A function which adds two numbers\");\n}\n```\n\n----------------------------------------\n\nTITLE: Template Metaprogramming: Wrapper Example (C++)\nDESCRIPTION: This example demonstrates how to write a template function `makeWrapper` that can accept both lvalue and rvalue inputs. By taking the input `inner` by universal reference `T&&`, the function automatically handles both cases efficiently: lvalues are taken by reference, while rvalues are taken by value (moved).\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/style-guide.md#_snippet_12\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <typename T>\nWrapper<T> makeWrapper(T&& inner);\n// Wraps `inner` and returns the wrapper.\n```\n\n----------------------------------------\n\nTITLE: Reverse Bit Tree Decode C++\nDESCRIPTION: Decodes a symbol from a bit tree, decoding bits from low bit to high bit. It takes an array of CProb variables, the number of bits in the symbol, and a pointer to the CRangeDecoder.  The function iterates through the bits, decoding each bit using the DecodeBit function of the CRangeDecoder.\nSOURCE: https://github.com/openai/retro/blob/master/cores/pce/deps/lzma-16.04/DOC/lzma-specification.txt#_snippet_10\n\nLANGUAGE: C++\nCODE:\n```\nunsigned BitTreeReverseDecode(CProb *probs, unsigned numBits, CRangeDecoder *rc)\n{\n  unsigned m = 1;\n  unsigned symbol = 0;\n  for (unsigned i = 0; i < numBits; i++)\n  {\n    unsigned bit = rc->DecodeBit(&probs[m]);\n    m <<= 1;\n    m += bit;\n    symbol |= (bit << i);\n  }\n  return symbol;\n}\n```\n\n----------------------------------------\n\nTITLE: Google Mock Expectation Ordering with ExpectationSet and After\nDESCRIPTION: This code snippet uses an ExpectationSet to collect multiple expectations and then uses the After clause to specify that another expectation can only be matched after all the expectations in the set have been matched. It initializes elements in a loop and ensures Bar() is called only after all elements are initialized.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googlemock/docs/CheatSheet.md#_snippet_15\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::ExpectationSet;\n...\nExpectationSet all_inits;\nfor (int i = 0; i < element_count; i++) {\n  all_inits += EXPECT_CALL(foo, InitElement(i));\n}\nEXPECT_CALL(foo, Bar())\n    .After(all_inits);\n```\n\n----------------------------------------\n\nTITLE: Checking for Header Files in CMake\nDESCRIPTION: This snippet uses the `CHECK_INCLUDE_FILES` macro to check for the existence of various header files. For each header file, it sets a CMake variable (e.g., `HAVE_FTS_H`) to 1 if the header file exists, and 0 otherwise. These variables can then be used to conditionally include code.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/libzip/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nCHECK_INCLUDE_FILES(fts.h HAVE_FTS_H)\nCHECK_INCLUDE_FILES(stdbool.h HAVE_STDBOOL_H)\nCHECK_INCLUDE_FILES(strings.h HAVE_STRINGS_H)\nCHECK_INCLUDE_FILES(unistd.h HAVE_UNISTD_H)\n\nCHECK_INCLUDE_FILES(inttypes.h HAVE_INTTYPES_H_LIBZIP)\nCHECK_INCLUDE_FILES(stdint.h HAVE_STDINT_H_LIBZIP)\nCHECK_INCLUDE_FILES(sys/types.h HAVE_SYS_TYPES_H_LIBZIP)\n```\n\n----------------------------------------\n\nTITLE: Sharing Test Fixture Logic with typedef in Google Test (C++)\nDESCRIPTION: Instead of defining a new test fixture class for each test case sharing the same logic, use typedef to alias an existing test fixture class, simplifying test definitions and reducing code duplication.  This allows different test suites to reuse the same setup and teardown logic defined in the base class.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/FAQ.md#_snippet_14\n\nLANGUAGE: cpp\nCODE:\n```\nclass FooTest : public BaseTest {};\n\nTEST_F(FooTest, Abc) { ... }\nTEST_F(FooTest, Def) { ... }\n\nclass BarTest : public BaseTest {};\n\nTEST_F(BarTest, Abc) { ... }\nTEST_F(BarTest, Def) { ... }\n```\n\n----------------------------------------\n\nTITLE: LZMA Single-Call Decompressing (C)\nDESCRIPTION: This snippet showcases the interface for single-call decompression using the LZMA decoder in C. It takes compressed data, its length, LZMA properties, and a memory allocator as input, and outputs the decompressed data and its length. The function also returns a status code indicating the success or failure of the operation.\nSOURCE: https://github.com/openai/retro/blob/master/cores/genesis/core/cd_hw/libchdr/deps/lzma/DOC/lzma.txt#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nint LzmaDecode(Byte *dest, SizeT *destLen, const Byte *src, SizeT *srcLen,\n      const Byte *propData, unsigned propSize, ELzmaFinishMode finishMode, \n      ELzmaStatus *status, ISzAlloc *alloc);\n```\n\n----------------------------------------\n\nTITLE: Implicit Type Conversion with pybind11 (C++)\nDESCRIPTION: This snippet demonstrates how to enable implicit type conversions from type `A` to type `B` in pybind11. This allows Python code to call a C++ function that expects a `B` instance with an `A` instance, provided that `B` has a constructor that can convert from `A`. This feature is enabled via the `py::implicitly_convertible<A, B>()` function.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/classes.rst#_snippet_21\n\nLANGUAGE: cpp\nCODE:\n```\npy::implicitly_convertible<A, B>();\n```\n\n----------------------------------------\n\nTITLE: Windows Deployment Configuration in CMake\nDESCRIPTION: This snippet configures deployment for Windows. It addresses a CMake issue for specific versions, sets target properties for Qt binaries, and uses install(CODE) to execute a shell script using BASH for deploying the application.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/platform/qt/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nelseif(WIN32)\n\tif(CMAKE_MAJOR_VERSION EQUAL 3 AND CMAKE_MINOR_VERSION EQUAL 8)\n\t\t# Work around CMake issue #16907\n\t\tset_target_properties(${BINARY_NAME}-qt PROPERTIES AUTORCC ON SKIP_AUTORCC ON)\n\tendif()\n\tif(CMAKE_HOST_SYSTEM_NAME STREQUAL \"Windows\")\n\t\tfind_program(BASH bash)\n\t\tinstall(CODE \"execute_process(COMMAND \\\"${BASH}\\\" \\\"${CMAKE_SOURCE_DIR}/tools/deploy-win.sh\\\" \\\"${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}.exe\\\" \\\"\\${CMAKE_INSTALL_PREFIX}\\\" \\\"\\$ENV{PWD}\\\" WORKING_DIRECTORY \\\"${CMAKE_BINARY_DIR}\\\")\" COMPONENT ${BINARY_NAME}-qt)\n\tendif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Binding Lambda Function to __repr__\nDESCRIPTION: This code demonstrates binding a lambda function to the `__repr__` special method of the `Pet` class in Python using pybind11. This allows customizing the string representation of `Pet` objects when `print()` or `repr()` is called.  The lambda function takes a `Pet` object as input and returns a string.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/classes.rst#_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\npy::class_<Pet>(m, \"Pet\")\n    .def(py::init<const std::string &>())\n    .def(\"setName\", &Pet::setName)\n    .def(\"getName\", &Pet::getName)\n    .def(\"__repr__\",\n        [](const Pet &a) {\n            return \"<example.Pet named '\" + a.name + \"'>\";\n        }\n    );\n```\n\n----------------------------------------\n\nTITLE: Creating a Distribution Target in CMake\nDESCRIPTION: This snippet defines a custom target named 'dist' that creates archive files (.tar.gz and .tar.xz) of the project source code.  It uses `git archive` and configures git to use xz for tar archives. The archives are created in the source directory.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/libzip/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nSET(ARCHIVE_NAME ${PACKAGE_NAME}-${PACKAGE_VERSION})\nADD_CUSTOM_TARGET(dist\n  COMMAND git config tar.tar.xz.command \"xz -c\"\n  COMMAND git archive --prefix=${ARCHIVE_NAME}/ -o ${ARCHIVE_NAME}.tar.gz HEAD\n  COMMAND git archive --prefix=${ARCHIVE_NAME}/ -o ${ARCHIVE_NAME}.tar.xz HEAD\n  WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}\n  )\n```\n\n----------------------------------------\n\nTITLE: Static Property Definition (C++)\nDESCRIPTION: This snippet demonstrates how to define a static property for a class using pybind11. It creates a read-only static property named 'foo' for the class 'Foo'. The getter function is a lambda that ignores the `self` parameter (which represents the Python type subclass instance) and returns a `Foo` object.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/classes.rst#_snippet_22\n\nLANGUAGE: cpp\nCODE:\n```\npy::class_<Foo>(m, \"Foo\")\n    .def_property_readonly_static(\"foo\", [](py::object /* self */) { return Foo(); });\n```\n\n----------------------------------------\n\nTITLE: JSON Data Manifest Example\nDESCRIPTION: This JSON snippet shows the structure of a data.json file, which defines game variables' memory addresses. In this example, the 'score' variable is located at byte 128 and is 4 bytes wide in unsigned big endian format. The 'address' field specifies the memory address, and the 'type' field describes the variable's format.\nSOURCE: https://github.com/openai/retro/blob/master/docs/integration.rst#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\t\"info\": {\n\t\t\t\"score\": {\n\t\t\t\t\"address\": 128,\n\t\t\t\t\"type\": \">u4\"\n\t\t\t}\n\t\t}\n\t}\n```\n\n----------------------------------------\n\nTITLE: Compiling mGBA on Unix-like Systems with CMake\nDESCRIPTION: These commands build and install mGBA on Unix-based systems using CMake. It creates a build directory, configures the build using CMake, compiles the code using make, and installs the compiled binaries to the specified location (defaulting to /usr/bin and /usr/lib). Dependencies are automatically detected, and features are disabled if they are not found.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmkdir build\ncd build\ncmake -DCMAKE_INSTALL_PREFIX:PATH=/usr ..\nmake\nsudo make install\n```\n\n----------------------------------------\n\nTITLE: Testing Protected Members by using Test-Only Subclass (C++)\nDESCRIPTION: This snippet demonstrates testing protected members by creating a test-only subclass that changes the access level of the protected member to public. This allows the test to directly call the protected method. Use this approach when the method's behavior is crucial and needs direct verification.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/FAQ.md#_snippet_18\n\nLANGUAGE: cpp\nCODE:\n```\nclass YourClass {\n  ...\n protected: // protected access for testability.\n  int DoSomethingReturningInt();\n  ...\n};\n\n// in the your_class_test.cc file:\nclass TestableYourClass : public YourClass {\n  ...\n public: using YourClass::DoSomethingReturningInt; // changes access rights\n  ...\n};\n\nTEST_F(YourClassTest, DoSomethingTest) {\n  TestableYourClass obj;\n  assertEquals(expected_value, obj.DoSomethingReturningInt());\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Embedded Text from Sega Genesis ROM\nDESCRIPTION: This snippet describes the analysis of the ROM for ASCII strings. It involves iterating through the binary data and identifying sequences of bytes that correspond to printable ASCII characters. This allows for the extraction of in-game text, developer messages, and other human-readable content. It involves recognizing character encoding conventions and ignoring binary or control characters.\nSOURCE: https://github.com/openai/retro/blob/master/tests/roms/Dekadence-Dekadrive.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Windows-Specific Git Revision\nDESCRIPTION: This snippet is for Windows only (`if(WIN32)`). It attempts to get the Git revision count. If Git is available and the project is in a Git repository, it executes `git rev-list HEAD --count` to get the revision count and stores it in `GIT_REV`. If Git is not available, `GIT_REV` is set to 0.\nSOURCE: https://github.com/openai/retro/blob/master/src/ui/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif(WIN32)\n    if(GIT_EXECUTABLE AND EXISTS ${CMAKE_SOURCE_DIR}/.git AND IS_DIRECTORY ${CMAKE_SOURCE_DIR}/.git)\n        execute_process(COMMAND ${GIT_EXECUTABLE} rev-list HEAD --count\n                        OUTPUT_VARIABLE GIT_REV\n                        ERROR_QUIET OUTPUT_STRIP_TRAILING_WHITESPACE)\n    else()\n        set(GIT_REV 0)\n    endif()\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies for mGBA on Windows using MSYS2 (x86)\nDESCRIPTION: This command installs the necessary dependencies for compiling mGBA on Windows using MSYS2 for a 32-bit (x86) build environment. It uses the `pacman` package manager to install CMake, FFmpeg, GCC, GDB, ImageMagick, libelf, libepoxy, libzip, pkg-config, Qt5, SDL2, and ntldd-git.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/README_DE.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\npacman -Sy mingw-w64-i686-{cmake,ffmpeg,gcc,gdb,imagemagick,libelf,libepoxy,libzip,pkg-config,qt5,SDL2,ntldd-git}\n```\n\n----------------------------------------\n\nTITLE: Using Different Fixture Classes with Same TestCase Name (C++) - NOT ALLOWED\nDESCRIPTION: This example showcases an invalid configuration in Google Test where two different namespaces contain test fixtures and tests with the same test case name. This is disallowed and results in a runtime error because the test methods use different test fixture classes with the same test case name.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/FAQ.md#_snippet_26\n\nLANGUAGE: cpp\nCODE:\n```\nnamespace foo {\nclass CoolTest : public ::testing::Test {};  // Fixture foo::CoolTest\nTEST_F(CoolTest, DoSomething) {\n  SUCCEED();\n}\n}  // namespace foo\n\nnamespace bar {\nclass CoolTest : public ::testing::Test {};  // Fixture: bar::CoolTest\nTEST_F(CoolTest, DoSomething) {\n  SUCCEED();\n}\n}  // namespace foo\n```\n\n----------------------------------------\n\nTITLE: Applying Return Value Policy to a Property (getter/setter)\nDESCRIPTION: This code snippet demonstrates how to apply a return value policy to a property defined using `def_property`.  In this case, `return_value_policy::copy` is applied to both the getter and setter functions. While the setter function technically doesn't 'return' a value, this syntax is a concise way to specify the policy for the getter.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/functions.rst#_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nclass_<MyClass>(m, \"MyClass\")\n    .def_property(\"data\", &MyClass::getData, &MyClass::setData,\n                  py::return_value_policy::copy);\n```\n\n----------------------------------------\n\nTITLE: Testing Turtle GoTo Calls with Google Mock (C++)\nDESCRIPTION: This snippet demonstrates how to test that a method `GoTo` of a `turtle` object is called with specific arguments exactly twice, while ignoring other calls to `GoTo` with different arguments. It uses `EXPECT_CALL` and `Times` to specify the expected behavior.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googlemock/docs/ForDummies.md#_snippet_14\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::_;...\nEXPECT_CALL(turtle, GoTo(_, _))  // #1\n    .Times(AnyNumber());\nEXPECT_CALL(turtle, GoTo(0, 0))  // #2\n    .Times(2);\n```\n\n----------------------------------------\n\nTITLE: Encoding Cap'n Proto message\nDESCRIPTION: This command encodes a text-format Cap'n Proto message from standard input to a binary format. `myschema.capnp` specifies the schema, and `MyType` indicates the root type of the message. The `< message.txt` redirects the input from the `message.txt` file to standard input and `> message.bin` redirects the output to `message.bin`. Can produce packed messages using the `--packed` flag.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/doc/capnp-tool.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncapnp encode myschema.capnp MyType < message.txt > message.bin\n```\n\n----------------------------------------\n\nTITLE: Custom Matcher for Foo Equality\nDESCRIPTION: This snippet defines a custom matcher called `FooEq` to compare two `Foo` objects. It uses the `MATCHER` macro and the `get` function from the `::testing` namespace to access the elements of the tuple being compared.  It relies on a custom `Equals` method within the `Foo` class to perform the comparison.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googlemock/docs/CheatSheet.md#_snippet_11\n\nLANGUAGE: C++\nCODE:\n```\nusing ::testing::get;\nMATCHER(FooEq, \"\") {\n  return get<0>(arg).Equals(get<1>(arg));\n}\n```\n\n----------------------------------------\n\nTITLE: Define Animal and Dog C++ Classes\nDESCRIPTION: This code defines two C++ classes: `Animal` with a pure virtual function `go`, and `Dog` which inherits from `Animal` and overrides the `go` function. The `Animal` class serves as an interface, while `Dog` provides a concrete implementation.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/classes.rst#_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nclass Animal {\npublic:\n    virtual ~Animal() { }\n    virtual std::string go(int n_times) = 0;\n};\n\nclass Dog : public Animal {\npublic:\n    std::string go(int n_times) override {\n        std::string result;\n        for (int i=0; i<n_times; ++i)\n            result += \"woof! \";\n        return result;\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Installing pkg-config Files (CMake)\nDESCRIPTION: This snippet installs the pkg-config files (.pc) and associated libpng-config executables to the installation directory. It is conditionally executed based on whether the target platform is Windows, Cygwin, or MinGW.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/third-party/libpng/CMakeLists.txt#_snippet_23\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT SKIP_INSTALL_FILES AND NOT SKIP_INSTALL_ALL )\n  # Install pkg-config files\n  if(NOT WIN32 OR CYGWIN OR MINGW)\n    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/libpng.pc\n            DESTINATION ${CMAKE_INSTALL_LIBDIR}/pkgconfig)\n    install(PROGRAMS ${CMAKE_CURRENT_BINARY_DIR}/libpng-config\n            DESTINATION bin)\n    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/${PNGLIB_NAME}.pc\n            DESTINATION ${CMAKE_INSTALL_LIBDIR}/pkgconfig)\n    install(PROGRAMS ${CMAKE_CURRENT_BINARY_DIR}/${PNGLIB_NAME}-config\n            DESTINATION bin)\n  endif(NOT WIN32 OR CYGWIN OR MINGW)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Linker Flags for Apple Platforms in CMake\nDESCRIPTION: This CMake code sets linker flags specific to Apple platforms, linking against several frameworks: AppKit, AudioUnit, Carbon, CoreAudio, AudioToolbox, ForceFeedback, and IOKit. The `PARENT_SCOPE` option ensures the flags are available in the parent directory too.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/platform/sdl/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nif(APPLE)\n\tset(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -framework AppKit -framework AudioUnit -framework Carbon -framework CoreAudio -framework AudioToolbox -framework ForceFeedback -framework IOKit\")\n\tset(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS}\" PARENT_SCOPE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Initializing Cap'n Proto struct concisely with designated initializers in C++\nDESCRIPTION: This C++ code shows the most concise way to initialize a Cap'n Proto struct using designated initializers in combination with `capnp::writeMessageToFd`. It eliminates the need to explicitly create a `MallocMessageBuilder`.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/doc/slides-2017.05.18/index.md#_snippet_14\n\nLANGUAGE: c++\nCODE:\n```\nusing namespace capnp::init;\n\ncapnp::writeMessageToFd<MyStruct>(fd,\n  $foo = 123,\n  $bar = \"foo\",\n  $baz(\n    $qux = true\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Decoding Cap'n Proto message\nDESCRIPTION: This command decodes a binary Cap'n Proto message from standard input to a human-readable text format. `myschema.capnp` specifies the schema, and `MyType` indicates the root type of the message. The `< message.bin` redirects the input from the `message.bin` file to standard input and `> message.txt` redirects the output to `message.txt`. Expects an unpacked message unless `--packed` is used.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/doc/capnp-tool.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncapnp decode myschema.capnp MyType < message.bin > message.txt\n```\n\n----------------------------------------\n\nTITLE: Define C++ Libraries with Non-Standard Flags (CMake)\nDESCRIPTION: This section defines C++ libraries (`gtest_no_exception`, `gtest_main_no_exception`, `gtest_main_no_rtti`) with specific compiler flags related to exception handling and RTTI. The code checks for MSVC version compatibility before creating the no-exception libraries.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nif (NOT MSVC OR MSVC_VERSION GREATER 1310)\n    cxx_library(gtest_no_exception \"${cxx_no_exception}\"\n      src/gtest-all.cc)\n    cxx_library(gtest_main_no_exception \"${cxx_no_exception}\"\n      src/gtest-all.cc src/gtest_main.cc)\n  endif()\ncxx_library(gtest_main_no_rtti \"${cxx_no_rtti}\"\n    src/gtest-all.cc src/gtest_main.cc)\n```\n\n----------------------------------------\n\nTITLE: Defining Toolchain Paths and Flags for 3DS\nDESCRIPTION: This snippet defines the paths to the toolchain binaries, sets the cross-compilation prefix, and defines compiler and linker flags required for building 3DS applications. It specifies the architecture, tuning, floating-point ABI, include paths, library paths, and linker specifications.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/platform/3ds/CMakeToolchain.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_PROGRAM_PATH ${DEVKITARM}/bin)\nset(cross_prefix arm-none-eabi-)\nset(arch_flags \"-march=armv6k -mtune=mpcore -mfloat-abi=hard -ffunction-sections\")\nset(inc_flags \"-I${CTRULIB}/include ${arch_flags} -mword-relocations\")\nset(link_flags \"-L${CTRULIB}/lib -lctru -specs=3dsx.specs ${arch_flags} -Wl,--gc-sections\")\n```\n\n----------------------------------------\n\nTITLE: Compiling mGBA on macOS with Homebrew and CMake\nDESCRIPTION: These commands install dependencies and build mGBA on macOS using Homebrew and CMake. It installs the necessary packages using Homebrew, creates a build directory, configures the build using CMake, and compiles the code using make. Note that `make install` should not be used on macOS, as it will not work correctly.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nbrew install cmake ffmpeg imagemagick libzip qt5 sdl2 libedit\nmkdir build\ncd build\ncmake -DCMAKE_PREFIX_PATH=`brew --prefix qt5` ..\nmake\n```\n\n----------------------------------------\n\nTITLE: Defining a multi-parameterized action using the ACTION_P2 macro\nDESCRIPTION: This example defines a parameterized action with two parameters using the `ACTION_P2` macro. It calculates the distance between a point defined by `arg0` and `arg1` and a point defined by the parameters `x` and `y`. This illustrates how to use multiple parameters within an action.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googlemock/docs/DesignDoc.md#_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\nACTION_P2(ReturnDistanceTo, x, y) {\n  double dx = arg0 - x;\n  double dy = arg1 - y;\n  return sqrt(dx*dx + dy*dy);\n}\n\n... WillOnce(ReturnDistanceTo(5.0, 26.5));\n```\n\n----------------------------------------\n\nTITLE: CMake Custom Target for Python Test Execution\nDESCRIPTION: This CMake code defines a custom target named 'check' that executes a Python test script. It sets the PYTHONPATH to include the directory containing the built module, ensuring that the Python interpreter can find and import the module during testing. The test script and the project name are passed as arguments.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/tests/test_cmake_build/subdirectory_function/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_target(check ${CMAKE_COMMAND} -E env PYTHONPATH=$<TARGET_FILE_DIR:test_cmake_build>\n                  ${PYTHON_EXECUTABLE} ${PROJECT_SOURCE_DIR}/../test.py ${PROJECT_NAME})\n```\n\n----------------------------------------\n\nTITLE: Google Mock Expectation Ordering with After Clause\nDESCRIPTION: This code demonstrates how to use the After clause to specify the order in which expectations must be matched. It defines two expectations, init_x and init_y, and then specifies that Bar() can only be called after both InitX() and InitY() have been called.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googlemock/docs/CheatSheet.md#_snippet_14\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::Expectation;\n...\nExpectation init_x = EXPECT_CALL(foo, InitX());\nExpectation init_y = EXPECT_CALL(foo, InitY());\nEXPECT_CALL(foo, Bar())\n    .After(init_x, init_y);\n```\n\n----------------------------------------\n\nTITLE: Testing Private Static Methods by using Free Functions - Alternative (C++)\nDESCRIPTION: This is the recommended approach. Instead of defining a private static method within a class, define it as a free function within an internal namespace. This keeps the implementation detail out of the header file and allows for easier testing. It requires declaring the function in the test file within the same namespace.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/FAQ.md#_snippet_20\n\nLANGUAGE: cpp\nCODE:\n```\n// foo.h\nclass Foo {\n  ...\n};\n\n// foo.cc\nnamespace internal {\n  bool Func(int n) { ... }\n}\n\n// foo_test.cc\nnamespace internal {\n  bool Func(int n);\n}\n\nEXPECT_TRUE(internal::Func(12345));\n```\n\n----------------------------------------\n\nTITLE: Doc Comment Placement C++\nDESCRIPTION: This example illustrates the placement of doc comments in C++ code. Doc comments should go after the declaration, or inside the block at the top for declarations that start a block. A group of related declarations can have a single group doc comment after the last one if there are no blank lines between the declarations.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/style-guide.md#_snippet_20\n\nLANGUAGE: C++\nCODE:\n```\nint foo();\n// This is documentation for foo().\n\nclass Bar {\n  // This is documentation for Bar.\npublic:\n  Bar();\n\n  inline int baz() { return 5; }\n  inline int qux() { return 6; }\n  // This is documentation for baz() and qux().\n};\n```\n\n----------------------------------------\n\nTITLE: Running a Subset of Tests with gtest_filter\nDESCRIPTION: This snippet illustrates how to run a subset of tests using the `--gtest_filter` flag or the `GTEST_FILTER` environment variable. The filter uses wildcard patterns to match test names (TestCaseName.TestName). Positive and negative patterns are separated by a colon and a minus sign.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/AdvancedGuide.md#_snippet_47\n\nLANGUAGE: text\nCODE:\n```\n./foo_test --gtest_filter=*\n./foo_test --gtest_filter=FooTest.*\n./foo_test --gtest_filter=*Null*:*Constructor*\n./foo_test --gtest_filter=-*DeathTest.*\n./foo_test --gtest_filter=FooTest.*-FooTest.Bar\n```\n\n----------------------------------------\n\nTITLE: Python Usage of C++ Callbacks\nDESCRIPTION: This interactive Python session demonstrates how to call the C++ functions `func_arg`, `func_ret`, and `func_cpp` from Python. It defines a `square` function and passes it to `func_arg` and `func_ret`. It then calls the returned function and also calls the func_cpp defined function.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/cast/functional.rst#_snippet_4\n\nLANGUAGE: pycon\nCODE:\n```\n$ python\n>>> import example\n>>> def square(i):\n...     return i * i\n... \n>>> example.func_arg(square)\n100L\n>>> square_plus_1 = example.func_ret(square)\n>>> square_plus_1(4)\n17L\n>>> plus_1 = func_cpp()\n>>> plus_1(number=43)\n44L\n```\n\n----------------------------------------\n\nTITLE: Bounds Check Vulnerability Example - C++\nDESCRIPTION: This code snippet demonstrates the vulnerable bounds check in Cap'n Proto where the compiler elides part of the check due to pointer arithmetic overflow being undefined behavior in C++. The compiler assumes `target < segmentStart` is always false because `farPointer.offset` is unsigned, thus removing that part of the check.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/security-advisories/2017-04-17-0-apple-clang-elides-bounds-check.md#_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nword* target = segmentStart + farPointer.offset;\nif (target < segmentStart || target >= segmentEnd) {\n  throwBoundsError();\n}\ndoSomething(*target);\n```\n\n----------------------------------------\n\nTITLE: LZMA Compression Example 2\nDESCRIPTION: Compresses file.bin to file.lzma with settings suitable for 32-bit periodical data (e.g., ARM or MIPS code). This involves setting the literal context bits (-lc0) and literal position bits (-lp2) to optimize compression for this specific data type. These parameters affect how literals are encoded, impacting compression efficiency.\nSOURCE: https://github.com/openai/retro/blob/master/cores/genesis/core/cd_hw/libchdr/deps/lzma/DOC/lzma-sdk.txt#_snippet_4\n\nLANGUAGE: Text\nCODE:\n```\nLZMA e file.bin file.lzma -lc0 -lp2\n```\n\n----------------------------------------\n\nTITLE: Binding Inheritance with Class Object\nDESCRIPTION: This code snippet shows an alternative way to define an inheritance relationship in pybind11 by passing the previously bound `Pet` `py::class_` object when binding the `Dog` class.  This achieves the same result as using the template parameter approach.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/classes.rst#_snippet_13\n\nLANGUAGE: cpp\nCODE:\n```\npy::class_<Pet> pet(m, \"Pet\");\npet.def(py::init<const std::string &>())\n   .def_readwrite(\"name\", &Pet::name);\n\n// Method 2: pass parent class_ object:\npy::class_<Dog>(m, \"Dog\", pet /* <- specify Python parent type */)\n    .def(py::init<const std::string &>())\n    .def(\"bark\", &Dog::bark);\n```\n\n----------------------------------------\n\nTITLE: Encoding LZMA Properties in C++\nDESCRIPTION: This C++ code encodes LZMA properties (lc, lp, pb, dictSize) into a byte array. The first byte represents a combined value of pb, lp, and lc. The subsequent 4 bytes represent the dictionary size as a little-endian 32-bit unsigned integer. This function is used to prepare the header of an LZMA compressed file.\nSOURCE: https://github.com/openai/retro/blob/master/cores/genesis/core/cd_hw/libchdr/deps/lzma/DOC/lzma-specification.txt#_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nvoid EncodeProperties(Byte *properties)\n{\n  properties[0] = (Byte)((pb * 5 + lp) * 9 + lc);\n  Set_UInt32_LittleEndian(properties + 1, dictSize);\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Turtle GetX Calls with RetiresOnSaturation (C++)\nDESCRIPTION: This snippet correctly verifies that `turtle.GetX()` is called `n` times, returning different values (10*i) in each call. It uses `RetiresOnSaturation()` to ensure that each expectation is only matched once and retires after being satisfied.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googlemock/docs/ForDummies.md#_snippet_16\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::Return;\n...\nfor (int i = n; i > 0; i--) {\n  EXPECT_CALL(turtle, GetX())\n    .WillOnce(Return(10*i))\n    .RetiresOnSaturation();\n}\n```\n\n----------------------------------------\n\nTITLE: Using py::print to print to Python's stdout in C++\nDESCRIPTION: The py::print function in pybind11 allows printing to Python's sys.stdout from C++, ensuring consistent output order. It replicates Python's print functionality, including optional keyword arguments like sep, end, file, and flush.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/pycpp/utilities.rst#_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\npy::print(1, 2.0, \"three\"); // 1 2.0 three\npy::print(1, 2.0, \"three\", \"sep\"_a=\"-\"); // 1-2.0-three\n\nauto args = py::make_tuple(\"unpacked\", true);\npy::print(\"->\", *args, \"end\"_a=\"<-\"); // -> unpacked True <-\n```\n\n----------------------------------------\n\nTITLE: Defining a complex action using the ACTION macro\nDESCRIPTION: This example shows how to define a more complex action using the `ACTION` macro. It demonstrates using multiple arguments (`arg0`, `arg1`, `arg2`), calling external functions (`Blah()`), and assigning values to the dereferenced argument. It highlights the flexibility of the `ACTION` macro for complex action definitions.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googlemock/docs/DesignDoc.md#_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nACTION(Foo) {\n  (*arg2)(5);\n  Blah();\n  *arg1 = 0;\n  return arg0;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Distance History (Rep Match 3) in LZMA Decoder (C++)\nDESCRIPTION: This code snippet updates the distance history when a 'Rep Match 3' is encountered. The distances `rep3`, `rep2`, `rep1`, and `rep0` are shifted, with `rep3` moving to `rep2`, `rep2` moving to `rep1`, `rep1` moving to `rep0`, and the original value of `rep0` being stored in `rep3`.\nSOURCE: https://github.com/openai/retro/blob/master/cores/pce/deps/lzma-16.04/DOC/lzma-specification.txt#_snippet_30\n\nLANGUAGE: C++\nCODE:\n```\nUInt32 dist = rep3;\nrep3 = rep2;\nrep2 = rep1;\nrep1 = rep0;\nrep0 = dist;\n```\n\n----------------------------------------\n\nTITLE: Temporarily Disabling Tests with DISABLED_\nDESCRIPTION: This snippet demonstrates how to temporarily disable tests by adding the `DISABLED_` prefix to the test name or test case name. Disabled tests are still compiled but not executed. This is useful for broken tests that need to be fixed later.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/AdvancedGuide.md#_snippet_48\n\nLANGUAGE: cpp\nCODE:\n```\n// Tests that Foo does Abc.\nTEST(FooTest, DISABLED_DoesAbc) { ... }\n\nclass DISABLED_BarTest : public ::testing::Test { ... };\n\n// Tests that Bar does Xyz.\nTEST_F(DISABLED_BarTest, DoesXyz) { ... }\n```\n\n----------------------------------------\n\nTITLE: Registering a Simple Exception Translator in pybind11 (C++)\nDESCRIPTION: This code snippet demonstrates how to register a simple exception conversion using `py::register_exception`. It creates a Python exception class with the name `PyExp` in the given module and automatically converts any encountered exceptions of type `CppExp` into Python exceptions of type `PyExp`, using the C++ exception's `what()` method to populate the Python exception's message.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/exceptions.rst#_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\npy::register_exception<CppExp>(module, \"PyExp\");\n```\n\n----------------------------------------\n\nTITLE: SubStreams Info Structure\nDESCRIPTION: Defines the SubStreams Info structure, containing information about unpack streams within folders, their sizes, and CRCs. The code shows how the number of unpack streams is defined for each folder and how unpack sizes and digests are accessed and stored.\nSOURCE: https://github.com/openai/retro/blob/master/cores/pce/deps/lzma-16.04/DOC/7zFormat.txt#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nBYTE NID::kSubStreamsInfo; (0x08)\n\n[]\nBYTE NID::kNumUnPackStream; (0x0D)\nUINT64 NumUnPackStreamsInFolders[NumFolders];\n[]\n\n\n[]\nBYTE NID::kSize  (0x09)\nUINT64 UnPackSizes[]\n[]\n\n\n[]\nBYTE NID::kCRC  (0x0A)\nDigests[Number of streams with unknown CRC]\n[]\n\n\nBYTE NID::kEnd\n```\n\n----------------------------------------\n\nTITLE: GZIP Operating System Values\nDESCRIPTION: This snippet lists the defined values for the OS (Operating System) field in the GZIP header. This field indicates the type of file system on which the compression took place. It aids in determining end-of-line conventions for text files.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/third-party/zlib/doc/rfc1952.txt#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n                 0 - FAT filesystem (MS-DOS, OS/2, NT/Win32)\n                 1 - Amiga\n                 2 - VMS (or OpenVMS)\n                 3 - Unix\n                 4 - VM/CMS\n                 5 - Atari TOS\n                 6 - HPFS filesystem (OS/2, NT)\n                 7 - Macintosh\n                 8 - Z-System\n                 9 - CP/M\n                10 - TOPS-20\n                11 - NTFS filesystem (NT)\n                12 - QDOS\n                13 - Acorn RISCOS\n               255 - unknown\n```\n\n----------------------------------------\n\nTITLE: Custom Value Printing with << Operator in Google Test\nDESCRIPTION: This code snippet demonstrates how to overload the `<<` operator to customize the printing of a user-defined type `Bar` when a Google Test assertion fails. The `<<` operator must be defined in the same namespace as the class.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/AdvancedGuide.md#_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\n#include <iostream>\n\nnamespace foo {\n\nclass Bar { ... };  // We want Google Test to be able to print instances of this.\n\n// It's important that the << operator is defined in the SAME\n// namespace that defines Bar.  C++'s look-up rules rely on that.\n::std::ostream& operator<<(::std::ostream& os, const Bar& bar) {\n  return os << bar.DebugString();  // whatever needed to print bar to os\n}\n\n}  // namespace foo\n```\n\n----------------------------------------\n\nTITLE: Explicit Failure using FAIL()\nDESCRIPTION: The `FAIL()` macro generates a fatal failure within a test. It's used when control flow determines test failure rather than a Boolean expression. This snippet demonstrates how to use `FAIL()` inside a `switch` statement when an unexpected default case is reached.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/AdvancedGuide.md#_snippet_0\n\nLANGUAGE: c++\nCODE:\n```\nswitch(expression) {\n  case 1: ... some checks ...\n  case 2: ... some other checks\n  ...\n  default: FAIL() << \"We shouldn't get here.\";\n}\n```\n\n----------------------------------------\n\nTITLE: Adding executable and setting target properties\nDESCRIPTION: This snippet adds the main executable target (`BINARY_NAME`.elf) and sets its properties, including compile definitions (OS, feature, and function definitions) and linked libraries (the binary itself, math library, and OS-specific libraries).\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/platform/3ds/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(${BINARY_NAME}.elf ${GUI_SRC} main.c)\nset_target_properties(${BINARY_NAME}.elf PROPERTIES COMPILE_DEFINITIONS \"${OS_DEFINES};${FEATURE_DEFINES};${FUNCTION_DEFINES}\")\ntarget_link_libraries(${BINARY_NAME}.elf ${BINARY_NAME} ${M_LIBRARY} ${OS_LIB})\n```\n\n----------------------------------------\n\nTITLE: Setting OS Defines and VFS Sources in CMake\nDESCRIPTION: This CMake snippet defines OS-specific compile definitions and lists the source files related to the Virtual File System (VFS). The `OS_DEFINES` are used to configure the code for the Wii platform, while `CORE_VFS_SRC` lists the source files needed for VFS functionality.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/platform/wii/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(OS_DEFINES COLOR_16_BIT COLOR_5_6_5 USE_VFS_FILE IOAPI_NO_64)\nlist(APPEND CORE_VFS_SRC ${CMAKE_SOURCE_DIR}/src/util/vfs/vfs-file.c ${CMAKE_SOURCE_DIR}/src/util/vfs/vfs-dirent.c ${CMAKE_SOURCE_DIR}/src/util/vfs/vfs-devlist.c)\n```\n\n----------------------------------------\n\nTITLE: Conflicting Class Bindings - Dogs (C++)\nDESCRIPTION: This snippet defines conflicting class bindings for the `pets::Pet` class and the `Dog` class in `dogs.cpp`. This example demonstrates the problem that can occur when two unrelated modules provide custom bindings for the same external C++ library class.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/classes.rst#_snippet_34\n\nLANGUAGE: cpp\nCODE:\n```\n// dogs.cpp\n\n// Binding for external library class:\npy::class<pets::Pet>(m, \"Pet\")\n    .def(\"name\", &pets::Pet::name);\n\n// Binding for local extension class:\npy::class<Dog, pets::Pet>(m, \"Dog\")\n    .def(py::init<std::string>());\n```\n\n----------------------------------------\n\nTITLE: Testing Private Class Members by using a Friend Class (C++)\nDESCRIPTION: This snippet shows how to test private members of a class by declaring the test fixture as a friend class.  This grants the test fixture access to the private members, allowing you to write tests that directly verify their behavior. Requires defining the test functions within the test fixture class.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/FAQ.md#_snippet_16\n\nLANGUAGE: cpp\nCODE:\n```\nclass Foo {\n  friend class FooTest;\n  ...\n};\n\nclass FooTest : public ::testing::Test {\n protected:\n  ...\n  void Test1() {...} // This accesses private members of class Foo.\n  void Test2() {...} // So does this one.\n};\n\nTEST_F(FooTest, Test1) {\n  Test1();\n}\n\nTEST_F(FooTest, Test2) {\n  Test2();\n}\n```\n\n----------------------------------------\n\nTITLE: Call Guard Example\nDESCRIPTION: This C++ code snippet illustrates the usage of the `py::call_guard` policy. It wraps the `foo` function call with a scope guard of type `T`. This means that an instance of `T` will be created before `foo` is called and destroyed after `foo` returns, providing a way to execute code before and after the function call.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/functions.rst#_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\nm.def(\"foo\", foo, py::call_guard<T>());\n```\n\n----------------------------------------\n\nTITLE: Initializing and Customizing NTSC Setup in C/C++\nDESCRIPTION: This code snippet demonstrates how to initialize the NTSC setup structure using a preset and then customize specific parameters like sharpness before initializing the NTSC filter. It is crucial to initialize with a preset to ensure all fields, including potential future additions, are properly set.\nSOURCE: https://github.com/openai/retro/blob/master/cores/genesis/core/ntsc/sms_ntsc.txt#_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n\tsms_ntsc_setup_t setup;\n\tsetup = sms_ntsc_composite; /* do this first */\n\tsetup.sharpness = custom_sharpness;\n\tsms_ntsc_init( ntsc, &setup );\n```\n\n----------------------------------------\n\nTITLE: Initializing Dr. Gladman's PRNG\nDESCRIPTION: This code snippet initializes Dr. Gladman's pseudo-random number generator (PRNG) using the entropy function. It requires an entropy function (like the one above) and a `prng_ctx` structure. `prng_init` is called with the entropy function and a pointer to the `prng_ctx` structure. This must be done once per application session.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/libzip/docs/aes_coding_tips.txt#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nprng_ctx ctx;\nprng_init(entropy_fun, &ctx);\n```\n\n----------------------------------------\n\nTITLE: Template Metaprogramming: IsConst Example (C++)\nDESCRIPTION: This code snippet demonstrates how to implement a template metafunction, `isConst`, to check if a type is const. It avoids the verbosity of pre-C++11 approaches by defining a `Foo_<T>` struct and then aliasing its member with a `constexpr` function.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/style-guide.md#_snippet_9\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <typename T> struct IsConst_ { static constexpr bool value = false; };\ntemplate <typename T> struct IsConst_<const T> { static constexpr bool value = true; };\ntemplate <typename T> constexpr bool isConst() { return IsConst_<T>::value; }\n// Return true if T is const.\n```\n\n----------------------------------------\n\nTITLE: Building pybind11 Extension on macOS\nDESCRIPTION: This command compiles a C++ file into a pybind11 extension on macOS. It utilizes the `python3 -m pybind11 --includes` command to include the necessary pybind11 headers and the `-undefined dynamic_lookup` flag to handle missing symbols during the build process. The output is an extension module suitable for importing in Python.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/compiling.rst#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nc++ -O3 -Wall -shared -std=c++11 -undefined dynamic_lookup `python3 -m pybind11 --includes` example.cpp -o example`python3-config --extension-suffix`\n```\n\n----------------------------------------\n\nTITLE: Setting Death Test Style Programmatically C++\nDESCRIPTION: This snippet demonstrates how to programmatically set the death test style using the ::testing::FLAGS_gtest_death_test_style flag. This can be done in main() to set the style for all death tests or within individual tests to configure different styles for specific scenarios. The flag is saved and restored before and after each test, respectively.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/AdvancedGuide.md#_snippet_11\n\nLANGUAGE: C++\nCODE:\n```\n::testing::FLAGS_gtest_death_test_style = \"threadsafe\";\n```\n\n----------------------------------------\n\nTITLE: String Handling Asymmetry Demonstration in Python\nDESCRIPTION: This Python code demonstrates the asymmetry in pybind11's string handling by passing a `bytes` object to a C++ function that accepts a `std::string`. The first example shows the implicit conversion to `str`, while the second demonstrates the `UnicodeDecodeError` that occurs when passing invalid UTF-8 data as `bytes`.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/cast/strings.rst#_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\n>>> isinstance(example.asymmetry(b\"have some bytes\"), str)\nTrue\n\n>>> example.asymmetry(b\"\\xba\\xd0\\xba\\xd0\")  # invalid utf-8 as bytes\nUnicodeDecodeError: 'utf-8' codec can't decode byte 0xba in position 0: invalid start byte\n```\n\n----------------------------------------\n\nTITLE: 7-Zip LZMA Compression (ARM Filter)\nDESCRIPTION: Compresses the file a.bin into a 7z archive named a2.7z using a filter specifically designed for little-endian ARM code, followed by LZMA compression. The -m0=arm option applies the ARM filter, and -m1=lzma applies LZMA compression to the filtered output. This aims to improve compression ratio by pre-processing ARM code.\nSOURCE: https://github.com/openai/retro/blob/master/cores/genesis/core/cd_hw/libchdr/deps/lzma/DOC/lzma-sdk.txt#_snippet_7\n\nLANGUAGE: Text\nCODE:\n```\n7z a a2.7z a.bin -m0=arm -m1=lzma\n```\n\n----------------------------------------\n\nTITLE: Non-Converting Argument Usage Example\nDESCRIPTION: This Python code shows the difference between calling a function with and without the `noconvert()` option. `floats_preferred` accepts an integer argument due to implicit conversion, while `floats_only` raises a `TypeError` when called with an integer.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/functions.rst#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n>>> floats_preferred(4)\n2.0\n>>> floats_only(4)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: floats_only(): incompatible function arguments. The following argument types are supported:\n    1. (f: float) -> float\n\nInvoked with: 4\n```\n\n----------------------------------------\n\nTITLE: Executing Python Code with pybind11 API\nDESCRIPTION: This C++ code demonstrates executing Python code using the pybind11 API. It creates a dictionary and formats a string using Python's string formatting capabilities, printing the result. The `_a` and `_s` literals are used for easier construction of Python objects.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/embedding.rst#_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\n#include <pybind11/embed.h>\nnamespace py = pybind11;\nusing namespace py::literals;\n\nint main() {\n    py::scoped_interpreter guard{};\n\n    auto kwargs = py::dict(\"name\"_a=\"World\", \"number\"_a=42);\n    auto message = \"Hello, {name}! The answer is {number}\"_s.format(**kwargs);\n    py::print(message);\n}\n```\n\n----------------------------------------\n\nTITLE: End of Stream Condition Check C++\nDESCRIPTION: This code snippet shows the \"end of stream\" condition check at the start of the main loop in the LZMA decoder. It verifies if the unpack size is defined and reached zero, and whether the marker is mandatory. If all conditions are met and the range decoder is finished, it indicates the end of the stream without a marker.\nSOURCE: https://github.com/openai/retro/blob/master/cores/pce/deps/lzma-16.04/DOC/lzma-specification.txt#_snippet_20\n\nLANGUAGE: C++\nCODE:\n```\nif (unpackSizeDefined && unpackSize == 0 && !markerIsMandatory)\n  if (RangeDec.IsFinishedOK())\n    return LZMA_RES_FINISHED_WITHOUT_MARKER;\n```\n\n----------------------------------------\n\nTITLE: Function Return Example (C++)\nDESCRIPTION: This C++ function takes a function object (std::function) with the signature `int -> int` as an argument and returns another function object of the same type. The returned function is a stateful lambda that captures the input function `f` and adds 1 to the result of `f(i)` when invoked with an integer `i`.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/cast/functional.rst#_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nstd::function<int(int)> func_ret(const std::function<int(int)> &f) {\n    return [f](int i) {\n        return f(i) + 1;\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Package Version with CMake\nDESCRIPTION: This CMake snippet executes a Python script (`setup.py`) to retrieve the package version and sets CPack variables for vendor, component installation, generator (DragNDrop for Apple, ZIP for Windows), and components. It includes CPack to generate the package.\nSOURCE: https://github.com/openai/retro/blob/master/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nexecute_process(COMMAND ${PYTHON_EXECUTABLE} ${CMAKE_SOURCE_DIR}/setup.py --version OUTPUT_VARIABLE CPACK_PACKAGE_VERSION OUTPUT_STRIP_TRAILING_WHITESPACE)\nset(CPACK_PACKAGE_VENDOR OpenAI)\nset(CPACK_ZIP_COMPONENT_INSTALL ON)\nif(APPLE)\n    set(CPACK_GENERATOR DragNDrop)\nelseif(WIN32)\n    set(CPACK_GENERATOR ZIP)\nendif()\nset(CPACK_COMPONENTS_ALL gym-retro-integration)\ninclude(CPack)\n```\n\n----------------------------------------\n\nTITLE: Overload Casting with py::overload_cast in C++\nDESCRIPTION: This code snippet demonstrates how to use `py::overload_cast` to resolve function overloads when binding C++ classes to Python using pybind11. It showcases the selection of a specific overload based on the argument type, allowing for different behaviors based on the input.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/changelog.rst#_snippet_8\n\nLANGUAGE: cpp\nCODE:\n```\npy::class_<Pet>(m, \"Pet\")\n            .def(\"set\", py::overload_cast<int>(&Pet::set), \"Set the pet's age\")\n            .def(\"set\", py::overload_cast<const std::string &>(&Pet::set), \"Set the pet's name\");\n```\n\n----------------------------------------\n\nTITLE: Define Animal and Dog C++ Classes with name() and bark()\nDESCRIPTION: This code defines two C++ classes: `Animal` with a pure virtual function `go` and virtual function `name`, and `Dog` which inherits from `Animal` and overrides the `go` and has virtual function `bark`.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/classes.rst#_snippet_8\n\nLANGUAGE: cpp\nCODE:\n```\nclass Animal {\npublic:\n    virtual std::string go(int n_times) = 0;\n    virtual std::string name() { return \"unknown\"; }\n};\nclass Dog : public Animal {\npublic:\n    std::string go(int n_times) override {\n        std::string result;\n        for (int i=0; i<n_times; ++i)\n            result += bark() + \" \";\n        return result;\n    }\n    virtual std::string bark() { return \"woof!\"; }\n};\n```\n\n----------------------------------------\n\nTITLE: Suppressing Default Printer in Google Test (C++)\nDESCRIPTION: This code snippet extends the previous example by showing how to suppress the default Google Test result printer. It releases the default printer from the event listener list before appending the custom listener. This ensures that only the custom listener's output is displayed, preventing duplication or interference.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/AdvancedGuide.md#_snippet_44\n\nLANGUAGE: C++\nCODE:\n```\n...\n  delete listeners.Release(listeners.default_result_printer());\n  listeners.Append(new MinimalistPrinter);\n  return RUN_ALL_TESTS();\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Memory Access Functions in C\nDESCRIPTION: This snippet describes the memory access functions that need to be implemented in the host program for the basic configuration of the Musashi M680x0 emulator. These functions are responsible for reading and writing 8-bit, 16-bit, and 32-bit values from/to memory.\nSOURCE: https://github.com/openai/retro/blob/master/cores/genesis/core/m68k/readme.txt#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nunsigned int  m68k_read_memory_8(unsigned int address);\nunsigned int  m68k_read_memory_16(unsigned int address);\nunsigned int  m68k_read_memory_32(unsigned int address);\nvoid m68k_write_memory_8(unsigned int address, unsigned int value);\nvoid m68k_write_memory_16(unsigned int address, unsigned int value);\nvoid m68k_write_memory_32(unsigned int address, unsigned int value);\n```\n\n----------------------------------------\n\nTITLE: Google Mock InvokeArgument with ByRef Example\nDESCRIPTION: This code shows how to use InvokeArgument<N> to call the N-th argument of the mock function, which must be a function or functor. It demonstrates passing arguments by value and by reference, wrapping the reference argument inside ByRef(). The example calls the mock function's #2 argument, passing 5 and string(\"Hi\") by value, and foo by reference.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googlemock/docs/CheatSheet.md#_snippet_13\n\nLANGUAGE: cpp\nCODE:\n```\nInvokeArgument<2>(5, string(\"Hi\"), ByRef(foo))\n```\n\n----------------------------------------\n\nTITLE: Copyright Disclaimer Example\nDESCRIPTION: This snippet provides an example of a copyright disclaimer that an employer or school can sign to relinquish their copyright interest in a library.  It's crucial for ensuring clarity on ownership when developing software. This sample can be adapted by altering the names and project details.\nSOURCE: https://github.com/openai/retro/blob/master/cores/genesis/LICENSE.txt#_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\nYoyodyne, Inc., hereby disclaims all copyright interest in the\nlibrary `Frob' (a library for tweaking knobs) written by James Random Hacker.\n\n<signature of Ty Coon>, 1 April 1990\nTy Coon, President of Vice\n```\n\n----------------------------------------\n\nTITLE: Calculate lenState for Distance Decoding Context in C++\nDESCRIPTION: This code calculates the `lenState` variable, which is used as a context to select the appropriate bit tree decoder from the `PosSlotDecoder` array in LZMA distance decoding.  It ensures that `lenState` does not exceed the maximum allowed value (`kNumLenToPosStates - 1`).\nSOURCE: https://github.com/openai/retro/blob/master/cores/genesis/core/cd_hw/libchdr/deps/lzma/DOC/lzma-specification.txt#_snippet_20\n\nLANGUAGE: cpp\nCODE:\n```\n#define kNumLenToPosStates 4\n\nunsigned lenState = len;\nif (lenState > kNumLenToPosStates - 1)\n  lenState = kNumLenToPosStates - 1;\n```\n\n----------------------------------------\n\nTITLE: Short Rep Match Handling in LZMA Decoder (C++)\nDESCRIPTION: This code handles the 'Short Rep Match' case in the LZMA decoder.  It updates the decoder state, puts one byte from the window to the current position, decrements the uncompressed size, and continues to the next MATCH/LITERAL symbol. `rep0` contains the distance for the short rep match.\nSOURCE: https://github.com/openai/retro/blob/master/cores/pce/deps/lzma-16.04/DOC/lzma-specification.txt#_snippet_31\n\nLANGUAGE: C++\nCODE:\n```\nstate = UpdateState_ShortRep(state);\nOutWindow.PutByte(OutWindow.GetByte(rep0 + 1));\nunpackSize--;\ncontinue;\n```\n\n----------------------------------------\n\nTITLE: LZMA Encoder Properties Writing to Header (C)\nDESCRIPTION: This code writes the encoded LZMA properties and the file size to a header.  The `LzmaEnc_WriteProperties` function writes the LZMA properties to the `header` buffer, and the file size is appended as a little-endian 8-byte value.  The header is then written to the output file.\nSOURCE: https://github.com/openai/retro/blob/master/cores/genesis/core/cd_hw/libchdr/deps/lzma/DOC/lzma.txt#_snippet_6\n\nLANGUAGE: C\nCODE:\n```\nByte header[LZMA_PROPS_SIZE + 8];\nsize_t headerSize = LZMA_PROPS_SIZE;\nUInt64 fileSize;\nint i;\n\nres = LzmaEnc_WriteProperties(enc, header, &headerSize);\nfileSize = MyGetFileLength(inFile);\nfor (i = 0; i < 8; i++)\n  header[headerSize++] = (Byte)(fileSize >> (8 * i));\nMyWriteFileAndCheck(outFile, header, headerSize)\n```\n\n----------------------------------------\n\nTITLE: Defining Polymorphic Classes in C++\nDESCRIPTION: This C++ code defines two polymorphic classes, `PolymorphicPet` and `PolymorphicDog`, where `PolymorphicDog` inherits from `PolymorphicPet`. The `PolymorphicPet` class has a virtual destructor, which makes it polymorphic. Polymorphism allows pybind11 to perform automatic upcasting in Python.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/classes.rst#_snippet_17\n\nLANGUAGE: cpp\nCODE:\n```\nstruct PolymorphicPet {\n    virtual ~PolymorphicPet() = default;\n};\n\nstruct PolymorphicDog : PolymorphicPet {\n    std::string bark() const { return \"woof!\"; }\n};\n```\n\n----------------------------------------\n\nTITLE: Fixed variable declarations for C99 compatibility\nDESCRIPTION: This snippet fixes variable declarations in several files to ensure compatibility with C compilers that do not fully adhere to the C99 standard (or C98). This change addresses potential compilation errors on older or less compliant compilers. The files affected are movie.c, drivers/sexyal/convertgen.c, drivers/sexyal/convert.inc, and drivers/pc/unix-netplay.c.\nSOURCE: https://github.com/openai/retro/blob/master/cores/nes/changelog.txt#_snippet_14\n\n\n\n----------------------------------------\n\nTITLE: Receiving data with TLS using KJ Networking in C++\nDESCRIPTION: This C++ code demonstrates receiving data over a network with TLS, using the KJ library.  It creates a `kj::TlsContext` and `tls.wrapPort` to establish a secure listener.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/doc/slides-2017.05.18/index.md#_snippet_8\n\nLANGUAGE: c++\nCODE:\n```\nvoid receive() {\n  auto io = kj::setupAsyncIo();\n  kj::TlsKeypair keypair { KEY_PEM_TEXT, CERT_PEM_TEXT };\n  kj::TlsContext::Options options;\n  options.defaultKeypair = keypair;\n  kj::TlsContext tls(options);\n  auto& network = io.provider->getNetwork();\n  auto addr = network.parseAddress(\"*\", 443).wait(io.waitScope);\n  auto listener = tls.wrapPort(addr->listen());\n  auto connection = listener->accept().wait(io.waitScope);\n  connection->write(\"HTTP/1.1 404 Not Found\\r\\n\\r\\n\", 26)\n      .wait(io.waitScope);\n}\n```\n\n----------------------------------------\n\nTITLE: Predicate Assertion with MutuallyPrime Function\nDESCRIPTION: This snippet shows how to use `EXPECT_PRED2` to perform predicate assertions. It asserts that the `MutuallyPrime` function returns true for given inputs. If the assertion fails, it prints the values of the input arguments for debugging. Dependencies: Google Test framework.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/AdvancedGuide.md#_snippet_2\n\nLANGUAGE: c++\nCODE:\n```\n// Returns true iff m and n have no common divisors except 1.\nbool MutuallyPrime(int m, int n) { ... }\nconst int a = 3;\nconst int b = 4;\nconst int c = 10;\n```\n\n----------------------------------------\n\nTITLE: pybind11 Module Definition for Callbacks\nDESCRIPTION: This code snippet shows how to define a pybind11 module that exposes the `func_arg`, `func_ret`, and `func_cpp` functions to Python. It includes the necessary header file `pybind11/functional.h` for handling function objects. Dependencies include the previously defined functions and pybind11.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/cast/functional.rst#_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\n#include <pybind11/functional.h>\n\nPYBIND11_MODULE(example, m) {\n    m.def(\"func_arg\", &func_arg);\n    m.def(\"func_ret\", &func_ret);\n    m.def(\"func_cpp\", &func_cpp);\n}\n```\n\n----------------------------------------\n\nTITLE: Capturing C++ ostream output using scoped_ostream_redirect\nDESCRIPTION: This snippet demonstrates how to redirect C++'s std::cout stream to Python's sys.stdout using py::scoped_ostream_redirect. This ensures that output from C++ libraries using std::cout is properly redirected to Python's output stream, resolving potential output order issues.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/pycpp/utilities.rst#_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\n#include <pybind11/iostream.h>\n\n...\n\n// Add a scoped redirect for your noisy code\nm.def(\"noisy_func\", []() {\n    py::scoped_ostream_redirect stream(\n        std::cout,                               // std::ostream&\n        py::module::import(\"sys\")attr(\"stdout\") // Python output\n    );\n    call_noisy_func();\n});\n```\n\n----------------------------------------\n\nTITLE: Finding Toolchain Executables using CMake\nDESCRIPTION: This snippet uses CMake's `find_program` command to locate the cross-compilation toolchain executables (gcc-ar, gcc-ranlib, gcc, g++, ld). It uses the `cross_prefix` and `extension` variables defined earlier to construct the expected names of the executables.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/platform/3ds/CMakeToolchain.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nfind_program(CMAKE_AR ${cross_prefix}gcc-ar${extension})\nfind_program(CMAKE_RANLIB ${cross_prefix}gcc-ranlib${extension})\nfind_program(CMAKE_C_COMPILER ${cross_prefix}gcc${extension})\nfind_program(CMAKE_CXX_COMPILER ${cross_prefix}g++${extension})\nfind_program(CMAKE_ASM_COMPILER ${cross_prefix}gcc${extension})\nfind_program(CMAKE_LINKER ${cross_prefix}ld${extension})\n```\n\n----------------------------------------\n\nTITLE: Configuring Header Files in CMake\nDESCRIPTION: This snippet configures the `cmake-config.h.in` and `cmake-zipconf.h.in` files to generate `config.h` and `zipconf.h` respectively in the build directory. The `@ONLY` option ensures that only CMake variables are expanded in these files. These header files likely contain preprocessor definitions based on the CMake configuration.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/libzip/CMakeLists.txt#_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nCONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake-config.h.in ${CMAKE_CURRENT_BINARY_DIR}/config.h)\nCONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake-zipconf.h.in ${CMAKE_CURRENT_BINARY_DIR}/zipconf.h)\n```\n\n----------------------------------------\n\nTITLE: Installing Cap'n Proto Compiler Tools\nDESCRIPTION: This snippet installs the Cap'n Proto compiler tools, including `capnp_tool`, `capnpc_cpp`, and `capnpc_capnp`. A symbolic link is created for `capnpc` pointing to `capnp` in the installation directory. This allows users to invoke the compiler using either name.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/c++/src/capnp/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT CAPNP_LITE)\n  install(TARGETS capnp_tool capnpc_cpp capnpc_capnp ${INSTALL_TARGETS_DEFAULT_ARGS})\n\n  # Symlink capnpc -> capnp\n  install(CODE \"execute_process(COMMAND \\\"${CMAKE_COMMAND}\\\" -E create_symlink capnp \\\"\\$ENV{DESTDIR}${CMAKE_INSTALL_FULL_BINDIR}/capnpc\\\"\")\nendif()  # NOT CAPNP_LITE\n```\n\n----------------------------------------\n\nTITLE: Defining Test Programs for libzip in CMake\nDESCRIPTION: This snippet defines a list of test programs to be built and executed. It then iterates through this list, creating an executable for each program and linking it with the zip library.  The test programs will be created from `.c` source files with the same names.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/libzip/regress/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nSET(TEST_PROGRAMS\n  add_from_filep\n  fopen_unchanged\n  fseek\n  nonrandomopentest\n)\n\nFOREACH(PROGRAM ${TEST_PROGRAMS})\n  ADD_EXECUTABLE(${PROGRAM} ${PROGRAM}.c)\n  TARGET_LINK_LIBRARIES(${PROGRAM} zip)\nENDFOREACH()\n```\n\n----------------------------------------\n\nTITLE: Binding Inheritance with Template Parameter\nDESCRIPTION: This code snippet shows one way to define an inheritance relationship in pybind11 when binding the `Dog` class, by specifying the C++ base class (`Pet`) as a template parameter to `py::class_`. This creates the appropriate inheritance relationship in the Python bindings.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/classes.rst#_snippet_12\n\nLANGUAGE: cpp\nCODE:\n```\npy::class_<Pet>(m, \"Pet\")\n   .def(py::init<const std::string &>())\n   .def_readwrite(\"name\", &Pet::name);\n\n// Method 1: template parameter:\npy::class_<Dog, Pet /* <- specify C++ parent type */>(m, \"Dog\")\n    .def(py::init<const std::string &>())\n    .def(\"bark\", &Dog::bark);\n```\n\n----------------------------------------\n\nTITLE: Using call_guard with scoped_ostream_redirect and scoped_estream_redirect\nDESCRIPTION: This example shows how to use py::call_guard with py::scoped_ostream_redirect and py::scoped_estream_redirect to redirect both std::cout and std::cerr to their respective Python counterparts when calling a C++ function. This is useful for functions that produce output to both standard output and standard error.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/pycpp/utilities.rst#_snippet_2\n\nLANGUAGE: py\nCODE:\n```\n// Alternative: Call single function using call guard\nm.def(\"noisy_func\", &call_noisy_function,\n      py::call_guard<py::scoped_ostream_redirect,\n                     py::scoped_estream_redirect>());\n```\n\n----------------------------------------\n\nTITLE: Making std::vector Opaque with PYBIND11_MAKE_OPAQUE\nDESCRIPTION: This code snippet shows how to use the `PYBIND11_MAKE_OPAQUE` macro to disable the automatic conversion machinery for `std::vector<int>`. This renders the type opaque and enables passing it by reference. The macro must be specified at the top level and present in every file before usage.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/cast/stl.rst#_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\nPYBIND11_MAKE_OPAQUE(std::vector<int>);\n```\n\n----------------------------------------\n\nTITLE: Installing Core Files (Windows)\nDESCRIPTION: This snippet is specific to Windows (`if(WIN32)`). It installs the core files (`CORES`) to the `cores` directory within the installation prefix, as part of the `gym-retro-integration` component. It also sets the `CMAKE_INSTALL_BINDIR` variable to \".\", indicating that the executable should be installed in the root of the installation directory.\nSOURCE: https://github.com/openai/retro/blob/master/src/ui/CMakeLists.txt#_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\nif(WIN32)\n    install(FILES ${CORES} DESTINATION \"cores\" COMPONENT gym-retro-integration)\n    set(CMAKE_INSTALL_BINDIR \".\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Target to Run Python Tests\nDESCRIPTION: This snippet adds a custom target named 'check' that executes a Python test script. It sets the PYTHONPATH environment variable to include the directory where the compiled module is located and then runs the Python executable with the test script and project name as arguments.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/tests/test_cmake_build/installed_target/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_target(check ${CMAKE_COMMAND} -E env PYTHONPATH=$<TARGET_FILE_DIR:test_cmake_build>\n                  ${PYTHON_EXECUTABLE} ${PROJECT_SOURCE_DIR}/../test.py ${PROJECT_NAME})\n```\n\n----------------------------------------\n\nTITLE: Making STL containers opaque before binding\nDESCRIPTION: This code snippet shows the usage of `PYBIND11_MAKE_OPAQUE` macro for `std::vector<int>` and `std::map<std::string, double>`.  This is necessary to make the containers behave like native python types when they are bound using `py::bind_vector` or `py::bind_map`\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/cast/stl.rst#_snippet_9\n\nLANGUAGE: cpp\nCODE:\n```\nPYBIND11_MAKE_OPAQUE(std::vector<int>);\nPYBIND11_MAKE_OPAQUE(std::map<std::string, double>);\n```\n\n----------------------------------------\n\nTITLE: Define PyAnimal Trampoline Class\nDESCRIPTION: This code defines the `PyAnimal` trampoline class, which inherits from `Animal` and overrides the virtual function `go`.  It uses the `PYBIND11_OVERLOAD_PURE` macro to enable Python overrides of the pure virtual function.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/classes.rst#_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nclass PyAnimal : public Animal {\npublic:\n    /* Inherit the constructors */\n    using Animal::Animal;\n\n    /* Trampoline (need one for each virtual function) */\n    std::string go(int n_times) override {\n        PYBIND11_OVERLOAD_PURE(\n            std::string, /* Return type */\n            Animal,      /* Parent class */\n            go,          /* Name of function in C++ (must match Python name) */\n            n_times      /* Argument(s) */\n        );\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Virtual File System (VFS) for 3DS\nDESCRIPTION: This snippet configures the Virtual File System (VFS) based on the `USE_VFS_3DS` option. If enabled, it appends `USE_VFS_3DS` to the OS definitions; otherwise, it appends `USE_VFS_FILE` and includes relevant VFS source files.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/platform/3ds/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(USE_VFS_3DS)\n\tlist(APPEND OS_DEFINES USE_VFS_3DS)\nelse()\n\tlist(APPEND OS_DEFINES USE_VFS_FILE)\n\tlist(APPEND CORE_VFS_SRC ${CMAKE_SOURCE_DIR}/src/util/vfs/vfs-file.c ${CMAKE_SOURCE_DIR}/src/util/vfs/vfs-dirent.c)\nendif()\nset(CORE_VFS_SRC ${CORE_VFS_SRC} PARENT_SCOPE)\nset(OS_DEFINES ${OS_DEFINES} PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Interacting with the Bound Class in Python\nDESCRIPTION: This snippet showcases how to interact with the `Pet` class that has been bound to Python using pybind11. It demonstrates creating an instance of the class, calling methods, and printing the object. It requires the `example` module to be built and importable.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/classes.rst#_snippet_2\n\nLANGUAGE: pycon\nCODE:\n```\n% python\n>>> import example\n>>> p = example.Pet('Molly')\n>>> print(p)\n<example.Pet object at 0x10cd98060>\n>>> p.getName()\nu'Molly'\n>>> p.setName('Charly')\n>>> p.getName()\nu'Charly'\n```\n\n----------------------------------------\n\nTITLE: Including directories and libraries for 3DS\nDESCRIPTION: This snippet includes necessary directories and libraries for the 3DS build. It appends different libraries based on the build type (Debug/RelWithDebInfo vs. Release) and sets source groups for organization.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/platform/3ds/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories(${CMAKE_CURRENT_BINARY_DIR})\nif(${CMAKE_BUILD_TYPE} STREQUAL Debug OR ${CMAKE_BUILD_TYPE} STREQUAL RelWithDebInfo)\n\tlist(APPEND OS_LIB citro3dd ctrud)\nelse()\n\tlist(APPEND OS_LIB citro3d ctru)\nendif()\nfile(GLOB OS_SRC ${CMAKE_CURRENT_SOURCE_DIR}/3ds-*.c ${CMAKE_CURRENT_SOURCE_DIR}/ctru-heap.c ${CMAKE_CURRENT_SOURCE_DIR}/socket.c)\nset(OS_SRC ${OS_SRC} PARENT_SCOPE)\nset(OS_LIB ${OS_LIB} PARENT_SCOPE)\nsource_group(\"3DS-specific code\" FILES ${OS_SRC})\n```\n\n----------------------------------------\n\nTITLE: Importing Modules with Naming Conflict in Python\nDESCRIPTION: This Python snippet attempts to import two modules, `cats` and `dogs`, which both define a class named `Pet`.  This results in an `ImportError` because the type `Pet` is already registered.  This shows the problem that `py::module_local` attempts to solve.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/classes.rst#_snippet_37\n\nLANGUAGE: pycon\nCODE:\n```\n>>> import cats\n>>> import dogs\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nImportError: generic_type: type \"Pet\" is already registered!\n```\n\n----------------------------------------\n\nTITLE: LZMA Encoding Function Call (C)\nDESCRIPTION: This snippet illustrates the call to the `LzmaEnc_Encode` function, which performs the actual LZMA encoding. It takes the encoder object (`enc`), output stream table (`&outStream.funcTable`), input stream table (`&inStream.funcTable`), a progress callback (NULL in this case), and two memory allocators as parameters.\nSOURCE: https://github.com/openai/retro/blob/master/cores/genesis/core/cd_hw/libchdr/deps/lzma/DOC/lzma.txt#_snippet_7\n\nLANGUAGE: C\nCODE:\n```\nres = LzmaEnc_Encode(enc, &outStream.funcTable, &inStream.funcTable, \n        NULL, &g_Alloc, &g_Alloc);\n```\n\n----------------------------------------\n\nTITLE: Updating Literal State in LZMA Decoder (C++)\nDESCRIPTION: This function `UpdateState_Literal` updates the decoder state based on the decoded literal. It adjusts the state value depending on its initial range, returning a new state value that reflects the transition after processing a literal symbol. The function receives the current state as input and returns the updated state.\nSOURCE: https://github.com/openai/retro/blob/master/cores/pce/deps/lzma-16.04/DOC/lzma-specification.txt#_snippet_23\n\nLANGUAGE: C++\nCODE:\n```\nunsigned UpdateState_Literal(unsigned state)\n{\n  if (state < 4) return 0;\n  else if (state < 10) return state - 3;\n  else return state - 6;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Callbacks with Promises in C++\nDESCRIPTION: This C++ snippet demonstrates how to use callbacks with promises using the `then()` method to process the result of an asynchronous operation.  It fetches HTTP content and then counts the number of newline characters in the content using a lambda function. The `then()` method is used to chain asynchronous operations and handle the results.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/doc/cxxrpc.md#_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nkj::Promise<kj::String> contentPromise =\n    fetchHttp(\"http://example.com\");\n\nkj::Promise<int> lineCountPromise =\n    contentPromise.then([](kj::String&& content) {\n  return countChars(content, '\\n');\n});\n```\n\n----------------------------------------\n\nTITLE: Returning UTF-8 Strings from C++ to Python\nDESCRIPTION: This code snippet shows how pybind11 converts a C++ `std::string` to a Python `str` when returning it to the Python caller. Pybind11 assumes that the string is valid UTF-8 and decodes it. If the string isn't valid UTF-8, a `UnicodeDecodeError` will be raised. This example returns a simple ASCII string.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/cast/strings.rst#_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nm.def(\"std_string_return\",\n    []() {\n        return std::string(\"This string needs to be UTF-8 encoded\");\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Creating and Linking the Python Module\nDESCRIPTION: This snippet creates a shared library named 'test_cmake_build' from the source file '../main.cpp' and links it against the pybind11 module. It ensures that the resulting shared library has the correct prefix and suffix according to Python's module naming conventions.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/tests/test_cmake_build/installed_target/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(test_cmake_build MODULE ../main.cpp)\n\ntarget_link_libraries(test_cmake_build PRIVATE pybind11::module)\n\n# make sure result is, for example, test_installed_target.so, not libtest_installed_target.dylib\nset_target_properties(test_cmake_build PROPERTIES PREFIX \"${PYTHON_MODULE_PREFIX}\"\n                                                  SUFFIX \"${PYTHON_MODULE_EXTENSION}\")\n```\n\n----------------------------------------\n\nTITLE: Adding Compiler Definitions for Windows Phone/Store in CMake\nDESCRIPTION: This snippet adds a compiler definition `-DMS_UWP` if the target system is Windows Phone or Windows Store. It also adds `bcrypt` to the `OPTIONAL_LIBRARY` variable, indicating that the bcrypt library should be linked if available.  This is specific to Universal Windows Platform (UWP) builds.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/libzip/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nif(CMAKE_SYSTEM_NAME MATCHES WindowsPhone OR CMAKE_SYSTEM_NAME MATCHES WindowsStore)\n  ADD_DEFINITIONS(-DMS_UWP)\n  SET (OPTIONAL_LIBRARY \"${OPTIONAL_LIBRARY}\" bcrypt)\nendif(CMAKE_SYSTEM_NAME MATCHES WindowsPhone OR CMAKE_SYSTEM_NAME MATCHES WindowsStore)\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Target for Cleanup in CMake\nDESCRIPTION: This snippet defines a custom target named 'cleanup' that executes a CMake script to clean up the binary directory. The cleanup.cmake script is executed using the CMake command-line tool, with the binary directory passed as a parameter. This target is used to remove generated files and directories during the build process.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/libzip/regress/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nADD_CUSTOM_TARGET(cleanup\n    COMMAND ${CMAKE_COMMAND} -DDIR=${CMAKE_CURRENT_BINARY_DIR} -P ${CMAKE_CURRENT_SOURCE_DIR}/cleanup.cmake\n    )\n```\n\n----------------------------------------\n\nTITLE: ISeqInStream and ISeqOutStream Implementation (C)\nDESCRIPTION: This code snippet demonstrates how to implement `ISeqInStream` and `ISeqOutStream` interfaces for file input and output, which are used during single-call compression with callbacks. It assigns the `MyRead` and `MyWrite` functions to the corresponding function pointers within the structures.\nSOURCE: https://github.com/openai/retro/blob/master/cores/pce/deps/lzma-16.04/DOC/lzma.txt#_snippet_5\n\nLANGUAGE: C\nCODE:\n```\nCFileSeqInStream inStream;\nCFileSeqOutStream outStream;\n\ninStream.funcTable.Read = MyRead;\ninStream.file = inFile;\noutStream.funcTable.Write = MyWrite;\noutStream.file = outFile;\n```\n\n----------------------------------------\n\nTITLE: Example of Encoded Generic Type in Cap'n Proto\nDESCRIPTION: This code demonstrates how a generic type will be encoded by Cap'n Proto.  This shows the encoding of Map(Text, Person) is identical to the encoded struct PersonMap which contains entries of a list of Entry structs. The Entry structs holds a key (Text) and a value (Person).\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/doc/language.md#_snippet_12\n\nLANGUAGE: capnp\nCODE:\n```\nstruct PersonMap {\n  # Encoded the same as Map(Text, Person).\n  entries @0 :List(Entry);\n  struct Entry {\n    key @0 :Text;\n    value @1 :Person;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Interactive Program Notice Example\nDESCRIPTION: This snippet provides an example of a short notice to be displayed when an interactive program starts. It includes copyright information, a warranty disclaimer, and information about redistribution conditions. The hypothetical commands `show w` and `show c` are meant to display the warranty and copyright details, respectively.\nSOURCE: https://github.com/openai/retro/blob/master/LICENSES.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n    Gnomovision version 69, Copyright (C) year name of author\n    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n```\n\n----------------------------------------\n\nTITLE: Reverse Bit Tree Decoding in C++\nDESCRIPTION: The `BitTreeReverseDecode` function decodes a symbol from a bit tree in reverse order (from low bit to high bit). It iterates through the bits, decodes each bit using `CRangeDecoder::DecodeBit()`, updates the index `m` and the symbol value accordingly.\nSOURCE: https://github.com/openai/retro/blob/master/cores/genesis/core/cd_hw/libchdr/deps/lzma/DOC/lzma-specification.txt#_snippet_12\n\nLANGUAGE: C++\nCODE:\n```\nunsigned BitTreeReverseDecode(CProb *probs, unsigned numBits, CRangeDecoder *rc)\n{\n  unsigned m = 1;\n  unsigned symbol = 0;\n  for (unsigned i = 0; i < numBits; i++)\n  {\n    unsigned bit = rc->DecodeBit(&probs[m]);\n    m <<= 1;\n    m += bit;\n    symbol |= (bit << i);\n  }\n  return symbol;\n}\n```\n\n----------------------------------------\n\nTITLE: Binding Overloaded Methods Based on Constness with pybind11 (C++14)\nDESCRIPTION: This snippet demonstrates how to bind overloaded methods that differ based on constness using py::overload_cast and the py::const_ tag. It shows how to differentiate between mutable and const versions of the same method.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/classes.rst#_snippet_25\n\nLANGUAGE: cpp\nCODE:\n```\nstruct Widget {\n    int foo(int x, float y);\n    int foo(int x, float y) const;\n};\n\npy::class_<Widget>(m, \"Widget\")\n   .def(\"foo_mutable\", py::overload_cast<int, float>(&Widget::foo))\n   .def(\"foo_const\",   py::overload_cast<int, float>(&Widget::foo, py::const_));\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Auto Features\nDESCRIPTION: This snippet enables CMake's automatic features for meta-object code generation (automoc), resource compilation (autorcc), and user interface compilation (autouic). It also includes the current directory in the include paths and sets the RPATH to use link paths for shared libraries.\nSOURCE: https://github.com/openai/retro/blob/master/src/ui/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_AUTOMOC ON)\nset(CMAKE_AUTORCC ON)\nset(CMAKE_AUTOUIC ON)\nset(CMAKE_INCLUDE_CURRENT_DIR ON)\nset(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)\n```\n\n----------------------------------------\n\nTITLE: LZMA Multi-Call Decompressing Initialization (C)\nDESCRIPTION: This code segment shows how to initialize the CLzmaDec structure for multi-call state decompressing in C. It allocates memory for the structure and the dictionary using the provided allocator (`g_Alloc`). The `LzmaDec_Allocate` function is called with the header containing LZMA properties and size information.\nSOURCE: https://github.com/openai/retro/blob/master/cores/genesis/core/cd_hw/libchdr/deps/lzma/DOC/lzma.txt#_snippet_2\n\nLANGUAGE: C\nCODE:\n```\nCLzmaDec state;\nLzmaDec_Constr(&state);\nres = LzmaDec_Allocate(&state, header, LZMA_PROPS_SIZE, &g_Alloc);\nif (res != SZ_OK)\n  return res;\n```\n\n----------------------------------------\n\nTITLE: Returning Bytes from C++ to Python\nDESCRIPTION: This C++ code demonstrates how to return a `std::string` as a `py::bytes` object to avoid implicit UTF-8 decoding.  The function `return_bytes` creates a string containing non-UTF-8 data and returns it as a `py::bytes` object, ensuring that the data is not transcoded.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/cast/strings.rst#_snippet_6\n\nLANGUAGE: C++\nCODE:\n```\nm.def(\"return_bytes\",\n    []() {\n        std::string s(\"\\xba\\xd0\\xba\\xd0\");  // Not valid UTF-8\n        return py::bytes(s);  // Return the data without transcoding\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Binding Polymorphic Classes with pybind11\nDESCRIPTION: This code demonstrates binding the polymorphic C++ classes `PolymorphicPet` and `PolymorphicDog` to Python using pybind11.  The classes are bound similarly to non-polymorphic classes, but the presence of the virtual destructor in `PolymorphicPet` enables automatic upcasting in Python.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/classes.rst#_snippet_18\n\nLANGUAGE: cpp\nCODE:\n```\n// Same binding code\npy::class_<PolymorphicPet>(m, \"PolymorphicPet\");\npy::class_<PolymorphicDog, PolymorphicPet>(m, \"PolymorphicDog\")\n    .def(py::init<>())\n    .def(\"bark\", &PolymorphicDog::bark);\n```\n\n----------------------------------------\n\nTITLE: Translating Axis Data to Buttons in Retro\nDESCRIPTION: This snippet describes how to translate axis data into button presses using `AxisToButtons`. It explains that when the axis goes past 50% in the negative direction, `S9xReportButton(PseudoButtonBase+0,1)` is called, and when it exceeds 50% in the positive direction, `S9xReportButton(PseudoButtonBase+255,1)` is triggered. Similarly, `S9xReportButton(...,0)` is called when the deflection drops below 50% in either direction.\nSOURCE: https://github.com/openai/retro/blob/master/cores/snes/docs/controls.txt#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nAxisToButtons 0/255 T=50%\n```\n\n----------------------------------------\n\nTITLE: Generating Random Bytes with PRNG\nDESCRIPTION: This code snippet generates a sequence of random bytes using Dr. Gladman's PRNG. It requires the PRNG to be initialized first.  `prng_rand` is called with a buffer, its size, and a pointer to the `prng_ctx` structure.  Here it is used to obtain 16 random bytes for a salt value.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/libzip/docs/aes_coding_tips.txt#_snippet_2\n\nLANGUAGE: C\nCODE:\n```\nunsigned char buffer[16];\nprng_rand(buffer, sizeof(buffer), &ctx);\n```\n\n----------------------------------------\n\nTITLE: Multiple Inheritance Tag (C++)\nDESCRIPTION: This snippet shows how to use the `py::multiple_inheritance()` tag when only one base type is specified for a C++ type that actually has multiple base classes. This tag is necessary to avoid undefined behavior when pybind11 incorrectly assumes that the class does not participate in multiple inheritance.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/classes.rst#_snippet_30\n\nLANGUAGE: cpp\nCODE:\n```\npy::class_<MyType, BaseType2>(m, \"MyType\", py::multiple_inheritance());\n```\n\n----------------------------------------\n\nTITLE: Single-call Decompressing Interface (C)\nDESCRIPTION: This code snippet details the interface for single-call LZMA decompression. It outlines the parameters for the `LzmaDecode` function, including input and output buffers, property data, finish mode, and memory allocator. It also describes the possible return values and status codes.\nSOURCE: https://github.com/openai/retro/blob/master/cores/pce/deps/lzma-16.04/DOC/lzma.txt#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nint LzmaDecode(Byte *dest, SizeT *destLen, const Byte *src, SizeT *srcLen,\n    const Byte *propData, unsigned propSize, ELzmaFinishMode finishMode, \n    ELzmaStatus *status, ISzAlloc *alloc);\n```\n\n----------------------------------------\n\nTITLE: Generic Arguments and Keyword Arguments\nDESCRIPTION: This C++ code demonstrates how to create a function that accepts arbitrary numbers of positional arguments (`py::args`) and keyword arguments (`py::kwargs`). The function can then process these arguments as needed, allowing for flexible function signatures similar to Python's `*args` and `**kwargs`.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/functions.rst#_snippet_10\n\nLANGUAGE: cpp\nCODE:\n```\nvoid generic(py::args args, py::kwargs kwargs) {\n   /// .. do something with args\n   if (kwargs)\n       /// .. do something with kwargs\n}\n```\n\n----------------------------------------\n\nTITLE: Building Extension with CMake\nDESCRIPTION: This snippet demonstrates the basic CMake configuration for building a Python extension module using pybind11. It assumes that the pybind11 repository is located in a subdirectory named `pybind11` and the C++ code is in `example.cpp`. It utilizes the `pybind11_add_module` function to handle compiler and linker flags for creating a Python extension.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/compiling.rst#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 2.8.12)\nproject(example)\n\nadd_subdirectory(pybind11)\npybind11_add_module(example example.cpp)\n```\n\n----------------------------------------\n\nTITLE: Setting Project Metadata in CMake\nDESCRIPTION: This snippet sets project metadata such as the project name, version, and package string. It defines variables that are used throughout the build process to identify and version the libzip library.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/libzip/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nPROJECT(libzip C)\n\nSET(PACKAGE \"libzip\")\nSET(PACKAGE_NAME ${PACKAGE})\nSET(PACKAGE_VERSION_MAJOR \"1\")\nSET(PACKAGE_VERSION_MINOR \"4\")\nSET(PACKAGE_VERSION_MICRO \"0\")\n#SET(VERSION \"${PACKAGE_VERSION_MAJOR}.${PACKAGE_VERSION_MINOR}\")\nSET(VERSION \"${PACKAGE_VERSION_MAJOR}.${PACKAGE_VERSION_MINOR}.${PACKAGE_VERSION_MICRO}\")\nSET(PACKAGE_VERSION ${VERSION})\nSET(LIBZIP_VERSION ${PACKAGE_VERSION})\nSET(LIBZIP_VERSION_MAJOR ${PACKAGE_VERSION_MAJOR})\nSET(LIBZIP_VERSION_MINOR ${PACKAGE_VERSION_MINOR})\nSET(LIBZIP_VERSION_MICRO ${PACKAGE_VERSION_MICRO})\nSET(PACKAGE_STRING \"${PACKAGE_NAME} ${PACKAGE_VERSION}\")\n```\n\n----------------------------------------\n\nTITLE: Binding Overloaded Methods using py::overload_cast in pybind11 (C++14)\nDESCRIPTION: This snippet illustrates an alternative syntax using `py::overload_cast` (available in C++14) to bind overloaded C++ methods to Python. This syntax only requires the parameter types to be specified, and the return type and class are deduced.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/classes.rst#_snippet_24\n\nLANGUAGE: cpp\nCODE:\n```\npy::class_<Pet>(m, \"Pet\")\n    .def(\"set\", py::overload_cast<int>(&Pet::set), \"Set the pet's age\")\n    .def(\"set\", py::overload_cast<const std::string &>(&Pet::set), \"Set the pet's name\");\n```\n\n----------------------------------------\n\nTITLE: Cap'n Proto Doc Comment Example\nDESCRIPTION: This code shows how to include documentation comments in a Cap'n Proto schema. Doc comments for aggregate definitions should appear on the line after the opening brace. Comments describing fields should appear after the field declaration, either on the same line or a subsequent line.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/doc/language.md#_snippet_2\n\nLANGUAGE: capnp\nCODE:\n```\nstruct Date {\n  # A standard Gregorian calendar date.\n\n  year @0 :Int16;\n  # The year.  Must include the century.\n  # Negative value indicates BC.\n\n  month @1 :UInt8;   # Month number, 1-12.\n  day @2 :UInt8;     # Day number, 1-30.\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling assembly code for x64 architecture (Visual Studio Command Prompt)\nDESCRIPTION: This batch script compiles assembly code for the x64 architecture. It should be executed from the Visual Studio Command Prompt after uncompressing the zlib source code including the contrib/* files. It produces object files that are then linked into the final DLL.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/third-party/zlib/contrib/vstudio/readme.txt#_snippet_0\n\nLANGUAGE: batch\nCODE:\n```\nbld_ml64.bat\n```\n\n----------------------------------------\n\nTITLE: Specifying wheel Requirements\nDESCRIPTION: This code snippet defines the 'wheel' package and its specific version along with its SHA256 hashes. Using hashes ensures the correct package is installed and no tampering occurred. This prevents potential security vulnerabilities and ensures compatibility with the project.\nSOURCE: https://github.com/openai/retro/blob/master/docker/linux/build_scripts/requirements.txt#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nwheel==0.31.1 \\\n    --hash=sha256:80044e51ec5bbf6c894ba0bc48d26a8c20a9ba629f4ca19ea26ecfcf87685f5f \\\n    --hash=sha256:0a2e54558a0628f2145d2fc822137e322412115173e8a2ddbe1c9024338ae83c\n```\n\n----------------------------------------\n\nTITLE: Define for Correct VRAM Reads in Snes9x (C/C++)\nDESCRIPTION: This code snippet demonstrates how to enable correct VRAM (Video RAM) read logic in Snes9x using the `CORRECT_VRAM_READS` preprocessor definition.  This setting would affect how the emulator handles reads from VRAM, potentially improving accuracy in certain games. Enabling this may impact performance.\nSOURCE: https://github.com/openai/retro/blob/master/cores/snes/docs/changes.txt#_snippet_1\n\nLANGUAGE: C/C++\nCODE:\n```\n#define CORRECT_VRAM_READS\n```\n\n----------------------------------------\n\nTITLE: EXPECT_CALL with Return Actions\nDESCRIPTION: This snippet provides an example of using `EXPECT_CALL` with `.Times()`, `.WillOnce()`, and `.WillRepeatedly()` to specify the number of times a method should be called and the return values for each call. It uses the `Return` action from the `testing` namespace.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googlemock/docs/ForDummies.md#_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\nusing ::testing::Return;...\nEXPECT_CALL(turtle, GetX())\n    .Times(5)\n    .WillOnce(Return(100))\n    .WillOnce(Return(150))\n    .WillRepeatedly(Return(200));\n```\n\n----------------------------------------\n\nTITLE: Deployment using windeployqt (Windows)\nDESCRIPTION: This snippet uses `windeployqt` to deploy the Qt application on Windows.  It locates the `windeployqt` executable and then runs it on the compiled executable using `execute_process` during the install phase. The `--compiler-runtime` flag is used to include necessary compiler runtime libraries.\nSOURCE: https://github.com/openai/retro/blob/master/src/ui/CMakeLists.txt#_snippet_17\n\nLANGUAGE: CMake\nCODE:\n```\nfind_program(DEPLOY windeployqt)\n    install(CODE \"\n        execute_process(COMMAND \\\"${DEPLOY}\\\" --compiler-runtime \\\"\\$ENV{DESTDIR}${CMAKE_INSTALL_PREFIX}/Gym Retro Integration.exe\\\")\n    \" COMPONENT gym-retro-integration)\n```\n\n----------------------------------------\n\nTITLE: Installing Targets (CMake)\nDESCRIPTION: This code block installs the library targets (shared and static), runtime binaries, and archive files to their respective destination directories. The `PNG_EXPORT_RULE` is also applied if defined, creating a CMake export file for importing the library targets.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/third-party/libpng/CMakeLists.txt#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT SKIP_INSTALL_LIBRARIES AND NOT SKIP_INSTALL_ALL )\n  install(TARGETS ${PNG_LIB_TARGETS}\n      ${PNG_EXPORT_RULE}\n      RUNTIME DESTINATION bin\n      LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}\n      ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}\n      FRAMEWORK DESTINATION ${CMAKE_INSTALL_LIBDIR})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version\nDESCRIPTION: This snippet sets the minimum required CMake version for the project to 2.8.12 and addresses a policy warning related to minimum CMake version requirements. If the CMake version is less than 3.4.0, it sets the project language to C; otherwise, it sets it to CXX.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 2.8.12)\n\nif (POLICY CMP0048)\n  # cmake warns if loaded from a min-3.0-required parent dir, so silence the warning:\n  cmake_policy(SET CMP0048 NEW)\nendif()\n\n# CMake versions < 3.4.0 do not support try_compile/pthread checks without C as active language.\nif(CMAKE_VERSION VERSION_LESS 3.4.0)\n  project(pybind11)\nelse()\n  project(pybind11 CXX)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Binding std::vector with module_local Attribute\nDESCRIPTION: This code shows how to use the `py::module_local` attribute with `py::bind_vector` to control whether the binding is module-local or global. Setting `py::module_local(false)` forces a global binding, but could cause conflicts with other modules binding the same type.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/cast/stl.rst#_snippet_11\n\nLANGUAGE: cpp\nCODE:\n```\npy::bind_vector<std::vector<int>>(m, \"VectorInt\", py::module_local(false));\n```\n\n----------------------------------------\n\nTITLE: Calculating State2 Variable in LZMA Decoder (C++)\nDESCRIPTION: This code calculates the `state2` variable based on the current state and the position state. It combines the state and position state using bitwise operations to create an index used to select variables from the `IsMatch` and `IsRep0Long` arrays. The position state is masked based on the number of position bits `pb`.\nSOURCE: https://github.com/openai/retro/blob/master/cores/pce/deps/lzma-16.04/DOC/lzma-specification.txt#_snippet_27\n\nLANGUAGE: C++\nCODE:\n```\nunsigned posState = OutWindow.TotalPos & ((1 << pb) - 1);\nunsigned state2 = (state << kNumPosBitsMax) + posState;\n```\n\n----------------------------------------\n\nTITLE: Setting Source File Properties\nDESCRIPTION: This snippet iterates through the lists `CORES` and `COREINFO` and sets the `MACOSX_PACKAGE_LOCATION` property for each file to `PlugIns/cores`. This specifies where the core files should be placed in the macOS application bundle. The `GENERATED` property is also set to `ON`.\nSOURCE: https://github.com/openai/retro/blob/master/src/ui/CMakeLists.txt#_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nforeach(CORE IN LISTS CORES COREINFO)\n    set_source_files_properties(\"${CORE}\" PROPERTIES MACOSX_PACKAGE_LOCATION PlugIns/cores GENERATED ON)\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Setting Target Properties for Include Handling\nDESCRIPTION: This snippet sets the 'NO_SYSTEM_FROM_IMPORTED' property for the target 'test_cmake_build'. This prevents includes from imported targets (like Python headers in pybind11::module) from being treated as SYSTEM includes, which can help resolve header conflicts.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/tests/test_cmake_build/installed_target/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# Do not treat includes from IMPORTED target as SYSTEM (Python headers in pybind11::module).\n# This may be needed to resolve header conflicts, e.g. between Python release and debug headers.\nset_target_properties(test_cmake_build PROPERTIES NO_SYSTEM_FROM_IMPORTED ON)\n```\n\n----------------------------------------\n\nTITLE: Fixed mapper 185 emulation\nDESCRIPTION: This snippet corrects mapper 185 emulation to ensure proper functionality with the Japanese version of \"Spy vs Spy.\" It aims to address issues and ensure compatibility with specific ROMs that use this mapper. It also mentions an attempt to support a \"GOOD\" dump of Banana, although one may not exist.\nSOURCE: https://github.com/openai/retro/blob/master/cores/nes/changelog.txt#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Using Template Functions with ASSERT_PRED (C++)\nDESCRIPTION: This code demonstrates how to use a template function with `ASSERT_PRED*` assertions in Google Test. By explicitly specifying the template parameter, the compiler can correctly deduce the function signature. The example also provides a workaround for using templates with multiple parameters due to preprocessor limitations.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/FAQ.md#_snippet_9\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <typename T>\nbool IsNegative(T x) {\n  return x < 0;\n}\n\nASSERT_PRED1(IsNegative*<int>*, -5);\n```\n\n----------------------------------------\n\nTITLE: Applying GPL: Copyright Disclaimer Template\nDESCRIPTION: This code snippet shows a sample copyright disclaimer that an employer or school can sign to relinquish copyright interest in a program.  It specifies the organization, the program's name, and the author. It's important to adapt the names and details accordingly.\nSOURCE: https://github.com/openai/retro/blob/master/cores/snes/docs/gpl-2.0.txt#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nYoyodyne, Inc., hereby disclaims all copyright interest in the program\n`Gnomovision' (which makes passes at compilers) written by James Hacker.\n\n<signature of Ty Coon>, 1 April 1989\nTy Coon, President of Vice\n```\n\n----------------------------------------\n\nTITLE: Normalize Range Decoder C++\nDESCRIPTION: The Normalize function maintains the 'Range' value within a specific range to ensure proper bit decoding. If the 'Range' is smaller than kTopValue ((UInt32)1 << 24), it shifts the 'Range' left by 8 bits and reads a byte from the input stream to update the 'Code'.\nSOURCE: https://github.com/openai/retro/blob/master/cores/pce/deps/lzma-16.04/DOC/lzma-specification.txt#_snippet_7\n\nLANGUAGE: C++\nCODE:\n```\n#define kTopValue ((UInt32)1 << 24)\n\nvoid CRangeDecoder::Normalize()\n{\n  if (Range < kTopValue)\n  {\n    Range <<= 8;\n    Code = (Code << 8) | InStream->ReadByte();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Calculator Interface: add(), sub(), mult(), div()\nDESCRIPTION: Defines a simple four-function calculator interface with `add()`, `sub()`, `mult()`, and `div()` calls. Each function takes two integers as input and returns a result. Used as a benchmark to compare RPC performance.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/doc/_posts/2013-12-13-promise-pipelining-capnproto-vs-ice.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n`add()`, `sub()`, `mult()`, and `div()`\n```\n\n----------------------------------------\n\nTITLE: Appending in Python after binding\nDESCRIPTION: This Python code demonstrates that changes to the `contents` attribute of a `MyClass` instance, which is a `std::vector<int>`, do not persist when using standard pybind11 conversions. The `append` operation appears to be ignored because of the automatic copy semantics.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/cast/stl.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nm = MyClass()\nm.contents = [5, 6]\nprint(m.contents)\nm.contents.append(7)\nprint(m.contents)\n```\n\n----------------------------------------\n\nTITLE: Adding Compiler Options for MSVC\nDESCRIPTION: Adds compiler options specifically for MSVC. Currently, it disables a specific warning (4503) related to truncated decorated names due to symbol length limits.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/c++/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nif(MSVC)\n  # TODO(cleanup): Enable higher warning level in MSVC, but make sure to test\n  #   build with that warning level and clean out false positives.\n\n  add_compile_options(/wo4503)\n  # Only warn once on truncated decorated names. The maximum symbol length MSVC\n  # supports is 4k characters, which the parser framework regularly blows. The\n  # compiler likes to print out the entire type that went over the limit along\n  # with this warning, which gets unbearably spammy. That said, we don't want to\n  # just ignore it, so I'm letting it trigger once until we find some places to\n  # inject ParserRefs.\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding KJ Library\nDESCRIPTION: Adds the KJ library, sets an alias for it, and specifies that it uses C++11 constexpr features. This requires a C++11 compatible compiler. Creates a static library called `kj` from the source files specified earlier, then aliases `kj` to `CapnProto::kj` for CMake's dependency management.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/c++/src/kj/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(kj ${kj_sources})\nadd_library(CapnProto::kj ALIAS kj)\ntarget_compile_features(kj PUBLIC cxx_constexpr)\n```\n\n----------------------------------------\n\nTITLE: Add executable target\nDESCRIPTION: Adds an executable target named `${BINARY_NAME}.elf`, which includes the source files listed.  `PLATFORM_SRC` and `GUI_SRC` are variables holding lists of source files. `main.c` is the entry point of the program. `icons.o` and `backdrop.o` are generated object files.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/platform/psp2/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(${BINARY_NAME}.elf ${PLATFORM_SRC} ${GUI_SRC} main.c\n               ${CMAKE_CURRENT_BINARY_DIR}/icons.o\n               ${CMAKE_CURRENT_BINARY_DIR}/backdrop.o)\n```\n\n----------------------------------------\n\nTITLE: Defining a parameterized action using the ACTION_P macro\nDESCRIPTION: This code demonstrates defining a parameterized action using the `ACTION_P` macro. The macro allows passing parameters to the action, which can then be used within the action's body.  This example adds the parameter `n` to the first argument `arg0`.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googlemock/docs/DesignDoc.md#_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\nACTION_P(Add, n) { return arg0 + n; }\n\n// Returns argument #0 + 5.\n... WillOnce(Add(5));\n```\n\n----------------------------------------\n\nTITLE: Windows Version Configuration\nDESCRIPTION: This snippet is also for Windows (`if(WIN32)`). It replaces the dots in `PROJECT_VERSION` with commas and stores the result in `WIN32_VERSION`. It then configures a `win32.rc.in` file to generate `win32.rc` in the binary directory and adds `win32.rc` to the list of source files.\nSOURCE: https://github.com/openai/retro/blob/master/src/ui/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nstring(REPLACE \".\" \",\" WIN32_VERSION \"${PROJECT_VERSION}\")\n    configure_file(win32.rc.in \"${CMAKE_CURRENT_BINARY_DIR}/win32.rc\")\n    list(APPEND SRC \"${CMAKE_CURRENT_BINARY_DIR}/win32.rc\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: PackInfo Structure\nDESCRIPTION: Defines the PackInfo structure, which contains information about packed data within the archive.  It includes the starting position of the packed data (`PackPos`), the number of packed streams (`NumPackStreams`), sizes of the packed streams (`PackSizes`), and their corresponding CRCs (`PackStreamDigests`).\nSOURCE: https://github.com/openai/retro/blob/master/cores/pce/deps/lzma-16.04/DOC/7zFormat.txt#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nBYTE NID::kPackInfo  (0x06)\nUINT64 PackPos\nUINT64 NumPackStreams\n\n[]\nBYTE NID::kSize    (0x09)\nUINT64 PackSizes[NumPackStreams]\n[]\n\n[]\nBYTE NID::kCRC      (0x0A)\nPackStreamDigests[NumPackStreams]\n[]\n\nBYTE NID::kEnd\n```\n\n----------------------------------------\n\nTITLE: Importing and using the module in Python\nDESCRIPTION: This Python code demonstrates how to import and use the compiled pybind11 module. The `import example` statement imports the module, and `example.add(1, 2)` calls the C++ `add` function from Python.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/basics.rst#_snippet_6\n\nLANGUAGE: pycon\nCODE:\n```\n$ python\nPython 2.7.10 (default, Aug 22 2015, 20:33:39)\n[GCC 4.2.1 Compatible Apple LLVM 7.0.0 (clang-700.0.59.1)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import example\n>>> example.add(1, 2)\n3L\n>>>\n```\n\n----------------------------------------\n\nTITLE: Pump Code Example: Generating Function Arguments\nDESCRIPTION: This Pump code demonstrates how to generate a list of function arguments using the `$for` construct.  It defines a range for the meta-variable `i` and then uses `$for` to generate a comma-separated list of `a$i` arguments within the `Func()` call. The separator between iterations is specified as `+`.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/PumpManual.md#_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\n$range i 1..n\nFunc($for i + [[a$i]]);\n$$ The text between i and [[ is the separator between iterations.\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Command for lib.c (CMake)\nDESCRIPTION: This snippet creates a custom command to generate `lib.c` using a Python script `_builder.py`. The command also touches the file to ensure it's updated and depends on Python headers and the binary name.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/platform/python/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/lib.c\n                  COMMAND BINDIR=${CMAKE_CURRENT_BINARY_DIR}/.. CPPFLAGS=\"${INCLUDE_FLAGS}\" ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/_builder.py\n                  COMMAND ${CMAKE_COMMAND} -E touch ${CMAKE_CURRENT_BINARY_DIR}/lib.c\n                  DEPENDS ${PYTHON_HEADERS}\n                  DEPENDS ${BINARY_NAME}\n                  DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/_builder.py)\n```\n\n----------------------------------------\n\nTITLE: Registering Classes with Pybind11 (C++)\nDESCRIPTION: Registers C++ classes with pybind11, making them accessible from Python. It demonstrates how to create bindings for base classes and derived classes without needing a dedicated trampoline class if no new virtual methods are declared or implemented.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/classes.rst#_snippet_12\n\nLANGUAGE: cpp\nCODE:\n```\npy::class_<Animal, PyAnimal<>> animal(m, \"Animal\");\npy::class_<Dog, PyDog<>> dog(m, \"Dog\");\npy::class_<Husky, PyDog<Husky>> husky(m, \"Husky\");\n// ... add animal, dog, husky definitions\n```\n\n----------------------------------------\n\nTITLE: Importing and Using a Local Python Module\nDESCRIPTION: This C++ code imports a local Python module named `calc` and calls its `add` function. It casts the result back to a C++ integer and asserts that the result is correct.  This demonstrates calling user defined modules and using their results in C++.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/embedding.rst#_snippet_7\n\nLANGUAGE: cpp\nCODE:\n```\npy::module calc = py::module::import(\"calc\");\npy::object result = calc.attr(\"add\")(1, 2);\nint n = result.cast<int>();\nassert(n == 3);\n```\n\n----------------------------------------\n\nTITLE: Testing Private Static Methods by using Free Functions (C++)\nDESCRIPTION: Instead of defining a private static method within a class, define it as a free function within an internal namespace. This keeps the implementation detail out of the header file and allows for easier testing. It requires declaring the function in the test file within the same namespace.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/FAQ.md#_snippet_19\n\nLANGUAGE: cpp\nCODE:\n```\n// foo.h\nclass Foo {\n  ...\n private:\n  static bool Func(int n);\n};\n\n// foo.cc\nbool Foo::Func(int n) { ... }\n\n// foo_test.cc\nEXPECT_TRUE(Foo::Func(12345));\n```\n\n----------------------------------------\n\nTITLE: Making HTTP Requests using KJ HTTP Library in C++\nDESCRIPTION: This C++ code demonstrates making an HTTP request using the KJ HTTP library. It creates an HTTP client, sends a GET request, and then logs the response body. It verifies the status code is 200.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/doc/slides-2017.05.18/index.md#_snippet_10\n\nLANGUAGE: c++\nCODE:\n```\nauto io = kj::setupAsyncIo();\nkj::HttpHeaderTable headerTable;\nauto client = kj::newHttpClient(\n    *headerTable, io.provider->getNetwork());\n\nkj::HttpHeaders headers(*headerTable);\nauto response = client->request(\n    kj::HttpMethod::GET, \"http://capnproto.org\", headers)\n    .response.wait(io.waitScope);\n\nKJ_ASSERT(response.statusCode == 200);\nKJ_LOG(INFO, response.body->readAllText().wait(io.waitScope));\n```\n\n----------------------------------------\n\nTITLE: Build Library and Install with CMake Export\nDESCRIPTION: This snippet creates a library target named 'test_embed_lib' from the 'embed.cpp' source file and links it against the 'pybind11::embed' library. It also defines installation rules to install the library and create a CMake export file.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/tests/test_cmake_build/subdirectory_embed/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(test_embed_lib ../embed.cpp)\ntarget_link_libraries(test_embed_lib PRIVATE pybind11::embed)\n\ninstall(TARGETS test_embed_lib\n        EXPORT  test_export\n        ARCHIVE DESTINATION bin\n        LIBRARY DESTINATION lib\n        RUNTIME DESTINATION lib)\ninstall(EXPORT      test_export\n        DESTINATION lib/cmake/test_export/test_export-Targets.cmake)\n```\n\n----------------------------------------\n\nTITLE: Non-Converting Argument Example\nDESCRIPTION: This C++ code demonstrates the use of `py::arg(\"f\").noconvert()` to prevent implicit type conversions for a function argument. If the function `floats_only` is called with an argument that cannot be directly converted to a float, a `TypeError` will be raised.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/functions.rst#_snippet_15\n\nLANGUAGE: cpp\nCODE:\n```\nm.def(\"floats_only\", [](double f) { return 0.5 * f; }, py::arg(\"f\").noconvert());\nm.def(\"floats_preferred\", [](double f) { return 0.5 * f; }, py::arg(\"f\"));\n```\n\n----------------------------------------\n\nTITLE: Compiling assembly code for x86 architecture (Visual Studio Command Prompt)\nDESCRIPTION: This batch script compiles assembly code for the x86 architecture. It must be executed from the Visual Studio Command Prompt after uncompressing the zlib source code, including the contrib/* files. It generates object files that will be included in the resulting DLL.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/third-party/zlib/contrib/vstudio/readme.txt#_snippet_1\n\nLANGUAGE: batch\nCODE:\n```\nbld_ml32.bat\n```\n\n----------------------------------------\n\nTITLE: Call pybind11 Build Test with Install\nDESCRIPTION: Calls the `pybind11_add_build_test` function with the `INSTALL` argument set for installed_function, installed_target, and conditionally, installed_embed (unless PYTHON_MODULE_EXTENSION matches \"pypy\"). These are analogous to the previous calls, but they test the installation process.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/tests/test_cmake_build/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(PYBIND11_INSTALL)\n  pybind11_add_build_test(installed_function INSTALL)\n  pybind11_add_build_test(installed_target INSTALL)\n  if(NOT ${PYTHON_MODULE_EXTENSION} MATCHES \"pypy\")\n    pybind11_add_build_test(installed_embed INSTALL)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Pickleable Class Definition (C++)\nDESCRIPTION: This snippet defines a `Pickleable` class with a constructor, getter and setter methods for `value` and `extra`. This class is used to demonstrate how to enable pickling support for C++ classes using pybind11.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/classes.rst#_snippet_26\n\nLANGUAGE: cpp\nCODE:\n```\nclass Pickleable {\npublic:\n    Pickleable(const std::string &value) : m_value(value) { }\n    const std::string &value() const { return m_value; }\n\n    void setExtra(int extra) { m_extra = extra; }\n    int extra() const { return m_extra; }\nprivate:\n    std::string m_value;\n    int m_extra = 0;\n};\n```\n\n----------------------------------------\n\nTITLE: Multiple Inheritance with pybind11 (C++)\nDESCRIPTION: This snippet shows how to create bindings for a class that inherits from multiple base types using pybind11. The base types are specified as template arguments to the `py::class_` declaration. This enables Python code to interact with C++ classes that use multiple inheritance.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/classes.rst#_snippet_29\n\nLANGUAGE: cpp\nCODE:\n```\npy::class_<MyType, BaseType1, BaseType2, BaseType3>(m, \"MyType\")\n   ...\n```\n\n----------------------------------------\n\nTITLE: Function Requiring Dense NumPy Array with C-Style Ordering in C++\nDESCRIPTION: This code shows how to define a function that requires its argument to be a dense NumPy array with C-style (row-major) ordering. The `py::array::c_style` argument ensures that the array is stored in row-major order. The `py::array::forcecast` argument ensures that non-conforming arguments are converted instead of trying the next overload.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/pycpp/numpy.rst#_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\nvoid f(py::array_t<double, py::array::c_style | py::array::forcecast> array);\n```\n\n----------------------------------------\n\nTITLE: Memory Allocation Functions for LZMA (C)\nDESCRIPTION: These functions demonstrate a custom memory allocator required for the LZMA decoder. The `SzAlloc` function allocates memory using `malloc`, and the `SzFree` function frees memory using `free`. These functions are then assigned to an `ISzAlloc` structure which is passed to the LZMA decoding functions.\nSOURCE: https://github.com/openai/retro/blob/master/cores/genesis/core/cd_hw/libchdr/deps/lzma/DOC/lzma.txt#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid *SzAlloc(void *p, size_t size) { p = p; return malloc(size); }\nvoid SzFree(void *p, void *address) { p = p; free(address); }\nISzAlloc alloc = { SzAlloc, SzFree };\n```\n\n----------------------------------------\n\nTITLE: Defining Generic Methods in Cap'n Proto\nDESCRIPTION: This code showcases the definition of generic methods within interfaces in Cap'n Proto. It defines an `Assignable(T)` interface with non-generic methods and an `AssignableFactory` interface with a generic `newAssignable()` method. The return type of the method depends on the input type.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/doc/language.md#_snippet_13\n\nLANGUAGE: capnp\nCODE:\n```\ninterface Assignable(T) {\n  # A generic interface, with non-generic methods.\n  get @0 () -> (value :T);\n  set @1 (value :T) -> ();\n}\n\ninterface AssignableFactory {\n  newAssignable @0 [T] (initialValue :T)\n      -> (assignable :Assignable(T));\n  # A generic method.\n}\n```\n\n----------------------------------------\n\nTITLE: GZIP Flag Field Bit Definitions\nDESCRIPTION: This snippet describes the bit assignments within the FLG (Flags) byte of the GZIP header, including FTEXT, FHCRC, FEXTRA, FNAME, and FCOMMENT.  These flags indicate the presence and type of optional data within the GZIP file.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/third-party/zlib/doc/rfc1952.txt#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n               bit 0   FTEXT\n               bit 1   FHCRC\n               bit 2   FEXTRA\n               bit 3   FNAME\n               bit 4   FCOMMENT\n               bit 5   reserved\n               bit 6   reserved\n               bit 7   reserved\n```\n\n----------------------------------------\n\nTITLE: 7z Signature Header Definition\nDESCRIPTION: Defines the signature header for a 7z archive, including the signature bytes, archive version (major and minor), and the starting header CRC.  The signature identifies the file as a valid 7z archive. It also includes information to find and validate the first header.\nSOURCE: https://github.com/openai/retro/blob/master/cores/pce/deps/lzma-16.04/DOC/7zFormat.txt#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nBYTE kSignature[6] = {'7', 'z', 0xBC, 0xAF, 0x27, 0x1C};\n\nArchiveVersion\n{\n  BYTE Major;   // now = 0\n  BYTE Minor;   // now = 2\n};\n\nUINT32 StartHeaderCRC;\n\nStartHeader\n{\n  REAL_UINT64 NextHeaderOffset\n  REAL_UINT64 NextHeaderSize\n  UINT32 NextHeaderCRC\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Test Names with gtest_list_tests\nDESCRIPTION: This snippet demonstrates how to list available tests in a Google Test program using the `--gtest_list_tests` flag. This flag overrides all other flags and prints test names in a specific format without actually running the tests. It can be useful for filtering tests.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/AdvancedGuide.md#_snippet_46\n\nLANGUAGE: text\nCODE:\n```\nTestCase1.\n  TestName1\n  TestName2\nTestCase2.\n  TestName\n```\n\n----------------------------------------\n\nTITLE: Compiling Google Mock Library (Unix)\nDESCRIPTION: This code snippet illustrates how to compile the Google Mock library on a Linux-like system using g++. It compiles gtest-all.cc and gmock-all.cc, then archives them into a static library.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googlemock/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ng++ -isystem ${GTEST_DIR}/include -I${GTEST_DIR} \\\n    -isystem ${GMOCK_DIR}/include -I${GMOCK_DIR} \\\n    -pthread -c ${GTEST_DIR}/src/gtest-all.cc\ng++ -isystem ${GTEST_DIR}/include -I${GTEST_DIR} \\\n    -isystem ${GMOCK_DIR}/include -I${GMOCK_DIR} \\\n    -pthread -c ${GMOCK_DIR}/src/gmock-all.cc\nar -rv libgmock.a gtest-all.o gmock-all.o\n```\n\n----------------------------------------\n\nTITLE: Demonstrating fatal failures leading to segfault in Google Test C++\nDESCRIPTION: This code demonstrates a common pitfall in Google Test where a fatal assertion failure in a subroutine doesn't abort the entire test, potentially leading to a segfault after the subroutine returns.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/AdvancedGuide.md#_snippet_14\n\nLANGUAGE: C++\nCODE:\n```\nvoid Subroutine() {\n  // Generates a fatal failure and aborts the current function.\n  ASSERT_EQ(1, 2);\n  // The following won't be executed.\n  ...\n}\n\nTEST(FooTest, Bar) {\n  Subroutine();\n  // The intended behavior is for the fatal failure\n  // in Subroutine() to abort the entire test.\n  // The actual behavior: the function goes on after Subroutine() returns.\n  int* p = NULL;\n  *p = 3; // Segfault!\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Linker Flags for Executables, Modules, and Shared Libraries\nDESCRIPTION: This snippet configures the linker flags for executable, module, and shared library targets using the `link_flags` variable. These flags specify the library paths, libraries to link against, and other linking options such as garbage collection.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/platform/3ds/CMakeToolchain.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_EXE_LINKER_FLAGS ${link_flags} CACHE INTERNAL \"exe link flags\")\nset(CMAKE_MODULE_LINKER_FLAGS ${link_flags} CACHE INTERNAL \"module link flags\")\nset(CMAKE_SHARED_LINKER_FLAGS ${link_flags} CACHE INTERNAL \"shared link flags\")\n```\n\n----------------------------------------\n\nTITLE: Manual Default Argument Preview\nDESCRIPTION: This C++ code shows how to manually specify the string representation of a default argument for a function using `py::arg_v`. This is useful when the default `__repr__` method of the argument is not informative. It binds 'myFunction' with a default argument and custom preview text.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/functions.rst#_snippet_13\n\nLANGUAGE: cpp\nCODE:\n```\npy::class_<MyClass>(\"MyClass\")\n    .def(\"myFunction\", py::arg_v(\"arg\", SomeType(123), \"SomeType(123)\"));\n```\n\n----------------------------------------\n\nTITLE: Applying Return Value Policy to a Property Using `cpp_function`\nDESCRIPTION: This example demonstrates an alternative way to apply return value policies to property getters and setters using `py::cpp_function`. This allows for targeted application of policies; here, `return_value_policy::copy` is explicitly applied only to the getter function (`MyClass::getData`).\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/functions.rst#_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nclass_<MyClass>(m, \"MyClass\")\n    .def_property(\"data\"\n        py::cpp_function(&MyClass::getData, py::return_value_policy::copy),\n        py::cpp_function(&MyClass::setData)\n    );\n```\n\n----------------------------------------\n\nTITLE: Finding and Configuring ZLIB Dependency in CMake\nDESCRIPTION: This snippet uses `FIND_PACKAGE` to locate the ZLIB library. It then includes the ZLIB include directory and performs a version check, ensuring that ZLIB version 1.1.2 or higher is installed.  An error is raised if the ZLIB version is too old.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/libzip/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nFIND_PACKAGE(ZLIB REQUIRED)\nINCLUDE_DIRECTORIES(${ZLIB_INCLUDE_DIR})\nSET(CMAKE_REQUIRED_INCLUDES ${ZLIB_INCLUDE_DIR})\nIF(ZLIB_VERSION_STRING VERSION_LESS \"1.1.2\")\n  MESSAGE(FATAL_ERROR \"-- ZLIB version too old, please install at least v1.1.2\")\nENDIF(ZLIB_VERSION_STRING VERSION_LESS \"1.1.2\")\n```\n\n----------------------------------------\n\nTITLE: Constructor Binding Error Handling in pybind11 (C++)\nDESCRIPTION: This code demonstrates how pybind11 handles constructor bindings with argument type mismatches. Binding a constructor with a non-const lvalue reference to an rvalue results in a compile-time error. The example shows a correct binding with an exact match and a compile-time error due to a mismatch.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/upgrade.rst#_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\nstruct Example {\n    Example(int &);\n};\n\npy::class_<Example>(m, \"Example\")\n    .def(py::init<int &>()); // OK, exact match\n    // .def(py::init<int>()); // compile-time error, mismatch\n```\n\n----------------------------------------\n\nTITLE: Module Destructor with Weak Reference\nDESCRIPTION: This example demonstrates how to emulate a module destructor using weak references with a cleanup callback. It creates a weak reference to a class and associates a callback function that is invoked when the object is collected.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/misc.rst#_snippet_8\n\nLANGUAGE: cpp\nCODE:\n```\n// Register a callback function that is invoked when the BaseClass object is colelcted\npy::cpp_function cleanup_callback(\n    [](py::handle weakref) {\n        // perform cleanup here -- this function is called with the GIL held\n\n        weakref.dec_ref(); // release weak reference\n    }\n);\n\n// Create a weak reference with a cleanup callback and initially leak it\n(void) py::weakref(m.attr(\"BaseClass\"), cleanup_callback).release();\n```\n\n----------------------------------------\n\nTITLE: Defining Generic Types in Cap'n Proto\nDESCRIPTION: This code demonstrates how to define generic types (structs) in Cap'n Proto.  It showcases a `Map` struct parameterized by `Key` and `Value` and a `People` struct using `Map` with `Text` and `Person` as parameters, mapping names to Person instances.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/doc/language.md#_snippet_11\n\nLANGUAGE: capnp\nCODE:\n```\nstruct Map(Key, Value) {\n  entries @0 :List(Entry);\n  struct Entry {\n    key @0 :Key;\n    value @1 :Value;\n  }\n}\n\nstruct People {\n  byName @0 :Map(Text, Person);\n  # Maps names to Person instances.\n}\n```\n\n----------------------------------------\n\nTITLE: Exposing Fields with def_readwrite\nDESCRIPTION: This code snippet shows how to expose the `name` field of the `Pet` class directly to Python using `def_readwrite`. This allows Python code to directly access and modify the `name` field as if it were a public member. It uses the pybind11 library to define the bindings.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/classes.rst#_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\npy::class_<Pet>(m, \"Pet\")\n    .def(py::init<const std::string &>())\n    .def_readwrite(\"name\", &Pet::name)\n    // ... remainder ...\n```\n\n----------------------------------------\n\nTITLE: Operator Overloading - Alternative Implementation (C++)\nDESCRIPTION: This snippet demonstrates an alternative way to define operator overloading using `py::is_operator()`. It explicitly defines the `__mul__` method as a lambda function and uses `py::is_operator()` to inform pybind11 that it's an operator, returning `NotImplemented` for incompatible arguments.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/classes.rst#_snippet_25\n\nLANGUAGE: cpp\nCODE:\n```\n.def(\"__mul__\", [](const Vector2 &a, float b) {\n    return a * b;\n}, py::is_operator())\n```\n\n----------------------------------------\n\nTITLE: Deprecating PYBIND11_PLUGIN Macro C++\nDESCRIPTION: This snippet shows the deprecation of the PYBIND11_PLUGIN macro and its replacement with PYBIND11_MODULE. The old macro emits a compile-time deprecation warning. The new approach provides an improved way to create module entry points.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/upgrade.rst#_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n// old\nPYBIND11_PLUGIN(example) {\n    py::module m(\"example\", \"documentation string\");\n\n    m.def(\"add\", [](int a, int b) { return a + b; });\n\n    return m.ptr();\n}\n\n// new\nPYBIND11_MODULE(example, m) {\n    m.doc() = \"documentation string\"; // optional\n\n    m.def(\"add\", [](int a, int b) { return a + b; });\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Target for Updating Zip Errors (CMake)\nDESCRIPTION: This CMake code adds a custom target named `update_zip_errors`. The target executes a shell script `make_zip_errors.sh` using the zip header file and the `zip_errors.mdoc` file. It depends on those two files.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/libzip/man/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nADD_CUSTOM_TARGET(update_zip_errors\n  COMMAND sh ${CMAKE_CURRENT_SOURCE_DIR}/make_zip_errors.sh ${CMAKE_SOURCE_DIR}/lib/zip.h ${CMAKE_CURRENT_SOURCE_DIR}/zip_errors.mdoc\n  DEPENDS ${CMAKE_SOURCE_DIR}/lib/zip.h ${CMAKE_CURRENT_SOURCE_DIR}/zip_errors.mdoc\n)\n```\n\n----------------------------------------\n\nTITLE: Mixed Keyword and Unpacked Arguments in Python Function Calls from C++\nDESCRIPTION: This code demonstrates how to combine keyword arguments, *args unpacking, and **kwargs unpacking when calling a Python function from C++ using pybind11. It shows a flexible way to pass arguments from C++ to Python.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/pycpp/object.rst#_snippet_13\n\nLANGUAGE: cpp\nCODE:\n```\n// mixed keywords, * and ** unpacking\npy::tuple args = py::make_tuple(1234);\npy::dict kwargs = py::dict(\"to\"_a=some_instance);\nf(*args, \"say\"_a=\"hello\", **kwargs);\n```\n\n----------------------------------------\n\nTITLE: Declare Custom Holder Type with safe conversion flag\nDESCRIPTION: This code shows how to declare a custom smart pointer type and specify that it can be safely initialized from a raw pointer. This is important for scenarios like intrusive reference counting where multiple SmartPtr instances won't lead to ownership issues.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/smart_ptrs.rst#_snippet_9\n\nLANGUAGE: cpp\nCODE:\n```\nPYBIND11_DECLARE_HOLDER_TYPE(T, SmartPtr<T>, true);\n```\n\n----------------------------------------\n\nTITLE: Example of Friend Test C++\nDESCRIPTION: This code shows an example of how to declare a test as a friend of a class `Foo`. The `BarReturnsZeroOnNull` test in the `FooTest` test case will be able to access the private member `Bar()` of the `Foo` class.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/AdvancedGuide.md#_snippet_38\n\nLANGUAGE: cpp\nCODE:\n```\n// foo.h\n#include \"gtest/gtest_prod.h\"\n\n// Defines FRIEND_TEST.\nclass Foo {\n  ...\n private:\n  FRIEND_TEST(FooTest, BarReturnsZeroOnNull);\n  int Bar(void* x);\n};\n\n// foo_test.cc\n...\nTEST(FooTest, BarReturnsZeroOnNull) {\n  Foo foo;\n  EXPECT_EQ(0, foo.Bar(NULL));\n  // Uses Foo's private member Bar().\n}\n```\n\n----------------------------------------\n\nTITLE: EXPECT_CALL with Ge Matcher\nDESCRIPTION: This code snippet illustrates using the `Ge` (greater than or equal) matcher within `EXPECT_CALL` to define a minimum acceptable value for a method argument. This specifies that the `Forward` method of the turtle object is expected to be called with an argument greater than or equal to 100.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googlemock/docs/ForDummies.md#_snippet_7\n\nLANGUAGE: C++\nCODE:\n```\nusing ::testing::Ge;...\nEXPECT_CALL(turtle, Forward(Ge(100)));\n```\n\n----------------------------------------\n\nTITLE: Implementing Tail Call with KJ for RPC in C++\nDESCRIPTION: This C++ code shows how to implement a \"tail call\" using the KJ library within a Cap'n Proto RPC context. The `context.tailCall` method forwards a sub-request, potentially enabling optimizations like 3-Party Handoff.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/doc/slides-2017.05.18/index.md#_snippet_3\n\nLANGUAGE: c++\nCODE:\n```\nkj::Promise<void> myRpc(MyRpcContext context) override {\n  // Begin sub-request.\n  auto subRequest = someCapability.someRpcRequest();\n  subRequest.setSomeParam(someValue);\n\n  // Send as a tail call.\n  return context.tailCall(kj::mv(subRequest));\n}\n```\n\n----------------------------------------\n\nTITLE: Finding SDL2 Library with pkg-config in CMake\nDESCRIPTION: This CMake code uses `FindPkgConfig` to locate SDL2. If found, it sets the include directories and libraries, and also links the library directories. It also defines a variable `SDL_VERSION_DEBIAN` for Debian package dependencies.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/platform/sdl/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (SDL_VERSION EQUAL \"2\")\n\tinclude(FindPkgConfig)\n\tpkg_search_module(SDL2 sdl2)\n\tif (SDL2_FOUND)\n\t\tset(SDL_INCLUDE_DIR ${SDL2_INCLUDE_DIRS})\n\t\tset(SDL_LIBRARY ${SDL2_LIBRARIES})\n\t\tlink_directories(${SDL2_LIBDIR})\n\t\tset(SDL_VERSION_DEBIAN \"2-2.0-0\")\n\tendif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Shared video blitting code enhancements\nDESCRIPTION: This snippet enhances the shared video blitting code (drivers/common/vidblit.c) to allow Scale2x and Scale3x to blit to any target bit depth (8bpp, 16bpp, 24bpp, and 32bpp) instead of just 8bpp. It also allows HQ2x and HQ3x to blit to 16bpp, 24bpp (untested), and 32bpp.\nSOURCE: https://github.com/openai/retro/blob/master/cores/nes/changelog.txt#_snippet_28\n\n\n\n----------------------------------------\n\nTITLE: Initial Pybind11 Bindings (Incorrect)\nDESCRIPTION: This snippet shows an initial, incorrect attempt to bind the `Animal` and `Dog` classes using pybind11. It highlights the issue that `Animal` is not constructible and requires a trampoline to redirect virtual calls to Python.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/classes.rst#_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nPYBIND11_MODULE(example, m) {\n    py::class_<Animal> animal(m, \"Animal\");\n    animal\n        .def(\"go\", &Animal::go);\n\n    py::class_<Dog>(m, \"Dog\", animal)\n        .def(py::init<>());\n\n    m.def(\"call_go\", &call_go);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Multi-Command in Retro\nDESCRIPTION: This snippet illustrates the basic format of a multi-command, which consists of one or more valid non-multi button command strings enclosed in literal braces `{}`. Subcommands separated by commas are executed sequentially, and semicolons introduce a frame delay before continuing subcommand execution.\nSOURCE: https://github.com/openai/retro/blob/master/cores/snes/docs/controls.txt#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n{...}\n```\n\n----------------------------------------\n\nTITLE: Compilation instructions for LZMA encoding in Linux\nDESCRIPTION: These instructions detail how to compile the C++ version of the file-to-file LZMA encoder in a Unix/Linux environment.  It involves navigating to the correct directory and executing a make command. The description also outlines the possibility of using static libraries, and refers to p7zip as alternative.\nSOURCE: https://github.com/openai/retro/blob/master/cores/pce/deps/lzma-16.04/DOC/lzma-sdk.txt#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nCPP/7zip/Bundles/LzmaCon\nmake -f makefile.gcc clean all\nLIB = -lm -static\n```\n\n----------------------------------------\n\nTITLE: Module-Local Class Bindings - Create Pet Function (C++)\nDESCRIPTION: This snippet defines a function `create_pet` in `module2.cpp` that returns a new `Pet` instance. This is an example of how a type defined in one module can be returned from another module due to the default global class binding.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/classes.rst#_snippet_32\n\nLANGUAGE: cpp\nCODE:\n```\n// In the module2.cpp binding code for module2:\nm.def(\"create_pet\", [](std::string name) { return new Pet(name); });\n```\n\n----------------------------------------\n\nTITLE: Using Google Test Assertions with another Framework\nDESCRIPTION: Shows how to integrate Google Test assertions into an existing testing framework. It initializes Google Test and sets the `throw_on_failure` flag to true, which causes Google Test assertions to throw exceptions on failure that can be caught by the host framework.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/AdvancedGuide.md#_snippet_55\n\nLANGUAGE: cpp\nCODE:\n```\n#include \"gtest/gtest.h\"\n\nint main(int argc, char** argv) {\n  ::testing::GTEST_FLAG(throw_on_failure) = true;\n  // Important: Google Test must be initialized.\n  ::testing::InitGoogleTest(&argc, argv);\n\n  ... whatever your existing testing framework requires ...\n}\n```\n\n----------------------------------------\n\nTITLE: Example Multi-Command in Retro\nDESCRIPTION: This snippet provides an example of a complex multi-command that presses (or releases) A on pads 1 and 2, waits one frame, presses A on pad 3, waits 5 frames, and then saves to snapshot 0 (on press only). It showcases the use of commas and semicolons to sequence commands and introduce delays.\nSOURCE: https://github.com/openai/retro/blob/master/cores/snes/docs/controls.txt#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n{Joypad1 A,Joypad2 A;Joypad3 A;;;;;QuickSave000}\n```\n\n----------------------------------------\n\nTITLE: Updating Distance History (Rep Match 2) in LZMA Decoder (C++)\nDESCRIPTION: This code snippet updates the distance history when a 'Rep Match 2' is encountered. The distances `rep2`, `rep1`, and `rep0` are shifted, with `rep2` moving to `rep1`, `rep1` moving to `rep0`, and the original value of `rep0` being stored in `rep2`.\nSOURCE: https://github.com/openai/retro/blob/master/cores/pce/deps/lzma-16.04/DOC/lzma-specification.txt#_snippet_29\n\nLANGUAGE: C++\nCODE:\n```\nUInt32 dist = rep2;\nrep2 = rep1;\nrep1 = rep0;\nrep0 = dist;\n```\n\n----------------------------------------\n\nTITLE: Copyright Disclaimer Sample\nDESCRIPTION: This snippet provides a sample copyright disclaimer that an employer or school can sign to disclaim all copyright interest in a library.  It needs to be customized with the organization's name, the library's name, the author's name, and the signature of an authorized representative.\nSOURCE: https://github.com/openai/retro/blob/master/cores/genesis/core/ntsc/license.txt#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nYoyodyne, Inc., hereby disclaims all copyright interest in the\nlibrary `Frob' (a library for tweaking knobs) written by James Random Hacker.\n\n<signature of Ty Coon>, 1 April 1990\nTy Coon, President of Vice\n```\n\n----------------------------------------\n\nTITLE: Calling Unbound Python Methods from C++\nDESCRIPTION: This code shows how to call an unbound method of a Python class (Decimal's exp method) from C++ using pybind11. This requires explicitly passing the 'self' argument (the instance of the class) to the method.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/pycpp/object.rst#_snippet_8\n\nLANGUAGE: cpp\nCODE:\n```\npy::object decimal_exp = Decimal.attr(\"exp\");\n\n// Compute the e^n for n=0..4\nfor (int n = 0; n < 5; n++) {\n    py::print(decimal_exp(Decimal(n));\n}\n```\n\n----------------------------------------\n\nTITLE: Default Argument Example\nDESCRIPTION: This C++ code demonstrates how to define a function with a default argument using pybind11. The `py::arg(\"arg\") = SomeType(123)` syntax specifies that the argument `arg` has a default value of `SomeType(123)`. Pybind11 will create a Python object from the default value at declaration time.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/functions.rst#_snippet_12\n\nLANGUAGE: cpp\nCODE:\n```\npy::class_<MyClass>(\"MyClass\")\n    .def(\"myFunction\", py::arg(\"arg\") = SomeType(123));\n```\n\n----------------------------------------\n\nTITLE: Encrypting Data\nDESCRIPTION: This code snippet encrypts data using `fcrypt_encrypt`. It requires a pointer to the data to encrypt, the number of bytes to encrypt, and the encryption context (`fcrypt_ctx`). For AE-1 and AE-2 compatibility, the buffer size must be a multiple of 16 bytes, except for the last buffer.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/libzip/docs/aes_coding_tips.txt#_snippet_5\n\nLANGUAGE: C\nCODE:\n```\nfcrypt_encrypt(\n  pchData, // pointer to the data to encrypt\n  cb,   // how many bytes to encrypt\n  &zctx); // encryption context\n```\n\n----------------------------------------\n\nTITLE: Cap'n Proto Fuzz Test in C++\nDESCRIPTION: This code snippet represents a fuzz test implemented in capnp/fuzz-test.c++. It's designed to detect issues like the described integer underflow vulnerability through randomized testing. Though merged into the master branch, it's acknowledged that its coverage might not be as comprehensive as the template metaprogramming approach.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/security-advisories/2015-03-02-1-c++-integer-underflow.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Finding SDL 1.2 Library with find_package in CMake\nDESCRIPTION: This CMake code searches for SDL version 1.2 using `find_package`. If SDL2 is not found or SDL_VERSION is set to 1.2, it attempts to find SDL 1.2. It also sets `SDL_VERSION` and `SDL_VERSION_DEBIAN` variables and enables `USE_PIXMAN`.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/platform/sdl/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(SDL_VERSION EQUAL \"1.2\" OR NOT SDL2_FOUND)\n\tfind_package(SDL 1.2)\n\tset(SDL_VERSION \"1.2\" PARENT_SCOPE)\n\tset(SDL_VERSION_DEBIAN \"1.2debian\")\n\tset(USE_PIXMAN ON)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining an Unnamed Union in Cap'n Proto\nDESCRIPTION: This code defines an unnamed union within a `Shape` struct to represent different shape types. The union contains fields for `circle` (radius) and `square` (width). Unnamed unions are used when a union represents the main body of the struct.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/doc/language.md#_snippet_6\n\nLANGUAGE: capnp\nCODE:\n```\nstruct Shape {\n  area @0 :Float64;\n\n  union {\n    circle @1 :Float64;      # radius\n    square @2 :Float64;      # width\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Definitions for MSVC in CMake\nDESCRIPTION: This snippet adds compiler definitions for MSVC (Microsoft Visual C++). `-D_CRT_SECURE_NO_WARNINGS` disables security warnings, and `-D_CRT_NONSTDC_NO_DEPRECATE` disables deprecation warnings for non-standard C functions.  These definitions are added to avoid common issues when building on Windows with MSVC.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/libzip/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nIF(MSVC)\nADD_DEFINITIONS(\"-D_CRT_SECURE_NO_WARNINGS\")\nADD_DEFINITIONS(\"-D_CRT_NONSTDC_NO_DEPRECATE\")\nENDIF(MSVC)\n```\n\n----------------------------------------\n\nTITLE: Setting Target Properties (CMake)\nDESCRIPTION: This code snippet sets target properties for the static libpng library, specifically the output name and CLEAN_DIRECT_OUTPUT. This is done conditionally based on whether the target is being built with MSVC and if PNG_STATIC is enabled.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/third-party/libpng/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\nif(PNG_STATIC)\n  # MSVC doesn't use a different file extension for shared vs. static\n  # libs.  We are able to change OUTPUT_NAME to remove the _static\n  # for all other platforms.\n  if(NOT MSVC)\n    set_target_properties(${PNG_LIB_NAME_STATIC} PROPERTIES\n      OUTPUT_NAME ${PNG_LIB_NAME}\n      CLEAN_DIRECT_OUTPUT 1)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Using ASSERT_EQ with Message Streaming (C++)\nDESCRIPTION: This code snippet demonstrates how to stream messages to `ASSERT_EQ`.  It illustrates a limitation where `ASSERT*` and `FAIL*` cannot be directly used in constructors or destructors when message streaming is involved. The workaround is to move logic to a private method or use `EXPECT_*`.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/FAQ.md#_snippet_13\n\nLANGUAGE: cpp\nCODE:\n```\nASSERT_EQ(1, Foo()) << \"blah blah\" << foo;\n```\n\n----------------------------------------\n\nTITLE: Decrypting Data\nDESCRIPTION: This code snippet decrypts data using `fcrypt_decrypt`. It requires a pointer to the data to decrypt, the number of bytes to decrypt, and the encryption context (`fcrypt_ctx`). For AE-1 and AE-2 compatibility, the buffer size must be a multiple of 16 bytes, except for the last buffer.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/libzip/docs/aes_coding_tips.txt#_snippet_6\n\nLANGUAGE: C\nCODE:\n```\nfcrypt_decrypt(\n  pchData, // pointer to the data to decrypt\n  cb,   // how many bytes to decrypt\n  &zctx); // encryption context\n```\n\n----------------------------------------\n\nTITLE: Defining an action using the ACTION macro\nDESCRIPTION: This code shows how to define a custom action using the `ACTION` macro. The macro simplifies the process by allowing direct access to mock function arguments using `argK`.  The defined action can then be used directly in `WillOnce` without `Invoke`.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googlemock/docs/DesignDoc.md#_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nACTION(IncrementArg1) { return ++(*arg1); }\n\n... WillOnce(IncrementArg1());\n```\n\n----------------------------------------\n\nTITLE: CRangeDecoder Struct for LZMA Decoding in C++\nDESCRIPTION: This C++ code defines a CRangeDecoder struct, representing the state of the Range Decoder used in LZMA decoding. It contains the Range, Code, an InputStream pointer, and a Corrupted flag.  The structure is integral for extracting binary symbols from the compressed stream during the decoding process.\nSOURCE: https://github.com/openai/retro/blob/master/cores/genesis/core/cd_hw/libchdr/deps/lzma/DOC/lzma-specification.txt#_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\nstruct CRangeDecoder\n{\n  UInt32 Range; \n  UInt32 Code;\n  InputStream *InStream;\n\n  bool Corrupted;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Overloaded Method Signatures in Python\nDESCRIPTION: This snippet shows how the overload signatures of the bound C++ methods are visible in the method's docstring in Python.  This allows users to understand which set of parameters is required.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/classes.rst#_snippet_23\n\nLANGUAGE: python\nCODE:\n```\n>>> help(example.Pet)\n\nclass Pet(__builtin__.object)\n |  Methods defined here:\n |\n |  __init__(...)\n |      Signature : (Pet, str, int) -> NoneType\n |\n |  set(...)\n |      1. Signature : (Pet, int) -> NoneType\n |\n |      Set the pet's age\n |\n |      2. Signature : (Pet, str) -> NoneType\n |\n |      Set the pet's name\n```\n\n----------------------------------------\n\nTITLE: Defining a simple action using a function\nDESCRIPTION: This code demonstrates a traditional approach to defining a custom action in Google Mock using a function.  The function takes unused arguments to match the mock function's signature and increments the value pointed to by the second argument. It's then invoked using Invoke.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googlemock/docs/DesignDoc.md#_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nint IncrementArg1(Unused, int* p, Unused) {\n  return ++(*p);\n}\n\n... WillOnce(Invoke(IncrementArg1));\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Windows Builds Using MSYS2 (x86_64)\nDESCRIPTION: This command installs the required dependencies for building mGBA on Windows (64-bit) using MSYS2. It uses the `pacman` package manager to install the necessary development tools and libraries. This command involves downloading a large amount of packages.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/README.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\npacman -Sy mingw-w64-x86_64-{cmake,ffmpeg,gcc,gdb,imagemagick,libelf,libepoxy,libzip,pkg-config,qt5,SDL2,ntldd-git}\n```\n\n----------------------------------------\n\nTITLE: Another Example of Generic Methods in Cap'n Proto\nDESCRIPTION: This example demonstrates another use case of generic methods in Cap'n Proto, specifically for creating a new assignable with a generic type. The returned `Assignable` is initially valid for any `T`, and it takes on a type when `set()` is called.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/doc/language.md#_snippet_14\n\nLANGUAGE: capnp\nCODE:\n```\nnewUnsetAssignable @1 [T] () -> (assignable :Assignable(T));\n# Create a new assignable. `get()` on the returned object will\n# throw an exception until `set()` has been called at least once.\n```\n\n----------------------------------------\n\nTITLE: Defining Probability Type in C++\nDESCRIPTION: Defines `CProb` as `UInt16` to represent 11-bit probability values. This type is used to store the estimated probability of symbol '0'. It also defines `PROB_INIT_VAL` as `((1 << kNumBitModelTotalBits) / 2)`, which initializes the probability values where symbols 0 and 1 are equally probable.\nSOURCE: https://github.com/openai/retro/blob/master/cores/genesis/core/cd_hw/libchdr/deps/lzma/DOC/lzma-specification.txt#_snippet_9\n\nLANGUAGE: C++\nCODE:\n```\ntypedef UInt16 CProb;\n#define kNumBitModelTotalBits 11\n#define PROB_INIT_VAL ((1 << kNumBitModelTotalBits) / 2)\n```\n\n----------------------------------------\n\nTITLE: Recording Gameplay with Gym Retro in Python\nDESCRIPTION: This snippet demonstrates how to record gameplay in Gym Retro to a .bk2 file. It initializes a Retro environment with the `record` parameter set to '.' to save the recording in the current directory. The agent takes random actions until the game is done, and the gameplay is recorded.\nSOURCE: https://github.com/openai/retro/blob/master/docs/python.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport retro\n\nenv = retro.make(game='Airstriker-Genesis', record='.')\nenv.reset()\nwhile True:\n    _obs, _rew, done, _info = env.step(env.action_space.sample())\n    if done:\n        break\n```\n\n----------------------------------------\n\nTITLE: Finding and Configuring BZip2 Dependency in CMake\nDESCRIPTION: This snippet attempts to find the BZip2 library using `FIND_PACKAGE`. If found, it sets `HAVE_LIBBZ2` to 1, includes the BZip2 include directory, and sets `OPTIONAL_LIBRARY` to the BZip2 library. This allows for conditional compilation and linking based on whether BZip2 is available.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/libzip/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nFIND_PACKAGE(BZip2)\nIF(BZIP2_FOUND)\n  SET (HAVE_LIBBZ2 1)\n\n  INCLUDE_DIRECTORIES(${BZIP2_INCLUDE_DIR})\n  SET (OPTIONAL_LIBRARY ${BZIP2_LIBRARY})\nENDIF(BZIP2_FOUND)\n```\n\n----------------------------------------\n\nTITLE: Google Mock Expectation Ordering with InSequence Scope\nDESCRIPTION: This code snippet demonstrates how to use InSequence to enforce strict ordering of expectations within a specific scope. It creates an InSequence object within a block, ensuring all EXPECT_CALLs within that block must occur in the order they are specified.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googlemock/docs/CheatSheet.md#_snippet_17\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::InSequence;\n{\n  InSequence dummy;\n\n  EXPECT_CALL(...)...\n  EXPECT_CALL(...)...\n  ...\n  EXPECT_CALL(...)...\n}\n```\n\n----------------------------------------\n\nTITLE: PyPy Check and Dummy Target\nDESCRIPTION: This snippet checks if the Python module extension matches 'pypy'. If it does, it adds a dummy custom target named 'cpptest' and sets a variable to suppress unused variable warnings. This is because embedding is not supported on PyPy.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/tests/test_embed/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(${PYTHON_MODULE_EXTENSION} MATCHES \"pypy\")\n  add_custom_target(cpptest)  # Dummy target on PyPy. Embedding is not supported.\n  set(_suppress_unused_variable_warning \"${DOWNLOAD_CATCH}\")\n  return()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Python Dict Argument Usage Example\nDESCRIPTION: This Python code snippet demonstrates how to call the `print_dict` function, which is bound to a C++ implementation. The function takes a Python dictionary as input and prints its key-value pairs.  This example shows the seamless integration between Python and C++ code using pybind11.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/functions.rst#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n>>> print_dict({'foo': 123, 'bar': 'hello'})\n```\n\n----------------------------------------\n\nTITLE: Defining a Cap'n Proto Struct (Map)\nDESCRIPTION: This snippet defines a basic Cap'n Proto struct called `Map` which contains a list of `Entry` structs. Each `Entry` has a `key` and a `value`, both of which are defined as `Text` types. This is the original struct definition that can be evolved.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/doc/language.md#_snippet_26\n\nLANGUAGE: capnp\nCODE:\n```\nstruct Map {\n  entries @0 :List(Entry);\n  struct Entry {\n    key @0 :Text;\n    value @1 :Text;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Windows Builds Using MSYS2 (x86)\nDESCRIPTION: This command installs the required dependencies for building mGBA on Windows (32-bit) using MSYS2. It uses the `pacman` package manager to install the necessary development tools and libraries. This command involves downloading a large amount of packages.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/README.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\npacman -Sy mingw-w64-i686-{cmake,ffmpeg,gcc,gdb,imagemagick,libelf,libepoxy,libzip,pkg-config,qt5,SDL2,ntldd-git}\n```\n\n----------------------------------------\n\nTITLE: Setting Python Library Version (CMake)\nDESCRIPTION: This snippet determines the versioning scheme of the pylib based on whether the current branch is master, or a development branch, using git information such as the branch name, revision number, and commit hash.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/platform/python/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT GIT_TAG)\n\tif(GIT_BRANCH STREQUAL \"master\" OR NOT GIT_BRANCH)\n\t\tset(PYLIB_VERSION -b .dev${GIT_REV}+g${GIT_COMMIT_SHORT})\n\telse()\n\t\tset(PYLIB_VERSION -b .dev${GIT_REV}+${GIT_BRANCH}.g${GIT_COMMIT_SHORT})\n\tendif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Receiving data without TLS using KJ Networking in C++\nDESCRIPTION: This C++ code demonstrates receiving data over a network without TLS, using the KJ library. It creates a listener, accepts a connection, and then writes a response back to the client.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/doc/slides-2017.05.18/index.md#_snippet_7\n\nLANGUAGE: c++\nCODE:\n```\nvoid receive() {\n  auto io = kj::setupAsyncIo();\n  auto& network = io.provider->getNetwork();\n  auto addr = network.parseAddress(\"*\", 80)\n      .wait(io.waitScope);\n  auto listener = addr->listen();\n  auto connection = listener->accept().wait(io.waitScope);\n  connection->write(\"HTTP/1.1 404 Not Found\\r\\n\\r\\n\", 26)\n      .wait(io.waitScope);\n}\n```\n\n----------------------------------------\n\nTITLE: Build Executable Linked to pybind11\nDESCRIPTION: This snippet creates an executable target named 'test_cmake_build' from the 'embed.cpp' source file and links it against the 'pybind11::embed' library.  It also defines a custom target to check the built executable along with a python test script.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/tests/test_cmake_build/subdirectory_embed/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(test_cmake_build ../embed.cpp)\ntarget_link_libraries(test_cmake_build PRIVATE pybind11::embed)\n\nadd_custom_target(check $<TARGET_FILE:test_cmake_build> ${PROJECT_SOURCE_DIR}/../test.py)\n```\n\n----------------------------------------\n\nTITLE: Defining a Press-Only Multi-Command in Retro\nDESCRIPTION: This snippet describes the format of a press-only multi-command, denoted by `+{...}`.  These multis are only executed when the button is pressed (release is ignored).  Each subcommand within the braces must be prefixed with `+` or `-` to specify whether it should be pressed or released.\nSOURCE: https://github.com/openai/retro/blob/master/cores/snes/docs/controls.txt#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n+{...}\n```\n\n----------------------------------------\n\nTITLE: Binding Aggregate Types with Implicit Constructors in pybind11\nDESCRIPTION: This code demonstrates how to bind an aggregate type with an implicit constructor using pybind11. The py::init<> now utilizes C++11 brace initialization syntax, allowing the binding of these constructors. This enables more convenient construction of aggregate types from Python.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/changelog.rst#_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\nstruct Aggregate {\n    int a;\n    std::string b;\n};\n\npy::class_<Aggregate>(m, \"Aggregate\")\n    .def(py::init<int, const std::string &>());\n```\n\n----------------------------------------\n\nTITLE: Setting pybind11 project options\nDESCRIPTION: This code block checks if pybind11 is being used directly or via add_subdirectory. It sets an option to install pybind11 header files and build the test suite based on whether pybind11 is the master project.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Check if pybind11 is being used directly or via add_subdirectory\nset(PYBIND11_MASTER_PROJECT OFF)\nif (CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)\n  set(PYBIND11_MASTER_PROJECT ON)\nendif()\n\noption(PYBIND11_INSTALL \"Install pybind11 header files?\" ${PYBIND11_MASTER_PROJECT})\noption(PYBIND11_TEST    \"Build pybind11 test suite?\"     ${PYBIND11_MASTER_PROJECT})\n```\n\n----------------------------------------\n\nTITLE: Create Shared Library and Executable with Flags (CMake)\nDESCRIPTION: Defines a shared library (`gtest_dll`) and an executable (`gtest_dll_test_`) using `cxx_shared_library` and `cxx_executable_with_flags` respectively. It also sets a compile definition for the executable to indicate that it's linked as a shared library.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\ncxx_shared_library(gtest_dll \"${cxx_default}\"\n    src/gtest-all.cc src/gtest_main.cc)\n\ncxx_executable_with_flags(gtest_dll_test_ \"${cxx_default}\"\n    gtest_dll test/gtest_all_test.cc)\nset_target_properties(gtest_dll_test_\n                        PROPERTIES\n                        COMPILE_DEFINITIONS \"GTEST_LINKED_AS_SHARED_LIBRARY=1\")\n```\n\n----------------------------------------\n\nTITLE: Digests Structure (CRCs)\nDESCRIPTION: Defines the structure for digests (CRCs) used for verifying the integrity of streams. `AllAreDefined` indicates whether all streams have defined CRCs. If not, individual streams are checked using a `BIT Defined` flag. The `CRCs` array stores the CRC values for the defined streams.\nSOURCE: https://github.com/openai/retro/blob/master/cores/pce/deps/lzma-16.04/DOC/7zFormat.txt#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nBYTE AllAreDefined\nif (AllAreDefined == 0)\n{\n  for(NumStreams)\n    BIT Defined\n}\nUINT32 CRCs[NumDefined]\n```\n\n----------------------------------------\n\nTITLE: Installing Man Pages (CMake)\nDESCRIPTION: This code installs the man pages for libpng and png into the appropriate man page directories under `share/man`. It checks for the `PNG_MAN_DIR` variable and sets a default value if it's not already defined.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/third-party/libpng/CMakeLists.txt#_snippet_22\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT SKIP_INSTALL_FILES AND NOT SKIP_INSTALL_ALL )\n  # Install man pages\n  if(NOT PNG_MAN_DIR)\n    set(PNG_MAN_DIR \"share/man\")\n  endif()\n  install(FILES libpng.3 libpngpf.3      DESTINATION ${PNG_MAN_DIR}/man3)\n  install(FILES png.5                    DESTINATION ${PNG_MAN_DIR}/man5)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Grapheme Cluster Example in Python\nDESCRIPTION: This Python code demonstrates the issue with combining characters and grapheme clusters when passing them to C++. When passing 'e' + '\\u0301' the C++ code only receives the 'e'. Normalizing the string resolves *some* of these issues.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/cast/strings.rst#_snippet_15\n\nLANGUAGE: Python\nCODE:\n```\n>>> example.pass_wchar('é')\n'é'\n\n>>> combining_e_acute = 'e' + '\\u0301'\n\n>>> combining_e_acute\n'é'\n\n>>> combining_e_acute == 'é'\nFalse\n\n>>> example.pass_wchar(combining_e_acute)\n'e'\n\n```\n\n----------------------------------------\n\nTITLE: Adding Python Library (CMake)\nDESCRIPTION: This snippet creates a static library named `${BINARY_NAME}-pylib` from the generated `lib.c` and other Python source files. It also sets include directories and compile definitions for the library.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/platform/python/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nfile(GLOB PYTHON_SRC ${CMAKE_CURRENT_SOURCE_DIR}/*.c)\nadd_library(${BINARY_NAME}-pylib STATIC ${CMAKE_CURRENT_BINARY_DIR}/lib.c ${PYTHON_SRC})\nset_target_properties(${BINARY_NAME}-pylib PROPERTIES INCLUDE_DIRECTORIES \"${CMAKE_BINARY_DIR};${INCLUDE_DIRECTORIES}\")\nset_target_properties(${BINARY_NAME}-pylib PROPERTIES COMPILE_DEFINITIONS \"${OS_DEFINES};${FEATURE_DEFINES};${FUNCTION_DEFINES}\")\n```\n\n----------------------------------------\n\nTITLE: Integer Bounds Analysis using Template Metaprogramming in C++\nDESCRIPTION: This code snippet represents the preventative measures taken by implementing integer bounds analysis via template metaprogramming within capnp/layout.c++. The aim is to exhaustively verify that there are no integer overflows in the core pointer validation logic, effectively proving the absence of such vulnerabilities.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/security-advisories/2015-03-02-1-c++-integer-underflow.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Finding Toolchain Programs in CMake\nDESCRIPTION: This snippet finds the toolchain executables (ar, ranlib, compiler, linker) using the cross-compiler prefix and sets the corresponding CMake variables. This allows CMake to use the correct toolchain for building the project.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/platform/wii/CMakeToolchain.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nfind_program(CMAKE_AR ${cross_prefix}gcc-ar${extension})\nfind_program(CMAKE_RANLIB ${cross_prefix}gcc-ranlib${extension})\nfind_program(CMAKE_C_COMPILER ${cross_prefix}gcc${extension})\nfind_program(CMAKE_CXX_COMPILER ${cross_prefix}g++${extension})\nfind_program(CMAKE_ASM_COMPILER ${cross_prefix}gcc${extension})\nfind_program(CMAKE_LINKER ${cross_prefix}ld${extension})\n```\n\n----------------------------------------\n\nTITLE: Module-Local Class Bindings - Python Usage (Python)\nDESCRIPTION: This Python snippet demonstrates how to import the `Pet` class from `module1` and the `create_pet` function from `module2`, creating instances of the `Pet` class from both modules. The global class binding allows seamless interaction between the modules.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/classes.rst#_snippet_33\n\nLANGUAGE: pycon\nCODE:\n```\n>>> from module1 import Pet\n>>> from module2 import create_pet\n>>> pet1 = Pet(\"Kitty\")\n>>> pet2 = create_pet(\"Doggy\")\n>>> pet2.name()\n'Doggy'\n```\n\n----------------------------------------\n\nTITLE: Defining a pybind11 Module (C++)\nDESCRIPTION: This code snippet shows the preferred way to create a module entry point using `PYBIND11_MODULE`. It defines a module named \"example\" and defines a function \"add\" that takes two integers and returns their sum.  The old `PYBIND11_PLUGIN` macro is deprecated.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/changelog.rst#_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\n// new\nPYBIND11_MODULE(example, m) {\n    m.def(\"add\", [](int a, int b) { return a + b; });\n}\n```\n\n----------------------------------------\n\nTITLE: Binding with module_local attribute in cats.cpp\nDESCRIPTION: This C++ snippet demonstrates the use of `py::module_local()` to bind the `Pet` class within the `cats` module. This makes the `Pet` class specific to the module, avoiding naming conflicts when other modules also bind a class with the same name.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/classes.rst#_snippet_39\n\nLANGUAGE: cpp\nCODE:\n```\n// Pet binding in cats.cpp:\npy::class<pets::Pet>(m, \"Pet\", py::module_local())\n    .def(\"get_name\", &pets::Pet::name);\n```\n\n----------------------------------------\n\nTITLE: Installing Targets CMake\nDESCRIPTION: Installs the libzip library to the specified destinations.  The runtime component is installed to the `bin` directory, the archive to the `lib` directory, and the library itself to the `lib` directory.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/libzip/lib/CMakeLists.txt#_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\nINSTALL(TARGETS zip\n  RUNTIME DESTINATION bin\n  ARCHIVE DESTINATION lib\n  LIBRARY DESTINATION lib)\n```\n\n----------------------------------------\n\nTITLE: Defining a simple matcher using the MATCHER macro\nDESCRIPTION: This code demonstrates how to define a simple matcher using the `MATCHER` macro. The macro allows defining a custom matcher that returns true if the value being matched (referred to as `arg`) satisfies a certain condition. This example checks if the argument is positive.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googlemock/docs/DesignDoc.md#_snippet_8\n\nLANGUAGE: cpp\nCODE:\n```\nMATCHER(IsPositive) { return arg > 0; }\n```\n\n----------------------------------------\n\nTITLE: Python Usage of inty with Custom __int__ Method\nDESCRIPTION: Demonstrates how to use the custom `inty` type from Python, including the creation of a class `A` with a `__int__(self)` method. It imports the `print` function (assumed to be defined and exported from a C++ pybind11 module) and calls it with an instance of class `A`.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/cast/custom.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass A:\n    def __int__(self):\n        return 123\n\nfrom example import print\nprint(A())\n```\n\n----------------------------------------\n\nTITLE: Switch Statement Bracing Example C++\nDESCRIPTION: Demonstrates the recommended bracing and indentation style for 'switch' statements, including the indentation of 'case' statements and their corresponding blocks. Shows how to handle cases that require braces due to variable declarations within the case.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/style-guide.md#_snippet_14\n\nLANGUAGE: C++\nCODE:\n```\nswitch (grault) {\n  case GARPLY:\n    print(\"mew\");\n    break;\n  case WALDO: {  // note: needs braces due to variable\n    Location location = findWaldo();\n    print(location);\n    break;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Array Buffer Access in C++ with pybind11\nDESCRIPTION: This code shows an example of how to manually access the buffer contents of NumPy arrays within a C++ function using pybind11.  It includes the necessary headers and namespace declaration. It is the setup for a complete example involving manual buffer access.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/pycpp/numpy.rst#_snippet_9\n\nLANGUAGE: cpp\nCODE:\n```\n#include <pybind11/pybind11.h>\n#include <pybind11/numpy.h>\n\nnamespace py = pybind11;\n\npy::array_t<double> add_arrays(py::array_t<double> input1, py::array_t<double> input2) {\n```\n\n----------------------------------------\n\nTITLE: Setting Toolchain Paths and Flags in CMake\nDESCRIPTION: This snippet configures the toolchain paths, cross-compiler prefixes, and architecture-specific flags for the devkitPPC toolchain. These settings are necessary to use the correct compiler and linker for the target platform.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/platform/wii/CMakeToolchain.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_PROGRAM_PATH ${DEVKITPPC}/bin)\nset(cross_prefix powerpc-eabi-)\nset(arch_flags \"-mrvl -mcpu=750 -meabi -mhard-float -g\")\nset(inc_flags \"-I${DEVKITPRO}/libogc/include ${arch_flags}\")\nset(link_flags \"-L${DEVKITPRO}/libogc/lib/wii ${arch_flags}\")\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Target for Testing (CMake)\nDESCRIPTION: This snippet adds a custom target named `check` that executes a Python test script after building the `test_cmake_build` module. It sets the `PYTHONPATH` to include the directory where the module is built and then runs the test script.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/tests/test_cmake_build/installed_function/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(check ${CMAKE_COMMAND} -E env PYTHONPATH=$<TARGET_FILE_DIR:test_cmake_build>\n                  ${PYTHON_EXECUTABLE} ${PROJECT_SOURCE_DIR}/../test.py ${PROJECT_NAME})\n```\n\n----------------------------------------\n\nTITLE: Declaring a Semantically Optional Field using a Union\nDESCRIPTION: This Cap'n Proto snippet demonstrates how to simulate an optional field using a union with a Void field. Although this approach makes the field semantically optional, it still consumes space on the wire, including an additional 16 bits for the union tag.  The `age` field is made optional by including an `ageUnknown` void field.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/doc/faq.md#_snippet_0\n\nLANGUAGE: capnp\nCODE:\n```\nunion {\n  age @0 :Int32;\n  ageUnknown @1 :Void;\n}\n```\n\n----------------------------------------\n\nTITLE: Appending to std::vector by Reference\nDESCRIPTION: This C++ function `append_1` takes a `std::vector<int>` by reference and appends the value 1 to it. However, due to automatic conversions in pybind11, modifications made to the vector within the function will not be reflected in the original Python list.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/cast/stl.rst#_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nvoid append_1(std::vector<int> &v) {\n   v.push_back(1);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting LIBZIP_OPSYS_FILES Based on OS CMake\nDESCRIPTION: Sets the list of OS-specific source files for libzip based on whether the system is Windows (WIN32). Includes Windows-specific or Unix-specific source files.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/libzip/lib/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nIF(WIN32)\n  SET(LIBZIP_OPSYS_FILES\n    zip_source_win32handle.c\n    zip_source_win32utf8.c\n    zip_source_win32w.c\n  )\n  IF(CMAKE_SYSTEM_NAME MATCHES WindowsPhone OR CMAKE_SYSTEM_NAME MATCHES WindowsStore)\n    SET(LIBZIP_OPSYS_FILES \"${LIBZIP_OPSYS_FILES}\"\n      zip_random_uwp.c\n    )\n  ELSE()\n    SET(LIBZIP_OPSYS_FILES \"${LIBZIP_OPSYS_FILES}\"\n      zip_random_win32.c\n      zip_source_win32a.c\n    )\n  ENDIF()\nELSE(WIN32)\n  SET(LIBZIP_OPSYS_FILES\n    zip_random_unix.c\n    zip_source_file.c\n  )\nENDIF(WIN32)\n```\n\n----------------------------------------\n\nTITLE: Struct Field Default Values in Cap'n Proto\nDESCRIPTION: This code demonstrates how to assign default values to struct fields in Cap'n Proto. Default values can be specified for various data types, including integers, text, lists, structs, void, and data.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/doc/language.md#_snippet_4\n\nLANGUAGE: capnp\nCODE:\n```\nfoo @0 :Int32 = 123;\nbar @1 :Text = \"blah\";\nbaz @2 :List(Bool) = [ true, false, false, true ];\nqux @3 :Person = (name = \"Bob\", email = \"bob@example.com\");\ncorge @4 :Void = void;\ngrault @5 :Data = 0x\"a1 40 33\";\n```\n\n----------------------------------------\n\nTITLE: Test File Template C++\nDESCRIPTION: This is the standard test file template to be used when creating new test files. It includes copyright information, necessary includes, namespace declaration, and an anonymous namespace for test definitions.  The corresponding header file should always be included first.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/style-guide.md#_snippet_19\n\nLANGUAGE: C++\nCODE:\n```\n// Project Name - Project brief description\n// Copyright (c) 2015 Primary Author and contributors\n//\n// Licensed under the Whatever License blah blah no warranties.\n\n#include \"this-module.h\"\n#include <other-module.h>\n\nnamespace myproject {\nnamespace {\n\n// KJ_TESTs\n\n}  // namespace\n}  // namespace myproject\n```\n\n----------------------------------------\n\nTITLE: Global Set-Up and Tear-Down using Environment class in Google Test C++\nDESCRIPTION: This code shows how to perform global set-up and tear-down for all tests using the `::testing::Environment` class.  The `SetUp()` and `TearDown()` methods of the environment are called before and after all tests, respectively.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/AdvancedGuide.md#_snippet_20\n\nLANGUAGE: C++\nCODE:\n```\nclass Environment {\n public:\n  virtual ~Environment() {}\n  // Override this to define how to set up the environment.\n  virtual void SetUp() {}\n  // Override this to define how to tear down the environment.\n  virtual void TearDown() {}\n};\n\n```\n\n----------------------------------------\n\nTITLE: Embedding Python Interpreter with pybind11 (C++)\nDESCRIPTION: This code snippet demonstrates how to embed the Python interpreter using pybind11. It initializes the interpreter using `py::scoped_interpreter` and then uses the Python API to print \"Hello, World!\". The `pybind11/embed.h` header file is required for this functionality.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/changelog.rst#_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n#include <pybind11/embed.h>\nnamespace py = pybind11;\n\nint main() {\n    py::scoped_interpreter guard{}; // start the interpreter and keep it alive\n\n    py::print(\"Hello, World!\"); // use the Python API\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Python Code using py::exec\nDESCRIPTION: This C++ code executes a Python code snippet using `py::exec`.  It initializes the interpreter and executes a Python script that defines variables and prints a formatted string. This shows how to execute string-based python code from C++.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/embedding.rst#_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\n#include <pybind11/embed.h>\nnamespace py = pybind11;\n\nint main() {\n    py::scoped_interpreter guard{};\n\n    py::exec(R\"(\n        kwargs = dict(name=\"World\", number=42)\n        message = \"Hello, {name}! The answer is {number}\".format(**kwargs)\n        print(message)\n    )\");\n}\n```\n\n----------------------------------------\n\nTITLE: Binding with module_local attribute in dogs.cpp\nDESCRIPTION: This C++ snippet demonstrates the use of `py::module_local()` to bind the `Pet` class within the `dogs` module. This makes the `Pet` class specific to the module, avoiding naming conflicts when other modules also bind a class with the same name.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/classes.rst#_snippet_38\n\nLANGUAGE: cpp\nCODE:\n```\n// Pet binding in dogs.cpp:\npy::class<pets::Pet>(m, \"Pet\", py::module_local())\n    .def(\"name\", &pets::Pet::name);\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom C++ Struct\nDESCRIPTION: This C++ struct defines a simple `Pet` class with a constructor, a `setName` method, a `getName` method, and a `name` member variable. It serves as a basis for creating Python bindings using pybind11 to expose this class to Python.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/classes.rst#_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nstruct Pet {\n    Pet(const std::string &name) : name(name) { }\n    void setName(const std::string &name_) { name = name_; }\n    const std::string &getName() const { return name; }\n\n    std::string name;\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Target Properties\nDESCRIPTION: This snippet sets properties for the `gym-retro-integration` target, including the bundle name, icon file, info plist file, and runtime output directory. These properties are used for macOS application bundles.\nSOURCE: https://github.com/openai/retro/blob/master/src/ui/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nset_target_properties(gym-retro-integration PROPERTIES\n    MACOSX_BUNDLE_BUNDLE_NAME \"Gym Retro Integration\"\n    MACOSX_BUNDLE_ICON_FILE \"logo.icns\"\n    MACOSX_BUNDLE_INFO_PLIST \"${CMAKE_CURRENT_SOURCE_DIR}/Info.plist.in\"\n    RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Attribute Assignment without py::cast in C++\nDESCRIPTION: This code demonstrates the simplified syntax for assigning C++ types as attributes in pybind11 modules.  Previously, explicit casting using `py::cast` was required, but this example shows that direct assignment is now legal.  This enhancement simplifies the binding process.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/changelog.rst#_snippet_9\n\nLANGUAGE: cpp\nCODE:\n```\npy::module m = /* ... */\nm.attr(\"constant\") = 123;\n```\n\n----------------------------------------\n\nTITLE: Corrected Pybind11 Bindings with Trampoline\nDESCRIPTION: This snippet demonstrates the corrected pybind11 bindings, including the `PyAnimal` trampoline class as a template argument to `py::class_`. This allows Python classes to extend `Animal` and override the virtual function `go`.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/classes.rst#_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\nPYBIND11_MODULE(example, m) {\n    py::class_<Animal, PyAnimal /* <--- trampoline*/> animal(m, \"Animal\");\n    animal\n        .def(py::init<>())\n        .def(\"go\", &Animal::go);\n\n    py::class_<Dog>(m, \"Dog\", animal)\n        .def(py::init<>());\n\n    m.def(\"call_go\", &call_go);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Dynamic Attributes in Python\nDESCRIPTION: This code demonstrates how to dynamically add attributes to a Python class instance that is a binding to a C++ class created by pybind11, when dynamic attributes are enabled. It also shows how to overwrite existing attribute values that are defined in C++.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/classes.rst#_snippet_10\n\nLANGUAGE: pycon\nCODE:\n```\n>>> p = example.Pet()\n>>> p.name = 'Charly'  # OK, overwrite value in C++\n>>> p.age = 2  # OK, dynamically add a new attribute\n>>> p.__dict__  # just like a native Python class\n{'age': 2}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Command for Icon Generation in CMake\nDESCRIPTION: This CMake snippet adds a custom command to generate the `icons.c` file. It uses the `raw2c` tool to convert an icons template file into C code. The command is triggered when the `icons.c` file is missing or the template file is modified.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/platform/wii/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_command(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/icons.c\n                   COMMAND ${RAW2C} ${CMAKE_SOURCE_DIR}/src/platform/wii/icons.tpl\n                   MAIN_DEPENDENCY  ${CMAKE_SOURCE_DIR}/src/platform/wii/icons.tpl\n                   WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR})\n```\n\n----------------------------------------\n\nTITLE: Setting Installation RPATH in CMake\nDESCRIPTION: This snippet sets the installation RPATH (Run-Time Search Path) to `${CMAKE_INSTALL_PREFIX}/lib`. It also sets `CMAKE_INSTALL_RPATH_USE_LINK_PATH` to TRUE, indicating that the link path should be used when setting the RPATH. This ensures that the installed binaries can find their shared library dependencies at runtime.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/libzip/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nSET(CMAKE_INSTALL_RPATH \"${CMAKE_INSTALL_PREFIX}/lib\")\nSET(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)\n```\n\n----------------------------------------\n\nTITLE: Using Inherited Classes in Python\nDESCRIPTION: This Python code demonstrates how to use the `Dog` class after it has been bound to Python with inheritance from the `Pet` class using pybind11. It shows accessing the `name` attribute inherited from `Pet` and calling the `bark` method specific to `Dog`.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/classes.rst#_snippet_14\n\nLANGUAGE: pycon\nCODE:\n```\n>>> p = example.Dog('Molly')\n>>> p.name\nu'Molly'\n>>> p.bark()\nu'woof!'\n```\n\n----------------------------------------\n\nTITLE: Setting Expectations on Mock Methods with Google Mock in C++\nDESCRIPTION: This snippet demonstrates how to set expectations on mock methods using `EXPECT_CALL()`.  It covers setting cardinality (number of times the method is expected to be called), sequencing, ordering, and actions to be performed when the method is called.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googlemock/docs/CheatSheet.md#_snippet_7\n\nLANGUAGE: C++\nCODE:\n```\nEXPECT_CALL(mock_object, method(matchers))\n    .With(multi_argument_matcher)  ?\n    .Times(cardinality)            ?\n    .InSequence(sequences)         *\n    .After(expectations)           *\n    .WillOnce(action)              *\n    .WillRepeatedly(action)        ?\n    .RetiresOnSaturation();        ?\n```\n\n----------------------------------------\n\nTITLE: Declaring variables for 7z Decoder (C)\nDESCRIPTION: This code snippet declares the necessary variables for using the 7z decoder, including input stream, archive database, and memory allocation functions for both main and temporary pools. These variables are required to initialize and operate the decoder.\nSOURCE: https://github.com/openai/retro/blob/master/cores/pce/deps/lzma-16.04/DOC/7zC.txt#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ninStream                 /* implements ILookInStream interface */\nCSzArEx db;              /* 7z archive database structure */\nISzAlloc allocImp;       /* memory functions for main pool */\nISzAlloc allocTempImp;   /* memory functions for temporary pool */\n```\n\n----------------------------------------\n\nTITLE: C++ Callback with Named Parameters\nDESCRIPTION: This example demonstrates how to use named parameters when defining C++ callbacks for use in Python via pybind11.  It returns a `py::cpp_function` wrapping a lambda that adds 1 to its input. `py::arg(\"number\")` defines a named parameter accessible from Python.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/cast/functional.rst#_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\npy::cpp_function func_cpp() {\n    return py::cpp_function([](int i) { return i+1; },\n       py::arg(\"number\"));\n}\n```\n\n----------------------------------------\n\nTITLE: AssertionResult with Basic Boolean Logic\nDESCRIPTION: This snippet defines `IsEven` function which returns a boolean to determine if the input is an even number. This will result in a less verbose Google Test failure output than the `AssertionResult` approach when the assertion fails. No dependencies.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/AdvancedGuide.md#_snippet_5\n\nLANGUAGE: c++\nCODE:\n```\nbool IsEven(int n) {\n  return (n % 2) == 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Static Qt Linking\nDESCRIPTION: This snippet checks if Qt is built as a static library. If so, it sets the `QT_STATIC` variable, appends Qt GUI plugins to `RETRO_EXTRA`, and adds a preprocessor definition `QT_STATIC`. It retrieves the Qt Core type to check if it's a static library.\nSOURCE: https://github.com/openai/retro/blob/master/src/ui/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nget_target_property(QT_TYPE Qt5::Core TYPE)\nif(QT_TYPE STREQUAL STATIC_LIBRARY)\n    set(QT_STATIC ON)\n    list(APPEND RETRO_EXTRA ${Qt5Gui_PLUGINS})\n    add_definitions(-DQT_STATIC)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Void and Struct Annotations (Cap'n Proto)\nDESCRIPTION: This example demonstrates how to use `Void` and struct-typed annotations in Cap'n Proto. `Void` annotations can omit the value, and struct-typed annotations can have default values.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/doc/language.md#_snippet_24\n\nLANGUAGE: capnp\nCODE:\n```\nannotation qux(struct, field) :Void;\n\nstruct MyStruct $qux {\n  string @0 :Text $qux;\n  number @1 :Int32 $qux;\n}\n\nannotation corge(file) :MyStruct;\n\n$corge(string = \"hello\", number = 123);\n\nstruct Grault {\n  value @0 :Int32 = 123;\n}\n\nannotation grault(file) :Grault;\n\n$grault();  # value defaults to 123\n$grault(value = 456);\n{% endhighlight %}\n```\n\n----------------------------------------\n\nTITLE: Defining Cap'n Proto Compiler Sources\nDESCRIPTION: This snippet defines the source files for the Cap'n Proto compiler. This compiler is used to generate code from Cap'n Proto schema definitions. It includes functionalities for parsing schemas, validating data structures, and generating C++ code.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/c++/src/capnp/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nset(capnpc_sources\n  compiler/md5.c++\n  compiler/error-reporter.c++\n  compiler/lexer.capnp.c++\n  compiler/lexer.c++\n  compiler/grammar.capnp.c++\n  compiler/parser.c++\n  compiler/node-translator.c++\n  compiler/compiler.c++\n  schema-parser.c++\n  serialize-text.c++\n)\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP Headers with KJ HTTP Library in C++\nDESCRIPTION: This C++ code shows how to define and set HTTP headers using the KJ HTTP library. It creates a `kj::HttpHeaderTable`, adds custom headers, and then sets values for those headers.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/doc/slides-2017.05.18/index.md#_snippet_11\n\nLANGUAGE: c++\nCODE:\n```\nkj::HttpHeaderTable::Builder builder;\nkj::HttpHeaderId userAgent = builder.add(\"User-Agent\");\nauto headerTable = builder.build();\n\nkj::HttpHeaders headers(*headerTable);\nheaders.set(kj::HttpHeaderId::HOST, \"capnproto.org\");\nheaders.set(userAgent, \"kj-http/0.6\");\n```\n\n----------------------------------------\n\nTITLE: Finding GoogleTest in Meson\nDESCRIPTION: This Meson snippet defines a project, finds the `gtest_main` dependency using the dependency function (which relies on pkg-config), and creates an executable that links against the GoogleTest library. It also defines a test using the created executable.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/Pkgconfig.md#_snippet_3\n\nLANGUAGE: meson\nCODE:\n```\nproject('my_gtest_pkgconfig', 'cpp', version : '0.0.1')\n\ngtest_dep = dependency('gtest_main')\n\ntestapp = executable(\n  'testapp',\n  files(['samples/sample3_unittest.cc']),\n  dependencies : gtest_dep,\n  install : false)\n\ntest('first_and_only_test', testapp)\n```\n\n----------------------------------------\n\nTITLE: Disable Google Test's TR1 Tuple\nDESCRIPTION: This snippet demonstrates how to disable Google Test's internal implementation of TR1 tuple. This is useful if you don't want Google Test to use tuple at all, disabling any features that rely on it. Adding this flag to the compiler options will prevent Google Test from using any tuple implementation.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/README.md#_snippet_7\n\nLANGUAGE: c++\nCODE:\n```\n-DGTEST_HAS_TR1_TUPLE=0\n```\n\n----------------------------------------\n\nTITLE: Binding Derived Class Method in pybind11\nDESCRIPTION: This code demonstrates how to bind a method of a base class that is inherited by a derived class using pybind11. Previously, binding the base class was also required, but this is no longer necessary. This allows for more concise bindings of derived classes.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/changelog.rst#_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\nstruct Base {\n    int foo() { return 42; }\n}\n\nstruct Derived : Base {}\n\n// Now works, but previously required also binding `Base`\npy::class_<Derived>(m, \"Derived\")\n    .def(\"foo\", &Derived::foo); // function is actually from `Base`\n```\n\n----------------------------------------\n\nTITLE: Setting Python Include Directory Installation Option\nDESCRIPTION: This block defines an option to use the Python include directory for installing pybind11 headers instead of the default installation prefix.  It calculates the relative path between the CMAKE_INSTALL_PREFIX and PYTHON_INCLUDE_DIRS if the option is enabled. This offers flexibility in installation locations.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\noption (USE_PYTHON_INCLUDE_DIR \"Install pybind11 headers in Python include directory instead of default installation prefix\" OFF)\nif (USE_PYTHON_INCLUDE_DIR)\n    file(RELATIVE_PATH CMAKE_INSTALL_INCLUDEDIR ${CMAKE_INSTALL_PREFIX} ${PYTHON_INCLUDE_DIRS})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Build Google Test Tests with CMake\nDESCRIPTION: These commands guide users on building Google Test's own test suite using CMake. They include creating a build directory, navigating into it, and then running the cmake command with the `gtest_build_tests` option enabled. This enables building and running of Google Test's internal tests.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/README.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nmkdir mybuild\ncd mybuild\ncmake -Dgtest_build_tests=ON ${GTEST_DIR}\n```\n\n----------------------------------------\n\nTITLE: Binding with default arguments (shorthand)\nDESCRIPTION: This example demonstrates the shorthand notation using literals for specifying default arguments in pybind11. This simplifies the syntax by utilizing the `_a` suffix after the argument name. Requires including `using namespace pybind11::literals`.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/basics.rst#_snippet_13\n\nLANGUAGE: cpp\nCODE:\n```\n// regular notation\nm.def(\"add1\", &add, py::arg(\"i\") = 1, py::arg(\"j\") = 2);\n// shorthand\nm.def(\"add2\", &add, \"i\"_a=1, \"j\"_a=2);\n```\n\n----------------------------------------\n\nTITLE: Range Decoder Structure in C++\nDESCRIPTION: This C++ code defines the structure `CRangeDecoder` representing the state of the Range Decoder. It includes the range, code, and an input stream pointer. It also mentions the types used for Range and Code, and suggests that 64-bit integers can be used instead of 32-bit integers.\nSOURCE: https://github.com/openai/retro/blob/master/cores/pce/deps/lzma-16.04/DOC/lzma-specification.txt#_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\nstruct CRangeDecoder\n{\n  UInt32 Range; \n  UInt32 Code;\n  InputStream *InStream;\n\n  bool Corrupted;\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Programs with CMake\nDESCRIPTION: This CMake snippet uses the `find_program` command to locate the executables for `elf2dol`, `gxtexconv`, `raw2c`, and `wiiload`. These programs are essential tools in the Wii development process for converting files and loading them onto the device.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/platform/wii/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nfind_program(ELF2DOL elf2dol)\nfind_program(GXTEXCONV gxtexconv)\nfind_program(RAW2C raw2c)\nfind_program(WIILOAD wiiload)\n```\n\n----------------------------------------\n\nTITLE: Checking for getopt function in CMake\nDESCRIPTION: This snippet checks if the getopt function exists. If it doesn't exist, it sets the SRC_EXTRA_FILES variable to include getopt.c in the build and adds necessary include directories. This ensures that the program can compile with or without the getopt function available in the system.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/libzip/regress/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nCHECK_FUNCTION_EXISTS(getopt HAVE_GETOPT)\nIF(NOT HAVE_GETOPT)\n  SET(SRC_EXTRA_FILES ../src/getopt.c)\nINCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}\n  ${CMAKE_CURRENT_SOURCE_DIR}/../src)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: SVN Propget Example\nDESCRIPTION: This command demonstrates how to use `svn propget` to retrieve the value of the `svn:externals` property on a directory in a Subversion repository. The example shows the property set on the `trunk` directory to check out Google Test into the `trunk/externals/src/googletest/` directory.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/XcodeGuide.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n[Computer:svn] user$ svn propget svn:externals trunk\nexternals/src/googletest http://googletest.googlecode.com/svn/trunk\n```\n\n----------------------------------------\n\nTITLE: Manual Compilation with C++\nDESCRIPTION: This snippet demonstrates how to manually compile a pybind11 example on Linux using g++. It retrieves necessary include paths using `python3 -m pybind11 --includes` and links against Python libraries. Assumes pybind11 is installed via pip or conda.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/compiling.rst#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ c++ -O3 -Wall -shared -std=c++11 -fPIC `python3 -m pybind11 --includes` example.cpp -o example`python3-config --extension-suffix`\n```\n\n----------------------------------------\n\nTITLE: Sending data with TLS using KJ Networking in C++\nDESCRIPTION: This C++ code shows how to send data over a network with TLS encryption using the KJ library. It introduces a `kj::TlsContext` to wrap the network and establish a secure connection.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/doc/slides-2017.05.18/index.md#_snippet_5\n\nLANGUAGE: c++\nCODE:\n```\nvoid send() {\n  auto io = kj::setupAsyncIo();\n  kj::TlsContext tls;\n  auto network = tls.wrapNetwork(io.provider->getNetwork());\n  auto addr = network->parseAddress(\"capnproto.org\", 443)\n      .wait(io.waitScope);\n  auto connection = addr->connect().wait(io.waitScope);\n  connection->write(\"GET /\", 5).wait(io.waitScope);\n}\n```\n\n----------------------------------------\n\nTITLE: Compilation Command (Bash)\nDESCRIPTION: This bash command shows the flags used to compile both pybind11 and Boost.Python libraries during the benchmark. It sets optimization level to `-Os`, creates a shared library, and specifies C++14 standard.  The `-fvisibility=hidden` flag is used to reduce the size of the generated library.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/benchmark.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ng++ -Os -shared -rdynamic -undefined dynamic_lookup -fvisibility=hidden -std=c++14\n```\n\n----------------------------------------\n\nTITLE: Defining Cap'n Proto RPC Sources\nDESCRIPTION: This snippet defines the source files for the Cap'n Proto RPC library. This library provides support for remote procedure calls using the Cap'n Proto protocol. It includes functionalities for asynchronous serialization, capability handling, and two-party RPC.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/c++/src/capnp/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(capnp-rpc_sources\n  serialize-async.c++\n  capability.c++\n  membrane.c++\n  dynamic-capability.c++\n  rpc.c++\n  rpc.capnp.c++\n  rpc-twoparty.c++\n  rpc-twoparty.capnp.c++\n  persistent.capnp.c++\n  ez-rpc.c++\n)\n```\n\n----------------------------------------\n\nTITLE: GZIP Extra Field Structure\nDESCRIPTION: This snippet defines the structure of an extra field within the GZIP header when the FEXTRA flag is set. It describes how extra fields are composed of subfields, each containing a subfield ID (SI1, SI2), length (LEN), and subfield data.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/third-party/zlib/doc/rfc1952.txt#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n            +---+---+---+---+==================================+\n            |SI1|SI2|  LEN  |... LEN bytes of subfield data ...|\n            +---+---+---+---+==================================+\n```\n\n----------------------------------------\n\nTITLE: Building zlibvc.sln with Visual Studio 2008 Command Line\nDESCRIPTION: This command builds the `zlibvc.sln` solution file using the `vcbuild` command-line tool for Visual Studio 2008. It performs a rebuild of the solution for the Release configuration and Win32 platform. The solution file is located in the contrib\\vstudio\\vc9 directory.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/third-party/zlib/contrib/vstudio/readme.txt#_snippet_2\n\nLANGUAGE: batch\nCODE:\n```\nvcbuild /rebuild contrib\\vstudio\\vc9\\zlibvc.sln \"Release|Win32\"\n```\n\n----------------------------------------\n\nTITLE: Normalizing Range Decoder in C++\nDESCRIPTION: The `CRangeDecoder::Normalize()` function normalizes the range decoder's state. If the `Range` value is less than `kTopValue`, it shifts `Range` and `Code` left by 8 bits, and reads a new byte from the input stream into `Code`.\nSOURCE: https://github.com/openai/retro/blob/master/cores/genesis/core/cd_hw/libchdr/deps/lzma/DOC/lzma-specification.txt#_snippet_7\n\nLANGUAGE: C++\nCODE:\n```\n#define kTopValue ((UInt32)1 << 24)\n\nvoid CRangeDecoder::Normalize()\n{\n  if (Range < kTopValue)\n  {\n    Range <<= 8;\n    Code = (Code << 8) | InStream->ReadByte();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Trampoline Class Syntax Update in pybind11 (C++)\nDESCRIPTION: This code highlights the change in syntax for defining trampoline classes used for overriding virtual methods in Python. The old syntax using `alias<MyClass>()` is replaced by specifying both the original class and the trampoline class as template arguments to `py::class_`.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/upgrade.rst#_snippet_7\n\nLANGUAGE: cpp\nCODE:\n```\n// old v1.x syntax\npy::class_<TrampolineClass>(\"MyClass\")\n    .alias<MyClass>()\n    ...\n\n// new v2.x syntax\npy::class_<MyClass, TrampolineClass>(\"MyClass\")\n    ...\n```\n\n----------------------------------------\n\nTITLE: Generated C++ Code: Function Calls with Variable Arguments\nDESCRIPTION: This C++ code shows the different function calls generated depending on the value of `n` in the previous Pump code snippet.  The `Func()` call has a variable number of arguments concatenated with the `+` operator, as determined by the Pump meta-programming tool.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/PumpManual.md#_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\nFunc();              // If n is 0.\nFunc(a1);            // If n is 1.\nFunc(a1 + a2);       // If n is 2.\nFunc(a1 + a2 + a3);  // If n is 3.\n// And so on...\n```\n\n----------------------------------------\n\nTITLE: Setting Directory Properties for Cleanup in CMake\nDESCRIPTION: This snippet sets the ADDITIONAL_MAKE_CLEAN_FILES directory property, specifying a list of files to be cleaned up by the make clean command. These files are generated during the build process, particularly by the testinput custom target.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/libzip/regress/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nSET_PROPERTY(DIRECTORY PROPERTY ADDITIONAL_MAKE_CLEAN_FILES\n  bigzero.zip\n  manyfiles-133000.zip\n  manyfiles-65536.zip\n  manyfiles-fewer.zip\n  manyfiles-more.zip\n  manyfiles-zip64-modulo.zip\n  manyfiles-zip64.zip\n  manyfiles.zip\n)\n```\n\n----------------------------------------\n\nTITLE: Extracting Dictionary Size from LZMA2 Encoded Value in C++\nDESCRIPTION: This C++ code snippet shows how to extract the dictionary size from the LZMA2 encoded value. It checks if the encoded value is 40 (0x28 in hex). If it is, it returns 0xFFFFFFFF. Otherwise, it calculates the dictionary size based on the encoded value using bitwise operations and shifts.\nSOURCE: https://github.com/openai/retro/blob/master/cores/pce/deps/lzma-16.04/DOC/lzma-specification.txt#_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ndictSize = (p == 40) ? 0xFFFFFFFF : (((UInt32)2 | ((p) & 1)) << ((p) / 2 + 11));\n```\n\n----------------------------------------\n\nTITLE: Custom New Operator in C++\nDESCRIPTION: This code snippet illustrates the custom `new` operator used in 7-Zip to handle memory allocation failures.  Instead of relying on exceptions, it uses `malloc` and throws a custom `CNewException` if allocation fails. This is relevant when compiling with MSVC 6.0.\nSOURCE: https://github.com/openai/retro/blob/master/cores/pce/deps/lzma-16.04/DOC/lzma.txt#_snippet_11\n\nLANGUAGE: C++\nCODE:\n```\noperator new(size_t size)\n{\n  void *p = ::malloc(size);\n  if (p == 0)\n    throw CNewException();\n  return p;\n}\n```\n\n----------------------------------------\n\nTITLE: Binding Generic Arguments Function\nDESCRIPTION: This C++ code demonstrates how to bind a C++ function named `generic` that accepts `py::args` and `py::kwargs` to a Python function using pybind11. This makes the C++ function callable from Python, allowing it to receive variable positional and keyword arguments.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/functions.rst#_snippet_11\n\nLANGUAGE: cpp\nCODE:\n```\nm.def(\"generic\", &generic);\n```\n\n----------------------------------------\n\nTITLE: Finding and Using Pixman Library in CMake\nDESCRIPTION: This CMake code uses `find_feature` to locate the Pixman library. If found, it adds the `-DUSE_PIXMAN` preprocessor definition and appends `libpixman-1.0` to the `CPACK_DEBIAN_PACKAGE_DEPENDS` variable, which manages Debian package dependencies.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/platform/sdl/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nfind_feature(USE_PIXMAN \"pixman-1\")\nif(USE_PIXMAN)\n\tadd_definitions(-DUSE_PIXMAN)\n\tset(CPACK_DEBIAN_PACKAGE_DEPENDS \"${CPACK_DEBIAN_PACKAGE_DEPENDS},libpixman-1.0\" PARENT_SCOPE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Rendered Lines Function Update\nDESCRIPTION: This snippet describes removing the individual functions for setting the first and last rendered lines (`FCEUI_SetFirstRenderedLine` and a similar function).  They were replaced with a single function: `void FCEUI_SetRenderedLines(int ntscf, int ntscl, int palf, int pall);`.\nSOURCE: https://github.com/openai/retro/blob/master/cores/nes/changelog.txt#_snippet_78\n\n\n\n----------------------------------------\n\nTITLE: Building mGBA on Windows with MSYS2 and CMake\nDESCRIPTION: These commands build mGBA on Windows using MSYS2 and CMake. It creates a build directory, configures the build using CMake with the \"MSYS Makefiles\" generator, and compiles the code using make.  The resulting build is suitable for development but might require additional steps for distribution.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/README.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\ncd mgba\nmkdir build\ncd build\ncmake .. -G \"MSYS Makefiles\"\nmake\n```\n\n----------------------------------------\n\nTITLE: Verifying Type of Non-Polymorphic Objects in Python\nDESCRIPTION: This Python code demonstrates that when a C++ function returns a base pointer to a derived instance of a non-polymorphic type, the Python side only sees the base type.  The derived class methods will not be accessible.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/classes.rst#_snippet_16\n\nLANGUAGE: pycon\nCODE:\n```\n>>> p = example.pet_store()\n>>> type(p)  # `Dog` instance behind `Pet` pointer\nPet          # no pointer upcasting for regular non-polymorphic types\n>>> p.bark()\nAttributeError: 'Pet' object has no attribute 'bark'\n```\n\n----------------------------------------\n\nTITLE: Checking for Fatal Failures using HasFatalFailure() in Google Test C++\nDESCRIPTION: This snippet demonstrates how to use the HasFatalFailure() method within a test to check if a subroutine has suffered a fatal failure. If a fatal failure is detected, the test returns early to avoid further execution.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/AdvancedGuide.md#_snippet_16\n\nLANGUAGE: C++\nCODE:\n```\nTEST(FooTest, Bar) {\n  Subroutine();\n  // Aborts if Subroutine() had a fatal failure.\n  if (HasFatalFailure())\n    return;\n  // The following won't be executed.\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Building Shared Library with CMake\nDESCRIPTION: This snippet builds the shared library if the `PNG_SHARED` option is enabled. It defines the target, sets properties for MSVC, and links it with ZLIB and the math library.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/third-party/libpng/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nif(PNG_SHARED)\n  add_library(${PNG_LIB_NAME} SHARED ${libpng_sources})\n  set(PNG_LIB_TARGETS ${PNG_LIB_NAME})\n  if(MSVC)\n    # msvc does not append 'lib' - do it here to have consistent name\n    set_target_properties(${PNG_LIB_NAME} PROPERTIES PREFIX \"lib\")\n    set_target_properties(${PNG_LIB_NAME} PROPERTIES IMPORT_PREFIX \"lib\")\n  endif()\n  target_link_libraries(${PNG_LIB_NAME} ${ZLIB_LIBRARY} ${M_LIBRARY})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries\nDESCRIPTION: This snippet links the `gym-retro-integration` target with the `retro-base` library, any extra libraries in `RETRO_EXTRA`, and the Qt5 Widgets and Gui modules. This ensures that the executable has access to the necessary functions and resources from these libraries.\nSOURCE: https://github.com/openai/retro/blob/master/src/ui/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(gym-retro-integration retro-base ${RETRO_EXTRA} Qt5::Widgets Qt5::Gui)\n```\n\n----------------------------------------\n\nTITLE: Defining a designated initializer using KJ library in C++\nDESCRIPTION: This C++ code shows how to define a designated initializer for a field named `foo`. It defines a `Setter` struct that sets the value of `foo` on the target struct.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/doc/slides-2017.05.18/index.md#_snippet_15\n\nLANGUAGE: c++\nCODE:\n```\nstruct {\n  template <typename T>\n  struct Setter {\n    T value;\n    template <typename U> void operator()(U& target) {\n      target.setFoo(kj::fwd<T>(value));\n    }\n  };\n\n  template <typename T>\n  Setter<T> operator=(T&& value) {\n    return { kj::fwd<T>(value) };\n  }\n} $foo;\n```\n\n----------------------------------------\n\nTITLE: Google Mock Verifying and Clearing Expectations\nDESCRIPTION: Demonstrates how to verify and clear expectations on a mock object. Mock::VerifyAndClearExpectations() verifies and removes the expectations, while Mock::VerifyAndClear() additionally removes default actions set by ON_CALL(). Both return true if successful.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googlemock/docs/CheatSheet.md#_snippet_18\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::Mock;\n...\n// Verifies and removes the expectations on mock_obj;\n// returns true iff successful.\nMock::VerifyAndClearExpectations(&mock_obj);\n...\n// Verifies and removes the expectations on mock_obj;\n// also removes the default actions set by ON_CALL();\n// returns true iff successful.\nMock::VerifyAndClear(&mock_obj);\n```\n\n----------------------------------------\n\nTITLE: Win32: Scaling settings are now respected in fullscreen\nDESCRIPTION: This snippet modifies the Win32 version to ensure that scaling settings (x, y, stretch to fill screen) are now respected while using a special scaler in full screen mode. The code will adjust the scaling if x or y scale is less than needed for the scaler.\nSOURCE: https://github.com/openai/retro/blob/master/cores/nes/changelog.txt#_snippet_20\n\n\n\n----------------------------------------\n\nTITLE: Removing Element from Struct List in Cap'n Proto (Simplified)\nDESCRIPTION: This C++ code snippet demonstrates a more concise approach to removing an element from a list of structs within a Cap'n Proto message using `erase`. It reads the message, removes the element at the specified index, and then writes the modified message.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/doc/slides-2017.05.18/index.md#_snippet_19\n\nLANGUAGE: c++\nCODE:\n```\nauto root = capnp::readMessageCopy<MyStruct>(input);\nroot.structList.erase(indexToRemove);\ncapnp::writeMessageCopy(output, root);\n```\n\n----------------------------------------\n\nTITLE: Private Member Access with def_property\nDESCRIPTION: This C++ code defines a `Pet` class with a private `name` member and public getter (`getName`) and setter (`setName`) methods. This demonstrates how to encapsulate data within the class and control access to it through methods.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/classes.rst#_snippet_7\n\nLANGUAGE: cpp\nCODE:\n```\nclass Pet {\npublic:\n    Pet(const std::string &name) : name(name) { }\n    void setName(const std::string &name_) { name = name_; }\n    const std::string &getName() const { return name; }\nprivate:\n    std::string name;\n};\n```\n\n----------------------------------------\n\nTITLE: Adding include directories for Google Mock using CMake\nDESCRIPTION: This code snippet configures include directories for Google Mock and Google Test in a CMake project. It handles different CMake versions to ensure the correct include paths are added, and marks them as system includes to suppress warnings.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googlemock/README.md#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif (CMAKE_VERSION VERSION_LESS 2.8.11)\n  include_directories(BEFORE SYSTEM\n    \"${gtest_SOURCE_DIR}/include\" \"${gmock_SOURCE_DIR}/include\")\nelse()\n  target_include_directories(gmock_main SYSTEM BEFORE INTERFACE\n    \"${gtest_SOURCE_DIR}/include\" \"${gmock_SOURCE_DIR}/include\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: C++ Test Case Example\nDESCRIPTION: This code snippet shows an example of two test cases that could generate the same class name if the test case name and test name contain underscores. This highlights the reason for avoiding underscores in `TestCaseName` and `TestName` when using the `TEST` macro in Google Test.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/FAQ.md#_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nTEST(Time, Flies_Like_An_Arrow) { ... }\nTEST(Time_Flies, Like_An_Arrow) { ... }\n```\n\n----------------------------------------\n\nTITLE: Renaming Conflicting Macros in Google Test (C++)\nDESCRIPTION: This snippet demonstrates how to rename a Google Test macro when it clashes with a macro defined by another library.  The `-DGTEST_DONT_DEFINE_FOO=1` compiler flag tells Google Test to change the macro's name from `FOO` to `GTEST_FOO`. The example shows renaming the `TEST` macro to `GTEST_TEST`.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/FAQ.md#_snippet_24\n\nLANGUAGE: cpp\nCODE:\n```\nGTEST_TEST(SomeTest, DoesThis) { ... }\n```\n\nLANGUAGE: cpp\nCODE:\n```\nTEST(SomeTest, DoesThis) { ... }\n```\n\n----------------------------------------\n\nTITLE: Defining Build Options\nDESCRIPTION: Defines several build options using the `option` command, allowing users to enable or disable testing, use an external Cap'n Proto binary, and compile in 'lite mode'.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/c++/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\noption(BUILD_TESTING \"Build unit tests and enable CTest 'check' target.\" ON)\noption(EXTERNAL_CAPNP \"Use the system capnp binary, or the one specified in $CAPNP, instead of using the compiled one.\" OFF)\noption(CAPNP_LITE \"Compile Cap'n Proto in 'lite mode', in which all reflection APIs (schema.h, dynamic.h, etc.) are not included. Produces a smaller library at the cost of features. All programs built against the library must be compiled with -DCAPNP_LITE. Requires EXTERNAL_CAPNP.\" OFF)\n```\n\n----------------------------------------\n\nTITLE: Configuring and Copying Runtest Script in CMake\nDESCRIPTION: This snippet configures the `regress/runtest.in` file to generate a `runtest` script in the build directory. It then copies the configured script to the `regress` subdirectory of the build directory, setting appropriate file permissions to allow execution.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/libzip/CMakeLists.txt#_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\nCONFIGURE_FILE(regress/runtest.in ${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/runtest @ONLY)\nFILE(COPY ${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/runtest\n  DESTINATION ${CMAKE_BINARY_DIR}/regress\n  FILE_PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE\n)\n```\n\n----------------------------------------\n\nTITLE: Sharing Test Fixture Logic with typedef in Google Test (C++) - Alternative\nDESCRIPTION: This snippet showcases an alternative approach to sharing test fixture logic with `typedef`, simplifying test definitions and reducing code duplication. This allows different test suites to reuse the same setup and teardown logic defined in the base class.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/FAQ.md#_snippet_15\n\nLANGUAGE: cpp\nCODE:\n```\ntypedef BaseTest FooTest;\n\nTEST_F(FooTest, Abc) { ... }\nTEST_F(FooTest, Def) { ... }\n\ntypedef BaseTest BarTest;\n\nTEST_F(BarTest, Abc) { ... }\nTEST_F(BarTest, Def) { ... }\n```\n\n----------------------------------------\n\nTITLE: Assignable Return Type Example (Cap'n Proto)\nDESCRIPTION: This example shows how to use the `Assignable` return type hint in Cap'n Proto to indicate that the returned object can be assigned to a variable with a more specific type. It omits parameters because the type parameterization is not locally knowable.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/doc/language.md#_snippet_16\n\nLANGUAGE: capnp\nCODE:\n```\n# named `Assignable` and cast the returned object appropriately.\n{% endhighlight %}\n```\n\n----------------------------------------\n\nTITLE: Defining Build Options with CMake\nDESCRIPTION: This code defines CMake options that control how libpng is built, including options for building shared and static libraries, enabling tests, building an OS X framework, enabling debug output, and disabling ANSI-C prototypes.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/third-party/libpng/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\noption(PNG_SHARED \"Build shared lib\" ON)\noption(PNG_STATIC \"Build static lib\" ON)\noption(PNG_TESTS  \"Build libpng tests\" ON)\n\n# Many more configuration options could be added here\noption(PNG_FRAMEWORK \"Build OS X framework\" OFF)\noption(PNG_DEBUG     \"Build with debug output\" OFF)\noption(PNGARG        \"Disable ANSI-C prototypes\" OFF)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Command for Font Generation in CMake\nDESCRIPTION: This CMake snippet adds a custom command to generate the `font.c` file. It uses the `raw2c` tool to convert a template file into C code. The command is triggered when the `font.c` file is missing or the template file is modified.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/platform/wii/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_command(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/font.c\n                   COMMAND ${RAW2C} ${CMAKE_SOURCE_DIR}/src/platform/wii/font.tpl\n                   MAIN_DEPENDENCY  ${CMAKE_SOURCE_DIR}/src/platform/wii/font.tpl\n                   WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR})\n```\n\n----------------------------------------\n\nTITLE: Explicit String Conversion with Python C API\nDESCRIPTION: This C++ code demonstrates explicit string conversion from Latin-1 to Unicode using the Python C API. The function `str_output` creates a Latin-1 string and converts it to a Python `str` using `PyUnicode_DecodeLatin1` before returning it.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/cast/strings.rst#_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\n// This uses the Python C API to convert Latin-1 to Unicode\nm.def(\"str_output\",\n    []() {\n        std::string s = \"Send your r\\xe9sum\\xe9 to Alice in HR\"; // Latin-1\n        py::str py_s = PyUnicode_DecodeLatin1(s.data(), s.length());\n        return py_s;\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Target Include Directories in CMake\nDESCRIPTION: This snippet sets the interface include directories for the gmock and gmock_main targets. This ensures that when these libraries are used as part of a parent build (via add_subdirectory()), the correct include directories are propagated.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googlemock/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nif (DEFINED CMAKE_VERSION AND NOT \"${CMAKE_VERSION}\" VERSION_LESS \"2.8.11\")\n  target_include_directories(gmock      INTERFACE \"${gmock_SOURCE_DIR}/include\")\n  target_include_directories(gmock_main INTERFACE \"${gmock_SOURCE_DIR}/include\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Resolving 'no matching function to call' Error (C++)\nDESCRIPTION: This code demonstrates how to resolve the compiler error \"no matching function to call\" when using `ASSERT_PRED*` with overloaded or template predicate functions. Explicitly casting the overloaded function or specifying the template parameters resolves the ambiguity.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/FAQ.md#_snippet_8\n\nLANGUAGE: cpp\nCODE:\n```\nbool IsPositive(int n) {\n  return n > 0;\n}\nbool IsPositive(double x) {\n  return x > 0;\n}\n\nEXPECT_PRED1(*static_cast<bool (*)(int)>*(IsPositive), 5);\n```\n\n----------------------------------------\n\nTITLE: Binding with named arguments (shorthand)\nDESCRIPTION: This example demonstrates shorthand notation using literals for specifying arguments. This simplifies the syntax by utilizing the `_a` suffix after the argument name. It requires including `using namespace pybind11::literals`.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/basics.rst#_snippet_10\n\nLANGUAGE: cpp\nCODE:\n```\n// regular notation\nm.def(\"add1\", &add, py::arg(\"i\"), py::arg(\"j\"));\n// shorthand\nusing namespace pybind11::literals;\nm.def(\"add2\", &add, \"i\"_a, \"j\"_a);\n```\n\n----------------------------------------\n\nTITLE: Creating Cap'n Proto Compiler Library\nDESCRIPTION: This snippet creates the Cap'n Proto compiler library, linking it with the core `capnp` and `kj` libraries. The library is only built if `CAPNP_LITE` is not defined. The installed files include the headers and the compiled target.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/c++/src/capnp/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT CAPNP_LITE)\n  add_library(capnpc ${capnpc_sources})\n  target_link_libraries(capnpc PUBLIC capnp kj)\n  install(TARGETS capnpc ${INSTALL_TARGETS_DEFAULT_ARGS})\n  install(FILES ${capnpc_headers} DESTINATION \"${CMAKE_INSTALL_INCLUDEDIR}/capnp\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Custom Failure Message with Assertions in C++\nDESCRIPTION: This example demonstrates how to include custom failure messages in Google Test assertions using the streaming operator `<<`. This allows for more informative error messages when assertions fail, providing context about the failure.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/Primer.md#_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nASSERT_EQ(x.size(), y.size()) << \"Vectors x and y are of unequal length\";\n\nfor (int i = 0; i < x.size(); ++i) {\n  EXPECT_EQ(x[i], y[i]) << \"Vectors x and y differ at index \" << i;\n}\n```\n\n----------------------------------------\n\nTITLE: Parameterized Test Fixture Class Definition\nDESCRIPTION: Defines a fixture class `FooTest` derived from `::testing::TestWithParam<const char*>`. This allows using `GetParam()` to access the test parameter within the test.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/AdvancedGuide.md#_snippet_24\n\nLANGUAGE: c++\nCODE:\n```\nclass FooTest : public ::testing::TestWithParam<const char*> {\n  // You can implement all the usual fixture class members here.\n  // To access the test parameter, call GetParam() from class\n  // TestWithParam<T>.\n};\n\n// Or, when you want to add parameters to a pre-existing fixture class:\nclass BaseTest : public ::testing::Test {\n  ...\n};\nclass BarTest : public BaseTest,\n                public ::testing::WithParamInterface<const char*> {\n  ...\n};\n```\n\n----------------------------------------\n\nTITLE: Unique IDs (Cap'n Proto)\nDESCRIPTION: This example shows how to assign unique 64-bit IDs to files, types, and annotations in Cap'n Proto. These IDs are used to refer to types and annotations unambiguously.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/doc/language.md#_snippet_25\n\nLANGUAGE: capnp\nCODE:\n```\n# file ID\n@0xdbb9ad1f14bf0b36;\n\nstruct Foo @0x8db435604d0d3723 {\n  # ...\n}\n\nenum Bar @0xb400f69b5334aab3 {\n  # ...\n}\n\ninterface Baz @0xf7141baba3c12691 {\n  # ...\n}\n\nannotation qux @0xf8a1bedf44c89f00 (field) :Text;\n{% endhighlight %}\n```\n\n----------------------------------------\n\nTITLE: LZMA Encoder Object Creation (C)\nDESCRIPTION: This code snippet shows how to create an LZMA encoder object using `LzmaEnc_Create` function. It requires a memory allocator (`g_Alloc`) and returns a handle to the encoder object (`enc`). It's important to check the return value for memory allocation errors.\nSOURCE: https://github.com/openai/retro/blob/master/cores/genesis/core/cd_hw/libchdr/deps/lzma/DOC/lzma.txt#_snippet_4\n\nLANGUAGE: C\nCODE:\n```\nCLzmaEncHandle enc;\n\nenc = LzmaEnc_Create(&g_Alloc);\nif (enc == 0)\n  return SZ_ERROR_MEM;\n```\n\n----------------------------------------\n\nTITLE: Creating Google Mock Libraries in CMake\nDESCRIPTION: This snippet defines the gmock and gmock_main libraries using the cxx_library macro. These libraries contain the core Google Mock functionality and the main function, respectively. The libraries are built with strict warning flags.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googlemock/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\ncxx_library(gmock\n            \"${cxx_strict}\"\n            \"${gtest_dir}/src/gtest-all.cc\"\n            src/gmock-all.cc)\n\ncxx_library(gmock_main\n            \"${cxx_strict}\"\n            \"${gtest_dir}/src/gtest-all.cc\"\n            src/gmock-all.cc\n            src/gmock_main.cc)\n```\n\n----------------------------------------\n\nTITLE: Generate Visual Studio Project Files (Windows)\nDESCRIPTION: This snippet shows how to use CMake to generate Visual Studio project files for Cap'n Proto on Windows. It specifies the Visual Studio generator to be used, allowing CMake to create a solution file that can be opened in Visual Studio for building. Note: \"Visual Studio 15 2017\" can be used for VS2017.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/doc/install.md#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncmake -G \"Visual Studio 14 2015\"\n```\n\n----------------------------------------\n\nTITLE: Exception Assertion Example\nDESCRIPTION: This snippet illustrates how to use exception assertions in Google Test. `ASSERT_THROW` verifies that a statement throws a specific type of exception, while `EXPECT_NO_THROW` checks that a statement does not throw any exceptions.  Dependencies: Google Test framework.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/AdvancedGuide.md#_snippet_1\n\nLANGUAGE: c++\nCODE:\n```\nASSERT_THROW(Foo(5), bar_exception);\n\nEXPECT_NO_THROW({\n  int n = 5;\n  Bar(&n);\n});\n```\n\n----------------------------------------\n\nTITLE: Using KJ_ON_SCOPE_FAILURE macro in C++\nDESCRIPTION: This snippet describes the use of the `KJ_ON_SCOPE_FAILURE` macro which facilitates running code only when the current scope is exited due to an exception. It enables handling of errors by allowing code to be executed specifically in failure cases, ensuring necessary cleanup or logging.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/style-guide.md#_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nKJ_ON_SCOPE_FAILURE({ /* code to execute on scope failure */ });\n```\n\n----------------------------------------\n\nTITLE: Setting Expectations with EXPECT_CALL\nDESCRIPTION: This code shows the general syntax for setting expectations on mock methods using the `EXPECT_CALL` macro in Google Mock. It includes optional clauses like `.Times()`, `.WillOnce()`, and `.WillRepeatedly()` to specify the number of calls and the actions to perform.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googlemock/docs/ForDummies.md#_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\nEXPECT_CALL(mock_object, method(matchers))\n    .Times(cardinality)\n    .WillOnce(action)\n    .WillRepeatedly(action);\n```\n\n----------------------------------------\n\nTITLE: Define inty struct and print function in C++\nDESCRIPTION: Defines a simple `inty` struct containing a long long integer and a `print` function that outputs the `long_value` member to standard output. This code serves as a basic example for demonstrating custom type casting in pybind11.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/cast/custom.rst#_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nstruct inty { long long_value; };\n\nvoid print(inty s) {\n    std::cout << s.long_value << std::endl;\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Bracing Example C++\nDESCRIPTION: Illustrates the preferred style for spacing and bracing in conditional statements, including 'if', 'else if', and 'else' blocks. Shows how to handle short blocks that can fit on a single line and provides examples for nested conditionals.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/style-guide.md#_snippet_13\n\nLANGUAGE: C++\nCODE:\n```\nif (foo) {\n  bar();\n} else if (baz) {\n  qux(quux);\n} else {\n  corge();\n}\n\nif (done) return;\n```\n\n----------------------------------------\n\nTITLE: Creating compressed console 7-Zip (Example 1)\nDESCRIPTION: These commands demonstrate creating a compressed console version of 7-Zip. The first command compresses the 7z.exe and 7z.dll files into a 7z archive using maximum compression. The second command combines the 7zS2con.sfx module with the archive to create the self-extracting executable.\nSOURCE: https://github.com/openai/retro/blob/master/cores/pce/deps/lzma-16.04/DOC/installer.txt#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\n7zr a c.7z 7z.exe 7z.dll -mx\n```\n\nLANGUAGE: Shell\nCODE:\n```\ncopy /b 7zS2con.sfx + c.7z 7zCompr.exe\n```\n\nLANGUAGE: Shell\nCODE:\n```\n7zCompr.exe b -md22\n```\n\n----------------------------------------\n\nTITLE: Optimized PPU background drawing code\nDESCRIPTION: This snippet optimizes the PPU background drawing code using inline assembly. The optimization aims to improve the performance of background rendering, potentially increasing the emulator's frame rate. Older versions of GCC may generate bad code. GCC version 3.4.1 seems to be a good option.\nSOURCE: https://github.com/openai/retro/blob/master/cores/nes/changelog.txt#_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: Memory Allocation Example (C)\nDESCRIPTION: This code snippet shows how to define custom memory allocation and deallocation functions for use with the LZMA decoder. It defines `SzAlloc` for allocation and `SzFree` for deallocation, assigning them to an `ISzAlloc` structure.\nSOURCE: https://github.com/openai/retro/blob/master/cores/pce/deps/lzma-16.04/DOC/lzma.txt#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid *SzAlloc(void *p, size_t size) { p = p; return malloc(size); }\nvoid SzFree(void *p, void *address) { p = p; free(address); }\nISzAlloc alloc = { SzAlloc, SzFree };\n\n/* You can use p = p; operator to disable compiler warnings. */\n```\n\n----------------------------------------\n\nTITLE: Creating compressed GUI 7-Zip (Example 2)\nDESCRIPTION: These commands demonstrate creating a compressed GUI version of 7-Zip. The first command compresses the 7zg.exe and 7z.dll files into a 7z archive using maximum compression. The second command combines the 7zS2.sfx module with the archive to create the self-extracting executable.\nSOURCE: https://github.com/openai/retro/blob/master/cores/pce/deps/lzma-16.04/DOC/installer.txt#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\n7zr a g.7z 7zg.exe 7z.dll -mx\n```\n\nLANGUAGE: Shell\nCODE:\n```\ncopy /b 7zS2.sfx + g.7z 7zgCompr.exe\n```\n\nLANGUAGE: Shell\nCODE:\n```\n7zgCompr.exe b -md22\n```\n\n----------------------------------------\n\nTITLE: Including Google Test in CMake\nDESCRIPTION: This snippet determines the location of the Google Test source directory and includes it as a subdirectory within the Google Mock project. It also includes a hermetic build setup if available.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googlemock/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/gtest/CMakeLists.txt\")\n  set(gtest_dir gtest)\nelse()\n  set(gtest_dir ../googletest)\nendif()\n\n# Defines pre_project_set_up_hermetic_build() and set_up_hermetic_build().\ninclude(\"${gtest_dir}/cmake/hermetic_build.cmake\" OPTIONAL)\n\nif (COMMAND pre_project_set_up_hermetic_build)\n  # Google Test also calls hermetic setup functions from add_subdirectory,\n  # although its changes will not affect things at the current scope.\n  pre_project_set_up_hermetic_build()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Google Mock: Defining Actions with WillOnce and WillRepeatedly\nDESCRIPTION: This snippet demonstrates how to define actions for a mock method using `WillOnce()` and `WillRepeatedly()` to specify the return values for the first few calls and then a repeated return value for subsequent calls.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googlemock/docs/ForDummies.md#_snippet_9\n\nLANGUAGE: C++\nCODE:\n```\nusing ::testing::Return;\nEXPECT_CALL(turtle, GetY())\n    .WillOnce(Return(100))\n    .WillOnce(Return(200))\n    .WillRepeatedly(Return(300));\n```\n\n----------------------------------------\n\nTITLE: Building Static Library with CMake\nDESCRIPTION: This code builds the static library if the `PNG_STATIC` option is enabled. It creates a separate target for the static library and links it with ZLIB and the math library.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/third-party/libpng/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nif(PNG_STATIC)\n  # does not work without changing name\n  set(PNG_LIB_NAME_STATIC ${PNG_LIB_NAME}_static)\n  add_library(${PNG_LIB_NAME_STATIC} STATIC ${libpng_sources})\n  list(APPEND PNG_LIB_TARGETS ${PNG_LIB_NAME_STATIC})\n  if(MSVC)\n    # msvc does not append 'lib' - do it here to have consistent name\n    set_target_properties(${PNG_LIB_NAME_STATIC} PROPERTIES PREFIX \"lib\")\n  endif()\n  target_link_libraries(${PNG_LIB_NAME_STATIC} ${ZLIB_LIBRARY} ${M_LIBRARY})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Null Pointer Default Argument\nDESCRIPTION: This C++ code demonstrates how to pass a null pointer as a default argument to a function bound using pybind11. It's essential to cast the null pointer to the correct type to ensure type safety and avoid compilation errors: `(SomeType *) nullptr`.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/functions.rst#_snippet_14\n\nLANGUAGE: cpp\nCODE:\n```\npy::class_<MyClass>(\"MyClass\")\n    .def(\"myFunction\", py::arg(\"arg\") = (SomeType *) nullptr);\n```\n\n----------------------------------------\n\nTITLE: Forcing Google Test's TR1 Tuple Implementation\nDESCRIPTION: This compiler flag forces Google Test and Google Mock to use their own internal TR1 tuple library, overriding any other TR1 tuple library that might be present in your project. It should be added during the compilation of Google Test, Google Mock, and your tests.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googlemock/README.md#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n-DGTEST_USE_OWN_TR1_TUPLE=1\n```\n\n----------------------------------------\n\nTITLE: Implementing Separate Read Functions in C\nDESCRIPTION: This snippet describes the separate read functions required when `M68K_SEPARATE_READS` is enabled. These functions differentiate between immediate reads and PC-relative reads, allowing for optimized memory access.\nSOURCE: https://github.com/openai/retro/blob/master/cores/genesis/core/m68k/readme.txt#_snippet_3\n\nLANGUAGE: C\nCODE:\n```\nunsigned int  m68k_read_immediate_16(unsigned int address);\nunsigned int  m68k_read_immediate_32(unsigned int address);\n\nunsigned int  m68k_read_pcrelative_8(unsigned int address);\nunsigned int  m68k_read_pcrelative_16(unsigned int address);\nunsigned int  m68k_read_pcrelative_32(unsigned int address);\n```\n\n----------------------------------------\n\nTITLE: Returning a Base Pointer to Derived Instance\nDESCRIPTION: This code demonstrates how to return a pointer to a base class that points to a derived class instance. When the C++ classes are non-polymorphic, pybind11 won't perform upcasting, so the returned object in Python will be of the base class type.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/classes.rst#_snippet_15\n\nLANGUAGE: cpp\nCODE:\n```\n// Return a base pointer to a derived instance\nm.def(\"pet_store\", []() { return std::unique_ptr<Pet>(new Dog(\"Molly\")); });\n```\n\n----------------------------------------\n\nTITLE: Adler-32 Update Function in C\nDESCRIPTION: This function updates the Adler-32 checksum with a buffer of bytes. It takes the current checksum value, a pointer to the buffer, and the length of the buffer as input. It returns the updated Adler-32 checksum value.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/third-party/zlib/doc/rfc1950.txt#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n{\n        unsigned long s1 = adler & 0xffff;\n        unsigned long s2 = (adler >> 16) & 0xffff;\n        int n;\n\n        for (n = 0; n < len; n++) {\n            s1 = (s1 + buf[n]) % BASE;\n            s2 = (s2 + s1)     % BASE;\n        }\n        return (s2 << 16) + s1;\n      }\n```\n\n----------------------------------------\n\nTITLE: Cap'n Proto Reader Example C++\nDESCRIPTION: Illustrates the usage of `Reader` methods for accessing struct fields in Cap'n Proto generated C++ code. Shows how to retrieve primitive types, Text, Structs and Lists.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/doc/cxx.md#_snippet_0\n\nLANGUAGE: c++\nCODE:\n```\n// Example Reader methods:\n\n// myPrimitiveField @0 :Int32;\nint32_t getMyPrimitiveField();\n\n// myTextField @1 :Text;\n::capnp::Text::Reader getMyTextField();\n// (Note that Text::Reader may be implicitly cast to const char* and\n// std::string.)\n\n// myStructField @2 :MyStruct;\nMyStruct::Reader getMyStructField();\n\n// myListField @3 :List(Float64);\n::capnp::List<double> getMyListField();\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Target CMake\nDESCRIPTION: Adds a custom target to update the zip error string file. This target executes a shell script that generates `zip_err_str.c` from `zip.h`.  The target depends on these files, ensuring the error string file is up-to-date.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/libzip/lib/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nADD_CUSTOM_TARGET(update_zip_err_str\n  COMMAND sh ${CMAKE_CURRENT_SOURCE_DIR}/make_zip_err_str.sh ${CMAKE_CURRENT_SOURCE_DIR}/zip.h ${CMAKE_CURRENT_SOURCE_DIR}/zip_err_str.c\n  DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/zip.h ${CMAKE_CURRENT_SOURCE_DIR}/make_zip_err_str.sh\n)\n```\n\n----------------------------------------\n\nTITLE: Updating Short Repetition State in LZMA Decoder (C++)\nDESCRIPTION: This function `UpdateState_ShortRep` updates the decoder state after a short repetitive match. It transitions the state to either 9 or 11, depending on the initial state. The function represents a state transition specific to short repetition symbols, and receives the current state as input, returning the updated state.\nSOURCE: https://github.com/openai/retro/blob/master/cores/pce/deps/lzma-16.04/DOC/lzma-specification.txt#_snippet_26\n\nLANGUAGE: C++\nCODE:\n```\nunsigned UpdateState_ShortRep(unsigned state) { return state < 7 ? 9 : 11; }\n```\n\n----------------------------------------\n\nTITLE: Nullable References with kj::Maybe in C++\nDESCRIPTION: This snippet outlines the best practice for handling potentially null references. Using `kj::Maybe<T&>` instead of `T*` forces the user to explicitly check for null-ness, improving code safety and preventing unexpected errors.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/style-guide.md#_snippet_8\n\nLANGUAGE: C++\nCODE:\n```\n* Always use `kj::Maybe<T&>` rather than `T*` when a pointer can be null. This forces the user to check for null-ness.\n```\n\n----------------------------------------\n\nTITLE: Pickling Usage Example (Python)\nDESCRIPTION: This Python snippet demonstrates how to pickle and unpickle the `Pickleable` class, which has been made pickleable through pybind11, ensuring compatibility by setting the pickle protocol to version 2.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/classes.rst#_snippet_28\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    import cPickle as pickle  # Use cPickle on Python 2.7\nexcept ImportError:\n    import pickle\n\np = Pickleable(\"test_value\")\np.setExtra(15)\ndata = pickle.dumps(p, 2)\n```\n\n----------------------------------------\n\nTITLE: Encoding LZMA Properties in C++\nDESCRIPTION: This C++ code snippet demonstrates how to encode LZMA properties (lc, lp, pb, and dictSize) into a byte array. It calculates the first byte based on pb, lp, and lc, and then stores the dictSize as a 32-bit little-endian integer.\nSOURCE: https://github.com/openai/retro/blob/master/cores/pce/deps/lzma-16.04/DOC/lzma-specification.txt#_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nvoid EncodeProperties(Byte *properties)\n{\n  properties[0] = (Byte)((pb * 5 + lp) * 9 + lc);\n  Set_UInt32_LittleEndian(properties + 1, dictSize);\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a global test environment in Google Test C++\nDESCRIPTION: This code demonstrates how to register an environment instance with Google Test. The example uses a global variable to ensure the environment is added before `RUN_ALL_TESTS()` is called, but recommends writing a custom `main()` for better control.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/AdvancedGuide.md#_snippet_21\n\nLANGUAGE: C++\nCODE:\n```\n::testing::Environment* const foo_env = ::testing::AddGlobalTestEnvironment(new FooEnvironment);\n```\n\n----------------------------------------\n\nTITLE: Mocking a Normal Class with Google Mock in C++\nDESCRIPTION: This snippet demonstrates how to create a mock class using Google Mock for a given class Foo. It defines virtual methods in Foo and uses the MOCK_* macros to define mock methods in MockFoo, inheriting from Foo.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googlemock/docs/CheatSheet.md#_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nclass Foo {\n  ...\n  virtual ~Foo();\n  virtual int GetSize() const = 0;\n  virtual string Describe(const char* name) = 0;\n  virtual string Describe(int type) = 0;\n  virtual bool Process(Bar elem, int count) = 0;\n};\n```\n\nLANGUAGE: C++\nCODE:\n```\n#include \"gmock/gmock.h\"\n\nclass MockFoo : public Foo {\n  MOCK_CONST_METHOD0(GetSize, int());\n  MOCK_METHOD1(Describe, string(const char* name));\n  MOCK_METHOD1(Describe, string(int type));\n  MOCK_METHOD2(Process, bool(Bar elem, int count));\n};\n```\n\n----------------------------------------\n\nTITLE: JSON for Modern C++ License\nDESCRIPTION: This snippet contains the license information for the JSON for Modern C++ library, version 3.1.2, which is used in Gym Retro. The license is the MIT License, and the snippet includes the copyright notice and the full text of the license.\nSOURCE: https://github.com/openai/retro/blob/master/LICENSES.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n    __ _____ _____ _____\n __|  |   __|     |   | |  JSON for Modern C++\n|  |  |__   |  |  | | | |  version 3.1.2\n|_____|_____|_____|_|___|  https://github.com/nlohmann/json\n```\n\n----------------------------------------\n\nTITLE: Win32: Added lazy vblank wait mode\nDESCRIPTION: This snippet adds a new video synchronization mode to the Win32 version: a \"lazy\" wait for vblank/vertical retrace. It calls Sleep(0) in its wait loop, using all available CPU cycles but being more friendly to other processes.\nSOURCE: https://github.com/openai/retro/blob/master/cores/nes/changelog.txt#_snippet_56\n\n\n\n----------------------------------------\n\nTITLE: Defining Constants (Cap'n Proto)\nDESCRIPTION: This example demonstrates how to define constants of different types in Cap'n Proto, including Float32, Person (struct), and Data. These constants can be evaluated using the `capnp` tool.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/doc/language.md#_snippet_17\n\nLANGUAGE: capnp\nCODE:\n```\nconst pi :Float32 = 3.14159;\nconst bob :Person = (name = \"Bob\", email = \"bob@example.com\");\nconst secret :Data = 0x\"9f98739c2b53835e 6720a00907abd42f\";\n{% endhighlight %}\n```\n\n----------------------------------------\n\nTITLE: Project Setup in CMake\nDESCRIPTION: This snippet sets up the CMake project, defining the project name, supported languages (C++ and C), and minimum required CMake version.  It also calls hermetic build setup functions if available.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googlemock/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif (CMAKE_VERSION VERSION_LESS 3.0)\n  project(gmock CXX C)\nelse()\n  cmake_policy(SET CMP0048 NEW)\n  project(gmock VERSION 1.9.0 LANGUAGES CXX C)\nendif()\ncmake_minimum_required(VERSION 2.6.4)\n\nif (COMMAND set_up_hermetic_build)\n  set_up_hermetic_build()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Referencing the Library in the Main Program (Visual C++)\nDESCRIPTION: This code snippet shows how to reference the exported function from the main program to ensure that the test library is not discarded by the Visual C++ linker. It declares the function and then creates a static variable that calls it.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/Primer.md#_snippet_9\n\nLANGUAGE: cpp\nCODE:\n```\nint PullInMyLibrary();\nstatic int dummy = PullInMyLibrary();\n```\n\n----------------------------------------\n\nTITLE: Generalized Unpacking (PEP 448) in Python Function Calls from C++\nDESCRIPTION: This code demonstrates generalized unpacking according to PEP 448 when calling a Python function from C++ using pybind11.  It allows for multiple **kwargs unpacking in a single function call.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/pycpp/object.rst#_snippet_14\n\nLANGUAGE: cpp\nCODE:\n```\npy::dict kwargs1 = py::dict(\"number\"_a=1234);\npy::dict kwargs2 = py::dict(\"to\"_a=some_instance);\nf(**kwargs1, \"say\"_a=\"hello\", **kwargs2);\n```\n\n----------------------------------------\n\nTITLE: Returning unique_ptr from C++ function\nDESCRIPTION: This code demonstrates how to return a std::unique_ptr from a C++ function that is exposed to Python using pybind11. It creates a new Example object and returns it wrapped in a unique_ptr, which allows Python to manage the object's lifetime.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/smart_ptrs.rst#_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nstd::unique_ptr<Example> create_example() { return std::unique_ptr<Example>(new Example()); }\n```\n\n----------------------------------------\n\nTITLE: Multi-call Decompressing Loop (C)\nDESCRIPTION: This code snippet illustrates the loop used in multi-call LZMA decompression using `LzmaDec_DecodeToBuf`. It shows the arguments required by the function: a pointer to the `CLzmaDec` struct, destination buffer, destination length, source buffer, source length, and finish mode.\nSOURCE: https://github.com/openai/retro/blob/master/cores/pce/deps/lzma-16.04/DOC/lzma.txt#_snippet_3\n\nLANGUAGE: C\nCODE:\n```\nint res = LzmaDec_DecodeToBuf(CLzmaDec *p, Byte *dest, SizeT *destLen, \n    const Byte *src, SizeT *srcLen, ELzmaFinishMode finishMode);\n```\n\n----------------------------------------\n\nTITLE: Building and testing libzip 64-bit with Visual Studio 2013\nDESCRIPTION: This command builds libzip for a 64-bit x64 architecture using Visual Studio 2013 and then runs the test suite. It requires the 'vsbuild.cmd' script to be executed from the 'vstudio' directory with the correct generator and toolset parameters.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/libzip/vstudio/readme.txt#_snippet_3\n\nLANGUAGE: batch\nCODE:\n```\nvsbuild build+test \"Visual Studio 12 Win64\" v120\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Matcher for Even Numbers in Google Test C++\nDESCRIPTION: This code defines a custom matcher named `IsEven` using the `MATCHER` macro. The matcher checks if an argument is an even number by verifying if the remainder of the argument divided by 2 is equal to 0. The matcher returns true if the argument is even, and false otherwise.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googlemock/docs/CheatSheet.md#_snippet_8\n\nLANGUAGE: C++\nCODE:\n```\nMATCHER(IsEven, \"\") { return (arg % 2) == 0; }\n```\n\n----------------------------------------\n\nTITLE: Increasing Reader Options Limits in Cap'n Proto\nDESCRIPTION: This snippet refers to increasing the nesting depth limit, and the traversal limit in Cap'n Proto, which are defined in `capnp/message.h`. This is done by utilizing `capnp::ReaderOptions`. These options control the artificial limits applied to messages for security reasons.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/doc/cxx.md#_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\n`capnp::ReaderOptions`, defined in `capnp/message.h`\n```\n\n----------------------------------------\n\nTITLE: Updating Setup.py Information\nDESCRIPTION: This snippet emphasizes ensuring that all the information in `setup.py` is up-to-date.  This file is used for building and distributing the Python package and contains metadata like dependencies and version information. Keeping it current is essential for a smooth release.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/release.rst#_snippet_2\n\nLANGUAGE: Text\nCODE:\n```\nEnsure that all the information in ``setup.py`` is up-to-date.\n```\n\n----------------------------------------\n\nTITLE: CMake Project Setup and pybind11 Dependency\nDESCRIPTION: This snippet initializes the CMake project, specifies the minimum required CMake version, and finds the pybind11 package using `find_package`. It also prints the version and include directories of the found pybind11 installation.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/tests/test_cmake_build/installed_embed/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.0)\nproject(test_installed_embed CXX)\n\nset(CMAKE_MODULE_PATH \"\")\nfind_package(pybind11 CONFIG REQUIRED)\nmessage(STATUS \"Found pybind11 v${pybind11_VERSION}: ${pybind11_INCLUDE_DIRS}\")\n```\n\n----------------------------------------\n\nTITLE: Accessing Fields Directly in Python\nDESCRIPTION: This code showcases accessing and modifying the `name` field of a `Pet` object directly from Python after it has been exposed using `def_readwrite` in pybind11.  It demonstrates reading and writing the field as a regular attribute of the Python object.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/classes.rst#_snippet_6\n\nLANGUAGE: pycon\nCODE:\n```\n>>> p = example.Pet('Molly')\n>>> p.name\nu'Molly'\n>>> p.name = 'Charly'\n>>> p.name\nu'Charly'\n```\n\n----------------------------------------\n\nTITLE: Unpacking **kwargs in Python Function Calls from C++\nDESCRIPTION: This code demonstrates how to unpack a Python dictionary as **kwargs when calling a Python function from C++ using pybind11. The dictionary's key-value pairs are passed as keyword arguments to the function.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/pycpp/object.rst#_snippet_12\n\nLANGUAGE: cpp\nCODE:\n```\n// ** unpacking\npy::dict kwargs = py::dict(\"number\"_a=1234, \"say\"_a=\"hello\", \"to\"_a=some_instance);\nf(**kwargs);\n```\n\n----------------------------------------\n\nTITLE: Finding pybind11 Package with CMake\nDESCRIPTION: This snippet shows how to use `find_package` to locate an external installation of pybind11 in CMake.  It assumes that pybind11 has been installed separately. After finding the package, `pybind11_add_module` can be used to build the extension module.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/compiling.rst#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 2.8.12)\nproject(example)\n\nfind_package(pybind11 REQUIRED)\npybind11_add_module(example example.cpp)\n```\n\n----------------------------------------\n\nTITLE: Header Structure Definition\nDESCRIPTION: Defines the main Header structure of a 7z archive, including archive properties, additional streams info, main streams info, and file info. This structure encompasses the metadata and structural information needed to access and extract the archive's contents.\nSOURCE: https://github.com/openai/retro/blob/master/cores/pce/deps/lzma-16.04/DOC/7zFormat.txt#_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nBYTE NID::kHeader (0x01)\n\n[]\nArchiveProperties\n[]\n\n[]\nBYTE NID::kAdditionalStreamsInfo; (0x03)\nStreamsInfo\n[]\n\n[]\nBYTE NID::kMainStreamsInfo;    (0x04)\nStreamsInfo\n[]\n\n[]\nFilesInfo\n[]\n\nBYTE NID::kEnd\n```\n\n----------------------------------------\n\nTITLE: Setting Target Properties for Python Module\nDESCRIPTION: This snippet sets the properties of the `test_cmake_build` target to ensure the output file name adheres to Python module naming conventions. Specifically, it sets the prefix and suffix properties to control the name of the resulting .so file. This is important for the python interpreter to recognize the shared library.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/tests/test_cmake_build/subdirectory_target/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset_target_properties(test_cmake_build PROPERTIES PREFIX \"${PYTHON_MODULE_PREFIX}\"\n                                                  SUFFIX \"${PYTHON_MODULE_EXTENSION}\")\n```\n\n----------------------------------------\n\nTITLE: Push Site Changes (Deployment)\nDESCRIPTION: Deploys the changes to the live website by running the `push-site.sh` script. This script assumes that you have the necessary permissions to update the website. This script likely handles tasks like building the site and transferring the files to a web server.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/doc/README.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n./push-site.sh\n```\n\n----------------------------------------\n\nTITLE: Exporting variables to Python\nDESCRIPTION: This code demonstrates how to export C++ variables to Python using pybind11. The `m.attr` function registers variables in the module, making them accessible from Python. `py::cast` is used to explicitly convert the string \"World\" to a Python object.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/basics.rst#_snippet_14\n\nLANGUAGE: cpp\nCODE:\n```\nPYBIND11_MODULE(example, m) {\n    m.attr(\"the_answer\") = 42;\n    py::object world = py::cast(\"World\");\n    m.attr(\"what\") = world;\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Adding of KJ HTTP Library\nDESCRIPTION: Conditionally adds the KJ HTTP compatibility library if `CAPNP_LITE` is not defined. It links to the KJ asynchronous and core libraries.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/c++/src/kj/CMakeLists.txt#_snippet_21\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT CAPNP_LITE)\n  add_library(kj-http ${kj-http_sources})\n  add_library(CapnProto::kj-http ALIAS kj-http)\n  target_link_libraries(kj-http PUBLIC kj-async kj)\n  install(TARGETS kj-http ${INSTALL_TARGETS_DEFAULT_ARGS})\n  install(FILES ${kj-http_headers} DESTINATION \"${CMAKE_INSTALL_INCLUDEDIR}/kj/compat\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Compiling test cases on Windows\nDESCRIPTION: This batch script compiles the pybind11 test cases on Windows using Visual Studio. It creates a build directory, navigates into it, uses cmake to generate the Visual Studio project files, and then uses cmake to build the project in Release configuration and run the 'check' target.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/basics.rst#_snippet_1\n\nLANGUAGE: batch\nCODE:\n```\nmkdir build\ncd build\ncmake ..\ncmake --build . --config Release --target check\n```\n\n----------------------------------------\n\nTITLE: TLS Bindings Diff for receiving using KJ Networking in C++\nDESCRIPTION: Highlights the code changes required to receive data over TLS with KJ. The `kj::TlsContext` and `tls.wrapPort` methods are essential for secure listening.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/doc/slides-2017.05.18/index.md#_snippet_9\n\nLANGUAGE: c++\nCODE:\n```\nvoid receive() {\n\n  kj::TlsKeypair keypair { KEY_PEM_TEXT, CERT_PEM_TEXT };\n  kj::TlsContext::Options options;\n  options.defaultKeypair = keypair;\n  kj::TlsContext tls(options);\n\n\n                  tls.wrapPort(              );\n\n\n\n}\n```\n\n----------------------------------------\n\nTITLE: Win32 NOPAUSE Define (C/C++)\nDESCRIPTION: This defines `NOPAUSE` in a Win32 environment. When defined, it disables the emulator from pausing when the window loses focus. This can be useful in situations where the emulator needs to continue running in the background, such as when using external tools or recording gameplay.\nSOURCE: https://github.com/openai/retro/blob/master/cores/snes/docs/changes.txt#_snippet_2\n\nLANGUAGE: C/C++\nCODE:\n```\n#define NOPAUSE\n```\n\n----------------------------------------\n\nTITLE: Finding Qt5 Packages\nDESCRIPTION: This snippet uses CMake's `find_package` command to locate the Qt5Gui and Qt5Widgets modules, which are marked as required dependencies for the project. This ensures that the build process will fail if these dependencies are not found.\nSOURCE: https://github.com/openai/retro/blob/master/src/ui/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(Qt5Gui REQUIRED)\nfind_package(Qt5Widgets REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: Memory Allocation Example for Compression (C)\nDESCRIPTION: This code snippet presents example definitions for memory allocation (`SzAlloc`) and deallocation (`SzFree`) functions specifically for use with the LZMA encoder.  It creates an `ISzAlloc` structure containing pointers to these functions.\nSOURCE: https://github.com/openai/retro/blob/master/cores/pce/deps/lzma-16.04/DOC/lzma.txt#_snippet_4\n\nLANGUAGE: C\nCODE:\n```\nstatic void *SzAlloc(void *p, size_t size) { p = p; return MyAlloc(size); }\nstatic void SzFree(void *p, void *address) {  p = p; MyFree(address); }\nstatic ISzAlloc g_Alloc = { SzAlloc, SzFree };\n```\n\n----------------------------------------\n\nTITLE: Copyright Disclaimer Example\nDESCRIPTION: This snippet presents an example of a copyright disclaimer that an employer or school can sign to relinquish copyright interest in a library. This disclaimer helps clarify the ownership of the software and ensures compliance with the LGPL.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/third-party/blip_buf/license.txt#_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\nYoyodyne, Inc., hereby disclaims all copyright interest in the\nlibrary `Frob' (a library for tweaking knobs) written by James Random Hacker.\n\n<signature of Ty Coon>, 1 April 1990\nTy Coon, President of Vice\n```\n\n----------------------------------------\n\nTITLE: Type-Parameterized Test Definition C++\nDESCRIPTION: Defines a type-parameterized test using `TYPED_TEST_P()`.  Inside the test, `TypeParam` refers to the current type parameter. This is similar to typed tests, but the type list is not known at the time of definition.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/AdvancedGuide.md#_snippet_33\n\nLANGUAGE: cpp\nCODE:\n```\nTYPED_TEST_P(FooTest, DoesBlah) {\n  // Inside a test, refer to TypeParam to get the type parameter.\n  TypeParam n = 0;\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Metafile and Installation in CMake\nDESCRIPTION: This CMake snippet configures the `meta.xml` file using a template and installs the necessary files for the Wii version. It installs the icon, metafile and DOL executable to a specific location.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/platform/wii/CMakeLists.txt#_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nconfigure_file(${CMAKE_CURRENT_SOURCE_DIR}/meta.xml.in ${CMAKE_CURRENT_BINARY_DIR}/meta.xml)\ninstall(FILES ${CMAKE_CURRENT_SOURCE_DIR}/icon.png ${CMAKE_CURRENT_BINARY_DIR}/meta.xml DESTINATION . COMPONENT ${BINARY_NAME}-wii)\ninstall(FILES ${CMAKE_CURRENT_BINARY_DIR}/${BINARY_NAME}.dol DESTINATION . RENAME boot.dol COMPONENT ${BINARY_NAME}-wii)\n```\n\n----------------------------------------\n\nTITLE: Generic Methods with Undefined Return Type\nDESCRIPTION: This code shows example usage of `AnyPointer` for a generic method when the returned type is unknown and is not defined as generic. The caller is responsible for keeping track of the type.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/doc/language.md#_snippet_15\n\nLANGUAGE: capnp\nCODE:\n```\ngetNamedAssignable @2 (name :Text) -> (assignable :Assignable);\n# Get the `Assignable` with the given name. It is the\n# responsibility of the caller to keep track of the type of each\n```\n\n----------------------------------------\n\nTITLE: Rendering Gym Retro Movie to Video using Shell\nDESCRIPTION: This command line instruction demonstrates how to render a Gym Retro movie (.bk2 file) to a video file using the `playback_movie` script. It requires `ffmpeg` to be installed, and the output video will be written to the directory containing the input movie file.\nSOURCE: https://github.com/openai/retro/blob/master/docs/python.rst#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m retro.scripts.playback_movie Airstriker-Genesis-Level1-000000.bk2\n```\n\n----------------------------------------\n\nTITLE: Building and testing libzip 32-bit with Visual Studio 2013\nDESCRIPTION: This command builds libzip for a 32-bit x86 architecture using Visual Studio 2013 and then runs the test suite. It requires the 'vsbuild.cmd' script to be executed from the 'vstudio' directory with the correct generator and toolset parameters.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/libzip/vstudio/readme.txt#_snippet_2\n\nLANGUAGE: batch\nCODE:\n```\nvsbuild build+test \"Visual Studio 12\" v120\n```\n\n----------------------------------------\n\nTITLE: Fixed ISB and DCP opcode emulation\nDESCRIPTION: This snippet corrects the emulation of the \"ISB\" and \"DCP\" invalid opcodes. It ensures that these opcodes, which are not part of the official instruction set but may be used in some ROMs, are handled correctly by the emulator.\nSOURCE: https://github.com/openai/retro/blob/master/cores/nes/changelog.txt#_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: Conditional Source Definition (KJ)\nDESCRIPTION: Conditionally sets the `kj_sources` variable based on the `CAPNP_LITE` flag. If `CAPNP_LITE` is not set, it combines both lite and heavy sources; otherwise, it uses only the lite sources. `CAPNP_LITE` needs to be already defined.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/c++/src/kj/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT CAPNP_LITE)\n  set(kj_sources ${kj_sources_lite} ${kj_sources_heavy})\nelse()\n  set(kj_sources ${kj_sources_lite})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining libpng Version Information in CMake\nDESCRIPTION: This code defines the versioning information for the libpng library, including major, minor, and release numbers.  These variables are later used for naming the library and setting framework properties.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/third-party/libpng/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(PNGLIB_MAJOR 1)\nset(PNGLIB_MINOR 6)\nset(PNGLIB_RELEASE 17)\nset(PNGLIB_NAME libpng${PNGLIB_MAJOR}${PNGLIB_MINOR})\nset(PNGLIB_VERSION ${PNGLIB_MAJOR}.${PNGLIB_MINOR}.${PNGLIB_RELEASE})\n```\n\n----------------------------------------\n\nTITLE: Creating Nice and Strict Mocks in C++\nDESCRIPTION: This snippet shows how to create 'nice' and 'strict' mock objects using Google Mock. Nice mocks ignore uninteresting calls, while strict mocks treat them as failures. These are subclasses of the mock class MockFoo.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googlemock/docs/CheatSheet.md#_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nNiceMock<MockFoo> nice_foo;     // The type is a subclass of MockFoo.\nStrictMock<MockFoo> strict_foo; // The type is a subclass of MockFoo.\n```\n\n----------------------------------------\n\nTITLE: Adding Google Test Subdirectory in CMake\nDESCRIPTION: This snippet adds Google Test as a subdirectory to the current CMake project, placing its binary directory within the Google Mock binary directory. It also calls config_compiler_and_linker to configure compiler and linker settings.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googlemock/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(\"${gtest_dir}\" \"${gmock_BINARY_DIR}/gtest\")\n\n# Although Google Test's CMakeLists.txt calls this function, the\n# changes there don't affect the current scope.  Therefore we have to\n# call it again here.\nconfig_compiler_and_linker()  # from ${gtest_dir}/cmake/internal_utils.cmake\n```\n\n----------------------------------------\n\nTITLE: Compressing files for installation packages with 7zr\nDESCRIPTION: This command demonstrates how to compress files into a 7z archive using 7zr, which is a reduced version of 7za.exe. This is useful for creating installation packages with LZMA, LZMA2, BCJ, BCJ2, ARM, and Copy codecs.\nSOURCE: https://github.com/openai/retro/blob/master/cores/pce/deps/lzma-16.04/DOC/installer.txt#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n7zr a archive.7z files\n```\n\n----------------------------------------\n\nTITLE: De-emphasis Emulation Code Changes\nDESCRIPTION: This snippet describes significant changes to the de-emphasis emulation code. The deemphasized palette calculation is now based on deemphasis bits set during the screen update loop. A static deemphasized palette at $40-$7F was added to fix the PAL game \"Noah's Ark\".\nSOURCE: https://github.com/openai/retro/blob/master/cores/nes/changelog.txt#_snippet_93\n\n\n\n----------------------------------------\n\nTITLE: Archive Properties Structure\nDESCRIPTION: Describes the structure for archive properties, including the property type, size, and data. The loop continues until a property type of 0 (kEnd) is encountered. Each property has a size that dictates the amount of data to read for that property.\nSOURCE: https://github.com/openai/retro/blob/master/cores/pce/deps/lzma-16.04/DOC/7zFormat.txt#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nBYTE NID::kArchiveProperties (0x02)\nfor (;;)\n{\n  BYTE PropertyType;\n  if (aType == 0)\n    break;\n  UINT64 PropertySize;\n  BYTE PropertyData[PropertySize];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Internal Enumeration in C++\nDESCRIPTION: This code snippet defines a C++ struct `Pet` with an internal enumeration `Kind`. This showcases how to bind such enumerations using pybind11, ensuring the type is created within the scope of the parent class.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/classes.rst#_snippet_26\n\nLANGUAGE: cpp\nCODE:\n```\nstruct Pet {\n    enum Kind {\n        Dog = 0,\n        Cat\n    };\n\n    Pet(const std::string &name, Kind type) : name(name), type(type) { }\n\n    std::string name;\n    Kind type;\n};\n```\n\n----------------------------------------\n\nTITLE: CMake Project Setup and pybind11 Package Finding\nDESCRIPTION: This snippet initializes the CMake project, specifies the required CMake version, sets the project language to CXX, and searches for the pybind11 package. It then prints the found pybind11 version and include directories to the console.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/tests/test_cmake_build/installed_target/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.0)\nproject(test_installed_target CXX)\n\nset(CMAKE_MODULE_PATH \"\")\n\nfind_package(pybind11 CONFIG REQUIRED)\nmessage(STATUS \"Found pybind11 v${pybind11_VERSION}: ${pybind11_INCLUDE_DIRS}\")\n```\n\n----------------------------------------\n\nTITLE: Set OS-related compiler definitions\nDESCRIPTION: Sets the `IOAPI_NO_64` compiler definition, which disables 64-bit file I/O functions. This is likely necessary because the PS Vita is a 32-bit platform. The definition is set with `PARENT_SCOPE` so that it is available to subdirectories.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/platform/psp2/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(OS_DEFINES IOAPI_NO_64)\nset(OS_DEFINES ${OS_DEFINES} PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Calling C++ Function with Python List (Conversion)\nDESCRIPTION: This Python snippet calls the `print_vector` function defined in C++ (using pybind11) with a Python list `[1, 2, 3]` as its argument. Pybind11 automatically converts the Python list into a `std::vector<int>` before passing it to the C++ function.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/cast/overview.rst#_snippet_3\n\nLANGUAGE: pycon\nCODE:\n```\n>>> print_vector([1, 2, 3])\n1 2 3\n```\n\n----------------------------------------\n\nTITLE: Adding ziptool executable in CMake\nDESCRIPTION: This snippet adds an executable named 'ziptool'. It specifies 'ziptool.c' and any extra source files as the source files to be compiled. It also links the executable against the 'zip' library and installs it to the 'bin' directory.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/libzip/src/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nADD_EXECUTABLE(ziptool ziptool.c ${SRC_EXTRA_FILES})\nTARGET_LINK_LIBRARIES(ziptool zip)\nINSTALL(TARGETS ziptool RUNTIME DESTINATION bin)\n```\n\n----------------------------------------\n\nTITLE: Disabling Google Test's TR1 Tuple Implementation\nDESCRIPTION: This compiler flag tells Google Test and Google Mock to use the same TR1 tuple library that the rest of your project uses, preventing clashes between different tuple implementations. It should be added during the compilation of Google Test, Google Mock, and your tests.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googlemock/README.md#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n-DGTEST_USE_OWN_TR1_TUPLE=0\n```\n\n----------------------------------------\n\nTITLE: Example of Google Test and Native Assertions\nDESCRIPTION: Demonstrates using Google Test assertions alongside native assertions in a testing function. If the Google Test assertion fails, it prints an error message and throws an exception, signaling a failure to the host testing framework.  The `CPPUNIT_ASSERT` shows the use of a native assertion.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/AdvancedGuide.md#_snippet_56\n\nLANGUAGE: cpp\nCODE:\n```\nvoid TestFooDoesBar() {\n  Foo foo;\n  EXPECT_LE(foo.Bar(1), 100);     // A Google Test assertion.\n  CPPUNIT_ASSERT(foo.IsEmpty());  // A native assertion.\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Values Globally with Google Mock in C++\nDESCRIPTION: This snippet demonstrates how to set default actions for mock functions using DefaultValue.  It illustrates setting a default value directly, using a factory function, and clearing the default value.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googlemock/docs/CheatSheet.md#_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\nusing ::testing::DefaultValue;\n\n// Sets the default value to be returned. T must be CopyConstructible.\nDefaultValue<T>::Set(value);\n// Sets a factory. Will be invoked on demand. T must be MoveConstructible.\n//   T MakeT();\nDefaultValue<T>::SetFactory(&MakeT);\n// ... use the mocks ...\n// Resets the default value.\nDefaultValue<T>::Clear();\n```\n\n----------------------------------------\n\nTITLE: Append to Core VFS source list\nDESCRIPTION: Appends `sce-vfs.c` to the `CORE_VFS_SRC` list, which likely contains source files for a virtual file system (VFS) layer. This allows the application to access files on the PS Vita's file system.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/platform/psp2/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CORE_VFS_SRC ${CMAKE_CURRENT_SOURCE_DIR}/sce-vfs.c)\nset(CORE_VFS_SRC ${CORE_VFS_SRC} PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Defining Cap'n Proto Schemas\nDESCRIPTION: This snippet defines the Cap'n Proto schema files. These schemas define the structure and types of data that can be serialized and deserialized using Cap'n Proto. They are used by the Cap'n Proto compiler to generate code for working with specific data structures.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/c++/src/capnp/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(capnp_schemas\n  c++.capnp\n  schema.capnp\n)\n```\n\n----------------------------------------\n\nTITLE: Updating Match State in LZMA Decoder (C++)\nDESCRIPTION: This function `UpdateState_Match` updates the decoder state after a match.  It transitions the state to either 7 or 10, depending on the initial state value. It represents a state transition specific to match symbols. The function receives the current state as input and returns the updated state.\nSOURCE: https://github.com/openai/retro/blob/master/cores/pce/deps/lzma-16.04/DOC/lzma-specification.txt#_snippet_24\n\nLANGUAGE: C++\nCODE:\n```\nunsigned UpdateState_Match   (unsigned state) { return state < 7 ? 7 : 10; }\n```\n\n----------------------------------------\n\nTITLE: Inheriting Types from Other Modules\nDESCRIPTION: This example demonstrates how to define a class in one pybind11 module that inherits from a class defined in another module. It shows how to import the base class from the other module using `py::module::import`.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/misc.rst#_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\npy::object pet = (py::object) py::module::import(\"basic\").attr(\"Pet\");\n\npy::class_<Dog>(m, \"Dog\", pet)\n    .def(py::init<const std::string &>())\n    .def(\"bark\", &Dog::bark);\n```\n\n----------------------------------------\n\nTITLE: Using KJ_ON_SCOPE_SUCCESS macro in C++\nDESCRIPTION: This snippet shows how to use the `KJ_ON_SCOPE_SUCCESS` macro which allows for code execution specifically when the scope exits successfully, without throwing exceptions. It can be used to ensure a certain state is reached if the preceding code executes without issues.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/style-guide.md#_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nKJ_ON_SCOPE_SUCCESS({ /* code to execute on scope success */ });\n```\n\n----------------------------------------\n\nTITLE: Initializing the Embedded Python Interpreter\nDESCRIPTION: This C++ code initializes the embedded Python interpreter using `py::scoped_interpreter`. The interpreter is initialized when the `guard` object is created and finalized when it is destroyed. This is required to use any Python API through pybind11.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/embedding.rst#_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\n#include <pybind11/embed.h> // everything needed for embedding\nnamespace py = pybind11;\n\nint main() {\n    py::scoped_interpreter guard{}; // start the interpreter and keep it alive\n\n    py::print(\"Hello, World!\"); // use the Python API\n}\n```\n\n----------------------------------------\n\nTITLE: Function Requiring NumPy Array of Doubles in C++\nDESCRIPTION: This code snippet shows how to define a function that requires its argument to be a NumPy array of double precision values using `py::array_t<double>`.  If the argument is of a different type, pybind11 will attempt to cast it to the required type. This requires the inclusion of `pybind11/numpy.h`.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/pycpp/numpy.rst#_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\nvoid f(py::array_t<double> array);\n```\n\n----------------------------------------\n\nTITLE: Initializing Cap'n Proto struct declaratively using designated initializers in C++\nDESCRIPTION: This C++ code demonstrates using designated initializers to declaratively initialize a Cap'n Proto struct with the KJ library. It uses the `$foo`, `$bar`, and `$baz` initializers to set the fields in a more concise way.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/doc/slides-2017.05.18/index.md#_snippet_13\n\nLANGUAGE: c++\nCODE:\n```\nusing namespace capnp::init;\n\ncapnp::MallocMessageBuilder message;\nmessage.initRoot<MyStruct>(\n  $foo = 123,\n  $bar = \"foo\",\n  $baz(\n    $qux = true\n  )\n);\ncapnp::writeMessageToFd(fd, message);\n```\n\n----------------------------------------\n\nTITLE: Updating Repetition State in LZMA Decoder (C++)\nDESCRIPTION: This function `UpdateState_Rep` updates the decoder state after a repetitive match. It transitions the state to either 8 or 11, depending on the initial state. The function represents a state transition specific to repetition symbols, and receives the current state as input, returning the updated state.\nSOURCE: https://github.com/openai/retro/blob/master/cores/pce/deps/lzma-16.04/DOC/lzma-specification.txt#_snippet_25\n\nLANGUAGE: C++\nCODE:\n```\nunsigned UpdateState_Rep     (unsigned state) { return state < 7 ? 8 : 11; }\n```\n\n----------------------------------------\n\nTITLE: Scale Vector by 2 - C++\nDESCRIPTION: This C++ function scales an Eigen vector by a factor of 2. It takes an Eigen::Ref<Eigen::VectorXd> as input, allowing modification of the original NumPy array without copying, provided the array is writeable and storage compatible. It relies on the pybind11/eigen.h header for Eigen support.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/cast/eigen.rst#_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nvoid scale_by_2(Eigen::Ref<Eigen::VectorXd> v) {\n        v *= 2;\n    }\n```\n\n----------------------------------------\n\nTITLE: LZMA Encoding Function Call (C)\nDESCRIPTION: This code snippet illustrates the call to the `LzmaEnc_Encode` function, which performs the actual LZMA encoding. It passes the encoder handle, output stream, input stream, progress callback (NULL in this case), and memory allocators as arguments.\nSOURCE: https://github.com/openai/retro/blob/master/cores/pce/deps/lzma-16.04/DOC/lzma.txt#_snippet_9\n\nLANGUAGE: C\nCODE:\n```\nres = LzmaEnc_Encode(enc, &outStream.funcTable, &inStream.funcTable, \n  NULL, &g_Alloc, &g_Alloc);\n```\n\n----------------------------------------\n\nTITLE: Using KJ_DEFER macro for RAII in C++\nDESCRIPTION: This snippet explains how to use the `KJ_DEFER` macro to ensure that specific code is executed upon exiting the current scope. It provides a means of resource management following RAII principles, avoiding the need to manually define a destructor.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/style-guide.md#_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nKJ_DEFER({ /* code to execute on scope exit */ });\n```\n\n----------------------------------------\n\nTITLE: Header File Template C++\nDESCRIPTION: This is the standard header file template to be used when creating new header files. It includes copyright information, include guards, namespace declaration, and private namespace declaration.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/style-guide.md#_snippet_17\n\nLANGUAGE: C++\nCODE:\n```\n// Project Name - Project brief description\n// Copyright (c) 2015 Primary Author and contributors\n//\n// Licensed under the Whatever License blah blah no warranties.\n\n#ifndef HEADER_PATH_FILENAME_H_\n#define HEADER_PATH_FILENAME_H_\n// Documentation for file.\n\n#include <kj/common.h>\n\nnamespace myproject {\n\n// declarations\n\nnamespace _ {  // private\n\n// private declarations\n\n}  // namespace _ (private)\n\n}  // namespace myproject\n\n#endif  // HEADER_PATH_FILENAME_H_\n```\n\n----------------------------------------\n\nTITLE: Binding protected member functions with pybind11: Compilation error\nDESCRIPTION: This snippet demonstrates an attempt to bind a protected member function `foo` of class `A` directly using pybind11, which results in a compilation error because protected members are not directly accessible.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/classes.rst#_snippet_41\n\nLANGUAGE: cpp\nCODE:\n```\nclass A {\nprotected:\n    int foo() const { return 42; }\n};\n\npy::class_<A>(m, \"A\")\n    .def(\"foo\", &A::foo); // error: 'foo' is a protected member of 'A'\n```\n\n----------------------------------------\n\nTITLE: Data Corruption Detection in LZMA Range Decoder (C)\nDESCRIPTION: This code snippet enables data corruption detection within the LZMA SDK's RangeDecoderReadByte function. It sets the ExtraBytes flag and returns 0xFF when corruption is suspected, providing a mechanism to identify and handle potentially corrupted data streams during decompression.\nSOURCE: https://github.com/openai/retro/blob/master/cores/pce/deps/lzma-16.04/DOC/lzma-history.txt#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n{\n  rd->ExtraBytes = 1;\n  return 0xFF;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Export Rule (CMake)\nDESCRIPTION: This snippet determines the CMake version and sets the `PNG_EXPORT_RULE` variable, which is used later to export targets to an export file. The logic is based on comparing the major and minor CMake versions to ensure compatibility.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/third-party/libpng/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\nif(CMAKE_MAJOR_VERSION GREATER 1 AND CMAKE_MINOR_VERSION GREATER 4)\n  set(PNG_EXPORT_RULE EXPORT libpng)\nelif(CMAKE_MAJOR_VERSION GREATER 2) # future proof\n  set(PNG_EXPORT_RULE EXPORT libpng)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Fusing Google Test Files Script\nDESCRIPTION: Command to run the Python script `fuse_gtest_files.py` to combine Google Test source files into two files: `gtest/gtest.h` and `gtest/gtest-all.cc`. This script is experimental and requires Python 2.4 or higher. The single parameter `OUTPUT_DIR` specifies where the files will be placed.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/AdvancedGuide.md#_snippet_58\n\nLANGUAGE: python\nCODE:\n```\npython fuse_gtest_files.py OUTPUT_DIR\n```\n\n----------------------------------------\n\nTITLE: Check Range Decoder Finish State C++\nDESCRIPTION: This function checks if the decoding process has finished successfully by verifying that the 'Code' variable is equal to 0. This check provides a mechanism for corruption detection, as a corrupted data stream is likely to result in a non-zero 'Code' value.\nSOURCE: https://github.com/openai/retro/blob/master/cores/pce/deps/lzma-16.04/DOC/lzma-specification.txt#_snippet_6\n\nLANGUAGE: C++\nCODE:\n```\nbool IsFinishedOK() const { return Code == 0; }\n```\n\n----------------------------------------\n\nTITLE: Calculating Dictionary Size in LZMA2 in C++\nDESCRIPTION: This C++ code calculates the dictionary size based on a single byte value (p) in the LZMA2 scheme. It determines the dictionary size based on whether the encoded value (p) is 40, and if not, it uses a bitwise operation to calculate the dictionary size from the encoded value.\nSOURCE: https://github.com/openai/retro/blob/master/cores/genesis/core/cd_hw/libchdr/deps/lzma/DOC/lzma-specification.txt#_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\n  dictSize = (p == 40) ? 0xFFFFFFFF : (((UInt32)2 | ((p) & 1)) << ((p) / 2 + 11));\n```\n\n----------------------------------------\n\nTITLE: Template Metaprogramming: Disabling Templates (C++)\nDESCRIPTION: This snippet illustrates how to disable a template under specific conditions using `kj::EnableIf`. It shows an example of a `mutate` function that is only enabled when the template parameter `T` is not const.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/style-guide.md#_snippet_11\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <typename T, typename = kj::EnableIf(!isConst<T>())>\nvoid mutate(T& ptr);\n// T must not be const.\n```\n\n----------------------------------------\n\nTITLE: Inheriting Types via Template Parameter\nDESCRIPTION: This example shows an alternative way to specify the base class when defining inheritance across multiple modules, using the template parameter of `py::class_`. It also requires importing the base module.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/misc.rst#_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\npy::module::import(\"basic\");\n\npy::class_<Dog, Pet>(m, \"Dog\")\n    .def(py::init<const std::string &>())\n    .def(\"bark\", &Dog::bark);\n```\n\n----------------------------------------\n\nTITLE: Defining Cap'n Proto RPC Headers\nDESCRIPTION: This snippet defines the header files for the Cap'n Proto RPC library. These headers define the interfaces and data structures used for building RPC applications. They include definitions for RPC services, capabilities, and related functionalities.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/c++/src/capnp/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(capnp-rpc_headers\n  rpc-prelude.h\n  rpc.h\n  rpc-twoparty.h\n  rpc.capnp.h\n  rpc-twoparty.capnp.h\n  persistent.capnp.h\n  ez-rpc.h\n)\n```\n\n----------------------------------------\n\nTITLE: Character Literal Handling in C++\nDESCRIPTION: This C++ code demonstrates how pybind11 handles character literals (char and wchar_t). The `pass_char` function takes a `char` as input, and the `pass_wchar` function takes a `wchar_t` as input. Both functions simply return the character they receive.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/cast/strings.rst#_snippet_11\n\nLANGUAGE: C++\nCODE:\n```\nm.def(\"pass_char\", [](char c) { return c; });\nm.def(\"pass_wchar\", [](wchar_t w) { return w; });\n```\n\n----------------------------------------\n\nTITLE: Source File Template C++\nDESCRIPTION: This is the standard source file template to be used when creating new source files. It includes copyright information, necessary includes, and namespace declaration.  The corresponding header file should always be included first.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/style-guide.md#_snippet_18\n\nLANGUAGE: C++\nCODE:\n```\n// Project Name - Project brief description\n// Copyright (c) 2015 Primary Author and contributors\n//\n// Licensed under the Whatever License blah blah no warranties.\n\n#include \"this-module.h\"\n#include <other-module.h>\n\nnamespace myproject {\n\n// definitions\n\n}  // namespace myproject\n```\n\n----------------------------------------\n\nTITLE: Vectorized Function Usage in Python\nDESCRIPTION: This shows an example of how to call a vectorized function from Python with NumPy arrays. The arrays `x` and `y` are automatically converted into the required types, and the scalar `z` is replicated to match the size of the arrays.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/pycpp/numpy.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> x = np.array([[1, 3],[5, 7]])\n>>> y = np.array([[2, 4],[6, 8]])\n>>> z = 3\n>>> result = vectorized_func(x, y, z)\n```\n\n----------------------------------------\n\nTITLE: Find Cap'n Proto Package\nDESCRIPTION: Finds the Cap'n Proto package using CMake's `find_package` command. The `CONFIG` option specifies that the package should be found using a configuration file, and `REQUIRED` ensures that an error is raised if the package is not found. This makes Cap'n Proto functionality available for linking.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/c++/samples/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(CapnProto CONFIG REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: Verifying Type of Polymorphic Objects in Python\nDESCRIPTION: This Python code verifies that when a function returns a base class pointer to a derived class object and the base class is polymorphic, pybind11 will automatically upcast the returned object to the derived class type. This allows access to derived class methods.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/classes.rst#_snippet_20\n\nLANGUAGE: pycon\nCODE:\n```\n>>> p = example.pet_store2()\n>>> type(p)\nPolymorphicDog  # automatically upcast\n```\n\n----------------------------------------\n\nTITLE: Accessing Pointer Fields in Cap'n Proto (C++)\nDESCRIPTION: This example demonstrates the recommended way to access pointer fields multiple times in Cap'n Proto to avoid redundant validation and potential security issues. It shows the difference between inefficient and efficient code.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/doc/cxx.md#_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\n// BAD\nfrob(foo.getBar().getBaz(),\n     foo.getBar().getQux(),\n     foo.getBar().getCorge());\n\n// GOOD\nauto bar = foo.getBar();\nfrob(bar.getBaz(), bar.getQux(), bar.getCorge());\n```\n\n----------------------------------------\n\nTITLE: Defining FileStore interface in Cap'n Proto for streaming\nDESCRIPTION: Defines a `FileStore` interface with `get` and `put` methods using streams. This illustrates a basic streaming capability in Cap'n Proto, where the application is responsible for flow control.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/doc/slides-2017.05.18/index.md#_snippet_0\n\nLANGUAGE: capnp\nCODE:\n```\ninterface FileStore {\n  get @0 (name :Text, stream :Stream);\n  put @1 (name :Text) -> (stream :Stream);\n}\n\ninterface Stream {\n  write @0 (data :Data);\n  end @1 ();\n}\n```\n\n----------------------------------------\n\nTITLE: SVN Checkout Google Test\nDESCRIPTION: This command downloads the Google Test source code from the trunk of the Google Test repository using Subversion (SVN). It creates a local directory named 'googletest-read-only' containing the source files. This is the first step in integrating Google Test into your Xcode project.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/XcodeGuide.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsvn checkout http://googletest.googlecode.com/svn/trunk/ googletest-read-only\n```\n\n----------------------------------------\n\nTITLE: SDL: Fixed joystick hat configuration\nDESCRIPTION: This snippet addresses a bug in the SDL implementation related to joystick hat configuration. The fix corrects code errors that were causing issues with button assignments when using joystick hats. The fix was based on information provided by ShaolinMan.\nSOURCE: https://github.com/openai/retro/blob/master/cores/nes/changelog.txt#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Creating Executable and Setting Properties in CMake\nDESCRIPTION: This CMake snippet creates the executable for the project and sets its properties. It defines compile definitions, links the necessary libraries, and specifies the source files.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/platform/wii/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nset_source_files_properties(${CMAKE_CURRENT_BINARY_DIR}/font.c PROPERTIES GENERATED ON)\nadd_executable(${BINARY_NAME}.elf ${GUI_SRC} main.c)\nset_target_properties(${BINARY_NAME}.elf PROPERTIES COMPILE_DEFINITIONS \"${OS_DEFINES};${FEATURE_DEFINES};${FUNCTION_DEFINES}\")\ntarget_link_libraries(${BINARY_NAME}.elf ${BINARY_NAME} ${OS_LIB})\n```\n\n----------------------------------------\n\nTITLE: Win32: Fixed debugger breakpoint list bug\nDESCRIPTION: This snippet fixes a bug in the debugger's breakpoint list that occurred when trying to delete a breakpoint. The control accidentally had auto-sort enabled, causing discrepancies between what was displayed and what was contained in internal data structures.\nSOURCE: https://github.com/openai/retro/blob/master/cores/nes/changelog.txt#_snippet_41\n\n\n\n----------------------------------------\n\nTITLE: Generating Custom Method ID for 7-Zip/XZ\nDESCRIPTION: This snippet describes the structure for generating a custom 8-byte method ID for 7-Zip and XZ archives. It outlines the usage of a prefix byte (3F), a 5-byte developer ID (random bytes), and a 2-byte method ID.\nSOURCE: https://github.com/openai/retro/blob/master/cores/pce/deps/lzma-16.04/DOC/Methods.txt#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n3F ZZ ZZ ZZ ZZ ZZ MM MM\n\n3F              - Prefix for random IDs (1 byte)\nZZ ZZ ZZ ZZ ZZ  - Developer ID (5 bytes). Use real random bytes. \n                  \nMM MM           - Method ID (2 bytes)\n```\n\n----------------------------------------\n\nTITLE: Conditional Variable Setting Based on System Type (CMake)\nDESCRIPTION: This CMake snippet checks if the system name matches BSD. If it does, it sets the `MANFMT` variable to `mdoc`; otherwise, it sets it to `man`. This allows for system-specific handling of man page formatting.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/libzip/man/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nIF(CMAKE_SYSTEM_NAME MATCHES BSD)\n  SET(MANFMT mdoc)\nELSE()\n  SET(MANFMT man)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Testing with Separate Namespaces in Google Test (C++)\nDESCRIPTION: This code snippet shows how to define separate tests in different namespaces while using the same test case name. This is allowed as long as all test methods in the same test case use the same fixture class (`::testing::Test`).\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/FAQ.md#_snippet_25\n\nLANGUAGE: cpp\nCODE:\n```\nnamespace foo {\nTEST(CoolTest, DoSomething) {\n  SUCCEED();\n}\n}  // namespace foo\n\nnamespace bar {\nTEST(CoolTest, DoSomething) {\n  SUCCEED();\n}\n}  // namespace foo\n```\n\n----------------------------------------\n\nTITLE: Checking Finish State in C++\nDESCRIPTION: The `IsFinishedOK()` function checks if the decoding process has finished correctly. It returns `true` if the `Code` variable is equal to 0, indicating that the data stream is not corrupted, and `false` otherwise. It provides a corruption detection feature.\nSOURCE: https://github.com/openai/retro/blob/master/cores/genesis/core/cd_hw/libchdr/deps/lzma/DOC/lzma-specification.txt#_snippet_6\n\nLANGUAGE: C++\nCODE:\n```\nbool IsFinishedOK() const { return Code == 0; }\n```\n\n----------------------------------------\n\nTITLE: Dynamic Death Test Assertion Loop\nDESCRIPTION: This code snippet demonstrates a death test inside a loop, where the number of iterations is determined at runtime. This showcases the ability to dynamically generate and execute death tests based on the values of variables.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/FAQ.md#_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\nconst int count = GetCount();  // Only known at run time.\nfor (int i = 1; i <= count; i++) {\n  ASSERT_DEATH({\n    double* buffer = new double[i];\n    ... initializes buffer ...\n    Foo(buffer, i)\n  }, \"blah blah\");\n}\n```\n\n----------------------------------------\n\nTITLE: Adding zipcmp executable in CMake\nDESCRIPTION: This snippet adds an executable named 'zipcmp'. It specifies 'zipcmp.c' and any extra source files as the source files to be compiled. It also links the executable against the 'zip' library and installs it to the 'bin' directory.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/libzip/src/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nADD_EXECUTABLE(zipcmp zipcmp.c ${SRC_EXTRA_FILES})\nTARGET_LINK_LIBRARIES(zipcmp zip)\nINSTALL(TARGETS zipcmp RUNTIME DESTINATION bin)\n```\n\n----------------------------------------\n\nTITLE: Downloading Google Test with CMake ExternalProject\nDESCRIPTION: This CMake snippet downloads and builds Google Test as part of a larger CMake project using `ExternalProject_Add`. It configures the download, build, and installation steps.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/README.md#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 2.8.2)\n \nproject(googletest-download NONE)\n \ninclude(ExternalProject)\nExternalProject_Add(googletest\n  GIT_REPOSITORY    https://github.com/google/googletest.git\n  GIT_TAG           master\n  SOURCE_DIR        \"${CMAKE_BINARY_DIR}/googletest-src\"\n  BINARY_DIR        \"${CMAKE_BINARY_DIR}/googletest-build\"\n  CONFIGURE_COMMAND \"\"\n  BUILD_COMMAND     \"\"\n  INSTALL_COMMAND   \"\"\n  TEST_COMMAND      \"\"\n)\n```\n\n----------------------------------------\n\nTITLE: Exporting Classes for Multi-Module Access\nDESCRIPTION: This snippet illustrates how to use the `PYBIND11_EXPORT` macro to ensure that a class defined in one module is accessible from other extension modules, especially when using hidden symbol visibility.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/misc.rst#_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\nclass PYBIND11_EXPORT Dog : public Animal {\n    ...\n};\n```\n\n----------------------------------------\n\nTITLE: Testing Setup with CTest (CMake)\nDESCRIPTION: This snippet sets up the testing environment using CTest if `BUILD_TESTING` is enabled. It includes the CTest module and adds a custom target named 'check' that executes CTest with verbose output.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/c++/src/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(BUILD_TESTING)\n  include(CTest)\n  add_custom_target(check \"${CMAKE_CTEST_COMMAND}\" -V)\nendif()  # BUILD_TESTING\n```\n\n----------------------------------------\n\nTITLE: Installer Config File Example 3\nDESCRIPTION: This config file example defines the title, begin prompt, file to execute, and the parameters to pass to the executed file. The file must start with ;!@Install@!UTF-8! and end with ;!@InstallEnd@!.\nSOURCE: https://github.com/openai/retro/blob/master/cores/pce/deps/lzma-16.04/DOC/installer.txt#_snippet_4\n\nLANGUAGE: Config\nCODE:\n```\n;!@Install@!UTF-8!\nTitle=\"7-Zip 4.01 Update\"\nBeginPrompt=\"Do you want to install the 7-Zip 4.01 Update?\"\nExecuteFile=\"msiexec.exe\"\nExecuteParameters=\"/i 7zip.msi REINSTALL=ALL REINSTALLMODE=vomus\"\n;!@InstallEnd@!\n```\n\n----------------------------------------\n\nTITLE: Sharing Data Between Modules\nDESCRIPTION: This example demonstrates how to share arbitrary C++ objects between separately compiled extension modules using pybind11's shared data mechanism based on Python capsules.  It uses `py::get_shared_data` and `py::set_shared_data`.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/misc.rst#_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\nauto data = (MyData *) py::get_shared_data(\"mydata\");\nif (!data)\n    data = (MyData *) py::set_shared_data(\"mydata\", new MyData(42));\n```\n\n----------------------------------------\n\nTITLE: Calculate posState for Context Selection in LZMA C++\nDESCRIPTION: This code snippet calculates the `posState` variable, which is used as a context to select the appropriate binary tree from `LowCoder` and `MidCoder` arrays in LZMA length decoding. The `posState` is derived from `OutWindow.TotalPos` and `pb`.\nSOURCE: https://github.com/openai/retro/blob/master/cores/genesis/core/cd_hw/libchdr/deps/lzma/DOC/lzma-specification.txt#_snippet_17\n\nLANGUAGE: cpp\nCODE:\n```\nunsigned posState = OutWindow.TotalPos & ((1 << pb) - 1);\n```\n\n----------------------------------------\n\nTITLE: Adding zipmerge executable in CMake\nDESCRIPTION: This snippet adds an executable named 'zipmerge'. It specifies 'zipmerge.c' and any extra source files as the source files to be compiled. It also links the executable against the 'zip' library and installs it to the 'bin' directory.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/libzip/src/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nADD_EXECUTABLE(zipmerge zipmerge.c ${SRC_EXTRA_FILES})\nTARGET_LINK_LIBRARIES(zipmerge zip)\nINSTALL(TARGETS zipmerge RUNTIME DESTINATION bin)\n```\n\n----------------------------------------\n\nTITLE: Importing Python Modules from C++\nDESCRIPTION: This snippet shows how to import a Python module (decimal) and access its attributes (Decimal class) from C++ using pybind11. This allows you to use Python libraries within your C++ code.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/pycpp/object.rst#_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\n// Equivalent to \"from decimal import Decimal\"\npy::object Decimal = py::module::import(\"decimal\").attr(\"Decimal\");\n```\n\n----------------------------------------\n\nTITLE: Setting SDL Build Status in CMake\nDESCRIPTION: This CMake code checks if neither SDL2 nor SDL 1.2 were found. If not, it sets `BUILD_SDL` to OFF in the parent scope, effectively disabling SDL-related builds, and returns from the current scope.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/platform/sdl/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT SDL2_FOUND AND NOT SDL_FOUND)\n\tset(BUILD_SDL OFF PARENT_SCOPE)\n\treturn()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating Cap'n Proto Capnp Compiler Executable\nDESCRIPTION: This snippet creates the `capnpc_capnp` executable, which is a plugin for the Cap'n Proto compiler. It is linked against the `capnp` and `kj` libraries and is responsible for capnp specific functionalities within the compiler.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/c++/src/capnp/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT CAPNP_LITE)\n  add_executable(capnpc_capnp\n    compiler/capnpc-capnp.c++\n  )\n  target_link_libraries(capnpc_capnp capnp kj)\n  set_target_properties(capnpc_capnp PROPERTIES OUTPUT_NAME capnpc-capnp)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Find Root Path in CMake\nDESCRIPTION: This snippet configures the CMAKE_FIND_ROOT_PATH and related modes to search for libraries and includes within the devkitPPC environment. This ensures that the project uses the correct system libraries.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/platform/wii/CMakeToolchain.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_FIND_ROOT_PATH ${DEVKITPPC}/powerpc-eabi)\nset(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER CACHE INTERNAL \"\")\nset(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY CACHE INTERNAL \"\")\nset(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY CACHE INTERNAL \"\")\n```\n\n----------------------------------------\n\nTITLE: Type Definitions in libzip\nDESCRIPTION: This code snippet showcases the new typedefs introduced in libzip for improved readability. Using these typedefs simplifies the code by allowing the use of names like `zip_t` instead of `struct zip`. These typedefs improve code clarity and maintainability.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/libzip/API-CHANGES.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct zip zip_t;\ntypedef struct zip_file zip_file_t;\ntypedef struct zip_source zip_source_t;\ntypedef struct zip_stat zip_stat_t;\n```\n\n----------------------------------------\n\nTITLE: Use Project's TR1 Tuple with Google Test\nDESCRIPTION: This snippet demonstrates how to configure Google Test to use the same TR1 tuple library that the rest of your project uses. This prevents clashes between different tuple implementations. Ensure this flag is set during compilation of Google Test and your tests.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/README.md#_snippet_9\n\nLANGUAGE: c++\nCODE:\n```\n-DGTEST_USE_OWN_TR1_TUPLE=0\n```\n\n----------------------------------------\n\nTITLE: Distance Decoder Initialization C++\nDESCRIPTION: This C++ code initializes the distance decoder components, including the PosSlotDecoder array, AlignDecoder, and PosDecoders. The code loops through the PosSlotDecoder array to initialize each element, initializes the AlignDecoder, and then initializes the probability models in the PosDecoders array.\nSOURCE: https://github.com/openai/retro/blob/master/cores/pce/deps/lzma-16.04/DOC/lzma-specification.txt#_snippet_18\n\nLANGUAGE: C++\nCODE:\n```\nvoid InitDist()\n{\n  for (unsigned i = 0; i < kNumLenToPosStates; i++)\n    PosSlotDecoder[i].Init();\n  AlignDecoder.Init();\n  INIT_PROBS(PosDecoders);\n}\n```\n\n----------------------------------------\n\nTITLE: Specify Python Executable for CMake\nDESCRIPTION: This command is an alternative CMake configuration that explicitly specifies the path to the Python executable. This is helpful if CMake cannot automatically find Python on your system. It ensures that Python-dependent tests are built and run correctly.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/README.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ncmake -DPYTHON_EXECUTABLE=path/to/python -Dgtest_build_tests=ON ${GTEST_DIR}\n```\n\n----------------------------------------\n\nTITLE: Avoid Macro Name Clash in Google Test\nDESCRIPTION: This snippet demonstrates how to rename a Google Test macro to avoid conflicts with other libraries that define the same macro. Replace `FOO` with the actual macro name (e.g., `FAIL`, `SUCCEED`, `TEST`). This should be added to the compiler flags.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/README.md#_snippet_14\n\nLANGUAGE: c++\nCODE:\n```\n-DGTEST_DONT_DEFINE_FOO=1\n```\n\n----------------------------------------\n\nTITLE: Repeating Tests with gtest_repeat\nDESCRIPTION: This explains how to repeat tests multiple times using the `--gtest_repeat` flag or the `GTEST_REPEAT` environment variable. The `--gtest_break_on_failure` flag can be used to stop at the first failure.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/AdvancedGuide.md#_snippet_50\n\nLANGUAGE: text\nCODE:\n```\n$ foo_test --gtest_repeat=1000\n$ foo_test --gtest_repeat=-1\n$ foo_test --gtest_repeat=1000 --gtest_break_on_failure\n$ foo_test --gtest_repeat=1000 --gtest_filter=FooBar\n```\n\n----------------------------------------\n\nTITLE: Writing LZMA Encoded Properties to Header (C)\nDESCRIPTION: This code snippet shows the process of writing encoded LZMA properties to the header of the compressed file. It calls `LzmaEnc_WriteProperties` and then appends the file size to the header.\nSOURCE: https://github.com/openai/retro/blob/master/cores/pce/deps/lzma-16.04/DOC/lzma.txt#_snippet_8\n\nLANGUAGE: C\nCODE:\n```\nByte header[LZMA_PROPS_SIZE + 8];\nsize_t headerSize = LZMA_PROPS_SIZE;\nUInt64 fileSize;\nint i;\n\nres = LzmaEnc_WriteProperties(enc, header, &headerSize);\nfileSize = MyGetFileLength(inFile);\nfor (i = 0; i < 8; i++)\n  header[headerSize++] = (Byte)(fileSize >> (8 * i));\nMyWriteFileAndCheck(outFile, header, headerSize)\n```\n\n----------------------------------------\n\nTITLE: Initializing Cap'n Proto struct using Builders in C++\nDESCRIPTION: This C++ code demonstrates initializing a Cap'n Proto struct using builder classes. It sets values using builder methods like `setFoo`, `setBar`, and `setQux`. This is an alternative, but less idiomatic, approach.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/doc/slides-2017.05.18/index.md#_snippet_16\n\nLANGUAGE: c++\nCODE:\n```\ncapnp::MallocMessageBuilder message;\n\nMyStruct::Builder root = message.initRoot<MyStruct>();\nroot.setFoo(123);\nroot.setBar(\"foo\");\nInnerStruct::Builder inner = root.initBaz();\ninner.setQux(true);\n\ncapnp::writeMessageToFd(fd, message);\n```\n\n----------------------------------------\n\nTITLE: Extracting Sega Genesis ROM Header\nDESCRIPTION: This snippet describes the analysis of the initial bytes of a Sega Genesis ROM. The initial bytes contain information about the game's title, copyright, and other metadata. The analysis process involves reading a specific number of bytes and interpreting them according to the Genesis ROM format.\nSOURCE: https://github.com/openai/retro/blob/master/tests/roms/Dekadence-Dekadrive.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Defining Build Options\nDESCRIPTION: Defines CMake options to control the building of googletest and googlemock. The options are used to optionally build and install these subprojects.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\noption(BUILD_GTEST \"Builds the googletest subproject\" OFF)\n\n#Note that googlemock target already builds googletest\noption(BUILD_GMOCK \"Builds the googlemock subproject\" ON)\n\ncmake_dependent_option(INSTALL_GTEST \"Enable installation of googletest. (Projects embedding googletest may want to turn this OFF.)\" ON \"BUILD_GTEST OR BUILD_GMOCK\" OFF)\ncmake_dependent_option(INSTALL_GMOCK \"Enable installation of googlemock. (Projects embedding googlemock may want to turn this OFF.)\" ON \"BUILD_GMOCK\" OFF)\n```\n\n----------------------------------------\n\nTITLE: Setting System Names and Architecture for Cross-Compilation\nDESCRIPTION: This snippet sets the CMake system name to Generic and the system processor to arm, indicating that this is a cross-compilation setup for an ARM-based target. It also sets the CMAKE_LIBRARY_ARCHITECTURE which represents the ABI for the target.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/platform/3ds/CMakeToolchain.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_SYSTEM_NAME Generic CACHE INTERNAL \"system name\")\nset(CMAKE_SYSTEM_PROCESSOR arm CACHE INTERNAL \"processor\")\nset(CMAKE_LIBRARY_ARCHITECTURE arm-none-eabi CACHE INTERNAL \"abi\")\n```\n\n----------------------------------------\n\nTITLE: LZMA Compression Example 1\nDESCRIPTION: Compresses file.bin to file.lzma using LZMA with a 64 KB dictionary size (2^16=64K) and 0 literal context bits. The -lc0 parameter allows reduction of memory requirements during decompression. This example shows a basic compression scenario with dictionary size and literal context control.\nSOURCE: https://github.com/openai/retro/blob/master/cores/genesis/core/cd_hw/libchdr/deps/lzma/DOC/lzma-sdk.txt#_snippet_3\n\nLANGUAGE: Text\nCODE:\n```\nLZMA e file.bin file.lzma -d16 -lc0\n```\n\n----------------------------------------\n\nTITLE: Set generated source file properties\nDESCRIPTION: Sets the `GENERATED` property for the `icons.o` and `backdrop.o` object files. This indicates that these files are generated during the build process and should not be treated as source files.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/platform/psp2/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nset_source_files_properties(${CMAKE_CURRENT_BINARY_DIR}/icons.o\n                            ${CMAKE_CURRENT_BINARY_DIR}/backdrop.o\n                            PROPERTIES GENERATED ON)\n```\n\n----------------------------------------\n\nTITLE: Static const member definition\nDESCRIPTION: This code snippet illustrates the requirement of defining static const member variables outside the class body in C++.  It highlights that failing to do so can lead to linker errors, especially when using these variables in Google Test assertions.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/FAQ.md#_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\n// foo.h\nclass Foo {\n  ...\n  static const int kBar = 100;\n};\n\n// foo.cc\nconst int Foo::kBar;  // No initializer here.\n```\n\n----------------------------------------\n\nTITLE: C++ Inheritance Relationship\nDESCRIPTION: This C++ code defines two structs, `Pet` and `Dog`, where `Dog` inherits from `Pet`. This establishes an inheritance relationship that can be reflected in the Python bindings using pybind11.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/classes.rst#_snippet_11\n\nLANGUAGE: cpp\nCODE:\n```\nstruct Pet {\n    Pet(const std::string &name) : name(name) { }\n    std::string name;\n};\n\nstruct Dog : Pet {\n    Dog(const std::string &name) : Pet(name) { }\n    std::string bark() const { return \"woof!\"; }\n};\n```\n\n----------------------------------------\n\nTITLE: External Module Setup\nDESCRIPTION: This snippet creates a pybind11 module named 'external_module' from 'external_module.cpp' with thin LTO enabled. It sets the output directory for the library and adds a dependency on the 'external_module' to 'cpptest'.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/tests/test_embed/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\npybind11_add_module(external_module THIN_LTO external_module.cpp)\nset_target_properties(external_module PROPERTIES LIBRARY_OUTPUT_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})\nadd_dependencies(cpptest external_module)\n```\n\n----------------------------------------\n\nTITLE: Referring to Constants (Cap'n Proto)\nDESCRIPTION: This example illustrates how to refer to a constant inside another value, such as another constant or the default value of a field. Note the use of scope qualification (e.g., `.foo`, `Corge.qux`).\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/doc/language.md#_snippet_18\n\nLANGUAGE: capnp\nCODE:\n```\nconst foo :Int32 = 123;\nconst bar :Text = \"Hello\";\nconst baz :SomeStruct = (id = .foo, message = .bar);\n{% endhighlight %}\n```\n\n----------------------------------------\n\nTITLE: Linking GoogleTest in Automake\nDESCRIPTION: This Automake snippet defines the executable `testapp`, its source files, compiler flags, and linker flags, utilizing variables populated by the Autoconf step to correctly link against the GoogleTest library.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/Pkgconfig.md#_snippet_2\n\nLANGUAGE: automake\nCODE:\n```\ncheck_PROGRAMS = testapp\nTESTS = $(check_PROGRAMS)\n\ntestapp_SOURCES = samples/sample3_unittest.cc\ntestapp_CXXFLAGS = $(GTEST_CFLAGS)\ntestapp_LDADD = $(GTEST_LIBS)\n```\n\n----------------------------------------\n\nTITLE: Launch Jekyll Local Server\nDESCRIPTION: Launches a local Jekyll server with live reload enabled. This allows you to preview changes to the website as you make them. The `--watch` flag ensures that the server automatically rebuilds the site when changes are detected.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/doc/README.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\njekyll serve --watch\n```\n\n----------------------------------------\n\nTITLE: Exporting a Function from a DLL (Visual C++)\nDESCRIPTION: This code snippet demonstrates how to export a function from a DLL using `__declspec(dllexport)` in Visual C++. This is required to prevent the Visual C++ linker from discarding the library containing the tests if it's not directly referenced.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/Primer.md#_snippet_8\n\nLANGUAGE: cpp\nCODE:\n```\n__declspec(dllexport) int PullInMyLibrary() { return 0; }\n```\n\n----------------------------------------\n\nTITLE: Scale Matrix Slice - Python\nDESCRIPTION: This Python code calls the `scale` function on a slice of a NumPy array. The slice `myarray[0::2, 2:9:3]` selects every other row and specific columns, which the C++ code can handle due to the use of `py::EigenDRef`.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/cast/eigen.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# a = np.array(...)\nscale_by_2(myarray[0::2, 2:9:3])\n```\n\n----------------------------------------\n\nTITLE: Calling Python Functions and Casting the Result\nDESCRIPTION: This code shows how to call a Python function from C++ and cast the result back to a C++ type (MyClass). This allows you to use Python functions and work with the results in C++.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/pycpp/object.rst#_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\npy::function f = <...>;\npy::object result_py = f(1234, \"hello\", some_instance);\nMyClass &result = result_py.cast<MyClass>();\n```\n\n----------------------------------------\n\nTITLE: Project Setup with pybind11 Subdirectory\nDESCRIPTION: This snippet sets the minimum required CMake version, defines the project name, sets the PYBIND11_INSTALL and PYBIND11_EXPORT_NAME variables, and adds pybind11 as a subdirectory. It prepares the project to use pybind11 for Python embedding.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/tests/test_cmake_build/subdirectory_embed/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.0)\nproject(test_subdirectory_embed CXX)\n\nset(PYBIND11_INSTALL ON CACHE BOOL \"\")\nset(PYBIND11_EXPORT_NAME test_export)\n\nadd_subdirectory(${PYBIND11_PROJECT_DIR} pybind11)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories (KJ)\nDESCRIPTION: Sets the include directories for the KJ library. This ensures that external consumers of the library can find the necessary header files. Uses `$<BUILD_INTERFACE:...>` and `$<INSTALL_INTERFACE:...>` to specify different include paths for build and install time.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/c++/src/kj/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(kj INTERFACE\n  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/..>\n  $<INSTALL_INTERFACE:include>\n)\n```\n\n----------------------------------------\n\nTITLE: Installing KJ Library and Headers\nDESCRIPTION: Installs the KJ library and header files to the specified directories. `INSTALL_TARGETS_DEFAULT_ARGS` is assumed to be defined elsewhere. Sets the destination directory for the install and uses pre-defined macros like `CMAKE_INSTALL_INCLUDEDIR`.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/c++/src/kj/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS kj ${INSTALL_TARGETS_DEFAULT_ARGS})\ninstall(FILES ${kj_headers} DESTINATION \"${CMAKE_INSTALL_INCLUDEDIR}/kj\")\ninstall(FILES ${kj-parse_headers} DESTINATION \"${CMAKE_INSTALL_INCLUDEDIR}/kj/parse\")\ninstall(FILES ${kj-std_headers} DESTINATION \"${CMAKE_INSTALL_INCLUDEDIR}/kj/std\")\n```\n\n----------------------------------------\n\nTITLE: Using Aliases (Cap'n Proto)\nDESCRIPTION: This example demonstrates the use of `using` to create aliases for types in Cap'n Proto. This can simplify code and make it more readable when dealing with long scopes.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/doc/language.md#_snippet_20\n\nLANGUAGE: capnp\nCODE:\n```\nstruct Qux {\n  using Foo.Bar;\n  bar @0 :Bar;\n}\n\nstruct Corge {\n  using T = Foo.Bar;\n  bar @0 :T;\n}\n{% endhighlight %}\n```\n\n----------------------------------------\n\nTITLE: Specializing holder_helper for custom pointer types\nDESCRIPTION: This example shows how to specialize the holder_helper struct to provide a custom get() function for a custom smart pointer type. This is necessary if the smart pointer doesn't provide a standard get() method.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/smart_ptrs.rst#_snippet_10\n\nLANGUAGE: cpp\nCODE:\n```\n// Always needed for custom holder types\nPYBIND11_DECLARE_HOLDER_TYPE(T, SmartPtr<T>);\n\n// Only needed if the type's `.get()` goes by another name\nnamespace pybind11 { namespace detail {\n    template <typename T>\n    struct holder_helper<SmartPtr<T>> { // <-- specialization\n        static const T *get(const SmartPtr<T> &p) { return p.getPointer(); }\n    };\n}}\n```\n\n----------------------------------------\n\nTITLE: Closing Encryption/Decryption Stream\nDESCRIPTION: This code snippet closes the encryption or decryption stream using `fcrypt_end`. It requires a buffer for the authentication code and the encryption context (`fcrypt_ctx`). The return value is the size of the authentication code. The authentication code is returned in the `achMAC` buffer.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/libzip/docs/aes_coding_tips.txt#_snippet_7\n\nLANGUAGE: C\nCODE:\n```\nint rc = fcrypt_end(\n  achMAC, // on return contains the authentication code\n  &zctx); // encryption context\n```\n\n----------------------------------------\n\nTITLE: 7-Zip LZMA Compression (No Filter)\nDESCRIPTION: Compresses the file a.bin into a 7z archive named a1.7z using LZMA compression with default settings. The -m0=lzma option specifies the compression method to be LZMA. This serves as a baseline for comparison against filtered compression.\nSOURCE: https://github.com/openai/retro/blob/master/cores/genesis/core/cd_hw/libchdr/deps/lzma/DOC/lzma-sdk.txt#_snippet_6\n\nLANGUAGE: Text\nCODE:\n```\n7z a a1.7z a.bin -m0=lzma\n```\n\n----------------------------------------\n\nTITLE: Install Jekyll and Pygments\nDESCRIPTION: Installs Jekyll (a static site generator) and Pygments (a syntax highlighting library), both of which are required for building the Cap'n Proto website. Jekyll is used to generate the site from Markdown files, and Pygments highlights code snippets.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/doc/README.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nsudo gem install jekyll pygments.rb\n```\n\n----------------------------------------\n\nTITLE: CMake Project Setup and Subdirectory Addition\nDESCRIPTION: This snippet initializes the CMake project, specifies the minimum required CMake version, declares the project name, and adds a subdirectory containing the pybind11 library. It sets up the environment to compile a C++ project using pybind11.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/tests/test_cmake_build/subdirectory_target/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.0)\nproject(test_subdirectory_target CXX)\n\nadd_subdirectory(${PYBIND11_PROJECT_DIR} pybind11)\n```\n\n----------------------------------------\n\nTITLE: Updating Distance History (Rep Match 1) in LZMA Decoder (C++)\nDESCRIPTION: This code snippet updates the distance history when a 'Rep Match 1' is encountered. The distance `rep1` is moved to `rep0`, and the original value of `rep0` is stored in `rep1`. This shifts the distance history to reflect the recent match.\nSOURCE: https://github.com/openai/retro/blob/master/cores/pce/deps/lzma-16.04/DOC/lzma-specification.txt#_snippet_28\n\nLANGUAGE: C++\nCODE:\n```\nUInt32 dist = rep1;\nrep1 = rep0;\nrep0 = dist;\n```\n\n----------------------------------------\n\nTITLE: Setting Python Version with CMake\nDESCRIPTION: This snippet demonstrates how to set the target Python version or specify an exact Python installation using CMake. `PYBIND11_PYTHON_VERSION` sets the target version, while `PYTHON_EXECUTABLE` allows specifying a path to a specific Python executable.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/compiling.rst#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncmake -DPYBIND11_PYTHON_VERSION=3.6 ..\n# or\ncmake -DPYTHON_EXECUTABLE=path/to/python ..\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of RUN_ALL_TESTS() (C++)\nDESCRIPTION: This code demonstrates the incorrect and dangerous way to use `RUN_ALL_TESTS()`, which leads to tests always being considered successful even if assertions fail. It highlights the importance of returning the value from `RUN_ALL_TESTS()` from the `main()` function.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/FAQ.md#_snippet_12\n\nLANGUAGE: cpp\nCODE:\n```\nRUN_ALL_TESTS();\n```\n\n----------------------------------------\n\nTITLE: Check CMake Version\nDESCRIPTION: This code snippet checks if the CMake version is less than 3.1. If it is, the function returns, effectively skipping the rest of the file. This ensures that the CMake features used are compatible with the environment.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/tests/test_cmake_build/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(CMAKE_VERSION VERSION_LESS 3.1)\n  # 3.0 needed for interface library for subdirectory_target/installed_target\n  # 3.1 needed for cmake -E env for testing\n  return()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Binding add function with default arguments\nDESCRIPTION: This code demonstrates how to bind the `add` function with default arguments using pybind11. The `py::arg` objects are assigned default values using the `=` operator, which are then passed to the Python function.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/basics.rst#_snippet_12\n\nLANGUAGE: cpp\nCODE:\n```\nm.def(\"add\", &add, \"A function which adds two numbers\",\n      py::arg(\"i\") = 1, py::arg(\"j\") = 2);\n```\n\n----------------------------------------\n\nTITLE: Enable Dynamic Attributes for C++ Classes\nDESCRIPTION: This code demonstrates how to enable dynamic attributes for a C++ class exposed to Python using pybind11. The `py::dynamic_attr()` tag is added to the `py::class_` constructor to enable the addition of arbitrary attributes to instances of the class in Python.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/classes.rst#_snippet_9\n\nLANGUAGE: cpp\nCODE:\n```\npy::class_<Pet>(m, \"Pet\", py::dynamic_attr())\n    .def(py::init<>())\n    .def_readwrite(\"name\", &Pet::name);\n```\n\n----------------------------------------\n\nTITLE: Finding Math Library with CMake\nDESCRIPTION: This snippet attempts to locate the math library (`libm`) on non-Windows systems. If found, it's stored in the `M_LIBRARY` variable. A status message is displayed if the library isn't found.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/third-party/libpng/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT WIN32)\n  find_library(M_LIBRARY\n    NAMES m\n    PATHS /usr/lib /usr/local/lib\n  )\n  if(NOT M_LIBRARY)\n    message(STATUS \"math lib 'libm' not found; floating point support disabled\")\n  endif()\nelse()\n  # not needed on windows\n  set(M_LIBRARY \"\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Using shared_ptr as a Holder Type\nDESCRIPTION: This code demonstrates how to specify std::shared_ptr as the holder type for a class in pybind11. This causes pybind11 to use shared pointers to manage references to the object, allowing for shared ownership between C++ and Python.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/smart_ptrs.rst#_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\npy::class_<Example, std::shared_ptr<Example> /* <- holder type */> obj(m, \"Example\");\n```\n\n----------------------------------------\n\nTITLE: Instantiate Type-Parameterized Test Case C++\nDESCRIPTION: Instantiates the type-parameterized test case with a specific list of types using `INSTANTIATE_TYPED_TEST_CASE_P()`. The first argument is a prefix to distinguish different instances. The second is the test case name, and the third is the type list.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/AdvancedGuide.md#_snippet_35\n\nLANGUAGE: cpp\nCODE:\n```\ntypedef ::testing::Types<char, int, unsigned int> MyTypes;\nINSTANTIATE_TYPED_TEST_CASE_P(My, FooTest, MyTypes);\n```\n\n----------------------------------------\n\nTITLE: Restoring Default Visibility CMake\nDESCRIPTION: This snippet provides a workaround to restore default symbol visibility using CMake, but it's not recommended in the long run. It's useful if the Python module is doubling as a shared library with dependents.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/upgrade.rst#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(mymodule PRIVATE pybind11::module)\n\nadd_library(restore_default_visibility INTERFACE)\ntarget_compile_options(restore_default_visibility INTERFACE -fvisibility=default)\ntarget_link_libraries(mymodule PRIVATE restore_default_visibility)\n```\n\n----------------------------------------\n\nTITLE: Initializing Cap'n Proto struct imperatively in C++\nDESCRIPTION: This C++ code shows the traditional, imperative way to initialize a Cap'n Proto struct using `MallocMessageBuilder` and setter methods.  It initializes the `foo`, `bar`, and nested `baz.qux` fields.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/doc/slides-2017.05.18/index.md#_snippet_12\n\nLANGUAGE: c++\nCODE:\n```\ncapnp::MallocMessageBuilder message;\n\nauto root = message.initRoot<MyStruct>();\nroot.setFoo(123);\nroot.setBar(\"foo\");\nauto inner = root.initBaz();\ninner.setQux(true);\n\ncapnp::writeMessageToFd(fd, message);\n```\n\n----------------------------------------\n\nTITLE: unix-netplay: Defined SOL_TCP if not defined\nDESCRIPTION: This snippet adds a definition for SOL_TCP in unix-netplay.c if it is not already defined. This ensures that the code compiles correctly on systems where SOL_TCP may not be a standard definition. The code is:\n\n\t\t#ifndef SOL_TCP\n\t\t#define SOL_TCP IPPROTO_TCP\n\t\t#endif\nSOURCE: https://github.com/openai/retro/blob/master/cores/nes/changelog.txt#_snippet_12\n\nLANGUAGE: C\nCODE:\n```\n#ifndef SOL_TCP\n#define SOL_TCP IPPROTO_TCP\n#endif\n```\n\n----------------------------------------\n\nTITLE: Set OBJCOPY command\nDESCRIPTION: Sets the `OBJCOPY_CMD` variable, which defines the command to use for converting binary files into object files. It specifies the input format as binary, the output format as ELF32, and the architecture as ARM.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/platform/psp2/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset(OBJCOPY_CMD ${OBJCOPY} -I binary -O elf32-littlearm -B arm)\n```\n\n----------------------------------------\n\nTITLE: Declaring owned pointer with kj::Own<T> in C++\nDESCRIPTION: This snippet explains that when declaring a pointer to an object that is owned by the current scope, the `kj::Own<T>` smart pointer should be used. Standard C++ pointers and references should only point to objects that are not owned by the current scope.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/style-guide.md#_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\nkj::Own<T> myOwnedObject;\n```\n\n----------------------------------------\n\nTITLE: Google Mock: Incorrect Side Effect Handling with WillRepeatedly\nDESCRIPTION: This snippet demonstrates an incorrect way to handle side effects with `WillRepeatedly()` where the side effect is only evaluated once when `EXPECT_CALL()` is executed, not each time the mock function is called.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googlemock/docs/ForDummies.md#_snippet_10\n\nLANGUAGE: C++\nCODE:\n```\nint n = 100;\nEXPECT_CALL(turtle, GetX())\n.Times(4)\n.WillRepeatedly(Return(n++));\n```\n\n----------------------------------------\n\nTITLE: Multi-call Decompressing Initialization (C)\nDESCRIPTION: This code snippet shows how to initialize the CLzmaDec structure for multi-call decompression. It includes steps for allocating memory for the state and dictionary using LZMA properties obtained from the header.\nSOURCE: https://github.com/openai/retro/blob/master/cores/pce/deps/lzma-16.04/DOC/lzma.txt#_snippet_2\n\nLANGUAGE: C\nCODE:\n```\nCLzmaDec state;\nLzmaDec_Constr(&state);\nres = LzmaDec_Allocate(&state, header, LZMA_PROPS_SIZE, &g_Alloc);\nif (res != SZ_OK)\n  return res;\n```\n\n----------------------------------------\n\nTITLE: Aliasing Fixture Class for Death Tests in Google Test\nDESCRIPTION: This code snippet demonstrates how to create an alias for a test fixture class when the same fixture is used for both normal tests and death tests.  This avoids code duplication.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/AdvancedGuide.md#_snippet_10\n\nLANGUAGE: cpp\nCODE:\n```\nclass FooTest : public ::testing::Test { ... };\n\ntypedef FooTest FooDeathTest;\n\nTEST_F(FooTest, DoesThis) {\n  // normal test\n}\n\nTEST_F(FooDeathTest, DoesThat) {\n  // death test\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Probability Array in C++\nDESCRIPTION: The `INIT_PROBS` macro initializes an array of `CProb` variables. It iterates through the array and sets each element to `PROB_INIT_VAL`, which represents the state where probabilities of symbols 0 and 1 are equal to 0.5.\nSOURCE: https://github.com/openai/retro/blob/master/cores/genesis/core/cd_hw/libchdr/deps/lzma/DOC/lzma-specification.txt#_snippet_10\n\nLANGUAGE: C++\nCODE:\n```\n#define INIT_PROBS(p) \\\n { for (unsigned i = 0; i < sizeof(p) / sizeof(p[0]); i++) p[i] = PROB_INIT_VAL; }\n```\n\n----------------------------------------\n\nTITLE: Streams Info Structure\nDESCRIPTION: Defines the overall Streams Info structure, which includes PackInfo, CodersInfo, and SubStreamsInfo. This section organizes the information needed to understand how data is packed, coded, and divided into substreams within the archive.\nSOURCE: https://github.com/openai/retro/blob/master/cores/pce/deps/lzma-16.04/DOC/7zFormat.txt#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n[]\nPackInfo\n[]\n\n\n[]\nCodersInfo\n[]\n\n\n[]\nSubStreamsInfo\n[]\n\nBYTE NID::kEnd\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Archive Prefixes in C\nDESCRIPTION: This snippet demonstrates the C API for setting and retrieving an archive prefix. It allows prepending data to a zip archive, which can be useful for creating self-extracting archives or adding metadata.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/libzip/TODO.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nzip_set_archive_prefix(struct zip *za, const zip_uint8_t *data, zip_uint64_t length);\nconst zip_uint8_t *zip_get_archive_prefix(struct zip *za, zip_uint64_t *lengthp);\n```\n\n----------------------------------------\n\nTITLE: svga.c Out of Bounds Array Access Fix\nDESCRIPTION: This snippet describes fixing an out of bounds array access in 'svga.c' within the `SetNESDeemph()` function. The variable \"lastd\" was initialized incorrectly. This fix prevents a potential crash and was found with the help of Jarod CANAL.\nSOURCE: https://github.com/openai/retro/blob/master/cores/nes/changelog.txt#_snippet_77\n\n\n\n----------------------------------------\n\nTITLE: Added per-game hacks for Shougi Meikan\nDESCRIPTION: This snippet introduces per-game hacks specifically designed for \"Shougi Meikan '92\" and \"Shougi Meikan '93.\" These hacks likely address specific issues or compatibility problems encountered with these games, providing customized solutions within the emulator.\nSOURCE: https://github.com/openai/retro/blob/master/cores/nes/changelog.txt#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Google Mock: Combining Times and WillOnce with Default Action\nDESCRIPTION: This snippet demonstrates how `Times()` and `WillOnce()` interact, showing that the default action will be used for calls after all `WillOnce()` clauses have been consumed.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googlemock/docs/ForDummies.md#_snippet_11\n\nLANGUAGE: C++\nCODE:\n```\nusing ::testing::Return;\nEXPECT_CALL(turtle, GetY())\n.Times(4)\n.WillOnce(Return(100));\n```\n\n----------------------------------------\n\nTITLE: Binding Arithmetic Enumerations with pybind11 (C++)\nDESCRIPTION: This snippet demonstrates how to enable arithmetic and bit-level operations (comparisons, and, or, xor, negation, etc.) for enumerations bound with pybind11, using the `py::arithmetic()` tag.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/classes.rst#_snippet_30\n\nLANGUAGE: cpp\nCODE:\n```\npy::enum_<Pet::Kind>(pet, \"Kind\", py::arithmetic())\n   ...\n```\n\n----------------------------------------\n\nTITLE: Using ASSERT_NO_FATAL_FAILURE in Google Test C++\nDESCRIPTION: This code snippet shows how to use the ASSERT_NO_FATAL_FAILURE macro to ensure that a given statement does not generate any new fatal failures. It executes the statement and verifies whether it produces fatal failures.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/AdvancedGuide.md#_snippet_15\n\nLANGUAGE: C++\nCODE:\n```\nASSERT_NO_FATAL_FAILURE(Foo());\n\nint i;\nEXPECT_NO_FATAL_FAILURE({\n  i = Bar();\n});\n```\n\n----------------------------------------\n\nTITLE: Calling Python Methods from C++\nDESCRIPTION: This code demonstrates how to call a method (exp) of a Python object (pi, a Decimal object) from C++ using pybind11. It then prints the result using the Python print function.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/pycpp/object.rst#_snippet_7\n\nLANGUAGE: cpp\nCODE:\n```\n// Calculate e^π in decimal\npy::object exp_pi = pi.attr(\"exp\")();\npy::print(py::str(exp_pi));\n```\n\n----------------------------------------\n\nTITLE: Setting Build Options in CMake\nDESCRIPTION: These CMake options control whether to build shared libraries and Google Mock's own tests. BUILD_SHARED_LIBS is a standard CMake variable, made prominent for GUI usage.  gmock_build_tests enables the compilation of tests for Google Mock itself.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googlemock/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\noption(BUILD_SHARED_LIBS \"Build shared libraries (DLLs).\" OFF)\n\noption(gmock_build_tests \"Build all of Google Mock's own tests.\" OFF)\n```\n\n----------------------------------------\n\nTITLE: Mapper 90 and 209 swapping\nDESCRIPTION: This snippet describes a swap between mapper 90 and 209. Mortal Kombat 3 was moved back to mapper 90, and Shin Samurai Spirits 2 was moved to mapper 209. Mapper 90 has the fancy nametable select mode disabled, with mapper 209 having it enabled.\nSOURCE: https://github.com/openai/retro/blob/master/cores/nes/changelog.txt#_snippet_31\n\n\n\n----------------------------------------\n\nTITLE: Configure template XML file\nDESCRIPTION: Configures the `template.xml.in` file, replacing variables with their values to generate the `template.xml` file. This XML file likely describes the application's metadata and layout for the PS Vita's LiveArea.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/platform/psp2/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\nconfigure_file(${CMAKE_CURRENT_SOURCE_DIR}/template.xml.in ${CMAKE_CURRENT_BINARY_DIR}/template.xml)\n```\n\n----------------------------------------\n\nTITLE: Defining a Test with Fixture\nDESCRIPTION: This snippet demonstrates how to define a test case using the TEST_F() macro in Google Test. The first argument is the name of the test fixture class, and the second argument is the name of the test. The test body can access members of the test fixture class.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/Primer.md#_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nTEST_F(test_case_name, test_name) {\n ... test body ...\n}\n```\n\n----------------------------------------\n\nTITLE: Cap'n Proto Comment Example\nDESCRIPTION: This code shows how to include single-line comments in a Cap'n Proto schema.  Comments start with a hash symbol (`#`) and extend to the end of the line.  Comments for documentation purposes are placed after the declaration they describe.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/doc/language.md#_snippet_1\n\nLANGUAGE: capnp\nCODE:\n```\n# This is a comment.\n```\n\n----------------------------------------\n\nTITLE: Call pybind11 Build Test Function\nDESCRIPTION: Calls the `pybind11_add_build_test` function for different test scenarios: subdirectory_function, subdirectory_target, and conditionally, subdirectory_embed (unless PYTHON_MODULE_EXTENSION matches \"pypy\"). These calls set up specific tests for different aspects of the pybind11 build process.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/tests/test_cmake_build/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\npybind11_add_build_test(subdirectory_function)\npybind11_add_build_test(subdirectory_target)\nif(NOT ${PYTHON_MODULE_EXTENSION} MATCHES \"pypy\")\n  pybind11_add_build_test(subdirectory_embed)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing Executables (CMake)\nDESCRIPTION: This code installs the libpng-config executables into the `bin` directory of the installation prefix. The installation is skipped on Windows systems, or if `SKIP_INSTALL_EXECUTABLES` or `SKIP_INSTALL_ALL` is set.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/third-party/libpng/CMakeLists.txt#_snippet_21\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT SKIP_INSTALL_EXECUTABLES AND NOT SKIP_INSTALL_ALL )\n  if(NOT WIN32 OR CYGWIN OR MINGW)\n    install(PROGRAMS ${CMAKE_CURRENT_BINARY_DIR}/libpng-config DESTINATION bin)\n    install(PROGRAMS ${CMAKE_CURRENT_BINARY_DIR}/${PNGLIB_NAME}-config\n            DESTINATION bin)\n  endif(NOT WIN32 OR CYGWIN OR MINGW)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Default Actions for a Specific Method with Google Mock in C++\nDESCRIPTION: This snippet shows how to customize the default action for a particular method using `ON_CALL()`.  The code sets a default action based on matching the method and its arguments and optionally using a multi-argument matcher.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googlemock/docs/CheatSheet.md#_snippet_6\n\nLANGUAGE: C++\nCODE:\n```\nON_CALL(mock_object, method(matchers))\n    .With(multi_argument_matcher)  ?\n    .WillByDefault(action);\n```\n\n----------------------------------------\n\nTITLE: Helper Function for Test Parameterization\nDESCRIPTION: This code demonstrates an alternative way of parameterizing tests using a helper function. While functional, the document explains the drawbacks and suggests using `::testing::TestWithParam<T>` instead.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/AdvancedGuide.md#_snippet_23\n\nLANGUAGE: c++\nCODE:\n```\nvoid TestFooHelper(bool flag_value) {\n  flag = flag_value;\n  // A code to test foo().\n}\n\nTEST(MyCodeTest, TestFoo) {\n  TestFooHelper(false);\n  TestFooHelper(true);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Target Sources\nDESCRIPTION: This snippet adds private source files to the `gym-retro-integration` target, including the core files (`CORES`), core info files (`COREINFO`), and the logo icon. These sources are not exposed to other targets.\nSOURCE: https://github.com/openai/retro/blob/master/src/ui/CMakeLists.txt#_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(gym-retro-integration PRIVATE \"${CORES}\" \"${COREINFO}\" \"${CMAKE_CURRENT_SOURCE_DIR}/logo.icns\")\n```\n\n----------------------------------------\n\nTITLE: Executing Python code using C++11 raw string literals\nDESCRIPTION: This snippet shows how to use C++11 raw string literals with py::exec to execute Python code. Raw string literals simplify handling multi-line Python code within C++ by avoiding excessive escaping.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/pycpp/utilities.rst#_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\npy::exec(R\"(\n    x = get_answer()\n    if x == 42:\n        print('Hello World!')\n    else:\n        print('Bye!')\n    )\", scope\n);\n```\n\n----------------------------------------\n\nTITLE: Find OBJCOPY executable\nDESCRIPTION: Finds the `objcopy` executable, which is used for converting binary files into object files. The `cross_prefix` variable likely contains the prefix for the cross-compilation toolchain.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/platform/psp2/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_program(OBJCOPY ${cross_prefix}objcopy)\n```\n\n----------------------------------------\n\nTITLE: Updating Version Macros in common.h\nDESCRIPTION: This snippet describes the action to update version macros within the `include/pybind11/detail/common.h` file. This involves setting `PYBIND11_VERSION_MAJOR` and related macros to match the new release version. These macros are used in the C++ codebase.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/release.rst#_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\nUpdate ``PYBIND11_VERSION_MAJOR`` etc. in ``include/pybind11/detail/common.h``.\n```\n\n----------------------------------------\n\nTITLE: Printing Values Manually in Google Test\nDESCRIPTION: This code snippet demonstrates how to manually print a value using Google Test's value printer with `::testing::PrintToString()`. This is useful for adding debugging information to assertion messages.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/AdvancedGuide.md#_snippet_8\n\nLANGUAGE: cpp\nCODE:\n```\nvector<pair<Bar, int> > bar_ints = GetBarIntVector();\n\nEXPECT_TRUE(IsCorrectBarIntVector(bar_ints))\n    << \"bar_ints = \" << ::testing::PrintToString(bar_ints);\n```\n\n----------------------------------------\n\nTITLE: Module Destructor with Capsule in Type Object\nDESCRIPTION: This shows an alternate method of using capsules to cleanup module data by attaching it to a type object. This ensures the cleanup only runs after the instances of that type have been collected.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/misc.rst#_snippet_7\n\nLANGUAGE: cpp\nCODE:\n```\nauto cleanup_callback = []() { /* ... */ };\nm.attr(\"BaseClass\").attr(\"_cleanup\") = py::capsule(cleanup_callback);\n```\n\n----------------------------------------\n\nTITLE: Evaluating Cap'n Proto constant\nDESCRIPTION: This command evaluates a constant (`myConstant`) defined in a Cap'n Proto schema (`myschema.capnp`) after applying variable substitution. It prints the value to standard output. Binary or packed output is available using the `--binary` or `--packed` flags.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/doc/capnp-tool.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncapnp eval myschema.capnp myConstant\n```\n\n----------------------------------------\n\nTITLE: Copyright Disclaimer Sample\nDESCRIPTION: This snippet presents an example of a copyright disclaimer that an employer or school can sign to relinquish copyright interest in a library.  This is to ensure the library can be distributed under the LGPL.\nSOURCE: https://github.com/openai/retro/blob/master/cores/snes/docs/lgpl-2.1.txt#_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\nYoyodyne, Inc., hereby disclaims all copyright interest in the\nlibrary `Frob' (a library for tweaking knobs) written by James Random Hacker.\n\n<signature of Ty Coon>, 1 April 1990\nTy Coon, President of Vice\n```\n\n----------------------------------------\n\nTITLE: Defining Stream interface for flow control in Cap'n Proto\nDESCRIPTION: This defines a `Stream` interface where the `write` method returns a `bulk` type, implying built-in flow control within Cap'n Proto's streaming mechanism. The `end` method signals the end of the stream.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/doc/slides-2017.05.18/index.md#_snippet_1\n\nLANGUAGE: capnp\nCODE:\n```\ninterface Stream {\n  write @0 (data :Data) -> bulk;\n  end @1 ();\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling and Linking Test with Google Mock (Unix)\nDESCRIPTION: This code snippet shows how to compile and link a test source file with the Google Mock library on a Linux-like system using g++. It specifies include paths and links with the gmock library.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googlemock/README.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ng++ -isystem ${GTEST_DIR}/include -isystem ${GMOCK_DIR}/include \\\n    -pthread path/to/your_test.cc libgmock.a -o your_test\n```\n\n----------------------------------------\n\nTITLE: Fixed 2xscale/3xscale with clipping\nDESCRIPTION: This snippet corrects a bug that was causing 2xscale and 3xscale scaling to be broken when clipping the leftmost and rightmost 8 columns of the display. The fix ensures that these scaling modes work correctly even when clipping is enabled.\nSOURCE: https://github.com/openai/retro/blob/master/cores/nes/changelog.txt#_snippet_16\n\n\n\n----------------------------------------\n\nTITLE: Setting Compiler and Assembler Flags\nDESCRIPTION: This snippet sets the C, C++, and Assembler flags using the `inc_flags` variable defined earlier. These flags include include paths, architecture flags, and other necessary compilation options.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/platform/3ds/CMakeToolchain.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_C_FLAGS ${inc_flags} CACHE INTERNAL \"c compiler flags\")\nset(CMAKE_ASM_FLAGS ${inc_flags} CACHE INTERNAL \"assembler flags\")\nset(CMAKE_CXX_FLAGS ${inc_flags} CACHE INTERNAL \"cxx compiler flags\")\n```\n\n----------------------------------------\n\nTITLE: Force Google Test to Use Own TR1 Tuple\nDESCRIPTION: This snippet shows how to force Google Test to use its own TR1 tuple implementation. This is useful to avoid conflicts if your project doesn't use TR1 tuple, or if you specifically want Google Test to use its own version.  This flag must be added to compiler flags.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/README.md#_snippet_8\n\nLANGUAGE: c++\nCODE:\n```\n-DGTEST_USE_OWN_TR1_TUPLE=1\n```\n\n----------------------------------------\n\nTITLE: ines.c CRC32-Based Controller Info\nDESCRIPTION: This snippet describes adding code to 'ines.c' to set controller information in the `FCEUGameInfo` structure based on CRC32 values. This allows the emulator to automatically detect and configure the correct controller type for a given ROM.\nSOURCE: https://github.com/openai/retro/blob/master/cores/nes/changelog.txt#_snippet_66\n\n\n\n----------------------------------------\n\nTITLE: Calling Python Functions with Keyword Arguments from C++\nDESCRIPTION: This code shows how to call a Python function with keyword arguments from C++ using pybind11.  It makes use of the `_a` literal to define keyword arguments.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/pycpp/object.rst#_snippet_10\n\nLANGUAGE: cpp\nCODE:\n```\nusing namespace pybind11::literals; // to bring in the `_a` literal\nf(1234, \"say\"_a=\"hello\", \"to\"_a=some_instance); // keyword call in C++\n```\n\n----------------------------------------\n\nTITLE: Cycle Management Functions in C\nDESCRIPTION: This snippet mentions the functions available to manage CPU cycles for clock frequency emulation. `m68k_cycles_run()`, `m68k_cycles_remaining()`, `m68k_modify_timeslice()`, and `m68k_end_timeslice()` can be used to control execution timing.\nSOURCE: https://github.com/openai/retro/blob/master/cores/genesis/core/m68k/readme.txt#_snippet_7\n\nLANGUAGE: C\nCODE:\n```\nm68k_cycles_run();\nm68k_cycles_remaining();\nm68k_modify_timeslice();\nm68k_end_timeslice();\n```\n\n----------------------------------------\n\nTITLE: Calling Python Functions from C++\nDESCRIPTION: This snippet demonstrates calling a Python function (makedirs from the os module) from C++ using pybind11. This allows you to leverage Python's functionality within your C++ code.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/pycpp/object.rst#_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\n// Use Python to make our directories\npy::object os = py::module::import(\"os\");\npy::object makedirs = os.attr(\"makedirs\");\nmakedirs(\"/tmp/path/to/somewhere\");\n```\n\n----------------------------------------\n\nTITLE: Including stl_bind.h for STL Container Binding\nDESCRIPTION: This code snippet shows the necessary include statement for `pybind11/stl_bind.h`, which provides functionality for binding STL containers like `std::vector` and `std::map` to Python types.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/cast/stl.rst#_snippet_8\n\nLANGUAGE: cpp\nCODE:\n```\n// Don't forget this\n#include <pybind11/stl_bind.h>\n```\n\n----------------------------------------\n\nTITLE: Conditional CapnProto Support\nDESCRIPTION: This snippet checks if the CapnProto library is found (`CapnProto_FOUND`). If it is, it appends `retro-capnp` to the `RETRO_EXTRA` list.  The `RETRO_EXTRA` variable is used later to include extra dependencies when linking the target.\nSOURCE: https://github.com/openai/retro/blob/master/src/ui/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(RETRO_EXTRA)\nif(CapnProto_FOUND)\n    list(APPEND RETRO_EXTRA retro-capnp)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Find NIDDB database file\nDESCRIPTION: Finds the `db.json` file, which likely contains NID (Native Interface Definition) information for PS Vita system calls. This file is used to generate stubs for calling system functions.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/platform/psp2/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nfind_file(NIDDB db.json PATHS ${VITASDK} ${VITASDK}/bin ${VITASDK}/share)\n```\n\n----------------------------------------\n\nTITLE: Appending to List in Python\nDESCRIPTION: This Python code demonstrates the issue with pass-by-reference when automatic conversions are enabled.  Modifying the list within the bound C++ function `append_1` does not modify the original Python list.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/cast/stl.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nv = [5, 6]\nappend_1(v)\nprint(v)\n```\n\n----------------------------------------\n\nTITLE: Reimplemented network play\nDESCRIPTION: This snippet describes the reimplementation of network play, which now requires a standalone network play server. The server is publicly accessible at \"starmen.net\". Code fixes and improvements were made to support network play, particularly with the command handling code.\nSOURCE: https://github.com/openai/retro/blob/master/cores/nes/changelog.txt#_snippet_39\n\n\n\n----------------------------------------\n\nTITLE: Win32: Blit skipping when sound is disabled\nDESCRIPTION: This snippet implements blit skipping in the Win32 version when sound is disabled and FCE Ultra is running behind the desired frame rate. This optimization aims to improve performance by reducing the number of frames rendered when the emulator is struggling to keep up.\nSOURCE: https://github.com/openai/retro/blob/master/cores/nes/changelog.txt#_snippet_23\n\n\n\n----------------------------------------\n\nTITLE: Building the demo application in C\nDESCRIPTION: To build the demo application, you need to compile `demo.c`, `sms_ntsc.c` and link against the SDL multimedia library. A test image, `test.bmp`, is required to be in the same directory as the built executable.\nSOURCE: https://github.com/openai/retro/blob/master/cores/genesis/core/ntsc/readme.txt#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ngcc demo.c sms_ntsc.c -lSDL -o demo\n```\n\n----------------------------------------\n\nTITLE: Unpacking *args in Python Function Calls from C++\nDESCRIPTION: This code demonstrates how to unpack a Python tuple as *args when calling a Python function from C++ using pybind11. The tuple elements are passed as positional arguments to the function.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/pycpp/object.rst#_snippet_11\n\nLANGUAGE: cpp\nCODE:\n```\n// * unpacking\npy::tuple args = py::make_tuple(1234, \"hello\", some_instance);\nf(*args);\n```\n\n----------------------------------------\n\nTITLE: Correct Character Input Using chr()\nDESCRIPTION: This Python code demonstrates the correct way to pass a character to a C++ function when starting with an integer. The `chr()` function is used to convert the integer representation of the character to a string before passing it to the `pass_char` function.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/cast/strings.rst#_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\n>>> example.pass_char(chr(0x65))\n'A'\n```\n\n----------------------------------------\n\nTITLE: Namespace Friend Test Example C++\nDESCRIPTION: This example demonstrates how to handle friend tests when the class is defined within a namespace. The test fixture and tests must also be defined in the same namespace to be friends of the class.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/AdvancedGuide.md#_snippet_39\n\nLANGUAGE: cpp\nCODE:\n```\nnamespace my_namespace {\n\nclass Foo {\n  friend class FooTest;\n  FRIEND_TEST(FooTest, Bar);\n  FRIEND_TEST(FooTest, Baz);\n  ...\n  definition of the class Foo\n  ...\n};\n\n}  // namespace my_namespace\n```\n\nLANGUAGE: cpp\nCODE:\n```\nnamespace my_namespace {\nclass FooTest : public ::testing::Test {\n protected:\n  ...\n};\n\nTEST_F(FooTest, Bar) { ... }\nTEST_F(FooTest, Baz) { ... }\n\n}  // namespace my_namespace\n```\n\n----------------------------------------\n\nTITLE: Illustrating invalid usage of unique_ptr as function argument\nDESCRIPTION: This code snippet shows an example of how *not* to use unique_ptr with pybind11. Using unique_ptr as a function argument is invalid because it implies Python must give up ownership, which is not generally possible.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/smart_ptrs.rst#_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nvoid do_something_with_example(std::unique_ptr<Example> ex) { ... }\n```\n\n----------------------------------------\n\nTITLE: Snes9x Snapshot File Signature\nDESCRIPTION: This code represents the fixed-length signature at the beginning of a Snes9x snapshot file. It consists of the string '!s9xsnp:', followed by a 4-digit decimal version number, and a newline character ('\\n'). This signature is used to identify the file as a valid Snes9x snapshot.\nSOURCE: https://github.com/openai/retro/blob/master/cores/snes/docs/snapshots.txt#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n#!s9xsnp:0006\\n\n```\n\n----------------------------------------\n\nTITLE: Logging additional information using RecordProperty() in Google Test C++\nDESCRIPTION: This example demonstrates how to use `RecordProperty()` to log additional information to the XML output of a Google Test execution.  The `RecordProperty()` function allows recording integer and string values.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/AdvancedGuide.md#_snippet_18\n\nLANGUAGE: C++\nCODE:\n```\nTEST_F(WidgetUsageTest, MinAndMaxWidgets) {\n  RecordProperty(\"MaximumWidgets\", ComputeMaxUsage());\n  RecordProperty(\"MinimumWidgets\", ComputeMinUsage());\n}\n```\n\n----------------------------------------\n\nTITLE: Moving a Pointer with a Button Press in Retro\nDESCRIPTION: This snippet shows how to move a pointer using a button press, reporting the change at the end of each frame. It uses `ButtonToPointer` to move the pointer with ID `PseudoPointerBase+0` up one pixel per frame as long as the button is pressed.\nSOURCE: https://github.com/openai/retro/blob/master/cores/snes/docs/controls.txt#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nButtonToPointer 1u Slow\n```\n\n----------------------------------------\n\nTITLE: Setting Linker Flags in CMake\nDESCRIPTION: This snippet sets the linker flags for executables, modules, and shared libraries using the previously defined link_flags. These flags ensure correct linking with the libogc library.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/platform/wii/CMakeToolchain.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_EXE_LINKER_FLAGS ${link_flags} CACHE INTERNAL \"exe link flags\")\nset(CMAKE_MODULE_LINKER_FLAGS ${link_flags} CACHE INTERNAL \"module link flags\")\nset(CMAKE_SHARED_LINKER_FLAGS ${link_flags} CACHE INTERNAL \"shared link flags\")\n```\n\n----------------------------------------\n\nTITLE: Compiling test cases on Linux/MacOS\nDESCRIPTION: This bash script compiles the pybind11 test cases on Linux or MacOS. It creates a build directory, navigates into it, uses cmake to generate the build files, and then uses make to compile the code with 4 parallel jobs.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/basics.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir build\ncd build\ncmake ..\nmake check -j 4\n```\n\n----------------------------------------\n\nTITLE: Add custom command to convert backdrop\nDESCRIPTION: Adds a custom command to convert the `backdrop.png` image file into an object file named `backdrop.o` using the `objcopy` command. The command is executed in the current source directory.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/platform/psp2/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/backdrop.o\n                   COMMAND ${OBJCOPY_CMD} backdrop.png ${CMAKE_CURRENT_BINARY_DIR}/backdrop.o\n                   WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})\n```\n\n----------------------------------------\n\nTITLE: FCEU_fseek() Fix for Compressed Files\nDESCRIPTION: This snippet describes fixing the `FCEU_fseek()` function when used with compressed files in PKZIP format. This fixes a UNIF loading problem, indicating it's related to file I/O and ROM loading.\nSOURCE: https://github.com/openai/retro/blob/master/cores/nes/changelog.txt#_snippet_71\n\n\n\n----------------------------------------\n\nTITLE: Google Mock MockFunction Template\nDESCRIPTION: Shows the definition of the MockFunction template that helps in creating mock classes. This template provides a convenient way to define a mock function with specified return type and arguments. MOCK_METHODn macro will create a mock method.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googlemock/docs/CheatSheet.md#_snippet_20\n\nLANGUAGE: cpp\nCODE:\n```\nclass MockFunction<R(A1, ..., An)> {\n public:\n  MOCK_METHODn(Call, R(A1, ..., An));\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Targets for Man Pages (CMake)\nDESCRIPTION: This CMake snippet adds custom targets for building all man pages, updating man pages, and updating HTML files. The `ALL` keyword ensures that the `man` target is built by default.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/libzip/man/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nADD_CUSTOM_TARGET(man ALL DEPENDS ${MAN_PAGES})\nADD_CUSTOM_TARGET(update-man DEPENDS ${UPDATEMAN})\nADD_CUSTOM_TARGET(update-html DEPENDS ${UPDATEHTML})\n```\n\n----------------------------------------\n\nTITLE: Demonstrating String Handling Asymmetry\nDESCRIPTION: This C++ code demonstrates the asymmetry in pybind11's handling of `bytes` and `std::string`. While `bytes` can be implicitly converted to `std::string` on input, the reverse conversion from `std::string` to `bytes` is not automatic on output.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/cast/strings.rst#_snippet_8\n\nLANGUAGE: C++\nCODE:\n```\nm.def(\"asymmetry\",\n    [](std::string s) {  // Accepts str or bytes from Python\n        return s;  // Looks harmless, but implicitly converts to str\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Compiler Definitions with CMake\nDESCRIPTION: This code adds compiler definitions based on the compiler being used (MSVC) and whether debug output is enabled.  These definitions affect the compilation process by enabling or disabling certain features or behaviors.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/third-party/libpng/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nif(MSVC)\n  add_definitions(-D_CRT_SECURE_NO_DEPRECATE)\nendif(MSVC)\n\nif(PNG_DEBUG)\n  add_definitions(-DPNG_DEBUG)\nendif()\n```\n\n----------------------------------------\n\nTITLE: LZMA Length Decoder Instances in C++\nDESCRIPTION: These code snippets declare two instances of the `CLenDecoder` class: `LenDecoder` for simple matches and `RepLenDecoder` for repeated matches. These instances are used to decode the length of matches based on the match type during LZMA decoding.\nSOURCE: https://github.com/openai/retro/blob/master/cores/genesis/core/cd_hw/libchdr/deps/lzma/DOC/lzma-specification.txt#_snippet_19\n\nLANGUAGE: cpp\nCODE:\n```\nCLenDecoder LenDecoder;\nCLenDecoder RepLenDecoder;\n```\n\n----------------------------------------\n\nTITLE: Installer Config File Example 1\nDESCRIPTION: This config file example shows how to define the title, begin prompt, and program to run after extraction.  The file must start with ;!@Install@!UTF-8! and end with ;!@InstallEnd@!.\nSOURCE: https://github.com/openai/retro/blob/master/cores/pce/deps/lzma-16.04/DOC/installer.txt#_snippet_2\n\nLANGUAGE: Config\nCODE:\n```\n;!@Install@!UTF-8!\nTitle=\"7-Zip 4.00\"\nBeginPrompt=\"Do you want to install the 7-Zip 4.00?\"\nRunProgram=\"setup.exe\"\n;!@InstallEnd@!\n```\n\n----------------------------------------\n\nTITLE: Creating an installer with 7zSD.sfx\nDESCRIPTION: This command combines the 7zSD.sfx module, a configuration file (config.txt), and a 7z archive (archive.7z) to create a self-extracting installer. The config.txt file is optional and can be used to specify installation parameters.\nSOURCE: https://github.com/openai/retro/blob/master/cores/pce/deps/lzma-16.04/DOC/installer.txt#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncopy /b 7zSD.sfx + config.txt + archive.7z archive.exe\n```\n\n----------------------------------------\n\nTITLE: Scale Matrix - C++\nDESCRIPTION: This C++ function scales an Eigen matrix by a scalar value. It uses `py::EigenDRef<Eigen::MatrixXd>` to allow mapping into arbitrary storage orders of NumPy arrays, enabling support for array slices. The matrix is modified in-place.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/cast/eigen.rst#_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\nm.def(\"scale\", [](py::EigenDRef<Eigen::MatrixXd> m, double c) { m *= c; });\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Target for Checking in CMake\nDESCRIPTION: This snippet adds a custom target named 'check' that executes the CTest command. The CTest command is used to run the tests defined in the project. This target allows users to easily run all tests using the make check command.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/libzip/regress/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nADD_CUSTOM_TARGET(check COMMAND ${CMAKE_CTEST_COMMAND})\n```\n\n----------------------------------------\n\nTITLE: Building Tests with CMake\nDESCRIPTION: This CMake snippet conditionally enables testing using `enable_testing()` and adds subdirectories for the Google Mock framework and test files if the `BUILD_TESTS` option is enabled.  This allows for modular building of test suites.\nSOURCE: https://github.com/openai/retro/blob/master/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(BUILD_TESTS)\n    enable_testing()\n    add_subdirectory(third-party/gtest/googlemock)\n    add_subdirectory(tests)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Create Fortran-Ordered Array - Python\nDESCRIPTION: This Python code creates a NumPy array with Fortran (column-major) storage order by using the `order='F'` option. Such an array can be passed to a C++ function that expects a column-major Eigen matrix without causing a copy.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/cast/eigen.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nmyarray = np.array(source, order='F')\n```\n\n----------------------------------------\n\nTITLE: Creating Final Release\nDESCRIPTION: This snippet demonstrates how to finalize a release using the `release.sh` script with the `final` argument. This removes the `-rcN` suffix from the version number, updates the downloads page, builds the final release package, and publishes the documentation.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/RELEASE-PROCESS.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\n./release.sh final\n```\n\n----------------------------------------\n\nTITLE: Install Cap'n Proto Pygments Lexer\nDESCRIPTION: Installs a custom Pygments syntax highlighter for Cap'n Proto. This allows Pygments to correctly highlight Cap'n Proto code snippets on the website. The script `capnp_lexer.py` must be present in the `_plugins` directory.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/doc/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncd _plugins\nsudo python capnp_lexer.py install\ncd ..\n```\n\n----------------------------------------\n\nTITLE: Calling C++ Function with Python List\nDESCRIPTION: This Python snippet calls the `print_list` function defined in C++ (using pybind11) with a Python list `[1, 2, 3]` as its argument. The C++ function then iterates through the elements of this list and prints them.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/cast/overview.rst#_snippet_1\n\nLANGUAGE: pycon\nCODE:\n```\n>>> print_list([1, 2, 3])\n1 2 3\n```\n\n----------------------------------------\n\nTITLE: Row-Major Matrix Type Definition - C++\nDESCRIPTION: This C++ code defines a type alias `RowMatrixXd` for an Eigen matrix with row-major storage order. This can be used to avoid copying when passing NumPy arrays (which default to row-major) to Eigen functions by reference.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/cast/eigen.rst#_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\nusing RowMatrixXd = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic, Eigen::RowMajor>;\n```\n\n----------------------------------------\n\nTITLE: Shuffling Tests with gtest_shuffle and gtest_random_seed\nDESCRIPTION: This describes how to run tests in a random order using the `--gtest_shuffle` flag or the `GTEST_SHUFFLE` environment variable.  The seed can be specified explicitly with `--gtest_random_seed=SEED` or `GTEST_RANDOM_SEED`.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/AdvancedGuide.md#_snippet_51\n\nLANGUAGE: text\nCODE:\n```\n--gtest_shuffle\n--gtest_random_seed=SEED\n```\n\n----------------------------------------\n\nTITLE: Deployment using macdeployqt (macOS)\nDESCRIPTION: This snippet uses `macdeployqt` to deploy the Qt application on macOS. It locates the `macdeployqt` executable and then runs it on the application bundle using `execute_process` during the install phase.\nSOURCE: https://github.com/openai/retro/blob/master/src/ui/CMakeLists.txt#_snippet_20\n\nLANGUAGE: CMake\nCODE:\n```\nfind_program(DEPLOY macdeployqt)\n    install(CODE \"\n        execute_process(COMMAND \\\"${DEPLOY}\\\" \\\"\\$ENV{DESTDIR}${CMAKE_INSTALL_PREFIX}/Gym Retro Integration.app\\\")\n    \" COMPONENT gym-retro-integration)\n```\n\n----------------------------------------\n\nTITLE: Snes9x Snapshot ROM Filename Block\nDESCRIPTION: This shows the format for the ROM filename block within the Snes9x snapshot file.  'NAM' indicates the block type, followed by the length of the data (000019, or 25 bytes), and then the filename itself ('Chrono Trigger.zip') which is null-terminated.\nSOURCE: https://github.com/openai/retro/blob/master/cores/snes/docs/snapshots.txt#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nNAM:000019:Chrono Trigger.zip\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Flags in CMake\nDESCRIPTION: This snippet sets the compiler flags for C, C++, and assembly languages using the previously defined inc_flags. These flags ensure correct compilation and linking with the libogc library.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/platform/wii/CMakeToolchain.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_C_FLAGS ${inc_flags} CACHE INTERNAL \"c compiler flags\")\nset(CMAKE_ASM_FLAGS ${inc_flags} CACHE INTERNAL \"assembler flags\")\nset(CMAKE_CXX_FLAGS ${inc_flags} CACHE INTERNAL \"cxx compiler flags\")\n```\n\n----------------------------------------\n\nTITLE: Casting C++ Types to Python with py::cast\nDESCRIPTION: This code snippet demonstrates how to convert a C++ type (MyClass) to a Python object using py::cast. This is useful when you need to pass a C++ object to a Python function or store it as a Python object.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/pycpp/object.rst#_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nMyClass *cls = ..;\npy::object obj = py::cast(cls);\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories in CMake\nDESCRIPTION: This snippet adds the necessary include directories for Google Mock and Google Test to the compiler's search path. It includes the source directories for both libraries, allowing the compiler to find header files.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googlemock/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories(\"${gmock_SOURCE_DIR}/include\"\n                    \"${gmock_SOURCE_DIR}\"\n                    \"${gtest_SOURCE_DIR}/include\"\n                    # This directory is needed to build directly from Google\n                    # Test sources.\n                    \"${gtest_SOURCE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Finding Python Packages and Libraries (CMake)\nDESCRIPTION: This snippet finds the required Python libraries and interpreter based on the specified Python version. It then appends the necessary libraries to the `DEPENDENCY_LIB` variable and includes the directories containing the Python headers.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/platform/python/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PythonLibs ${USE_PYTHON_VERSION})\nfind_package(PythonInterp ${USE_PYTHON_VERSION})\nlist(APPEND DEPENDENCY_LIB ${PYTHON_LIBRARIES})\ninclude_directories(AFTER ${PYTHON_INCLUDE_DIRS})\n```\n\n----------------------------------------\n\nTITLE: NAnt Build Configuration\nDESCRIPTION: These are example NAnt commands used to build the DotZLib library. They show how to specify debug/release builds and include/exclude unit tests during the build process. The `clean` target removes previously built files.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/third-party/zlib/contrib/dotzlib/readme.txt#_snippet_0\n\nLANGUAGE: NAnt\nCODE:\n```\nnant -D:debug=false -D:nunit=false\n```\n\nLANGUAGE: NAnt\nCODE:\n```\nnant\n```\n\nLANGUAGE: NAnt\nCODE:\n```\nnant clean\n```\n\n----------------------------------------\n\nTITLE: SetVidSys() Function Change in fce.c\nDESCRIPTION: This snippet describes changing the `SetVidSys(int w)` function to `ResetVidSys()` in `fce.c`.  It also mentions re-enabling PAL/NTSC emulation overrides based on the game loaded, primarily for NSFs and UNIFs.\nSOURCE: https://github.com/openai/retro/blob/master/cores/nes/changelog.txt#_snippet_79\n\n\n\n----------------------------------------\n\nTITLE: unix-netplay: Replaced ioctl() with select()\nDESCRIPTION: In unix-netplay.c, the ioctl() function used to read the number of bytes available on a socket was replaced with select(). This change aims to improve the reliability and compatibility of network play, and BEOS #ifdefs were added.\nSOURCE: https://github.com/openai/retro/blob/master/cores/nes/changelog.txt#_snippet_10\n\n\n\n----------------------------------------\n\nTITLE: Add custom command to convert icons\nDESCRIPTION: Adds a custom command to convert the `icons2x.png` image file into an object file named `icons.o` using the `objcopy` command. The command is executed in the `res` directory.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/platform/psp2/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/icons.o\n                   COMMAND ${OBJCOPY_CMD} icons2x.png ${CMAKE_CURRENT_BINARY_DIR}/icons.o\n                   WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}/res)\n```\n\n----------------------------------------\n\nTITLE: Installing Headers (CMake)\nDESCRIPTION: This code installs the public header files of the libpng library into the `include` and `include/${PNGLIB_NAME}` directories of the installation prefix. The installation is skipped if `SKIP_INSTALL_HEADERS` or `SKIP_INSTALL_ALL` is set.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/third-party/libpng/CMakeLists.txt#_snippet_20\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT SKIP_INSTALL_HEADERS AND NOT SKIP_INSTALL_ALL )\n  install(FILES ${libpng_public_hdrs}   DESTINATION include)\n  install(FILES ${libpng_public_hdrs}   DESTINATION include/${PNGLIB_NAME})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Define Custom Target for Python Test\nDESCRIPTION: This snippet defines a custom target named `check` that executes the `test_cmake_build` executable and a Python test script `../test.py`. The purpose is to automatically run the Python test script after building the executable.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/tests/test_cmake_build/installed_embed/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_target(check $<TARGET_FILE:test_cmake_build> ${PROJECT_SOURCE_DIR}/../test.py)\n```\n\n----------------------------------------\n\nTITLE: Adding ostream redirection context manager in Python\nDESCRIPTION: This snippet demonstrates adding an ostream redirection context manager to Python using py::add_ostream_redirect(). This allows redirecting C++ streams from within Python code using a `with` statement, providing a convenient way to manage output redirection.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/pycpp/utilities.rst#_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\npy::add_ostream_redirect(m, \"ostream_redirect\");\n```\n\n----------------------------------------\n\nTITLE: Initialize Literals Array C++\nDESCRIPTION: This method initializes the LitProbs array with the PROB_INIT_VAL.  It iterates from i = 0 to num = (UInt32)0x300 << (lc + lp), assigning PROB_INIT_VAL to each element of the LitProbs array.\nSOURCE: https://github.com/openai/retro/blob/master/cores/pce/deps/lzma-16.04/DOC/lzma-specification.txt#_snippet_13\n\nLANGUAGE: C++\nCODE:\n```\nvoid InitLiterals()\n{\n  UInt32 num = (UInt32)0x300 << (lc + lp);\n  for (UInt32 i = 0; i < num; i++)\n    LitProbs[i] = PROB_INIT_VAL;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Cap'n Proto JSON Sources\nDESCRIPTION: This snippet defines the source files for the Cap'n Proto JSON compatibility library. This library provides functionalities for converting between Cap'n Proto data structures and JSON representations. It enables interoperability with JSON-based systems and tools.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/c++/src/capnp/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nset(capnp-json_sources\n  compat/json.c++\n  compat/json.capnp.c++\n)\n```\n\n----------------------------------------\n\nTITLE: Temporarily Enabling Disabled Tests with gtest_also_run_disabled_tests\nDESCRIPTION: This explains how to run disabled tests by using the flag `--gtest_also_run_disabled_tests` or by setting the environment variable `GTEST_ALSO_RUN_DISABLED_TESTS`. This can be combined with `--gtest_filter` to select a subset of disabled tests.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/AdvancedGuide.md#_snippet_49\n\nLANGUAGE: text\nCODE:\n```\n--gtest_also_run_disabled_tests\n```\n\n----------------------------------------\n\nTITLE: Copyright Disclaimer Example\nDESCRIPTION: This is a sample copyright disclaimer. This disclaimer is for use when an employer or school needs to disclaim copyright interest in the program. It explicitly disclaims all copyright interest in the specified program.\nSOURCE: https://github.com/openai/retro/blob/master/LICENSES.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the program\n  `Gnomovision' (which makes passes at compilers) written by James Hacker.\n\n  <signature of Ty Coon>, 1 April 1989\n  Ty Coon, President of Vice\n```\n\n----------------------------------------\n\nTITLE: Example of a bad global registry using macros in C++\nDESCRIPTION: This snippet presents an example of a problematic global registry using macros, which is discouraged due to its singleton-like behavior and potential for creating unexpected dependencies. It illustrates a common anti-pattern in modular frameworks.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/style-guide.md#_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\n// BAD BAD BAD\nREGISTER_PLUGIN(\"foo\", fooEntryPoint);\n```\n\n----------------------------------------\n\nTITLE: Binding Local Extending Class with pybind11\nDESCRIPTION: This snippet shows how to bind a local class `Cat` that extends the `Pet` class from an external library, using pybind11. It defines a constructor that takes a string as an argument.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/classes.rst#_snippet_36\n\nLANGUAGE: cpp\nCODE:\n```\npy::class<Cat, pets::Pet>(m, \"Cat\")\n    .def(py::init<std::string>());\n```\n\n----------------------------------------\n\nTITLE: Defining VideoCallStream interface for realtime streams in Cap'n Proto\nDESCRIPTION: Defines a `VideoCallStream` interface with a `sendFrame` method returning a `realtime` type. This suggests the integration of realtime streaming capabilities within Cap'n Proto, optimized for UDP transport.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/doc/slides-2017.05.18/index.md#_snippet_2\n\nLANGUAGE: capnp\nCODE:\n```\ninterface VideoCallStream {\n  sendFrame @0 (frame :Frame) -> realtime;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining VARIADIC_MAX for Visual Studio in CMake\nDESCRIPTION: This snippet defines the _VARIADIC_MAX macro for Visual Studio versions that use std::tr1::tuple. This is necessary due to limitations in the number of variadic arguments supported by older versions of Visual Studio.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googlemock/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif (MSVC AND MSVC_VERSION EQUAL 1700)\n  add_definitions(/D _VARIADIC_MAX=10)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Associate Type List with Test Case C++\nDESCRIPTION: Associates a fixture class template with a list of types using the `TYPED_TEST_CASE` macro.  This macro is necessary to link the fixture class with the types that will be tested against it.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/AdvancedGuide.md#_snippet_30\n\nLANGUAGE: cpp\nCODE:\n```\nTYPED_TEST_CASE(FooTest, MyTypes);\n```\n\n----------------------------------------\n\nTITLE: Setting CMake module path and including tools\nDESCRIPTION: This code block appends the current list directory's 'tools' subdirectory to the CMAKE_MODULE_PATH and includes the pybind11Tools module. This allows the use of custom CMake functions provided by pybind11.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_CURRENT_LIST_DIR}/tools\")\n\ninclude(pybind11Tools)\n```\n\n----------------------------------------\n\nTITLE: Defining Python Tests in CMake\nDESCRIPTION: This snippet defines Python tests for Google Mock, using the cxx_executable and py_test macros. These tests are designed to check for memory leaks and output correctness.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googlemock/CMakeLists.txt#_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nif (gmock_build_tests)\n  cxx_executable(gmock_leak_test_ test gmock_main)\n  py_test(gmock_leak_test)\n\n  cxx_executable(gmock_output_test_ test gmock)\n  py_test(gmock_output_test)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Bytes in Python\nDESCRIPTION: This Python code calls the `return_bytes` function, which returns a `py::bytes` object. The output demonstrates that the returned value is a Python `bytes` object containing the original data without UTF-8 decoding.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/cast/strings.rst#_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\n>>> example.return_bytes()\nb'\\xba\\xd0\\xba\\xd0'\n```\n\n----------------------------------------\n\nTITLE: Building libzip 64-bit with Visual Studio 2013\nDESCRIPTION: This command builds libzip for a 64-bit x64 architecture using Visual Studio 2013. It requires the 'vsbuild.cmd' script to be executed from the 'vstudio' directory with the correct generator and toolset parameters.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/libzip/vstudio/readme.txt#_snippet_1\n\nLANGUAGE: batch\nCODE:\n```\nvsbuild build \"Visual Studio 12 Win64\" v120\n```\n\n----------------------------------------\n\nTITLE: UTF-8 String Input in Python\nDESCRIPTION: This Python code demonstrates passing UTF-8 strings to C++ functions defined using pybind11. It calls the `utf8_test` and `utf8_charptr` functions defined in C++, passing emoji characters as UTF-8 encoded strings.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/cast/strings.rst#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n>>> utf8_test('🎂')\nutf-8 is icing on the cake.\n🎂\n\n>>> utf8_charptr('🍕')\nMy favorite food is\n🍕\n```\n\n----------------------------------------\n\nTITLE: Building libzip 32-bit with Visual Studio 2013\nDESCRIPTION: This command builds libzip for a 32-bit x86 architecture using Visual Studio 2013. It requires the 'vsbuild.cmd' script to be executed from the 'vstudio' directory with the correct generator and toolset parameters.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/libzip/vstudio/readme.txt#_snippet_0\n\nLANGUAGE: batch\nCODE:\n```\nvsbuild build \"Visual Studio 12\" v120\n```\n\n----------------------------------------\n\nTITLE: Win32: Added \"Recent Directories\" submenu\nDESCRIPTION: This snippet adds a \"Recent Directories\" submenu to the \"File\" menu in the Win32 version. This feature provides a convenient way for users to quickly access previously used directories when loading ROMs or other files.\nSOURCE: https://github.com/openai/retro/blob/master/cores/nes/changelog.txt#_snippet_25\n\n\n\n----------------------------------------\n\nTITLE: Modified MMC5 ELROM board emulation\nDESCRIPTION: This snippet modifies the MMC5 \"ELROM\" board emulation to disable the emulation of WRAM (Work RAM). This change may be necessary for accuracy or compatibility reasons, as the original hardware may not have included or utilized WRAM in this configuration.\nSOURCE: https://github.com/openai/retro/blob/master/cores/nes/changelog.txt#_snippet_18\n\n\n\n----------------------------------------\n\nTITLE: Corrected get_child() using shared_ptr\nDESCRIPTION: This code shows the corrected get_child() method, returning a shared_ptr<Child> instead of a raw pointer. This ensures that pybind11 correctly handles the shared ownership of the Child object and avoids double frees.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/smart_ptrs.rst#_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\nstd::shared_ptr<Child> get_child() { return child; }\n```\n\n----------------------------------------\n\nTITLE: Array Pointers with kj::ArrayPtr in C++\nDESCRIPTION: This snippet shows the recommended way to point to an array. Instead of using raw pointers `T*`, it's preferred to use `kj::ArrayPtr<T>` to clearly indicate that the pointer references an array.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/style-guide.md#_snippet_6\n\nLANGUAGE: C++\nCODE:\n```\n* Always use `kj::ArrayPtr<T>` rather than `T*` to point to an array.\n```\n\n----------------------------------------\n\nTITLE: Appending to Debian Package Dependencies in CMake\nDESCRIPTION: This CMake code appends the appropriate `libsdl` dependency string to the `CPACK_DEBIAN_PACKAGE_DEPENDS` variable, based on the detected SDL version. This ensures that the generated Debian package has the correct dependency information.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/platform/sdl/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nset(CPACK_DEBIAN_PACKAGE_DEPENDS \"${CPACK_DEBIAN_PACKAGE_DEPENDS},libsdl${SDL_VERSION_DEBIAN}\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Test with MinGW\nDESCRIPTION: This snippet shows how to configure Google Test to compile with MinGW from Cygwin by specifying the C and C++ compilers with the -mno-cygwin option. This setup is necessary for successful compilation and installation in a MinGW environment.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/FAQ.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nPATH/TO/configure CC=\"gcc -mno-cygwin\" CXX=\"g++ -mno-cygwin\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Calling Conventions for Mock Functions in C++\nDESCRIPTION: This snippet shows how to specify a calling convention for mock functions using the MOCK_*_WITH_CALLTYPE macros. This is useful when the mock function does not use the default calling convention.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googlemock/docs/CheatSheet.md#_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\nMOCK_METHOD_1_WITH_CALLTYPE(STDMETHODCALLTYPE, Foo, bool(int n));\nMOCK_CONST_METHOD2_WITH_CALLTYPE(STDMETHODCALLTYPE, Bar, int(double x, double y));\n```\n\n----------------------------------------\n\nTITLE: Type Error with Integer Input to Character Function\nDESCRIPTION: This Python code demonstrates a `TypeError` that occurs when attempting to pass an integer directly to a C++ function expecting a `char`. pybind11 does not implicitly convert Python integers to characters.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/cast/strings.rst#_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\n>>> example.pass_char(0x65)\nTypeError\n```\n\n----------------------------------------\n\nTITLE: Defining a Queue Class (Example)\nDESCRIPTION: This is an example of a template class `Queue` which illustrates a FIFO queue. It includes methods for enqueueing, dequeueing, and determining the size of the queue.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/Primer.md#_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <typename E> // E is the element type.\nclass Queue {\n public:\n  Queue();\n  void Enqueue(const E& element);\n  E* Dequeue(); // Returns NULL if the queue is empty.\n  size_t size() const;\n  ...\n};\n```\n\n----------------------------------------\n\nTITLE: Creating an SFX to open a file (Example 3)\nDESCRIPTION: These commands create a self-extracting archive that opens a file (readme.txt). The first command compresses the readme.txt file into a 7z archive. The second command combines the 7zS2.sfx module with the archive to create the self-extracting executable.\nSOURCE: https://github.com/openai/retro/blob/master/cores/pce/deps/lzma-16.04/DOC/installer.txt#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\n7zr a h.7z readme.txt -mx\n```\n\nLANGUAGE: Shell\nCODE:\n```\ncopy /b 7zS2.sfx + h.7z 7zTxt.exe\n```\n\nLANGUAGE: Shell\nCODE:\n```\n7zTxt.exe\n```\n\n----------------------------------------\n\nTITLE: Finding GoogleTest in Autoconf\nDESCRIPTION: This Autoconf snippet uses `PKG_CHECK_MODULES` to locate the `gtest_main` module via `pkg-config`. It initializes the Automake environment and configures the Makefile.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/Pkgconfig.md#_snippet_1\n\nLANGUAGE: autoconf\nCODE:\n```\nAC_PREREQ([2.69])\nAC_INIT([my_gtest_pkgconfig], [0.0.1])\nAC_CONFIG_SRCDIR([samples/sample3_unittest.cc])\nAC_PROG_CXX\n\nPKG_CHECK_MODULES([GTEST], [gtest_main])\n\nAM_INIT_AUTOMAKE([foreign subdir-objects])\nAC_CONFIG_FILES([Makefile])\nAC_OUTPUT\n```\n\n----------------------------------------\n\nTITLE: Fixed movie recording bug\nDESCRIPTION: This snippet fixes a major bug in the movie recording code and adds code to automatically detect and fix playback of broken movies from earlier versions. This ensures that movie recording and playback function correctly and that older recordings are compatible.\nSOURCE: https://github.com/openai/retro/blob/master/cores/nes/changelog.txt#_snippet_30\n\n\n\n----------------------------------------\n\nTITLE: Binding External Library Class with pybind11\nDESCRIPTION: This snippet demonstrates how to bind a class `Pet` from an external library `pets` using pybind11. It defines a method `get_name` that accesses the `name` member of the `Pet` class.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/classes.rst#_snippet_35\n\nLANGUAGE: cpp\nCODE:\n```\npy::class<pets::Pet>(m, \"Pet\")\n    .def(\"get_name\", &pets::Pet::name);\n```\n\n----------------------------------------\n\nTITLE: Building libzip with CMake\nDESCRIPTION: This shell script details the steps required to build libzip using CMake. It creates a build directory, navigates into it, configures the project using CMake, builds the project using make, runs the tests, and installs the library.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/libzip/INSTALL.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmkdir build\ncd build\ncmake ..\nmake\nmake test\nmake install\n```\n\n----------------------------------------\n\nTITLE: Setting Extension for Windows Hosts\nDESCRIPTION: This snippet checks if the host system is Windows. If it is, it sets the 'extension' variable to '.exe'. This is used later when finding the toolchain executables to ensure the correct executable extension is used on Windows.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/platform/3ds/CMakeToolchain.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(extension)\nif (CMAKE_HOST_WIN32)\n\tset(extension .exe)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adler-32 Calculation Function in C\nDESCRIPTION: This function calculates the Adler-32 checksum of a buffer of bytes. It takes a pointer to the buffer and the length of the buffer as input. It calls the `update_adler32` function with an initial Adler-32 value of 1L and returns the calculated checksum value.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/third-party/zlib/doc/rfc1950.txt#_snippet_2\n\nLANGUAGE: C\nCODE:\n```\nunsigned long adler32(unsigned char *buf, int len)\n      {\n        return update_adler32(1L, buf, len);\n      }\n```\n\n----------------------------------------\n\nTITLE: Set target properties (compile definitions)\nDESCRIPTION: Sets the compile definitions for the executable target.  It combines `OS_DEFINES`, `FEATURE_DEFINES`, and `FUNCTION_DEFINES`. These definitions are passed to the compiler as `-D` flags.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/platform/psp2/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nset_target_properties(${BINARY_NAME}.elf PROPERTIES COMPILE_DEFINITIONS \"${OS_DEFINES};${FEATURE_DEFINES};${FUNCTION_DEFINES}\")\n```\n\n----------------------------------------\n\nTITLE: Define Mock Install Target\nDESCRIPTION: Adds a custom target named `mock_install` which executes the cmake_install.cmake script.  This simulates the installation process for testing purposes by setting CMAKE_INSTALL_PREFIX to a mock directory.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/tests/test_cmake_build/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(PYBIND11_INSTALL)\n  add_custom_target(mock_install ${CMAKE_COMMAND}\n    \"-DCMAKE_INSTALL_PREFIX=${PROJECT_BINARY_DIR}/mock_install\"\n    -P \"${PROJECT_BINARY_DIR}/cmake_install.cmake\"\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Death Test Assertion\nDESCRIPTION: This code snippet shows how to conditionally execute a death test based on a runtime condition. It demonstrates the flexibility of ASSERT_DEATH by allowing it to be used within control flow statements, enabling dynamic test behavior.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/FAQ.md#_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\nif (FooCondition()) {\n  ASSERT_DEATH(Bar(), \"blah\");\n} else {\n  ASSERT_EQ(5, Bar());\n}\n```\n\n----------------------------------------\n\nTITLE: Build Retro UI on macOS\nDESCRIPTION: Configures and builds the Gym Retro UI on macOS using CMake and make.  CMAKE_PREFIX_PATH is set to specify the location of Qt, BUILD_UI is enabled, and PYLIB_DIRECTORY is unset. The application is then opened.\nSOURCE: https://github.com/openai/retro/blob/master/docs/developing.rst#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncmake . -DCMAKE_PREFIX_PATH=/usr/local/opt/qt -DBUILD_UI=ON -UPYLIB_DIRECTORY\nmake -j$(sysctl hw.ncpu | cut -d: -f2)\nopen \"Gym Retro Integration.app\"\n```\n\n----------------------------------------\n\nTITLE: Setting SDL Version Variable in CMake\nDESCRIPTION: This CMake snippet sets the SDL version to be used (either 1.2 or 2) and caches it so the user can modify it. The cache string is used to store the user defined value, persisting between CMake runs.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/platform/sdl/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SDL_VERSION \"2\" CACHE STRING \"Version of SDL to use (1.2 or 2)\")\n```\n\n----------------------------------------\n\nTITLE: Check for getopt Function and Set Source Files (CMake)\nDESCRIPTION: This snippet checks if the getopt function exists. If it doesn't exist, it sets the source file for getopt, includes necessary directories for compilation.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/libzip/examples/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nCHECK_FUNCTION_EXISTS(getopt HAVE_GETOPT)\nIF(NOT HAVE_GETOPT)\n  SET(SRC_EXTRA_FILES ../src/getopt.c)\nINCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}\n  ${CMAKE_CURRENT_SOURCE_DIR}/../src)\nENDIF(NOT HAVE_GETOPT)\n```\n\n----------------------------------------\n\nTITLE: Running AFL Fuzz Tests\nDESCRIPTION: This snippet outlines how to manually run AFL fuzz tests using the `afl-fuzz.sh` script. It requires the script to be executed for each of the three test cases for an extended period (ideally 24 hours or more).\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/RELEASE-PROCESS.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nafl-fuzz.sh\n```\n\n----------------------------------------\n\nTITLE: Binding add function with named arguments\nDESCRIPTION: This code demonstrates how to bind the `add` function with named arguments, allowing it to be called with keyword arguments in Python. The `py::arg` objects specify the names of the arguments that are exposed to Python.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/basics.rst#_snippet_7\n\nLANGUAGE: cpp\nCODE:\n```\nm.def(\"add\", &add, \"A function which adds two numbers\",\n      py::arg(\"i\"), py::arg(\"j\"));\n```\n\n----------------------------------------\n\nTITLE: Python code causing double free\nDESCRIPTION: This Python code triggers a double free error when used with the flawed C++ code above. The Parent object is created, and get_child() is called. The raw pointer returned is then handled incorrectly by pybind11.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/smart_ptrs.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom example import Parent\nprint(Parent().get_child())\n```\n\n----------------------------------------\n\nTITLE: Compiling mGBA on Windows with MSYS2\nDESCRIPTION: These commands compile mGBA on Windows using the MSYS2 environment. It creates a build directory, navigates into it, configures the build using CMake with the \"MSYS Makefiles\" generator, and compiles the code with make.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/README_DE.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\ncd mgba\nmkdir build\ncd build\ncmake .. -G \"MSYS Makefiles\"\nmake\n```\n\n----------------------------------------\n\nTITLE: Run random agent Gym Retro script\nDESCRIPTION: This command runs a random agent Python script that chooses a random action on each timestep.  It requires the retro package to be installed and the scenario to be properly set up with reward and scenario data defined.\nSOURCE: https://github.com/openai/retro/blob/master/docs/getting_started.rst#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m retro.examples.random_agent --game Airstriker-Genesis\n```\n\n----------------------------------------\n\nTITLE: Globbing Source Files\nDESCRIPTION: This snippet uses the `file(GLOB)` command to find all C++ source files (*.cpp) in the current directory and store them in the `SRC` variable. This list is used later to define the source files for the executable.\nSOURCE: https://github.com/openai/retro/blob/master/src/ui/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfile(GLOB SRC *.cpp)\n```\n\n----------------------------------------\n\nTITLE: Checking C++11 Support\nDESCRIPTION: Checks for C++11 support using the CheckIncludeFileCXX module. Different flags are used based on whether it's a MSVC compiler or not.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/c++/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(CheckIncludeFileCXX)\nif(MSVC)\n  check_include_file_cxx(initializer_list HAS_CXX11)\nelse()\n  check_include_file_cxx(initializer_list HAS_CXX11 \"-std=gnu++0x\")\nendif()\nif(NOT HAS_CXX11)\n  message(SEND_ERROR \"Requires a C++11 compiler and standard library.\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: LZMA Decoder History Initialization C++\nDESCRIPTION: This C++ code initializes the history of the latest 4 match distances used by the LZMA decoder. The rep0, rep1, rep2, and rep3 variables, which store zero-based match distances, are initialized to zero.\nSOURCE: https://github.com/openai/retro/blob/master/cores/pce/deps/lzma-16.04/DOC/lzma-specification.txt#_snippet_21\n\nLANGUAGE: C++\nCODE:\n```\nUInt32 rep0 = 0, rep1 = 0, rep2 = 0, rep3 = 0;\n```\n\n----------------------------------------\n\nTITLE: C Struct Definition Example\nDESCRIPTION: This example demonstrates the correct style for defining C structs, including the naming of struct members and methods. Struct names should start with a capital letter and methods should be prefixed with the struct name.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nstruct LocalStruct {\n\t\tvoid (*methodName)(struct LocalStruct struct, param);\n\t\t\n\t\tint memberName;\n\t};\n\t\n\tenum {\n\t\tENUM_ITEM_1,\n\t\tENUM_ITEM_2\n\t};\n```\n\n----------------------------------------\n\nTITLE: Linking to pybind11 Embed Target\nDESCRIPTION: This snippet demonstrates how to link an executable to the `pybind11::embed` target in CMake for embedding the Python interpreter. It automatically provides all necessary headers and libraries.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/compiling.rst#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.0)\nproject(example)\n\nfind_package(pybind11 REQUIRED)  # or add_subdirectory(pybind11)\n\nadd_executable(example main.cpp)\ntarget_link_libraries(example PRIVATE pybind11::embed)\n```\n\n----------------------------------------\n\nTITLE: String Pointers with kj::StringPtr in C++\nDESCRIPTION: This snippet describes the recommended way to point to a null-terminated string.  `kj::StringPtr` should be used instead of `const char*` to clearly indicate that the pointer references a string.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/style-guide.md#_snippet_7\n\nLANGUAGE: C++\nCODE:\n```\n* Always use `kj::StringPtr` rather than `const char*` to point to a NUL-terminated string.\n```\n\n----------------------------------------\n\nTITLE: Adding Executable Target\nDESCRIPTION: This snippet defines the executable target `gym-retro-integration` using the source files in `SRC`. The `WIN32` and `MACOSX_BUNDLE` options are specified to build a Windows executable and a macOS application bundle, respectively.\nSOURCE: https://github.com/openai/retro/blob/master/src/ui/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(gym-retro-integration WIN32 MACOSX_BUNDLE ${SRC})\n```\n\n----------------------------------------\n\nTITLE: Create Literals Array C++\nDESCRIPTION: This method creates an array named 'LitProbs', with the size of (UInt32)0x300 << (lc + lp). The created array is meant to store CProb values which is later used for decoding literals.\nSOURCE: https://github.com/openai/retro/blob/master/cores/pce/deps/lzma-16.04/DOC/lzma-specification.txt#_snippet_12\n\nLANGUAGE: C++\nCODE:\n```\nvoid CreateLiterals()\n{\n  LitProbs = new CProb[(UInt32)0x300 << (lc + lp)];\n}\n```\n\n----------------------------------------\n\nTITLE: Setting PKG_CONFIG_PATH\nDESCRIPTION: This shell snippet demonstrates how to set the `PKG_CONFIG_PATH` environment variable to help `pkg-config` find the `.pc` files for GoogleTest. This is required when GoogleTest is not installed in a standard location.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/Pkgconfig.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nexport PKG_CONFIG_PATH=/usr/local/lib64/pkgconfig\n```\n\n----------------------------------------\n\nTITLE: Defining GET_TARGET_PROPERTY_WITH_DEFAULT Macro CMake\nDESCRIPTION: Defines a macro to get a target property and set a default value if the property is not found. This simplifies retrieving properties with fallback values.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/libzip/lib/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nMACRO(GET_TARGET_PROPERTY_WITH_DEFAULT _variable _target _property _default_value)\n  GET_TARGET_PROPERTY(${_variable} ${_target} ${_property})\n  IF(${_variable} STREQUAL NOTFOUND)\n    SET(${_variable} ${_default_value})\n  ENDIF()\nENDMACRO()\n```\n\n----------------------------------------\n\nTITLE: Adding KJ Test Library\nDESCRIPTION: Adds the KJ test library, sets an alias for it, and links it against the core KJ library.  Creates a static library called `kj-test` from the source files, then aliases `kj-test` to `CapnProto::kj-test`.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/c++/src/kj/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(kj-test ${kj-test_sources})\nadd_library(CapnProto::kj-test ALIAS kj-test)\ntarget_link_libraries(kj-test PUBLIC kj)\n```\n\n----------------------------------------\n\nTITLE: Fixture Class Template Definition C++\nDESCRIPTION: Defines a fixture class template parameterized by a type `T`. This fixture inherits from `::testing::Test` and includes typedefs and static/member variables for use in typed tests.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/AdvancedGuide.md#_snippet_28\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <typename T>\nclass FooTest : public ::testing::Test {\n public:\n  ...\n  typedef std::list<T> List;\n  static T shared_;\n  T value_;\n};\n```\n\n----------------------------------------\n\nTITLE: Git Branch Checkout and Push (New Minor Version)\nDESCRIPTION: This snippet describes the commands to checkout and push a new branch for a new minor version release.  This includes creating a new branch, pushing the branch to the remote repository and setting up tracking.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/release.rst#_snippet_6\n\nLANGUAGE: Text\nCODE:\n```\nif new minor version: ``git checkout -b vX.Y``, ``git push -u origin vX.Y``\n```\n\n----------------------------------------\n\nTITLE: Python Class Inheriting from C++ Class (Python)\nDESCRIPTION: Defines a Python class `ShihTzu` that inherits from the C++ class `Dog`.  It overrides the `bark` method to provide a Python-specific implementation. Demonstrates how to use the bound C++ classes in Python.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/classes.rst#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nclass ShihTzu(Dog):\n    def bark(self):\n        return \"yip!\"\n```\n\n----------------------------------------\n\nTITLE: Readded checks for bad iNES dumps\nDESCRIPTION: This snippet restores checks in ines.c for identifying and handling common bad ROM dumps and non-working hacked games. These checks prevent the emulator from attempting to load or execute corrupted or modified ROM files.\nSOURCE: https://github.com/openai/retro/blob/master/cores/nes/changelog.txt#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Setting up CMake for Embedding Python\nDESCRIPTION: This CMake snippet sets up a basic executable with an embedded Python interpreter using pybind11. It finds the pybind11 package, adds an executable, and links it with the `pybind11::embed` target.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/embedding.rst#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.0)\nproject(example)\n\nfind_package(pybind11 REQUIRED)  # or `add_subdirectory(pybind11)`\n\nadd_executable(example main.cpp)\ntarget_link_libraries(example PRIVATE pybind11::embed)\n```\n\n----------------------------------------\n\nTITLE: Fixed SetupCartMirroring bug\nDESCRIPTION: This snippet addresses a long-standing bug in the SetupCartMirroring() function that could lead to corrupted mirroring in certain games if loaded in a specific order. This fix resolves a significant issue that affected the visual rendering of games.\nSOURCE: https://github.com/openai/retro/blob/master/cores/nes/changelog.txt#_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: TLS Bindings Diff using KJ Networking in C++\nDESCRIPTION: Illustrates the minimal code changes required to integrate TLS with KJ networking. It highlights how the `kj::TlsContext` and `tls.wrapNetwork()` are used for secure connections.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/doc/slides-2017.05.18/index.md#_snippet_6\n\nLANGUAGE: c++\nCODE:\n```\nvoid send() {\n\n  kj::TlsContext tls;\n                 tls.wrapNetwork(                         );\n\n\n\n\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Version in docs/conf.py\nDESCRIPTION: This snippet describes the action to update the version number in the `docs/conf.py` file. This file configures the Sphinx documentation and contains settings like the current version of the library, which needs updating for a new release.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/release.rst#_snippet_3\n\nLANGUAGE: Text\nCODE:\n```\nUpdate version in ``docs/conf.py``.\n```\n\n----------------------------------------\n\nTITLE: Setting macOS Package Location\nDESCRIPTION: This snippet is specific to macOS (`if(APPLE)`). It sets the `MACOSX_PACKAGE_LOCATION` property for the logo icon file to `Resources`. This specifies where the icon file should be placed in the macOS application bundle.\nSOURCE: https://github.com/openai/retro/blob/master/src/ui/CMakeLists.txt#_snippet_18\n\nLANGUAGE: CMake\nCODE:\n```\nif(APPLE)\n    set_source_files_properties(\"${CMAKE_CURRENT_SOURCE_DIR}/logo.icns\" PROPERTIES MACOSX_PACKAGE_LOCATION \"Resources\")\n```\n\n----------------------------------------\n\nTITLE: Example Test Functions for Sharding\nDESCRIPTION: Example set of test functions used to demonstrate how Google Test can distribute tests across multiple machines (shards).  The example assumes there are 5 tests split across two test cases.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/AdvancedGuide.md#_snippet_57\n\nLANGUAGE: cpp\nCODE:\n```\nTEST(A, V)\nTEST(A, W)\nTEST(B, X)\nTEST(B, Y)\nTEST(B, Z)\n```\n\n----------------------------------------\n\nTITLE: LZMA Encoder Object Destruction (C)\nDESCRIPTION: This code snippet shows how to destroy the LZMA encoder object using `LzmaEnc_Destroy`. It releases the memory allocated for the encoder and requires the memory allocators that were used during the creation of the encoder object.\nSOURCE: https://github.com/openai/retro/blob/master/cores/genesis/core/cd_hw/libchdr/deps/lzma/DOC/lzma.txt#_snippet_8\n\nLANGUAGE: C\nCODE:\n```\nLzmaEnc_Destroy(enc, &g_Alloc, &g_Alloc);\n```\n\n----------------------------------------\n\nTITLE: Override Animal::go in Python\nDESCRIPTION: This Python code demonstrates how to override the `Animal::go` virtual function in a Python class `Cat`. It then invokes the overridden function through the `call_go` function.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/classes.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> from example import *\n>>> d = Dog()\n>>> call_go(d)\nu'woof! woof! woof! '\n>>> class Cat(Animal):\n...     def go(self, n_times):\n...             return \"meow! \" * n_times\n...\n>>> c = Cat()\n>>> call_go(c)\nu'meow! meow! meow! '\n```\n\n----------------------------------------\n\nTITLE: Namespace Declaration Example C++\nDESCRIPTION: Shows the recommended style for declaring namespaces, including nested namespaces and forward declarations. Demonstrates how to handle indentation within namespaces, with an exception for short blocks at the top of a file.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/style-guide.md#_snippet_15\n\nLANGUAGE: C++\nCODE:\n```\nnamespace external {\n  class Forward;\n  class Declarations;\n  namespace nested {\n    class More;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling pybind11 example on Linux\nDESCRIPTION: This bash command compiles a pybind11 example on Linux. It uses g++, includes the pybind11 headers, specifies C++11 standard, and creates a shared library named example with the appropriate extension.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/basics.rst#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ c++ -O3 -Wall -shared -std=c++11 -fPIC `python3 -m pybind11 --includes` example.cpp -o example`python3-config --extension-suffix`\n```\n\n----------------------------------------\n\nTITLE: Defining a Struct in Cap'n Proto\nDESCRIPTION: This code defines a simple `Person` struct with `name` and `email` fields. Fields within a struct are numbered consecutively starting from zero, as indicated by the `@N` annotations.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/doc/language.md#_snippet_3\n\nLANGUAGE: capnp\nCODE:\n```\nstruct Person {\n  name @0 :Text;\n  email @1 :Text;\n}\n```\n\n----------------------------------------\n\nTITLE: EXPECT_CALL with Argument Matcher\nDESCRIPTION: This example demonstrates how to use argument matchers in `EXPECT_CALL` to specify the expected arguments for a mock method. It shows how to use the wildcard matcher `_` to indicate that any argument is acceptable.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googlemock/docs/ForDummies.md#_snippet_6\n\nLANGUAGE: C++\nCODE:\n```\nusing ::testing::_;...\n// Expects the turtle to move forward.\nEXPECT_CALL(turtle, Forward(_));\n```\n\n----------------------------------------\n\nTITLE: Incorrect use of PyAnimal\nDESCRIPTION: This example illustrates what NOT to do. The `go` method should be bound to the base class `Animal` and NOT the trampoline class `PyAnimal`\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/classes.rst#_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\npy::class_<Animal, PyAnimal /* <--- trampoline*/> animal(m, \"Animal\");\n    animal\n        .def(py::init<>())\n        .def(\"go\", &PyAnimal::go); /* <--- THIS IS WRONG, use &Animal::go */\n```\n\n----------------------------------------\n\nTITLE: Building and testing libzip\nDESCRIPTION: This command builds zlib and libzip and then runs the libzip regression test suite. It requires the 'vsbuild.cmd' script to be executed from the 'vstudio' directory with the correct generator and toolset parameters.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/libzip/vstudio/readme.txt#_snippet_6\n\nLANGUAGE: batch\nCODE:\n```\nvsbuild build+test <generator> <toolset>\n```\n\n----------------------------------------\n\nTITLE: Installing Executable Target\nDESCRIPTION: This snippet installs the `gym-retro-integration` target. It specifies that the runtime component should be installed in the `CMAKE_INSTALL_BINDIR` directory and the bundle component should be installed in the root directory (\".\").\nSOURCE: https://github.com/openai/retro/blob/master/src/ui/CMakeLists.txt#_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(TARGETS gym-retro-integration\n    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT gym-retro-integration\n    BUNDLE DESTINATION \".\" COMPONENT gym-retro-integration)\n```\n\n----------------------------------------\n\nTITLE: LZMA Short Rep Match Process\nDESCRIPTION: Updates state with UpdateState_ShortRep, puts a byte from the output window to current position using rep0 + 1 as the index, decrements the uncompressed size, and continues the loop.\nSOURCE: https://github.com/openai/retro/blob/master/cores/genesis/core/cd_hw/libchdr/deps/lzma/DOC/lzma-specification.txt#_snippet_38\n\nLANGUAGE: C++\nCODE:\n```\nstate = UpdateState_ShortRep(state);\nOutWindow.PutByte(OutWindow.GetByte(rep0 + 1));\nunpackSize--;\ncontinue;\n```\n\n----------------------------------------\n\nTITLE: Revert Version Update in _version.py\nDESCRIPTION: This snippet describes the action to update the version number in the `_version.py` file after the release is complete. This involves adding the 'dev' suffix and incrementing the minor version to indicate the next development iteration.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/release.rst#_snippet_12\n\nLANGUAGE: Text\nCODE:\n```\nUpdate ``_version.py`` (add 'dev' and increment minor).\n```\n\n----------------------------------------\n\nTITLE: Win32: Configurable blit-skipping behavior\nDESCRIPTION: This snippet adds the ability to configure blit-skipping behavior to some extent in the \"Timing\" configuration window in the Win32 version. This allows users to customize the performance optimization based on their preferences and system capabilities.\nSOURCE: https://github.com/openai/retro/blob/master/cores/nes/changelog.txt#_snippet_24\n\n\n\n----------------------------------------\n\nTITLE: Adding Custom Target for DOL Conversion in CMake\nDESCRIPTION: This CMake snippet adds a custom target to convert the ELF file to a DOL file. It uses the `elf2dol` tool for the conversion. The target depends on the ELF file being built.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/platform/wii/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_target(${BINARY_NAME}.dol ALL\n                  ${ELF2DOL} ${BINARY_NAME}.elf ${BINARY_NAME}.dol\n                  DEPENDS ${BINARY_NAME}.elf)\n```\n\n----------------------------------------\n\nTITLE: Normalizing Grapheme Clusters in Python\nDESCRIPTION: This Python code shows how to normalize combining characters using `unicodedata.normalize('NFC', combining_e_acute)` before passing them to C++. This can resolve issues with grapheme clusters in *some* cases.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/cast/strings.rst#_snippet_16\n\nLANGUAGE: Python\nCODE:\n```\n>>> example.pass_wchar(unicodedata.normalize('NFC', combining_e_acute))\n'é'\n```\n\n----------------------------------------\n\nTITLE: AssertionResult Factory Functions\nDESCRIPTION: This snippet declares the factory functions used to generate `AssertionResult` objects to indicate the success or failure of an assertion. These functions are part of the `testing` namespace.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/AdvancedGuide.md#_snippet_3\n\nLANGUAGE: c++\nCODE:\n```\nnamespace testing {\n\n// Returns an AssertionResult object to indicate that an assertion has\n// succeeded.\nAssertionResult AssertionSuccess();\n\n// Returns an AssertionResult object to indicate that an assertion has\n// failed.\nAssertionResult AssertionFailure();\n\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Python Libraries in C++\nDESCRIPTION: This code snippet demonstrates importing the 'scipy' Python library from C++ using pybind11 and accessing its version attribute. The return value contains the scipy version.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/pycpp/object.rst#_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\n// Try to import scipy\npy::object scipy = py::module::import(\"scipy\");\nreturn scipy.attr(\"__version__\");\n```\n\n----------------------------------------\n\nTITLE: Sending data without TLS using KJ Networking in C++\nDESCRIPTION: This C++ code demonstrates sending data over a network using the KJ library without TLS encryption. It sets up asynchronous I/O, resolves an address, connects to it, and then writes data to the connection.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/doc/slides-2017.05.18/index.md#_snippet_4\n\nLANGUAGE: c++\nCODE:\n```\nvoid send() {\n  auto io = kj::setupAsyncIo();\n  auto& network = io.provider->getNetwork();\n  auto addr = network.parseAddress(\"capnproto.org\", 80)\n      .wait(io.waitScope);\n  auto connection = addr->connect().wait(io.waitScope);\n  connection->write(\"GET /\", 5).wait(io.waitScope);\n}\n```\n\n----------------------------------------\n\nTITLE: Python Function Definition with Keyword Arguments\nDESCRIPTION: This Python code shows an example function definition that uses keyword arguments. This defines the structure of how you would call a function with the named arguments.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/pycpp/object.rst#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndef f(number, say, to):\n    ...  # function code\n\nf(1234, say=\"hello\", to=some_instance)  # keyword call in Python\n```\n\n----------------------------------------\n\nTITLE: Class Definition Example C++\nDESCRIPTION: Illustrates the preferred style for defining classes, including indentation for 'public', 'private', and 'protected' access modifiers. Demonstrates how to structure class members and methods within a namespace.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/style-guide.md#_snippet_16\n\nLANGUAGE: C++\nCODE:\n```\nnamespace myproj {\n\nclass Fred {\npublic:\n  Fred();\n  ~Fred();\nprivate:\n  int plugh;\n};\n\n}  // namespace myproj\n```\n\n----------------------------------------\n\nTITLE: Initializing and Executing the M68k Emulator in C\nDESCRIPTION: This snippet describes the functions used to initialize the Musashi core, execute instructions, and trigger interrupts. `m68k_pulse_reset()` initializes the core, `m68k_execute()` executes instructions, and `m68k_set_irq()` sets the interrupt level.\nSOURCE: https://github.com/openai/retro/blob/master/cores/genesis/core/m68k/readme.txt#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nm68k_pulse_reset();\nm68k_execute();\nm68k_set_irq();\n```\n\n----------------------------------------\n\nTITLE: Building Google Test with GCC\nDESCRIPTION: This snippet shows how to compile Google Test using GCC on a Linux-like system. It includes the necessary compiler flags for including header files and enabling threading.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/README.md#_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ng++ -isystem ${GTEST_DIR}/include -I${GTEST_DIR} \\\n        -pthread -c ${GTEST_DIR}/src/gtest-all.cc\nar -rv libgtest.a gtest-all.o\n```\n\n----------------------------------------\n\nTITLE: Creating and Linking a Shared Library\nDESCRIPTION: This snippet creates a shared library named `test_cmake_build` from the source file `../main.cpp` and links it with the `pybind11::module` target. The library is created as a MODULE to be loadable as a Python module.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/tests/test_cmake_build/subdirectory_target/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(test_cmake_build MODULE ../main.cpp)\n\ntarget_link_libraries(test_cmake_build PRIVATE pybind11::module)\n```\n\n----------------------------------------\n\nTITLE: Parameterized Test Definition\nDESCRIPTION: Defines a parameterized test using the `TEST_P` macro. The `GetParam()` method is used to retrieve the parameter value for the current test iteration.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/AdvancedGuide.md#_snippet_25\n\nLANGUAGE: c++\nCODE:\n```\nTEST_P(FooTest, DoesBlah) {\n  // Inside a test, access the test parameter with the GetParam() method\n  // of the TestWithParam<T> class:\n  EXPECT_TRUE(foo.Blah(GetParam()));\n  ...\n}\n\nTEST_P(FooTest, HasBlahBlah) {\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Register Type-Parameterized Test Patterns C++\nDESCRIPTION: Registers all test patterns using the `REGISTER_TYPED_TEST_CASE_P` macro. The first argument is the test case name, and the remaining arguments are the names of the tests within that test case.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/AdvancedGuide.md#_snippet_34\n\nLANGUAGE: cpp\nCODE:\n```\nREGISTER_TYPED_TEST_CASE_P(FooTest,\n                           DoesBlah, HasPropertyA);\n```\n\n----------------------------------------\n\nTITLE: Binding Python Dict Argument Function\nDESCRIPTION: This C++ code shows how to expose the `print_dict` function to Python using pybind11. This makes the function accessible from Python, allowing Python code to pass dictionaries to the C++ function for processing.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/functions.rst#_snippet_8\n\nLANGUAGE: cpp\nCODE:\n```\nm.def(\"print_dict\", &print_dict);\n```\n\n----------------------------------------\n\nTITLE: Conditional Error Message with CMake\nDESCRIPTION: If no library variant (static, shared, framework) is selected, this code issues a fatal error message, prompting the user to enable at least one of the build options.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/third-party/libpng/CMakeLists.txt#_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT PNG_LIB_TARGETS)\n  message(SEND_ERROR\n    \"No library variant selected to build. \"\n    \"Please enable at least one of the following options: \"\n    \" PNG_STATIC, PNG_SHARED, PNG_FRAMEWORK\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Glob OS-specific source files\nDESCRIPTION: Uses `file(GLOB)` to find all C source files with the `psp2-` prefix in the current source directory. This is used to include OS-specific code for the PS Vita port.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/platform/psp2/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nfile(GLOB OS_SRC ${CMAKE_CURRENT_SOURCE_DIR}/psp2-*.c)\nset(OS_SRC ${OS_SRC} PARENT_SCOPE)\nsource_group(\"PS Vita-specific code\" FILES ${OS_SRC})\n```\n\n----------------------------------------\n\nTITLE: Create PS Vita SELF file\nDESCRIPTION: Calls the `vita_create_self` function (provided by VitaSDK's CMake module) to create a SELF (Signed Executable and Linkable Format) file from the ELF file. This SELF file is the executable format for PS Vita applications.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/platform/psp2/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nvita_create_self(${BINARY_NAME}.self ${BINARY_NAME}.elf)\n```\n\n----------------------------------------\n\nTITLE: Mocking a Class Template with Google Mock in C++\nDESCRIPTION: This snippet demonstrates how to create a mock class for a class template using Google Mock. It uses the MOCK_*_T macros to define mock methods that are templated.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googlemock/docs/CheatSheet.md#_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <typename Elem>\nclass StackInterface {\n public:\n  ...\n  virtual ~StackInterface();\n  virtual int GetSize() const = 0;\n  virtual void Push(const Elem& x) = 0;\n};\n```\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <typename Elem>\nclass MockStack : public StackInterface<Elem> {\n public:\n  ...\n  MOCK_CONST_METHOD0_T(GetSize, int());\n  MOCK_METHOD1_T(Push, void(const Elem& x));\n};\n```\n\n----------------------------------------\n\nTITLE: Cleared graphics buffer on PPU \"dead\" state\nDESCRIPTION: This snippet ensures that when the PPU is in a \"dead\" state after starting up, the graphics buffer is cleared. This prevents the last image from a previous game from being displayed briefly when a new game is loaded.\nSOURCE: https://github.com/openai/retro/blob/master/cores/nes/changelog.txt#_snippet_22\n\n\n\n----------------------------------------\n\nTITLE: Set Environment Variables for Windows Build\nDESCRIPTION: Sets the environment variables required to locate build tools within the MSYS2 environment.  This ensures that the build process can find the necessary compilers and utilities.\nSOURCE: https://github.com/openai/retro/blob/master/docs/developing.rst#_snippet_2\n\nLANGUAGE: bat\nCODE:\n```\npath %PATH%;C:\\msys64\\mingw64\\bin;C:\\msys64\\usr\\bin\nset MSYSTEM=MINGW64\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Target for Running on Wii in CMake\nDESCRIPTION: This CMake snippet adds a custom target to run the DOL file on the Wii. It uses the `wiiload` tool to transfer the DOL file to the device. The target depends on the DOL file being created.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/platform/wii/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_target(run ${WIILOAD} ${CMAKE_CURRENT_BINARY_DIR}/${BINARY_NAME}.dol\n                  DEPENDS ${BINARY_NAME}.dol)\n```\n\n----------------------------------------\n\nTITLE: Game Genie ROM Loading Support\nDESCRIPTION: This snippet describes adding support for loading the iNES-format Game Genie ROM image. The separate header file `ggrom.h` was removed, and code was added to load the Game Genie ROM image from a file.\nSOURCE: https://github.com/openai/retro/blob/master/cores/nes/changelog.txt#_snippet_83\n\n\n\n----------------------------------------\n\nTITLE: Setting Installation Directories\nDESCRIPTION: Defines installation directories for binaries, libraries, and include files. This section includes platform-specific paths.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(CMakeDependentOption)\nif (CMAKE_VERSION VERSION_LESS 2.8.5)\n  set(CMAKE_INSTALL_BINDIR \"bin\" CACHE STRING \"User executables (bin)\")\n  set(CMAKE_INSTALL_LIBDIR \"lib${LIB_SUFFIX}\" CACHE STRING \"Object code libraries (lib)\")\n  set(CMAKE_INSTALL_INCLUDEDIR \"include\" CACHE STRING \"C header files (include)\")\n  mark_as_advanced(CMAKE_INSTALL_BINDIR CMAKE_INSTALL_LIBDIR CMAKE_INSTALL_INCLUDEDIR)\nelse()\n  include(GNUInstallDirs)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing Export File (CMake)\nDESCRIPTION: This code block installs a CMake export file, allowing CMake users to `include()` it and import the libpng targets. The export file is placed in the lib/libpng directory with a `.cmake` extension.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/third-party/libpng/CMakeLists.txt#_snippet_24\n\nLANGUAGE: cmake\nCODE:\n```\nif(PNG_EXPORT_RULE AND NOT SKIP_INSTALL_EXPORT AND NOT SKIP_INSTALL_ALL )\n  install(EXPORT libpng DESTINATION lib/libpng FILE lib${PNG_LIB_NAME}.cmake)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Importing Types (Cap'n Proto)\nDESCRIPTION: This example shows how to import types from other Cap'n Proto files using the `import` keyword. It demonstrates using aliases to shorten the imported type names.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/doc/language.md#_snippet_21\n\nLANGUAGE: capnp\nCODE:\n```\nstruct Foo {\n  # Use type \"Baz\" defined in bar.capnp.\n  baz @0 :import \"bar.capnp\".Baz;\n}\n{% endhighlight %}\n```\n\nLANGUAGE: capnp\nCODE:\n```\nusing Bar = import \"bar.capnp\";\n\nstruct Foo {\n  # Use type \"Baz\" defined in bar.capnp.\n  baz @0 :Bar.Baz;\n}\n{% endhighlight %}\n```\n\nLANGUAGE: capnp\nCODE:\n```\nusing import \"bar.capnp\".Baz;\n\nstruct Foo {\n  baz @0 :Baz;\n}\n{% endhighlight %}\n```\n\n----------------------------------------\n\nTITLE: LZMA Encoder Creation (C)\nDESCRIPTION: This code snippet shows how to create a `CLzmaEncHandle` object using `LzmaEnc_Create`. It checks for memory allocation errors by verifying that the returned pointer is not null.\nSOURCE: https://github.com/openai/retro/blob/master/cores/pce/deps/lzma-16.04/DOC/lzma.txt#_snippet_6\n\nLANGUAGE: C\nCODE:\n```\nCLzmaEncHandle enc;\n\nenc = LzmaEnc_Create(&g_Alloc);\nif (enc == 0)\n  return SZ_ERROR_MEM;\n```\n\n----------------------------------------\n\nTITLE: Installer Config File Example 2\nDESCRIPTION: This config file example defines the title, begin prompt, and the file to execute after extraction.  The file must start with ;!@Install@!UTF-8! and end with ;!@InstallEnd@!.\nSOURCE: https://github.com/openai/retro/blob/master/cores/pce/deps/lzma-16.04/DOC/installer.txt#_snippet_3\n\nLANGUAGE: Config\nCODE:\n```\n;!@Install@!UTF-8!\nTitle=\"7-Zip 4.00\"\nBeginPrompt=\"Do you want to install the 7-Zip 4.00?\"\nExecuteFile=\"7zip.msi\"\n;!@InstallEnd@!\n```\n\n----------------------------------------\n\nTITLE: Defining Cap'n Proto RPC Schemas\nDESCRIPTION: This snippet defines the Cap'n Proto schema files for RPC services. These schemas define the interfaces and data types used for RPC calls, enabling efficient and type-safe communication between applications.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/c++/src/capnp/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(capnp-rpc_schemas\n  rpc.capnp\n  rpc-twoparty.capnp\n  persistent.capnp\n)\n```\n\n----------------------------------------\n\nTITLE: 7-Zip Compression with ARM Filter\nDESCRIPTION: This command shows how to compress a file (a.bin) into a 7z archive (a2.7z) using LZMA with a filter for little-endian ARM code. This filter can improve the compression ratio for ARM executables.\nSOURCE: https://github.com/openai/retro/blob/master/cores/pce/deps/lzma-16.04/DOC/lzma-sdk.txt#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n7z a a2.7z a.bin -m0=arm -m1=lzma\n```\n\n----------------------------------------\n\nTITLE: Releasing the GIL using call_guard policy\nDESCRIPTION: This example shows how to release the GIL using the `call_guard` policy when defining a function in pybind11. It's a simplified alternative to using `py::gil_scoped_release` directly in the function body.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/misc.rst#_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nm.def(\"call_go\", &call_go, py::call_guard<py::gil_scoped_release>());\n```\n\n----------------------------------------\n\nTITLE: Encoded HeaderInfo Structure\nDESCRIPTION: Defines the HeaderInfo structure used for encoded headers, which contains StreamsInfo specifically for the encoded header. This section is crucial for understanding how headers are compressed and protected within the 7z archive.\nSOURCE: https://github.com/openai/retro/blob/master/cores/pce/deps/lzma-16.04/DOC/7zFormat.txt#_snippet_10\n\nLANGUAGE: text\nCODE:\n```\n[]\nBYTE NID::kEncodedHeader; (0x17)\nStreamsInfo for Encoded Header\n[]\n```\n\n----------------------------------------\n\nTITLE: unif.c Code Addition for CHR RAM\nDESCRIPTION: This snippet describes adding code to `unif.c` to support boards with CHR RAM instead of CHR ROM. It fixes the UNIF version of the game Q-Boy, indicating better support for unusual UNIF boards.\nSOURCE: https://github.com/openai/retro/blob/master/cores/nes/changelog.txt#_snippet_76\n\n\n\n----------------------------------------\n\nTITLE: Add Custom Target for Test Build\nDESCRIPTION: Adds a custom target named `test_cmake_build` to the CMake project. This likely serves as a dependency for other tests, indicating a foundational build process. The target itself doesn't have specific build commands within this snippet.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/tests/test_cmake_build/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(test_cmake_build)\n```\n\n----------------------------------------\n\nTITLE: Declaring Annotations (Cap'n Proto)\nDESCRIPTION: This example demonstrates how to declare and apply annotations in Cap'n Proto. Annotations can be used to attach extra information to parts of the protocol.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/doc/language.md#_snippet_22\n\nLANGUAGE: capnp\nCODE:\n```\n# Declare an annotation 'foo' which applies to struct and enum types.\nannotation foo(struct, enum) :Text;\n\n# Apply 'foo' to to MyType.\nstruct MyType $foo(\"bar\") {\n  # ...\n}\n{% endhighlight %}\n```\n\n----------------------------------------\n\nTITLE: iNES Header Fix Code Addition\nDESCRIPTION: This snippet describes the addition of code that fixes iNES header information in RAM and suggests changes to the user. The iNES header contains metadata about the ROM image and this code likely corrects discrepancies or inconsistencies.\nSOURCE: https://github.com/openai/retro/blob/master/cores/nes/changelog.txt#_snippet_62\n\n\n\n----------------------------------------\n\nTITLE: Module-Local Class Bindings - Pet Class (C++)\nDESCRIPTION: This snippet shows how to define a module-local class binding for the `Pet` class in `module1.cpp`. This makes the binding global across modules by default.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/classes.rst#_snippet_31\n\nLANGUAGE: cpp\nCODE:\n```\n// In the module1.cpp binding code for module1:\npy::class_<Pet>(m, \"Pet\")\n    .def(py::init<std::string>())\n    .def_readonly(\"name\", &Pet::name);\n```\n\n----------------------------------------\n\nTITLE: Defining a Directory Interface in Cap'n Proto\nDESCRIPTION: This Cap'n Proto interface defines methods for creating, opening, and removing files within a directory. It specifies the method signatures with parameter and return types.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/doc/cxxrpc.md#_snippet_4\n\nLANGUAGE: capnp\nCODE:\n```\ninterface Directory {\n  create @0 (name :Text) -> (file :File);\n  open @1 (name :Text) -> (file :File);\n  remove @2 (name :Text);\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Python Modules with pybind11\nDESCRIPTION: This C++ code imports the `sys` module using pybind11 and prints the `path` attribute of the imported module.  This demonstrates how to access module attributes in Python from C++ using pybind11.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/embedding.rst#_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\npy::module sys = py::module::import(\"sys\");\npy::print(sys.attr(\"path\"));\n```\n\n----------------------------------------\n\nTITLE: Buffer Protocol Annotation in pybind11 (C++)\nDESCRIPTION: This snippet demonstrates the requirement to include the `py::buffer_protocol()` annotation when declaring types that provide access via the buffer protocol in pybind11. This is necessary for future-proofing type definitions.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/upgrade.rst#_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\npy::class_<Matrix>(\"Matrix\", py::buffer_protocol())\n    .def(py::init<...>())\n    .def_buffer(...);\n```\n\n----------------------------------------\n\nTITLE: Install VPK package\nDESCRIPTION: Installs the generated VPK file to the specified destination (likely the build directory or a staging directory) with a component name. This step prepares the application for deployment.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/platform/psp2/CMakeLists.txt#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES ${CMAKE_CURRENT_BINARY_DIR}/${BINARY_NAME}.vpk DESTINATION . COMPONENT ${BINARY_NAME}-psp2)\n```\n\n----------------------------------------\n\nTITLE: Building ZLib.Ada with GNAT project file\nDESCRIPTION: This command demonstrates how to build ZLib.Ada using a GNAT project file (.gpr). It links the necessary ZLib library (libz.a). This approach simplifies the build process when using GNAT project files.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/third-party/zlib/contrib/ada/readme.txt#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngnatmake -Pzlib.gpr -L<directory where libz.a is>\n```\n\n----------------------------------------\n\nTITLE: Setting Project Properties with CMake\nDESCRIPTION: This snippet configures basic project settings such as the minimum required CMake version, allowed loop constructs, build configurations, project name, and enables testing.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/third-party/libpng/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 2.4.4)\nset(CMAKE_ALLOW_LOOSE_LOOP_CONSTRUCTS true)\n\nset(CMAKE_CONFIGURATION_TYPES \"Release;Debug;MinSizeRel;RelWithDebInfo\")\n\nproject(libpng C)\nenable_testing()\n```\n\n----------------------------------------\n\nTITLE: Class with Non-Public Destructor (C++)\nDESCRIPTION: Demonstrates how to bind a class with a private destructor using `py::nodelete` as a custom holder type.  Requires manual memory management on the C++ side.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/classes.rst#_snippet_19\n\nLANGUAGE: cpp\nCODE:\n```\nclass MyClass {\nprivate:\n    ~MyClass() { }\n};\n\npy::class_<MyClass, std::unique_ptr<MyClass, py::nodelete>>(m, \"MyClass\")\n    .def(py::init<>());\n```\n\n----------------------------------------\n\nTITLE: SDL: Disabled fast-forward speed limiting\nDESCRIPTION: This snippet disables the fast-forward-key speed-limiting code in the SDL version. This change removes an artificial restriction on the fast-forward speed, allowing users to speed up the game as much as their system can handle.\nSOURCE: https://github.com/openai/retro/blob/master/cores/nes/changelog.txt#_snippet_29\n\n\n\n----------------------------------------\n\nTITLE: Example Class with Private Constructor (C++)\nDESCRIPTION: Defines a C++ class `Example` with a private constructor and a public static factory function `create`. The purpose is to illustrate how to bind a factory function as a constructor in pybind11.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/classes.rst#_snippet_14\n\nLANGUAGE: cpp\nCODE:\n```\nclass Example {\n    private:\n        Example(int); // private constructor\n    public:\n        // Factory function:\n        static Example create(int a) { return Example(a); }\n    };\n```\n\n----------------------------------------\n\nTITLE: Implicit Conversions Example (C++)\nDESCRIPTION: Demonstrates the configuration for implicit conversions between two classes A and B, where an instance of A can easily be converted into an instance of type B.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/classes.rst#_snippet_20\n\nLANGUAGE: cpp\nCODE:\n```\npy::class_<A>(m, \"A\")\n    /// ... members ...\n\npy::class_<B>(m, \"B\")\n    .def(py::init<A>())\n    /// ... members ...\n\nm.def(\"func\",\n    [](const B &) { /* .... */ }\n);\n```\n\n----------------------------------------\n\nTITLE: Defining 3DS-Specific Definitions\nDESCRIPTION: This snippet adds preprocessor definitions -D_3DS and -DARM11. These definitions are used in the code to conditionally compile sections specific to the 3DS platform and ARM11 architecture, respectively.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/platform/3ds/CMakeToolchain.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nset(3DS ON)\nadd_definitions(-D_3DS -DARM11)\n```\n\n----------------------------------------\n\nTITLE: Define for Debugging RTO Code in Snes9x (C/C++)\nDESCRIPTION: This snippet shows how to enable debug logging for the RTO (Rotation/Translation/Scaling) code in Snes9x by defining `MK_DEBUG_RTO`. This would enable extra logging and checks within the RTO implementation, assisting in debugging.\nSOURCE: https://github.com/openai/retro/blob/master/cores/snes/docs/changes.txt#_snippet_0\n\nLANGUAGE: C/C++\nCODE:\n```\n#define MK_DEBUG_RTO\n```\n\n----------------------------------------\n\nTITLE: Match Distance Calculation C++\nDESCRIPTION: This code snippet demonstrates how the real match distance is calculated from the zero-based distance 'dist' returned by the distance decoder. The 'dist' value is incremented by 1 to obtain the actual match distance used for copying data from the LZ-window.\nSOURCE: https://github.com/openai/retro/blob/master/cores/pce/deps/lzma-16.04/DOC/lzma-specification.txt#_snippet_17\n\nLANGUAGE: C++\nCODE:\n```\nmatchDistance = dist + 1;\n```\n\n----------------------------------------\n\nTITLE: Constructing Python Objects from C++\nDESCRIPTION: This code shows how to construct a Python object (Decimal) from C++ using pybind11. This allows you to create Python objects and pass them to Python functions or methods.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/pycpp/object.rst#_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\n// Construct a Python object of class Decimal\npy::object pi = Decimal(\"3.14159\");\n```\n\n----------------------------------------\n\nTITLE: Defining KJ Core Sources (Lite)\nDESCRIPTION: Defines the core source files for the KJ library when the CAPNP_LITE flag is enabled.  These sources constitute the minimal KJ library. The CAPNP_LITE flag is assumed to be externally defined.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/c++/src/kj/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(kj_sources_lite\n  array.c++\n  common.c++\n  debug.c++\n  exception.c++\n  io.c++\n  memory.c++\n  mutex.c++\n  string.c++\n  thread.c++\n  main.c++\n  arena.c++\n  test-helpers.c++\n)\n```\n\n----------------------------------------\n\nTITLE: Google Mock: Defining Actions with WillOnce and Return\nDESCRIPTION: This snippet demonstrates how to define actions for a mock method using `WillOnce()` and `Return()` to specify the return values for consecutive calls.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googlemock/docs/ForDummies.md#_snippet_8\n\nLANGUAGE: C++\nCODE:\n```\nusing ::testing::Return;\nEXPECT_CALL(turtle, GetX())\n    .WillOnce(Return(100))\n    .WillOnce(Return(200))\n    .WillOnce(Return(300));\n```\n\n----------------------------------------\n\nTITLE: VRAM Address Register Bug Fix\nDESCRIPTION: This snippet describes fixing a vram address register bug in `fce.c` that was introduced when pair/dpair data types were removed. This bug fix addresses a specific memory management issue in the emulator.\nSOURCE: https://github.com/openai/retro/blob/master/cores/nes/changelog.txt#_snippet_85\n\n\n\n----------------------------------------\n\nTITLE: Google Mock Allowing Leaked Mocks\nDESCRIPTION: This shows how to tell Google Mock that a mock object can be leaked and doesn't need to be verified during destruction.  This can be useful when a mock's lifecycle is managed outside of the test framework.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googlemock/docs/CheatSheet.md#_snippet_19\n\nLANGUAGE: cpp\nCODE:\n```\nMock::AllowLeak(&mock_obj);\n```\n\n----------------------------------------\n\nTITLE: Added iNES header correction for JustBreed\nDESCRIPTION: This snippet adds an iNES header correction entry specifically for the game \"JustBreed.\" This correction likely resolves issues related to incorrect or missing header information, ensuring that the game is properly recognized and emulated.\nSOURCE: https://github.com/openai/retro/blob/master/cores/nes/changelog.txt#_snippet_17\n\n\n\n----------------------------------------\n\nTITLE: UNIF Loading Code CTRL Chunk Recognition\nDESCRIPTION: This snippet describes that the UNIF loading code now recognizes the \"CTRL\" chunk and tries to use it. Only the svgalib code currently supports overriding input settings this way.\nSOURCE: https://github.com/openai/retro/blob/master/cores/nes/changelog.txt#_snippet_80\n\n\n\n----------------------------------------\n\nTITLE: Configuring Google Mock with Autotools\nDESCRIPTION: This command configures Google Mock using Autotools. The `${GMOCK_DIR}` variable represents the directory where Google Mock is located. Running `configure --help` provides more information about available configuration options.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googlemock/README.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n${GMOCK_DIR}/configure  # try --help for more info\n```\n\n----------------------------------------\n\nTITLE: Defining Cap'n Proto JSON Headers\nDESCRIPTION: This snippet defines the header files for the Cap'n Proto JSON compatibility library. These headers provide the interfaces and declarations for converting between Cap'n Proto and JSON data formats. The files reside in the `compat` directory.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/c++/src/capnp/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nset(capnp-json_headers\n  compat/json.h\n  compat/json.capnp.h\n)\n```\n\n----------------------------------------\n\nTITLE: Calculating Real Match Length in C++\nDESCRIPTION: This code defines `kMatchMinLen` as 2 and demonstrates how to calculate the real match length by adding `kMatchMinLen` to the normalized (zero-based) length `len`. This results in a match length value in the range from 2 to 273.\nSOURCE: https://github.com/openai/retro/blob/master/cores/genesis/core/cd_hw/libchdr/deps/lzma/DOC/lzma-specification.txt#_snippet_16\n\nLANGUAGE: C++\nCODE:\n```\n#define kMatchMinLen 2\n\n    matchLen = len + kMatchMinLen;\n```\n\n----------------------------------------\n\nTITLE: Win32: Special scalers supported in windowed mode\nDESCRIPTION: This snippet enables support for special scalers in windowed mode in the Win32 version. It specifies the fastest desktop bit depth for Scale2x/Scale3x (16bpp) and hq2x/hq3x (32bpp) scalers.\nSOURCE: https://github.com/openai/retro/blob/master/cores/nes/changelog.txt#_snippet_27\n\n\n\n----------------------------------------\n\nTITLE: Import ROMs into Gym Retro\nDESCRIPTION: This command imports ROMs from the specified directory into the corresponding Gym Retro game integration directories. It requires the retro package to be installed and that the ROMs are supported and have an integration.\nSOURCE: https://github.com/openai/retro/blob/master/docs/getting_started.rst#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m retro.import /path/to/your/ROMs/directory/\n```\n\n----------------------------------------\n\nTITLE: Instantiate Type-Parameterized Test Case with Single Type C++\nDESCRIPTION: Instantiates the type-parameterized test case with a single type using `INSTANTIATE_TYPED_TEST_CASE_P()`. In this special case, the type can be provided directly without wrapping it in `::testing::Types<...>`.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/AdvancedGuide.md#_snippet_36\n\nLANGUAGE: cpp\nCODE:\n```\nINSTANTIATE_TYPED_TEST_CASE_P(My, FooTest, int);\n```\n\n----------------------------------------\n\nTITLE: Creating Release Candidate\nDESCRIPTION: This snippet shows how to create a release candidate using the `release.sh` script with the `candidate` argument. This process creates a new release branch, updates the version number, builds release tarballs, and pushes the changes.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/RELEASE-PROCESS.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n./release.sh candidate\n```\n\n----------------------------------------\n\nTITLE: Custom __repr__ output in Python\nDESCRIPTION: This snippet demonstrates the output of a Python interpreter after the __repr__ function is customized using pybind11. It prints the string representation of a Pet object after binding a lambda function to the __repr__ special method.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/classes.rst#_snippet_4\n\nLANGUAGE: pycon\nCODE:\n```\n>>> print(p)\n<example.Pet named 'Molly'>\n```\n\n----------------------------------------\n\nTITLE: List available Gym Retro games\nDESCRIPTION: This Python code imports the retro library and lists all available game environments. Note this will display all defined environments, even ones for which ROMs are missing.\nSOURCE: https://github.com/openai/retro/blob/master/docs/getting_started.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport retro\nretro.data.list_games()\n```\n\n----------------------------------------\n\nTITLE: Using RUN_ALL_TESTS() Correctly (C++)\nDESCRIPTION: This code shows the correct way to use `RUN_ALL_TESTS()` in the `main()` function of a Google Test program. The return value of `RUN_ALL_TESTS()` must be returned by `main()` to ensure the test runner can determine test success or failure.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/FAQ.md#_snippet_11\n\nLANGUAGE: cpp\nCODE:\n```\nreturn RUN_ALL_TESTS();\n```\n\n----------------------------------------\n\nTITLE: Module Destructor with Capsule\nDESCRIPTION: This snippet demonstrates how to emulate a module destructor using Python capsules. It defines a cleanup callback function and associates it with the module using `py::capsule` and `m.add_object`.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/misc.rst#_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\nauto cleanup_callback = []() {\n    // perform cleanup here -- this function is called with the GIL held\n};\n\nm.add_object(\"_cleanup\", py::capsule(cleanup_callback));\n```\n\n----------------------------------------\n\nTITLE: Win32: Window reblitting on invalidation\nDESCRIPTION: This snippet implements a feature where the window is reblitted when it becomes invalidated while a game is loaded, such as during window resizing. This prevents visual artifacts or glitches caused by incomplete rendering.\nSOURCE: https://github.com/openai/retro/blob/master/cores/nes/changelog.txt#_snippet_21\n\n\n\n----------------------------------------\n\nTITLE: Install Python Pygments and SetupTools (Debian)\nDESCRIPTION: Installs Python's Pygments and SetupTools, which are needed to install the custom Cap'n Proto lexer. This is required to properly highlight Cap'n Proto code snippets on the website.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/doc/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt-get install python-pygments python-setuptools\n```\n\n----------------------------------------\n\nTITLE: TCP/IP Network Play Code Rewrite\nDESCRIPTION: This snippet describes rewriting parts of the Linux TCP/IP network play code.  The goal was to improve network play functionality, but mentions potential issues with blocking and keyboard input.\nSOURCE: https://github.com/openai/retro/blob/master/cores/nes/changelog.txt#_snippet_70\n\n\n\n----------------------------------------\n\nTITLE: Install Ruby Development Package (Debian)\nDESCRIPTION: Installs the ruby development package, which is required for building and running Jekyll on Debian-based operating systems. This is a necessary prerequisite for setting up the Cap'n Proto website.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/doc/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt-get install ruby-dev\n```\n\n----------------------------------------\n\nTITLE: Compiling C++ LZMA Encoding on Linux\nDESCRIPTION: This snippet shows how to compile the C++ version of file-to-file LZMA encoding on a UNIX/Linux system. It requires navigating to the specified directory and using the 'make' command with the provided makefile.\nSOURCE: https://github.com/openai/retro/blob/master/cores/genesis/core/cd_hw/libchdr/deps/lzma/DOC/lzma-sdk.txt#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake -f makefile.gcc clean all\n```\n\n----------------------------------------\n\nTITLE: Typedef for Type List C++\nDESCRIPTION: Defines a `typedef` for a list of types to be used with `TYPED_TEST_CASE`.  This is required for the macro to parse correctly, avoiding misinterpretation of commas in the type list.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/AdvancedGuide.md#_snippet_29\n\nLANGUAGE: cpp\nCODE:\n```\ntypedef ::testing::Types<char, int, unsigned int> MyTypes;\n```\n\n----------------------------------------\n\nTITLE: Defining PNG_BUILD_DLL Symbol on Windows with CMake\nDESCRIPTION: This code defines the `PNG_BUILD_DLL` symbol when building a shared library on Windows platforms.  This symbol is likely used within the libpng source code to handle Windows-specific DLL considerations.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/third-party/libpng/CMakeLists.txt#_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\nif(PNG_SHARED AND WIN32)\n  set_target_properties(${PNG_LIB_NAME} PROPERTIES DEFINE_SYMBOL PNG_BUILD_DLL)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring pnglibconf.h with CMake\nDESCRIPTION: This snippet configures the `pnglibconf.h` file using a prebuilt version. This file is essential for configuring libpng's build.  It includes the directory where the configured file is placed.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/third-party/libpng/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nconfigure_file(${CMAKE_CURRENT_SOURCE_DIR}/scripts/pnglibconf.h.prebuilt\n               ${CMAKE_CURRENT_BINARY_DIR}/pnglibconf.h)\ninclude_directories(${CMAKE_CURRENT_BINARY_DIR})\n```\n\n----------------------------------------\n\nTITLE: x6502.c Optimization Using Macros\nDESCRIPTION: This snippet describes changing inlined functions in 'x6502.c' to macros. This change was made to test optimization ideas in the 6502 emulation core.  This directly relates to CPU emulation.\nSOURCE: https://github.com/openai/retro/blob/master/cores/nes/changelog.txt#_snippet_65\n\n\n\n----------------------------------------\n\nTITLE: Disabling Function Signatures for Sphinx\nDESCRIPTION: This example shows how to disable the automatic generation of function signatures in docstrings when using Sphinx to generate documentation for pybind11 modules. It uses the `py::options` class.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/misc.rst#_snippet_9\n\nLANGUAGE: cpp\nCODE:\n```\nPYBIND11_MODULE(example, m) {\n    py::options options;\n    options.disable_function_signatures();\n```\n\n----------------------------------------\n\nTITLE: Added FCE Ultra debugger option\nDESCRIPTION: This snippet introduces a command-line option to the configure script that enables the FCE Ultra debugger. The debugger is disabled by default, and enabling it can reduce executable size and potentially increase execution speed slightly.\nSOURCE: https://github.com/openai/retro/blob/master/cores/nes/changelog.txt#_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: sdl-sound: Fixed compilation on Mac OS X\nDESCRIPTION: This snippet fixes a bug in sdl-sound.c that prevented FCE Ultra from being compiled on certain platforms, specifically Mac OS X. This resolves a compatibility issue and allows the emulator to be built on macOS.\nSOURCE: https://github.com/openai/retro/blob/master/cores/nes/changelog.txt#_snippet_13\n\n\n\n----------------------------------------\n\nTITLE: Overloading actions based on the number of parameters\nDESCRIPTION: This code shows how to overload actions based on the number of parameters using different `ACTION_P*` macros. This allows defining different behaviors based on the number of parameters passed to the action.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googlemock/docs/DesignDoc.md#_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\nACTION_P(Plus, a) { ... }\nACTION_P2(Plus, a, b) { ... }\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Policy CMP0048\nDESCRIPTION: Sets the CMake policy CMP0048 to NEW if it exists. This policy likely relates to how CMake handles certain behaviors, and setting it to NEW ensures consistent behavior across different CMake versions.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (POLICY CMP0048)\n  cmake_policy(SET CMP0048 NEW)\nendif (POLICY CMP0048)\n```\n\n----------------------------------------\n\nTITLE: Python ostream redirection context manager usage\nDESCRIPTION: This Python snippet shows how to use the ostream_redirect context manager created by py::add_ostream_redirect in C++.  It demonstrates redirecting stdout and stderr within a `with` statement.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/pycpp/utilities.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nwith ostream_redirect(stdout=True, stderr=True):\n    noisy_function()\n```\n\n----------------------------------------\n\nTITLE: Example Python Module: calc.py\nDESCRIPTION: This is a simple Python module named `calc.py` located in the working directory. It defines an `add` function that takes two arguments and returns their sum.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/embedding.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"calc.py located in the working directory\"\"\"\n\ndef add(i, j):\n    return i + j\n```\n\n----------------------------------------\n\nTITLE: Setting System Variables in CMake\nDESCRIPTION: This snippet sets the CMAKE_SYSTEM_NAME, CMAKE_SYSTEM_PROCESSOR, and CMAKE_LIBRARY_ARCHITECTURE variables.  These are crucial for CMake to correctly identify the target system and architecture.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/platform/wii/CMakeToolchain.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_SYSTEM_NAME Generic CACHE INTERNAL \"system name\")\nset(CMAKE_SYSTEM_PROCESSOR powerpc CACHE INTERNAL \"processor\")\nset(CMAKE_LIBRARY_ARCHITECTURE powerpc-none-eabi CACHE INTERNAL \"abi\")\n```\n\n----------------------------------------\n\nTITLE: FCEUGI Structure for System Emulation\nDESCRIPTION: This snippet describes changing the mechanism for how FCE Ultra tells the driver code what type of system is being emulated. A structure of type \"FCEUGI\" is now returned from `FCEUI_LoadGame()`.\nSOURCE: https://github.com/openai/retro/blob/master/cores/nes/changelog.txt#_snippet_81\n\n\n\n----------------------------------------\n\nTITLE: Creating an installer with 7zS2.sfx or 7zS2con.sfx\nDESCRIPTION: This command combines the small SFX module (7zS2.sfx or 7zS2con.sfx) with a 7z archive to create a self-extracting installer.  Small SFX modules do not support configuration files.\nSOURCE: https://github.com/openai/retro/blob/master/cores/pce/deps/lzma-16.04/DOC/installer.txt#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\ncopy /b 7zS2.sfx + archive.7z sfx.exe\n```\n\n----------------------------------------\n\nTITLE: Checking for getopt function in CMake\nDESCRIPTION: This snippet checks if the 'getopt' function exists. If it doesn't exist, it adds 'getopt.c' to the list of extra source files to be compiled.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/libzip/src/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nCHECK_FUNCTION_EXISTS(getopt HAVE_GETOPT)\nIF(NOT HAVE_GETOPT)\n  SET(SRC_EXTRA_FILES getopt.c)\nENDIF(NOT HAVE_GETOPT)\n```\n\n----------------------------------------\n\nTITLE: Checking Function Exists CMake\nDESCRIPTION: Checks if the `mkstemp` function exists and defines the `HAVE_MKSTEMP` variable accordingly.  If `mkstemp` is not found, a separate file `mkstemp.c` is included in the build.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/libzip/lib/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nCHECK_FUNCTION_EXISTS(mkstemp HAVE_MKSTEMP)\nIF(NOT HAVE_MKSTEMP)\n  SET(LIBZIP_EXTRA_FILES mkstemp.c)\nENDIF(NOT HAVE_MKSTEMP)\n```\n\n----------------------------------------\n\nTITLE: Casting Python Objects to C++ Types\nDESCRIPTION: This code shows how to cast a Python object back to a C++ type (MyClass). If the conversion fails, a cast_error exception will be thrown.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/pycpp/object.rst#_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\npy::object obj = ...;\nMyClass *cls = obj.cast<MyClass *>();\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories (CMake)\nDESCRIPTION: This snippet adds the 'kj' and 'capnp' subdirectories to the build process using the `add_subdirectory` command. This allows CMake to process the CMakeLists.txt files within those subdirectories.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/c++/src/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(kj)\n\nadd_subdirectory(capnp)\n```\n\n----------------------------------------\n\nTITLE: Updating Version Number in _version.py\nDESCRIPTION: This snippet describes the action to update the version number in the `pybind11/_version.py` file. This involves setting the release version and removing the 'dev' suffix. The file contains the Python-readable version information.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/release.rst#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nUpdate ``pybind11/_version.py`` (set release version, remove 'dev').\n```\n\n----------------------------------------\n\nTITLE: sb.c Sound Code Rewrite\nDESCRIPTION: This snippet describes rewriting parts of 'sb.c' and 'sb.h', which are related to sound processing. The changes likely involved bug fixes and improvements to the sound output functionality.\nSOURCE: https://github.com/openai/retro/blob/master/cores/nes/changelog.txt#_snippet_68\n\n\n\n----------------------------------------\n\nTITLE: Link target libraries\nDESCRIPTION: Links the executable target against the libraries specified in the `BINARY_NAME` variable (likely a static library), and the `OS_LIB` variable which contains a list of PS Vita specific libraries.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/platform/psp2/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(${BINARY_NAME}.elf ${BINARY_NAME} ${OS_LIB})\n```\n\n----------------------------------------\n\nTITLE: Test fixture with an empty class\nDESCRIPTION: This code demonstrates the usage of an empty class with a Google Test fixture. It shows how to define a test fixture even when no specific setup or teardown logic is needed, by inheriting from ::testing::Test.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/FAQ.md#_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nclass FooTest : public ::testing::Test {};\n\nTEST_F(FooTest, DoesThis) { ... }\n```\n\n----------------------------------------\n\nTITLE: Pointer Fuzz Test with Valgrind\nDESCRIPTION: This snippet shows how to run pointer fuzz tests under Valgrind to detect memory errors. It executes the `capnp-test` executable with the `-f` flag to specify the fuzz test file.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/RELEASE-PROCESS.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nvalgrind ./capnp-test -fcapnp/fuzz-test.c++\n```\n\n----------------------------------------\n\nTITLE: Running pybind11 Tests\nDESCRIPTION: This snippet shows the command to run the test suite for pybind11. It uses the 'make' utility with the 'pytest' target. Running the test suite ensures that new functionality doesn't break existing features.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake pytest\n```\n\n----------------------------------------\n\nTITLE: Suppressing Elapsed Time with gtest_print_time\nDESCRIPTION: This explains how to suppress the printing of elapsed time for each test using the `--gtest_print_time=0` flag or by setting `GTEST_PRINT_TIME` environment variable to `0`.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/AdvancedGuide.md#_snippet_53\n\nLANGUAGE: text\nCODE:\n```\n--gtest_print_time=0\n```\n\n----------------------------------------\n\nTITLE: LZMA Copy Match Bytes\nDESCRIPTION: Copies a sequence of bytes with the calculated match distance and match length, checking against unpackSizeDefined to avoid exceeding specified uncompressed size.\nSOURCE: https://github.com/openai/retro/blob/master/cores/genesis/core/cd_hw/libchdr/deps/lzma/DOC/lzma-specification.txt#_snippet_41\n\nLANGUAGE: C++\nCODE:\n```\nlen += kMatchMinLen;\nbool isError = false;\nif (unpackSizeDefined && unpackSize < len)\n{\n  len = (unsigned)unpackSize;\n  isError = true;\n}\nOutWindow.CopyMatch(rep0 + 1, len);\nunpackSize -= len;\nif (isError)\n  return LZMA_RES_ERROR;\n```\n\n----------------------------------------\n\nTITLE: Linking pthread for Unix\nDESCRIPTION: Conditionally links the `pthread` library on Unix-like systems (excluding Android). This provides threading support to the KJ library. Assumes `UNIX` and `ANDROID` are defined by CMake.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/c++/src/kj/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nif(UNIX AND NOT ANDROID)\n  target_link_libraries(kj PUBLIC pthread)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Google Test Macro Definition\nDESCRIPTION: This is the basic structure for defining a test using Google Test.  It takes a test case name and a test name as arguments. The test body contains assertions to check the expected behavior.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/Primer.md#_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nTEST(test_case_name, test_name) {\n ... test body ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting CPU Type in C\nDESCRIPTION: This snippet describes how to set the CPU type using the `m68k_set_cpu_type()` function. Valid CPU types are `M68K_CPU_TYPE_68000`, `M68K_CPU_TYPE_68010`, `M68K_CPU_TYPE_68EC020`, and `M68K_CPU_TYPE_68020`.\nSOURCE: https://github.com/openai/retro/blob/master/cores/genesis/core/m68k/readme.txt#_snippet_6\n\nLANGUAGE: C\nCODE:\n```\nm68k_set_cpu_type();\nm68k_pulse_reset();\n```\n\n----------------------------------------\n\nTITLE: Test fixture with a typedef\nDESCRIPTION: This code presents an alternative approach to creating a Google Test fixture using a typedef. This method allows defining a test fixture without needing to create a class, by simply creating a type alias for ::testing::Test.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/FAQ.md#_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\ntypedef ::testing::Test FooTest;\n\nTEST_F(FooTest, DoesThat) { ... }\n```\n\n----------------------------------------\n\nTITLE: Type-Parameterized Test Case Declaration C++\nDESCRIPTION: Declares a type-parameterized test case using `TYPED_TEST_CASE_P()`.  The `_P` suffix indicates that this is a parameterized test case, which requires later registration and instantiation.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/AdvancedGuide.md#_snippet_32\n\nLANGUAGE: cpp\nCODE:\n```\nTYPED_TEST_CASE_P(FooTest);\n```\n\n----------------------------------------\n\nTITLE: Input.c Bug Fix for Undefined Bits\nDESCRIPTION: This snippet describes a fix for a bug in the 'input.c' file related to undefined bits when reading from memory addresses $4016 and $4017.  Specifically bit 5 is always 0.\nSOURCE: https://github.com/openai/retro/blob/master/cores/nes/changelog.txt#_snippet_64\n\n\n\n----------------------------------------\n\nTITLE: LZMA Decompression Example\nDESCRIPTION: Decompresses file.lzma to file.bin using the LZMA decompression utility. This is the standard command for reversing the compression process, restoring the original file.  No special parameters are required for basic decompression.\nSOURCE: https://github.com/openai/retro/blob/master/cores/genesis/core/cd_hw/libchdr/deps/lzma/DOC/lzma-sdk.txt#_snippet_5\n\nLANGUAGE: Text\nCODE:\n```\nLZMA d file.lzma file.bin\n```\n\n----------------------------------------\n\nTITLE: Accessing Enumeration Values in Python\nDESCRIPTION: This snippet demonstrates how to access the enumeration values defined in C++ from Python after binding with pybind11.  It shows how to create an instance and access the enumeration.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/classes.rst#_snippet_28\n\nLANGUAGE: python\nCODE:\n```\n>>> p = Pet('Lucy', Pet.Cat)\n>>> p.type\nKind.Cat\n>>> int(p.type)\n1L\n```\n\n----------------------------------------\n\nTITLE: C++ Header Guard Example\nDESCRIPTION: This example shows the correct header guard style for C++ headers (Qt). The define should start with `QGBA_` and not include `_H`, but is otherwise the same as C.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/CONTRIBUTING.md#_snippet_7\n\nLANGUAGE: C++\nCODE:\n```\n#ifndef QGBA_FILE_NAME\n#define QGBA_FILE_NAME\n\n\t// Header\n\n#endif\n```\n\n----------------------------------------\n\nTITLE: Calling the function with keyword arguments in Python\nDESCRIPTION: This example shows how to call the function with keyword arguments after using `py::arg`.  This allows the function to be called using `i=1` and `j=2` instead of positional arguments.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/basics.rst#_snippet_8\n\nLANGUAGE: pycon\nCODE:\n```\n>>> import example\n>>> example.add(i=1, j=2)\n3L\n```\n\n----------------------------------------\n\nTITLE: Compile ZLIB Compile Program\nDESCRIPTION: This command compiles the CL program COMPILE located in the TOOLS source file within the ZLIB library. The compiled program is named COMPILE and stored in the ZLIB library. This step compiles the control program for building ZLIB.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/third-party/zlib/as400/readme.txt#_snippet_3\n\nLANGUAGE: CL\nCODE:\n```\nCRTCLPGM PGM(ZLIB/COMPILE) SRCFILE(ZLIB/TOOLS) SRCMBR(COMPILE)\n```\n\n----------------------------------------\n\nTITLE: Tagging Release Date in changelog.rst\nDESCRIPTION: This snippet describes the action of tagging the release date in the `docs/changelog.rst` file. This file maintains a log of changes for each release, and the release date needs to be added to the corresponding entry.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/release.rst#_snippet_4\n\nLANGUAGE: Text\nCODE:\n```\nTag release date in ``docs/changelog.rst``.\n```\n\n----------------------------------------\n\nTITLE: Defining GUI Source Files in CMake\nDESCRIPTION: This CMake snippet defines the GUI source files, including generated font and icon files. These source files contribute to the graphical user interface of the application.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/platform/wii/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND GUI_SRC ${CMAKE_CURRENT_BINARY_DIR}/font.c ${CMAKE_CURRENT_BINARY_DIR}/icons.c ${CMAKE_CURRENT_SOURCE_DIR}/gui-font.c)\n```\n\n----------------------------------------\n\nTITLE: Test Case Instantiation with ValuesIn\nDESCRIPTION: Instantiates the `FooTest` test case using values from an array.  The `::testing::ValuesIn` function is used to provide the parameter values.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/AdvancedGuide.md#_snippet_27\n\nLANGUAGE: c++\nCODE:\n```\nconst char* pets[] = {\"cat\", \"dog\"};\nINSTANTIATE_TEST_CASE_P(AnotherInstantiationName, FooTest,\n                        ::testing::ValuesIn(pets));\n```\n\n----------------------------------------\n\nTITLE: LZMA Encoder Properties Initialization (C)\nDESCRIPTION: This snippet initializes the LZMA encoder properties using `LzmaEncProps_Init`. The resulting `props` structure can then be modified to configure specific compression settings before being passed to the LZMA encoder.\nSOURCE: https://github.com/openai/retro/blob/master/cores/genesis/core/cd_hw/libchdr/deps/lzma/DOC/lzma.txt#_snippet_5\n\nLANGUAGE: C\nCODE:\n```\nLzmaEncProps_Init(&props);\n```\n\n----------------------------------------\n\nTITLE: Compiling LZMA with Static Libraries on Linux\nDESCRIPTION: This snippet shows how to compile LZMA with static libraries on a UNIX/Linux system. This might be required for certain UNIX/Linux versions. It defines the LIB variable and its intended usage.\nSOURCE: https://github.com/openai/retro/blob/master/cores/genesis/core/cd_hw/libchdr/deps/lzma/DOC/lzma-sdk.txt#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nLIB = -lm -static\n```\n\n----------------------------------------\n\nTITLE: Function Argument Example (C++)\nDESCRIPTION: This C++ function takes a function object (std::function) with the signature `int -> int` as an argument and applies it to the value 10. The result of the function call is then returned.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/cast/functional.rst#_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nint func_arg(const std::function<int(int)> &f) {\n    return f(10);\n}\n```\n\n----------------------------------------\n\nTITLE: Child Class with enable_shared_from_this\nDESCRIPTION: This code shows an alternative solution, where the Child class inherits from std::enable_shared_from_this<Child>. This allows pybind11 to recognize that there is an existing shared_ptr managing the object.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/smart_ptrs.rst#_snippet_7\n\nLANGUAGE: cpp\nCODE:\n```\nclass Child : public std::enable_shared_from_this<Child> { };\n```\n\n----------------------------------------\n\nTITLE: LZMA Compression Example 1\nDESCRIPTION: This example shows how to compress a file using LZMA with a 64KB dictionary and 0 literal context bits. The -lc0 parameter helps reduce memory requirements during decompression.\nSOURCE: https://github.com/openai/retro/blob/master/cores/pce/deps/lzma-16.04/DOC/lzma-sdk.txt#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nLZMA e file.bin file.lzma -d16 -lc0\n```\n\n----------------------------------------\n\nTITLE: Modified BlitVidHi() for Speed Improvement\nDESCRIPTION: This snippet describes that `BlitVidHi()` in `drivers/win/video.c` was modified to increase its speed. This optimization focuses on improving video blitting performance in the Windows port.\nSOURCE: https://github.com/openai/retro/blob/master/cores/nes/changelog.txt#_snippet_82\n\n\n\n----------------------------------------\n\nTITLE: Disabling pkg-config\nDESCRIPTION: This snippet disables pkg-config by setting the PKG_CONFIG_EXECUTABLE to /dev/null. This prevents CMake from attempting to use pkg-config to find dependencies, which is generally not desirable in a cross-compilation environment.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/platform/3ds/CMakeToolchain.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nset(PKG_CONFIG_EXECUTABLE \"/dev/null\" CACHE INTERNAL \"\" FORCE)\n```\n\n----------------------------------------\n\nTITLE: Defining Include Directories in CMake\nDESCRIPTION: This snippet sets the include directories for the project. It specifies the directories where the compiler should look for header files during the build process. The directories include the lib, src, and build directories of the libzip project.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/libzip/regress/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nINCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/../lib\n\t${CMAKE_CURRENT_SOURCE_DIR}/../src\n\t${CMAKE_CURRENT_BINARY_DIR}/..)\n```\n\n----------------------------------------\n\nTITLE: Exposing C++ function returning unique_ptr to Python\nDESCRIPTION: This snippet shows how to expose the C++ function create_example to Python using pybind11's m.def. The function returns a std::unique_ptr, and pybind11 handles the conversion to a Python object.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/smart_ptrs.rst#_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nm.def(\"create_example\", &create_example);\n```\n\n----------------------------------------\n\nTITLE: Closing Dr. Gladman's PRNG\nDESCRIPTION: This code snippet closes Dr. Gladman's PRNG.  `prng_end` is called with a pointer to the `prng_ctx` structure. This should be done when the application closes.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/libzip/docs/aes_coding_tips.txt#_snippet_3\n\nLANGUAGE: C\nCODE:\n```\nprng_end(&ctx);\n```\n\n----------------------------------------\n\nTITLE: Setting DEVKITPPC Environment Variable in CMake\nDESCRIPTION: This snippet retrieves the DEVKITPPC environment variable or sets it based on DEVKITPRO if it's not defined.  It's essential for locating the PPC toolchain.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/platform/wii/CMakeToolchain.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(DEFINED ENV{DEVKITPPC})\n        set(DEVKITPPC $ENV{DEVKITPPC})\nelse()\n        set(DEVKITPPC ${DEVKITPRO}/devkitPPC)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Added per-game hacks for Kick Master and Star Wars\nDESCRIPTION: This snippet adds per-game hacks for \"Kick Master\" and the PAL version of \"Star Wars\". These hacks address specific issues or improve compatibility for these games.\nSOURCE: https://github.com/openai/retro/blob/master/cores/nes/changelog.txt#_snippet_35\n\n\n\n----------------------------------------\n\nTITLE: Defining KJ Core Sources (Heavy)\nDESCRIPTION: Defines the additional source files for the KJ library when the CAPNP_LITE flag is disabled. These sources include more advanced features. The CAPNP_LITE flag is assumed to be externally defined.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/c++/src/kj/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(kj_sources_heavy\n  units.c++\n  refcount.c++\n  string-tree.c++\n  parse/char.c++\n)\n```\n\n----------------------------------------\n\nTITLE: Defining KJ Header Files\nDESCRIPTION: Defines the list of header files for the KJ library.  These headers are installed to allow external usage.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/c++/src/kj/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(kj_headers\n  common.h\n  units.h\n  memory.h\n  refcount.h\n  array.h\n  vector.h\n  string.h\n  string-tree.h\n  exception.h\n  debug.h\n  arena.h\n  miniposix.h\n  io.h\n  tuple.h\n  one-of.h\n  function.h\n  mutex.h\n  thread.h\n  threadlocal.h\n  main.h\n  windows-sanity.h\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Config File\nDESCRIPTION: Configures the package config file used for CMake package configuration. It sets the install destination and passes variables to the config file template.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/c++/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nset(CONFIG_PACKAGE_LOCATION ${CMAKE_INSTALL_LIBDIR}/cmake/CapnProto)\n\nconfigure_package_config_file(cmake/CapnProtoConfig.cmake.in\n  ${CMAKE_CURRENT_BINARY_DIR}/cmake/CapnProtoConfig.cmake\n  INSTALL_DESTINATION ${CONFIG_PACKAGE_LOCATION}\n  PATH_VARS CMAKE_INSTALL_FULL_INCLUDEDIR\n)\n```\n\n----------------------------------------\n\nTITLE: Compile Tests Linked to Shared gtest Library\nDESCRIPTION: This snippet configures the compiler for test files that use the shared Google Test library. This is necessary when Google Test is built as a shared library. Add this to the compiler flags for tests using the shared library.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/README.md#_snippet_13\n\nLANGUAGE: c++\nCODE:\n```\n-DGTEST_LINKED_AS_SHARED_LIBRARY=1\n```\n\n----------------------------------------\n\nTITLE: Exporting Targets\nDESCRIPTION: Exports the CapnProtoTargets, which define the build targets (libraries, executables) that can be used by other CMake projects.  A namespace is provided to prevent naming conflicts.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/c++/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nexport(EXPORT CapnProtoTargets\n  FILE \"${CMAKE_CURRENT_BINARY_DIR}/cmake/CapnProtoTargets.cmake\"\n  NAMESPACE CapnProto::\n)\n```\n\n----------------------------------------\n\nTITLE: Friend Test Declaration C++\nDESCRIPTION: Declares a specific test function as a friend of a class, allowing it to access private members. This is done using the `FRIEND_TEST` macro within the class definition.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/AdvancedGuide.md#_snippet_37\n\nLANGUAGE: cpp\nCODE:\n```\nFRIEND_TEST(TestCaseName, TestName);\n```\n\n----------------------------------------\n\nTITLE: Added iNES header corrections\nDESCRIPTION: This snippet incorporates numerous iNES header corrections into the emulator. These corrections likely address inaccuracies or inconsistencies in the headers of ROM files, ensuring proper identification and handling of games.\nSOURCE: https://github.com/openai/retro/blob/master/cores/nes/changelog.txt#_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Initializing struct as a plain old C++ struct (POCS) in C++\nDESCRIPTION: This C++ code shows initializing a Cap'n Proto structure as a plain old C++ struct (POCS). Direct assignment is used, potentially eliminating zero-copy optimizations.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/doc/slides-2017.05.18/index.md#_snippet_17\n\nLANGUAGE: c++\nCODE:\n```\nMyStruct root;\nroot.foo = 123;\nroot.bar = \"foo\";\nInnerStruct inner;\ninner.qux = true;\nroot.baz = kj::mv(inner);\n\ncapnp::writeMessageToFd(fd, message);\n```\n\n----------------------------------------\n\nTITLE: Test Case Instantiation with Values\nDESCRIPTION: Instantiates the `FooTest` test case with the specified parameter values using `::testing::Values`. The tests will be run with each of the provided strings.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/AdvancedGuide.md#_snippet_26\n\nLANGUAGE: c++\nCODE:\n```\nINSTANTIATE_TEST_CASE_P(InstantiationName,\n                        FooTest,\n                        ::testing::Values(\"meeny\", \"miny\", \"moe\"));\n```\n\n----------------------------------------\n\nTITLE: Setting Output Name (macOS)\nDESCRIPTION: This snippet, specific to macOS (`if(APPLE)`), sets the output name of the `gym-retro-integration` target to \"Gym Retro Integration\". This ensures the application's name is properly set in the macOS bundle.\nSOURCE: https://github.com/openai/retro/blob/master/src/ui/CMakeLists.txt#_snippet_19\n\nLANGUAGE: CMake\nCODE:\n```\nset_target_properties(gym-retro-integration PROPERTIES OUTPUT_NAME \"Gym Retro Integration\")\n```\n\n----------------------------------------\n\nTITLE: Compiling mGBA on macOS using Homebrew\nDESCRIPTION: These commands install dependencies via Homebrew and then build mGBA. Note that 'make install' should not be used on macOS.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/README_DE.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nbrew install cmake ffmpeg imagemagick libzip qt5 sdl2 libedit\nmkdir build\ncd build\ncmake -DCMAKE_PREFIX_PATH='brew --prefix qt5' ..\nmake\n```\n\n----------------------------------------\n\nTITLE: Brace Initialization Example (C++)\nDESCRIPTION: Shows how to use brace initialization with `pybind11::init<>` to bind implicit constructors. Defines a struct `Aggregate` and binds its constructor.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/classes.rst#_snippet_18\n\nLANGUAGE: cpp\nCODE:\n```\nstruct Aggregate {\n    int a;\n    std::string b;\n};\n\npy::class_<Aggregate>(m, \"Aggregate\")\n    .def(py::init<int, const std::string &>());\n```\n\n----------------------------------------\n\nTITLE: Build and Run Google Test Tests\nDESCRIPTION: These commands demonstrate how to build the Google Test library and its associated tests, and then execute the tests to verify the functionality. `make` compiles the code, and `make test` runs the test suite.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/README.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nmake test\n```\n\n----------------------------------------\n\nTITLE: Compiling and Linking Test Code with Google Test\nDESCRIPTION: This snippet demonstrates how to compile a test source file and link it with the Google Test library. It includes the necessary compiler flags and linker options.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/README.md#_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ng++ -isystem ${GTEST_DIR}/include -pthread path/to/your_test.cc libgtest.a \\\n        -o your_test\n```\n\n----------------------------------------\n\nTITLE: CMake Project Setup and Pybind11 Integration\nDESCRIPTION: This CMake code initializes the project, includes the Pybind11 library as a subdirectory, and defines a module to be built using Pybind11.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/tests/test_cmake_build/subdirectory_function/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 2.8.12)\nproject(test_subdirectory_module CXX)\n\nadd_subdirectory(${PYBIND11_PROJECT_DIR} pybind11)\npybind11_add_module(test_cmake_build THIN_LTO ../main.cpp)\n```\n\n----------------------------------------\n\nTITLE: Controlling Colored Terminal Output with gtest_color\nDESCRIPTION: This shows how to enable or disable colored terminal output with `--gtest_color` flag or the `GTEST_COLOR` environment variable set to `yes`, `no`, or `auto`.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/AdvancedGuide.md#_snippet_52\n\nLANGUAGE: text\nCODE:\n```\n--gtest_color\n```\n\n----------------------------------------\n\nTITLE: LZMA Compression Example 2\nDESCRIPTION: This example demonstrates compressing a file with settings suitable for 32-bit periodical data, such as ARM or MIPS code, using the -lc0 and -lp2 parameters.\nSOURCE: https://github.com/openai/retro/blob/master/cores/pce/deps/lzma-16.04/DOC/lzma-sdk.txt#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nLZMA e file.bin file.lzma -lc0 -lp2\n```\n\n----------------------------------------\n\nTITLE: Windows Netplay Implementation\nDESCRIPTION: This snippet describes the addition of `Windows netplay.c`.  A fix was implemented to allow the user to exit the emulator while stuck in blocking `recv()` or `send()` calls.\nSOURCE: https://github.com/openai/retro/blob/master/cores/nes/changelog.txt#_snippet_84\n\n\n\n----------------------------------------\n\nTITLE: VRC7 Sound Emulation Cleanup\nDESCRIPTION: This snippet describes cleaning up the VRC7 sound emulation code. It also mentions the need to save the current sound state in a save state, indicating the code relates to sound processing within the emulator.\nSOURCE: https://github.com/openai/retro/blob/master/cores/nes/changelog.txt#_snippet_63\n\n\n\n----------------------------------------\n\nTITLE: Fixed typo in sound.c\nDESCRIPTION: This snippet fixes a typo in sound.c that caused only part of the sound registers to be saved in save states. This is crucial for ensuring accurate restoration of sound state during save state loading.\nSOURCE: https://github.com/openai/retro/blob/master/cores/nes/changelog.txt#_snippet_51\n\n\n\n----------------------------------------\n\nTITLE: Build Gym Retro from Source\nDESCRIPTION: Clones the Gym Retro repository, navigates into the directory, and installs it using pip.  The `-e .` option installs it in editable mode, useful for development.\nSOURCE: https://github.com/openai/retro/blob/master/docs/developing.rst#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/openai/retro.git gym-retro\ncd gym-retro\npip3 install -e .\n```\n\n----------------------------------------\n\nTITLE: Installing Config Files\nDESCRIPTION: Installs various configuration files, including CapnProtoMacros.cmake, CapnProtoConfig.cmake, and CapnProtoConfigVersion.cmake, to the designated installation directory.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/c++/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES\n  cmake/CapnProtoMacros.cmake\n  ${CMAKE_CURRENT_BINARY_DIR}/cmake/CapnProtoConfig.cmake\n  ${CMAKE_CURRENT_BINARY_DIR}/cmake/CapnProtoConfigVersion.cmake\n  DESTINATION ${CONFIG_PACKAGE_LOCATION}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Function Code Callback in C\nDESCRIPTION: This snippet describes how to set the function code callback function using the `M68K_SET_FC_CALLBACK` macro. This callback enables emulation of function code pins for systems with different address spaces.\nSOURCE: https://github.com/openai/retro/blob/master/cores/genesis/core/m68k/readme.txt#_snippet_5\n\nLANGUAGE: C\nCODE:\n```\n#define M68K_SET_FC_CALLBACK(A) your_function_code_handler\n```\n\n----------------------------------------\n\nTITLE: ASSERT_PRED2 with Multiple Template Parameters (C++)\nDESCRIPTION: This snippet illustrates how to use `ASSERT_PRED2` with a template having multiple parameters. It demonstrates wrapping the template instantiation in parentheses to avoid preprocessor interpretation issues.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/FAQ.md#_snippet_10\n\nLANGUAGE: cpp\nCODE:\n```\nASSERT_PRED2(*(GreaterThan<int, int>)*, 5, 0);\n```\n\n----------------------------------------\n\nTITLE: Setting Compile Definitions (KJ)\nDESCRIPTION: Sets compile definitions for the KJ library based on the `CAPNP_LITE_FLAG`. This allows conditional compilation of code based on whether the lite version is being built.  `CAPNP_LITE_FLAG` is assumed to be pre-defined.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/c++/src/kj/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_compile_definitions(kj PUBLIC ${CAPNP_LITE_FLAG})\n```\n\n----------------------------------------\n\nTITLE: Cap'n Proto Generics Example C++\nDESCRIPTION: Shows an example of using Cap'n Proto generics in C++. Demonstrates how to access fields in a Map struct and iterate through the entries.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/doc/cxx.md#_snippet_2\n\nLANGUAGE: c++\nCODE:\n```\nvoid processPeople(People::Reader people) {\n  Map<Text, Person>::Reader reader = people.getByName();\n  capnp::List<Map<Text, Person>::Entry>::Reader entries =\n      reader.getEntries()\n  for (auto entry: entries) {\n    processPerson(entry);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Build with Borland C and TASM\nDESCRIPTION: This command builds the project with Borland C and TASM, defining ASMV and ASMINF and specifying object files.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/third-party/zlib/contrib/masmx86/readme.txt#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake -f win32/Makefile.bor LOCAL_ZLIB=\"-DASMV -DASMINF\" OBJA=\"match686.obj inffas32.obj\" OBJPA=\"+match686c.obj+match686.obj+inffas32.obj\"\n```\n\n----------------------------------------\n\nTITLE: Accessing exported variables from Python\nDESCRIPTION: This example shows how to access the variables exported from C++ to Python. The variables `the_answer` and `what` can now be accessed by importing the 'example' module.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/basics.rst#_snippet_15\n\nLANGUAGE: pycon\nCODE:\n```\n>>> import example\n>>> example.the_answer\n42\n>>> example.what\n'World'\n```\n\n----------------------------------------\n\nTITLE: Calculate CRC of Bytes in C\nDESCRIPTION: This function calculates the CRC of a byte array using the `update_crc` function. It initializes the CRC to zero and then calls `update_crc` to compute the CRC value.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/third-party/zlib/doc/rfc1952.txt#_snippet_8\n\nLANGUAGE: C\nCODE:\n```\n/* Return the CRC of the bytes buf[0..len-1]. */\nunsigned long crc(unsigned char *buf, int len)\n{\n  return update_crc(0L, buf, len);\n}\n```\n\n----------------------------------------\n\nTITLE: Create ZLIB Save File\nDESCRIPTION: This command creates a save file named ZLIBSAVF in the ZLIB library. Save files are used to store objects for backup and transfer. This command creates a save file that will be used for ZLIB.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/third-party/zlib/as400/readme.txt#_snippet_1\n\nLANGUAGE: CL\nCODE:\n```\nCRTSAVF FILE(ZLIB/ZLIBSAVF)\n```\n\n----------------------------------------\n\nTITLE: Compile gtest as Shared Library (DLL)\nDESCRIPTION: This snippet configures the compiler to build Google Test as a shared library (DLL). This is useful if you prefer to use Google Test as a shared library instead of a static one.  Add the flag to compiler flags.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/README.md#_snippet_12\n\nLANGUAGE: c++\nCODE:\n```\n-DGTEST_CREATE_SHARED_LIBRARY=1\n```\n\n----------------------------------------\n\nTITLE: Removed debugging code\nDESCRIPTION: This snippet removes debugging code that should not have been enabled in version 0.98.11. This cleanup improves the stability and performance of the emulator by removing unnecessary overhead.\nSOURCE: https://github.com/openai/retro/blob/master/cores/nes/changelog.txt#_snippet_26\n\n\n\n----------------------------------------\n\nTITLE: Setting Installation Arguments\nDESCRIPTION: Defines default arguments for the install(TARGETS) command, specifying the export set and installation directories for libraries, archives, and executables.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/c++/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(INSTALL_TARGETS_DEFAULT_ARGS\n  EXPORT CapnProtoTargets\n  ARCHIVE DESTINATION \"${CMAKE_INSTALL_LIBDIR}\"\n  LIBRARY DESTINATION \"${CMAKE_INSTALL_LIBDIR}\"\n  RUNTIME DESTINATION \"${CMAKE_INSTALL_BINDIR}\"\n)\n```\n\n----------------------------------------\n\nTITLE: CMake Project Configuration\nDESCRIPTION: This snippet sets up the CMake project, specifies the minimum CMake version, finds the pybind11 package, and adds the module.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/tests/test_cmake_build/installed_function/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 2.8.12)\nproject(test_installed_module CXX)\n\nset(CMAKE_MODULE_PATH \"\")\n\nfind_package(pybind11 CONFIG REQUIRED)\nmessage(STATUS \"Found pybind11 v${pybind11_VERSION}: ${pybind11_INCLUDE_DIRS}\")\n\npybind11_add_module(test_cmake_build SHARED NO_EXTRAS ../main.cpp)\n```\n\n----------------------------------------\n\nTITLE: Append GUI source files\nDESCRIPTION: Appends the `gui-font.c` file to the `GUI_SRC` list. This file likely contains code for rendering fonts in the graphical user interface.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/platform/psp2/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND GUI_SRC ${CMAKE_CURRENT_SOURCE_DIR}/gui-font.c)\n```\n\n----------------------------------------\n\nTITLE: Altered MMC3 IRQ emulation\nDESCRIPTION: This snippet alters MMC3 IRQ emulation and related hooks in ppu.c. These changes aim to improve the accuracy and reliability of IRQ handling for games that use the MMC3 mapper.\nSOURCE: https://github.com/openai/retro/blob/master/cores/nes/changelog.txt#_snippet_37\n\n\n\n----------------------------------------\n\nTITLE: Calculate Real Match Distance from Decoded Distance in C++\nDESCRIPTION: This snippet calculates the actual match distance by adding 1 to the decoded distance value (`dist`). This is because the distance decoder returns a zero-based distance, and the actual distance is one greater.\nSOURCE: https://github.com/openai/retro/blob/master/cores/genesis/core/cd_hw/libchdr/deps/lzma/DOC/lzma-specification.txt#_snippet_21\n\nLANGUAGE: cpp\nCODE:\n```\nmatchDistance = dist + 1;\n```\n\n----------------------------------------\n\nTITLE: Setting CAPNP_LITE Flag\nDESCRIPTION: Sets a compiler definition based on whether CAPNP_LITE is enabled. This flag is then used to conditionally compile parts of the Cap'n Proto library.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/c++/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nif(CAPNP_LITE)\n  set(CAPNP_LITE_FLAG \"-DCAPNP_LITE\")\n  # This flag is attached as PUBLIC target_compile_definition to kj target\nelse()\n  set(CAPNP_LITE_FLAG)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Added support for mapper 160\nDESCRIPTION: This snippet adds support for mapper 160, which is the same hardware as mapper 90. This simplifies mapper handling and ensures compatibility with games that use mapper 160.\nSOURCE: https://github.com/openai/retro/blob/master/cores/nes/changelog.txt#_snippet_32\n\n\n\n----------------------------------------\n\nTITLE: Win32: Added disable screensaver option\nDESCRIPTION: This snippet adds an option, enabled by default, to disable the system screen saver while a game is loaded in the Win32 version. This prevents the screen saver from interrupting gameplay.\nSOURCE: https://github.com/openai/retro/blob/master/cores/nes/changelog.txt#_snippet_55\n\n\n\n----------------------------------------\n\nTITLE: DOS Keyboard Driver Rewrite\nDESCRIPTION: This snippet describes rewriting the DOS keyboard driver. The old 'keyscan.h' file was also removed, implying a complete overhaul of the keyboard input system for the DOS port.\nSOURCE: https://github.com/openai/retro/blob/master/cores/nes/changelog.txt#_snippet_69\n\n\n\n----------------------------------------\n\nTITLE: Post-Release Git Commit and Push\nDESCRIPTION: This snippet describes the git commands to add the changes, commit them, and push the commit, typically done after updating version files for post-release development.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/release.rst#_snippet_14\n\nLANGUAGE: Text\nCODE:\n```\n``git add`` and ``git commit``.\n``git push``\n```\n\n----------------------------------------\n\nTITLE: LZMA Properties Initialization (C)\nDESCRIPTION: This code snippet demonstrates how to initialize the `CLzmaEncProps` structure using `LzmaEncProps_Init`. The properties within this structure can then be modified as needed before being sent to the LZMA encoder.\nSOURCE: https://github.com/openai/retro/blob/master/cores/pce/deps/lzma-16.04/DOC/lzma.txt#_snippet_7\n\nLANGUAGE: C\nCODE:\n```\nLzmaEncProps_Init(&props);\n```\n\n----------------------------------------\n\nTITLE: Run PPO agent training\nDESCRIPTION: This command runs the PPO agent training script on a Gym Retro game. It requires OpenAI Baselines and the retro package to be installed. Training may take a long time.\nSOURCE: https://github.com/openai/retro/blob/master/docs/getting_started.rst#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m retro.examples.ppo --game Airstriker-Genesis\n```\n\n----------------------------------------\n\nTITLE: Modified Makefile.base for Executable Naming\nDESCRIPTION: This snippet describes a modification to the Makefile.base file to change the name of the produced executable from \"fce\" to \"fceu\". This change is a simple configuration adjustment to the build process.\nSOURCE: https://github.com/openai/retro/blob/master/cores/nes/changelog.txt#_snippet_61\n\n\n\n----------------------------------------\n\nTITLE: Create Source Files for ZLIB\nDESCRIPTION: These commands create source physical files with a record length of 112. These files are used to store the ZLIB source code.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/third-party/zlib/as400/readme.txt#_snippet_5\n\nLANGUAGE: CL\nCODE:\n```\nCRTSRCPF FILE(ZLIB/SOURCES) RCDLEN(112) TEXT('ZLIB library modules')\nCRTSRCPF FILE(ZLIB/H)       RCDLEN(112) TEXT('ZLIB library includes')\nCRTSRCPF FILE(ZLIB/TOOLS)   RCDLEN(112) TEXT('ZLIB library control utilities')\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories\nDESCRIPTION: Adds the googlemock or googletest subdirectory based on the build options selected. This allows the subprojects to be built as part of the main project build process.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nif(BUILD_GMOCK)\n  add_subdirectory( googlemock )\nelseif(BUILD_GTEST)\n  add_subdirectory( googletest )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Interrupt Acknowledge Callback in C\nDESCRIPTION: This snippet describes how to set the interrupt acknowledge callback function using the `M68K_INT_ACK_CALLBACK` macro. The callback function must return an interrupt vector, `M68K_INT_ACK_AUTOVECTOR`, or `M68K_INT_ACK_SPURIOUS`.\nSOURCE: https://github.com/openai/retro/blob/master/cores/genesis/core/m68k/readme.txt#_snippet_2\n\nLANGUAGE: C\nCODE:\n```\n#define M68K_INT_ACK_CALLBACK(A) your_interrupt_acknowledge_routine\n```\n\n----------------------------------------\n\nTITLE: Define Executable and Link Libraries (CMake)\nDESCRIPTION: This snippet defines an executable target named 'in-memory' from the source file 'in-memory.c' and links it against the 'zip' library.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/libzip/examples/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nADD_EXECUTABLE(in-memory in-memory.c)\nTARGET_LINK_LIBRARIES(in-memory zip)\n```\n\n----------------------------------------\n\nTITLE: Custom Test Target\nDESCRIPTION: This snippet adds a custom target named 'cpptest' that executes the 'test_embed' executable. The working directory is set to the current source directory.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/tests/test_embed/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(cpptest COMMAND $<TARGET_FILE:test_embed>\n                  WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})\n```\n\n----------------------------------------\n\nTITLE: Enable Testing with CMake\nDESCRIPTION: This CMake snippet enables testing using the `enable_testing()` command. This command is required for running tests with 'make test' or ctest.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nif (gtest_build_tests)\n  # This must be set in the root directory for the tests to be run by\n  # 'make test' or ctest.\n  enable_testing()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Save state stores disk image XOR\nDESCRIPTION: This snippet states the current disk image XOR original disk image is now stored in save states. This increases compressability and makes distributing such save states a little more legal.\nSOURCE: https://github.com/openai/retro/blob/master/cores/nes/changelog.txt#_snippet_42\n\n\n\n----------------------------------------\n\nTITLE: Adding Library CMake\nDESCRIPTION: Adds the libzip library, specifying all the source files to be included.  It combines the core sources, OS-specific sources, and any extra files like `mkstemp.c` if needed.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/libzip/lib/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nADD_LIBRARY(zip ${LIBZIP_SOURCES} ${LIBZIP_EXTRA_FILES} ${LIBZIP_OPSYS_FILES})\n```\n\n----------------------------------------\n\nTITLE: Setting PC Callback in C\nDESCRIPTION: This snippet describes how to set the PC callback function using the `M68K_SET_PC_CALLBACK` macro. This callback allows monitoring of the program counter for banking and other purposes.\nSOURCE: https://github.com/openai/retro/blob/master/cores/genesis/core/m68k/readme.txt#_snippet_4\n\nLANGUAGE: C\nCODE:\n```\n#define M68K_SET_PC_CALLBACK(A) your_pc_callback_routine\n```\n\n----------------------------------------\n\nTITLE: Cleaning libzip build directory\nDESCRIPTION: This command cleans the libzip build directory by deleting all output and intermediate files and directories generated by the build process. It's used by the 'vsbuild.cmd' script.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/libzip/vstudio/readme.txt#_snippet_4\n\nLANGUAGE: batch\nCODE:\n```\nvsbuild clean\n```\n\n----------------------------------------\n\nTITLE: LZMA Dictionary and Distance Check\nDESCRIPTION: Verifies that rep0 is not larger than the dictionary size or the number of already decoded bytes.  Returns LZMA_RES_ERROR if either condition is true.\nSOURCE: https://github.com/openai/retro/blob/master/cores/genesis/core/cd_hw/libchdr/deps/lzma/DOC/lzma-specification.txt#_snippet_32\n\nLANGUAGE: C++\nCODE:\n```\nif (rep0 >= dictSize || !OutWindow.CheckDistance(rep0))\n  return LZMA_RES_ERROR;\n```\n\n----------------------------------------\n\nTITLE: Win32: Switched to DirectDraw7 interface\nDESCRIPTION: This snippet describes a switch in the Win32 version from DirectDraw4 to the DirectDraw7 interface. The surface Flip() method will now block, resulting in smoother animation/scrolling.\nSOURCE: https://github.com/openai/retro/blob/master/cores/nes/changelog.txt#_snippet_52\n\n\n\n----------------------------------------\n\nTITLE: Using HasFatalFailure() outside of TEST() in Google Test C++\nDESCRIPTION: This code shows how to call `HasFatalFailure()` outside of the `TEST()`, `TEST_F()`, or a test fixture, requiring the `::testing::Test::` prefix.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/AdvancedGuide.md#_snippet_17\n\nLANGUAGE: C++\nCODE:\n```\nif (::testing::Test::HasFatalFailure())\n  return;\n```\n\n----------------------------------------\n\nTITLE: Install Make and GCC on Windows (MSYS2)\nDESCRIPTION: Installs make and mingw-w64-x86_64-gcc using the MSYS2 package manager. This provides the necessary build tools for compiling Gym Retro on Windows.\nSOURCE: https://github.com/openai/retro/blob/master/docs/developing.rst#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npacman -Sy make mingw-w64-x86_64-gcc\n```\n\n----------------------------------------\n\nTITLE: Create ZLIB AS400 Library\nDESCRIPTION: This command creates the ZLIB library on the AS400 system.  It specifies the library name as 'ZLIB', sets the type to '*PROD' indicating a production library, and provides a descriptive text.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/third-party/zlib/as400/readme.txt#_snippet_0\n\nLANGUAGE: CL\nCODE:\n```\nCRTLIB LIB(ZLIB) TYPE(*PROD) TEXT('ZLIB compression API library')\n```\n\n----------------------------------------\n\nTITLE: Including GNUInstallDirs\nDESCRIPTION: This snippet includes the `GNUInstallDirs` module, which defines standard installation directories based on GNU conventions. This ensures consistency in the installation layout across different platforms.\nSOURCE: https://github.com/openai/retro/blob/master/src/ui/CMakeLists.txt#_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(GNUInstallDirs)\n```\n\n----------------------------------------\n\nTITLE: Character Literal Handling in Python\nDESCRIPTION: This Python code demonstrates how to pass character literals to C++ functions using pybind11. It calls `pass_char` with the character 'A' and shows the resulting character returned.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/cast/strings.rst#_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\n>>> example.pass_char('A')\n'A'\n```\n\n----------------------------------------\n\nTITLE: Creating a Build Directory for CMake\nDESCRIPTION: This snippet shows the initial steps for building Google Test as a standalone project using CMake, including creating a build directory and generating native build scripts.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/README.md#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nmkdir mybuild       # Create a directory to hold the build output.\ncd mybuild\ncmake ${GTEST_DIR}  # Generate native build scripts.\n```\n\n----------------------------------------\n\nTITLE: Checking Build Option Combinations\nDESCRIPTION: Checks for invalid combinations of build options. Specifically, it ensures that EXTERNAL_CAPNP is set when using CAPNP_LITE and BUILD_TESTING.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/c++/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(CAPNP_LITE AND BUILD_TESTING AND NOT EXTERNAL_CAPNP)\n  message(SEND_ERROR \"You must set EXTERNAL_CAPNP when using CAPNP_LITE and BUILD_TESTING.\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting DEVKITPRO Environment Variable in CMake\nDESCRIPTION: This snippet retrieves the DEVKITPRO environment variable or throws a fatal error if it's not defined.  It's crucial for locating the development environment.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/platform/wii/CMakeToolchain.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(DEFINED ENV{DEVKITPRO})\n        set(DEVKITPRO $ENV{DEVKITPRO})\nelse()\n        message(FATAL_ERROR \"Could not find DEVKITPRO in environment\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: DOS Keyboard Driver Rewrite\nDESCRIPTION: This snippet describes rewriting the DOS keyboard driver. The old 'keyscan.h' file was removed, implying a complete overhaul of the keyboard input system for the DOS port.\nSOURCE: https://github.com/openai/retro/blob/master/cores/nes/changelog.txt#_snippet_91\n\n\n\n----------------------------------------\n\nTITLE: Build and Run Retro UI on Linux\nDESCRIPTION: Configures and builds the Gym Retro UI on Linux using CMake and make. BUILD_UI is enabled and PYLIB_DIRECTORY is unset. The compiled application is then executed.\nSOURCE: https://github.com/openai/retro/blob/master/docs/developing.rst#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ncmake . -DBUILD_UI=ON -UPYLIB_DIRECTORY\nmake -j$(grep -c ^processor /proc/cpuinfo)\n./gym-retro-integration\n```\n\n----------------------------------------\n\nTITLE: Google Mock: Enforcing Call Order with InSequence\nDESCRIPTION: This snippet demonstrates how to enforce a strict call order for expectations using `InSequence`.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googlemock/docs/ForDummies.md#_snippet_13\n\nLANGUAGE: C++\nCODE:\n```\nusing ::testing::InSequence;\nTEST(FooTest, DrawsLineSegment) {\n  ...\n  {\n    InSequence dummy;\n\n    EXPECT_CALL(turtle, PenDown());\n    EXPECT_CALL(turtle, Forward(100));\n    EXPECT_CALL(turtle, PenUp());\n  }\n  Foo();\n}\n```\n\n----------------------------------------\n\nTITLE: Binding Factory Function as Constructor (C++)\nDESCRIPTION: Binds a static factory function `Example::create` as a constructor for the `Example` class in pybind11. It uses `py::init` to associate the factory function with the class constructor.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/classes.rst#_snippet_15\n\nLANGUAGE: cpp\nCODE:\n```\npy::class_<Example>(m, \"Example\")\n    .def(py::init(&Example::create));\n```\n\n----------------------------------------\n\nTITLE: Git Tagging\nDESCRIPTION: This snippet describes the git commands to tag the release. This includes creating an annotated tag with a message and pushing the tags to the remote repository.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/release.rst#_snippet_7\n\nLANGUAGE: Text\nCODE:\n```\n``git tag -a vX.Y.Z -m 'vX.Y.Z release'``.\n``git push``\n``git push --tags``.\n```\n\n----------------------------------------\n\nTITLE: Writing Package Version File\nDESCRIPTION: Writes a basic package version file used for CMake package configuration. This allows other CMake projects to find and use Cap'n Proto.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/c++/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(CMakePackageConfigHelpers)\nwrite_basic_package_version_file(\n  \"${CMAKE_CURRENT_BINARY_DIR}/cmake/CapnProtoConfigVersion.cmake\"\n  VERSION ${VERSION}\n  COMPATIBILITY AnyNewerVersion\n)\n```\n\n----------------------------------------\n\nTITLE: Optimized low-quality sound emulation\nDESCRIPTION: This snippet optimizes some of the low-quality sound emulation code. The optimization aims to improve the performance of sound processing when using lower-quality sound settings, potentially reducing CPU usage.\nSOURCE: https://github.com/openai/retro/blob/master/cores/nes/changelog.txt#_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: Defining an Enum in Cap'n Proto\nDESCRIPTION: This code defines an enum `Rfc3092Variable` in Cap'n Proto with a set of symbolic values. Enumerants must be numbered sequentially starting from zero.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/doc/language.md#_snippet_9\n\nLANGUAGE: capnp\nCODE:\n```\nenum Rfc3092Variable {\n  foo @0;\n  bar @1;\n  baz @2;\n  qux @3;\n  # ...\n}\n```\n\n----------------------------------------\n\nTITLE: Cherry-Picking Commits for Release\nDESCRIPTION: This snippet shows how to cherry-pick specific commits into the release branch when creating a new release candidate. This allows for incorporating fixes into the release branch based on specific commits.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/RELEASE-PROCESS.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n./release.sh candidate <commit>...\n```\n\n----------------------------------------\n\nTITLE: LZMA End of Stream Marker Check\nDESCRIPTION: Checks if rep0 is equal to 0xFFFFFFFF, indicating the end of the stream.  Returns LZMA_RES_FINISHED_WITH_MARKER if the range decoder is finished or LZMA_RES_ERROR otherwise.\nSOURCE: https://github.com/openai/retro/blob/master/cores/genesis/core/cd_hw/libchdr/deps/lzma/DOC/lzma-specification.txt#_snippet_31\n\nLANGUAGE: C++\nCODE:\n```\nif (rep0 == 0xFFFFFFFF)\n  return RangeDec.IsFinishedOK() ?\n      LZMA_RES_FINISHED_WITH_MARKER :\n      LZMA_RES_ERROR;\n```\n\n----------------------------------------\n\nTITLE: Building ZLib.Ada with GNAT\nDESCRIPTION: This command demonstrates how to build ZLib.Ada using the GNAT compiler. It links the necessary ZLib library (libz.a) and creates the executable 'test'.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/third-party/zlib/contrib/ada/readme.txt#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngnatmake test -largs -L<directory where libz.a is> -lz\n```\n\n----------------------------------------\n\nTITLE: Configuring CapnProtoMacros for Build Directory Consumers\nDESCRIPTION: Copies the CapnProtoMacros.cmake file to the build directory, ensuring that it's available for use by other projects consuming the build directory directly.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/c++/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nconfigure_file(cmake/CapnProtoMacros.cmake cmake/CapnProtoMacros.cmake COPYONLY)\n```\n\n----------------------------------------\n\nTITLE: Include VitaSDK CMake module\nDESCRIPTION: Includes the VitaSDK CMake module, which provides functions and variables specific to building PS Vita applications. This is a prerequisite for using VitaSDK functions.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/platform/psp2/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(\"${VITASDK}/share/vita.cmake\" REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: GZIP Header Structure\nDESCRIPTION: This snippet shows the layout of the GZIP header, indicating the positions of the CRC32 and ISIZE fields.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/third-party/zlib/doc/rfc1952.txt#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n         0   1   2   3   4   5   6   7\n         +---+---+---+---+---+---+---+---+\n         |     CRC32     |     ISIZE     |\n         +---+---+---+---+---+---+---+---+\n```\n\n----------------------------------------\n\nTITLE: Building UI with CMake\nDESCRIPTION: This CMake snippet conditionally adds the `src/ui` subdirectory to the build process if the `BUILD_UI` option is enabled. This allows for modular building of the user interface component.\nSOURCE: https://github.com/openai/retro/blob/master/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(BUILD_UI)\n    add_subdirectory(src/ui)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Install Dependencies for Retro UI on Linux\nDESCRIPTION: Installs the dependencies required to build the Gym Retro UI on Linux using apt-get, including capnproto, libcapnp-dev, libqt5opengl5-dev, qtbase5-dev and zlib1g-dev.\nSOURCE: https://github.com/openai/retro/blob/master/docs/developing.rst#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt-get install capnproto libcapnp-dev libqt5opengl5-dev qtbase5-dev zlib1g-dev\n```\n\n----------------------------------------\n\nTITLE: Building libzip\nDESCRIPTION: This command builds zlib and libzip. It requires the 'vsbuild.cmd' script to be executed from the 'vstudio' directory with the correct generator and toolset parameters.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/libzip/vstudio/readme.txt#_snippet_5\n\nLANGUAGE: batch\nCODE:\n```\nvsbuild build <generator> <toolset>\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries CMake\nDESCRIPTION: Links the libzip library against the ZLIB library and an optional library specified by `OPTIONAL_LIBRARY`.  This ensures that libzip can use the functionality provided by these dependencies.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/libzip/lib/CMakeLists.txt#_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nTARGET_LINK_LIBRARIES(zip ${ZLIB_LIBRARY} ${OPTIONAL_LIBRARY})\n```\n\n----------------------------------------\n\nTITLE: Corrected compiler warnings\nDESCRIPTION: This snippet corrects various pieces of code that were generating compiler warnings. This improves code quality and maintainability by addressing potential issues identified by the compiler.\nSOURCE: https://github.com/openai/retro/blob/master/cores/nes/changelog.txt#_snippet_19\n\n\n\n----------------------------------------\n\nTITLE: Building Google Mock with Make (Unix)\nDESCRIPTION: This snippet shows how to navigate to the `make` directory within the Google Mock source and execute the `make` command, followed by the execution of the sample test.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googlemock/README.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncd ${GMOCK_DIR}/make\nmake\n./gmock_test\n```\n\n----------------------------------------\n\nTITLE: Example Python Module interacting with Embedded Module\nDESCRIPTION: This Python module `py_module.py` imports a C++ module `cpp_module`. It accesses an attribute from `cpp_module` and performs a simple calculation.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/embedding.rst#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"py_module.py located in the working directory\"\"\"\nimport cpp_module\n\na = cpp_module.a\nb = a + 1\n```\n\n----------------------------------------\n\nTITLE: Applying LGPL Terms to New Libraries\nDESCRIPTION: This snippet provides the text to include at the start of each source file in a new library to apply the terms of the GNU Lesser General Public License version 2.1.  It includes copyright information, licensing terms, and warranty disclaimers.\nSOURCE: https://github.com/openai/retro/blob/master/cores/snes/docs/lgpl-2.1.txt#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n<one line to give the library's name and a brief idea of what it does.>\nCopyright (C) <year>  <name of author>\n\nThis library is free software; you can redistribute it and/or\nmodify it under the terms of the GNU Lesser General Public\nLicense as published by the Free Software Foundation; either\nversion 2.1 of the License, or (at your option) any later version.\n\nThis library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nLesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public\nLicense along with this library; if not, write to the Free Software\nFoundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n```\n\n----------------------------------------\n\nTITLE: Fixed sound logging function in Win32\nDESCRIPTION: This snippet addresses a bug in the Win32 version of the emulator that affected the behavior of the sound logging function. The fix ensures that sound logging works as expected on the Windows platform.\nSOURCE: https://github.com/openai/retro/blob/master/cores/nes/changelog.txt#_snippet_15\n\n\n\n----------------------------------------\n\nTITLE: Include Directories for Compilation (CMake)\nDESCRIPTION: This snippet includes the specified directories for compilation. It adds the directory for the library, source code, and the binary directory.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/libzip/examples/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nINCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/../lib\n\t${CMAKE_CURRENT_SOURCE_DIR}/../src\n\t${CMAKE_CURRENT_BINARY_DIR}/..)\n```\n\n----------------------------------------\n\nTITLE: Setting include directories in CMake\nDESCRIPTION: This snippet sets the include directories for the project. It includes the directory containing the 'zip' library headers and the build directory.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/libzip/src/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nINCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/../lib\n${CMAKE_CURRENT_BINARY_DIR}/..)\n```\n\n----------------------------------------\n\nTITLE: Building Google Test on macOS with Xcode Command Line\nDESCRIPTION: This command builds the Google Test framework on macOS using the Xcode command-line tool `xcodebuild`. It builds the Release configuration and places the output in the default build location.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/README.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\nxcodebuild\n```\n\n----------------------------------------\n\nTITLE: Declare Custom Holder Type\nDESCRIPTION: This snippet demonstrates how to declare a custom smart pointer type for use with pybind11. It uses the PYBIND11_DECLARE_HOLDER_TYPE macro to register the SmartPtr type.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/smart_ptrs.rst#_snippet_8\n\nLANGUAGE: cpp\nCODE:\n```\nPYBIND11_DECLARE_HOLDER_TYPE(T, SmartPtr<T>);\n```\n\n----------------------------------------\n\nTITLE: Restore ZLIB Objects\nDESCRIPTION: This command restores all objects from the ZLIBSAVF save file into the ZLIB library. It's used to extract the ZLIB library from a save file.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/third-party/zlib/as400/readme.txt#_snippet_2\n\nLANGUAGE: CL\nCODE:\n```\nRSTOBJ OBJ(*ALL) SAVLIB(ZLIB) DEV(*SAVF) SAVF(ZLIB/ZLIBSAVF) RSTLIB(ZLIB)\n```\n\n----------------------------------------\n\nTITLE: Win32: Added proper window maximization support\nDESCRIPTION: This snippet adds proper support for maximizing the window in the Win32 version. This allows users to easily switch between windowed and full-screen modes.\nSOURCE: https://github.com/openai/retro/blob/master/cores/nes/changelog.txt#_snippet_60\n\n\n\n----------------------------------------\n\nTITLE: Infinite While Loop Example\nDESCRIPTION: This example illustrates the preferred style for infinite loops that use `break` statements internally.  `while (true)` is favored over `for (;;)`. \nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/CONTRIBUTING.md#_snippet_9\n\nLANGUAGE: C\nCODE:\n```\nwhile (true) {\n\t\t// ...\n\t\tbreak;\n\t}\n```\n\n----------------------------------------\n\nTITLE: Finding ZLIB Dependency with CMake\nDESCRIPTION: This snippet uses CMake's `find_package` to locate the ZLIB library, a required dependency for libpng. It also includes the ZLIB include directory for compilation.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/third-party/libpng/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(ZLIB REQUIRED)\ninclude_directories(${ZLIB_INCLUDE_DIR})\n```\n\n----------------------------------------\n\nTITLE: Shared Pointer Declaration in pybind11 (C++)\nDESCRIPTION: This demonstrates that explicit declaration of shared pointer holder types using `PYBIND11_DECLARE_HOLDER_TYPE` is no longer necessary as of a specific version.  The support is now built-in.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/upgrade.rst#_snippet_9\n\nLANGUAGE: cpp\nCODE:\n```\nPYBIND11_DECLARE_HOLDER_TYPE(T, std::shared_ptr<T>)\n```\n\n----------------------------------------\n\nTITLE: Binding Trampoline Classes in pybind11 (New)\nDESCRIPTION: This code snippet demonstrates the new way of binding trampoline classes in pybind11. Both the original and trampoline classes are now arguments to the py::class_ template.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/changelog.rst#_snippet_7\n\nLANGUAGE: cpp\nCODE:\n```\npy::class_<MyClass, TrampolineClass>(\"MyClass\")\n  ....\n```\n\n----------------------------------------\n\nTITLE: State Variable Initialization C++\nDESCRIPTION: This line initializes the 'state' variable used in LZMA decoding to zero. This variable, which ranges from 0 to 11, is used to select probability models during the decoding process.\nSOURCE: https://github.com/openai/retro/blob/master/cores/pce/deps/lzma-16.04/DOC/lzma-specification.txt#_snippet_22\n\nLANGUAGE: C++\nCODE:\n```\nunsigned state = 0;\n```\n\n----------------------------------------\n\nTITLE: Adding subdirectory for tests\nDESCRIPTION: This conditional statement adds the 'tests' subdirectory to the build if the PYBIND11_TEST option is enabled. This allows the pybind11 test suite to be built as part of the project.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif (PYBIND11_TEST)\n  add_subdirectory(tests)\nendif()\n```\n\n----------------------------------------\n\nTITLE: zlib Integration for CRC32\nDESCRIPTION: This snippet describes replacing the existing crc32 code with code from the zlib library if zlib is linked with FCE Ultra. This is a refactoring to use an external library for CRC32 calculations.\nSOURCE: https://github.com/openai/retro/blob/master/cores/nes/changelog.txt#_snippet_67\n\n\n\n----------------------------------------\n\nTITLE: Fixed typo in VRC7 emulation code\nDESCRIPTION: This snippet fixes a typo in the VRC7 emulation code. This correction resolves a potentially significant error that may have affected the accuracy of VRC7 sound emulation.\nSOURCE: https://github.com/openai/retro/blob/master/cores/nes/changelog.txt#_snippet_38\n\n\n\n----------------------------------------\n\nTITLE: Configuring Autotools Build System (Unix)\nDESCRIPTION: This code snippet shows how to prepare the Autotools build system for Google Mock on Unix-like systems. It uses `autoreconf` to generate the necessary configuration files.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googlemock/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncd googlemock\nautoreconf -fvi\n```\n\n----------------------------------------\n\nTITLE: Build with Microsoft C and MASM\nDESCRIPTION: This command builds the project with Microsoft C and MASM, defining ASMV and ASMINF and specifying object files.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/third-party/zlib/contrib/masmx86/readme.txt#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nnmake -f win32/Makefile.msc LOC=\"-DASMV -DASMINF\" OBJA=\"match686.obj inffas32.obj\"\n```\n\n----------------------------------------\n\nTITLE: LZMA Encoder Object Destruction (C)\nDESCRIPTION: This code snippet demonstrates how to destroy the LZMA encoder object using `LzmaEnc_Destroy`. It's crucial to release the resources allocated by the encoder after its use.\nSOURCE: https://github.com/openai/retro/blob/master/cores/pce/deps/lzma-16.04/DOC/lzma.txt#_snippet_10\n\nLANGUAGE: C\nCODE:\n```\nLzmaEnc_Destroy(enc, &g_Alloc, &g_Alloc);\n```\n\n----------------------------------------\n\nTITLE: XAA Opcode Change\nDESCRIPTION: This snippet describes that emulation of opcode $8B, the XAA instruction, was CHANGED and not fixed. This is due to uncertainty about the correct behaviour.\nSOURCE: https://github.com/openai/retro/blob/master/cores/nes/changelog.txt#_snippet_74\n\n\n\n----------------------------------------\n\nTITLE: Update Conda-Forge Recipe\nDESCRIPTION: This snippet shows how to update the conda-forge recipe by changing the version number and checksum in `recipe/meta.yml`. This updates the package metadata for the conda-forge distribution.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/release.rst#_snippet_11\n\nLANGUAGE: Text\nCODE:\n```\nchange version number and checksum in ``recipe/meta.yml``\n```\n\n----------------------------------------\n\nTITLE: Installing KJ Test Library and Headers\nDESCRIPTION: Installs the KJ test library and header files to the specified directories.  Uses pre-defined macros like `CMAKE_INSTALL_INCLUDEDIR`.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/c++/src/kj/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS kj-test ${INSTALL_TARGETS_DEFAULT_ARGS})\ninstall(FILES ${kj-test_headers} DESTINATION \"${CMAKE_INSTALL_INCLUDEDIR}/kj\")\ninstall(FILES ${kj-test-compat_headers} DESTINATION \"${CMAKE_INSTALL_INCLUDEDIR}/kj/compat\")\n```\n\n----------------------------------------\n\nTITLE: Setting Properties for Generated lib.c (CMake)\nDESCRIPTION: This snippet sets the `GENERATED` property to `ON` for the generated `lib.c` file, indicating that it's a generated source file.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/platform/python/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset_source_files_properties(${CMAKE_CURRENT_BINARY_DIR}/lib.c PROPERTIES GENERATED ON)\n```\n\n----------------------------------------\n\nTITLE: Configuring setup.py (CMake)\nDESCRIPTION: This snippet configures the `setup.py` file using a template file `setup.py.in`. This allows CMake variables to be used within the Python setup script.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/platform/python/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nconfigure_file(${CMAKE_CURRENT_SOURCE_DIR}/setup.py.in ${CMAKE_CURRENT_BINARY_DIR}/setup.py)\n```\n\n----------------------------------------\n\nTITLE: Thread Library Linking\nDESCRIPTION: This snippet finds the Threads package and links the 'test_embed' executable against the thread libraries, ensuring support for multi-threading.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/tests/test_embed/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(Threads REQUIRED)\ntarget_link_libraries(test_embed PUBLIC ${CMAKE_THREAD_LIBS_INIT})\n```\n\n----------------------------------------\n\nTITLE: Including Directories in CMake\nDESCRIPTION: This CMake snippet adds the current binary directory to the include directories list. This allows the compiler to find header files generated during the build process.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/platform/wii/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories(${CMAKE_CURRENT_BINARY_DIR})\n```\n\n----------------------------------------\n\nTITLE: Including GNUInstallDirs and CMakePackageConfigHelpers\nDESCRIPTION: This code block includes the GNUInstallDirs and CMakePackageConfigHelpers modules. GNUInstallDirs provides standard installation directories, while CMakePackageConfigHelpers assists in creating CMake package configuration files.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(GNUInstallDirs)\ninclude(CMakePackageConfigHelpers)\n```\n\n----------------------------------------\n\nTITLE: Adding Compiler Definitions for SDL in CMake\nDESCRIPTION: This CMake code adds the `-DBUILD_SDL` preprocessor definition to the compiler flags. This definition can be used in the C/C++ code to conditionally compile SDL-related code.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/platform/sdl/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nadd_definitions(-DBUILD_SDL)\n```\n\n----------------------------------------\n\nTITLE: CMake Project Setup\nDESCRIPTION: Initializes the CMake project, specifies the language, and requires a minimum CMake version.  This ensures the project can be built with compatible CMake versions.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/c++/samples/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nproject(\"Cap'n Proto Samples\" CXX)\ncmake_minimum_required(VERSION 3.1)\n```\n\n----------------------------------------\n\nTITLE: Win32: Undid fast-forward speed limiting change\nDESCRIPTION: This snippet undoes a change made in the last release that limited the speed of fast-forwarding when using the tilde key in the Win32 version.\nSOURCE: https://github.com/openai/retro/blob/master/cores/nes/changelog.txt#_snippet_53\n\n\n\n----------------------------------------\n\nTITLE: Including pybind11 headers and namespace\nDESCRIPTION: These lines include the pybind11 header file and declare the `py` namespace. These are necessary for using pybind11 functionalities in C++ code.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/basics.rst#_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\n#include <pybind11/pybind11.h>\n\nnamespace py = pybind11;\n```\n\n----------------------------------------\n\nTITLE: Win32: Fixed Scroll Lock key handling\nDESCRIPTION: This snippet fixes the handling of the \"Scroll Lock\" key used to disable and enable Family BASIC Keyboard input in the Win32-native version.\nSOURCE: https://github.com/openai/retro/blob/master/cores/nes/changelog.txt#_snippet_50\n\n\n\n----------------------------------------\n\nTITLE: Setting Include Flags (CMake)\nDESCRIPTION: This snippet retrieves the include directories, creates a string with \"-I\" flags, and sets the INCLUDE_FLAGS variable.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/platform/python/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nget_property(INCLUDE_DIRECTORIES DIRECTORY PROPERTY INCLUDE_DIRECTORIES)\nset(INCLUDE_FLAGS)\nforeach(DIR IN LISTS INCLUDE_DIRECTORIES)\n\tlist(APPEND INCLUDE_FLAGS \"-I${DIR}\")\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Revert Version Update in common.h\nDESCRIPTION: This snippet describes the action to update the version macros in `include/pybind11/common.h` after the release is complete. This includes reverting the version number macros to the 'dev' version.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/release.rst#_snippet_13\n\nLANGUAGE: Text\nCODE:\n```\nUpdate version macros in ``include/pybind11/common.h``\n```\n\n----------------------------------------\n\nTITLE: unix-netplay: Replaced malloc.h with stdlib.h\nDESCRIPTION: This snippet replaces the archaic include of \"malloc.h\" in unix-netplay.c with \"stdlib.h\". It modernizes the code and improves compatibility with current C standards.\nSOURCE: https://github.com/openai/retro/blob/master/cores/nes/changelog.txt#_snippet_11\n\n\n\n----------------------------------------\n\nTITLE: Run interactive Gym Retro script\nDESCRIPTION: This command runs an interactive Python script that allows you to control a game using the Gym Retro interface. It requires the retro package to be installed.\nSOURCE: https://github.com/openai/retro/blob/master/docs/getting_started.rst#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m retro.examples.interactive --game Airstriker-Genesis\n```\n\n----------------------------------------\n\nTITLE: Test Dependency\nDESCRIPTION: This snippet adds a dependency on the 'cpptest' target to the 'check' target, ensuring that the C++ tests are run as part of the 'check' build stage.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/tests/test_embed/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nadd_dependencies(check cpptest)\n```\n\n----------------------------------------\n\nTITLE: Win32: Fixed speed throttling with disabled sound\nDESCRIPTION: This snippet fixes the speed throttling used when sound is disabled in the Win32-native version. Emulation was running at half the expected speed when sound was disabled.\nSOURCE: https://github.com/openai/retro/blob/master/cores/nes/changelog.txt#_snippet_48\n\n\n\n----------------------------------------\n\nTITLE: Force Google Test to Disable Pthread\nDESCRIPTION: This snippet shows how to force Google Test to disable pthread support. Use this if pthread support is causing issues in your environment. This flag must be added to compiler flags.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/README.md#_snippet_11\n\nLANGUAGE: c++\nCODE:\n```\n-DGTEST_HAS_PTHREAD=0\n```\n\n----------------------------------------\n\nTITLE: 7-Zip Compression without Filter\nDESCRIPTION: This command demonstrates how to compress a file (a.bin) into a 7z archive (a1.7z) using LZMA without applying any specific filters.\nSOURCE: https://github.com/openai/retro/blob/master/cores/pce/deps/lzma-16.04/DOC/lzma-sdk.txt#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n7z a a1.7z a.bin -m0=lzma\n```\n\n----------------------------------------\n\nTITLE: Simple C++ function to add two integers\nDESCRIPTION: This C++ function adds two integers and returns their sum.  It takes two integer arguments, `i` and `j`, and returns their sum as an integer.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/basics.rst#_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nint add(int i, int j) {\n    return i + j;\n}\n```\n\n----------------------------------------\n\nTITLE: Linking with Google Mock using CMake\nDESCRIPTION: This code snippet demonstrates how to link your CMake project with Google Mock using `gmock_main`. It ensures proper linking and inclusion of Google Test, which Google Mock depends on.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googlemock/README.md#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(example gmock_main)\n```\n\n----------------------------------------\n\nTITLE: C Static Function Example\nDESCRIPTION: This example shows the correct naming for static functions not associated with structs. They must start with an underscore and be in camelCase.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/CONTRIBUTING.md#_snippet_4\n\nLANGUAGE: C\nCODE:\n```\nstatic void _LocalStructUse(struct LocalStruct* struct);\n\tstatic void _function2(int argument2);\n```\n\n----------------------------------------\n\nTITLE: Explicit String Conversion Result in Python\nDESCRIPTION: This Python code calls the `str_output` function, which explicitly converts a Latin-1 string to Unicode in C++, and prints the resulting Unicode string.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/cast/strings.rst#_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\n>>> str_output()\n'Send your résumé to Alice in HR'\n```\n\n----------------------------------------\n\nTITLE: SXA, SYA, XAS Opcode Fixes\nDESCRIPTION: This snippet describes fixing the behavior of the SXA, SYA, and XAS opcodes based on documentation. The focus is on accurate CPU instruction emulation.\nSOURCE: https://github.com/openai/retro/blob/master/cores/nes/changelog.txt#_snippet_73\n\n\n\n----------------------------------------\n\nTITLE: Minor optimizations to high-quality sound emulation\nDESCRIPTION: This snippet makes minor optimizations to the high-quality sound emulation code. The FIR filter code remains the bottleneck, so the changes have a limited effect on overall speed.\nSOURCE: https://github.com/openai/retro/blob/master/cores/nes/changelog.txt#_snippet_36\n\n\n\n----------------------------------------\n\nTITLE: C Header Guard Example\nDESCRIPTION: This example shows the correct header guard style for C headers. The define should be the filename (including H), all-caps, with underscores instead of punctuation.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/CONTRIBUTING.md#_snippet_6\n\nLANGUAGE: C\nCODE:\n```\n#ifndef FILE_NAME_H\n#define FILE_NAME_H\n\n\t// Header\n\n#endif\n```\n\n----------------------------------------\n\nTITLE: Python Package Upload\nDESCRIPTION: This snippet describes the commands to build and upload the python package to a package index like PyPI.  This includes building source distributions and wheels.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/release.rst#_snippet_8\n\nLANGUAGE: Text\nCODE:\n```\n``python setup.py sdist upload``.\n``python setup.py bdist_wheel upload``.\n```\n\n----------------------------------------\n\nTITLE: Google Mock: Multiple Expectations and Call Order\nDESCRIPTION: This snippet demonstrates how multiple expectations interact and how Google Mock searches for a match in reverse order of definition.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googlemock/docs/ForDummies.md#_snippet_12\n\nLANGUAGE: C++\nCODE:\n```\nusing ::testing::_;\nEXPECT_CALL(turtle, Forward(_));  // #1\nEXPECT_CALL(turtle, Forward(10))  // #2\n    .Times(2);\n```\n\n----------------------------------------\n\nTITLE: Force Google Test to Use Pthread\nDESCRIPTION: This snippet demonstrates how to explicitly enable pthread support in Google Test. Use this if Google Test fails to detect pthread availability in your environment. Add to compiler flags.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/README.md#_snippet_10\n\nLANGUAGE: c++\nCODE:\n```\n-DGTEST_HAS_PTHREAD=1\n```\n\n----------------------------------------\n\nTITLE: Download Release Package (Conda-Forge)\nDESCRIPTION: This snippet shows how to download the release package from Github using wget. vX.Y.Z should be replaced by the correct version number.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/release.rst#_snippet_9\n\nLANGUAGE: Bash\nCODE:\n```\n``wget https://github.com/pybind/pybind11/archive/vX.Y.Z.tar.gz``\n```\n\n----------------------------------------\n\nTITLE: Installing zipconf.h in CMake\nDESCRIPTION: This snippet installs the generated `zipconf.h` file to the include directory specified by `DESTINATION include`. This makes the configuration header available to users of the libzip library.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/libzip/CMakeLists.txt#_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\nINSTALL(FILES ${CMAKE_CURRENT_BINARY_DIR}/zipconf.h DESTINATION include)\n```\n\n----------------------------------------\n\nTITLE: Setting Executable Extension in CMake\nDESCRIPTION: This snippet sets the executable extension to '.exe' if the host system is Windows. This is required as the compiled binaries are typically host-dependent.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/platform/wii/CMakeToolchain.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(extension)\nif (CMAKE_HOST_WIN32)\n\tset(extension .exe)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Braces Style Example\nDESCRIPTION: This example shows the correct style for braces in if/else blocks, including the use of spaces and mandatory braces even for single-line blocks.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/CONTRIBUTING.md#_snippet_5\n\nLANGUAGE: C\nCODE:\n```\nif (condition) {\n\t\tblock;\n\t} else if (condition2) {\n\t\tblock2;\n\t} else {\n\t\tblock3;\n\t}\n```\n\n----------------------------------------\n\nTITLE: Accessing Enumeration Members in Python\nDESCRIPTION: This snippet shows how to access the members of the enumeration in Python via the `__members__` property after the enumeration is bound using pybind11.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/classes.rst#_snippet_29\n\nLANGUAGE: python\nCODE:\n```\n>>> Pet.Kind.__members__\n{'Dog': Kind.Dog, 'Cat': Kind.Cat}\n```\n\n----------------------------------------\n\nTITLE: LZMA Literal Decoding\nDESCRIPTION: Decodes a literal value using DecodeLiteral, updates the state using UpdateState_Literal, and decrements the unpackSize counter, preparing for the next iteration.\nSOURCE: https://github.com/openai/retro/blob/master/cores/genesis/core/cd_hw/libchdr/deps/lzma/DOC/lzma-specification.txt#_snippet_26\n\nLANGUAGE: C++\nCODE:\n```\nDecodeLiteral(state, rep0);\nstate = UpdateState_Literal(state);\nunpackSize--;\n```\n\n----------------------------------------\n\nTITLE: Project Definition and Version Setting\nDESCRIPTION: Defines the project name, language (C++), and sets the version number. This is a standard CMake initialization step.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/c++/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nproject(\"Cap'n Proto\" CXX)\ncmake_minimum_required(VERSION 3.1)\nset(VERSION 0.6.1)\n```\n\n----------------------------------------\n\nTITLE: Merged banksw.h into ines.c\nDESCRIPTION: This snippet merges banksw.h into ines.c and fixes some of its prototypes in ines.h. This change likely simplifies the codebase and improves organization.\nSOURCE: https://github.com/openai/retro/blob/master/cores/nes/changelog.txt#_snippet_47\n\n\n\n----------------------------------------\n\nTITLE: Reworked VS Unisystem emulation\nDESCRIPTION: This snippet describes a reworking of much of the VS Unisystem emulation code, partially based on information from MAME. Several games are now supported.\nSOURCE: https://github.com/openai/retro/blob/master/cores/nes/changelog.txt#_snippet_40\n\n\n\n----------------------------------------\n\nTITLE: Win32: Fixed hide left/right 8 video columns\nDESCRIPTION: This snippet fixes the \"hide left/right 8 video columns\" feature in the Win32 version. This feature allows users to crop the edges of the display.\nSOURCE: https://github.com/openai/retro/blob/master/cores/nes/changelog.txt#_snippet_34\n\n\n\n----------------------------------------\n\nTITLE: Fixed debugger disassembler bug\nDESCRIPTION: This snippet fixes a bug in the debugger's disassembler when disassembling opcode 0xBC. This ensures the debugger provides accurate information during code analysis.\nSOURCE: https://github.com/openai/retro/blob/master/cores/nes/changelog.txt#_snippet_58\n\n\n\n----------------------------------------\n\nTITLE: 6502 Emulation Core Replacement\nDESCRIPTION: This snippet describes replacing the existing 6502 emulation core with a new one. This change involved significant changes to the core CPU emulation of the NES.\nSOURCE: https://github.com/openai/retro/blob/master/cores/nes/changelog.txt#_snippet_72\n\n\n\n----------------------------------------\n\nTITLE: Disabling pkg-config in CMake\nDESCRIPTION: This snippet disables pkg-config by setting PKG_CONFIG_EXECUTABLE to /dev/null. This prevents CMake from using pkg-config, which is not needed for this environment.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/platform/wii/CMakeToolchain.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nset(PKG_CONFIG_EXECUTABLE \"/dev/null\" CACHE INTERNAL \"\" FORCE)\n```\n\n----------------------------------------\n\nTITLE: Win32: Added joystick POV hats support\nDESCRIPTION: This snippet adds support for joystick POV hats in the Win32 version. This allows users to use the POV hat on their joystick for directional input.\nSOURCE: https://github.com/openai/retro/blob/master/cores/nes/changelog.txt#_snippet_57\n\n\n\n----------------------------------------\n\nTITLE: Installing Header Files CMake\nDESCRIPTION: Installs the zip.h header file to the include directory during the installation process. This makes the header available for other projects to use.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/libzip/lib/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nINSTALL(FILES zip.h DESTINATION include)\n```\n\n----------------------------------------\n\nTITLE: Setting Output Name (Windows)\nDESCRIPTION: This snippet is specific to Windows (`if(WIN32)`). It sets the output name of the `gym-retro-integration` target to \"Gym Retro Integration\".\nSOURCE: https://github.com/openai/retro/blob/master/src/ui/CMakeLists.txt#_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\nif(WIN32)\n    set_target_properties(gym-retro-integration PROPERTIES OUTPUT_NAME \"Gym Retro Integration\")\n```\n\n----------------------------------------\n\nTITLE: LZMA Simple Match History Update\nDESCRIPTION: Updates the distance history table by shifting values from rep2 to rep3, rep1 to rep2, and rep0 to rep1.\nSOURCE: https://github.com/openai/retro/blob/master/cores/genesis/core/cd_hw/libchdr/deps/lzma/DOC/lzma-specification.txt#_snippet_27\n\nLANGUAGE: C++\nCODE:\n```\nrep3 = rep2;\nrep2 = rep1;\nrep1 = rep0;\n```\n\n----------------------------------------\n\nTITLE: Defining KJ Parse Headers\nDESCRIPTION: Defines the list of header files specifically for the parsing functionality of the KJ library. These headers are installed to allow external usage.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/c++/src/kj/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(kj-parse_headers\n  parse/common.h\n  parse/char.h\n)\n```\n\n----------------------------------------\n\nTITLE: Git Commit and Push\nDESCRIPTION: This snippet describes the git commands to add the changes, commit them, and push the commit. It is a standard procedure in git version control systems.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/release.rst#_snippet_5\n\nLANGUAGE: Text\nCODE:\n```\n``git add`` and ``git commit``.\n```\n\n----------------------------------------\n\nTITLE: Modified save state format\nDESCRIPTION: This snippet modifies the save state format to allow for more precise and larger version numbers. This improves the reliability and compatibility of save states.\nSOURCE: https://github.com/openai/retro/blob/master/cores/nes/changelog.txt#_snippet_43\n\n\n\n----------------------------------------\n\nTITLE: Installing Exported Targets\nDESCRIPTION: Installs the exported targets file, making it available to other CMake projects. The namespace is specified again during installation.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/c++/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(EXPORT CapnProtoTargets\n  FILE CapnProtoTargets.cmake\n  NAMESPACE CapnProto::\n  DESTINATION ${CONFIG_PACKAGE_LOCATION}\n)\n```\n\n----------------------------------------\n\nTITLE: LZMA Decompression Example\nDESCRIPTION: This example shows how to decompress a file compressed using LZMA. The tool automatically detects the compression parameters from the .lzma file.\nSOURCE: https://github.com/openai/retro/blob/master/cores/pce/deps/lzma-16.04/DOC/lzma-sdk.txt#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nLZMA d file.lzma file.bin\n```\n\n----------------------------------------\n\nTITLE: Checking Return Type in Python\nDESCRIPTION: This Python code checks the type of the value returned by the C++ function `std_string_return`, confirming that it is a Python `str` object.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/advanced/cast/strings.rst#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n>>> isinstance(example.std_string_return(), str)\nTrue\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version\nDESCRIPTION: Sets the minimum required CMake version to 2.6.4. This ensures that the project can be built with compatible versions of CMake.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 2.6.4)\n```\n\n----------------------------------------\n\nTITLE: Defining Cap'n Proto JSON Schemas\nDESCRIPTION: This snippet defines the Cap'n Proto schema files for JSON compatibility.  This allows defining data structures that map directly to JSON.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/c++/src/capnp/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nset(capnp-json_schemas\n  compat/json.capnp\n)\n```\n\n----------------------------------------\n\nTITLE: Win32: Added confirmation before exiting\nDESCRIPTION: This snippet adds an option, disabled by default, to ask for confirmation before exiting FCE Ultra in the Win32 version. This prevents accidental exits.\nSOURCE: https://github.com/openai/retro/blob/master/cores/nes/changelog.txt#_snippet_54\n\n\n\n----------------------------------------\n\nTITLE: Compute Checksum (Conda-Forge)\nDESCRIPTION: This snippet shows how to compute the SHA256 checksum of the downloaded release package using shasum. This checksum is used in the conda-forge recipe.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/release.rst#_snippet_10\n\nLANGUAGE: Bash\nCODE:\n```\n``shasum -a 256  vX.Y.Z.tar.gz``\n```\n\n----------------------------------------\n\nTITLE: TempArray Removal\nDESCRIPTION: This snippet describes removing a \"TempArray\" construct, likely a temporary data structure. This indicates refactoring and simplification of the codebase.\nSOURCE: https://github.com/openai/retro/blob/master/cores/nes/changelog.txt#_snippet_87\n\n\n\n----------------------------------------\n\nTITLE: GZIP Example Extra Field ID\nDESCRIPTION: This snippet gives an example of an extra field ID within the GZIP header. It lists the Apollo file type information identifier.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/third-party/zlib/doc/rfc1952.txt#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n            SI1         SI2         Data\n            ----------  ----------  ----\n            0x41 ('A')  0x70 ('P')  Apollo file type information\n```\n\n----------------------------------------\n\nTITLE: NSF Stack Pointer Initialization\nDESCRIPTION: This snippet describes that the NSF 6502 player now initializes the stack pointer on reset. This fixes issues related to NSF playback.\nSOURCE: https://github.com/openai/retro/blob/master/cores/nes/changelog.txt#_snippet_92\n\n\n\n----------------------------------------\n\nTITLE: GPL Header Addition\nDESCRIPTION: This snippet describes the start of adding GPL headers to the source code files. This indicates a change in the licensing of FCE Ultra.\nSOURCE: https://github.com/openai/retro/blob/master/cores/nes/changelog.txt#_snippet_88\n\n\n\n----------------------------------------\n\nTITLE: Including Directories CMake\nDESCRIPTION: Includes the necessary directories for header files. These directories contain the header files required to compile the libzip source code.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/libzip/lib/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nINCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}\n  ${CMAKE_CURRENT_SOURCE_DIR}/gladman-fcrypt\n  ${CMAKE_CURRENT_BINARY_DIR}/..)\n```\n\n----------------------------------------\n\nTITLE: Win32: Moved miscellaneous settings\nDESCRIPTION: This snippet moves settings in the \"Miscellaneous\" configuration window to their correct locations and adds \"GUI\" and \"Timing\" configuration windows.\nSOURCE: https://github.com/openai/retro/blob/master/cores/nes/changelog.txt#_snippet_49\n\n\n\n----------------------------------------\n\nTITLE: Install Dependencies for Retro UI on macOS\nDESCRIPTION: Installs the dependencies required to build the Gym Retro UI on macOS, including capnp, lua@5.1, and qt5 using Homebrew.\nSOURCE: https://github.com/openai/retro/blob/master/docs/developing.rst#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nbrew install pkg-config capnp lua@5.1 qt5\n```\n\n----------------------------------------\n\nTITLE: Install Lua 5.1 on macOS\nDESCRIPTION: Installs Lua 5.1 using Homebrew. This is required because LuaJIT does not work properly on macOS with Gym Retro.\nSOURCE: https://github.com/openai/retro/blob/master/docs/developing.rst#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbrew install pkg-config lua@5.1\n```\n\n----------------------------------------\n\nTITLE: Function with default arguments\nDESCRIPTION: This C++ function `add` has default arguments `i = 1` and `j = 2`. It returns the sum of `i` and `j`.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/basics.rst#_snippet_11\n\nLANGUAGE: cpp\nCODE:\n```\nint add(int i = 1, int j = 2) {\n    return i + j;\n}\n```\n\n----------------------------------------\n\nTITLE: Call ZLIB Compile Program\nDESCRIPTION: This command calls the COMPILE program within the ZLIB library.  This program executes the compilation and service program creation processes as customized in the compile CL program member.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/third-party/zlib/as400/readme.txt#_snippet_4\n\nLANGUAGE: CL\nCODE:\n```\nCALL PGM(ZLIB/COMPILE)\n```\n\n----------------------------------------\n\nTITLE: Enabling Testing in CMake\nDESCRIPTION: Enables testing using the `enable_testing()` command. This allows the project to define and run unit tests during the build process.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nenable_testing()\n```\n\n----------------------------------------\n\nTITLE: C Static Variable Naming Example\nDESCRIPTION: This example shows the correct naming convention for file-scoped static variables in C. They should start with an underscore and be in camelCase.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nstatic int _localVariable;\n```\n\n----------------------------------------\n\nTITLE: Getting help in Python\nDESCRIPTION: This code shows how to use the `help` function to view the signature of the function add, the documentation provided, and its parameters.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/basics.rst#_snippet_9\n\nLANGUAGE: pycon\nCODE:\n```\n>>> help(example)\n```\n\n----------------------------------------\n\nTITLE: Fixed FCEUGameInfo initialization\nDESCRIPTION: This snippet fixes the initialization of the FCEUGameInfo structure, which previously led to problems with sound output on the SexyAL-using ports (Linux).\nSOURCE: https://github.com/openai/retro/blob/master/cores/nes/changelog.txt#_snippet_44\n\n\n\n----------------------------------------\n\nTITLE: Fixed zapper right mouse button behavior\nDESCRIPTION: This snippet fixes the behavior of the right mouse button with zapper emulation to correspond with the documented functionality. This ensures accurate zapper emulation.\nSOURCE: https://github.com/openai/retro/blob/master/cores/nes/changelog.txt#_snippet_59\n\n\n\n----------------------------------------\n\nTITLE: Defining GEKKO macro in CMake\nDESCRIPTION: This snippet adds the GEKKO preprocessor definition. This macro indicates that the code is being compiled for the Gamecube/Wii.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/src/platform/wii/CMakeToolchain.txt#_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nset(WII ON)\nadd_definitions(-DGEKKO)\n```\n\n----------------------------------------\n\nTITLE: Setting Target Properties CMake\nDESCRIPTION: Sets the properties of the libzip target, including the version and SOVERSION. This information is used for shared library versioning.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/libzip/lib/CMakeLists.txt#_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nSET_TARGET_PROPERTIES(zip PROPERTIES VERSION 5.0 SOVERSION 5)\n```\n\n----------------------------------------\n\nTITLE: LZMA Unpack Size Check\nDESCRIPTION: Checks if the uncompressed size is defined and equal to 0. If true, returns an error indicating that the archive is empty.\nSOURCE: https://github.com/openai/retro/blob/master/cores/genesis/core/cd_hw/libchdr/deps/lzma/DOC/lzma-specification.txt#_snippet_25\n\nLANGUAGE: C++\nCODE:\n```\nif (unpackSizeDefined && unpackSize == 0)\n  return LZMA_RES_ERROR;\n```\n\n----------------------------------------\n\nTITLE: Calculate Match Length C++\nDESCRIPTION: This macro converts the normalized match length (zero-based value) to the actual match length by adding kMatchMinLen (which is 2) to the normalized length.\nSOURCE: https://github.com/openai/retro/blob/master/cores/pce/deps/lzma-16.04/DOC/lzma-specification.txt#_snippet_15\n\nLANGUAGE: C++\nCODE:\n```\n#define kMatchMinLen 2\n\n    matchLen = len + kMatchMinLen;\n```\n\n----------------------------------------\n\nTITLE: C Struct Function Example\nDESCRIPTION: This example shows how functions relating to structs should be named, including the use of camelCase and the struct name as a prefix.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: C\nCODE:\n```\nvoid LocalStructCreate(struct LocalStruct* struct);\n```\n\n----------------------------------------\n\nTITLE: Basic GoogleTest Test\nDESCRIPTION: A simple GoogleTest test case example. This shows the basic structure of a test with the `TEST` macro.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/googletest/docs/AdvancedGuide.md#_snippet_22\n\nLANGUAGE: c++\nCODE:\n```\nTEST(MyCodeTest, TestFoo) {\n  // A code to test foo().\n}\n```\n\n----------------------------------------\n\nTITLE: Pair/dpair Data Type Removal\nDESCRIPTION: This snippet describes the removal of the pair/dpair data types from the codebase.  This is likely a refactoring decision to simplify the code.\nSOURCE: https://github.com/openai/retro/blob/master/cores/nes/changelog.txt#_snippet_86\n\n\n\n----------------------------------------\n\nTITLE: printf() Commented Out in fds.c\nDESCRIPTION: This snippet describes a debugging `printf()` statement being commented out in `fds.c`. This relates to debugging and FDS emulation.\nSOURCE: https://github.com/openai/retro/blob/master/cores/nes/changelog.txt#_snippet_75\n\n\n\n----------------------------------------\n\nTITLE: Added support for mapper 255\nDESCRIPTION: This snippet notes that support for mapper 255 was added a while back, and the documentation has been updated.\nSOURCE: https://github.com/openai/retro/blob/master/cores/nes/changelog.txt#_snippet_45\n\n\n\n----------------------------------------\n\nTITLE: Import Retro and Add Custom Path - Python\nDESCRIPTION: This snippet demonstrates how to import the retro library and add a custom integration path, allowing Retro to recognize custom game integrations.\nSOURCE: https://github.com/openai/retro/blob/master/docs/integration.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport retro\nimport os\n```\n\n----------------------------------------\n\nTITLE: Drawing.h and ggrom.h Cleanup\nDESCRIPTION: This snippet describes cleaning up drawing.h and ggrom.h. This cleaning is potentially related to unused or obsolete parts of the code.\nSOURCE: https://github.com/openai/retro/blob/master/cores/nes/changelog.txt#_snippet_89\n\n\n\n----------------------------------------\n\nTITLE: Install Gym Retro using pip\nDESCRIPTION: This command installs the Gym Retro package using pip. It assumes you have Python 3 and pip installed.\nSOURCE: https://github.com/openai/retro/blob/master/docs/getting_started.rst#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip3 install gym-retro\n```\n\n----------------------------------------\n\nTITLE: C Function Naming Example\nDESCRIPTION: This example demonstrates the correct naming convention for functions not associated with structs. They should be in camelCase throughout.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: C\nCODE:\n```\nvoid functionName(int argument);\n```\n\n----------------------------------------\n\nTITLE: While Loop Spacing Example\nDESCRIPTION: This example shows the correct spacing for `while` loops, including a space between the `while` keyword and the parenthesis.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/CONTRIBUTING.md#_snippet_8\n\nLANGUAGE: C\nCODE:\n```\nwhile (condition) {\n\t\tblock;\n\t}\n```\n\n----------------------------------------\n\nTITLE: Binding Trampoline Classes in pybind11 (Old)\nDESCRIPTION: This code snippet shows the old way of binding trampoline classes in pybind11. It uses the alias function.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/docs/changelog.rst#_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\npy::class_<TrampolineClass>(\"MyClass\")\n  .alias<MyClass>()\n  ....\n```\n\n----------------------------------------\n\nTITLE: Run Brute reinforcement learning algorithm\nDESCRIPTION: This command runs the Brute reinforcement learning algorithm on a Gym Retro game. It requires the retro package to be installed.\nSOURCE: https://github.com/openai/retro/blob/master/docs/getting_started.rst#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m retro.examples.brute --game Airstriker-Genesis\n```\n\n----------------------------------------\n\nTITLE: Add Check Dependency\nDESCRIPTION: Adds `test_cmake_build` as a dependency to the `check` target.  This ensures that `test_cmake_build` is executed before the `check` target.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/pybind11/tests/test_cmake_build/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nadd_dependencies(check test_cmake_build)\n```\n\n----------------------------------------\n\nTITLE: Including CheckFunctionExists Module CMake\nDESCRIPTION: Includes the CheckFunctionExists CMake module, which is used later to check for the existence of the `mkstemp` function.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/libzip/lib/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nINCLUDE(CheckFunctionExists)\n```\n\n----------------------------------------\n\nTITLE: LZMA Rep Match Size Check\nDESCRIPTION: Checks if the uncompressed size is defined and equals 0; if it does, returns an error.\nSOURCE: https://github.com/openai/retro/blob/master/cores/genesis/core/cd_hw/libchdr/deps/lzma/DOC/lzma-specification.txt#_snippet_33\n\nLANGUAGE: C++\nCODE:\n```\nif (unpackSizeDefined && unpackSize == 0)\n  return LZMA_RES_ERROR;\n```\n\n----------------------------------------\n\nTITLE: Defining KJ Standard Headers\nDESCRIPTION: Defines the list of standard headers for the KJ library. These headers are installed to allow external usage.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/c++/src/kj/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(kj-std_headers\n  std/iostream.h\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Source Subdirectory\nDESCRIPTION: Adds the 'src' subdirectory to the build, which contains the source code for the Cap'n Proto library.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/c++/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(CapnProtoMacros)\nadd_subdirectory(src)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Module Path\nDESCRIPTION: Sets the CMake module path to include a custom directory containing CMake modules used by the project.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/c++/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_MODULE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/cmake\")\n```\n\n----------------------------------------\n\nTITLE: Added iNES header correction information\nDESCRIPTION: This snippet adds iNES header correction information for Armored Scrum Object and Alpha Mission.\nSOURCE: https://github.com/openai/retro/blob/master/cores/nes/changelog.txt#_snippet_46\n\n\n\n----------------------------------------\n\nTITLE: LZMA Simple Match Length Decoding\nDESCRIPTION: Decodes the zero-based length using LenDecoder and RangeDec with the position state.\nSOURCE: https://github.com/openai/retro/blob/master/cores/genesis/core/cd_hw/libchdr/deps/lzma/DOC/lzma-specification.txt#_snippet_28\n\nLANGUAGE: C++\nCODE:\n```\nlen = LenDecoder.Decode(&RangeDec, posState);\n```\n\n----------------------------------------\n\nTITLE: Improved mapper 90 emulation\nDESCRIPTION: This snippet improves mapper 90 emulation. The mapper requires low-level emulation for IRQs to work correctly.\nSOURCE: https://github.com/openai/retro/blob/master/cores/nes/changelog.txt#_snippet_33\n\n\n\n----------------------------------------\n\nTITLE: LZMA Simple Match Distance Decoding\nDESCRIPTION: Decodes the new rep0 value using DecodeDistance with the decoded length.\nSOURCE: https://github.com/openai/retro/blob/master/cores/genesis/core/cd_hw/libchdr/deps/lzma/DOC/lzma-specification.txt#_snippet_30\n\nLANGUAGE: C++\nCODE:\n```\nrep0 = DecodeDistance(len);\n```\n\n----------------------------------------\n\nTITLE: Defining KJ Async Sources\nDESCRIPTION: Defines the source files for the KJ asynchronous library.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/c++/src/kj/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\nset(kj-async_sources\n  async.c++\n  async-unix.c++\n  async-win32.c++\n  async-io-win32.c++\n  async-io.c++\n  async-io-unix.c++\n  time.c++\n)\n```\n\n----------------------------------------\n\nTITLE: Frameskip Code Redo\nDESCRIPTION: This snippet describes redoing the frameskip code. This relates to optimization of video emulation.\nSOURCE: https://github.com/openai/retro/blob/master/cores/nes/changelog.txt#_snippet_90\n\n\n\n----------------------------------------\n\nTITLE: Defining KJ Async Headers\nDESCRIPTION: Defines the header files for the KJ asynchronous library.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/c++/src/kj/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\nset(kj-async_headers\n  async-prelude.h\n  async.h\n  async-inl.h\n  async-unix.h\n  async-win32.h\n  async-io.h\n  time.h\n)\n```\n\n----------------------------------------\n\nTITLE: LZMA Rep Match 3 History Update\nDESCRIPTION: Updates the distance history table for Rep Match 3 by shifting values.\nSOURCE: https://github.com/openai/retro/blob/master/cores/genesis/core/cd_hw/libchdr/deps/lzma/DOC/lzma-specification.txt#_snippet_37\n\nLANGUAGE: C++\nCODE:\n```\nUInt32 dist = rep3;\nrep3 = rep2;\nrep2 = rep1;\nrep1 = rep0;\nrep0 = dist;\n```\n\n----------------------------------------\n\nTITLE: Defining KJ Test Compatibility Headers\nDESCRIPTION: Defines compatibility header files for the KJ test library, specifically for Google Test.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/c++/src/kj/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nset(kj-test-compat_headers\n  compat/gtest.h\n)\n```\n\n----------------------------------------\n\nTITLE: Cloning the mGBA source code from GitHub\nDESCRIPTION: This command clones the mGBA source code from the GitHub repository to the local machine.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/README_DE.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\ngit clone https://github.com/mgba-emu/mgba.git\n```\n\n----------------------------------------\n\nTITLE: Halting the CPU in C\nDESCRIPTION: This snippet describes the function `m68k_pulse_halt()` which emulates the HALT pin.\nSOURCE: https://github.com/openai/retro/blob/master/cores/genesis/core/m68k/readme.txt#_snippet_8\n\nLANGUAGE: C\nCODE:\n```\nm68k_pulse_halt();\n```\n\n----------------------------------------\n\nTITLE: LZMA Rep Match 2 History Update\nDESCRIPTION: Updates the distance history table for Rep Match 2 by shifting values.\nSOURCE: https://github.com/openai/retro/blob/master/cores/genesis/core/cd_hw/libchdr/deps/lzma/DOC/lzma-specification.txt#_snippet_36\n\nLANGUAGE: C++\nCODE:\n```\nUInt32 dist = rep2;\nrep2 = rep1;\nrep1 = rep0;\nrep0 = dist;\n```\n\n----------------------------------------\n\nTITLE: LZMA Rep Match Window Empty Check\nDESCRIPTION: Checks if the output window is empty, returns an error if so.\nSOURCE: https://github.com/openai/retro/blob/master/cores/genesis/core/cd_hw/libchdr/deps/lzma/DOC/lzma-specification.txt#_snippet_34\n\nLANGUAGE: C++\nCODE:\n```\nif (OutWindow.IsEmpty())\n  return LZMA_RES_ERROR;\n```\n\n----------------------------------------\n\nTITLE: Declaring CMake Project\nDESCRIPTION: Declares the CMake project name as \"googletest-distribution\". This is the top-level name for the build system.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/gtest/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nproject( googletest-distribution )\n```\n\n----------------------------------------\n\nTITLE: LZMA Rep Match 1 History Update\nDESCRIPTION: Updates the distance history table for Rep Match 1 by shifting values.\nSOURCE: https://github.com/openai/retro/blob/master/cores/genesis/core/cd_hw/libchdr/deps/lzma/DOC/lzma-specification.txt#_snippet_35\n\nLANGUAGE: C++\nCODE:\n```\nUInt32 dist = rep1;\nrep1 = rep0;\nrep0 = dist;\n```\n\n----------------------------------------\n\nTITLE: Cloning mGBA Source Code\nDESCRIPTION: This command clones the mGBA source code from the GitHub repository.\nSOURCE: https://github.com/openai/retro/blob/master/cores/gba/README.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\ngit clone https://github.com/mgba-emu/mgba.git\n```\n\n----------------------------------------\n\nTITLE: LZMA RepLenDecoder Decode\nDESCRIPTION: Decodes the zero-based length of a match using the RepLenDecoder.\nSOURCE: https://github.com/openai/retro/blob/master/cores/genesis/core/cd_hw/libchdr/deps/lzma/DOC/lzma-specification.txt#_snippet_39\n\nLANGUAGE: C++\nCODE:\n```\nlen = RepLenDecoder.Decode(&RangeDec, posState);\n```\n\n----------------------------------------\n\nTITLE: Defining KJ HTTP Sources\nDESCRIPTION: Defines the source files for the KJ HTTP compatibility library.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/c++/src/kj/CMakeLists.txt#_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\nset(kj-http_sources\n  compat/http.c++\n)\n```\n\n----------------------------------------\n\nTITLE: Defining KJ HTTP Headers\nDESCRIPTION: Defines the header files for the KJ HTTP compatibility library.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/c++/src/kj/CMakeLists.txt#_snippet_20\n\nLANGUAGE: cmake\nCODE:\n```\nset(kj-http_headers\n  compat/http.h\n)\n```\n\n----------------------------------------\n\nTITLE: LZMA Simple Match State Update\nDESCRIPTION: Updates the state using the UpdateState_Match function.\nSOURCE: https://github.com/openai/retro/blob/master/cores/genesis/core/cd_hw/libchdr/deps/lzma/DOC/lzma-specification.txt#_snippet_29\n\nLANGUAGE: C++\nCODE:\n```\nstate = UpdateState_Match(state);\n```\n\n----------------------------------------\n\nTITLE: LZMA Rep Match State Update\nDESCRIPTION: Updates the state using the UpdateState_Rep function.\nSOURCE: https://github.com/openai/retro/blob/master/cores/genesis/core/cd_hw/libchdr/deps/lzma/DOC/lzma-specification.txt#_snippet_40\n\nLANGUAGE: C++\nCODE:\n```\nstate = UpdateState_Rep(state);\n```\n\n----------------------------------------\n\nTITLE: Defining KJ Test Sources\nDESCRIPTION: Defines the source files for the KJ test library.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/c++/src/kj/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nset(kj-test_sources\n  test.c++\n)\n```\n\n----------------------------------------\n\nTITLE: Defining KJ Test Headers\nDESCRIPTION: Defines the header files for the KJ test library.\nSOURCE: https://github.com/openai/retro/blob/master/third-party/capnproto/c++/src/kj/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nset(kj-test_headers\n  test.h\n)\n```"
  }
]