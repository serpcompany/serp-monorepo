[
  {
    "owner": "nicbarker",
    "repo": "clay",
    "content": "TITLE: Initializing and Using Clay UI Library in C\nDESCRIPTION: This comprehensive example demonstrates how to initialize and use Clay, including error handling, text measurement, component creation, and a complete rendering loop. It shows the basic structure of a Clay application with a sidebar layout.\nSOURCE: https://github.com/nicbarker/clay/blob/main/README.md#2025-04-18_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n// Must be defined in one file, _before_ #include \"clay.h\"\n#define CLAY_IMPLEMENTATION\n#include \"../../clay.h\"\n\nconst Clay_Color COLOR_LIGHT = (Clay_Color) {224, 215, 210, 255};\nconst Clay_Color COLOR_RED = (Clay_Color) {168, 66, 28, 255};\nconst Clay_Color COLOR_ORANGE = (Clay_Color) {225, 138, 50, 255};\n\nvoid HandleClayErrors(Clay_ErrorData errorData) {\n    // See the Clay_ErrorData struct for more information\n    printf(\"%s\", errorData.errorText.chars);\n    switch(errorData.errorType) {\n        // etc\n    }\n}\n\n// Example measure text function\nstatic inline Clay_Dimensions MeasureText(Clay_StringSlice text, Clay_TextElementConfig *config, uintptr_t userData) {\n    // Clay_TextElementConfig contains members such as fontId, fontSize, letterSpacing etc\n    // Note: Clay_String->chars is not guaranteed to be null terminated\n    return (Clay_Dimensions) {\n            .width = text.length * config->fontSize, // <- this will only work for monospace fonts, see the renderers/ directory for more advanced text measurement\n            .height = config->fontSize\n    };\n}\n\n// Layout config is just a struct that can be declared statically, or inline\nClay_ElementDeclaration sidebarItemConfig = (Clay_ElementDeclaration) {\n    .layout = {\n        .sizing = { .width = CLAY_SIZING_GROW(0), .height = CLAY_SIZING_FIXED(50) }\n    },\n    .backgroundColor = COLOR_ORANGE\n};\n\n// Re-useable components are just normal functions\nvoid SidebarItemComponent() {\n    CLAY(sidebarItemConfig) {\n        // children go here...\n    }\n}\n\nint main() {\n    // Note: malloc is only used here as an example, any allocator that provides\n    // a pointer to addressable memory of at least totalMemorySize will work\n    uint64_t totalMemorySize = Clay_MinMemorySize();\n    Clay_Arena arena = Clay_CreateArenaWithCapacityAndMemory(totalMemorySize, malloc(totalMemorySize));\n\n    // Note: screenWidth and screenHeight will need to come from your environment, Clay doesn't handle window related tasks\n    Clay_Initialize(arena, (Clay_Dimensions) { screenWidth, screenHeight }, (Clay_ErrorHandler) { HandleClayErrors });\n\n    while(renderLoop()) { // Will be different for each renderer / environment\n        // Optional: Update internal layout dimensions to support resizing\n        Clay_SetLayoutDimensions((Clay_Dimensions) { screenWidth, screenHeight });\n        // Optional: Update internal pointer position for handling mouseover / click / touch events - needed for scrolling & debug tools\n        Clay_SetPointerState((Clay_Vector2) { mousePositionX, mousePositionY }, isMouseDown);\n        // Optional: Update internal pointer position for handling mouseover / click / touch events - needed for scrolling and debug tools\n        Clay_UpdateScrollContainers(true, (Clay_Vector2) { mouseWheelX, mouseWheelY }, deltaTime);\n\n        // All clay layouts are declared between Clay_BeginLayout and Clay_EndLayout\n        Clay_BeginLayout();\n\n        // An example of laying out a UI with a fixed width sidebar and flexible width main content\n        CLAY({ .id = CLAY_ID(\"OuterContainer\"), .layout = { .sizing = {CLAY_SIZING_GROW(0), CLAY_SIZING_GROW(0)}, .padding = CLAY_PADDING_ALL(16), .childGap = 16 }, .backgroundColor = {250,250,255,255} }) {\n            CLAY({\n                .id = CLAY_ID(\"SideBar\"),\n                .layout = { .layoutDirection = CLAY_TOP_TO_BOTTOM, .sizing = { .width = CLAY_SIZING_FIXED(300), .height = CLAY_SIZING_GROW(0) }, .padding = CLAY_PADDING_ALL(16), .childGap = 16 },\n                .backgroundColor = COLOR_LIGHT\n            }) {\n                CLAY({ .id = CLAY_ID(\"ProfilePictureOuter\"), .layout = { .sizing = { .width = CLAY_SIZING_GROW(0) }, .padding = CLAY_PADDING_ALL(16), .childGap = 16, .childAlignment = { .y = CLAY_ALIGN_Y_CENTER } }, .backgroundColor = COLOR_RED }) {\n                    CLAY({ .id = CLAY_ID(\"ProfilePicture\"), .layout = { .sizing = { .width = CLAY_SIZING_FIXED(60), .height = CLAY_SIZING_FIXED(60) }}, .image = { .imageData = &profilePicture, .sourceDimensions = {60, 60} } }) {}\n                    CLAY_TEXT(CLAY_STRING(\"Clay - UI Library\"), CLAY_TEXT_CONFIG({ .fontSize = 24, .textColor = {255, 255, 255, 255} }));\n                }\n\n                // Standard C code like loops etc work inside components\n                for (int i = 0; i < 5; i++) {\n                    SidebarItemComponent();\n                }\n\n                CLAY({ .id = CLAY_ID(\"MainContent\"), .layout = { .sizing = { .width = CLAY_SIZING_GROW(0), .height = CLAY_SIZING_GROW(0) } }, .backgroundColor = COLOR_LIGHT }) {}\n            }\n        }\n\n        // All clay layouts are declared between Clay_BeginLayout and Clay_EndLayout\n        Clay_RenderCommandArray renderCommands = Clay_EndLayout();\n\n        // More comprehensive rendering examples can be found in the renderers/ directory\n        for (int i = 0; i < renderCommands.length; i++) {\n            Clay_RenderCommand *renderCommand = &renderCommands.internalArray[i];\n\n            switch (renderCommand->commandType) {\n                case CLAY_RENDER_COMMAND_TYPE_RECTANGLE: {\n                    DrawRectangle( renderCommand->boundingBox, renderCommand->renderData.rectangle.backgroundColor);\n                }\n                // ... Implement handling of other command types\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Layout Construction in Odin\nDESCRIPTION: A comprehensive example of creating a UI layout in Odin with Clay, including defining colors, reusable components, and a structured layout with sidebar and main content areas.\nSOURCE: https://github.com/nicbarker/clay/blob/main/bindings/odin/README.md#2025-04-18_snippet_4\n\nLANGUAGE: Odin\nCODE:\n```\n// Define some colors.\nCOLOR_LIGHT :: clay.Color{224, 215, 210, 255}\nCOLOR_RED :: clay.Color{168, 66, 28, 255}\nCOLOR_ORANGE :: clay.Color{225, 138, 50, 255}\nCOLOR_BLACK :: clay.Color{0, 0, 0, 255}\n\n// Layout config is just a struct that can be declared statically, or inline\nsidebar_item_layout := clay.LayoutConfig {\n    sizing = {\n        width = clay.SizingGrow({}),\n        height = clay.SizingFixed(50)\n    },\n}\n\n// Re-useable components are just normal procs.\nsidebar_item_component :: proc(index: u32) {\n    if clay.UI()({\n        id = clay.ID(\"SidebarBlob\", index),\n        layout = sidebar_item_layout,\n        backgroundColor = COLOR_ORANGE,\n    }) {}\n}\n\n// An example function to create your layout tree\ncreate_layout :: proc() -> clay.ClayArray(clay.RenderCommand) {\n    // Begin constructing the layout.\n    clay.BeginLayout()\n\n    // An example of laying out a UI with a fixed-width sidebar and flexible-width main content\n    // NOTE: To create a scope for child components, the Odin API uses `if` with components that have children\n    if clay.UI()({\n        id = clay.ID(\"OuterContainer\"),\n        layout = {\n            sizing = { width = clay.SizingGrow({}), height = clay.SizingGrow({}) },\n            padding = { 16, 16, 16, 16 },\n            childGap = 16,\n        },\n        backgroundColor = { 250, 250, 255, 255 },\n    }) {\n        if clay.UI()({\n            id = clay.ID(\"SideBar\"),\n            layout = {\n                layoutDirection = .TopToBottom,\n                sizing = { width = clay.SizingFixed(300), height = clay.SizingGrow({}) },\n                padding = { 16, 16, 16, 16 },\n                childGap = 16,\n            },\n            backgroundColor = COLOR_LIGHT,\n        }) {\n            if clay.UI()({\n                id = clay.ID(\"ProfilePictureOuter\"),\n                layout = {\n                    sizing = { width = clay.SizingGrow({}) },\n                    padding = { 16, 16, 16, 16 },\n                    childGap = 16,\n                    childAlignment = { y = .Center },\n                },\n                backgroundColor = COLOR_RED,\n                cornerRadius = { 6, 6, 6, 6 },\n            }) {\n                if clay.UI()({\n                    id = clay.ID(\"ProfilePicture\"),\n                    layout = {\n                        sizing = { width = clay.SizingFixed(60), height = clay.SizingFixed(60) },\n                    },\n                    image = {\n                        imageData = &profile_picture,\n                        sourceDimensions = {\n                            width = 60,\n                            height = 60,\n                        },\n                    },\n                }) {}\n\n                clay.Text(\n                    \"Clay - UI Library\",\n                    clay.TextConfig({ textColor = COLOR_BLACK, fontSize = 16 }),\n                )\n            }\n\n            // Standard Odin code like loops, etc. work inside components.\n            // Here we render 5 sidebar items.\n            for i in u32(0)..<5 {\n                sidebar_item_component(i)\n            }\n        }\n\n        if clay.UI()({\n            id = clay.ID(\"MainContent\"),\n            layout = {\n                sizing = { width = clay.SizingGrow({}), height = clay.SizingGrow({}) },\n            },\n            backgroundColor = COLOR_LIGHT,\n        }) {}\n    }\n\n    // Returns a list of render commands\n    render_commands: clay.ClayArray(clay.RenderCommand) = clay.EndLayout()\n    return render_commands\n}\n```\n\n----------------------------------------\n\nTITLE: Building Basic UI Hierarchy in Clay\nDESCRIPTION: Demonstrates nested UI element construction using CLAY macro with padding and text elements. Shows basic parent-child relationship and styling configuration.\nSOURCE: https://github.com/nicbarker/clay/blob/main/README.md#2025-04-18_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n// Parent element with 8px of padding\nCLAY({ .layout = { .padding = CLAY_PADDING_ALL(8) } }) {\n    // Child element 1\n    CLAY_TEXT(CLAY_STRING(\"Hello World\"), CLAY_TEXT_CONFIG({ .fontSize = 16 }));\n    // Child element 2 with red background\n    CLAY({ .backgroundColor = COLOR_RED }) {\n        // etc\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced UI Component Construction with Logic\nDESCRIPTION: Shows how to create reusable components and use C control structures within Clay UI declarations. Demonstrates function-based components and conditional rendering.\nSOURCE: https://github.com/nicbarker/clay/blob/main/README.md#2025-04-18_snippet_2\n\nLANGUAGE: C\nCODE:\n```\nvoid ButtonComponent(Clay_String buttonText) {\n    // Red box button with 8px of padding\n    CLAY({ .layout = { .padding = CLAY_PADDING_ALL(8) }, .backgroundColor = COLOR_RED }) {\n        CLAY_TEXT(buttonText, textConfig);\n    }\n}\n\n// Parent element\nCLAY({ .layout = { .layoutDirection = CLAY_TOP_TO_BOTTOM } }) {\n    // Render a bunch of text elements\n    for (int i = 0; i < textArray.length; i++) {\n        CLAY_TEXT(textArray.elements[i], textConfig);\n    }\n    // Only render this element if we're on a mobile screen\n    if (isMobileScreen) {\n        CLAY(0) {\n            // etc\n        }\n    }\n    // Re-usable components\n    ButtonComponent(CLAY_STRING(\"Click me!\"));\n    ButtonComponent(CLAY_STRING(\"No, click me!\"));\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Clay_ElementDeclaration Struct in C\nDESCRIPTION: The Clay_ElementDeclaration struct is the primary configuration object for layout elements in the Clay framework. It includes fields for element ID, layout configuration, visual properties, and specialized element types.\nSOURCE: https://github.com/nicbarker/clay/blob/main/README.md#2025-04-18_snippet_15\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct {\n    Clay_ElementId id;\n    Clay_LayoutConfig layout;\n    Clay_Color backgroundColor;\n    Clay_CornerRadius cornerRadius;\n    Clay_ImageElementConfig image;\n    Clay_FloatingElementConfig floating;\n    Clay_CustomElementConfig custom;\n    Clay_ScrollElementConfig scroll;\n    Clay_BorderElementConfig border;\n    void *userData;\n} Clay_ElementDeclaration;\n```\n\n----------------------------------------\n\nTITLE: Defining Clay_LayoutConfig Struct in C\nDESCRIPTION: The Clay_LayoutConfig struct is used for configuring layout options that affect the position and size of an element, its parents, siblings, and children. It includes fields for layout direction, padding, child gap, alignment, and sizing.\nSOURCE: https://github.com/nicbarker/clay/blob/main/README.md#2025-04-18_snippet_17\n\nLANGUAGE: C\nCODE:\n```\n// CLAY({ .layout = { ...fields } }) supports these options\nClay_LayoutConfig {\n    Clay_LayoutDirection layoutDirection = CLAY_LEFT_TO_RIGHT (default) | CLAY_TOP_TO_BOTTOM;\n    Clay_Padding padding {\n        u16 left; u16 right; u16 top; u16 bottom; \n    };\n    uint16_t childGap;\n    Clay_ChildAlignment childAlignment {\n        .x = CLAY_ALIGN_X_LEFT (default) | CLAY_ALIGN_X_CENTER | CLAY_ALIGN_X_RIGHT;\n        .y = CLAY_ALIGN_Y_TOP (default) | CLAY_ALIGN_Y_CENTER | CLAY_ALIGN_Y_BOTTOM;\n    };\n    Clay_Sizing sizing { // Recommended to use the provided macros here - see #sizing for more in depth explanation\n        .width = CLAY_SIZING_FIT(float min, float max) (default) | CLAY_SIZING_GROW(float min, float max) | CLAY_SIZING_FIXED(float width) | CLAY_SIZING_PERCENT(float percent)\n        .height = CLAY_SIZING_FIT(float min, float max) (default) | CLAY_SIZING_GROW(float min, float max) | CLAY_SIZING_FIXED(float height) | CLAY_SIZING_PERCENT(float percent)\n    }; // See CLAY_SIZING_GROW() etc for more details\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Layouts with CLAY() in C\nDESCRIPTION: Demonstrates how to create nested layout elements with padding, background color, and scrolling using the CLAY() function.\nSOURCE: https://github.com/nicbarker/clay/blob/main/README.md#2025-04-18_snippet_10\n\nLANGUAGE: C\nCODE:\n```\nCLAY({ .id = CLAY_ID(\"Outer\"), .layout = { .padding = CLAY_PADDING_ALL(16) } }) {\n    CLAY({ .id = CLAY_ID(\"SideBar\"), .layout = { .layoutDirection = CLAY_TOP_TO_BOTTOM, .childGap = 16 } }) {\n        // Children laid out top to bottom with a 16 px gap between them\n    }\n    CLAY({\n        .layout = { .layoutDirection = CLAY_TOP_TO_BOTTOM, .childGap = 16 },\n        .backgroundColor = { 200, 200, 100, 255 },\n        .cornerRadius = CLAY_CORNER_RADIUS(10),\n        .scroll = { .vertical = true }\n    }) {\n        // child elements\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Button Interaction in Clay UI\nDESCRIPTION: Example showing how to implement button click handling using Clay_OnHover callback. Demonstrates pointer state checking and click event handling with custom button data.\nSOURCE: https://github.com/nicbarker/clay/blob/main/README.md#2025-04-18_snippet_9\n\nLANGUAGE: C\nCODE:\n```\nvoid HandleButtonInteraction(Clay_ElementId elementId, Clay_PointerData pointerData, intptr_t userData) {\n    ButtonData *buttonData = (ButtonData *)userData;\n    // Pointer state allows you to detect mouse down / hold / release\n    if (pointerData.state == CLAY_POINTER_DATA_PRESSED_THIS_FRAME) {\n        // Do some click handling\n        NavigateTo(buttonData->link);\n    }\n}\n\nButtonData linkButton = (ButtonData) { .link = \"https://github.com/nicbarker/clay\" };\n\n// HandleButtonInteraction will be called for each frame the mouse / pointer / touch is inside the button boundaries\nCLAY({ .layout = { .padding = CLAY_PADDING_ALL(8) } }) {\n    Clay_OnHover(HandleButtonInteraction, &buttonData);\n    CLAY_TEXT(CLAY_STRING(\"Button\"), &headerTextConfig);\n}\n```\n\n----------------------------------------\n\nTITLE: Pointer Interaction Handling\nDESCRIPTION: Shows implementation of mouse and touch interactions using hover detection and callback functions. Includes both inline and callback-based interaction handling.\nSOURCE: https://github.com/nicbarker/clay/blob/main/README.md#2025-04-18_snippet_4\n\nLANGUAGE: C\nCODE:\n```\nvoid HandleButtonInteraction(Clay_ElementId elementId, Clay_PointerData pointerInfo, intptr_t userData) {\n    ButtonData *buttonData = (ButtonData *)userData;\n    // Pointer state allows you to detect mouse down / hold / release\n    if (pointerInfo.state == CLAY_POINTER_DATA_PRESSED_THIS_FRAME) {\n        // Do some click handling\n        NavigateTo(buttonData->link);\n    }\n}\n\nButtonData linkButton = (ButtonData) { .link = \"https://github.com/nicbarker/clay\" };\n\n// HandleButtonInteraction will be called for each frame the mouse / pointer / touch is inside the button boundaries\nCLAY({ .layout = { .padding = CLAY_PADDING_ALL(8) } }) {\n    Clay_OnHover(HandleButtonInteraction, &linkButton);\n    CLAY_TEXT(CLAY_STRING(\"Button\"), &headerTextConfig);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Floating Elements in Clay UI Framework (C)\nDESCRIPTION: Shows how to create floating elements in Clay UI using the CLAY_FLOATING() macro. Floating elements don't affect their parent's layout and can be positioned over other elements, useful for tooltips and modals.\nSOURCE: https://github.com/nicbarker/clay/blob/main/README.md#2025-04-18_snippet_6\n\nLANGUAGE: C\nCODE:\n```\n// The two text elements will be laid out top to bottom, and the floating container\n// will be attached to \"Outer\"\nCLAY({ .id = CLAY_ID(\"Outer\"), .layout = { .layoutDirection = TOP_TO_BOTTOM } }) {\n    CLAY_TEXT(CLAY_ID(\"Button\"), text, &headerTextConfig);\n    CLAY({ .id = CLAY_ID(\"Tooltip\"), .floating = { .attachTo = CLAY_ATTACH_TO_PARENT } }) {}\n    CLAY_TEXT(CLAY_ID(\"Button\"), text, &headerTextConfig);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Elements in Clay UI Framework (C)\nDESCRIPTION: Demonstrates how to implement and render custom elements in Clay UI. This example shows the creation of custom 3D model and video elements, including memory management and rendering logic.\nSOURCE: https://github.com/nicbarker/clay/blob/main/README.md#2025-04-18_snippet_7\n\nLANGUAGE: C\nCODE:\n```\n#include \"clay.h\"\n\ntypedef enum {\n    CUSTOM_ELEMENT_TYPE_MODEL,\n    CUSTOM_ELEMENT_TYPE_VIDEO\n} CustomElementType;\n\n// A rough example of how you could handle laying out 3d models in your UI\ntypedef struct {\n    CustomElementType type;\n    union {\n        Model model;\n        Video video;\n        // ...\n    };\n} CustomElementData;\n\nModel myModel = Load3DModel(filePath);\nCustomElement modelElement = (CustomElement) { .type = CUSTOM_ELEMENT_TYPE_MODEL, .model = myModel }\n\ntypedef struct {\n    void* memory;\n    uintptr_t offset;\n} Arena;\n\n// During init\nArena frameArena = (Arena) { .memory = malloc(1024) };\n\n// ...\nCLAY(0) {\n    // Custom elements only take a single pointer, so we need to store the data somewhere\n    CustomElementData *modelData = (CustomElementData *)(frameArena.memory + frameArena.offset);\n    *modelData = (CustomElementData) { .type = CUSTOM_ELEMENT_TYPE_MODEL, .model = myModel };\n    frameArena.offset += sizeof(CustomElementData);\n    CLAY({ .custom = { .customData = modelData } }) {}\n}\n\n// Later during your rendering\nswitch (renderCommand->commandType) {\n    // ...\n    case CLAY_RENDER_COMMAND_TYPE_CUSTOM: {\n        // Your extended struct is passed through\n        CustomElementData *customElement = renderCommand->config.customElementConfig->customData;\n        if (!customElement) continue;\n        switch (customElement->type) {\n            case CUSTOM_ELEMENT_TYPE_MODEL: {\n                // Render your 3d model here\n                break;\n            }\n            case CUSTOM_ELEMENT_TYPE_VIDEO: {\n                // Render your video here\n                break;\n            }\n            // ...\n        }\n        break;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Text Elements with CLAY_TEXT() in C\nDESCRIPTION: Shows the structure of Clay_TextElementConfig and how to use it with CLAY_TEXT() to create and style text elements.\nSOURCE: https://github.com/nicbarker/clay/blob/main/README.md#2025-04-18_snippet_11\n\nLANGUAGE: C\nCODE:\n```\nClay_TextElementConfig {\n    Clay_Color textColor {\n        float r; float g; float b; float a;\n    };\n    uint16_t fontId;\n    uint16_t fontSize;\n    uint16_t letterSpacing;\n    uint16_t lineHeight;\n    Clay_TextElementConfigWrapMode wrapMode {\n        CLAY_TEXT_WRAP_WORDS (default),\n        CLAY_TEXT_WRAP_NEWLINES,\n        CLAY_TEXT_WRAP_NONE,\n    };\n    bool hashStringContents\n};\n```\n\n----------------------------------------\n\nTITLE: Clay Initialization in Odin\nDESCRIPTION: Demonstrates how to initialize Clay in Odin by calculating required memory, creating an arena, and initializing the library with dimensions and an error handler.\nSOURCE: https://github.com/nicbarker/clay/blob/main/bindings/odin/README.md#2025-04-18_snippet_1\n\nLANGUAGE: Odin\nCODE:\n```\nerror_handler :: proc \"c\" (errorData: clay.ErrorData) {\n    // Do something with the error data.\n}\n\nmin_memory_size: u32 = clay.MinMemorySize()\nmemory := make([^]u8, min_memory_size)\narena: clay.Arena = clay.CreateArenaWithCapacityAndMemory(min_memory_size, memory)\nclay.Initialize(arena, { width = 1080, height = 720 }, { handler = error_handler })\n```\n\n----------------------------------------\n\nTITLE: Implementing Vertical Scrolling in Clay UI in C\nDESCRIPTION: Example of creating a vertical scrolling container with fixed-height content. This demonstrates basic scroll container configuration.\nSOURCE: https://github.com/nicbarker/clay/blob/main/README.md#2025-04-18_snippet_23\n\nLANGUAGE: C\nCODE:\n```\nCLAY({ .scroll = { .vertical = true } }) {\n    // Create child content with a fixed height of 5000\n    CLAY({ .id = CLAY_ID(\"ScrollInner\"), .layout = { .sizing = { .height = CLAY_SIZING_FIXED(5000) } } }) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Floating UI Implementation Example\nDESCRIPTION: Comprehensive example showing floating tooltips in a horizontal options list with multiple configuration options.\nSOURCE: https://github.com/nicbarker/clay/blob/main/README.md#2025-04-18_snippet_29\n\nLANGUAGE: C\nCODE:\n```\n// Horizontal container with three option buttons\nCLAY({ .id = CLAY_ID(\"OptionsList\"), .layout = { childGap = 16 } }) {\n    CLAY({ .id = CLAY_IDI(\"Option\", 1), .layout = { padding = CLAY_PADDING_ALL(16)), .backgroundColor = COLOR_BLUE } }) {\n        CLAY_TEXT(CLAY_STRING(\"Option 1\"), CLAY_TEXT_CONFIG());\n    }\n    CLAY({ .id = CLAY_IDI(\"Option\", 2), .layout = { padding = CLAY_PADDING_ALL(16)), .backgroundColor = COLOR_BLUE } }) {\n        CLAY_TEXT(CLAY_STRING(\"Option 2\"), CLAY_TEXT_CONFIG());\n        // Floating tooltip will attach above the \"Option 2\" container and not affect widths or positions of other elements\n        CLAY({ .id = CLAY_ID(\"OptionTooltip\"), .floating = { .zIndex = 1, .attachment = { .element = CLAY_ATTACH_POINT_CENTER_BOTTOM, .parent = CLAY_ATTACH_POINT_CENTER_TOP } } }) {\n            CLAY_TEXT(CLAY_STRING(\"Most popular!\"), CLAY_TEXT_CONFIG());\n        }\n    }\n    CLAY({ .id = CLAY_IDI(\"Option\", 3), .layout = { padding = CLAY_PADDING_ALL(16)), .backgroundColor = COLOR_BLUE } }) {\n        CLAY_TEXT(CLAY_STRING(\"Option 3\"), CLAY_TEXT_CONFIG());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Layout for a Button Element in C\nDESCRIPTION: This example demonstrates how to configure the layout for a button element using the Clay_LayoutConfig struct. It sets the layout direction, sizing, padding, and child gap.\nSOURCE: https://github.com/nicbarker/clay/blob/main/README.md#2025-04-18_snippet_18\n\nLANGUAGE: C\nCODE:\n```\nCLAY({ .id = CLAY_ID(\"Button\"), .layout = { .layoutDirection = CLAY_TOP_TO_BOTTOM, .sizing = { .width = CLAY_SIZING_GROW(0) }, .padding = CLAY_PADDING_ALL(16, .childGap = 16) } }) {\n    // Children will be laid out vertically with 16px of padding around and between\n}\n```\n\n----------------------------------------\n\nTITLE: Using CLAY_ID() for Element Identification in C\nDESCRIPTION: Shows how to use CLAY_ID() to assign unique identifiers to UI elements and later reference them for interaction handling.\nSOURCE: https://github.com/nicbarker/clay/blob/main/README.md#2025-04-18_snippet_13\n\nLANGUAGE: C\nCODE:\n```\nCLAY({\n    .id = CLAY_ID(\"Button\"),\n    .layout = { .layoutDirection = CLAY_TOP_TO_BOTTOM, .sizing = { .width = CLAY_SIZING_GROW(0) }, .padding = CLAY_PADDING_ALL(16), .childGap = 16 }\n}) {\n    // ...children\n}\n\n// Later on outside of layout code\nbool buttonIsHovered = Clay_IsPointerOver(Clay_GetElementId(\"Button\"));\nif (buttonIsHovered && leftMouseButtonPressed) {\n    // ... do some click handling\n}\n```\n\n----------------------------------------\n\nTITLE: Element ID Implementation\nDESCRIPTION: Demonstrates usage of element IDs for tracking and debugging UI components, including dynamic ID generation in loops.\nSOURCE: https://github.com/nicbarker/clay/blob/main/README.md#2025-04-18_snippet_3\n\nLANGUAGE: C\nCODE:\n```\n// This is the equivalent of calling CLAY_ID(\"Item0\"), CLAY_ID(\"Item1\") etc\nfor (int index = 0; index < items.length; index++) {\n    CLAY({ .id = CLAY_IDI(\"Item\", index) }) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Using ImageData with Clay UI in C\nDESCRIPTION: Example of loading an image and using it with Clay UI. Demonstrates how to set up an image element with proper dimensions and reference the image data.\nSOURCE: https://github.com/nicbarker/clay/blob/main/README.md#2025-04-18_snippet_20\n\nLANGUAGE: C\nCODE:\n```\n// Load an image somewhere in your code\nYourImage profilePicture = LoadYourImage(\"profilePicture.png\");\n// Note that when rendering, .imageData will be void* type.\nCLAY({ .image = { .imageData = &profilePicture, .sourceDimensions = { 60, 60 } } }) {}\n```\n\n----------------------------------------\n\nTITLE: Running Multiple Clay Instances (C)\nDESCRIPTION: Shows how to run multiple instances of Clay UI in a single program. This includes initializing separate contexts, switching between them, and rendering layouts for each instance.\nSOURCE: https://github.com/nicbarker/clay/blob/main/README.md#2025-04-18_snippet_8\n\nLANGUAGE: C\nCODE:\n```\n// Define separate arenas for the instances.\nClay_Arena arena1, arena2;\n// ... allocate arenas\n\n// Initialize both instances, storing the context for each one.\nClay_Context* instance1 = Clay_Initialize(arena1, layoutDimensions, errorHandler);\nClay_Context* instance2 = Clay_Initialize(arena2, layoutDimensions, errorHandler);\n\n// In the program's render function, activate each instance before executing clay commands and macros.\nClay_SetCurrentContext(instance1);\nClay_BeginLayout();\n// ... declare layout for instance1\nClay_RenderCommandArray renderCommands1 = Clay_EndLayout();\nrender(renderCommands1);\n\n// Switch to the second instance\nClay_SetCurrentContext(instance2);\nClay_BeginLayout();\n// ... declare layout for instance2\nClay_RenderCommandArray renderCommands2 = Clay_EndLayout();\nrender(renderCommands2);\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Image Element Examples in C\nDESCRIPTION: Extended examples of different ways to configure image elements in Clay UI, including reusable configs, inline configs, and accessing image data during rendering.\nSOURCE: https://github.com/nicbarker/clay/blob/main/README.md#2025-04-18_snippet_21\n\nLANGUAGE: C\nCODE:\n```\n// Load an image somewhere in your code\nYourImage profilePicture = LoadYourImage(\"profilePicture.png\");\n// Declare a reusable image config\nClay_ImageElementConfig imageConfig = (Clay_ImageElementConfig) { .imageData = &profilePicture, .sourceDimensions = {60, 60} };\n// Declare an image element using a reusable config\nCLAY({ .image = imageConfig }) {}\n// Declare an image element using an inline config\nCLAY({ .image = { .imageData = &profilePicture, .sourceDimensions = {60, 60} } }) {}\n// Rendering example\nYourImage *imageToRender = renderCommand->elementConfig.imageElementConfig->imageData;\n```\n\n----------------------------------------\n\nTITLE: Border Element Configuration Examples in C\nDESCRIPTION: Examples of different border configurations including all-edge borders, single-edge borders, and borders between child elements with different color settings.\nSOURCE: https://github.com/nicbarker/clay/blob/main/README.md#2025-04-18_snippet_25\n\nLANGUAGE: C\nCODE:\n```\n// 300x300 container with a 1px red border around all the edges\nCLAY({\n    .id = CLAY_ID(\"OuterBorder\"),\n    .layout = { .sizing = { .width = CLAY_SIZING_FIXED(300), .height = CLAY_SIZING_FIXED(300) } },\n    .border = { .width = { 1, 1, 1, 1, 0 }, .color = COLOR_RED }\n}) {\n    // ...\n}\n\n// Container with a 3px yellow bottom border\nCLAY({\n    .id = CLAY_ID(\"OuterBorder\"),\n    .border = { .width = { .bottom = 3 }, .color = COLOR_YELLOW }\n}) {\n    // ...\n}\n\n// Container with a 5px curved border around the edges, and a 5px blue border between all children laid out top to bottom\nCLAY({\n    .id = CLAY_ID(\"OuterBorder\"),\n    .layout = { .layoutDirection = CLAY_TOP_TO_BOTTOM },\n    .border = { .width = { 5, 5, 5, 5, 5 }, .color = COLOR_BLUE }\n}) {\n    // Child\n    // -- 5px blue border will be here --\n    // Child\n    // -- 5px blue border will be here --\n    // Child\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Conditional Tooltips Example\nDESCRIPTION: Example showing how to implement multiple conditional tooltips using the traditional nested approach.\nSOURCE: https://github.com/nicbarker/clay/blob/main/README.md#2025-04-18_snippet_27\n\nLANGUAGE: C\nCODE:\n```\nCLAY({ .id = CLAY_IDI(\"SidebarButton\", 1) }) {\n    // .. some button contents\n    if (tooltip.attachedButtonIndex == 1) {\n        CLAY({ /* floating config... */ })\n    }\n}\nCLAY({ .id = CLAY_IDI(\"SidebarButton\", 2) }) {\n    // .. some button contents\n    if (tooltip.attachedButtonIndex == 2) {\n        CLAY({ /* floating config... */ })\n    }\n}\nCLAY({ .id = CLAY_IDI(\"SidebarButton\", 3) }) {\n    // .. some button contents\n    if (tooltip.attachedButtonIndex == 3) {\n        CLAY({ /* floating config... */ })\n    }\n}\nCLAY({ .id = CLAY_IDI(\"SidebarButton\", 4) }) {\n    // .. some button contents\n    if (tooltip.attachedButtonIndex == 4) {\n        CLAY({ /* floating config... */ })\n    }\n}\nCLAY({ .id = CLAY_IDI(\"SidebarButton\", 5) }) {\n    // .. some button contents\n    if (tooltip.attachedButtonIndex == 5) {\n        CLAY({ /* floating config... */ })\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom UI Elements with Clay\nDESCRIPTION: Demonstrates how to implement and use custom UI elements in Clay UI, including defining custom element types, creating data structures, and handling rendering within the Clay rendering pipeline.\nSOURCE: https://github.com/nicbarker/clay/blob/main/README.md#2025-04-18_snippet_31\n\nLANGUAGE: C\nCODE:\n```\n#include \"clay.h\"\n\ntypedef enum {\n    CUSTOM_ELEMENT_TYPE_MODEL,\n    CUSTOM_ELEMENT_TYPE_VIDEO\n} CustomElementType;\n\n// A rough example of how you could handle laying out 3d models in your UI\ntypedef struct {\n    CustomElementType type;\n    union {\n        Model model;\n        Video video;\n        // ...\n    };\n} CustomElementData;\n\nModel myModel = Load3DModel(filePath);\nCustomElement modelElement = (CustomElement) { .type = CUSTOM_ELEMENT_TYPE_MODEL, .model = myModel }\n\ntypedef struct {\n    void* memory;\n    uintptr_t offset;\n} Arena;\n\n// During init\nArena frameArena = (Arena) { .memory = malloc(1024) };\n\n// ...\nCLAY(0) {\n    // Custom elements only take a single pointer, so we need to store the data somewhere\n    CustomElementData *modelData = (CustomElementData *)(frameArena.memory + frameArena.offset);\n    *modelData = (CustomElementData) { .type = CUSTOM_ELEMENT_TYPE_MODEL, .model = myModel };\n    frameArena.offset += sizeof(CustomElementData);\n    CLAY({ .custom = { .customData = modelData } }) {}\n}\n\n// Later during your rendering\nswitch (renderCommand->commandType) {\n    // ...\n    case CLAY_RENDER_COMMAND_TYPE_CUSTOM: {\n        // Your extended struct is passed through\n        CustomElementData *customElement = renderCommand->config.customElementConfig->customData;\n        if (!customElement) continue;\n        switch (customElement->type) {\n            case CUSTOM_ELEMENT_TYPE_MODEL: {\n                // Render your 3d model here\n                break;\n            }\n            case CUSTOM_ELEMENT_TYPE_VIDEO: {\n                // Render your video here\n                break;\n            }\n            // ...\n        }\n        break;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Text Elements with CLAY_TEXT() in C\nDESCRIPTION: Demonstrates how to create a text element with custom font, size, and color using CLAY_TEXT() and CLAY_TEXT_CONFIG().\nSOURCE: https://github.com/nicbarker/clay/blob/main/README.md#2025-04-18_snippet_12\n\nLANGUAGE: C\nCODE:\n```\nconst uint32_t FONT_ID_LATO = 3;\n// ..\nCLAY_TEXT(CLAY_STRING(\"John Smith\"), CLAY_TEXT_CONFIG({ .fontId = FONT_ID_LATO, .fontSize = 24, .textColor = {255, 0, 0, 255} }));\n// Rendering example\nFont fontToUse = LoadedFonts[renderCommand->renderData.text->fontId];\n```\n\n----------------------------------------\n\nTITLE: Using CLAY_ID_LOCAL() for Reusable Components in C\nDESCRIPTION: Demonstrates how to use CLAY_ID_LOCAL() to create unique identifiers for elements within reusable components and loops.\nSOURCE: https://github.com/nicbarker/clay/blob/main/README.md#2025-04-18_snippet_14\n\nLANGUAGE: C\nCODE:\n```\nvoid RenderHeaderButton(ButtonData button) {\n    CLAY({\n        .id = CLAY_ID_LOCAL(\"HeaderButton\"),\n        .layout = { .layoutDirection = CLAY_TOP_TO_BOTTOM, .sizing = { .width = CLAY_SIZING_GROW(0) }, .padding = CLAY_PADDING_ALL(16), .childGap = 16 }\n    }) {\n        // ...children\n    }\n}\n\nfor (int i = 0; i < headerButtons.length; i++) {\n    RenderHeaderButton(headerButtons.items[i]);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Clay_ImageElementConfig Struct in C\nDESCRIPTION: Struct definition for Clay_ImageElementConfig that configures an element to render an image as its background. The struct contains fields for source dimensions and image data pointer.\nSOURCE: https://github.com/nicbarker/clay/blob/main/README.md#2025-04-18_snippet_19\n\nLANGUAGE: C\nCODE:\n```\nClay_ImageElementConfig {\n    Clay_Dimensions sourceDimensions {\n        float width; float height; \n    };\n    void * imageData;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Clay_ScrollElementConfig Struct in C\nDESCRIPTION: Struct definition for Clay_ScrollElementConfig that configures an element as a scrolling container. Contains boolean fields to enable horizontal and vertical scrolling.\nSOURCE: https://github.com/nicbarker/clay/blob/main/README.md#2025-04-18_snippet_22\n\nLANGUAGE: C\nCODE:\n```\nClay_ScrollElementConfig {\n    bool horizontal;\n    bool vertical;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Clay_BorderElementConfig Struct in C\nDESCRIPTION: Struct definition for Clay_BorderElementConfig that adds borders to elements. Contains fields for color and width configuration, including between-child borders.\nSOURCE: https://github.com/nicbarker/clay/blob/main/README.md#2025-04-18_snippet_24\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct Clay_BorderElementConfig\n{\n    Clay_Color color {\n        float r; float g; float b; float a;\n    };\n    Clay_BorderWidth width {\n        uint16_t left;\n        uint16_t right;\n        uint16_t top;\n        uint16_t bottom;\n        uint16_t betweenChildren;  \n    };\n} Clay_BorderElementConfig;\n```\n\n----------------------------------------\n\nTITLE: Defining Clay_FloatingElementConfig Struct in C\nDESCRIPTION: Structure definition for configuring floating UI elements, including offset, expansion, z-index, parent attachment, and pointer capture settings.\nSOURCE: https://github.com/nicbarker/clay/blob/main/README.md#2025-04-18_snippet_26\n\nLANGUAGE: C\nCODE:\n```\nClay_FloatingElementConfig {\n    Clay_Vector2 offset {\n        float x, float y\n    };\n    Clay_Dimensions expand {\n        float width, float height\n    };\n    uint32_t parentId;\n    int16_t zIndex;\n    Clay_FloatingAttachPoints attachPoint {\n        .element = CLAY_ATTACH_POINT_LEFT_TOP (default) | CLAY_ATTACH_POINT_LEFT_CENTER | CLAY_ATTACH_POINT_LEFT_BOTTOM | CLAY_ATTACH_POINT_CENTER_TOP | CLAY_ATTACH_POINT_CENTER_CENTER | CLAY_ATTACH_POINT_CENTER_BOTTOM | CLAY_ATTACH_POINT_RIGHT_TOP | CLAY_ATTACH_POINT_RIGHT_CENTER | CLAY_ATTACH_POINT_RIGHT_BOTTOM\n        .parent = CLAY_ATTACH_POINT_LEFT_TOP (default) | CLAY_ATTACH_POINT_LEFT_CENTER | CLAY_ATTACH_POINT_LEFT_BOTTOM | CLAY_ATTACH_POINT_CENTER_TOP | CLAY_ATTACH_POINT_CENTER_CENTER | CLAY_ATTACH_POINT_CENTER_BOTTOM | CLAY_ATTACH_POINT_RIGHT_TOP | CLAY_ATTACH_POINT_RIGHT_CENTER | CLAY_ATTACH_POINT_RIGHT_BOTTOM\n    };\n    Clay_FloatingAttachToElement attachTo {\n        CLAY_POINTER_CAPTURE_MODE_CAPTURE (default),\n        CLAY_POINTER_CAPTURE_MODE_PASSTHROUGH\n    };\n    Clay_FloatingAttachToElement attachTo {\n        CLAY_ATTACH_TO_NONE (default),\n        CLAY_ATTACH_TO_PARENT,\n        CLAY_ATTACH_TO_ELEMENT_WITH_ID,\n        CLAY_ATTACH_TO_ROOT,\n    };\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Tooltips with ParentId Approach\nDESCRIPTION: Improved implementation using parentId to attach tooltips, demonstrating a more maintainable approach.\nSOURCE: https://github.com/nicbarker/clay/blob/main/README.md#2025-04-18_snippet_28\n\nLANGUAGE: C\nCODE:\n```\nCLAY({ .id = CLAY_IDI(\"SidebarButton\", 1) }) {\n    // .. some button contents\n}\nCLAY({ .id = CLAY_IDI(\"SidebarButton\", 2) }) {\n    // .. some button contents\n}\nCLAY({ .id = CLAY_IDI(\"SidebarButton\", 3) }) {\n    // .. some button contents\n}\nCLAY({ .id = CLAY_IDI(\"SidebarButton\", 4) }) {\n    // .. some button contents\n}\nCLAY({ .id = CLAY_IDI(\"SidebarButton\", 5) }) {\n    // .. some button contents\n}\n\n// Any other point in the hierarchy\nCLAY({ .id = CLAY_ID(\"OptionTooltip\"), .floating = { .attachTo = CLAY_ATTACH_TO_ELEMENT_ID, .parentId = CLAY_IDI(\"SidebarButton\", tooltip.attachedButtonIndex).id }) {\n    // Tooltip contents...\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Element Macros in C and Odin\nDESCRIPTION: Shows the difference between C and Odin's approach to defining UI elements with Clay. In C, element macros are used, while Odin leverages if statements to create the scope for child elements.\nSOURCE: https://github.com/nicbarker/clay/blob/main/bindings/odin/README.md#2025-04-18_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n// C form of element macros\n// Define an element with 16px of x and y padding\nCLAY({ .id = CLAY_ID(\"Outer\"), .layout = { .padding = CLAY_PADDING_ALL(16) } }) {\n  // Child elements here\n}\n```\n\nLANGUAGE: Odin\nCODE:\n```\n// Odin form of element macros\nif clay.UI()({ id = clay.ID(\"Outer\"), layout = { padding = clay.PaddingAll(16) }}) {\n    // Child elements here\n}\n```\n\n----------------------------------------\n\nTITLE: Text Measurement Function in Odin\nDESCRIPTION: Shows how to implement and set up a text measurement function in Odin for Clay to properly measure and wrap text. The function receives text and configuration parameters and returns dimension information.\nSOURCE: https://github.com/nicbarker/clay/blob/main/bindings/odin/README.md#2025-04-18_snippet_2\n\nLANGUAGE: Odin\nCODE:\n```\n// Example measure text function\nmeasure_text :: proc \"c\" (\n    text: clay.StringSlice,\n    config: ^clay.TextElementConfig,\n    userData: rawptr,\n) -> clay.Dimensions {\n    // clay.TextElementConfig contains members such as fontId, fontSize, letterSpacing, etc..\n    // Note: clay.String->chars is not guaranteed to be null terminated\n    return {\n        width = f32(text.length * i32(config.fontSize)),\n        height = f32(config.fontSize),\n    }\n}\n\n\n// Tell clay how to measure text\nclay.SetMeasureTextFunction(measure_text, nil)\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Element Config Structure in Clay UI\nDESCRIPTION: Defines the Clay_CustomElementConfig structure which allows passing custom data to the renderer through a generic void pointer.\nSOURCE: https://github.com/nicbarker/clay/blob/main/README.md#2025-04-18_snippet_30\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct\n{\n    void * customData;\n} Clay_CustomElementConfig;\n```\n\n----------------------------------------\n\nTITLE: Defining Color Structure in Clay UI\nDESCRIPTION: Defines the Clay_Color structure which represents RGBA color values used throughout the Clay UI system, with channels conventionally in the 0-255 range.\nSOURCE: https://github.com/nicbarker/clay/blob/main/README.md#2025-04-18_snippet_32\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct {\n    float r, g, b, a;\n} Clay_Color;\n```\n\n----------------------------------------\n\nTITLE: Defining String Container in Clay UI\nDESCRIPTION: Defines the Clay_String structure which serves as a string container for internal string representation in Clay UI, tracking allocation type, length, and character data.\nSOURCE: https://github.com/nicbarker/clay/blob/main/README.md#2025-04-18_snippet_33\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct {\n    bool isStaticallyAllocated;\n    int32_t length;\n    const char *chars;\n} Clay_String;\n```\n\n----------------------------------------\n\nTITLE: Updating Scroll Containers in Clay UI Framework (C)\nDESCRIPTION: Demonstrates how to update scroll containers in Clay UI before beginning layout. This includes setting the pointer state and updating scroll containers with drag scrolling, scroll delta, and delta time.\nSOURCE: https://github.com/nicbarker/clay/blob/main/README.md#2025-04-18_snippet_5\n\nLANGUAGE: C\nCODE:\n```\nClay_Vector2 mousePosition = { x, y };\n// Reminder: Clay_SetPointerState must be called before Clay_UpdateScrollContainers otherwise it will have no effect\nClay_SetPointerState(mousePosition);\n// Clay_UpdateScrollContainers needs to be called before Clay_BeginLayout for the position to avoid a 1 frame delay\nClay_UpdateScrollContainers(\n    true, // Enable drag scrolling\n    scrollDelta, // Clay_Vector2 scrollwheel / trackpad scroll x and y delta this frame\n    float deltaTime, // Time since last frame in seconds as a float e.g. 8ms is 0.008f\n);\n// ...\n```\n\n----------------------------------------\n\nTITLE: Defining Element Identification in Clay UI\nDESCRIPTION: Defines the Clay_ElementId structure which stores element identification information including hash ID, offset, base ID, and string representation, used with CLAY_ID and CLAY_IDI functions.\nSOURCE: https://github.com/nicbarker/clay/blob/main/README.md#2025-04-18_snippet_34\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct {\n    uint32_t id;\n    uint32_t offset;\n    uint32_t baseId;\n    Clay_String stringId;\n} Clay_ElementId;\n```\n\n----------------------------------------\n\nTITLE: Defining Render Command Array in Clay UI\nDESCRIPTION: Defines the Clay_RenderCommandArray structure which stores calculated layout as an array of render commands, including capacity, length, and pointer to the internal array.\nSOURCE: https://github.com/nicbarker/clay/blob/main/README.md#2025-04-18_snippet_35\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct\n{\n\tuint32_t capacity;\n\tuint32_t length;\n\tClay_RenderCommand *internalArray;\n} Clay_RenderCommandArray;\n```\n\n----------------------------------------\n\nTITLE: Defining Render Command Structure in Clay UI\nDESCRIPTION: Defines the Clay_RenderCommand structure which represents individual rendering instructions, including bounding box, render data, user data, ID, z-index, and command type.\nSOURCE: https://github.com/nicbarker/clay/blob/main/README.md#2025-04-18_snippet_36\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct {\n    Clay_BoundingBox boundingBox;\n    Clay_RenderData renderData;\n    uintptr_t userData;\n    uint32_t id;\n    int16_t zIndex;\n    Clay_RenderCommandType commandType;\n} Clay_RenderCommand;\n```\n\n----------------------------------------\n\nTITLE: Defining Bounding Box Structure in Clay UI\nDESCRIPTION: Defines the Clay_BoundingBox structure which represents the rectangular area of UI elements with x, y coordinates for the top-left corner and width, height for dimensions.\nSOURCE: https://github.com/nicbarker/clay/blob/main/README.md#2025-04-18_snippet_37\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct {\n    float x, y, width, height;\n} Clay_BoundingBox;\n```\n\n----------------------------------------\n\nTITLE: Defining Clay_ScrollContainerData Structure in C\nDESCRIPTION: Defines a structure representing the current internal state of a scrolling element, including scroll position, dimensions, and configuration.\nSOURCE: https://github.com/nicbarker/clay/blob/main/README.md#2025-04-18_snippet_40\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct {\n    Clay_Vector2 *scrollPosition;\n    Clay_Dimensions scrollContainerDimensions;\n    Clay_Dimensions contentDimensions;\n    Clay_ScrollElementConfig config;\n    bool found;\n} Clay_ScrollContainerData;\n```\n\n----------------------------------------\n\nTITLE: Processing Render Commands in Odin\nDESCRIPTION: Demonstrates how to process the render commands returned by Clay's layout engine, showing a simple implementation for rendering rectangles with a custom DrawRectangle function.\nSOURCE: https://github.com/nicbarker/clay/blob/main/bindings/odin/README.md#2025-04-18_snippet_5\n\nLANGUAGE: Odin\nCODE:\n```\nrender_commands := create_layout()\n\nfor i in 0..<i32(render_commands.length) {\n    render_command := clay.RenderCommandArray_Get(render_commands, i)\n\n    switch render_command.commandType {\n    case .Rectangle:\n        DrawRectangle(render_command.boundingBox, render_command.config.rectangleElementConfig.color)\n    // ... Implement handling of other command types\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Clay_ElementData Structure in C\nDESCRIPTION: Defines a structure containing bounding box and other data for a specific UI element.\nSOURCE: https://github.com/nicbarker/clay/blob/main/README.md#2025-04-18_snippet_41\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct {\n    Clay_BoundingBox boundingBox;\n    bool found;\n} Clay_ElementData;\n```\n\n----------------------------------------\n\nTITLE: Defining Clay_PointerData Structure in C\nDESCRIPTION: Defines a structure representing pointer (mouse) data, including position and interaction state.\nSOURCE: https://github.com/nicbarker/clay/blob/main/README.md#2025-04-18_snippet_43\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct\n{\n    Clay_Vector2 position;\n    Clay_PointerDataInteractionState state;\n} Clay_PointerData;\n```\n\n----------------------------------------\n\nTITLE: Defining Clay_PointerDataInteractionState Enum in C\nDESCRIPTION: Defines an enumeration representing different states of pointer interaction.\nSOURCE: https://github.com/nicbarker/clay/blob/main/README.md#2025-04-18_snippet_44\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum\n{\n    CLAY_POINTER_DATA_PRESSED_THIS_FRAME,\n    CLAY_POINTER_DATA_PRESSED,\n    CLAY_POINTER_DATA_RELEASED_THIS_FRAME,\n    CLAY_POINTER_DATA_RELEASED,\n} Clay_PointerDataInteractionState;\n```\n\n----------------------------------------\n\nTITLE: Defining Clay_ErrorData Structure in C\nDESCRIPTION: Defines a structure containing error information, including error type, error text, and user data.\nSOURCE: https://github.com/nicbarker/clay/blob/main/README.md#2025-04-18_snippet_46\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct\n{\n    Clay_ErrorType errorType;\n    Clay_String errorText;\n    uintptr_t userData;\n} Clay_ErrorData;\n```\n\n----------------------------------------\n\nTITLE: Defining Clay_ErrorType Enum in C\nDESCRIPTION: Defines an enumeration of different error types that can occur in Clay.\nSOURCE: https://github.com/nicbarker/clay/blob/main/README.md#2025-04-18_snippet_47\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum {\n    CLAY_ERROR_TYPE_TEXT_MEASUREMENT_FUNCTION_NOT_PROVIDED,\n    CLAY_ERROR_TYPE_ARENA_CAPACITY_EXCEEDED,\n    CLAY_ERROR_TYPE_ELEMENTS_CAPACITY_EXCEEDED,\n    CLAY_ERROR_TYPE_TEXT_MEASUREMENT_CAPACITY_EXCEEDED,\n    CLAY_ERROR_TYPE_DUPLICATE_ID,\n    CLAY_ERROR_TYPE_FLOATING_CONTAINER_PARENT_NOT_FOUND,\n    CLAY_ERROR_TYPE_INTERNAL_ERROR,\n} Clay_ErrorType;\n```\n\n----------------------------------------\n\nTITLE: Creating Reusable Rectangle Config in C\nDESCRIPTION: This snippet demonstrates how to create a reusable rectangle configuration with a purple color and rounded corners, and how to use it in element declarations.\nSOURCE: https://github.com/nicbarker/clay/blob/main/README.md#2025-04-18_snippet_16\n\nLANGUAGE: C\nCODE:\n```\n// Declare a reusable rectangle config, with a purple color and 10px rounded corners\nClay_RectangleElementConfig rectangleConfig = (Clay_RectangleElementConfig) { .color = { 200, 200, 100, 255 }, .cornerRadius = CLAY_CORNER_RADIUS(10) };\n// Declare a rectangle element using a reusable config\nCLAY(rectangleConfig)) {}\n// Declare a retangle element using an inline config\nCLAY({ .color = { 200, 200, 100, 255 }, .cornerRadius = CLAY_CORNER_RADIUS(10) })) {\n    // child elements\n}\n// Declare a scrolling container with a colored background\nCLAY({ \n    .backgroundColor = { 200, 200, 100, 255 }, \n    .cornerRadius = CLAY_CORNER_RADIUS(10)\n    CLAY_SCROLL({ .vertical = true })\n) {\n    // child elements\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Raylib Project with CMake\nDESCRIPTION: Sets up a CMake project for a Raylib-based application, including dependency management, compiler settings, and resource handling. Fetches Raylib from GitHub and configures build options.\nSOURCE: https://github.com/nicbarker/clay/blob/main/examples/raylib-sidebar-scrolling-container/CMakeLists.txt#2025-04-18_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.27)\nproject(clay_examples_raylib_sidebar_scrolling_container C)\nset(CMAKE_C_STANDARD 99)\n\n# Adding Raylib\ninclude(FetchContent)\nset(FETCHCONTENT_QUIET FALSE)\nset(BUILD_EXAMPLES OFF CACHE BOOL \"\" FORCE) # don't build the supplied examples\nset(BUILD_GAMES    OFF CACHE BOOL \"\" FORCE) # don't build the supplied example games\n\nFetchContent_Declare(\n    raylib\n    GIT_REPOSITORY \"https://github.com/raysan5/raylib.git\"\n    GIT_TAG \"master\"\n    GIT_PROGRESS TRUE\n    GIT_SHALLOW TRUE\n)\n\nFetchContent_MakeAvailable(raylib)\n\nadd_executable(clay_examples_raylib_sidebar_scrolling_container main.c multi-compilation-unit.c)\n\ntarget_compile_options(clay_examples_raylib_sidebar_scrolling_container PUBLIC)\ntarget_include_directories(clay_examples_raylib_sidebar_scrolling_container PUBLIC .)\n\ntarget_link_libraries(clay_examples_raylib_sidebar_scrolling_container PUBLIC raylib)\nif(MSVC)\n  set(CMAKE_C_FLAGS_DEBUG \"${CMAKE_C_FLAGS_DEBUG}\")\nelse()\n  set(CMAKE_C_FLAGS_DEBUG \"${CMAKE_C_FLAGS_DEBUG}\")\n  set(CMAKE_C_FLAGS_RELEASE \"${CMAKE_C_FLAGS_RELEASE}\")\nendif()\n\nadd_custom_command(\n        TARGET clay_examples_raylib_sidebar_scrolling_container POST_BUILD\n        COMMAND ${CMAKE_COMMAND} -E copy_directory\n        ${CMAKE_CURRENT_SOURCE_DIR}/resources\n        ${CMAKE_CURRENT_BINARY_DIR}/resources)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for Sokol Video Demo\nDESCRIPTION: Sets up the CMake project with version requirements and project name. Includes platform-specific threading configuration for Linux systems.\nSOURCE: https://github.com/nicbarker/clay/blob/main/examples/sokol-video-demo/CMakeLists.txt#2025-04-18_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.27)\nproject(sokol_video_demo C)\n\ninclude(FetchContent)\nset(FETCHCONTENT_QUIET FALSE)\n\n# Linux -pthread shenanigans\nif (CMAKE_SYSTEM_NAME STREQUAL Linux)\n    set(THREADS_PREFER_PTHREAD_FLAG ON)\n    find_package(Threads REQUIRED)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Platform-Specific Sokol Library Build\nDESCRIPTION: Sets up the Sokol library with platform-specific configurations. For macOS, it compiles as Objective-C and links to Metal frameworks. For Linux, it configures OpenGL and X11 dependencies.\nSOURCE: https://github.com/nicbarker/clay/blob/main/examples/sokol-video-demo/CMakeLists.txt#2025-04-18_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(CMAKE_SYSTEM_NAME STREQUAL Darwin)\n    add_library(sokol STATIC sokol.c ${sokol_HEADERS})\n    target_compile_options(sokol PRIVATE -x objective-c)\n    target_link_libraries(sokol PUBLIC\n        \"-framework QuartzCore\"\n        \"-framework Cocoa\"\n        \"-framework MetalKit\"\n        \"-framework Metal\")\nelse()\n    add_library(sokol STATIC sokol.c ${sokol_HEADERS})\n    if (CMAKE_SYSTEM_NAME STREQUAL Linux)\n        target_compile_definitions(sokol PRIVATE SOKOL_GLCORE=1)\n        target_link_libraries(sokol INTERFACE X11 Xi Xcursor GL dl m)\n        target_link_libraries(sokol PUBLIC Threads::Threads)\n    endif()\nendif()\ntarget_include_directories(sokol INTERFACE ${sokol_SOURCE_DIR} ${fontstash_SOURCE_DIR}/src\n                                 PRIVATE ${sokol_SOURCE_DIR} ${fontstash_SOURCE_DIR}/src)\n```\n\n----------------------------------------\n\nTITLE: Creating Platform-Specific Executable Target\nDESCRIPTION: Creates the main executable target with platform-specific configurations. For Windows, it's built as a WIN32 application and set as the startup project in Visual Studio.\nSOURCE: https://github.com/nicbarker/clay/blob/main/examples/sokol-video-demo/CMakeLists.txt#2025-04-18_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(CMAKE_SYSTEM_NAME STREQUAL Windows)\n    add_executable(sokol_video_demo WIN32 main.c)\n    set_property(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT sokol_video_demo)\nelse()\n    add_executable(sokol_video_demo main.c)\nendif()\ntarget_link_libraries(sokol_video_demo PUBLIC sokol)\n```\n\n----------------------------------------\n\nTITLE: Configuring SDL3 Simple Demo Project with CMake\nDESCRIPTION: This CMake configuration sets up a C99 project that utilizes SDL3, SDL_ttf, and SDL_image libraries. It uses FetchContent to download the libraries from GitHub, configures them for the build, and sets up the executable with proper linking. Additionally, it copies resource files to the build directory.\nSOURCE: https://github.com/nicbarker/clay/blob/main/examples/SDL3-simple-demo/CMakeLists.txt#2025-04-18_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.27)\n\n# Project setup\nproject(clay_examples_sdl3_simple_demo C)\nset(CMAKE_C_STANDARD 99)\n\nset(CMAKE_C_FLAGS_DEBUG \"${CMAKE_C_FLAGS_DEBUG}\")\nset(CMAKE_C_FLAGS_RELEASE \"${CMAKE_C_FLAGS_RELEASE}\")\n\ninclude(FetchContent)\nset(FETCHCONTENT_QUIET FALSE)\n\n# Download SDL3\nFetchContent_Declare(\n\tSDL\n\tGIT_REPOSITORY https://github.com/libsdl-org/SDL.git\n\tGIT_TAG release-3.2.4\n\tGIT_SHALLOW TRUE\n\tGIT_PROGRESS TRUE\n)\nmessage(STATUS \"Using SDL via FetchContent\")\nFetchContent_MakeAvailable(SDL)\nset_property(DIRECTORY \"${sdl_SOURCE_DIR}\" PROPERTY EXCLUDE_FROM_ALL TRUE)\n\n# Download SDL_ttf\nFetchContent_Declare(\n\tSDL_ttf\n\tGIT_REPOSITORY https://github.com/libsdl-org/SDL_ttf.git\n\tGIT_TAG main # Slightly risky to use main branch, but it's the only one available\n\tGIT_SHALLOW TRUE\n\tGIT_PROGRESS TRUE\n)\nmessage(STATUS \"Using SDL_ttf via FetchContent\")\nFetchContent_MakeAvailable(SDL_ttf)\nset_property(DIRECTORY \"${sdl_ttf_SOURCE_DIR}\" PROPERTY EXCLUDE_FROM_ALL TRUE)\n\n# Download SDL_image\nFetchContent_Declare(\n\tSDL_image\n\tGIT_REPOSITORY \"https://github.com/libsdl-org/SDL_image.git\"\n\tGIT_TAG release-3.2.0 # Slightly risky to use main branch, but it's the only one available\n\tGIT_SHALLOW TRUE\n\tGIT_PROGRESS TRUE\n)\nmessage(STATUS \"Using SDL_image via FetchContent\")\nFetchContent_MakeAvailable(SDL_image)\nset_property(DIRECTORY \"${SDL_image_SOURCE_DIR}\" PROPERTY EXCLUDE_FROM_ALL TRUE)\n\n# Example executable\nadd_executable(${PROJECT_NAME} main.c)\ntarget_link_libraries(${PROJECT_NAME} PRIVATE\n\tSDL3::SDL3\n\tSDL3_ttf::SDL3_ttf\n\tSDL3_image::SDL3_image\n)\n\nadd_custom_command(\n\tTARGET ${PROJECT_NAME} POST_BUILD\n\tCOMMAND ${CMAKE_COMMAND} -E copy_directory\n\t\t${CMAKE_CURRENT_SOURCE_DIR}/resources\n\t\t${CMAKE_CURRENT_BINARY_DIR}/resources\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Clay Project with CMake\nDESCRIPTION: CMake configuration file for the Clay project that sets up build options and conditionally includes various example projects based on user preferences and platform compatibility. It defines multiple options to control which examples are built and uses conditional logic to add the appropriate subdirectories.\nSOURCE: https://github.com/nicbarker/clay/blob/main/CMakeLists.txt#2025-04-18_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.27)\nproject(clay)\n\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/cmake\")\n\noption(CLAY_INCLUDE_ALL_EXAMPLES \"Build all examples\" ON)\noption(CLAY_INCLUDE_DEMOS \"Build video demo and website\" OFF)\noption(CLAY_INCLUDE_CPP_EXAMPLE \"Build C++ example\" OFF)\noption(CLAY_INCLUDE_RAYLIB_EXAMPLES \"Build raylib examples\" OFF)\noption(CLAY_INCLUDE_SDL2_EXAMPLES \"Build SDL 2 examples\" OFF)\noption(CLAY_INCLUDE_SDL3_EXAMPLES \"Build SDL 3 examples\" OFF)\noption(CLAY_INCLUDE_WIN32_GDI_EXAMPLES \"Build Win32 GDI examples\" OFF)\noption(CLAY_INCLUDE_SOKOL_EXAMPLES \"Build Sokol examples\" OFF)\n\nmessage(STATUS \"CLAY_INCLUDE_DEMOS: ${CLAY_INCLUDE_DEMOS}\")\n\nif(APPLE)\n  enable_language(OBJC)\nendif()\n\nif(CLAY_INCLUDE_ALL_EXAMPLES OR CLAY_INCLUDE_CPP_EXAMPLE)\n  add_subdirectory(\"examples/cpp-project-example\")\nendif()\nif(CLAY_INCLUDE_ALL_EXAMPLES OR CLAY_INCLUDE_DEMOS)\n  if(NOT MSVC)\n    add_subdirectory(\"examples/clay-official-website\")\n  endif()\n  add_subdirectory(\"examples/introducing-clay-video-demo\")\nendif ()\n\nif(CLAY_INCLUDE_ALL_EXAMPLES OR CLAY_INCLUDE_RAYLIB_EXAMPLES)\n  add_subdirectory(\"examples/raylib-multi-context\")\n  add_subdirectory(\"examples/raylib-sidebar-scrolling-container\")\nendif ()\nif(CLAY_INCLUDE_ALL_EXAMPLES OR CLAY_INCLUDE_SDL2_EXAMPLES)\n  add_subdirectory(\"examples/SDL2-video-demo\")\nendif ()\nif(NOT MSVC AND (CLAY_INCLUDE_ALL_EXAMPLES OR CLAY_INCLUDE_SDL3_EXAMPLES))\n    add_subdirectory(\"examples/SDL3-simple-demo\")\nendif()\nif(CLAY_INCLUDE_ALL_EXAMPLES OR CLAY_INCLUDE_SOKOL_EXAMPLES)\n  add_subdirectory(\"examples/sokol-video-demo\")\n  add_subdirectory(\"examples/sokol-corner-radius\")\nendif()\n\nif(WIN32)   # Build only for Win or Wine\n    if(CLAY_INCLUDE_ALL_EXAMPLES OR CLAY_INCLUDE_WIN32_GDI_EXAMPLES)\n        add_subdirectory(\"examples/win32_gdi\")\n    endif()\nendif()\n\n#  add_subdirectory(\"examples/cairo-pdf-rendering\") Some issue with github actions populating cairo, disable for now\n\n#add_library(${PROJECT_NAME} INTERFACE)\n#target_include_directories(${PROJECT_NAME} INTERFACE .)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project with Raylib for Clay Multi-Context Example\nDESCRIPTION: This CMake configuration sets up a C99 project that fetches and links against Raylib. It disables building Raylib's examples and games, configures compilation options, and adds a post-build step to copy resources to the build directory.\nSOURCE: https://github.com/nicbarker/clay/blob/main/examples/raylib-multi-context/CMakeLists.txt#2025-04-18_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.27)\nproject(clay_examples_raylib_multi_context C)\nset(CMAKE_C_STANDARD 99)\n\n# Adding Raylib\ninclude(FetchContent)\nset(FETCHCONTENT_QUIET FALSE)\nset(BUILD_EXAMPLES OFF CACHE BOOL \"\" FORCE) # don't build the supplied examples\nset(BUILD_GAMES    OFF CACHE BOOL \"\" FORCE) # don't build the supplied example games\n\nFetchContent_Declare(\n    raylib\n    GIT_REPOSITORY \"https://github.com/raysan5/raylib.git\"\n    GIT_TAG \"master\"\n    GIT_PROGRESS TRUE\n    GIT_SHALLOW TRUE\n)\n\nFetchContent_MakeAvailable(raylib)\n\nadd_executable(clay_examples_raylib_multi_context main.c)\n\ntarget_compile_options(clay_examples_raylib_multi_context PUBLIC)\ntarget_include_directories(clay_examples_raylib_multi_context PUBLIC .)\n\ntarget_link_libraries(clay_examples_raylib_multi_context PUBLIC raylib)\n\nset(CMAKE_C_FLAGS_DEBUG \"${CMAKE_C_FLAGS_DEBUG}\")\nset(CMAKE_C_FLAGS_RELEASE \"${CMAKE_C_FLAGS_RELEASE}\")\n\nadd_custom_command(\n        TARGET clay_examples_raylib_multi_context POST_BUILD\n        COMMAND ${CMAKE_COMMAND} -E copy_directory\n        ${CMAKE_CURRENT_SOURCE_DIR}/resources\n        ${CMAKE_CURRENT_BINARY_DIR}/resources)\n```\n\n----------------------------------------\n\nTITLE: Configuring Clay Video Demo Project with CMake\nDESCRIPTION: Sets up a CMake project for a Clay video demo, including Raylib as a dependency. It configures compiler options, links libraries, and sets up post-build commands for resource copying.\nSOURCE: https://github.com/nicbarker/clay/blob/main/examples/introducing-clay-video-demo/CMakeLists.txt#2025-04-18_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.27)\nproject(clay_examples_introducing_clay_video_demo C)\nset(CMAKE_C_STANDARD 99)\n\n# Adding Raylib\ninclude(FetchContent)\nset(FETCHCONTENT_QUIET FALSE)\nset(BUILD_EXAMPLES OFF CACHE BOOL \"\" FORCE) # don't build the supplied examples\nset(BUILD_GAMES    OFF CACHE BOOL \"\" FORCE) # don't build the supplied example games\n\nFetchContent_Declare(\n    raylib\n    GIT_REPOSITORY \"https://github.com/raysan5/raylib.git\"\n    GIT_TAG \"master\"\n    GIT_PROGRESS TRUE\n    GIT_SHALLOW TRUE\n)\n\nFetchContent_MakeAvailable(raylib)\n\nadd_executable(clay_examples_introducing_clay_video_demo main.c)\n\ntarget_compile_options(clay_examples_introducing_clay_video_demo PUBLIC)\ntarget_include_directories(clay_examples_introducing_clay_video_demo PUBLIC .)\n\ntarget_link_libraries(clay_examples_introducing_clay_video_demo PUBLIC raylib)\n\nif(MSVC)\n  set(CMAKE_C_FLAGS_DEBUG \"/D CLAY_DEBUG\")\nelse()\n  set(CMAKE_C_FLAGS_DEBUG \"${CMAKE_C_FLAGS_DEBUG}\")\n  set(CMAKE_C_FLAGS_RELEASE \"${CMAKE_C_FLAGS_RELEASE}\")\nendif()\n\nadd_custom_command(\n        TARGET clay_examples_introducing_clay_video_demo POST_BUILD\n        COMMAND ${CMAKE_COMMAND} -E copy_directory\n        ${CMAKE_CURRENT_SOURCE_DIR}/resources\n        ${CMAKE_CURRENT_BINARY_DIR}/resources)\n```\n\n----------------------------------------\n\nTITLE: Configuring Clay Official Website Project with CMake\nDESCRIPTION: This CMake configuration sets up a C99 project for the Clay official website. It defines the project name, sets the C standard version to C99, creates an executable target from main.c, and configures compiler options and include directories.\nSOURCE: https://github.com/nicbarker/clay/blob/main/examples/clay-official-website/CMakeLists.txt#2025-04-18_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.27)\nproject(clay_official_website C)\n\nset(CMAKE_C_STANDARD 99)\n\nadd_executable(clay_official_website main.c)\n\ntarget_compile_options(clay_official_website PUBLIC)\ntarget_include_directories(clay_official_website PUBLIC .)\n```\n\n----------------------------------------\n\nTITLE: Configuring Win32 GDI CMake Project\nDESCRIPTION: Sets up a CMake project for a Windows GDI application, including compiler settings, executable configuration, and resource file copying. Specifies C99 standard and includes a post-build step to copy resource files to the build directory.\nSOURCE: https://github.com/nicbarker/clay/blob/main/examples/win32_gdi/CMakeLists.txt#2025-04-18_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.27)\nproject(win32_gdi C)\n\nset(CMAKE_C_STANDARD 99)\n\nadd_executable(win32_gdi WIN32 main.c)\n\ntarget_compile_options(win32_gdi PUBLIC)\ntarget_include_directories(win32_gdi PUBLIC .)\n\nadd_custom_command(\n        TARGET win32_gdi POST_BUILD\n        COMMAND ${CMAKE_COMMAND} -E copy_directory\n        ${CMAKE_CURRENT_SOURCE_DIR}/resources\n        ${CMAKE_CURRENT_BINARY_DIR}/resources)\n```\n\n----------------------------------------\n\nTITLE: Configuring a Platform-Specific CMake Build for Sokol Corner Radius Project\nDESCRIPTION: Sets up a CMake build configuration for a C project called 'sokol_corner_radius'. It handles Windows-specific configurations (WIN32 flag and VS startup project) while providing a standard configuration for other platforms. The executable is linked against the Sokol library in both cases.\nSOURCE: https://github.com/nicbarker/clay/blob/main/examples/sokol-corner-radius/CMakeLists.txt#2025-04-18_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.27)\nproject(sokol_corner_radius C)\n\nif(CMAKE_SYSTEM_NAME STREQUAL Windows)\n    add_executable(sokol_corner_radius WIN32 main.c)\n    set_property(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT sokol_corner_radius)\nelse()\n    add_executable(sokol_corner_radius main.c)\nendif()\ntarget_link_libraries(sokol_corner_radius PUBLIC sokol)\n```\n\n----------------------------------------\n\nTITLE: Defining Render Data Structures for Different UI Elements in Clay\nDESCRIPTION: Defines specific render data structures for text, rectangle, image, custom, and border UI elements, each containing the necessary configuration properties for rendering.\nSOURCE: https://github.com/nicbarker/clay/blob/main/README.md#2025-04-18_snippet_39\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct {\n    Clay_StringSlice stringContents;\n    Clay_Color textColor;\n    uint16_t fontId;\n    uint16_t fontSize;\n    uint16_t letterSpacing;\n    uint16_t lineHeight;\n} Clay_TextRenderData;\n\ntypedef struct {\n    Clay_Color backgroundColor;\n    Clay_CornerRadius cornerRadius;\n} Clay_RectangleRenderData;\n\ntypedef struct {\n    Clay_Color backgroundColor;\n    Clay_CornerRadius cornerRadius;\n    Clay_Dimensions sourceDimensions;\n    void* imageData;\n} Clay_ImageRenderData;\n\ntypedef struct {\n    Clay_Color backgroundColor;\n    Clay_CornerRadius cornerRadius;\n    void* customData;\n} Clay_CustomRenderData;\n\ntypedef struct {\n    Clay_Color color;\n    Clay_CornerRadius cornerRadius;\n    Clay_BorderWidth width;\n} Clay_BorderRenderData;\n\ntypedef union {\n    Clay_RectangleRenderData rectangle;\n    Clay_TextRenderData text;\n    Clay_ImageRenderData image;\n    Clay_CustomRenderData custom;\n    Clay_BorderRenderData border;\n} Clay_RenderData;\n```\n\n----------------------------------------\n\nTITLE: Defining Render Data Union in Clay UI\nDESCRIPTION: Defines the Clay_RenderData union which stores type-specific rendering information for different UI elements like rectangles, text, images, custom elements, and borders.\nSOURCE: https://github.com/nicbarker/clay/blob/main/README.md#2025-04-18_snippet_38\n\nLANGUAGE: C\nCODE:\n```\ntypedef union {\n    Clay_RectangleRenderData rectangle;\n    Clay_TextRenderData text;\n    Clay_ImageRenderData image;\n    Clay_CustomRenderData custom;\n    Clay_BorderRenderData border;\n} Clay_RenderData;\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for Clay C++ Project Example\nDESCRIPTION: Complete CMake configuration that sets up a C++ project with C++20 standard support, AddressSanitizer for non-MSVC builds, and proper include directory configuration. The file creates a single executable from main.cpp and applies compiler-specific flag adjustments.\nSOURCE: https://github.com/nicbarker/clay/blob/main/examples/cpp-project-example/CMakeLists.txt#2025-04-18_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.27)\nproject(clay_examples_cpp_project_example CXX)\n\nset(CMAKE_CXX_STANDARD 20)\nif(NOT MSVC)\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fsanitize=address -fno-omit-frame-pointer -g\")\nendif()\n\nadd_executable(clay_examples_cpp_project_example main.cpp)\n\ntarget_include_directories(clay_examples_cpp_project_example PUBLIC .)\n\nif(NOT MSVC)\n  set(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_C_FLAGS_DEBUG}\")\n  set(CMAKE_CXX_FLAGS_RELEASE \"${CMAKE_C_FLAGS_RELEASE}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring SDL2 Video Demo Project with CMake\nDESCRIPTION: Complete CMake configuration for building an SDL2-based video demo. Sets up project dependencies through FetchContent, configures build settings, and establishes linking with SDL2 libraries. Includes post-build step for resource copying.\nSOURCE: https://github.com/nicbarker/clay/blob/main/examples/SDL2-video-demo/CMakeLists.txt#2025-04-18_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.27)\nproject(SDL2_video_demo C)\nset(CMAKE_C_STANDARD 99)\n\ninclude(FetchContent)\nset(FETCHCONTENT_QUIET FALSE)\n\nFetchContent_Declare(\n    SDL2\n    GIT_REPOSITORY \"https://github.com/libsdl-org/SDL.git\"\n    GIT_TAG \"release-2.30.10\"\n    GIT_PROGRESS TRUE\n    GIT_SHALLOW TRUE\n)\nFetchContent_MakeAvailable(SDL2)\n\nFetchContent_Declare(\n    SDL2_ttf\n    GIT_REPOSITORY \"https://github.com/libsdl-org/SDL_ttf.git\"\n    GIT_TAG \"release-2.22.0\"\n    GIT_PROGRESS TRUE\n    GIT_SHALLOW TRUE\n)\nFetchContent_MakeAvailable(SDL2_ttf)\n\nFetchContent_Declare(\n    SDL2_image\n    GIT_REPOSITORY \"https://github.com/libsdl-org/SDL_image.git\"\n    GIT_TAG \"release-2.8.4\"\n    GIT_PROGRESS TRUE\n    GIT_SHALLOW TRUE\n)\nFetchContent_MakeAvailable(SDL2_image)\n\nadd_executable(SDL2_video_demo main.c)\n\ntarget_compile_options(SDL2_video_demo PUBLIC)\ntarget_include_directories(SDL2_video_demo PUBLIC .)\n\ntarget_link_libraries(SDL2_video_demo PUBLIC\n    SDL2::SDL2main\n    SDL2::SDL2-static\n    SDL2_ttf::SDL2_ttf-static\n    SDL2_image::SDL2_image-static\n)\n\nif(MSVC)\n  set(CMAKE_C_FLAGS_DEBUG \"${CMAKE_C_FLAGS_DEBUG}\")\nelse()\n  set(CMAKE_C_FLAGS_DEBUG \"${CMAKE_C_FLAGS_DEBUG}\")\n  set(CMAKE_C_FLAGS_RELEASE \"${CMAKE_C_FLAGS_RELEASE}\")\nendif()\n\nadd_custom_command(\n        TARGET SDL2_video_demo POST_BUILD\n        COMMAND ${CMAKE_COMMAND} -E copy_directory\n        ${CMAKE_CURRENT_SOURCE_DIR}/resources\n        ${CMAKE_CURRENT_BINARY_DIR}/resources)\n```\n\n----------------------------------------\n\nTITLE: Setting Pointer State in Odin\nDESCRIPTION: Demonstrates how to update Clay's internal pointer state to enable mouse interactions, passing the mouse position and button state.\nSOURCE: https://github.com/nicbarker/clay/blob/main/bindings/odin/README.md#2025-04-18_snippet_3\n\nLANGUAGE: Odin\nCODE:\n```\n// Update internal pointer position for handling mouseover / click / touch events\nclay.SetPointerState(\n    clay.Vector2 { mouse_pos_x, mouse_pos_y },\n    is_mouse_down,\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for Cairo PDF Rendering in Clay\nDESCRIPTION: This CMake script sets up a Cairo PDF rendering example for the Clay project. It configures the build environment, finds the Cairo dependency, sets include paths, links libraries, and copies resource files to the build directory after compilation.\nSOURCE: https://github.com/nicbarker/clay/blob/main/examples/cairo-pdf-rendering/CMakeLists.txt#2025-04-18_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.27)\nproject(clay_examples_cairo_pdf_rendering C)\nset(CMAKE_C_STANDARD 99)\n\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/../../cmake\")\n\nadd_executable(clay_examples_cairo_pdf_rendering main.c)\n\nfind_package(Cairo REQUIRED)\n\ntarget_compile_options(clay_examples_cairo_pdf_rendering PUBLIC)\ntarget_include_directories(clay_examples_cairo_pdf_rendering PUBLIC . ${CAIRO_INCLUDE_DIRS})\n\ntarget_link_libraries(clay_examples_cairo_pdf_rendering PUBLIC Cairo::Cairo)\nset(CMAKE_C_FLAGS_DEBUG \"${CMAKE_C_FLAGS_DEBUG}\")\nset(CMAKE_C_FLAGS_RELEASE \"${CMAKE_C_FLAGS_RELEASE}\")\n\nadd_custom_command(\n        TARGET clay_examples_cairo_pdf_rendering POST_BUILD\n        COMMAND ${CMAKE_COMMAND} -E copy_directory\n        ${CMAKE_CURRENT_SOURCE_DIR}/resources\n        ${CMAKE_CURRENT_BINARY_DIR}/resources)\n```\n\n----------------------------------------\n\nTITLE: Defining Clay_ErrorHandler Structure in C\nDESCRIPTION: Defines a structure for handling errors in Clay, including an error handler function and user data.\nSOURCE: https://github.com/nicbarker/clay/blob/main/README.md#2025-04-18_snippet_45\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct\n{\n    void (*errorHandlerFunction)(Clay_ErrorData errorText);\n    uintptr_t userData;\n} Clay_ErrorHandler;\n```\n\n----------------------------------------\n\nTITLE: Defining Clay_Dimensions Structure in C\nDESCRIPTION: Defines a simple structure representing width and height dimensions.\nSOURCE: https://github.com/nicbarker/clay/blob/main/README.md#2025-04-18_snippet_42\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct {\n    float width, height;\n} Clay_Dimensions;\n```\n\n----------------------------------------\n\nTITLE: Fetching Sokol Library Dependency\nDESCRIPTION: Declares and makes available the Sokol graphics library, which is the main framework for the demo. It fetches from the master branch and configures the header files to be included.\nSOURCE: https://github.com/nicbarker/clay/blob/main/examples/sokol-video-demo/CMakeLists.txt#2025-04-18_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nFetchContent_Declare(\n    sokol\n    GIT_REPOSITORY \"https://github.com/floooh/sokol.git\"\n    GIT_TAG \"master\"\n    GIT_PROGRESS TRUE\n    GIT_SHALLOW TRUE\n)\nFetchContent_MakeAvailable(sokol)\nset(sokol_HEADERS\n    ${sokol_SOURCE_DIR}/sokol_app.h\n    ${sokol_SOURCE_DIR}/sokol_gfx.h\n    ${sokol_SOURCE_DIR}/sokol_glue.h\n    ${sokol_SOURCE_DIR}/sokol_log.h\n    ${sokol_SOURCE_DIR}/util/sokol_gl.h\n    ${fontstash_SOURCE_DIR}/src/fontstash.h\n    ${sokol_SOURCE_DIR}/util/sokol_fontstash.h)\n```\n\n----------------------------------------\n\nTITLE: Fetching Fontstash Library Dependency\nDESCRIPTION: Declares and makes available the Fontstash library, which is used for text rendering. It specifies the repository, tag, and fetch options.\nSOURCE: https://github.com/nicbarker/clay/blob/main/examples/sokol-video-demo/CMakeLists.txt#2025-04-18_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nFetchContent_Declare(\n    fontstash\n    GIT_REPOSITORY \"https://github.com/memononen/fontstash.git\"\n    GIT_TAG \"b5ddc9741061343740d85d636d782ed3e07cf7be\"\n    GIT_PROGRESS TRUE\n    GIT_SHALLOW TRUE\n)\nFetchContent_MakeAvailable(fontstash)\n```\n\n----------------------------------------\n\nTITLE: Configuring Post-Build Resource Copying\nDESCRIPTION: Sets up a post-build command to copy resources directory to the build output directory, ensuring assets are available to the application at runtime.\nSOURCE: https://github.com/nicbarker/clay/blob/main/examples/sokol-video-demo/CMakeLists.txt#2025-04-18_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_command(\n        TARGET sokol_video_demo POST_BUILD\n        COMMAND ${CMAKE_COMMAND} -E copy_directory\n        ${CMAKE_CURRENT_SOURCE_DIR}/resources\n        ${CMAKE_CURRENT_BINARY_DIR}/resources)\n```"
  }
]