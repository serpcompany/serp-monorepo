[
  {
    "owner": "spatie",
    "repo": "laravel-data",
    "content": "TITLE: Create Data Object from Array - PHP\nDESCRIPTION: This snippet illustrates creating a `SongData` object from an associative array using the static `from` method. The array keys correspond to the data object's properties. This method provides a convenient way to populate data objects from external data sources.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/creating-a-data-object.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nSongData::from(['title' => 'Never gonna give you up', 'artist' => 'Rick Astley']);\n```\n\n----------------------------------------\n\nTITLE: Manually Validating Data with Laravel Data\nDESCRIPTION: This snippet demonstrates how to manually validate an array of data against a Laravel Data object's inferred or defined rules. If validation fails, a `ValidationException` is thrown. This is useful when validation doesn't happen automatically, such as validating data from a source other than a request.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/validation/introduction.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nSongData::validate(\n    ['title' => 'Never gonna give you up']\n); // ValidationException will be thrown because 'artist' is missing\n```\n\n----------------------------------------\n\nTITLE: Define Data Object Extending Dto - PHP\nDESCRIPTION: Defines a simple data object `SongData` that extends the `Dto` class instead of the `Data` class. The `Dto` class represents a simpler DTO with less built-in functionality.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/creating-a-data-object.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nclass SongData extends Dto\n{\n    public function __construct(\n        public string $title,\n        public string $artist,\n    ) {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Validating and Creating Data Object in Laravel Data\nDESCRIPTION: This snippet shows how to validate data and, if successful, automatically create an instance of the Laravel Data object. It's a convenient way to combine validation and object creation in one step when validation isn't handled automatically. If validation passes, an instance of the data object is returned; otherwise, a `ValidationException` is thrown.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/validation/introduction.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nSongData::validateAndCreate(\n    ['title' => 'Never gonna give you up', 'artist' => 'Rick Astley']\n); // returns a SongData object\n```\n\n----------------------------------------\n\nTITLE: Defining Authorization Logic in Laravel Data Class\nDESCRIPTION: Similar to Laravel form requests, this snippet shows how to define authorization logic for a Laravel Data object by implementing a static `authorize()` method. This method should return `true` if the current user is authorized to perform the action related to this data object, or `false` otherwise. If it returns `false`, an `AuthorizationException` is thrown.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/validation/introduction.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nclass SongData extends Data\n{\n    public function __construct(\n        public string $title,\n        public string $artist,\n    ) {\n    }\n\n    public static function authorize(): bool\n    {\n        return Auth::user()->name === 'Ruben';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Create Data Object from Eloquent Model - PHP\nDESCRIPTION: This snippet demonstrates how to create a `SongData` object from an Eloquent model instance using the `from` method.  The package automatically extracts the relevant properties from the model.  Assumes a `Song` model with accessible properties that match the `SongData` object properties.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/creating-a-data-object.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nSongData::from(Song::firstOrFail($id));\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Data Object with `laravel-data` in PHP\nDESCRIPTION: This snippet demonstrates how to create a simple data object class (`SongData`) by extending the `Spatie\\LaravelData\\Data` base class. It utilizes PHP 8's constructor property promotion to define public properties (`title` and `artist`) directly in the constructor signature. Extending `Data` unlocks features like automatic transformations, validation, and TypeScript generation for this object.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/introduction.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Spatie\\LaravelData\\Data;\n\nclass SongData extends Data\n{\n    public function __construct(\n        public string $title,\n        public string $artist,\n    ) {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting a Single Data Object to Array in PHP\nDESCRIPTION: Demonstrates how to transform a single Laravel Data object into an array using the toArray() method. This converts a Song model instance to a SongData object and then to an array representation.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/from-data-to-array.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nSongData::from(Song::first())->toArray();\n```\n\n----------------------------------------\n\nTITLE: Defining Data Class with Nested Data Objects in Laravel Data\nDESCRIPTION: This snippet defines a Laravel Data class (`SingleData`) that contains properties which are themselves other Laravel Data objects (`ArtistData`, `SongData`). The package automatically handles the validation of these nested data objects when validating the parent object, applying their respective rules.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/validation/introduction.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nclass SingleData{\n    public function __construct(\n        public ArtistData $artist,\n        public SongData $song,\n    ) {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Data Class for Auto Rule Inferring in Laravel Data\nDESCRIPTION: This code snippet defines a simple Laravel Data class (`ArtistData`) with public properties. The package automatically infers validation rules based on the PHP type hints (`string`, `int`, `?string`). Non-nullable primitive types default to `required`, while nullable types default to `nullable` plus the type.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/validation/introduction.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nclass ArtistData extends Data{\n    public function __construct(\n        public string $name,\n        public int $age,\n        public ?string $genre,\n    ) {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Data Object from a Form Request in a Laravel Controller (PHP)\nDESCRIPTION: Shows how to create a `SongData` object manually within a controller method using the static `SongData::from($request)` method, passing in a validated `SongRequest` instance. This approach allows leveraging Laravel's Form Requests for authorization and initial validation before creating the data object.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/request-to-data-object.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nclass UpdateSongController\n{\n    public function __invoke(\n        Song $model,\n        SongRequest $request\n    ){\n        $model->update(SongData::from($request)->all());\n        \n        return redirect()->back();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Manual Validation Rules in Laravel Data (PHP)\nDESCRIPTION: This snippet illustrates how to manually define property validation rules in a Laravel Data object by implementing a static rules method. It replaces automatic rule inference, requiring explicit rule arrays for each property. Properties like title and artist are made required strings, and developers must ensure proper array syntax for rule definitions. No external dependencies are required, and the method returns the expected rule arrays for integration with Laravel's validation system.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/validation/manual-rules.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass SongData extends Data\n{\n    public function __construct(\n        public string $title,\n        public string $artist,\n    ) {\n    }\n    \n    public static function rules(): array\n    {\n        return [\n            'title' => ['required', 'string'],\n            'artist' => ['required', 'string'],\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting and Using a Data Object in a Laravel Controller (PHP)\nDESCRIPTION: Demonstrates injecting the `SongData` object directly into a controller method (`__invoke`) signature. The `laravel-data` package automatically resolves, populates, and validates the `$data` object from the current HTTP request before the method body executes. The example then uses `$data->all()` to update an Eloquent model.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/request-to-data-object.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass UpdateSongController\n{\n    public function __invoke(\n        Song $model,\n        SongData $data\n    ){\n        $model->update($data->all());\n        \n        return redirect()->back();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Instantiating Nested Spatie Data From Array (PHP)\nDESCRIPTION: Using the magic 'from' method, you can create an instance of AlbumData directly from a nested array structure. The Data package automatically handles hydrating the nested ArtistData object from its corresponding array representation.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/nesting.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nAlbumData::from([\n    'title' => 'Never gonna give you up',\n    'artist' => [\n        'name' => 'Rick Astley',\n        'age' => 22\n    ]\n]);\n```\n\n----------------------------------------\n\nTITLE: Instantiating Nested Spatie Data Objects (PHP)\nDESCRIPTION: This snippet shows how to create an instance of the nested AlbumData object by passing scalar values for the title and an instance of the nested ArtistData object for the artist property. This is the standard object-oriented approach to creating data objects.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/nesting.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnew AlbumData(\n    'Never gonna give you up',\n    new ArtistData('Rick Astley', 22)\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a DataCollection with Data Objects - Laravel Data - PHP\nDESCRIPTION: Shows how to collect Eloquent model results and convert them into a DataCollection pre-defined by the package. This enables additional methods like include and extra collection features. Requires Spatie\\LaravelData\\DataCollection and SongData.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/collections.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Spatie\\LaravelData\\DataCollection;\n\nSongData::collect(Song::all(), DataCollection::class);\n\n```\n\n----------------------------------------\n\nTITLE: Resolving Data Object from Laravel Container with Validation\nDESCRIPTION: This snippet demonstrates resolving a Laravel Data object from the application container. When a data object is resolved this way, the package automatically attempts to fill its properties from the current request's data. If the request data does not pass the data object's validation rules (inferred, manual, or attribute-based), a `ValidationException` is thrown.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/validation/introduction.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\napp(SongData::class);\n```\n\n----------------------------------------\n\nTITLE: Using Optional Creation - PHP\nDESCRIPTION: Demonstrates the use of the `optional` method to handle null values. Returns `null` if the input is null.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/creating-a-data-object.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nSongData::optional(null); // returns null\n```\n\n----------------------------------------\n\nTITLE: Returning a Data Object in Controller (PHP)\nDESCRIPTION: Demonstrates how a Laravel Data object is returned from a controller method, which automatically converts it to a JSON response. It uses the `SongData::from()` method to create the data object from a Song model instance. No specific dependencies are needed beyond Laravel Data and a Song model.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/from-data-to-resource.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass SongController\n{\n    public function show(Song $model)\n    {\n        return SongData::from($model);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Data When Default Values Are Present in Laravel Data\nDESCRIPTION: This snippet shows calling the `validate` method on a `SongData` class which has default values defined for its properties. When validating an array that is missing a property with a default value (like 'artist' in this case), the 'required' rule is not applied to that missing property, as it would be automatically filled by the default.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/validation/introduction.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nSongData::validate(\n    ['title' => 'Giving Up On Love']\n);\n```\n\n----------------------------------------\n\nTITLE: Resolving a Data Object from the Laravel Container (PHP)\nDESCRIPTION: Illustrates resolving a `SongData` object directly from the Laravel service container using the `app()` helper function. When resolved this way, the package automatically attempts to populate the object's properties from the current request data and performs validation. A validation exception is thrown if incompatible data is found.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/request-to-data-object.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\napp(SongData::class);\n```\n\n----------------------------------------\n\nTITLE: Generated Validation Rules for Nested Data Objects in Laravel Data\nDESCRIPTION: This snippet shows the validation rules generated by Laravel Data for a class (`SingleData`) containing nested data objects (`ArtistData`, `SongData`). Rules for nested objects are prefixed with the property name (e.g., 'artist.name'), and the nested property itself gets an 'array' rule.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/validation/introduction.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n[\n    'artist' => ['array'],\n    'artist.name' => ['required', 'string'],\n    'artist.age' => ['required', 'integer'],\n    'artist.genre' => ['nullable', 'string'],\n    'song' => ['array'],\n    'song.title' => ['required', 'string'],\n    'song.artist' => ['required', 'string'],\n]\n```\n\n----------------------------------------\n\nTITLE: Conditional Property Methods with Boolean Conditions in PHP\nDESCRIPTION: Shows how to conditionally include, exclude, only include, or except properties from a Laravel Data object using a boolean condition as the second parameter.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/lazy-properties.md#_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nAlbumData::from(Album::first())->includeWhen('songs', auth()->user()->isAdmin);\nAlbumData::from(Album::first())->excludeWhen('songs', auth()->user()->isAdmin);\nAlbumData::from(Album::first())->onlyWhen('songs', auth()->user()->isAdmin);\nAlbumData::from(Album::first())->except('songs', auth()->user()->isAdmin);\n```\n\n----------------------------------------\n\nTITLE: Creating Data Objects with Default Values\nDESCRIPTION: Examples of instantiating Data objects using default values or overriding them with custom values through the from() method.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/defaults.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nSongData::from();\nSongData::from(['title' => 'Giving Up On Love', 'date' => CarbonImmutable::create(1988, 4, 15)]);\n```\n\n----------------------------------------\n\nTITLE: Defining a Data Object with Optional Properties in PHP\nDESCRIPTION: Shows how to define a SongData class with a required title property and an optional artist property using the Optional type from Spatie's Laravel Data package.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/optional-properties.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Spatie\\LaravelData\\Optional;\n\nclass SongData extends Data\n{\n    public function __construct(\n        public string $title,\n        public string|Optional $artist,\n    ) {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generated Validation Rules for Nested Data Collection in Laravel Data\nDESCRIPTION: This snippet shows the validation rules generated by Laravel Data for a class (`AlbumData`) containing a collection of nested data objects (`SongData`). Rules for items within the collection are prefixed with the property name followed by `.*.` (e.g., 'songs.*.title'), and the collection property itself gets 'required' and 'array' rules.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/validation/introduction.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n[\n    'title' => ['required', 'string'],\n    'songs' => ['required', 'array'],\n    'songs.*.title' => ['required', 'string'],\n    'songs.*.artist' => ['required', 'string'],\n]\n```\n\n----------------------------------------\n\nTITLE: Merging Manual and Automatic Validation Rules with Attribute in Laravel Data (PHP)\nDESCRIPTION: This code utilizes the MergeValidationRules attribute to combine manually defined rules with those automatically inferred by Laravel Data. The rules method returns custom constraints, such as max:20, while the attribute ensures required and string rules are also merged in. The resulting output rule set includes both automatic and manual components. Dependencies include the MergeValidationRules attribute applied as a PHP 8+ attribute on the data class.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/validation/manual-rules.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n#[MergeValidationRules]\nclass SongData extends Data\n{\n    public function __construct(\n        public string $title,\n        public string $artist,\n    ) {\n    }\n    \n    public static function rules(): array\n    {\n        return [\n            'title' => ['max:20'],\n            'artist' => ['max:20'],\n        ];\n    }\n}\n\n// The generated rules will look like this\n[\n    'title' => [required, 'string', 'max:20'],\n    'artist' => [required, 'string', 'max:20'],\n]\n```\n\n----------------------------------------\n\nTITLE: Referencing Peer Field for Conditional Rule PHP\nDESCRIPTION: Illustrates how to reference another property within the same data object using its name string. The `RequiredIf('title', 'Never Gonna Give You Up')` attribute makes the 'artist' field required only if the 'title' field has the specified value.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/validation/using-validation-attributes.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nclass SongData extends Data\n{\n    public function __construct(\n        public string $title,\n        #[RequiredIf('title', 'Never Gonna Give You Up')]\n        public string $artist,\n    ) {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Collecting Arrays into Data Objects - Laravel Data - PHP\nDESCRIPTION: Demonstrates collecting an array of associative arrays into an array of SongData objects using the collect method. The collect method internally uses the from method of the data class. Expects an array as input and returns an array of corresponding data objects. Requires the Spatie Laravel Data package and a SongData data object class.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/collections.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nSongData::collect([\n    ['title' => 'Never Gonna Give You Up', 'artist' => 'Rick Astley'],\n    ['title' => 'Giving Up on Love', 'artist' => 'Rick Astley'],\n]); // returns an array of SongData objects\n\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript Definitions via Artisan Command\nDESCRIPTION: Describes executing the Laravel artisan command 'typescript:transform' to generate the TypeScript files containing the type definitions from annotated PHP data classes. This command consolidates all marked classes into usable TypeScript types for frontend or API schema purposes.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/typescript.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nphp artisan typescript:transform\n```\n\n----------------------------------------\n\nTITLE: Define Data Object with Properties - PHP\nDESCRIPTION: This code defines a `SongData` object with public properties instead of using a constructor.  This alternative approach is perfectly valid. The properties are `title` and `artist`, both declared as strings.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/creating-a-data-object.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nclass SongData extends Data\n{\n    public string $title;\n    public string $artist;\n}\n```\n\n----------------------------------------\n\nTITLE: Generated Validation Rules for Nested Data Structures in Laravel Data (PHP)\nDESCRIPTION: This snippet illustrates the structure of validation rules produced for a nested data object setup. It demonstrates generated rule arrays for both top-level and nested SongData instances within AlbumData. Rules cover string, required, nullable constraints, array presence, and contain NestedRules for handling child data objects. This aids in understanding output rule formats for complex validated structures.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/validation/manual-rules.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n[\n    'title' => ['string', 'required'],\n    'songs' => ['present', 'array'],\n    'songs.*.title' => ['string', 'required'],\n    'songs.*.artist' => ['string', 'nullable'],\n    'songs.*' => [NestedRules(...)],\n]\n```\n\n----------------------------------------\n\nTITLE: Overriding the with() Method to Add Custom Endpoints in Laravel Data Resource (PHP)\nDESCRIPTION: This code defines a SongData class that extends Data and overrides the with() method to append a structured endpoints property to each transformed array. The with() method returns an array of URLs for various routes (show, edit, delete), resolved by the action() helper, parameterized by the object's id. Requires the SongsController class and Laravel's action() function. Inputs include a Song model instance; output is an augmented array representation of the data object with nested endpoints.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/appending-properties.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass SongData extends Data\n{\n    public function __construct(\n        public int $id,\n        public string $title,\n        public string $artist\n    ) {\n    }\n\n    public static function fromModel(Song $song): self\n    {\n        return new self(\n            $song->id,\n            $song->title,\n            $song->artist\n        );\n    }\n    \n    public function with()\n    {\n        return [\n            'endpoints' => [\n                'show' => action([SongsController::class, 'show'], $this->id),\n                'edit' => action([SongsController::class, 'edit'], $this->id),\n                'delete' => action([SongsController::class, 'delete'], $this->id),\n            ]\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Appending Additional Static Properties with spatie/laravel-data in PHP\nDESCRIPTION: This snippet demonstrates how to append extra static properties to a data object after transformation using the additional method provided by the spatie/laravel-data package. Dependencies include the SongData data class, and it expects a Song model instance. The additional method takes an associative array of key-value pairs and returns a data object with those keys included in the output array. Suitable for adding fixed properties at runtime; outputs an array including the supplemental fields.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/appending-properties.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nSongData::from(Song::first())->additional([\n    'year' => 1987,\n]);\n```\n\n----------------------------------------\n\nTITLE: Defining a Data Object with a Nested Collection (AlbumData) in PHP\nDESCRIPTION: Defines the `AlbumData` class containing a basic `title` property and a `songs` property typed as `DataCollection`. The `#[DataCollectionOf(SongData::class)]` attribute informs the package that the `songs` collection should contain instances of `SongData`, enabling automatic mapping and validation of nested structures.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/request-to-data-object.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nclass AlbumData extends Data\n{\n    public function __construct(\n        public string $title,\n        #[DataCollectionOf(SongData::class)]\n        public DataCollection $songs,\n    ) {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Nested Data Object Validation with Relative Context in Laravel Data (PHP)\nDESCRIPTION: This example shows how to apply validation rules to a nested data structure, such as an AlbumData object containing multiple SongData objects. AlbumData holds a title and an array of songs; SongData validates its own properties using the payload from ValidationContext. This pattern enables precise validation at each level of nesting, handling both array typing and property rules. Expected input is a nested array payload reflecting the album and its songs, and outputs corresponding rule arrays for each nested path.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/validation/manual-rules.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nclass AlbumData extends Data\n{\n    /**\n    * @param array<SongData> $songs\n     */\n    public function __construct(\n        public string $title,\n        public array $songs,\n    ) {\n    }\n}\n\nclass SongData extends Data\n{\n    public function __construct(\n        public string $title,\n        public ?string $artist,\n    ) {\n    }\n    \n    public static function rules(ValidationContext $context): array\n    {\n        return [\n            'title' => ['required'],\n            'artist' => Rule::requiredIf($context->payload['title'] !== 'Never Gonna Give You Up'),\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Validation Rules for Nested Data Collection\nDESCRIPTION: This demonstrates the validation rules for the `AlbumData` object when it contains a collection of `SongData` objects. The 'songs' property is validated as an array, with each item validated using the `NestedRules` class, which ensures individual validation of the data class for that collection.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/validation/nesting-data.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n[\n    'title' => ['required', 'string'],\n    'songs' => ['present', 'array', new NestedRules()],\n]\n```\n\n----------------------------------------\n\nTITLE: Applying Local Casts Using Attributes in PHP Data Classes\nDESCRIPTION: Shows how to declare local casts using attributes inside the constructor of a data class for properties requiring special transformation, such as DateTime and Enum. This allows the automatic creation of complex types from strings.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/casts.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nclass SongData extends Data\n{\n    public function __construct(\n        public string $title,\n        public string $artist,\n        #[WithCast(DateTimeInterfaceCast::class)]\n        public DateTime $date,\n        #[WithCast(EnumCast::class)]\n        public Format $format,\n    ) {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Validation Rules for Optional Nested Data (Value Provided)\nDESCRIPTION: The validation rules when a value (even an empty array or null) is provided for the optional nested object key. The 'artist' key is expected to be an array, and its nested properties ('name' and 'age') are validated.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/validation/nesting-data.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n[\n    'title' => ['required', 'string'],\n    'artist' => ['array'],\n    'artist.name' => ['required', 'string'],\n    'artist.age' => ['required', 'integer'],\n]\n```\n\n----------------------------------------\n\nTITLE: Mapping Property Names with MapInputName in Laravel\nDESCRIPTION: This snippet demonstrates how to map an input property name to a different property name within a Laravel Data object using the `MapInputName` attribute.  It maps 'record_company' from an array to the property `$recordCompany`.  Requires the Spatie Laravel Data package to be installed. Input is an array, and the output is a data object with mapped property names.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/mapping-property-names.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass ContractData extends Data\n{\n    public function __construct(\n        public string $name,\n        #[MapInputName('record_company')]\n        public string $recordCompany,\n    ) {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Including Nested Lazy Properties - PHP\nDESCRIPTION: This snippet shows how to include nested lazy properties using the `include()` method with dot notation. It includes the `name` and `artist` properties of the `songs` collection within the `AlbumData` object.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/lazy-properties.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nAlbumData::from(Album::first())->include('songs.name', 'songs.artist');\n```\n\n----------------------------------------\n\nTITLE: Generating Data Object using make:data command - Shell\nDESCRIPTION: This shell command generates a new data object named `PostData` using the Laravel Artisan command `make:data`.  This command is provided by the Spatie Laravel Data package.  The generated object is placed in the default namespace `App\\Data`. No specific dependencies are required beyond having Laravel and the Spatie package installed. The output is a newly created data object file within the project's directory structure.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/commands.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan make:data PostData\n```\n\n----------------------------------------\n\nTITLE: Disable Optional Values in Factory - Laravel Data\nDESCRIPTION: Demonstrates how to handle optional values within the factory. `withoutOptionalValues()` ensures that missing optional properties are initialized to null rather than as an `Optional` object. The code snippets also highlight the importance of nullable types or default values to prevent \"typed property must not be accessed before initialization\" errors.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/factories.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nclass SongData extends Data {\n    public function __construct(\n        public string $title,\n        public string $artist,\n        public Optional|null|string $album,\n    ) {\n    }\n}\n\nSongData::factory()\n    ->withoutOptionalValues()\n    ->from(['title' => 'Never gonna give you up', 'artist' => 'Rick Astley']); // album will `null` instead of `Optional`\n```\n\nLANGUAGE: php\nCODE:\n```\nclass SongData extends Data {\n    public function __construct(\n        public string $title,\n        public string $artist,\n        public Optional|string $album, // careful here!\n        public Optional|string $publisher = 'unknown',\n        public Optional|string|null $label,\n    ) {\n    }\n}\n\n$data = SongData::factory()\n    ->withoutOptionalValues()\n    ->from(['title' => 'Never gonna give you up', 'artist' => 'Rick Astley']);\n    \n$data->toArray(); // ['title' => 'Never gonna give you up', 'artist' => 'Rick Astley', 'publisher' => 'unknown', 'label' => null]\n\n$data->album; // accessing the album will throw an error, unless the property is set before accessing it\n```\n\n----------------------------------------\n\nTITLE: Defining Data Class with Mapped Property Name in Laravel Data\nDESCRIPTION: This snippet demonstrates using the `#[MapInputName]` attribute to map an incoming request/input key ('song_title') to a different internal property name ('title') within a Laravel Data class. Validation rules are generated based on the *mapped* input name.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/validation/introduction.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nclass SongData extends Data\n{\n    public function __construct(\n        #[MapInputName('song_title')]\n        public string $title,\n    ) {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Eloquent Cast with Laravel Data Object in PHP\nDESCRIPTION: Shows how to define a custom Eloquent cast on a model attribute using a Laravel Data object class. The 'artist' attribute is cast to an ArtistData object, enabling automatic transformation between arrays and data objects when creating or retrieving model instances. No external dependencies beyond the Spatie Laravel Data package and Laravel Eloquent are required.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/eloquent-casting.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass Song extends Model\n{\n    protected $casts = [\n        'artist' => ArtistData::class,\n    ];\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nSong::create([\n    'artist' => new ArtistData(name: 'Rick Astley', age: 22),\n]);\n```\n\nLANGUAGE: php\nCODE:\n```\nSong::create([\n    'artist' => [\n        'name' => 'Rick Astley',\n        'age' => 22\n    ]\n]);\n```\n\nLANGUAGE: php\nCODE:\n```\nSong::findOrFail($id)->artist; // ArtistData object\n```\n\n----------------------------------------\n\nTITLE: Overwriting Automatic Inference with Custom Rules in Laravel Data (PHP)\nDESCRIPTION: This example demonstrates how specifying rules explicitly in the rules method disables any automatic rule inference for the corresponding properties. Only the listed rules, such as max:20 for the title and artist, are applied. The generated output will contain only these rules and omit default ones like required or string. Use this pattern when precise control over validation rules is necessary.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/validation/manual-rules.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass SongData extends Data\n{\n    public function __construct(\n        public string $title,\n        public string $artist,\n    ) {\n    }\n    \n    public static function rules(): array\n    {\n        return [\n            'title' => ['max:20'],\n            'artist' => ['max:20'],\n        ];\n    }\n}\n\n// The generated rules will look like this\n[\n    'title' => ['max:20'],\n    'artist' => ['max:20'],\n]\n```\n\n----------------------------------------\n\nTITLE: Applying Basic Validation Attributes PHP\nDESCRIPTION: Demonstrates how to apply common Laravel validation rules directly as attributes on data object properties (e.g., Uuid, Max, IP, StartsWith). These attributes are automatically merged with the rules inferred from the property type (like 'required', 'string'). The resulting rules for this example would be equivalent to `['uuid' => ['required', 'string', 'uuid'], 'ip' => ['required', 'string', 'max:15', 'ip', 'starts_with:192.']]`.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/validation/using-validation-attributes.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass SongData extends Data\n{\n    public function __construct(\n        #[Uuid()]\n        public string $uuid,\n        #[Max(15), IP, StartsWith('192.')]\n        public string $ip,\n    ) {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Laravel Data Objects PHP\nDESCRIPTION: Provides the structure for a nested data object scenario. The `AlbumData` object contains a `SongData` object, which is used as context to demonstrate how validation rules and field references work with nested data.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/validation/using-validation-attributes.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nclass AlbumData extends Data\n{\n    public function __construct(\n        public string $album_name,\n        public SongData $song,\n    ) {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Validation Rules Manually for Laravel Data Object\nDESCRIPTION: This snippet shows how to explicitly retrieve the generated validation rules for a Laravel Data object by calling the static `getValidationRules()` method. It's recommended to pass the payload data being validated to this method, as the payload influences which rules (especially 'required') are included based on default values.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/validation/introduction.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nAlbumData::getValidationRules($payload);\n```\n\n----------------------------------------\n\nTITLE: Defining a Computed Property in a Data Class (PHP)\nDESCRIPTION: Demonstrates defining a computed property `full_name` in a `SongData` class extending `Spatie\\LaravelData\\Data`. The `#[Computed]` attribute marks the property, and its value is calculated and assigned within the class constructor based on `first_name` and `last_name` properties. This approach allows deriving values dynamically upon object creation. Note the conditions: the property must be declared solely (not in constructor promotion) and cannot be set directly from input payloads.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/computed.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Spatie\\LaravelData\\Attributes\\Computed;\n\nclass SongData extends Data\n{\n    #[Computed]\n    public string $full_name;\n\n    public function __construct(\n        public string $first_name,\n        public string $last_name,\n    ) {\n        $this->full_name = \"{$this->first_name} {$this->last_name}\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Create Data Object using `fromMultiple` - PHP\nDESCRIPTION: Showcases creating a data object using the `fromMultiple` static method.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/creating-a-data-object.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nSongData::from('Never gonna give you up', 'Rick Astley');\n```\n\n----------------------------------------\n\nTITLE: Specifying a Custom Format for a Local Transformer in PHP\nDESCRIPTION: Demonstrates passing a custom date format ('m-Y') as an argument to the `DateTimeInterfaceTransformer` when applying it locally using the `#[WithTransformer]` attribute. This overrides the default format specified in the configuration.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/transformers.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass ArtistData extends Data{\n    public function __construct(\n        public string $name,\n        #[WithTransformer(DateTimeInterfaceTransformer::class, format: 'm-Y')]\n        public Carbon $birth_date\n    ) {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Data Object with Collection Property - PHP\nDESCRIPTION: This code defines a basic `AlbumData` class extending the `Data` class.  It includes a string property `title` and a `Collection` of `SongData` objects named `songs`. This example sets the foundation for later examples on controlling the inclusion of the `songs` collection.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/lazy-properties.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass AlbumData extends Data\n{\n    /**\n    * @param Collection<int, SongData> $songs\n    */\n    public function __construct(\n        public string $title,\n        public Collection $songs,\n    ) {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping property names with MapInputName attribute\nDESCRIPTION: Illustrates how to use the MapInputName attribute combined with SnakeCaseMapper to map camelCase property names in the data object to snake_case in the model. This allows seamless data transformation when property naming conventions differ.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/model-to-data-object.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nuse Spatie\\LaravelData\\Attributes\\MapInputName;\nuse Spatie\\LaravelData\\Mappers\\SnakeCaseMapper;\n\nclass ArtistData extends Data\n{\n    public int $id;\n    #[MapInputName(SnakeCaseMapper::class)]\n    public string $fullName;\n    public CarbonImmutable $created_at;\n    public CarbonImmutable $updated_at;\n}\n```\n\n----------------------------------------\n\nTITLE: Instantiating a Data Object with Computed Properties (PHP)\nDESCRIPTION: Shows how to create an instance of the `SongData` class (which contains a computed property) using the static `from` method provided by `spatie/laravel-data`. The input array only needs to contain the source properties (`first_name`, `last_name`), and the computed property (`full_name`) will be automatically calculated during instantiation based on the logic defined in the class constructor.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/computed.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nSongData::from(['first_name' => 'Ruben', 'last_name' => 'Van Assche']);\n```\n\n----------------------------------------\n\nTITLE: Loading relations on demand with LoadRelation attribute\nDESCRIPTION: Uses the LoadRelation attribute on a relation property to enable on-the-fly loading of that relation. When creating the data object, relations are loaded dynamically if they weren't preloaded with the model.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/model-to-data-object.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\nclass ArtistData extends Data\n{\n    public int $id;\n    /** @var array<SongData>  */\n    #[LoadRelation]\n    public array $songs;\n    public CarbonImmutable $created_at;\n    public CarbonImmutable $updated_at;\n}\n\n$artist = ArtistData::from(Artist::find(1));\n```\n\n----------------------------------------\n\nTITLE: Converting Optional Values to Null in Laravel Data Objects in PHP\nDESCRIPTION: Shows how to configure a Data object to automatically convert Optional values to null using the withoutOptionalValues() factory method.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/optional-properties.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nclass SongData extends Data {\n    public function __construct(\n        public string $title,\n        public Optional|null|string $artist,\n    ) {\n    }\n}\n\nSongData::factory()\n    ->withoutOptionalValues()\n    ->from(['title' => 'Never gonna give you up']); // artist will `null` instead of `Optional`\n```\n\n----------------------------------------\n\nTITLE: Using SnakeCaseMapper for All Properties in Laravel Data\nDESCRIPTION: Shows how to apply a snake_case mapping strategy to all properties in a Data object using the MapOutputName attribute with SnakeCaseMapper class.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/mapping-property-names.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n#[MapOutputName(SnakeCaseMapper::class)]\nclass ContractData extends Data\n{\n    public function __construct(\n        public string $name,\n        public string $recordCompany,\n    ) {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Returning a Data Collection in Controller (PHP)\nDESCRIPTION: Illustrates returning a collection of Laravel Data objects from a controller, which automatically transforms into a JSON array. `SongData::collect()` is used to create the collection from a collection of Song models retrieved via `Song::all()`. Requires Laravel Data and a Song model.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/from-data-to-resource.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nSongData::collect(Song::all());\n```\n\n----------------------------------------\n\nTITLE: Applying Max Validation Attribute\nDESCRIPTION: The `#[Max]` attribute validates that the input is less than or equal to a specified maximum value. The maximum value is provided as an argument.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/validation-attributes.md#_snippet_53\n\nLANGUAGE: php\nCODE:\n```\n```php\n#[Max(20)]\npublic int $closure; \n```\n```\n\n----------------------------------------\n\nTITLE: Casting Collections to Laravel Collections - Laravel Data - PHP\nDESCRIPTION: Illustrates casting a given collection (such as an array) to a specific type, in this case a Laravel Collection, using the collect method's second parameter. The method returns a Laravel Collection of SongData objects. Transformation works only with non-paginator collections.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/collections.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nSongData::collect($songs, Collection::class); // returns a Laravel collection of SongData objects\n\n```\n\n----------------------------------------\n\nTITLE: Using Custom collectArray Method to Return Custom Collection - Laravel Data - PHP\nDESCRIPTION: Utilizes the SongData::collectArray static method to create a SongCollection of SongData objects with unique artist tracking. Demonstrates how arrays of data can be collected into a specialized collection. Requires previously defined SongData and SongCollection classes.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/collections.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nSongData::collectArray([\n    ['title' => 'Never Gonna Give You Up', 'artist' => 'Rick Astley'],\n    ['title' => 'Living on a prayer', 'artist' => 'Bon Jovi'],\n]); // returns an SongCollection of SongData objects\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Collection of Data Objects in PHP\nDESCRIPTION: Demonstrates how to create a collection of Data objects from multiple model instances using the collect() static method on a Data class. This is useful for handling multiple records.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/from-data-to-array.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nSongData::collect(Song::all());\n```\n\n----------------------------------------\n\nTITLE: Casting Arrays or Collections of Non-Data Types in PHP\nDESCRIPTION: Defines how to cast iterable properties like arrays of DateTime objects using the 'cast_and_transform_iterables' feature, enabling strings in arrays to be transformed into DateTime instances during object creation.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/casts.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\nclass ReleaseData extends Data\n{\n    public string $title;\n    /** @var array<int, DateTime> */\n    public array $releaseDates;\n}\n```\n\n----------------------------------------\n\nTITLE: Type-Hinting Spatie Data Collection with @var (PHP)\nDESCRIPTION: Alternatively, you can use a PHPDoc '@var' annotation directly above the property declaration to specify the type of elements in the collection. This example uses the full namespace for the SongData class within the annotation.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/nesting.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nclass AlbumData extends Data\n{\n    public string $title;\n    \n    /** @var \\App\\Data\\SongData[] */\n    public array $songs;\n}\n```\n\n----------------------------------------\n\nTITLE: Including Properties of a Lazy Data Object - PHP\nDESCRIPTION: This code demonstrates how to include properties of a lazy-loaded Data object. In this case, it includes the `name` property of the `favorite_song` within the `UserData` object.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/lazy-properties.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nreturn UserData::from(Auth::user())->include('favorite_song.name');\n```\n\n----------------------------------------\n\nTITLE: Adding Validation Attributes to Data Class Properties in Laravel Data\nDESCRIPTION: This snippet demonstrates using PHP attributes to add extra validation rules to specific properties within a Laravel Data class. In this example, the `#[Max(20)]` attribute is added to the `$artist` property, requiring that its string value does not exceed 20 characters.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/validation/introduction.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nclass SongData extends Data\n{\n    public function __construct(\n        public string $title,\n        #[Max(20)]\n        public string $artist,\n    ) {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the all() Method to Transform Data Object in PHP\nDESCRIPTION: Demonstrates using the all() method to transform a Data object to an array without recursively transforming its properties. This is useful when you want to preserve complex property types.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/from-data-to-array.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nSongData::from(Song::first())->all();\n```\n\n----------------------------------------\n\nTITLE: Converting Data Object to JSON in PHP\nDESCRIPTION: Shows how to manually transform a Laravel Data object directly to a JSON string using the toJson() method. This is useful for API responses or other JSON output requirements.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/from-data-to-array.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nSongData::from(Song::first())->toJson();\n```\n\n----------------------------------------\n\nTITLE: Defining Expected Payloads for Nested Validation in Laravel Data (PHP)\nDESCRIPTION: This snippet provides an example of the nested array payload to be supplied for an AlbumData object containing multiple SongData instances. The payload includes album title and a songs array, where each song entry is an associative array representing its data. No dependencies are required to use this pattern. The structure matches the data object definitions for correct validation mapping.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/validation/manual-rules.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n[\n    'title' => 'Best songs ever made',\n    'songs' => [\n        ['title' => 'Never Gonna Give You Up'],\n        ['title' => 'Heroes', 'artist' => 'David Bowie'],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Change Validation Strategy in Factory - Laravel Data\nDESCRIPTION: Demonstrates changing the validation strategy when creating data objects with a factory. `alwaysValidate()` enforces validation every time a data object is created. Alternatively, `withoutValidation()` disables validation completely, bypassing request validation.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/factories.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nSongData::factory()->alwaysValidate()->from(['title' => 'Never gonna give you up', 'artist' => 'Rick Astley']);\n```\n\nLANGUAGE: php\nCODE:\n```\nSongData::factory()->withoutValidation()->from(['title' => 'Never gonna give you up', 'artist' => 'Rick Astley']);\n```\n\n----------------------------------------\n\nTITLE: Mapping Nested Properties with MapInputName in Laravel\nDESCRIPTION: This demonstrates how to map nested properties from an array to properties within a data object using dot notation within the `MapInputName` attribute. This allows accessing nested array values. Requires Spatie Laravel Data package.  Input is an array with nested structure, and output is a `SongData` object. The dot notation allows access to nested array values.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/mapping-property-names.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Spatie\\LaravelData\\Data;\nuse Spatie\\LaravelData\\Attributes\\MapInputName;\n\nclass SongData extends Data\n{\n    public function __construct(\n        #[MapInputName(\"title.name\")]\n        public string $title,\n        #[MapInputName(\"artists.0.name\")]\n        public string $artist\n    ) {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Data Object from Array PHP\nDESCRIPTION: Demonstrates creating an instance of a Data object using the static `from` method and an associative array as input. This method triggers the internal normalization process followed by the configured data pipeline (including `prepareForPipeline` if defined), hydrating the data object from the provided raw data.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/pipeline.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$songData = SongData::from([\n    'title' => 'Never gonna give you up',\n    'release_year' => '1987',\n    'producer' => 'Stock Aitken Waterman',\n]);\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Lazy Property - PHP\nDESCRIPTION: This snippet shows the basic way to create a lazy property. A closure which returns the value is passed to the Lazy::create method.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/lazy-properties.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nLazy::create(fn() => SongData::collect($album->songs));\n```\n\n----------------------------------------\n\nTITLE: Generated Validation Rules with Default Values in Laravel Data\nDESCRIPTION: This snippet shows the validation rules generated for the `SongData` class when validating data that only provides the 'title' property, while 'artist' has a default value defined in the class. The 'required' rule is only generated for 'title' because 'artist' would be populated by its default if missing from the input.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/validation/introduction.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n[\n    'title' => ['required', 'string'],\n]\n```\n\n----------------------------------------\n\nTITLE: PHP Data Object Class Structure for TypeScript Transformation\nDESCRIPTION: Defines a PHP class extending Data with various properties, demonstrating how a data object can be annotated and structured to be transformed into a TypeScript type by the package. The class includes properties with different types, including nullable, arrays, and union types, which will map to TypeScript definitions.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/typescript.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nclass DataObject extends Data\n{\n    public function __construct(\n        public null|int $nullable,\n        public int $int,\n        public bool $bool,\n        public string $string,\n        public float $float,\n        /** @var string[] */\n        public array $array,\n        public Lazy|string $lazy,\n        public Optional|string $optional,\n        public SimpleData $simpleData,\n        /** @var \\Spatie\\LaravelData\\Tests\\Fakes\\SimpleData[] */\n        public DataCollection $dataCollection,\n    )\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Representation of a Data Collection (JSON)\nDESCRIPTION: Displays the JSON structure of a collection of SongData objects, showing an array of objects, each with \"name\" and \"artist\" properties. It demonstrates the format of a JSON array when a data collection is returned as a response.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/from-data-to-resource.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"name\": \"Never Gonna Give You Up\",\n        \"artist\": \"Rick Astley\"\n    },\n    {\n        \"name\": \"Giving Up on Love\",\n        \"artist\": \"Rick Astley\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Example Output of Retrieving Validation Rules for Laravel Data Object\nDESCRIPTION: This snippet shows the array structure returned by the `getValidationRules()` method for the `AlbumData` class (which contains a collection of `SongData` objects). The output includes rules for the parent properties and the nested collection items, demonstrating how rules are generated based on the data object structure.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/validation/introduction.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n[\n    'title' => ['required', 'string'],\n    'songs' => ['required', 'array'],\n    'songs.*.title' => ['required', 'string'],\n    'songs.*.artist' => ['required', 'string'],\n]\n```\n\n----------------------------------------\n\nTITLE: Filling Properties from Authenticated User\nDESCRIPTION: Shows how to use `FromAuthenticatedUser` to inject data from the authenticated user into a data object's property. It allows you to fill properties of the `SongData` object with user information.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/injecting-property-values.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nclass SongData extends Data {\n    #[FromAuthenticatedUser]\n    public UserData $user;\n}\n```\n\n----------------------------------------\n\nTITLE: Using the except() method with nested keys - PHP\nDESCRIPTION: This code shows how to use the except() method with nested keys. The data object will not show the 'songs.name' and 'songs.artist' properties. Note that this overwrites all other include and exclude statements.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/lazy-properties.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nAlbumData::from(Album::first())->except('songs.name', 'songs.artist');\n```\n\n----------------------------------------\n\nTITLE: Implementing a Combined Cast and Transformer Class in PHP\nDESCRIPTION: Demonstrates how to create a single PHP class that implements both the `Cast` and `Transformer` interfaces from spatie/laravel-data. This allows the class (`ToUpperCastAndTransformer`) to handle both data creation casting (via `cast`) and data transformation (via `transform`), shown here by converting a string value to uppercase in both methods.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/creating-a-transformer.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Spatie\\LaravelData\\Casts\\Cast;\nuse Spatie\\LaravelData\\Support\\Creation\\CreationContext;\nuse Spatie\\LaravelData\\Support\\DataProperty;\nuse Spatie\\LaravelData\\Support\\Transformation\\TransformationContext;\nuse Spatie\\LaravelData\\Transformers\\Transformer;\n\nclass ToUpperCastAndTransformer implements Cast, Transformer\n{\n    public function cast(DataProperty $property, mixed $value, array $properties, CreationContext $context): string\n    {\n        return strtoupper($value);\n    }\n    \n    public function transform(DataProperty $property, mixed $value, TransformationContext $context): string\n    {\n        return strtoupper($value);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Overwriting validation error messages in Laravel Data class\nDESCRIPTION: Defines custom validation error messages by overriding the static messages() method in a PHP Data class, returning an array mapping validation rules to messages.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/validation/working-with-the-validator.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nclass SongData extends Data\n{\n    public function __construct(\n        public string $title,\n        public string $artist,\n    ) {\n    }\n\n    public static function messages(): array\n    {\n        return [\n            'title.required' => 'A title is required',\n            'artist.required' => 'An artist is required',\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Overwriting attribute names for validation in Laravel Data class\nDESCRIPTION: Overrides attribute names used in validation errors by implementing the static attributes() method, providing mappings from internal attribute names to user-friendly labels.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/validation/working-with-the-validator.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nclass SongData extends Data\n{\n    public function __construct(\n        public string $title,\n        public string $artist,\n    ) {\n    }\n\n    public static function attributes(): array\n    {\n        return [\n            'title' => 'titel',\n            'artist' => 'artiest',\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Data Object with Nullable Nested Data\nDESCRIPTION: This code shows an `AlbumData` object with a nullable `ArtistData` property. This allows the artist to be absent or null. The validation rules will change depending on the payload, whether a value for artist is provided or not.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/validation/nesting-data.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nclass AlbumData extends Data\n{\n    public function __construct(\n        public string $title,\n        public ?ArtistData $artist,\n    ) {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Laravel Data Object with Mapped Properties (PHP)\nDESCRIPTION: This snippet demonstrates how to instantiate the `ContractData` object using its static `from` method. The input array provides keys corresponding to the mapping rules defined by the `#[MapName]` attributes in the `ContractData` class (e.g., 'record_company' maps to `$recordCompany`, 'CityName' maps to `$cityName`).\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/available-property-mappers.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nContractData::from([\n    'name' => 'Rick Astley',\n    'record_company' => 'RCA Records',\n    'country field' => 'Belgium',\n    'CityName' => 'Antwerp',\n    'addressline1' => 'some address line 1',\n    'ADDRESSLINE2' => 'some address line 2',\n]);\n```\n\n----------------------------------------\n\nTITLE: Using Nullable DataCollections with Default Values in Laravel Eloquent Casts in PHP\nDESCRIPTION: Demonstrates casting an Eloquent attribute to a DataCollection of data objects that always returns a collection instance, even if the underlying database attribute is null. The cast parameters include the data class and 'default', ensuring a non-null, empty collection is provided.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/eloquent-casting.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nclass Artist extends Model\n{\n    protected $casts = [\n        'songs' => DataCollection::class.':'.SongData::class.',default',\n    ];\n}\n```\n\nLANGUAGE: php\nCODE:\n```\n$artist = Artist::create([\n    'songs' => null\n]);\n\n$artist->songs; // DataCollection\n$artist->songs->count();// 0\n```\n\n----------------------------------------\n\nTITLE: Showing Inferred Validation Rules in PHP\nDESCRIPTION: Displays the array of validation rules automatically generated by the `laravel-data` package for the `ArtistData` class shown previously. It illustrates how property types (`string`, `int`, `?string`) are translated into corresponding validation rules (`required`, `string`, `integer`, `nullable`). This array represents the output of the rule inference process.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/validation/auto-rule-inferring.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[\n    'name' => ['required', 'string'],\n    'age' => ['required', 'integer'],\n    'genre' => ['nullable', 'string'],\n]\n```\n\n----------------------------------------\n\nTITLE: Defining the Cast Interface in Laravel Data - PHP\nDESCRIPTION: This snippet shows the base Cast interface required for custom type casting in Spatie's Laravel Data package. Any cast class must implement this interface by providing a cast method, which receives the property being casted, its value, all other properties, and the creation context. The method should return the casted value or an Uncastable object if casting fails. Dependency: spatie/laravel-data.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/creating-a-cast.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ninterface Cast\n{\n    public function cast(DataProperty $property, mixed $value, array $properties, CreationContext $context): mixed;\n}\n```\n\n----------------------------------------\n\nTITLE: Disable Magic Methods in Factory - Laravel Data\nDESCRIPTION: Shows how to disable magic methods when creating a data object via factory. `withoutMagicalCreation()` prevents creation via static methods.  `ignoreMagicalMethod()` ignores a specific static method during creation.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/factories.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nSongData::factory()->withoutMagicalCreation()->from('Never gonna give you up'); // Won't work since the magical method creation is disabled\n```\n\nLANGUAGE: php\nCODE:\n```\nSongData::factory()->ignoreMagicalMethod('fromString')->from('Never gonna give you up'); // Won't work since the magical method is ignored\n```\n\n----------------------------------------\n\nTITLE: Providing Parameters to Local Casts in PHP\nDESCRIPTION: Example of passing additional parameters to local casts, such as specifying a specific enum class for the EnumCast attribute, allowing more precise cast behavior.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/casts.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n#[WithCast(EnumCast::class, type: Format::class)]\npublic Format $format\n```\n\n----------------------------------------\n\nTITLE: Filling Properties from Authenticated User with Guard\nDESCRIPTION: Demonstrates how to specify a guard for fetching the authenticated user when using `FromAuthenticatedUser`. It retrieves user data based on the provided guard.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/injecting-property-values.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nclass SongData extends Data {\n    #[FromAuthenticatedUser('api')]\n    public UserData $user;\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Value Transformation with `transform()` in PHP\nDESCRIPTION: Demonstrates preventing the transformation of property values during the `transform()` process by using `TransformationContextFactory::create()->withoutValueTransformation()`. This results in behavior similar to the `all()` method, keeping original types like `Carbon`. Requires importing `Spatie\\LaravelData\\Support\\Transformation\\TransformationContextFactory`.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/transformers.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Spatie\\LaravelData\\Support\\Transformation\\TransformationContextFactory;\n\nArtistData::from($artist)->transform(\n    TransformationContextFactory::create()->withoutValueTransformation()\n);\n```\n\n----------------------------------------\n\nTITLE: Transforming a Collection of Data Objects to Array in PHP\nDESCRIPTION: Shows how to convert a collection of Data objects to an array using the toArray() method. This recursively transforms all Data objects in the collection to their array representations.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/from-data-to-array.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nSongData::collect(Song::all())->toArray();\n```\n\n----------------------------------------\n\nTITLE: Defining Global Casts in Laravel Data Configuration\nDESCRIPTION: Configures global casts in Laravel's 'data.php' file, mapping classes or interfaces like 'DateTimeInterface' to specific cast classes, ensuring properties are automatically cast unless overridden locally.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/casts.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n'casts' => [\n    DateTimeInterface::class => Spatie\\LaravelData\\Casts\\DateTimeInterfaceCast::class,\n],\n```\n\n----------------------------------------\n\nTITLE: Using Iterable Casting in Data Object Construction\nDESCRIPTION: Demonstrates how an array of date strings can be used to instantiate a 'ReleaseData' object, with the feature automatically casting each string to a DateTime object during creation.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/casts.md#_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\nReleaseData::from([\n    'title' => 'Never Gonna Give You Up',\n    'releaseDates' => [\n        '1987-07-27T12:00:00Z',\n        '1987-07-28T12:00:00Z',\n        '1987-07-29T12:00:00Z',\n    ],\n]);\n```\n\n----------------------------------------\n\nTITLE: Disabling Overriding for Route Parameters in Request Body\nDESCRIPTION: Demonstrates how to use `replaceWhenPresentInPayload: false` in the `FromRouteParameter` attribute to prevent route parameters from overriding request body values.  This allows the request body value to be used for certain properties, such as slugs, even if they are also present as a route parameter.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/injecting-property-values.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nRoute::patch('/songs/{slug}', [SongController::class, 'update']);\n\n// PATCH /songs/never\n// { \"slug\": \"never-gonna-give-you-up\", \"name\": \"Never gonna give you up\" }\n\nclass SongData extends Data {\n    #[FromRouteParameter('slug', replaceWhenPresentInPayload: false )]\n    public string $slug;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Data Class with Default Values in Laravel Data\nDESCRIPTION: This snippet defines a Laravel Data class (`SongData`) with properties that have default values assigned in the constructor. The package takes these default values into account during validation; if a property with a default value is *not* present in the data being validated, the 'required' rule is skipped for that property.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/validation/introduction.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nclass SongData extends Data\n{\n    public function __construct(\n        public string $title = 'Never Gonna Give You Up',\n        public string $artist = 'Rick Astley',\n    ) {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying a Combined Cast and Transformer in a Data Object (PHP)\nDESCRIPTION: Illustrates how to apply a combined cast and transformer class (`SomeCastAndTransformer`) to a specific property (`artist`) within a spatie/laravel-data `Data` object (`SongData`) using the `#[WithCastAndTransformer]` attribute. This ensures the custom casting and transformation logic defined in the specified class is applied to the `artist` property during data creation and transformation processes.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/creating-a-transformer.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Spatie\\LaravelData\\Attributes\\WithCastAndTransformer;\nuse Spatie\\LaravelData\\Data;\n\nclass SongData extends Data\n{\n    public function __construct(\n        public string $title,\n        #[WithCastAndTransformer(SomeCastAndTransformer::class)]\n        public string $artist,\n    ) {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a SongData object from nested Array\nDESCRIPTION: Shows the construction of the `SongData` object using the `from` method and an array with nested structure. The property names will be mapped according to the `MapInputName` attributes defined in the `SongData` class. Requires the Spatie Laravel Data package.  Input is a nested array, and output is a populated `SongData` data object.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/mapping-property-names.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nSongData::from([\n    \"title\" => [\n        \"name\" => \"Never gonna give you up\"\n    ],\n    \"artists\" => [\n        [\"name\" => \"Rick Astley\"]\n    ]\n]);\n```\n\n----------------------------------------\n\nTITLE: Rendering Data Object with Inertia\nDESCRIPTION: This snippet demonstrates how to pass a complete data object created using Laravel Data to an Inertia.js response. It uses the `Inertia::render` method to render a component named 'Song' and passes the data object obtained from the `SongsData::from($song)` transformation.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/use-with-inertia.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nreturn Inertia::render('Song', SongsData::from($song));\n```\n\n----------------------------------------\n\nTITLE: Defining Optional and Lazy Properties in PHP Data Classes\nDESCRIPTION: Shows how properties with 'Lazy' or 'Optional' union types are automatically mapped to optional properties in the resulting TypeScript types, denoted with '?'. This approach helps generate precise TypeScript interfaces matching PHP class intentions.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/typescript.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nclass DataObject extends Data\n{\n    public function __construct(\n        public Lazy|string $lazy,\n        public Optional|string $optional,\n    )\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Local Transformer for a Property in PHP\nDESCRIPTION: Applies the built-in `DateTimeInterfaceTransformer` to the `birth_date` property of the `ArtistData` object using the `#[WithTransformer]` attribute. This transformer converts `Carbon`, `CarbonImmutable`, `DateTime`, and `DateTimeImmutable` objects to strings based on the format defined in `config/data.php`.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/transformers.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass ArtistData extends Data{\n    public function __construct(\n        public string $name,\n        #[WithTransformer(DateTimeInterfaceTransformer::class)]\n        public Carbon $birth_date\n    ) {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Untransformed Data using `all()` in PHP\nDESCRIPTION: Illustrates fetching the raw array representation of a `ArtistData` object without applying any transformers. Properties like `Carbon` objects and nested data objects/collections remain in their original form.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/transformers.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nArtistData::from($artist)->all();\n```\n\n----------------------------------------\n\nTITLE: Stopping validation on first failure in Laravel Data class\nDESCRIPTION: Controls whether validation halts after the first error by overriding the static stopOnFirstFailure() method, returning a boolean value.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/validation/working-with-the-validator.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nclass SongData extends Data\n{\n    // ...\n\n    public static function stopOnFirstFailure(): bool\n    {\n        return true;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Validation Rules for Nullable Nested Data (Value Provided)\nDESCRIPTION: These are the validation rules that apply when a value (even an empty array) is provided for the nullable nested object key. The 'artist' key is expected to be an array, and its nested properties ('name' and 'age') are required to adhere to their respective data types.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/validation/nesting-data.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n[\n    'title' => ['required', 'string'],\n    'artist' => ['array'],\n    'artist.name' => ['required', 'string'],\n    'artist.age' => ['required', 'integer'],\n]\n```\n\n----------------------------------------\n\nTITLE: Defining a Data Object with a Lazy Data Object - PHP\nDESCRIPTION: This snippet defines a `UserData` class with a lazy `favorite_song` property, which is a `SongData` object. This showcases how to create lazy relationships between Data objects.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/lazy-properties.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nclass UserData extends Data\n{\n    public function __construct(\n        public string $title,\n        public Lazy|SongData $favorite_song,\n    ) {\n    }\n\n    public static function fromModel(User $user): self\n    {\n        return new self(\n            $user->title,\n            Lazy::create(fn() => SongData::from($user->favorite_song))\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Attribute class for accessors in Laravel models\nDESCRIPTION: Shows how to define an accessor that returns an Attribute object, providing a more modern or advanced way to define computed properties. The getFullName() method returns an Attribute object with a getter function.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/model-to-data-object.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nclass Artist extends Model\n{\n    public function getFullName(): Attribute\n    {\n        return Attribute::get(fn () => \"{$this->first_name} {$this->last_name}\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Data Object with Nested Collection\nDESCRIPTION: This snippet defines an `AlbumData` object containing a collection of `SongData` objects.  It highlights the use of an array to represent a collection of nested data objects within a Laravel Data object.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/validation/nesting-data.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass AlbumData extends Data\n{\n    /**\n    * @param array<int, SongData> $songs\n    */\n    public function __construct(\n        public string $title,\n        public array $songs,\n    ) {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Normalizer (PHP)\nDESCRIPTION: This snippet shows how to implement a custom normalizer, `ArrayableNormalizer`, that implements the `Normalizer` interface. It checks if the input value is an instance of `Arrayable` and returns its array representation if it is.  Requires the Laravel Data package and `Arrayable` implementations.  It demonstrates the core logic for creating a normalizer to handle a specific type of input.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/normalizers.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nclass ArrayableNormalizer implements Normalizer\n{\n    public function normalize(mixed $value): ?array\n    {\n        if (! $value instanceof Arrayable) {\n            return null;\n        }\n\n        return $value->toArray();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Data Object with Optional Nested Data\nDESCRIPTION: This snippet presents the `AlbumData` object with an optional `ArtistData` property.  This means a value might or might not be present. Similar to nullable, the validation rules change depending on the payload.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/validation/nesting-data.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nclass AlbumData extends Data\n{\n    public function __construct(\n        public string $title,\n        public ArtistData $artist,\n    ) {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Data Class with Properties in PHP\nDESCRIPTION: This snippet defines a PHP data class 'SongData' extending the base 'Data' class, with various typed properties including string and DateTime types. It sets up the structure for representing song-related data.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/casts.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nclass SongData extends Data\n{\n    public function __construct(\n        public string $title,\n        public string $artist,\n        public DateTime $date,\n        public Format $format,\n    ) {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Legacy collection Method Using WithDeprecatedCollectionMethod Trait - Laravel Data - PHP\nDESCRIPTION: Demonstrates legacy usage of the collection method by applying the WithDeprecatedCollectionMethod trait to a Data class. Enables use of the collection method even though it was deprecated in v4. The trait is expected to be removed in a future major version. Requires Spatie\\LaravelData\\WithDeprecatedCollectionMethod and SongData class.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/collections.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse Spatie\\LaravelData\\WithDeprecatedCollectionMethod;\n\nclass SongData extends Data\n{\n    use WithDeprecatedCollectionMethod;\n    \n    // ...\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Exception Behavior for Max Transformation Depth in `data.php`\nDESCRIPTION: Shows the `throw_when_max_transformation_depth_reached` boolean configuration key in `data.php`. Setting it to `true` (default) throws a `MaxTransformationDepthReached` exception, while `false` returns an empty array when the maximum depth is exceeded.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/transformers.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n'throw_when_max_transformation_depth_reached' => true,\n```\n\n----------------------------------------\n\nTITLE: Collecting Data Objects with Factory - Laravel Data\nDESCRIPTION: Shows how to collect multiple data objects using a factory. The `collect()` method is used, taking a collection of Song models as input and converting them into a collection of SongData objects.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/factories.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nSongData::factory()->collect(Song::all())\n```\n\n----------------------------------------\n\nTITLE: Filling Data Properties from Route Parameters - Model\nDESCRIPTION: This snippet illustrates how to use `FromRouteParameter` with a route model binding.  It binds the `artist` route parameter, which is an instance of the `Artist` model, to the `$author` property of `SongData`, automatically casting the model to `ArtistData`.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/injecting-property-values.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nRoute::post('/songs/{artist}', [SongController::class, 'store']);\n\nclass SongData extends Data {\n    public int $id;\n    #[FromRouteParameter('artist')]\n    public ArtistData $author;\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Route Parameter for Unique Rule PHP\nDESCRIPTION: Shows how to reference a route parameter within a validation attribute. This example uses the Unique attribute and `RouteParameterReference('song')` to tell Laravel to ignore the current record's ID (derived from the 'song' route parameter) when checking for uniqueness.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/validation/using-validation-attributes.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass SongData extends Data\n{\n    public function __construct(\n        public string $title,\n        #[Unique('songs', ignore: new RouteParameterReference('song'))]\n        public int $id,\n    ) {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom route for redirection after validation failure in Laravel Data class\nDESCRIPTION: Defines a specific route name for redirection on validation failure by overriding the static redirectRoute() method, returning the route as a string.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/validation/working-with-the-validator.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nclass SongData extends Data\n{\n    // ...\n\n    public static function redirectRoute(): string\n    {\n        return 'home';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using DataCollection Methods - Laravel Data - PHP\nDESCRIPTION: Utilizes Laravel-like methods (such as first) on a DataCollection to retrieve or manipulate items in the collection. Enhances collection processing flexibility. Returns single or transformed data objects as needed.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/collections.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nSongData::collect(Song::all(), DataCollection::class)->first(); // SongData object\n\n```\n\n----------------------------------------\n\nTITLE: DataCollection Additional Functionalities - Laravel Data - PHP\nDESCRIPTION: Shows examples of using array operations and iteration with DataCollection objects, including count, direct property access, addition and removal, and foreach iteration. Provides for advanced collection manipulation similar to standard arrays or Laravel collections.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/collections.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n// Counting the amount of items in the collection\ncount($collection);\n\n// Changing an item in the collection\n$collection[0]->title = 'Giving Up on Love';\n\n// Adding an item to the collection\n$collection[] = SongData::from(['title' => 'Never Knew Love', 'artist' => 'Rick Astley']);\n\n// Removing an item from the collection\nunset($collection[0]);\n\n```\n\nLANGUAGE: php\nCODE:\n```\nforeach ($songs as $song){\n    echo $song->title;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Abstract Data Class with Laravel Data Traits and Interfaces in PHP\nDESCRIPTION: This PHP snippet defines an abstract class Data that implements multiple interfaces from the Spatie Laravel Data package, such as Responsable, AppendableDataContract, BaseDataContract, and others. It uses a series of traits to incorporate functionalities like data transformation, validation, response formatting, wrapping, context handling, and appending additional data. The class serves as a customizable foundation for creating data objects with flexible behavior in Laravel applications. Dependencies include Laravel's Responsable contract and Spatie Laravel Data's contracts and traits. The code expects implementations for the abstract methods implied by the interfaces and leverages trait-provided methods to fulfill interface contracts.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/traits-and-interfaces.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Contracts\\Support\\Responsable;\\nuse Spatie\\LaravelData\\Concerns\\AppendableData;\\nuse Spatie\\LaravelData\\Concerns\\BaseData;\\nuse Spatie\\LaravelData\\Concerns\\ContextableData;\\nuse Spatie\\LaravelData\\Concerns\\EmptyData;\\nuse Spatie\\LaravelData\\Concerns\\IncludeableData;\\nuse Spatie\\LaravelData\\Concerns\\ResponsableData;\\nuse Spatie\\LaravelData\\Concerns\\TransformableData;\\nuse Spatie\\LaravelData\\Concerns\\ValidateableData;\\nuse Spatie\\LaravelData\\Concerns\\WrappableData;\\nuse Spatie\\LaravelData\\Contracts\\AppendableData as AppendableDataContract;\\nuse Spatie\\LaravelData\\Contracts\\BaseData as BaseDataContract;\\nuse Spatie\\LaravelData\\Contracts\\EmptyData as EmptyDataContract;\\nuse Spatie\\LaravelData\\Contracts\\IncludeableData as IncludeableDataContract;\\nuse Spatie\\LaravelData\\Contracts\\ResponsableData as ResponsableDataContract;\\nuse Spatie\\LaravelData\\Contracts\\TransformableData as TransformableDataContract;\\nuse Spatie\\LaravelData\\Contracts\\ValidateableData as ValidateableDataContract;\\nuse Spatie\\LaravelData\\Contracts\\WrappableData as WrappableDataContract;\\n\\nabstract class Data implements Responsable, AppendableDataContract, BaseDataContract, TransformableDataContract, IncludeableDataContract, ResponsableDataContract, ValidateableDataContract, WrappableDataContract, EmptyDataContract\\n{\\n    use ResponsableData;\\n    use IncludeableData;\\n    use AppendableData;\\n    use ValidateableData;\\n    use WrappableData;\\n    use TransformableData;\\n    use BaseData;\\n    use EmptyData;\\n    use ContextableData;\\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Collections Already Containing Data Objects - Laravel Data - PHP\nDESCRIPTION: Collects an array of already instantiated SongData objects, ensuring the existing objects are preserved rather than wrapped again. Uses the from method to generate SongData instances. Ensures no redundant conversion occurs.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/collections.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nSongData::collect([\n    SongData::from(['title' => 'Never Gonna Give You Up', 'artist' => 'Rick Astley']),\n    SongData::from(['title' => 'Giving Up on Love', 'artist' => 'Rick Astley']),\n]); // returns an array of SongData objects\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Data Object with Default Mapping Strategy\nDESCRIPTION: Shows how to instantiate a Data object with properties in camelCase when a default mapping strategy is configured.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/mapping-property-names.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$contract = new ContractData(\n    name: 'Rick Astley',\n    recordCompany: 'RCA Records',\n);\n```\n\n----------------------------------------\n\nTITLE: Type-Hinting Spatie Data Collection with DataCollectionOf Attribute (PHP)\nDESCRIPTION: An older but still supported method for defining the type of data objects within a collection is using the #[DataCollectionOf] attribute. This attribute is applied directly to the collection property and specifies the class of the data objects it contains.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/nesting.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nclass AlbumData extends Data\n{\n    public function __construct(\n        public string $title,\n        #[DataCollectionOf(SongData::class)]\n        public array $songs,\n    ) {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Caching Data Structures using Artisan Command (PHP)\nDESCRIPTION: This command analyzes all data objects in the application and stores the results in the configured Laravel cache. It should be run after creating or modifying data objects or during deployment to production to ensure optimal performance.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/performance.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nphp artisan data:cache-structures\n```\n\n----------------------------------------\n\nTITLE: Type-Hinting Spatie Data Collection (Short Name) with @var (PHP)\nDESCRIPTION: If you import the nested Data class using a 'use' statement, you can use a shorter form of the '@var' annotation to specify the collection item type. This improves readability while maintaining type-hinting benefits.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/nesting.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Data\\SongData;\n\nclass AlbumData extends Data\n{\n    /** @var SongData[] */\n    public array $songs;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Abstract Data Class with Subclasses in PHP\nDESCRIPTION: Demonstrates how to create an abstract data class with extending subclasses. The Person class is the abstract parent, while Singer and Musician are concrete implementations with different properties.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/abstract-data.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nabstract class Person extends Data\n{\n    public string $name;\n}\n\nclass Singer extends Person\n{\n   public function __construct(\n        public string $voice,\n   ) {}\n}\n\nclass Musician extends Person\n{\n   public function __construct(\n        public string $instrument,\n   ) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Attributes for Optional Property Declaration\nDESCRIPTION: Illustrates using the 'Optional' attribute from the 'typescript-transformer' package, aliased as 'TypeScriptOptional', to explicitly mark a property as optional in the generated TypeScript type without relying on PHP's union types. This approach provides finer control over optional properties in TypeScript.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/typescript.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nuse Spatie\\TypeScriptTransformer\\Attributes\\Optional as TypeScriptOptional;\n\nclass DataObject extends Data\n{\n    public function __construct(\n        #[TypeScriptOptional]\n        public int $id,\n        public string $someString,\n        public Optional|string $optional,\n    )\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using `transform()` for Default Transformation in PHP\nDESCRIPTION: Shows the basic usage of the `transform()` method on a `ArtistData` object. When called without arguments, it behaves identically to the `toArray()` method, applying all configured local and global transformers.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/transformers.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nArtistData::from($artist)->transform();\n```\n\n----------------------------------------\n\nTITLE: Defining model relations in Laravel\nDESCRIPTION: Adds relations to models: Song belongs to Artist, and Artist has many Songs. These functions specify relationship types, enabling nested data access and eager loading in data object creation.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/model-to-data-object.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nclass Song extends Model\n{\n    public function artist(): BelongsTo\n    {\n        return $this->belongsTo(Artist::class);\n    }\n}\n\nclass Artist extends Model\n{\n    public function songs(): HasMany\n    {\n        return $this->hasMany(Song::class);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Resource Class Example (PHP)\nDESCRIPTION: Shows how to create a resource class using Laravel Data.  Resource classes are optimized for data transformation by skipping validation and authorization checks. Requires Laravel Data.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/from-data-to-resource.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse Spatie\\LaravelData\\Resource;\n\nclass SongResource extends Resource\n{\n    public function __construct(\n        public string $title,\n        public string $artist,\n    ) {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Transforming Data Object to Array - PHP\nDESCRIPTION: This example shows how to transform an `AlbumData` object (created from an `Album` model) into an array. Because the `songs` property is lazy-loaded, it will not be included in the resulting array unless explicitly included.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/lazy-properties.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nAlbumData::from(Album::first())->toArray();\n```\n\n----------------------------------------\n\nTITLE: Example Output of Default `transform()` Method\nDESCRIPTION: Provides an example array output resulting from calling the default `transform()` method. Note that the `birth_date` (originally a Carbon object) has been transformed into a string according to the transformer's configuration.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/transformers.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n[\n    'name' => 'Rick Astley',\n    'birth_date' => '06-02-1966',\n]\n```\n\n----------------------------------------\n\nTITLE: Disable Property Name Mapping in Factory - Laravel Data\nDESCRIPTION: Illustrates disabling property name mapping when creating a data object using a factory.  The `withoutPropertyNameMapping()` method prevents automatic mapping of array keys to data object property names. This is useful when array keys do not directly correspond to property names.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/factories.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nContractData::factory()->withoutPropertyNameMapping()->from(['name' => 'Rick Astley', 'record_company' => 'RCA Records']); // record_company will not be mapped to recordCompany\n```\n\n----------------------------------------\n\nTITLE: Using accessors in Laravel models for computed attributes\nDESCRIPTION: Demonstrates how to define an accessor method getFullNameAttribute() in a model to create a virtual property. The data class then includes a corresponding property, using snake_case to match the database attribute name.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/model-to-data-object.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nclass Artist extends Model\n{\n    public function getFullNameAttribute(): string\n    {\n        return $this->first_name . ' ' . $this->last_name;\n    }\n}\n\nclass ArtistData extends Data\n{\n    public int $id;\n    public string $full_name;\n    public CarbonImmutable $created_at;\n    public CarbonImmutable $updated_at;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating data objects with relational data\nDESCRIPTION: Shows creating an ArtistData object with related SongData objects by eager-loading relations using with(). The relation property in ArtistData is defined as an array of SongData instances, included in the parent data object.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/model-to-data-object.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nclass SongData extends Data\n{\n    public int $id;\n    public string $title;\n}\n\nclass ArtistData extends Data\n{\n    public int $id;\n    /** @var array<SongData>  */\n    public array $songs;\n    public CarbonImmutable $created_at;\n    public CarbonImmutable $updated_at;\n}\n\n$artist = ArtistData::from(Artist::with('songs')->find(1));\n```\n\n----------------------------------------\n\nTITLE: Customize Data Object Creation with Multiple Args - PHP\nDESCRIPTION: Demonstrates data object creation with multiple arguments via a custom static method `fromMultiple`.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/creating-a-data-object.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nclass SongData extends Data\n{\n    public function __construct(\n        public string $title,\n        public string $artist,\n    ) {\n    }\n    \n    public static function fromMultiple(string $title, string $artist): self\n    {\n        return new self($title, $artist);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Consuming FormRequest Data Object in a Laravel Controller in PHP\nDESCRIPTION: This snippet exemplifies how to use a FormRequest class with WithData trait in a Laravel controller. The controller method, when given a SongRequest parameter, retrieves the data object via getData, uses it to create a new Song instance, and returns the data object. Assumes the request uses WithData, Song model is available, and the data class provides toArray for model population. It returns the resulting data object as the method output.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/get-data-from-a-class-quickly.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nclass SongController\n{\n    public function __invoke(SongRequest $request): SongData\n    {\n        $data = $request->getData();\n    \n        $song = Song::create($data->toArray());\n        \n        return $data;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Wrapping a Paginated Data Collection - PHP\nDESCRIPTION: This snippet shows how to wrap a paginated data collection. It uses `Song::paginate()` to retrieve paginated results and then wraps the resulting data collection with the specified key. It demonstrates the use of `PaginatedDataCollection` for wrapping paginated data.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/wrapping.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nSongData::collect(Song::paginate(), PaginatedDataCollection::class)->wrap('paginated_data');\n```\n\n----------------------------------------\n\nTITLE: Defining Data Class with Nested Data Collection in Laravel Data\nDESCRIPTION: This snippet defines a Laravel Data class (`AlbumData`) containing a property (`$songs`) that is an array intended to hold a collection of other Laravel Data objects (`SongData`). The `@param` annotation helps clarify the expected collection type. The package uses this information to apply validation rules to each item within the collection.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/validation/introduction.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nclass AlbumData extends Data\n{\n    /**\n    * @param array<SongData> $songs\n    */\n    public function __construct(\n        public string $title,\n        public array $songs,\n    ) {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Data Wrapping with `transform()` in PHP\nDESCRIPTION: Shows how to enable data wrapping (nesting the output under a specific key, usually 'data') for a `transform()` call using `TransformationContextFactory::create()->withWrapping()`. Requires importing `Spatie\\LaravelData\\Support\\Wrapping\\WrapExecutionType`.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/transformers.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Spatie\\LaravelData\\Support\\Wrapping\\WrapExecutionType;\n\nArtistData::from($artist)->transform(\n    TransformationContextFactory::create()->withWrapping()\n);\n```\n\n----------------------------------------\n\nTITLE: Including a Lazy Property - PHP\nDESCRIPTION: This code demonstrates how to explicitly include the `songs` property when transforming an `AlbumData` object to an array using the `include()` method. This forces the lazy-loaded `songs` collection to be included in the output.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/lazy-properties.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nAlbumData::from(Album::first())->include('songs');\n```\n\n----------------------------------------\n\nTITLE: Example Output of `transform()` with Wrapping Enabled\nDESCRIPTION: Provides the array output when `transform()` is executed with wrapping enabled via `TransformationContextFactory`. The entire transformed data structure is nested under a default 'data' key.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/transformers.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n[\n    'data' => [\n        'name' => 'Rick Astley',\n        'birth_date' => '06-02-1966',\n    ],\n]\n```\n\n----------------------------------------\n\nTITLE: Handling casts in Laravel models for data object creation\nDESCRIPTION: Shows how to define casts in a Laravel model to automatically convert JSON stored fields into PHP arrays when creating data objects. The casts() method returns an array of attribute type conversions, enabling smooth transformation.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/model-to-data-object.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nclass Artist extends Model\n{\n    public function casts(): array\n    {\n       return [\n            'properties' => 'array'\n       ];\n    }\n}\n\nclass ArtistData extends Data\n{\n    public int $id;\n    public string $first_name;\n    public string $last_name;\n    public array $properties;\n    public CarbonImmutable $created_at;\n    public CarbonImmutable $updated_at;\n}\n```\n\n----------------------------------------\n\nTITLE: Applying AfterOrEqual Validation Attribute\nDESCRIPTION: The `#[AfterOrEqual]` attribute validates that the input date is after or equal to a specified date.  It accepts a date string, a Carbon instance or a field reference. It is used to validate date fields.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/validation-attributes.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n```php\n#[AfterOrEqual('tomorrow')]\npublic Carbon $closure; \n\n#[AfterOrEqual(Carbon::yesterday())]\npublic Carbon $closure; \n\n// Always use field references when referencing other fields\n#[AfterOrEqual(new FieldReference('other_field'))]\npublic Carbon $closure; \n```\n```\n\n----------------------------------------\n\nTITLE: Using Creation Context in Factory - Laravel Data\nDESCRIPTION: Illustrates how to use the creation context, allowing injection of the context into a magic method by including it as a parameter.  The creation context offers manual control over the object creation process.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/factories.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nclass SongData extends Data\n{\n    public function __construct(\n        public string $title,\n        public string $artist,\n    ) {\n    }\n    \n    public static function fromModel(Song $song, CreationContext $context): self\n    {\n        // Do something with the context\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Data Object with Factory - Laravel Data\nDESCRIPTION: Demonstrates creating a SongData object using a factory with specified data. It showcases the basic usage of the factory's `from()` method to instantiate a data object.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/factories.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nSongData::factory()->from(['title' => 'Never gonna give you up', 'artist' => 'Rick Astley']);\n```\n\n----------------------------------------\n\nTITLE: Disabling Global Max Transformation Depth Check in `data.php`\nDESCRIPTION: Illustrates how to completely disable the check for maximum transformation depth by setting the `max_transformation_depth` configuration key to `null` in `data.php`.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/transformers.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n'max_transformation_depth' => null,\n```\n\n----------------------------------------\n\nTITLE: Wrapping a Single Data Object - PHP\nDESCRIPTION: This snippet shows how to wrap a single data object with a custom key when transforming it to JSON. The `wrap()` method is called on the data object instance after creation using `from()`. This will only affect the JSON response and not the results of `toArray()` or `toJson()` calls.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/wrapping.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nSongData::from(Song::first())->wrap('data');\n```\n\n----------------------------------------\n\nTITLE: Creating a Relational Lazy Property - PHP\nDESCRIPTION: This code shows how to create a relational lazy property using `Lazy::whenLoaded()`. The property is included only if the specified relation (`songs`) is loaded on the model (`$album`).\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/lazy-properties.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nLazy::whenLoaded('songs', $album, fn() => SongData::collect($album->songs));\n```\n\n----------------------------------------\n\nTITLE: Collecting Eloquent Collections into Data Objects - Laravel Data - PHP\nDESCRIPTION: Illustrates collecting a Laravel Eloquent collection and converting it into a collection of SongData objects using the collect method. Suitable for use with Eloquent model queries. Requires the Laravel framework, Eloquent models, and the SongData class.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/collections.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nSongData::collect(Song::all()); // return an Eloquent collection of SongData objects\n\n```\n\n----------------------------------------\n\nTITLE: Defining Include Properties at Class Level in PHP\nDESCRIPTION: Example of defining property inclusion rules at the class level by implementing an includeProperties method that returns an array of conditions.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/lazy-properties.md#_snippet_28\n\nLANGUAGE: php\nCODE:\n```\nclass AlbumData extends Data\n{\n    /**\n    * @param Lazy|Collection<SongData> $songs\n    */\n    public function __construct(\n        public string $title,\n        public Lazy|Collection $songs,\n    ) {\n    }\n    \n    public function includeProperties(): array\n    {\n        return [\n            'songs' => $this->title === 'Together Forever',\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Allowing All Query String Includes in PHP\nDESCRIPTION: Demonstrates how to allow all properties to be included via query string by returning null from allowedRequestIncludes.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/lazy-properties.md#_snippet_36\n\nLANGUAGE: php\nCODE:\n```\nclass UserData extends Data\n{\n    public static function allowedRequestIncludes(): ?array\n    {\n        return null;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using AutoWhenLoadedLazy with Relation Name - PHP\nDESCRIPTION: This example shows how to specify the relation name when using `AutoWhenLoadedLazy`. This is useful when the property name doesn't match the relation name.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/lazy-properties.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nclass UserData extends Data\n{\n    public function __construct(\n        public string $title,\n        #[AutoWhenLoadedLazy('favoriteSong')]\n        public Lazy|SongData $favorite_song,\n    ) {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Wrapping - PHP\nDESCRIPTION: This snippet demonstrates how to disable wrapping for a data object or collection. The `withoutWrapping()` method is called on the data object instance.  This is useful when a default or global wrap key is configured, but you want to prevent wrapping in a specific case.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/wrapping.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nSongData::from(Song::first())->withoutWrapping();\n```\n\n----------------------------------------\n\nTITLE: Disabling Property Name Mapping with `transform()` in PHP\nDESCRIPTION: Illustrates how to prevent the remapping of property names (defined via attributes like `MapOutputName`) during transformation by using `TransformationContextFactory::create()->withoutPropertyNameMapping()`. Requires importing `Spatie\\LaravelData\\Support\\Transformation\\TransformationContextFactory`.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/transformers.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nArtistData::from($artist)->transform(\n    TransformationContextFactory::create()->withoutPropertyNameMapping()\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Lazy Properties for Inertia with Laravel Data\nDESCRIPTION: This code shows how to define lazy properties within a Laravel Data object that can be used with Inertia.  `Lazy::inertia` is used for properties that are only included on partial reloads, `Lazy::closure` for properties included on the first visit and optional on reloads, and `Lazy::inertiaDeferred` for loading data after the initial render. These lazy properties improve initial page load times.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/use-with-inertia.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass SongData extends Data\n{\n    public function __construct(\n        public Lazy|string $title,\n        public Lazy|string $artist,\n        public Lazy|string $lyrics,\n    ) {\n    }\n\n    public static function fromModel(Song $song): self\n    {\n        return new self(\n            Lazy::inertia(fn() => $song->title),\n            Lazy::closure(fn() => $song->artist)\n            Lazy::inertiaDeferred(fn() => $song->lyrics)\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Auto Inertia Lazy Attribute on Class Level\nDESCRIPTION: This snippet demonstrates applying the `AutoInertiaLazy` attribute at the class level. This makes all properties of the `SongData` class automatically lazy-loaded when interacting with Inertia.js.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/use-with-inertia.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n#[AutoInertiaLazy]\nclass SongData extends Data\n{\n    public function __construct(\n        public Lazy|string $title,\n        public Lazy|string $artist,\n    ) {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the except() method - PHP\nDESCRIPTION: This code shows how to use the except() method. The data object will show all properties, except for the 'songs' property. Note that this overwrites all other include and exclude statements.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/lazy-properties.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nAlbumData::from(Album::first())->except('songs'); // will show everything except `songs`\n```\n\n----------------------------------------\n\nTITLE: Including Nested Lazy Properties with Wildcard - PHP\nDESCRIPTION: This example demonstrates using a wildcard to include all properties within a nested lazy property.  Here, it includes all properties of the `songs` collection.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/lazy-properties.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nAlbumData::from(Album::first())->include('songs.*');\n```\n\n----------------------------------------\n\nTITLE: Defining Data Object Properties in PHP\nDESCRIPTION: Demonstrates a simple data object class extending `Spatie\\LaravelData\\Data`. Property types and nullability are defined here, which are used by the package to automatically infer validation rules. This class serves as the basis for rule generation.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/validation/auto-rule-inferring.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass ArtistData extends Data{\n    public function __construct(\n        public string $name,\n        public int $age,\n        public ?string $genre,\n    ) {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Response Without Included Properties in JSON\nDESCRIPTION: Example JSON response when no properties are included via query string, showing the default output structure.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/lazy-properties.md#_snippet_32\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\" : \"Ruben Van Assche\"\n}\n```\n\n----------------------------------------\n\nTITLE: Encrypting Laravel Data Objects and Collections in Eloquent Casts in PHP\nDESCRIPTION: Illustrates enabling automatic encryption for Laravel Data collections in Eloquent model casts by adding the 'encrypted' parameter to the cast definition. This leverages Laravel's native encrypted casting features ensuring data objects are encrypted when stored and decrypted transparently when retrieved.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/eloquent-casting.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nclass Artist extends Model\n{\n    protected $casts = [\n        'songs' => DataCollection::class.':'.SongData::class.',encrypted',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Using The Rule Validation Attribute PHP\nDESCRIPTION: Explains the special `Rule` attribute, which allows applying standard Laravel validation rules using array, string, or multiple arguments syntax directly on a property, similar to defining rules in a form request.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/validation/using-validation-attributes.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// using an array\n#[Rule(['required', 'string'])] \npublic string $property\n\n// using a string\n#[Rule('required|string')]\npublic string $property\n\n// using multiple arguments\n#[Rule('required', 'string')]\npublic string $property\n```\n\n----------------------------------------\n\nTITLE: Applying Before Validation Attribute\nDESCRIPTION: This shows the use of the `#[Before]` attribute, which validates that a date is before another date. The date can be specified as a string, a Carbon instance, or a field reference.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/validation-attributes.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n```php\n#[Before('tomorrow')]\npublic Carbon $closure; \n\n#[Before(Carbon::yesterday())]\npublic Carbon $closure; \n\n// Always use field references when referencing other fields\n#[Before(new FieldReference('other_field'))]\npublic Carbon $closure; \n```\n```\n\n----------------------------------------\n\nTITLE: Define a Data Object with Constructor - PHP\nDESCRIPTION: This code defines a simple data object `SongData` extending the `Data` class with a constructor that initializes the `title` and `artist` properties. This shows basic inheritance and property definition within a data object.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/creating-a-data-object.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass SongData extends Data\n{\n    public function __construct(\n        public string $title,\n        public string $artist,\n    ) {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Abstract Data Objects with Eloquent Casting in PHP\nDESCRIPTION: Demonstrates defining an abstract data object class with multiple concrete subclasses and casting an Eloquent model attribute to the abstract type. The model stores the concrete subclass type and data as a JSON string, allowing correct instantiation when retrieving. This snippet shows class inheritance, constructor handling, and polymorphic storage of different child data objects with Laravel Data and Eloquent.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/eloquent-casting.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nabstract class RecordConfig extends Data\n{\n    public function __construct(\n        public int $tracks,\n    ) {}\n}\n\nclass CdRecordConfig extends RecordConfig\n{\n    public function __construct(\n        int $tracks,\n        public int $bytes,\n    ) {\n        parent::__construct($tracks);\n    }\n}\n\nclass VinylRecordConfig extends RecordConfig\n{\n    public function __construct(\n        int $tracks,\n        public int $rpm,\n    ) {\n        parent::__construct($tracks);\n    }\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nclass Record extends Model\n{\n    protected $casts = [\n        'config' => RecordConfig::class,\n    ];\n}\n```\n\nLANGUAGE: php\nCODE:\n```\n$cdRecord = Record::create([\n    'config' => new CdRecordConfig(tracks: 12, bytes: 1000),\n]);\n\n$vinylRecord = Record::create([\n    'config' => new VinylRecordConfig(tracks: 12, rpm: 33),\n]);\n\n$cdRecord->config; // CdRecordConfig object\n$vinylRecord->config; // VinylRecordConfig object\n```\n\n----------------------------------------\n\nTITLE: Collecting Paginator Results - Laravel Data - PHP\nDESCRIPTION: Shows collecting paginated query results and converting them into collections of SongData objects using the collect method. Supports LengthAwarePaginator and CursorPaginator instances. Requires Laravel's pagination and SongData class.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/collections.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nSongData::collect(Song::paginate()); // return a LengthAwarePaginator of SongData objects\n\n// or\n\nSongData::collect(Song::cursorPaginate()); // return a CursorPaginator of SongData objects\n\n```\n\n----------------------------------------\n\nTITLE: Applying Date Validation Attribute\nDESCRIPTION: The `#[Date]` attribute validates that the input is a valid date format, typically in YYYY-MM-DD format.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/validation-attributes.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n```php\n#[Date]\npublic Carbon $date; \n```\n```\n\n----------------------------------------\n\nTITLE: Polymorphic JSON Storage Format for Abstract Data Objects\nDESCRIPTION: This JSON snippet illustrates the storage format for polymorphic Laravel Data objects used as Eloquent cast attributes. The object includes a 'type' key holding the fully qualified class name of the concrete child data object, and a 'data' key containing the serialized properties. This enables automatic resolution and instantiation of the proper subclass when the model attribute is retrieved.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/eloquent-casting.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"\\\\App\\\\Data\\\\CdRecordConfig\",\n    \"data\": {\n        \"tracks\": 12,\n        \"bytes\": 1000\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Between Validation Attribute\nDESCRIPTION: The `#[Between]` attribute validates that a numeric input falls within a specified range. The range is defined by minimum and maximum values.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/validation-attributes.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n```php\n#[Between(3.14, 42)]\npublic int $closure; \n```\n```\n\n----------------------------------------\n\nTITLE: Retrieving Data Object from a Laravel Model Instance in PHP\nDESCRIPTION: This snippet demonstrates retrieving the data object for a model instance using the getData method enabled by the WithData trait. When called on a Song model retrieved by firstOrFail, getData returns an instance of SongData. Assumes the model uses the WithData trait and has a $dataClass property configured. Returns the data object representing the model.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/get-data-from-a-class-quickly.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nSong::firstOrFail($id)->getData(); // A SongData object\n```\n\n----------------------------------------\n\nTITLE: Validation Rules for Nullable Nested Data (Null)\nDESCRIPTION: These are the validation rules applied when the nested object key is either not provided or its value is `null`. The 'artist' field is simply marked as 'nullable'.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/validation/nesting-data.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n[\n    'title' => ['required', 'string'],\n    'artist' => ['nullable'],\n]\n```\n\n----------------------------------------\n\nTITLE: Setting Basic Default Values in Laravel Data Objects Using Constructor\nDESCRIPTION: Example of defining default values for simple types (strings) in a Laravel Data object using the class constructor.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/defaults.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass SongData extends Data\n{\n    public function __construct(\n        public string $title = 'Never Gonna Give You Up',\n        public string $artist = 'Rick Astley',\n    ) {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying DateFormat Validation Attribute\nDESCRIPTION: The `#[DateFormat]` attribute validates that the input date adheres to a specific format, defined by the specified format string or an array of format strings.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/validation-attributes.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n```php\n#[DateFormat('d-m-Y')]\npublic Carbon $date;\n\n#[DateFormat(['Y-m-d', 'Y-m-d H:i:s'])]\npublic Carbon $date;  \n```\n```\n\n----------------------------------------\n\nTITLE: Setting Max Transformation Depth per Call in PHP\nDESCRIPTION: Demonstrates setting a specific maximum transformation depth for an individual `transform()` operation using `TransformationContextFactory::create()->maxDepth()`. This overrides the global setting for this specific call. Requires importing `Spatie\\LaravelData\\Support\\Transformation\\TransformationContextFactory`.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/transformers.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nArtistData::from($artist)->transform(\n    TransformationContextFactory::create()->maxDepth(20)\n);\n```\n\n----------------------------------------\n\nTITLE: Type-Hinting Spatie Data Collection with array<> Generic (PHP)\nDESCRIPTION: Modern PHP type-hinting supports generic syntax in PHPDoc. This snippet demonstrates using the '@var array<SongData>' annotation to clearly indicate that the array property '$songs' contains items of the SongData type.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/nesting.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Data\\SongData;\n\nclass AlbumData extends Data\n{\n    /** @var array<SongData> */\n    public array $songs;\n}\n```\n\n----------------------------------------\n\nTITLE: Applying After Validation Attribute\nDESCRIPTION: The `#[After]` validation attribute checks if the input date is after a given date.  It accepts a date string, a Carbon instance or a field reference. It is used to validate date fields.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/validation-attributes.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n```php\n#[After('tomorrow')]\npublic Carbon $closure; \n\n#[After(Carbon::yesterday())]\npublic Carbon $closure; \n\n// Always use field references when referencing other fields\n#[After(new FieldReference('other_field'))]\npublic Carbon $closure; \n```\n```\n\n----------------------------------------\n\nTITLE: Type-Hinting Laravel Collection with Spatie Data Items (PHP)\nDESCRIPTION: When using Laravel's Collection class for nested Data objects, you should use generics in the '@var' annotation to specify both the collection's key type and the value type (the Data object). This example shows a Collection with integer keys and SongData values.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/nesting.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Data\\SongData;\nuse Illuminate\\Support\\Collection;\n\nclass AlbumData extends Data\n{\n    /** @var Collection<int, SongData> */\n    public Collection $songs;\n}\n```\n\n----------------------------------------\n\nTITLE: Applying DoesntStartWith Validation Attribute\nDESCRIPTION: The `#[DoesntStartWith]` attribute validates that the input does *not* start with a specified substring or any of the substrings provided in an array.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/validation-attributes.md#_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n```php\n#[DoesntStartWith('a')]\npublic string $closure;\n\n#[DoesntStartWith(['a', 'b'])]\npublic string $closure;\n\n#[DoesntStartWith('a', 'b')]\npublic string $closure;\n```\n```\n\n----------------------------------------\n\nTITLE: Applying AcceptedIf Validation Attribute\nDESCRIPTION: The `#[AcceptedIf]` attribute validates if the input field is accepted *only if* another field matches a specific value.  It takes the other field's name and the value to compare against as arguments.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/validation-attributes.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n```php\n#[AcceptedIf('other_field', 'equals_this')]\npublic bool $closure; \n```\n```\n\n----------------------------------------\n\nTITLE: Filling Data Properties from Route Parameter Properties\nDESCRIPTION: This code snippet shows how `FromRouteParameterProperty` is used to inject values from properties of a route parameter (e.g., a model). It fills the `$id` property of `SongData` with the `id` property of the `Song` model bound to the route parameter.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/injecting-property-values.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nRoute::patch('/songs/{song}', [SongController::class, 'update']);\n\nclass SongData extends Data {\n    #[FromRouteParameterProperty('song')]\n    public int $id;\n    public string $name;\n}\n```\n\n----------------------------------------\n\nTITLE: Filling Properties with the Entire Container\nDESCRIPTION: Shows how to inject the entire Laravel container into a data object property using the `FromContainer` attribute.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/injecting-property-values.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nclass SongData extends Data {\n    #[FromContainer]\n    public Container $container;\n}\n```\n\n----------------------------------------\n\nTITLE: Applying AlphaNumeric Validation Attribute\nDESCRIPTION: The `#[AlphaNumeric]` attribute validates that the input contains only alpha-numeric characters.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/validation-attributes.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n```php\n#[AlphaNumeric]\npublic string $closure; \n```\n```\n\n----------------------------------------\n\nTITLE: Returning a Paginator of Data Objects in Controller (PHP)\nDESCRIPTION: Demonstrates returning a paginated set of Laravel Data objects from a controller. `SongData::collect()` creates the data collection from a paginated result set from the `Song` model using `Song::paginate()`. Requires Laravel Data and a Song model with pagination configured.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/from-data-to-resource.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nSongData::collect(Song::paginate());\n```\n\n----------------------------------------\n\nTITLE: Filling Properties from Container Dependencies\nDESCRIPTION: Demonstrates using the `FromContainer` attribute to inject dependencies from the Laravel container into data objects. It instantiates the `SongService` dependency and assigns it to the `$song_service` property.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/injecting-property-values.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nclass SongData extends Data {\n    #[FromContainer(SongService::class)]\n    public SongService $song_service;\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Data Pipeline with Custom Pipe PHP\nDESCRIPTION: Shows how to extend the default or parent data pipeline definition by calling `parent::pipeline()` and adding an additional pipe using a method like `firstThrough`. This allows adding custom processing steps, such as guessing casing for keys, while retaining the standard pipeline functionality, inserting the new pipe at a specific position in the chain.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/pipeline.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nclass SongData extends Data\n{\n    public static function pipeline(): DataPipeline\n    {\n        return parent::pipeline()->firstThrough(GuessCasingForKeyDataPipe::class);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Output of empty() Method (JSON)\nDESCRIPTION: Displays the JSON output when the `empty()` method is called on a Data object with no default values, resulting in an object with null properties.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/from-data-to-resource.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": null,\n    \"artist\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Using AutoLazy Attribute on Property - PHP\nDESCRIPTION: This snippet shows how to use the `AutoLazy` attribute on a property level. Only the specified property is automatically wrapped in a Lazy Closure.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/lazy-properties.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nclass UserData extends Data\n{\n    public function __construct(\n        public string $title,\n        #[AutoLazy]\n        public Lazy|SongData $favorite_song,\n    ) {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Complex Default Values in Laravel Data Objects\nDESCRIPTION: Example showing how to set default values for complex types like CarbonImmutable objects by using class properties and initializing them in the constructor.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/defaults.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass SongData extends Data\n{\n    #[Date]\n    public CarbonImmutable|Optional $date;\n\n    public function __construct(\n        public string $title = 'Never Gonna Give You Up',\n        public string $artist = 'Rick Astley',\n    ) {\n        $this->date = CarbonImmutable::create(1987, 7, 27);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Validation Strategy to Disabled in Laravel Data Config\nDESCRIPTION: This configuration option snippet shows how to set the `validation_strategy` in the Laravel Data package configuration file. Setting it to `Disabled` completely disables automatic validation for all data objects, requiring manual validation whenever necessary.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/validation/introduction.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n'validation_strategy' => \\Spatie\\LaravelData\\Support\\Creation\\ValidationStrategy::Disabled->value,\n```\n\n----------------------------------------\n\nTITLE: Empty Call with Defaults (PHP)\nDESCRIPTION: Shows how to override the default values in an `empty` call by passing an associative array to it.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/from-data-to-resource.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nSongData::empty([\n    'name' => 'Title of the song here',\n    'artist' => 'An artist'\n]);\n```\n\n----------------------------------------\n\nTITLE: Changing Time Zone when Transforming Dates\nDESCRIPTION: Setting a specific time zone when transforming a date property for output. This adjusts the time representation to the specified time zone when the data is transformed.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/working-with-dates.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n#[WithTransformer(DateTimeInterfaceTransformer::class, setTimeZone: 'Europe/Brussels')]\npublic DateTime $date\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Transformers in `data.php`\nDESCRIPTION: Shows the default configuration for global transformers within the `data.php` file. It maps interfaces or classes (`DateTimeInterface`, `Arrayable`) to their corresponding transformer classes (`DateTimeInterfaceTransformer`, `ArrayableTransformer`) provided by the package. These are used when no local transformer is specified.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/transformers.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Contracts\\Support\\Arrayable;\nuse Spatie\\LaravelData\\Transformers\\ArrayableTransformer;\nuse Spatie\\LaravelData\\Transformers\\DateTimeInterfaceTransformer;\n\n/*\n * Global transformers will take complex types and transform them into simple\n * types.\n */\n'transformers' => [\n    DateTimeInterface::class => DateTimeInterfaceTransformer::class,\n    Arrayable::class => ArrayableTransformer::class,\n],\n```\n\n----------------------------------------\n\nTITLE: Applying Bail Validation Attribute\nDESCRIPTION: The `#[Bail]` attribute is used to stop validation after the first error.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/validation-attributes.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n```php\n#[Bail]\npublic string $closure; \n```\n```\n\n----------------------------------------\n\nTITLE: Applying IP Validation Attribute\nDESCRIPTION: The `#[IP]` attribute validates that the input is a valid IP address (both IPv4 and IPv6).\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/validation-attributes.md#_snippet_44\n\nLANGUAGE: php\nCODE:\n```\n```php\n#[IP]\npublic string $closure; \n```\n```\n\n----------------------------------------\n\nTITLE: Create Data Object from JSON String - PHP\nDESCRIPTION: This snippet demonstrates creating a `SongData` object from a JSON string using the `from` method. The JSON string is expected to have keys that match the data object properties.  The package handles the JSON decoding and property assignment.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/creating-a-data-object.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nSongData::from('{\"title\" : \"Never Gonna Give You Up\",\"artist\" : \"Rick Astley\"}');\n```\n\n----------------------------------------\n\nTITLE: Implementing InjectsPropertyValue Interface\nDESCRIPTION: Illustrates the `InjectsPropertyValue` interface, which is used to create custom attributes to inject values into data properties.  It outlines the `resolve` and `shouldBeReplacedWhenPresentInPayload` methods, providing a framework for custom attribute implementation.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/injecting-property-values.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\ninterface InjectsPropertyValue\n{\n    public function resolve(\n        DataProperty $dataProperty,\n        mixed $payload,\n        array $properties,\n        CreationContext $creationContext\n    ): mixed;\n\n    public function shouldBeReplacedWhenPresentInPayload() : bool;\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Property Methods with Closure Conditions in PHP\nDESCRIPTION: Demonstrates using a closure function to evaluate conditions based on the data object's values for including, excluding, only including, or excepting properties.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/lazy-properties.md#_snippet_27\n\nLANGUAGE: php\nCODE:\n```\nAlbumData::from(Album::first())->includeWhen('songs', fn(AlbumData $data) => count($data->songs) > 0);\nAlbumData::from(Album::first())->excludeWhen('songs', fn(AlbumData $data) => count($data->songs) > 0);\nAlbumData::from(Album::first())->onlyWhen('songs', fn(AlbumData $data) => count($data->songs) > 0);\nAlbumData::from(Album::first())->exceptWhen('songs', fn(AlbumData $data) => count($data->songs) > 0);\n```\n\n----------------------------------------\n\nTITLE: Making a Data Object Wireable for Livewire (PHP)\nDESCRIPTION: Shows how to make a `SongData` class compatible with Livewire by implementing the `Wireable` interface and using the `WireableData` trait provided by the `spatie/laravel-data` package. This allows Livewire to properly handle the data object property.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/use-with-livewire.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Contracts\\Support\\Wireable;\nuse Spatie\\LaravelData\\Data;\nuse Spatie\\LaravelData\\Concerns\\WireableData;\n\nclass SongData extends Data implements Wireable\n{\n    use WireableData;\n\n    public function __construct(\n        public string $title,\n        public string $artist,\n    ) {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying MacAddress Validation Attribute\nDESCRIPTION: The `#[MacAddress]` attribute validates that the input is a valid MAC address.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/validation-attributes.md#_snippet_52\n\nLANGUAGE: php\nCODE:\n```\n```php\n#[MacAddress]\npublic string $closure; \n```\n```\n\n----------------------------------------\n\nTITLE: Creating Laravel Data Object Using Mapped Names\nDESCRIPTION: This snippet shows how to instantiate a `ContractData` object created using the `from` method.  The input array keys will be mapped to the data object's properties based on the attributes defined (in the previous snippet). Requires the Spatie Laravel Data package. Input is an array containing key-value pairs.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/mapping-property-names.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nContractData::from(['name' => 'Rick Astley', 'record_company' => 'RCA Records']);\n```\n\n----------------------------------------\n\nTITLE: Applying Confirmed Validation Attribute\nDESCRIPTION: The `#[Confirmed]` attribute checks if the input field has a matching confirmation field. It typically assumes the confirmation field name is the original field name with \"_confirmation\" appended.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/validation-attributes.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n```php\n#[Confirmed]\npublic string $closure; \n```\n```\n\n----------------------------------------\n\nTITLE: Casting Data Collections as Eloquent Attributes Using Laravel Data in PHP\nDESCRIPTION: Defines an Eloquent model attribute cast to a collection of Laravel Data objects using Spatie's DataCollection. The 'songs' attribute is cast to a DataCollection of SongData objects, enabling automatic transformation from arrays or data objects to a strongly typed collection when creating or retrieving models.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/eloquent-casting.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nclass Artist extends Model\n{\n    protected $casts = [\n        'songs' => DataCollection::class . ':' . SongData::class,\n    ];\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nArtist::create([\n    'songs' => [\n        new SongData(title: 'Never gonna give you up', artist: 'Rick Astley'),\n        new SongData(title: 'Together Forever', artist: 'Rick Astley'),\n    ],\n]);\n```\n\nLANGUAGE: php\nCODE:\n```\nArtist::create([\n    'songs' => [\n        ['title' => 'Never gonna give you up', 'artist' => 'Rick Astley'],\n        ['title' => 'Together Forever', 'artist' => 'Rick Astley']\n    ],\n]);\n```\n\n----------------------------------------\n\nTITLE: Applying BooleanType Validation Attribute\nDESCRIPTION: The `#[BooleanType]` attribute validates that the input is a boolean value.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/validation-attributes.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n```php\n#[BooleanType]\npublic bool $closure; \n```\n```\n\n----------------------------------------\n\nTITLE: Including Nested Properties at Class Level in PHP\nDESCRIPTION: Shows how to include nested properties (using dot notation) at the class level by implementing an includeProperties method.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/lazy-properties.md#_snippet_29\n\nLANGUAGE: php\nCODE:\n```\nclass AlbumData extends Data\n{\n    /**\n    * @param Lazy|Collection<SongData> $songs\n    */\n    public function __construct(\n        public string $title,\n        public Lazy|Collection $songs,\n    ) {\n    }\n    \n    public function includeProperties(): array\n    {\n        return [\n            'songs.title' => $this->title === 'Together Forever',\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping to Snake Case using MapInputName in Laravel Data\nDESCRIPTION: This example demonstrates using the `MapInputName` attribute with `SnakeCaseMapper::class` to automatically convert all input property names to snake_case. The properties in the `ContractData` class will be mapped from snake_case input. Requires the Spatie Laravel Data package and `SnakeCaseMapper`. Input is an array, and the output is a data object with mapped property names.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/mapping-property-names.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Spatie\\LaravelData\\Data;\nuse Spatie\\LaravelData\\Attributes\\MapInputName;\nuse Spatie\\LaravelData\\Support\\SnakeCaseMapper;\n\n#[MapInputName(SnakeCaseMapper::class)]\nclass ContractData extends Data\n{\n    public function __construct(\n        public string $name,\n        public string $recordCompany,\n    ) {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing RuleInferrer Interface (PHP)\nDESCRIPTION: This code snippet defines the `RuleInferrer` interface, which is the core component for creating custom rule inferrers. Implementing this interface requires defining a `handle` method that receives a `DataProperty`, `PropertyRules`, and `ValidationContext`.  It is responsible for inferring and modifying validation rules and must return a `PropertyRules` collection. No specific dependencies other than the required types from the Laravel Data package are required for the core interface definition. This interface is the base for all other rule inferrers and should be used in conjunction with the other provided classes.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/creating-a-rule-inferrer.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\ninterface RuleInferrer\n{\n    public function handle(DataProperty $property, PropertyRules $rules, ValidationContext $context): PropertyRules;\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Digits Validation Attribute\nDESCRIPTION: The `#[Digits]` attribute validates that the input is an integer with a specific number of digits. The number of digits is passed as an argument.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/validation-attributes.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n```php\n#[Digits(10)]\npublic int $closure; \n```\n```\n\n----------------------------------------\n\nTITLE: Creating a Data Object with a Collection Property - Laravel Data - PHP\nDESCRIPTION: Defines a data object with a property that is a Laravel Collection of SongData. The AlbumData class expects a title and a songs property, each being a SongData object. Provides an example of instantiating AlbumData with an array of songs, which are converted into a Collection of SongData. Requires the SongData and AlbumData classes and Laravel Collection.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/collections.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Data\\SongData;\nuse Illuminate\\Support\\Collection;\n\nclass AlbumData extends Data\n{    \n    public string $title;\n    /** @var Collection<int, SongData> */\n    public Collection $songs;\n}\n\nAlbumData::from([\n    'title' => 'Never Gonna Give You Up',\n    'songs' => [\n        ['title' => 'Never Gonna Give You Up', 'artist' => 'Rick Astley'],\n        ['title' => 'Giving Up on Love', 'artist' => 'Rick Astley'],\n    ]\n]);\n\n```\n\n----------------------------------------\n\nTITLE: Casting Dates from a Different Time Zone\nDESCRIPTION: Specifying the source time zone when casting dates that are in a different time zone than the application's default. The date will maintain the same point in time across time zones.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/working-with-dates.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n#[WithCast(DateTimeInterfaceCast::class, timeZone: 'UTC')]\npublic DateTime $date\n```\n\n----------------------------------------\n\nTITLE: Defining Property Mappings using Attributes in a Laravel Data Object (PHP)\nDESCRIPTION: This PHP code defines a `ContractData` class extending `Spatie\\LaravelData\\Data`. It utilizes constructor property promotion and the `#[MapName]` attribute to link class properties to differently formatted keys in incoming/outgoing payloads using various built-in mappers like `CamelCaseMapper`, `SnakeCaseMapper`, `ProvidedNameMapper`, `StudlyCaseMapper`, `LowerCaseMapper`, and `UpperCaseMapper`.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/available-property-mappers.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Spatie\\LaravelData\\Attributes\\MapName;\nuse Spatie\\LaravelData\\Mappers\\CamelCaseMapper;\nuse Spatie\\LaravelData\\Mappers\\ProvidedNameMapper;\nuse Spatie\\LaravelData\\Mappers\\SnakeCaseMapper;\nuse Spatie\\LaravelData\\Mappers\\StudlyCaseMapper;\nuse Spatie\\LaravelData\\Mappers\\LowerCaseMapper;\nuse Spatie\\LaravelData\\Mappers\\UpperCaseMapper;\nuse Spatie\\LaravelData\\Data;\n\nclass ContractData extends Data\n{\n    public function __construct(\n        #[MapName(CamelCaseMapper::class)]\n        public string $name,\n        #[MapName(SnakeCaseMapper::class)]\n        public string $recordCompany,\n        #[MapName(new ProvidedNameMapper('country field'))]\n        public string $country,\n        #[MapName(StudlyCaseMapper::class)]\n        public string $cityName,\n        #[MapName(LowerCaseMapper::class)]\n        public string $addressLine1,\n        #[MapName(UpperCaseMapper::class)]\n        public string $addressLine2,\n    ) {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying IntegerType Validation Attribute\nDESCRIPTION: The `#[IntegerType]` attribute validates that the input is an integer.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/validation-attributes.md#_snippet_43\n\nLANGUAGE: php\nCODE:\n```\n```php\n#[IntegerType]\npublic int $closure; \n```\n```\n\n----------------------------------------\n\nTITLE: Implementing a Castable Value Object with Anonymous Cast - PHP\nDESCRIPTION: This sample defines an Email value object that implements the Castable interface. Its static dataCastUsing method returns an anonymous implementation of Cast, encapsulating the casting logic directly within the value object. The cast method returns a new Email instance from the given value. Dependencies: spatie/laravel-data, PHP 7.4+ for property promotion and anonymous classes, related context classes.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/creating-a-cast.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace Spatie\\LaravelData\\Tests\\Fakes\\Castables;\n\nuse Spatie\\LaravelData\\Casts\\Cast;\nuse Spatie\\LaravelData\\Casts\\Castable;\nuse Spatie\\LaravelData\\Support\\Creation\\CreationContext;\nuse Spatie\\LaravelData\\Support\\DataProperty;\n\nclass Email implements Castable\n{\n  public function __construct(public string $email) {\n\n  }\n\n  public static function dataCastUsing(...$arguments): Cast\n  {\n    return new class implements Cast {\n        public function cast(DataProperty $property, mixed $value, array $properties, CreationContext $context): mixed\n        {\n            return new Email($value);\n        }\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying DigitsBetween Validation Attribute\nDESCRIPTION: The `#[DigitsBetween]` attribute validates that the input is an integer, and the number of digits is within a specified range (inclusive).  The minimum and maximum number of digits are passed as arguments.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/validation-attributes.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n```php\n#[DigitsBetween(2, 10)]\npublic int $closure; \n```\n```\n\n----------------------------------------\n\nTITLE: Annotating Data Classes for TypeScript Transformation\nDESCRIPTION: Explains how to mark PHP data classes with annotations or PHP 8 attributes, such as '/** @typescript */' or '#[TypeScript]', to enable their transformation into TypeScript definitions. These annotations tell the transformer which classes to include in the generated types.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/typescript.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n// Example usage in PHP class:\n// /** @typescript */\n// class DataObject { ... }\n\n// Or using PHP 8 attributes:\n// #[TypeScript]\n// class DataObject { ... }\n```\n\n----------------------------------------\n\nTITLE: Defining Spatie Laravel Data Configuration in PHP\nDESCRIPTION: This PHP snippet represents the contents of the published Laravel Data configuration file. It specifies settings for date formats, transformers, casts, validation, caching, naming strategies, and integration features. Dependencies include the Spatie Laravel Data package and potential Laravel core classes. The configuration is intended for placement in Laravel's config/ directory and supports customization for data handling behaviors, transformation logic, global features, validation strategies, and more. Key parameters involve feature flags, transformer and cast mappings, caching directories and strategies, and developer tool integrations. Actual values may need adjustment based on application requirements.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/installation-setup.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    /*\n     * The package will use this format when working with dates. If this option\n     * is an array, it will try to convert from the first format that works,\n     * and will serialize dates using the first format from the array.\n     */\n    'date_format' => DATE_ATOM,\n\n    /*\n     * When transforming or casting dates, the following timezone will be used to\n     * convert the date to the correct timezone. If set to null no timezone will\n     * be passed.\n     */\n    'date_timezone' => null,\n\n    /*\n     * It is possible to enable certain features of the package, these would otherwise\n     * be breaking changes, and thus they are disabled by default. In the next major\n     * version of the package, these features will be enabled by default.\n     */\n    'features' => [\n        'cast_and_transform_iterables' => false,\n\n        /*\n         * When trying to set a computed property value, the package will throw an exception.\n         * You can disable this behaviour by setting this option to true, which will then just\n         * ignore the value being passed into the computed property and recalculate it.\n         */\n        'ignore_exception_when_trying_to_set_computed_property_value' => false,\n    ],\n\n    /*\n     * Global transformers will take complex types and transform them into simple\n     * types.\n     */\n    'transformers' => [\n        DateTimeInterface::class => \\Spatie\\LaravelData\\Transformers\\DateTimeInterfaceTransformer::class,\n        \\Illuminate\\Contracts\\Support\\Arrayable::class => \\Spatie\\LaravelData\\Transformers\\ArrayableTransformer::class,\n        BackedEnum::class => Spatie\\LaravelData\\Transformers\\EnumTransformer::class,\n    ],\n\n    /*\n     * Global casts will cast values into complex types when creating a data\n     * object from simple types.\n     */\n    'casts' => [\n        DateTimeInterface::class => Spatie\\LaravelData\\Casts\\DateTimeInterfaceCast::class,\n        BackedEnum::class => Spatie\\LaravelData\\Casts\\EnumCast::class,\n//        Enumerable::class => Spatie\\LaravelData\\Casts\\EnumerableCast::class,\n    ],\n\n    /*\n     * Rule inferrers can be configured here. They will automatically add\n     * validation rules to properties of a data object based upon\n     * the type of the property.\n     */\n    'rule_inferrers' => [\n        Spatie\\LaravelData\\RuleInferrers\\SometimesRuleInferrer::class,\n        Spatie\\LaravelData\\RuleInferrers\\NullableRuleInferrer::class,\n        Spatie\\LaravelData\\RuleInferrers\\RequiredRuleInferrer::class,\n        Spatie\\LaravelData\\RuleInferrers\\BuiltInTypesRuleInferrer::class,\n        Spatie\\LaravelData\\RuleInferrers\\AttributesRuleInferrer::class,\n    ],\n\n    /*\n     * Normalizers return an array representation of the payload, or null if\n     * it cannot normalize the payload. The normalizers below are used for\n     * every data object, unless overridden in a specific data object class.\n     */\n    'normalizers' => [\n        Spatie\\LaravelData\\Normalizers\\ModelNormalizer::class,\n        // Spatie\\LaravelData\\Normalizers\\FormRequestNormalizer::class,\n        Spatie\\LaravelData\\Normalizers\\ArrayableNormalizer::class,\n        Spatie\\LaravelData\\Normalizers\\ObjectNormalizer::class,\n        Spatie\\LaravelData\\Normalizers\\ArrayNormalizer::class,\n        Spatie\\LaravelData\\Normalizers\\JsonNormalizer::class,\n    ],\n\n    /*\n     * Data objects can be wrapped into a key like 'data' when used as a resource,\n     * this key can be set globally here for all data objects. You can pass in\n     * `null` if you want to disable wrapping.\n     */\n    'wrap' => null,\n\n    /*\n     * Adds a specific caster to the Symphony VarDumper component which hides\n     * some properties from data objects and collections when being dumped\n     * by `dump` or `dd`. Can be 'enabled', 'disabled' or 'development'\n     * which will only enable the caster locally.\n     */\n    'var_dumper_caster_mode' => 'development',\n\n    /*\n     * It is possible to skip the PHP reflection analysis of data objects\n     * when running in production. This will speed up the package. You\n     * can configure where data objects are stored and which cache\n     * store should be used.\n     *\n     * Structures are cached forever as they'll become stale when your\n     * application is deployed with changes. You can set a duration\n     * in seconds if you want the cache to clear after a certain\n     * timeframe.\n     */\n    'structure_caching' => [\n        'enabled' => true,\n        'directories' => [app_path('Data')],\n        'cache' => [\n            'store' => env('CACHE_STORE', env('CACHE_DRIVER', 'file')),\n            'prefix' => 'laravel-data',\n            'duration' => null,\n        ],\n        'reflection_discovery' => [\n            'enabled' => true,\n            'base_path' => base_path(),\n            'root_namespace' => null,\n        ],\n    ],\n\n    /*\n     * A data object can be validated when created using a factory or when calling the from\n     * method. By default, only when a request is passed the data is being validated. This\n     * behaviour can be changed to always validate or to completely disable validation.\n     */\n    'validation_strategy' => \\Spatie\\LaravelData\\Support\\Creation\\ValidationStrategy::OnlyRequests->value,\n\n    /*\n     * A data object can map the names of its properties when transforming (output) or when\n     * creating (input). By default, the package will not map any names. You can set a\n     * global strategy here, or override it on a specific data object.\n     */\n    'name_mapping_strategy' => [\n        'input' => null,\n        'output' => null,\n    ],\n\n    /*\n     * When using an invalid include, exclude, only or except partial, the package will\n     * throw an exception. You can disable this behaviour by setting this option to true.\n     */\n    'ignore_invalid_partials' => false,\n\n    /*\n     * When transforming a nested chain of data objects, the package can end up in an infinite\n     * loop when including a recursive relationship. The max transformation depth can be\n     * set as a safety measure to prevent this from happening. When set to null, the\n     * package will not enforce a maximum depth.\n     */\n    'max_transformation_depth' => null,\n\n    /*\n     * When the maximum transformation depth is reached, the package will throw an exception.\n     * You can disable this behaviour by setting this option to true which will return an\n     * empty array.\n     */\n    'throw_when_max_transformation_depth_reached' => true,\n\n    /*\n     * When using the `make:data` command, the package will use these settings to generate\n     * the data classes. You can override these settings by passing options to the command.\n     */\n    'commands' => [\n\n        /*\n         * Provides default configuration for the `make:data` command. These settings can be overridden with options\n         * passed directly to the `make:data` command for generating single Data classes, or if not set they will\n         * automatically fall back to these defaults. See `php artisan make:data --help` for more information\n         */\n        'make' => [\n\n            /*\n             * The default namespace for generated Data classes. This exists under the application's root namespace,\n             * so the default 'Data` will end up as '\\App\\Data', and generated Data classes will be placed in the\n             * app/Data/ folder. Data classes can live anywhere, but this is where `make:data` will put them.\n             */\n            'namespace' => 'Data',\n\n            /*\n             * This suffix will be appended to all data classes generated by make:data, so that they are less likely\n             * to conflict with other related classes, controllers or models with a similar name without resorting\n             * to adding an alias for the Data object. Set to a blank string (not null) to disable.\n             */\n            'suffix' => 'Data',\n        ],\n    ],\n\n    /*\n     * When using Livewire, the package allows you to enable or disable the synths\n     * these synths will automatically handle the data objects and their\n     * properties when used in a Livewire component.\n     */\n    'livewire' => [\n        'enable_synths' => false,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: JSON for Empty Object (JSON)\nDESCRIPTION: Shows the JSON structure of an \"empty\" SongData object, with all string properties set to null. This is intended as a blueprint for the front end when creating a new model. No dependencies are needed.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/from-data-to-resource.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": null,\n    \"artist\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Structure Caching in data.php (PHP)\nDESCRIPTION: This snippet shows how to configure the caching mechanism for Laravel Data structures within the `data.php` config file. It allows specifying the cache store (e.g., redis) and a prefix for cache keys.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/performance.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n'structure_caching' => [\n    'cache' => [\n        'store' => 'redis',\n        'prefix' => 'laravel-data',\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: Data Object with Default String Values (PHP)\nDESCRIPTION: Shows how to define default string values for properties within the constructor of a Laravel Data object. These defaults will be used by the `empty()` method.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/from-data-to-resource.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nclass SongData extends Data\n{\n    public function __construct(\n        public string $title = 'Title of the song here',\n        public string $artist = \"An artist\",\n    ) {\n    }\n    \n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Filling Properties from Container Dependencies with Parameters\nDESCRIPTION: Demonstrates how to pass parameters to a dependency injected from the container using the `FromContainer` attribute. It specifies a 'year' parameter for `SongService` during instantiation.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/injecting-property-values.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nclass SongData extends Data {\n    #[FromContainer(SongService::class, parameters: ['year' => 1984])]\n    public SongService $song_service;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Laravel-Data Directory for Parser Discovery (PHP)\nDESCRIPTION: This snippet adds the `laravel-data` directory to the list of directories to be scanned when using parser-based discovery. This is needed because, without reflection, the parser needs explicit locations to find the data objects definitions within Laravel Data.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/performance.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n'structure_caching' => [\n    'directories' => [\n        app_path('Data'),\n        base_path('vendor/spatie/laravel-data/src'),\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: Appending Computed Properties Using Closures in spatie/laravel-data (PHP)\nDESCRIPTION: This snippet shows how to use a closure to dynamically compute an extra property when appending with the additional method in spatie/laravel-data. The closure receives the data object (SongData) as a parameter and can reference its properties to compute a result (e.g., generating a slug from the title). Requires access to the Str helper; expects the data object to have a title property. Adds computed keys to the resulting array structure.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/appending-properties.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nSongData::from(Song::first())->additional([\n    'slug' => fn(SongData $songData) => Str::slug($songData->title),\n]);\n```\n\n----------------------------------------\n\nTITLE: Creating a Data Object with Missing Optional Properties in PHP\nDESCRIPTION: Demonstrates how to create a SongData object without providing a value for the optional artist property. The property will automatically be set to Optional.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/optional-properties.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nSongData::from([\n    'title' => 'Never gonna give you up'\n]);\n```\n\n----------------------------------------\n\nTITLE: Resulting Validation Rules After Using WithoutValidation\nDESCRIPTION: The resulting validation rules array after applying the WithoutValidation attribute, showing that the 'name' property is no longer included in the validation rules.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/validation/skipping-validation.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n[\n    'first_name' => ['required', 'string'],\n    'last_name' => ['required', 'string'],\n]\n```\n\n----------------------------------------\n\nTITLE: Example Output of `transform()` without Value Transformation\nDESCRIPTION: Shows the array output when `transform()` is called with value transformation disabled via `TransformationContextFactory`. The `birth_date` property retains its `Carbon` object type instead of being converted to a string.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/transformers.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n[\n    'name' => 'Rick Astley',\n    'birth_date' => Carbon::parse('06-02-1966'),\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Normalizers for a Data Object (PHP)\nDESCRIPTION: This snippet shows how to configure which normalizers are used for a specific data object (SongData).  It overrides the `normalizers` method to specify the order in which normalizers are applied. Requires the Laravel Data package and the necessary normalizer classes. This configuration determines the order and types of normalizers used for a specific data object instance, potentially overriding global settings.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/normalizers.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nclass SongData extends Data\n{\n    public function __construct(\n        // ...\n    ) {\n    }\n\n    public static function normalizers(): array\n    {\n        return [\n            ModelNormalizer::class,\n            ArrayableNormalizer::class,\n            ObjectNormalizer::class,\n            ArrayNormalizer::class,\n            JsonNormalizer::class,\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Abstract Types in Data Classes in PHP\nDESCRIPTION: Demonstrates how to use an abstract data type as a property in another data class. The Contract class includes a Person property which is an abstract type.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/abstract-data.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass Contract extends Data\n{\n    public string $label;\n    public Person $artist;\n}\n```\n\n----------------------------------------\n\nTITLE: Transformed Output with Default SnakeCase Mapping\nDESCRIPTION: Shows the resulting array structure after transformation with the default snake_case mapping strategy applied to all properties.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/mapping-property-names.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n[\n    'name' => 'Rick Astley',\n    'record_company' => 'RCA Records',\n]\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Definition for Transformed DataObject\nDESCRIPTION: Shows the expected TypeScript type generated from the PHP data class, mapping PHP types to TypeScript. Optional and union types are denoted with '?', arrays are displayed with 'Array<>' syntax, and nullable types use '| null'. This output results from applying the package's transformation to the PHP class.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/typescript.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n    nullable: number | null;\n    int: number;\n    bool: boolean;\n    string: string;\n    float: number;\n    array: Array<string>;\n    lazy? : string;\n    optional? : string;\n    simpleData: SimpleData;\n    dataCollection: Array<SimpleData>;\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Exists Validation Attribute\nDESCRIPTION: The `#[Exists]` attribute validates that the input value exists in a specified database table column. It takes the table name or model class as argument. It supports optional parameters such as the column name, connection and adding a withoutTrashed check.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/validation-attributes.md#_snippet_35\n\nLANGUAGE: php\nCODE:\n```\n```php\n#[Exists('users')]\npublic string $closure; \n\n#[Exists(User::class)]\npublic string $closure; \n\n#[Exists('users', 'email')]\npublic string $closure;\n\n#[Exists('users', 'email', connection: 'tenant')]\npublic string $closure;\n\n#[Exists('users', 'email', withoutTrashed: true)]\npublic string $closure;\n```\n```\n\n----------------------------------------\n\nTITLE: Using Validation Rule Objects in Laravel Data (PHP)\nDESCRIPTION: This snippet demonstrates usage of validation rule objects directly within the rules method. Instead of string-based constraints, instances of classes such as Required and StringType are provided for more explicit type enforcement. This pattern enables advanced validation scenarios or integration with custom rule objects, assuming all required validation rule classes are imported and available.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/validation/manual-rules.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nclass SongData extends Data\n{\n    public function __construct(\n        public string $title,\n        public string $artist,\n    ) {\n    }\n    \n    public static function rules(): array\n    {\n        return [\n            'title' => [new Required(), new StringType()],\n            'artist' => [new Required(), new StringType()],\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Filling Data Properties from Route Parameters - Scalar\nDESCRIPTION: This code snippet demonstrates how to use the `FromRouteParameter` attribute to fill a data object's property from a route parameter. It utilizes a route definition and a data object to bind the `songId` route parameter to the `$id` property of `SongData`.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/injecting-property-values.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nRoute::patch('/songs/{songId}', [SongController::class, 'update']);\n\nclass SongData extends Data {\n    #[FromRouteParameter('songId')]\n    public int $id;\n    public string $name;\n}\n```\n\n----------------------------------------\n\nTITLE: Filling Properties from Authenticated User Properties\nDESCRIPTION: Demonstrates the usage of `FromAuthenticatedUserProperty` to populate properties with specific user attributes. It uses the 'api' guard and maps the user's 'name' attribute to the `username` property of the data object.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/injecting-property-values.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nclass SongData extends Data {\n    #[FromAuthenticatedUserProperty('api','name')]\n    public string $username;\n}\n```\n\n----------------------------------------\n\nTITLE: Array Representation of Data Object with Optional Properties in PHP\nDESCRIPTION: Shows how a data object with Optional properties is transformed to an array. Optional properties are excluded from the resulting array.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/optional-properties.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n[\n    'title' => 'Never gonna give you up'\n]\n```\n\n----------------------------------------\n\nTITLE: Publishing Laravel Data Config File Using Artisan in Bash\nDESCRIPTION: This snippet provides the Artisan command to publish the default configuration file for the Spatie Laravel Data package. It requires the package to be installed, as well as Artisan and PHP being available. The command will copy the package configuration file to your application's config directory for further customization.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/installation-setup.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan vendor:publish --provider=\"Spatie\\LaravelData\\LaravelDataServiceProvider\" --tag=\"data-config\"\n```\n\n----------------------------------------\n\nTITLE: Nested Data Collection Wrapping - PHP\nDESCRIPTION: This snippet shows how to wrap a data collection within another data object. An `AlbumData` object contains a `DataCollection` of `SongData` objects. The `SongData` collection is wrapped using the `wrap('data')` method when creating the `AlbumData` instance from the `Album` model. This demonstrates wrapping collections within data objects which is supported.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/wrapping.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Spatie\\LaravelData\\Attributes\\DataCollectionOf;\nuse Spatie\\LaravelData\\DataCollection;\n\nclass AlbumData extends Data\n{\n    public function __construct(\n        public string $title,\n        #[DataCollectionOf(SongData::class)]\n        public DataCollection $songs,\n    ) {\n    }\n\n    public static function fromModel(Album $album): self\n    {\n        return new self(\n            $album->title,\n            SongData::collect($album->songs, DataCollection::class)->wrap('data')\n        );\n    }\n}\n\nAlbumData::from(Album::first())->wrap('data');\n```\n\n----------------------------------------\n\nTITLE: Defining Optional String Property - TypeScript\nDESCRIPTION: This snippet defines an interface or type with a single property named `nullable`. The `?:` syntax indicates that this property is optional. If present, its value must be a string. This is commonly used in TypeScript/Flowtype to specify expected data shapes. No specific dependencies are listed, as it's a basic type definition syntax.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/tests/__snapshots__/DataTypeScriptTransformerTest__it_supports_converting_nullable_types_to_optional_properties__1.txt#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\nnullable?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Data Objects with Default Values\nDESCRIPTION: Examples of creating and validating Data objects with default values or custom values using the validateAndCreate() method.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/defaults.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nSongData::validateAndCreate();\nSongData::validateAndCreate(['title' => 'Giving Up On Love', 'date' => CarbonImmutable::create(1988, 4, 15)]);\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface for Paginated Collections in Laravel Data\nDESCRIPTION: Defines a TypeScript interface for paginated collections in the Laravel Data package. The interface includes properties for standard, nullable, optional, and lazy-loaded collections, with each collection containing data, links, and metadata for pagination.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/tests/__snapshots__/DataTypeScriptTransformerTest__it_uses_the_correct_types_for_paginated_data_collection_for_attributes___1.txt#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\ncollection: {data:Array<{%Spatie\\LaravelData\\Tests\\Fakes\\SimpleData%}>;links:Array<{url:string | null;label:string;active:boolean;}>;meta:{current_page:number;first_page_url:string;from:number | null;last_page:number;last_page_url:string;next_page_url:string | null;path:string;per_page:number;prev_page_url:string | null;to:number | null;total:number;};};  \ncollectionWithNull: {data:Array<{%Spatie\\LaravelData\\Tests\\Fakes\\SimpleData%}>;links:Array<{url:string | null;label:string;active:boolean;}>;meta:{current_page:number;first_page_url:string;from:number | null;last_page:number;last_page_url:string;next_page_url:string | null;path:string;per_page:number;prev_page_url:string | null;to:number | null;total:number;};} | null;\ncollectionWithNullable: {data:Array<{%Spatie\\LaravelData\\Tests\\Fakes\\SimpleData%}>;links:Array<{url:string | null;label:string;active:boolean;}>;meta:{current_page:number;first_page_url:string;from:number | null;last_page:number;last_page_url:string;next_page_url:string | null;path:string;per_page:number;prev_page_url:string | null;to:number | null;total:number;};} | null;\noptionalCollection?: {data:Array<{%Spatie\\LaravelData\\Tests\\Fakes\\SimpleData%}>;links:Array<{url:string | null;label:string;active:boolean;}>;meta:{current_page:number;first_page_url:string;from:number | null;last_page:number;last_page_url:string;next_page_url:string | null;path:string;per_page:number;prev_page_url:string | null;to:number | null;total:number;};};  \noptionalCollectionWithNullable?: {data:Array<{%Spatie\\LaravelData\\Tests\\Fakes\\SimpleData%}>;links:Array<{url:string | null;label:string;active:boolean;}>;meta:{current_page:number;first_page_url:string;from:number | null;last_page:number;last_page_url:string;next_page_url:string | null;path:string;per_page:number;prev_page_url:string | null;to:number | null;total:number;};} | null;\nlazyCollection?: {data:Array<{%Spatie\\LaravelData\\Tests\\Fakes\\SimpleData%}>;links:Array<{url:string | null;label:string;active:boolean;}>;meta:{current_page:number;first_page_url:string;from:number | null;last_page:number;last_page_url:string;next_page_url:string | null;path:string;per_page:number;prev_page_url:string | null;to:number | null;total:number;};};  \nlazyCollectionWithNullable?: {data:Array<{%Spatie\\LaravelData\\Tests\\Fakes\\SimpleData%}>;links:Array<{url:string | null;label:string;active:boolean;}>;meta:{current_page:number;first_page_url:string;from:number | null;last_page:number;last_page_url:string;next_page_url:string | null;path:string;per_page:number;prev_page_url:string | null;to:number | null;total:number;};} | null;\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Lowercase Validation Attribute\nDESCRIPTION: The `#[Lowercase]` attribute transforms the input to lowercase. It validates that the input is a valid lowercase string.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/validation-attributes.md#_snippet_50\n\nLANGUAGE: php\nCODE:\n```\n```php\n#[Lowercase]\npublic string $closure; \n```\n```\n\n----------------------------------------\n\nTITLE: Returning an Empty Data Object (PHP)\nDESCRIPTION: Demonstrates returning an empty Laravel Data object with null values. The `SongData::empty()` method is used to provide a blueprint to the frontend, showing the fields required for model creation. Requires Laravel Data.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/from-data-to-resource.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nclass SongsController\n{\n    public function create(): array\n    {\n        return SongData::empty();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying File Validation Attribute\nDESCRIPTION: The `#[File]` attribute validates that the input is a valid file upload.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/validation-attributes.md#_snippet_36\n\nLANGUAGE: php\nCODE:\n```\n```php\n#[File]\npublic UploadedFile $closure; \n```\n```\n\n----------------------------------------\n\nTITLE: Adding a Min Rule (PHP)\nDESCRIPTION: This snippet demonstrates how to add a `Min` validation rule to the `RulesCollection`. It shows how to create a new `Min` rule with a specific minimum value (42 in this example) and add it to the rules collection using the `add` method.  This assumes that the `RulesCollection` is available and that the `Min` class is imported and accessible.  The output is a modified `RulesCollection` with the new rule applied.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/creating-a-rule-inferrer.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n$rules->add(new Min(42));\n```\n\n----------------------------------------\n\nTITLE: Defining Data Object Types with Spatie Laravel Data in TypeScript\nDESCRIPTION: This snippet defines a TypeScript object that models the structure of data transfer objects as used by Spatie\\LaravelData in PHP. It includes scalar types, nullable and undefined values, arrays, and nested data objects, reflecting the fields and relationships present in the PHP backend. Dependencies include the Spatie\\LaravelData PHP package on the server side, and the corresponding TypeScript definitions for typed data transfer. Each property corresponds to a specific expected data shape, ensuring correct serialization and deserialization between backend and frontend.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/tests/__snapshots__/DataTypeScriptTransformerTest__it_can_convert_a_data_object_to_Typescript__1.txt#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\nnullable: number | null;\nundefineable?: number;\nint: number;\nbool: boolean;\nstring: string;\nfloat: number;\narray: Array<string>;\nlazy?: string;\nclosureLazy: string;\nsimpleData: {%Spatie\\LaravelData\\Tests\\Fakes\\SimpleData%};\ndataCollection: Array<{%Spatie\\LaravelData\\Tests\\Fakes\\SimpleData%}>;\ndataCollectionAlternative: Array<{%Spatie\\LaravelData\\Tests\\Fakes\\SimpleData%}>;\ndataCollectionWithAttribute: Array<{%Spatie\\LaravelData\\Tests\\Fakes\\SimpleData%}>;\n}\n```\n\n----------------------------------------\n\nTITLE: Applying ArrayType Validation Attribute\nDESCRIPTION: The `#[ArrayType]` attribute ensures that the input is an array and optionally validates keys within the array. It takes an array of valid keys as parameter.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/validation-attributes.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n```php\n#[ArrayType]\npublic array $closure; \n\n#[ArrayType(['valid_key', 'other_valid_key'])]\npublic array $closure; \n\n#[ArrayType('valid_key', 'other_valid_key')]\npublic array $closure; \n```\n```\n\n----------------------------------------\n\nTITLE: Applying LessThan Validation Attribute\nDESCRIPTION: The `#[LessThan]` attribute validates that the input is less than the value of another field.  It takes the other field's name as an argument.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/validation-attributes.md#_snippet_48\n\nLANGUAGE: php\nCODE:\n```\n```php\n#[LessThan('other_field')]\npublic int $closure; \n```\n```\n\n----------------------------------------\n\nTITLE: Referencing Root Field from Nested Object PHP\nDESCRIPTION: Demonstrates how to reference a field starting from the root data object when working within a nested object. Using `new FieldReference('album_name', fromRoot: true)` allows the `RequiredIf` rule on the nested 'artist' property to depend on the 'album_name' property of the top-level `AlbumData` object.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/validation/using-validation-attributes.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nclass SongData extends Data\n{\n    public function __construct(\n        public string $title,\n        #[RequiredIf(new FieldReference('album_name', fromRoot: true), 'Whenever You Need Somebody')]\n        public string $artist,\n    ) {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a TypeScript Type with Standard and Quoted Property Names\nDESCRIPTION: This TypeScript snippet defines an object type or interface structure. It includes a standard property `some_camel_case_property` of type string and a non-standard property `'some:non:standard:property'` (also string), which is enclosed in single quotes to accommodate the colons in its name. This approach allows defining types for objects whose keys might contain special characters or otherwise be invalid as standard identifiers.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/tests/__snapshots__/DataTypeScriptTransformerTest__it_outputs_types_with_properties_using_their_mapped_name__1.txt#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\nsome_camel_case_property: string;\n'some:non:standard:property': string;\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Dimensions Validation Attribute\nDESCRIPTION: The `#[Dimensions]` attribute validates the dimensions (e.g., width and height, ratio, etc.) of an uploaded file. It accepts various parameters such as `maxWidth`, `maxHeight`, and `ratio`.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/validation-attributes.md#_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n```php\n#[Dimensions(ratio: 1.5)]\npublic UploadedFile $closure; \n\n#[Dimensions(maxWidth: 100, maxHeight: 100)]\npublic UploadedFile $closure; \n```\n```\n\n----------------------------------------\n\nTITLE: Defining Auto Lazy Inertia Properties using Attributes\nDESCRIPTION: This example illustrates how to use attributes (`AutoInertiaLazy`, `AutoClosureLazy`, `AutoInertiaDeferred`) to automatically define properties as lazy Inertia properties within a Laravel Data object. This simplifies the property definition and makes the code more readable. It uses annotations to mark each property for lazy loading.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/use-with-inertia.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Spatie\\LaravelData\\Attributes\\AutoClosureLazy;\nuse Spatie\\LaravelData\\Attributes\\AutoInertiaLazy;\nuse Spatie\\LaravelData\\Attributes\\AutoInertiaDeferred;\n\nclass SongData extends Data\n{\n    public function __construct(\n        #[AutoInertiaLazy]\n        public Lazy|string $title,\n        #[AutoClosureLazy]\n        public Lazy|string $artist,\n        #[AutoInertiaDeferred]\n        public Lazy|string $lyrics,\n    ) {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using mapped names in URL query parameters\nDESCRIPTION: Example of how property names can be used in URL query parameters, showing that both the mapped name ('favorite_song') or the original name can be used in request queries.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/mapping-rules.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nhttps://spatie.be/my-account?except[]=favorite_song\n```\n\n----------------------------------------\n\nTITLE: Replacing Previous Rule of Same Type (PHP)\nDESCRIPTION: This snippet illustrates how the `RulesCollection` handles duplicate rule types. It demonstrates that adding a new `Min` rule with a different value (314) replaces the previous `Min` rule.  The `all()` method demonstrates that only the most recently added rule of a certain type remains.  This highlights a fundamental characteristic of the rule collection’s behavior. It depends on the proper setup of the classes used (Min, and RulesCollection).\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/creating-a-rule-inferrer.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n$rules->add(new Min(42));\n$rules->add(new Min(314)); \n\n$rules->all(); // [new Min(314)]\n```\n\n----------------------------------------\n\nTITLE: Implementing Request Parameter Inclusion/Exclusion in Laravel Data v2\nDESCRIPTION: Example showing how to implement the methods required to enable request parameter inclusion/exclusion for data objects in Laravel Data v2, which is disabled by default for security reasons.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/UPGRADING.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n    public static function allowedRequestIncludes(): ?array\n    {\n        return null;\n    }\n\n    public static function allowedRequestOnly(): ?array\n    {\n        return null;\n    }\n```\n\n----------------------------------------\n\nTITLE: Injecting Dependencies into Validation Rules in Laravel Data (PHP)\nDESCRIPTION: The rules method in this snippet accepts a SongSettingsRepository dependency, allowing for runtime configuration of validation logic based on application state or user context. For instance, RequiredIf uses repository data tied to the authenticated user. Ensure dependency injection is set up correctly and all rule classes and repositories are imported. The method adapts validation rules dynamically, enabling flexible, context-aware validation.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/validation/manual-rules.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse SongSettingsRepository;\n\nclass SongData extends Data\n{\n    public function __construct(\n        public string $title,\n        public string $artist,\n    ) {\n    }\n    \n    public static function rules(SongSettingsRepository $settings): array\n    {\n        return [\n            'title' => [new RequiredIf($settings->forUser(auth()->user())->title_required), new StringType()],\n            'artist' => [new Required(), new StringType()],\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Validating data with mapped property names\nDESCRIPTION: Demonstrates how to validate data for a Data object with mapped properties. When validating or getting validation rules, you should always use the original property name in the validation logic.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/mapping-rules.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$data = [\n    'favorite_song' => 123,\n    'title' => 'some title',\n];\n\nUserData::validate($data)\nUserData::getValidationRules($data)\n```\n\n----------------------------------------\n\nTITLE: Resulting Validation Rules with Conflict\nDESCRIPTION: The array of validation rules that results from the previous example, showing how both auto-generated rules for properties and custom rules are merged, creating potential validation issues.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/validation/skipping-validation.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[\n    'name' => ['required', 'string'],\n    'first_name' => ['required', 'string'],\n    'last_name' => ['required', 'string'],\n]\n```\n\n----------------------------------------\n\nTITLE: Resulting Array from Lazy Loading - PHP\nDESCRIPTION: This shows the resulting array after transforming the AlbumData object to array. The songs property is missing because it is a lazy property and we did not specifically included it.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/lazy-properties.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n[\n    'title' => 'Together Forever',\n]\n```\n\n----------------------------------------\n\nTITLE: Applying DoesntEndWith Validation Attribute\nDESCRIPTION: The `#[DoesntEndWith]` attribute validates that the input does *not* end with a specified substring or any of the substrings provided in an array.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/validation-attributes.md#_snippet_26\n\nLANGUAGE: php\nCODE:\n```\n```php\n#[DoesntEndWith('a')]\npublic string $closure;\n\n#[DoesntEndWith(['a', 'b'])]\npublic string $closure;\n\n#[DoesntEndWith('a', 'b')]\npublic string $closure;\n```\n```\n\n----------------------------------------\n\nTITLE: Applying GreaterThanOrEqualTo Validation Attribute\nDESCRIPTION: The `#[GreaterThanOrEqualTo]` attribute validates that the input is greater than or equal to the value of another field. It takes the other field's name as an argument.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/validation-attributes.md#_snippet_39\n\nLANGUAGE: php\nCODE:\n```\n```php\n#[GreaterThanOrEqualTo('other_field')]\npublic int $closure; \n```\n```\n\n----------------------------------------\n\nTITLE: Providing Arguments to WithCastable Attribute - PHP\nDESCRIPTION: This snippet expands on the Castable usage by supplying arguments to the WithCastable attribute. When arguments (e.g., 'normalize: true') are supplied, they are passed to the value object's dataCastUsing method, which customizes the casting logic based on input parameters. Dependencies: spatie/laravel-data, a Castable class supporting arguments.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/creating-a-cast.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass DuplicateEmailCheck extends Data\n{\n    public function __construct(\n        #[WithCastable(Email::class, normalize: true)]\n        public Email $email,\n    ) {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying EndsWith Validation Attribute\nDESCRIPTION: The `#[EndsWith]` attribute validates that the input ends with a specified substring or any of the substrings provided in an array.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/validation-attributes.md#_snippet_29\n\nLANGUAGE: php\nCODE:\n```\n```php\n#[EndsWith('a')]\npublic string $closure;\n\n#[EndsWith(['a', 'b'])]\npublic string $closure;\n\n#[EndsWith('a', 'b')]\npublic string $closure;\n```\n```\n\n----------------------------------------\n\nTITLE: Creating PaginatedDataCollection and CursorPaginatedCollection - Laravel Data - PHP\nDESCRIPTION: Demonstrates creating specialized paginated data collections using the collect method and pre-built collection classes. Useful for responses that require pagination metadata. Requires Spatie\\LaravelData\\PaginatedDataCollection or CursorPaginatedCollection.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/collections.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Spatie\\LaravelData\\PaginatedDataCollection;\n\nSongData::collect(Song::paginate(), PaginatedDataCollection::class);\n\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Spatie\\LaravelData\\CursorPaginatedCollection;\n\nSongData::collect(Song::cursorPaginate(), CursorPaginatedCollection::class);\n\n```\n\n----------------------------------------\n\nTITLE: Applying Filled Validation Attribute\nDESCRIPTION: The `#[Filled]` attribute validates that the input is not empty.  An empty string is considered invalid.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/validation-attributes.md#_snippet_37\n\nLANGUAGE: php\nCODE:\n```\n```php\n#[Filled]\npublic string $closure; \n```\n```\n\n----------------------------------------\n\nTITLE: Using a Data Object as a Livewire Component Property (PHP)\nDESCRIPTION: Demonstrates how to define a `spatie/laravel-data` object (`SongData`) as a public property within a Livewire component (`Song`). The `mount` method initializes the data object by fetching a model and converting it using `SongData::from()`.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/use-with-livewire.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass Song extends Component\n{\n    public SongData $song;\n\n    public function mount(int $id)\n    {\n        $this->song = SongData::from(Song::findOrFail($id));\n    }\n\n    public function render()\n    {\n        return view('livewire.song');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Reflection-Based Discovery (PHP)\nDESCRIPTION: This snippet disables reflection-based discovery, forcing the use of PHP parser discovery. This might be necessary in environments where reflection is not available. Requires configuring directories manually.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/performance.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n'structure_caching' => [\n    'reflection_discovery' => [\n        'enabled' => false,\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: Preparing Data Before Pipeline PHP\nDESCRIPTION: Illustrates how to modify the normalized data array using the static `prepareForPipeline` method before it is processed by the main data pipeline. This is useful for restructuring or pre-processing the data, such as extracting and nesting data for nested data objects, before casting and filling occur in the pipeline.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/pipeline.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass SongMetadata\n{\n    public function __construct(\n        public string $releaseYear,\n        public string $producer,\n    ) {}\n}\n\nclass SongData extends Data\n{\n    public function __construct(\n        public string $title,\n        public SongMetadata $metadata,\n    ) {}\n    \n    public static function prepareForPipeline(array $properties): array\n    {\n        $properties['metadata'] = Arr::only($properties, ['release_year', 'producer']);\n        \n        return $properties;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using AutoLazy Attribute on Class - PHP\nDESCRIPTION: This example shows how to use the `AutoLazy` attribute on a class level.  This automatically wraps all properties typed as `Lazy` in a Lazy Closure.  It simplifies the creation of lazy properties, removing boilerplate code.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/lazy-properties.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n#[AutoLazy]\nclass UserData extends Data\n{\n    public function __construct(\n        public string $title,\n        public Lazy|SongData $favorite_song,\n    ) {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the WithCastable Attribute Inside a Data Object - PHP\nDESCRIPTION: This code demonstrates how to instruct Laravel Data to use a Castable value object for a property, specifically by annotating a property with the WithCastable attribute. The Email value object must implement Castable so that its custom caster will be invoked. Dependencies: spatie/laravel-data, a Castable class (e.g., Email).\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/creating-a-cast.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass ForgotPasswordRequest extends Data\n{\n    public function __construct(\n        #[WithCastable(Email::class)]\n        public Email $email,\n    ) {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Data Objects with Livewire Synths (PHP)\nDESCRIPTION: Example of a Livewire component (`SongUpdateComponent`) using a `SongData` object directly as a property without implementing `Wireable`, relying on the enabled Livewire Synths feature. It shows data binding with `wire:model` and saving data via the `save` method.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/use-with-livewire.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nclass SongUpdateComponent extends Component\n{\n    public SongData $data;\n\n    public function mount(public int $id): void\n    {\n        $this->data = SongData::from(Song::findOrFail($id));\n    }\n\n    public function save(): void\n    {\n        Artist::findOrFail($this->id)->update($this->data->toArray());\n    }\n\n    public function render(): string\n    {\n        return <<<'BLADE'\n        <div>\n            <h1>Songs</h1>\n            <input type=\"text\" wire:model.live=\"data.title\">\n            <input type=\"text\" wire:model.live=\"data.artist\">\n            <p>Title: {{ $data->title }}</p>\n            <p>Artist: {{ $data->artist }}</p>\n            <button wire:click=\"save\">Save</button>\n        </div>\n        BLADE;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying ListType Validation Attribute\nDESCRIPTION: The `#[ListType]` attribute ensures that the input is an array and validates that its elements are valid. The `ListType` attribute is used to validate array of values.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/validation-attributes.md#_snippet_51\n\nLANGUAGE: php\nCODE:\n```\n```php\n#[ListType]\npublic array $array; \n```\n```\n\n----------------------------------------\n\nTITLE: Accessing Lazy Properties in Livewire View (PHP)\nDESCRIPTION: Shows how lazy properties are accessed within a Livewire view or component. Accessing nested properties of a lazy data object (`$this->data->artist->name`) works because Livewire/laravel-data hydrates the nested object. However, accessing a lazy scalar property (`$this->data->title`) directly does not work without explicit, permanent inclusion, as it's not automatically hydrated.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/use-with-livewire.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$this->data->artist->name; // Works\n$this->data->title; // Does not work (without explicit inclusion)\n```\n\n----------------------------------------\n\nTITLE: Generated Validation Rules from Auto Inferring in Laravel Data\nDESCRIPTION: This snippet shows the array of validation rules that the Laravel Data package automatically generates for the `ArtistData` class based on its property type hints. Each property gets appropriate 'required', 'nullable', and type validation rules.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/validation/introduction.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n[\n    'name' => ['required', 'string'],\n    'age' => ['required', 'integer'],\n    'genre' => ['nullable', 'string'],\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Data Structure Properties - Type Definition\nDESCRIPTION: This snippet defines the properties and their types for a data structure. It includes a scalar string property (`cased_property`), a nested object property (`data_cased_property`) of type `SimpleData`, and a collection of nested objects (`data_collection_cased_property`), also of type `SimpleData`. This structure is likely used for defining the shape of data objects in serialization or DTO contexts.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/tests/__snapshots__/DataTypeScriptTransformerTest__it_outputs_types_with_properties_using_their_mapped_name_on_a_class__1.txt#_snippet_0\n\nLANGUAGE: Type Definition\nCODE:\n```\n{\ncased_property: string;\ndata_cased_property: {%Spatie\\LaravelData\\Tests\\Fakes\\SimpleData%};\ndata_collection_cased_property: Array<{%Spatie\\LaravelData\\Tests\\Fakes\\SimpleData%}>;\n}\n```\n\n----------------------------------------\n\nTITLE: Generated Validation Rules for Nested Data Collection (PHP Array)\nDESCRIPTION: Shows the expected Laravel validation rules array generated automatically by the `laravel-data` package for the `AlbumData` object. It includes rules for the top-level `title` and `songs` properties, as well as rules for the properties of the nested `SongData` objects within the collection, using dot notation (`songs.*.title`, `songs.*.artist`).\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/request-to-data-object.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n[\n    'title' => ['required', 'string'],\n    'songs' => ['required', 'array'],\n    'songs.*.title' => ['required', 'string'],\n    'songs.*.artist' => ['required', 'string'],\n]\n```\n\n----------------------------------------\n\nTITLE: Using the except() method with special keys - PHP\nDESCRIPTION: This code shows how to use the except() method with special keys. The data object will not show the 'songs.name' and 'songs.artist' properties. Note that this overwrites all other include and exclude statements.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/lazy-properties.md#_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nAlbumData::from(Album::first())->except('songs.{name, artist}');\n```\n\n----------------------------------------\n\nTITLE: Applying ExcludeUnless Validation Attribute\nDESCRIPTION: The `#[ExcludeUnless]` attribute, currently non-functional in the described project, intended to exclude a field from validation *unless* another field meets a specified condition. The note specifies that this is scheduled to be fixed in a future version.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/validation-attributes.md#_snippet_32\n\nLANGUAGE: php\nCODE:\n```\n```php\n#[ExcludeUnless('other_field', 'has_value')]\npublic string $closure;\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Validation Strategy to Always in Laravel Data Config\nDESCRIPTION: This configuration option snippet shows how to set the `validation_strategy` in the Laravel Data package configuration file. Setting it to `Always` ensures that validation runs automatically for all payloads injected into or passed to the `from` method of a data object, overriding the default behavior.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/validation/introduction.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n'validation_strategy' => \\Spatie\\LaravelData\\Support\\Creation\\ValidationStrategy::Always->value,\n```\n\n----------------------------------------\n\nTITLE: Excluding a Default Included Lazy Property - PHP\nDESCRIPTION: This snippet shows how to exclude a default included property using the `exclude()` method. This overrides the default inclusion.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/lazy-properties.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nAlbumData::create(Album::first())->exclude('songs');\n```\n\n----------------------------------------\n\nTITLE: Generated Validation Rules for Mapped Property Names in Laravel Data\nDESCRIPTION: This snippet shows the validation rules generated for the `SongData` class which uses `#[MapInputName]` to map 'song_title' to 'title'. The generated rules correctly use the mapped input name ('song_title') as the key for the validation rules array.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/validation/introduction.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n[\n    'song_title' => ['required', 'string'],\n]\n```\n\n----------------------------------------\n\nTITLE: Route Definition for Query String Includes in PHP\nDESCRIPTION: Example of setting up a route that returns a Data object which can handle query string includes.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/lazy-properties.md#_snippet_30\n\nLANGUAGE: php\nCODE:\n```\n// in web.php\n\nRoute::get('my-account', fn() => UserData::from(User::first()));\n```\n\n----------------------------------------\n\nTITLE: Using MapOutputName Attribute for Individual Property in Laravel Data\nDESCRIPTION: Demonstrates how to use the MapOutputName attribute to change the name of a specific property in the transformed output from camelCase to snake_case.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/mapping-property-names.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass ContractData extends Data\n{\n    public function __construct(\n        public string $name,\n        #[MapOutputName('record_company')]\n        public string $recordCompany,\n    ) {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Data Object with Lazy Properties - PHP\nDESCRIPTION: This example demonstrates defining a `SongData` class with lazy properties for `title` and `artist`.  Both properties are wrapped in `Lazy`, meaning their values will only be resolved when explicitly included or accessed.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/lazy-properties.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nclass SongData extends Data\n{\n    public function __construct(\n        public Lazy|string $title,\n        public Lazy|string $artist,\n    ) {\n    }\n\n    public static function fromModel(Song $song): self\n    {\n        return new self(\n            Lazy::create(fn() => $song->title),\n            Lazy::create(fn() => $song->artist)\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Conditional Lazy Property - PHP\nDESCRIPTION: This example demonstrates how to create a conditional lazy property using `Lazy::when()`. The property will only be included if the specified condition (in this case, `$this->is_admin`) is true.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/lazy-properties.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nLazy::when(fn() => $this->is_admin, fn() => SongData::collect($album->songs));\n```\n\n----------------------------------------\n\nTITLE: Applying ExcludeWithout Validation Attribute\nDESCRIPTION: The `#[ExcludeWithout]` attribute, currently non-functional in the described project, intended to exclude a field from validation *without* another field. The note specifies that this is scheduled to be fixed in a future version.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/validation-attributes.md#_snippet_34\n\nLANGUAGE: php\nCODE:\n```\n```php\n#[ExcludeWithout('other_field')]\npublic string $closure;\n```\n```\n\n----------------------------------------\n\nTITLE: Adding Temporary Global Transformers with `transform()` in PHP\nDESCRIPTION: Demonstrates adding an ad-hoc global transformer specifically for a single `transform()` call using `TransformationContextFactory::create()->withGlobalTransformer()`. In this example, a hypothetical `StringToUpperTransformer` is temporarily applied to all string properties. Requires importing `Spatie\\LaravelData\\Support\\Transformation\\TransformationContextFactory`.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/transformers.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nArtistData::from($artist)->transform(\n    TransformationContextFactory::create()->withGlobalTransformer(\n        'string', \n        StringToUpperTransformer::class\n    )\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Date Property with Default Cast and Transformer\nDESCRIPTION: Defining a DateTime property with default casting and transformation attributes. This uses the format defined in the configuration file.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/working-with-dates.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n#[WithCast(DateTimeInterfaceCast::class)]\n#[WithTransformer(DateTimeInterfaceTransformer::class)]\npublic DateTime $date\n```\n\n----------------------------------------\n\nTITLE: Reloading Route with Specific Properties in Javascript\nDESCRIPTION: This JavaScript snippet demonstrates how to use Inertia's `router.reload` function to only fetch specific properties from the server. In this example, it only reloads the 'title' property.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/use-with-inertia.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nrouter.reload((url, {\n    only: ['title'],\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Cast cast() signature\nDESCRIPTION: This code snippet illustrates the signature change for the `cast` method within custom casts. In v3, the `cast` method received `$property`, `$value`, and `$context`. In v4, the `$context` parameter is renamed to `$properties`, and a new `$context` parameter of type `CreationContext` is added.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/UPGRADING.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// v3\npublic function cast(DataProperty $property, mixed $value, array $context): mixed;\n{\n    // ...\n}\n\n// v4\npublic function cast(DataProperty $property, mixed $value, array $properties, CreationContext $context): mixed\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Transformed Output of ContractData with MapOutputName\nDESCRIPTION: Shows the resulting array structure after transformation, with the recordCompany property mapped to record_company in the output.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/mapping-property-names.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[\n    'name' => 'Rick Astley',\n    'record_company' => 'RCA Records',\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing PropertyMorphableData Interface in PHP\nDESCRIPTION: Shows how to implement the PropertyMorphableData interface on an abstract data class. This interface adds a morph method that determines which subclass to use based on a discriminator property.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/abstract-data.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Spatie\\LaravelData\\Attributes\\PropertyForMorph;\nuse Spatie\\LaravelData\\Contracts\\PropertyMorphableData;\n\nabstract class Person extends Data implements PropertyMorphableData\n{\n    #[PropertyForMorph]\n    public string $type;\n\n    public string $name;\n    \n    public static function morph(array $properties): ?string\n    {\n        return match ($properties['type']){\n            'singer' => Singer::class,\n            'musician' => Musician::class,\n            default => null\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customize Data Object Creation from Model - PHP\nDESCRIPTION: This demonstrates how to customize the creation of a `SongData` object from an Eloquent model by defining a `fromModel` static method. The method takes a `Song` model instance as input, performs custom logic, and returns a new `SongData` object.  This overrides the default `from` method behavior.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/creating-a-data-object.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nclass SongData extends Data\n{\n    public function __construct(\n        public string $title,\n        public string $artist,\n    ) {\n    }\n    \n    public static function fromModel(Song $song): self\n    {\n        return new self(\"{$song->title} ({$song->year})\", $song->artist);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Collection Array Output Example in PHP\nDESCRIPTION: Displays the expected array output when a collection of SongData objects is converted to an array. The result is an array of arrays, each containing song data.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/from-data-to-array.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n[\n    [\n        \"name\": \"Never Gonna Give You Up\",\n        \"artist\": \"Rick Astley\"\n    ],\n    [\n        \"name\": \"Giving Up on Love\",\n        \"artist\": \"Rick Astley\"\n    ] \n]\n```\n\n----------------------------------------\n\nTITLE: Applying Enum Validation Attribute\nDESCRIPTION: The `#[Enum]` attribute validates that the input matches a valid enum case. The attribute requires the class name of the enum as its argument.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/validation-attributes.md#_snippet_30\n\nLANGUAGE: php\nCODE:\n```\n```php\n#[Enum(ChannelType::class)]\npublic string $closure;\n```\n```\n\n----------------------------------------\n\nTITLE: Enabling Iterable Casting Feature in Laravel Data Configuration\nDESCRIPTION: Shows how to activate the 'cast_and_transform_iterables' feature in the Laravel Data configuration to support automatic casting of arrays of strings into arrays of DateTime objects.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/casts.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\n'features' => [\n    'cast_and_transform_iterables' => true,\n],\n```\n\n----------------------------------------\n\nTITLE: Applying DeclinedIf Validation Attribute\nDESCRIPTION: The `#[DeclinedIf]` attribute validates that the input field is declined *only if* another field matches a specific value. It takes the other field's name and the value to compare against as arguments.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/validation-attributes.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n```php\n#[DeclinedIf('other_field', 'equals_this')]\npublic bool $closure; \n```\n```\n\n----------------------------------------\n\nTITLE: Implementing DataPipe Interface PHP\nDESCRIPTION: Defines the `DataPipe` interface, which any custom class must implement to function as a step (pipe) in the data pipeline. The required `handle` method receives the raw payload, `DataClass` information, the current array of properties, and the creation context, and must return the (potentially modified) array of properties.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/pipeline.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ninterface DataPipe\n{\n    public function handle(mixed $payload, DataClass $class, array $properties, CreationContext $creationContext): array;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Base Path and Root Namespace (PHP)\nDESCRIPTION: This snippet configures the base path and root namespace for reflection discovery. This is useful when using a non-standard directory structure or namespace for data objects.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/performance.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n'structure_caching' => [\n    'reflection_discovery' => [\n        'enabled' => true,\n        'base_path' => base_path(),\n        'root_namespace' => null,\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: Using Abstract Data Classes in Collections in PHP\nDESCRIPTION: Demonstrates how to use abstract data classes within collections. The Band class contains an array of Person objects, which can be any of the Person subclasses.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/abstract-data.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nclass Band extends Data\n{\n    public string $name;\n    \n    /**  @var array<Person> */\n    public array $members;\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Structure Caching (PHP)\nDESCRIPTION: This snippet disables the entire structure caching mechanism by setting the `enabled` option to `false`.  This can be useful for debugging or development purposes.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/performance.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n'structure_caching' => [\n    'enabled' => false,\n],\n```\n\n----------------------------------------\n\nTITLE: Serialized SimpleData Test Fake in PHP\nDESCRIPTION: This snippet shows a PHP serialized object representing a SimpleData test fake class used in testing the Spatie Laravel Data package. It encodes properties including a public string, an additional integer array stored as a property with special visibility, and a null data context. Dependencies include PHP's serialization format and the Spatie Laravel Data testing framework. The snippet’s input is the serialized string, and the expected output is a reconstructed SimpleData instance upon unserialization. It is useful for simulating data payloads in automated tests, with the constraint that serialized strings must properly match the class and property names for unserialization to succeed.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/tests/__snapshots__/SerializeableTest__it_can_serialize_and_unserialize_a_data_object_with_additional_data__1.txt#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nO:41:\"Spatie\\LaravelData\\Tests\\Fakes\\SimpleData\":3:{s:6:\"string\";s:11:\"Hello world\";s:14:\"\\0*\\0_additional\";a:1:{s:3:\"int\";i:69;}s:15:\"\\0*\\0_dataContext\";N;}\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Date Format in Laravel Data\nDESCRIPTION: Setting the default date format in the data.php configuration file. This format will be used by DateTimeInterfaceCast and DateTimeInterfaceTransformer when no specific format is provided.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/working-with-dates.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n    'date_format' => DATE_ATOM,\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Data Pipeline PHP\nDESCRIPTION: Demonstrates how to define a custom data pipeline for a specific Data class by overriding the static `pipeline` method. This allows you to explicitly list the pipes that will process the data for this particular data object, chaining standard or custom pipes using the `through` method.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/pipeline.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass SongData extends Data\n{\n    public function __construct(\n        // ...\n    ) {\n    }\n\n    public static function pipeline(): DataPipeline\n    {\n        return DataPipeline::create()\n            ->into(static::class)\n            ->through(AuthorizedDataPipe::class)\n            ->through(MapPropertiesDataPipe::class)\n            ->through(FillRouteParameterPropertiesDataPipe::class)\n            ->through(ValidatePropertiesDataPipe::class)\n            ->through(DefaultValuesDataPipe::class)\n            ->through(CastPropertiesDataPipe::class);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying AlphaDash Validation Attribute\nDESCRIPTION: The `#[AlphaDash]` attribute verifies that the input consists of only alpha-numeric characters, dashes, and underscores.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/validation-attributes.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n```php\n#[AlphaDash]\npublic string $closure; \n```\n```\n\n----------------------------------------\n\nTITLE: Mapping all properties within a Data class via MapInputName\nDESCRIPTION: Demonstrates applying the MapInputName attribute at the class level, so all properties use snake_case mapping automatically. This simplifies data handling where data input conventions differ from code conventions.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/model-to-data-object.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n[MapInputName(SnakeCaseMapper::class)]\nclass ArtistData extends Data\n{\n    public int $id;\n    public string $fullName;\n    public CarbonImmutable $createdAt;\n    public CarbonImmutable $updatedAt;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Data object with name mapping in Laravel\nDESCRIPTION: Shows how to create a UserData class that extends Data with a mapped property name. The example demonstrates how to use the MapName attribute to map 'song' to 'favorite_song' while maintaining the original property name in validation rules and allowedRequestExcept method.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/mapping-rules.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass UserData extends Data\n {\n     public function __construct(\n         #[MapName('favorite_song')] // name mapping\n         public Lazy|SongData $song,\n         #[RequiredWith('song')] // In validation rules, use the original name\n         public string $title,\n     ) {\n     }\n\n     public static function allowedRequestExcept(): ?array\n     {\n         return [\n             'song', // Use the original name when defining includes, excludes, excepts and only\n         ];\n     }\n     \n     public function rules(ValidContext $context): array {\n        return  [\n            'song' => 'required', // Use the original name when defining validation rules\n        ];\n    }\n\n    // ...\n }\n```\n\n----------------------------------------\n\nTITLE: Configuring Directories for Structure Discovery (PHP)\nDESCRIPTION: This snippet configures the directories that the `php-structure-discoverer` package will search for data objects. By default, the `app/data` directory is searched recursively.  This snippet allows customizing these directories.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/performance.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n'structure_caching' => [\n    'directories' => [\n        app_path('Data'),\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: Mapping Route Parameter Properties with Custom Properties\nDESCRIPTION: Demonstrates customizing the property mapping with `FromRouteParameterProperty`. The `$name` property of `SongData` is filled with the `title` property of the `song` route parameter model, instead of using the default mapping.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/injecting-property-values.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nRoute::patch('/songs/{song}', [SongController::class, 'update']);\n\nclass SongData extends Data {\n    #[FromRouteParameterProperty('song')]\n    public int $id;\n    #[FromRouteParameterProperty('song', 'title')]\n    public string $name;\n}\n```\n\n----------------------------------------\n\nTITLE: Using the only() method with special keys - PHP\nDESCRIPTION: This code shows how to use the only() method with special keys. The data object will only show the 'songs.name' and 'songs.artist' properties. Note that this overwrites all other include and exclude statements.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/lazy-properties.md#_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nAlbumData::from(Album::first())->only('songs.{name, artist}');\n```\n\n----------------------------------------\n\nTITLE: Getting a Wrapped Array - PHP\nDESCRIPTION: This snippet explains how to obtain a wrapped array using the `transform()` method with `WrapExecutionType::Enabled`. By default, the `toArray` and `toJson` functions will not wrap the data. This demonstrates how to explicitly enable wrapping for these methods.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/wrapping.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nSongData::from(Song::first())->wrap('data')->transform(wrapExecutionType: WrapExecutionType::Enabled);\n```\n\n----------------------------------------\n\nTITLE: Configuring make:data command - PHP\nDESCRIPTION: This PHP snippet shows an example configuration for the `make:data` command within the `data.php` configuration file. It demonstrates how to set the default namespace and suffix for generated data objects. The `namespace` key defines the default namespace (e.g., 'Data' translates to '\\App\\Data'), and `suffix` appends a string to generated class names. This requires the Spatie Laravel Data package, and assumes the `data.php` config file exists. The output is a modification of the command's default behavior.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/commands.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n'commands' => [\n    /*\n     * Provides default configuration for the `make:data` command. These settings can be overridden with options\n     * passed directly to the `make:data` command for generating single Data classes, or if not set they will\n     * automatically fall back to these defaults. See `php artisan make:data --help` for more information\n     */\n    'make' => [\n        /*\n         * The default namespace for generated Data classes. This exists under the application's root namespace,\n         * so the default 'Data` will end up as '\\App\\Data', and generated Data classes will be placed in the\n         * app/Data/ folder. Data classes can live anywhere, but this is where `make:data` will put them.\n         */\n        'namespace' => 'Data',\n        \n        /*\n         * This suffix will be appended to all data classes generated by make:data, so that they are less likely\n         * to conflict with other related classes, controllers or models with a similar name without resorting\n         * to adding an alias for the Data object. Set to a blank string (not null) to disable.\n         */\n        'suffix' => 'Data',\n    ],\n]\n```\n\n----------------------------------------\n\nTITLE: Using AutoWhenLoadedLazy Attribute - PHP\nDESCRIPTION: This demonstrates using the `AutoWhenLoadedLazy` attribute on a property. The `favoriteSong` property will only be included when the relation is loaded on the model.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/lazy-properties.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nclass UserData extends Data\n{\n    public function __construct(\n        public string $title,\n        #[AutoWhenLoadedLazy]\n        public Lazy|SongData $favoriteSong,\n    ) {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowed Query String Includes in PHP\nDESCRIPTION: Shows how to specify which properties are allowed to be included via query string parameters by implementing the allowedRequestIncludes method.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/lazy-properties.md#_snippet_31\n\nLANGUAGE: php\nCODE:\n```\nclass UserData extends Data\n{\n    public static function allowedRequestIncludes(): ?array\n    {\n        return ['favorite_song'];\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Transformer Interface in PHP\nDESCRIPTION: Defines the `Transformer` interface required by spatie/laravel-data. It includes the `transform` method which takes a `DataProperty`, the `value` to transform (never null), and a `TransformationContext` containing transformation settings, returning the transformed value. This interface ensures custom transformers adhere to the package's structure.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/creating-a-transformer.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ninterface Transformer\n{\n    public function transform(DataProperty $property, mixed $value, TransformationContext $context): mixed;\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling Exception Behavior for Max Depth per Call in PHP\nDESCRIPTION: Shows how to control the behavior when the maximum transformation depth is reached during a specific `transform()` call. Using `maxDepth(20, throw: false)` prevents an exception and returns an empty array instead. Requires importing `Spatie\\LaravelData\\Support\\Transformation\\TransformationContextFactory`.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/transformers.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nArtistData::from($artist)->transform(\n    TransformationContextFactory::create()->maxDepth(20, throw: false)\n);\n```\n\n----------------------------------------\n\nTITLE: Allowing Specific Query String Includes in PHP\nDESCRIPTION: Shows how to allow specific properties to be included via query string by listing them in the allowedRequestIncludes method.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/lazy-properties.md#_snippet_35\n\nLANGUAGE: php\nCODE:\n```\nclass UserData extends Data\n{\n    public static function allowedRequestIncludes(): ?array\n    {\n        return ['favorite_song', 'name'];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using WithoutValidation Attribute to Skip Property Validation\nDESCRIPTION: Using the WithoutValidation attribute to exclude a specific property from being automatically validated, useful when the property is populated after validation or through custom logic.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/validation/skipping-validation.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass SongData extends Data\n{\n    public function __construct(\n        #[WithoutValidation]\n        public string $name,\n    ) {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying In Validation Attribute\nDESCRIPTION: The `#[In]` attribute validates that the input value is included in a predefined list of acceptable values. The accepted values are passed as an array or as a list of arguments.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/validation-attributes.md#_snippet_41\n\nLANGUAGE: php\nCODE:\n```\n```php\n#[In([1, 2, 3, 'a', 'b'])]\npublic mixed $closure; \n\n#[In(1, 2, 3, 'a', 'b')]\npublic mixed $closure; \n```\n```\n\n----------------------------------------\n\nTITLE: Conditional Permanent Property Methods in PHP\nDESCRIPTION: Demonstrates using conditional property methods with a permanent flag to make the changes persist for all future transformations.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/lazy-properties.md#_snippet_38\n\nLANGUAGE: php\nCODE:\n```\nAlbumData::from(Album::first())->includeWhen('songs', fn(AlbumData $data) => count($data->songs) > 0, permanent: true);\nAlbumData::from(Album::first())->excludeWhen('songs', fn(AlbumData $data) => count($data->songs) > 0, permanent: true);\nAlbumData::from(Album::first())->onlyWhen('songs', fn(AlbumData $data) => count($data->songs) > 0), permanent: true);\nAlbumData::from(Album::first())->except('songs', fn(AlbumData $data) => count($data->songs) > 0, permanent: true);\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Objects with Nested Collections in PHP\nDESCRIPTION: Shows how to create a Data class that contains a collection of other Data objects. The example demonstrates an AlbumData class with a collection of SongData objects.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/from-data-to-array.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nclass AlbumData extends Data\n{\n    /**\n    * @param Collection<int, SongData> $songs\n    */\n    public function __construct(\n        public string $title,\n        public array $songs,\n    ) {\n    }\n\n    public static function fromModel(Album $album): self\n    {\n        return new self(\n            $album->title,\n            SongData::collect($album->songs)\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying BeforeOrEqual Validation Attribute\nDESCRIPTION: The `#[BeforeOrEqual]` attribute checks if a date is before or equal to a specified date. Similar to `#[Before]`, it supports date strings, Carbon instances, or field references.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/validation-attributes.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n```php\n#[BeforeOrEqual('tomorrow')]\npublic Carbon $closure; \n\n#[BeforeOrEqual(Carbon::yesterday())]\npublic Carbon $closure; \n\n// Always use field references when referencing other fields\n#[BeforeOrEqual(new FieldReference('other_field'))]\npublic Carbon $closure; \n```\n```\n\n----------------------------------------\n\nTITLE: Applying Image Validation Attribute\nDESCRIPTION: The `#[Image]` attribute validates that the input is a valid image file (jpg, png, bmp, gif, or svg).\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/validation-attributes.md#_snippet_40\n\nLANGUAGE: php\nCODE:\n```\n```php\n#[Image]\npublic UploadedFile $closure; \n```\n```\n\n----------------------------------------\n\nTITLE: Wrapping a Data Collection - PHP\nDESCRIPTION: This snippet shows how to wrap a data collection with a custom key.  It uses the `collect()` method to create a `DataCollection` from a Laravel Collection. The `wrap()` method is then used to specify the wrapping key.  It only supports wrapping `DataCollections`, `PaginatedDataCollections`, and `CursorPaginatedDataCollections`.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/wrapping.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nSongData::collect(Song::all(), DataCollection::class)->wrap('data');\n```\n\n----------------------------------------\n\nTITLE: Selecting a Property from a Container Dependency\nDESCRIPTION: Demonstrates how to access a specific property from a dependency injected from the container, using `FromContainerProperty`. The `service_name` property will be filled with the `name` property from `SongService`.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/injecting-property-values.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nclass SongData extends Data {\n    #[FromContainerProperty(SongService::class, 'name')]\n    public string $service_name;\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Email Validation Attribute\nDESCRIPTION: The `#[Email]` attribute validates that the input is a valid email address. Additional validation options can be applied, using constants such as `Email::RfcValidation` and `Email::DnsCheckValidation`.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/validation-attributes.md#_snippet_28\n\nLANGUAGE: php\nCODE:\n```\n```php\n#[Email]\npublic string $closure;\n\n#[Email(Email::RfcValidation)]\npublic string $closure;  \n\n#[Email([Email::RfcValidation, Email::DnsCheckValidation])]\npublic string $closure;  \n\n#[Email(Email::RfcValidation, Email::DnsCheckValidation)]\npublic string $closure;  \n```\n```\n\n----------------------------------------\n\nTITLE: Nested Data Object Wrapping - PHP\nDESCRIPTION: This snippet demonstrates nested wrapping.  A `UserData` object contains a `SongData` object. The wrapping is explicitly applied to the `SongData` instance during creation. Note that wrapping will only occur on `DataCollection` objects. Simple data objects are not wrapped in nested structures.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/wrapping.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nclass UserData extends Data\n{\n    public function __construct(\n        public string $title,\n        public string $email,\n        public SongData $favorite_song,\n    ) {\n    }\n    \n    public static function fromModel(User $user): self\n    {\n        return new self(\n            $user->title,\n            $user->email,\n            SongData::create($user->favorite_song)->wrap('data')\n        );\n    }\n}\n\nUserData::from(User::first())->wrap('data');\n```\n\n----------------------------------------\n\nTITLE: Configuring the DataTypeScriptTransformer in Laravel\nDESCRIPTION: Guides editing the 'typescript-transformer.php' configuration file to include the 'DataTypeScriptTransformer'. If using the existing 'DtoTransformer', ensure 'DataTypeScriptTransformer' is positioned before it. This setup is essential for enabling automatic TypeScript type generation from data classes.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/typescript.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n// Example snippet indicating configuration adjustment\n// 'typescript-transformer.php' should include:\n// 'transformers' => [\n//     Spatie\\LaravelData\\Support\\TypeScriptTransformer\\DataTypeScriptTransformer::class,\n//     // other transformers...\n// ]\n```\n\n----------------------------------------\n\nTITLE: Applying GreaterThan Validation Attribute\nDESCRIPTION: The `#[GreaterThan]` attribute validates that the input is greater than the value of another field.  It takes the other field's name as an argument.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/validation-attributes.md#_snippet_38\n\nLANGUAGE: php\nCODE:\n```\n```php\n#[GreaterThan('other_field')]\npublic int $closure; \n```\n```\n\n----------------------------------------\n\nTITLE: Applying ExcludeWith Validation Attribute\nDESCRIPTION: The `#[ExcludeWith]` attribute, currently non-functional in the described project, intended to exclude a field from validation *with* another field. The note specifies that this is scheduled to be fixed in a future version.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/validation-attributes.md#_snippet_33\n\nLANGUAGE: php\nCODE:\n```\n```php\n#[ExcludeWith('other_field')]\npublic string $closure;\n```\n```\n\n----------------------------------------\n\nTITLE: Applying MaxDigits Validation Attribute\nDESCRIPTION: The `#[MaxDigits]` attribute validates that the input has a maximum number of digits.  The maximum number of digits is provided as an argument.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/validation-attributes.md#_snippet_54\n\nLANGUAGE: php\nCODE:\n```\n```php\n#[MaxDigits(10)]\npublic int $closure; \n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Mapping Strategy in Laravel Data\nDESCRIPTION: Shows how to set a default name mapping strategy for all data objects in the data.php configuration file, setting output mapping to use snake_case by default.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/mapping-property-names.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n'name_mapping_strategy' => [\n    'input' => null,\n    'output' => SnakeCaseMapper::class,\n],\n```\n\n----------------------------------------\n\nTITLE: Using WithCastAndTransformer Attribute in a Data Object - PHP\nDESCRIPTION: This example shows how to use the WithCastAndTransformer attribute to apply both casting and transformation logic to a specific property in a Data object. The specified class must implement both Cast and Transformer interfaces, allowing seamless conversion and output transformation. Dependencies: spatie/laravel-data, a class implementing both Cast and Transformer.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/creating-a-cast.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nclass SongData extends Data\n{\n    public function __construct(\n        public string $title,\n        #[WithCastAndTransformer(SomeCastAndTransformer::class)]\n        public string $artist,\n    ) {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying CurrentPassword Validation Attribute\nDESCRIPTION: The `#[CurrentPassword]` attribute validates that the input matches the user's current password. The attribute may optionally accept the guard name as an argument.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/validation-attributes.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n```php\n#[CurrentPassword]\npublic string $closure; \n\n#[CurrentPassword('api')]\npublic string $closure; \n```\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface for Laravel Data Collection Types\nDESCRIPTION: Defines TypeScript interface properties for various Laravel Data collection configurations. This includes standard collections, nullable collections, optional collections, and lazy-loading collections, all containing SimpleData objects and pagination metadata.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/tests/__snapshots__/DataTypeScriptTransformerTest__it_uses_the_correct_types_for_cursor_paginated_data_collection_of_attributes__1.txt#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\ncollection: {data:Array<{%Spatie\\LaravelData\\Tests\\Fakes\\SimpleData%}>;links:Array<any>;meta:{path:string;per_page:number;next_cursor:string | null;next_cursor_url:string | null;prev_cursor:string | null;prev_cursor_url:string | null;};};collectionWithNull: {data:Array<{%Spatie\\LaravelData\\Tests\\Fakes\\SimpleData%}>;links:Array<any>;meta:{path:string;per_page:number;next_cursor:string | null;next_cursor_url:string | null;prev_cursor:string | null;prev_cursor_url:string | null;};} | null;collectionWithNullable: {data:Array<{%Spatie\\LaravelData\\Tests\\Fakes\\SimpleData%}>;links:Array<any>;meta:{path:string;per_page:number;next_cursor:string | null;next_cursor_url:string | null;prev_cursor:string | null;prev_cursor_url:string | null;};} | null;optionalCollection?: {data:Array<{%Spatie\\LaravelData\\Tests\\Fakes\\SimpleData%}>;links:Array<any>;meta:{path:string;per_page:number;next_cursor:string | null;next_cursor_url:string | null;prev_cursor:string | null;prev_cursor_url:string | null;};};optionalCollectionWithNullable?: {data:Array<{%Spatie\\LaravelData\\Tests\\Fakes\\SimpleData%}>;links:Array<any>;meta:{path:string;per_page:number;next_cursor:string | null;next_cursor_url:string | null;prev_cursor:string | null;prev_cursor_url:string | null;};} | null;lazyCollection?: {data:Array<{%Spatie\\LaravelData\\Tests\\Fakes\\SimpleData%}>;links:Array<any>;meta:{path:string;per_page:number;next_cursor:string | null;next_cursor_url:string | null;prev_cursor:string | null;prev_cursor_url:string | null;};};lazyCollectionWithNullable?: {data:Array<{%Spatie\\LaravelData\\Tests\\Fakes\\SimpleData%}>;links:Array<any>;meta:{path:string;per_page:number;next_cursor:string | null;next_cursor_url:string | null;prev_cursor:string | null;prev_cursor_url:string | null;};} | null;\n}\n```\n\n----------------------------------------\n\nTITLE: Using MapName for Both Input and Output Mapping\nDESCRIPTION: Demonstrates the MapName attribute which combines both input and output property name mapping using the SnakeCaseMapper.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/mapping-property-names.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n#[MapName(SnakeCaseMapper::class)]\nclass ContractData extends Data\n{\n    public function __construct(\n        public string $name,\n        public string $recordCompany,\n    ) {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Distinct Validation Attribute\nDESCRIPTION: The `#[Distinct]` attribute validates that the input array does not contain duplicate values.  It can also take options, such as `Distinct::Strict` for strict comparison or `Distinct::IgnoreCase` for case-insensitive comparison.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/validation-attributes.md#_snippet_25\n\nLANGUAGE: php\nCODE:\n```\n```php\n#[Distinct]\npublic string $closure;\n\n#[Distinct(Distinct::Strict)]\npublic string $closure;  \n\n#[Distinct(Distinct::IgnoreCase)]\npublic string $closure;  \n```\n```\n\n----------------------------------------\n\nTITLE: Create Data Object using Custom `fromString` - PHP\nDESCRIPTION: This snippet shows creating a `SongData` from a delimited string via a custom `fromString` method. The `fromString` method handles the logic for string parsing.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/creating-a-data-object.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nSongData::from('Never gonna give you up|Rick Astley');\n```\n\n----------------------------------------\n\nTITLE: Serialized PHP DataCollection Object with SimpleData Items\nDESCRIPTION: A serialized PHP object representing a Spatie\\LaravelData\\DataCollection containing two SimpleData objects with string properties 'A' and 'B'. The collection demonstrates the structure of data objects within the spatie/laravel-data package.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/tests/__snapshots__/SerializeableTest__it_can_serialize_and_unserialize_a_data_collection__1.txt#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nO:33:\"Spatie\\LaravelData\\DataCollection\":2:{s:8:\" * items\";O:29:\"Illuminate\\Support\\Collection\":2:{s:8:\" * items\";a:2:{i:0;O:41:\"Spatie\\LaravelData\\Tests\\Fakes\\SimpleData\":3:{s:6:\"string\";s:1:\"A\";s:14:\" * _additional\";a:0:{}s:15:\" * _dataContext\";N;}i:1;O:41:\"Spatie\\LaravelData\\Tests\\Fakes\\SimpleData\":3:{s:6:\"string\";s:1:\"B\";s:14:\" * _additional\";a:0:{}s:15:\" * _dataContext\";N;}}s:28:\" * escapeWhenCastingToString\";b:0;}s:9:\"dataClass\";s:41:\"Spatie\\LaravelData\\Tests\\Fakes\\SimpleData\";}\n```\n\n----------------------------------------\n\nTITLE: Applying Alpha Validation Attribute\nDESCRIPTION: This demonstrates the `#[Alpha]` attribute, which validates that the input contains only alphabetic characters.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/validation-attributes.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n```php\n#[Alpha]\npublic string $closure; \n```\n```\n\n----------------------------------------\n\nTITLE: JSON Representation of a Song Data Object (JSON)\nDESCRIPTION: Shows the JSON structure of a SongData object with \"name\" and \"artist\" properties, demonstrating the output format when the data object is returned as a response. No dependencies are needed to understand the structure.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/from-data-to-resource.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"Never gonna give you up\",\n    \"artist\": \"Rick Astley\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Cast Classes in PHP\nDESCRIPTION: Instructs how to implement custom cast classes by following the 'Cast' interface, enabling transformation of data types to suit specific application needs, as discussed in the advanced chapter.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/casts.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n// Example of creating a custom cast class implementing Cast interface\nclass CustomCast implements Cast\n{\n    public function cast($value, array $arguments = [])\n    {\n        // Implement custom casting logic here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Json Validation Attribute\nDESCRIPTION: The `#[Json]` attribute validates that the input is a valid JSON string.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/validation-attributes.md#_snippet_47\n\nLANGUAGE: php\nCODE:\n```\n```php\n#[Json]\npublic string $closure; \n```\n```\n\n----------------------------------------\n\nTITLE: JSON Representation of Paginator Data (JSON)\nDESCRIPTION: Shows the JSON structure of a paginated response containing an array of data objects and meta information like current page, first/last page URLs, and total count. This format is produced by Laravel Data when returning a paginated collection.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/from-data-to-resource.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\" : [\n        {\n            \"name\" : \"Never Gonna Give You Up\",\n            \"artist\" : \"Rick Astley\"\n        },\n        {\n            \"name\" : \"Giving Up on Love\",\n            \"artist\" : \"Rick Astley\"\n        }\n    ],\n    \"meta\" : {\n        \"current_page\": 1,\n        \"first_page_url\": \"https://spatie.be/?page=1\",\n        \"from\": 1,\n        \"last_page\": 7,\n        \"last_page_url\": \"https://spatie.be/?page=7\",\n        \"next_page_url\": \"https://spatie.be/?page=2\",\n        \"path\": \"https://spatie.be/\",\n        \"per_page\": 15,\n        \"prev_page_url\": null,\n        \"to\": 15,\n        \"total\": 100\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering LaravelDataServiceProvider in Package TestCase (PHP)\nDESCRIPTION: Demonstrates how to register the `LaravelDataServiceProvider` within a Laravel package's base `TestCase` class, which typically extends `Orchestra\\Testbench\\TestCase`. This step is crucial for ensuring that the spatie/laravel-data configurations are loaded correctly during test execution, preventing issues related to configuration access, especially when using data object factories.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/in-packages.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Orchestra\\Testbench\\TestCase as Orchestra;\n\nclass TestCase extends Orchestra\n{\n    protected function getPackageProviders($app)\n    {\n        return [\n            LaravelDataServiceProvider::class,\n            // Register additional service providers to use with your tests\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the only() method with nested keys - PHP\nDESCRIPTION: This code shows how to use the only() method with nested keys. The data object will only show the 'songs.name' and 'songs.artist' properties. Note that this overwrites all other include and exclude statements.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/lazy-properties.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nAlbumData::from(Album::first())->only('songs.name', 'songs.artist');\n```\n\n----------------------------------------\n\nTITLE: Applying Accepted Validation Attribute\nDESCRIPTION: This snippet demonstrates the use of the `#[Accepted]` attribute in PHP, which validates if the input field is accepted, typically a boolean or confirmation.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/validation-attributes.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n```php\n#[Accepted]\npublic bool $closure; \n```\n```\n\n----------------------------------------\n\nTITLE: Explicitly Specifying Date Class Type\nDESCRIPTION: Manually specifying the PHP class type that date strings should be cast to, regardless of the property's type hint. In this example, dates are cast to CarbonImmutable.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/working-with-dates.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n#[WithCast(DateTimeInterfaceCast::class, type: CarbonImmutable::class)]\npublic $date\n```\n\n----------------------------------------\n\nTITLE: Installing Spatie Laravel Data via Composer in Bash\nDESCRIPTION: This snippet demonstrates how to require the spatie/laravel-data package using Composer in a Bash environment. The command must be run in the root directory of your Laravel project and requires Composer to be installed. It will fetch and install all dependencies for the package.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/installation-setup.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require spatie/laravel-data\n```\n\n----------------------------------------\n\nTITLE: Applying LessThanOrEqualTo Validation Attribute\nDESCRIPTION: The `#[LessThanOrEqualTo]` attribute validates that the input is less than or equal to the value of another field. It takes the other field's name as an argument.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/validation-attributes.md#_snippet_49\n\nLANGUAGE: php\nCODE:\n```\n```php\n#[LessThanOrEqualTo('other_field')]\npublic int $closure; \n```\n```\n\n----------------------------------------\n\nTITLE: Defining the IterableItemCast Interface - PHP\nDESCRIPTION: This snippet shows the interface for custom casting of each item in an iterable collection. Classes that want to modify or transform every element in an array or collection within a Data object should implement this interface. The castIterableItem method is called for each item and provides information about property type and context. Dependency: spatie/laravel-data.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/creating-a-cast.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ninterface IterableItemCast\n{\n    public function castIterableItem(DataProperty $property, mixed $value, array $properties, CreationContext $context): mixed;\n}\n```\n\n----------------------------------------\n\nTITLE: Date Property with Custom Format\nDESCRIPTION: Defining a DateTime property with explicitly specified date format for both casting and transformation, overriding the default configuration.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/working-with-dates.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n#[WithCast(DateTimeInterfaceCast::class, format: DATE_ATOM)]\n#[WithTransformer(DateTimeInterfaceTransformer::class, format: DATE_ATOM)]\npublic DateTime $date\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Data Object (SongData) in PHP\nDESCRIPTION: Defines the `SongData` class extending `Spatie\\LaravelData\\Data`, with public properties `title` and `artist` defined via constructor promotion. This class structure allows the package to automatically map incoming request data to the object's properties.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/request-to-data-object.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass SongData extends Data\n{\n    public function __construct(\n        public string $title,\n        public string $artist,\n    ) {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Name Mapping Strategy in Laravel\nDESCRIPTION: Shows how to configure the default name mapping strategy for all data objects in the `data.php` config file. Sets the input mapping to use `SnakeCaseMapper::class`. Requires the Spatie Laravel Data package.  This impacts how all data objects are created. There is no explicit input or output in the code snippet.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/mapping-property-names.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n'name_mapping_strategy' => [\n    'input' => SnakeCaseMapper::class,\n    'output' => null,\n],\n```\n\n----------------------------------------\n\nTITLE: Legacy collection Method Usage - Laravel Data - PHP\nDESCRIPTION: Illustrates calls to the legacy collection method to create various types of data collections. Supports arrays, LengthAwarePaginator, and CursorPaginator as sources, and returns the corresponding collection type. Use is discouraged; prefer collect method for forward compatibility.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/collections.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nSongData::collection(Song::all()); // returns a DataCollection of SongData objects\nSongData::collection(Song::paginate()); // returns a PaginatedDataCollection of SongData objects\nSongData::collection(Song::cursorPaginate()); // returns a CursorPaginatedCollection of SongData objects\n\n```\n\n----------------------------------------\n\nTITLE: Array Output Example from Data Object in PHP\nDESCRIPTION: Shows the expected array output structure when a SongData object is converted to an array. The resulting array contains the song name and artist as key-value pairs.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/from-data-to-array.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[\n    'name' => 'Never gonna give you up',\n    'artist' => 'Rick Astley'\n]\n```\n\n----------------------------------------\n\nTITLE: Using Global Casts in Data Class Properties\nDESCRIPTION: Illustrates how to declare a property in a data class that automatically uses a global cast, simplifying the class definition when the cast is shared across multiple classes.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/casts.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nclass SongData extends Data\n{\n    public function __construct(\n        public string $title,\n        public string $artist,\n        public DateTime $date,\n        #[WithCast(EnumCast::class)]\n        public Format $format,\n    ) {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Response With Included Properties in JSON\nDESCRIPTION: Example JSON response when additional properties are included via query string, showing the expanded output structure.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/lazy-properties.md#_snippet_33\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\" : \"Ruben Van Assche\",\n    \"favorite_song\" : {\n        \"name\" : \"Never Gonna Give You Up\",\n        \"artist\" : \"Rick Astley\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Providing Default Values for Null Database Attributes in Laravel Data Eloquent Casts in PHP\nDESCRIPTION: Shows how to configure a Laravel Data cast to instantiate a data object with default values even if the database attribute is null. Adding the cast parameter ':default' enforces instantiation. The referenced data class defines default property values used when the attribute is missing from the database.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/eloquent-casting.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nclass Song extends Model\n{\n    protected $casts = [\n        'artist' => ArtistData::class . ':default',\n    ];\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nclass ArtistData extends Data \n{\n    public string $name = 'Default name';\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nSong::findOrFail($id)->artist->name; // 'Default name'\n```\n\n----------------------------------------\n\nTITLE: Defining Default Wrap Key - PHP\nDESCRIPTION: This snippet demonstrates how to define a default wrap key within a data object class. The `defaultWrap()` method is overridden to return the desired key.  This makes all instances of this data object automatically wrapped when sent as a resource.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/wrapping.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass SongData extends Data\n{\n    public function defaultWrap(): string\n    {\n        return 'data';\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Installing the spatie/laravel-typescript-transformer Package\nDESCRIPTION: Provides the Bash command to require the 'spatie/laravel-typescript-transformer' package via Composer, enabling TypeScript generation capabilities within a Laravel project. Followed by a command to publish its configuration file. These setup steps are prerequisites for using the data-to-TypeScript transformation.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/typescript.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\ncomposer require spatie/laravel-typescript-transformer\n\nphp artisan vendor:publish --tag=typescript-transformer-config\n```\n\n----------------------------------------\n\nTITLE: Generating Data Object with Custom Namespace - Shell\nDESCRIPTION: This shell command generates a new data object named `PostData` but specifies a custom namespace using the `--namespace` option. The object will be placed in the `DataTransferObjects` namespace. This overrides the default `App\\Data` namespace. This uses the Laravel Artisan command `make:data`. The dependencies include Laravel and the Spatie Data package. The output is a newly created data object file within the project's directory structure, in the specified namespace.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/commands.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan make:data PostData --namespace=DataTransferObjects\n```\n\n----------------------------------------\n\nTITLE: Updating Transformer transform() signature\nDESCRIPTION: This code snippet illustrates the change required to the `transform` method in custom transformers. In v3, the method took `$property` and `$value`. In v4, a new `$context` parameter of type `TransformationContext` is added, allowing for more context-aware transformations.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/UPGRADING.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// v3\npublic function transform(DataProperty $property, mixed $value): mixed\n{\n    // ...\n}\n\n// v4\npublic function transform(DataProperty $property,mixed $value,TransformationContext $context): mixed\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Data Object with Nested Data\nDESCRIPTION: This snippet shows how to define a Laravel Data object (`AlbumData`) containing a nested `ArtistData` object. It demonstrates how to create a data structure that includes another data object as a property.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/validation/nesting-data.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass AlbumData extends Data\n{\n    public function __construct(\n        public string $title,\n        public ArtistData $artist,\n    ) {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Dates to a Different Time Zone during Casting\nDESCRIPTION: Converting a date to a different time zone during the casting process using the setTimeZone parameter. This will adjust the time value to represent the same moment in the new time zone.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/working-with-dates.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n#[WithCast(DateTimeInterfaceCast::class, setTimeZone: 'Europe/Brussels')]\npublic DateTime $date\n```\n\n----------------------------------------\n\nTITLE: Refactoring transform() method call\nDESCRIPTION: This code snippet showcases how the transform method call has been refactored. In v3, the method was called using parameters. In v4, a factory pattern using `TransformationContextFactory::create()` is used to set the context.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/UPGRADING.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// v3\n$data->transform(\n    transformValues:true,\n    wrapExecutionType:WrapExecutionType::Disabled,\n    mapPropertyNames:true,\n);\n\n// v4\n$data->transform(\n    TransformationContextFactory::create()\n        ->transformValues()\n        ->wrapExecutionType(WrapExecutionType::Disabled)\n        ->mapPropertyNames()\n);\n```\n\n----------------------------------------\n\nTITLE: Validation Rules for Optional Nested Data (No Value Provided)\nDESCRIPTION: The validation rules applied when no value is provided for the optional nested object key.  The 'artist' field is validated as 'present' and expected to be an array validated using `NestedRules`.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/validation/nesting-data.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n[\n    'title' => ['required', 'string'],\n    'artist' => ['present', 'array', new NestedRules()],\n]\n```\n\n----------------------------------------\n\nTITLE: Creating a Data object with mapped property names\nDESCRIPTION: Demonstrates how to instantiate a UserData object using the from() method, showing that you can use either the mapped name ('favorite_song') or the original name ('song') when providing data.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/mapping-rules.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nUserData::from([\n    'favorite_song' => ..., // You can use the mapped or original name here\n    'title' => 'some title'\n]);\n```\n\n----------------------------------------\n\nTITLE: Using MapName for Input/Output Mapping in Laravel Data\nDESCRIPTION: This snippet demonstrates the use of the `MapName` attribute.  It combines both input and output mapping.  `SnakeCaseMapper::class` will be used for mapping. Requires the Spatie Laravel Data package and `SnakeCaseMapper`. Input is an array, and the output is a data object with mapped property names.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/mapping-property-names.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Spatie\\LaravelData\\Data;\nuse Spatie\\LaravelData\\Attributes\\MapName;\nuse Spatie\\LaravelData\\Support\\SnakeCaseMapper;\n\n#[MapName(SnakeCaseMapper::class)]\nclass ContractData extends Data\n{\n    public function __construct(\n        public string $name,\n        public string $recordCompany,\n    ) {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Data Structure Properties in TypeScript\nDESCRIPTION: This snippet defines the structure of a data object using TypeScript syntax. It includes a standard property `some_camel_case_property` of type `string` and a non-standard property `'some:non:standard:property'` also of type `string`. This definition can be used for type hinting or data mapping.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/tests/__snapshots__/DataTypeScriptTransformerTest__it_outputs_types_with_properties_using_their_mapped_name_on_a_property__1.txt#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\nsome_camel_case_property: string;\n'some:non:standard:property': string;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Rule Inferrers in PHP\nDESCRIPTION: Illustrates the configuration array for `rule_inferrers` found within the `data.php` config file. This array lists the fully qualified class names of the rule inferrers that the package uses to analyze data object properties and add appropriate validation rules. The classes shown represent the default set of inferrers enabled in the package.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/validation/auto-rule-inferring.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n/*\n * Rule inferrers can be configured here. They will automatically add\n * validation rules to properties of a data object based upon\n * the type of the property.\n */\n'rule_inferrers' => [\n    Spatie\\LaravelData\\RuleInferrers\\SometimesRuleInferrer::class,\n    Spatie\\LaravelData\\RuleInferrers\\NullableRuleInferrer::class,\n    Spatie\\LaravelData\\RuleInferrers\\RequiredRuleInferrer::class,\n    Spatie\\LaravelData\\RuleInferrers\\BuiltInTypesRuleInferrer::class,\n    Spatie\\LaravelData\\RuleInferrers\\AttributesRuleInferrer::class,\n],\n```\n\n----------------------------------------\n\nTITLE: Defining Lazy Properties in a Data Object (PHP)\nDESCRIPTION: Demonstrates defining lazy properties within a `spatie/laravel-data` object (`LazySongData`) using the `Lazy` type hint combined with the actual type (`ArtistData` or `string`). This prevents these properties from being sent over the wire between Livewire requests unless explicitly included or accessed.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/use-with-livewire.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Spatie\\LaravelData\\Lazy;\nuse Spatie\\LaravelData\\Data;\n\nclass LazySongData extends Data\n{\n    public function __construct(\n        public Lazy|ArtistData $artist,\n        public Lazy|string $title,\n    ) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Analyzing Data Structure in PHP\nDESCRIPTION: This snippet represents a serialized data object within the Spatie Laravel Data framework. It defines a class with the name `Spatie\\LaravelData\\Tests\\Fakes\\SimpleData` and initializes its properties.  The object contains a string property with the value \"Hello world\" and an empty array property named \"_additional\".\nSOURCE: https://github.com/spatie/laravel-data/blob/main/tests/__snapshots__/DataTest__it_can_serialize_and_unserialize_a_data_object__1.txt#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nO:41:\"Spatie\\LaravelData\\Tests\\Fakes\\SimpleData\":2:{s:6:\"string\";s:11:\"Hello world\";s:14:\"\\0*\\0_additional\";a:0:{}}\n```\n\n----------------------------------------\n\nTITLE: Adding custom validation logic before validation using withValidator() in Laravel Data class\nDESCRIPTION: Allows insertion of custom validation logic by defining the static withValidator() method, receiving the Validator instance and adding custom rules or errors.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/validation/working-with-the-validator.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nclass SongData extends Data\n{\n    public function __construct(\n        public string $title,\n        public string $artist,\n    ) {\n    }\n    \n    public static function withValidator(Validator $validator): void\n    {\n        $validator->after(function ($validator) {\n            $validator->errors()->add('field', 'Something is wrong with this field!');\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using AutoWhenLoadedLazy with Collection - PHP\nDESCRIPTION: This snippet shows how to use `AutoWhenLoadedLazy` with a collection of Data objects. The `favoriteSongs` property, which is a collection of `SongData` objects, will only be included when the relation is loaded.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/lazy-properties.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nclass UserData extends Data\n{\n    /**\n    * @param Lazy|array<int, SongData> $favoriteSongs\n     */\n    public function __construct(\n        public string $title,\n        #[AutoWhenLoadedLazy]\n        public Lazy|array $favoriteSongs,\n    ) {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Validation Attribute PHP\nDESCRIPTION: Shows how to define a custom validation attribute by extending the `CustomValidationAttribute` class. Custom attributes must implement the `getRules` method, which returns the validation rule(s) to be applied to the property.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/validation/using-validation-attributes.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n#[Attribute(Attribute::TARGET_PROPERTY | Attribute::TARGET_PARAMETER)]\nclass CustomRule extends CustomValidationAttribute\n{\n    /**\n     * @return array<object|string>|object|string\n     */\n    public function getRules(ValidationPath $path): array|object|string\n    {\n        return [new CustomRule()];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting dependencies into attribute customization method\nDESCRIPTION: Provides dependencies, such as a repository, into the static attributes() method to dynamically determine attribute labels, utilizing dependency injection.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/validation/working-with-the-validator.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nclass SongData extends Data\n{\n    public function __construct(\n        public string $title,\n        public string $artist,\n    ) {\n    }\n\n    public static function attributes(\n        ValidationAttributesLanguageRepository $validationAttributesLanguageRepository\n    ): array\n    {\n        return [\n            'title' => $validationAttributesLanguageRepository->get('title'),\n            'artist' => $validationAttributesLanguageRepository->get('artist'),\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Different Validation Attribute\nDESCRIPTION: The `#[Different]` attribute validates that the input is different than another specified field's value. It takes the other field's name as an argument.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/validation-attributes.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n```php\n#[Different('other_field')]\npublic string $closure; \n```\n```\n\n----------------------------------------\n\nTITLE: Validation Payload handling\nDESCRIPTION: This code snippet illustrates changes in how validation is handled, specifically how `exclude` rules work. Previously the properties are set on a Data object, now the validated payload is used to create the data object, meaning that properties that are exlcuded, are not present in the created data object, hence requiring those properties to be typed with `Optional` type.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/UPGRADING.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// v3\n\nclass SomeData extends Data {\n    #[ExcludeIf('excludeProperty', true)]\n    public string $property;\n    public bool $excludeProperty;\n}\n// Providing ['property' => 'something', 'excludeProperty' => true] will result in both fields set\n\n// v4\n\nclass SomeData extends Data {\n    #[ExcludeIf('excludeProperty', true)]\n    public string|Optional $property;\n    public bool $excludeProperty;\n}\n// Providing ['property' => 'something', 'excludeProperty' => true] will result in only the excludeProperty field set, the property field will be optional\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Data Objects in PHP\nDESCRIPTION: Demonstrates how to create and implement a Data class that contains another Data object as a property. The example shows a UserData class with a nested SongData object for a user's favorite song.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/from-data-to-array.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nclass UserData extends Data\n{\n    public function __construct(\n        public string $title,\n        public string $email,\n        public SongData $favorite_song,\n    ) {\n    }\n    \n    public static function fromModel(User $user): self\n    {\n        return new self(\n            $user->title,\n            $user->email,\n            SongData::from($user->favorite_song)\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying DateEquals Validation Attribute\nDESCRIPTION: The `#[DateEquals]` attribute validates that the input date is equal to a specified date.  The specified date can be a string or a Carbon instance.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/validation-attributes.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n```php\n#[DateEquals('tomorrow')]\npublic Carbon $date; \n\n#[DateEquals(Carbon::yesterday())]\npublic Carbon $date; \n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Livewire Synths for laravel-data (PHP)\nDESCRIPTION: Illustrates how to enable the experimental Livewire Synths feature in the `config/data.php` file by setting `livewire.enable_synths` to `true`. This allows using data objects in Livewire without implementing the `Wireable` interface.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/use-with-livewire.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n'livewire' => [\n    'enable_synths' => false, // Set to true to enable\n]\n```\n\n----------------------------------------\n\nTITLE: Applying IPv6 Validation Attribute\nDESCRIPTION: The `#[IPv6]` attribute validates that the input is a valid IPv6 address.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/validation-attributes.md#_snippet_46\n\nLANGUAGE: php\nCODE:\n```\n```php\n#[IPv6]\npublic string $closure; \n```\n```\n\n----------------------------------------\n\nTITLE: Manually Creating Optional Values in Factory Methods in PHP\nDESCRIPTION: Demonstrates how to manually create Optional values within static factory methods using Optional::create() for greater flexibility in object creation.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/optional-properties.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nclass SongData extends Data\n{\n    public function __construct(\n        public string $title,\n        public string|Optional $artist,\n    ) {\n    }\n    \n    public static function fromTitle(string $title): static\n    {\n        return new self($title, Optional::create());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Manual Validation Rules in Laravel Data Class\nDESCRIPTION: This snippet shows how to define validation rules manually within a Laravel Data class by implementing a static `rules()` method. This method should return an array following Laravel's validation rule structure, allowing full control over the validation process for the data object.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/validation/introduction.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nclass SongData extends Data\n{\n    public function __construct(\n        public string $title,\n        public string $artist,\n    ) {\n    }\n    \n    public static function rules(): array\n    {\n        return [\n            'title' => ['required', 'string'],\n            'artist' => ['required', 'string'],\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying ExcludeIf Validation Attribute\nDESCRIPTION: The `#[ExcludeIf]` attribute, currently non-functional in the described project, intended to exclude a field from validation *if* another field meets a specified condition. The note specifies that this is scheduled to be fixed in a future version.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/validation-attributes.md#_snippet_31\n\nLANGUAGE: php\nCODE:\n```\n```php\n#[ExcludeIf('other_field', 'has_value')]\npublic string $closure;\n```\n```\n\n----------------------------------------\n\nTITLE: Adding a String Rule (PHP)\nDESCRIPTION: This snippet shows how to add a validation rule represented as a string to the `RulesCollection`.  It uses the `Rule` class, passing a string representation of the rule (`min:42`) to the constructor and then adds it to the collection. This provides an alternative way to define rules for the data object properties. This requires that the `Rule` class is imported and available for use and relies on the `add` method to modify the `RulesCollection`.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/creating-a-rule-inferrer.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n$rules->add(new Rule('min:42'));\n```\n\n----------------------------------------\n\nTITLE: Nested Data Object Array Output Example in PHP\nDESCRIPTION: Shows the expected array output structure when a UserData object with a nested SongData object is transformed to an array. The nested object is automatically transformed.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/from-data-to-array.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n[\n    \"name\": \"Ruben\",\n    \"email\": \"ruben@spatie.be\",\n    \"favorite_song\": [\n        \"name\" : \"Never Gonna Give You Up\",\n        \"artist\" : \"Rick Astley\"\n    ]\n]\n```\n\n----------------------------------------\n\nTITLE: Manually Overriding Validation Rules in Laravel Data Class\nDESCRIPTION: Example of a Laravel Data class with a custom fromRequest method and manual validation rules implementation that creates validation conflicts with auto-generated rules.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/validation/skipping-validation.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass SongData extends Data\n{\n    public function __construct(\n        public string $name,\n    ) {\n    }\n    \n    public static function fromRequest(Request $request): static{\n        return new self(\"{$request->input('first_name')} {$request->input('last_name')}\")\n    }\n    \n    public static function rules(): array\n    {\n        return [\n            'first_name' => ['required', 'string'],\n            'last_name' => ['required', 'string'],\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creation Without Magic Methods - PHP\nDESCRIPTION: Shows how to create a data object using a factory and disabling the magical creation methods.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/creating-a-data-object.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nSongData::factory()->withoutMagicalCreation()->from($song);\n```\n\n----------------------------------------\n\nTITLE: Creating a basic data object from a Laravel model\nDESCRIPTION: Defines a simple Artist model and corresponding ArtistData class. Demonstrates transforming a model instance into a data object using the from() method, with no special features involved.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/model-to-data-object.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nclass Artist extends Model\n{\n    \n}\n\nclass ArtistData extends Data\n{\n    public int $id;\n    public string $first_name;\n    public string $last_name;\n    public CarbonImmutable $created_at;\n    public CarbonImmutable $updated_at;\n}\n\n$artist = ArtistData::from(Artist::find(1));\n```\n\n----------------------------------------\n\nTITLE: Applying MimeTypes Validation Attribute\nDESCRIPTION: The `#[MimeTypes]` attribute validates that the input is a valid file upload and has a MIME type that matches the specified types. It accepts the MIME type or an array of MIME types as arguments.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/validation-attributes.md#_snippet_55\n\nLANGUAGE: php\nCODE:\n```\n```php\n#[MimeTypes('video/quicktime')]\npublic UploadedFile $closure; \n\n#[MimeTypes(['video/quicktime', 'video/avi'])]\npublic UploadedFile $closure; \n\n#[MimeTypes('video/quicktime', 'video/avi')]\npublic UploadedFile $closure; \n```\n```\n\n----------------------------------------\n\nTITLE: Constructing Data Class Instance with Simple Types\nDESCRIPTION: Attempts to create a 'SongData' object from an array with string date and format. Errors occur due to 'DateTime' and 'Enum' types needing casts for proper instantiation from strings.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/casts.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nSongData::from([\n    'title' => 'Never gonna give you up',\n    'artist' => 'Rick Astley',\n    'date' => '27-07-1987',\n    'format' => 'vinyl',\n]);\n```\n\n----------------------------------------\n\nTITLE: Type-Hinting Spatie Data Collection with Custom Generic Collection (PHP)\nDESCRIPTION: For more complex scenarios, you can create a custom collection class that extends Laravel's Collection and uses PHPDoc generics (@template, @extends) to define its item type. You can then use this custom collection class as the property type in your Data object.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/nesting.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @template TKey of array-key\n * @template TData of \\App\\Data\\SongData\n *\n * @extends \\Illuminate\\Support\\Collection<TKey, TData>\n */\nclass SongDataCollection extends Collection\n{\n}\n\nclass AlbumData extends Data\n{\n    public function __construct(\n        public string $title,\n        public SongDataCollection $songs,\n    ) {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying InArray Validation Attribute\nDESCRIPTION: The `#[InArray]` attribute validates that the input exists as a key within the specified array. It takes the name of the array field as an argument.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/validation-attributes.md#_snippet_42\n\nLANGUAGE: php\nCODE:\n```\n```php\n#[InArray('other_field')]\npublic string $closure; \n```\n```\n\n----------------------------------------\n\nTITLE: Customize Data Object Creation from String - PHP\nDESCRIPTION: This snippet demonstrates how to create a data object from a string using a custom `fromString` method.  It explodes the string by a delimiter, then constructs the data object.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/creating-a-data-object.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nclass SongData extends Data\n{\n    public function __construct(\n        public string $title,\n        public string $artist,\n    ) {\n    }\n    \n    public static function fromString(string $string): self\n    {\n        [$title, $artist] = explode('|', $string);\n    \n        return new self($title, $artist);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing Data::collection with collect()\nDESCRIPTION: This code snippet demonstrates the change in how data collections are created. In v3, the `Data::collection` method was used, whereas in v4, the `collect` method is favored. The `collect` method returns the type of data passed in as a type. Also, the output type can be overwritten with the second parameter.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/UPGRADING.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// v3\nSomeData::collection($items); // DataCollection\n\n// v4\nSomeData::collect($items); // array of SomeData\n\nSomeData::collect($items, DataCollection::class); // DataCollection\n```\n\n----------------------------------------\n\nTITLE: Handling potential infinite loops with relation loading\nDESCRIPTION: Highlights a cautionary example: nesting relations with relations that refer back to each other (e.g., ArtistData containing ArtistData as artist). Such recursive relations can cause infinite loops when automatically eager-loading, which requires careful management.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/model-to-data-object.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\nclass SongData extends Data\n{\n    public int $id;\n    public string $title;\n    #[LoadRelation]\n    public ArtistData $artist;\n}\n\n// When creating SongData from Song model, this setup causes an infinite loop due to mutual relation loading.\n// $song = SongData::from(Song::find(1));\n```\n\n----------------------------------------\n\nTITLE: Adding WithData Trait to a Laravel FormRequest Using Method in PHP\nDESCRIPTION: This snippet illustrates integrating the WithData trait with a Laravel FormRequest. Instead of a property, it defines a dataClass() method returning the target data class (e.g., SongData::class). Requires the WithData trait, a valid FormRequest class, and the specified data class. Enables transformation of the request into a data object using getData.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/get-data-from-a-class-quickly.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass SongRequest extends FormRequest\n{\n    use WithData;\n    \n    protected function dataClass(): string\n    {\n        return SongData::class;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Data Pipe handle() signature\nDESCRIPTION: This snippet demonstrates how the `handle` method signature in custom data pipes needs to be adjusted. In v3, the method took `$payload`, `$class`, and `$properties` (Collection). In v4, the `$properties` type changed to `array` and a `CreationContext` is added. The return type also changes from `Collection` to `array`.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/UPGRADING.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// v3\npublic function handle(mixed $payload, DataClass $class, Collection $properties): Collection\n{\n    // ...\n}\n\n// v4\npublic function handle(mixed $payload, DataClass $class, array $properties, CreationContext $creationContext): array\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Parameter Priority\nDESCRIPTION: This shows how a route parameter value overrides the request body. The `$id` property in the `SongData` object will get the value from the route parameter, even if a different value is in the request body.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/injecting-property-values.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nRoute::patch('/songs/{song}', [SongController::class, 'update']);\n\n// PATCH /songs/123\n// { \"id\": 321, \"name\": \"Never gonna give you up\" }\n\nclass SongData extends Data {\n    #[FromRouteParameterProperty('song')]\n    public int $id;\n    public string $name;\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing withoutMagicalCreationFrom() method\nDESCRIPTION: This code snippet demonstrates the replacement for the `withoutMagicalCreationFrom` method. In v3, it was a static method on the data object. In v4, it uses `factory()` and  `withoutMagicalCreation()` methods.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/UPGRADING.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// v3\nSomeData::withoutMagicalCreationFrom($payload);\n\n// v4\nSomeData::factory()->withoutMagicalCreation()->from($payload);\n```\n\n----------------------------------------\n\nTITLE: Analyzing Serialized Data in Laravel\nDESCRIPTION: This snippet demonstrates the serialized representation of a 'SimpleData' object. The serialized form includes a string property with the value 'Hello world' and additional properties related to metadata like 'additional' and 'dataContext'. The serialization uses PHP's built in serialization feature, often used in testing and debugging contexts.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/tests/__snapshots__/SerializeableTest__it_can_serialize_and_unserialize_a_data_object__1.txt#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nO:41:\"Spatie\\LaravelData\\Tests\\Fakes\\SimpleData\":3:{s:6:\"string\";s:11:\"Hello world\";s:14:\"\\0*\\0_additional\";a:0:{}s:15:\"\\0*\\0_dataContext\";N;}\n```\n\n----------------------------------------\n\nTITLE: Controller Returning DataCollection with Included Properties - Laravel Data - PHP\nDESCRIPTION: Exhibits a controller method returning a DataCollection with additional included properties using the include method. Only works with specific DataCollection types from the package. Requires SongData class and a controller context.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/collections.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nclass SongController\n{\n    public function index()\n    {\n        return SongData::collect(Song::all(), DataCollection::class)->include('artist');    \n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Type-Hinting Spatie Data Collection with @property (PHP)\nDESCRIPTION: When nesting a collection of Data objects, it's crucial to specify the type of objects within the collection for static analysis and IDE support. This snippet uses a PHPDoc '@property' annotation to declare that the '$songs' array contains objects of type '\\App\\Data\\SongData'.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/nesting.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @property \\App\\Data\\SongData[] $songs\n */\nclass AlbumData extends Data\n{\n    public function __construct(\n        public string $title,\n        public array $songs,\n    ) {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Permanent Property Methods in PHP\nDESCRIPTION: Shows how to permanently modify property inclusion for all future transformations using the permanent methods like includePermanently.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/lazy-properties.md#_snippet_37\n\nLANGUAGE: php\nCODE:\n```\nAlbumData::from(Album::first())->includePermanently('songs');\nAlbumData::from(Album::first())->excludePermanently('songs');\nAlbumData::from(Album::first())->onlyPermanently('songs');\nAlbumData::from(Album::first())->exceptPermanently('songs');\n```\n\n----------------------------------------\n\nTITLE: Excluding properties from a Data object\nDESCRIPTION: Shows how to use the except() method on a Data object to exclude specific properties. When excluding properties, you must use the original property name, not the mapped name.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/mapping-rules.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nUserData::from(User::first())->except('song'); // Always use the original name here\n```\n\n----------------------------------------\n\nTITLE: Serialized SimpleData Object (PHP)\nDESCRIPTION: This string represents a PHP object of class `Spatie\\LaravelData\\Tests\\Fakes\\SimpleData` after being serialized using PHP's `serialize()` function. It includes the defined property `string` with value \"Hello world\" and an additional property `int` with value 69 stored in the `_additional` dynamic property array, characteristic of the `laravel-data` package's handling of extra data.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/tests/__snapshots__/DataTest__it_can_serialize_a_data_object_with_additional_data__1.txt#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nO:41:\"Spatie\\LaravelData\\Tests\\Fakes\\SimpleData\":2:{s:6:\"string\";s:11:\"Hello world\";s:14:\"\u0000*\u0000_additional\";a:1:{s:3:\"int\";i:69;}}\n```\n\n----------------------------------------\n\nTITLE: Combining Cast and Transformer in a Single Class - PHP\nDESCRIPTION: This class implements both the Cast and Transformer interfaces to provide casting and transformation logic in one place. The cast method is used for internal value conversion, while transform is for output representation. In this example, both methods return an upper-cased version of the value. Dependencies: spatie/laravel-data; requires both Cast and Transformer interfaces and the corresponding context classes.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/creating-a-cast.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nclass ToUpperCastAndTransformer implements Cast, Transformer\n{\n    public function cast(DataProperty $property, mixed $value, array $properties, CreationContext $context): string\n    {\n        return strtoupper($value);\n    }\n    \n    public function transform(DataProperty $property, mixed $value, TransformationContext $context): string\n    {\n        return strtoupper($value);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Data Object from an Eloquent Model (PHP)\nDESCRIPTION: This snippet demonstrates how to create a data object (SongData) from an Eloquent model using the `from` method. This relies on normalizers to convert the model into a format suitable for data object creation.  Dependencies include the Laravel Data package and the Eloquent model.  The output is a data object representing the model's data.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/normalizers.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nSongData::from(Song::findOrFail($id));\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Spatie Data Classes (PHP)\nDESCRIPTION: This PHP code defines two Data classes, ArtistData and AlbumData, demonstrating how one Data object (ArtistData) can be included as a property type within another Data object (AlbumData). This establishes a hierarchical structure for complex data representation.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/nesting.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass ArtistData extends Data\n{\n    public function __construct(\n        public string $name,\n        public int $age,\n    ) {\n    }\n}\n\nclass AlbumData extends Data\n{\n    public function __construct(\n        public string $title,\n        public ArtistData $artist,\n    ) {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the only() method - PHP\nDESCRIPTION: This code shows how to use the only() method. The data object will only show the 'songs' property. Note that this overwrites all other include and exclude statements.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/lazy-properties.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nAlbumData::from(Album::first())->only('songs'); // will only show `songs`\n```\n\n----------------------------------------\n\nTITLE: Referencing Route Parameter Property for Unique PHP\nDESCRIPTION: Extends route parameter referencing to ignore a record based on a specific property of the route parameter model (e.g., 'uuid'). This is useful if the unique check isn't on the primary key but another field of the model resolved by the route parameter.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/validation/using-validation-attributes.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass SongData extends Data\n{\n    public function __construct(\n        public string $title,\n        #[Unique('songs', ignore: new RouteParameterReference('song', 'uuid'))]\n        public string $uuid,\n    ) {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Add Global Casts in Factory - Laravel Data\nDESCRIPTION: Explains how to add additional global casts to data objects when using a factory.  `withCast()` registers an additional cast for a specific type that will be executed before default global casts. The first parameter is the type and the second is the cast class.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/factories.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nSongData::factory()->withCast('string', StringToUpperCast::class)->from(['title' => 'Never gonna give you up', 'artist' => 'Rick Astley']);\n```\n\n----------------------------------------\n\nTITLE: Custom Static collectArray Method for Data Class - PHP\nDESCRIPTION: Implements a static method on a Data class to create a custom SongCollection. Aggregates unique artist names and initializes SongCollection with both items and artists. The method must be public, static, have a return type, and start with 'collect'. Depends on the SongData and SongCollection classes.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/collections.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nclass SongData extends Data\n{\n    public string $title;\n    public string $artist;\n\n    public static function collectArray(array $items): SongCollection\n    {\n        return new SongCollection(\n            parent::collect($items),\n            array_unique(array_map(fn(SongData $song) => $song->artist, $items))\n        );\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Create Data Object using Custom `fromModel` - PHP\nDESCRIPTION: This snippet shows how to use the custom `fromModel` static method when creating a `SongData` object from a `Song` model. The custom logic defined in `fromModel` will be executed instead of the default behavior of the `from` method.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/creating-a-data-object.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nSongData::from(Song::firstOrFail($id));\n```\n\n----------------------------------------\n\nTITLE: Example JSON Request Payload for Song Data\nDESCRIPTION: Shows a sample JSON payload representing song data, including 'title' and 'artist', intended to be sent in an HTTP POST request. This data structure corresponds to the properties of the `SongData` object.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/request-to-data-object.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"title\" : \"Never gonna give you up\",\n    \"artist\" : \"Rick Astley\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Max Transformation Depth in `data.php`\nDESCRIPTION: Shows how to set a global limit (`max_transformation_depth`) in the `data.php` config file to prevent infinite recursion during the transformation of deeply nested data objects. The default behavior when the depth is reached is configured separately.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/transformers.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n'max_transformation_depth' => 20,\n```\n\n----------------------------------------\n\nTITLE: Defining an Enum 'Format' in PHP\nDESCRIPTION: This enum 'Format' specifies possible formats for media, such as CD, vinyl, and cassette, each associated with a string value. It demonstrates PHP's native enum capabilities for type safety.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/casts.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nenum Format: string {\n    case cd = 'cd';\n    case vinyl = 'vinyl';\n    case cassette = 'cassette';\n}\n```\n\n----------------------------------------\n\nTITLE: Attempting to Instantiate with Abstract Properties in PHP\nDESCRIPTION: Shows example attempts to create Contract instances with different subclass data. This demonstrates the problem with abstract types in data objects that needs to be solved.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/abstract-data.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nContract::from(['label' => 'PIAS', 'artist' => ['name' => 'Rick Astley', 'voice' => 'tenor']]);\nContract::from(['label' => 'PIAS', 'artist' => ['name' => 'Rick Astley', 'instrument' => 'guitar']]);\n```\n\n----------------------------------------\n\nTITLE: Applying ActiveUrl Validation Attribute\nDESCRIPTION: This snippet shows the usage of the `#[ActiveUrl]` validation attribute.  This attribute ensures that the input value is a valid, reachable URL.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/validation-attributes.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n```php\n#[ActiveUrl]\npublic string $closure; \n```\n```\n\n----------------------------------------\n\nTITLE: Nested Property Mapping with Route Parameter Properties\nDESCRIPTION: Shows how to access nested properties of the route parameter model using `FromRouteParameterProperty`.  The `$singerName` property is populated from `$artist->leadSinger->name`.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/injecting-property-values.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nRoute::patch('/artists/{artist}/songs/{song}', [SongController::class, 'update']);\n\nclass SongData extends Data {\n    #[FromRouteParameterProperty('song')]\n    public int $id;\n    #[FromRouteParameterProperty('artist', 'leadSinger.name')]\n    public string $singerName;\n}\n```\n\n----------------------------------------\n\nTITLE: Removing a Rule Type (PHP)\nDESCRIPTION: This snippet demonstrates removing a specific type of rule from the `RulesCollection`. The `removeType()` method is used, with `Min::class` as an argument, to remove all rules of the specified type. This provides a means to filter the available validation rules based on specific criteria. This operation depends on the `removeType` method being implemented in `RulesCollection` class.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/creating-a-rule-inferrer.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n$rules->removeType(Min::class);\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Date Formats\nDESCRIPTION: Setting multiple acceptable date formats in the configuration file. The system will try each format when casting dates and use the first format when transforming dates.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/working-with-dates.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n    'date_format' => [DATE_ATOM, 'Y-m-d'],\n```\n\n----------------------------------------\n\nTITLE: Using Carbon for Date Properties\nDESCRIPTION: Using Laravel's Carbon date library as the property type for a date field. The data object will cast date strings into Carbon instances based on the property type.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/working-with-dates.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n#[WithCast(DateTimeInterfaceCast::class)]\npublic Carbon $date\n```\n\n----------------------------------------\n\nTITLE: Disallowing Query String Includes in PHP\nDESCRIPTION: Demonstrates how to disallow property inclusion via query string by returning an empty array from allowedRequestIncludes.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/lazy-properties.md#_snippet_34\n\nLANGUAGE: php\nCODE:\n```\nclass UserData extends Data\n{\n    public static function allowedRequestIncludes(): ?array\n    {\n        return [];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Output with Default Values (JSON)\nDESCRIPTION: Displays the JSON output when the `empty()` method is called on a Data object that has default values defined in the constructor.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/from-data-to-resource.md#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"Title of the song here\",\n    \"artist\": \"An artist\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initialize Data Object with Constructor - PHP\nDESCRIPTION: This code demonstrates how to initialize the `SongData` object using the standard PHP constructor.  It takes the title and artist as string arguments and assigns them to the corresponding properties. This represents standard object instantiation.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/creating-a-data-object.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnew SongData('Never gonna give you up', 'Rick Astley');\n```\n\n----------------------------------------\n\nTITLE: Applying Declined Validation Attribute\nDESCRIPTION: The `#[Declined]` attribute validates that the input field is declined, which is typically a boolean that is `false`.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/validation-attributes.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n```php\n#[Declined]\npublic bool $closure; \n```\n```\n\n----------------------------------------\n\nTITLE: Applying IPv4 Validation Attribute\nDESCRIPTION: The `#[IPv4]` attribute validates that the input is a valid IPv4 address.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/validation-attributes.md#_snippet_45\n\nLANGUAGE: php\nCODE:\n```\n```php\n#[IPv4]\npublic string $closure; \n```\n```\n\n----------------------------------------\n\nTITLE: Using ValidationContext for Context-Sensitive Rules in Laravel Data (PHP)\nDESCRIPTION: This snippet injects a ValidationContext object into the rules method, enabling validation logic to react to the overall request payload or specific property values. The method configures dynamic requirements, such as making artist conditionally required if the title is not a certain value. ValidationContext must be imported and named $context. Supports context-driven validation scenarios in data objects.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/validation/manual-rules.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nclass SongData extends Data\n{\n    public function __construct(\n        public string $title,\n        public string $artist,\n    ) {\n    }\n    \n    public static function rules(ValidationContext $context): array\n    {\n        return [\n            'title' => ['required'],\n            'artist' => Rule::requiredIf($context->fullPayload['title'] !== 'Never Gonna Give You Up'),\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Default Included Lazy Property - PHP\nDESCRIPTION: This example shows how to mark a lazy property as included by default using `defaultIncluded()`.  This means the property will be included unless explicitly excluded.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/lazy-properties.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nLazy::create(fn() => SongData::collect($album->songs))->defaultIncluded();\n```\n\n----------------------------------------\n\nTITLE: Adding WithData Trait to a Laravel Model in PHP\nDESCRIPTION: This snippet shows how to add the WithData trait to a Laravel Eloquent model for automatic data object conversion. It defines a protected $dataClass property that specifies the fully qualified class name of the target data object (e.g., SongData::class). Requires the WithData trait and the corresponding data class to be present. This enables the use of getData on any instance of the model, returning an instance of the defined data class.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/get-data-from-a-class-quickly.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass Song extends Model\n{\n    use WithData;\n    \n    protected $dataClass = SongData::class;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Collection Class - PHP\nDESCRIPTION: Demonstrates how to implement a custom collection class by extending Laravel's Collection. Adds extra properties (like artists) and customizes the constructor accordingly. Useful for holding additional metadata alongside collection items. Requires the Laravel Collection base class.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/collections.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nclass SongCollection extends Collection\n{\n    public function __construct(\n        $items = [],\n        public array $artists = [],\n    ) {\n        parent::__construct($items);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Morph Map for Data Object Types in Laravel Data PHP\nDESCRIPTION: Configures a custom morph map so that the 'type' key written in JSON for polymorphic Laravel Data object casts is a stable string alias instead of a fully qualified class name. This prevents breaking changes on refactor and works similarly to Laravel's polymorphic relationship morph maps. The mapping is typically registered in the AppServiceProvider.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/eloquent-casting.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Spatie\\LaravelData\\Support\\DataConfig;\n\napp(DataConfig::class)->enforceMorphMap([\n    'cd_record_config' => CdRecordConfig::class,\n    'vinyl_record_config' => VinylRecordConfig::class,\n]);\n```\n\n----------------------------------------\n\nTITLE: Example JSON Output from Transformed Data Object with Mapped Properties (JSON)\nDESCRIPTION: Illustrates the JSON output generated when transforming an instance of the `ContractData` object. The keys in the JSON payload directly reflect the mappings defined by the `#[MapName]` attributes (e.g., `record_company`, `CityName`, `country field`), showing how the mappers affect the output structure.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/available-property-mappers.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\" : \"Rick Astley\",\n    \"record_company\" : \"RCA Records\",\n    \"country field\" : \"Belgium\",\n    \"CityName\" : \"Antwerp\",\n    \"addressline1\" : \"some address line 1\",\n    \"ADDRESSLINE2\" : \"some address line 2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Instantiating Data Subclasses in PHP\nDESCRIPTION: Shows how to create instances of the Singer and Musician subclasses using the from() method to initialize objects from associative arrays.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-data-transfer-object/abstract-data.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nSinger::from(['name' => 'Rick Astley', 'voice' => 'tenor']);\nMusician::from(['name' => 'Rick Astley', 'instrument' => 'guitar']);\n```\n\n----------------------------------------\n\nTITLE: Using ValidationContext in Laravel Data v3\nDESCRIPTION: Example of how to implement custom validation rules in a data object using the new ValidationContext parameter introduced in Laravel Data v3, replacing the previous approach of injecting $payload, $relativePayload, or $path parameters.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/UPGRADING.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nclass SomeData extends Data {\n    public bool $strict;\n\n    public string $property;\n\n    public static function rules(ValidationContext $context): array\n    {\n        if ($context->payload['strict'] === true) {\n            return [\n                'property' => ['in:strict'],\n            ];\n        }\n\n        return [];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom error bag name in Laravel Data class\nDESCRIPTION: Sets the name of the error bag used during validation failures by overriding the static errorBag() method, returning a string identifier.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/validation/working-with-the-validator.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nclass SongData extends Data\n{\n    // ...\n\n    public static function errorBag(): string\n    {\n        return 'never_gonna_give_an_error_up';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing validation failure redirect URL in Laravel Data class\nDESCRIPTION: Specifies a custom URL to redirect to upon validation failure by overriding the static redirect() method, returning an action URL.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/validation/working-with-the-validator.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nclass SongData extends Data\n{\n    // ...\n\n    public static function redirect(): string\n    {\n        return action(HomeController::class);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Validation Rules for Nested Data Object\nDESCRIPTION: This example presents the validation rules generated for the `AlbumData` class, demonstrating how nested objects are validated. The rules ensure that the 'title' is a required string and the nested 'artist' has required string 'name' and integer 'age' properties.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/validation/nesting-data.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[\n    'title' => ['required', 'string'],\n    'artist' => ['array'],\n    'artist.name' => ['required', 'string'],\n    'artist.age' => ['required', 'integer'],\n]\n```\n\n----------------------------------------\n\nTITLE: Checking Rule Type (PHP)\nDESCRIPTION: This snippet explains how to check if a `RulesCollection` contains a specific type of rule.  The `hasType()` method is used, with `Min::class` as an argument, indicating the type of rule to check for.  This method helps determine whether a particular rule type exists within the collection.  This functionality helps in deciding if a given rule inferrer will be necessary.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/advanced-usage/creating-a-rule-inferrer.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n$rules->hasType(Min::class);\n```\n\n----------------------------------------\n\nTITLE: Implementing Lazy Loading for a Collection - PHP\nDESCRIPTION: This code snippet demonstrates how to use `Lazy` properties to defer loading of a collection of `SongData` objects within the `AlbumData` class. It initializes the `songs` property with a `Lazy` instance that fetches the data from the `Album` model's `songs` relation using a closure.  The `fromModel` method is crucial for creating the Data object from an Album model.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/lazy-properties.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass AlbumData extends Data\n{\n    /**\n    * @param Lazy|Collection<int, SongData> $songs\n    */\n    public function __construct(\n        public string $title,\n        public Lazy|Collection $songs,\n    ) {\n    }\n    \n    public static function fromModel(Album $album): self\n    {\n        return new self(\n            $album->title,\n            Lazy::create(fn() => SongData::collect($album->songs))\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Nullable Properties in Data Object (PHP)\nDESCRIPTION: Illustrates declaring properties as nullable strings within a Laravel Data object. This approach is discouraged in favor of using the `empty()` method for creating blueprints.\nSOURCE: https://github.com/spatie/laravel-data/blob/main/docs/as-a-resource/from-data-to-resource.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nclass SongData extends Data\n{\n    public function __construct(\n        public ?string $title,\n        public ?string $artist,\n    ) {\n    }\n\n    // ...\n}\n```"
  }
]