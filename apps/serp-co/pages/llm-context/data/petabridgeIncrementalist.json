[
  {
    "owner": "petabridge",
    "repo": "incrementalist",
    "content": "TITLE: Quick Start Examples - .NET CLI\nDESCRIPTION: Provides a comprehensive set of examples showcasing various Incrementalist commands. Covers scenarios like listing affected projects, specifying solution files, filtering projects with globs, running tests with coverage, creating configuration files, and performing dry runs.\nSOURCE: https://github.com/petabridge/incrementalist/blob/dev/README.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n# Get list of affected projects and save to file\nincrementalist run --dry -b dev -f ./affected-projects.txt\n\n# Specify solution explicitly\nincrementalist run --dry -s ./src/MySolution.sln -b dev -f ./affected-projects.txt\n\n# Get list of affected folders\nincrementalist list-affected-folders -b dev -f ./affected-folders.txt\n\n# Build only affected projects\nincrementalist run -b dev -- build -c Release --nologo\n\n# Run tests for affected projects\nincrementalist run -b dev -- test -c Release --no-build --nologo\n\n# Only include test projects in the final list\nincrementalist run -b dev --target-glob \"**/*.Tests.csproj\" -f ./affected-test-projects.txt\n\n# Exclude test projects from the final list\nincrementalist run -b dev --skip-glob \"**/*.Tests.csproj\" -f ./affected-non-test-projects.txt\n\n# Run tests with code coverage\nincrementalist run -b dev -- test -c Release --no-build --nologo /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=./coverage/\n\n# Save affected projects AND run commands\nincrementalist run -b dev -f ./affected-projects.txt -- build -c Release --nologo\n\n# Create configuration file with current settings (default path: .incrementalist/incrementalist.json)\nincrementalist create-config -b dev --verbose --parallel\n\n# Create configuration file with current settings and custom file name\nincrementalist create-config -b dev --verbose --parallel -c ./my-incrementalist-config.json\n\n# Run incrementalist with a custom configuration file\nincrementalist run -c ./my-incrementalist-config.json -- build -c Release\n\n# Perform a dry run without executing commands\nincrementalist run -b dev --dry -- build -c Release --nologo\n```\n\n----------------------------------------\n\nTITLE: Local Tool Usage - .NET CLI\nDESCRIPTION: Shows examples of how to use Incrementalist when installed as a local tool, invoked using `dotnet incrementalist --`. Includes examples for listing affected projects and folders, building projects, running tests with coverage, running in parallel, and saving the list of affected projects while running commands.\nSOURCE: https://github.com/petabridge/incrementalist/blob/dev/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# Get list of affected projects\ndotnet incrementalist -- -b dev -f ./affected-projects.txt\n\n# List affected folders\ndotnet incrementalist -- list-affected-folders -b dev -f ./affected-folders.txt\n\n# Build affected projects\ndotnet incrementalist -- run -b dev -- build -c Release --nologo\n\n# Run tests with coverage\ndotnet incrementalist -- run -b dev -- test -c Release --no-build --logger:trx --collect:\"XPlat Code Coverage\" --results-directory ./testresults\n\n# Run in parallel mode\ndotnet incrementalist -- run -b dev --parallel -- build -c Release --nologo\n\n# Save affected projects AND run commands\ndotnet incrementalist -- -b dev -f ./affected-projects.txt run -- build -c Release --nologo\n```\n\n----------------------------------------\n\nTITLE: Executing dotnet Commands with Incrementalist (Shell)\nDESCRIPTION: Demonstrates how to execute `dotnet` CLI commands on projects affected by changes since a specified base revision using Incrementalist. The `-r` or `--run` flag is used to specify the `dotnet` command to execute.  Common uses include building and testing.\nSOURCE: https://github.com/petabridge/incrementalist/blob/dev/RELEASE_NOTES.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Build only affected projects compared to the 'dev' branch\nincrementalist -b dev -r -- build -c Release --nologo\n\n# Run tests for affected projects in parallel\nincrementalist -b dev -r --parallel -- test -c Release --no-build --nologo\n```\n\n----------------------------------------\n\nTITLE: Running Commands Examples - .NET CLI\nDESCRIPTION: Illustrates the usage of the `run` verb for executing dotnet CLI commands against affected projects. Examples include building, testing, running in parallel, stopping on the first error, and performing a dry run to preview commands without execution.\nSOURCE: https://github.com/petabridge/incrementalist/blob/dev/README.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n# Build affected projects\nincrementalist run -b dev -- build -c Release --nologo\n\n# Run tests\nincrementalist run -b dev -- test -c Release --no-build --nologo\n\n# Run in parallel\nincrementalist run -b dev --parallel -- build -c Release --nologo\n\n# Stop on first error\nincrementalist run -b dev --continue-on-error=false -- build -c Release --nologo\n\n# Perform a dry run (shows commands without executing them)\nincrementalist run -b dev --dry -- build -c Release --nologo\n```\n\n----------------------------------------\n\nTITLE: Filtering Projects using Glob Patterns - Shell\nDESCRIPTION: This example demonstrates how to use `--target-glob` and `--skip-glob` options to filter projects. It targets projects in the `src` directory with a `.csproj` extension, excluding those that include `.Tests.csproj` in their name. The build command is then executed on the remaining projects.\nSOURCE: https://github.com/petabridge/incrementalist/blob/dev/README.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nincrementalist run -b dev --target-glob \"src/**/*.csproj\" --skip-glob \"**/*.Tests.csproj\" -- build -c Release --nologo\n```\n\n----------------------------------------\n\nTITLE: Local Tool Installation - .NET CLI\nDESCRIPTION: Installs the Incrementalist.Cmd .NET tool locally within a project. A tool manifest is required to manage local tools. This approach isolates the tool to the specific project, ensuring version compatibility and avoiding conflicts.\nSOURCE: https://github.com/petabridge/incrementalist/blob/dev/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# From your repository root\ndotnet new tool-manifest # if you haven't already created a .config/dotnet-tools.json\ndotnet tool install Incrementalist.Cmd\n```\n\n----------------------------------------\n\nTITLE: Global Tool Usage - .NET CLI\nDESCRIPTION: Demonstrates several ways to invoke the Incrementalist tool when installed globally using the `incrementalist` command. Includes examples for listing affected projects and folders, running tests, and targeting specific projects via globbing patterns.  Parameters include git branch (-b), output file (-f), and test configuration (-c).\nSOURCE: https://github.com/petabridge/incrementalist/blob/dev/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# Get list of affected projects\nincrementalist run --dry -b dev -f ./affected-projects.txt\n\n# List affected folders\nincrementalist list-affected-folders -b dev -f ./affected-folders.txt\n\n# Run tests for affected projects\nincrementalist run -b dev -- test -c Release\n\n# Run tests for affected projects those matching a glob\nincrementalist run -b dev --target-glob \"src/*.Tests.csproj\" -- test -c Release\n```\n\n----------------------------------------\n\nTITLE: Sample Incrementalist Configuration File\nDESCRIPTION: Demonstrates the JSON structure and available settings for an Incrementalist configuration file. It includes settings such as `gitBranch`, `solutionFilePath`, `outputFile`, `workingDirectory`, `verbose`, `timeoutMinutes`, `continueOnError`, `runInParallel`, `failOnNoProjects`, `skip`, and `target`.\nSOURCE: https://github.com/petabridge/incrementalist/blob/dev/docs/config.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"gitBranch\": \"master\",\n  \"solutionFilePath\": \"MySolution.sln\",\n  \"outputFile\": \"affected-projects.txt\",\n  \"workingDirectory\": null,\n  \"verbose\": false,\n  \"timeoutMinutes\": 2,\n  \"continueOnError\": true,\n  \"runInParallel\": false,\n  \"failOnNoProjects\": false,\n  \"skip\": [\"**/bin/**\", \"**/obj/**\"],\n  \"target\": [\"src/**/*.csproj\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuration File Usage - .NET CLI\nDESCRIPTION: Demonstrates how to use configuration files with Incrementalist to store settings. Examples show using the default configuration file, specifying a custom file, and creating a configuration file from command-line options.\nSOURCE: https://github.com/petabridge/incrementalist/blob/dev/README.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n# Use default configuration file (.incrementalist/incrementalist.json)\nincrementalist run -- build\n\n# Specify a custom configuration file\nincrementalist -c my-config.json run -- build\n\n# Create configuration file with current settings\nincrementalist create-config -b dev --verbose --parallel\n```\n\n----------------------------------------\n\nTITLE: Creating Incrementalist Configuration File (Default)\nDESCRIPTION: Shows how to use the `create-config` verb to generate a configuration file with the specified command-line options. The file is created in the default location: `.incrementalist/incrementalist.json`.\nSOURCE: https://github.com/petabridge/incrementalist/blob/dev/docs/config.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nincrementalist create-config -b master --verbose --parallel\n```\n\n----------------------------------------\n\nTITLE: Incrementalist Workflow: Using Config\nDESCRIPTION: Illustrates using the generated configuration file in subsequent `run` commands, along with the `build` target and a custom configuration such as `Release`.\nSOURCE: https://github.com/petabridge/incrementalist/blob/dev/docs/config.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nincrementalist run -- build -c Release\n```\n\n----------------------------------------\n\nTITLE: Configuring Incrementalist with YAML\nDESCRIPTION: Illustrates configuring Incrementalist using a `.incrementalist.yml` file. This YAML file can store common settings, project filters, and default branches, allowing for easier configuration and reusability. Settings include the base branch, skip globs, target globs, log level, and commands to run.\nSOURCE: https://github.com/petabridge/incrementalist/blob/dev/RELEASE_NOTES.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# .incrementalist.yml\nbase-branch: dev\nskip-glob: \"**/obj/**,**/bin/**\"\ntarget-glob: \"src/**/*.csproj\"\nlog-level: Information\nrun: build -c Release\nparallel: true\n```\n\n----------------------------------------\n\nTITLE: Running Incrementalist with Configuration File\nDESCRIPTION: Shows how to run Incrementalist using the default configuration file path (`.incrementalist/incrementalist.json`). It invokes the `run` command with the `build` argument.\nSOURCE: https://github.com/petabridge/incrementalist/blob/dev/docs/config.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nincrementalist run -- build\n```\n\n----------------------------------------\n\nTITLE: Creating Incrementalist Configuration File (Custom)\nDESCRIPTION: Demonstrates how to create a configuration file at a custom location using the `-c` or `--config` option with the `create-config` verb.\nSOURCE: https://github.com/petabridge/incrementalist/blob/dev/docs/config.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nincrementalist create-config -b master --verbose --parallel -c ./my-config.json\n```\n\n----------------------------------------\n\nTITLE: Configuration File Example - JSON\nDESCRIPTION: Provides an example of an Incrementalist configuration file in JSON format. Includes settings for the Git branch, verbose logging, and parallel execution. Command-line arguments override these settings.\nSOURCE: https://github.com/petabridge/incrementalist/blob/dev/README.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"gitBranch\": \"dev\",\n  \"verbose\": true,\n  \"runInParallel\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Incrementalist Configuration File Example\nDESCRIPTION: Illustrates a basic Incrementalist configuration file with the `gitBranch`, `solutionFilePath`, and `verbose` settings enabled. It is meant to be stored in `.incrementalist/incrementalist.json` and used without specifying these options on the command line.\nSOURCE: https://github.com/petabridge/incrementalist/blob/dev/docs/config.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"gitBranch\": \"master\",\n  \"solutionFilePath\": \"MySolution.sln\",\n  \"verbose\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Incrementalist Workflow: Create Config\nDESCRIPTION: Shows the initial step in a typical Incrementalist workflow: creating a configuration file with commonly used settings such as branch, verbose logging, and parallel execution.\nSOURCE: https://github.com/petabridge/incrementalist/blob/dev/docs/config.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nincrementalist create-config -b main --verbose --parallel\n```\n\n----------------------------------------\n\nTITLE: Incrementalist Workflow: Overriding Config\nDESCRIPTION: Demonstrates how to override a setting in the configuration file using command-line arguments. In this case, the branch is overridden with `feature-branch` while running tests.\nSOURCE: https://github.com/petabridge/incrementalist/blob/dev/docs/config.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nincrementalist -b feature-branch run -- test\n```\n\n----------------------------------------\n\nTITLE: Overriding Configuration Values in Incrementalist\nDESCRIPTION: Illustrates how to override settings defined in the configuration file using command-line arguments. Command-line arguments take precedence over configuration file settings.\nSOURCE: https://github.com/petabridge/incrementalist/blob/dev/docs/config.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nincrementalist run -b dev --verbose false -- build\n```\n\n----------------------------------------\n\nTITLE: Using File Globbing with Incrementalist (Shell)\nDESCRIPTION: Shows how to use glob patterns to target or exclude projects for command execution. The `--glob`, `--skip-glob`, and `--target-glob` flags can be used to precisely control which affected projects specific commands are run against. This enables fine-grained control over build and test processes.\nSOURCE: https://github.com/petabridge/incrementalist/blob/dev/RELEASE_NOTES.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# Run tests only on affected *.Tests.csproj projects\nincrementalist -b dev -r --target-glob \"**/*.Tests.csproj\" -- test\n\n# Build all affected projects EXCEPT those in the 'samples' directory\nincrementalist -b dev -r --skip-glob \"**/samples/**/*.csproj\" -- build\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests with .NET\nDESCRIPTION: These commands execute the unit tests for the Incrementalist project using the .NET CLI.  They cover running all tests with both Debug and Release configurations, as well as specifying detailed output using the TRX logger.\nSOURCE: https://github.com/petabridge/incrementalist/blob/dev/docs/building.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Run all unit tests\ndotnet test\n\n# Run tests with Release configuration\ndotnet test -c Release\n\n# Run tests with detailed output\ndotnet test --logger:trx --logger:\"console;verbosity=normal\"\n```\n\n----------------------------------------\n\nTITLE: Full Verification with .NET and PowerShell\nDESCRIPTION: These commands perform a full verification of the project.  It includes building the project in Release configuration, running all unit tests, and running the integration tests. The `--no-build` flag skips the build step for the unit tests since the project has already been built.\nSOURCE: https://github.com/petabridge/incrementalist/blob/dev/docs/building.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# Build Release\ndotnet build -c Release\n\n# Run all tests\ndotnet test -c Release --no-build\n\n# Run integration tests\n./scripts/integration-tests.ps1 -Configuration Release\n```\n\n----------------------------------------\n\nTITLE: Building the Solution with .NET\nDESCRIPTION: These commands are used to build the Incrementalist solution using the .NET CLI.  The first command builds with the default Debug configuration. The second command builds with the Release configuration, which is typically used for deployment.\nSOURCE: https://github.com/petabridge/incrementalist/blob/dev/docs/building.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Build with default configuration (Debug)\ndotnet build\n\n# Build with Release configuration\ndotnet build -c Release\n```\n\n----------------------------------------\n\nTITLE: Creating NuGet Packages with .NET\nDESCRIPTION: These commands are used to create NuGet packages for the Incrementalist project.  The packages are created in the `bin/nuget` directory. The first command creates standard packages, while the second command creates packages including symbols for debugging.\nSOURCE: https://github.com/petabridge/incrementalist/blob/dev/docs/building.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Create packages (after building)\ndotnet pack -c Release -o bin/nuget\n\n# Create packages with symbols\ndotnet pack -c Release -o bin/nuget --include-symbols\n```\n\n----------------------------------------\n\nTITLE: Creating Release Packages with .NET\nDESCRIPTION: These commands build the project in Release configuration and then creates NuGet packages. The `--no-build` flag in the `dotnet pack` command prevents rebuilding since the project was already built.\nSOURCE: https://github.com/petabridge/incrementalist/blob/dev/docs/building.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Build and create packages\ndotnet build -c Release\ndotnet pack -c Release -o bin/nuget --include-symbols --no-build\n```\n\n----------------------------------------\n\nTITLE: Basic Verification with .NET\nDESCRIPTION: These commands perform a basic verification of the project by building it and running the unit tests.  This is a quick check to ensure that the core functionality is working as expected.\nSOURCE: https://github.com/petabridge/incrementalist/blob/dev/docs/building.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# Build and test\ndotnet build\ndotnet test\n```\n\n----------------------------------------\n\nTITLE: Publishing to NuGet with .NET\nDESCRIPTION: This command pushes the generated NuGet package to the NuGet repository.  Replace `YOUR_API_KEY` with a valid NuGet API key. The `--source` parameter specifies the NuGet feed URL.\nSOURCE: https://github.com/petabridge/incrementalist/blob/dev/docs/building.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Push package to NuGet (replace with your API key)\ndotnet nuget push bin/nuget/*.nupkg --api-key YOUR_API_KEY --source https://api.nuget.org/v3/index.json\n```\n\n----------------------------------------\n\nTITLE: Package Verification with .NET\nDESCRIPTION: This command creates NuGet packages for release verification. Post package creation, manual verification using tools like NuGet Package Explorer is recommended to ensure correctness before publishing.\nSOURCE: https://github.com/petabridge/incrementalist/blob/dev/docs/building.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# Create packages\ndotnet pack -c Release -o bin/nuget --include-symbols\n\n# Verify package contents\n# Check bin/nuget/*.nupkg contents using NuGet Package Explorer or similar tool\n```\n\n----------------------------------------\n\nTITLE: Running Integration Tests with PowerShell\nDESCRIPTION: This script executes the integration tests for the Incrementalist project. It's a PowerShell script, `integration-tests.ps1`, located in the `scripts` directory.  The script can be run with an optional `-Configuration` parameter to specify the build configuration.\nSOURCE: https://github.com/petabridge/incrementalist/blob/dev/docs/building.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n./scripts/integration-tests.ps1\n\n```\n\nLANGUAGE: powershell\nCODE:\n```\n./scripts/integration-tests.ps1 -Configuration Release\n```\n\n----------------------------------------\n\nTITLE: Output File Examples\nDESCRIPTION: Shows the format of the output files generated by Incrementalist. Project lists contain comma-separated project file paths, while folder lists contain comma-separated folder paths. These files are intended for use in automation scripts and CI/CD pipelines.\nSOURCE: https://github.com/petabridge/incrementalist/blob/dev/README.md#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nD:\\src\\Project1\\Project1.csproj,D:\\src\\Project2\\Project2.csproj\n```\n\nLANGUAGE: text\nCODE:\n```\nD:\\src\\Project1,D:\\src\\Project2\\SubFolder\n```\n\n----------------------------------------\n\nTITLE: Project List Output Example\nDESCRIPTION: Demonstrates the output format for project lists when using the `run` verb.  This output is a comma-separated list of project file paths. It is generated after analyzing changes and identifying affected projects.\nSOURCE: https://github.com/petabridge/incrementalist/blob/dev/docs/how-it-works.md#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nD:\\src\\Project1\\Project1.csproj,D:\\src\\Project2\\Project2.csproj\n```\n\n----------------------------------------\n\nTITLE: Folder List Output Example\nDESCRIPTION: Demonstrates the output format for folder lists when using the `list-affected-folders` verb. The output is a comma-separated list of folder paths. It is generated after analyzing changes and identifying affected folders.\nSOURCE: https://github.com/petabridge/incrementalist/blob/dev/docs/how-it-works.md#_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\nD:\\src\\Project1,D:\\src\\Project2\\SubFolder\n```\n\n----------------------------------------\n\nTITLE: Running Incrementalist with Custom Config Path\nDESCRIPTION: Demonstrates how to specify a custom configuration file path using the `-c` or `--config` option. This allows the user to load settings from a file other than the default `incrementalist.json`.\nSOURCE: https://github.com/petabridge/incrementalist/blob/dev/docs/config.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nincrementalist run -c my-custom-config.json -- build\n```\n\n----------------------------------------\n\nTITLE: Global Tool Installation - .NET CLI\nDESCRIPTION: Installs the Incrementalist.Cmd .NET tool globally, making it accessible from any directory in the system. This allows the tool to be run from the command line without being tied to a specific project.\nSOURCE: https://github.com/petabridge/incrementalist/blob/dev/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install --global Incrementalist.Cmd\n```"
  }
]