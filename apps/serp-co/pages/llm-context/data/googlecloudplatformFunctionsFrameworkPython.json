[
  {
    "owner": "googlecloudplatform",
    "repo": "functions-framework-python",
    "content": "TITLE: Creating a Simple HTTP Function in Python\nDESCRIPTION: Demonstrates how to create a basic HTTP function that returns a 'Hello world!' response. The function uses the functions_framework.http decorator to mark it as an HTTP function.\nSOURCE: https://github.com/googlecloudplatform/functions-framework-python/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef hello(request):\n    return \"Hello world!\"\n```\n\n----------------------------------------\n\nTITLE: Creating and Decorating an HTTP Function with Flask Integration\nDESCRIPTION: Complete example of an HTTP function that uses the functions_framework.http decorator. The function receives a Flask Request object and returns a response that will be handled by the framework.\nSOURCE: https://github.com/googlecloudplatform/functions-framework-python/blob/main/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport flask\nimport functions_framework\n\n@functions_framework.http\ndef hello(request: flask.Request) -> flask.typing.ResponseReturnValue:\n    return \"Hello world!\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Python Function for Cloud Run\nDESCRIPTION: A basic Python function that returns 'Hello world!' when invoked. This function will be deployed to Cloud Run as a containerized service.\nSOURCE: https://github.com/googlecloudplatform/functions-framework-python/blob/main/examples/cloud_run_http/README.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef hello(request):\n    return \"Hello world!\"\n```\n\n----------------------------------------\n\nTITLE: Creating a CloudEvent Function in Python\nDESCRIPTION: Example of a function that processes CloudEvents using the functions_framework.cloud_event decorator. The function receives a CloudEvent object and prints its ID and data.\nSOURCE: https://github.com/googlecloudplatform/functions-framework-python/blob/main/README.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport functions_framework\nfrom cloudevents.http.event import CloudEvent\n\n@functions_framework.cloud_event\ndef hello_cloud_event(cloud_event: CloudEvent) -> None:\n   print(f\"Received event with ID: {cloud_event['id']} and data {cloud_event.data}\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Pub/Sub Event Function\nDESCRIPTION: Example of a function that processes Pub/Sub events, receiving an event object and a context object containing metadata about the event.\nSOURCE: https://github.com/googlecloudplatform/functions-framework-python/blob/main/README.md#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ndef hello(event, context):\n     print(\"Received\", context.event_id)\n```\n\n----------------------------------------\n\nTITLE: Defining an Event-Style Function in Python for Google Cloud Run\nDESCRIPTION: This code snippet demonstrates how to define a function using the event-style signature for Google Cloud Run function events. It takes 'event' and 'context' parameters and prints them.\nSOURCE: https://github.com/googlecloudplatform/functions-framework-python/blob/main/README.md#2025-04-23_snippet_19\n\nLANGUAGE: python\nCODE:\n```\ndef hello(event, context):\n    print(event)\n    print(context)\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Handling in Functions Framework\nDESCRIPTION: Example of using the errorhandler decorator to catch specific exceptions and return custom responses. This function catches ZeroDivisionError and returns a 418 Teapot status code.\nSOURCE: https://github.com/googlecloudplatform/functions-framework-python/blob/main/README.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport functions_framework\n\n\n@functions_framework.errorhandler(ZeroDivisionError)\ndef handle_zero_division(e):\n    return \"I'm a teapot\", 418\n\n\ndef function(request):\n    1 / 0\n    return \"Success\", 200\n```\n\n----------------------------------------\n\nTITLE: Installing Functions Framework via pip\nDESCRIPTION: Command to install the Functions Framework Python package using pip package manager.\nSOURCE: https://github.com/googlecloudplatform/functions-framework-python/blob/main/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npip install functions-framework\n```\n\n----------------------------------------\n\nTITLE: Running a Functions Framework Server Locally\nDESCRIPTION: Command to start a local development server for testing a function named 'hello' with debug mode enabled. Shows the expected output when the server starts.\nSOURCE: https://github.com/googlecloudplatform/functions-framework-python/blob/main/README.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nfunctions-framework --target hello --debug\n * Serving Flask app \"hello\" (lazy loading)\n * Environment: production\n   WARNING: This is a development server. Do not use it in a production deployment.\n   Use a production WSGI server instead.\n * Debug mode: on\n * Running on http://0.0.0.0:8080/ (Press CTRL+C to quit)\n```\n\n----------------------------------------\n\nTITLE: Configuring Dockerfile for Functions Framework Python\nDESCRIPTION: Dockerfile configuration that packages a Python function for deployment. It uses the official Python slim image, installs the Functions Framework and other dependencies, and sets up the container to serve the function via HTTP.\nSOURCE: https://github.com/googlecloudplatform/functions-framework-python/blob/main/examples/cloud_run_http/README.md#2025-04-23_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\n# Use the official Python image.\n# https://hub.docker.com/_/python\nFROM python:3.7-slim\n\n# Copy local code to the container image.\nENV APP_HOME /app\nWORKDIR $APP_HOME\nCOPY . .\n\n# Install production dependencies.\nRUN pip install functions-framework\nRUN pip install -r requirements.txt\n\n# Run the web service on container startup.\nCMD exec functions-framework --target=hello\n```\n\n----------------------------------------\n\nTITLE: Adding Functions Framework to requirements.txt\nDESCRIPTION: Shows how to include the Functions Framework as a dependency in requirements.txt for deployment purposes, pinning to major version 3.\nSOURCE: https://github.com/googlecloudplatform/functions-framework-python/blob/main/README.md#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nfunctions-framework==3.*\n```\n\n----------------------------------------\n\nTITLE: Testing a CloudEvent Function with cURL\nDESCRIPTION: Command to test a locally running CloudEvent function using cURL with a sample CloudEvent JSON payload.\nSOURCE: https://github.com/googlecloudplatform/functions-framework-python/blob/main/README.md#2025-04-23_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST localhost:8080 \\\n   -H \"Content-Type: application/cloudevents+json\" \\\n   -d '{\n\t\"specversion\" : \"1.0\",\n\t\"type\" : \"example.com.cloud.event\",\n\t\"source\" : \"https://example.com/cloudevents/pull\",\n\t\"subject\" : \"123\",\n\t\"id\" : \"A234-1234-1234\",\n\t\"time\" : \"2018-04-05T17:31:00Z\",\n\t\"data\" : \"hello world\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Building a Deployable Container with Cloud Buildpacks\nDESCRIPTION: Command to build a container image for a function using the 'pack' tool with Google Cloud buildpacks, configuring the function's signature type and target name.\nSOURCE: https://github.com/googlecloudplatform/functions-framework-python/blob/main/README.md#2025-04-23_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\npack build \\\n    --builder gcr.io/buildpacks/builder:v1 \\\n    --env GOOGLE_FUNCTION_SIGNATURE_TYPE=http \\\n    --env GOOGLE_FUNCTION_TARGET=hello \\\n    my-first-function\n```\n\n----------------------------------------\n\nTITLE: Testing a Local Functions Framework with cURL\nDESCRIPTION: Command to test a locally running Functions Framework server using cURL, showing the expected output.\nSOURCE: https://github.com/googlecloudplatform/functions-framework-python/blob/main/README.md#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncurl localhost:8080\n# Output: Hello world!\n```\n\n----------------------------------------\n\nTITLE: Setting Up Pub/Sub Topic and Push Subscription for Testing\nDESCRIPTION: Comprehensive set of commands to create a Pub/Sub topic, set up a push subscription that targets the local Functions Framework server, and publish test messages.\nSOURCE: https://github.com/googlecloudplatform/functions-framework-python/blob/main/README.md#2025-04-23_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nexport PUBSUB_PROJECT_ID=my-project\nexport TOPIC_ID=my-topic\nexport PUSH_SUBSCRIPTION_ID=my-subscription\n$(gcloud beta emulators pubsub env-init)\n\ngit clone https://github.com/googleapis/python-pubsub.git\ncd python-pubsub/samples/snippets/\npip install -r requirements.txt\n\npython publisher.py $PUBSUB_PROJECT_ID create $TOPIC_ID\npython subscriber.py $PUBSUB_PROJECT_ID create-push $TOPIC_ID $PUSH_SUBSCRIPTION_ID http://localhost:8080\npython publisher.py $PUBSUB_PROJECT_ID publish $TOPIC_ID\n```\n\n----------------------------------------\n\nTITLE: Deploying the Container to Cloud Run\nDESCRIPTION: Shell commands to build, push, and deploy the container to Cloud Run. These commands build the Docker image, push it to Google Container Registry, and deploy it as a Cloud Run service in the us-central1 region.\nSOURCE: https://github.com/googlecloudplatform/functions-framework-python/blob/main/examples/cloud_run_http/README.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndocker build -t gcr.io/[PROJECT-ID]/helloworld .\ndocker push gcr.io/[PROJECT-ID]/helloworld\ngcloud run deploy helloworld --image gcr.io/[PROJECT-ID]/helloworld --region us-central1\n```\n\n----------------------------------------\n\nTITLE: Building and Running the Container Locally\nDESCRIPTION: Shell command to build a Docker container from the Dockerfile and run it locally on port 8080. This allows testing the function before deploying to Cloud Run.\nSOURCE: https://github.com/googlecloudplatform/functions-framework-python/blob/main/examples/cloud_run_http/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndocker build -t helloworld . && docker run --rm -p 8080:8080 -e PORT=8080 helloworld\n```\n\n----------------------------------------\n\nTITLE: Running a CloudEvent Function Locally\nDESCRIPTION: Command to start a local server for testing a CloudEvent function named 'hello_cloud_event'.\nSOURCE: https://github.com/googlecloudplatform/functions-framework-python/blob/main/README.md#2025-04-23_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nfunctions-framework --target=hello_cloud_event\n```\n\n----------------------------------------\n\nTITLE: Running a Built Function Container Locally\nDESCRIPTION: Command to run a previously built function container locally with port mapping, showing the expected output.\nSOURCE: https://github.com/googlecloudplatform/functions-framework-python/blob/main/README.md#2025-04-23_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --rm -p 8080:8080 my-first-function\n# Output: Serving function...\n```\n\n----------------------------------------\n\nTITLE: Running an Event Function with Functions Framework\nDESCRIPTION: Command to start a local server for testing an event function with the event signature type, debug mode, and a specific port.\nSOURCE: https://github.com/googlecloudplatform/functions-framework-python/blob/main/README.md#2025-04-23_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nfunctions-framework --target=hello --signature-type=event --debug --port=8080\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Dependencies for Python Functions Framework\nDESCRIPTION: Requirements file specifying optional dependencies: cloudevents library version 1.2.0 or higher for handling CloudEvents, and requests library for making HTTP requests.\nSOURCE: https://github.com/googlecloudplatform/functions-framework-python/blob/main/examples/cloud_run_cloud_events/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# Optionally include additional dependencies here\ncloudevents>=1.2.0\nrequests\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Authentication for Google Cloud\nDESCRIPTION: Shell command to configure the Docker credential helper for Google Cloud. This enables pushing container images to Google Container Registry.\nSOURCE: https://github.com/googlecloudplatform/functions-framework-python/blob/main/examples/cloud_run_http/README.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngcloud auth configure-docker\n```\n\n----------------------------------------\n\nTITLE: Running CloudEvent Function Container\nDESCRIPTION: This command runs the 'cloud_event_example' Docker image, mapping port 8080 and setting the PORT environment variable.\nSOURCE: https://github.com/googlecloudplatform/functions-framework-python/blob/main/examples/cloud_run_cloud_events/README.md#2025-04-23_snippet_1\n\nLANGUAGE: commandline\nCODE:\n```\ndocker run --rm -p 8080:8080 -e PORT=8080 cloud_event_example\n```\n\n----------------------------------------\n\nTITLE: Starting a Pub/Sub Emulator for Testing\nDESCRIPTION: Commands to set up a Pub/Sub emulator for local testing, specifying a project ID and host port configuration.\nSOURCE: https://github.com/googlecloudplatform/functions-framework-python/blob/main/README.md#2025-04-23_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nexport PUBSUB_PROJECT_ID=my-project\ngcloud beta emulators pubsub start \\\n    --project=$PUBSUB_PROJECT_ID \\\n    --host-port=localhost:8085\n```\n\n----------------------------------------\n\nTITLE: Testing the Function with cURL\nDESCRIPTION: Shell command to test the locally running function using cURL. This sends an HTTP request to the local server and displays the response.\nSOURCE: https://github.com/googlecloudplatform/functions-framework-python/blob/main/examples/cloud_run_http/README.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncurl localhost:8080\n# Output: Hello world!\n```\n\n----------------------------------------\n\nTITLE: Testing an HTTP Function with cURL\nDESCRIPTION: Shows how to call a deployed Functions Framework endpoint using cURL and demonstrates the expected response from the hello function.\nSOURCE: https://github.com/googlecloudplatform/functions-framework-python/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl http://my-url\n# Output: Hello world!\n```\n\n----------------------------------------\n\nTITLE: Testing a Containerized Function with cURL\nDESCRIPTION: Command to test a locally running containerized function using cURL, showing the expected output.\nSOURCE: https://github.com/googlecloudplatform/functions-framework-python/blob/main/README.md#2025-04-23_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\ncurl localhost:8080\n# Output: Hello World!\n```\n\n----------------------------------------\n\nTITLE: Testing Cloud Function Endpoint\nDESCRIPTION: Command to test the deployed cloud function by sending an HTTP request to the local endpoint.\nSOURCE: https://github.com/googlecloudplatform/functions-framework-python/blob/main/examples/docker-compose/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl localhost:8080/hello\n```\n\n----------------------------------------\n\nTITLE: Testing Functions Framework Python Example with curl\nDESCRIPTION: This curl command sends a request to the locally running function and displays the output.\nSOURCE: https://github.com/googlecloudplatform/functions-framework-python/blob/main/examples/cloud_run_decorator/README.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncurl localhost:8080\n# Output: Hello world!\n```\n\n----------------------------------------\n\nTITLE: Testing Hello Function with Curl in Bash\nDESCRIPTION: Command to test the deployed 'hello' Cloud Function by sending an HTTP request to the Minikube IP address.\nSOURCE: https://github.com/googlecloudplatform/functions-framework-python/blob/main/examples/skaffold/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl `minikube ip`/hello\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image for CloudEvent Function\nDESCRIPTION: This command builds a Docker image named 'cloud_event_example' from the current directory.\nSOURCE: https://github.com/googlecloudplatform/functions-framework-python/blob/main/examples/cloud_run_cloud_events/README.md#2025-04-23_snippet_0\n\nLANGUAGE: commandline\nCODE:\n```\ndocker build -t cloud_event_example .\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image for Functions Framework Python Example\nDESCRIPTION: This command builds a Docker image named 'decorator_example' from the current directory's Dockerfile.\nSOURCE: https://github.com/googlecloudplatform/functions-framework-python/blob/main/examples/cloud_run_decorator/README.md#2025-04-23_snippet_0\n\nLANGUAGE: commandline\nCODE:\n```\ndocker build -t decorator_example .\n```\n\n----------------------------------------\n\nTITLE: Running Docker Container for Functions Framework Python Example\nDESCRIPTION: This command runs the 'decorator_example' Docker image, mapping port 8080 and setting the PORT environment variable.\nSOURCE: https://github.com/googlecloudplatform/functions-framework-python/blob/main/examples/cloud_run_decorator/README.md#2025-04-23_snippet_1\n\nLANGUAGE: commandline\nCODE:\n```\ndocker run --rm -p 8080:8080 -e PORT=8080 decorator_example\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Compose Environment\nDESCRIPTION: Command to initialize and start the Docker Compose environment for local function development.\nSOURCE: https://github.com/googlecloudplatform/functions-framework-python/blob/main/examples/docker-compose/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up\n```\n\n----------------------------------------\n\nTITLE: Sending CloudEvent to Container\nDESCRIPTION: This command runs a Python script named 'send_cloud_event.py' within the 'cloud_event_example' container to send a CloudEvent.\nSOURCE: https://github.com/googlecloudplatform/functions-framework-python/blob/main/examples/cloud_run_cloud_events/README.md#2025-04-23_snippet_2\n\nLANGUAGE: commandline\nCODE:\n```\ndocker run -t cloud_event_example send_cloud_event.py\n```\n\n----------------------------------------\n\nTITLE: CloudEvent Function Console Output\nDESCRIPTION: Shows the expected output in the terminal running the CloudEvent function after it processes an event.\nSOURCE: https://github.com/googlecloudplatform/functions-framework-python/blob/main/README.md#2025-04-23_snippet_10\n\nLANGUAGE: text\nCODE:\n```\nReceived event with ID: A234-1234-1234 and data hello world\n```\n\n----------------------------------------\n\nTITLE: Testing Goodbye Function with Curl in Bash\nDESCRIPTION: Command to test the deployed 'goodbye' Cloud Function by sending an HTTP request to the Minikube IP address.\nSOURCE: https://github.com/googlecloudplatform/functions-framework-python/blob/main/examples/skaffold/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl `minikube ip`/goodbye\n```\n\n----------------------------------------\n\nTITLE: Running Skaffold Development Mode in Bash\nDESCRIPTION: Command to start Skaffold in development mode, which deploys the application and watches for changes with live reloading.\nSOURCE: https://github.com/googlecloudplatform/functions-framework-python/blob/main/examples/skaffold/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nskaffold dev\n```\n\n----------------------------------------\n\nTITLE: Enabling Minikube Ingress Addon in Bash\nDESCRIPTION: Command to enable the ingress addon in Minikube to handle external traffic to the cluster.\nSOURCE: https://github.com/googlecloudplatform/functions-framework-python/blob/main/examples/skaffold/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nminikube addons enable ingress\n```\n\n----------------------------------------\n\nTITLE: Starting Minikube in Bash\nDESCRIPTION: Command to start a Minikube Kubernetes cluster using the default profile.\nSOURCE: https://github.com/googlecloudplatform/functions-framework-python/blob/main/examples/skaffold/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nminikube start\n```\n\n----------------------------------------\n\nTITLE: Checking Skaffold Version in Bash\nDESCRIPTION: Command to verify the installation of Skaffold by checking its version.\nSOURCE: https://github.com/googlecloudplatform/functions-framework-python/blob/main/examples/skaffold/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nskaffold version\n```\n\n----------------------------------------\n\nTITLE: Checking Minikube Version in Bash\nDESCRIPTION: Command to verify the installation of Minikube by checking its version.\nSOURCE: https://github.com/googlecloudplatform/functions-framework-python/blob/main/examples/skaffold/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nminikube version\n```\n\n----------------------------------------\n\nTITLE: Documenting Version 3.8.0 Changes in Markdown\nDESCRIPTION: Lists new features and bug fixes for version 3.8.0, including changes to default logging level and scorecard updates.\nSOURCE: https://github.com/googlecloudplatform/functions-framework-python/blob/main/CHANGELOG.md#2025-04-23_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n## [3.8.0](https://github.com/GoogleCloudPlatform/functions-framework-python/compare/v3.7.0...v3.8.0) (2024-06-25)\n\n\n### Features\n\n* Set default logging level to align with Flask's defaults ([#336](https://github.com/GoogleCloudPlatform/functions-framework-python/issues/336)) ([d1d0753](https://github.com/GoogleCloudPlatform/functions-framework-python/commit/d1d0753b6ea0dcc4222e28fc61002ac563b54cac))\n\n\n### Bug Fixes\n\n* add www.bestpractices.dev:443 to scorecard ([#330](https://github.com/GoogleCloudPlatform/functions-framework-python/issues/330)) ([02472e7](https://github.com/GoogleCloudPlatform/functions-framework-python/commit/02472e7315d0fd642db26441b3cb21f799906739))\n```\n\n----------------------------------------\n\nTITLE: Documenting Version 3.8.1 Changes in Markdown\nDESCRIPTION: Details bug fixes for version 3.8.1, including a security update to gunicorn.\nSOURCE: https://github.com/googlecloudplatform/functions-framework-python/blob/main/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n## [3.8.1](https://github.com/GoogleCloudPlatform/functions-framework-python/compare/v3.8.0...v3.8.1) (2024-07-26)\n\n\n### Bug Fixes\n\n* upgrade gunicorn to 22 to fix CVE-2024-1135 ([#341](https://github.com/GoogleCloudPlatform/functions-framework-python/issues/341)) ([d622f13](https://github.com/GoogleCloudPlatform/functions-framework-python/commit/d622f137e8a2419fc487c867d67e12d0204b586b))\n```\n\n----------------------------------------\n\nTITLE: Documenting Version 3.8.2 Changes in Markdown\nDESCRIPTION: Lists bug fixes for version 3.8.2, including removal of an unused import.\nSOURCE: https://github.com/googlecloudplatform/functions-framework-python/blob/main/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n## [3.8.2](https://github.com/GoogleCloudPlatform/functions-framework-python/compare/v3.8.1...v3.8.2) (2024-11-13)\n\n\n### Bug Fixes\n\n* remove unused import ([#349](https://github.com/GoogleCloudPlatform/functions-framework-python/issues/349)) ([d5ac3d8](https://github.com/GoogleCloudPlatform/functions-framework-python/commit/d5ac3d8d01fdb71f7454a0433e586f1eb4a0f6fe))\n```\n\n----------------------------------------\n\nTITLE: Docker Build Output Example\nDESCRIPTION: Example output showing the Docker build process including image creation, layer caching, and container initialization.\nSOURCE: https://github.com/googlecloudplatform/functions-framework-python/blob/main/examples/docker-compose/README.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nBuilding function\n[+] Building 7.0s (10/10) FINISHED\n => [internal] load build definition from Dockerfile                 0.0s\n => => transferring dockerfile: 431B                                 0.0s\n => [internal] load .dockerignore                                    0.0s\n => => transferring context: 2B                                      0.0s\n => [internal] load metadata for docker.io/library/python:latest     0.6s\n => [1/5] FROM docker.io/library/python@sha256:7a93befe45f3afb6b337  0.0s\n => [internal] load build context                                    0.0s\n => => transferring context: 2.11kB                                  0.0s\n => CACHED [2/5] WORKDIR /func                                       0.0s\n => [3/5] COPY . .                                                   0.0s\n => [4/5] RUN pip install functions-framework                        4.7s\n => [5/5] RUN pip install -r requirements.txt                        1.1s\n => exporting to image                                               0.4s\n => => exporting layers                                              0.4s\n => => writing image sha256:99962e5907e80856af6b032aa96a3130dde9ab6  0.0s\n => => naming to docker.io/library/docker-compose_function           0.0s\n```\n\n----------------------------------------\n\nTITLE: Defining Changelog Format in Markdown\nDESCRIPTION: Specifies the changelog format and versioning scheme used for the project.\nSOURCE: https://github.com/googlecloudplatform/functions-framework-python/blob/main/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# Changelog\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n```\n\n----------------------------------------\n\nTITLE: Specifying Optional Dependencies - Python Functions Framework\nDESCRIPTION: Placeholder comment indicating where to specify additional project dependencies in a Python Functions Framework configuration. This would typically be part of a requirements.txt or similar dependency management file.\nSOURCE: https://github.com/googlecloudplatform/functions-framework-python/blob/main/examples/cloud_run_event/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Optionally include additional dependencies here\n```\n\n----------------------------------------\n\nTITLE: Commenting Dependency Inclusion in Python Requirements File\nDESCRIPTION: This comment indicates where additional dependencies can be listed in a Python project's requirements file. It's a placeholder for developers to add project-specific dependencies as needed.\nSOURCE: https://github.com/googlecloudplatform/functions-framework-python/blob/main/examples/cloud_run_http/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n# Optionally include additional dependencies here\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Dependencies in requirements.txt\nDESCRIPTION: This file is used to list Python package dependencies for the project. It is currently empty, indicating that no specific packages are required at the moment. Developers can add package names and version specifications to this file as needed.\nSOURCE: https://github.com/googlecloudplatform/functions-framework-python/blob/main/examples/skaffold/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n# Add any Python requirements here\n```\n\n----------------------------------------\n\nTITLE: Configuring Optional Dependencies for Google Cloud Functions Framework\nDESCRIPTION: A commented guide indicating where developers should specify additional optional dependencies for their Google Cloud Functions Framework Python projects. This allows for extending the functionality of the framework with custom dependencies.\nSOURCE: https://github.com/googlecloudplatform/functions-framework-python/blob/main/examples/cloud_run_decorator/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# Optionally include additional dependencies here\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Requirements File Comment\nDESCRIPTION: A placeholder comment indicating where to add Python package requirements in a requirements.txt file. This file is used to specify project dependencies that can be installed via pip.\nSOURCE: https://github.com/googlecloudplatform/functions-framework-python/blob/main/examples/docker-compose/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n# Add any Python requirements here\n```"
  }
]