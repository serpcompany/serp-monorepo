[
  {
    "owner": "django-json-api",
    "repo": "django-rest-framework-json-api",
    "content": "TITLE: Configuring Django REST Framework for JSON:API in settings.py\nDESCRIPTION: Standard configuration block for Django REST Framework settings to enable JSON:API functionality. Includes necessary parser classes, renderer classes, metadata, filter backends, and other required settings for full JSON:API compliance.\nSOURCE: https://github.com/django-json-api/django-rest-framework-json-api/blob/main/docs/usage.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nREST_FRAMEWORK = {\n    'PAGE_SIZE': 10,\n    'EXCEPTION_HANDLER': 'rest_framework_json_api.exceptions.exception_handler',\n    'DEFAULT_PAGINATION_CLASS':\n        'rest_framework_json_api.pagination.JsonApiPageNumberPagination',\n    'DEFAULT_PARSER_CLASSES': (\n        'rest_framework_json_api.parsers.JSONParser',\n        'rest_framework.parsers.FormParser',\n        'rest_framework.parsers.MultiPartParser'\n    ),\n    'DEFAULT_RENDERER_CLASSES': (\n        'rest_framework_json_api.renderers.JSONRenderer',\n        # If you're performance testing, you will want to use the browseable API\n        # without forms, as the forms can generate their own queries.\n        # If performance testing, enable:\n        # 'example.utils.BrowsableAPIRendererWithoutForms',\n        # Otherwise, to play around with the browseable API, enable:\n        'rest_framework_json_api.renderers.BrowsableAPIRenderer'\n    ),\n    'DEFAULT_METADATA_CLASS': 'rest_framework_json_api.metadata.JSONAPIMetadata',\n    'DEFAULT_FILTER_BACKENDS': (\n        'rest_framework_json_api.filters.QueryParameterValidationFilter',\n        'rest_framework_json_api.filters.OrderingFilter',\n        'rest_framework_json_api.django_filters.DjangoFilterBackend',\n        'rest_framework.filters.SearchFilter',\n    ),\n    'SEARCH_PARAM': 'filter[search]',\n    'TEST_REQUEST_RENDERER_CLASSES': (\n        'rest_framework_json_api.renderers.JSONRenderer',\n    ),\n    'TEST_REQUEST_DEFAULT_FORMAT': 'vnd.api+json'\n}\n```\n\n----------------------------------------\n\nTITLE: Using included_serializers for Related Resources in JSON:API\nDESCRIPTION: Alternative approach using included_serializers when the related serializers match the included serializers. This configuration works for both inclusion and related resource endpoints.\nSOURCE: https://github.com/django-json-api/django-rest-framework-json-api/blob/main/docs/usage.md#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nclass OrderSerializer(serializers.HyperlinkedModelSerializer):\n    ...\n    included_serializers = {\n        'customer': 'example.serializers.CustomerSerializer',\n        'line_items': 'example.serializers.LineItemSerializer'\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Django REST Framework Settings for JSON:API\nDESCRIPTION: Comprehensive Django REST framework settings configuration that enables JSON:API support by setting appropriate parsers, renderers, pagination classes, exception handlers, filter backends, and other related settings.\nSOURCE: https://github.com/django-json-api/django-rest-framework-json-api/blob/main/README.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nREST_FRAMEWORK = {\n    'PAGE_SIZE': 10,\n    'EXCEPTION_HANDLER': 'rest_framework_json_api.exceptions.exception_handler',\n    'DEFAULT_PAGINATION_CLASS':\n        'rest_framework_json_api.pagination.JsonApiPageNumberPagination',\n    'DEFAULT_PARSER_CLASSES': (\n        'rest_framework_json_api.parsers.JSONParser',\n        'rest_framework.parsers.FormParser',\n        'rest_framework.parsers.MultiPartParser'\n    ),\n    'DEFAULT_RENDERER_CLASSES': (\n        'rest_framework_json_api.renderers.JSONRenderer',\n        'rest_framework_json_api.renderers.BrowsableAPIRenderer',\n    ),\n    'DEFAULT_METADATA_CLASS': 'rest_framework_json_api.metadata.JSONAPIMetadata',\n    'DEFAULT_FILTER_BACKENDS': (\n        'rest_framework_json_api.filters.QueryParameterValidationFilter',\n        'rest_framework_json_api.filters.OrderingFilter',\n        'rest_framework_json_api.django_filters.DjangoFilterBackend',\n        'rest_framework.filters.SearchFilter',\n    ),\n    'SEARCH_PARAM': 'filter[search]',\n    'TEST_REQUEST_RENDERER_CLASSES': (\n        'rest_framework_json_api.renderers.JSONRenderer',\n    ),\n    'TEST_REQUEST_DEFAULT_FORMAT': 'vnd.api+json'\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Compound Documents with Included Resources in Django REST Framework JSON API\nDESCRIPTION: Shows how to set up included serializers and resources to create JSON:API compound documents. This example demonstrates including a Knight resource when fetching a Quest object to reduce network requests.\nSOURCE: https://github.com/django-json-api/django-rest-framework-json-api/blob/main/docs/usage.md#2025-04-21_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nclass KnightSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Knight\n        fields = ('id', 'name', 'strength', 'dexterity', 'charisma')\n\n\nclass QuestSerializer(serializers.ModelSerializer):\n    included_serializers = {\n        'knight': KnightSerializer,\n    }\n\n    class Meta:\n        model = Quest\n        fields = ('id', 'title', 'reward', 'knight')\n\n    class JSONAPIMeta:\n        included_resources = ['knight']\n```\n\n----------------------------------------\n\nTITLE: Optimizing Included Resources with Prefetching in ViewSets\nDESCRIPTION: Demonstrates how to use custom ModelViewSet classes to automatically preload related data with select_related and prefetch_related, optimizing the performance of included resources in JSON:API responses.\nSOURCE: https://github.com/django-json-api/django-rest-framework-json-api/blob/main/docs/usage.md#2025-04-21_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nfrom rest_framework_json_api import views\n\n# When MyViewSet is called with ?include=author it will dynamically prefetch author and author.bio\nclass MyViewSet(views.ModelViewSet):\n    queryset = Book.objects.all()\n    select_for_includes = {\n        'author': ['author__bio'],\n    }\n    prefetch_for_includes = {\n        '__all__': [],\n        'all_authors': [Prefetch('all_authors', queryset=Author.objects.select_related('bio'))],\n        'category.section': ['category']\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing Polymorphic Model Serializer in Django REST Framework JSON API\nDESCRIPTION: Demonstrates how to create a polymorphic serializer that handles different resource types within the same endpoint. This serializer uses django-polymorphic for inheritance-based model serialization.\nSOURCE: https://github.com/django-json-api/django-rest-framework-json-api/blob/main/docs/usage.md#2025-04-21_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nclass ProjectSerializer(serializers.PolymorphicModelSerializer):\n    polymorphic_serializers = [ArtProjectSerializer, ResearchProjectSerializer]\n\n    class Meta:\n        model = models.Project\n```\n\n----------------------------------------\n\nTITLE: Implementing RelationshipView for JSON:API Relationships\nDESCRIPTION: A view for handling JSON:API relationship endpoints that return only resource identifiers. This simple implementation handles requests to relationship URLs like /orders/3/relationships/line_items.\nSOURCE: https://github.com/django-json-api/django-rest-framework-json-api/blob/main/docs/usage.md#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nfrom rest_framework_json_api.views import RelationshipView\n\nfrom myapp.models import Order\n\n\nclass OrderRelationshipView(RelationshipView):\n    queryset = Order.objects\n```\n\n----------------------------------------\n\nTITLE: Implementing SerializerMethodResourceRelatedField in JSON:API\nDESCRIPTION: Using SerializerMethodResourceRelatedField to dynamically generate relationship data based on custom methods in the serializer. This example shows filtering related items based on custom criteria.\nSOURCE: https://github.com/django-json-api/django-rest-framework-json-api/blob/main/docs/usage.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom rest_framework_json_api import serializers\nfrom rest_framework_json_api.relations import SerializerMethodResourceRelatedField\n\nfrom myapp.models import Order, LineItem\n\n\nclass OrderSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Order\n\n    line_items = SerializerMethodResourceRelatedField(\n        model=LineItem,\n        many=True,\n        method_name='get_big_line_items'\n    )\n\n    small_line_items = SerializerMethodResourceRelatedField(\n        model=LineItem,\n        many=True,\n        # default to method_name='get_small_line_items'\n    )\n\n    def get_big_line_items(self, instance):\n        return LineItem.objects.filter(order=instance).filter(amount__gt=1000)\n\n    def get_small_line_items(self, instance):\n        return LineItem.objects.filter(order=instance).filter(amount__lte=1000)\n```\n\n----------------------------------------\n\nTITLE: Configuring URLs for Related Resources in JSON:API\nDESCRIPTION: URL configuration for handling related resource endpoints in Django REST Framework JSON:API. This pattern enables endpoints like /orders/3/lineitems/ for accessing related resources.\nSOURCE: https://github.com/django-json-api/django-rest-framework-json-api/blob/main/docs/usage.md#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nurl(r'^orders/(?P<pk>[^/.]+)/$',\n        OrderViewSet.as_view({'get': 'retrieve'}),\n        name='order-detail'),\nurl(r'^orders/(?P<pk>[^/.]+)/(?P<related_field>[-\\w]+)/$',\n        OrderViewSet.as_view({'get': 'retrieve_related'}),\n        name='order-related'),\n```\n\n----------------------------------------\n\nTITLE: Configuring Filter Backends in Django REST Framework JSON:API ViewSet\nDESCRIPTION: Example of configuring filter backends in a ViewSet by setting the filter_backends attribute along with filterset_fields and search_fields for advanced filtering options.\nSOURCE: https://github.com/django-json-api/django-rest-framework-json-api/blob/main/docs/usage.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom rest_framework_json_api import filters\nfrom rest_framework_json_api import django_filters\nfrom rest_framework import SearchFilter\nfrom models import MyModel\n\nclass MyViewset(ModelViewSet):\n    queryset = MyModel.objects.all()\n    serializer_class = MyModelSerializer\n    filter_backends = (filters.QueryParameterValidationFilter, filters.OrderingFilter,\n\t                   django_filters.DjangoFilterBackend, SearchFilter)\n    filterset_fields = {\n        'id': ('exact', 'lt', 'gt', 'gte', 'lte', 'in'),\n        'descriptuon': ('icontains', 'iexact', 'contains'),\n        'tagline': ('icontains', 'iexact', 'contains'),\n    }\n    search_fields = ('id', 'description', 'tagline',)\n```\n\n----------------------------------------\n\nTITLE: Importing and Using JSON:API Serializers in Django REST Framework\nDESCRIPTION: Example of importing and using serializer classes from the JSON:API package instead of vanilla Django REST Framework for proper JSON:API compliance.\nSOURCE: https://github.com/django-json-api/django-rest-framework-json-api/blob/main/docs/usage.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom rest_framework_json_api import serializers\n\nclass MyModelSerializer(serializers.ModelSerializer):\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Adding Root-Level Metadata in Django REST Framework JSON API Serializers\nDESCRIPTION: Demonstrates how to add custom metadata to the top-level 'meta' object in JSON:API responses by implementing the get_root_meta method in a serializer. The method handles both list and detail requests differently.\nSOURCE: https://github.com/django-json-api/django-rest-framework-json-api/blob/main/docs/usage.md#2025-04-21_snippet_25\n\nLANGUAGE: python\nCODE:\n```\ndef get_root_meta(self, resource, many):\n    if many:\n      # Dealing with a list request\n      return {\n          'size': len(resource)\n      }\n    else:\n      # Dealing with a detail request\n      return {\n        'foo': 'bar'\n      }\n```\n\n----------------------------------------\n\nTITLE: Creating Read-Only ViewSets with Prefetching Support\nDESCRIPTION: Shows how to use the ReadOnlyModelViewSet from rest_framework_json_api to create read-only endpoints that support the same prefetching optimization as regular ModelViewSets.\nSOURCE: https://github.com/django-json-api/django-rest-framework-json-api/blob/main/docs/usage.md#2025-04-21_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nfrom rest_framework_json_api import views\n\nclass MyReadOnlyViewSet(views.ReadOnlyModelViewSet):\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Building Custom JSON:API Output Manually in Django REST Framework\nDESCRIPTION: Example of disabling automatic JSON:API serialization by setting resource_name to False on a view and manually constructing the JSON:API response data structure.\nSOURCE: https://github.com/django-json-api/django-rest-framework-json-api/blob/main/docs/usage.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nclass User(ModelViewSet):\n    resource_name = False\n    queryset = User.objects.all()\n    serializer_class = UserSerializer\n\n    def retrieve(self, request, *args, **kwargs):\n        instance = self.get_object()\n        data = [{\"id\": 1, \"type\": \"users\", \"attributes\": {\"fullName\": \"Test User\"}}])\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Schema Generation in Django URLs\nDESCRIPTION: Python code for generating a dynamic OpenAPI schema in a Django view using get_schema_view with a custom schema generator class, and configuring Swagger UI to display it.\nSOURCE: https://github.com/django-json-api/django-rest-framework-json-api/blob/main/docs/usage.md#2025-04-21_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nfrom rest_framework.schemas import get_schema_view\n\nurlpatterns = [\n    ...\n    path('openapi', get_schema_view(\n        title=\"Example API\",\n        description=\"API for all things …\",\n        version=\"1.0.0\",\n        generator_class=MySchemaGenerator,\n    ), name='openapi-schema'),\n    path('swagger-ui/', TemplateView.as_view(\n        template_name='swagger-ui.html',\n        extra_context={'schema_url': 'openapi-schema'}\n    ), name='swagger-ui'),\n    ...\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring ResourceRelatedField with Related Links in JSON:API\nDESCRIPTION: Configuring ResourceRelatedField to work with the related resource URL pattern. This example shows how to set up the field with the appropriate view name and URL parameters.\nSOURCE: https://github.com/django-json-api/django-rest-framework-json-api/blob/main/docs/usage.md#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n    line_items = ResourceRelatedField(\n        queryset=LineItem.objects,\n        many=True,\n        related_link_view_name='order-related',\n        related_link_url_kwarg='pk',\n        self_link_view_name='order-relationships'\n    )\n\n    customer = ResourceRelatedField(\n        queryset=Customer.objects,\n        related_link_view_name='order-related',\n        self_link_view_name='order-relationships'\n    )\n```\n\n----------------------------------------\n\nTITLE: Implementing Polymorphic Resource Related Field in Django REST Framework JSON API\nDESCRIPTION: Shows how to handle polymorphic relations using PolymorphicResourceRelatedField. This allows for related fields to reference different object types that share a common base class.\nSOURCE: https://github.com/django-json-api/django-rest-framework-json-api/blob/main/docs/usage.md#2025-04-21_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nclass CompanySerializer(serializers.ModelSerializer):\n    current_project = relations.PolymorphicResourceRelatedField(\n        ProjectSerializer, queryset=models.Project.objects.all())\n    future_projects = relations.PolymorphicResourceRelatedField(\n        ProjectSerializer, queryset=models.Project.objects.all(), many=True)\n\n    class Meta:\n        model = models.Company\n```\n\n----------------------------------------\n\nTITLE: Using SerializerMethodResourceRelatedField with Hyperlinks in JSON:API\nDESCRIPTION: Combining SerializerMethodResourceRelatedField with hyperlink support in a HyperlinkedModelSerializer. This allows for dynamic relationship data and proper link generation for JSON:API.\nSOURCE: https://github.com/django-json-api/django-rest-framework-json-api/blob/main/docs/usage.md#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nclass OrderSerializer(serializers.HyperlinkedModelSerializer):\n    class Meta:\n        model = Order\n\n    line_items = SerializerMethodResourceRelatedField(\n        model=LineItem,\n        many=True,\n        method_name='get_big_line_items',\n        related_link_view_name='order-lineitems-list',\n        related_link_url_kwarg='order_pk',\n    )\n\n    def get_big_line_items(self, instance):\n        return LineItem.objects.filter(order=instance).filter(amount__gt=1000)\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Schema Class for JSON:API OpenAPI Generation\nDESCRIPTION: Shows how to set the default schema class in Django REST Framework settings to use Django REST Framework JSON API's AutoSchema for all views, enabling proper JSON:API OpenAPI schema generation.\nSOURCE: https://github.com/django-json-api/django-rest-framework-json-api/blob/main/docs/usage.md#2025-04-21_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nREST_FRAMEWORK = {\n    # ...\n    'DEFAULT_SCHEMA_CLASS': 'rest_framework_json_api.schemas.openapi.AutoSchema',\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Nested ViewSet for Related Resources in JSON:API\nDESCRIPTION: Example of a ViewSet that handles nested routes for related resources in JSON:API. The ViewSet filters the queryset based on the parent object's ID passed in the URL parameters.\nSOURCE: https://github.com/django-json-api/django-rest-framework-json-api/blob/main/docs/usage.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom rest_framework import viewsets\n\nfrom myapp.models import LineItem\nfrom myapp.serializers import LineItemSerializer\n\n\nclass LineItemViewSet(viewsets.ModelViewSet):\n    queryset = LineItem.objects\n    serializer_class = LineItemSerializer\n\n    def get_queryset(self):\n        queryset = super().get_queryset()\n\n        # if this viewset is accessed via the 'order-lineitems-list' route,\n        # it wll have been passed the `order_pk` kwarg and the queryset\n        # needs to be filtered accordingly; if it was accessed via the\n        # unnested '/lineitems' route, the queryset should include all LineItems\n        order_pk = self.kwargs.get('order_pk')\n        if order_pk is not None:\n            queryset = queryset.filter(order__pk=order_pk)\n\n        return queryset\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Error Objects with ValidationError in Django REST Framework JSON:API\nDESCRIPTION: Example of raising a custom error object using Django REST Framework's ValidationError class to conform to JSON:API error format specification.\nSOURCE: https://github.com/django-json-api/django-rest-framework-json-api/blob/main/docs/usage.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nraise serializers.ValidationError(\n    {\n        \"id\": \"your-id\",\n        \"detail\": \"your detail message\",\n        \"source\": {\n            \"pointer\": \"/data/attributes/your-pointer\",\n        }\n\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Field Name Mapping for Relationship Views in JSON:API\nDESCRIPTION: Using field_name_mapping in a RelationshipView to map URL parameter names to model field names. This allows for custom URL structures while maintaining the correct relationship fields.\nSOURCE: https://github.com/django-json-api/django-rest-framework-json-api/blob/main/docs/usage.md#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nfield_name_mapping = {\n        'order_items': 'line_items'\n    }\n```\n\n----------------------------------------\n\nTITLE: Displaying JSON:API Format Response\nDESCRIPTION: Shows the JSON:API compliant response format, which restructures the data with links, data objects with type/id/attributes separation, and meta information including pagination.\nSOURCE: https://github.com/django-json-api/django-rest-framework-json-api/blob/main/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"links\": {\n        \"prev\": \"https://example.com/api/1.0/identities\",\n        \"self\": \"https://example.com/api/1.0/identities?page=2\",\n        \"next\": \"https://example.com/api/1.0/identities?page=3\"\n    },\n    \"data\": [{\n        \"type\": \"identities\",\n        \"id\": \"3\",\n        \"attributes\": {\n            \"username\": \"john\",\n            \"full-name\": \"John Coltrane\"\n        }\n    }],\n    \"meta\": {\n        \"pagination\": {\n          \"count\": 20\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Resource Name on a Model in Django REST Framework JSON:API\nDESCRIPTION: Example of defining a resource name at the model level by adding a JSONAPIMeta inner class with a resource_name attribute, providing a consistent resource type across the API.\nSOURCE: https://github.com/django-json-api/django-rest-framework-json-api/blob/main/docs/usage.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nclass Me(models.Model):\n    \"\"\"\n    A simple model\n    \"\"\"\n    name = models.CharField(max_length=100)\n\n    class JSONAPIMeta:\n        resource_name = \"users\"\n```\n\n----------------------------------------\n\nTITLE: Customizing JSON:API Query Parameter Validation in Python\nDESCRIPTION: Example of extending the QueryParameterValidationFilter to modify the allowed query parameters. This demonstrates how to create a custom regex pattern to validate different parameters beyond the JSON:API defaults.\nSOURCE: https://github.com/django-json-api/django-rest-framework-json-api/blob/main/docs/usage.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport re\nfrom rest_framework_json_api.filters import QueryParameterValidationFilter\n\nclass MyQPValidator(QueryParameterValidationFilter):\n    query_regex = re.compile(r\"^(sort|include|page|page_size)$|^(?P<type>filter|fields|page)(\\[\\w\\.\\-\\]+\\])?$\")\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON:API OpenAPI Schema Generation in View Classes\nDESCRIPTION: Demonstrates how to configure a view to use Django REST Framework JSON API's AutoSchema class to generate OpenAPI specifications that correctly represent JSON:API structure.\nSOURCE: https://github.com/django-json-api/django-rest-framework-json-api/blob/main/docs/usage.md#2025-04-21_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nfrom rest_framework_json_api.schemas.openapi import AutoSchema\n\nclass MyViewset(ModelViewSet):\n    schema = AutoSchema\n    ...\n```\n\n----------------------------------------\n\nTITLE: Customizing JSON:API Pagination Classes in Python\nDESCRIPTION: Examples of customizing JSON:API pagination classes with non-standard query parameter names and different limit settings. Shows how to extend both JsonApiPageNumberPagination and JsonApiLimitOffsetPagination with custom configurations.\nSOURCE: https://github.com/django-json-api/django-rest-framework-json-api/blob/main/docs/usage.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom rest_framework_json_api.pagination import JsonApiPageNumberPagination, JsonApiLimitOffsetPagination\n\nclass MyPagePagination(JsonApiPageNumberPagination):\n    page_query_param = 'page_number'\n    page_size_query_param = 'page_length'\n    page_size = 3\n    max_page_size = 1000\n\nclass MyLimitPagination(JsonApiLimitOffsetPagination):\n    offset_query_param = 'offset'\n    limit_query_param = 'limit'\n    default_limit = 3\n    max_limit = None\n```\n\n----------------------------------------\n\nTITLE: Creating Custom ResourceRelatedField for Related Resources in Django REST Framework JSON:API\nDESCRIPTION: Example of creating a custom ResourceRelatedField class to handle custom resource identifiers in related fields by overriding the get_resource_id method.\nSOURCE: https://github.com/django-json-api/django-rest-framework-json-api/blob/main/docs/usage.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass UserResourceRelatedField(ResourceRelatedField):\n    def get_resource_id(self, value):\n        return value.email\n\nclass GroupSerializer(serializers.ModelSerializer):\n    user = UserResourceRelatedField(queryset=User.objects)\n    name = serializers.CharField()\n\n    class Meta:\n        model = Group\n```\n\n----------------------------------------\n\nTITLE: Configuring URLs for Relationship Endpoints in JSON:API\nDESCRIPTION: URL configuration for relationship endpoints in JSON:API. This handles requests to URLs like /orders/3/relationships/line_items by routing them to the appropriate RelationshipView.\nSOURCE: https://github.com/django-json-api/django-rest-framework-json-api/blob/main/docs/usage.md#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nurl(\n    regex=r'^orders/(?P<pk>[^/.]+)/relationships/(?P<related_field>[-/w]+)$',\n    view=OrderRelationshipView.as_view(),\n    name='order-relationships'\n)\n```\n\n----------------------------------------\n\nTITLE: Generating Static OAS Schema with generateschema Command\nDESCRIPTION: Command line example showing how to generate a static OpenAPI schema document using the generateschema management command with the DJA-specific SchemaGenerator class.\nSOURCE: https://github.com/django-json-api/django-rest-framework-json-api/blob/main/docs/usage.md#2025-04-21_snippet_32\n\nLANGUAGE: text\nCODE:\n```\n$ ./manage.py generateschema --generator_class rest_framework_json_api.schemas.openapi.SchemaGenerator\n```\n\n----------------------------------------\n\nTITLE: Setting Up Related Serializers for JSON:API Related Resources\nDESCRIPTION: Configuring a serializer with related_serializers to handle related resource endpoints. This defines which serializers should be used for each related resource type.\nSOURCE: https://github.com/django-json-api/django-rest-framework-json-api/blob/main/docs/usage.md#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nclass OrderSerializer(serializers.HyperlinkedModelSerializer):\n    ...\n    related_serializers = {\n        'customer': 'example.serializers.CustomerSerializer',\n        'line_items': 'example.serializers.LineItemSerializer'\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring ResourceRelatedField with Hyperlinks in JSON:API\nDESCRIPTION: Implementation of ResourceRelatedField with hyperlink support for JSON:API relationship objects. This example shows how to configure related links and self links using specific view names and URL parameters.\nSOURCE: https://github.com/django-json-api/django-rest-framework-json-api/blob/main/docs/usage.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom rest_framework_json_api import serializers\nfrom rest_framework_json_api.relations import ResourceRelatedField\n\nfrom myapp.models import Order, LineItem, Customer\n\n\nclass OrderSerializer(serializers.HyperlinkedModelSerializer):\n    class Meta:\n        model = Order\n\n    line_items = ResourceRelatedField(\n        queryset=LineItem.objects,\n        many=True,\n        related_link_view_name='order-lineitems-list',\n        related_link_url_kwarg='order_pk',\n        self_link_view_name='order_relationships'\n    )\n\n    customer = ResourceRelatedField(\n        queryset=Customer.objects,\n        related_link_view_name='order-customer-detail',\n        related_link_url_kwarg='order_pk',\n        self_link_view_name='order-relationships'\n    )\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic ResourceRelatedField in Django REST Framework JSON:API\nDESCRIPTION: Example showing how to use ResourceRelatedField for representing relationships in a JSON:API compliant serializer. The field handles both one-to-many and many-to-many relationships with proper queryset configuration.\nSOURCE: https://github.com/django-json-api/django-rest-framework-json-api/blob/main/docs/usage.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom rest_framework_json_api import serializers\nfrom rest_framework_json_api.relations import ResourceRelatedField\n\nfrom myapp.models import Order, LineItem, Customer\n\n\nclass OrderSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Order\n\n    line_items = ResourceRelatedField(\n        queryset=LineItem.objects,\n        many=True  # necessary for M2M fields & reverse FK fields\n    )\n\n    customer = ResourceRelatedField(\n        queryset=Customer.objects  # queryset argument is required\n    )                              # except when read_only=True\n```\n\n----------------------------------------\n\nTITLE: Extending OAS Schema with Custom SchemaGenerator in Python\nDESCRIPTION: This example demonstrates how to extend the OAS schema document by subclassing SchemaGenerator and overriding the get_schema method to add custom info and servers objects to the OpenAPI specification.\nSOURCE: https://github.com/django-json-api/django-rest-framework-json-api/blob/main/docs/usage.md#2025-04-21_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nfrom rest_framework_json_api.schemas.openapi import SchemaGenerator as JSONAPISchemaGenerator\n\n\nclass MySchemaGenerator(JSONAPISchemaGenerator):\n    \"\"\"\n    Describe my OAS schema info in detail (overriding what DRF put in) and list the servers where it can be found.\n    \"\"\"\n    def get_schema(self, request, public):\n        schema = super().get_schema(request, public)\n        schema['info'] = {\n            'version': '1.0',\n            'title': 'my demo API',\n            'description': 'A demonstration of [OAS 3.0](https://www.openapis.org)',\n            'contact': {\n                'name': 'my name'\n            },\n            'license': {\n                'name': 'BSD 2 clause',\n                'url': 'https://github.com/django-json-api/django-rest-framework-json-api/blob/main/LICENSE',\n            }\n        }\n        schema['servers'] = [\n            {'url': 'http://localhost/v1', 'description': 'local docker'},\n            {'url': 'http://localhost:8000/v1', 'description': 'local dev'},\n            {'url': 'https://api.example.com/v1', 'description': 'demo server'},\n            {'url': '{serverURL}', 'description': 'provide your server URL',\n             'variables': {'serverURL': {'default': 'http://localhost:8000/v1'}}}\n        ]\n        return schema\n```\n\n----------------------------------------\n\nTITLE: Overriding Resource Object ID in Django REST Framework JSON:API Serializer\nDESCRIPTION: Example of overriding the default resource identifier (primary key) by defining a custom id field on a serializer, allowing the use of other model fields as resource identifiers.\nSOURCE: https://github.com/django-json-api/django-rest-framework-json-api/blob/main/docs/usage.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass UserSerializer(serializers.ModelSerializer):\n    id = serializers.CharField(source='email')\n    name = serializers.CharField()\n\n    class Meta:\n        model = User\n```\n\n----------------------------------------\n\nTITLE: Creating Custom ResourceRelatedField in Python\nDESCRIPTION: Example demonstrating how to override resource identifiers on related fields by creating a custom ResourceRelatedField. This allows customizing how relationship IDs are determined.\nSOURCE: https://github.com/django-json-api/django-rest-framework-json-api/blob/main/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass CustomResourceRelatedField(relations.ResourceRelatedField):\n    def get_resource_id(self, value):\n        return value.name\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Custom ID Serializer in Python\nDESCRIPTION: Example showing how to override the resource ID by defining an 'id' field on a serializer. This allows using a different field as the resource identifier instead of the default primary key.\nSOURCE: https://github.com/django-json-api/django-rest-framework-json-api/blob/main/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass CustomIdSerializer(serializers.Serializer):\n    id = serializers.CharField(source='name')\n    body = serializers.CharField()\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Pagination Classes in Python for Django REST Framework\nDESCRIPTION: This snippet demonstrates how to create custom pagination classes to retain deprecated values for PageNumberPagination and LimitOffsetPagination in Django REST Framework JSON API. It overrides default query parameters and limits.\nSOURCE: https://github.com/django-json-api/django-rest-framework-json-api/blob/main/CHANGELOG.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass CustomPageNumberPagination(PageNumberPagination):\n  page_query_param = \"page\"\n  page_size_query_param = \"page_size\"\n\nclass CustomLimitOffsetPagination(LimitOffsetPagination):\n  max_limit = None\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Pattern for Related Fields with Dashes in Django\nDESCRIPTION: Example showing how to configure a URL pattern that supports dasherized related field names in Django. This is necessary when using the JSON_API_FORMAT_RELATED_LINKS setting with dasherize formatting.\nSOURCE: https://github.com/django-json-api/django-rest-framework-json-api/blob/main/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nurl(r'^orders/(?P<pk>[^/.]+)/(?P<related_field>[-\\w]+)/$',\n    OrderViewSet.as_view({'get': 'retrieve_related'}),\n    name='order-related'),\n```\n\n----------------------------------------\n\nTITLE: Adding Django REST Framework JSON:API to Installed Apps\nDESCRIPTION: Django settings.py configuration snippet showing how to add rest_framework_json_api to the INSTALLED_APPS setting, which should be placed after the rest_framework entry.\nSOURCE: https://github.com/django-json-api/django-rest-framework-json-api/blob/main/README.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nINSTALLED_APPS = [\n    ...\n    'rest_framework',\n    'rest_framework_json_api',\n    ...\n]\n```\n\n----------------------------------------\n\nTITLE: Setting Resource Name on a View in Django REST Framework JSON:API\nDESCRIPTION: Example of manually setting the resource identifier object type by defining a resource_name property on a view class, which overrides the default resource naming.\nSOURCE: https://github.com/django-json-api/django-rest-framework-json-api/blob/main/docs/usage.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass Me(generics.GenericAPIView):\n    \"\"\"\n    Current user's identity endpoint.\n\n    GET /me\n    \"\"\"\n    resource_name = 'users'\n    serializer_class = identity_serializers.IdentitySerializer\n    allowed_methods = ['GET']\n    permission_classes = (permissions.IsAuthenticated, )\n```\n\n----------------------------------------\n\nTITLE: Installing Django REST Framework JSON:API Using Pip\nDESCRIPTION: Commands for installing the djangorestframework-jsonapi package using pip, including options for installing with optional dependencies for django-filter, django-polymorphic, and openapi integration.\nSOURCE: https://github.com/django-json-api/django-rest-framework-json-api/blob/main/README.rst#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ pip install djangorestframework-jsonapi\n$ # for optional package integrations\n$ pip install djangorestframework-jsonapi['django-filter']\n$ pip install djangorestframework-jsonapi['django-polymorphic']\n$ pip install djangorestframework-jsonapi['openapi']\n```\n\n----------------------------------------\n\nTITLE: Installing Django REST Framework JSON:API From Source\nDESCRIPTION: Commands for installing the djangorestframework-jsonapi package directly from the GitHub repository source code.\nSOURCE: https://github.com/django-json-api/django-rest-framework-json-api/blob/main/README.rst#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ git clone https://github.com/django-json-api/django-rest-framework-json-api.git\n$ cd django-rest-framework-json-api\n$ pip install -e .\n```\n\n----------------------------------------\n\nTITLE: Running the Example App for Django REST Framework JSON:API\nDESCRIPTION: Shell commands for setting up and running the example application included with the package, including cloning the repository, installing dependencies, migrating the database, loading fixture data, and starting the development server.\nSOURCE: https://github.com/django-json-api/django-rest-framework-json-api/blob/main/README.rst#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n$ git clone https://github.com/django-json-api/django-rest-framework-json-api.git\n$ cd django-rest-framework-json-api\n$ pip install -Ur requirements.txt\n$ django-admin migrate --settings=example.settings --pythonpath .\n$ django-admin loaddata drf_example --settings=example.settings --pythonpath .\n$ django-admin runserver --settings=example.settings --pythonpath .\n```\n\n----------------------------------------\n\nTITLE: Displaying Standard Django REST Framework JSON Response Format\nDESCRIPTION: Shows the default JSON response format from Django REST framework without JSON:API formatting. This illustrates the standard structure with count, pagination links, and results containing model data.\nSOURCE: https://github.com/django-json-api/django-rest-framework-json-api/blob/main/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"count\": 20,\n    \"next\": \"https://example.com/api/1.0/identities/?page=3\",\n    \"previous\": \"https://example.com/api/1.0/identities/?page=1\",\n    \"results\": [{\n        \"id\": 3,\n        \"username\": \"john\",\n        \"full_name\": \"John Coltrane\"\n    }]\n}\n```\n\n----------------------------------------\n\nTITLE: Running Tox for Multi-environment Testing\nDESCRIPTION: Command to run tests across all supported Python and Django versions using tox.\nSOURCE: https://github.com/django-json-api/django-rest-framework-json-api/blob/main/docs/CONTRIBUTING.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntox\n```\n\n----------------------------------------\n\nTITLE: Cloning Django REST Framework JSON:API Repository\nDESCRIPTION: Command to clone the project repository from GitHub to begin development.\nSOURCE: https://github.com/django-json-api/django-rest-framework-json-api/blob/main/docs/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/django-json-api/django-rest-framework-json-api.git\n```\n\n----------------------------------------\n\nTITLE: Specifying Dependencies for Django JSON API\nDESCRIPTION: This requirements file lists the necessary Python packages and their versions for the Django JSON API project. It includes django-filter, django-polymorphic (with special installation instructions), pyyaml, and uritemplate.\nSOURCE: https://github.com/django-json-api/django-rest-framework-json-api/blob/main/requirements/requirements-optionals.txt#2025-04-21_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\ndjango-filter==24.3\n# once next version has been released (>3.1.0) this\n# should be set to pinned version again\n# see https://github.com/django-polymorphic/django-polymorphic/pull/541\ndjango-polymorphic@git+https://github.com/django-polymorphic/django-polymorphic@master  # pyup: ignore\npyyaml==6.0.2\nuritemplate==4.1.1\n```\n\n----------------------------------------\n\nTITLE: Specifying Development Dependencies for Django REST Framework JSON API\nDESCRIPTION: This code snippet lists the development dependencies needed for the Django REST Framework JSON API project. It includes Black for code formatting (version 25.1.0), Flake8 for code linting (version 7.2.0), Flake8-bugbear for additional code quality checks (version 24.12.12), Flake8-isort for import order verification (version 6.1.2), and isort for automatically sorting imports (version 6.0.1).\nSOURCE: https://github.com/django-json-api/django-rest-framework-json-api/blob/main/requirements/requirements-codestyle.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nblack==25.1.0\nflake8==7.2.0\nflake8-bugbear==24.12.12\nflake8-isort==6.1.2\nisort==6.0.1\n```\n\n----------------------------------------\n\nTITLE: Specifying Twine Package Version\nDESCRIPTION: This line specifies the exact version of the Twine package to be used. Twine is a utility for publishing Python packages on PyPI. Version 6.1.0 is required for this project.\nSOURCE: https://github.com/django-json-api/django-rest-framework-json-api/blob/main/requirements/requirements-packaging.txt#2025-04-21_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\ntwine==6.1.0\n```\n\n----------------------------------------\n\nTITLE: Installing Django REST Framework JSON:API Dependencies\nDESCRIPTION: This code block specifies the package installation requirements, organized into categories. It installs the package itself in development mode (-e .) and imports specialized requirement files for different development purposes.\nSOURCE: https://github.com/django-json-api/django-rest-framework-json-api/blob/main/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e .\n-r requirements/requirements-optionals.txt\n-r requirements/requirements-testing.txt\n-r requirements/requirements-documentation.txt\n-r requirements/requirements-codestyle.txt\n-r requirements/requirements-packaging.txt\n```\n\n----------------------------------------\n\nTITLE: Specifying Dependencies for Django JSON API Example App\nDESCRIPTION: This code snippet lists the required Python packages and their versions for setting up a Django JSON API example application. It includes core frameworks, development tools, and utility libraries necessary for the project's functionality.\nSOURCE: https://github.com/django-json-api/django-rest-framework-json-api/blob/main/example/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: Plain Text\nCODE:\n```\n# Requirements specifically for the example app\nDjango>=1.11\ndjango-debug-toolbar\ndjango-polymorphic>=2.0\ndjangorestframework\ninflection\npluggy\npy\npyparsing\npytz\nsqlparse\ndjango-filter>=2.0\n```\n\n----------------------------------------\n\nTITLE: Defining Python Testing Dependencies with Version Specifications\nDESCRIPTION: A requirements file that specifies exact versions of Python testing packages. It includes factory-boy for test data generation, Faker for fake data creation, pytest and its plugins for test execution, and syrupy for snapshot testing.\nSOURCE: https://github.com/django-json-api/django-rest-framework-json-api/blob/main/requirements/requirements-testing.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nfactory-boy==3.3.3\nFaker==37.1.0\npytest==8.3.5\npytest-cov==6.1.1\npytest-django==4.11.1\npytest-factoryboy==2.7.0\nsyrupy==4.9.1\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Documentation Dependencies with pip\nDESCRIPTION: This requirements file lists three Python packages used for documentation: recommonmark for Markdown support, Sphinx for documentation generation, and sphinx_rtd_theme for themed documentation styling. Each package is pinned to a specific version to ensure consistent documentation builds.\nSOURCE: https://github.com/django-json-api/django-rest-framework-json-api/blob/main/requirements/requirements-documentation.txt#2025-04-21_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\nrecommonmark==0.7.1\nSphinx==8.1.3\nsphinx_rtd_theme==3.0.2\n```\n\n----------------------------------------\n\nTITLE: Using swagger-ui-watcher to Render Schema\nDESCRIPTION: Command line example demonstrating how to use swagger-ui-watcher to render and display the generated OpenAPI schema file.\nSOURCE: https://github.com/django-json-api/django-rest-framework-json-api/blob/main/docs/usage.md#2025-04-21_snippet_33\n\nLANGUAGE: text\nCODE:\n```\n$ swagger-ui-watcher myschema.yaml\n```\n\n----------------------------------------\n\nTITLE: Installing Optional Dependencies in Python\nDESCRIPTION: Commands to install optional dependencies for django-polymorphic and django-filter using pip.\nSOURCE: https://github.com/django-json-api/django-rest-framework-json-api/blob/main/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip install djangorestframework-jsonapi['django-polymorphic']\npip install djangorestframework-jsonapi['django-filter']\n```\n\n----------------------------------------\n\nTITLE: Setting Up Development Environment and Running Tests\nDESCRIPTION: Series of commands to create a virtual environment, install dependencies, format code, run linting, and execute tests.\nSOURCE: https://github.com/django-json-api/django-rest-framework-json-api/blob/main/docs/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Setup the virtual environment\npython3 -m venv env\nsource env/bin/activate\npip install -r requirements.txt\n\n# Format code\nblack .\n\n# Run linting\nflake8\n\n# Run tests\npytest\n```\n\n----------------------------------------\n\nTITLE: Enabling OpenAPI Schema Generation in Python\nDESCRIPTION: Command to install optional OpenAPI schema generation support using pip.\nSOURCE: https://github.com/django-json-api/django-rest-framework-json-api/blob/main/CHANGELOG.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npip install djangorestframework-jsonapi['openapi']\n```\n\n----------------------------------------\n\nTITLE: Creating and Publishing a Release\nDESCRIPTION: Commands for building, uploading to PyPI, and tagging a new release version.\nSOURCE: https://github.com/django-json-api/django-rest-framework-json-api/blob/main/docs/CONTRIBUTING.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython setup.py sdist bdist_wheel\ntwine upload dist/*\ngit tag -a v1.2.3 -m 'Release 1.2.3'\ngit push --tags\n```\n\n----------------------------------------\n\nTITLE: Creating toctree directive for API documentation in reStructuredText\nDESCRIPTION: A reStructuredText directive that creates a table of contents for the API documentation. The directive has a maximum depth of 4 levels and includes a reference to the autogenerated API documentation file.\nSOURCE: https://github.com/django-json-api/django-rest-framework-json-api/blob/main/docs/api.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :maxdepth: 4\n\n   apidoc/rest_framework_json_api\n```"
  }
]