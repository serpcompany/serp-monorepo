[
  {
    "owner": "epicweb-dev",
    "repo": "epic-stack",
    "content": "TITLE: Server-side Permission Verification in TypeScript\nDESCRIPTION: Server-side utility functions for checking user permissions and roles. Shows how to verify if a user has specific permissions or roles using requireUserWithPermission and requireUserWithRole functions.\nSOURCE: https://github.com/epicweb-dev/epic-stack/blob/main/docs/permissions.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// server-side only utilities\nconst userCanDeleteAnyUser = await requireUserWithPermission(\n\trequest,\n\t'delete:user:any',\n)\nconst userIsAdmin = await requireUserWithRole(request, 'admin')\n```\n\n----------------------------------------\n\nTITLE: Client-side Permission Checks in TypeScript\nDESCRIPTION: UI utility functions for checking user permissions and roles in the frontend. Demonstrates how to verify user permissions and roles using userHasPermission and userHasRole hooks with the current user context.\nSOURCE: https://github.com/epicweb-dev/epic-stack/blob/main/docs/permissions.md#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// UI utilities\nconst user = useUser()\nconst userCanCreateTheirOwnNotes = userHasPermission(user, 'create:note:own')\nconst userIsUser = userHasRole(user, 'user')\n```\n\n----------------------------------------\n\nTITLE: Implementing Cached API Requests with Cachified in TypeScript\nDESCRIPTION: Demonstrates how to implement caching for external API requests using the cachified utility with SQLite cache. The example shows caching Tito API event data with configurable TTL and stale-while-revalidate settings.\nSOURCE: https://github.com/epicweb-dev/epic-stack/blob/main/docs/caching.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { cachified, cache } from '#app/utils/cache.server.ts'\nimport { type Timings } from '#app/utils/timing.server.ts'\n\nconst eventSchema = z.object({\n\t/* the schema for events */\n})\n\nexport async function getScheduledEvents({\n\ttimings,\n}: {\n\ttimings?: Timings\n} = {}) {\n\tconst scheduledEvents = await cachified({\n\t\tkey: 'tito:scheduled-events',\n\t\tcache,\n\t\ttimings,\n\t\tgetFreshValue: () => {\n\t\t\t// do a fetch request to the tito API and stuff here\n\t\t\treturn [\n\t\t\t\t/* the events you got from tito */\n\t\t\t]\n\t\t},\n\t\tcheckValue: eventSchema.array(),\n\t\t// Time To Live (ttl) in milliseconds: the cached value is considered valid for 24 hours\n\t\tttl: 1000 * 60 * 60 * 24,\n\t\t// Stale While Revalidate (swr) in milliseconds: if the cached value is less than 30 days\n\t\t// expired, return it while fetching a fresh value in the background\n\t\tstaleWhileRevalidate: 1000 * 60 * 60 * 24 * 30,\n\t})\n\treturn scheduledEvents\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Epic Stack Project with npx\nDESCRIPTION: Command to create a new Epic Stack project using npx. This will prompt for a project name and start the setup process.\nSOURCE: https://github.com/epicweb-dev/epic-stack/blob/main/docs/getting-started.md#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx epicli new <project-name>\n```\n\n----------------------------------------\n\nTITLE: Implementing Server Timing in Epic Stack Route Handler\nDESCRIPTION: Demonstrates the complete implementation of server timing in a route loader, including setup, function timing, header creation, and header sending. The code shows how to measure database query performance for user and notes retrieval.\nSOURCE: https://github.com/epicweb-dev/epic-stack/blob/main/docs/server-timing.md#2025-04-12_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n\tcombineServerTimings,\n\tmakeTimings,\n\ttime,\n} from '#app/utils/timing.server.ts'\nimport { type Route } from './+types/notes.ts'\n\nexport async function loader({ params }: Route.LoaderArgs) {\n\tconst timings = makeTimings('notes loader') // <-- 1. Setup Timings\n\t// 2. Time functions\n\tconst owner = await time(\n\t\t() =>\n\t\t\tprisma.user.findUnique({\n\t\t\t\twhere: {\n\t\t\t\t\tusername: params.username,\n\t\t\t\t},\n\t\t\t\tselect: {\n\t\t\t\t\tid: true,\n\t\t\t\t\tusername: true,\n\t\t\t\t\tname: true,\n\t\t\t\t\timageId: true,\n\t\t\t\t},\n\t\t\t}),\n\t\t{ timings, type: 'find user' },\n\t)\n\tif (!owner) {\n\t\tthrow new Response('Not found', { status: 404 })\n\t}\n\t// 2. Time functions\n\tconst notes = await time(\n\t\t() =>\n\t\t\tprisma.note.findMany({\n\t\t\t\twhere: {\n\t\t\t\t\townerId: owner.id,\n\t\t\t\t},\n\t\t\t\tselect: {\n\t\t\t\t\tid: true,\n\t\t\t\t\ttitle: true,\n\t\t\t\t},\n\t\t\t}),\n\t\t{ timings, type: 'find notes' },\n\t)\n\treturn json(\n\t\t{ owner, notes },\n\t\t{ headers: { 'Server-Timing': timings.toString() } }, // <-- 3. Create headers\n\t)\n}\n\n// We have a general headers handler to save you from boilerplating.\nexport const headers: HeadersFunction = pipeHeaders\n// this is basically what it does though\nexport const headers: Route.HeadersFunction = ({\n\tloaderHeaders,\n\tparentHeaders,\n}) => {\n\treturn {\n\t\t'Server-Timing': combineServerTimings(parentHeaders, loaderHeaders), // <-- 4. Send headers\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Redirecting with Toast Notification in Epic Stack\nDESCRIPTION: Uses redirectWithToast to navigate to a URL while displaying a notification message. The toast will show whether a note was updated or created.\nSOURCE: https://github.com/epicweb-dev/epic-stack/blob/main/docs/toasts.md#2025-04-12_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nreturn redirectWithToast(`/users/${note.owner.username}/notes/${note.id}`, {\n\tdescription: id ? 'Note updated' : 'Note created',\n})\n```\n\n----------------------------------------\n\nTITLE: Generating Dynamic Sitemap Entries for Blog Posts in Remix\nDESCRIPTION: This code demonstrates how to customize sitemap.xml entries for blog routes by implementing the getSitemapEntries function in the route's handle export. It uses serverOnly$ from vite-env-only/macros to ensure the database query runs only on the server.\nSOURCE: https://github.com/epicweb-dev/epic-stack/blob/main/docs/seo.md#2025-04-12_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// routes/blog/_layout.tsx\nimport { type SEOHandle } from '@nasa-gcn/remix-seo'\nimport { serverOnly$ } from 'vite-env-only/macros'\n\nexport const handle: SEOHandle = {\n\tgetSitemapEntries: serverOnly$(async (request) => {\n\t\tconst blogs = await db.blog.findMany()\n\t\treturn blogs.map((blog) => {\n\t\t\treturn { route: `/blog/${blog.slug}`, priority: 0.7 }\n\t\t})\n\t}),\n}\n```\n\n----------------------------------------\n\nTITLE: Running Initial Setup for Epic Stack Project\nDESCRIPTION: Command to run the initial setup script for an Epic Stack project. This should be executed after creating the project and changing to its directory.\nSOURCE: https://github.com/epicweb-dev/epic-stack/blob/main/docs/getting-started.md#2025-04-12_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpm run setup\n```\n\n----------------------------------------\n\nTITLE: Redirecting Non-www Traffic to www Subdomain in Express\nDESCRIPTION: This middleware redirects root domain traffic to the www subdomain. It checks if the host starts with 'www.' and redirects if it doesn't. This is useful for maintaining consistent domain structure.\nSOURCE: https://github.com/epicweb-dev/epic-stack/blob/main/docs/redirects.md#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\napp.use((req, res, next) => {\n\tconst host = getHost(req)\n\tif (!host.startsWith('www.')) {\n\t\treturn res.redirect(301, `https://www.${host}${req.url}`)\n\t} else {\n\t\tnext()\n\t}\n})\n```\n\n----------------------------------------\n\nTITLE: Seeding Production Database with Custom Data\nDESCRIPTION: Series of commands that demonstrate how to seed a production database by creating and testing data locally, then generating SQL for migration. Covers creating a local seed database, running migrations, and generating SQL dump files.\nSOURCE: https://github.com/epicweb-dev/epic-stack/blob/main/docs/database.md#2025-04-12_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncp prisma/seed.ts ./prod-seed.local.ts\n```\n\nLANGUAGE: sh\nCODE:\n```\nDATABASE_URL=file:./seed.local.db npx prisma migrate reset --skip-seed --force\n```\n\nLANGUAGE: sh\nCODE:\n```\nDATABASE_URL=file:./seed.local.db npx tsx ./prod-seed.local.ts\n```\n\nLANGUAGE: sh\nCODE:\n```\nsqlite3 ./prisma/seed.local.db .dump > seed.local.sql\n```\n\nLANGUAGE: sh\nCODE:\n```\nfly ssh console -C \"npx prisma migrate reset --skip-seed --force\" --app [YOUR_APP_NAME]\n```\n\nLANGUAGE: sh\nCODE:\n```\nsqlite3 seed.db .dump > seed.sql\n```\n\nLANGUAGE: sh\nCODE:\n```\nsqlite3 /tmp/data.db < seed.sql\n```\n\nLANGUAGE: sh\nCODE:\n```\nlitefs import -name sqlite.db /tmp/data.db\n```\n\n----------------------------------------\n\nTITLE: Redirecting www Traffic to Non-www Domain in Express\nDESCRIPTION: This middleware redirects www subdomain traffic to the root domain. It checks if the host starts with 'www.' and removes it if present. This is an alternative to the previous snippet for different domain structuring preferences.\nSOURCE: https://github.com/epicweb-dev/epic-stack/blob/main/docs/redirects.md#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\napp.use((req, res, next) => {\n\tconst host = getHost(req)\n\tif (host.startsWith('www.')) {\n\t\treturn res.redirect(301, `https://${host.slice(4)}${req.url}`)\n\t} else {\n\t\tnext()\n\t}\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing RBAC Model with Enhanced Permissions in Prisma\nDESCRIPTION: This snippet demonstrates the new RBAC implementation in Prisma schema. It defines more detailed Permission and Role models, allowing for fine-grained access control based on actions, entities, and access levels.\nSOURCE: https://github.com/epicweb-dev/epic-stack/blob/main/docs/decisions/028-permissions-rbac.md#2025-04-12_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Permission {\n  id          String @id @default(cuid())\n  action      String // e.g. create, read, update, delete\n  entity      String // e.g. note, user, etc.\n  access      String // e.g. own or any\n  description String @default(\"\")\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  roles Role[]\n\n  @@unique([action, entity, access])\n}\n\nmodel Role {\n  id          String @id @default(cuid())\n  name        String @unique\n  description String @default(\"\")\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  users       User[]\n  permissions Permission[]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing HTTP to HTTPS Redirect in Express\nDESCRIPTION: This middleware forces all traffic to HTTPS for security reasons. It checks the X-Forwarded-Proto header and redirects if the protocol is HTTP. This doesn't affect localhost.\nSOURCE: https://github.com/epicweb-dev/epic-stack/blob/main/docs/redirects.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napp.use((req, res, next) => {\n\tconst proto = req.get('X-Forwarded-Proto')\n\tconst host = getHost(req)\n\tif (proto === 'http') {\n\t\tres.set('X-Forwarded-Proto', 'https')\n\t\tres.redirect(`https://${host}${req.originalUrl}`)\n\t\treturn\n\t}\n\tnext()\n})\n```\n\n----------------------------------------\n\nTITLE: Authenticating in Playwright E2E Tests for Epic Stack\nDESCRIPTION: This code snippet demonstrates how to use a login fixture in Playwright E2E tests to authenticate a user without going through the login flow. The fixture creates a user, logs them in, and automatically deletes the user at the end of the test to keep the local database clean and tests isolated.\nSOURCE: https://github.com/epicweb-dev/epic-stack/blob/main/docs/testing.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntest('my test', async ({ page, login }) => {\n\tconst user = await login()\n\t// you are now logged in\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Toast Headers without Redirect in Epic Stack\nDESCRIPTION: Demonstrates using createToastHeaders directly when you don't need to redirect. This approach creates a JSON response with toast headers for displaying a success message.\nSOURCE: https://github.com/epicweb-dev/epic-stack/blob/main/docs/toasts.md#2025-04-12_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nreturn json(\n\t{ success: true },\n\t{\n\t\theaders: await createToastHeaders({\n\t\t\tdescription: 'Note updated',\n\t\t\ttype: 'success',\n\t\t}),\n\t},\n)\n```\n\n----------------------------------------\n\nTITLE: Epic Stack Route Configuration Example\nDESCRIPTION: Complete TSX route configuration showing how remix-flat-routes transforms the directory structure into actual React Router routes, including nested routes and dynamic parameters.\nSOURCE: https://github.com/epicweb-dev/epic-stack/blob/main/docs/routing.md#2025-04-12_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Routes>\n\t<Route file=\"root.tsx\">\n\t\t<Route path=\"forgot-password\" file=\"routes/_auth+/forgot-password.tsx\" />\n\t\t<Route path=\"login\" file=\"routes/_auth+/login.tsx\" />\n\t\t<Route path=\"logout\" file=\"routes/_auth+/logout.tsx\" />\n\t\t<Route path=\"onboarding\" file=\"routes/_auth+/onboarding.tsx\" />\n\t\t<Route path=\"reset-password\" file=\"routes/_auth+/reset-password.tsx\" />\n\t\t<Route path=\"signup\" file=\"routes/_auth+/signup.tsx\" />\n\t\t<Route path=\"about\" file=\"routes/_marketing+/about.tsx\" />\n\t\t<Route index file=\"routes/_marketing+/index.tsx\" />\n\t\t<Route path=\"privacy\" file=\"routes/_marketing+/privacy.tsx\" />\n\t\t<Route path=\"support\" file=\"routes/_marketing+/support.tsx\" />\n\t\t<Route path=\"tos\" file=\"routes/_marketing+/tos.tsx\" />\n\t\t<Route path=\"admin/cache\" file=\"routes/admin+/cache.tsx\" />\n\t\t<Route\n\t\t\tpath=\"admin/cache/lru/:cacheKey\"\n\t\t\tfile=\"routes/admin+/cache_.lru.$cacheKey.ts\"\n\t\t/>\n\t\t<Route path=\"admin/cache/sqlite\" file=\"routes/admin+/cache_.sqlite.tsx\">\n\t\t\t<Route path=\":cacheKey\" file=\"routes/admin+/cache_.sqlite.$cacheKey.ts\" />\n\t\t</Route>\n\t\t<Route path=\"me\" file=\"routes/me.tsx\" />\n\t\t<Route\n\t\t\tpath=\"resources/delete-image\"\n\t\t\tfile=\"routes/resources+/delete-image.tsx\"\n\t\t/>\n\t\t<Route\n\t\t\tpath=\"resources/delete-note\"\n\t\t\tfile=\"routes/resources+/delete-note.tsx\"\n\t\t/>\n\t\t<Route\n\t\t\tpath=\"resources/file/:fileId\"\n\t\t\tfile=\"routes/resources+/file.$fileId.tsx\"\n\t\t/>\n\t\t<Route\n\t\t\tpath=\"resources/healthcheck\"\n\t\t\tfile=\"routes/resources+/healthcheck.tsx\"\n\t\t/>\n\t\t<Route\n\t\t\tpath=\"resources/image-upload\"\n\t\t\tfile=\"routes/resources+/image-upload.tsx\"\n\t\t/>\n\t\t<Route path=\"resources/login\" file=\"routes/resources+/login.tsx\" />\n\t\t<Route\n\t\t\tpath=\"resources/note-editor\"\n\t\t\tfile=\"routes/resources+/note-editor.tsx\"\n\t\t/>\n\t\t<Route path=\"resources/theme\" file=\"routes/resources+/theme.tsx\" />\n\t\t<Route path=\"settings/profile\" file=\"routes/settings+/profile.tsx\">\n\t\t\t<Route path=\"photo\" file=\"routes/settings+/profile.photo.tsx\" />\n\t\t</Route>\n\t\t<Route path=\"users/:username\" file=\"routes/users+/$username.tsx\" />\n\t\t<Route\n\t\t\tpath=\"users/:username/notes\"\n\t\t\tfile=\"routes/users+/$username_+/notes.tsx\"\n\t\t>\n\t\t\t<Route\n\t\t\t\tpath=\":noteId\"\n\t\t\t\tfile=\"routes/users+/$username_+/notes.$noteId.tsx\"\n\t\t\t/>\n\t\t\t<Route\n\t\t\t\tpath=\":noteId/edit\"\n\t\t\t\tfile=\"routes/users+/$username_+/notes.$noteId_.edit.tsx\"\n\t\t\t/>\n\t\t\t<Route path=\"new\" file=\"routes/users+/$username_+/notes.new.tsx\" />\n\t\t\t<Route index file=\"routes/users+/$username_+/notes.index.tsx\" />\n\t\t</Route>\n\t</Route>\n</Routes>\n```\n\n----------------------------------------\n\nTITLE: Defining Original Role and Permission Models in Prisma\nDESCRIPTION: This snippet shows the initial, limited role and permission model implementation in Prisma schema. It defines basic Role and Permission models with a many-to-many relationship.\nSOURCE: https://github.com/epicweb-dev/epic-stack/blob/main/docs/decisions/028-permissions-rbac.md#2025-04-12_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Role {\n  id   String @id @unique @default(cuid())\n  name String @unique\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  users       User[]\n  permissions Permission[]\n}\n\nmodel Permission {\n  id   String @id @unique @default(cuid())\n  name String @unique\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  roles Role[]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing and Authenticating with Fly CLI\nDESCRIPTION: Commands for installing Fly CLI and authenticating the user account.\nSOURCE: https://github.com/epicweb-dev/epic-stack/blob/main/docs/deployment.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly auth signup\n```\n\n----------------------------------------\n\nTITLE: Combining Toast Headers with Additional Headers in Epic Stack\nDESCRIPTION: Shows how to use combineHeaders utility to merge toast notification headers with other custom headers in a single response.\nSOURCE: https://github.com/epicweb-dev/epic-stack/blob/main/docs/toasts.md#2025-04-12_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nreturn json(\n\t{ success: true },\n\t{\n\t\theaders: combineHeaders(\n\t\t\tawait createToastHeaders({\n\t\t\t\ttoast: {\n\t\t\t\t\tdescription: 'Note updated',\n\t\t\t\t\ttype: 'success',\n\t\t\t\t},\n\t\t\t}),\n\t\t\t{ 'x-foo': 'bar' },\n\t\t),\n\t},\n)\n```\n\n----------------------------------------\n\nTITLE: Accessing User Timezone in Server and Client Code\nDESCRIPTION: Examples of how to access the user's timezone in different contexts. Server-side code can use getHints(request).timeZone while UI components can use the useHints().timeZone hook. The getDateTimeFormat utility provides a DateTimeFormat object in the user's timezone and locale.\nSOURCE: https://github.com/epicweb-dev/epic-stack/blob/main/docs/timezone.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngetHints(request).timeZone\n```\n\nLANGUAGE: javascript\nCODE:\n```\nuseHints().timeZone\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngetDateTimeFormat\n```\n\n----------------------------------------\n\nTITLE: Defining Database Schema for Image Storage with Prisma in Epic Stack\nDESCRIPTION: This Prisma schema defines how image metadata is stored in SQLite while actual image binaries live in Tigris. It creates UserImage and NoteImage models, each containing an objectKey field referencing the image in Tigris storage.\nSOURCE: https://github.com/epicweb-dev/epic-stack/blob/main/docs/image-storage.md#2025-04-12_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\nmodel UserImage {\n  id          String   @id @default(cuid())\n  userId      String\n  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n  objectKey   String   // Reference to the image in Tigris\n  createdAt   DateTime @default(now())\n  updatedAt   DateTime @updatedAt\n\n  @@index([userId])\n}\n\nmodel NoteImage {\n  id          String   @id @default(cuid())\n  noteId      String\n  note        Note     @relation(fields: [noteId], references: [id], onDelete: Cascade)\n  objectKey   String   // Reference to the image in Tigris\n  createdAt   DateTime @default(now())\n  updatedAt   DateTime @updatedAt\n\n  @@index([noteId])\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Connection Model for Multi-Provider Auth in Prisma\nDESCRIPTION: This Prisma schema defines the Connection model to support multiple authentication providers. It includes fields for provider name, provider ID, user association, and timestamps. Unique constraints ensure data integrity across connections and users.\nSOURCE: https://github.com/epicweb-dev/epic-stack/blob/main/docs/decisions/030-github-auth.md#2025-04-12_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Connection {\n  id           String @id @default(cuid())\n  providerName String\n  providerId   String @unique\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)\n  userId String\n\n  @@unique([providerName, providerId])\n  @@unique([providerId, userId])\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Content Security Policy in Epic Stack\nDESCRIPTION: Shows how to update the Content Security Policy directives in server/index.ts to allow additional image sources. This modification allows loading images from specified external domains while maintaining security.\nSOURCE: https://github.com/epicweb-dev/epic-stack/blob/main/docs/troubleshooting.md#2025-04-12_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n\t\tcontentSecurityPolicy: {\n\t\t\tdirectives: {\n\t\t\t\t'connect-src': [\n\t\t\t\t\tMODE === 'development' ? 'ws:' : null,\n\t\t\t\t\tprocess.env.SENTRY_DSN ? '*.sentry.io' : null,\n\t\t\t\t\t\"'self'\",\n\t\t\t\t].filter(Boolean),\n\t\t\t\t'font-src': [\"'self'\"],\n\t\t\t\t'frame-src': [\"'self'\"],\n-\t\t\t\t'img-src': [\"'self'\", 'data:'],\n+\t\t\t\t'img-src': [\"'self'\", 'data:', 'https://*.example.com']\n```\n\n----------------------------------------\n\nTITLE: Creating Fly Apps for Staging and Production\nDESCRIPTION: Commands to create separate Fly applications for staging and production environments.\nSOURCE: https://github.com/epicweb-dev/epic-stack/blob/main/docs/deployment.md#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfly apps create [YOUR_APP_NAME]\nfly apps create [YOUR_APP_NAME]-staging\n```\n\n----------------------------------------\n\nTITLE: Connecting to Production Database with Prisma Studio\nDESCRIPTION: Shows how to access the production database using Prisma Studio by running it via SSH in one terminal and proxying the connection in another terminal. Includes specific instructions for selecting the primary instance.\nSOURCE: https://github.com/epicweb-dev/epic-stack/blob/main/docs/database.md#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nfly ssh console -C \"npx prisma studio\" --app [YOUR_APP_NAME]\n```\n\nLANGUAGE: sh\nCODE:\n```\nfly proxy 5556:5555 --app [YOUR_APP_NAME]\n```\n\nLANGUAGE: sh\nCODE:\n```\nfly status --app [YOUR_APP_NAME]\n```\n\nLANGUAGE: sh\nCODE:\n```\nfly ssh console -C \"npx prisma studio\" -s --app [YOUR_APP_NAME]\n```\n\n----------------------------------------\n\nTITLE: Removing Trailing Slashes from URLs in Express\nDESCRIPTION: This middleware automatically removes trailing slashes from URLs. It's important for SEO as it prevents duplicate content issues. The code redirects URLs ending with '/' to their non-slash counterparts.\nSOURCE: https://github.com/epicweb-dev/epic-stack/blob/main/docs/redirects.md#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\napp.use((req, res, next) => {\n\tif (req.path.endsWith('/') && req.path.length > 1) {\n\t\tconst query = req.url.slice(req.path.length)\n\t\tconst safepath = req.path.slice(0, -1).replace(/\\/+/g, '/')\n\t\tres.redirect(301, safepath + query)\n\t} else {\n\t\tnext()\n\t}\n})\n```\n\n----------------------------------------\n\nTITLE: Scaling Multi-Region Deployment with Fly CLI\nDESCRIPTION: Demonstrates how to deploy multiple instances across different regions using fly scale count. The example creates two instances in the primary region (sjc) and one in a secondary region (ams).\nSOURCE: https://github.com/epicweb-dev/epic-stack/blob/main/docs/database.md#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nfly scale count 2 --region sjc\nfly scale count 1 --region ams\n```\n\n----------------------------------------\n\nTITLE: Removing Faulty Migration from Prisma Migrations Table\nDESCRIPTION: SQL query to remove a faulty migration entry from the _prisma_migrations table in the database.\nSOURCE: https://github.com/epicweb-dev/epic-stack/blob/main/docs/database.md#2025-04-12_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nDELETE FROM _prisma_migrations WHERE name = 'migration_name';\n```\n\n----------------------------------------\n\nTITLE: Setting Production Secrets with Fly CLI\nDESCRIPTION: Commands for setting API secrets in both production and staging environments using the fly secrets command. This example demonstrates how to set the TITO_API_SECRET for both the default app and a specific staging app.\nSOURCE: https://github.com/epicweb-dev/epic-stack/blob/main/docs/secrets.md#2025-04-12_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nfly secrets set TITO_API_SECRET=some_secret_value\nfly secrets set TITO_API_SECRET=some_secret_value --app [YOUR_STAGING_APP_NAME]\n```\n\n----------------------------------------\n\nTITLE: Epic Stack Directory Structure Example\nDESCRIPTION: Example directory structure showing the organization of routes in Epic Stack using remix-flat-routes convention, demonstrating how different route groups are organized using the '+' suffix for folder names.\nSOURCE: https://github.com/epicweb-dev/epic-stack/blob/main/docs/routing.md#2025-04-12_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\napp/routes\n├── _auth+\n│   ├── forgot-password.tsx\n│   ├── login.tsx\n│   ├── logout.tsx\n│   ├── onboarding.tsx\n│   ├── reset-password.tsx\n│   └── signup.tsx\n├── _marketing+\n│   ├── about.tsx\n│   ├── index.tsx\n│   ├── logos\n│   │   ├── logos.ts\n│   │   └── ...\n│   ├── privacy.tsx\n│   ├── support.tsx\n│   └── tos.tsx\n├── admin+\n│   ├── cache.tsx\n│   ├── cache_.lru.$cacheKey.ts\n│   ├── cache_.sqlite.$cacheKey.ts\n│   └── cache_.sqlite.tsx\n├── me.tsx\n├── resources+\n│   ├── delete-image.test.tsx\n│   ├── delete-image.tsx\n│   ├── delete-note.tsx\n│   ├── file.$fileId.tsx\n│   ├── healthcheck.tsx\n│   ├── image-upload.tsx\n│   ├── login.tsx\n│   ├── note-editor.tsx\n│   └── theme.tsx\n├── settings+\n│   ├── profile.photo.tsx\n│   └── profile.tsx\n└── users+\n    ├── $username.tsx\n    └── $username_+\n        ├── notes.$noteId.tsx\n        ├── notes.$noteId_.edit.tsx\n        ├── notes.index.tsx\n        ├── notes.new.tsx\n        └── notes.tsx\n\n9 directories, 54 files\n```\n\n----------------------------------------\n\nTITLE: Adding Icons with Sly CLI in Epic Stack\nDESCRIPTION: Command to add specific icons from Radix UI using the Sly CLI tool. This adds the 'trash', 'pencil-1', and 'avatar' icons to the './other/svg-icons' directory for use with the Epic Stack's icon system.\nSOURCE: https://github.com/epicweb-dev/epic-stack/blob/main/docs/icons.md#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx sly add @radix-ui/icons trash pencil-1 avatar\n```\n\n----------------------------------------\n\nTITLE: Checking Primary Instance Status with Fly CLI\nDESCRIPTION: Shows how to determine which instance is the primary by using the fly status command to view the role of each instance in your application.\nSOURCE: https://github.com/epicweb-dev/epic-stack/blob/main/docs/database.md#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nfly status --app [YOUR_APP_NAME]\n```\n\n----------------------------------------\n\nTITLE: Manual Setup Commands for Epic Stack Project in Bash\nDESCRIPTION: This script provides a series of commands to manually set up the Epic Stack project if the automated setup script fails. It includes cloning the repository, setting up environment variables, installing dependencies, running builds, setting up the database, and validating the setup.\nSOURCE: https://github.com/epicweb-dev/epic-stack/blob/main/CONTRIBUTING.md#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngit clone <your-fork>\ncd ./epic-stack\n\n# copy the .env.example to .env\n#   everything's mocked out during development so you shouldn't need to\n#   change any of these values unless you want to hit real environments.\ncp .env.example .env\n\n# Install deps\nnpm install\n\n# Run the build\nnpm run build\n\n# setup the database\nnpx prisma migrate deploy\n\n# generate the prisma client\nnpx prisma generate --sql\n\n# Install playwright browsers\nnpm run test:e2e:install\n\n# run build, typecheck, linting\nnpm run validate\n```\n\n----------------------------------------\n\nTITLE: Excluding Routes from Sitemap in Remix\nDESCRIPTION: This code shows how to exclude specific routes from the sitemap.xml by returning null from the getSitemapEntries function in the route's handle export. It also demonstrates type importing from the sitemap generator module.\nSOURCE: https://github.com/epicweb-dev/epic-stack/blob/main/docs/seo.md#2025-04-12_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// in your routes/url-that-doesnt-need-sitemap\nimport { type SEOHandle } from '@nasa-gcn/remix-seo'\nimport { type Route } from './+types/sitemap[.]xml.ts'\n\nexport async function loader({ request }: Route.LoaderArgs) {\n\t/**/\n}\n\nexport const handle: SEOHandle = {\n\tgetSitemapEntries: () => null,\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub OAuth Environment Variables in Bash\nDESCRIPTION: This snippet shows the structure of environment variables needed for GitHub OAuth authentication in Epic Stack. It includes placeholders for the GitHub Client ID and Client Secret.\nSOURCE: https://github.com/epicweb-dev/epic-stack/blob/main/docs/authentication.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# some other secrets and env vars\n...\n\nGITHUB_CLIENT_ID=\"72fa***************a\"\nGITHUB_CLIENT_SECRET=\"b2c6d323b**************************eae016\"\n```\n\n----------------------------------------\n\nTITLE: Setting Fly Secrets for Session and Honeypot\nDESCRIPTION: Commands to set SESSION_SECRET and HONEYPOT_SECRET for both production and staging environments.\nSOURCE: https://github.com/epicweb-dev/epic-stack/blob/main/docs/deployment.md#2025-04-12_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nfly secrets set SESSION_SECRET=$(openssl rand -hex 32) HONEYPOT_SECRET=$(openssl rand -hex 32) --app [YOUR_APP_NAME]\nfly secrets set SESSION_SECRET=$(openssl rand -hex 32) HONEYPOT_SECRET=$(openssl rand -hex 32) --app [YOUR_APP_NAME]-staging\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Tigris S3-compatible Storage in Epic Stack\nDESCRIPTION: This snippet shows the required environment variables needed to configure Tigris for image storage in Epic Stack. These variables are automatically set when creating an Epic Stack project with Fly.io.\nSOURCE: https://github.com/epicweb-dev/epic-stack/blob/main/docs/image-storage.md#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nAWS_ACCESS_KEY_ID=\"mock-access-key\"\nAWS_SECRET_ACCESS_KEY=\"mock-secret-key\"\nAWS_REGION=\"auto\"\nAWS_ENDPOINT_URL_S3=\"https://fly.storage.tigris.dev\"\nBUCKET_NAME=\"mock-bucket\"\n```\n\n----------------------------------------\n\nTITLE: Exporting LiteFS Database Backup\nDESCRIPTION: Command to export a LiteFS database backup with a timestamp in the filename.\nSOURCE: https://github.com/epicweb-dev/epic-stack/blob/main/docs/database.md#2025-04-12_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nlitefs export -name sqlite.db /backups/backup-2023-10-10.db\n```\n\n----------------------------------------\n\nTITLE: Importing LiteFS Database Backup\nDESCRIPTION: Command to import a LiteFS database backup, restoring the database from a backup file.\nSOURCE: https://github.com/epicweb-dev/epic-stack/blob/main/docs/database.md#2025-04-12_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nlitefs import -name sqlite.db /backup-2023-10-10.db\n```\n\n----------------------------------------\n\nTITLE: Configuring Font CSS Variables\nDESCRIPTION: Defines custom font variables in the base Tailwind CSS layer.\nSOURCE: https://github.com/epicweb-dev/epic-stack/blob/main/docs/fonts.md#2025-04-12_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n@layer base {\n\t:root {\n\t\t--font-sans: <YourFont>;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading Database Backup from Fly.io Instance\nDESCRIPTION: Command to download a database backup file from a Fly.io instance using SFTP.\nSOURCE: https://github.com/epicweb-dev/epic-stack/blob/main/docs/database.md#2025-04-12_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nfly ssh sftp get /backups/backup-2023-10-10.db --app [YOUR_APP_NAME]\n```\n\n----------------------------------------\n\nTITLE: Configuring Font Variables with Fallback\nDESCRIPTION: Defines CSS variables for fonts including fallback configuration in Tailwind.\nSOURCE: https://github.com/epicweb-dev/epic-stack/blob/main/docs/fonts.md#2025-04-12_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n/* tailwind.css */\n@layer base {\n\t:root {\n\t\t--font-sans: <YourFont> <YourFontFallback>;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Running Tests After Updates\nDESCRIPTION: Commands to run unit and end-to-end tests to verify package updates haven't broken anything.\nSOURCE: https://github.com/epicweb-dev/epic-stack/blob/main/docs/managing-updates.md#2025-04-12_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpm run test -- run\nnpm run test:e2e:run\n```\n\n----------------------------------------\n\nTITLE: Font Fallback Configuration\nDESCRIPTION: Example of font-face declaration with metric overrides for fallback font.\nSOURCE: https://github.com/epicweb-dev/epic-stack/blob/main/docs/fonts.md#2025-04-12_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n@font-face {\n\tfont-family: 'NunitoSans Fallback';\n\tfont-style: normal;\n\tfont-weight: 200;\n\tsrc: local('Arial');\n\tascent-override: 103.02%;\n\tdescent-override: 35.97%;\n\tline-gap-override: 0%;\n\tsize-adjust: 98.13%;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Remote for Epic Stack in Bash\nDESCRIPTION: These commands set up the original repository as a remote called 'upstream' and configure the local main branch to track the upstream main branch. This allows contributors to keep their fork updated with the original repository.\nSOURCE: https://github.com/epicweb-dev/epic-stack/blob/main/CONTRIBUTING.md#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit remote add upstream https://github.com/epicweb-dev/epic-stack.git\ngit fetch upstream\ngit branch --set-upstream-to=upstream/main main\n```\n\n----------------------------------------\n\nTITLE: Configuring Node.js Version in package.json\nDESCRIPTION: Specifies the exact Node.js version for the project in package.json. Must use exact version number rather than version range as this is used by build-server.ts.\nSOURCE: https://github.com/epicweb-dev/epic-stack/blob/main/docs/managing-updates.md#2025-04-12_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"engines\": {\n\t\t\"node\": \"20.3.1\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Font Stylesheet in Root Component\nDESCRIPTION: Demonstrates how to import and configure font stylesheets in the root component of the application.\nSOURCE: https://github.com/epicweb-dev/epic-stack/blob/main/docs/fonts.md#2025-04-12_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// app/routes/root.tsx\nimport fontStyleSheetUrl from './styles/yourfont.css?url'\n```\n\nLANGUAGE: tsx\nCODE:\n```\n// app/routes/root.tsx\n...\n{ rel: 'preload', href: fontStyleSheetUrl, as: 'style' },\n{ rel: 'stylesheet', href: fontStyleSheetUrl },\n```\n\n----------------------------------------\n\nTITLE: Updating Node.js Version in Dockerfile\nDESCRIPTION: Shows how to update the Node.js version in the Dockerfile to match package.json configuration.\nSOURCE: https://github.com/epicweb-dev/epic-stack/blob/main/docs/managing-updates.md#2025-04-12_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n- FROM node:18-bookworm-slim as base\n+ FROM node:20.3.1-bookworm-slim as base\n```\n\n----------------------------------------\n\nTITLE: Extending Tailwind Font Configuration\nDESCRIPTION: Configures the font family in Tailwind configuration file by importing default theme and extending font settings.\nSOURCE: https://github.com/epicweb-dev/epic-stack/blob/main/docs/fonts.md#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport defaultTheme from 'tailwindcss/defaultTheme.js'\n// tailwind.config.ts\nextend: {\n\t...extendedTheme,\n\tfontFamily: {\n\t\tsans: ['var(--font-sans)', ...defaultTheme.fontFamily.sans],\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Font Static Assets\nDESCRIPTION: Sets up Express static file serving for font files with caching configuration.\nSOURCE: https://github.com/epicweb-dev/epic-stack/blob/main/docs/fonts.md#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// server/index.ts\n...\napp.use(\n   '/fonts',\n   // Can aggressively cache fonts as they don't change often\n   express.static('public/fonts', { immutable: true, maxAge: '1y' }),\n)\n```\n\n----------------------------------------\n\nTITLE: Commenting Out LiteFS Exec Commands\nDESCRIPTION: YAML configuration to comment out the exec section in litefs.yml, preventing automatic database migrations and app start.\nSOURCE: https://github.com/epicweb-dev/epic-stack/blob/main/docs/database.md#2025-04-12_snippet_10\n\nLANGUAGE: yml\nCODE:\n```\n# exec:\n#   - cmd: npx prisma migrate deploy\n#     if-candidate: true\n\n#   - cmd: npm start\n```\n\n----------------------------------------\n\nTITLE: Setting Resend API Keys for Production and Staging\nDESCRIPTION: Shell commands for setting up Resend API keys as secrets in both production and staging environments using Fly.io's secret management system.\nSOURCE: https://github.com/epicweb-dev/epic-stack/blob/main/docs/email.md#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nfly secrets set RESEND_API_KEY=\"re_blAh_blaHBlaHblahBLAhBlAh\" --app [YOUR_APP_NAME]\nfly secrets set RESEND_API_KEY=\"re_blAh_blaHBlaHblahBLAhBlAh\" --app [YOUR_APP_NAME]-staging\n```\n\n----------------------------------------\n\nTITLE: Committing Package Updates\nDESCRIPTION: Git commands to commit the package updates after successful testing.\nSOURCE: https://github.com/epicweb-dev/epic-stack/blob/main/docs/managing-updates.md#2025-04-12_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ngit add .\ngit commit -m \"Updated patch versions\"\n```\n\n----------------------------------------\n\nTITLE: Generating Font Metric Overrides\nDESCRIPTION: Example commands for generating font metric overrides using fontpie utility.\nSOURCE: https://github.com/epicweb-dev/epic-stack/blob/main/docs/fonts.md#2025-04-12_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx fontpie ./local/font/location.woff2 -w font-weight -s normal/italic -n YourFont\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx fontpie ./public/fonts/nunito-sans/nunito-sans-v12-latin_latin-ext-200.woff2 -w 200 -s normal -n NunitoSans\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx fontpie-from-css ./public/fonts/yourfont/yourfont.css\n```\n\n----------------------------------------\n\nTITLE: Building Remix App with Source Maps in Production\nDESCRIPTION: Example of building a Remix application with source maps enabled, showing the warning message that appears during build time regarding the exposure of server-side code.\nSOURCE: https://github.com/epicweb-dev/epic-stack/blob/main/docs/decisions/016-source-maps.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n> remix build --sourcemap\n\nBuilding Remix app in production mode...\n\n⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️\nYou have enabled source maps in production. This will make your server-side code visible to the public and is highly discouraged! If you insist, please ensure you are using environment variables for secrets and not hard-coding them into your source!\n⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️\n```\n\n----------------------------------------\n\nTITLE: Setting Sentry DSN Secret in Fly.io\nDESCRIPTION: Command to set the Sentry DSN as a secret in Fly.io for runtime environment variable use. This step is crucial for connecting your application to Sentry's monitoring services.\nSOURCE: https://github.com/epicweb-dev/epic-stack/blob/main/docs/monitoring.md#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nfly secrets set SENTRY_DSN=<your_dsn>\n```\n\n----------------------------------------\n\nTITLE: Installing Epic Stack CLI\nDESCRIPTION: This command installs and runs the Epic Stack CLI tool using npx. It allows users to quickly set up a new project using the Epic Stack.\nSOURCE: https://github.com/epicweb-dev/epic-stack/blob/main/README.md#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx epicli\n```\n\n----------------------------------------\n\nTITLE: Checking for NPM Package Updates\nDESCRIPTION: Command to list available updates for NPM packages, showing patch (green), minor (cyan), and major (red) version changes.\nSOURCE: https://github.com/epicweb-dev/epic-stack/blob/main/docs/managing-updates.md#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpx npm-check-updates\n```\n\n----------------------------------------\n\nTITLE: Updating NPM Patch Versions\nDESCRIPTION: Commands to update all patch versions of packages and verify the updates with tests.\nSOURCE: https://github.com/epicweb-dev/epic-stack/blob/main/docs/managing-updates.md#2025-04-12_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpx npm-check-updates -u --target patch\n...\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server for Epic Stack Project\nDESCRIPTION: Command to start the development server for an Epic Stack project. This runs the app in development mode, rebuilding assets on file changes.\nSOURCE: https://github.com/epicweb-dev/epic-stack/blob/main/docs/getting-started.md#2025-04-12_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server for Epic Stack in Bash\nDESCRIPTION: This command starts the development server for the Epic Stack project. After running this command, developers can access the project at http://localhost:3000.\nSOURCE: https://github.com/epicweb-dev/epic-stack/blob/main/CONTRIBUTING.md#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Skipping Setup Steps with Environment Variables\nDESCRIPTION: Command to initialize an Epic Stack project while skipping certain setup steps using environment variables. This allows for a more customized setup process.\nSOURCE: https://github.com/epicweb-dev/epic-stack/blob/main/docs/getting-started.md#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nSKIP_SETUP=true SKIP_FORMAT=true SKIP_DEPLOYMENT=true npx epicli new\n```\n\n----------------------------------------\n\nTITLE: Skipping Setup Steps on Windows\nDESCRIPTION: Windows-specific command to initialize an Epic Stack project while skipping certain setup steps. This uses the 'set' command to set environment variables before running npx.\nSOURCE: https://github.com/epicweb-dev/epic-stack/blob/main/docs/getting-started.md#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nset SKIP_SETUP=true && set SKIP_FORMAT=true && set SKIP_DEPLOYMENT=true && npx epicli new\n```\n\n----------------------------------------\n\nTITLE: Building and Running Docker Container\nDESCRIPTION: Commands for building and running the Docker container for local deployment.\nSOURCE: https://github.com/epicweb-dev/epic-stack/blob/main/docs/deployment.md#2025-04-12_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t epic-stack . -f other/Dockerfile --build-arg COMMIT_SHA=`git rev-parse --short HEAD`\n\nmkdir ~/litefs\n\ndocker run -d -p 8081:8081 -e SESSION_SECRET='somesecret' -e HONEYPOT_SECRET='somesecret' -e FLY='false' -v ~/litefs:/litefs epic-stack\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Entry Point Script\nDESCRIPTION: Shell script to be used as the Docker entry point for local deployment.\nSOURCE: https://github.com/epicweb-dev/epic-stack/blob/main/docs/deployment.md#2025-04-12_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/sh -ex\n\nnpx prisma migrate deploy\nsqlite3 /litefs/data/sqlite.db \"PRAGMA journal_mode = WAL;\"\nsqlite3 /litefs/data/cache.db \"PRAGMA journal_mode = WAL;\"\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Modifying Dockerfile for Local Deployment\nDESCRIPTION: Dockerfile modifications required for local deployment using Docker or Podman.\nSOURCE: https://github.com/epicweb-dev/epic-stack/blob/main/docs/deployment.md#2025-04-12_snippet_9\n\nLANGUAGE: dockerfile\nCODE:\n```\n# prepare for litefs\nVOLUME /litefs\nADD . .\n\nEXPOSE ${PORT}\nENTRYPOINT [\"/myapp/other/docker-entry-point.sh\"]\n```\n\n----------------------------------------\n\nTITLE: Deploying Locally Using Fly CLI\nDESCRIPTION: Command to deploy the application locally using Fly CLI.\nSOURCE: https://github.com/epicweb-dev/epic-stack/blob/main/docs/deployment.md#2025-04-12_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nfly deploy\n```\n\n----------------------------------------\n\nTITLE: Creating Tigris Object Storage\nDESCRIPTION: Commands to create Tigris object storage buckets for both production and staging environments.\nSOURCE: https://github.com/epicweb-dev/epic-stack/blob/main/docs/deployment.md#2025-04-12_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nfly storage create --app [YOUR_APP_NAME]\nfly storage create --app [YOUR_APP_NAME]-staging\n```\n\n----------------------------------------\n\nTITLE: Attaching Consul for Data Replication\nDESCRIPTION: Commands to attach Consul for managing primary instance data replication in both environments.\nSOURCE: https://github.com/epicweb-dev/epic-stack/blob/main/docs/deployment.md#2025-04-12_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nfly consul attach --app [YOUR_APP_NAME]\nfly consul attach --app [YOUR_APP_NAME]-staging\n```\n\n----------------------------------------\n\nTITLE: Creating Persistent Volumes for Databases\nDESCRIPTION: Commands to create persistent volumes for SQLite databases in both staging and production environments.\nSOURCE: https://github.com/epicweb-dev/epic-stack/blob/main/docs/deployment.md#2025-04-12_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nfly volumes create data --region sjc --size 1 --app [YOUR_APP_NAME]\nfly volumes create data --region sjc --size 1 --app [YOUR_APP_NAME]-staging\n```\n\n----------------------------------------\n\nTITLE: Setting ALLOW_INDEXING Secret for Staging\nDESCRIPTION: Command to set ALLOW_INDEXING to false for the staging environment to prevent duplicate indexing.\nSOURCE: https://github.com/epicweb-dev/epic-stack/blob/main/docs/deployment.md#2025-04-12_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nfly secrets set ALLOW_INDEXING=false --app [YOUR_APP_NAME]-staging\n```\n\n----------------------------------------\n\nTITLE: Initializing Git Repository\nDESCRIPTION: Commands to initialize a Git repository and add a remote origin.\nSOURCE: https://github.com/epicweb-dev/epic-stack/blob/main/docs/deployment.md#2025-04-12_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit init\ngit remote add origin <ORIGIN_URL>\n```\n\n----------------------------------------\n\nTITLE: Uncommenting LiteFS Exec Commands\nDESCRIPTION: YAML configuration to uncomment the exec section in litefs.yml, re-enabling automatic database migrations and app start.\nSOURCE: https://github.com/epicweb-dev/epic-stack/blob/main/docs/database.md#2025-04-12_snippet_11\n\nLANGUAGE: yml\nCODE:\n```\nexec:\n  - cmd: npx prisma migrate deploy\n    if-candidate: true\n\n  - cmd: npm start\n```\n\n----------------------------------------\n\nTITLE: Establishing SFTP Session with Fly.io Instance\nDESCRIPTION: Command to start an SFTP session with a Fly.io instance for file transfers.\nSOURCE: https://github.com/epicweb-dev/epic-stack/blob/main/docs/database.md#2025-04-12_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nfly ssh sftp shell --app [YOUR_APP_NAME]\n```\n\n----------------------------------------\n\nTITLE: Creating Backup Directory in Fly.io Instance\nDESCRIPTION: Command to create a 'backups' directory in the Fly.io instance for storing database backups.\nSOURCE: https://github.com/epicweb-dev/epic-stack/blob/main/docs/database.md#2025-04-12_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nmkdir /backups\n```\n\n----------------------------------------\n\nTITLE: SSH into Fly.io Instance for Epic Stack\nDESCRIPTION: Command to establish an SSH connection to a Fly.io instance for an Epic Stack application.\nSOURCE: https://github.com/epicweb-dev/epic-stack/blob/main/docs/database.md#2025-04-12_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nfly ssh console --app [YOUR_APP_NAME]\n```"
  }
]