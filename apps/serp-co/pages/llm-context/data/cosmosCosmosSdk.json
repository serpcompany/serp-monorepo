[
  {
    "owner": "cosmos",
    "repo": "cosmos-sdk",
    "content": "TITLE: Complete Example of IndexedMap Implementation for Account Management\nDESCRIPTION: Full implementation showing how to create and use an IndexedMap for account management in Cosmos SDK. Includes index definition, keeper setup, and basic account operations with proper type handling.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/collections/README.md#2025-04-22_snippet_14\n\nLANGUAGE: go\nCODE:\n```\npackage docs\n\nimport (\n\t\"cosmossdk.io/collections\"\n\t\"cosmossdk.io/collections/indexes\"\n\tstoretypes \"cosmossdk.io/store/types\"\n\t\"github.com/cosmos/cosmos-sdk/codec\"\n\tsdk \"github.com/cosmos/cosmos-sdk/types\"\n\tauthtypes \"github.com/cosmos/cosmos-sdk/x/auth/types\"\n)\n\nvar AccountsNumberIndexPrefix = collections.NewPrefix(1)\n\ntype AccountsIndexes struct {\n\tNumber *indexes.Unique[uint64, sdk.AccAddress, authtypes.BaseAccount]\n}\n\nfunc (a AccountsIndexes) IndexesList() []collections.Index[sdk.AccAddress, authtypes.BaseAccount] {\n\treturn []collections.Index[sdk.AccAddress, authtypes.BaseAccount]{a.Number}\n}\n\nfunc NewAccountIndexes(sb *collections.SchemaBuilder) AccountsIndexes {\n\treturn AccountsIndexes{\n\t\tNumber: indexes.NewUnique(\n\t\t\tsb, AccountsNumberIndexPrefix, \"accounts_by_number\",\n\t\t\tcollections.Uint64Key, sdk.AccAddressKey,\n\t\t\tfunc(_ sdk.AccAddress, v authtypes.BaseAccount) (uint64, error) {\n\t\t\t\treturn v.AccountNumber, nil\n\t\t\t},\n\t\t),\n\t}\n}\n\nvar AccountsPrefix = collections.NewPrefix(0)\n\ntype Keeper struct {\n\tSchema   collections.Schema\n\tAccounts *collections.IndexedMap[sdk.AccAddress, authtypes.BaseAccount, AccountsIndexes]\n}\n\nfunc NewKeeper(storeKey *storetypes.KVStoreKey, cdc codec.BinaryCodec) Keeper {\n\tsb := collections.NewSchemaBuilder(sdk.OpenKVStore(storeKey))\n\treturn Keeper{\n\t\tAccounts: collections.NewIndexedMap(\n\t\t\tsb, AccountsPrefix, \"accounts\",\n\t\t\tsdk.AccAddressKey, codec.CollValue[authtypes.BaseAccount](cdc),\n\t\t\tNewAccountIndexes(sb),\n\t\t),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Working with IndexedMaps in Cosmos SDK - Complete Example\nDESCRIPTION: Extended example showing how to use IndexedMap for account management, including common operations like creating and removing accounts, retrieving by account number, and performing range queries on indexes.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/collections/README.md#2025-04-22_snippet_15\n\nLANGUAGE: go\nCODE:\n```\npackage docs\n\nimport (\n\t\"cosmossdk.io/collections\"\n\t\"cosmossdk.io/collections/indexes\"\n\tstoretypes \"cosmossdk.io/store/types\"\n\t\"github.com/cosmos/cosmos-sdk/codec\"\n\tsdk \"github.com/cosmos/cosmos-sdk/types\"\n\tauthtypes \"github.com/cosmos/cosmos-sdk/x/auth/types\"\n)\n\nvar AccountsNumberIndexPrefix = collections.NewPrefix(1)\n\ntype AccountsIndexes struct {\n\tNumber *indexes.Unique[uint64, sdk.AccAddress, authtypes.BaseAccount]\n}\n\nfunc (a AccountsIndexes) IndexesList() []collections.Index[sdk.AccAddress, authtypes.BaseAccount] {\n\treturn []collections.Index[sdk.AccAddress, authtypes.BaseAccount]{a.Number}\n}\n\nfunc NewAccountIndexes(sb *collections.SchemaBuilder) AccountsIndexes {\n\treturn AccountsIndexes{\n\t\tNumber: indexes.NewUnique(\n\t\t\tsb, AccountsNumberIndexPrefix, \"accounts_by_number\",\n\t\t\tcollections.Uint64Key, sdk.AccAddressKey,\n\t\t\tfunc(_ sdk.AccAddress, v authtypes.BaseAccount) (uint64, error) {\n\t\t\t\treturn v.AccountNumber, nil\n\t\t\t},\n\t\t),\n\t}\n}\n\nvar AccountsPrefix = collections.NewPrefix(0)\n\ntype Keeper struct {\n\tSchema   collections.Schema\n\tAccounts *collections.IndexedMap[sdk.AccAddress, authtypes.BaseAccount, AccountsIndexes]\n}\n\nfunc NewKeeper(storeKey *storetypes.KVStoreKey, cdc codec.BinaryCodec) Keeper {\n\tsb := collections.NewSchemaBuilder(sdk.OpenKVStore(storeKey))\n\treturn Keeper{\n\t\tAccounts: collections.NewIndexedMap(\n\t\t\tsb, AccountsPrefix, \"accounts\",\n\t\t\tsdk.AccAddressKey, codec.CollValue[authtypes.BaseAccount](cdc),\n\t\t\tNewAccountIndexes(sb),\n\t\t),\n\t}\n}\n\nfunc (k Keeper) CreateAccount(ctx sdk.Context, addr sdk.AccAddress) error {\n\tnextAccountNumber := k.getNextAccountNumber()\n\t\n\tnewAcc := authtypes.BaseAccount{\n\t\tAccountNumber: nextAccountNumber,\n\t\tSequence:      0,\n\t}\n\t\n\treturn k.Accounts.Set(ctx, addr, newAcc)\n}\n\nfunc (k Keeper) RemoveAccount(ctx sdk.Context, addr sdk.AccAddress) error {\n\treturn k.Accounts.Remove(ctx, addr)\n} \n\nfunc (k Keeper) GetAccountByNumber(ctx sdk.Context, accNumber uint64) (sdk.AccAddress, authtypes.BaseAccount, error) {\n\taccAddress, err := k.Accounts.Indexes.Number.MatchExact(ctx, accNumber)\n\tif err != nil {\n\t\treturn nil, authtypes.BaseAccount{}, err\n\t}\n\t\n\tacc, err := k.Accounts.Get(ctx, accAddress)\n\treturn accAddress, acc, nil\n}\n\nfunc (k Keeper) GetAccountsByNumber(ctx sdk.Context, startAccNum, endAccNum uint64) ([]authtypes.BaseAccount, error) {\n\trng := new(collections.Range[uint64]).\n\t\tStartInclusive(startAccNum).\n\t\tEndInclusive(endAccNum)\n\t\n\titer, err := k.Accounts.Indexes.Number.Iterate(ctx, rng)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\t\n\treturn indexes.CollectValues(ctx, k.Accounts, iter)\n}\n\n\nfunc (k Keeper) getNextAccountNumber() uint64 {\n\treturn 0\n}\n```\n\n----------------------------------------\n\nTITLE: SendKeeper Interface Definition - Go\nDESCRIPTION: Defines the SendKeeper interface that facilitates coin transfers between accounts without creating new coins. Includes methods for managing send restrictions, transferring coins, and handling parameters.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/bank/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ntype SendKeeper interface {\n    ViewKeeper\n\n    AppendSendRestriction(restriction SendRestrictionFn)\n    PrependSendRestriction(restriction SendRestrictionFn)\n    ClearSendRestriction()\n\n    InputOutputCoins(ctx context.Context, input types.Input, outputs []types.Output) error\n    SendCoins(ctx context.Context, fromAddr, toAddr sdk.AccAddress, amt sdk.Coins) error\n\n    GetParams(ctx context.Context) types.Params\n    SetParams(ctx context.Context, params types.Params) error\n\n    IsSendEnabledDenom(ctx context.Context, denom string) bool\n    SetSendEnabled(ctx context.Context, denom string, value bool)\n    SetAllSendEnabled(ctx context.Context, sendEnableds []*types.SendEnabled)\n    DeleteSendEnabled(ctx context.Context, denom string)\n    IterateSendEnabledEntries(ctx context.Context, cb func(denom string, sendEnabled bool) (stop bool))\n    GetAllSendEnabledEntries(ctx context.Context) []types.SendEnabled\n\n    IsSendEnabledCoin(ctx context.Context, coin sdk.Coin) bool\n    IsSendEnabledCoins(ctx context.Context, coins ...sdk.Coin) error\n\n    BlockedAddr(addr sdk.AccAddress) bool\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Keeper Struct in Cosmos SDK (Go)\nDESCRIPTION: This Go code snippet shows the typical structure for defining a Keeper in a module. It includes defining external keepers, store keys, codec, and an authority attribute. Dependencies include external keeper interfaces that reduce module dependencies and facilitate easier maintenance.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-modules/06-keeper.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype Keeper struct {\n    // External keepers, if any\n\n    // Store key(s)\n\n    // codec\n\n    // authority \n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Getter Method for Keeper in Cosmos SDK (Go)\nDESCRIPTION: This Go code snippet illustrates how to implement a getter method in a Keeper. The method retrieves a value from the store using the provided context and key, unmarshals the value using the codec, and returns it. Dependencies include a correctly initialized storeKey and codec.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-modules/06-keeper.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc (k Keeper) Get(ctx context.Context, key string) returnType\n```\n\n----------------------------------------\n\nTITLE: Storing Single Configuration Item with collections.Item in Go\nDESCRIPTION: Presents a Go `Keeper` using `collections.Item` to store a single instance of staking parameters (`stakingtypes.Params`). Provides functions for updating (`UpdateParams`) and retrieving (`GetParams`) this singleton item, utilizing `collections`, `storetypes`, `codec`, `sdk`, and `stakingtypes` packages. This collection type doesn't require a key codec as it only stores one value under a fixed key (the prefix).\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/collections/README.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n```go\npackage collections\n\nimport (\n\t\"cosmossdk.io/collections\"\n\tstoretypes \"cosmossdk.io/store/types\"\n\t\"github.com/cosmos/cosmos-sdk/codec\"\n\tsdk \"github.com/cosmos/cosmos-sdk/types\"\n\tstakingtypes \"cosmossdk.io/x/staking/types\"\n)\n\nvar ParamsPrefix = collections.NewPrefix(0)\n\ntype Keeper struct {\n\tSchema        collections.Schema\n\tParams collections.Item[stakingtypes.Params]\n}\n\nfunc NewKeeper(storeKey *storetypes.KVStoreKey, cdc codec.BinaryCodec) Keeper {\n\tsb := collections.NewSchemaBuilder(sdk.OpenKVStore(storeKey))\n\treturn Keeper{\n\t\tParams: collections.NewItem(sb, ParamsPrefix, \"params\", codec.CollValue[stakingtypes.Params](cdc)),\n\t}\n}\n\nfunc (k Keeper) UpdateParams(ctx sdk.Context, params stakingtypes.Params) error {\n\terr := k.Params.Set(ctx, params)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}\n\nfunc (k Keeper) GetParams(ctx sdk.Context) (stakingtypes.Params, error) {\n\treturn k.Params.Get(ctx)\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Submitting and Managing Proposals\nDESCRIPTION: Commands for submitting, withdrawing, voting on, and executing proposals\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/group/README.md#2025-04-22_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nsimd tx group submit-proposal [group-policy-account] [proposer[,proposer]*] [msg_tx_json_file] [metadata] [flags]\nsimd tx group withdraw-proposal [proposal-id] [group-policy-admin-or-proposer]\nsimd tx group vote [proposal-id] [voter] [choice] [metadata] [flags]\nsimd tx group exec [proposal-id] [flags]\n```\n\n----------------------------------------\n\nTITLE: Defining GroupMember and Member Structures in Protobuf\nDESCRIPTION: Defines the GroupMember message that links a member to a group, and the Member message that contains address, weight, and metadata for an individual member. The weight represents voting power within the group.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-042-group-module.md#2025-04-22_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage GroupMember {\n\n    // group_id is the unique ID of the group.\n    uint64 group_id = 1;\n\n    // member is the member data.\n    Member member = 2;\n}\n\n// Member represents a group member with an account address,\n// non-zero weight and metadata.\nmessage Member {\n\n    // address is the member's account address.\n    string address = 1;\n\n    // weight is the member's voting weight that should be greater than 0.\n    string weight = 2;\n\n    // metadata is any arbitrary metadata to attached to the member.\n    bytes metadata = 3;\n}\n```\n\n----------------------------------------\n\nTITLE: SendRestrictionFn Definition - Go\nDESCRIPTION: Defines the function type for implementing send restrictions that can modify or block transfers.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/bank/README.md#2025-04-22_snippet_5\n\nLANGUAGE: golang\nCODE:\n```\ntype SendRestrictionFn func(ctx context.Context, fromAddr, toAddr sdk.AccAddress, amt sdk.Coins) (newToAddr sdk.AccAddress, err error)\n```\n\n----------------------------------------\n\nTITLE: Creating and Collecting Genesis Transactions for Validators\nDESCRIPTION: Commands to create a genesis transaction (gentx) that registers a validator and self-delegates tokens, then collects all gentxs into the genesis file.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/user/run-node/01-run-node.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Create a gentx.\nsimd genesis gentx my_validator 100000000stake --chain-id my-test-chain --keyring-backend test\n\n# Add the gentx to the genesis file.\nsimd genesis collect-gentxs\n```\n\n----------------------------------------\n\nTITLE: Example Protobuf Msg Service Definition from x/bank (Protobuf)\nDESCRIPTION: Provides a reference to the complete Protobuf `Msg` service definition for the `x/bank` module in the Cosmos SDK (v0.50.0-alpha.0). This serves as a practical example, showcasing multiple RPC methods like `Send` and `MultiSend` for handling different transaction types within the bank module.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-modules/02-messages-and-queries.md#2025-04-22_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\n reference\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/proto/cosmos/bank/v1beta1/tx.proto#L13-L36\n```\n\n----------------------------------------\n\nTITLE: Setting Up AnteDecorators with Unordered Transaction Support\nDESCRIPTION: Configuration of the ante handler chain with the new UnorderedTxDecorator to support unordered transactions. This shows the complete sequence of decorators including the new one that must be added at the end.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/UPGRADING.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nanteDecorators := []sdk.AnteDecorator{\n  ante.NewSetUpContextDecorator(), // outermost AnteDecorator. SetUpContext must be called first\n  circuitante.NewCircuitBreakerDecorator(options.CircuitKeeper),\n  ante.NewExtensionOptionsDecorator(options.ExtensionOptionChecker),\n  ante.NewValidateBasicDecorator(),\n  ante.NewTxTimeoutHeightDecorator(),\n  ante.NewValidateMemoDecorator(options.AccountKeeper),\n  ante.NewConsumeGasForTxSizeDecorator(options.AccountKeeper),\n  ante.NewDeductFeeDecorator(options.AccountKeeper, options.BankKeeper, options.FeegrantKeeper, options.TxFeeChecker),\n  ante.NewSetPubKeyDecorator(options.AccountKeeper), // SetPubKeyDecorator must be called before all signature verification decorators\n  ante.NewValidateSigCountDecorator(options.AccountKeeper),\n  ante.NewSigGasConsumeDecorator(options.AccountKeeper, options.SigGasConsumer),\n  ante.NewSigVerificationDecorator(options.AccountKeeper, options.SignModeHandler),\n  ante.NewIncrementSequenceDecorator(options.AccountKeeper),\n  // NEW !! NEW !! NEW !!\n  ante.NewUnorderedTxDecorator(options.UnorderedNonceManager, options.UnorderedTxOptions...)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Example Error Handler in Go\nDESCRIPTION: Demonstrates an example implementation of a RecoveryHandler that checks for a specific error type and either panics with a custom message or returns nil to continue the middleware chain.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-022-custom-panic-handling.md#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nfunc exampleErrHandler(recoveryObj interface{}) error {\n    err, ok := recoveryObj.(error)\n    if !ok { return nil }\n\n    if someSpecificError.Is(err) {\n        panic(customPanicMsg)\n    } else {\n        return nil\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing module.HasServices Interface Definition in Go\nDESCRIPTION: This Go code reference directs to the HasServices extension interface, which is used for legacy service registration within a module. By implementing this interface, modules declare which services they expose via the Cosmos SDK's Configurator system. Modern patterns prefer appmodule.HasService for new development.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-modules/01-module-manager.md#2025-04-22_snippet_10\n\nLANGUAGE: Go\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/types/module/module.go#L208-L211\n```\n\n----------------------------------------\n\nTITLE: Initializing Distribution Keeper with External Community Pool in Go\nDESCRIPTION: Example of initializing the distribution keeper with an external community pool option. This setup allows the use of an external module (like x/protocolpool) to manage the community pool funds instead of the default x/distribution implementation.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/distribution/README.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\napp.DistrKeeper = distrkeeper.NewKeeper(\n    appCodec,\n    runtime.NewKVStoreService(keys[distrtypes.StoreKey]),\n    app.AccountKeeper,\n    app.BankKeeper,\n    app.StakingKeeper,\n    authtypes.FeeCollectorName,\n    authtypes.NewModuleAddress(govtypes.ModuleName).String(),\n    distrkeeper.WithExternalCommunityPool(app.ProtocolPoolKeeper), // New option.\n)\n```\n\n----------------------------------------\n\nTITLE: Querying ABCI for Store Data with Proofs (Go)\nDESCRIPTION: References the `QueryABCI` method within `baseapp`. This function is used for store queries, enabling direct access to underlying store keys and returning the raw `abci.ResponseQuery`, which importantly includes Merkle proofs for verifying the authenticity and inclusion of the queried data.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-modules/02-messages-and-queries.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\n reference\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/baseapp/abci.go#L864-L894\n```\n\n----------------------------------------\n\nTITLE: Creating and Broadcasting Transactions using CLI - Bash\nDESCRIPTION: This code snippet demonstrates how to create, sign, and broadcast a transaction using the command-line interface in the Cosmos SDK. It shows the command format, including required arguments and optional flags for transaction configuration. Dependencies include a working CLI tool for the Cosmos SDK and a properly set up blockchain node. Parameters such as `--from`, `--gas`, and `--gas-prices` are used to specify transaction origin, resources consumed, and fees, respectively. Expected outputs include a successfully broadcasted transaction if no errors occur during execution.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/beginner/01-tx-lifecycle.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n[appname] tx [command] [args] [flags]\n```\n\n----------------------------------------\n\nTITLE: Legacy StdTx Struct Implementation (Go)\nDESCRIPTION: This Go reference links to the legacy StdTx struct, which implements the older transaction format based on Amino JSON serialization. This format predates the Protobuf-based approach and is tied to the x/auth module's migrations and legacytx submodules. Dependencies include the x/auth/migrations/legacytx package, and the struct handles transaction message aggregation, signature gathering, and encoding to Amino JSON for broadcast. This pattern is primarily for backward compatibility.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/advanced/01-transactions.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.53.0-rc.2/x/auth/migrations/legacytx/stdtx.go#L82-L89\n```\n\n----------------------------------------\n\nTITLE: Starting a Cosmos SDK Node\nDESCRIPTION: Command to start running the blockchain node after it has been properly initialized and configured.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/user/run-node/01-run-node.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsimd start\n```\n\n----------------------------------------\n\nTITLE: Extending baseapp in a Cosmos SDK Application\nDESCRIPTION: This snippet shows how the simapp demonstration application extends baseapp by embedding it in app.go. It demonstrates the standard pattern for creating a Cosmos SDK application with configuration of module parameters and store keys.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/intro/03-sdk-design.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// App extends an ABCI application, but with most of its parameters exported.\n// They are exported for convenience in creating helper functions, as object\n// capabilities aren't needed for testing.\ntype App struct {\n\t*baseapp.BaseApp\n\n\tlegacyAmino       *codec.LegacyAmino\n\tappCodec          codec.Codec\n\ttxConfig          client.TxConfig\n\tinterfaceRegistry types.InterfaceRegistry\n\n\t// keys to access the substores\n\tkeys    map[string]*storetypes.KVStoreKey\n\ttkeys   map[string]*storetypes.TransientStoreKey\n\tmemKeys map[string]*storetypes.MemoryStoreKey\n\n\t// keepers\n\tAccountKeeper         authkeeper.AccountKeeper\n\tAuthzKeeper           authzkeeper.Keeper\n\tBankKeeper            bankkeeper.Keeper\n\tStakingKeeper         *stakingkeeper.Keeper\n\tSlashingKeeper        slashingkeeper.Keeper\n\tMintKeeper            mintkeeper.Keeper\n\tDistributionKeeper    distributionkeeper.Keeper\n\tGovKeeper             govkeeper.Keeper\n\tCrisisKeeper          *crisiskeeper.Keeper\n\tUpgradeKeeper         *upgradekeeper.Keeper\n\tParamsKeeper          paramskeeper.Keeper\n\tEvidenceKeeper        evidencekeeper.Keeper\n\tFeeGrantKeeper        feegrantkeeper.Keeper\n\tGroupKeeper           groupkeeper.Keeper\n\tNFTKeeper             nftkeeper.Keeper\n\tConsensusParamsKeeper consensusparamkeeper.Keeper\n\n\t// the module manager\n\tmm *module.Manager\n\n\t// simulation manager\n\tsm *module.SimulationManager\n\n\t// module configurator\n\tconfiguratorStore\t*configurator.StoreConfigurator\n\tmconfigurator\tmodule.Configurator\n}\n```\n\n----------------------------------------\n\nTITLE: Submitting Software Upgrade Proposal\nDESCRIPTION: Command to submit a software upgrade proposal with specified version, title, summary, deposit amount, and upgrade parameters.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/upgrade/README.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsimd tx upgrade software-upgrade v2 --title=\"Test Proposal\" --summary=\"testing\" --deposit=\"100000000stake\" --upgrade-height 1000000 \\\n--upgrade-info '{ \"binaries\": { \"linux/amd64\":\"https://example.com/simd.zip?checksum=sha256:aec070645fe53ee3b3763059376134f058cc337247c978add178b6ccdfb0019f\" } }' --from cosmos1..\n```\n\n----------------------------------------\n\nTITLE: Using grpcurl for gRPC Debugging with Cosmos SDK\nDESCRIPTION: Shows how to use grpcurl to list available Protobuf services, inspect service descriptions, and execute RPC calls to query node information such as account balances.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/user/run-node/02-interact-node.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngrpcurl -plaintext localhost:9090 list\n```\n\nLANGUAGE: bash\nCODE:\n```\ngrpcurl -plaintext \\\n    localhost:9090 \\\n    describe cosmos.bank.v1beta1.Query                  # Service we want to inspect\n```\n\nLANGUAGE: bash\nCODE:\n```\ngrpcurl \\\n    -plaintext \\\n    -d \"{\\\"address\\\":\\\"$MY_VALIDATOR_ADDRESS\\\"}\" \\\n    localhost:9090 \\\n    cosmos.bank.v1beta1.Query/AllBalances\n```\n\nLANGUAGE: bash\nCODE:\n```\ngrpcurl \\\n    -plaintext \\\n    -H \"x-cosmos-block-height: 123\" \\\n    -d \"{\\\"address\\\":\\\"$MY_VALIDATOR_ADDRESS\\\"}\" \\\n    localhost:9090 \\\n    cosmos.bank.v1beta1.Query/AllBalances\n```\n\n----------------------------------------\n\nTITLE: Signing Transactions with Protobuf in Cosmos SDK using Go\nDESCRIPTION: This code demonstrates the two-step process for signing a transaction with multiple signers using SIGN_MODE_DIRECT with Protobuf encoding. First it populates the SignerInfo for each signer, then it performs the actual signing for each signer sequentially.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/user/run-node/03-txs.md#2025-04-22_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    cryptotypes \"github.com/cosmos/cosmos-sdk/crypto/types\"\n\t\"github.com/cosmos/cosmos-sdk/types/tx/signing\"\n\txauthsigning \"github.com/cosmos/cosmos-sdk/x/auth/signing\"\n)\n\nfunc sendTx() error {\n    // --snip--\n\n    privs := []cryptotypes.PrivKey{priv1, priv2}\n    accNums:= []uint64{..., ...} // The accounts' account numbers\n    accSeqs:= []uint64{..., ...} // The accounts' sequence numbers\n\n    // First round: we gather all the signer infos. We use the \"set empty\n    // signature\" hack to do that.\n    var sigsV2 []signing.SignatureV2\n    for i, priv := range privs {\n        sigV2 := signing.SignatureV2{\n            PubKey: priv.PubKey(),\n            Data: &signing.SingleSignatureData{\n                SignMode:  encCfg.TxConfig.SignModeHandler().DefaultMode(),\n                Signature: nil,\n            },\n            Sequence: accSeqs[i],\n        }\n\n        sigsV2 = append(sigsV2, sigV2)\n    }\n    err := txBuilder.SetSignatures(sigsV2...)\n    if err != nil {\n        return err\n    }\n\n    // Second round: all signer infos are set, so each signer can sign.\n    sigsV2 = []signing.SignatureV2{}\n    for i, priv := range privs {\n        signerData := xauthsigning.SignerData{\n            ChainID:       chainID,\n            AccountNumber: accNums[i],\n            Sequence:      accSeqs[i],\n        }\n        sigV2, err := tx.SignWithPrivKey(\n            encCfg.TxConfig.SignModeHandler().DefaultMode(), signerData,\n            txBuilder, priv, encCfg.TxConfig, accSeqs[i])\n        if err != nil {\n            return nil, err\n        }\n\n        sigsV2 = append(sigsV2, sigV2)\n    }\n    err = txBuilder.SetSignatures(sigsV2...)\n    if err != nil {\n        return err\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Gas Costs for Store Operations in Go\nDESCRIPTION: This code defines the default gas costs for various store operations in the Cosmos SDK. These costs are used to calculate gas consumption during transaction execution.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/advanced/00-baseapp.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/store/types/gas.go#L230-L241\n```\n\n----------------------------------------\n\nTITLE: Defining a Protobuf Msg Service RPC Method (Protobuf)\nDESCRIPTION: Illustrates the standard convention for defining an RPC method within a Protobuf `Msg` service. Each method corresponds to a specific message type, takes a single argument implementing `sdk.Msg` (named `Msg<RPCName>`), and returns a corresponding response (`Msg<RPCName>Response`). This definition is used by Protobuf to generate server and client code.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-modules/02-messages-and-queries.md#2025-04-22_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\n  rpc Send(MsgSend) returns (MsgSendResponse);\n```\n\n----------------------------------------\n\nTITLE: Validating Messages in Cosmos SDK MsgServer (Go)\nDESCRIPTION: This Go code demonstrates a typical message validation function used within a MsgServer method in a Cosmos SDK module. It checks message expiration by comparing with the current time, consumes gas for expensive checks, and performs signature verification. Dependencies include the Cosmos SDK and a compatible GasMeter implementation. The key parameters are the message (msg), current time (now), and the GasMeter (gm); the function returns an error if validation fails. Inputs are a message struct, current time, and a gas meter, and it returns an error object or nil if validation passes. Ensure this is called prior to state transitions. Signature verification may induce additional gas costs or constraints.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-modules/03-msg-services.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nValidateMsgA(msg MsgA, now Time, gm GasMeter) error {\n\tif now.Before(msg.Expire) {\n\t\treturn sdkerrrors.ErrInvalidRequest.Wrap(\"msg expired\")\n\t}\n\tgm.ConsumeGas(1000, \"signature verification\")\n\treturn signatureVerificaton(msg.Prover, msg.Data)\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing module.AppModule Interface Definition in Go\nDESCRIPTION: This Go code reference indicates the location of the legacy module.AppModule interface in the Cosmos SDK. Previous implementations required modules to fulfill all methods, leading to boilerplate; the modern pattern uses extension interfaces to minimize unneeded method definitions. Legacy modules should consult this reference when upgrading or maintaining old implementations.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-modules/01-module-manager.md#2025-04-22_snippet_7\n\nLANGUAGE: Go\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/types/module/module.go#L195-L199\n```\n\n----------------------------------------\n\nTITLE: Setting ProtocolPool in BeginBlockers Order\nDESCRIPTION: Sets the execution order of BeginBlockers ensuring ProtocolPool comes after Distribution.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/UPGRADE_GUIDE.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\napp.ModuleManager.SetOrderBeginBlockers(\n    // must come AFTER distribution.\n    distrtypes.ModuleName,\n    protocolpooltypes.ModuleName,\n)\n```\n\n----------------------------------------\n\nTITLE: Querying Pool Information with gRPC in Cosmos Staking Module\nDESCRIPTION: This gRPC endpoint queries the staking pool information. It returns the amount of bonded and not bonded tokens in the staking pool, which is useful for understanding the overall staking economics of the network.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/staking/README.md#2025-04-22_snippet_53\n\nLANGUAGE: bash\nCODE:\n```\ncosmos.staking.v1beta1.Query/Pool\n```\n\nLANGUAGE: bash\nCODE:\n```\ngrpcurl -plaintext -d localhost:9090 cosmos.staking.v1beta1.Query/Pool\n```\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"pool\": {\n    \"not_bonded_tokens\": \"369054400189\",\n    \"bonded_tokens\": \"15657192425623\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the HasValidateBasic Interface in Go (Go)\nDESCRIPTION: References the Go interface definition `HasValidateBasic`. Message types intended for use within Cosmos SDK transactions should implement this interface by providing a `ValidateBasic()` method. This method performs stateless validation checks on the message data.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-modules/02-messages-and-queries.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n reference\nhttps://github.com/cosmos/cosmos-sdk/blob/9c1e8b247cd47b5d3decda6e86fbc3bc996ee5d7/types/tx_msg.go#L84-L88\n```\n\n----------------------------------------\n\nTITLE: Defining the Authorization Interface in Go for Cosmos SDK\nDESCRIPTION: Core interface that defines how authorizations work in the system. The Authorization interface enables extensible permission granting with methods for checking message type, validating requests, and accepting/rejecting authorization requests.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-030-authz-module.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype Authorization interface {\n\tproto.Message\n\n\t// MsgTypeURL returns the fully-qualified Msg TypeURL (as described in ADR 020),\n\t// which will process and accept or reject a request.\n\tMsgTypeURL() string\n\n\t// Accept determines whether this grant permits the provided sdk.Msg to be performed, and if\n\t// so provides an upgraded authorization instance.\n\tAccept(ctx sdk.Context, msg sdk.Msg) (AcceptResponse, error)\n\n\t// ValidateBasic does a simple validation check that\n\t// doesn't require access to any other information.\n\tValidateBasic() error\n}\n\n// AcceptResponse instruments the controller of an authz message if the request is accepted\n// and if it should be updated or deleted.\ntype AcceptResponse struct {\n\t// If Accept=true, the controller can accept and authorization and handle the update.\n\tAccept bool\n\t// If Delete=true, the controller must delete the authorization object and release\n\t// storage resources.\n\tDelete bool\n\t// Controller, who is calling Authorization.Accept must check if `Updated != nil`. If yes,\n\t// it must use the updated version and handle the update on the storage level.\n\tUpdated Authorization\n}\n```\n\n----------------------------------------\n\nTITLE: Example AppModule Struct Implementation in Go\nDESCRIPTION: This Go code shows an example structure `AppModule` which implements application module interfaces. It embeds `AppModuleBasic` and includes a `keeper` field, demonstrating how module dependencies (like keepers) can be included for use within the interface methods.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-modules/01-module-manager.md#2025-04-22_snippet_17\n\nLANGUAGE: go\nCODE:\n```\n```go\n// example\ntype AppModule struct {\n\tAppModuleBasic\n\tkeeper       Keeper\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Account Management with collections.Map in Go\nDESCRIPTION: Defines a Go `Keeper` struct utilizing `collections.Map` to store and manage user accounts (`authtypes.BaseAccount`) keyed by their address (`sdk.AccAddress`). Includes functions for creating (`CreateAccount`), retrieving (`GetAccount`), checking existence (`Has`), and removing (`RemoveAccount`) accounts, leveraging the Cosmos SDK's `collections`, `storetypes`, `codec`, and `sdk` packages.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/collections/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n```go\npackage collections\n\nimport (\n\t\"cosmossdk.io/collections\"\n\tstoretypes \"cosmossdk.io/store/types\"\n\t\"fmt\"\n\t\"github.com/cosmos/cosmos-sdk/codec\"\n\tsdk \"github.com/cosmos/cosmos-sdk/types\"\n\tauthtypes \"github.com/cosmos/cosmos-sdk/x/auth/types\"\n)\n\nvar AccountsPrefix = collections.NewPrefix(0)\n\ntype Keeper struct {\n\tSchema    collections.Schema\n\tAccounts   collections.Map[sdk.AccAddress, authtypes.BaseAccount]\n}\n\nfunc NewKeeper(storeKey *storetypes.KVStoreKey, cdc codec.BinaryCodec) Keeper {\n\tsb := collections.NewSchemaBuilder(sdk.OpenKVStore(storeKey))\n\treturn Keeper{\n\t\tAccounts: collections.NewMap(sb, AccountsPrefix, \"accounts\",\n\t\t\tsdk.AccAddressKey, codec.CollValue[authtypes.BaseAccount](cdc)),\n\t}\n}\n\nfunc (k Keeper) CreateAccount(ctx sdk.Context, addr sdk.AccAddress, account authtypes.BaseAccount) error {\n\thas, err := k.Accounts.Has(ctx, addr)\n\tif err != nil {\n\t\treturn err\n\t}\n\tif has {\n\t\treturn fmt.Errorf(\"account already exists: %s\", addr)\n\t}\n\t\n\terr = k.Accounts.Set(ctx, addr, account)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}\n\nfunc (k Keeper) GetAccount(ctx sdk.Context, addr sdk.AccAddress) (authtypes.BaseAccount, error) {\n\tacc, err := k.Accounts.Get(ctx, addr)\n\tif err != nil {\n\t\treturn authtypes.BaseAccount{}, err\n\t}\n\t\n\treturn acc,\tnil\n}\n\nfunc (k Keeper) RemoveAccount(ctx sdk.Context, addr sdk.AccAddress) error {\n\terr := k.Accounts.Remove(ctx, addr)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Querying Tally for a Proposal using v1beta1 in Cosmos SDK\nDESCRIPTION: REST API endpoint for retrieving the current vote tally for a specific proposal using the legacy v1beta1 path. The endpoint accepts a proposal ID and returns the current vote counts.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/README.md#2025-04-22_snippet_84\n\nLANGUAGE: bash\nCODE:\n```\n/cosmos/gov/v1beta1/proposals/{proposal_id}/tally\n```\n\n----------------------------------------\n\nTITLE: Implementing Metrics Wrapper in Go for Cosmos SDK\nDESCRIPTION: Definition of a Metrics type that wraps telemetry functionality, providing methods to gather metrics in different formats (Prometheus or JSON) and handle metric collection.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-013-metrics.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Metrics defines a wrapper around application telemetry functionality. It allows\n// metrics to be gathered at any point in time. When creating a Metrics object,\n// internally, a global metrics is registered with a set of sinks as configured\n// by the operator. In addition to the sinks, when a process gets a SIGUSR1, a\n// dump of formatted recent metrics will be sent to STDERR.\ntype Metrics struct {\n  memSink           *metrics.InmemSink\n  prometheusEnabled bool\n}\n\n// Gather collects all registered metrics and returns a GatherResponse where the\n// metrics are encoded depending on the type. Metrics are either encoded via\n// Prometheus or JSON if in-memory.\nfunc (m *Metrics) Gather(format string) (GatherResponse, error) {\n  switch format {\n  case FormatPrometheus:\n    return m.gatherPrometheus()\n\n  case FormatText:\n    return m.gatherGeneric()\n\n  case FormatDefault:\n    return m.gatherGeneric()\n\n  default:\n    return GatherResponse{}, fmt.Errorf(\"unsupported metrics format: %s\", format)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Sending Transaction with Specified Gas and Fees - Bash\nDESCRIPTION: This code snippet provides an example of a transaction command using the CLI to send tokens with specified gas parameters. It includes flags for sender address, automatic gas estimation, gas adjustment factor, and gas prices. Prerequisites include an operational CLI setup and access to a blockchain network. Parameters include recipient address, token amount, sender address, gas estimation (`--gas`), gas adjustment (`--gas-adjustment`), and unit gas price (`--gas-prices`). The command demonstrates a complete transaction setup ready for execution with example values.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/beginner/01-tx-lifecycle.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nappd tx send <recipientAddress> 1000uatom --from <senderAddress> --gas auto --gas-adjustment 1.5 --gas-prices 0.025uatom\n```\n\n----------------------------------------\n\nTITLE: Creating Transaction Command in Cosmos SDK Module\nDESCRIPTION: Illustrates how to create a transaction command within a Cosmos SDK module using Go. The `NewSendTxCmd()` function constructs the command using the Cobra library, specifying command structure, arguments, and execution logic. Dependencies include the Cobra package and Cosmos SDK transaction handling. Inputs include sender and receiver addresses and the token amount, while the output is a broadcasted transaction.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-modules/09-module-interfaces.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/x/bank/client/cli/tx.go#L37-L76\n```\n\n----------------------------------------\n\nTITLE: Emitting Typed Events in Cosmos SDK (Go)\nDESCRIPTION: This Go code snippet illustrates how to emit an event with typed protobuf-based event data using Cosmos SDK's EmitTypedEvent method. Called within a MsgServer method, this emits module-specific, structured events for consumption by the consensus engine and off-chain services. Dependencies include context management and a group event definition generated via Protobuf. The function takes a pointer to a typed event struct with typed fields (e.g., Key1, Key2) and adds it to the EventManager. Event data must already be defined and registered for Protobuf compatibility.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-modules/03-msg-services.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nctx.EventManager().EmitTypedEvent(\n\t&group.EventABC{Key1: Value1,  Key2, Value2})\n```\n\n----------------------------------------\n\nTITLE: Using ServiceRevision with Generated Service Descriptor in Go\nDESCRIPTION: Example of how to call the ServiceRevision method using the service name statically generated by the go grpc code generator. This demonstrates how modules can check the revision of bank module services.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-054-semver-compatible-modules.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nintermoduleClient.ServiceRevision(ctx, bankv1beta1.Msg_ServiceDesc.ServiceName)\n```\n\n----------------------------------------\n\nTITLE: Simulating Transactions in Cosmos SDK\nDESCRIPTION: This code shows how to simulate a transaction before broadcasting it, which allows for estimating gas usage without committing the transaction to the blockchain. It uses the Simulate method of the gRPC transaction service client.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/user/run-node/03-txs.md#2025-04-22_snippet_15\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"testing\"\n\n\t\"github.com/cosmos/cosmos-sdk/client\"\n\t\"github.com/cosmos/cosmos-sdk/types/tx\"\n\tauthtx \"github.com/cosmos/cosmos-sdk/x/auth/tx\"\n)\n\nfunc simulateTx() error {\n    // --snip--\n\n    // Simulate the tx via gRPC. We create a new client for the Protobuf Tx\n    // service.\n    txClient := tx.NewServiceClient(grpcConn)\n    txBytes := /* Fill in with your signed transaction bytes. */\n\n    // We then call the Simulate method on this client.\n    grpcRes, err := txClient.Simulate(\n        context.Background(),\n        &tx.SimulateRequest{\n            TxBytes: txBytes,\n        },\n    )\n    if err != nil {\n        return err\n    }\n\n    fmt.Println(grpcRes.GasInfo) // Prints estimated gas used.\n\n    return nil\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Staking Parameters in Protobuf\nDESCRIPTION: This Protobuf snippet defines the parameters for the staking module, including bond denomination, unbonding time, maximum validators, maximum entries, and historical entries.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/staking/README.md#2025-04-22_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage Params {\n  string bond_denom                = 1;\n  google.protobuf.Duration unbonding_time = 2 [(gogoproto.nullable) = false, (gogoproto.stdduration) = true];\n  uint32 max_validators            = 3;\n  uint32 max_entries               = 4;\n  uint32 historical_entries        = 5;\n  string min_commission_rate       = 6 [(gogoproto.customtype) = \"github.com/cosmos/cosmos-sdk/types.Dec\", (gogoproto.nullable) = false];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Default Tx Protobuf Message\nDESCRIPTION: This Protobuf snippet defines the structure of the default `Tx` message type used in the `auth` module of the Cosmos SDK. It includes fields for the transaction body (`body`), authentication information (`auth_info`), and signatures (`signatures`). This structure is used for encoding and decoding standard transactions on the network.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/beginner/04-gas-fees.md#2025-04-22_snippet_5\n\nLANGUAGE: protobuf\nCODE:\n```\n// Tx is the standard type used for broadcasting transactions.\nmessage Tx {\n  // body is the processable content of the transaction\n  TxBody body = 1;\n\n  // auth_info is the authorization related content of the transaction,\n  // specifically signers, signer modes and fee\n  AuthInfo auth_info = 2;\n\n  // signatures is a list of signatures that matches the length and order of\n  // AuthInfo's signer_infos to allow connecting signature meta information like\n  // public key and signing mode by position.\n  repeated bytes signatures = 3;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Interface in Protobuf for Telescope Tooling\nDESCRIPTION: Illustrates the usage of `implements_interface` to aid client tools like Telescope in encoding/decoding of protobuf messages by defining an interface. This snippet uses the `cosmos_proto.implements_interface` option to bind messages to specific interfaces such as `cosmos.auth.v1beta1.AccountI`. Proper tooling configuration is necessary to interpret these options correctly.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-modules/05-protobuf-annotations.md#2025-04-22_snippet_2\n\nLANGUAGE: proto\nCODE:\n```\noption (cosmos_proto.implements_interface) = \"cosmos.auth.v1beta1.AccountI\";\n```\n\n----------------------------------------\n\nTITLE: Implementing FinalizeBlock Method for ABCI Message Handling in Go\nDESCRIPTION: This code shows the signature of the FinalizeBlock ABCI message handler in BaseApp. It processes block proposals from the correct CometBFT proposer and combines the functionality of BeginBlock, DeliverTx, and EndBlock.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/advanced/00-baseapp.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nfunc (app *BaseApp) FinalizeBlock(req *abci.RequestFinalizeBlock) (*abci.ResponseFinalizeBlock, error)\n```\n\n----------------------------------------\n\nTITLE: Defining Go Keeper Interface for Inter-Module Communication (Go)\nDESCRIPTION: This Go code defines the `FooKeeper` interface, used by a hypothetical `bar` module to interact with the `foo` module. The interface includes a `DoSomething` method that takes `MsgDoSomething` as input. This snippet highlights the dependency of `bar` on `foo`'s types, which becomes problematic when `foo` is updated to a new version (`foo/v2`) due to Go's Semantic Import Versioning, as discussed in the ADR.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-054-semver-compatible-modules.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n```go\ntype FooKeeper interface {\n\tDoSomething(MsgDoSomething) error\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Store Wrapping Layer Hierarchy in Cosmos SDK\nDESCRIPTION: Illustrates the store wrapping layers in order from the base IAVL store to the root multi store, showing the abstraction hierarchy used when performing reads or writes in a module.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/spec/store/README.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\niavl.Store <- cachekv.Store <- gaskv.Store <- cachemulti.Store <- rootmulti.Store\n```\n\n----------------------------------------\n\nTITLE: Extending SignMode Enum for Custom Modes (Protobuf)\nDESCRIPTION: This reference directs to the location of the SignMode enum in the Cosmos SDK's signing.proto file, which facilitates the extension and registration of additional sign modes. Developers can submit pull requests to expand this enum using Protobuf syntax, enabling new or custom transaction sign modes as required by specific applications or hardware. Modifications require working within the proto/cosmos/tx/signing/v1beta1 directory and adjusting the enum according to Protobuf and Cosmos SDK standards.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/advanced/01-transactions.md#2025-04-22_snippet_6\n\nLANGUAGE: protobuf\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.53.0-rc.2/proto/cosmos/tx/signing/v1beta1/signing.proto#L17\n```\n\n----------------------------------------\n\nTITLE: Example CLI Command for Bank Module Invariant Check\nDESCRIPTION: A specific example of checking the total-supply invariant in the bank module using the crisis module CLI command.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/crisis/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsimd tx crisis invariant-broken bank total-supply --from=[keyname or address]\n```\n\n----------------------------------------\n\nTITLE: Implementing GetVestedCoins for PeriodicVestingAccount in Go\nDESCRIPTION: Implements the GetVestedCoins method for PeriodicVestingAccount, calculating the amount of vested coins based on the current time and vesting periods.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/auth/vesting/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc (pva PeriodicVestingAccount) GetVestedCoins(t Time) Coins {\n  if t < pva.StartTime {\n    return ZeroCoins\n  }\n  ct := pva.StartTime // The start of the vesting schedule\n  vested := 0\n  periods = pva.GetPeriods()\n  for _, period  := range periods {\n    if t - ct < period.Length {\n      break\n    }\n    vested += period.Amount\n    ct += period.Length // increment ct to the start of the next vesting period\n  }\n  return vested\n}\n\nfunc (pva PeriodicVestingAccount) GetVestingCoins(t Time) Coins {\n    return pva.OriginalVesting - cva.GetVestedCoins(t)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Msg Service Methods in Go\nDESCRIPTION: Example of how to implement a Msg service method in a module keeper, retrieving the SDK context from the gRPC context parameter.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-031-msg-service.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage gov\n\nfunc (k Keeper) SubmitProposal(goCtx context.Context, params *types.MsgSubmitProposal) (*MsgSubmitProposalResponse, error) {\n\tctx := sdk.UnwrapSDKContext(goCtx)\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Epochs Keeper in DI System\nDESCRIPTION: Adds the Epochs keeper to the dependency injection system.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/UPGRADE_GUIDE.md#2025-04-22_snippet_30\n\nLANGUAGE: go\nCODE:\n```\ndepinject.Inject(\n    appConfig,\n    &appBuilder,\n    &app.appCodec,\n    &app.legacyAmino,\n    &app.txConfig,\n    &app.interfaceRegistry,\n    // ... other modules\n    &app.EpochsKeeper, // NEW MODULE!\n)\n```\n\n----------------------------------------\n\nTITLE: Custom Vote Calculation Interface in Go\nDESCRIPTION: Interface definition for implementing custom vote tallying logic in the governance module.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc myCustomVotingFunction(\n  ctx context.Context,\n  k Keeper,\n  proposal v1.Proposal,\n  validators map[string]v1.ValidatorGovInfo,\n) (totalVoterPower math.LegacyDec, results map[v1.VoteOption]math.LegacyDec, err error) {\n  // ... tally logic\n}\n\ngovKeeper := govkeeper.NewKeeper(\n  appCodec,\n  runtime.NewKVStoreService(keys[govtypes.StoreKey]),\n  app.AccountKeeper,\n  app.BankKeeper,\n  app.StakingKeeper,\n  app.DistrKeeper,\n  app.MsgServiceRouter(),\n  govConfig,\n  authtypes.NewModuleAddress(govtypes.ModuleName).String(),\n  govkeeper.WithCustomCalculateVoteResultsAndVotingPowerFn(myCustomVotingFunction),\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing AutoCLI in a Cosmos SDK Application\nDESCRIPTION: Example showing how to wire up AutoCLI in a Cosmos SDK application by defining app modules, creating AutoCLI options, and enhancing the root command with automatically generated subcommands.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/client/v2/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Define your app's modules\ntestModules := map[string]appmodule.AppModule{\n    \"testModule\": &TestModule{},\n}\n\n// Define the autocli AppOptions\nautoCliOpts := autocli.AppOptions{\n    Modules: testModules,\n}\n\n// Create the root command\nrootCmd := &cobra.Command{\n    Use: \"app\",\n}\n\nif err := appOptions.EnhanceRootCommand(rootCmd); err != nil {\n    return err\n}\n\n// Run the root command\nif err := rootCmd.Execute(); err != nil {\n    return err\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Account Interface in Go for Cosmos SDK\nDESCRIPTION: This code defines the AccountI interface used to store coins at a given address within state. It includes methods for handling account addresses, public keys, account numbers, and sequence numbers needed for authentication and replay protection.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/auth/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// AccountI is an interface used to store coins at a given address within state.\n// It presumes a notion of sequence numbers for replay protection,\n// a notion of account numbers for replay protection for previously pruned accounts,\n// and a pubkey for authentication purposes.\n//\n// Many complex conditions can be used in the concrete struct which implements AccountI.\ntype AccountI interface {\n\tproto.Message\n\n\tGetAddress() sdk.AccAddress\n\tSetAddress(sdk.AccAddress) error // errors if already set.\n\n\tGetPubKey() crypto.PubKey // can return nil.\n\tSetPubKey(crypto.PubKey) error\n\n\tGetAccountNumber() uint64\n\tSetAccountNumber(uint64) error\n\n\tGetSequence() uint64\n\tSetSequence(uint64) error\n\n\t// Ensure that account implements stringer\n\tString() string\n}\n```\n\n----------------------------------------\n\nTITLE: Creating gRPC Query Client and Executing Query in Staking CLI (Go)\nDESCRIPTION: This referenced Go code illustrates the process within a CLI command handler for creating a gRPC query client specific to a module (like `staking`). It utilizes the `client.Context` to establish the connection and then invokes the appropriate method on the generated query client (e.g., `Delegations`) to execute the query against the connected node, passing the previously prepared parameters.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/beginner/02-query-lifecycle.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// Reference: https://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/x/staking/client/cli/query.go#L308-L343\n// This code demonstrates obtaining a QueryClient using the client context,\n// preparing the request parameters, and calling the specific gRPC query method (e.g., queryClient.Delegations).\n```\n\n----------------------------------------\n\nTITLE: Defining Transaction Message Structure in Protocol Buffers\nDESCRIPTION: Core transaction message definitions including Tx, TxRaw, TxBody and AuthInfo structures for handling transaction data and signatures.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-020-protobuf-transaction-encoding.md#2025-04-22_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage Tx {\n    TxBody body = 1;\n    AuthInfo auth_info = 2;\n    repeated bytes signatures = 3;\n}\n\nmessage TxRaw {\n    bytes body = 1;\n    bytes auth_info = 2;\n    repeated bytes signatures = 3;\n}\n\nmessage TxBody {\n    repeated google.protobuf.Any messages = 1;\n    string memo = 2;\n    int64 timeout_height = 3;\n    repeated google.protobuf.Any extension_options = 1023;\n}\n\nmessage AuthInfo {\n    repeated SignerInfo signer_infos = 1;\n    Fee fee = 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing Cosmos SDK Node Architecture\nDESCRIPTION: A textual diagram illustrating the architecture of a Cosmos SDK blockchain node. It shows the relationship between the State-machine (Application built with Cosmos SDK) and the Consensus/Networking layers (CometBFT), connected via the Application Blockchain Interface (ABCI).\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/beginner/00-app-anatomy.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n                ^  +-------------------------------+  ^\n                |  |                               |  |\n                |  |  State-machine = Application  |  |\n                |  |                               |  |   Built with Cosmos SDK\n                |  |            ^      +           |  |\n                |  +----------- | ABCI | ----------+  v\n                |  |            +      v           |  ^\n                |  |                               |  |\nBlockchain Node |  |           Consensus           |  |\n                |  |                               |  |\n                |  +-------------------------------+  |   CometBFT\n                |  |                               |  |\n                |  |           Networking          |  | \n                |  |                               |  |\n                v  +-------------------------------+  v\n```\n\n----------------------------------------\n\nTITLE: Defining BaseAccount Message in Protobuf for Cosmos SDK\nDESCRIPTION: This protobuf message defines the BaseAccount type, which is the simplest account implementation in the Cosmos SDK. It contains all necessary fields for basic account functionality including address, public key, account number, and sequence.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/auth/README.md#2025-04-22_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\n// BaseAccount defines a base account type. It contains all the necessary fields\n// for basic account functionality. Any custom account type should extend this\n// type for additional functionality (e.g. vesting).\nmessage BaseAccount {\n  string address = 1;\n  google.protobuf.Any pub_key = 2;\n  uint64 account_number = 3;\n  uint64 sequence       = 4;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Migrations in Upgrade Handlers in Go\nDESCRIPTION: This code snippet demonstrates running migrations within an `UpgradeHandler` using the `RunMigrations` function. It iterates over the `VersionMap` and executes migration scripts for modules requiring updates. Upon completion, it returns an updated version map.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/advanced/15-upgrade.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ncfg := module.NewConfigurator(...)\napp.UpgradeKeeper.SetUpgradeHandler(\"my-plan\", func(ctx sdk.Context, plan upgradetypes.Plan, fromVM module.VersionMap) (module.VersionMap, error) {\n\n    // ...\n    // additional upgrade logic\n    // ...\n\n    // returns a VersionMap with the updated module ConsensusVersions\n    return app.mm.RunMigrations(ctx, fromVM)\n})\n```\n\n----------------------------------------\n\nTITLE: Defining the Cosmos SDK Context Struct in Go\nDESCRIPTION: Shows the Go struct definition for `Context` within the Cosmos SDK (referencing v0.53.0-rc.2). It includes fields like the base Go context, multistore, block header, chain ID, gas meters, event manager, and other critical information passed during transaction processing. This struct encapsulates the application state relevant to a specific request or transaction.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/advanced/02-context.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n```go reference\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.53.0-rc.2/types/context.go#L40-L67\n```\n```\n\n----------------------------------------\n\nTITLE: Manual Module Registration in Go\nDESCRIPTION: This Go snippet provides an example of manually registering non-app wiring modules in 'SimApp' within the Cosmos SDK. It showcases how to build the app using 'appBuilder.Build', register modules using 'app.RegisterModules', and register stores with 'app.RegisterStores'. This process involves creating and integrating a custom module, which requires manual handling of the module's key and keeper setup.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-apps/01-app-go-di.md#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\n// ....\napp.App = appBuilder.Build(db, traceStore, baseAppOptions...)\n\n// register module manually\napp.RegisterStores(storetypes.NewKVStoreKey(example.ModuleName))\napp.ExampleKeeper = examplekeeper.NewKeeper(app.appCodec, app.AccountKeeper.AddressCodec(), runtime.NewKVStoreService(app.GetKey(example.ModuleName)), authtypes.NewModuleAddress(govtypes.ModuleName).String())\nexampleAppModule := examplemodule.NewAppModule(app.ExampleKeeper)\nif err := app.RegisterModules(&exampleAppModule); err != nil {\n\tpanic(err)\n}\n\n// ....\n\n```\n\n----------------------------------------\n\nTITLE: Basic Protobuf Message Service Interface in Go\nDESCRIPTION: Example showing the generated MsgClient and MsgServer interfaces from Protobuf service definitions for the bank Send message type. These interfaces handle the client and server sides of the service.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-033-protobuf-inter-module-comm.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage bank\n\ntype MsgClient interface {\n\tSend(context.Context, *MsgSend, opts ...grpc.CallOption) (*MsgSendResponse, error)\n}\n\ntype MsgServer interface {\n\tSend(context.Context, *MsgSend) (*MsgSendResponse, error)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining HasABCIEndBlock Interface in Go\nDESCRIPTION: This Go interface, `HasABCIEndBlock`, is an extension of `module.AppModule`. It's implemented by modules whose `EndBlock` logic needs to return validator set updates to the underlying consensus engine (e.g., the staking module). The `EndBlock` method takes a `context.Context` and returns a slice of `abci.ValidatorUpdate` and an error.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-modules/01-module-manager.md#2025-04-22_snippet_14\n\nLANGUAGE: go\nCODE:\n```\n```go reference\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/types/module/module.go#L222-L225\n```\n```\n\n----------------------------------------\n\nTITLE: Querying All Delegations for a Delegator\nDESCRIPTION: CLI command to query all delegations for a specific delegator address across all validators in the Cosmos SDK staking module.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/staking/README.md#2025-04-22_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nsimd query staking delegations cosmos1gghjut3ccd8ay0zduzj64hwre2fxs9ld75ru9p\n```\n\n----------------------------------------\n\nTITLE: Querying Proposal Details using gRPC\nDESCRIPTION: Shows how to query details of a specific proposal by its ID using gRPC. Returns comprehensive proposal information including status, votes, and execution details.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/group/README.md#2025-04-22_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\ngrpcurl -plaintext \\\n    -d '{\"proposal_id\":\"1\"}'  localhost:9090 cosmos.group.v1.Query/Proposal\n```\n\n----------------------------------------\n\nTITLE: Funding Local SimApp Accounts for Testing (Go)\nDESCRIPTION: This snippet shows how to mint tokens and fund a list of predefined local accounts, which simulates user balances for test scenarios. It uses the bank keeper's MintCoins and SendCoinsFromModuleToAccount functions, looping over several hardcoded test addresses. Proper error handling ensures testnet state consistency. Dependencies include the bank and mint modules.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-apps/05-app-testnet.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n  // BANK\n\t//\n\n\tdefaultCoins := sdk.NewCoins(sdk.NewInt64Coin(\"ustake\", 1000000000000))\n\n\tlocalSimAppAccounts := []sdk.AccAddress{\n\t\tsdk.MustAccAddressFromBech32(\"cosmos12smx2wdlyttvyzvzg54y2vnqwq2qjateuf7thj\"),\n\t\tsdk.MustAccAddressFromBech32(\"cosmos1cyyzpxplxdzkeea7kwsydadg87357qnahakaks\"),\n\t\tsdk.MustAccAddressFromBech32(\"cosmos18s5lynnmx37hq4wlrw9gdn68sg2uxp5rgk26vv\"),\n\t\tsdk.MustAccAddressFromBech32(\"cosmos1qwexv7c6sm95lwhzn9027vyu2ccneaqad4w8ka\"),\n\t\tsdk.MustAccAddressFromBech32(\"cosmos14hcxlnwlqtq75ttaxf674vk6mafspg8xwgnn53\"),\n\t\tsdk.MustAccAddressFromBech32(\"cosmos12rr534cer5c0vj53eq4y32lcwguyy7nndt0u2t\"),\n\t\tsdk.MustAccAddressFromBech32(\"cosmos1nt33cjd5auzh36syym6azgc8tve0jlvklnq7jq\"),\n\t\tsdk.MustAccAddressFromBech32(\"cosmos10qfrpash5g2vk3hppvu45x0g860czur8ff5yx0\"),\n\t\tsdk.MustAccAddressFromBech32(\"cosmos1f4tvsdukfwh6s9swrc24gkuz23tp8pd3e9r5fa\"),\n\t\tsdk.MustAccAddressFromBech32(\"cosmos1myv43sqgnj5sm4zl98ftl45af9cfzk7nhjxjqh\"),\n\t\tsdk.MustAccAddressFromBech32(\"cosmos14gs9zqh8m49yy9kscjqu9h72exyf295afg6kgk\"),\n\t\tsdk.MustAccAddressFromBech32(\"cosmos1jllfytsz4dryxhz5tl7u73v29exsf80vz52ucc\")}\n\n  // Fund localSimApp accounts\n\tfor _, account := range localSimAppAccounts {\n\t\terr := app.BankKeeper.MintCoins(ctx, minttypes.ModuleName, defaultCoins)\n\t\tif err != nil {\n\t\t\ttmos.Exit(err.Error())\n\t\t}\n\t\terr = app.BankKeeper.SendCoinsFromModuleToAccount(ctx, minttypes.ModuleName, account, defaultCoins)\n\t\tif err != nil {\n\t\t\ttmos.Exit(err.Error())\n\t\t}\n\t}\n```\n\n----------------------------------------\n\nTITLE: Defining TxBuilder Interface in Go\nDESCRIPTION: The TxBuilder interface is implemented by x/auth/tx and can be accessed with TxConfig.NewTxBuilder(). It provides methods for building transactions.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/auth/tx/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype TxBuilder interface {\n\tGetTx() signing.Tx\n\n\tSetMsgs(msgs ...sdk.Msg) error\n\tSetSignatures(signatures ...signingtypes.SignatureV2) error\n\tSetMemo(memo string)\n\tSetFeeAmount(amount sdk.Coins)\n\tSetGasLimit(limit uint64)\n\tSetTimeoutHeight(height uint64)\n\tSetFeeGranter(feeGranter sdk.AccAddress)\n\tSetFeePayer(feePayer sdk.AccAddress)\n\n\tSetExtensionOptions(...*codectypes.Any)\n\tSetNonCriticalExtensionOptions(...*codectypes.Any)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Transient Store in Cosmos SDK\nDESCRIPTION: Definition of a Transient Store, which is a KVStore automatically discarded at the end of a block. It uses an in-memory database and is useful for storing information only relevant per-block.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/advanced/04-store.md#2025-04-22_snippet_13\n\nLANGUAGE: go\nCODE:\n```\n// Store implements an in-memory KVStore. Entries are discarded after\n// every block commitment.\ntype Store struct {\n\tdbadapter.Store\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Upgrade Handler in Cosmos SDK (Go)\nDESCRIPTION: Shows how to set an upgrade handler for a specific upgrade in Cosmos SDK. Key Functionality: Registering an upgrade handler with a unique name, performing state migrations during upgrades. Dependencies: upgrade.Keeper, context, upgrade.Plan.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-apps/03-app-upgrade.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\napp.upgradeKeeper.SetUpgradeHandler(\"my-fancy-upgrade\", func(ctx context.Context, plan upgrade.Plan) {\n // Perform any migrations of the state store needed for this upgrade\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Coin Metadata Structure in Protobuf\nDESCRIPTION: Protocol Buffer definition for the DenomUnit and Metadata types that will store denomination information including conversion factors between units of the same asset.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-024-coin-metadata.md#2025-04-22_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage DenomUnit {\n  string denom    = 1;\n  uint32 exponent = 2;  \n  repeated string aliases = 3;\n}\n\nmessage Metadata {\n  string description = 1;\n  repeated DenomUnit denom_units = 2;\n  string base = 3;\n  string display = 4;\n}\n```\n\n----------------------------------------\n\nTITLE: Querying All Evidence via REST API\nDESCRIPTION: REST endpoint for retrieving all evidence records with pagination support. Returns an array of evidence records and pagination information.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/evidence/README.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n/cosmos/evidence/v1beta1/evidence\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \"http://localhost:1317/cosmos/evidence/v1beta1/evidence\"\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"evidence\": [\n    {\n      \"consensus_address\": \"cosmosvalcons1ntk8eualewuprz0gamh8hnvcem2nrcdsgz563h\",\n      \"height\": \"11\",\n      \"power\": \"100\",\n      \"time\": \"2021-10-20T16:08:38.194017624Z\"\n    }\n  ],\n  \"pagination\": {\n    \"total\": \"1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Broadcasting Transaction with CLI\nDESCRIPTION: Command to broadcast a signed transaction to the network. Options are available to specify the broadcast mode for different response behaviors.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/user/run-node/03-txs.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsimd tx broadcast tx_signed.json\n```\n\n----------------------------------------\n\nTITLE: Encoding Transaction with CLI\nDESCRIPTION: Encodes a signed transaction from a JSON file into base64-encoded Protobuf bytes for use with gRPC or REST endpoints.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/user/run-node/03-txs.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsimd tx encode tx_signed.json\n```\n\n----------------------------------------\n\nTITLE: Parameter Change Proposal JSON\nDESCRIPTION: JSON structure for submitting a parameter change proposal with title, description, and specific parameter changes.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/README.md#2025-04-22_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"title\": \"Test Proposal\",\n  \"description\": \"testing, testing, 1, 2, 3\",\n  \"changes\": [\n    {\n      \"subspace\": \"staking\",\n      \"key\": \"MaxValidators\",\n      \"value\": 100\n    }\n  ],\n  \"deposit\": \"10000000stake\"\n}\n```\n\n----------------------------------------\n\nTITLE: Genesis State Modification Test (Go)\nDESCRIPTION: Test implementation showing how to modify genesis state including disabling inflation and adding new tokens\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/systemtests/GETTING_STARTED.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n\tsut.ResetChain(t)\n    cli := NewCLIWrapper(t, sut, verbose)\n\n\tsut.ModifyGenesisJSON(t, func(genesis []byte) []byte {\n\t\t// disable inflation\n\t\tgenesis, err := sjson.SetRawBytes(genesis, \"app_state.mint.minter.inflation\", []byte(`\"0.000000000000000000\"`))\n\t\trequire.NoError(t, err)\n\n\t\t// add new token to supply\n\t\tvar supply []json.RawMessage\n\t\trawSupply := gjson.Get(string(genesis), \"app_state.bank.supply\").String()\n\t\trequire.NoError(t, json.Unmarshal([]byte(rawSupply), &supply))\n\t\tsupply = append(supply, json.RawMessage(`{\"denom\": \"mytoken\",\"amount\": \"1000000\"}`))\n\t\tnewSupply, err := json.Marshal(supply)\n\t\trequire.NoError(t, err)\n\t\tgenesis, err = sjson.SetRawBytes(genesis, \"app_state.bank.supply\", newSupply)\n\t\trequire.NoError(t, err)\n\n\t\t// add amount to any balance\n\t\tanyAddr := cli.GetKeyAddr(\"node0\")\n\t\tnewBalances := GetGenesisBalance(genesis, anyAddr).Add(sdk.NewInt64Coin(\"mytoken\", 1000000))\n\t\tnewBalancesBz, err := newBalances.MarshalJSON()\n\t\trequire.NoError(t, err)\n\t\tnewState, err := sjson.SetRawBytes(genesis, fmt.Sprintf(\"app_state.bank.balances.#[address==%q]#.coins\", anyAddr), newBalancesBz)\n\t\trequire.NoError(t, err)\n\t\treturn newState\n\t})\n    sut.StartChain(t)\n```\n\n----------------------------------------\n\nTITLE: Implementing Setter Method for Keeper in Cosmos SDK (Go)\nDESCRIPTION: This Go code snippet illustrates how to implement a setter method in a Keeper. It stores a marshaled value in the store using the provided context, key, and value. Dependencies include a properly initialized storeKey and codec.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-modules/06-keeper.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc (k Keeper) Set(ctx context.Context, key string, value valueType)\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Module Errors in Cosmos SDK (Go)\nDESCRIPTION: Demonstrates how to define and register custom errors for a Cosmos SDK module (specifically `x/distribution`) using the `errors.Register` function from the `cosmossdk.io/errors` package. Each error is assigned a unique code within the module's codespace (\"distribution\"). This is the standard practice recommended for providing context on failed operations within a module.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-modules/12-errors.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n```go reference\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/x/distribution/types/errors.go\n```\n```\n\n----------------------------------------\n\nTITLE: Encoding Transactions in CLI\nDESCRIPTION: The encode command encodes a transaction created with the --generate-only flag or signed with the sign command. It serializes the transaction to Protobuf and returns it as base64.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/auth/tx/README.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nsimd tx encode tx.json\n```\n\nLANGUAGE: shell\nCODE:\n```\nsimd tx encode tx.signed.json\n```\n\n----------------------------------------\n\nTITLE: Specifying Message Signer in Cosmos SDK Protobuf\nDESCRIPTION: This snippet demonstrates how to specify the field used to determine the signer of a message in a Cosmos SDK application. It uses the `cosmos.msg.v1.signer` option to define which address field is to be considered the signer. This annotation is crucial for both server and client to correctly infer the signer field. The dependent protobuf option needs to be available for this to work.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-modules/05-protobuf-annotations.md#2025-04-22_snippet_0\n\nLANGUAGE: proto\nCODE:\n```\noption (cosmos.msg.v1.signer) = \"from_address\";\n```\n\n----------------------------------------\n\nTITLE: Executing Start Command for Cosmos SDK Node in Go\nDESCRIPTION: This snippet demonstrates how to initiate the start command for launching a Cosmos SDK node. It outlines the process of retrieving the node's configuration, opening the database with LevelDB, and using an AppCreator signature implemented by the application's constructor. This command sets up a CometBFT node, ensuring synchronization between the application's state and the consensus layer before starting the node, which will then handle networking and blockchain operations.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/advanced/03-node.md#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nreference\\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/server/start.go#L220\n```\n\n----------------------------------------\n\nTITLE: Codec Registration Structure in Cosmos SDK\nDESCRIPTION: Definition of EncodingConfig structure used to configure various codecs and registries used throughout a Cosmos SDK application for serialization.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/beginner/00-app-anatomy.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\ntype EncodingConfig struct {\n    InterfaceRegistry types.InterfaceRegistry\n    Codec           codec.Codec\n    TxConfig        client.TxConfig\n    Amino           *codec.LegacyAmino\n}\n```\n\n----------------------------------------\n\nTITLE: Setting a Custom CheckTxHandler in Go\nDESCRIPTION: Illustrates setting a custom CheckTxHandler in a Cosmos SDK application's app.go file. It creates and assigns a handler to modify transaction validation. Dependencies: Cosmos SDK, relevant packages (logger, db, etc.). No explicit constraints, but it assumes familiarity with Cosmos SDK application structure. Inputs include application configurations; output is a modified simulation application with a custom handler.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/abci/04-checktx.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc NewSimApp(\n\tlogger log.Logger,\n\tdb corestore.KVStoreWithBatch,\n\ttraceStore io.Writer,\n\tloadLatest bool,\n\tappOpts servertypes.AppOptions,\n\tbaseAppOptions ...func(*baseapp.BaseApp),\n) *SimApp {\n  ...\n  // Create ChecktxHandler\n  checktxHandler := abci.NewCustomCheckTxHandler(...)\n  app.SetCheckTxHandler(checktxHandler)\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Encoding Query Parameters in Staking CLI Command (Go)\nDESCRIPTION: This code reference highlights the Go code snippet within the `x/staking` module's CLI implementation responsible for handling query parameter encoding. Specifically, it shows where arguments like a `delegatorAddress` are parsed from the command line and then marshalled into a byte slice (`[]byte`) using the `client.Context`'s codec, preparing them for transmission via RPC.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/beginner/02-query-lifecycle.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// Reference: https://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/x/staking/client/cli/query.go#L315-L318\n// This section typically involves parsing string arguments and using the clientCtx.Codec \n// to marshal them into the required format (e.g., bytes) for the query.\n```\n\n----------------------------------------\n\nTITLE: Referencing module.HasGenesis Interface Definition in Go\nDESCRIPTION: This Go code reference gives the definition location for the HasGenesis extension interface. HasGenesis allows modules to support additional interdependent genesis logic, which is vital when setup operations must be aware of external module state. Modules implementing this can better coordinate genesis initialization with the rest of the application.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-modules/01-module-manager.md#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/6ce2505/types/module/module.go#L184-L189\n```\n\n----------------------------------------\n\nTITLE: Visualizing Case 4 Transaction Dependencies with Mermaid\nDESCRIPTION: Graph showing a complex case with multiple senders and priority edges, demonstrating how a high priority transaction (90) can be selected last due to nonce ordering constraints.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/types/mempool/priority_nonce_spec.md#2025-04-22_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    subgraph Sender A\n    10-->15\n    15-->30\n    30-->6\n    end\n    subgraph Sender B\n    8\n    8-->20\n    10-->8\n    30-->8\n    20-->4\n    20-->6\n\n    end\n    subgraph Sender C\n    2-->90\n    4-->2\n    6-->4\n    end\n```\n\n----------------------------------------\n\nTITLE: Example of Querying All Proposals with gRPC v1 in Cosmos SDK\nDESCRIPTION: A practical example showing how to use grpcurl to query all proposals using the v1 gRPC endpoint.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/README.md#2025-04-22_snippet_34\n\nLANGUAGE: bash\nCODE:\n```\ngrpcurl -plaintext \\\n    localhost:9090 \\\n    cosmos.gov.v1.Query/Proposals\n```\n\n----------------------------------------\n\nTITLE: Main Function in Go for CLI Initialization\nDESCRIPTION: The 'main' function in Go for simapp application initializes the root command, handles configurations, flags, and codec instantiation. It aggregates subcommands needed for user interaction, then creates and executes the root command. It is a core part of setting up the CLI for applications using the Cosmos SDK.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/advanced/07-cli.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/simapp/simd/main.go#L12-L24\n```\n\n----------------------------------------\n\nTITLE: Executing Transactions in FinalizeBlock in Go\nDESCRIPTION: This snippet shows the implementation of transaction execution within the FinalizeBlock method. It processes each transaction, updates the state, and returns the execution result.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/advanced/00-baseapp.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/baseapp/baseapp.go#LL708-L743\n```\n\n----------------------------------------\n\nTITLE: Returning Aggregated Transaction Commands\nDESCRIPTION: Demonstrates how modules return a collection of transaction commands with `GetTxCmd()`. This function helps aggregate module-specific transactions into the root command interface.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-modules/09-module-interfaces.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/x/bank/module.go#L84-L86\n```\n\n----------------------------------------\n\nTITLE: Defining TxBuilder Interface in Go\nDESCRIPTION: Defines an interface for building transactions in the Cosmos SDK, including methods for setting messages, signatures, fees, and memos.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-020-protobuf-transaction-encoding.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\ntype TxBuilder interface {\n  GetTx() sdk.Tx\n\n  SetMsgs(...sdk.Msg) error\n  GetSignatures() []sdk.Signature\n  SetSignatures(...sdk.Signature)\n  GetFee() sdk.Fee\n  SetFee(sdk.Fee)\n  GetMemo() string\n  SetMemo(string)\n}\n```\n\n----------------------------------------\n\nTITLE: Generating and Encoding a Transaction Using TxBuilder and TxConfig - Go\nDESCRIPTION: This Go snippet demonstrates the typical workflow to create and encode a transaction in a Cosmos SDK-based application. It illustrates instantiating a TxBuilder with the appropriate sign mode, populating it with messages (and potentially other properties), and encoding the transaction to bytes using the TxConfig.TxEncoder method. The key parameters involve the transaction builder 'txBuilder', a set of messages, and output is a byte slice 'bz' suitable for broadcast. Dependencies include a correctly instantiated 'txConfig' (implementing TxConfig), message types to include in the transaction, and appropriate Go imports from the Cosmos SDK. Limitations are that actual message creation and error handling must be provided in real implementations.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/advanced/01-transactions.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\ntxBuilder := txConfig.NewTxBuilder()\ntxBuilder.SetMsgs(...) // and other setters on txBuilder\n\nbz, err := txConfig.TxEncoder()(txBuilder.GetTx())\n// bz are bytes to be broadcasted over the network\n```\n\n----------------------------------------\n\nTITLE: Referencing BeginBlocker Implementation in Cosmos-SDK (Go)\nDESCRIPTION: This snippet references the implementation of the BeginBlocker method found in the distribution module of the Cosmos-SDK at the specified GitHub location. BeginBlocker is designed to automatically execute module-specific logic at the start of each block, typically interacting with the keeper and context to read state, modify state, or emit events. Dependencies include the Cosmos-SDK, proper keeper/context setup, and the implementation must conform to the module's HasBeginBlocker interface requirements. Expected input is the block context, and it may generate state transitions or events as output. This referenced code is not shown inline, but facilitates understanding and integration of BeginBlocker in user-defined modules.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-modules/06-beginblock-endblock.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/x/distribution/abci.go#L14-L38\n```\n\n----------------------------------------\n\nTITLE: Using Query Client in Go\nDESCRIPTION: This snippet demonstrates how to use the generated query client in Go to make a balance query. It shows the creation of a client context, query client, and execution of the QueryBalance method.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-021-protobuf-query-encoding.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nclientCtx := client.NewContext()\nqueryClient := types.NewQueryClient(clientCtx.QueryConn())\nparams := &types.QueryBalanceParams{addr, denom}\nresult, err := queryClient.QueryBalance(gocontext.Background(), params)\n```\n\n----------------------------------------\n\nTITLE: Dependency Management with Go Modules\nDESCRIPTION: Example go.mod file from the Cosmos Hub showing how dependencies are managed in a Cosmos SDK application. Lists required modules and their versions for building the application.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/beginner/00-app-anatomy.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nreference https://github.com/cosmos/gaia/blob/26ae7c2/go.mod#L1-L28\n```\n\n----------------------------------------\n\nTITLE: Referencing CacheWrapper Interface Definition (Go Reference)\nDESCRIPTION: This reference points to the CacheWrapper interface in the Cosmos SDK Go source, which outlines methods for read caching and branching through the Write method. Implementers and consumers should review the source to understand how ephemeral branches and cache are created for transactional state changes. No explicit code or setup is present other than the informative link.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/advanced/04-store.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/store/types/store.go#L287-L320\n```\n\n----------------------------------------\n\nTITLE: Circuit Breaker Authorization Message in Protobuf\nDESCRIPTION: Defines the message structure for authorizing circuit breaker permissions. This allows a super-admin to grant or revoke permissions for other accounts with different permission levels.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/circuit/README.md#2025-04-22_snippet_3\n\nLANGUAGE: protobuf\nCODE:\n```\n  // AuthorizeCircuitBreaker allows a super-admin to grant (or revoke) another\n  // account's circuit breaker permissions.\n  rpc AuthorizeCircuitBreaker(MsgAuthorizeCircuitBreaker) returns (MsgAuthorizeCircuitBreakerResponse);\n```\n\n----------------------------------------\n\nTITLE: Example Protobuf Signer Annotation in x/bank MsgSend (Protobuf)\nDESCRIPTION: References a specific line in the `x/bank` module's `tx.proto` file showing the `cosmos.msg.v1.signer` annotation. This annotation automatically identifies the field(s) representing the message signer(s), simplifying the `GetSigners()` implementation for message types starting from Cosmos SDK v0.50.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-modules/02-messages-and-queries.md#2025-04-22_snippet_3\n\nLANGUAGE: protobuf\nCODE:\n```\n reference \nhttps://github.com/cosmos/cosmos-sdk/blob/e6848d99b55a65d014375b295bdd7f9641aac95e/proto/cosmos/bank/v1beta1/tx.proto#L40\n```\n\n----------------------------------------\n\nTITLE: Defining Authorization Interface in Go for x/authz Module\nDESCRIPTION: The core Authorization interface that must be implemented by concrete authorization types to validate and execute grants between accounts. It defines methods for validation, acceptance, and authorization updating.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/authz/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// Authorization represents the interface for handling authorization types\ntype Authorization interface {\n\tcoding.ProtoMarshaler\n\n\t// MsgTypeURL returns the fully qualified Msg service method URL (as described in ADR 031).\n\t// that the authorization type is responsible for.\n\tMsgTypeURL() string\n\n\t// Accept returns an updated authorization object if the grantee is authorized to execute the provided Msg or an error otherwise.\n\tAccept(ctx sdk.Context, msg sdk.Msg) (Authorization, error)\n\n\t// ValidateBasic does a simple validation check that\n\t// doesn't require access to any other information.\n\tValidateBasic() error\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Voting on a Governance Proposal in Cosmos SDK\nDESCRIPTION: A practical example showing how to vote 'yes' on proposal ID 1 from a specific account address.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/README.md#2025-04-22_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nsimd tx gov vote 1 yes --from cosmos1..\n```\n\n----------------------------------------\n\nTITLE: gRPC Server Initialization in Cosmos SDK\nDESCRIPTION: The gRPC server is crucial for handling query requests and broadcasting transactions. This snippet references the method in Cosmos SDK where the gRPC server is configured using the `grpc.Server`. Users can manage gRPC settings in `app.toml` through fields like `grpc.enable` and `grpc.address`. This setup allows the server to bind to the specified port and process gRPC requests.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/advanced/06-grpc_rest.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/server/types/app.go#L46-L48\n```\n\n----------------------------------------\n\nTITLE: Basic REST API request for account balances using curl\nDESCRIPTION: Example curl command to query account balances from the Cosmos SDK bank module. The request uses the REST API endpoint and requires specifying an address to query.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/user/run-node/02-interact-node.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n    -X GET \\\n    -H \"Content-Type: application/json\" \\\n    http://localhost:1317/cosmos/bank/v1beta1/balances/$MY_VALIDATOR_ADDRESS\n```\n\n----------------------------------------\n\nTITLE: Constructing a New BaseApp in Go\nDESCRIPTION: The function snippet illustrates the creation of a new BaseApp instance in Go, specifying input parameters such as name, logger, database, and transaction decoder. Optional functional parameters can be included to modify the BaseApp's configuration further (e.g., setting pruning or minimum gas prices). This function initializes BaseApp with the necessary structures for handling transactions and state changes.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/advanced/00-baseapp.md#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nfunc NewBaseApp(\n  name string, logger log.Logger, db dbm.DB, txDecoder sdk.TxDecoder, options ...func(*BaseApp),\n) *BaseApp {\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Grant Authorization Command in Cosmos SDK\nDESCRIPTION: The grant command allows a granter to grant an authorization to a grantee with different authorization types including send, generic, delegate, unbond, and redelegate.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/authz/README.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nsimd tx authz grant <grantee> <authorization_type=\"send\"|\"generic\"|\"delegate\"|\"unbond\"|\"redelegate\"> --from <granter> [flags]\n```\n\n----------------------------------------\n\nTITLE: Implementing MsgTransferTokenizeShareRecord in Cosmos SDK\nDESCRIPTION: This message is used to transfer ownership of rewards generated from tokenized delegations. It is designed to work with liquid staking designs that do not redeem tokenized shares.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-061-liquid-staking.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### `MsgTransferTokenizeShareRecord`\n\nThe MsgTransferTokenizeShareRecord message is used to transfer the ownership of rewards generated from the tokenized amount of delegation. The tokenize share record is created when a user tokenize his/her delegation and deleted when the full amount of share tokens are redeemed.\n\nThis is designed to work with liquid staking designs that do not redeem the tokenized shares and may instead want to keep the shares tokenized.\n```\n\n----------------------------------------\n\nTITLE: Iterating over collections.Map for Accounts in Go\nDESCRIPTION: Demonstrates various ways to iterate over a `collections.Map` storing accounts (`authtypes.BaseAccount`) keyed by `uint64`. Includes examples for iterating over all accounts (`GetAllAccounts` using a nil Ranger), iterating within a specific key range with options like descending order (`IterateAccountsBetween` using `collections.Range`), and performing custom actions during manual iteration (`IterateAccounts` using `iter.Valid()` and `iter.Next()`). Requires `collections`, `storetypes`, `codec`, `sdk`, and `authtypes` packages.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/collections/README.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\n```go\npackage collections\n\nimport (\n\t\"cosmossdk.io/collections\"\n\tstoretypes \"cosmossdk.io/store/types\"\n\t\"github.com/cosmos/cosmos-sdk/codec\"\n\tsdk \"github.com/cosmos/cosmos-sdk/types\"\n\tauthtypes \"github.com/cosmos/cosmos-sdk/x/auth/types\"\n)\n\nvar AccountsPrefix = collections.NewPrefix(0)\n\ntype Keeper struct {\n\tSchema   collections.Schema\n\tAccounts collections.Map[uint64, authtypes.BaseAccount]\n}\n\nfunc NewKeeper(storeKey *storetypes.KVStoreKey, cdc codec.BinaryCodec) Keeper {\n\tsb := collections.NewSchemaBuilder(sdk.OpenKVStore(storeKey))\n\treturn Keeper{\n\t\tAccounts: collections.NewMap(sb, AccountsPrefix, \"accounts\", collections.Uint64Key, codec.CollValue[authtypes.BaseAccount](cdc)),\n\t}\n}\n\nfunc (k Keeper) GetAllAccounts(ctx sdk.Context) ([]authtypes.BaseAccount, error) {\n\t// passing a nil Ranger equals to: iterate over every possible key\n\titer, err := k.Accounts.Iterate(ctx, nil)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\taccounts, err := iter.Values()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn accounts, err\n}\n\nfunc (k Keeper) IterateAccountsBetween(ctx sdk.Context, start, end uint64) ([]authtypes.BaseAccount, error) {\n\t// The collections.Range API offers a lot of capabilities\n\t// like defining where the iteration starts or ends.\n\trng := new(collections.Range[uint64]).\n\t\tStartInclusive(start).\n\t\tEndExclusive(end).\n\t\tDescending()\n\n\titer, err := k.Accounts.Iterate(ctx, rng)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\taccounts, err := iter.Values()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn accounts, nil\n}\n\nfunc (k Keeper) IterateAccounts(ctx sdk.Context, do func(id uint64, acc authtypes.BaseAccount) (stop bool)) error {\n\titer, err := k.Accounts.Iterate(ctx, nil)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer iter.Close()\n\n\tfor ; iter.Valid(); iter.Next() {\n\t\tkv, err := iter.KeyValue()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tif do(kv.Key, kv.Value) {\n\t\t\tbreak\n\t\t}\n\t}\n\treturn nil\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Bank Keeper Interface in Go\nDESCRIPTION: The Keeper interface defines all functionality for the bank module, including methods for transferring coins between accounts and modules, minting/burning coins, and managing denominations. This is the full-permission interface that provides complete access to modify account balances.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/bank/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// Keeper defines a module interface that facilitates the transfer of coins\n// between accounts.\ntype Keeper interface {\n    SendKeeper\n    WithMintCoinsRestriction(MintingRestrictionFn) BaseKeeper\n\n    InitGenesis(context.Context, *types.GenesisState)\n    ExportGenesis(context.Context) *types.GenesisState\n\n    GetSupply(ctx context.Context, denom string) sdk.Coin\n    HasSupply(ctx context.Context, denom string) bool\n    GetPaginatedTotalSupply(ctx context.Context, pagination *query.PageRequest) (sdk.Coins, *query.PageResponse, error)\n    IterateTotalSupply(ctx context.Context, cb func(sdk.Coin) bool)\n    GetDenomMetaData(ctx context.Context, denom string) (types.Metadata, bool)\n    HasDenomMetaData(ctx context.Context, denom string) bool\n    SetDenomMetaData(ctx context.Context, denomMetaData types.Metadata)\n    IterateAllDenomMetaData(ctx context.Context, cb func(types.Metadata) bool)\n\n    SendCoinsFromModuleToAccount(ctx context.Context, senderModule string, recipientAddr sdk.AccAddress, amt sdk.Coins) error\n    SendCoinsFromModuleToModule(ctx context.Context, senderModule, recipientModule string, amt sdk.Coins) error\n    SendCoinsFromAccountToModule(ctx context.Context, senderAddr sdk.AccAddress, recipientModule string, amt sdk.Coins) error\n    DelegateCoinsFromAccountToModule(ctx context.Context, senderAddr sdk.AccAddress, recipientModule string, amt sdk.Coins) error\n    UndelegateCoinsFromModuleToAccount(ctx context.Context, senderModule string, recipientAddr sdk.AccAddress, amt sdk.Coins) error\n    MintCoins(ctx context.Context, moduleName string, amt sdk.Coins) error\n    BurnCoins(ctx context.Context, moduleName string, amt sdk.Coins) error\n\n    DelegateCoins(ctx context.Context, delegatorAddr, moduleAccAddr sdk.AccAddress, amt sdk.Coins) error\n    UndelegateCoins(ctx context.Context, moduleAccAddr, delegatorAddr sdk.AccAddress, amt sdk.Coins) error\n\n    // GetAuthority gets the address capable of executing governance proposal messages. Usually the gov module account.\n    GetAuthority() string\n\n    types.QueryServer\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Transaction Flags to Cobra Command - Go (Reference)\nDESCRIPTION: This is a reference to the AddTxFlagsToCmd function in the Cosmos SDK, which attaches a standardized set of transaction-related flags to a Cobra command. The function ensures all necessary flags for transaction submission (fees, gas prices, etc.) are present. Developers should use this instead of manually adding each transaction-related flag. The linked code is in the Cosmos SDK client/flags package.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-modules/09-module-interfaces.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/client/flags/flags.go#L108-L138\n```\n\n----------------------------------------\n\nTITLE: Consuming Gas Using the Context GasMeter in Go\nDESCRIPTION: This Go snippet illustrates the standard pattern for consuming gas within the Cosmos SDK. It accesses the application's main gas meter via `ctx.GasMeter()` and calls the `ConsumeGas` method, passing the amount of gas to consume and a string descriptor for context (e.g., identifying the operation causing the consumption). This ensures resource usage is tracked against the transaction's or block's limit.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/beginner/04-gas-fees.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nctx.GasMeter().ConsumeGas(amount, \"description\")\n```\n\n----------------------------------------\n\nTITLE: Chaining AnteDecorators into an AnteHandler in Go\nDESCRIPTION: Provides the `ChainAnteDecorators` function in Go, which recursively links multiple `AnteDecorator` implementations into a single `AnteHandler` function. This resulting handler can then be set in the base application, preserving the existing single AnteHandler interface while enabling the decorator pattern.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-010-modular-antehandler.md#2025-04-22_snippet_12\n\nLANGUAGE: go\nCODE:\n```\n// ChainAnteDecorators will recursively link all of the AnteDecorators in the chain and return a final AnteHandler function\n// This is done to preserve the ability to set a single AnteHandler function in the baseapp.\nfunc ChainAnteDecorators(chain ...AnteDecorator) AnteHandler {\n    if len(chain) == 1 {\n        return func(ctx Context, tx Tx, simulate bool) {\n            chain[0].AnteHandle(ctx, tx, simulate, nil)\n        }\n    }\n    return func(ctx Context, tx Tx, simulate bool) {\n        chain[0].AnteHandle(ctx, tx, simulate, ChainAnteDecorators(chain[1:]))\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding ProtocolPool Module to Module Manager\nDESCRIPTION: Adds the ProtocolPool module to the application's module manager with its dependencies.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/UPGRADE_GUIDE.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\napp.ModuleManager = module.NewManager(\n    // ...\n    protocolpool.NewAppModule(appCodec, app.ProtocolPoolKeeper, app.AccountKeeper, app.BankKeeper),\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Typed Event in Protobuf for Gov Module\nDESCRIPTION: Example of defining a typed event (EventSubmitProposal) in protobuf for the gov module's MsgSubmitProposal.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-032-typed-events.md#2025-04-22_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\n// proto/cosmos/gov/v1beta1/gov.proto\n// Add typed event definition\n\npackage cosmos.gov.v1beta1;\n\nmessage EventSubmitProposal {\n    string from_address   = 1;\n    uint64 proposal_id    = 2;\n    TextProposal proposal = 3;\n}\n```\n\n----------------------------------------\n\nTITLE: Providing the Module with ProvideModule Function (Cosmos SDK, Go)\nDESCRIPTION: This snippet references the ProvideModule function. It consumes inputs (dependencies) to produce outputs (provided module components) for the application. The function must return an instance implementing the appmodule.AppModule interface, enabling initialization within the wiring container. Inputs are depinject.In-based structs; outputs are depinject.Out-based structs. All must be public for depinject to recognize them.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-modules/15-depinject.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nreference\\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/x/group/module/module.go#L220-L235\n```\n\n----------------------------------------\n\nTITLE: Migrating Antehandler Setup to TxHandler Middleware in Go (app.go)\nDESCRIPTION: This code diff illustrates the necessary changes in `app.go` when migrating from the legacy Antehandler setup to the new Middleware-based TxHandler system in the Cosmos SDK. It shows the removal of `ante.NewAnteHandler` and `app.SetAnteHandler` calls and their replacement with `authmiddleware.NewDefaultTxHandler` and `app.SetTxHandler`, highlighting the different options required for initialization.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-045-check-delivertx-middlewares.md#2025-04-22_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n```diff\n- anteHandler, err := ante.NewAnteHandler(\n-    ante.HandlerOptions{\n-        AccountKeeper:   app.AccountKeeper,\n-        BankKeeper:      app.BankKeeper,\n-        SignModeHandler: encodingConfig.TxConfig.SignModeHandler(),\n-        FeegrantKeeper:  app.FeeGrantKeeper,\n-        SigGasConsumer:  ante.DefaultSigVerificationGasConsumer,\n-    },\n-)\n+txHandler, err := authmiddleware.NewDefaultTxHandler(authmiddleware.TxHandlerOptions{\n+    Debug:             app.Trace(),\n+    IndexEvents:       indexEvents,\n+    LegacyRouter:      app.legacyRouter,\n+    MsgServiceRouter:  app.msgSvcRouter,\n+    LegacyAnteHandler: anteHandler,\n+    TxDecoder:         encodingConfig.TxConfig.TxDecoder,\n+})\nif err != nil {\n    panic(err)\n}\n- app.SetAnteHandler(anteHandler)\n+ app.SetTxHandler(txHandler)\n```\n```\n\n----------------------------------------\n\nTITLE: Composing Transaction Middlewares in Application Setup\nDESCRIPTION: Setting up the transaction handler in the application by composing multiple middlewares together. Shows how to create the middleware stack and set it in BaseApp.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-045-check-delivertx-middlewares.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// simapp/app.go\n\ntxHandler := middleware.ComposeMiddlewares(...)\napp.SetTxHandler(txHandler)\n```\n\n----------------------------------------\n\nTITLE: Defining Configurator Interface for Module Wiring in Go\nDESCRIPTION: Extends the Configurator interface to include ModuleKey and RequireServer methods for module dependency management.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-033-protobuf-inter-module-comm.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\ntype Configurator interface {\n   MsgServer() grpc.Server\n   QueryServer() grpc.Server\n\n   ModuleKey() ModuleKey\n   RequireServer(msgServer interface{})\n}\n```\n\n----------------------------------------\n\nTITLE: Using Amino Annotations for Backward Compatibility\nDESCRIPTION: This snippet describes using Amino annotations to maintain backward compatibility in encoding/decoding operations within Cosmos SDK after the removal of the Amino codec. It includes `amino.name`, `amino.field_name`, and other options, detailing their roles in user visibility and internal processing. Dependencies include configuring the environment to use Amino only for backward compatibility purposes.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-modules/05-protobuf-annotations.md#2025-04-22_snippet_4\n\nLANGUAGE: proto\nCODE:\n```\noption (amino.name) = \"cosmos-sdk/BaseAccount\";\n```\n\nLANGUAGE: proto\nCODE:\n```\nuint64 height = 1 [(amino.field_name) = \"public_key\"];\n```\n\nLANGUAGE: proto\nCODE:\n```\nrepeated cosmos.base.v1beta1.Coin amount = 3 [(amino.dont_omitempty)   = true];\n```\n\nLANGUAGE: proto\nCODE:\n```\n(amino.encoding)         = \"legacy_coins\",\n```\n\n----------------------------------------\n\nTITLE: Implementing Triple Key Collections for Redelegations in Cosmos SDK\nDESCRIPTION: Demonstrates how to use collections.Triple for implementing redelegations in a Cosmos SDK keeper. The example shows the keeper structure setup and methods for querying redelegations by delegator and validator addresses.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/collections/README.md#2025-04-22_snippet_17\n\nLANGUAGE: go\nCODE:\n```\npackage example\n\nimport (\n \"context\"\n\n \"cosmossdk.io/collections\"\n storetypes \"cosmossdk.io/store/types\"\n \"github.com/cosmos/cosmos-sdk/codec\"\n)\n\ntype AccAddress = string\ntype ValAddress = string\n\ntype Keeper struct {\n // let's simulate we have redelegations which are stored as a triple key composed of\n // the delegator, the source validator and the destination validator.\n Redelegations collections.KeySet[collections.Triple[AccAddress, ValAddress, ValAddress]]\n}\n\nfunc NewKeeper(storeKey *storetypes.KVStoreKey) Keeper {\n sb := collections.NewSchemaBuilder(sdk.OpenKVStore(storeKey))\n return Keeper{\n  Redelegations: collections.NewKeySet(sb, collections.NewPrefix(0), \"redelegations\", collections.TripleKeyCodec(collections.StringKey, collections.StringKey, collections.StringKey)\n }\n}\n\n// RedelegationsByDelegator iterates over all the redelegations of a given delegator and calls onResult providing\n// each redelegation from source validator towards the destination validator.\nfunc (k Keeper) RedelegationsByDelegator(ctx context.Context, delegator AccAddress, onResult func(src, dst ValAddress) (stop bool, err error)) error {\n rng := collections.NewPrefixedTripleRange[AccAddress, ValAddress, ValAddress](delegator)\n return k.Redelegations.Walk(ctx, rng, func(key collections.Triple[AccAddress, ValAddress, ValAddress]) (stop bool, err error) {\n  return onResult(key.K2(), key.K3())\n })\n}\n\n// RedelegationsByDelegatorAndValidator iterates over all the redelegations of a given delegator and its source validator and calls onResult for each\n// destination validator.\nfunc (k Keeper) RedelegationsByDelegatorAndValidator(ctx context.Context, delegator AccAddress, validator ValAddress, onResult func(dst ValAddress) (stop bool, err error)) error {\n rng := collections.NewSuperPrefixedTripleRange[AccAddress, ValAddress, ValAddress](delegator, validator)\n return k.Redelegations.Walk(ctx, rng, func(key collections.Triple[AccAddress, ValAddress, ValAddress]) (stop bool, err error) {\n  return onResult(key.K3())\n })\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Class Structure in Protobuf for NFT Collections\nDESCRIPTION: Protocol buffer definition for the Class type which represents an NFT collection, similar to an ERC-721 smart contract. It contains metadata about the collection including ID, name, symbol, description, and URIs.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-043-nft-module.md#2025-04-22_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage Class {\n  string id          = 1;\n  string name        = 2;\n  string symbol      = 3;\n  string description = 4;\n  string uri         = 5;\n  string uri_hash    = 6;\n  google.protobuf.Any data = 7;\n}\n```\n\n----------------------------------------\n\nTITLE: Transaction Command Function in Go\nDESCRIPTION: This Go function adds transaction capabilities to the CLI by aggregating subcommands like sign, broadcast, and module transaction commands into the root command. It enables transaction creation and handling for users of the Cosmos SDK application.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/advanced/07-cli.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/simapp/simd/cmd/root_v2.go#L222-L229\n```\n\n----------------------------------------\n\nTITLE: Migrating Validator Set for Testnet Initialization (Go)\nDESCRIPTION: This snippet demonstrates how to create a new validator, clear out existing validator power and last validators state, and insert the new validator in the staking store. All old validators are removed to simulate a simplified network. The function uses Cosmos SDK APIs, expects initialized context, and handles error cases by panicking or exiting, ensuring the validator set is strictly reset.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-apps/05-app-testnet.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n  ctx := app.BaseApp.NewUncachedContext(true, tmproto.Header{})\n  pubkey := &ed25519.PubKey{Key: newValPubKey.Bytes()}\n  pubkeyAny, err := types.NewAnyWithValue(pubkey)\n  if err != nil {\n    tmos.Exit(err.Error())\n  }\n\n  // STAKING\n  //\n\n  // Create Validator struct for our new validator.\n  _, bz, err := bech32.DecodeAndConvert(newOperatorAddress)\n  if err != nil {\n    tmos.Exit(err.Error())\n  }\n  bech32Addr, err := bech32.ConvertAndEncode(\"simvaloper\", bz)\n  if err != nil {\n    tmos.Exit(err.Error())\n  }\n  newVal := stakingtypes.Validator{\n    OperatorAddress: bech32Addr,\n    ConsensusPubkey: pubkeyAny,\n    Jailed:          false,\n    Status:          stakingtypes.Bonded,\n    Tokens:          sdk.NewInt(900000000000000),\n    DelegatorShares: sdk.MustNewDecFromStr(\"10000000\"),\n    Description: stakingtypes.Description{\n      Moniker: \"Testnet Validator\",\n    },\n    Commission: stakingtypes.Commission{\n      CommissionRates: stakingtypes.CommissionRates{\n        Rate:          sdk.MustNewDecFromStr(\"0.05\"),\n        MaxRate:       sdk.MustNewDecFromStr(\"0.1\"),\n        MaxChangeRate: sdk.MustNewDecFromStr(\"0.05\"),\n      },\n    },\n    MinSelfDelegation: sdk.OneInt(),\n  }\n\n  // Remove all validators from power store\n  stakingKey := app.GetKey(stakingtypes.ModuleName)\n  stakingStore := ctx.KVStore(stakingKey)\n  iterator := app.StakingKeeper.ValidatorsPowerStoreIterator(ctx)\n  for ; iterator.Valid(); iterator.Next() {\n    stakingStore.Delete(iterator.Key())\n  }\n  iterator.Close()\n\n  // Remove all validators from last validators store\n  iterator = app.StakingKeeper.LastValidatorsIterator(ctx)\n  for ; iterator.Valid(); iterator.Next() {\n    app.StakingKeeper.LastValidatorPower.Delete(iterator.Key())\n  }\n  iterator.Close()\n\n  // Add our validator to power and last validators store\n  app.StakingKeeper.SetValidator(ctx, newVal)\n  err = app.StakingKeeper.SetValidatorByConsAddr(ctx, newVal)\n  if err != nil {\n    panic(err)\n  }\n  app.StakingKeeper.SetValidatorByPowerIndex(ctx, newVal)\n  app.StakingKeeper.SetLastValidatorPower(ctx, newVal.GetOperator(), 0)\n  if err := app.StakingKeeper.Hooks().AfterValidatorCreated(ctx, newVal.GetOperator()); err != nil {\n    panic(err)\n  }\n```\n\n----------------------------------------\n\nTITLE: Registering Migration Functions in Cosmos SDK Modules (Go)\nDESCRIPTION: This Go snippet demonstrates how to register migration functions for a Cosmos SDK module within the `RegisterServices` method using the `module.Configurator`. It shows registering sequential migrations for versions 1 and 2, which execute during upgrades to handle state changes between consensus versions. The functions receive an `sdk.Context` and return an error.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-modules/13-upgrade.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n```go\nfunc (am AppModule) RegisterServices(cfg module.Configurator) {\n    // --snip--\n    cfg.RegisterMigration(types.ModuleName, 1, func(ctx sdk.Context) error {\n        // Perform in-place store migrations from ConsensusVersion 1 to 2.\n    })\n     cfg.RegisterMigration(types.ModuleName, 2, func(ctx sdk.Context) error {\n        // Perform in-place store migrations from ConsensusVersion 2 to 3.\n    })\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining MsgCancelUnbondingDelegation Message Structure in Cosmos SDK\nDESCRIPTION: Protobuf definition for the MsgCancelUnbondingDelegation message structure that specifies the delegator address, validator address, amount, and creation height. These parameters are used to identify and cancel a specific unbonding delegation entry.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/staking/README.md#2025-04-22_snippet_15\n\nLANGUAGE: protobuf\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.47.0-rc1/proto/cosmos/staking/v1beta1/tx.proto#L160-L175\n```\n\n----------------------------------------\n\nTITLE: Defining App Configuration Structure in Protobuf\nDESCRIPTION: This Protobuf snippet defines the core structure for the declarative app configuration. It includes a top-level `Config` message containing a list of `ModuleConfig` messages. Each `ModuleConfig` specifies a module's unique short `name` and its specific configuration using `google.protobuf.Any`, allowing different module configuration types. This structure forms the basis for the declarative app setup.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-057-app-wiring.md#2025-04-22_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\npackage cosmos.app.v1;\n\nmessage Config {\n  repeated ModuleConfig modules = 1;\n}\n\nmessage ModuleConfig {\n  string name = 1;\n  google.protobuf.Any config = 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Evidence Submission Logic in Go\nDESCRIPTION: Implementation of the SubmitEvidence function that handles evidence submission, routing to appropriate handlers, and state persistence. It includes checks for duplicate evidence and handler existence.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/evidence/README.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfunc SubmitEvidence(ctx Context, evidence Evidence) error {\n  if _, err := GetEvidence(ctx, evidence.Hash()); err == nil {\n    return errorsmod.Wrap(types.ErrEvidenceExists, strings.ToUpper(hex.EncodeToString(evidence.Hash())))\n  }\n  if !router.HasRoute(evidence.Route()) {\n    return errorsmod.Wrap(types.ErrNoEvidenceHandlerExists, evidence.Route())\n  }\n\n  handler := router.GetRoute(evidence.Route())\n  if err := handler(ctx, evidence); err != nil {\n    return errorsmod.Wrap(types.ErrInvalidEvidence, err.Error())\n  }\n\n  ctx.EventManager().EmitEvent(\n\t\tsdk.NewEvent(\n\t\t\ttypes.EventTypeSubmitEvidence,\n\t\t\tsdk.NewAttribute(types.AttributeKeyEvidenceHash, strings.ToUpper(hex.EncodeToString(evidence.Hash()))),\n\t\t),\n\t)\n\n  SetEvidence(ctx, evidence)\n  return nil\n}\n```\n\n----------------------------------------\n\nTITLE: Defining HasPrepareCheckState Interface in Go\nDESCRIPTION: The `HasPrepareCheckState` Go interface extends `appmodule.AppModule`. Modules implementing this provide a `PrepareCheckState` method (represented by the linked `Precommit` code) for logic executed during the `Commit` phase, using the `checkState` of the *next* block. It takes a `context.Context`. Implement as empty if no logic is needed.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-modules/01-module-manager.md#2025-04-22_snippet_16\n\nLANGUAGE: go\nCODE:\n```\n```go reference\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/core/appmodule/module.go#L49-L52\n```\n```\n\n----------------------------------------\n\nTITLE: Integrating App Module with SimulationManager in Go\nDESCRIPTION: This code snippet suggests the implementation of a custom Cool App with a Simulation Manager as a part of its structure. The Simulation Manager is pivotal in managing module simulations for the application. The Sample App constructor utilizes modules from Module Manager to establish the Simulation Manager and the RegisterStoreDecoders method. Customization and configuration adjustments within modules are achievable by overriding module settings during this setup.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-modules/14-simulator.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype CoolApp struct {\n...\nsm *module.SimulationManager\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Multiple Unordered Transactions in Go\nDESCRIPTION: Demonstrates how to handle multiple unordered transactions by ensuring each has a unique timeout timestamp. This is necessary to avoid transaction conflicts from the same account.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/user/run-node/03-txs.md#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"github.com/cosmos/cosmos-sdk/client\"\n)\n\nfunc sendMessages(txBuilders []client.TxBuilder) error {\n    // --snip--\n    expiration := 5 * time.Minute\n    for _, txb := range txBuilders {\n        txb.SetUnordered(true)\n        txb.SetTimeoutTimestamp(time.Now().Add(expiration + (1 * time.Nanosecond)))\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Canceling a Governance Proposal in Cosmos SDK\nDESCRIPTION: A practical example showing how to cancel proposal ID 1 from a specific account address.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/README.md#2025-04-22_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nsimd tx gov cancel-proposal 1 --from cosmos1...\n```\n\n----------------------------------------\n\nTITLE: Skipping Upgrades Using Command Line in Cosmos SDK (Shell)\nDESCRIPTION: Provides a command to skip scheduled upgrades manually using the start command with a flag. Use cases: emergency scenarios where upgrades need to be bypassed without performing the migration. Parameters include unsafe skip flags and targeted height values.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-apps/03-app-upgrade.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n<appd> start --unsafe-skip-upgrades <height1> <optional_height_2> ... <optional_height_N>\n```\n\n----------------------------------------\n\nTITLE: Populating a Transaction with Bank Messages in Go\nDESCRIPTION: Demonstrates creating and configuring a transaction with multiple MsgSend messages using the TxBuilder. This sets up the transaction's core content before signing.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/user/run-node/03-txs.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\tbanktypes \"github.com/cosmos/cosmos-sdk/x/bank/types\"\n)\n\nfunc sendTx() error {\n    // --snip--\n\n    // Define two x/bank MsgSend messages:\n    // - from addr1 to addr3,\n    // - from addr2 to addr3.\n    // This means that the transactions needs two signers: addr1 and addr2.\n    msg1 := banktypes.NewMsgSend(addr1, addr3, types.NewCoins(types.NewInt64Coin(\"atom\", 12)))\n    msg2 := banktypes.NewMsgSend(addr2, addr3, types.NewCoins(types.NewInt64Coin(\"atom\", 34)))\n\n    err := txBuilder.SetMsgs(msg1, msg2)\n    if err != nil {\n        return err\n    }\n\n    txBuilder.SetGasLimit(...)\n    txBuilder.SetFeeAmount(...)\n    txBuilder.SetMemo(...)\n    txBuilder.SetTimeoutHeight(...)\n}\n```\n\n----------------------------------------\n\nTITLE: Working with Composite Keys for Balances in Cosmos SDK\nDESCRIPTION: This snippet showcases setting and retrieving balances using composite keys in Cosmos SDK. It includes methods for setting balances using `collections.Join` to generate composite keys and iterates over keys with `collections.PrefixedPairRange`. Methods demonstrated include `SetBalance`, `GetBalance`, and `GetAllAddressBalances`.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/collections/README.md#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nvar BalancesPrefix = collections.NewPrefix(1)\n\ntype Keeper struct {\n\tSchema   collections.Schema\n\tBalances collections.Map[collections.Pair[sdk.AccAddress, string], math.Int]\n}\n\nfunc NewKeeper(storeKey *storetypes.KVStoreKey) Keeper {\n\tsb := collections.NewSchemaBuilder(sdk.OpenKVStore(storeKey))\n\treturn Keeper{\n\t\tBalances: collections.NewMap(\n\t\t\tsb, BalancesPrefix, \"balances\",\n\t\t\tcollections.PairKeyCodec(sdk.AccAddressKey, collections.StringKey),\n\t\t\tsdk.IntValue,\n\t\t),\n\t}\n}\n\nfunc (k Keeper) SetBalance(ctx sdk.Context, address sdk.AccAddress, denom string, amount math.Int) error {\n\tkey := collections.Join(address, denom)\n\treturn k.Balances.Set(ctx, key, amount)\n}\n\nfunc (k Keeper) GetBalance(ctx sdk.Context, address sdk.AccAddress, denom string) (math.Int, error) {\n\treturn k.Balances.Get(ctx, collections.Join(address, denom))\n}\n\nfunc (k Keeper) GetAllAddressBalances(ctx sdk.Context, address sdk.AccAddress) (sdk.Coins, error) {\n\tbalances := sdk.NewCoins()\n\n\trng := collections.NewPrefixedPairRange[sdk.AccAddress, string](address)\n\n\titer, err := k.Balances.Iterate(ctx, rng)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tkvs, err := iter.KeyValues()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tfor _, kv := range kvs {\n\t\tbalances = balances.Add(sdk.NewCoin(kv.Key.K2(), kv.Value))\n\t}\n\treturn balances, nil\n}\n\nfunc (k Keeper) GetAllAddressBalancesBetween(ctx sdk.Context, address sdk.AccAddress, startDenom, endDenom string) (sdk.Coins, error) {\n    rng := collections.NewPrefixedPairRange[sdk.AccAddress, string](address).\n        StartInclusive(startDenom).\n        EndInclusive(endDenom)\n\n    iter, err := k.Balances.Iterate(ctx, rng)\n    if err != nil {\n        return nil, err\n\t}\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing module.HasABCIGenesis Interface Definition in Go\nDESCRIPTION: This Go code reference locates the HasABCIGenesis extension interface in the Cosmos SDK. HasABCIGenesis is used for modules that must both initialize their state from genesis and provide validator set updates, supporting ABCI-related initialization. Implementation assumes dependency on the consensus logic and validator structures.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-modules/01-module-manager.md#2025-04-22_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/6ce2505/types/module/module.go#L191-L196\n```\n\n----------------------------------------\n\nTITLE: Using DerivedModuleKey for Inter-Module Communication in Go\nDESCRIPTION: Demonstrates how to use a DerivedModuleKey to authenticate and send messages from a sub-account in a module.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-033-protobuf-inter-module-comm.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage foo\n\nfunc (fooMsgServer *MsgServer) Bar(ctx context.Context, req *MsgBar) (*MsgBarResponse, error) {\n  derivedKey := fooMsgServer.moduleKey.Derive(req.SomePath)\n  bankMsgClient := bank.NewMsgClient(derivedKey)\n  res, err := bankMsgClient.Balance(ctx, &bank.MsgSend{FromAddress: derivedKey.Address(), ...})\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Unwrapping a Cached Store in Go\nDESCRIPTION: Function to retrieve the underlying CommitKVStore for a given store key. Returns nil if no cache exists for the provided store key.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/spec/store/interblock-cache.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc Unwrap(\n    manager CommitKVStoreCacheManager,\n    storeKey string) CommitKVStore {\n\n    if manager.caches.has(storeKey) {\n        cache = manager.caches.get(storeKey)\n        return cache.store\n    } else {\n        return nil\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updated Staking Module Interface Change\nDESCRIPTION: The MsgUndelegateResponse now includes undelegated amount, and keeper.Undelegate returns 3 values instead of 2.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nkeeper.Undelegate() (completionTime time.Time, undelegateAmount sdk.Int, error)\n```\n\n----------------------------------------\n\nTITLE: Query Grants using gRPC in Cosmos SDK\nDESCRIPTION: gRPC endpoint for querying authorization grants between a granter and grantee, with optional filtering by message type URL.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/authz/README.md#2025-04-22_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\ncosmos.authz.v1beta1.Query/Grants\n```\n\n----------------------------------------\n\nTITLE: Diagramming Validation Process with Mermaid\nDESCRIPTION: This mermaid diagram visualizes the transaction validation process in the Cosmos SDK. It shows the flow from transaction submission by the user, through P2P or RPC to the BaseApp where it gets validated by AnteHandlers. Dependencies: Mermaid for rendering. There are no specific inputs or outputs as this is a static diagram.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/abci/04-checktx.md#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    subgraph SDK[Cosmos SDK]\n        B[Baseapp]\n        A[AnteHandlers]\n        B <-->|Validate TX| A\n    end\n    C[CometBFT] <-->|CheckTx|SDK\n    U((User)) -->|Submit TX| C\n    N[P2P] -->|Receive TX| C\n```\n\n----------------------------------------\n\nTITLE: Querying All Accounts via gRPC in Cosmos SDK\nDESCRIPTION: gRPC endpoint for querying all available accounts in the system. Returns a list of accounts including base accounts and module accounts with their respective permissions and details.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/auth/README.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ncosmos.auth.v1beta1.Query/Accounts\n```\n\nLANGUAGE: bash\nCODE:\n```\ngrpcurl -plaintext \\\n    localhost:9090 \\\n    cosmos.auth.v1beta1.Query/Accounts\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"accounts\":[\n      {\n         \"@type\":\"/cosmos.auth.v1beta1.BaseAccount\",\n         \"address\":\"cosmos1zwg6tpl8aw4rawv8sgag9086lpw5hv33u5ctr2\",\n         \"pubKey\":{\n            \"@type\":\"/cosmos.crypto.secp256k1.PubKey\",\n            \"key\":\"ApDrE38zZdd7wLmFS9YmqO684y5DG6fjZ4rVeihF/AQD\"\n         },\n         \"sequence\":\"1\"\n      },\n      {\n         \"@type\":\"/cosmos.auth.v1beta1.ModuleAccount\",\n         \"baseAccount\":{\n            \"address\":\"cosmos1yl6hdjhmkf37639730gffanpzndzdpmhwlkfhr\",\n            \"accountNumber\":\"8\"\n         },\n         \"name\":\"transfer\",\n         \"permissions\":[\n            \"minter\",\n            \"burner\"\n         ]\n      },\n      {\n         \"@type\":\"/cosmos.auth.v1beta1.ModuleAccount\",\n         \"baseAccount\":{\n            \"address\":\"cosmos1fl48vsnmsdzcv85q5d2q4z5ajdha8yu34mf0eh\",\n            \"accountNumber\":\"4\"\n         },\n         \"name\":\"bonded_tokens_pool\",\n         \"permissions\":[\n            \"burner\",\n            \"staking\"\n         ]\n      },\n      {\n         \"@type\":\"/cosmos.auth.v1beta1.ModuleAccount\",\n         \"baseAccount\":{\n            \"address\":\"cosmos1tygms3xhhs3yv487phx3dw4a95jn7t7lpm470r\",\n            \"accountNumber\":\"5\"\n         },\n         \"name\":\"not_bonded_tokens_pool\",\n         \"permissions\":[\n            \"burner\",\n            \"staking\"\n         ]\n      },\n      {\n         \"@type\":\"/cosmos.auth.v1beta1.ModuleAccount\",\n         \"baseAccount\":{\n            \"address\":\"cosmos10d07y265gmmuvt4z0w9aw880jnsr700j6zn9kn\",\n            \"accountNumber\":\"6\"\n         },\n         \"name\":\"gov\",\n         \"permissions\":[\n            \"burner\"\n         ]\n      },\n      {\n         \"@type\":\"/cosmos.auth.v1beta1.ModuleAccount\",\n         \"baseAccount\":{\n            \"address\":\"cosmos1jv65s3grqf6v6jl3dp4t6c9t9rk99cd88lyufl\",\n            \"accountNumber\":\"3\"\n         },\n         \"name\":\"distribution\"\n      },\n      {\n         \"@type\":\"/cosmos.auth.v1beta1.BaseAccount\",\n         \"accountNumber\":\"1\",\n         \"address\":\"cosmos147k3r7v2tvwqhcmaxcfql7j8rmkrlsemxshd3j\"\n      },\n      {\n         \"@type\":\"/cosmos.auth.v1beta1.ModuleAccount\",\n         \"baseAccount\":{\n            \"address\":\"cosmos1m3h30wlvsf8llruxtpukdvsy0km2kum8g38c8q\",\n            \"accountNumber\":\"7\"\n         },\n         \"name\":\"mint\",\n         \"permissions\":[\n            \"minter\"\n         ]\n      },\n      {\n         \"@type\":\"/cosmos.auth.v1beta1.ModuleAccount\",\n         \"baseAccount\":{\n            \"address\":\"cosmos17xpfvakm2amg962yls6f84z3kell8c5lserqta\",\n            \"accountNumber\":\"2\"\n         },\n         \"name\":\"fee_collector\"\n      }\n   ],\n   \"pagination\":{\n      \"total\":\"9\"\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AccountKeeperI Interface in Go for Cosmos SDK\nDESCRIPTION: This interface defines the contract that the auth module's keeper implements. It provides methods for creating, retrieving, and managing accounts including address-based account operations, public key and sequence retrieval, and account iteration.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/auth/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// AccountKeeperI is the interface contract that x/auth's keeper implements.\ntype AccountKeeperI interface {\n\t// Return a new account with the next account number and the specified address. Does not save the new account to the store.\n\tNewAccountWithAddress(sdk.Context, sdk.AccAddress) types.AccountI\n\n\t// Return a new account with the next account number. Does not save the new account to the store.\n\tNewAccount(sdk.Context, types.AccountI) types.AccountI\n\n\t// Check if an account exists in the store.\n\tHasAccount(sdk.Context, sdk.AccAddress) bool\n\n\t// Retrieve an account from the store.\n\tGetAccount(sdk.Context, sdk.AccAddress) types.AccountI\n\n\t// Set an account in the store.\n\tSetAccount(sdk.Context, types.AccountI)\n\n\t// Remove an account from the store.\n\tRemoveAccount(sdk.Context, types.AccountI)\n\n\t// Iterate over all accounts, calling the provided function. Stop iteration when it returns true.\n\tIterateAccounts(sdk.Context, func(types.AccountI) bool)\n\n\t// Fetch the public key of an account at a specified address\n\tGetPubKey(sdk.Context, sdk.AccAddress) (crypto.PubKey, error)\n\n\t// Fetch the sequence of an account at a specified address.\n\tGetSequence(sdk.Context, sdk.AccAddress) (uint64, error)\n\n\t// Fetch the next account number, and increment the internal counter.\n\tNextAccountNumber(sdk.Context) uint64\n}\n```\n\n----------------------------------------\n\nTITLE: Aggregating Query Commands in Cosmos SDK Module\nDESCRIPTION: Describes the functionality of `GetQueryCmd()` to gather all query commands for a specific module, ensuring straightforward integration into the larger command set. It underlines the use of the Cobra library for command creation.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-modules/09-module-interfaces.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/x/auth/client/cli/query.go#L33-L53\n```\n\n----------------------------------------\n\nTITLE: Revoke Authorization Example in Cosmos SDK\nDESCRIPTION: Example of revoking a send authorization from a grantee address.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/authz/README.md#2025-04-22_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nsimd tx authz revoke cosmos1.. /cosmos.bank.v1beta1.MsgSend --from=cosmos1..\n```\n\n----------------------------------------\n\nTITLE: Implementing SendAuthorization in Go for Bank Module Integration\nDESCRIPTION: Implementation of the Authorization interface for the bank module's MsgSend. It allows setting a spend limit that decreases as tokens are spent, and automatically revokes the authorization when the limit reaches zero.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-030-authz-module.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype SendAuthorization struct {\n\t// SpendLimit specifies the maximum amount of tokens that can be spent\n\t// by this authorization and will be updated as tokens are spent. This field is required. (Generic authorization \n\t// can be used with bank msg type url to create limit less bank authorization).\n\tSpendLimit sdk.Coins\n}\n\nfunc (a SendAuthorization) MsgTypeURL() string {\n\treturn sdk.MsgTypeURL(&MsgSend{})\n}\n\nfunc (a SendAuthorization) Accept(ctx sdk.Context, msg sdk.Msg) (authz.AcceptResponse, error) {\n\tmSend, ok := msg.(*MsgSend)\n\tif !ok {\n\t\treturn authz.AcceptResponse{}, sdkerrors.ErrInvalidType.Wrap(\"type mismatch\")\n\t}\n\tlimitLeft, isNegative := a.SpendLimit.SafeSub(mSend.Amount)\n\tif isNegative {\n\t\treturn authz.AcceptResponse{}, sdkerrors.ErrInsufficientFunds.Wrapf(\"requested amount is more than spend limit\")\n\t}\n\tif limitLeft.IsZero() {\n\t\treturn authz.AcceptResponse{Accept: true, Delete: true}, nil\n\t}\n\n\treturn authz.AcceptResponse{Accept: true, Delete: false, Updated: &SendAuthorization{SpendLimit: limitLeft}}, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Module State from GenesisState - Go\nDESCRIPTION: This code reference shows the InitGenesis implementation in the auth module's keeper. It demonstrates how to initialize the module's persistent state from a GenesisState object by using keeper setter methods. Dependencies include the keeper, GenesisState, and Cosmos SDK infrastructure. Inputs are context and GenesisState; outputs are updated module state as part of the chain's initial block.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-modules/08-genesis.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/x/auth/keeper/genesis.go#L8-L35\n```\n\n----------------------------------------\n\nTITLE: Constructing Account Address from Public Key - Cosmos SDK Go\nDESCRIPTION: This Go code snippet demonstrates how to construct an account address from a public key in the Cosmos SDK. The expression wraps the byte representation of the public key address with the sdk.AccAddress type. This relies on the SDK's cryptographic interfaces, and requires importing the Cosmos SDK's 'sdk' and cryptographic types. The required parameter is a public key object 'pub', and the output is an account address in raw byte form. Limitations: Used for programmatic purposes only; for user interaction, Bech32 string encoding should be used.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/beginner/03-accounts.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nsdk.AccAddress(pub.Address().Bytes())\n```\n\n----------------------------------------\n\nTITLE: Defining App Structure in Cosmos SDK\nDESCRIPTION: This code defines the `App` struct in the Cosmos SDK, embedding key components such as `BaseApp` and `ModuleManager`. The struct facilitates the configuration and management of Cosmos SDK applications, allowing developers to embed and leverage the runtime module.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-apps/00-runtime.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype App struct {\n    *baseapp.BaseApp\n    ModuleManager    *module.Manager\n    configurator     module.Configurator\n    config           *runtimev1alpha1.Module\n    storeKeys        []storetypes.StoreKey\n    // ... other fields\n}\n```\n\n----------------------------------------\n\nTITLE: Emitting Legacy Events in Cosmos SDK (Go)\nDESCRIPTION: This Go snippet shows how to emit legacy events, using the older EmitEvent method compatible with string-based attributes, in a Cosmos SDK MsgServer method. The event is constructed with a type identifier and a variable list of key/value attributes, such as eventType (e.g., sdk.EventTypeMessage) and custom attributes. Dependencies include sdk.EventManager, NewEvent, and NewAttribute from the Cosmos SDK. This technique supports any string-based event type, and input parameters are the event type and attribute pairs. Outputs are non-typed events on the EventManager, consumable by external observers.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-modules/03-msg-services.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nctx.EventManager().EmitEvent(\n\tsdk.NewEvent(\n\t\teventType,  // e.g. sdk.EventTypeMessage for a message, types.CustomEventType for a custom event defined in the module\n\t\tsdk.NewAttribute(key1, value1),\n\t\tsdk.NewAttribute(key2, value2),\n\t),\n)\n```\n\n----------------------------------------\n\nTITLE: Example Declarative App Configuration in YAML\nDESCRIPTION: This YAML snippet provides an example of how the declarative app configuration, defined by the Protobuf structure, might look when serialized. It lists modules like `baseapp`, `auth`, `bank`, and `staking`, specifying their names and linking to their respective Protobuf configuration types using `@type`. It also demonstrates module-specific configuration, such as ordering for `begin_blockers` in the `baseapp` module and `bech32_prefix` for the `auth` module. This format allows developers to define application composition declaratively.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-057-app-wiring.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nmodules:\n  - name: baseapp\n    config:\n      \"@type\": cosmos.baseapp.module.v1.Module\n      begin_blockers: [staking, auth, bank]\n      end_blockers: [bank, auth, staking]\n      init_genesis: [bank, auth, staking]\n  - name: auth\n    config:\n      \"@type\": cosmos.auth.module.v1.Module\n      bech32_prefix: \"foo\"\n  - name: bank\n    config:\n      \"@type\": cosmos.bank.module.v1.Module\n  - name: staking\n    config:\n      \"@type\": cosmos.staking.module.v1.Module\n```\n\n----------------------------------------\n\nTITLE: Querying Validators\nDESCRIPTION: REST endpoint to retrieve information about all validators matching a given status including their commission rates, delegation shares, and descriptions.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/staking/README.md#2025-04-22_snippet_63\n\nLANGUAGE: bash\nCODE:\n```\n/cosmos/staking/v1beta1/validators\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \"http://localhost:1317/cosmos/staking/v1beta1/validators\" -H  \"accept: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Extending AppModule Interface for Service Registration\nDESCRIPTION: Modification to the AppModule interface to allow registration of both query and Msg services through a Configurator interface.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-031-msg-service.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype AppModule interface {\n  RegisterServices(Configurator)\n  ...\n}\n\ntype Configurator interface {\n  QueryServer() grpc.Server\n  MsgServer() grpc.Server\n}\n\n// example module:\nfunc (am AppModule) RegisterServices(cfg Configurator) {\n\ttypes.RegisterQueryServer(cfg.QueryServer(), keeper)\n\ttypes.RegisterMsgServer(cfg.MsgServer(), keeper)\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Upgrade Handler with RunMigrations in Go\nDESCRIPTION: Shows how to set up an upgrade handler that uses the RunMigrations method to perform in-place store migrations for all modules during an upgrade.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-041-in-place-store-migrations.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\napp.UpgradeKeeper.SetUpgradeHandler(\"my-plan\", func(ctx sdk.Context, plan upgradetypes.Plan, vm module.VersionMap)  (module.VersionMap, error) {\n    return app.mm.RunMigrations(ctx, vm)\n})\n```\n\n----------------------------------------\n\nTITLE: Adding ProcessProposal Method to Application Interface (Golang)\nDESCRIPTION: This code demonstrates the addition of a `ProcessProposal` method to an application's ABCI interface for Cosmos SDK integration with ABCI 1.0. The method signature requires a `sdk.Context` and an `abci.RequestProcessProposal` as parameters and returns an error. This enforces a contract for processing block proposals deterministically, without committing any state changes, using an internal branched state for transactional integrity. Developers must ensure proper validation of proposals here; dependencies include `sdk.Context` and `abci.RequestProcessProposal` from the Cosmos SDK stack.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-060-abci-1.0.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nProcessProposal(sdk.Context, abci.RequestProcessProposal) error {}\n\n```\n\n----------------------------------------\n\nTITLE: Broadcasting Transactions via gRPC Command Line\nDESCRIPTION: This command demonstrates how to broadcast a transaction using the grpcurl command line tool. It sends a BroadcastTx request to the cosmos.tx.v1beta1.Service service with the protobuf-encoded bytes of a signed transaction.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/user/run-node/03-txs.md#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ngrpcurl -plaintext \\\n    -d '{\"tx_bytes\":\"{{txBytes}}\",\"mode\":\"BROADCAST_MODE_SYNC\"}' \\\n    localhost:9090 \\\n    cosmos.tx.v1beta1.Service/BroadcastTx\n```\n\n----------------------------------------\n\nTITLE: Implementing PostHandler for Custom Post-Transaction Processing in Go\nDESCRIPTION: This code shows the implementation of a PostHandler for custom post-transaction processing. PostHandlers can perform logic after RunMsgs is executed, with access to the execution result, enabling features like unused gas refunds.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/advanced/00-baseapp.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// NewPostHandler returns an empty posthandler\nfunc NewPostHandler(\n\tpassthroughPosthandlers []sdk.AnteDecorator,\n\treturnDataPosthandlers []sdk.AnteDecorator,\n) (sdk.PostHandler, error) {\n\n\treturn sdk.ChainPostHandlers(\n\t\tsdk.Terminator{},\n\t\tpassthroughPosthandlers...,\n\t), nil\n}\n```\n\n----------------------------------------\n\nTITLE: Block Processing in Cosmos SDK\nDESCRIPTION: Implementation of BeginBlocker and EndBlocker in simapp for handling block lifecycle events. These methods are called at the start and end of each block respectively.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/beginner/00-app-anatomy.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfunc (app *SimApp) BeginBlocker(ctx sdk.Context, req abci.RequestBeginBlock) abci.ResponseBeginBlock {\n    return app.mm.BeginBlock(ctx, req)\n}\n\nfunc (app *SimApp) EndBlocker(ctx sdk.Context, req abci.RequestEndBlock) abci.ResponseEndBlock {\n    return app.mm.EndBlock(ctx, req)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ConsensusVersion Method for AppModule Interface in Go\nDESCRIPTION: Introduces a new ConsensusVersion method on the AppModule interface to return the state-breaking version of the module. This version must be incremented on each consensus-breaking change.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-041-in-place-store-migrations.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype AppModule interface {\n    // --snip--\n    ConsensusVersion() uint64\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Root Command Structure in Cosmos SDK\nDESCRIPTION: Example from Gaia (Cosmos Hub) showing the root command implementation that sets up the main CLI interface. Demonstrates how root commands are configured and initialized for a Cosmos SDK application.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/beginner/00-app-anatomy.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nreference https://github.com/cosmos/gaia/blob/26ae7c2/cmd/gaiad/cmd/root.go#L39-L80\n```\n\n----------------------------------------\n\nTITLE: Cancelling Unbonding Delegation in Cosmos SDK\nDESCRIPTION: This command allows users to cancel an unbonding delegation entry and delegate back to the original validator. It requires the validator's address, amount, and creation height of the unbonding delegation.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/staking/README.md#2025-04-22_snippet_40\n\nLANGUAGE: bash\nCODE:\n```\nsimd tx staking cancel-unbond [validator-addr] [amount] [creation-height]\n```\n\nLANGUAGE: bash\nCODE:\n```\nsimd tx staking cancel-unbond cosmosvaloper1gghjut3ccd8ay0zduzj64hwre2fxs9ldmqhffj 100stake 123123 --from mykey\n```\n\n----------------------------------------\n\nTITLE: Setting up Client and Server Context in Cosmos SDK Root Command\nDESCRIPTION: Implementation of PersistentPreRun function for the root command that sets up client and server contexts. This ensures all child commands have access to properly configured contexts.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/advanced/07-cli.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\n// PersistentPreRun is executed before any subcommand runs.\nfunc (r *rootCmdV2) PersistentPreRun(cmd *cobra.Command, _ []string) error {\n\t// set the default command outputs\n\tcmd.SetOut(r.out)\n\tcmd.SetErr(r.err)\n\n\tif err := client.SetCmdClientContextHandler(r.clientCtx, cmd); err != nil {\n\t\treturn err\n\t}\n\n\t// This needs to go after SetCmdClientContextHandler, as it updates the context with the latest viper values.\n\t// TODO: viper is only used to read env variables here, we can simplify this logic\n\t// by directly reading the env variables.\n\n\t// Get the current rough time as soon as possible\n\tr.startTime = time.Now()\n\n\t// Initialize flags that are common to all commands.\n\tr.initializeFlags(cmd)\n\n\t// Bind flags and env vars in case we are using AutoCLI.\n\tr.bindAutoCLIEnvVars(cmd)\n\n\t// If autocli used, EnhanceRootCommand() must have been called by now\n\t// as this is when cobra actually completes the initialization of the command graph.\n\tif cmd.PersistentFlags().Lookup(\"chain-id\") != nil {\n\t\tif err := r.initializeContext(cmd); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Profile Message Accepting Any Interface (Protobuf)\nDESCRIPTION: This snippet redefines the Profile message using Protobuf's Any type to accept any implementation of the AccountI interface, documented by the cosmos_proto.accepts_interface annotation. It enables Profile to contain accounts of any type implementing AccountI, supporting polymorphism in Protobuf serialization. The annotation is informational to code generators. Inputs: any message implementing AccountI. Outputs: Profile messages that store arbitrary account types.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/advanced/05-encoding.md#2025-04-22_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage Profile {\n  // account is the account associated to a profile.\n  google.protobuf.Any account = 1 [\n    (cosmos_proto.accepts_interface) = \"cosmos.auth.v1beta1.AccountI\"; // Asserts that this field only accepts Go types implementing `AccountI`. It is purely informational for now.\n  ];\n  // bio is a short description of the account.\n  string bio = 4;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Signature Verification AnteHandler in Go for Cosmos SDK\nDESCRIPTION: Defines a VerifySignatures function as an AnteHandler micro-function to verify transaction signatures. It returns an error if signatures are invalid.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-010-modular-antehandler.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc VerifySignatures(ctx Context, tx Tx, simulate bool) (newCtx Context, err error) {\n    // verify signatures\n    // Returns InvalidSignature Result and abort=true if sigs invalid\n    // Return OK result and abort=false if sigs are valid\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Module State to GenesisState - Go\nDESCRIPTION: This Go code reference demonstrates ExportGenesis, which creates a GenesisState from the module's current state. It enables the Cosmos SDK to export up-to-date genesis files, primarily for upgrades or migration scenarios. Dependencies are the module keeper and GenesisState; it inputs the current module state and outputs a new GenesisState struct.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-modules/08-genesis.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/x/auth/keeper/genesis.go#L37-L49\n```\n\n----------------------------------------\n\nTITLE: Querying Staking Delegations via REST API (HTTP)\nDESCRIPTION: This snippet illustrates how to query staking delegations by making an HTTP GET request to the application's REST server endpoint. The REST endpoint path typically follows a structure derived from the Protobuf service definition (`/cosmos/staking/v1beta1/delegators/{delegatorAddr}/delegations`), and the server is often auto-generated using gRPC-gateway.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/beginner/02-query-lifecycle.md#2025-04-22_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nGET http://localhost:1317/cosmos/staking/v1beta1/delegators/{delegatorAddr}/delegations\n```\n\n----------------------------------------\n\nTITLE: Emitting Module Metrics in Go using Cosmos SDK Telemetry\nDESCRIPTION: This Go snippet demonstrates how to emit a metric measuring the execution time of a module's `EndBlocker` function. It uses `telemetry.ModuleMeasureSince` which takes the module name, the start time, and a specific metric key as arguments. This requires the `telemetry` package, `time` package, the module's `types` package for the module name, `sdk.Context`, and the module's `keeper`. The metric automatically includes module-specific labels.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/advanced/09-telemetry.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n```go\nfunc EndBlocker(ctx sdk.Context, k keeper.Keeper) {\n  defer telemetry.ModuleMeasureSince(types.ModuleName, time.Now(), telemetry.MetricKeyEndBlocker)\n\n  // ...\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Invalid Examples of 'Since' Comments in Protobuf\nDESCRIPTION: These examples demonstrate incorrect formatting for the 'Since' comment in Protobuf definitions, which should be avoided to maintain consistency and clarity.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-044-protobuf-updates-guidelines.md#2025-04-22_snippet_2\n\nLANGUAGE: protobuf\nCODE:\n```\n// Since cosmos-sdk v0.44\n\n// since: cosmos-sdk 0.44\n\n// Since: cosmos-sdk 0.42.11 0.44.5\n\n// Since: Cosmos SDK 0.42.11, 0.44.5\n```\n\n----------------------------------------\n\nTITLE: Querying All Accounts in Cosmos SDK\nDESCRIPTION: Retrieves information for all available accounts in Cosmos SDK.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/auth/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsimd query auth accounts [flags]\n```\n\nLANGUAGE: bash\nCODE:\n```\nsimd query auth accounts\n```\n\n----------------------------------------\n\nTITLE: Bank Module Transfer Service Definition in Protobuf\nDESCRIPTION: Protobuf service definition for the bank module that provides methods for token transfers. This service defines transaction message types that handle token transfers between accounts on the blockchain.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/beginner/00-app-anatomy.md#2025-04-22_snippet_7\n\nLANGUAGE: protobuf\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.53.0-rc.2/proto/cosmos/bank/v1beta1/tx.proto#L13-L36\n```\n\n----------------------------------------\n\nTITLE: Map Implementation with String and Uint64 Types\nDESCRIPTION: Example demonstrating how to implement a Map collection with string keys and uint64 values.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/collections/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage collections\n\nimport (\n\t\"cosmossdk.io/collections\"\n\tstoretypes \"cosmossdk.io/store/types\"\n\tsdk \"github.com/cosmos/cosmos-sdk/types\"\n)\n\nvar IDsPrefix = collections.NewPrefix(0)\n\ntype Keeper struct {\n\tSchema    collections.Schema\n\tIDs   collections.Map[string, uint64]\n}\n\nfunc NewKeeper(storeKey *storetypes.KVStoreKey) Keeper {\n\tsb := collections.NewSchemaBuilder(sdk.OpenKVStore(storeKey))\n\n\treturn Keeper{\n\t\tIDs: collections.NewMap(sb, IDsPrefix, \"ids\", collections.StringKey, collections.Uint64Value),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Grant Expiration Pruning in EndBlock for x/authz Module\nDESCRIPTION: Implementation of the EndBlock function that prunes expired authz grants. It checks for grants that have passed their expiration time and removes them from both the GrantQueue and the Grants store at the end of each block.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/authz/README.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n// DeleteExpiredGrants removes expired grants from the state.\nfunc (k Keeper) DeleteExpiredGrants(ctx sdk.Context) {\n\tk.logger.Info(\"deleting expired grants\")\n\n\tcurrentTime := ctx.BlockTime()\n\n\titerate := func(expTime time.Time) bool {\n\t\tstore := ctx.KVStore(k.storeKey)\n\t\titTimeKey := GrantQueueKey(expTime)\n\t\tit := store.Iterator(GrantQueuePrefixKey(), sdk.PrefixEndBytes(itTimeKey))\n\t\tdefer it.Close()\n\n\t\tfor ; it.Valid(); it.Next() {\n\t\t\tkeyFields := parseGrantQueueKey(it.Key())\n\n\t\t\titem := storetypes.KVStoreReusableIterator(nil, nil)\n\t\t\terr := k.cdc.Unmarshal(it.Value(), item)\n\t\t\tif err != nil {\n\t\t\t\t// logging the error is sufficient here:\n\t\t\t\t// if we can't unmarshal the grant in the queue,\n\t\t\t\t// we won't be able to unmarshal the actual grant as well,\n\t\t\t\t// so it will be naturally skipped in a consumer method.\n\t\t\t\tk.logger.Error(\"failed to unmarshal grant queue item\", \"key\", keyFields.expiration, \"error\", err)\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tgranter, err := sdk.AccAddressFromBech32(keyFields.granter)\n\t\t\tif err != nil {\n\t\t\t\tk.logger.Error(\"failed to parse granter address\", \"granter\", keyFields.granter, \"error\", err)\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tgrantee, err := sdk.AccAddressFromBech32(keyFields.grantee)\n\t\t\tif err != nil {\n\t\t\t\tk.logger.Error(\"failed to parse grantee address\", \"grantee\", keyFields.grantee, \"error\", err)\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tfor _, msgType := range item.MsgTypeUrls {\n\t\t\t\tstore.Delete(GrantStoreKey(grantee, granter, msgType))\n\t\t\t}\n\t\t\tstore.Delete(it.Key())\n\t\t}\n\n\t\t// if the current block time exists in a grant queue we iterate once more with the same time\n\t\treturn expTime.Equal(currentTime)\n\t}\n\n\tiTime := getGrantTimeKey(ctx.BlockTime())\n\tif iterate(iTime) {\n\t\titerate(iTime)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: SendAuthorization Go Implementation for Bank Module Integration\nDESCRIPTION: The Go implementation of SendAuthorization for the bank module that tracks spending limits and allowed recipients. It implements the Authorization interface with methods for validating and executing token transfers.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/authz/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// NewSendAuthorization creates a new SendAuthorization object.\nfunc NewSendAuthorization(spendLimit sdk.Coins, allowList []sdk.AccAddress) *SendAuthorization {\n\tallowedAddrs := make([]string, len(allowList))\n\tfor i, addr := range allowList {\n\t\tallowedAddrs[i] = addr.String()\n\t}\n\n\treturn &SendAuthorization{\n\t\tSpendLimit: spendLimit,\n\t\tAllowList:  allowedAddrs,\n\t}\n}\n\n// MsgTypeURL implements Authorization.MsgTypeURL method.\nfunc (a SendAuthorization) MsgTypeURL() string {\n\treturn sdk.MsgTypeURL(&MsgSend{})\n}\n\n// Accept implements Authorization.Accept method.\nfunc (a SendAuthorization) Accept(ctx sdk.Context, msg sdk.Msg) (authz.Authorization, error) {\n\tmsgsend, ok := msg.(*MsgSend)\n\tif !ok {\n\t\treturn nil, sdkerrors.ErrInvalidType.Wrap(\"type mismatch\")\n\t}\n\n\tlimitLeft, isNegative := a.SpendLimit.SafeSub(msgsend.Amount...)\n\tif isNegative {\n\t\treturn nil, sdkerrors.ErrInsufficientFunds.Wrapf(\"requested amount is more than spend limit\")\n\t}\n\tif !a.allGranteesAreAllowed(msgsend.ToAddress) {\n\t\treturn nil, sdkerrors.ErrUnauthorized.Wrapf(\"cannot send to %s address\", msgsend.ToAddress)\n\t}\n\n\tupdate := SendAuthorization{\n\t\tSpendLimit: limitLeft,\n\t\tAllowList:  a.AllowList,\n\t}\n\tzeroCoins := sdk.Coins{}\n\tif update.SpendLimit.IsEqual(zeroCoins) {\n\t\treturn nil, nil\n\t}\n\n\treturn &update, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Defining InterfaceRegistry Interface in Go\nDESCRIPTION: This code snippet defines the InterfaceRegistry interface used for registering interfaces and their implementations. It provides methods for associating protocol buffer names with interfaces and registering concrete implementations of interfaces.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-019-protobuf-state-encoding.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype InterfaceRegistry interface {\n    // RegisterInterface associates protoName as the public name for the\n    // interface passed in as iface\n    // Ex:\n    //   registry.RegisterInterface(\"cosmos_sdk.Msg\", (*sdk.Msg)(nil))\n    RegisterInterface(protoName string, iface interface{})\n\n    // RegisterImplementations registers impls as a concrete implementations of\n    // the interface iface\n    // Ex:\n    //  registry.RegisterImplementations((*sdk.Msg)(nil), &MsgSend{}, &MsgMultiSend{})\n    RegisterImplementations(iface interface{}, impls ...proto.Message)\n\n}\n```\n\n----------------------------------------\n\nTITLE: Setting EnhanceCustomCommand in Gov Module's AutoCLI Configuration\nDESCRIPTION: Example showing how to enable enhancing existing custom commands with AutoCLI-generated commands by setting the EnhanceCustomCommand field to true.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/client/v2/README.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nEnhanceCustomCommand: true\n```\n\n----------------------------------------\n\nTITLE: Multi-signature Transaction Flow with CLI\nDESCRIPTION: Process for creating a transaction with multiple signers using the multisign command. Each signer adds their signature in sequence to the same transaction file.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/user/run-node/03-txs.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Let signer1 sign the unsigned tx.\nsimd tx multisign unsigned_tx.json signer_key_1 --chain-id my-test-chain --keyring-backend test > partial_tx_1.json\n# Now signer1 will send the partial_tx_1.json to the signer2.\n# Signer2 appends their signature:\nsimd tx multisign partial_tx_1.json signer_key_2 --chain-id my-test-chain --keyring-backend test > partial_tx_2.json\n# Signer2 sends the partial_tx_2.json file to signer3, and signer3 can append his signature:\nsimd tx multisign partial_tx_2.json signer_key_3 --chain-id my-test-chain --keyring-backend test > partial_tx_3.json\n```\n\n----------------------------------------\n\nTITLE: Defining ModuleAccount Interface in Go\nDESCRIPTION: The ModuleAccount interface extends the auth.Account interface with methods to get the module name and manage permissions. It's used by modules to allocate tokens and mint or burn tokens when needed.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/bank/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype ModuleAccount interface {\n  auth.Account               // same methods as the Account interface\n\n  GetName() string           // name of the module; used to obtain the address\n  GetPermissions() []string  // permissions of module account\n  HasPermission(string) bool\n}\n```\n\n----------------------------------------\n\nTITLE: Instantiating Keeper with IndexedMap in Cosmos SDK\nDESCRIPTION: This snippet demonstrates how to set up a Keeper struct with an IndexedMap for account management. It shows the basic structure for creating a schema builder and initializing the indexed collection.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/collections/README.md#2025-04-22_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nvar AccountsPrefix = collections.NewPrefix(0)\n\ntype Keeper struct {\n\tSchema   collections.Schema\n\tAccounts *collections.IndexedMap[sdk.AccAddress, authtypes.BaseAccount, AccountsIndexes]\n}\n\nfunc NewKeeper(storeKey *storetypes.KVStoreKey, cdc codec.BinaryCodec) Keeper {\n\tsb := collections.NewSchemaBuilder(sdk.OpenKVStore(storeKey))\n\treturn Keeper{\n\t\tAccounts: collections.NewIndexedMap(\n\t\t\tsb, AccountsPrefix, \"accounts\",\n\t\t\tsdk.AccAddressKey, codec.CollValue[authtypes.BaseAccount](cdc),\n\t\t\tNewAccountIndexes(sb),\n\t\t),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Using and Wrapping Registered Errors in Cosmos SDK Module Logic (Go)\nDESCRIPTION: Example from the `x/bank` module's keeper logic (specifically lines 141-182, likely containing the `SendCoins` function or similar logic) showing how registered errors can be used or wrapped to provide context during transaction processing. Although the text mentions wrapping, this specific reference likely shows returning pre-defined, registered errors based on certain conditions, illustrating the practical application of custom errors defined using the SDK's error handling mechanism.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-modules/12-errors.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n```go reference\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/x/bank/keeper/keeper.go#L141-L182\n```\n```\n\n----------------------------------------\n\nTITLE: Registering Extension Snapshotters Method in Cosmos SDK\nDESCRIPTION: Method signature for registering extension snapshotters with the snapshot Manager. This allows modules to register their custom state-sync implementations when setting up the application.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-049-state-sync-hooks.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// RegisterExtensions register extension snapshotters to manager\nfunc (m *Manager) RegisterExtensions(extensions ...types.ExtensionSnapshotter) error \n```\n\n----------------------------------------\n\nTITLE: Default ProcessProposal Implementation in Go for Cosmos SDK\nDESCRIPTION: This code snippet shows the default implementation of ProcessProposal in Cosmos SDK. It checks if the proposal is valid and if it exceeds the maximum block gas limit.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/abci/02-process-proposal.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc (app *BaseApp) ProcessProposal(req abci.RequestProcessProposal) abci.ResponseProcessProposal {\n\tfor _, tx := range req.Txs {\n\t\tif !app.txHandler.ValidateTx(req.Height, tx) {\n\t\t\treturn abci.ResponseProcessProposal{Status: abci.ResponseProcessProposal_REJECT}\n\t\t}\n\t}\n\treturn abci.ResponseProcessProposal{Status: abci.ResponseProcessProposal_ACCEPT}\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Redelegations from a Validator in Cosmos SDK\nDESCRIPTION: This command retrieves all redelegations where tokens are being moved from a specific source validator. It shows delegator addresses, destination validators, and details about each redelegation.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/staking/README.md#2025-04-22_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\nsimd query staking redelegations-from [validator-addr] [flags]\n```\n\nLANGUAGE: bash\nCODE:\n```\nsimd query staking redelegations-from cosmosvaloper1y4rzzrgl66eyhzt6gse2k7ej3zgwmngeleucjy\n```\n\n----------------------------------------\n\nTITLE: Initializing Testnet Files with simd\nDESCRIPTION: Command to initialize the necessary files for running a test network in a separate process. This creates node directories, genesis transactions, and configuration files in the default .testnets directory.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/user/run-node/05-run-testnet.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsimd testnet init-files\n```\n\n----------------------------------------\n\nTITLE: Implementing Validator Liveness Tracking in Go\nDESCRIPTION: Implementation of validator liveness tracking logic that monitors validator block signing, updates signing info, and handles slashing/jailing for downtime violations. The code processes each validator's participation in block signing and maintains counters for missed blocks.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/slashing/README.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nheight := block.Height\n\nfor vote in block.LastCommitInfo.Votes {\n  signInfo := GetValidatorSigningInfo(vote.Validator.Address)\n\n  // This is a relative index, so we counts blocks the validator SHOULD have\n  // signed. We use the 0-value default signing info if not present, except for\n  // start height.\n  index := signInfo.IndexOffset % SignedBlocksWindow()\n  signInfo.IndexOffset++\n\n  // Update MissedBlocksBitArray and MissedBlocksCounter. The MissedBlocksCounter\n  // just tracks the sum of MissedBlocksBitArray. That way we avoid needing to\n  // read/write the whole array each time.\n  missedPrevious := GetValidatorMissedBlockBitArray(vote.Validator.Address, index)\n  missed := !signed\n\n  switch {\n  case !missedPrevious && missed:\n    // array index has changed from not missed to missed, increment counter\n    SetValidatorMissedBlockBitArray(vote.Validator.Address, index, true)\n    signInfo.MissedBlocksCounter++\n\n  case missedPrevious && !missed:\n    // array index has changed from missed to not missed, decrement counter\n    SetValidatorMissedBlockBitArray(vote.Validator.Address, index, false)\n    signInfo.MissedBlocksCounter--\n\n  default:\n    // array index at this index has not changed; no need to update counter\n  }\n\n  if missed {\n    // emit events...\n  }\n\n  minHeight := signInfo.StartHeight + SignedBlocksWindow()\n  maxMissed := SignedBlocksWindow() - MinSignedPerWindow()\n\n  // If we are past the minimum height and the validator has missed too many\n  // jail and slash them.\n  if height > minHeight && signInfo.MissedBlocksCounter > maxMissed {\n    validator := ValidatorByConsAddr(vote.Validator.Address)\n\n    // emit events...\n\n    // We need to retrieve the stake distribution which signed the block, so we\n    // subtract ValidatorUpdateDelay from the block height, and subtract an\n    // additional 1 since this is the LastCommit.\n    //\n    // Note, that this CAN result in a negative \"distributionHeight\" up to\n    // -ValidatorUpdateDelay-1, i.e. at the end of the pre-genesis block (none) = at the beginning of the genesis block.\n    // That's fine since this is just used to filter unbonding delegations & redelegations.\n    distributionHeight := height - sdk.ValidatorUpdateDelay - 1\n\n    SlashWithInfractionReason(vote.Validator.Address, distributionHeight, vote.Validator.Power, SlashFractionDowntime(), stakingtypes.Downtime)\n    Jail(vote.Validator.Address)\n\n    signInfo.JailedUntil = block.Time.Add(DowntimeJailDuration())\n\n    // We need to reset the counter & array so that the validator won't be\n    // immediately slashed for downtime upon rebonding.\n    signInfo.MissedBlocksCounter = 0\n    signInfo.IndexOffset = 0\n    ClearValidatorMissedBlockBitArray(vote.Validator.Address)\n  }\n\n  SetValidatorSigningInfo(vote.Validator.Address, signInfo)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing EndBlock in BaseApp in Go\nDESCRIPTION: This snippet shows the implementation of the EndBlock method in BaseApp. It executes the EndBlocker for each module in the application at the end of each block.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/advanced/00-baseapp.md#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/baseapp/baseapp.go#L747-L769\n```\n\n----------------------------------------\n\nTITLE: Registering Module Migration Functions in Go\nDESCRIPTION: Shows how to register migration functions for a module in the Configurator. Each function handles migration from one ConsensusVersion to the next.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-041-in-place-store-migrations.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc (am AppModule) RegisterServices(cfg module.Configurator) {\n    // --snip--\n    cfg.RegisterMigration(types.ModuleName, 1, func(ctx sdk.Context) error {\n        // Perform in-place store migrations from ConsensusVersion 1 to 2.\n    })\n     cfg.RegisterMigration(types.ModuleName, 2, func(ctx sdk.Context) error {\n        // Perform in-place store migrations from ConsensusVersion 2 to 3.\n    })\n    // etc.\n}\n```\n\n----------------------------------------\n\nTITLE: Protobuf TxBody and SignerInfo for SIGN_MODE_DIRECT_AUX (Protobuf)\nDESCRIPTION: This reference links to the Protobuf definitions enabling the SIGN_MODE_DIRECT_AUX signing mode. These Protobuf messages define auxiliary structures for partial transaction signing, allowing multiple parties to sign over the transaction body and their own signer info without fee inclusion. Dependencies are the Cosmos SDK's tx.proto and the ADR-046 standard, with constraints that only the fee payer must sign over the fee fields. This signing mode optimizes multi-signer transaction workflows and user experience.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/advanced/01-transactions.md#2025-04-22_snippet_5\n\nLANGUAGE: protobuf\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.53.0-rc.2/proto/cosmos/tx/v1beta1/tx.proto#L68-L93\n```\n\n----------------------------------------\n\nTITLE: Accessing Transient Store from Context in Cosmos SDK\nDESCRIPTION: Method to access the Transient Store from a Context object. This provides a way to work with block-level transient data.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/advanced/04-store.md#2025-04-22_snippet_15\n\nLANGUAGE: go\nCODE:\n```\n// TransientStore fetches a TransientStore from the MultiStore.\nfunc (c Context) TransientStore(key storetypes.StoreKey) storetypes.KVStore {\n\treturn c.MultiStore().GetKVStore(key)\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Auth Endpoints via REST in Cosmos SDK\nDESCRIPTION: REST endpoints for querying account information and auth parameters. Includes endpoints for single account lookup, all accounts, and system parameters.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/auth/README.md#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n/cosmos/auth/v1beta1/account?address={address}\n```\n\nLANGUAGE: bash\nCODE:\n```\n/cosmos/auth/v1beta1/accounts\n```\n\nLANGUAGE: bash\nCODE:\n```\n/cosmos/auth/v1beta1/params\n```\n\n----------------------------------------\n\nTITLE: Broadcasting Transactions with gRPC in Cosmos SDK\nDESCRIPTION: This code demonstrates how to broadcast a signed transaction using gRPC in Cosmos SDK. It establishes a connection to the gRPC server, creates a transaction service client, and broadcasts the transaction using the BROADCAST_MODE_SYNC mode.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/user/run-node/03-txs.md#2025-04-22_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n    \"fmt\"\n\n\t\"google.golang.org/grpc\"\n\n\t\"github.com/cosmos/cosmos-sdk/types/tx\"\n)\n\nfunc sendTx(ctx context.Context) error {\n    // --snip--\n\n    // Create a connection to the gRPC server.\n    grpcConn := grpc.Dial(\n        \"127.0.0.1:9090\", // Or your gRPC server address.\n        grpc.WithInsecure(), // The Cosmos SDK doesn't support any transport security mechanism.\n    )\n    defer grpcConn.Close()\n\n    // Broadcast the tx via gRPC. We create a new client for the Protobuf Tx\n    // service.\n    txClient := tx.NewServiceClient(grpcConn)\n    // We then call the BroadcastTx method on this client.\n    grpcRes, err := txClient.BroadcastTx(\n        ctx,\n        &tx.BroadcastTxRequest{\n            Mode:    tx.BroadcastMode_BROADCAST_MODE_SYNC,\n            TxBytes: txBytes, // Proto-binary of the signed transaction, see previous step.\n        },\n    )\n    if err != nil {\n        return err\n    }\n\n    fmt.Println(grpcRes.TxResponse.Code) // Should be `0` if the tx is successful\n\n    return nil\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing gRPC Query Service Interface in Cosmos SDK - Go\nDESCRIPTION: This Go code snippet defines a QueryServer interface for module-specific gRPC services in the Cosmos SDK. It includes methods such as QueryBalance and QueryAllBalances, which a module's keeper is responsible for implementing. The `sdk.UnwrapSDKContext` function is necessary to extract the SDK-specific context from the generic context.Context provided.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-modules/04-query-services.md#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\ntype QueryServer interface {\n    QueryBalance(context.Context, *QueryBalanceParams) (*types.Coin, error)\n    QueryAllBalances(context.Context, *QueryAllBalancesParams) (*QueryAllBalancesResponse, error)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Unordered Transaction in Go\nDESCRIPTION: Shows how to configure a transaction as unordered by setting the required fields. Unordered transactions allow for flexible sequence processing but require additional gas.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/user/run-node/03-txs.md#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nfunc sendTx() error {\n    // --snip--\n    expiration := 5 * time.Minute\n    txBuilder.SetUnordered(true)\n    txBuilder.SetTimeoutTimestamp(time.Now().Add(expiration + (1 * time.Nanosecond)))\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Mempool in Cosmos SDK Application\nDESCRIPTION: This snippet shows how to initialize and configure a sender nonce mempool in a Cosmos SDK application by replacing the default no-op mempool. It demonstrates appending the configured mempool as an option to the BaseApp. Dependencies include the Cosmos SDK and BaseApp framework. The snippet assumes an understanding of how to interact with BaseApp options. No parameters are necessary, but the 'mempool.NewSenderNonceMempool()' function is utilized to instantiate the nonce mempool.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-apps/02-app-mempool.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nnonceMempool := mempool.NewSenderNonceMempool()\nmempoolOpt   := baseapp.SetMempool(nonceMempool)\nbaseAppOptions = append(baseAppOptions, mempoolOpt)\n```\n\n----------------------------------------\n\nTITLE: Defining Rosetta Client Interface in Go\nDESCRIPTION: This code defines the Client interface that must be implemented by SDK version-specific clients. It includes methods for both the Data API and Construction API functionality required by Rosetta, including blockchain queries and transaction construction.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-035-rosetta-api-support.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Client defines the API the client implementation should provide.\ntype Client interface {\n\t// Needed if the client needs to perform some action before connecting.\n\tBootstrap() error\n\t// Ready checks if the servicer constraints for queries are satisfied\n\t// for example the node might still not be ready, it's useful in process\n\t// when the rosetta instance might come up before the node itself\n\t// the servicer must return nil if the node is ready\n\tReady() error\n\n\t// Data API\n\n\t// Balances fetches the balance of the given address\n\t// if height is not nil, then the balance will be displayed\n\t// at the provided height, otherwise last block balance will be returned\n\tBalances(ctx context.Context, addr string, height *int64) ([]*types.Amount, error)\n\t// BlockByHashAlt gets a block and its transaction at the provided height\n\tBlockByHash(ctx context.Context, hash string) (BlockResponse, error)\n\t// BlockByHeightAlt gets a block given its height, if height is nil then last block is returned\n\tBlockByHeight(ctx context.Context, height *int64) (BlockResponse, error)\n\t// BlockTransactionsByHash gets the block, parent block and transactions\n\t// given the block hash.\n\tBlockTransactionsByHash(ctx context.Context, hash string) (BlockTransactionsResponse, error)\n\t// BlockTransactionsByHash gets the block, parent block and transactions\n\t// given the block hash.\n\tBlockTransactionsByHeight(ctx context.Context, height *int64) (BlockTransactionsResponse, error)\n\t// GetTx gets a transaction given its hash\n\tGetTx(ctx context.Context, hash string) (*types.Transaction, error)\n\t// GetUnconfirmedTx gets an unconfirmed Tx given its hash\n\t// NOTE(fdymylja): NOT IMPLEMENTED YET!\n\tGetUnconfirmedTx(ctx context.Context, hash string) (*types.Transaction, error)\n\t// Mempool returns the list of the current non confirmed transactions\n\tMempool(ctx context.Context) ([]*types.TransactionIdentifier, error)\n\t// Peers gets the peers currently connected to the node\n\tPeers(ctx context.Context) ([]*types.Peer, error)\n\t// Status returns the node status, such as sync data, version etc\n\tStatus(ctx context.Context) (*types.SyncStatus, error)\n\n\t// Construction API\n\n\t// PostTx posts txBytes to the node and returns the transaction identifier plus metadata related\n\t// to the transaction itself.\n\tPostTx(txBytes []byte) (res *types.TransactionIdentifier, meta map[string]interface{}, err error)\n\t// ConstructionMetadataFromOptions\n\tConstructionMetadataFromOptions(ctx context.Context, options map[string]interface{}) (meta map[string]interface{}, err error)\n\tOfflineClient\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GroupAccountInfo Structure in Protobuf\nDESCRIPTION: Defines the GroupAccountInfo message that associates a group account with a group and a decision policy. Group accounts have addresses and balances, enabling them to own assets and execute transactions based on group decisions.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-042-group-module.md#2025-04-22_snippet_2\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage GroupAccountInfo {\n\n    // address is the group account address.\n    string address = 1;\n\n    // group_id is the ID of the Group the GroupAccount belongs to.\n    uint64 group_id = 2;\n\n    // admin is the account address of the group admin.\n    string admin = 3;\n\n    // metadata is any arbitrary metadata of this group account.\n    bytes metadata = 4;\n\n    // version is used to track changes to a group's GroupAccountInfo structure that\n    // invalidates active proposal from old versions.\n    uint64 version = 5;\n\n    // decision_policy specifies the group account's decision policy.\n    google.protobuf.Any decision_policy = 6 [(cosmos_proto.accepts_interface) = \"cosmos.group.v1.DecisionPolicy\"];\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MsgSend Message Factory in Go for Cosmos SDK Simulations\nDESCRIPTION: A function that creates a factory for MsgSend messages. It selects a random sender with spendable balance, a random recipient, and a subset of coins to send, then returns both the accounts involved and the constructed message.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/testutil/simsx/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc MsgSendFactory() simsx.SimMsgFactoryFn[*types.MsgSend] {\n    return func(ctx context.Context, testData *simsx.ChainDataSource, reporter simsx.SimulationReporter) ([]simsx.SimAccount, *types.MsgSend) {\n        from := testData.AnyAccount(reporter, simsx.WithSpendableBalance())\n        to := testData.AnyAccount(reporter, simsx.ExcludeAccounts(from))\n        coins := from.LiquidBalance().RandSubsetCoins(reporter, simsx.WithSendEnabledCoins())\n        return []simsx.SimAccount{from}, types.NewMsgSend(from.AddressBech32, to.AddressBech32, coins)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing ProcessProposal Handler in Go for Cosmos SDK\nDESCRIPTION: This code snippet demonstrates how to customize the ProcessProposal handler in the app_di.go file. It creates a new proposal handler and sets it as the ProcessProposal function for the BaseApp.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/abci/02-process-proposal.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nprocessOpt := func(app *baseapp.BaseApp) {\n    abciPropHandler := baseapp.NewDefaultProposalHandler(mempool, app)\n    app.SetProcessProposal(abciPropHandler.ProcessProposalHandler())\n}\n\nbaseAppOptions = append(baseAppOptions, processOpt)\n```\n\n----------------------------------------\n\nTITLE: Implementing IndexesList Interface for AccountsIndexes in Go\nDESCRIPTION: This snippet shows how to explicitly declare indexes by implementing the Indexes interface in the AccountsIndexes struct. This approach provides an alternative to having the indexes inferred through reflection.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/collections/README.md#2025-04-22_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nfunc (a AccountsIndexes) IndexesList() []collections.Index[sdk.AccAddress, authtypes.BaseAccount] {\n    return []collections.Index[sdk.AccAddress, authtypes.BaseAccount]{a.Number}\n}\n```\n\n----------------------------------------\n\nTITLE: Block Provision Calculation\nDESCRIPTION: Function to calculate the token provisions for each block based on annual provisions.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/mint/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nBlockProvision(params Params) sdk.Coin {\n\tprovisionAmt = AnnualProvisions/ params.BlocksPerYear\n\treturn sdk.NewCoin(params.MintDenom, provisionAmt.Truncate())\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Query Service in Protocol Buffers\nDESCRIPTION: This snippet shows how to define a custom query service using Protocol Buffers for the bank module. It demonstrates the structure of the Query service with methods for querying balance and all balances.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-021-protobuf-query-encoding.md#2025-04-22_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nservice Query {\n  rpc QueryBalance(QueryBalanceParams) returns (cosmos_sdk.v1.Coin) { }\n  rpc QueryAllBalances(QueryAllBalancesParams) returns (QueryAllBalancesResponse) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Interface Types in Protocol Buffer Queries\nDESCRIPTION: This example demonstrates how to handle interface types in Protocol Buffer queries using google.protobuf.Any. It shows a hypothetical implementation for the gov module's GetProposal query.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-021-protobuf-query-encoding.md#2025-04-22_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\nimport \"google/protobuf/any.proto\";\n\nservice Query {\n  rpc GetProposal(GetProposalParams) returns (AnyProposal) { }\n}\n\nmessage AnyProposal {\n  ProposalBase base = 1;\n  google.protobuf.Any content = 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Decision Policy Interface in Go\nDESCRIPTION: Defines the DecisionPolicy interface that all concrete decision policies must implement. It includes methods for validation, timeouts, and determining if a proposal is allowed to pass based on the current vote tally.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-042-group-module.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype DecisionPolicy interface {\n\tcodec.ProtoMarshaler\n\n\tValidateBasic() error\n\tGetTimeout() types.Duration\n\tAllow(tally Tally, totalPower string, votingDuration time.Duration) (DecisionPolicyResult, error)\n\tValidate(g GroupInfo) error\n}\n\ntype DecisionPolicyResult struct {\n\tAllow bool\n\tFinal bool\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Revoker Interface for Membership Revocation in Go\nDESCRIPTION: This code snippet defines the Revoker interface, which outlines the functionality required for implementing membership revocation rule-sets in specialization groups.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-007-specialization-groups.md#2025-04-22_snippet_2\n\nLANGUAGE: golang\nCODE:\n```\n// Revoker defines the function required for a membership revocation rule-set\n// used by a specialization group. This could be used to create self revoking,\n// and evidence based revoking, etc. Revokers types may be created and\n// reused for different election types.\n//\n// When revoking the \"cause\" bytes may be arbitrarily marshalled into evidence,\n// memos, etc.\ntype Revoker interface {\n    RevokeName() string      // identifier for this revoker type\n    RevokeMember(addr sdk.AccAddress, cause []byte) error\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Proposal Processing Queue in Go\nDESCRIPTION: EndBlock implementation for processing finished proposals, including vote tallying, validator vote processing, and proposal status updates. Handles deposit refunds and executes approved proposal handlers.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/README.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\n  in EndBlock do\n\n    for finishedProposalID in GetAllFinishedProposalIDs(block.Time)\n      proposal = load(Governance, <proposalID|'proposal'>) // proposal is a const key\n\n      validators = Keeper.getAllValidators()\n      tmpValMap := map(sdk.AccAddress)ValidatorGovInfo\n\n      // Initiate mapping at 0. This is the amount of shares of the validator's vote that will be overridden by their delegator's votes\n      for each validator in validators\n        tmpValMap(validator.OperatorAddr).Minus = 0\n\n      // Tally\n      voterIterator = rangeQuery(Governance, <proposalID|'addresses'>) //return all the addresses that voted on the proposal\n      for each (voterAddress, vote) in voterIterator\n        delegations = stakingKeeper.getDelegations(voterAddress) // get all delegations for current voter\n\n        for each delegation in delegations\n          // make sure delegation.Shares does NOT include shares being unbonded\n          tmpValMap(delegation.ValidatorAddr).Minus += delegation.Shares\n          proposal.updateTally(vote, delegation.Shares)\n\n        _, isVal = stakingKeeper.getValidator(voterAddress)\n        if (isVal)\n          tmpValMap(voterAddress).Vote = vote\n\n      tallyingParam = load(GlobalParams, 'TallyingParam')\n\n      // Update tally if validator voted\n      for each validator in validators\n        if tmpValMap(validator).HasVoted\n          proposal.updateTally(tmpValMap(validator).Vote, (validator.TotalShares - tmpValMap(validator).Minus))\n\n\n\n      // Check if proposal is accepted or rejected\n      totalNonAbstain := proposal.YesVotes + proposal.NoVotes + proposal.NoWithVetoVotes\n      if (proposal.Votes.YesVotes/totalNonAbstain > tallyingParam.Threshold AND proposal.Votes.NoWithVetoVotes/totalNonAbstain  < tallyingParam.Veto)\n        //  proposal was accepted at the end of the voting period\n        //  refund deposits (non-voters already punished)\n        for each (amount, depositor) in proposal.Deposits\n          depositor.AtomBalance += amount\n\n        stateWriter, err := proposal.Handler()\n        if err != nil\n            // proposal passed but failed during state execution\n            proposal.CurrentStatus = ProposalStatusFailed\n         else\n            // proposal pass and state is persisted\n            proposal.CurrentStatus = ProposalStatusAccepted\n            stateWriter.save()\n      else\n        // proposal was rejected\n        proposal.CurrentStatus = ProposalStatusRejected\n\n      store(Governance, <proposalID|'proposal'>, proposal)\n```\n\n----------------------------------------\n\nTITLE: Init App Config Function in Go\nDESCRIPTION: The 'initAppConfig' function in Go is used to override default application configurations, such as 'app.toml' and server configurations. This allows customization and optimization of the application setup for validators and users, particularly setting parameters like 'min-gas-prices'.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/advanced/07-cli.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/simapp/simd/cmd/root_v2.go#L144-L199\n```\n\n----------------------------------------\n\nTITLE: Implementing a PreBlocker Hook for Vote Extension Recovery in Go\nDESCRIPTION: Provides an example Go implementation demonstrating how to use `app.SetPreBlocker` to define a hook that runs before `FinalizeBlock`. This hook iterates through transactions in the block proposal (`req.Txs`), identifies and parses injected vote extensions using a custom function (`parseVoteExtension`), performs necessary computations (`compute`), and stores the results (`storeVEResult`) in the context's cached store for access during `FinalizeBlock`.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-apps/04-vote-extensions.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\napp.SetPreBlocker(func(ctx sdk.Context, req *abci.RequestFinalizeBlock) error {\n    allVEs := []VE{} // store all parsed vote extensions here\n    for _, tx := range req.Txs {\n        // define a custom function that tries to parse the tx as a vote extension\n        ve, ok := parseVoteExtension(tx)\n        if !ok {\n            continue\n        }\n\n        allVEs = append(allVEs, ve)\n    }\n\n    // perform any necessary computation on the vote extensions and store the result\n    // in the cached store\n    result := compute(allVEs)\n    err := storeVEResult(ctx, result)\n    if err != nil {\n        return err\n    }\n\n    return nil\n})\n```\n\n----------------------------------------\n\nTITLE: Defining HasBeginBlocker Interface in Go\nDESCRIPTION: This Go interface, `HasBeginBlocker`, is an extension of `appmodule.AppModule`. Modules implementing this interface define a `BeginBlock` method, allowing custom logic to be executed automatically at the beginning of each block. The method takes a `context.Context` and returns an error if issues occur.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-modules/01-module-manager.md#2025-04-22_snippet_12\n\nLANGUAGE: go\nCODE:\n```\n```go reference\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/core/appmodule/module.go#L56-L63\n```\n```\n\n----------------------------------------\n\nTITLE: Creating an AutoCLI Keyring Wrapper\nDESCRIPTION: Code snippet showing how to create a keyring wrapper that implements the AutoCLI keyring interface, allowing key name resolution and transaction signing.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/client/v2/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nkeyring.NewAutoCLIKeyring(kb)\n```\n\n----------------------------------------\n\nTITLE: Implementing the AppModule Interface (Cosmos SDK, Go)\nDESCRIPTION: This snippet references the implementation of the AppModule interface, required for module registration with the Cosmos SDK. It shows the range of methods the module must implement to be treated as a valid app module. Required dependencies include the appmodule interfaces and method implementations; the struct and all methods must be public.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-modules/15-depinject.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nreference\\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.47.0/x/group/module/module.go#L58-L64\n```\n\n----------------------------------------\n\nTITLE: Implementing Cosmos SDK Upgrade Handler for v0.50-v0.53 Migration in Go\nDESCRIPTION: This Go code snippet shows the implementation of the `RegisterUpgradeHandlers` method for a `SimApp` (a Cosmos SDK application). It defines an upgrade handler named `v050-to-v053` which executes module migrations using `ModuleManager.RunMigrations`. It also conditionally configures store upgrades by adding new module stores (`epochstypes` and `protocolpooltypes`) if the specific upgrade is detected and not skipped, setting up the `StoreLoader` via `upgradetypes.UpgradeStoreLoader`. This is crucial for managing state transitions during application upgrades. Dependencies include Cosmos SDK upgrade, store, and module management types.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/UPGRADE_GUIDE.md#2025-04-22_snippet_36\n\nLANGUAGE: go\nCODE:\n```\n```go\n// UpgradeName defines the on-chain upgrade name for the sample SimApp upgrade\n// from v050 to v053.\n//\n// NOTE: This upgrade defines a reference implementation of what an upgrade\n// could look like when an application is migrating from Cosmos SDK version\n// v0.50.x to v0.53.x.\nconst UpgradeName = \"v050-to-v053\"\n\nfunc (app SimApp) RegisterUpgradeHandlers() {\n    app.UpgradeKeeper.SetUpgradeHandler(\n        UpgradeName,\n        func(ctx context.Context, _ upgradetypes.Plan, fromVM module.VersionMap) (module.VersionMap, error) {\n            return app.ModuleManager.RunMigrations(ctx, app.Configurator(), fromVM)\n        },\n    )\n\n    upgradeInfo, err := app.UpgradeKeeper.ReadUpgradeInfoFromDisk()\n    if err != nil {\n        panic(err)\n    }\n\n    if upgradeInfo.Name == UpgradeName && !app.UpgradeKeeper.IsSkipHeight(upgradeInfo.Height) {\n        storeUpgrades := storetypes.StoreUpgrades{\n            Added: []string{\n                epochstypes.ModuleName, // if not adding x/epochs to your chain, remove this line.\n                protocolpooltypes.ModuleName, // if not adding x/protocolpool to your chain, remove this line.\n            },\n        }\n\n        // configure store loader that checks if version == upgradeHeight and applies store upgrades\n        app.SetStoreLoader(upgradetypes.UpgradeStoreLoader(upgradeInfo.Height, &storeUpgrades))\n    }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a TxBuilder Instance in Go\nDESCRIPTION: Initializes a new TxBuilder instance using the Protobuf codec from SimApp. This builder is used to construct transactions programmatically.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/user/run-node/03-txs.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"github.com/cosmos/cosmos-sdk/simapp\"\n)\n\nfunc sendTx() error {\n    // Choose your codec: Amino or Protobuf. Here, we use Protobuf, given by the following function.\n    app := simapp.NewSimApp(...)\n\n    // Create a new TxBuilder.\n    txBuilder := app.TxConfig().NewTxBuilder()\n\n    // --snip--\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Cosmos SDK Application Store\nDESCRIPTION: Example showing how to initialize and configure stores in a Cosmos SDK application. Demonstrates setting up BaseApp, mounting different types of stores (KV, Transient, Memory), and configuring various application parameters.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/spec/store/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc NewApp(...) Application {\n  // ...\n  \n  bApp := baseapp.NewBaseApp(appName, logger, db, txConfig.TxDecoder(), baseAppOptions...)\n  bApp.SetCommitMultiStoreTracer(traceStore)\n  bApp.SetVersion(version.Version)\n  bApp.SetInterfaceRegistry(interfaceRegistry)\n\n\t// ...\n\n  keys := sdk.NewKVStoreKeys(...)\n\ttransientKeys := sdk.NewTransientStoreKeys(...)\n\tmemKeys := sdk.NewMemoryStoreKeys(...)\n\n\t// ...\n\n\t// initialize stores\n\tapp.MountKVStores(keys)\n\tapp.MountTransientStores(transientKeys)\n\tapp.MountMemoryStores(memKeys)\n\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Unbonding Delegation using REST API in Cosmos SDK\nDESCRIPTION: This endpoint retrieves unbonding information for a specific validator-delegator pair. It returns details about the unbonding process, including creation height, completion time, and balances.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/staking/README.md#2025-04-22_snippet_67\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \\\n\"http://localhost:1317/cosmos/staking/v1beta1/validators/cosmosvaloper13v4spsah85ps4vtrw07vzea37gq5la5gktlkeu/delegations/cosmos1ze2ye5u5k3qdlexvt2e0nn0508p04094ya0qpm/unbonding_delegation\" \\\n-H  \"accept: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Legacy StdSignDoc Definition (Go)\nDESCRIPTION: This Go reference points to the StdSignDoc definition, part of the legacy transaction signing process in Cosmos SDK. StdSignDoc encapsulates the byte-representation of transaction signing data, including fields relevant to standard Amino-based signing. The code relies on the x/auth/migrations/legacytx package and is serialized with Amino JSON encoding before being included in signature workflows. Expected input is transaction data and output is the serialized sign document bytes.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/advanced/01-transactions.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.53.0-rc.2/x/auth/migrations/legacytx/stdsign.go#L30-L43\n```\n\n----------------------------------------\n\nTITLE: Aggregating Transaction Commands in Cosmos SDK Module\nDESCRIPTION: The `NewTxCmd()` function aggregates all transaction commands within a module, enabling easy integration into the root command. It emphasizes modular transaction handling in the Cosmos SDK architecture.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-modules/09-module-interfaces.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/x/bank/client/cli/tx.go#L20-L35\n```\n\n----------------------------------------\n\nTITLE: Converting Genesis Account to Vesting Account in Go\nDESCRIPTION: This function converts a genesis account to the appropriate type of vesting account based on its vesting parameters, or returns a base account if no vesting is specified.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/auth/vesting/README.md#2025-04-22_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nfunc ToAccount(gacc GenesisAccount) Account {\n    bacc := NewBaseAccount(gacc)\n\n    if gacc.OriginalVesting > 0 {\n        if ga.StartTime != 0 && ga.EndTime != 0 {\n            // return a continuous vesting account\n        } else if ga.EndTime != 0 {\n            // return a delayed vesting account\n        } else {\n            // invalid genesis vesting account provided\n            panic()\n        }\n    }\n\n    return bacc\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Pre-Upgrade Command Structure in Go\nDESCRIPTION: Provides a sample Go function `preUpgradeCommand` using the Cobra library to define the structure of the `pre-upgrade` command. This command executes custom pre-upgrade logic encapsulated within a `HandlePreUpgrade()` function and exits with specific codes (0 for success, 30 for failure) required by Cosmovisor to manage the upgrade process.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-apps/03-app-upgrade.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n```go\nfunc preUpgradeCommand() *cobra.Command {\n cmd := &cobra.Command{\n  Use:   \"pre-upgrade\",\n  Short: \"Pre-upgrade command\",\n        Long: \"Pre-upgrade command to implement custom pre-upgrade handling\",\n  Run: func(cmd *cobra.Command, args []string) {\n\n   err := HandlePreUpgrade()\n\n   if err != nil {\n    os.Exit(30)\n   }\n\n   os.Exit(0)\n\n  },\n }\n\n return cmd\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom PrepareProposal Handler in Cosmos SDK\nDESCRIPTION: This code snippet demonstrates how to override the default PrepareProposal implementation in Cosmos SDK. It creates a custom proposal handler and sets it as the PrepareProposal function for the BaseApp.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/abci/01-prepare-proposal.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nprepareOpt := func(app *baseapp.BaseApp) {\n    abciPropHandler := baseapp.NewDefaultProposalHandler(mempool, app)\n    app.SetPrepareProposal(abciPropHandler.PrepareProposalHandler())\n}\n\nbaseAppOptions = append(baseAppOptions, prepareOpt)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Pre-Computed Vote Extension Results in Go Module Logic\nDESCRIPTION: Illustrates how a Cosmos SDK module's logic, such as within a `BeginBlocker` function, can retrieve results derived from vote extensions. It shows accessing the application context (`ctx`) to call a keeper method (`k.GetVEResult`) that fetches the pre-computed data previously stored in the cached store by a `PreBlocker` hook. This result can then be used for module-specific state updates or logic (`k.setSomething`).\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-apps/04-vote-extensions.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc (k Keeper) BeginBlocker(ctx context.Context) error {\n    // retrieve the result of the computation of vote extensions from the cached store\n    result, err := k.GetVEResult(ctx)\n    if err != nil {\n        return err\n    }\n\n    // use the result of the computation of vote extensions\n    k.setSomething(result)\n\n    return nil\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing secp256r1 Private Key Generation\nDESCRIPTION: Creates a new private key from a secret number using secp256r1 elliptic curve. Includes validation to ensure the secret is within the curve's base field.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/beginner/03-accounts.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// NewPrivKeyFromSecret creates a private key derived for the secret number\n// represented in big-endian. The `secret` must be a valid ECDSA field element.\nfunc NewPrivKeyFromSecret(secret []byte) (*PrivKey, error) {\n    var d = new(big.Int).SetBytes(secret)\n    if d.Cmp(secp256r1.Params().N) >= 1 {\n        return nil, errorsmod.Wrap(errors.ErrInvalidRequest, \"secret not in the curve base field\")\n    }\n    sk := new(ecdsa.PrivKey)\n    return &PrivKey{&ecdsaSK{*sk}}, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Epochs in InitGenesis for DI Configuration\nDESCRIPTION: Configures InitGenesis order for Epochs module in the dependency injection system.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/UPGRADE_GUIDE.md#2025-04-22_snippet_33\n\nLANGUAGE: go\nCODE:\n```\nInitGenesis: []string{\n    // ...\n    epochstypes.ModuleName,\n},\n```\n\n----------------------------------------\n\nTITLE: Retrieving Vote Extension Computation Results in Go for Cosmos SDK\nDESCRIPTION: Example of retrieving the results of vote extension computations from the cached store in a module's BeginBlocker function.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/abci/03-vote-extensions.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc (k Keeper) BeginBlocker(ctx context.Context) error {\n    // retrieve the result of the computation of vote extensions from the cached store\n    result, err := k.GetVEResult(ctx)\n    if err != nil {\n        return err\n    }\n\n    // use the result of the computation of vote extensions\n    k.setSomething(result)\n\n    return nil\n}\n```\n\n----------------------------------------\n\nTITLE: Validator Update Service and Header Service in Go\nDESCRIPTION: Defines a `ValidatorUpdateService` to manage validator updates and a `Service` interface to obtain block header information such as height, hash, and chain ID. It demonstrates how these services could interact within a Comet runtime module.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-063-core-module-api.md#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\ntype ValidatorUpdateService interface {\n    SetValidatorUpdates(context.Context, []abci.ValidatorUpdate)\n}\n\ntype Service interface {\n\tGetHeaderInfo(context.Context) Info\n}\n\ntype Info struct {\n\tHeight int64      // Height returns the height of the block\n\tHash []byte       // Hash returns the hash of the block header\n\tTime time.Time    // Time returns the time of the block\n\tChainID string    // ChainId returns the chain ID of the block\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining FeeAllowanceI Interface in Go\nDESCRIPTION: This interface defines the contract for fee allowance implementations, including methods to accept a fee payment and validate the allowance structure.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-029-fee-grant-module.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype FeeAllowanceI {\n  // Accept can use fee payment requested as well as timestamp of the current block\n  // to determine whether or not to process this. This is checked in\n  // Keeper.UseGrantedFees and the return values should match how it is handled there.\n  //\n  // If it returns an error, the fee payment is rejected, otherwise it is accepted.\n  // The FeeAllowance implementation is expected to update it's internal state\n  // and will be saved again after an acceptance.\n  //\n  // If remove is true (regardless of the error), the FeeAllowance will be deleted from storage\n  // (eg. when it is used up). (See call to RevokeFeeAllowance in Keeper.UseGrantedFees)\n  Accept(ctx sdk.Context, fee sdk.Coins, msgs []sdk.Msg) (remove bool, err error)\n\n  // ValidateBasic should evaluate this FeeAllowance for internal consistency.\n  // Don't allow negative amounts, or negative periods for example.\n  ValidateBasic() error\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing VoteExtensionHandler for Oracle in Go\nDESCRIPTION: Provides an example implementation of VoteExtensionHandler for an Oracle use case, including ExtendVoteHandler and VerifyVoteExtensionHandler methods.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-064-abci-2.0.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// VoteExtensionHandler implements an Oracle vote extension handler.\ntype VoteExtensionHandler struct {\n\tcdc   Codec\n\tmk    MyKeeper\n\tstate VoteExtState // This could be a map or a DB connection object\n}\n\n// ExtendVoteHandler can do something with h.mk and possibly h.state to create\n// a vote extension, such as fetching a series of prices for supported assets.\nfunc (h VoteExtensionHandler) ExtendVoteHandler(ctx sdk.Context, req abci.RequestExtendVote) abci.ResponseExtendVote {\n\tprices := GetPrices(ctx, h.mk.Assets())\n\tbz, err := EncodePrices(h.cdc, prices)\n\tif err != nil {\n\t\tpanic(fmt.Errorf(\"failed to encode prices for vote extension: %w\", err))\n\t}\n\n\t// store our vote extension at the given height\n\t//\n\t// NOTE: Vote extensions can be overridden since we can timeout in a round.\n\tSetPrices(h.state, req, bz)\n\n\treturn abci.ResponseExtendVote{VoteExtension: bz}\n}\n\n// VerifyVoteExtensionHandler can do something with h.state and req to verify\n// the req.VoteExtension field, such as ensuring the provided oracle prices are\n// within some valid range of our prices.\nfunc (h VoteExtensionHandler) VerifyVoteExtensionHandler(ctx sdk.Context, req abci.RequestVerifyVoteExtension) abci.ResponseVerifyVoteExtension {\n\tprices, err := DecodePrices(h.cdc, req.VoteExtension)\n\tif err != nil {\n\t\tlog(\"failed to decode vote extension\", \"err\", err)\n\t\treturn abci.ResponseVerifyVoteExtension{Status: REJECT}\n\t}\n\n\tif err := ValidatePrices(h.state, req, prices); err != nil {\n\t\tlog(\"failed to validate vote extension\", \"prices\", prices, \"err\", err)\n\t\treturn abci.ResponseVerifyVoteExtension{Status: REJECT}\n\t}\n\n\t// store updated vote extensions at the given height\n\t//\n\t// NOTE: Vote extensions can be overridden since we can timeout in a round.\n\tSetPrices(h.state, req, req.VoteExtension)\n\n\treturn abci.ResponseVerifyVoteExtension{Status: ACCEPT}\n}\n```\n\n----------------------------------------\n\nTITLE: PrefixStore Implementation in Cosmos SDK\nDESCRIPTION: Definition of a PrefixStore that provides automatic key prefixing for operations on an underlying KVStore. This helps create logical separation within a single KVStore.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/advanced/04-store.md#2025-04-22_snippet_22\n\nLANGUAGE: go\nCODE:\n```\n// Store is similar with tendermint/tendermint/libs/db/prefix_db\n// both gives access only to the limited subset of the store\n// for convinience or safety\ntype Store struct {\n\tparent types.KVStore\n\tprefix []byte\n}\n```\n\n----------------------------------------\n\nTITLE: Iterating over collections.Map Signature in Go\nDESCRIPTION: Shows the Go function signature for the `Iterate` method on a `collections.Map`. This method accepts a context and a `Ranger[K]` to control the iteration range (e.g., start/end keys, order) and returns an `Iterator[K, V]` for traversing map entries, or an error.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/collections/README.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n```go\nfunc (m Map[K, V]) Iterate(ctx context.Context, ranger Ranger[K]) (Iterator[K, V], error) \n```\n```\n\n----------------------------------------\n\nTITLE: Packing an Interface Value into Protobuf Any (Go)\nDESCRIPTION: This Go fragment demonstrates how to pack a value implementing the AccountI interface into a codectypes.Any type using codectypes.NewAnyWithValue, and then create and marshal a Profile structure containing it. The code also handles errors during packing, and shows binary (Marshal) and JSON (MarshalJSON) marshaling. Dependencies: Cosmos SDK codectypes, Profile message Go type, and a codec (cdc) supporting the marshal operations. Input: AccountI instance. Output: Marshaled Profile (binary and JSON).\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/advanced/05-encoding.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nvar myAccount AccountI\nmyAccount = ... // Can be a BaseAccount, a ContinuousVestingAccount or any struct implementing `AccountI`\n\n// Pack the account into an Any\naccAny, err := codectypes.NewAnyWithValue(myAccount)\nif err != nil {\n  return nil, err\n}\n\n// Create a new Profile with the any.\nprofile := Profile {\n  Account: accAny,\n  Bio: \"some bio\",\n}\n\n// We can then marshal the profile as usual.\nbz, err := cdc.Marshal(profile)\njsonBz, err := cdc.MarshalJSON(profile)\n```\n\n----------------------------------------\n\nTITLE: Registering Providers and Invokers for Cosmos SDK Module\nDESCRIPTION: Example of registering providers and invokers for a Cosmos SDK module using appconfig. It shows how to use Provide and Invoke functions to create options for RegisterModule.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/depinject/appconfig/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc init() {\n  appconfig.RegisterModule(&modulev1.Module{},\n   appconfig.Provide(provideSomething, provideSomethingElse),\n   appconfig.Invoke(invokeSomething),\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Block Finalization in Cosmos SDK BaseApp\nDESCRIPTION: The `FinalizeBlock` function in the Cosmos SDK's BaseApp processes a block by executing `BeginBlock`, all transactions, and `EndBlock` in sequence. Inputs include the request to finalize a block, with key outputs being transaction execution results and updated events, validators, and consensus parameters. The method replaces previous `BeginBlock`, `DeliverTx`, and `EndBlock` calls, relying on `finalizeState` over `deliverState` for committing changes. Potential errors originate from pre-block checks, transaction execution, or end block processing failures.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-064-abci-2.0.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc (app *BaseApp) FinalizeBlock(req abci.RequestFinalizeBlock) (*abci.ResponseFinalizeBlock, error) {\n\tctx := ...\n\n\tif app.preBlocker != nil {\n\t\tctx := app.finalizeBlockState.ctx\n\t\trsp, err := app.preBlocker(ctx, req)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tif rsp.ConsensusParamsChanged {\n\t\t\tapp.finalizeBlockState.ctx = ctx.WithConsensusParams(app.GetConsensusParams(ctx))\n\t\t}\n\t}\n\tbeginBlockResp, err := app.beginBlock(req)\n\tappendBlockEventAttr(beginBlockResp.Events, \"begin_block\")\n\n\ttxExecResults := make([]abci.ExecTxResult, 0, len(req.Txs))\n\tfor _, tx := range req.Txs {\n\t\tresult := app.runTx(runTxModeFinalize, tx)\n\t\ttxExecResults = append(txExecResults, result)\n\t}\n\n\tendBlockResp, err := app.endBlock(app.finalizeBlockState.ctx)\n\tappendBlockEventAttr(beginBlockResp.Events, \"end_block\")\n\n\treturn abci.ResponseFinalizeBlock{\n\t\tTxResults:             txExecResults,\n\t\tEvents:                joinEvents(beginBlockResp.Events, endBlockResp.Events),\n\t\tValidatorUpdates:      endBlockResp.ValidatorUpdates,\n\t\tConsensusParamUpdates: endBlockResp.ConsensusParamUpdates,\n\t\tAppHash:               nil,\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom RunTx Recovery Handler (Cosmos SDK, Go)\nDESCRIPTION: Shows how to add a custom RecoveryHandler to the Cosmos SDK's BaseApp using AddRunTxRecoveryHandler. The handler inspects the recovered object, checks if it matches fooTypes.InternalError, and re-panics with additional context if matched; otherwise, it returns nil to allow further middleware. Requires baseapp.NewBaseApp, fooTypes.InternalError, and fmt from the Go standard library and Cosmos SDK modules. Input: interface{} recoveryObj; Output: error or nil, as recovery contract specifies.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/advanced/11-runtx_middleware.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Cosmos SDK application constructor\ncustomHandler := func(recoveryObj interface{}) error {\n    err, ok := recoveryObj.(error)\n    if !ok {\n        return nil\n    }\n\n    if fooTypes.InternalError.Is(err) {\n        panic(fmt.Errorf(\"FooKeeper did panic with error: %w\", err))\n    }\n\n    return nil\n}\n\nbaseApp := baseapp.NewBaseApp(...)\nbaseApp.AddRunTxRecoveryHandler(customHandler)\n```\n\n----------------------------------------\n\nTITLE: Sending Tokens Command in Bash\nDESCRIPTION: This command demonstrates how to send tokens using the simapp CLI 'simd'. It covers setting up the root command, subcommands, arguments for sender and receiver addresses, token amount, and optional flags related to gas settings. Made for users interacting with the Cosmos SDK application.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/advanced/07-cli.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsimd tx bank send $MY_VALIDATOR_ADDRESS $RECIPIENT 1000stake --gas auto --gas-prices <gasPrices>\n```\n\n----------------------------------------\n\nTITLE: Multi-Signing Transactions in Cosmos SDK\nDESCRIPTION: Signs transactions generated offline by a multisig account in Cosmos SDK.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/auth/README.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nsimd tx multisign transaction.json k1k2k3 k1sig.json k2sig.json k3sig.json\n```\n\n----------------------------------------\n\nTITLE: Implementing Pre-FinalizeBlock Hook for Vote Extension Recovery in Go\nDESCRIPTION: Example of implementing a pre-FinalizeBlock hook to recover injected vote extensions, perform computations, and store results in the cached store for use in FinalizeBlock.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/abci/03-vote-extensions.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\napp.SetPreBlocker(func(ctx sdk.Context, req *abci.RequestFinalizeBlock) error {\n    allVEs := [] VE{} // store all parsed vote extensions here\n    for _, tx := range req.Txs {\n        // define a custom function that tries to parse the tx as a vote extension\n        ve, ok := parseVoteExtension(tx)\n        if !ok {\n            continue\n        }\n\n        allVEs = append(allVEs, ve)\n    }\n\n    // perform any necessary computation on the vote extensions and store the result\n    // in the cached store\n    result := compute(allVEs)\n    err := storeVEResult(ctx, result)\n    if err != nil {\n        return err\n    }\n\n    return nil\n})\n```\n\n----------------------------------------\n\nTITLE: Declaring UpgradeHandler Function Signature in Go\nDESCRIPTION: Defines the signature for UpgradeHandler functions, which specify state migrations for upgrades.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/upgrade/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype UpgradeHandler func(Context, Plan, VersionMap) (VersionMap, error)\n```\n\n----------------------------------------\n\nTITLE: Defining a gRPC Service for AutoCLI Generation in Protobuf\nDESCRIPTION: Example of a simple gRPC service definition in Protobuf that AutoCLI would use to generate CLI commands. AutoCLI would create a 'my-method' command for this service.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/client/v2/README.md#2025-04-22_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nservice MyService {\n  rpc MyMethod(MyRequest) returns (MyResponse) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MsgSetWithdrawAddress Protobuf Message\nDESCRIPTION: Protobuf definition for the MsgSetWithdrawAddress message used to change a delegator's withdraw address. This message is part of the distribution module's transaction protocol.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/distribution/README.md#2025-04-22_snippet_9\n\nLANGUAGE: protobuf\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.47.0-rc1/proto/cosmos/distribution/v1beta1/tx.proto#L49-L60\n```\n\n----------------------------------------\n\nTITLE: Setting Module Version in Upgrade Handlers in Go\nDESCRIPTION: This Go code snippet prevents the `InitGenesis` function from being called for a new module using `SetUpgradeHandler`. It sets the module version in `fromVM` to skip the `InitGenesis` run.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/advanced/15-upgrade.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\napp.UpgradeKeeper.SetUpgradeHandler(\"my-plan\", func(ctx sdk.Context, plan upgradetypes.Plan, fromVM module.VersionMap) (module.VersionMap, error) {\n    // ...\n\n    // Set foo's version to the latest ConsensusVersion in the VersionMap.\n    // This will skip running InitGenesis on Foo\n    fromVM[foo.ModuleName] = foo.AppModule{}.ConsensusVersion()\n\n    return app.mm.RunMigrations(ctx, fromVM)\n})\n```\n\n----------------------------------------\n\nTITLE: Querying Account Information via gRPC in Cosmos SDK\nDESCRIPTION: Retrieves account information for a specific address using gRPC in Cosmos SDK.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/auth/README.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ngrpcurl -plaintext \\\n    -d '{\"address\":\"cosmos1..\"}' \\\n    localhost:9090 \\\n    cosmos.auth.v1beta1.Query/Account\n```\n\n----------------------------------------\n\nTITLE: Defining Event Service Interface in Go\nDESCRIPTION: Defines the Event Service interface for emitting typed and legacy untyped events in the cosmos-sdk core API.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-063-core-module-api.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage event\n\ntype Service interface {\n  EmitProtoEvent(ctx context.Context, event protoiface.MessageV1) error\n  EmitKVEvent(ctx context.Context, eventType string, attrs ...KVEventAttribute) error\n  EmitProtoEventNonConsensus(ctx context.Context, event protoiface.MessageV1) error\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Specific Delegation Information in Cosmos SDK\nDESCRIPTION: The Delegation endpoint retrieves delegation information for a specific delegator-validator pair. It requires both delegator and validator addresses as input and returns details including shares and token balance of the delegation.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/staking/README.md#2025-04-22_snippet_45\n\nLANGUAGE: bash\nCODE:\n```\ncosmos.staking.v1beta1.Query/Delegation\n```\n\nLANGUAGE: bash\nCODE:\n```\ngrpcurl -plaintext \\\n-d '{\"delegator_addr\": \"cosmos1y8nyfvmqh50p6ldpzljk3yrglppdv3t8phju77\", validator_addr\":\"cosmosvaloper1rne8lgs98p0jqe82sgt0qr4rdn4hgvmgp9ggcc\"}' \\\nlocalhost:9090 cosmos.staking.v1beta1.Query/Delegation\n```\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"delegation_response\":\n  {\n    \"delegation\":\n      {\n        \"delegator_address\":\"cosmos1y8nyfvmqh50p6ldpzljk3yrglppdv3t8phju77\",\n        \"validator_address\":\"cosmosvaloper1rne8lgs98p0jqe82sgt0qr4rdn4hgvmgp9ggcc\",\n        \"shares\":\"25083119936.000000000000000000\"\n      },\n    \"balance\":\n      {\n        \"denom\":\"stake\",\n        \"amount\":\"25083119936\"\n      }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing UnpackInterfaces for Profile (Go)\nDESCRIPTION: This Go function implements the UnpackInterfaces method for the Profile struct, enabling automatic unpacking of Any fields containing interface implementations. It checks if the Account field is set, initializes an AccountI receiver, and calls the AnyUnpacker. Proper implementation ensures GetCachedValue resolves to the concrete type inside Any after unmarshaling. Dependencies: codectypes.AnyUnpacker, Profile struct, AccountI interface. Limitations: only operates if Account is non-nil, and must be registered recursively for all embedded structs containing Any.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/advanced/05-encoding.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc (p *Profile) UnpackInterfaces(unpacker codectypes.AnyUnpacker) error {\n  if p.Account != nil {\n    var account AccountI\n    return unpacker.UnpackAny(p.Account, &account)\n  }\n\n  return nil\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Context Store Branching in BaseApp's runTx Function (Go)\nDESCRIPTION: Snippet from the `runTx` function in `BaseApp`, demonstrating the context caching and store branching pattern. It shows how `cacheTxContext` creates a branched context (`runMsgCtx`) and store (`msCache`), `runMsgs` executes using this branched context, and changes are written back (`msCache.Write()`) only if the execution is successful and in `DeliverTx` mode, otherwise the changes are discarded.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/advanced/02-context.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n```go\nrunMsgCtx, msCache := app.cacheTxContext(ctx, txBytes)\nresult = app.runMsgs(runMsgCtx, msgs, mode)\nresult.GasWanted = gasWanted\nif mode != runTxModeDeliver {\n  return result\n}\nif result.IsOK() {\n  msCache.Write()\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Exposing SimulationManager Method in Go\nDESCRIPTION: This snippet defines a method to expose the Simulation Manager for the implemented SimApp, which is vital for simulation capabilities. The method is a part of the Runtime interface, highlighting its role in retrieving the Simulation Manager instance to facilitate simulation tests.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-modules/14-simulator.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// SimulationManager implements the SimulationApp interface\nfunc (app *SimApp) SimulationManager() *module.SimulationManager {\nreturn app.sm\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Validator Information using REST API in Cosmos SDK\nDESCRIPTION: This endpoint retrieves information about a specific validator using their address. It returns details such as operator address, consensus public key, status, tokens, and commission rates.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/staking/README.md#2025-04-22_snippet_64\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \\\n\"http://localhost:1317/cosmos/staking/v1beta1/validators/cosmosvaloper16msryt3fqlxtvsy8u5ay7wv2p8mglfg9g70e3q\" \\\n-H  \"accept: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Fund Community Pool Implementation\nDESCRIPTION: Go implementation of the FundCommunityPool keeper method that transfers funds from sender to the protocol pool module.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/protocolpool/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc (k Keeper) FundCommunityPool(ctx context.Context, amount sdk.Coins, sender sdk.AccAddress) error {\n\treturn k.bankKeeper.SendCoinsFromAccountToModule(ctx, sender, types.ModuleName, amount)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ElectionatorHooks Interface for Election Event Handling in Go\nDESCRIPTION: This code snippet defines the ElectionatorHooks interface, which provides callback functions for various election events such as vote casting, member acceptance, and member revocation.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-007-specialization-groups.md#2025-04-22_snippet_1\n\nLANGUAGE: golang\nCODE:\n```\n// ElectionatorHooks, once registered with an Electionator,\n// trigger execution of relevant interface functions when\n// Electionator events occur.\ntype ElectionatorHooks interface {\n    AfterVoteCast(addr sdk.AccAddress, vote []byte)\n    AfterMemberAccepted(addr sdk.AccAddress)\n    AfterMemberRevoked(addr sdk.AccAddress, cause []byte)\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing a Cosmos SDK Chain\nDESCRIPTION: Command to initialize a new blockchain with a custom moniker and chain ID. This creates the necessary configuration files and a default genesis file.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/user/run-node/01-run-node.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# The argument <moniker> is the custom username of your node, it should be human-readable.\nsimd init <moniker> --chain-id my-test-chain\n```\n\n----------------------------------------\n\nTITLE: Example Setup of Foo Module with ORM in Go\nDESCRIPTION: This example demonstrates setting up a hypothetical foo module using ORM for state management. It shows how to register message and query services, and includes a `BeginBlock` implementation that returns nil.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-063-core-module-api.md#2025-04-22_snippet_12\n\nLANGUAGE: go\nCODE:\n```\ntype Keeper struct {\n\tdb orm.ModuleDB\n\tevtSrv event.Service\n}\n\nfunc (k Keeper) RegisterServices(r grpc.ServiceRegistrar) {\n  foov1.RegisterMsgServer(r, k)\n  foov1.RegisterQueryServer(r, k)\n}\n\nfunc (k Keeper) BeginBlock(context.Context) error {\n\treturn nil\n}\n\nfunc ProvideApp(config *foomodulev2.Module, evtSvc event.EventService, db orm.ModuleDB) (Keeper, appmodule.AppModule){\n    k := &Keeper{db: db, evtSvc: evtSvc}\n    return k, k\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining REST Endpoints for Queries using gRPC-Gateway\nDESCRIPTION: This example shows how to define REST endpoints for queries using gRPC-Gateway annotations. It demonstrates the addition of google.api.http options to the Query service for the bank module.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-021-protobuf-query-encoding.md#2025-04-22_snippet_4\n\nLANGUAGE: protobuf\nCODE:\n```\nservice Query {\n  rpc QueryBalance(QueryBalanceParams) returns (cosmos_sdk.v1.Coin) {\n    option (google.api.http) = {\n      get: \"/x/bank/v1/balance/{address}/{denom}\"\n    };\n  }\n  rpc QueryAllBalances(QueryAllBalancesParams) returns (QueryAllBalancesResponse) {\n    option (google.api.http) = {\n      get: \"/x/bank/v1/balances/{address}\"\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Submit Proposal Message in Protobuf\nDESCRIPTION: Protobuf message definition for submitting governance proposals, referenced from cosmos-sdk repository.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/README.md#2025-04-22_snippet_10\n\nLANGUAGE: protobuf\nCODE:\n```\nreference https://github.com/cosmos/cosmos-sdk/blob/v0.47.0-rc1/proto/cosmos/gov/v1/tx.proto#L42-L69\n```\n\n----------------------------------------\n\nTITLE: Distribute From Community Pool Implementation\nDESCRIPTION: Go implementation of the DistributeFromCommunityPool keeper method that transfers funds from the protocol pool to a recipient.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/protocolpool/README.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfunc (k Keeper) DistributeFromCommunityPool(ctx context.Context, amount sdk.Coins, receiveAddr sdk.AccAddress) error {\n\treturn k.bankKeeper.SendCoinsFromModuleToAccount(ctx, types.ModuleName, receiveAddr, amount)\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Unsigned Transaction with CLI\nDESCRIPTION: Creates an unsigned transaction using the CLI's generate-only flag. The command outputs the transaction as JSON that can be saved to a file for signing later.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/user/run-node/03-txs.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsimd tx bank send $MY_VALIDATOR_ADDRESS $RECIPIENT 1000stake --chain-id my-test-chain --generate-only\n```\n\n----------------------------------------\n\nTITLE: Querying Group Policies by Group\nDESCRIPTION: Command to query all policies associated with a specific group ID.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/group/README.md#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nsimd query group group-policies-by-group 1\n```\n\n----------------------------------------\n\nTITLE: Querying All Proposals using gRPC v1 in Cosmos SDK\nDESCRIPTION: The gRPC endpoint for querying all proposals with optional filters using the current v1 API.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/README.md#2025-04-22_snippet_33\n\nLANGUAGE: bash\nCODE:\n```\ncosmos.gov.v1.Query/Proposals\n```\n\n----------------------------------------\n\nTITLE: Updating Context with Consensus Parameters after PreBlocker in Cosmos SDK (Go)\nDESCRIPTION: This Go code snippet demonstrates how to update the application's context (`ctx`) within the `finalizeBlockState` after a `PreBlocker` signals that consensus parameters have been changed (`ConsensusParamsChanged=true`). It fetches the potentially updated consensus parameters using `app.GetConsensusParams()` and creates a new context derived from the existing one but incorporating the latest parameters via `WithConsensusParams`. This updated context must then be used for subsequent lifecycle methods.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-modules/17-preblock.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\napp.finalizeBlockState.ctx = app.finalizeBlockState.ctx.WithConsensusParams(app.GetConsensusParams())\n```\n\n----------------------------------------\n\nTITLE: Implementing Default Recovery Middleware in Go\nDESCRIPTION: Provides an implementation of a default recovery middleware that wraps any unhandled panic in a standard error format with stack trace information.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-022-custom-panic-handling.md#2025-04-22_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\nfunc newDefaultRecoveryMiddleware() recoveryMiddleware {\n    handler := func(recoveryObj interface{}) error {\n        return errorsmod.Wrap(\n            sdkerrors.ErrPanic, fmt.Sprintf(\"recovered: %v\\nstack:\\n%v\", recoveryObj, string(debug.Stack())),\n        )\n    }\n\n    return newRecoveryMiddleware(handler, nil)\n}\n```\n\n----------------------------------------\n\nTITLE: Decoding Transaction with CLI\nDESCRIPTION: Decodes protobuf-encoded transaction bytes back into JSON format. Useful for examining transaction contents.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/user/run-node/03-txs.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsimd tx decode [protobuf-byte-string]\n```\n\n----------------------------------------\n\nTITLE: Implementing an Invariant Function in Cosmos SDK (Go)\nDESCRIPTION: Defines an invariant function in a Cosmos SDK module. The function BalanceInvariants uses the module Keeper as input and returns an sdk.Invariant—a function accepting context.Context and returning a tuple (string, bool). The returned string serves as a log or error message, and the boolean signals invariant status. Implementers insert logical checks within the inner function to enforce balance-related correctness. Requires the Cosmos SDK and correct Keeper type; typically used in keeper/invariants.go.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-modules/07-invariants.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// Example for an Invariant that checks balance-related invariants\n\nfunc BalanceInvariants(k Keeper) sdk.Invariant {\n\treturn func(ctx context.Context) (string, bool) {\n        // Implement checks for balance-related invariants\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing UnorderedTxDecorator for Transaction Verification in Go\nDESCRIPTION: Defines a new AnteHandler decorator for verifying unordered transactions, including timeout checks and duplicate prevention.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-070-unordered-account.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage ante\n\nimport (\n\t\"slices\"\n\t\"strings\"\n\t\"time\"\n\n\tsdk \"github.com/cosmos/cosmos-sdk/types\"\n\tsdkerrors \"github.com/cosmos/cosmos-sdk/types/errors\"\n\tauthkeeper \"github.com/cosmos/cosmos-sdk/x/auth/keeper\"\n\tauthsigning \"github.com/cosmos/cosmos-sdk/x/auth/signing\"\n\n\terrorsmod \"cosmossdk.io/errors\"\n)\n\nvar _ sdk.AnteDecorator = (*UnorderedTxDecorator)(nil)\n\ntype UnorderedTxDecorator struct {\n\tmaxTimeoutDuration time.Duration\n\ttxManager          authkeeper.UnorderedTxManager\n}\n\nfunc NewUnorderedTxDecorator(\n\tutxm authkeeper.UnorderedTxManager,\n) *UnorderedTxDecorator {\n\treturn &UnorderedTxDecorator{\n\t\tmaxTimeoutDuration: 10 * time.Minute,\n\t\ttxManager:          utxm,\n\t}\n}\n\nfunc (d *UnorderedTxDecorator) AnteHandle(\n\tctx sdk.Context,\n\ttx sdk.Tx,\n\t_ bool,\n\tnext sdk.AnteHandler,\n) (sdk.Context, error) {\n\tif err := d.ValidateTx(ctx, tx); err != nil {\n\t\treturn ctx, err\n\t}\n\treturn next(ctx, tx, false)\n}\n\nfunc (d *UnorderedTxDecorator) ValidateTx(ctx sdk.Context, tx sdk.Tx) error {\n\tunorderedTx, ok := tx.(sdk.TxWithUnordered)\n\tif !ok || !unorderedTx.GetUnordered() {\n\t\treturn nil\n\t}\n\n\tblockTime := ctx.BlockTime()\n\ttimeoutTimestamp := unorderedTx.GetTimeoutTimeStamp()\n\tif timeoutTimestamp.IsZero() || timeoutTimestamp.Unix() == 0 {\n\t\treturn errorsmod.Wrap(\n\t\t\tsdkerrors.ErrInvalidRequest,\n\t\t\t\"unordered transaction must have timeout_timestamp set\",\n\t\t)\n\t}\n\tif timeoutTimestamp.Before(blockTime) {\n\t\treturn errorsmod.Wrap(\n\t\t\tsdkerrors.ErrInvalidRequest,\n\t\t\t\"unordered transaction has a timeout_timestamp that has already passed\",\n\t\t)\n\t}\n\tif timeoutTimestamp.After(blockTime.Add(d.maxTimeoutDuration)) {\n\t\treturn errorsmod.Wrapf(\n\t\t\tsdkerrors.ErrInvalidRequest,\n\t\t\t\"unordered tx ttl exceeds %s\",\n\t\t\td.maxTimeoutDuration.String(),\n\t\t)\n\t}\n\n\texecMode := ctx.ExecMode()\n\tif execMode == sdk.ExecModeSimulate {\n\t\treturn nil\n\t}\n\n\tsignerAddrs, err := getSigners(tx)\n\tif err != nil {\n\t\treturn err\n\t}\n\t\n\tfor _, signer := range signerAddrs {\n\t\tcontains, err := d.txManager.Contains(ctx, signer, uint64(unorderedTx.GetTimeoutTimeStamp().Unix()))\n\t\tif err != nil {\n\t\t\treturn errorsmod.Wrap(\n\t\t\t\tsdkerrors.ErrIO,\n\t\t\t\t\"failed to check contains\",\n\t\t\t)\n\t\t}\n\t\tif contains {\n\t\t\treturn errorsmod.Wrapf(\n\t\t\t\tsdkerrors.ErrInvalidRequest,\n\t\t\t\t\"tx is duplicated for signer %x\", signer,\n\t\t\t)\n\t\t}\n\n\t\tif err := d.txManager.Add(ctx, signer, uint64(unorderedTx.GetTimeoutTimeStamp().Unix())); err != nil {\n\t\t\treturn errorsmod.Wrap(\n\t\t\t\tsdkerrors.ErrIO,\n\t\t\t\t\"failed to add unordered sequence to state\",\n\t\t\t)\n\t\t}\n    }\n\t\n\t\n\treturn nil\n}\n\nfunc getSigners(tx sdk.Tx) ([][]byte, error) {\n\tsigTx, ok := tx.(authsigning.SigVerifiableTx)\n\tif !ok {\n\t\treturn nil, errorsmod.Wrap(sdkerrors.ErrTxDecode, \"invalid tx type\")\n\t}\n\treturn sigTx.GetSigners()\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Provided GenesisState Data - Go\nDESCRIPTION: This Go method reference illustrates how to implement ValidateGenesis, validating all parameters of a supplied GenesisState to ensure correctness and consistency before initializing module state. Dependencies include the GenesisState type and any relevant validation logic. The function expects a GenesisState input and outputs an error or exception if validation fails, enforcing genesis file integrity.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-modules/08-genesis.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/x/auth/types/genesis.go#L62-L75\n```\n\n----------------------------------------\n\nTITLE: Defining ExtendVoteHandler in Go for Cosmos SDK\nDESCRIPTION: Definition of the ExtendVoteHandler function type used to extend pre-commit votes with arbitrary data in ABCI++.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/abci/03-vote-extensions.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype ExtendVoteHandler func(Context, *abci.RequestExtendVote) (*abci.ResponseExtendVote, error)\n```\n\n----------------------------------------\n\nTITLE: Querying Cosmos SDK State via Go gRPC Client\nDESCRIPTION: Demonstrates how to create a Go program that connects to a gRPC server, creates a client to query the bank service, and retrieves an account balance.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/user/run-node/02-interact-node.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"context\"\n    \"fmt\"\n\n    \"google.golang.org/grpc\"\n\n    \"github.com/cosmos/cosmos-sdk/codec\"\n    sdk \"github.com/cosmos/cosmos-sdk/types\"\n    banktypes \"github.com/cosmos/cosmos-sdk/x/bank/types\"\n)\n\nfunc queryState() error {\n    myAddress, err := sdk.AccAddressFromBech32(\"cosmos1...\") // the my_validator or recipient address.\n    if err != nil {\n        return err\n    }\n\n    // Create a connection to the gRPC server.\n    grpcConn, err := grpc.Dial(\n        \"127.0.0.1:9090\", // your gRPC server address.\n        grpc.WithInsecure(), // The Cosmos SDK doesn't support any transport security mechanism. \n        // This instantiates a general gRPC codec which handles proto bytes. We pass in a nil interface registry\n        // if the request/response types contain interface instead of 'nil' you should pass the application specific codec.\n\t\tgrpc.WithDefaultCallOptions(grpc.ForceCodec(codec.NewProtoCodec(nil).GRPCCodec())),\n\t)\n    if err != nil {\n        return err\n    }\n    defer grpcConn.Close()\n\n    // This creates a gRPC client to query the x/bank service.\n    bankClient := banktypes.NewQueryClient(grpcConn)\n    bankRes, err := bankClient.Balance(\n        context.Background(),\n        &banktypes.QueryBalanceRequest{Address: myAddress.String(), Denom: \"stake\"},\n    )\n    if err != nil {\n        return err\n    }\n\n    fmt.Println(bankRes.GetBalance()) // Prints the account balance\n\n    return nil\n}\n\nfunc main() {\n    if err := queryState(); err != nil {\n        panic(err)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Emitting a Legacy Event Using EventManager - Cosmos SDK - Go\nDESCRIPTION: This Go code demonstrates how to emit a legacy event using the EventManager in the context of a Cosmos SDK module. It shows the standard call pattern where the context's EventManager emits a synthesized event with a custom type and attribute. Dependencies include the Cosmos SDK's Go APIs and the presence of a valid execution Context. The key parameters are 'eventType', 'attributeKey', and 'attributeValue', which define the structure of the event to emit. The function is typically called within a message or block handler, and ensures the event is tracked in the current transaction or block execution. Requires import of 'sdk' and the proper setup of 'ctx'.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/advanced/08-events.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nctx.EventManager().EmitEvent(\n    sdk.NewEvent(eventType, sdk.NewAttribute(attributeKey, attributeValue)),\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Epoch Hooks in Go\nDESCRIPTION: Hook interface definitions for executing code before epoch start and after epoch end. These hooks allow modules to perform actions at specific epoch boundaries.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/epochs/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n  // the first block whose timestamp is after the duration is counted as the end of the epoch\n  AfterEpochEnd(ctx sdk.Context, epochIdentifier string, epochNumber int64)\n  // new epoch is next block of epoch end block\n  BeforeEpochStart(ctx sdk.Context, epochIdentifier string, epochNumber int64)\n```\n\n----------------------------------------\n\nTITLE: Importing Configuration Package in Module Source (Cosmos SDK, Go)\nDESCRIPTION: This snippet shows the import statements necessary to load the generated configuration code within the module's main Go source file. This import enables references to generated configuration structs and types, required by depinject to wire dependencies. All imports must be public and correctly point to the generated code for module functionality.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-modules/15-depinject.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nreference\\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/x/group/module/module.go#L12-L14\n```\n\n----------------------------------------\n\nTITLE: Signing Transaction with CLI\nDESCRIPTION: Signs an unsigned transaction stored in a file using the specified account from the keyring. The command outputs the signed transaction as JSON.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/user/run-node/03-txs.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsimd tx sign unsigned_tx.json --chain-id my-test-chain --keyring-backend test --from $MY_VALIDATOR_ADDRESS\n```\n\n----------------------------------------\n\nTITLE: Revoking Fee Allowance in Cosmos SDK (Shell)\nDESCRIPTION: Command to revoke a granted fee allowance in the Cosmos SDK.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/feegrant/README.md#2025-04-22_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nsimd tx feegrant revoke [granter] [grantee] [flags]\n```\n\nLANGUAGE: shell\nCODE:\n```\nsimd tx feegrant revoke cosmos1.. cosmos1..\n```\n\n----------------------------------------\n\nTITLE: Referencing Committer Interface for Commit Stores (Go Reference)\nDESCRIPTION: This snippet directly links to the Committer interface source definition, which extends basic store interfaces with commit capabilities, allowing state changes to be persistently written to the database. The interface is crucial for commit store types like CommitKVStore and CommitMultiStore and should only be used by authorized components (e.g., baseapp) per Cosmos SDK's object-capabilities model.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/advanced/04-store.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/store/types/store.go#L32-L37\n```\n\n----------------------------------------\n\nTITLE: Initializing a SimApp for Testnet with Cosmos SDK (Go)\nDESCRIPTION: This function serves as an entry point for modifying the state of a Cosmos SDK SimApp instance for testnet use. It implements both required (e.g., validator reshaping, module state resets) and optional changes (custom parameters). The function receives the current app, cryptographic keys, addresses, and an optional upgrade trigger, returning a fully adjusted app instance for isolated network testing. Dependencies include the Cosmos SDK app, cryptographic libraries, and proper Go module imports.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-apps/05-app-testnet.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n  // InitSimAppForTestnet is broken down into two sections:\n  // Required Changes: Changes that, if not made, will cause the testnet to halt or panic\n  // Optional Changes: Changes to customize the testnet to one's liking (lower vote times, fund accounts, etc)\n  func InitSimAppForTestnet(app *SimApp, newValAddr bytes.HexBytes, newValPubKey crypto.PubKey, newOperatorAddress, upgradeToTrigger string) *SimApp {\n  ...\n  }\n```\n\n----------------------------------------\n\nTITLE: Updating Genesis Configuration with jq and sed\nDESCRIPTION: Examples of using jq and sed commands to modify configuration values in the genesis.json and app.toml files, including chain ID, API server settings, voting period, and inflation rate.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/user/run-node/01-run-node.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# to change the chain-id\njq '.chain_id = \"testing\"' genesis.json > temp.json && mv temp.json genesis.json\n\n# to enable the api server\nsed -i '/\\[api\\]/,+3 s/enable = false/enable = true/' app.toml\n\n# to change the voting_period\njq '.app_state.gov.voting_params.voting_period = \"600s\"' genesis.json > temp.json && mv temp.json genesis.json\n\n# to change the inflation\njq '.app_state.mint.minter.inflation = \"0.300000000000000000\"' genesis.json > temp.json && mv temp.json genesis.json\n```\n\n----------------------------------------\n\nTITLE: Creating Test Keys for Transaction Signing in Go\nDESCRIPTION: Generates test private keys and addresses that can be used for transaction creation and signing in a development environment.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/user/run-node/03-txs.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"github.com/cosmos/cosmos-sdk/testutil/testdata\"\n)\n\npriv1, _, addr1 := testdata.KeyTestPubAddr()\npriv2, _, addr2 := testdata.KeyTestPubAddr()\npriv3, _, addr3 := testdata.KeyTestPubAddr()\n```\n\n----------------------------------------\n\nTITLE: Defining Snapshot Manager Structure in Cosmos SDK\nDESCRIPTION: Structure definition for the snapshot Manager, which tracks the multistore snapshotter and extension snapshotters. The extensions field maps snapshotter names to their implementations, allowing modules to register custom snapshot handlers.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-049-state-sync-hooks.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype Manager struct {\n\tstore      *Store\n\tmultistore types.Snapshotter\n\textensions map[string]types.ExtensionSnapshotter\n\tmtx                sync.Mutex\n\toperation          operation\n\tchRestore          chan<- io.ReadCloser\n\tchRestoreDone      <-chan restoreDone\n\trestoreChunkHashes [][]byte\n\trestoreChunkIndex  uint32\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SignDocAux Message in Protobuf\nDESCRIPTION: Defines a protobuf message for auxiliary signing documents, including body bytes, public key, chain ID, and account number.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-020-protobuf-transaction-encoding.md#2025-04-22_snippet_8\n\nLANGUAGE: protobuf\nCODE:\n```\n// types/types.proto\nmessage SignDocAux {\n    bytes body_bytes = 1;\n    // PublicKey is included in SignDocAux :\n    // 1. as a special case for multisig public keys. For multisig public keys,\n    // the signer should use the top-level multisig public key they are signing\n    // against, not their own public key. This is to prevent against a form\n    // of malleability where a signature could be taken out of context of the\n    // multisig key that was intended to be signed for\n    // 2. to guard against scenario where configuration information is encoded\n    // in public keys (it has been proposed) such that two keys can generate\n    // the same signature but have different security properties\n    //\n    // By including it here, the composer of AuthInfo cannot reference the\n    // a public key variant the signer did not intend to use\n    PublicKey public_key = 2;\n    string chain_id = 3;\n    uint64 account_number = 4;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TxConfig Interface in Go\nDESCRIPTION: The TxConfig interface defines methods for creating a TxBuilder. It is implemented by the x/auth/tx module.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/auth/tx/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype TxConfig interface {\n\tNewTxBuilder() TxBuilder\n\tWrapTxBuilder(sdk.Tx) (TxBuilder, error)\n\tMarshalTx(tx sdk.Tx) ([]byte, error)\n\tTxEncoder() sdk.TxEncoder\n\tTxDecoder() sdk.TxDecoder\n\tTxJSONEncoder() sdk.TxEncoder\n\tTxJSONDecoder() sdk.TxDecoder\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Modules in Cosmos SDK Application\nDESCRIPTION: The `RegisterModules` function allows manual registration of modules within a Cosmos SDK application. It is a secondary method to register modules not configured via the declarative approach. The function plays a critical role in integrating modules manually.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-apps/00-runtime.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc (a *App) RegisterModules(modules ...module.AppModule) error\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Signature Verification in Go for Cosmos SDK\nDESCRIPTION: Defines a custom signature verification function as an AnteHandler micro-function, allowing users to implement their own signature verification logic.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-010-modular-antehandler.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nfunc CustomSigVerify(ctx Context, tx Tx, simulate bool) (newCtx Context, err error) {\n    // do some custom signature verification logic\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Command for Transaction Generation in Go\nDESCRIPTION: Demonstrates how to implement a Cobra command that generates or broadcasts a transaction using the Cosmos SDK client context and transaction generation utilities.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-020-protobuf-transaction-encoding.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/spf13/cobra\"\nimport \"github.com/cosmos/cosmos-sdk/client\"\nimport \"github.com/cosmos/cosmos-sdk/client/tx\"\n\nfunc NewCmdDoSomething(clientCtx client.Context) *cobra.Command {\n\treturn &cobra.Command{\n\t\tRunE: func(cmd *cobra.Command, args []string) error {\n\t\t\tclientCtx := ctx.InitWithInput(cmd.InOrStdin())\n\t\t\tmsg := NewSomeMsg{...}\n\t\t\ttx.GenerateOrBroadcastTx(clientCtx, msg)\n\t\t},\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Scalars in Protobuf for Cosmos SDK\nDESCRIPTION: Defines a scalar for account address strings in a Cosmos SDK module. Scalars help clients construct messages that conform to expected field types enforced by SDK modules. In this example, `cosmos_proto.scalar` is used to specify the string format required. It has dependencies on having proper protobuf packages imported to utilize `cosmos_proto` tools.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-modules/05-protobuf-annotations.md#2025-04-22_snippet_1\n\nLANGUAGE: proto\nCODE:\n```\n(cosmos_proto.scalar) = \"cosmos.AddressString\"\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Module Account Address in Go\nDESCRIPTION: Demonstrates the basic usage of the `address.Module` function to create a module account address using the module name and a single derivation key. This function utilizes hashing to generate the address.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-028-public-key-addresses.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\naddress.Module(moduleName, key)\n```\n\n----------------------------------------\n\nTITLE: Checking Validator Node Status\nDESCRIPTION: Command to check the status of the running validator node in the test network. This provides information about the chain, node, and sync status.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/user/run-node/05-run-testnet.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsimd status\n```\n\n----------------------------------------\n\nTITLE: Nested Multi-Signing Transactions in Cosmos SDK\nDESCRIPTION: Signs transactions with nested multisig accounts in Cosmos SDK.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/auth/README.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nsimd tx multi-sign transaction.json ms1 ms1p1sig.json ms1p2sig.json --signature-only --skip-signature-verification > ms1sig.json\n```\n\nLANGUAGE: bash\nCODE:\n```\nsimd tx multi-sign transaction.json k1ms1 k1sig.json ms1sig.json --skip-signature-verification\n```\n\n----------------------------------------\n\nTITLE: Querying Delegations to a Validator in Cosmos SDK\nDESCRIPTION: This command retrieves all delegations made to a specific validator. It returns information about the delegator addresses, amounts delegated, and shares allocated for each delegation.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/staking/README.md#2025-04-22_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nsimd query staking delegations-to [validator-addr] [flags]\n```\n\nLANGUAGE: bash\nCODE:\n```\nsimd query staking delegations-to cosmosvaloper1gghjut3ccd8ay0zduzj64hwre2fxs9ldmqhffj\n```\n\n----------------------------------------\n\nTITLE: Extending CommitMultiStore interface for state listening in Go\nDESCRIPTION: Updates to the CommitMultiStore interface to support listener attachment and state cache retrieval. These methods enable adding listeners to specific stores and accessing state changes.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-038-state-listening.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype CommitMultiStore interface {\n    ...\n\n    // AddListeners adds a listener for the KVStore belonging to the provided StoreKey\n    AddListeners(keys []StoreKey)\n\n    // PopStateCache returns the accumulated state change messages from MemoryListener\n    PopStateCache() []StoreKVPair\n}\n```\n\n----------------------------------------\n\nTITLE: Broadcasting Signed Transactions in Cosmos SDK\nDESCRIPTION: Broadcasts a signed transaction to the network in Cosmos SDK.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/auth/README.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nsimd tx broadcast tx.signed.json\n```\n\n----------------------------------------\n\nTITLE: Querying GroupPoliciesByGroup Endpoint\nDESCRIPTION: REST endpoint for querying group policies by group ID with pagination support. Returns group policy details including address, admin, metadata, and decision policy configuration.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/group/README.md#2025-04-22_snippet_33\n\nLANGUAGE: bash\nCODE:\n```\n/cosmos/group/v1/group_policies_by_group/{group_id}\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl localhost:1317/cosmos/group/v1/group_policies_by_group/1\n```\n\n----------------------------------------\n\nTITLE: Installing Cosmos SDK Go Package\nDESCRIPTION: Shows how to install the Cosmos SDK Go package for programmatic interaction with a Cosmos SDK node.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/user/run-node/02-interact-node.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/cosmos/cosmos-sdk@main\n```\n\n----------------------------------------\n\nTITLE: MsgGrant Protobuf Definition for Creating Authorizations\nDESCRIPTION: The MsgGrant message protobuf definition used to create an authorization grant between a granter and a grantee. It specifies the granter, grantee, and the grant object containing authorization and expiration.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/authz/README.md#2025-04-22_snippet_10\n\nLANGUAGE: protobuf\nCODE:\n```\n// MsgGrant is a request type for Grant method. It declares authorization to the grantee\n// on behalf of the granter with the provided expiration time.\nmessage MsgGrant {\n  string granter = 1;\n  string grantee = 2;\n\n  cosmos.authz.v1beta1.Grant grant = 3 [(gogoproto.nullable) = false];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Mempool Settings in app.toml\nDESCRIPTION: Example configuration for disabling transaction insertion into the mempool by setting max-txs to -1, useful for non-validator nodes.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/user/run-node/01-run-node.md#2025-04-22_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[mempool]\n# Setting max-txs to 0 will allow for an unbounded amount of transactions in the mempool.\n# Setting max_txs to negative 1 (-1) will disable transactions from being inserted into the mempool.\n# Setting max_txs to a positive number (> 0) will limit the number of transactions in the mempool, by the specified amount.\n#\n# Note, this configuration only applies to SDK built-in app-side mempool\n# implementations.\nmax-txs = \"-1\"\n```\n\n----------------------------------------\n\nTITLE: PreBlocker Hook for Vote Extension Persistence\nDESCRIPTION: This Go snippet implements the `PreBlocker` hook in the `MyApp` struct, which allows storing computational results derived from vote extensions. Called at the start of `FinalizeBlock`, it processes vote extensions without directly altering the application state during `ProcessProposal`, avoiding state inconsistencies during replay. Inputs include the SDK context and request to finalize a block. Errors arise from processing failures in `processVoteExtensions`.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-064-abci-2.0.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc (a MyApp) PreBlocker(ctx sdk.Context, req *abci.RequestFinalizeBlock) error {\n\tvoteExts := GetVoteExtensions(ctx, req.Txs)\n\t\n\t// Process and perform some compute on vote extensions, storing any resulting\n\t// state.\n\tif err a.processVoteExtensions(ctx, voteExts); if err != nil {\n\t\treturn err\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Config Samples with Cosmos SDK\nDESCRIPTION: Shell commands for checking out a specific Cosmos SDK version, building it, and generating an app.toml configuration file. Uses v0.47 as an example but can be adapted for other versions.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/tools/confix/testdata/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# This example uses v0.47, substitute the version of your choice.\ngit checkout release/v0.47.x\n\n# Install dependencies\nmake install\n\n# Confirm you go the version you expected, and generate the file.\nsimd version\nsimd init test --chain-id test\n\n# Copy the file out.\ncp ./.simapp/config/app.toml v47-app.toml\n```\n\n----------------------------------------\n\nTITLE: Defining the AnteDecorator Interface in Go\nDESCRIPTION: Defines the `AnteDecorator` interface in Go for the Cosmos SDK. This interface allows wrapping an `AnteHandler` to perform pre- and post-processing by implementing the `AnteHandle` method, which takes the context, transaction, simulation flag, and the next handler in the chain.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-010-modular-antehandler.md#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\n// An AnteDecorator wraps an AnteHandler, and can do pre- and post-processing on the next AnteHandler\ntype AnteDecorator interface {\n    AnteHandle(ctx Context, tx Tx, simulate bool, next AnteHandler) (newCtx Context, err error)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining NFT Msg Service in Protobuf\nDESCRIPTION: Protobuf definition for the NFT Msg service, including the Send method for transferring NFT ownership. It defines the MsgSend and MsgSendResponse message structures.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-043-nft-module.md#2025-04-22_snippet_3\n\nLANGUAGE: protobuf\nCODE:\n```\nservice Msg {\n  rpc Send(MsgSend)         returns (MsgSendResponse);\n}\n\nmessage MsgSend {\n  string class_id = 1;\n  string id       = 2;\n  string sender   = 3;\n  string reveiver = 4;\n}\nmessage MsgSendResponse {}\n```\n\n----------------------------------------\n\nTITLE: Defining Grant and Revoke Fee Allowance Messages\nDESCRIPTION: Protocol Buffer message definitions for operations to grant and revoke fee allowances between accounts. MsgGrantAllowance adds permission for a grantee to use the granter's funds for fees, while MsgRevokeAllowance removes this permission.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-029-fee-grant-module.md#2025-04-22_snippet_2\n\nLANGUAGE: protobuf\nCODE:\n```\n// MsgGrantAllowance adds permission for Grantee to spend up to Allowance\n// of fees from the account of Granter.\nmessage MsgGrantAllowance {\n     string granter = 1;\n     string grantee = 2;\n     google.protobuf.Any allowance = 3;\n }\n\n // MsgRevokeAllowance removes any existing FeeAllowance from Granter to Grantee.\n message MsgRevokeAllowance {\n     string granter = 1;\n     string grantee = 2;\n }\n```\n\n----------------------------------------\n\nTITLE: Defining a Profile Message with Concrete Reference (Protobuf)\nDESCRIPTION: This snippet shows a Protobuf message definition for a Profile structure with an explicitly typed field referencing a base account implementation. The message includes an 'account' field of type 'cosmos.auth.v1beta1.BaseAccount' and a 'bio' description. It demonstrates the limitation of strongly typed fields in Protobuf, which is addressed in subsequent examples when interface support is required. Prerequisites: knowledge of Protocol Buffers and Cosmos SDK account types.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/advanced/05-encoding.md#2025-04-22_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage Profile {\n  // account is the account associated to a profile.\n  cosmos.auth.v1beta1.BaseAccount account = 1;\n  // bio is a short description of the account.\n  string bio = 4;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Base Address Generation for Public Keys in Go\nDESCRIPTION: Defines the basic Hash function used for generating addresses from public keys. It uses a double hashing approach with a type prefix to prevent switch table attacks, producing a 32-byte address.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-028-public-key-addresses.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nconst A_LEN = 32\n\nfunc Hash(typ string, key []byte) []byte {\n    return hash(hash(typ) + key)[:A_LEN]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining gRPC Query Service for Params in Protobuf\nDESCRIPTION: Example of how to define a gRPC query service for retrieving module parameters. This allows clients to query the current parameter values.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-046-module-params.md#2025-04-22_snippet_2\n\nLANGUAGE: protobuf\nCODE:\n```\nservice Query {\n  // ...\n  \n  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {\n    option (google.api.http).get = \"/cosmos/<module>/v1beta1/params\";\n  }\n}\n\nmessage QueryParamsResponse {\n  Params params = 1 [(gogoproto.nullable) = false];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a CheckTxHandler Function in Go\nDESCRIPTION: Defines a CheckTxHandler function type for extending transaction validation logic within Cosmos SDK applications. It receives a context and transaction bytes, returning a Tx and an error. The handler must produce deterministic results, avoiding redundant decoding. Requires the SDK context and ABCI. The inputs are context and transaction bytes; outputs are a Tx and error indicating success or failure.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/abci/04-checktx.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype CheckTxHandler func(ctx sdk.Context, tx []byte) (Tx, error)\n```\n\n----------------------------------------\n\nTITLE: Grant Queue Item Key Management for x/authz Module\nDESCRIPTION: Functions for creating and parsing keys for the grant queue in the authz module. These functions handle the construction of keys that track grant expirations for efficient pruning and state management.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/authz/README.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\n// GrantQueueTimePrefix returns a prefix to scan for all the grants that expire at a specific block time\nfunc GrantQueueTimePrefix(expiration time.Time) []byte {\n\texpirationBz := sdk.FormatTimeBytes(expiration)\n\treturn append(GrantQueuePrefix, expirationBz...)\n}\n\n// GrantQueueKey returns a key combining granter, grantee, expiration and msgType that is used for the grant queue\nfunc GrantQueueKey(expiration time.Time) []byte {\n\treturn GrantQueueTimePrefix(expiration)\n}\n\n// grantQueueKeyFields represents ID fields of a grant queue key\ntype grantQueueKeyFields struct {\n\texpiration string\n\tgranter    string\n\tgrantee    string\n}\n\n// parseGrantQueueKey extracts and returns ID fields from a grant queue key\nfunc parseGrantQueueKey(key []byte) grantQueueKeyFields {\n\tkey = key[1:] // remove prefix byte\n\texpirationBz, granter, grantee := parseKeyWithTime(key)\n\n\treturn grantQueueKeyFields{\n\t\texpiration: string(expirationBz),\n\t\tgranter:    granter,\n\t\tgrantee:    grantee,\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Evidence Handler Function in Go\nDESCRIPTION: Definition of the Handler function type that processes evidence. Handlers are responsible for validating evidence and executing business logic like slashing and jailing validators.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/evidence/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// Handler defines an agnostic Evidence handler. The handler is responsible\n// for executing all corresponding business logic necessary for verifying the\n// evidence as valid. In addition, the Handler may execute any necessary\n// slashing and potential jailing.\ntype Handler func(context.Context, Evidence) error\n```\n\n----------------------------------------\n\nTITLE: Defining the Tx Interface in Cosmos SDK (Go)\nDESCRIPTION: This Go reference points to the Cosmos SDK's definition of the Tx interface, central to all transaction objects. The interface prescribes transaction behavior, especially the GetMsgs method for extracting contained sdk.Msg objects. Key dependencies are the Cosmos SDK's types package and its transaction-related modules. Developers are generally encouraged to use the higher-level TxBuilder interface rather than manipulating Tx directly due to its role as an intermediate abstraction.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/advanced/01-transactions.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.53.0-rc.2/types/tx_msg.go#L53-L58\n```\n\n----------------------------------------\n\nTITLE: Querying Staking Parameters with gRPC in Cosmos Staking Module\nDESCRIPTION: This gRPC endpoint queries the staking module parameters. It returns important configuration values like unbonding time, maximum validators, maximum entries, historical entries, and bond denomination used in the staking module.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/staking/README.md#2025-04-22_snippet_54\n\nLANGUAGE: bash\nCODE:\n```\ncosmos.staking.v1beta1.Query/Params\n```\n\nLANGUAGE: bash\nCODE:\n```\ngrpcurl -plaintext localhost:9090 cosmos.staking.v1beta1.Query/Params\n```\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"params\": {\n    \"unbondingTime\": \"1814400s\",\n    \"maxValidators\": 100,\n    \"maxEntries\": 7,\n    \"historicalEntries\": 10000,\n    \"bondDenom\": \"stake\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Plan Structure in Go\nDESCRIPTION: Defines the Plan type used to schedule live upgrades. It includes a Name, Height, and Info field for upgrade metadata.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/upgrade/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype Plan struct {\n  Name   string\n  Height int64\n  Info   string\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MsgTokenizeShares in Cosmos SDK\nDESCRIPTION: This message is used to tokenize delegated tokens. It creates share tokens denominated in the validator and record ID of the underlying delegation. The total amount of outstanding tokenized shares is checked against exempt delegations and the exemption factor.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-061-liquid-staking.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### `MsgTokenizeShares`\n\nThe MsgTokenizeShares message is used to create tokenize delegated tokens. This message can be executed by any delegator who has positive amount of delegation and after execution the specific amount of delegation disappear from the account and share tokens are provided. Share tokens are denominated in the validator and record id of the underlying delegation.\n\nA user may tokenize some or all of their delegation.\n\nThey will receive shares with the denom of `cosmosvaloper1xxxx/5` where 5 is the record id for the validator operator.\n\nMsgTokenizeShares fails if the account is a VestingAccount. Users will have to move vested tokens to a new account and endure the unbonding period. We view this as an acceptable tradeoff vs. the complex book keeping required to track vested tokens.\n\nThe total amount of outstanding tokenized shares for the validator is checked against the sum of exempt delegations multiplied by the exemption factor. If the tokenized shares exceeds this limit, execution fails.\n\nMsgTokenizeSharesResponse provides the number of tokens generated and their denom.\n```\n\n----------------------------------------\n\nTITLE: Defining the client.Context Struct in Cosmos SDK (Go)\nDESCRIPTION: This code reference points to the Go definition of the `client.Context` struct within the Cosmos SDK. This struct is fundamental for client-side operations, encapsulating data like codecs, account decoders, the RPC client connection, keyring access, output writers, and user-configured flags. It provides methods to facilitate user interaction, data encoding/decoding, and communication with a full-node for queries and transactions.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/beginner/02-query-lifecycle.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// Reference: https://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/client/context.go#L25-L68\n// This struct aggregates client-side data (Codec, RPCClient, Keyring, etc.) \n// and provides methods for interacting with the node and user.\n```\n\n----------------------------------------\n\nTITLE: Registering Metrics Endpoint in Server Startup for Cosmos SDK\nDESCRIPTION: Implementation of server initialization code that creates a metrics instance and registers an HTTP handler for the /metrics endpoint when telemetry is enabled in the configuration.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-013-metrics.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc (s *Server) Start(cfg config.Config) error {\n  // ...\n\n  if cfg.Telemetry.Enabled {\n    m, err := telemetry.New(cfg.Telemetry)\n    if err != nil {\n      return err\n    }\n\n    s.metrics = m\n    s.registerMetrics()\n  }\n\n  // ...\n}\n\nfunc (s *Server) registerMetrics() {\n  metricsHandler := func(w http.ResponseWriter, r *http.Request) {\n    format := strings.TrimSpace(r.FormValue(\"format\"))\n\n    gr, err := s.metrics.Gather(format)\n    if err != nil {\n      rest.WriteErrorResponse(w, http.StatusBadRequest, fmt.Sprintf(\"failed to gather metrics: %s\", err))\n      return\n    }\n\n    w.Header().Set(\"Content-Type\", gr.ContentType)\n    _, _ = w.Write(gr.Metrics)\n  }\n\n  s.Router.HandleFunc(\"/metrics\", metricsHandler).Methods(\"GET\")\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Locked Coins for Any Account in Go\nDESCRIPTION: This keeper function retrieves the locked coins for any account. If the account is a vesting account, it returns the locked coins; otherwise, it returns an empty set of coins.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/auth/vesting/README.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nfunc (k Keeper) LockedCoins(ctx Context, addr AccAddress) Coins {\n    acc := k.GetAccount(ctx, addr)\n    if acc != nil {\n        if acc.IsVesting() {\n            return acc.LockedCoins(ctx.BlockTime())\n        }\n    }\n\n    // non-vesting accounts do not have any locked coins\n    return NewCoins()\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Querying All Proposals with gRPC v1beta1 in Cosmos SDK\nDESCRIPTION: A practical example showing how to use grpcurl to query all proposals using the v1beta1 gRPC endpoint.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/README.md#2025-04-22_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\ngrpcurl -plaintext \\\n    localhost:9090 \\\n    cosmos.gov.v1beta1.Query/Proposals\n```\n\n----------------------------------------\n\nTITLE: SendAuthorization Protobuf Definition for Bank Module Integration\nDESCRIPTION: The SendAuthorization protobuf definition for the bank module allows granting permission to send tokens with specific spending limits and optional address allowlisting. It defines the structure for spend limit tracking and allowed recipient addresses.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/authz/README.md#2025-04-22_snippet_3\n\nLANGUAGE: protobuf\nCODE:\n```\n// SendAuthorization allows the grantee to spend up to spend_limit coins from\n// the granter's account.\nmessage SendAuthorization {\n  option (cosmos_proto.implements_interface) = \"Authorization\";\n\n  // send_authorization coin_spend_limit specifies the maximum amount of tokens that can be spent\n  // by this authorization and will be updated as tokens are spent. If it is\n  // empty, there is no spend limit and any amount of coins can be spent.\n  repeated cosmos.base.v1beta1.Coin spend_limit = 1\n      [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];\n\n  // allow_list specifies an optional list of addresses to whom the grantee can send tokens on behalf of the\n  // granter. If omitted, any address is allowed.\n  repeated string allow_list = 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Group Proposal\nDESCRIPTION: Command to query a specific proposal by ID in the group module\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/group/README.md#2025-04-22_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nsimd query group proposal [id] [flags]\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Types for Cosmos SDK Governance in Go\nDESCRIPTION: This snippet defines essential types and constants used in the Cosmos SDK governance module, including vote options, proposal types, and proposal statuses.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/README.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\ntype Vote byte\n\nconst (\n    VoteYes         = 0x1\n    VoteNo          = 0x2\n    VoteNoWithVeto  = 0x3\n    VoteAbstain     = 0x4\n)\n\ntype ProposalType  string\n\nconst (\n    ProposalTypePlainText       = \"Text\"\n    ProposalTypeSoftwareUpgrade = \"SoftwareUpgrade\"\n)\n\ntype ProposalStatus byte\n\n\nconst (\n    StatusNil           ProposalStatus = 0x00\n    StatusDepositPeriod ProposalStatus = 0x01  // Proposal is submitted. Participants can deposit on it but not vote\n    StatusVotingPeriod  ProposalStatus = 0x02  // MinDeposit is reached, participants can vote\n    StatusPassed        ProposalStatus = 0x03  // Proposal passed and successfully executed\n    StatusRejected      ProposalStatus = 0x04  // Proposal has been rejected\n    StatusFailed        ProposalStatus = 0x05  // Proposal passed but failed execution\n)\n```\n\n----------------------------------------\n\nTITLE: Defining the ExtendVoteHandler Type in Go\nDESCRIPTION: Specifies the Go type definition for the `ExtendVoteHandler` function signature in the Cosmos SDK. This handler, set via `baseapp.SetExtendVoteHandler`, is invoked during the `ExtendVote` ABCI++ method, allowing applications to attach arbitrary, potentially non-deterministic data (vote extensions) to pre-commit votes. Applications implementing this must return a non-nil (but potentially empty) `VoteExtension`.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-apps/04-vote-extensions.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype ExtendVoteHandler func(Context, *abci.RequestExtendVote) (*abci.ResponseExtendVote, error)\n```\n\n----------------------------------------\n\nTITLE: Adding google.api.http Annotations to Protobuf RPC Methods - Protobuf (Reference)\nDESCRIPTION: This code reference points to a protocol buffer definition file containing rpc methods for the Cosmos SDK x/auth module, annotated with google.api.http options. These annotations enable grpc-gateway to translate REST HTTP endpoints to the respective gRPC methods for module queries. The actual implementation involves editing the .proto file and regenerating service code using the protobuf compiler. Users should ensure proper imports and tool support for google.api.http annotations.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-modules/09-module-interfaces.md#2025-04-22_snippet_10\n\nLANGUAGE: protobuf\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/proto/cosmos/auth/v1beta1/query.proto#L14-L89\n```\n\n----------------------------------------\n\nTITLE: Defining Main Function for Cosmos SDK Application in Go\nDESCRIPTION: This snippet details the structure and steps involved in implementing the main function of a full-node client for a Cosmos SDK application in Go. Dependencies include the Cobra library for command-line operations and the Cosmos SDK types for application setup. The main function involves setting up codec, configuration, and commands using standard and application-specific methods, and finally executing the command-line interface.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/advanced/03-node.md#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nreference\\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/types/config.go#L14-L29\n```\n\n----------------------------------------\n\nTITLE: SubmitProposal Message Definition in Protobuf\nDESCRIPTION: Protocol buffer definition for MsgSubmitProposal which creates a new proposal with specified messages and optional immediate execution.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/group/README.md#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/tree/release/v0.50.x/proto/cosmos/group/v1/tx.proto#L281-L315\n```\n\n----------------------------------------\n\nTITLE: CreateGroup Message Definition in Protobuf\nDESCRIPTION: Protocol buffer definition for MsgCreateGroup which allows creating a new group with an admin address, list of members and optional metadata.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/group/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/tree/release/v0.50.x/proto/cosmos/group/v1/tx.proto#L67-L80\n```\n\n----------------------------------------\n\nTITLE: Accessing Gas-metered KVStore from Context in Cosmos SDK\nDESCRIPTION: Method to access a KVStore from a Context object, which automatically wraps the store with a GasKVStore for resource tracking.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/advanced/04-store.md#2025-04-22_snippet_19\n\nLANGUAGE: go\nCODE:\n```\n// KVStore fetches a KVStore from the MultiStore.\nfunc (c Context) KVStore(key storetypes.StoreKey) storetypes.KVStore {\n\treturn gaskv.NewStore(c.MultiStore().GetKVStore(key), c.GasMeter(), c.KVGasConfig())\n}\n```\n\n----------------------------------------\n\nTITLE: Unbonding Tokens from a Validator in Cosmos SDK\nDESCRIPTION: This command allows users to unbond shares from a validator. It requires the validator's address and the amount of tokens to unbond.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/staking/README.md#2025-04-22_snippet_39\n\nLANGUAGE: bash\nCODE:\n```\nsimd tx staking unbond [validator-addr] [amount] [flags]\n```\n\nLANGUAGE: bash\nCODE:\n```\nsimd tx staking unbond cosmosvaloper1gghjut3ccd8ay0zduzj64hwre2fxs9ldmqhffj 100stake --from mykey\n```\n\n----------------------------------------\n\nTITLE: Creating a New Validator in Cosmos SDK\nDESCRIPTION: This command allows users to create a new validator initialized with a self-delegation. It requires a JSON file containing validator details such as public key, initial stake, moniker, and commission rates.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/staking/README.md#2025-04-22_snippet_35\n\nLANGUAGE: bash\nCODE:\n```\nsimd tx staking create-validator [path/to/validator.json] [flags]\n```\n\nLANGUAGE: bash\nCODE:\n```\nsimd tx staking create-validator /path/to/validator.json \\\n  --chain-id=\"name_of_chain_id\" \\\n  --gas=\"auto\" \\\n  --gas-adjustment=\"1.2\" \\\n  --gas-prices=\"0.025stake\" \\\n  --from=mykey\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"pubkey\": {\"@type\":\"/cosmos.crypto.ed25519.PubKey\",\"key\":\"BnbwFpeONLqvWqJb3qaUbL5aoIcW3fSuAp9nT3z5f20=\"},\n  \"amount\": \"1000000stake\",\n  \"moniker\": \"my-moniker\",\n  \"website\": \"https://myweb.site\",\n  \"security\": \"security-contact@gmail.com\",\n  \"details\": \"description of your validator\",\n  \"commission-rate\": \"0.10\",\n  \"commission-max-rate\": \"0.20\",\n  \"commission-max-change-rate\": \"0.01\",\n  \"min-self-delegation\": \"1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Input Message in Protobuf for Multi-party Transfers\nDESCRIPTION: The Input message type models transaction input data for multiparty transfers, containing an address and a list of coins to be transferred.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/bank/README.md#2025-04-22_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\n// Input models transaction input.\nmessage Input {\n  string   address                        = 1;\n  repeated cosmos.base.v1beta1.Coin coins = 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Querying DelegatorDelegations in Cosmos SDK\nDESCRIPTION: The DelegatorDelegations endpoint retrieves all delegations made by a specific delegator. It requires the delegator address and returns information about each delegation including validator addresses, shares, and token balances.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/staking/README.md#2025-04-22_snippet_47\n\nLANGUAGE: bash\nCODE:\n```\ncosmos.staking.v1beta1.Query/DelegatorDelegations\n```\n\nLANGUAGE: bash\nCODE:\n```\ngrpcurl -plaintext \\\n-d '{\"delegator_addr\": \"cosmos1y8nyfvmqh50p6ldpzljk3yrglppdv3t8phju77\"}' \\\nlocalhost:9090 cosmos.staking.v1beta1.Query/DelegatorDelegations\n```\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"delegation_responses\": [\n    {\"delegation\":{\"delegator_address\":\"cosmos1y8nyfvmqh50p6ldpzljk3yrglppdv3t8phju77\",\"validator_address\":\"cosmosvaloper1eh5mwu044gd5ntkkc2xgfg8247mgc56fww3vc8\",\"shares\":\"25083339023.000000000000000000\"},\"balance\":{\"denom\":\"stake\",\"amount\":\"25083339023\"}}\n  ],\n  \"pagination\": {\n    \"next_key\": null,\n    \"total\": \"1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Fee Deduction AnteHandler in Go for Cosmos SDK\nDESCRIPTION: Defines a DeductFees function as an AnteHandler micro-function to deduct fees from the transaction. It aborts if there are insufficient funds.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-010-modular-antehandler.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc DeductFees(ctx Context, tx Tx, simulate bool) (newCtx Context, err error) {\n    // Deduct fees from tx\n    // Abort if insufficient funds in account to pay for fees\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Circuit Breaker Ante Handler in Go\nDESCRIPTION: The CircuitBreakerDecorator ante handler checks if transaction messages are disabled by the circuit breaker. It validates each message's type URL against the circuit breaker's disable list before proceeding with transaction processing.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/circuit/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// CircuitBreakerDecorator will check if the transaction's msgs have been disabled by the circuit breaker\ntype CircuitBreakerDecorator struct {\n\tkeeper keeper.Keeper\n}\n\n// NewCircuitBreakerDecorator creates a new CircuitBreakerDecorator\nfunc NewCircuitBreakerDecorator(k keeper.Keeper) CircuitBreakerDecorator {\n\treturn CircuitBreakerDecorator{keeper: k}\n}\n\nfunc (dec CircuitBreakerDecorator) AnteHandle(ctx sdk.Context, tx sdk.Tx, simulate bool, next sdk.AnteHandler) (sdk.Context, error) {\n\tmsgs := tx.GetMsgs()\n\tfor _, msg := range msgs {\n\t\tif err := dec.keeper.ValidateMessage(ctx, msg); err != nil {\n\t\t\treturn ctx, err\n\t\t}\n\t}\n\treturn next(ctx, tx, simulate)\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Unbonding Delegation for a Specific Validator in Cosmos SDK\nDESCRIPTION: This command retrieves information about an unbonding delegation between a specific delegator and validator. It shows details about the unbonding entries including balances and completion times.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/staking/README.md#2025-04-22_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\nsimd query staking unbonding-delegation [delegator-addr] [validator-addr] [flags]\n```\n\nLANGUAGE: bash\nCODE:\n```\nsimd query staking unbonding-delegation cosmos1gghjut3ccd8ay0zduzj64hwre2fxs9ld75ru9p cosmosvaloper1gghjut3ccd8ay0zduzj64hwre2fxs9ldmqhffj\n```\n\n----------------------------------------\n\nTITLE: Basic Dependency Injection with depinject in Go\nDESCRIPTION: Demonstrates how to use depinject.Provide and depinject.Inject to register provider functions and inject values into variables.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/depinject/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n \"fmt\"\n\n \"cosmossdk.io/depinject\"\n)\n\ntype AnotherInt int\n\nfunc GetInt() int               { return 1 }\nfunc GetAnotherInt() AnotherInt { return 2 }\n\nfunc main() {\n var (\n  x int\n  y AnotherInt\n )\n\n fmt.Printf(\"Before (%v, %v)\\n\", x, y)\n depinject.Inject(\n  depinject.Provide(\n   GetInt,\n   GetAnotherInt,\n  ),\n  &x,\n  &y,\n )\n fmt.Printf(\"After (%v, %v)\\n\", x, y)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GetVestedCoins for ContinuousVestingAccount in Go\nDESCRIPTION: Implements the GetVestedCoins method for ContinuousVestingAccount, calculating the amount of vested coins based on the current time.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/auth/vesting/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc (cva ContinuousVestingAccount) GetVestedCoins(t Time) Coins {\n    if t <= cva.StartTime {\n        // We must handle the case where the start time for a vesting account has\n        // been set into the future or when the start of the chain is not exactly\n        // known.\n        return ZeroCoins\n    } else if t >= cva.EndTime {\n        return cva.OriginalVesting\n    }\n\n    x := t - cva.StartTime\n    y := cva.EndTime - cva.StartTime\n\n    return cva.OriginalVesting * (x / y)\n}\n\nfunc (cva ContinuousVestingAccount) GetVestingCoins(t Time) Coins {\n    return cva.OriginalVesting - cva.GetVestedCoins(t)\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating a Capability for Resource Access in Cosmos SDK (Go)\nDESCRIPTION: Module 1's `UseResource` function receives a capability (presumably passed from Module 2) and the resource name it's supposed to grant access to. It uses `k.sck.AuthenticateCapability` to verify if the provided capability is valid for the given resource name. If authentication fails, it returns an error; otherwise, it proceeds to interact with the resource.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-003-dynamic-capability-store.md#2025-04-22_snippet_14\n\nLANGUAGE: go\nCODE:\n```\n```go\nfunc (k Mod1Keeper) UseResource(ctx Context, capability Capability, resource string) {\n  if !k.sck.AuthenticateCapability(name, capability) {\n    return errors.New(\"unauthenticated\")\n  }\n  // do something with the resource\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Querying and Sending Tokens with Cosmos SDK CLI\nDESCRIPTION: Demonstrates how to check account balances, create new accounts, send tokens between accounts, and delegate tokens to validators using the Cosmos SDK CLI commands.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/user/run-node/02-interact-node.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsimd query bank balances $MY_VALIDATOR_ADDRESS\n```\n\nLANGUAGE: bash\nCODE:\n```\nsimd keys add recipient --keyring-backend test\n\n# Put the generated address in a variable for later use.\nRECIPIENT=$(simd keys show recipient -a --keyring-backend test)\n```\n\nLANGUAGE: bash\nCODE:\n```\nsimd tx bank send $MY_VALIDATOR_ADDRESS $RECIPIENT 1000000stake --chain-id my-test-chain --keyring-backend test\n\n# Check that the recipient account did receive the tokens.\nsimd query bank balances $RECIPIENT\n```\n\nLANGUAGE: bash\nCODE:\n```\nsimd tx staking delegate $(simd keys show my_validator --bech val -a --keyring-backend test) 500stake --from recipient --chain-id my-test-chain --keyring-backend test\n\n# Query the total delegations to `validator`.\nsimd query staking delegations-to $(simd keys show my_validator --bech val -a --keyring-backend test)\n```\n\n----------------------------------------\n\nTITLE: Setting Validator Signing Info for Slashing (Go)\nDESCRIPTION: This snippet assigns a fresh signing info structure for the new validator, resetting slashing tracking. It is necessary to prevent accidental slashing or tombstoning from stale state and ensures slashing logic operates correctly. Uses the slashing keeper API and requires context and validator address values.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-apps/05-app-testnet.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n  // SLASHING\n\t//\n\n\t// Set validator signing info for our new validator.\n\tnewConsAddr := sdk.ConsAddress(newValAddr.Bytes())\n\tnewValidatorSigningInfo := slashingtypes.ValidatorSigningInfo{\n\t\tAddress:     newConsAddr.String(),\n\t\tStartHeight: app.LastBlockHeight() - 1,\n\t\tTombstoned:  false,\n\t}\n\tapp.SlashingKeeper.ValidatorSigningInfo.Set(ctx, newConsAddr, newValidatorSigningInfo)\n```\n\n----------------------------------------\n\nTITLE: Importing Cosmos SDK Core Module in Go\nDESCRIPTION: This snippet demonstrates how to import the Cosmos SDK Core module in a Go project. It includes the main package and two sub-packages for app module registration and app configuration.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/core/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[cosmossdk.io/core](https://pkg.go.dev/cosmossdk.io/core)\n[appmodule](https://pkg.go.dev/cosmossdk.io/core/appmodule)\n[appconfig](https://pkg.go.dev/cosmossdk.io/core/appconfig)\n```\n\n----------------------------------------\n\nTITLE: Implementing CapabilityKeeper Struct in Go\nDESCRIPTION: Definition of the CapabilityKeeper struct which manages capability storage across persistent and memory stores.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-003-dynamic-capability-store.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype CapabilityKeeper struct {\n  persistentKey StoreKey\n  memKey        StoreKey\n  capMap        map[uint64]*Capability\n  moduleNames   map[string]interface{}\n  sealed        bool\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Proposal Structure in Protobuf for Cosmos SDK Governance\nDESCRIPTION: This snippet defines the Proposal message structure in Protobuf, which is used to track the state of governance proposals. It includes fields for unique identification, timestamps for different phases, and metadata for additional context.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/README.md#2025-04-22_snippet_2\n\nLANGUAGE: protobuf\nCODE:\n```\n```protobuf reference\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.47.0-rc1/proto/cosmos/gov/v1/gov.proto#L51-L99\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Module Configuration Message in Protobuf for Cosmos SDK Auth Module\nDESCRIPTION: Example of creating a protobuf message for the auth module configuration in Cosmos SDK. It includes the module descriptor and configuration parameters like bech32_prefix and module_account_permissions.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/core/appmodule/README.md#2025-04-22_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\npackage cosmos.auth.module.v1;\n\nimport \"cosmos/app/v1alpha1/module.proto\";\n\nmessage Module {\n  option (cosmos.app.v1alpha1.module) = {\n    go_import: \"github.com/cosmos/cosmos-sdk/x/auth\"\n  };\n  string bech32_prefix = 1;\n  repeated ModuleAccountPermission module_account_permissions = 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Refreshing Consensus Parameters in Finalize Context\nDESCRIPTION: This code snippet demonstrates how to refresh the consensus parameters in the finalize context when the PreBlocker signals that consensus parameters have changed. It updates the context with the latest consensus parameters from the app.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-068-preblock.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\napp.finalizeBlockState.ctx = app.finalizeBlockState.ctx.WithConsensusParams(app.GetConsensusParams())\n```\n\n----------------------------------------\n\nTITLE: Implementing DeliverTx in BaseApp with Middleware Handler\nDESCRIPTION: Implementation of ABCI DeliverTx method in BaseApp that delegates to the txHandler middleware stack and converts the response to ABCI format.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-045-check-delivertx-middlewares.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc (app *BaseApp) DeliverTx(req abci.RequestDeliverTx) abci.ResponseDeliverTx {\n    var abciRes abci.ResponseDeliverTx\n\tctx := app.getContextForTx(runTxModeDeliver, req.Tx)\n\tres, err := app.txHandler.DeliverTx(ctx, tx.Request{TxBytes: req.Tx})\n\tif err != nil {\n\t\tabciRes = sdkerrors.ResponseDeliverTx(err, uint64(res.GasUsed), uint64(res.GasWanted), app.trace)\n\t\treturn abciRes\n\t}\n\n\tabciRes, err = convertTxResponseToDeliverTx(res)\n\tif err != nil {\n\t\treturn sdkerrors.ResponseDeliverTx(err, uint64(res.GasUsed), uint64(res.GasWanted), app.trace)\n\t}\n\n\treturn abciRes\n}\n\n// convertTxResponseToDeliverTx converts a tx.Response into a abci.ResponseDeliverTx.\nfunc convertTxResponseToDeliverTx(txRes tx.Response) (abci.ResponseDeliverTx, error) {\n\tdata, err := makeABCIData(txRes)\n\tif err != nil {\n\t\treturn abci.ResponseDeliverTx{}, nil\n\t}\n\n\treturn abci.ResponseDeliverTx{\n\t\tData:   data,\n\t\tLog:    txRes.Log,\n\t\tEvents: txRes.Events,\n\t}, nil\n}\n\n// makeABCIData generates the Data field to be sent to ABCI Check/DeliverTx.\nfunc makeABCIData(txRes tx.Response) ([]byte, error) {\n\treturn proto.Marshal(&sdk.TxMsgData{MsgResponses: txRes.MsgResponses})\n}\n```\n\n----------------------------------------\n\nTITLE: Tracking Delegation for Vesting Account in Go\nDESCRIPTION: This function tracks the delegation of coins for a vesting account, updating the delegated vesting and delegated free amounts based on the current vesting status.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/auth/vesting/README.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nfunc (va VestingAccount) TrackDelegation(t Time, balance Coins, amount Coins) {\n    assert(balance <= amount)\n    x := min(max(va.GetVestingCoins(t) - va.DelegatedVesting, 0), amount)\n    y := amount - x\n\n    va.DelegatedVesting += x\n    va.DelegatedFree += y\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Basic AnteHandler Logic in Cosmos SDK (Go) - Code Reference\nDESCRIPTION: This snippet provides an external code reference to the implementation of basic ante handler logic in the Cosmos SDK. It is located at x/auth/ante/basic.go in the v0.50.0-alpha.0 branch. The referenced code likely relates to the handling of transaction preprocessing, validation, and gas computation during the CheckTx and RunTx lifecycle. To use or explore this logic, users should be familiar with Go and the structure of Cosmos SDK source code. The referenced file should be accessed for implementation details about how transaction checks are performed in the SDK's ante handler layer.\n\nDependencies: Cosmos SDK (Go), access to https://github.com/cosmos/cosmos-sdk repository. Inputs/Outputs and exact requirements are only evident in the referenced Go source file.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/advanced/00-baseapp.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nreference\\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/x/auth/ante/basic.go#L102\n```\n\n----------------------------------------\n\nTITLE: Circuit Breaker Reset Message in Protobuf\nDESCRIPTION: Defines the message structure for resetting (enabling) circuit breakers. This allows authorized accounts to resume processing of previously disabled message types.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/circuit/README.md#2025-04-22_snippet_5\n\nLANGUAGE: protobuf\nCODE:\n```\n  // ResetCircuitBreaker resumes processing of Msg's in the state machine that\n  // have been been paused using TripCircuitBreaker.\n  rpc ResetCircuitBreaker(MsgResetCircuitBreaker) returns (MsgResetCircuitBreakerResponse);\n```\n\n----------------------------------------\n\nTITLE: Converting Messages to Any Type with Cosmos Proto Utils\nDESCRIPTION: Demonstrates how to properly pack SDK messages into Any types using cosmos-proto utils instead of standard protobuf implementations to avoid unwanted type URL prefixes.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/advanced/05-encoding.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nimport (\n- \t\"google.golang.org/protobuf/types/known/anypb\"\n+\t\"github.com/cosmos/cosmos-proto/anyutil\"\n)\n\n- anyMsg, err := anypb.New(internalMsg.Message().Interface())\n+ anyMsg, err := anyutil.New(internalMsg.Message().Interface())\n\n- fmt.Println(anyMsg.TypeURL) // type.googleapis.com/cosmos.bank.v1beta1.MsgSend\n+ fmt.Println(anyMsg.TypeURL) // /cosmos.bank.v1beta1.MsgSend\n```\n\n----------------------------------------\n\nTITLE: Encoding Transaction to Protobuf and JSON in Cosmos SDK\nDESCRIPTION: This code shows how to encode a signed transaction using TxConfig to generate both Protobuf-encoded bytes and a JSON string representation of the transaction.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/user/run-node/03-txs.md#2025-04-22_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nfunc sendTx() error {\n    // --snip--\n\n    // Generated Protobuf-encoded bytes.\n    txBytes, err := encCfg.TxConfig.TxEncoder()(txBuilder.GetTx())\n    if err != nil {\n        return err\n    }\n\n    // Generate a JSON string.\n    txJSONBytes, err := encCfg.TxConfig.TxJSONEncoder()(txBuilder.GetTx())\n    if err != nil {\n        return err\n    }\n    txJSON := string(txJSONBytes)\n}\n```\n\n----------------------------------------\n\nTITLE: MsgDelegate Protobuf Definition\nDESCRIPTION: Protobuf message definition for delegating tokens to a validator. Includes delegation amount and validator address fields with associated validation rules.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/staking/README.md#2025-04-22_snippet_10\n\nLANGUAGE: protobuf\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.47.0-rc1/proto/cosmos/staking/v1beta1/tx.proto#L26-L28\n\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.47.0-rc1/proto/cosmos/staking/v1beta1/tx.proto#L102-L114\n```\n\n----------------------------------------\n\nTITLE: Defining Migrator Struct for Module Migrations in Go\nDESCRIPTION: Introduces a Migrator struct to handle in-place store migrations for a module. This struct wraps the module's keeper to access the store key.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-041-in-place-store-migrations.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// Migrator is a struct for handling in-place store migrations.\ntype Migrator struct {\n  BaseKeeper\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing EndBlocker Implementation in Cosmos-SDK (Go)\nDESCRIPTION: This snippet references the implementation of the EndBlocker method in the staking module of the Cosmos-SDK at the provided GitHub URL. EndBlocker is used to add logic that runs automatically at the end of each block, often to process validator updates, finalize state transitions, or emit events. Dependencies include proper keeper and context setup, and the module should implement the corresponding HasABCIEndBlocker or EndBlocker interface. It accepts the block context as input and can output state changes or validator set updates. The reference provides external context for users looking to implement custom EndBlocker logic in their own modules.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-modules/06-beginblock-endblock.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/x/staking/keeper/abci.go#L22-L27\n```\n\n----------------------------------------\n\nTITLE: Defining Msgs Using Protobuf Service Definitions for Gov Module\nDESCRIPTION: Example of using protobuf service definitions for defining Msgs in the Gov module. This approach allows for clearly defined return types and generates client and server code.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-031-msg-service.md#2025-04-22_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\npackage cosmos.gov;\n\nservice Msg {\n  rpc SubmitProposal(MsgSubmitProposal) returns (MsgSubmitProposalResponse);\n}\n\n// Note that for backwards compatibility this uses MsgSubmitProposal as the request\n// type instead of the more canonical MsgSubmitProposalRequest\nmessage MsgSubmitProposal {\n  google.protobuf.Any content = 1;\n  string proposer = 2;\n}\n\nmessage MsgSubmitProposalResponse {\n  uint64 proposal_id;\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Tally for a Proposal using v1 in Cosmos SDK\nDESCRIPTION: REST API endpoint for retrieving the current vote tally for a specific proposal using the v1 path. Similar to the v1beta1 endpoint but with the updated API version.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/README.md#2025-04-22_snippet_87\n\nLANGUAGE: bash\nCODE:\n```\n/cosmos/gov/v1/proposals/{proposal_id}/tally\n```\n\n----------------------------------------\n\nTITLE: Returning Aggregated Query Commands\nDESCRIPTION: Illustrates the implementation of the `GetQueryCmd()` method for `AppModuleBasic`, facilitating the addition of module-specific queries to the core application commands. This method consolidates query command management.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-modules/09-module-interfaces.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/x/bank/module.go#L84-L87\n```\n\n----------------------------------------\n\nTITLE: Referencing appmodule.HasService Interface Definition in Go\nDESCRIPTION: This Go code reference provides the line range for the HasService interface in the Cosmos appmodule package. Modules implementing HasService can register GRPC or message server services through Configurator. Authors should ensure compatibility with the SDK service registration infrastructure.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-modules/01-module-manager.md#2025-04-22_snippet_9\n\nLANGUAGE: Go\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/6afece6/core/appmodule/module.go#L22-L40\n```\n\n----------------------------------------\n\nTITLE: Voting on a Governance Proposal in Cosmos SDK\nDESCRIPTION: The vote command allows users to submit a single-option vote (yes/no/abstain/no_with_veto) for a given governance proposal using its ID.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/README.md#2025-04-22_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nsimd tx gov vote [command] [flags]\n```\n\n----------------------------------------\n\nTITLE: Defining Output Message in Protobuf for Multi-party Transfers\nDESCRIPTION: The Output message type models transaction output data for multiparty transfers, containing a destination address and a list of coins to be received.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/bank/README.md#2025-04-22_snippet_2\n\nLANGUAGE: protobuf\nCODE:\n```\n// Output models transaction outputs.\nmessage Output {\n  string   address                        = 1;\n  repeated cosmos.base.v1beta1.Coin coins = 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Message Types for Governance Voting in Go\nDESCRIPTION: Defines two message types for governance voting: MsgVote for backward compatibility with single-option voting, and MsgVoteWeighted for the new split voting functionality. Each tracks the proposal ID, voter address, and voting options.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-037-gov-split-vote.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype MsgVote struct {\n  ProposalID int64\n  Voter      sdk.Address\n  Option     Option\n}\n\ntype MsgVoteWeighted struct {\n  ProposalID int64\n  Voter      sdk.Address\n  Options    []WeightedVoteOption\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ModuleID Structure in Go\nDESCRIPTION: Defines the ModuleID struct with ModuleName and Path fields, and an Address method for generating the module's address.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-033-protobuf-inter-module-comm.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype ModuleID struct {\n  ModuleName string\n  Path []byte\n}\n\nfunc (key ModuleID) Address() []byte {\n  return AddressHash(key.ModuleName, key.Path)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Handler and Middleware Interfaces in Go\nDESCRIPTION: Core interfaces for the middleware design: Handler interface defines CheckTx, DeliverTx, and SimulateTx methods, while Middleware is a function type that transforms one Handler into another.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-045-check-delivertx-middlewares.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype Handler interface {\n    CheckTx(ctx context.Context, req Request, checkReq RequestCheckTx) (Response, ResponseCheckTx, error)\n    DeliverTx(ctx context.Context, req Request) (Response, error)\n    SimulateTx(ctx context.Context, req Request (Response, error)\n}\n\ntype Middleware func(Handler) Handler\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Query Service in Go\nDESCRIPTION: This snippet shows how to implement the custom query service in Go for the bank module. It demonstrates the implementation of the QueryBalance method using the generated QueryServer interface.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-021-protobuf-query-encoding.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype Querier struct {\n\tKeeper\n}\n\nfunc (q Querier) QueryBalance(ctx context.Context, params *types.QueryBalanceParams) (*sdk.Coin, error) {\n\tbalance := q.GetBalance(sdk.UnwrapSDKContext(ctx), params.Address, params.Denom)\n\treturn &balance, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying rootmulti GetKVStore for listener support in Go\nDESCRIPTION: Updates the GetKVStore method in the rootmulti store implementation to wrap KVStores with listenkv.Store when listening is enabled for that store key.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-038-state-listening.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc (rs *Store) GetKVStore(key types.StoreKey) types.KVStore {\n    store := rs.stores[key].(types.KVStore)\n\n    if rs.TracingEnabled() {\n        store = tracekv.NewStore(store, rs.traceWriter, rs.traceContext)\n    }\n    if rs.ListeningEnabled(key) {\n        store = listenkv.NewStore(store, key, rs.listeners[key])\n    }\n\n    return store\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MemoryListener for KVStore state change collection in Go\nDESCRIPTION: Defines a MemoryListener struct that accumulates state changes from KVStores in memory. It provides methods to handle state writes and retrieve the collected state cache.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-038-state-listening.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// MemoryListener listens to the state writes and accumulate the records in memory.\ntype MemoryListener struct {\n\tstateCache []StoreKVPair\n}\n\n// NewMemoryListener creates a listener that accumulate the state writes in memory.\nfunc NewMemoryListener() *MemoryListener {\n\treturn &MemoryListener{}\n}\n\n// OnWrite writes state change events to the internal cache\nfunc (fl *MemoryListener) OnWrite(storeKey StoreKey, key []byte, value []byte, delete bool) {\n\tfl.stateCache = append(fl.stateCache, StoreKVPair{\n\t\tStoreKey: storeKey.Name(),\n\t\tDelete:   delete,\n\t\tKey:      key,\n\t\tValue:    value,\n\t})\n}\n\n// PopStateCache returns the current state caches and set to nil\nfunc (fl *MemoryListener) PopStateCache() []StoreKVPair {\n\tres := fl.stateCache\n\tfl.stateCache = nil\n\treturn res\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Validator Set with collections.KeySet in Go\nDESCRIPTION: Shows a Go `Keeper` implementation using `collections.KeySet` to maintain a set of validator addresses (`sdk.ValAddress`). Demonstrates adding (`AddValidator`) and removing (`RemoveValidator`) validators from the set, relying on `collections`, `storetypes`, and `sdk` packages. It highlights that `KeySet` only stores keys and doesn't require a value codec during initialization.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/collections/README.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n```go\npackage collections\n\nimport (\n\t\"cosmossdk.io/collections\"\n\tstoretypes \"cosmossdk.io/store/types\"\n\t\"fmt\"\n\tsdk \"github.com/cosmos/cosmos-sdk/types\"\n)\n\nvar ValidatorsSetPrefix = collections.NewPrefix(0)\n\ntype Keeper struct {\n\tSchema        collections.Schema\n\tValidatorsSet collections.KeySet[sdk.ValAddress]\n}\n\nfunc NewKeeper(storeKey *storetypes.KVStoreKey) Keeper {\n\tsb := collections.NewSchemaBuilder(sdk.OpenKVStore(storeKey))\n\treturn Keeper{\n\t\tValidatorsSet: collections.NewKeySet(sb, ValidatorsSetPrefix, \"validators_set\", sdk.ValAddressKey),\n\t}\n}\n\nfunc (k Keeper) AddValidator(ctx sdk.Context, validator sdk.ValAddress) error {\n\thas, err := k.ValidatorsSet.Has(ctx, validator)\n\tif err != nil {\n\t\treturn err\n\t}\n\tif has {\n\t\treturn fmt.Errorf(\"validator already in set: %s\", validator)\n\t}\n\t\n\terr = k.ValidatorsSet.Set(ctx, validator)\n\tif err != nil {\n\t\treturn err\n\t}\n\t\n\treturn nil\n}\n\nfunc (k Keeper) RemoveValidator(ctx sdk.Context, validator sdk.ValAddress) error {\n\terr := k.ValidatorsSet.Remove(ctx, validator)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Adding InternalServer to Configurator Interface in Go\nDESCRIPTION: Extends the Configurator interface to include an InternalServer method for registering internal-only module methods.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-033-protobuf-inter-module-comm.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\ntype Configurator interface {\n   MsgServer() grpc.Server\n   QueryServer() grpc.Server\n   InternalServer() grpc.Server\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Nonce-Prioritized App-Side Mempool with skip list in Golang\nDESCRIPTION: This snippet introduces the `nonceMempool` struct, a Golang type implementing a transaction-prioritizing mempool using a skip list for efficient ordering. It stores transactions in a queue where those with the lowest nonce are prioritized, and transactions with the same nonce are further ordered by sender address. The field `txQueue` is a pointer to a `huandu.SkipList`, requiring the `huandu` skip list library as a dependency and the Cosmos SDK transaction types. This struct is an example implementation of the `Mempool` interface defined previously.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-060-abci-1.0.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype nonceMempool struct {\n\ttxQueue *huandu.SkipList\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using Reporter for Early Exit in Message Factories in Go\nDESCRIPTION: A code snippet showing how to use the Reporter system to check if execution should be skipped. This pattern allows for early exit from message factories when certain conditions aren't met.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/testutil/simsx/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nif reporter.IsSkipped() {\n    return nil, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ScopedCapabilityKeeper Struct in Go\nDESCRIPTION: Definition of the ScopedCapabilityKeeper which provides module-specific capability management.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-003-dynamic-capability-store.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype ScopedCapabilityKeeper struct {\n  persistentKey StoreKey\n  memKey        StoreKey\n  capMap        map[uint64]*Capability\n  moduleName    string\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Transaction Middleware in Go\nDESCRIPTION: Example pattern for implementing a custom transaction middleware that can perform pre-processing and post-processing around the next handler in the stack.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-045-check-delivertx-middlewares.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// myTxHandler is the tx.Handler of this middleware. Note that it holds a\n// reference to the next tx.Handler in the stack.\ntype myTxHandler struct {\n    // next is the next tx.Handler in the middleware stack.\n    next tx.Handler\n    // some other fields that are relevant to the middleware can be added here\n}\n\n// NewMyMiddleware returns a middleware that does this and that.\nfunc NewMyMiddleware(arg1, arg2) tx.Middleware {\n    return func (txh tx.Handler) tx.Handler {\n        return myTxHandler{\n            next: txh,\n            // optionally, set arg1, arg2... if they are needed in the middleware\n        }\n    }\n}\n\n// Assert myTxHandler is a tx.Handler.\nvar _ tx.Handler = myTxHandler{}\n\nfunc (h myTxHandler) CheckTx(ctx context.Context, req Request, checkReq RequestcheckTx) (Response, ResponseCheckTx, error) {\n    // CheckTx specific pre-processing logic\n\n    // run the next middleware\n    res, checkRes, err := txh.next.CheckTx(ctx, req, checkReq)\n\n    // CheckTx specific post-processing logic\n\n    return res, checkRes, err\n}\n\nfunc (h myTxHandler) DeliverTx(ctx context.Context, req Request) (Response, error) {\n    // DeliverTx specific pre-processing logic\n\n    // run the next middleware\n    res, err := txh.next.DeliverTx(ctx, tx, req)\n\n    // DeliverTx specific post-processing logic\n\n    return res, err\n}\n\nfunc (h myTxHandler) SimulateTx(ctx context.Context, req Request) (Response, error) {\n    // SimulateTx specific pre-processing logic\n\n    // run the next middleware\n    res, err := txh.next.SimulateTx(ctx, tx, req)\n\n    // SimulateTx specific post-processing logic\n\n    return res, err\n}\n```\n\n----------------------------------------\n\nTITLE: CacheKVStore Structure Definition in Go\nDESCRIPTION: Defines the core Store struct for CacheKVStore that wraps a KVStore with caching functionality. Contains maps for cached values, deleted keys, and unsorted/sorted caches along with a mutex for thread safety.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/store/cachekv/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype Store struct {\n\tmtx           sync.Mutex\n\tcache         map[string]*cValue\n\tdeleted       map[string]struct{}\n\tunsortedCache map[string]struct{}\n\tsortedCache   *dbm.MemDB // always ascending sorted\n\tparent        types.KVStore\n}\n```\n\n----------------------------------------\n\nTITLE: Defining NFT Query Service in Protobuf\nDESCRIPTION: Protobuf definition for the NFT Query service, including methods for querying balances, owners, supplies, and NFT details. It also defines request and response message structures for each query method.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-043-nft-module.md#2025-04-22_snippet_5\n\nLANGUAGE: protobuf\nCODE:\n```\nservice Query {\n  // Balance queries the number of NFTs of a given class owned by the owner, same as balanceOf in ERC721\n  rpc Balance(QueryBalanceRequest) returns (QueryBalanceResponse) {\n    option (google.api.http).get = \"/cosmos/nft/v1beta1/balance/{owner}/{class_id}\";\n  }\n\n  // Owner queries the owner of the NFT based on its class and id, same as ownerOf in ERC721\n  rpc Owner(QueryOwnerRequest) returns (QueryOwnerResponse) {\n    option (google.api.http).get = \"/cosmos/nft/v1beta1/owner/{class_id}/{id}\";\n  }\n\n  // Supply queries the number of NFTs from the given class, same as totalSupply of ERC721.\n  rpc Supply(QuerySupplyRequest) returns (QuerySupplyResponse) {\n    option (google.api.http).get = \"/cosmos/nft/v1beta1/supply/{class_id}\";\n  }\n\n  // NFTs queries all NFTs of a given class or owner,choose at least one of the two, similar to tokenByIndex in ERC721Enumerable\n  rpc NFTs(QueryNFTsRequest) returns (QueryNFTsResponse) {\n    option (google.api.http).get = \"/cosmos/nft/v1beta1/nfts\";\n  }\n\n  // NFT queries an NFT based on its class and id.\n  rpc NFT(QueryNFTRequest) returns (QueryNFTResponse) {\n    option (google.api.http).get = \"/cosmos/nft/v1beta1/nfts/{class_id}/{id}\";\n  }\n\n  // Class queries an NFT class based on its id\n  rpc Class(QueryClassRequest) returns (QueryClassResponse) {\n    option (google.api.http).get = \"/cosmos/nft/v1beta1/classes/{class_id}\";\n  }\n\n  // Classes queries all NFT classes\n  rpc Classes(QueryClassesRequest) returns (QueryClassesResponse) {\n    option (google.api.http).get = \"/cosmos/nft/v1beta1/classes\";\n  }\n}\n\n// QueryBalanceRequest is the request type for the Query/Balance RPC method\nmessage QueryBalanceRequest {\n  string class_id = 1;\n  string owner    = 2;\n}\n\n// QueryBalanceResponse is the response type for the Query/Balance RPC method\nmessage QueryBalanceResponse {\n  uint64 amount = 1;\n}\n\n// QueryOwnerRequest is the request type for the Query/Owner RPC method\nmessage QueryOwnerRequest {\n  string class_id = 1;\n  string id       = 2;\n}\n\n// QueryOwnerResponse is the response type for the Query/Owner RPC method\nmessage QueryOwnerResponse {\n  string owner = 1;\n}\n\n// QuerySupplyRequest is the request type for the Query/Supply RPC method\nmessage QuerySupplyRequest {\n  string class_id = 1;\n}\n\n// QuerySupplyResponse is the response type for the Query/Supply RPC method\nmessage QuerySupplyResponse {\n  uint64 amount = 1;\n}\n\n// QueryNFTstRequest is the request type for the Query/NFTs RPC method\nmessage QueryNFTsRequest {\n  string                                class_id   = 1;\n  string                                owner      = 2;\n  cosmos.base.query.v1beta1.PageRequest pagination = 3;\n}\n\n// QueryNFTsResponse is the response type for the Query/NFTs RPC methods\nmessage QueryNFTsResponse {\n  repeated cosmos.nft.v1beta1.NFT        nfts       = 1;\n  cosmos.base.query.v1beta1.PageResponse pagination = 2;\n}\n\n// QueryNFTRequest is the request type for the Query/NFT RPC method\nmessage QueryNFTRequest {\n  string class_id = 1;\n  string id       = 2;\n}\n\n// QueryNFTResponse is the response type for the Query/NFT RPC method\nmessage QueryNFTResponse {\n  cosmos.nft.v1beta1.NFT nft = 1;\n}\n\n// QueryClassRequest is the request type for the Query/Class RPC method\nmessage QueryClassRequest {\n  string class_id = 1;\n}\n\n// QueryClassResponse is the response type for the Query/Class RPC method\nmessage QueryClassResponse {\n  cosmos.nft.v1beta1.Class class = 1;\n}\n\n// QueryClassesRequest is the request type for the Query/Classes RPC method\nmessage QueryClassesRequest {\n  // pagination defines an optional pagination for the request.\n  cosmos.base.query.v1beta1.PageRequest pagination = 1;\n}\n\n// QueryClassesResponse is the response type for the Query/Classes RPC method\nmessage QueryClassesResponse {\n  repeated cosmos.nft.v1beta1.Class      classes    = 1;\n  cosmos.base.query.v1beta1.PageResponse pagination = 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Example Output of All Proposals Query with gRPC v1 in Cosmos SDK\nDESCRIPTION: The JSON response structure when querying all proposals using the v1 gRPC endpoint, showing a list of proposals with their messages, metadata, status and details.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/README.md#2025-04-22_snippet_35\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"proposals\": [\n    {\n      \"id\": \"1\",\n      \"messages\": [\n        {\"@type\":\"/cosmos.bank.v1beta1.MsgSend\",\"amount\":[{\"denom\":\"stake\",\"amount\":\"10\"}],\"fromAddress\":\"cosmos1..\",\"toAddress\":\"cosmos1..\"}\n      ],\n      \"status\": \"PROPOSAL_STATUS_VOTING_PERIOD\",\n      \"finalTallyResult\": {\n        \"yesCount\": \"0\",\n        \"abstainCount\": \"0\",\n        \"noCount\": \"0\",\n        \"noWithVetoCount\": \"0\"\n      },\n      \"submitTime\": \"2022-03-28T11:50:20.819676256Z\",\n      \"depositEndTime\": \"2022-03-30T11:50:20.819676256Z\",\n      \"totalDeposit\": [\n        {\n          \"denom\": \"stake\",\n          \"amount\": \"10000000010\"\n        }\n      ],\n      \"votingStartTime\": \"2022-03-28T14:25:26.644857113Z\",\n      \"votingEndTime\": \"2022-03-30T14:25:26.644857113Z\",\n      \"metadata\": \"AQ==\",\n      \"title\": \"Proposal Title\",\n      \"summary\": \"Proposal Summary\"\n    },\n    {\n      \"id\": \"2\",\n      \"messages\": [\n        {\"@type\":\"/cosmos.bank.v1beta1.MsgSend\",\"amount\":[{\"denom\":\"stake\",\"amount\":\"10\"}],\"fromAddress\":\"cosmos1..\",\"toAddress\":\"cosmos1..\"}\n      ],\n      \"status\": \"PROPOSAL_STATUS_DEPOSIT_PERIOD\",\n      \"finalTallyResult\": {\n        \"yesCount\": \"0\",\n        \"abstainCount\": \"0\",\n        \"noCount\": \"0\",\n        \"noWithVetoCount\": \"0\"\n      },\n      \"submitTime\": \"2022-03-28T14:02:41.165025015Z\",\n      \"depositEndTime\": \"2022-03-30T14:02:41.165025015Z\",\n      \"totalDeposit\": [\n        {\n          \"denom\": \"stake\",\n          \"amount\": \"10\"\n        }\n      ],\n      \"metadata\": \"AQ==\",\n      \"title\": \"Proposal Title\",\n      \"summary\": \"Proposal Summary\"\n    }\n  ],\n  \"pagination\": {\n    \"total\": \"2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining App-Side Mempool and Iterator Interfaces in Golang\nDESCRIPTION: This Golang snippet defines the primary `Mempool` interface and a minimal `Iterator` interface for Cosmos SDK app-side transaction management. The interfaces specify methods for inserting, selecting, counting, and removing transactions, supporting extensible and customizable transaction prioritization and iteration. Dependencies include `sdk.Context` and `sdk.Tx`. Expected inputs are transaction objects and byte arrays for selection, producing iterators and error status as outputs. Implementers can build custom mempools by adhering to these interfaces. No concrete business logic is included—it's a specification for Cosmos developers.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-060-abci-1.0.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype Mempool interface {\n\t// Insert attempts to insert a Tx into the app-side mempool returning\n\t// an error upon failure.\n\tInsert(sdk.Context, sdk.Tx) error\n\n\t// Select returns an Iterator over the app-side mempool. If txs are specified,\n\t// then they shall be incorporated into the Iterator. The Iterator must\n\t// closed by the caller.\n\tSelect(sdk.Context, [][]byte) Iterator\n\n\t// CountTx returns the number of transactions currently in the mempool.\n\tCountTx() int\n\n\t// Remove attempts to remove a transaction from the mempool, returning an error\n\t// upon failure.\n\tRemove(sdk.Tx) error\n}\n\n// Iterator defines an app-side mempool iterator interface that is as minimal as\n// possible. The order of iteration is determined by the app-side mempool\n// implementation.\ntype Iterator interface {\n\t// Next returns the next transaction from the mempool. If there are no more\n\t// transactions, it returns nil.\n\tNext() Iterator\n\n\t// Tx returns the transaction at the current position of the iterator.\n\tTx() sdk.Tx\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining PreBlocker Function in Cosmos SDK (Go)\nDESCRIPTION: Defines the PreBlocker function for an application in Cosmos SDK to handle upgrade pre-blocking logic. Dependencies: upgrade keeper, governance module. Accepts SDK context and request, returns pre-block response. Integrates upgrade handling in the application lifecycle.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-apps/03-app-upgrade.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc (app *myApp) PreBlocker(ctx sdk.Context, req req.RequestFinalizeBlock) (*sdk.ResponsePreBlock, error) {\n      // For demonstration sake, the app PreBlocker only returns the upgrade module pre-blocker.\n      // In a real app, the module manager should call all pre-blockers\n      // return app.ModuleManager.PreBlock(ctx, req)\n      return app.upgradeKeeper.PreBlocker(ctx, req)\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Module Dependencies with depinject.In (Cosmos SDK, Go)\nDESCRIPTION: This snippet references code where the module specifies its dependencies via a struct that embeds depinject.In. Each field in the struct represents a dependency required at runtime; optional dependencies can be tagged as such. All types and fields must be exported for depinject to function. The snippet's inputs are the required dependency types, and the output is the struct for dependency injection.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-modules/15-depinject.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nreference\\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/x/group/module/module.go#L201-L211\n```\n\n----------------------------------------\n\nTITLE: CacheKVStore Implementation in Cosmos SDK\nDESCRIPTION: Definition of a cached KVStore that provides buffered writing and cached reading over an underlying KVStore. This is used for creating isolated stores that might be reverted later.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/advanced/04-store.md#2025-04-22_snippet_16\n\nLANGUAGE: go\nCODE:\n```\n// Store wraps an underlying KVStore to cache read operations.\n// After calling .Write() on the store, all previously created CacheKVStores on\n// the object expire.\ntype Store struct {\n\tparent     types.KVStore\n\tcache      map[string]*cValue\n\tunsortedCache map[string]struct{}\n\tsorted     bool\n\tcacheSize  int\n\tmtx        sync.Mutex\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Value Methods for State Operations\nDESCRIPTION: Core methods for the Value type that handle state operations like get, set, delete, and existence checks with proper marshaling.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-012-state-accessors.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// Get and unmarshal stored data, noop if not exists, panic if cannot unmarshal\nfunc (Value) Get(ctx Context, ptr interface{}) {}\n\n// Get and unmarshal stored data, return error if not exists or cannot unmarshal\nfunc (Value) GetSafe(ctx Context, ptr interface{}) {}\n\n// Get stored data as raw byte slice\nfunc (Value) GetRaw(ctx Context) []byte {}\n\n// Marshal and set a raw value\nfunc (Value) Set(ctx Context, o interface{}) {}\n\n// Check if a raw value exists\nfunc (Value) Exists(ctx Context) bool {}\n\n// Delete a raw value value\nfunc (Value) Delete(ctx Context) {}\n```\n\n----------------------------------------\n\nTITLE: Invoking FinalizeBlock Hooks in BaseApp (Go)\nDESCRIPTION: This Go code snippet shows the modified `FinalizeBlock` method within the `BaseApp` struct. It uses a deferred function to iterate through registered `abciListeners` after the main block finalization logic. For each listener, it calls the `ListenFinalizeBlock` method, passing the block height, the ABCI request (`req`), and the response (`abciRes`). Execution can be asynchronous (`go func(...)`) or synchronous based on the `abciListenersAsync` flag. Errors during hook execution are logged, and the node might exit if `stopNodeOnABCIListenerErr` is true and an error occurs in synchronous mode.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-038-state-listening.md#2025-04-22_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nfunc (app *BaseApp) FinalizeBlock(req abci.RequestFinalizeBlock) abci.ResponseFinalizeBlock {\n\n    var abciRes abci.ResponseFinalizeBlock\n    defer func() {\n        // call the streaming service hook with the FinalizeBlock messages\n        for _, abciListener := range app.abciListeners {\n            ctx := app.finalizeState.ctx\n            blockHeight := ctx.BlockHeight()\n            if app.abciListenersAsync {\n                go func(req abci.RequestFinalizeBlock, res abci.ResponseFinalizeBlock) {\n                    if err := app.abciListener.FinalizeBlock(blockHeight, req, res); err != nil {\n                        app.logger.Error(\"FinalizeBlock listening hook failed\", \"height\", blockHeight, \"err\", err)\n                    }\n                }(req, abciRes)\n            } else {\n                if err := app.abciListener.ListenFinalizeBlock(blockHeight, req, res); err != nil {\n                    app.logger.Error(\"FinalizeBlock listening hook failed\", \"height\", blockHeight, \"err\", err)\n                    if app.stopNodeOnABCIListenerErr {\n                        os.Exit(1)\n                    }\n                }\n            }\n        }\n    }()\n\n    ...\n\n    return abciRes\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Redelegations in Cosmos SDK Staking Module\nDESCRIPTION: The Redelegations endpoint retrieves information about token redelegations from one validator to another. It requires delegator address and optionally source and destination validator addresses, returning details about each redelegation entry.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/staking/README.md#2025-04-22_snippet_49\n\nLANGUAGE: bash\nCODE:\n```\ncosmos.staking.v1beta1.Query/Redelegations\n```\n\nLANGUAGE: bash\nCODE:\n```\ngrpcurl -plaintext \\\n-d '{\"delegator_addr\": \"cosmos1ld5p7hn43yuh8ht28gm9pfjgj2fctujp2tgwvf\", \"src_validator_addr\" : \"cosmosvaloper1j7euyj85fv2jugejrktj540emh9353ltgppc3g\", \"dst_validator_addr\" : \"cosmosvaloper1yy3tnegzmkdcm7czzcy3flw5z0zyr9vkkxrfse\"}' \\\nlocalhost:9090 cosmos.staking.v1beta1.Query/Redelegations\n```\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"redelegation_responses\": [\n    {\n      \"redelegation\": {\n        \"delegator_address\": \"cosmos1ld5p7hn43yuh8ht28gm9pfjgj2fctujp2tgwvf\",\n        \"validator_src_address\": \"cosmosvaloper1j7euyj85fv2jugejrktj540emh9353ltgppc3g\",\n        \"validator_dst_address\": \"cosmosvaloper1yy3tnegzmkdcm7czzcy3flw5z0zyr9vkkxrfse\",\n        \"entries\": null\n      },\n      \"entries\": [\n        {\n          \"redelegation_entry\": {\n            \"creation_height\": 135932,\n            \"completion_time\": \"2021-11-08T03:52:55.299147901Z\",\n            \"initial_balance\": \"2900000\",\n            \"shares_dst\": \"2900000.000000000000000000\"\n          },\n          \"balance\": \"2900000\"\n        }\n      ]\n    }\n  ],\n  \"pagination\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Weighted Voting on a Governance Proposal in Cosmos SDK\nDESCRIPTION: A practical example showing how to split voting power 50/50 between 'yes' and 'no' options on proposal ID 1.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/README.md#2025-04-22_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nsimd tx gov weighted-vote 1 yes=0.5,no=0.5 --from cosmos1..\n```\n\n----------------------------------------\n\nTITLE: Making a CLI Flag Required on a Cobra Command - Go\nDESCRIPTION: This Go code snippet illustrates how to enforce that a specified command-line flag must be provided by marking it as required using Cobra's MarkFlagRequired method. The target flag is identified by the FlagFrom constant. Dependencies include the cobra package and a command object configured with the flag to be marked required. If the user omits the flag when running the CLI command, an error will be triggered.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-modules/09-module-interfaces.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\ncmd.MarkFlagRequired(FlagFrom)\n```\n\n----------------------------------------\n\nTITLE: Defining MsgUndelegate Message Structure in Cosmos SDK\nDESCRIPTION: Protobuf definition for the MsgUndelegate message structure that specifies the delegator address, validator address, and amount to undelegate. This structure contains all parameters needed for an undelegation transaction.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/staking/README.md#2025-04-22_snippet_12\n\nLANGUAGE: protobuf\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.47.0-rc1/proto/cosmos/staking/v1beta1/tx.proto#L140-L152\n```\n\n----------------------------------------\n\nTITLE: Registering Module Depinject Providers and Invokers in Go\nDESCRIPTION: Example of registering depinject providers and invokers for a module in Go using the appmodule.Register function. It demonstrates how to use appmodule.Provide and appmodule.Invoke options.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/core/appmodule/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc init() {\n  appmodule.Register(&modulev1.Module{},\n\t  appmodule.Provide(provideSomething, provideSomethingElse),\n\t  appmodule.Invoke(invokeSomething),\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Historical Information at a Specific Height in Cosmos SDK\nDESCRIPTION: This command retrieves historical information at a given block height, including block header details and validator set information at that point in time.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/staking/README.md#2025-04-22_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\nsimd query staking historical-info [height] [flags]\n```\n\nLANGUAGE: bash\nCODE:\n```\nsimd query staking historical-info 10\n```\n\n----------------------------------------\n\nTITLE: Listing ABCI 2.0 Methods in Markdown\nDESCRIPTION: This code snippet lists the five new methods introduced in ABCI 2.0. These methods are crucial for the interaction between CometBFT and Cosmos SDK applications.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/abci/00-introduction.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `PrepareProposal`\n* `ProcessProposal`\n* `ExtendVote`\n* `VerifyVoteExtension`\n* `FinalizeBlock`\n```\n\n----------------------------------------\n\nTITLE: MintCoins Event Schema\nDESCRIPTION: JSON schema for coinbase and coin_received events emitted when minting coins. Includes minter address and amount details.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/bank/README.md#2025-04-22_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"coinbase\",\n  \"attributes\": [\n    {\n      \"key\": \"minter\",\n      \"value\": \"{{sdk.AccAddress of the module minting coins}}\",\n      \"index\": true\n    },\n    {\n      \"key\": \"amount\",\n      \"value\": \"{{sdk.Coins being minted}}\",\n      \"index\": true\n    }\n  ]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"coin_received\",\n  \"attributes\": [\n    {\n      \"key\": \"receiver\",\n      \"value\": \"{{sdk.AccAddress of the module minting coins}}\",\n      \"index\": true\n    },\n    {\n      \"key\": \"amount\",\n      \"value\": \"{{sdk.Coins being received}}\",\n      \"index\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Querying UnbondingDelegation in Cosmos SDK Staking Module\nDESCRIPTION: The UnbondingDelegation endpoint retrieves unbonding information for a specific delegator-validator pair. It requires both delegator and validator addresses and returns details of all unbonding entries including creation height, completion time, and balances.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/staking/README.md#2025-04-22_snippet_46\n\nLANGUAGE: bash\nCODE:\n```\ncosmos.staking.v1beta1.Query/UnbondingDelegation\n```\n\nLANGUAGE: bash\nCODE:\n```\ngrpcurl -plaintext \\\n-d '{\"delegator_addr\": \"cosmos1y8nyfvmqh50p6ldpzljk3yrglppdv3t8phju77\", validator_addr\":\"cosmosvaloper1rne8lgs98p0jqe82sgt0qr4rdn4hgvmgp9ggcc\"}' \\\nlocalhost:9090 cosmos.staking.v1beta1.Query/UnbondingDelegation\n```\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"unbond\": {\n    \"delegator_address\": \"cosmos1y8nyfvmqh50p6ldpzljk3yrglppdv3t8phju77\",\n    \"validator_address\": \"cosmosvaloper1rne8lgs98p0jqe82sgt0qr4rdn4hgvmgp9ggcc\",\n    \"entries\": [\n      {\n        \"creation_height\": \"136984\",\n        \"completion_time\": \"2021-11-08T05:38:47.505593891Z\",\n        \"initial_balance\": \"400000000\",\n        \"balance\": \"400000000\"\n      },\n      {\n        \"creation_height\": \"137005\",\n        \"completion_time\": \"2021-11-08T05:40:53.526196312Z\",\n        \"initial_balance\": \"385000000\",\n        \"balance\": \"385000000\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ExternalCommunityPoolKeeper Interface in Go\nDESCRIPTION: Interface definition for an external community pool keeper that can be used in place of the x/distribution managed community pool. It defines methods for getting the community pool module name, funding the pool, and distributing funds from the pool.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/distribution/README.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\ntype ExternalCommunityPoolKeeper interface {\n\tGetCommunityPoolModule() string\n\tFundCommunityPool(ctx sdk.Context, amount sdk.Coins, senderAddr sdk.AccAddress) error\n\tDistributeFromCommunityPool(ctx sdk.Context, amount sdk.Coins, receiveAddr sdk.AccAddress) error\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Store Interface Definition (Go Reference)\nDESCRIPTION: This snippet links to the Store interface in the Cosmos SDK Go source code, detailing its minimal requirements such as holding a CacheWrapper and exposing a GetStoreType() method. Consumers following this reference should have Go installed and be aware that the linked source URL specifies the exact version and line numbers of interest. The interface forms the foundation for more complex store types and must be understood before implementing custom store backends.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/advanced/04-store.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/store/types/store.go#L15-L18\n```\n\n----------------------------------------\n\nTITLE: Query Distribution Parameters\nDESCRIPTION: gRPC endpoint to query distribution module parameters including community tax and rewards settings\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/distribution/README.md#2025-04-22_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\ngrpcurl -plaintext \\\n    localhost:9090 \\\n    cosmos.distribution.v1beta1.Query/Params\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"params\": {\n    \"communityTax\": \"20000000000000000\",\n    \"baseProposerReward\": \"00000000000000000\",\n    \"bonusProposerReward\": \"00000000000000000\",\n    \"withdrawAddrEnabled\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Map Implementation with Account Address and BaseAccount\nDESCRIPTION: Example showing how to implement a Map collection mapping account addresses to BaseAccount objects using proto encoding.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/collections/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage collections\n\nimport (\n\t\"cosmossdk.io/collections\"\n\tstoretypes \"cosmossdk.io/store/types\"\n\t\"github.com/cosmos/cosmos-sdk/codec\"\n\tsdk \"github.com/cosmos/cosmos-sdk/types\"\n\tauthtypes \"github.com/cosmos/cosmos-sdk/x/auth/types\"\n)\n\nvar AccountsPrefix = collections.NewPrefix(0)\n\ntype Keeper struct {\n\tSchema    collections.Schema\n\tAccounts   collections.Map[sdk.AccAddress, authtypes.BaseAccount]\n}\n\nfunc NewKeeper(storeKey *storetypes.KVStoreKey, cdc codec.BinaryCodec) Keeper {\n\tsb := collections.NewSchemaBuilder(sdk.OpenKVStore(storeKey))\n\treturn Keeper{\n\t\tAccounts: collections.NewMap(sb, AccountsPrefix, \"accounts\",\n\t\t\tsdk.AccAddressKey, codec.CollValue[authtypes.BaseAccount](cdc)),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Passing a Capability in Cosmos SDK (Go)\nDESCRIPTION: Module 1 (`mod1`) creates a new capability associated with a resource name (\"resourceABC\") using `scopedCapabilityKeeper.NewCapability`. This capability is then immediately passed to a function (`SomeFunction`) within Module 2 (`mod2Keeper`).\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-003-dynamic-capability-store.md#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\n```go\ncapability := scopedCapabilityKeeper.NewCapability(ctx, \"resourceABC\")\nmod2Keeper.SomeFunction(ctx, capability, args...)\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing secp256r1 Algorithm Type\nDESCRIPTION: Defines the secp256r1 algorithm implementation conforming to the SignatureAlgo interface. Includes methods for key derivation and generation using the secp256r1 curve.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/beginner/03-accounts.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage hd\n\nimport (\n    \"github.com/cosmos/go-bip39\"\n    \n    \"github.com/cosmos/cosmos-sdk/crypto/keys/secp256r1\"\n    \"github.com/cosmos/cosmos-sdk/crypto/types\"\n)\n\n// Secp256r1Type uses the secp256r1 ECDSA parameters.\nconst Secp256r1Type = PubKeyType(\"secp256r1\")\n\nvar Secp256r1 = secp256r1Algo{}\n\ntype secp256r1Algo struct{}\n\nfunc (s secp256r1Algo) Name() PubKeyType {\n    return Secp256r1Type\n}\n\n// Derive derives and returns the secp256r1 private key for the given seed and HD path.\nfunc (s secp256r1Algo) Derive() DeriveFn {\n    return func(mnemonic string, bip39Passphrase, hdPath string) ([]byte, error) {\n        seed, err := bip39.NewSeedWithErrorChecking(mnemonic, bip39Passphrase)\n        if err != nil {\n            return nil, err\n        }\n\n        masterPriv, ch := ComputeMastersFromSeed(seed)\n        if len(hdPath) == 0 {\n            return masterPriv[:], nil\n        }\n        derivedKey, err := DerivePrivateKeyForPath(masterPriv, ch, hdPath)\n\n        return derivedKey, err\n    }\n}\n\n// Generate generates a secp256r1 private key from the given bytes.\nfunc (s secp256r1Algo) Generate() GenerateFn {\n    return func(bz []byte) types.PrivKey {\n        key, err := secp256r1.NewPrivKeyFromSecret(bz)\n        if err != nil {\n            panic(err)\n        }\n        return key\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Root Command Function in Go\nDESCRIPTION: This Go function defines how to build the root command for the CLI in the simapp application. It sets up flags, a 'PreRun' function, and attaches all necessary subcommands to facilitate various user interactions, including transaction and query operations.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/advanced/07-cli.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/simapp/simd/cmd/root_v2.go#L47-L130\n```\n\n----------------------------------------\n\nTITLE: Defining ValidatorDistInfo Structure in Go\nDESCRIPTION: Defines the ValidatorDistInfo structure which tracks distribution information for validators. This includes the operator address, self-bond rewards, and accumulated commission.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/distribution/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype ValidatorDistInfo struct {\n    OperatorAddress     sdk.AccAddress\n    SelfBondRewards     sdkmath.DecCoins\n    ValidatorCommission types.ValidatorAccumulatedCommission\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Sub-Module Account Address with Multiple Keys in Go\nDESCRIPTION: Shows how to create a sub-module account address using the `address.Module` function with multiple derivation keys (e.g., `groupPolicyAddresses`, `policyID`). The derivation process involves hashing the module name concatenated with a null byte and the first key, followed by recursive derivation for subsequent keys.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-028-public-key-addresses.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\ngroupPolicyAddresses := []byte{1}\naddress.Module(moduleName, groupPolicyAddresses, policyID)\n```\n\n----------------------------------------\n\nTITLE: Community Pool Spend Message Definition\nDESCRIPTION: Protobuf definition for the CommunityPoolSpend RPC method that enables governance-controlled spending from the community pool.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/protocolpool/README.md#2025-04-22_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\n  // CommunityPoolSpend defines a governance  operation for sending tokens from\n  // the community pool in the x/protocolpool module to another account, which\n  // could be the governance module itself. The authority is defined in the\n  // keeper.\n  rpc CommunityPoolSpend(MsgCommunityPoolSpend) returns (MsgCommunityPoolSpendResponse);\n```\n\n----------------------------------------\n\nTITLE: Setting Withdraw Address Command\nDESCRIPTION: CLI command to set the withdrawal address for rewards associated with a delegator address\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/distribution/README.md#2025-04-22_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nsimd tx distribution set-withdraw-addr [withdraw-addr] [flags]\n```\n\nLANGUAGE: shell\nCODE:\n```\nsimd tx distribution set-withdraw-addr cosmos1... --from cosmos1...\n```\n\n----------------------------------------\n\nTITLE: StakeAuthorization Protobuf Definition for Staking Module Integration\nDESCRIPTION: The StakeAuthorization protobuf definition for the staking module allows granting permission to delegate, undelegate, or redelegate tokens with specific validator allowlists or denylists and optional maximum token limits.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/authz/README.md#2025-04-22_snippet_5\n\nLANGUAGE: protobuf\nCODE:\n```\n// StakeAuthorization defines authorization for delegate/undelegate/redelegate.\n//\n// Since: cosmos-sdk 0.43\nmessage StakeAuthorization {\n  option (cosmos_proto.implements_interface) = \"Authorization\";\n\n  // max_tokens specifies the maximum amount of tokens can be delegate to a validator. If it is\n  // empty, there is no spend limit and any amount of coins can be delegated.\n  cosmos.base.v1beta1.Coin max_tokens = 1 [(gogoproto.nullable) = true];\n  // allow_list specifies list of validator addresses to whom grantee can delegate tokens on behalf of granter's\n  // account.\n  cosmos.staking.v1beta1.StakeAuthorization.Validators allow_list = 2;\n  // deny_list specifies list of validator addresses to whom grantee can not delegate tokens.\n  cosmos.staking.v1beta1.StakeAuthorization.Validators deny_list = 3;\n  // authorization_type defines one of AuthorizationType.\n  cosmos.staking.v1beta1.AuthorizationType authorization_type = 4;\n}\n```\n\n----------------------------------------\n\nTITLE: Example: Creating AMM Module Address with Concatenated Keys in Go\nDESCRIPTION: Shows an example of creating a module account address where multiple keys (BTC address and ATOM address) are concatenated *before* being passed as a single derivation key to the `address.Module` function for an AMM module. Note the potentially extraneous closing parenthesis and brace `})` in the original snippet.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-028-public-key-addresses.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nbtcAtomAMM := address.Module(\"amm\", btc.Address() + atom.Address()})\n```\n\n----------------------------------------\n\nTITLE: Defining Built-in Authorization Types in Protobuf\nDESCRIPTION: Protobuf definitions for the built-in authorization types: SendAuthorization for limiting token transfers and GenericAuthorization for unrestricted access to specific message types.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-030-authz-module.md#2025-04-22_snippet_4\n\nLANGUAGE: protobuf\nCODE:\n```\n// SendAuthorization allows the grantee to spend up to spend_limit coins from\n// the granter's account.\nmessage SendAuthorization {\n  repeated cosmos.base.v1beta1.Coin spend_limit = 1;\n}\n\n// GenericAuthorization gives the grantee unrestricted permissions to execute\n// the provided method on behalf of the granter's account.\nmessage GenericAuthorization {\n  option (cosmos_proto.implements_interface) = \"Authorization\";\n\n  // Msg, identified by it's type URL, to grant unrestricted permissions to execute\n  string msg = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Updated GenesisState Structure in Go\nDESCRIPTION: Go struct definition showing how DenomMetadata is integrated into the x/bank module's genesis state, allowing metadata to be included in the chain's initial state.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-024-coin-metadata.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype GenesisState struct {\n  SendEnabled   bool        `json:\"send_enabled\" yaml:\"send_enabled\"`\n  Balances      []Balance   `json:\"balances\" yaml:\"balances\"`\n  Supply        sdk.Coins   `json:\"supply\" yaml:\"supply\"`\n  DenomMetadata []Metadata  `json:\"denom_metadata\" yaml:\"denom_metadata\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Submitting a Weighted Vote on a Governance Proposal in Cosmos SDK\nDESCRIPTION: The weighted-vote command allows users to split their voting power across multiple options for a given governance proposal using its ID.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/README.md#2025-04-22_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nsimd tx gov weighted-vote [proposal-id] [weighted-options] [flags]\n```\n\n----------------------------------------\n\nTITLE: Implementing MsgExemptDelegation in Cosmos SDK\nDESCRIPTION: This message is used to exempt a delegation to a validator. It allows more delegation shares to be issued from the validator if the exemption factor is greater than 0, enabling the chain to enforce self-delegation by validators in liquid staking schemes.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-061-liquid-staking.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n### `MsgExemptDelegation`\n\nThe MsgExemptDelegation message is used to exempt a delegation to a validator. If the exemption factor is greater than 0, this will allow more delegation shares to be issued from the validator.\n\nThis design allows the chain to force an amount of self-delegation by validators participating in liquid staking schemes.\n```\n\n----------------------------------------\n\nTITLE: Inter-Module Hook Registration in Cosmos SDK using Go\nDESCRIPTION: Illustrates how hooks between modules can be registered using the Cosmos SDK framework. A module can define hook interfaces, and another module can register by collecting these hooks in a map. This setup is easily observable in `app.go` when using `depinject` code generation, enhancing visibility into module interactions.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-057-app-wiring.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc init() {\n    appmodule.Register(\n        &foomodulev1.Module{},\n        appmodule.Invoke(InvokeSetFooHooks),\n\t    ...\n    )\n}\nfunc InvokeSetFooHooks(\n    keeper *keeper.Keeper,\n    fooHooks map[string]FooHooks,\n) error {\n\tfor k in sort.Strings(maps.Keys(fooHooks)) {\n\t\tkeeper.AddFooHooks(fooHooks[k])\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering the Pre-Upgrade Command in Go\nDESCRIPTION: Demonstrates how to register the previously defined `preUpgradeCommand` function with the application's root Cobra command (`rootCmd`) using the `AddCommand` method. This registration makes the `<appd> pre-upgrade` command available and executable within the application's command-line interface, allowing Cosmovisor or a user to trigger the pre-upgrade logic.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-apps/03-app-upgrade.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n```go\nrootCmd.AddCommand(\n  // ..\n  preUpgradeCommand(),\n  // ..\n )\n```\n```\n\n----------------------------------------\n\nTITLE: ViewKeeper Interface Definition - Go\nDESCRIPTION: Defines the ViewKeeper interface that provides read-only access to account balances with O(1) lookup complexity.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/bank/README.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\ntype ViewKeeper interface {\n    ValidateBalance(ctx context.Context, addr sdk.AccAddress) error\n    HasBalance(ctx context.Context, addr sdk.AccAddress, amt sdk.Coin) bool\n\n    GetAllBalances(ctx context.Context, addr sdk.AccAddress) sdk.Coins\n    GetAccountsBalances(ctx context.Context) []types.Balance\n    GetBalance(ctx context.Context, addr sdk.AccAddress, denom string) sdk.Coin\n    LockedCoins(ctx context.Context, addr sdk.AccAddress) sdk.Coins\n    SpendableCoins(ctx context.Context, addr sdk.AccAddress) sdk.Coins\n    SpendableCoin(ctx context.Context, addr sdk.AccAddress, denom string) sdk.Coin\n\n    IterateAccountBalances(ctx context.Context, addr sdk.AccAddress, cb func(coin sdk.Coin) (stop bool))\n    IterateAllBalances(ctx context.Context, cb func(address sdk.AccAddress, coin sdk.Coin) (stop bool))\n}\n```\n\n----------------------------------------\n\nTITLE: Defining UpgradeInstructions in Protobuf for Cosmos SDK Upgrade Module\nDESCRIPTION: This snippet shows the proposed structure for the new UpgradeInstructions message in the upgrade.proto file. It includes fields for artifacts, pre-run and post-run commands, and a description.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-047-extend-upgrade-plan.md#2025-04-22_snippet_3\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage UpgradeInstructions {\n  repeated Artifact artifacts = 1;\n  string pre_run = 2;\n  string post_run = 3;\n  string description = 4;\n}\n\nmessage Artifact {\n  string platform = 1;\n  string url = 2;\n  string checksum = 3;\n  string checksum_algo = 4;\n}\n```\n\n----------------------------------------\n\nTITLE: Undelegating Coins to an Account in Go\nDESCRIPTION: This keeper function handles undelegating coins to an account, differentiating between vesting and non-vesting accounts and updating the account balance accordingly.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/auth/vesting/README.md#2025-04-22_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nfunc UndelegateCoins(to Account, amount Coins) {\n    if isVesting(to) {\n        if to.DelegatedFree + to.DelegatedVesting >= amount {\n            to.TrackUndelegation(amount)\n            // save account ...\n        }\n    } else {\n        AddBalance(to, amount)\n        // save account...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing AppModuleBasic Interface Definition in Go\nDESCRIPTION: This Go code reference provides the location of the AppModuleBasic interface in the Cosmos SDK. AppModuleBasic defines independent module methods for registration and interface implementations. Dependencies include the Cosmos SDK types, and usage requires familiarity with the codec and gRPC concepts within Cosmos SDK. This reference is essential for module authors implementing core module features.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-modules/01-module-manager.md#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/types/module/module.go#L56-L66\n```\n\n----------------------------------------\n\nTITLE: Defining a Module Migration Function in Cosmos SDK (Go)\nDESCRIPTION: This Go snippet illustrates the structure of a migration function (`Migrate1to2`) within a `Migrator` type for a Cosmos SDK module. It shows how to call the actual store migration logic (e.g., `v2bank.MigrateStore` located in `x/bank/migrations/v2`) for upgrading a module from consensus version 1 to 2, using the module's keeper and store key. This function is typically registered via `RegisterMigration`.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-modules/13-upgrade.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n```go\n// Migrating bank module from version 1 to 2\nfunc (m Migrator) Migrate1to2(ctx sdk.Context) error {\n\treturn v2bank.MigrateStore(ctx, m.keeper.storeKey) // v2bank is package `x/bank/migrations/v2`.\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Transaction Commands Aggregation Example in Go\nDESCRIPTION: An example from simapp application in Go showing how 'txCommand' is used to aggregate transaction-related subcommands such as signing and broadcasting transactions. It showcases the extensibility of the CLI in a Cosmos SDK application.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/advanced/07-cli.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/simapp/simd/cmd/root_v2.go#L270-L292\n```\n\n----------------------------------------\n\nTITLE: Historical state query using REST API with block height header\nDESCRIPTION: Example curl command for querying historical state by specifying a specific block height. This uses the x-cosmos-block-height header to request state at a particular blockchain height.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/user/run-node/02-interact-node.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n    -X GET \\\n    -H \"Content-Type: application/json\" \\\n    -H \"x-cosmos-block-height: 123\" \\\n    http://localhost:1317/cosmos/bank/v1beta1/balances/$MY_VALIDATOR_ADDRESS\n```\n\n----------------------------------------\n\nTITLE: Configuring Store Upgrades for New Modules in Go\nDESCRIPTION: This Go code snippet configures store upgrades for new modules during in-place migrations. It reads upgrade information, checks upgrade conditions, and sets a store loader to apply required upgrades to the multistore.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/advanced/15-upgrade.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nupgradeInfo, err := app.UpgradeKeeper.ReadUpgradeInfoFromDisk()\nif err != nil {\n\tpanic(err)\n}\n\nif upgradeInfo.Name == \"my-plan\" && !app.UpgradeKeeper.IsSkipHeight(upgradeInfo.Height) {\n\tstoreUpgrades := storetypes.StoreUpgrades{\n\t\t// add store upgrades for new modules\n\t\t// Example:\n\t\t//    Added: []string{\"foo\", \"bar\"},\n\t\t// ...\n\t}\n\n\t// configure store loader that checks if version == upgradeHeight and applies store upgrades\n\tapp.SetStoreLoader(upgradetypes.UpgradeStoreLoader(upgradeInfo.Height, &storeUpgrades))\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Evidence GenesisState in Protobuf\nDESCRIPTION: Protobuf definition of the GenesisState for the evidence module, which stores all evidence present at genesis time using Google's Any type for polymorphism.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/evidence/README.md#2025-04-22_snippet_3\n\nLANGUAGE: protobuf\nCODE:\n```\n// GenesisState defines the evidence module's genesis state.\nmessage GenesisState {\n  // evidence defines all the evidence at genesis.\n  repeated google.protobuf.Any evidence = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Circuit Breaker Trip Message in Protobuf\nDESCRIPTION: Defines the message structure for tripping (disabling) circuit breakers. This allows authorized accounts to pause processing of specific message types in the state machine.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/circuit/README.md#2025-04-22_snippet_4\n\nLANGUAGE: protobuf\nCODE:\n```\n  // TripCircuitBreaker pauses processing of Msg's in the state machine.\n  rpc TripCircuitBreaker(MsgTripCircuitBreaker) returns (MsgTripCircuitBreakerResponse);\n```\n\n----------------------------------------\n\nTITLE: Fund Community Pool Message Definition\nDESCRIPTION: Protobuf definition for the FundCommunityPool RPC method that allows accounts to fund the community pool.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/protocolpool/README.md#2025-04-22_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\n  // FundCommunityPool defines a method to allow an account to directly\n  // fund the community pool.\n  rpc FundCommunityPool(MsgFundCommunityPool) returns (MsgFundCommunityPoolResponse);\n```\n\n----------------------------------------\n\nTITLE: Aggregating Multiple Invariants for a Module in Cosmos SDK (Go)\nDESCRIPTION: Aggregates several invariant functions into a single AllInvariants function within a Cosmos SDK module. This function returns an sdk.Invariant that, when executed, sequentially runs BalanceInvariants and DepositsInvariant; if any invariant fails, it short-circuits and returns the error. This standardizes invariant checks per module and ensures modular extensibility. Requires the relevant Keeper definition and that individual invariants are previously defined.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-modules/07-invariants.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// AllInvariants runs all invariants of the module.\n// In this example, the module implements two Invariants: BalanceInvariants and DepositsInvariants\n\nfunc AllInvariants(k Keeper) sdk.Invariant {\n\n\treturn func(ctx context.Context) (string, bool) {\n\t\tres, stop := BalanceInvariants(k)(ctx)\n\t\tif stop {\n\t\t\treturn res, stop\n\t\t}\n\n\t\treturn DepositsInvariant(k)(ctx)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Decoding Transactions in CLI\nDESCRIPTION: The decode command decodes a transaction encoded with the encode command.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/auth/tx/README.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nsimd tx decode Co8BCowBChwvY29zbW9zLmJhbmsudjFiZXRhMS5Nc2dTZW5kEmwKLWNvc21vczFsNnZzcWhoN3Jud3N5cjJreXozampnM3FkdWF6OGd3Z3lsODI3NRItY29zbW9zMTU4c2FsZHlnOHBteHU3Znd2dDBkNng3amVzd3A0Z3d5a2xrNnkzGgwKBXN0YWtlEgMxMDASBhIEEMCaDA==\n```\n\n----------------------------------------\n\nTITLE: Setting Distribution Module Rewards for a New Validator (Go)\nDESCRIPTION: This snippet initializes or resets the distribution records for the sole validator, ensuring historical rewards, current rewards, commission, and outstanding rewards are established on the testnet. Required for accurate reward calculation post-validator migration. Depends on the Cosmos SDK's distribution keeper and custom types.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-apps/05-app-testnet.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n  // Initialize records for this validator across all distribution stores\n  app.DistrKeeper.ValidatorHistoricalRewards.Set(ctx, newVal.GetOperator(), 0, distrtypes.NewValidatorHistoricalRewards(sdk.DecCoins{}, 1))\n  app.DistrKeeper.ValidatorCurrentRewards.Set(ctx, newVal.GetOperator(), distrtypes.NewValidatorCurrentRewards(sdk.DecCoins{}, 1))\n  app.DistrKeeper.ValidatorAccumulatedCommission.Set(ctx, newVal.GetOperator(), distrtypes.InitialValidatorAccumulatedCommission())\n  app.DistrKeeper.ValidatorOutstandingRewards.Set(ctx, newVal.GetOperator(), distrtypes.ValidatorOutstandingRewards{Rewards: sdk.DecCoins{}})\n```\n\n----------------------------------------\n\nTITLE: Implementing Composed Address Generation for Multi-account Structures in Go\nDESCRIPTION: Defines the Composed function for generating addresses from multiple subaccounts (like multisig). It sorts subaccount addresses, length-prefixes them to prevent conflicts, and then hashes the result with a type prefix.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-028-public-key-addresses.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// We don't need a PubKey interface - we need anything which is addressable.\ntype Addressable interface {\n    Address() []byte\n}\n\nfunc Composed(typ string, subaccounts []Addressable) []byte {\n    addresses = map(subaccounts, \\a -> LengthPrefix(a.Address()))\n    addresses = sort(addresses)\n    return address.Hash(typ, addresses[0] + ... + addresses[n])\n}\n```\n\n----------------------------------------\n\nTITLE: Running a Fuzz Test with Go Test Command in Cosmos SDK\nDESCRIPTION: This command demonstrates how to run a fuzz test in the Cosmos SDK using Go's built-in fuzzing capabilities. It uses the -fuzz flag to specify the fuzz target FuzzCryptoHDNewParamsFromPath in the tests directory.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/tests/fuzz/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo test -fuzz FuzzCryptoHDNewParamsFromPath ./tests\n```\n\n----------------------------------------\n\nTITLE: Adding a String Flag to a Cobra Command - Go\nDESCRIPTION: This Go code snippet demonstrates how to attach a string-type flag to a command using the Cobra library. The flag name is defined by the FlagFrom constant, with an empty string as the default value and a brief usage description. Pre-requisites include importing the cobra library and declaring the FlagFrom variable/constant. The flag value can be set by users to specify the signing key in CLI operations. The output is a modified Cobra command object accepting the --from flag.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-modules/09-module-interfaces.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\ncmd.Flags().String(FlagFrom, \"\", \"Name or address of private key with which to sign\")\n```\n\n----------------------------------------\n\nTITLE: Defining Module Configuration in Protobuf (Cosmos SDK, Protobuf)\nDESCRIPTION: This snippet references a module configuration file written in Protobuf. It demonstrates where to define the configuration message and options for a Cosmos SDK module, which will later be used by depinject for dependency injection. A key dependency is Protobuf and the appropriate Go module generator. Fields like 'uint64 max_metadata_len' allow chain developers to customize module behavior. Input configurations come from app_config.go or app.yaml, and output is a typed configuration message consumed by Go code. Limitations include requiring go_import and message structure compatibility.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-modules/15-depinject.md#2025-04-22_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nreference\\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/proto/cosmos/group/module/v1/module.proto\n```\n\n----------------------------------------\n\nTITLE: Withdrawing Validator Rewards Command\nDESCRIPTION: CLI command to withdraw rewards from a specific validator, with optional commission withdrawal\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/distribution/README.md#2025-04-22_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nsimd tx distribution withdraw-rewards [validator-addr] [flags]\n```\n\nLANGUAGE: shell\nCODE:\n```\nsimd tx distribution withdraw-rewards cosmosvaloper1... --from cosmos1... --commission\n```\n\n----------------------------------------\n\nTITLE: Implementing Multisig Address Generation in Go\nDESCRIPTION: Demonstrates how to implement the Address method for the new multisig public key type. It extracts the component keys, creates a type descriptor from the message name and threshold, and calls the Composed function.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-028-public-key-addresses.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc (multisig PubKey) Address() {\n\t// first gather all nested pub keys\n\tvar keys []address.Addressable  // cryptotypes.PubKey implements Addressable\n\tfor _, _key := range multisig.Pubkeys {\n\t\tkeys = append(keys, key.GetCachedValue().(cryptotypes.PubKey))\n\t}\n\n\t// form the type from the message name (cosmos.crypto.multisig.PubKey) and the threshold joined together\n\tprefix := fmt.Sprintf(\"%s/%d\", proto.MessageName(multisig), multisig.Threshold)\n\n\t// use the Composed function defined above\n\treturn address.Composed(prefix, keys)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Store Migrations for Upgrade in Cosmos SDK (Go)\nDESCRIPTION: Example of configuring store migrations during upgrades with Cosmos SDK. Involves setting handlers for store keys and checking upgrade execution. Pre-requisites: Defined upgrade handlers, proper store configuration. Inputs: upgrade info, store upgrades; Outputs: Store migration.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-apps/03-app-upgrade.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// this configures a no-op upgrade handler for the \"my-fancy-upgrade\" upgrade\napp.UpgradeKeeper.SetUpgradeHandler(\"my-fancy-upgrade\",  func(ctx context.Context, plan upgrade.Plan) {\n // upgrade changes here\n})\nupgradeInfo, err := app.UpgradeKeeper.ReadUpgradeInfoFromDisk()\nif err != nil {\n // handle error\n}\nif upgradeInfo.Name == \"my-fancy-upgrade\" && !app.UpgradeKeeper.IsSkipHeight(upgradeInfo.Height) {\n storeUpgrades := store.StoreUpgrades{\n  Renamed: []store.StoreRename{{\n   OldKey: \"foo\",\n   NewKey: \"bar\",\n  }},\n  Deleted: []string{},\n }\n // configure store loader that checks if version == upgradeHeight and applies store upgrades\n app.SetStoreLoader(upgrade.UpgradeStoreLoader(upgradeInfo.Height, &storeUpgrades))\n}\n```\n\n----------------------------------------\n\nTITLE: Grant Protobuf Definition for Authorization Storage\nDESCRIPTION: The protobuf definition for the Grant object that encapsulates an Authorization type and an expiration timestamp. This is stored in the state to track authorizations between granter and grantee accounts.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/authz/README.md#2025-04-22_snippet_9\n\nLANGUAGE: protobuf\nCODE:\n```\n// Grant gives permissions to execute the provide method with expiration time.\nmessage Grant {\n  google.protobuf.Any authorization = 1 [(cosmos_proto.accepts_interface) = \"Authorization\"];\n\n  // time when the grant will expire and will be pruned. If null, then the grant\n  // doesn't have a time expiration (other conditions  in `authorization` may\n  // apply to invalidate the grant)\n  google.protobuf.Timestamp expiration = 2 [(gogoproto.stdtime) = true, (gogoproto.nullable) = true];\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New CommitKVStoreCacheManager in Go\nDESCRIPTION: Function to create a new cache manager with a specified cache size. Initializes the manager with an empty map of caches.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/spec/store/interblock-cache.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc NewCommitKVStoreCacheManager(size uint) CommitKVStoreCacheManager {\n    manager = CommitKVStoreCacheManager{size, make(map[string]CommitKVStore)}\n    return manager\n}\n```\n\n----------------------------------------\n\nTITLE: App Wiring Configuration Aggregating Module Registration (Cosmos SDK, Go)\nDESCRIPTION: This snippet references the main app wiring block that instantiates and exposes the complete registration of the group module using depinject. It aggregates all step-wise wiring (init, inputs, outputs, ProvideModule) into final registration block. Input is the set of providers and configuration; output is a fully-wired module ready for use by the application. All references must be public and visible to depinject.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-modules/15-depinject.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nreference\\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/x/group/module/module.go#L194-L235\n```\n\n----------------------------------------\n\nTITLE: CLI Commands for Single-Option Voting in Cosmos SDK\nDESCRIPTION: Shows two equivalent ways to submit a single-option vote using the CLI: one using the weighted format with a full weight of 1, and another using the traditional format for backward compatibility.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-037-gov-split-vote.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nsimd tx gov vote 1 \"yes=1\" --from mykey\n```\n\nLANGUAGE: shell\nCODE:\n```\nsimd tx gov vote 1 yes --from mykey\n```\n\n----------------------------------------\n\nTITLE: Cache Value Structure Definition in Go\nDESCRIPTION: Defines the cValue struct used in CacheKVStore to wrap values stored in the cache. Contains the actual byte value and a dirty flag indicating whether the value has been modified since last write to parent store.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/store/cachekv/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype cValue struct {\n\tvalue []byte\n\tdirty bool\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Staking Delegations via Cosmos SDK CLI (Bash)\nDESCRIPTION: This command demonstrates how a user queries the staking delegations for a specific delegator address using the application's command-line interface (`simd`). It interacts with a connected full-node to retrieve state information from the `staking` module without requiring consensus.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/beginner/02-query-lifecycle.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsimd query staking delegations <delegatorAddress>\n```\n\n----------------------------------------\n\nTITLE: Declaring StoreLoader Function Signature in Go\nDESCRIPTION: Defines the signature for StoreLoader functions, which set up store migrations for upgrades.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/upgrade/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc UpgradeStoreLoader (upgradeHeight int64, storeUpgrades *store.StoreUpgrades) baseapp.StoreLoader\n```\n\n----------------------------------------\n\nTITLE: GenericAuthorization Go Implementation for x/authz Module\nDESCRIPTION: The Go implementation of GenericAuthorization that allows unrestricted permission to execute a specified message type. It implements the Authorization interface with methods for message validation and acceptance.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/authz/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// NewGenericAuthorization creates a new GenericAuthorization object.\nfunc NewGenericAuthorization(msgTypeURL string) *GenericAuthorization {\n\treturn &GenericAuthorization{Msg: msgTypeURL}\n}\n\n// MsgTypeURL implements Authorization.MsgTypeURL.\nfunc (a GenericAuthorization) MsgTypeURL() string {\n\treturn a.Msg\n}\n\n// Accept implements Authorization.Accept.\nfunc (a GenericAuthorization) Accept(ctx sdk.Context, msg sdk.Msg) (Authorization, error) {\n\treturn a, nil\n}\n\n// ValidateBasic implements Authorization.ValidateBasic.\nfunc (a GenericAuthorization) ValidateBasic() error {\n\treturn validateMsgType(a.Msg)\n}\n```\n\n----------------------------------------\n\nTITLE: Using ChainAnteDecorators to Set the Application AnteHandler in Go\nDESCRIPTION: Shows how to use the `ChainAnteDecorators` function in Go to combine multiple `AnteDecorator` instances (like `SetUpContextDecorator`, `SigVerifyDecorator`, `UserDefinedDecorator`) into a single `AnteHandler`. This final handler is then registered with the base application using `bapp.SetAnteHandler`.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-010-modular-antehandler.md#2025-04-22_snippet_14\n\nLANGUAGE: go\nCODE:\n```\n// Create final antehandler by chaining the decorators together\nantehandler := ChainAnteDecorators(NewSetUpContextDecorator(), NewSigVerifyDecorator(), NewUserDefinedDecorator())\n\n// Set chained Antehandler in the baseapp\nbapp.SetAnteHandler(antehandler)\n```\n\n----------------------------------------\n\nTITLE: Specifying Module Outputs with depinject.Out (Cosmos SDK, Go)\nDESCRIPTION: This snippet references code where the module defines which dependencies it provides to other modules, by embedding depinject.Out in a struct. The struct fields typically expose the module and its keeper. All outputs should be public types and fields for discoverability. Inputs are the constructed dependencies; outputs are references to module functionality available to the rest of the application.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-modules/15-depinject.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nreference\\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/x/group/module/module.go#L213-L218\n```\n\n----------------------------------------\n\nTITLE: Defining Module-Specific Codec Interface in Go\nDESCRIPTION: Example of how modules should define their own codec interface that extends the base Marshaler interface. This specific example from x/auth module shows methods for serializing Account interfaces, demonstrating the pattern for modules that need to work with interfaces.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-019-protobuf-state-encoding.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// x/auth/types/codec.go\n\ntype Codec interface {\n  codec.Codec\n\n  MarshalAccount(acc exported.Account) ([]byte, error)\n  UnmarshalAccount(bz []byte) (exported.Account, error)\n\n  MarshalAccountJSON(acc exported.Account) ([]byte, error)\n  UnmarshalAccountJSON(bz []byte) (exported.Account, error)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AnteHandler Interface for Transaction Authentication in Go\nDESCRIPTION: This code defines the AnteHandler interface which is implemented to authenticate transactions before their messages are processed. AnteHandlers perform preliminary validity checks including signature verification and fee deduction.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/advanced/00-baseapp.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ntype AnteHandler func(ctx Context, tx Tx, simulate bool) (Context, error)\n```\n\n----------------------------------------\n\nTITLE: Querying Account Information in Cosmos SDK\nDESCRIPTION: Retrieves account information for a specific address in Cosmos SDK.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/auth/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsimd query auth account [address] [flags]\n```\n\nLANGUAGE: bash\nCODE:\n```\nsimd query auth account cosmos1...\n```\n\n----------------------------------------\n\nTITLE: Querying Group Members\nDESCRIPTION: Command to query members of a specific group with pagination support.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/group/README.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nsimd query group group-members 1\n```\n\n----------------------------------------\n\nTITLE: Configuring Module in Application Code (Cosmos SDK, Go)\nDESCRIPTION: This snippet references the application configuration file where a chain developer customizes the module parameters. It shows how to set module configuration in app_config.go, mapping Protobuf configuration fields (such as 'max_metadata_len') to Go struct fields. This is used as an input for wiring modules with depinject. Key dependencies include the generated Go code from Protobuf and the configuration struct definition.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-modules/15-depinject.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nreference\\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/simapp/app_config.go#L228-L234\n```\n\n----------------------------------------\n\nTITLE: Implementing Begin and End Blockers in Go\nDESCRIPTION: This code defines `HasBeginBlocker` and `HasEndBlocker` interfaces for handling operations that should execute before and after transactions within a block, respectively. These methods take a `context.Context` and may interact with Comet block information.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-063-core-module-api.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\ntype HasBeginBlocker interface {\n  AppModule\n  BeginBlock(context.Context) error\n}\n\ntype HasEndBlocker interface {\n  AppModule\n  EndBlock(context.Context) error\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Snapshot Commands in Cosmos SDK Application\nDESCRIPTION: Code snippet showing how to add snapshot management commands to a Cosmos SDK application. This imports the snapshot module from the cosmos-sdk client package and adds the snapshot command to the root command with an app creator function.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/user/run-node/01-run-node.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nimport (\n  \"github.com/cosmos/cosmos-sdk/client/snapshot\"\n)\n\nfunc initRootCmd(/* ... */) {\n  // ...\n  rootCmd.AddCommand(\n    snapshot.Cmd(appCreator),\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MsgBeginRedelegate Interface in Cosmos SDK Staking Module\nDESCRIPTION: Protobuf reference for the MsgBeginRedelegate interface that allows delegators to instantly switch validators. This message initiates the redelegation process from one validator to another.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/staking/README.md#2025-04-22_snippet_16\n\nLANGUAGE: protobuf\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.47.0-rc1/proto/cosmos/staking/v1beta1/tx.proto#L30-L32\n```\n\n----------------------------------------\n\nTITLE: Querying Group Policies by Group using gRPC\nDESCRIPTION: Shows how to query group policies for a specific group ID using gRPC. Returns policy details including address, group ID, admin, and decision policy configuration.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/group/README.md#2025-04-22_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\ngrpcurl -plaintext \\\n    -d '{\"group_id\":\"1\"}'  localhost:9090 cosmos.group.v1.Query/GroupPoliciesByGroup\n```\n\n----------------------------------------\n\nTITLE: Implementing AutoCLI for Non-Module Commands in Go\nDESCRIPTION: This code snippet shows how to implement AutoCLI for non-module commands, specifically for cometbft gRPC commands in the Cosmos SDK. It demonstrates the implementation of the appmodule.Module interface and how to append it to the appOptions.ModuleOptions map.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/client/v2/README.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\n// AutoCLIOptions implements the AutoCLIOption interface.\nfunc (AppModuleBasic) AutoCLIOptions() *autocliv1.ModuleOptions {\n\treturn &autocliv1.ModuleOptions{\n\t\tService: autocliv1.ServiceOptions{\n\t\t\tRpcCommandOptions: []*autocliv1.RpcCommandOptions{\n\t\t\t\t{\n\t\t\t\t\tRpcMethod: \"GetNodeInfo\",\n\t\t\t\t\tUse:       \"node-info\",\n\t\t\t\t\tShort:     \"Query remote node for the the node information\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tRpcMethod: \"GetSyncing\",\n\t\t\t\t\tUse:       \"syncing\",\n\t\t\t\t\tShort:     \"Query node syncing status\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Delegation in Cosmos SDK\nDESCRIPTION: Initializes starting information for a new delegation by incrementing validator period, tracking delegation stake, and setting delegator starting info. This function is called whenever a delegation is modified to handle rewards and period tracking.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/distribution/README.md#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\n// initialize starting info for a new delegation\nfunc (k Keeper) initializeDelegation(ctx context.Context, val sdk.ValAddress, del sdk.AccAddress) {\n    // period has already been incremented - we want to store the period ended by this delegation action\n    previousPeriod := k.GetValidatorCurrentRewards(ctx, val).Period - 1\n\n\tk.incrementReferenceCount(ctx, val, previousPeriod)\n\n\tvalidator := k.stakingKeeper.Validator(ctx, val)\n\tdelegation := k.stakingKeeper.Delegation(ctx, del, val)\n\n\t// calculate delegation stake in tokens\n\t// we don't store directly, so multiply delegation shares * (tokens per share)\n\t// note: necessary to truncate so we don't allow withdrawing more rewards than owed\n\tstake := validator.TokensFromSharesTruncated(delegation.GetShares())\n\tk.SetDelegatorStartingInfo(ctx, val, del, types.NewDelegatorStartingInfo(previousPeriod, stake, uint64(ctx.BlockHeight())))\n}\n```\n\n----------------------------------------\n\nTITLE: Inflation Rate Calculation Function\nDESCRIPTION: Implementation of the NextInflationRate function that calculates inflation based on bonded ratio and parameters.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/mint/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nNextInflationRate(params Params, bondedRatio math.LegacyDec) (inflation math.LegacyDec) {\n\tinflationRateChangePerYear = (1 - bondedRatio/params.GoalBonded) * params.InflationRateChange\n\tinflationRateChange = inflationRateChangePerYear/blocksPerYr\n\n\t// increase the new annual inflation for this next block\n\tinflation += inflationRateChange\n\tif inflation > params.InflationMax {\n\t\tinflation = params.InflationMax\n\t}\n\tif inflation < params.InflationMin {\n\t\tinflation = params.InflationMin\n\t}\n\n\treturn inflation\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Module Configuration with depinject in Go\nDESCRIPTION: This snippet demonstrates how to test a module configuration using depinject. It loads a YAML configuration file, creates a depinject.Config instance, and injects dependencies into a Keeper struct for testing.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/depinject/appconfig/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n//go:embed app.yaml\nvar appConfig []byte\n\nvar AppConfig = appconfig.LoadYAML(appConfig)\n\nfunc TestModule(t *testing.T) {\n var keeper Keeper\n assert.NilError(t, depinject.Inject(AppConfig, &keeper))\n}\n```\n\n----------------------------------------\n\nTITLE: MsgCreateValidator Protobuf Definition\nDESCRIPTION: Protobuf message definition for creating a new validator with initial delegation from the operator. Includes reference paths and validator details like commission parameters, description, and delegation amount.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/staking/README.md#2025-04-22_snippet_8\n\nLANGUAGE: protobuf\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.47.0-rc1/proto/cosmos/staking/v1beta1/tx.proto#L20-L21\n\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.47.0-rc1/proto/cosmos/staking/v1beta1/tx.proto#L50-L73\n```\n\n----------------------------------------\n\nTITLE: Referencing Buf Workspace Configuration - Go Reference\nDESCRIPTION: This Go reference illustrates the location of the buf.work.yaml workspace configuration file, which aggregates multiple protobuf-containing directories for streamlined code generation. Dependencies include Buf CLI tools, and this configuration is paramount for multi-directory proto projects. It determines workspace scope and directory inclusion, influencing proto compilation and dependency resolution.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/tooling/00-protobuf.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/main/buf.work.yaml#L6-L9\n```\n\n----------------------------------------\n\nTITLE: Visualizing Transaction Execution Flow in Cosmos SDK\nDESCRIPTION: A text-based flowchart showing the sequence of operations performed during transaction execution, including FinalizeBlock, BeginBlock, ExecuteTx for multiple transactions, EndBlock, Consensus, and Commit stages.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/beginner/01-tx-lifecycle.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n        --------------------------\n        | Receive Block Proposal |\n        --------------------------\n                    |\n                    v\n        -------------------------\n        |     FinalizeBlock      |\n        -------------------------\n                    |\n                    v\n            -------------------\n            |   BeginBlock     | \n            -------------------\n                    |\n                    v\n            --------------------\n            | ExecuteTx(tx0)   |\n            | ExecuteTx(tx1)   |\n            | ExecuteTx(tx2)   |\n            | ExecuteTx(tx3)   |\n            |       .          |\n            |       .          |\n            |       .          |\n            -------------------\n                    |\n                    v\n            --------------------\n            |    EndBlock      |\n            --------------------\n                    |\n                    v\n        -------------------------\n        |       Consensus        |\n        -------------------------\n                    |\n                    v\n        -------------------------\n        |         Commit         |\n        -------------------------\n```\n\n----------------------------------------\n\nTITLE: Genesis Source and Target Interfaces in Go\nDESCRIPTION: The snippet defines `GenesisSource` and `GenesisTarget` interfaces for handling genesis data in JSON format. These are designed to abstract over collections of JSON objects that are efficiently processed, enabling modules to perform reads and writes through separate streams.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-063-core-module-api.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// GenesisSource is a source for genesis data in JSON format. It may abstract over a\n// single JSON object or separate files for each field in a JSON object that can\n// be streamed over. Modules should open a separate io.ReadCloser for each field that\n// is required. When fields represent arrays they can efficiently be streamed\n// over. If there is no data for a field, this function should return nil, nil. It is\n// important that the caller closes the reader when done with it.\ntype GenesisSource = func(field string) (io.ReadCloser, error)\n\n// GenesisTarget is a target for writing genesis data in JSON format. It may\n// abstract over a single JSON object or JSON in separate files that can be\n// streamed over. Modules should open a separate io.WriteCloser for each field\n// and should prefer writing fields as arrays when possible to support efficient\n// iteration. It is important the caller closers the writer AND checks the error\n// when done with it. It is expected that a stream of JSON data is written\n// to the writer.\ntype GenesisTarget = func(field string) (io.WriteCloser, error)\n\n```\n\n----------------------------------------\n\nTITLE: Querying Staking Delegations via gRPC using grpcurl (Bash)\nDESCRIPTION: This example shows how to query staking delegations using the `grpcurl` tool by sending a gRPC request to a Cosmos SDK application's gRPC server. It specifies the Protobuf file paths for definitions (`-import-path`, `-proto`), the query payload in JSON format (`-d`), the gRPC server endpoint, and the fully-qualified Protobuf service method to invoke.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/beginner/02-query-lifecycle.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngrpcurl \\\n    -plaintext                                           # We want results in plain test \\\n    -import-path ./proto \\                               # Import these .proto files \\\n    -proto ./proto/cosmos/staking/v1beta1/query.proto \\  # Look into this .proto file for the Query protobuf service \\\n    -d '{\"address\":\"$MY_DELEGATOR\"}' \\                   # Query arguments \\\n    localhost:9090 \\                                     # gRPC server endpoint \\\n    cosmos.staking.v1beta1.Query/Delegations             # Fully-qualified service method name\n```\n\n----------------------------------------\n\nTITLE: Defining Capability Struct in Go\nDESCRIPTION: Definition of the Capability struct which serves as an unforgeable reference with a globally unique index.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-003-dynamic-capability-store.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype Capability struct {\n  index uint64\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Evidence Interface in Go\nDESCRIPTION: Defines the Evidence interface type with methods for routing, validation, and accessing key information about the infraction.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-009-evidence-module.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype Evidence interface {\n  Route() string\n  Type() string\n  String() string\n  Hash() HexBytes\n  ValidateBasic() error\n\n  // The consensus address of the malicious validator at time of infraction\n  GetConsensusAddress() ConsAddress\n\n  // Height at which the infraction occurred\n  GetHeight() int64\n\n  // The total power of the malicious validator at time of infraction\n  GetValidatorPower() int64\n\n  // The total validator set power at time of infraction\n  GetTotalPower() int64\n}\n```\n\n----------------------------------------\n\nTITLE: ABCI Listener Protocol Definition in Protobuf\nDESCRIPTION: Protocol buffer definition for the ABCI listener service including message structures for block finalization and commit events.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-038-state-listening.md#2025-04-22_snippet_15\n\nLANGUAGE: protobuf\nCODE:\n```\nsyntax = \"proto3\";\n\n...\n\nmessage Empty {}\n\nmessage ListenFinalizeBlockRequest {\n  RequestFinalizeBlock  req = 1;\n  ResponseFinalizeBlock res = 2;\n}\nmessage ListenCommitRequest {\n  int64                block_height = 1;\n  ResponseCommit       res          = 2;\n  repeated StoreKVPair changeSet    = 3;\n}\n\n// plugin that listens to state changes\nservice ABCIListenerService {\n  rpc ListenFinalizeBlock(ListenFinalizeBlockRequest) returns (Empty);\n  rpc ListenCommit(ListenCommitRequest) returns (Empty);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Module Migration Function in Go\nDESCRIPTION: Example of a migration function implementation for a module, migrating from version 1 to 2. The function is typically placed in the module's migrations folder.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-041-in-place-store-migrations.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// Migrate1to2 migrates from version 1 to 2.\nfunc (m Migrator) Migrate1to2(ctx sdk.Context) error {\n\treturn v2bank.MigrateStore(ctx, m.keeper.storeKey) // v043bank is package `x/bank/migrations/v2`.\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Upgrade Handler Function in Go\nDESCRIPTION: This Go code snippet defines an `UpgradeHandler` function signature. Upgrade handlers utilize this function type to execute module migrations in Cosmos SDK during application upgrades. The handler accesses the `VersionMap` and returns a new version map post-upgrade.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/advanced/15-upgrade.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype UpgradeHandler func(ctx sdk.Context, plan Plan, fromVM VersionMap) (VersionMap, error)\n```\n\n----------------------------------------\n\nTITLE: Running Benchmark Load Test in Cosmos SDK\nDESCRIPTION: Command to execute a benchmark load test using simdv2. Parameters include the number of operations (--ops), pause duration between operations (--pause), and transaction sender (--from). The command generates and processes test transactions with configurable get, insert, update & delete operations.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/tools/benchmark/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsimdv2 tx benchmark load-test --from bob --yes --ops 1000 --pause 10 -v\n```\n\n----------------------------------------\n\nTITLE: StakeAuthorization Go Implementation for Staking Module Integration\nDESCRIPTION: The Go implementation of the different authorization types for the staking module. It defines constants for authorization types (delegate, undelegate, redelegate) used by the StakeAuthorization to grant specific staking permissions.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/authz/README.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// Authorization Types\nconst (\n\t// AuthorizationType_AUTHORIZATION_TYPE_UNSPECIFIED specifies an unknown authorization type\n\tAuthorizationType_AUTHORIZATION_TYPE_UNSPECIFIED AuthorizationType = 0\n\t// AuthorizationType_AUTHORIZATION_TYPE_DELEGATE defines an authorization type for Msg/Delegate\n\tAuthorizationType_AUTHORIZATION_TYPE_DELEGATE AuthorizationType = 1\n\t// AuthorizationType_AUTHORIZATION_TYPE_UNDELEGATE defines an authorization type for Msg/Undelegate\n\tAuthorizationType_AUTHORIZATION_TYPE_UNDELEGATE AuthorizationType = 2\n\t// AuthorizationType_AUTHORIZATION_TYPE_REDELEGATE defines an authorization type for Msg/BeginRedelegate\n\tAuthorizationType_AUTHORIZATION_TYPE_REDELEGATE AuthorizationType = 3\n)\n\n// Ensures that AuthorizationType implements the String interface\nvar _ fmt.Stringer = AuthorizationType(0)\n\n// String implements the String method.\nfunc (at AuthorizationType) String() string {\n\tswitch at {\n\tcase AuthorizationType_AUTHORIZATION_TYPE_UNSPECIFIED:\n\t\treturn \"AUTHORIZATION_TYPE_UNSPECIFIED\"\n\tcase AuthorizationType_AUTHORIZATION_TYPE_DELEGATE:\n\t\treturn \"AUTHORIZATION_TYPE_DELEGATE\"\n\tcase AuthorizationType_AUTHORIZATION_TYPE_UNDELEGATE:\n\t\treturn \"AUTHORIZATION_TYPE_UNDELEGATE\"\n\tcase AuthorizationType_AUTHORIZATION_TYPE_REDELEGATE:\n\t\treturn \"AUTHORIZATION_TYPE_REDELEGATE\"\n\tdefault:\n\t\treturn fmt.Sprintf(\"AUTHORIZATION_TYPE_UNKNOWN: %d\", at)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MsgSubmitEvidence Message in Protocol Buffers\nDESCRIPTION: This code snippet defines the MsgSubmitEvidence message in Protocol Buffers, which includes an Any field for the evidence interface.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-019-protobuf-state-encoding.md#2025-04-22_snippet_6\n\nLANGUAGE: protobuf\nCODE:\n```\n// x/evidence/types/types.proto\n\nmessage MsgSubmitEvidence {\n  bytes submitter = 1\n    [\n      (gogoproto.casttype) = \"github.com/cosmos/cosmos-sdk/types.AccAddress\"\n    ];\n  google.protobuf.Any evidence = 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Instantiating Composite Key Collection in Cosmos SDK\nDESCRIPTION: This snippet demonstrates how to instantiate a composite key collection for managing balances in Cosmos SDK. It illustrates defining a composite key using `collections.Pair` and configuring the `KeyCodec` with `collections.PairKeyCodec`. The example shows using `collections.NewMap` for mapping composite keys to `math.Int` values.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/collections/README.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\npackage collections\n\nimport (\n\t\"cosmossdk.io/collections\"\n\t\"cosmossdk.io/math\"\n\tstoretypes \"cosmossdk.io/store/types\"\n\tsdk \"github.com/cosmos/cosmos-sdk/types\"\n)\n\nvar BalancesPrefix = collections.NewPrefix(1)\n\ntype Keeper struct {\n\tSchema   collections.Schema\n\tBalances collections.Map[collections.Pair[sdk.AccAddress, string], math.Int]\n}\n\nfunc NewKeeper(storeKey *storetypes.KVStoreKey) Keeper {\n\tsb := collections.NewSchemaBuilder(sdk.OpenKVStore(storeKey))\n\treturn Keeper{\n\t\tBalances: collections.NewMap(\n\t\t\tsb, BalancesPrefix, \"balances\",\n\t\t\tcollections.PairKeyCodec(sdk.AccAddressKey, collections.StringKey),\n\t\t\tsdk.IntValue,\n\t\t),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Plan Message with UpgradeInstructions - Protobuf\nDESCRIPTION: Updates the x/upgrade Plan message to include a new field for upgrade instructions that contains artifact details and pre/post run commands.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-047-extend-upgrade-plan.md#2025-04-22_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage Plan {\n  // ... (existing fields)\n\n  UpgradeInstructions instructions = 6;\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Providers in Module init() (Cosmos SDK, Go)\nDESCRIPTION: This snippet shows the use of an init() function to register providers for module configuration and wiring with depinject. It ensures that the configuration message and module logic are correctly exposed and discoverable at runtime. Dependencies include the config types and wiring logic, and methods registered here should be public for depinject compatibility.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-modules/15-depinject.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nreference\\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/x/group/module/module.go#L194-L199\n```\n\n----------------------------------------\n\nTITLE: Implementing Tally Function for Weighted Votes in Go\nDESCRIPTION: Implements the tally function for counting weighted votes. It iterates through all votes and their options, calculating the contribution to each option by multiplying the voter's voting power by the weight assigned to that option.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-037-gov-split-vote.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntally() {\n    results := map[types.VoteOption]sdk.Dec\n\n    for _, vote := range votes {\n        for i, weightedOption := range vote.Options {\n            results[weightedOption.Option] += getVotingPower(vote.voter) * weightedOption.Weight\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Auth Parameters via gRPC in Cosmos SDK\nDESCRIPTION: gRPC endpoint for querying current authentication parameters including memo character limits, transaction signature limits, and verification costs.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/auth/README.md#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ncosmos.auth.v1beta1.Query/Params\n```\n\nLANGUAGE: bash\nCODE:\n```\ngrpcurl -plaintext \\\n    localhost:9090 \\\n    cosmos.auth.v1beta1.Query/Params\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"params\": {\n    \"maxMemoCharacters\": \"256\",\n    \"txSigLimit\": \"7\",\n    \"txSizeCostPerByte\": \"10\",\n    \"sigVerifyCostEd25519\": \"590\",\n    \"sigVerifyCostSecp256k1\": \"1000\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Module with Appconfig in Cosmos SDK\nDESCRIPTION: Example of registering a module with appconfig in the init function. It demonstrates how to use RegisterModule with an empty config object and options for initializing the module.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/depinject/appconfig/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc init() {\n appconfig.RegisterModule(&modulev1.Module{},\n    // options\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Querying GroupPoliciesByAdmin Endpoint\nDESCRIPTION: REST endpoint for querying group policies by admin account address with pagination support. Returns similar group policy details as GroupPoliciesByGroup.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/group/README.md#2025-04-22_snippet_34\n\nLANGUAGE: bash\nCODE:\n```\n/cosmos/group/v1/group_policies_by_admin/{admin}\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl localhost:1317/cosmos/group/v1/group_policies_by_admin/cosmos1..\n```\n\n----------------------------------------\n\nTITLE: Defining VestingAccount Interface in Go\nDESCRIPTION: Defines the VestingAccount interface that all vesting account types must implement, including methods for tracking vesting, delegation, and undelegation.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/auth/vesting/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// VestingAccount defines an interface that any vesting account type must\n// implement.\ntype VestingAccount interface {\n  Account\n\n  GetVestedCoins(Time)  Coins\n  GetVestingCoins(Time) Coins\n\n  // TrackDelegation performs internal vesting accounting necessary when\n  // delegating from a vesting account. It accepts the current block time, the\n  // delegation amount and balance of all coins whose denomination exists in\n  // the account's original vesting balance.\n  TrackDelegation(Time, Coins, Coins)\n\n  // TrackUndelegation performs internal vesting accounting necessary when a\n  // vesting account performs an undelegation.\n  TrackUndelegation(Coins)\n\n  GetStartTime() int64\n  GetEndTime()   int64\n}\n```\n\n----------------------------------------\n\nTITLE: Defining HasEndBlocker Interface in Go\nDESCRIPTION: This Go interface, `HasEndBlocker`, extends `appmodule.AppModule`. Modules implementing it provide an `EndBlock` method for logic executed at the end of each block. It takes a `context.Context` and returns an error. For modules needing to return validator updates, `HasABCIEndBlock` should be used instead.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-modules/01-module-manager.md#2025-04-22_snippet_13\n\nLANGUAGE: go\nCODE:\n```\n```go reference\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/core/appmodule/module.go#L66-L72\n```\n```\n\n----------------------------------------\n\nTITLE: Adding Genesis State Handling in Go\nDESCRIPTION: This Go code snippet illustrates adding the consensus version saving line in the `InitChainer` method. It ensures module versions are stored at genesis for tracking updates in subsequent upgrades.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/advanced/15-upgrade.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc (app *MyApp) InitChainer(ctx sdk.Context, req abci.RequestInitChain) abci.ResponseInitChain {\n  ...\n+ app.UpgradeKeeper.SetModuleVersionMap(ctx, app.mm.GetVersionMap())\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Transaction Interface in Go\nDESCRIPTION: This Go snippet defines the `Tx` interface that transactions must implement within the Cosmos SDK. This interface likely specifies methods required for processing transactions, such as accessing the messages contained within (`GetMsgs`). Adherence to this interface allows the `AnteHandler` and other parts of the SDK to handle various transaction types consistently.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/beginner/04-gas-fees.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// Tx defines the interface a transaction must fulfill.\n// Tx must be postale to its native module for processing.\n// Tx must contain GetMsgs method to faciliate users inspecting transaction's content.\ntype Tx interface {\n\tproto.Message\n\n\t// GetMsgs returns the list of messages.\n\tGetMsgs() []Msg\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Query Client for Testing in Go\nDESCRIPTION: This code snippet shows how to set up a query client for testing purposes in Go. It demonstrates the creation of a QueryServerTestHelper and registration of the query server for testing.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-021-protobuf-query-encoding.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nqueryHelper := baseapp.NewQueryServerTestHelper(ctx)\ntypes.RegisterQueryServer(queryHelper, keeper.Querier{app.BankKeeper})\nqueryClient := types.NewQueryClient(queryHelper)\n```\n\n----------------------------------------\n\nTITLE: Block Transaction Processing Diagram\nDESCRIPTION: ASCII diagram illustrating how a block of transactions B transforms state S to S' by applying each transaction T in the block.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/intro/02-sdk-app-architecture.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n+--------+                              +--------+\n|        |                              |        |\n|   S    +----------------------------> |   S'   |\n|        |   For each T in B: apply(T)  |        |\n+--------+                              +--------+\n```\n\n----------------------------------------\n\nTITLE: Implementing NFT Send Method in Go\nDESCRIPTION: Go implementation of the Send method for the NFT Msg service. It checks ownership and transfers the NFT to a new owner using the Keeper.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-043-nft-module.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ntype msgServer struct{\n  k Keeper\n}\n\nfunc (m msgServer) Send(ctx context.Context, msg *types.MsgSend) (*types.MsgSendResponse, error) {\n  // check current ownership\n  assertEqual(msg.Sender, m.k.GetOwner(msg.ClassId, msg.Id))\n\n  // transfer ownership\n  m.k.Transfer(msg.ClassId, msg.Id, msg.Receiver)\n\n  return &types.MsgSendResponse{}, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Fee Allowance Types with Protocol Buffers\nDESCRIPTION: These Protocol Buffer message definitions specify two types of fee allowances: BasicAllowance for one-time grants with optional expiration, and PeriodicAllowance for recurring allowances with time period restrictions.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-029-fee-grant-module.md#2025-04-22_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\n// BasicAllowance implements FeeAllowanceI with a one-time grant of tokens\n// that optionally expires. The delegatee can use up to SpendLimit to cover fees.\nmessage BasicAllowance {\n  // spend_limit specifies the maximum amount of tokens that can be spent\n  // by this allowance and will be updated as tokens are spent. If it is\n  // empty, there is no spend limit and any amount of coins can be spent.\n  repeated cosmos_sdk.v1.Coin spend_limit = 1;\n\n  // expiration specifies an optional time when this allowance expires\n  google.protobuf.Timestamp expiration = 2;\n}\n\n// PeriodicAllowance extends FeeAllowanceI to allow for both a maximum cap,\n// as well as a limit per time period.\nmessage PeriodicAllowance {\n  BasicAllowance basic = 1;\n\n  // period specifies the time duration in which period_spend_limit coins can\n  // be spent before that allowance is reset\n  google.protobuf.Duration period = 2;\n\n  // period_spend_limit specifies the maximum number of coins that can be spent\n  // in the period\n  repeated cosmos_sdk.v1.Coin period_spend_limit = 3;\n\n  // period_can_spend is the number of coins left to be spent before the period_reset time\n  repeated cosmos_sdk.v1.Coin period_can_spend = 4;\n\n  // period_reset is the time at which this period resets and a new one begins,\n  // it is calculated from the start time of the first transaction after the\n  // last period ended\n  google.protobuf.Timestamp period_reset = 5;\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Event Streams Using JSON-RPC - CometBFT - JSON\nDESCRIPTION: This JSON snippet shows a request payload to CometBFT's JSON-RPC interface to subscribe to blockchain events. The 'subscribe' method is called with parameters that filter events using a query string specifying event categories and attributes. Dependencies include access to a CometBFT node with WebSocket or JSON-RPC enabled. The fields 'method', 'id', and 'params.query' are required; 'params.query' uses a domain-specific query format. The output is a subscription to real-time events matching the specified filter.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/advanced/08-events.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"subscribe\",\n  \"id\": \"0\",\n  \"params\": {\n    \"query\": \"tm.event='eventCategory' AND eventType.eventAttribute='attributeValue'\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DepositParams Structure in Protobuf for Cosmos SDK Governance\nDESCRIPTION: This snippet defines the DepositParams message structure in Protobuf, which specifies the parameters related to the deposit phase of a proposal in the governance module.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/README.md#2025-04-22_snippet_3\n\nLANGUAGE: protobuf\nCODE:\n```\n```protobuf reference\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.47.0-rc1/proto/cosmos/gov/v1/gov.proto#L152-L162\n```\n```\n\n----------------------------------------\n\nTITLE: Querying Upgrade Plan via CLI\nDESCRIPTION: Command to get the currently scheduled upgrade plan using the Cosmos SDK CLI.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/upgrade/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nregen query upgrade plan [flags]\n```\n\n----------------------------------------\n\nTITLE: Implementing ModuleKey Types in Go\nDESCRIPTION: Defines the Invoker function type, CallInfo struct, and RootModuleKey and DerivedModuleKey structs for module authentication.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-033-protobuf-inter-module-comm.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype Invoker func(callInfo CallInfo) func(ctx context.Context, request, response interface{}, opts ...interface{}) error\n\ntype CallInfo {\n  Method string\n  Caller ModuleID\n}\n\ntype RootModuleKey struct {\n  moduleName string\n  invoker Invoker\n}\n\nfunc (rm RootModuleKey) Derive(path []byte) DerivedModuleKey { /* ... */}\n\ntype DerivedModuleKey struct {\n  moduleName string\n  path []byte\n  invoker Invoker\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Multisig Public Key Structure in Protobuf\nDESCRIPTION: Defines the protobuf message structure for a new multisig public key, including a threshold field and a repeated field for component public keys stored as Any protos.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-028-public-key-addresses.md#2025-04-22_snippet_3\n\nLANGUAGE: protobuf\nCODE:\n```\npackage cosmos.crypto.multisig;\n\nmessage PubKey {\n  uint32 threshold = 1;\n  repeated google.protobuf.Any pubkeys = 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Redelegation Protocol Buffer Definition\nDESCRIPTION: Protocol buffer definition for tracking token redelegations between validators, including delegation entries and validator addresses.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/staking/README.md#2025-04-22_snippet_7\n\nLANGUAGE: protobuf\nCODE:\n```\n// reference: https://github.com/cosmos/cosmos-sdk/blob/v0.47.0-rc1/proto/cosmos/staking/v1beta1/staking.proto#L263-L308\n```\n\n----------------------------------------\n\nTITLE: Defining TallyParams Structure in Protobuf for Cosmos SDK Governance\nDESCRIPTION: This snippet defines the TallyParams message structure in Protobuf, which specifies the parameters related to the tallying of votes for a proposal in the governance module.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/README.md#2025-04-22_snippet_5\n\nLANGUAGE: protobuf\nCODE:\n```\n```protobuf reference\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.47.0-rc1/proto/cosmos/gov/v1/gov.proto#L170-L182\n```\n```\n\n----------------------------------------\n\nTITLE: gRPC-gateway REST Route Definition in Protobuf\nDESCRIPTION: The snippet defines how gRPC endpoints correspond to REST endpoints in the Cosmos SDK using a Protobuf `Query` service. These REST routes are crucial for client applications unable to support gRPC. This setup provides flexibility in accessing blockchain data by offering REST endpoints for each gRPC method defined in the Protobuf file.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/advanced/06-grpc_rest.md#2025-04-22_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/proto/cosmos/bank/v1beta1/query.proto#L23-L30\n```\n\n----------------------------------------\n\nTITLE: Modifying BaseApp Structure for Custom Recovery in Go\nDESCRIPTION: Shows the necessary changes to the BaseApp structure and methods to incorporate the new recovery middleware system. This includes adding a new field for the middleware chain and modifying the runTx method.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-022-custom-panic-handling.md#2025-04-22_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\ntype BaseApp struct {\n    // ...\n    runTxRecoveryMiddleware recoveryMiddleware\n}\n\nfunc NewBaseApp(...) {\n    // ...\n    app.runTxRecoveryMiddleware = newDefaultRecoveryMiddleware()\n}\n\nfunc (app *BaseApp) runTx(...) {\n    // ...\n    defer func() {\n        if r := recover(); r != nil {\n            recoveryMW := newOutOfGasRecoveryMiddleware(gasWanted, ctx, app.runTxRecoveryMiddleware)\n            err, result = processRecovery(r, recoveryMW), nil\n        }\n\n        gInfo = sdk.GasInfo{GasWanted: gasWanted, GasUsed: ctx.GasMeter().GasConsumed()}\n    }()\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Marshaling and Unmarshaling Evidence in Go\nDESCRIPTION: This code snippet demonstrates how to use MarshalInterface and UnmarshalInterface methods to serialize and deserialize interface types wrapped in Any.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-019-protobuf-state-encoding.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/cosmos/cosmos-sdk/codec\"\n\n// note: eviexported.Evidence is an interface type\nfunc MarshalEvidence(cdc codec.BinaryCodec, e eviexported.Evidence) ([]byte, error) {\n\treturn cdc.MarshalInterface(e)\n}\n\nfunc UnmarshalEvidence(cdc codec.BinaryCodec, bz []byte) (eviexported.Evidence, error) {\n\tvar evi eviexported.Evidence\n\terr := cdc.UnmarshalInterface(&evi, bz)\n    return err, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Mapping Type in Go for State Space\nDESCRIPTION: Mapping struct definition that represents a key-value space in the state, containing store key, codec, and optional prefix information.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-012-state-accessors.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype Mapping struct {\n  storeKey sdk.StoreKey\n  cdc      *codec.LegacyAmino\n  prefix   []byte\n}\n```\n\n----------------------------------------\n\nTITLE: GasKVStore Implementation in Cosmos SDK\nDESCRIPTION: Definition of a GasKVStore that automatically tracks gas consumption for storage operations. It wraps a KVStore and charges gas for reads and writes according to a gas configuration.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/advanced/04-store.md#2025-04-22_snippet_17\n\nLANGUAGE: go\nCODE:\n```\n// Store applies gas tracking to an underlying KVStore. It implements the\n// KVStore interface.\ntype Store struct {\n\tparent    types.KVStore\n\tgasMeter  types.GasMeter\n\tgasConfig types.GasConfig\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ValidatorGovInfo Structure in Go for Cosmos SDK Governance\nDESCRIPTION: This snippet defines the ValidatorGovInfo struct in Go, which is used temporarily when tallying votes in the governance module.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/README.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\n  type ValidatorGovInfo struct {\n    Minus     sdk.Dec\n    Vote      Vote\n  }\n```\n\n----------------------------------------\n\nTITLE: Editing Validator Information in Cosmos SDK\nDESCRIPTION: This command allows users to edit an existing validator account. It can be used to update various validator details such as moniker and website.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/staking/README.md#2025-04-22_snippet_37\n\nLANGUAGE: bash\nCODE:\n```\nsimd tx staking edit-validator [flags]\n```\n\nLANGUAGE: bash\nCODE:\n```\nsimd tx staking edit-validator --moniker \"new_moniker_name\" --website \"new_webiste_url\" --from mykey\n```\n\n----------------------------------------\n\nTITLE: Defining Table Interface in Go\nDESCRIPTION: Interface definition for a basic table structure in the ORM package, specifying methods for primary key access and codec operations.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/group/internal/orm/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nreference\nhttps://github.com/cosmos/cosmos-sdk/tree/release/v0.50.x/x/group/internal/orm/table.go#L30-L36\n```\n\n----------------------------------------\n\nTITLE: Defining Deposit Structure in Protobuf for Cosmos SDK Governance\nDESCRIPTION: This snippet defines the Deposit message structure in Protobuf, which represents a deposit made for a proposal in the governance module.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/README.md#2025-04-22_snippet_7\n\nLANGUAGE: protobuf\nCODE:\n```\n```protobuf reference\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.47.0-rc1/proto/cosmos/gov/v1/gov.proto#L38-L49\n```\n```\n\n----------------------------------------\n\nTITLE: Modifying IncrementSequenceDecorator for Unordered Transactions in Go\nDESCRIPTION: Updates the IncrementSequenceDecorator to skip nonce verification for unordered transactions.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-070-unordered-account.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc (isd IncrementSequenceDecorator) AnteHandle(ctx sdk.Context, tx sdk.Tx, simulate bool, next sdk.AnteHandler) (sdk.Context, error) {\n  if tx.UnOrdered() {\n    return next(ctx, tx, simulate)\n  }\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Starting an In-Process Testnet with simd\nDESCRIPTION: Command to initialize and start a local in-process test network for testing purposes. This is the fastest way to spin up a local test network that runs until terminated.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/user/run-node/05-run-testnet.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsimd testnet start\n```\n\n----------------------------------------\n\nTITLE: Executing Hard-Fork Migration Command in Cosmos SDK (Bash)\nDESCRIPTION: This command initiates a hard-fork migration for a Cosmos SDK-based application. Replace `<appd>` with the actual application daemon name (e.g., `gaiad`, `simd`). It's part of the SDK's tooling to facilitate updates between major releases by modifying the genesis state. Requires the application binary to be installed.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/migrations/01-intro.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n<appd> genesis migrate\n```\n\n----------------------------------------\n\nTITLE: Parameter Subspace Implementation in Cosmos SDK\nDESCRIPTION: Definition of a Subspace for parameters in Cosmos SDK, which includes keys for different parameter types, a key table for type validation, and a store key to access the appropriate KVStore.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/advanced/04-store.md#2025-04-22_snippet_14\n\nLANGUAGE: go\nCODE:\n```\n// Subspace defines a parameter subspace which handles parameter access and validation\n// through an internal KVStore.The Subspace exposes get and set methods for the\n// respective types.\ntype Subspace struct {\n\tkey          sdk.StoreKey\n\ttkey         sdk.StoreKey // transient key\n\tname         string\n\tcdc          *codec.Codec\n\tlegacyAmino  *codec.LegacyAmino\n\ttable        KeyTable\n\tBehavior     types.ParamSetBehavior\n}\n```\n\n----------------------------------------\n\nTITLE: Query Validator Distribution Info\nDESCRIPTION: gRPC endpoint to query validator commission and self-delegation rewards\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/distribution/README.md#2025-04-22_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\ngrpcurl -plaintext \\\n    -d '{\"validator_address\":\"cosmosvalop1...\"}' \\\n    localhost:9090 \\\n    cosmos.distribution.v1beta1.Query/ValidatorDistributionInfo\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"commission\": {\n    \"commission\": [\n      {\n        \"denom\": \"stake\",\n        \"amount\": \"1000000000000000\"\n      }\n    ]\n  },\n  \"self_bond_rewards\": [\n    {\n      \"denom\": \"stake\",\n      \"amount\": \"1000000000000000\"\n    }\n  ],\n  \"validator_address\": \"cosmosvalop1...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Refactoring Event Emission in Go for Gov Module\nDESCRIPTION: Example of refactoring event emission in the gov module to use the newly created typed event and EmitTypedEvent function.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-032-typed-events.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// x/gov/handler.go\nfunc handleMsgSubmitProposal(ctx sdk.Context, keeper keeper.Keeper, msg types.MsgSubmitProposalI) (*sdk.Result, error) {\n    ...\n    types.Context.EventManager().EmitTypedEvent(\n        &EventSubmitProposal{\n            FromAddress: fromAddress,\n            ProposalId: id,\n            Proposal: proposal,\n        },\n    )\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Send Restriction Implementation Example - Go\nDESCRIPTION: Example implementation of a send restriction function with bypass functionality.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/bank/README.md#2025-04-22_snippet_6\n\nLANGUAGE: golang\nCODE:\n```\nvar _ banktypes.SendRestrictionFn = Keeper{}.SendRestrictionFn\n\nfunc (k Keeper) SendRestrictionFn(ctx context.Context, fromAddr, toAddr sdk.AccAddress, amt sdk.Coins) (sdk.AccAddress, error) {\n\t// Bypass if the context says to.\n\tif mymodule.HasBypass(ctx) {\n\t\treturn toAddr, nil\n\t}\n\n\t// Your custom send restriction logic goes here.\n\treturn nil, errors.New(\"not implemented\")\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Message Factories with Default Weights in Go for Cosmos SDK\nDESCRIPTION: An implementation of the WeightedOperationsX method for an AppModule that registers message factories with a registry using default weight values. These weights can be overridden by parameters.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/testutil/simsx/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc (am AppModule) WeightedOperationsX(weights simsx.WeightSource, reg simsx.Registry) {\n    reg.Add(weights.Get(\"msg_send\", 100), simulation.MsgSendFactory())\n    reg.Add(weights.Get(\"msg_multisend\", 10), simulation.MsgMultiSendFactory())\n}\n```\n\n----------------------------------------\n\nTITLE: Delegating Tokens to a Validator in Cosmos SDK\nDESCRIPTION: This command allows users to delegate liquid tokens to a validator. It requires the validator's address and the amount of tokens to delegate.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/staking/README.md#2025-04-22_snippet_36\n\nLANGUAGE: bash\nCODE:\n```\nsimd tx staking delegate [validator-addr] [amount] [flags]\n```\n\nLANGUAGE: bash\nCODE:\n```\nsimd tx staking delegate cosmosvaloper1l2rsakp388kuv9k8qzq6lrm9taddae7fpx59wm 1000stake --from mykey\n```\n\n----------------------------------------\n\nTITLE: Implementing Recovery Processing Function in Go\nDESCRIPTION: Defines a function to process the chain of recovery middlewares. It recursively calls middlewares until an error is returned or the chain is exhausted.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-022-custom-panic-handling.md#2025-04-22_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\nfunc processRecovery(recoveryObj interface{}, middleware recoveryMiddleware) error {\n\tif middleware == nil { return nil }\n\n\tnext, err := middleware(recoveryObj)\n\tif err != nil { return err }\n\tif next == nil { return nil }\n\n\treturn processRecovery(recoveryObj, next)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging Levels in config.toml\nDESCRIPTION: Example of setting selective logging levels for different modules in the config.toml file, allowing for better filtering of log output.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/user/run-node/01-run-node.md#2025-04-22_snippet_7\n\nLANGUAGE: toml\nCODE:\n```\nlog_level: \"state:info,p2p:info,consensus:info,x/staking:info,x/ibc:info,*error\"\n```\n\n----------------------------------------\n\nTITLE: Initializing and Sealing Capability System in Go\nDESCRIPTION: InitialiseAndSeal function that populates memory store with capability keys and prevents further modifications to the system.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-003-dynamic-capability-store.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc (ck CapabilityKeeper) InitialiseAndSeal(ctx Context) {\n  if ck.sealed {\n    panic(\"capability keeper is sealed\")\n  }\n\n  persistentStore := ctx.KVStore(ck.persistentKey)\n  map := ctx.KVStore(ck.memKey)\n  \n  // initialise memory store for all names in persistent store\n  for index, value := range persistentStore.Iter() {\n    capability = &CapabilityKey{index: index}\n\n    for moduleAndCapability := range value {\n      moduleName, capabilityName := moduleAndCapability.Split(\"/\")\n      memStore.Set(moduleName + \"/fwd/\" + capability, capabilityName)\n      memStore.Set(moduleName + \"/rev/\" + capabilityName, index)\n\n      ck.capMap[index] = capability\n    }\n  }\n\n  ck.sealed = true\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Message Service in Protobuf for Authorization Module\nDESCRIPTION: Protobuf definition of the authorization module's message service. It includes Grant, Exec, and Revoke operations that allow creating, executing, and revoking authorizations respectively.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-030-authz-module.md#2025-04-22_snippet_2\n\nLANGUAGE: protobuf\nCODE:\n```\nservice Msg {\n  // Grant grants the provided authorization to the grantee on the granter's\n  // account with the provided expiration time.\n  rpc Grant(MsgGrant) returns (MsgGrantResponse);\n\n  // Exec attempts to execute the provided messages using\n  // authorizations granted to the grantee. Each message should have only\n  // one signer corresponding to the granter of the authorization.\n  rpc Exec(MsgExec) returns (MsgExecResponse);\n\n  // Revoke revokes any authorization corresponding to the provided method name on the\n  // granter's account that has been granted to the grantee.\n  rpc Revoke(MsgRevoke) returns (MsgRevokeResponse);\n}\n\n// Grant gives permissions to execute\n// the provided method with expiration time.\nmessage Grant {\n  google.protobuf.Any       authorization = 1 [(cosmos_proto.accepts_interface) = \"cosmos.authz.v1beta1.Authorization\"];\n  google.protobuf.Timestamp expiration    = 2 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];\n}\n\nmessage MsgGrant {\n  string granter = 1;\n  string grantee = 2;\n\n  Grant grant = 3 [(gogoproto.nullable) = false];\n}\n\nmessage MsgExecResponse {\n  cosmos.base.abci.v1beta1.Result result = 1;\n}\n\nmessage MsgExec {\n  string   grantee                  = 1;\n  // Authorization Msg requests to execute. Each msg must implement Authorization interface\n  repeated google.protobuf.Any msgs = 2 [(cosmos_proto.accepts_interface) = \"cosmos.base.v1beta1.Msg\"];;\n}\n```\n\n----------------------------------------\n\nTITLE: ListenKVStore Implementation in Cosmos SDK\nDESCRIPTION: Definition of a ListenKVStore that provides state listening capabilities over an underlying KVStore. It automatically writes operations to a set of listeners.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/advanced/04-store.md#2025-04-22_snippet_23\n\nLANGUAGE: go\nCODE:\n```\n// Store implements the KVStore interface with listening enabled.\n// Operations are traced on each core KVStore function call.\ntype Store struct {\n\tparent types.KVStore\n\n\tlisteners []storetypes.WriteListener\n}\n```\n\n----------------------------------------\n\nTITLE: Encoding Transactions with gRPC\nDESCRIPTION: The TxEncode gRPC endpoint allows encoding a transaction. It takes the transaction object as input and returns the base64-encoded transaction bytes.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/auth/tx/README.md#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ngrpcurl -plaintext \\\n    -d '{\"tx\": {\n    \"body\": {\n      \"messages\": [\n        {\"@type\":\"/cosmos.bank.v1beta1.MsgSend\",\"amount\":[{\"denom\":\"stake\",\"amount\":\"100\"}],\"fromAddress\":\"cosmos1l6vsqhh7rnwsyr2kyz3jjg3qduaz8gwgyl8275\",\"toAddress\":\"cosmos158saldyg8pmxu7fwvt0d6x7jeswp4gwyklk6y3\"}\n      ]\n    },\n    \"authInfo\": {\n      \"fee\": {\n        \"gasLimit\": \"200000\"\n      }\n    }\n  }}' \\\n    localhost:9090 \\\n    cosmos.tx.v1beta1.Service/TxEncode\n```\n\n----------------------------------------\n\nTITLE: Referencing cachemulti.Store for Store Branching (Go Reference)\nDESCRIPTION: This code reference specifies the cachemulti.Store, which provides construction and management of branched multi-stores (recursively wrapping underlying substores for transaction simulation and cache). The link is essential for developers working with ephemeral or simulated state updates in Cosmos SDK.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/advanced/04-store.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/store/cachemulti/store.go#L19-L33\n```\n\n----------------------------------------\n\nTITLE: Declaring Module Dependencies in Go\nDESCRIPTION: Shows how a module can declare its dependencies on other modules using the RequireServer method in the RegisterServices function.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-033-protobuf-inter-module-comm.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\npackage foo\n\nfunc (am AppModule) RegisterServices(cfg Configurator) {\n  cfg.RequireServer((*bank.QueryServer)(nil))\n  cfg.RequireServer((*bank.MsgServer)(nil))\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ThresholdDecisionPolicy Structure in Protobuf\nDESCRIPTION: Defines the ThresholdDecisionPolicy message which implements a decision policy based on a minimum threshold of support votes. It specifies both the threshold value and the voting period duration.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-042-group-module.md#2025-04-22_snippet_4\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage ThresholdDecisionPolicy {\n\n    // threshold is the minimum weighted sum of support votes for a proposal to succeed.\n    string threshold = 1;\n\n    // voting_period is the duration from submission of a proposal to the end of voting period\n    // Within this period, votes and exec messages can be submitted.\n    google.protobuf.Duration voting_period = 2 [(gogoproto.nullable) = false];\n}\n```\n\n----------------------------------------\n\nTITLE: Creating IndexedMap for BaseAccount in Cosmos SDK\nDESCRIPTION: This snippet defines an `IndexedMap` for `BaseAccount` in Cosmos SDK. It illustrates creating a unique index mapping a `BaseAccount` using `AccountNumber` and explains the type parameters for uniqueness constraints. The `NewAccountIndexes` function demonstrates index instantiation using `indexes.NewUnique`.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/collections/README.md#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nvar AccountsNumberIndexPrefix = collections.NewPrefix(1)\n\ntype AccountsIndexes struct {\n\tNumber *indexes.Unique[uint64, sdk.AccAddress, authtypes.BaseAccount]\n}\n\nfunc NewAccountIndexes(sb *collections.SchemaBuilder) AccountsIndexes {\n\treturn AccountsIndexes{\n\t\tNumber: indexes.NewUnique(\n\t\t\tsb, AccountsNumberIndexPrefix, \"accounts_by_number\",\n\t\t\tcollections.Uint64Key, sdk.AccAddressKey,\n\t\t\tfunc(_ sdk.AccAddress, v authtypes.BaseAccount) (uint64, error) {\n\t\t\t\treturn v.AccountNumber, nil\n\t\t\t},\n\t\t),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Protobuf SignDoc and TxRaw for Signing (Protobuf)\nDESCRIPTION: This reference points to the Protobuf definitions for SignDoc and TxRaw, which are used to enable deterministic, multi-party signing in the Cosmos SDK. These structures are essential in ensuring that signers operate on the exact byte representation of transaction components, mitigating serialization differences. The dependencies are the Cosmos tx.proto definitions, and the expected workflow involves collecting signatures over SignDoc and assembling them into TxRaw for network broadcast.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/advanced/01-transactions.md#2025-04-22_snippet_2\n\nLANGUAGE: protobuf\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.53.0-rc.2/proto/cosmos/tx/v1beta1/tx.proto#L50-L67\n```\n\n----------------------------------------\n\nTITLE: Implementing the Query Function in client.Context (Go)\nDESCRIPTION: This code reference points to the implementation of the `Query()` or a similar query-handling method within the `client.Context`. This core function orchestrates sending the query to the node: it retrieves the RPC client from the context, formats the query path (typically a Protobuf service method name) and parameters into an ABCI request (`ABCIQueryOptions`), and uses the RPC client to make the `ABCIQueryWithOptions` call to the connected full-node.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/beginner/02-query-lifecycle.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n// Reference: https://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/client/query.go#L79-L113\n// This function encapsulates the logic for making an ABCI query.\n// It retrieves the RPC client, prepares query options (path, data, height),\n// and executes the ABCIQueryWithOptions method.\n```\n\n----------------------------------------\n\nTITLE: Initializing Root Command with Client Context in Go\nDESCRIPTION: Example of setting up a root command for a Cosmos SDK application with persistent pre-run handlers for client context and config initialization.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/server/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nvar (\n\tinitClientCtx  = client.Context{...}\n\n\trootCmd = &cobra.Command{\n\t\tUse:   \"simd\",\n\t\tShort: \"simulation app\",\n\t\tPersistentPreRunE: func(cmd *cobra.Command, _ []string) error {\n\t\t\tif err := client.SetCmdClientContextHandler(initClientCtx, cmd); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\n\t\t\treturn server.InterceptConfigsPreRunHandler(cmd)\n\t\t},\n\t}\n    // add root sub-commands ...\n)\n```\n\n----------------------------------------\n\nTITLE: Message Router Check Integration with Circuit Breaker in Go\nDESCRIPTION: The message router check ensures that even inner messages (not checked at the ante handler level) are verified against the circuit breaker disable list. This provides comprehensive protection for all message types.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/circuit/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc (msr *MsgServiceRouter) RegisterService(sd *grpc.ServiceDesc, msg ServiceMsgHandler) {\n\tmsr.handlers[sd.ServiceName] = msg\n\tmsr.routes = make(map[string]*handler, 0)\n\tmsr.serviceNames = make(map[string]string, 0)\n\tfor _, method := range sd.Methods {\n\t\tfqName := fmt.Sprintf(\"/%s/%s\", sd.ServiceName, method.MethodName)\n\t\tmethName := fmt.Sprintf(\"%s.%s\", sd.ServiceName, method.MethodName)\n\t\tmsr.routes[fqName] = &handler{svName: sd.ServiceName, methName: methName}\n\t\tmsr.serviceNames[fqName] = sd.ServiceName\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing CommitKVStore and KVStore Interface (Go Reference)\nDESCRIPTION: This reference points to Go interface definitions for CommitKVStore and KVStore, detailing how key-value stores can be made persistent and which functions (like iterator access) must be implemented by modules or their keepers. Review for required method signatures and restrictions governing state access.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/advanced/04-store.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/store/types/store.go#L229-L266\n```\n\n----------------------------------------\n\nTITLE: Creating Unordered Transactions in Go\nDESCRIPTION: Demonstrates how to create unordered transactions by setting the unordered flag and timeout timestamp.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-070-unordered-account.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfor _, tx := range txs {\n\ttx.SetUnordered(true)\n\ttx.SetTimeoutTimestamp(time.Now() + 1 * time.Nanosecond)\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing rootMulti.Store Concrete Implementation (Go Reference)\nDESCRIPTION: This snippet links to the rootMulti.Store implementation, a concrete Go type realizing the CommitMultiStore interface atop a physical database. It reveals the default mounting point for module KVStores within a Cosmos SDK app. Developers needing to customize Core State or track underlying substore implementations should study the linked lines.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/advanced/04-store.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/store/rootmulti/store.go#L53-L77\n```\n\n----------------------------------------\n\nTITLE: Claiming a Received Capability in Cosmos SDK (Go)\nDESCRIPTION: Module 2's `SomeFunction` receives a capability object from Module 1. It then claims this capability using `k.sck.ClaimCapability`, associating it with the specific resource name (\"resourceABC\"). This allows Module 2 to hold and later retrieve this capability.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-003-dynamic-capability-store.md#2025-04-22_snippet_12\n\nLANGUAGE: go\nCODE:\n```\n```go\nfunc (k Mod2Keeper) SomeFunction(ctx Context, capability Capability) {\n  k.sck.ClaimCapability(ctx, capability, \"resourceABC\")\n  // other logic...\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Equivocation Evidence in Protobuf\nDESCRIPTION: Protobuf definition for Equivocation evidence which is used to handle both DuplicateVoteEvidence and LightClientAttackEvidence from CometBFT.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/evidence/README.md#2025-04-22_snippet_6\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage Equivocation {\n  int64  height            = 1;\n  int64  time              = 2;\n  int64  power             = 3;\n  string consensus_address = 4;\n}\n```\n\n----------------------------------------\n\nTITLE: Querying ProposalsByGroupPolicy Endpoint\nDESCRIPTION: REST endpoint for querying proposals by group policy address with pagination support. Returns a list of proposals with their current status and details.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/group/README.md#2025-04-22_snippet_36\n\nLANGUAGE: bash\nCODE:\n```\n/cosmos/group/v1/proposals_by_group_policy/{address}\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl localhost:1317/cosmos/group/v1/proposals_by_group_policy/cosmos1..\n```\n\n----------------------------------------\n\nTITLE: Scheduling a Testnet Upgrade Plan (Go)\nDESCRIPTION: This snippet checks if an upgrade trigger name is provided, constructs an upgrade plan at the current block height, and schedules it using the UpgradeKeeper. It panics on error, ensuring the testnet starts in a predetermined upgrade state. Can be used to test upgrade handling logic. Dependencies include the Upgrade module and the standard context.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-apps/05-app-testnet.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n  // UPGRADE\n\t//\n\n\tif upgradeToTrigger != \"\" {\n\t\tupgradePlan := upgradetypes.Plan{\n\t\t\tName:   upgradeToTrigger,\n\t\t\tHeight: app.LastBlockHeight(),\n\t\t}\n\t\terr = app.UpgradeKeeper.ScheduleUpgrade(ctx, upgradePlan)\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t}\n```\n\n----------------------------------------\n\nTITLE: Querying Proposal Deposit\nDESCRIPTION: Commands to query deposit information for a specific proposal and depositor.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/README.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nsimd query gov deposit [proposal-id] [depositer-addr] [flags]\n```\n\n----------------------------------------\n\nTITLE: Implementing SetWithdrawAddr Function in Go\nDESCRIPTION: Implementation of the SetWithdrawAddr function in the distribution keeper. This function sets a new withdraw address for a delegator, checking if the address is allowed and if the feature is enabled.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/distribution/README.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nfunc (k Keeper) SetWithdrawAddr(ctx context.Context, delegatorAddr sdk.AccAddress, withdrawAddr sdk.AccAddress) error\n\tif k.blockedAddrs[withdrawAddr.String()] {\n\t\tfail with \"`{withdrawAddr}` is not allowed to receive external funds\"\n\t}\n\n\tif !k.GetWithdrawAddrEnabled(ctx) {\n\t\tfail with `ErrSetWithdrawAddrDisabled`\n\t}\n\n\tk.SetDelegatorWithdrawAddr(ctx, delegatorAddr, withdrawAddr)\n```\n\n----------------------------------------\n\nTITLE: Specifying Subcommands in Gov Module's AutoCLI Configuration\nDESCRIPTION: Code reference showing how the gov module specifies subcommands by grouping related commands together using the ServiceCommandDescriptor struct.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/client/v2/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nCommands: map[string]*autocliv1.ServiceCommandDescriptor{\n\t\t\"testservice.TestService\": {\n\t\t\tService: \"testservice.TestService\",\n\t\t\t// ...\n\t\t},\n\t}\n```\n\n----------------------------------------\n\nTITLE: Sending Coins from an Account in Go\nDESCRIPTION: This keeper function handles sending coins from one account to another, taking into account whether the sending account is a vesting account and adjusting balances accordingly.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/auth/vesting/README.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nfunc (k Keeper) SendCoins(ctx Context, from Account, to Account, amount Coins) {\n    bc := k.GetBalances(ctx, from)\n    v := k.LockedCoins(ctx, from)\n\n    spendable := bc - v\n    newCoins := spendable - amount\n    assert(newCoins >= 0)\n\n    from.SetBalance(newCoins)\n    to.AddBalance(amount)\n\n    // save balances...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SubmitProposalEventHandler in Go\nDESCRIPTION: This snippet defines the SubmitProposalEventHandler function, which handles EventSubmitProposal events. It demonstrates how to implement custom business logic for specific event types.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-032-typed-events.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// SubmitProposalEventHandler is an example of an event handler that prints proposal details\n// when any EventSubmitProposal is emitted.\nfunc SubmitProposalEventHandler(ev proto.Message) (err error) {\n    switch event := ev.(type) {\n    // Handle governance proposal events creation events\n    case govtypes.EventSubmitProposal:\n        // Users define business logic here e.g.\n        fmt.Println(ev.FromAddress, ev.ProposalId, ev.Proposal)\n        return nil\n    default:\n        return nil\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing handleMsgSubmitEvidence Function in Go\nDESCRIPTION: Implements the handler function for processing MsgSubmitEvidence messages.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-009-evidence-module.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc handleMsgSubmitEvidence(ctx Context, keeper Keeper, msg MsgSubmitEvidence) Result {\n  if err := keeper.SubmitEvidence(ctx, msg.Evidence); err != nil {\n    return err.Result()\n  }\n\n  // emit events...\n\n  return Result{\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering gRPC Gateway Handlers in Go\nDESCRIPTION: Defines a `GrpcGatewayInfo` type with handlers for gRPC gateway registration. This is intended to be used within modules to support gRPC gateway functionalities through a specific register function returned by the module.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-063-core-module-api.md#2025-04-22_snippet_13\n\nLANGUAGE: go\nCODE:\n```\ntype GrpcGatewayInfo struct {\n    Handlers []GrpcGatewayHandler\n}\n\ntype GrpcGatewayHandler func(ctx context.Context, mux *runtime.ServeMux, client QueryClient) error\n\nfunc ProvideGrpcGateway() GrpcGatewayInfo {\n    return GrpcGatewayinfo {\n        Handlers: []Handler {types.RegisterQueryHandlerClient}\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing BaseApp SetStreamingService method in Go\nDESCRIPTION: Implementation of the SetStreamingService method for BaseApp that registers a streaming service to receive ABCI events and state changes.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-038-state-listening.md#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\n// SetStreamingService is used to set a streaming service into the BaseApp hooks and load the listeners into the multistore\nfunc (app *BaseApp) SetStreamingService(s ABCIListener) {\n    // register the StreamingService within the BaseApp\n    // BaseApp will pass BeginBlock, DeliverTx, and EndBlock requests and responses to the streaming services to update their ABCI context\n    app.abciListeners = append(app.abciListeners, s)\n}\n```\n\n----------------------------------------\n\nTITLE: Annual Provisions Calculation\nDESCRIPTION: Function to calculate annual token provisions based on total supply and inflation rate.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/mint/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nNextAnnualProvisions(params Params, totalSupply math.LegacyDec) (provisions math.LegacyDec) {\n\treturn Inflation * totalSupply\n```\n\n----------------------------------------\n\nTITLE: Referencing Account Balances Iteration (Go Reference, x/bank Module)\nDESCRIPTION: This Go reference points to a concrete usage example in the bank module keeper, demonstrating the use of a store iterator to traverse account balances. This is pivotal for readers seeking practical demonstrations of the generic store interface contracts from the Cosmos SDK.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/advanced/04-store.md#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/x/bank/keeper/view.go#L125-L140\n```\n\n----------------------------------------\n\nTITLE: Adding Testnet Creation Command to rootCmd (Diff)\nDESCRIPTION: This diff shows how to add a testnet creation command to the root command in the application's CLI initialization logic. It appends an invocation of server.AddTestnetCreatorCommand, which integrates the testnet logic in the CLI. This is meant for use in the main CLI source and assumes prior imports of command utilities.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-apps/05-app-testnet.md#2025-04-22_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n  server.AddCommands(rootCmd, simapp.DefaultNodeHome, newApp, createSimAppAndExport, addModuleInitFlags)\n\t++ server.AddTestnetCreatorCommand(rootCmd, simapp.DefaultNodeHome, newTestnetApp, addModuleInitFlags)\n```\n\n----------------------------------------\n\nTITLE: Providing Default GenesisState Values - Go\nDESCRIPTION: This reference points to a Go method in the auth module, showing an implementation of DefaultGenesis(). It demonstrates how to construct and return a GenesisState object with default parameters for module initialization at genesis time. Required dependencies include the GenesisState struct and any auxiliary constructor functions; the method accepts no input and outputs a GenesisState with default values.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-modules/08-genesis.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/x/auth/module.go#L63-L67\n```\n\n----------------------------------------\n\nTITLE: Defining the GasMeter Interface in Go\nDESCRIPTION: This Go code snippet defines the `GasMeter` interface used within the Cosmos SDK. It specifies methods for querying consumed gas (`GasConsumed`, `GasConsumedToLimit`), remaining gas (`GasRemaining`), the gas limit (`Limit`), consuming gas (`ConsumeGas`), refunding gas (`RefundGas`), and checking if the limit has been exceeded (`IsPastLimit`, `IsOutOfGas`). This interface is central to tracking resource usage during execution.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/beginner/04-gas-fees.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// GasMeter interface to track gas consumption\ntype GasMeter interface {\n\tGasConsumed() Gas\n\tGasConsumedToLimit() Gas\n\tGasRemaining() Gas\n\tLimit() Gas\n\t// ConsumeGas consumes the given amount of gas. If the gas amount overflows uint64, it panics with ErrGasOverflow. If gas meter is not infinite, it panics with ErrOutOfGas if gas consumed goes above the limit.\n\tConsumeGas(amount Gas, descriptor string)\n\tRefundGas(amount Gas, descriptor string)\n\t// IsPastLimit returns true if the amount of gas consumed is strictly above the limit\n\tIsPastLimit() bool\n\t// IsOutOfGas returns true if the amount of gas consumed is above or equal to the limit\n\tIsOutOfGas() bool\n}\n```\n\n----------------------------------------\n\nTITLE: Transferring and Importing Validator Key to TMKMS\nDESCRIPTION: Commands to securely transfer the validator key from the full node to the TMKMS instance and import it for use with software signing. This step is crucial for setting up remote signing.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/user/run-node/06-run-production.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nscp user@123.456.32.123:~/.simd/config/priv_validator_key.json ~/tmkms/config/secrets\n```\n\nLANGUAGE: bash\nCODE:\n```\ntmkms softsign import $HOME/tmkms/config/secrets/priv_validator_key.json $HOME/tmkms/config/secrets/priv_validator_key\n```\n\n----------------------------------------\n\nTITLE: Auto-generated MsgServer Interface in Go\nDESCRIPTION: The Go interface automatically generated from the protobuf service definition for the Gov module. This can potentially replace keeper methods.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-031-msg-service.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage gov\n\ntype MsgServer interface {\n  SubmitProposal(context.Context, *MsgSubmitProposal) (*MsgSubmitProposalResponse, error)\n}\n```\n\n----------------------------------------\n\nTITLE: Enhanced Bank Query Test with JSON Parsing (Go)\nDESCRIPTION: Extended test implementation using gjson library for JSON response validation\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/systemtests/GETTING_STARTED.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n\traw := cli.CustomQuery(\"q\", \"bank\", \"total-supply\")\n\n\texp := map[string]int64{\n        \"stake\":     int64(500000000 * sut.nodesCount),\n        \"testtoken\": int64(1000000000 * sut.nodesCount),\n\t}\n\trequire.Len(t, gjson.Get(raw, \"supply\").Array(), len(exp), raw)\n\n\tfor k, v := range exp {\n\t\tgot := gjson.Get(raw, fmt.Sprintf(\"supply.#(denom==%q).amount\", k)).Int()\n\t\tassert.Equal(t, v, got, raw)\n\t}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Recovery Handlers to BaseApp in Go\nDESCRIPTION: Defines a method to add custom recovery handlers to the BaseApp. This allows developers to prepend their own handlers to the existing middleware chain.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-022-custom-panic-handling.md#2025-04-22_snippet_7\n\nLANGUAGE: Go\nCODE:\n```\nfunc (app *BaseApp) AddRunTxRecoveryHandler(handlers ...RecoveryHandler) {\n    for _, h := range handlers {\n        app.runTxRecoveryMiddleware = newRecoveryMiddleware(h, app.runTxRecoveryMiddleware)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Weighted Vote Protobuf Messages\nDESCRIPTION: Protobuf message definitions for weighted votes in governance, allowing voters to split their voting power across different options.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/README.md#2025-04-22_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage Vote {\n  uint64 proposal_id = 1;\n  string voter = 2;\n  repeated WeightedVoteOption options = 3;\n  string metadata = 4;\n}\n```\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage WeightedVoteOption {\n  VoteOption option = 1;\n  string weight = 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Application Source Directory Structure for Cosmos SDK Module - Shell\nDESCRIPTION: This shell-formatted code snippet presents a detailed directory and file tree for the recommended organization of source code in a Cosmos SDK module. It includes directories for client code, exported interfaces, keepers, module initialization, simulations, and protocol file outputs, with key Go source files highlighted for each concern. The structure ensures clear boundaries between CLI operations, simulation utilities, keeper logic, and protobuf-generated code, facilitating modular, testable, and maintainable development. This snippet is informational and does not require any build-time dependencies but assumes the use of Go for implementation.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-modules/11-structure.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nx/{module_name}\n├── client\n│   ├── cli\n│   │   ├── query.go\n│   │   └── tx.go\n│   └── testutil\n│       ├── cli_test.go\n│       └── suite.go\n├── exported\n│   └── exported.go\n├── keeper\n│   ├── genesis.go\n│   ├── grpc_query.go\n│   ├── hooks.go\n│   ├── invariants.go\n│   ├── keeper.go\n│   ├── keys.go\n│   ├── msg_server.go\n│   └── querier.go\n├── module\n│   └── module.go\n│   └── abci.go\n│   └── autocli.go\n├── simulation\n│   ├── decoder.go\n│   ├── genesis.go\n│   ├── operations.go\n│   └── params.go\n├── {module_name}.pb.go\n├── codec.go\n├── errors.go\n├── events.go\n├── events.pb.go\n├── expected_keepers.go\n├── genesis.go\n├── genesis.pb.go\n├── keys.go\n├── msgs.go\n├── params.go\n├── query.pb.go\n├── tx.pb.go\n└── README.md\n```\n\n----------------------------------------\n\nTITLE: Registering MsgServer and QueryServer in Go\nDESCRIPTION: This snippet defines the `HasServices` interface used for registering `Msg` and query services. It describes how services can be registered using `grpc.ServiceRegistrar` which supports both `MsgServer` and `QueryServer` registrations as a result of protobuf options.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-063-core-module-api.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\ntype HasServices interface {\n    AppModule\n\n    RegisterServices(grpc.ServiceRegistrar)\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining InterfaceUnpacker Interface in Go\nDESCRIPTION: This code snippet defines the InterfaceUnpacker interface used for unpacking Any types. It provides a method for unpacking the value in an Any type to an interface pointer.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-019-protobuf-state-encoding.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype InterfaceUnpacker interface {\n    // UnpackAny unpacks the value in any to the interface pointer passed in as\n    // iface. Note that the type in any must have been registered with\n    // RegisterImplementations as a concrete type for that interface\n    // Ex:\n    //    var msg sdk.Msg\n    //    err := ctx.UnpackAny(any, &msg)\n    //    ...\n    UnpackAny(any *Any, iface interface{}) error\n}\n```\n\n----------------------------------------\n\nTITLE: Overwriting Genesis Functions in Upgrade Handlers in Go\nDESCRIPTION: This Go code snippet shows how to run custom `InitGenesis` functions in an upgrade handler for imported modules. It requires manual consensus version registration to prevent default `InitGenesis` execution.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/advanced/15-upgrade.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nimport foo \"github.com/my/module/foo\"\n\napp.UpgradeKeeper.SetUpgradeHandler(\"my-plan\", func(ctx sdk.Context, plan upgradetypes.Plan, fromVM module.VersionMap)  (module.VersionMap, error) {\n\n    // Register the consensus version in the version map\n    // to avoid the SDK from triggering the default\n    // InitGenesis function.\n    fromVM[\"foo\"] = foo.AppModule{}.ConsensusVersion()\n\n    // Run custom InitGenesis for foo\n    app.mm[\"foo\"].InitGenesis(ctx, app.appCodec, myCustomGenesisState)\n\n    return app.mm.RunMigrations(ctx, cfg, fromVM)\n})\n```\n\n----------------------------------------\n\nTITLE: Setting an Infinite Block Gas Meter During Genesis in Go\nDESCRIPTION: This Go code snippet shows how the block gas meter is configured during the genesis phase of a Cosmos SDK application. It uses `storetypes.NewInfiniteGasMeter()` to create a gas meter with no limit and sets it on the context associated with `app.finalizeBlockState`. This allows initial setup transactions to run without gas restrictions.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/beginner/04-gas-fees.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\napp.finalizeBlockState.SetContext(app.finalizeBlockState.Context().WithBlockGasMeter(storetypes.NewInfiniteGasMeter()))\n```\n\n----------------------------------------\n\nTITLE: Registering gRPC Gateway Routes for AppModuleBasic - Go (Reference)\nDESCRIPTION: This reference links to an example of how a Cosmos SDK module implements the RegisterGRPCGatewayRoutes function on its AppModuleBasic struct. This setup wires up gRPC endpoints for clients, enabling HTTP/gRPC access to module queries. The code is located in the x/auth module, and usage requires the module to implement this function in Go and register it with the application's router.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-modules/09-module-interfaces.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/x/auth/module.go#L71-L76\n```\n\n----------------------------------------\n\nTITLE: Referencing iavl.Store Implementation (Go Reference)\nDESCRIPTION: This snippet links to the root definition of iavl.Store, the default storage backend for key-value and commit stores in the Cosmos SDK. Following the reference allows developers to investigate the data structures and guarantees (e.g., O(log n) access) provided by IAVL trees.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/advanced/04-store.md#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/store/iavl/store.go#L35-L40\n```\n\n----------------------------------------\n\nTITLE: Defining CommitKVStoreCache Interface in Go\nDESCRIPTION: Defines the CommitKVStoreCache interface which implements a write-through cache wrapping a CommitKVStore. It maintains both the underlying store and a cache for optimized reads.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/spec/store/interblock-cache.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype CommitKVStoreCache interface{\n    store CommitKVStore\n    cache Cache\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Mempool Fee Check AnteHandler in Go for Cosmos SDK\nDESCRIPTION: Defines a CheckMempoolFees function as an AnteHandler micro-function to check if fees meet the mempool's minimum fee parameter during CheckTx.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-010-modular-antehandler.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfunc CheckMempoolFees(ctx Context, tx Tx, simulate bool) (newCtx Context, err error) {\n    // If CheckTx: Abort if the fees are less than the mempool's minFee parameter\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Specific Deposit for a Proposal using v1 in Cosmos SDK\nDESCRIPTION: REST API endpoint for retrieving deposit information for a specific proposal from a specific depositor using the v1 path. Similar to the v1beta1 endpoint but with the updated API version.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/README.md#2025-04-22_snippet_75\n\nLANGUAGE: bash\nCODE:\n```\n/cosmos/gov/v1/proposals/{proposal_id}/deposits/{depositor}\n```\n\n----------------------------------------\n\nTITLE: Defining newTestnetApp Helper Function for CLI (Diff/Go)\nDESCRIPTION: This diff introduces a helper function that wraps the standard app initialization function, extracts testnet configuration options from AppOptions, and invokes InitSimAppForTestnet. The function performs type assertions and panics if options are missing or have invalid types. It is meant to enable custom testnet app creation from the CLI.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-apps/05-app-testnet.md#2025-04-22_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n// newTestnetApp starts by running the normal newApp method. From there, the app interface returned is modified in order\n// for a testnet to be created from the provided app.\nfunc newTestnetApp(logger log.Logger, db cometbftdb.DB, traceStore io.Writer, appOpts servertypes.AppOptions) servertypes.Application {\n\t// Create an app and type cast to an SimApp\n\tapp := newApp(logger, db, traceStore, appOpts)\n\tsimApp, ok := app.(*simapp.SimApp)\n\tif !ok {\n\t\tpanic(\"app created from newApp is not of type simApp\")\n\t}\n\n\tnewValAddr, ok := appOpts.Get(server.KeyNewValAddr).(bytes.HexBytes)\n\tif !ok {\n\t\tpanic(\"newValAddr is not of type bytes.HexBytes\")\n\t}\n\tnewValPubKey, ok := appOpts.Get(server.KeyUserPubKey).(crypto.PubKey)\n\tif !ok {\n\t\tpanic(\"newValPubKey is not of type crypto.PubKey\")\n\t}\n\tnewOperatorAddress, ok := appOpts.Get(server.KeyNewOpAddr).(string)\n\tif !ok {\n\t\tpanic(\"newOperatorAddress is not of type string\")\n\t}\n\tupgradeToTrigger, ok := appOpts.Get(server.KeyTriggerTestnetUpgrade).(string)\n\tif !ok {\n\t\tpanic(\"upgradeToTrigger is not of type string\")\n\t}\n\n\t// Make modifications to the normal SimApp required to run the network locally\n\treturn simapp.InitSimAppForTestnet(simApp, newValAddr, newValPubKey, newOperatorAddress, upgradeToTrigger)\n}\n```\n\n----------------------------------------\n\nTITLE: Adding secp256r1 to Supported Algorithms\nDESCRIPTION: Updates the keyring's supported algorithms list to include the secp256r1 implementation alongside the default secp256k1 algorithm.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/beginner/03-accounts.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc newKeystore(kr keyring.Keyring, cdc codec.Codec, backend string, opts ...Option) keystore {\n    // Default options for keybase, these can be overwritten using the\n    // Option function\n    options := Options{\n        SupportedAlgos:       SigningAlgoList{hd.Secp256k1, hd.Secp256r1}, // added here\n        SupportedAlgosLedger: SigningAlgoList{hd.Secp256k1},\n    }\n...\n```\n\n----------------------------------------\n\nTITLE: Querying Transactions by Signature in CLI\nDESCRIPTION: This CLI command allows querying a transaction given its signature using the --type=signature flag.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/auth/tx/README.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nsimd query tx --type=signature Ofjvgrqi8twZfqVDmYIhqwRLQjZZ40XbxEamk/veH3gQpRF0hL2PH4ejRaDzAX+2WChnaWNQJQ41ekToIi5Wqw==\n```\n\n----------------------------------------\n\nTITLE: Defining Positional Arguments for Auth Module's Account Query\nDESCRIPTION: Example from the auth module showing how to define positional arguments for the Account query command using the PositionalArgDescriptor struct.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/client/v2/README.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nRpcMethod: \"Account\",\nUse:       \"account [address]\",,\nShort:     \"Query account by address\",\nPositionalArgs: []*autocliv1.PositionalArgDescriptor{\n\t{ProtoField: \"address\"},\n}\n```\n\n----------------------------------------\n\nTITLE: Defining InterfaceModule Interface in Go\nDESCRIPTION: This code snippet defines the InterfaceModule interface that can be implemented by app modules to register interface types with the InterfaceRegistry.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-019-protobuf-state-encoding.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ntype InterfaceModule interface {\n    RegisterInterfaceTypes(InterfaceRegistry)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Validator Bonding Handler in Go\nDESCRIPTION: Implementation of the validator bonding hook that creates or updates ValidatorSigningInfo when a validator is bonded. This code handles both new validators and returning validators.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/slashing/README.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nonValidatorBonded(address sdk.ValAddress)\n\n  signingInfo, found = GetValidatorSigningInfo(address)\n  if !found {\n    signingInfo = ValidatorSigningInfo {\n      StartHeight         : CurrentHeight,\n      IndexOffset         : 0,\n      JailedUntil         : time.Unix(0, 0),\n      Tombstone           : false,\n      MissedBloskCounter  : 0\n    } else {\n      signingInfo.StartHeight = CurrentHeight\n    }\n\n    setValidatorSigningInfo(signingInfo)\n  }\n\n  return\n```\n\n----------------------------------------\n\nTITLE: Context Helpers for Send Restrictions - Go\nDESCRIPTION: Helper functions to manage bypass functionality in the context for send restrictions.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/bank/README.md#2025-04-22_snippet_8\n\nLANGUAGE: golang\nCODE:\n```\nconst bypassKey = \"bypass-mymodule-restriction\"\n\nfunc WithBypass(ctx context.Context) context.Context {\n\treturn sdk.UnwrapSDKContext(ctx).WithValue(bypassKey, true)\n}\n\nfunc WithoutBypass(ctx context.Context) context.Context {\n\treturn sdk.UnwrapSDKContext(ctx).WithValue(bypassKey, false)\n}\n\nfunc HasBypass(ctx context.Context) bool {\n\tbypassValue := ctx.Value(bypassKey)\n\tif bypassValue == nil {\n\t\treturn false\n\t}\n\tbypass, isBool := bypassValue.(bool)\n\treturn isBool && bypass\n}\n```\n\n----------------------------------------\n\nTITLE: Gas Configuration for KVStore Operations in Cosmos SDK\nDESCRIPTION: Definition of the KVGasConfig, which specifies gas costs for various KVStore operations. This is used by the GasKVStore to charge appropriate amounts of gas.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/advanced/04-store.md#2025-04-22_snippet_18\n\nLANGUAGE: go\nCODE:\n```\n// KVGasConfig defines gas costs for KVStore operations.\ntype KVGasConfig struct {\n\tHasGas      Gas // Gas for HasCost if key exists\n\tDeleteGas   Gas // Gas for Delete operation\n\tReadGas     Gas // Gas for Read operation\n\tReadCostPerByte  Gas // Gas for Read operation per byte\n\tWriteGas         Gas // Gas for Write operation\n\tWriteCostPerByte Gas // Gas for Write operation per byte\n\tIterNextGas      Gas // Gas for Iterator Next operation\n\tIterNextCostPerByte Gas // Gas for Iterator Next operation per byte\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FeeAllowanceI Interface in Go\nDESCRIPTION: Go interface definition for FeeAllowanceI, which defines methods for fee allowance implementations.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/feegrant/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype FeeAllowanceI interface {\n\tproto.Message\n\n\tGetExpirationTime() (time.Time, error)\n\tAccept(ctx sdk.Context, fee sdk.Coins, msgs []sdk.Msg) (bool, error)\n\tValidateBasic() error\n\tAllowance(ctx sdk.Context) (sdk.Coins, error)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Store Migration Handler in Go\nDESCRIPTION: Shows the pattern for implementing state migration from the old IAVL-based store to the new ADR-40 store. Uses the UpgradeKeeper to register a handler that calls a migration function during a network upgrade.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-040-storage-and-smt-state-commitments.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\napp.UpgradeKeeper.SetUpgradeHandler(\"adr-40\", func(ctx sdk.Context, plan upgradetypes.Plan, vm module.VersionMap) (module.VersionMap, error) {\n\n    storev2.Migrate(iavlstore, v2.store)\n\n    // RunMigrations returns the VersionMap\n    // with the updated module ConsensusVersions\n    return app.mm.RunMigrations(ctx, vm)\n})\n```\n\n----------------------------------------\n\nTITLE: CreateGroupWithPolicy Message Definition in Protobuf\nDESCRIPTION: Protocol buffer definition for MsgCreateGroupWithPolicy which creates both a group and associated policy in one operation.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/group/README.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/tree/release/v0.50.x/proto/cosmos/group/v1/tx.proto#L191-L215\n```\n\n----------------------------------------\n\nTITLE: Querying Validator Signing Info\nDESCRIPTION: Command to query signing information for a specific validator using their consensus public key\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/slashing/README.md#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nsimd query slashing signing-info '{\"@type\":\"/cosmos.crypto.ed25519.PubKey\",\"key\":\"Auxs3865HpB/EfssYOzfqNhEJjzys6jD5B6tPgC8=\"}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Golang Protobuf APIv2 Generation - Go Reference\nDESCRIPTION: This Go reference identifies buf.gen.pulsar.yaml, which sets rules for generating protobuf definitions via the newer Golang APIv2 plugin. It allows the Cosmos SDK to benefit from improved helpers and performance in encoding/decoding. The configuration requires Buf and the pulsar generator, and typically specifies plugin type, output directories, and related options.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/tooling/00-protobuf.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/main/proto/buf.gen.pulsar.yaml#L1-L18\n```\n\n----------------------------------------\n\nTITLE: Updating UpgradeHandler Signature in Go\nDESCRIPTION: Shows the updated signature for the UpgradeHandler function, which now takes and returns a VersionMap to track module versions during upgrades.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-041-in-place-store-migrations.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n- type UpgradeHandler func(ctx sdk.Context, plan Plan)\n+ type UpgradeHandler func(ctx sdk.Context, plan Plan, versionMap VersionMap) (VersionMap, error)\n```\n\n----------------------------------------\n\nTITLE: Example Implementation Reference for Cosmos SDK Query\nDESCRIPTION: This snippet provides a reference link to an example implementation of a gRPC Query service for the bank module within the Cosmos SDK. The reference illustrates how to structure and organize keeper methods in grpc_query.go.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-modules/04-query-services.md#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/x/bank/keeper/grpc_query.go\n```\n\n----------------------------------------\n\nTITLE: TMKMS Configuration File for Cosmos SDK Validator\nDESCRIPTION: Example TMKMS configuration file that sets up a software-based remote signer for a Cosmos SDK validator. It defines chain information, signing provider, and validator connection details for secure remote signing.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/user/run-node/06-run-production.md#2025-04-22_snippet_7\n\nLANGUAGE: toml\nCODE:\n```\n# CometBFT KMS configuration file\n\n## Chain Configuration\n\n[[chain]]\nid = \"osmosis-1\"\nkey_format = { type = \"bech32\", account_key_prefix = \"cosmospub\", consensus_key_prefix = \"cosmosvalconspub\" }\nstate_file = \"/root/tmkms/config/state/priv_validator_state.json\"\n\n## Signing Provider Configuration\n\n### Software-based Signer Configuration\n\n[[providers.softsign]]\nchain_ids = [\"test-chain-waSDSe\"]\nkey_type = \"consensus\"\npath = \"/root/tmkms/config/secrets/priv_validator_key\"\n\n## Validator Configuration\n\n[[validator]]\nchain_id = \"test-chain-waSDSe\"\naddr = \"tcp://123.456.12.345:26659\"\nsecret_key = \"/root/tmkms/config/secrets/secret_connection_key\"\nprotocol_version = \"v0.34\"\nreconnect = true\n```\n\n----------------------------------------\n\nTITLE: Defining Keeper Interface for Authorization Module in Go\nDESCRIPTION: The Keeper interface for the authorization module. It exposes a DispatchActions method that allows other modules to execute authorized messages on behalf of the granter.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-030-authz-module.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype Keeper interface {\n\t// DispatchActions routes the provided msgs to their respective handlers if the grantee was granted an authorization\n\t// to send those messages by the first (and only) signer of each msg.\n    DispatchActions(ctx sdk.Context, grantee sdk.AccAddress, msgs []sdk.Msg) sdk.Result`\n}\n```\n\n----------------------------------------\n\nTITLE: Using Metrics in Cosmos SDK Module Functions\nDESCRIPTION: Example of how module developers can integrate metrics tracking into their functions using the metrics.MeasureSince helper to measure execution time.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-013-metrics.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc (k BaseKeeper) MintCoins(ctx sdk.Context, moduleName string, amt sdk.Coins) error {\n  defer metrics.MeasureSince(time.Now(), \"MintCoins\")\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining UnbondingDelegation Structure in Protobuf\nDESCRIPTION: This Protobuf snippet defines the UnbondingDelegation structure, representing a delegation that is in the process of unbonding.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/staking/README.md#2025-04-22_snippet_3\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage UnbondingDelegation {\n  option (gogoproto.equal)            = false;\n  option (gogoproto.goproto_getters)  = false;\n\n  string              delegator_address     = 1 [(gogoproto.moretags) = \"yaml:\\\"delegator_address\\\"\"];\n  string              validator_address     = 2 [(gogoproto.moretags) = \"yaml:\\\"validator_address\\\"\"];\n  repeated UnbondingDelegationEntry entries = 3 [(gogoproto.nullable) = false];\n}\n\nmessage UnbondingDelegationEntry {\n  option (gogoproto.equal) = false;\n\n  int64                     creation_height = 1 [(gogoproto.moretags) = \"yaml:\\\"creation_height\\\"\"];\n  google.protobuf.Timestamp completion_time = 2 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true, (gogoproto.moretags) = \"yaml:\\\"completion_time\\\"\"];\n  string                    initial_balance = 3 [(gogoproto.customtype) = \"github.com/cosmos/cosmos-sdk/types.Int\", (gogoproto.nullable) = false];\n  string                    balance         = 4 [(gogoproto.customtype) = \"github.com/cosmos/cosmos-sdk/types.Int\", (gogoproto.nullable) = false];\n  uint64                    unbonding_id    = 5;\n  string                    unbonding_on_hold_ref_count = 6 [(gogoproto.customtype) = \"github.com/cosmos/cosmos-sdk/types.Int\", (gogoproto.nullable) = false];\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing Hierarchical Deterministic Key Derivation Structure - Text Diagram\nDESCRIPTION: This text snippet provides an ASCII diagram illustrating the hierarchical relationship between mnemonic (seed), master private key, multiple private keys, public keys, and their corresponding addresses in an HD wallet as implemented in Cosmos SDK. It visually demonstrates how one seed can generate multiple accounts through layered derivations. There are no direct dependencies, but it conceptually aligns with the BIP32 and BIP44 standards for HD wallets. Inputs are not required; it is for documentation purposes only.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/beginner/03-accounts.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n     Account 0                         Account 1                         Account 2\n\n+------------------+              +------------------+               +------------------+\n|                  |              |                  |               |                  |\n|    Address 0     |              |    Address 1     |               |    Address 2     |\n|        ^         |              |        ^         |               |        ^         |\n|        |         |              |        |         |               |        |         |\n|        |         |              |        |         |               |        |         |\n|        |         |              |        |         |               |        |         |\n|        +         |              |        +         |               |        +         |\n|  Public key 0    |              |  Public key 1    |               |  Public key 2    |\n|        ^         |              |        ^         |               |        ^         |\n|        |         |              |        |         |               |        |         |\n|        |         |              |        |         |               |        |         |\n|        |         |              |        |         |               |        |         |\n|        +         |              |        +         |               |        +         |\n|  Private key 0   |              |  Private key 1   |               |  Private key 2   |\n|        ^         |              |        ^         |               |        ^         |\n+------------------+              +------------------+               +------------------+\n         |                                 |                                  |\n         |                                 |                                  |\n         |                                 |                                  |\n         +--------------------------------------------------------------------+\n                                           |\n                                           |\n                                 +---------+---------+\n                                 |                   |\n                                 |  Master PrivKey   |\n                                 |                   |\n                                 +-------------------+\n                                           |\n                                           |\n                                 +---------+---------+\n                                 |                   |\n                                 |  Mnemonic (Seed)  |\n                                 |                   |\n                                 +-------------------+\n```\n\n----------------------------------------\n\nTITLE: Example Output of Governance Parameters Query with gRPC v1 in Cosmos SDK\nDESCRIPTION: The JSON response structure when querying governance parameters using the v1 gRPC endpoint, showing only the requested voting period parameter.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/README.md#2025-04-22_snippet_53\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"votingParams\": {\n    \"votingPeriod\": \"172800s\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Validator Structure in Protobuf\nDESCRIPTION: This Protobuf snippet defines the Validator structure, including operator address, consensus pubkey, jailed status, status, tokens, delegator shares, description, unbonding height, and unbonding time.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/staking/README.md#2025-04-22_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage Validator {\n  option (gogoproto.equal)           = false;\n  option (gogoproto.goproto_stringer) = false;\n\n  string                    operator_address       = 1 [(gogoproto.moretags) = \"yaml:\\\"operator_address\\\"\"];\n  google.protobuf.Any       consensus_pubkey       = 2 [(cosmos_proto.accepts_interface) = \"cosmos.crypto.PubKey\", (gogoproto.moretags) = \"yaml:\\\"consensus_pubkey\\\"\"];\n  bool                      jailed                 = 3;\n  BondStatus                status                 = 4;\n  string                    tokens                 = 5 [(gogoproto.customtype) = \"github.com/cosmos/cosmos-sdk/types.Int\", (gogoproto.nullable) = false];\n  string                    delegator_shares       = 6 [(gogoproto.customtype) = \"github.com/cosmos/cosmos-sdk/types.Dec\", (gogoproto.nullable) = false];\n  Description               description             = 7 [(gogoproto.nullable) = false];\n  int64                     unbonding_height       = 8;\n  google.protobuf.Timestamp unbonding_time         = 9 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];\n  Commission                commission             = 10 [(gogoproto.nullable) = false];\n  string                    min_self_delegation    = 11 [(gogoproto.customtype) = \"github.com/cosmos/cosmos-sdk/types.Int\", (gogoproto.nullable) = false];\n  string                    unbonding_on_hold_ref_count = 12 [(gogoproto.customtype) = \"github.com/cosmos/cosmos-sdk/types.Int\", (gogoproto.nullable) = false];\n  repeated UnbondingId      unbonding_ids          = 13;\n}\n```\n\n----------------------------------------\n\nTITLE: MsgEditValidator Protobuf Definition\nDESCRIPTION: Protobuf message definition for editing existing validator parameters including description and commission rate. Contains validation rules and update restrictions.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/staking/README.md#2025-04-22_snippet_9\n\nLANGUAGE: protobuf\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.47.0-rc1/proto/cosmos/staking/v1beta1/tx.proto#L23-L24\n\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.47.0-rc1/proto/cosmos/staking/v1beta1/tx.proto#L78-L97\n```\n\n----------------------------------------\n\nTITLE: Defining SignDocTextual and Screen Types - Cosmos SDK - Go\nDESCRIPTION: This code defines the Go struct types Screen and SignDocTextual used in the Cosmos SDK for text-based transaction signing, representing a screen of display data and an array of such screens as SignDocTextual. Dependencies include the Go language environment and, by context, the Cosmos SDK transaction model. Key fields: title (up to ~64 chars), content (up to ~255), indent (nested context), and expert (flag for conditional display). The struct is intended to be serialized to a compact, deterministic byte representation for signing by hardware devices, and this structure is invertible for security. Inputs are transaction data rendered as fields; outputs are structured screens for signing workflows. Limitations include size recommendations and that actual serialization is external (CBOR, not protobuf).\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-050-sign-mode-textual.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype Screen struct {\n  Title string   // possibly size limited to, advised to 64 characters\n  Content string // possibly size limited to, advised to 255 characters\n  Indent uint8   // size limited to something small like 16 or 32\n  Expert bool\n}\n\ntype SignDocTextual struct {\n  Screens []Screen\n}\n\n```\n\n----------------------------------------\n\nTITLE: Structure of Legacy Query Paths (Text)\nDESCRIPTION: Describes the format of legacy query paths used in the Cosmos SDK before the adoption of gRPC. The path typically consists of segments: category (`custom`), module route, query type, and arguments. This path was used by `BaseApp` and module queriers to route and handle query requests.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-modules/02-messages-and-queries.md#2025-04-22_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nqueryCategory/queryRoute/queryType/arg1/arg2/...\n```\n\n----------------------------------------\n\nTITLE: Defining MsgVerifyInvariant Protobuf Structure\nDESCRIPTION: Definition of the MsgVerifyInvariant message in protobuf format which is used to check blockchain invariants. It contains sender and invariant route module name details.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/crisis/README.md#2025-04-22_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage MsgVerifyInvariant {\n  string sender                    = 1;\n  string invariant_module_name     = 2;\n  string invariant_route           = 3;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New Capabilities in Go\nDESCRIPTION: NewCapability function that creates and persists a new capability with automatic claiming for the calling module.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-003-dynamic-capability-store.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfunc (sck ScopedCapabilityKeeper) NewCapability(ctx Context, name string) (Capability, error) {\n  // check name not taken in memory store\n  if capStore.Get(\"rev/\" + name) != nil {\n    return nil, errors.New(\"name already taken\")\n  }\n\n  // fetch the current index\n  index := persistentStore.Get(\"index\")\n  \n  // create a new capability\n  capability := &CapabilityKey{index: index}\n  \n  // set persistent store\n  persistentStore.Set(index, Set.singleton(sck.moduleName + \"/\" + name))\n  \n  // update the index\n  index++\n  persistentStore.Set(\"index\", index)\n  \n  // set forward mapping in memory store from capability to name\n  memStore.Set(sck.moduleName + \"/fwd/\" + capability, name)\n  \n  // set reverse mapping in memory store from name to index\n  memStore.Set(sck.moduleName + \"/rev/\" + name, index)\n\n  // set the in-memory mapping from index to capability pointer\n  capMap[index] = capability\n  \n  // return the newly created capability\n  return capability\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ExtendVote in Cosmos SDK in Go\nDESCRIPTION: This code shows the implementation of the ExtendVote method in the Cosmos SDK. It's currently a no-op, allowing for future extension of pre-commit votes with arbitrary data.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/advanced/00-baseapp.md#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/baseapp/abci_utils.go#L274-L281\n```\n\n----------------------------------------\n\nTITLE: Example Output of All Votes Query with gRPC v1beta1 in Cosmos SDK\nDESCRIPTION: The JSON response structure when querying all votes using the v1beta1 gRPC endpoint, showing a list of votes with voter addresses and their choices.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/README.md#2025-04-22_snippet_44\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"votes\": [\n    {\n      \"proposalId\": \"1\",\n      \"voter\": \"cosmos1..\",\n      \"options\": [\n        {\n          \"option\": \"VOTE_OPTION_YES\",\n          \"weight\": \"1000000000000000000\"\n        }\n      ]\n    }\n  ],\n  \"pagination\": {\n    \"total\": \"1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Rosetta OfflineClient Interface in Go\nDESCRIPTION: This code defines the OfflineClient interface used for operations that don't require access to a node. It includes methods for transaction signing, operation construction, and account identification from public keys.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-035-rosetta-api-support.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// OfflineClient defines the functionalities supported without having access to the node\ntype OfflineClient interface {\n\tNetworkInformationProvider\n\t// SignedTx returns the signed transaction given the tx bytes (msgs) plus the signatures\n\tSignedTx(ctx context.Context, txBytes []byte, sigs []*types.Signature) (signedTxBytes []byte, err error)\n\t// TxOperationsAndSignersAccountIdentifiers returns the operations related to a transaction and the account\n\t// identifiers if the transaction is signed\n\tTxOperationsAndSignersAccountIdentifiers(signed bool, hexBytes []byte) (ops []*types.Operation, signers []*types.AccountIdentifier, err error)\n\t// ConstructionPayload returns the construction payload given the request\n\tConstructionPayload(ctx context.Context, req *types.ConstructionPayloadsRequest) (resp *types.ConstructionPayloadsResponse, err error)\n\t// PreprocessOperationsToOptions returns the options given the preprocess operations\n\tPreprocessOperationsToOptions(ctx context.Context, req *types.ConstructionPreprocessRequest) (options map[string]interface{}, err error)\n\t// AccountIdentifierFromPublicKey returns the account identifier given the public key\n\tAccountIdentifierFromPublicKey(pubKey *types.PublicKey) (*types.AccountIdentifier, error)\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Mint Event by Owner Address - JSON-RPC - JSON\nDESCRIPTION: This JSON code provides an example of subscribing to mint events by owner address using CometBFT's JSON-RPC. The 'query' parameter filters for 'Tx' events where 'mint.owner' matches a particular account address. Users must provide a valid 'ownerAddress' following the Cosmos SDK's 'AccAddress' format. The request structure conforms to JSON-RPC 2.0 and enables clients to receive events relevant to NFT minting for a specific owner.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/advanced/08-events.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"subscribe\",\n  \"id\": \"0\",\n  \"params\": {\n    \"query\": \"tm.event='Tx' AND mint.owner='ownerAddress'\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Granting Fee Allowance in Cosmos SDK (Shell)\nDESCRIPTION: Commands to grant fee allowances to another account, including examples for one-time and periodic spend limits.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/feegrant/README.md#2025-04-22_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nsimd tx feegrant grant [granter] [grantee] [flags]\n```\n\nLANGUAGE: shell\nCODE:\n```\nsimd tx feegrant grant cosmos1.. cosmos1.. --spend-limit 100stake\n```\n\nLANGUAGE: shell\nCODE:\n```\nsimd tx feegrant grant cosmos1.. cosmos1.. --period 3600 --period-limit 10stake\n```\n\n----------------------------------------\n\nTITLE: Defining WeightedVoteOption and Updated Vote Structs in Go\nDESCRIPTION: Defines the data structures for weighted voting options that allow splitting votes across multiple choices. The WeightedVoteOption combines a voting option with a weight, while the Vote struct now contains a list of these weighted options.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-037-gov-split-vote.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype WeightedVoteOption struct {\n  Option string\n  Weight sdk.Dec\n}\n\ntype Vote struct {\n  ProposalID int64\n  Voter      sdk.Address\n  Options    []WeightedVoteOption\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Snapshot Protocol Buffers for Extension Support in Cosmos SDK\nDESCRIPTION: Protobuf definitions for extending snapshot functionality with SnapshotExtensionMeta and SnapshotExtensionPayload types. These new message types allow modules to include state data maintained outside of IAVL trees in the state sync process.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-049-state-sync-hooks.md#2025-04-22_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\n// SnapshotItem is an item contained in a rootmulti.Store snapshot.\n// On top of the exsiting SnapshotStoreItem and SnapshotIAVLItem, we add two new options for the item.\nmessage SnapshotItem {\n  // item is the specific type of snapshot item.\n  oneof item {\n    SnapshotStoreItem        store             = 1;\n    SnapshotIAVLItem         iavl              = 2 [(gogoproto.customname) = \"IAVL\"];\n    SnapshotExtensionMeta    extension         = 3;\n    SnapshotExtensionPayload extension_payload = 4;\n  }\n}\n\n// SnapshotExtensionMeta contains metadata about an external snapshotter.\n// One module may need multiple snapshotters, so each module may have multiple SnapshotExtensionMeta.\nmessage SnapshotExtensionMeta {\n  // the name of the ExtensionSnapshotter, and it is registered to snapshotter manager when setting up the application\n  // name should be unique for each ExtensionSnapshotter as we need to alphabetically order their snapshots to get\n  // deterministic snapshot stream.\n  string name   = 1;\n  // this is used by each ExtensionSnapshotter to decide the format of payloads included in SnapshotExtensionPayload message\n  // it is used within the snapshotter/namespace, not global one for all modules\n  uint32 format = 2;\n}\n\n// SnapshotExtensionPayload contains payloads of an external snapshotter.\nmessage SnapshotExtensionPayload {\n  bytes payload = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Encoding Primitive Types with GoGo Protobuf in Go\nDESCRIPTION: Example showing how to encode primitive types like timestamps using gogoprotobuf Value types instead of direct encoding. This demonstrates the preferred approach for handling primitive types in the new Protocol Buffer encoding system.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-019-protobuf-state-encoding.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nts, err := gogotypes.TimestampProto(completionTime)\nif err != nil {\n  // ...\n}\n\nbz := cdc.MustMarshal(ts)\n```\n\n----------------------------------------\n\nTITLE: Referencing module.HasGenesisBasics Interface Definition in Go\nDESCRIPTION: This Go code reference includes the HasGenesisBasics interface location, critical for modules needing stateless genesis capabilities. It outlines how to provide default and validation logic for genesis states, ensuring correct module operation during blockchain initialization. Module authors should refer to this when implementing genesis support, particularly for system upgrades and testing.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-modules/01-module-manager.md#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/types/module/module.go#L76-L79\n```\n\n----------------------------------------\n\nTITLE: Reset Circuit Breaker Message Structure in Protobuf\nDESCRIPTION: Complete protobuf definition for MsgResetCircuitBreaker which is used to re-enable processing of previously disabled message types. References the full implementation from the Cosmos SDK repository.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/circuit/README.md#2025-04-22_snippet_8\n\nLANGUAGE: protobuf\nCODE:\n```\n// MsgResetCircuitBreaker defines the Msg/ResetCircuitBreaker request type.\nmessage MsgResetCircuitBreaker {\n  option (cosmos.msg.v1.signer) = \"authority\";\n  option (amino.name) = \"cosmos-sdk/MsgResetCircuitBreaker\";\n\n  // authority is the account authorized to reset the circuit breaker.\n  string authority = 1 [(cosmos_proto.scalar) = \"cosmos.AddressString\"];\n\n  // msg_type_urls specifies a list of Msg type URLs to resume processing.\n  // If empty, all Msg's that have been stopped will be resumed.\n  repeated string msg_type_urls = 2;\n}\n\n// MsgResetCircuitBreakerResponse defines the Msg/ResetCircuitBreaker response type.\nmessage MsgResetCircuitBreakerResponse {}\n```\n\n----------------------------------------\n\nTITLE: Wrapping CommitKVStoreCache with CacheKV in Go\nDESCRIPTION: Wraps a CommitKVStoreCache with an additional CacheKV caching layer, though the use case for this operation is noted as unclear.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/spec/store/interblock-cache.md#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nfunc CacheWrap(\n    KVCache CommitKVStoreCache) {\n     \n    return CacheKV.NewStore(KVCache)\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Proposals by Group Policy using gRPC\nDESCRIPTION: Demonstrates querying proposals associated with a specific group policy address using gRPC. Returns a list of proposals with their details and pagination info.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/group/README.md#2025-04-22_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\ngrpcurl -plaintext \\\n    -d '{\"address\":\"cosmos1..\"}'  localhost:9090 cosmos.group.v1.Query/ProposalsByGroupPolicy\n```\n\n----------------------------------------\n\nTITLE: Referencing Committer Methods for Disk Persistence (Go Reference)\nDESCRIPTION: This Go reference points to the portion of the Cosmos SDK interface that defines the Committer methods, outlining how stores persist changes and generate deterministic commit IDs. Implementers and maintainers can review the link to understand how commit hashes interact with the consensus layer and the commit lifecycle.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/advanced/04-store.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/store/types/store.go#L20-L30\n```\n\n----------------------------------------\n\nTITLE: Exporting Cosmos SDK Proto Files from Buf\nDESCRIPTION: This command exports Cosmos SDK proto files from buf.build for a specific commit version. It downloads the proto files and outputs them to the current directory, allowing developers to get the proto definitions for a particular SDK version.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/proto/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbuf export buf.build/cosmos/cosmos-sdk:${commit} --output .\n```\n\n----------------------------------------\n\nTITLE: SlashEvent Struct Definition in Go\nDESCRIPTION: Go struct that tracks validator slash events, containing the validator's address, voting percentage, and cumulative slashing amount. This structure is used to implement proportional slashing.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-014-proportional-slashing.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype SlashEvent struct {\n    Address                     sdk.ValAddress\n    ValidatorVotingPercent      sdk.Dec\n    SlashedSoFar                sdk.Dec\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Fee Grants in Cosmos SDK (Shell)\nDESCRIPTION: This command allows users to query all grants for a given grantee using the Cosmos SDK CLI.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/feegrant/README.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nsimd query feegrant grants [grantee] [flags]\n```\n\nLANGUAGE: shell\nCODE:\n```\nsimd query feegrant grants cosmos1..\n```\n\n----------------------------------------\n\nTITLE: Batch Signing Transactions in Cosmos SDK\nDESCRIPTION: Signs multiple offline generated transactions in Cosmos SDK.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/auth/README.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsimd tx sign txs.json --from $ALICE > tx.signed.json\n```\n\nLANGUAGE: bash\nCODE:\n```\nsimd tx sign tx1.json tx2.json tx3.json --from $ALICE > tx.signed.json\n```\n\n----------------------------------------\n\nTITLE: Defining Rosetta Server Settings Structure in Go\nDESCRIPTION: This code defines the Settings struct used to configure the Rosetta API server. It includes network information, client interface, listening address, offline mode flag, and retry settings for server instantiation.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-035-rosetta-api-support.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// Settings define the rosetta server settings\ntype Settings struct {\n\t// Network contains the information regarding the network\n\tNetwork *types.NetworkIdentifier\n\t// Client is the online API handler\n\tClient crgtypes.Client\n\t// Listen is the address the handler will listen at\n\tListen string\n\t// Offline defines if the rosetta service should be exposed in offline mode\n\tOffline bool\n\t// Retries is the number of readiness checks that will be attempted when instantiating the handler\n\t// valid only for online API\n\tRetries int\n\t// RetryWait is the time that will be waited between retries\n\tRetryWait time.Duration\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Recovery Middleware Type in Go\nDESCRIPTION: Introduces a recoveryMiddleware type and a function to create new middleware. This design allows for chaining multiple recovery handlers and separates object handling from middleware processing.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-022-custom-panic-handling.md#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\ntype recoveryMiddleware func(recoveryObj interface{}) (recoveryMiddleware, error)\n\nfunc newRecoveryMiddleware(handler RecoveryHandler, next recoveryMiddleware) recoveryMiddleware {\n    return func(recoveryObj interface{}) (recoveryMiddleware, error) {\n        if err := handler(recoveryObj); err != nil {\n            return nil, err\n        }\n        return next, nil\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MsgUndelegateResponse in Cosmos SDK Staking Module\nDESCRIPTION: Protobuf definition for the MsgUndelegateResponse which contains the completion time of the undelegation. This response is returned after processing a successful MsgUndelegate transaction.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/staking/README.md#2025-04-22_snippet_13\n\nLANGUAGE: protobuf\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.47.0-rc1/proto/cosmos/staking/v1beta1/tx.proto#L154-L158\n```\n\n----------------------------------------\n\nTITLE: Querying a Vote on a Proposal using gRPC v1beta1 in Cosmos SDK\nDESCRIPTION: The gRPC endpoint for querying an individual vote on a specific proposal using the legacy v1beta1 API.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/README.md#2025-04-22_snippet_36\n\nLANGUAGE: bash\nCODE:\n```\ncosmos.gov.v1beta1.Query/Vote\n```\n\n----------------------------------------\n\nTITLE: Querying All Deposits for a Proposal using v1beta1 in Cosmos SDK\nDESCRIPTION: REST API endpoint for retrieving all deposits for a specific proposal using the legacy v1beta1 path. The endpoint accepts a proposal ID and returns a list of all deposits made for the proposal.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/README.md#2025-04-22_snippet_78\n\nLANGUAGE: bash\nCODE:\n```\n/cosmos/gov/v1beta1/proposals/{proposal_id}/deposits\n```\n\n----------------------------------------\n\nTITLE: Referencing HasConsensusVersion Interface Definition in Go\nDESCRIPTION: This Go code reference marks the HasConsensusVersion extension interface in the Cosmos SDK. HasConsensusVersion enables a module to specify the version number for the consensus logic it implements. This supports seamless upgrades and backward compatibility, and is crucial for state migration and version tracking.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-modules/01-module-manager.md#2025-04-22_snippet_11\n\nLANGUAGE: Go\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/types/module/module.go#L214-L220\n```\n\n----------------------------------------\n\nTITLE: Example of Querying Governance Parameters with gRPC v1beta1 in Cosmos SDK\nDESCRIPTION: A practical example showing how to use grpcurl to query voting parameters using the v1beta1 gRPC endpoint.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/README.md#2025-04-22_snippet_49\n\nLANGUAGE: bash\nCODE:\n```\ngrpcurl -plaintext \\\n    -d '{\"params_type\":\"voting\"}' \\\n    localhost:9090 \\\n    cosmos.gov.v1beta1.Query/Params\n```\n\n----------------------------------------\n\nTITLE: Querying a Proposal using gRPC v1beta1 in Cosmos SDK\nDESCRIPTION: The gRPC endpoint for querying details of a specific proposal using the legacy v1beta1 API.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/README.md#2025-04-22_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\ncosmos.gov.v1beta1.Query/Proposal\n```\n\n----------------------------------------\n\nTITLE: Querying a Specific Redelegation in Cosmos SDK\nDESCRIPTION: This command retrieves details about a specific redelegation based on delegator address, source validator, and destination validator. It shows the redelegation entries with their balances and completion times.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/staking/README.md#2025-04-22_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\nsimd query staking redelegation [delegator-addr] [src-validator-addr] [dst-validator-addr] [flags]\n```\n\nLANGUAGE: bash\nCODE:\n```\nsimd query staking redelegation cosmos1gghjut3ccd8ay0zduzj64hwre2fxs9ld75ru9p cosmosvaloper1l2rsakp388kuv9k8qzq6lrm9taddae7fpx59wm cosmosvaloper1gghjut3ccd8ay0zduzj64hwre2fxs9ldmqhffj\n```\n\n----------------------------------------\n\nTITLE: Transaction JSON Structure Overview\nDESCRIPTION: Defines the JSON file structure used for storing transaction examples, containing three main fields: proto for ProtoJSON representation, screens for SIGN_MODE_TEXTUAL rendering, and cbor for sign bytes encoding.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-050-sign-mode-textual.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"proto\": \"<ProtoJSON representation>\",\n  \"screens\": \"<SIGN_MODE_TEXTUAL screens>\",\n  \"cbor\": \"<CBOR encoding of screens>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example Request for Querying All Deposits with v1beta1\nDESCRIPTION: An example curl command that demonstrates how to query all deposits for proposal ID 1 using the v1beta1 endpoint.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/README.md#2025-04-22_snippet_79\n\nLANGUAGE: bash\nCODE:\n```\ncurl localhost:1317/cosmos/gov/v1beta1/proposals/1/deposits\n```\n\n----------------------------------------\n\nTITLE: Defining Rosetta Message Interface in Go\nDESCRIPTION: This code defines the Msg interface that extends sdk.Msg to provide Rosetta operation conversion capabilities. Developers can implement these methods on their module's messages to extend Rosetta support.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-035-rosetta-api-support.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// Msg represents a cosmos-sdk message that can be converted from and to a rosetta operation.\ntype Msg interface {\n\tsdk.Msg\n\tToOperations(withStatus, hasError bool) []*types.Operation\n\tFromOperations(ops []*types.Operation) (sdk.Msg, error)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing FundCommunityPool Function in Go\nDESCRIPTION: Implementation of the FundCommunityPool function in the distribution keeper. This function transfers coins from a sender to the community pool, updating the fee pool's community pool balance.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/distribution/README.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nfunc (k Keeper) FundCommunityPool(ctx context.Context, amount sdk.Coins, sender sdk.AccAddress) error {\n  if err := k.bankKeeper.SendCoinsFromAccountToModule(ctx, sender, types.ModuleName, amount); err != nil {\n    return err\n  }\n\n  feePool, err := k.FeePool.Get(ctx)\n  if err != nil {\n    return err\n  }\n\n  feePool.CommunityPool = feePool.CommunityPool.Add(sdk.NewDecCoinsFromCoins(amount...)...)\n\t\n  if err := k.FeePool.Set(ctx, feePool); err != nil {\n    return err\n  }\n\n  return nil\n}\n```\n\n----------------------------------------\n\nTITLE: Broadcasting Transactions via REST in Cosmos SDK\nDESCRIPTION: This curl command shows how to broadcast a transaction using the REST endpoint served by gRPC-gateway. It sends a POST request with the protobuf-encoded bytes of a signed transaction to the txs endpoint.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/user/run-node/03-txs.md#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n    -H \"Content-Type: application/json\" \\\n    -d'{\"tx_bytes\":\"{{txBytes}}\",\"mode\":\"BROADCAST_MODE_SYNC\"}' \\\n    localhost:1317/cosmos/tx/v1beta1/txs\n```\n\n----------------------------------------\n\nTITLE: Defining Sign Document Structure in Protocol Buffers\nDESCRIPTION: Message definition for SignDoc which includes the necessary fields for transaction signing including body, auth info, chain ID and account number.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-020-protobuf-transaction-encoding.md#2025-04-22_snippet_2\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage SignDoc {\n    bytes body = 1;\n    bytes auth_info = 2;\n    string chain_id = 3;\n    uint64 account_number = 4;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing AddListeners method for rootmulti store in Go\nDESCRIPTION: Implementation of the AddListeners method for the rootmulti store, which creates a memory listener and associates it with the specified store keys.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-038-state-listening.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// AddListeners adds state change listener for a specific KVStore\nfunc (rs *Store) AddListeners(keys []types.StoreKey) {\n\tlistener := types.NewMemoryListener()\n\tfor i := range keys {\n\t\trs.listeners[keys[i]] = listener\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Panicking in a Module Keeper (Cosmos SDK, Go)\nDESCRIPTION: Demonstrates a FooKeeper method in Go that checks for a nil object and intentionally panics by wrapping a custom internal error. Relies on fooTypes.InternalError and errorsmod.Wrap, which must be available from the Cosmos SDK and related module imports. Intended as an example of a panic that will trigger recovery middleware if installed. Input: interface{} obj; Output: panics if obj is nil. No return value.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/advanced/11-runtx_middleware.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc (k FooKeeper) Do(obj interface{}) {\n    if obj == nil {\n        // that shouldn't happen, we need to crash the app\n        err := errorsmod.Wrap(fooTypes.InternalError, \"obj is nil\")\n        panic(err)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Msg Return Types Using Protobuf Extension Fields (Proposed but Not Adopted)\nDESCRIPTION: Early proposal for capturing Msg return types using a protobuf extension field. This approach was discussed but never adopted.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-031-msg-service.md#2025-04-22_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\npackage cosmos.gov;\n\nmessage MsgSubmitProposal\n\toption (cosmos_proto.msg_return) = \"uint64\";\n\tstring delegator_address = 1;\n\tstring validator_address = 2;\n\trepeated sdk.Coin amount = 3;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DecCoins Structure for Distribution in Go\nDESCRIPTION: Defines the DecCoins structure which holds decimal coins to allow for fractions of coins in the reward pool. This is essential for operations like inflation that may result in fractional coin amounts.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/distribution/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// coins with decimal\ntype DecCoins []DecCoin\n\ntype DecCoin struct {\n    Amount math.LegacyDec\n    Denom  string\n}\n```\n\n----------------------------------------\n\nTITLE: CreateGroupPolicy Message Definition in Protobuf\nDESCRIPTION: Protocol buffer definition for MsgCreateGroupPolicy which creates a new group policy with admin address, group ID, decision policy and optional metadata.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/group/README.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/tree/release/v0.50.x/proto/cosmos/group/v1/tx.proto#L147-L165\n```\n\n----------------------------------------\n\nTITLE: Initializing AppConfig with Go\nDESCRIPTION: This snippet demonstrates how to embed and load an application configuration using YAML with Go's 'go:embed' feature. It relies on the 'appconfig' package to read YAML configurations which specify various module settings for 'SimApp'. The configuration is embedded as 'app_config.yaml' and is loaded into 'appConfig'. This requires the 'appconfig' package to load YAML data.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-apps/01-app-go-di.md#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n//go:embed app_config.yaml\nvar (\n    appConfigYaml []byte\n    appConfig = appconfig.LoadYAML(appConfigYaml)\n)\n```\n\n----------------------------------------\n\nTITLE: Querying DelegatorValidators in Cosmos SDK\nDESCRIPTION: The DelegatorValidators endpoint retrieves information about all validators a specific delegator has delegated to. It requires the delegator address and returns detailed information about each validator including operator address, consensus key, status, and commission rates.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/staking/README.md#2025-04-22_snippet_50\n\nLANGUAGE: bash\nCODE:\n```\ncosmos.staking.v1beta1.Query/DelegatorValidators\n```\n\nLANGUAGE: bash\nCODE:\n```\ngrpcurl -plaintext \\\n-d '{\"delegator_addr\": \"cosmos1ld5p7hn43yuh8ht28gm9pfjgj2fctujp2tgwvf\"}' \\\nlocalhost:9090 cosmos.staking.v1beta1.Query/DelegatorValidators\n```\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"validators\": [\n    {\n      \"operator_address\": \"cosmosvaloper1eh5mwu044gd5ntkkc2xgfg8247mgc56fww3vc8\",\n      \"consensus_pubkey\": {\n        \"@type\": \"/cosmos.crypto.ed25519.PubKey\",\n        \"key\": \"UPwHWxH1zHJWGOa/m6JB3f5YjHMvPQPkVbDqqi+U7Uw=\"\n      },\n      \"jailed\": false,\n      \"status\": \"BOND_STATUS_BONDED\",\n      \"tokens\": \"347260647559\",\n      \"delegator_shares\": \"347260647559.000000000000000000\",\n      \"description\": {\n        \"moniker\": \"BouBouNode\",\n        \"identity\": \"\",\n        \"website\": \"https://boubounode.com\",\n        \"security_contact\": \"\",\n        \"details\": \"AI-based Validator. #1 AI Validator on Game of Stakes. Fairly priced. Don't trust (humans), verify. Made with BouBou love.\"\n      },\n      \"unbonding_height\": \"0\",\n      \"unbonding_time\": \"1970-01-01T00:00:00Z\",\n      \"commission\": {\n        \"commission_rates\": {\n          \"rate\": \"0.061000000000000000\",\n          \"max_rate\": \"0.300000000000000000\",\n          \"max_change_rate\": \"0.150000000000000000\"\n        },\n        \"update_time\": \"2021-10-01T15:00:00Z\"\n      },\n      \"min_self_delegation\": \"1\"\n    }\n  ],\n  \"pagination\": {\n    \"next_key\": null,\n    \"total\": \"1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Votes for a Proposal using v1 in Cosmos SDK\nDESCRIPTION: REST API endpoint for retrieving all votes for a specific proposal using the v1 path. Similar to the v1beta1 endpoint but with the updated API version.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/README.md#2025-04-22_snippet_63\n\nLANGUAGE: bash\nCODE:\n```\n/cosmos/gov/v1/proposals/{proposal_id}/votes\n```\n\n----------------------------------------\n\nTITLE: Creating Periodic Vesting Account in Cosmos SDK\nDESCRIPTION: Creates a new vesting account with periodic vesting schedule defined in a JSON file. Each period starts sequentially after the previous period ends, with the first period starting at account creation.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/auth/vesting/README.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nsimd tx vesting create-periodic-vesting-account [to_address] [periods_json_file] [flags]\n```\n\nLANGUAGE: bash\nCODE:\n```\nsimd tx vesting create-periodic-vesting-account cosmos1.. periods.json\n```\n\n----------------------------------------\n\nTITLE: Defining Evidence Message Structure in Protobuf\nDESCRIPTION: Shows how to define a message structure in protobuf that uses Any type to wrap interface implementations, specifically for the evidence module's MsgSubmitEvidence.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/advanced/05-encoding.md#2025-04-22_snippet_6\n\nLANGUAGE: protobuf\nCODE:\n```\n// proto/cosmos/evidence/v1beta1/tx.proto\n\nmessage MsgSubmitEvidence {\n  string              submitter = 1;\n  google.protobuf.Any evidence  = 2 [(cosmos_proto.accepts_interface) = \"cosmos.evidence.v1beta1.Evidence\"];\n}\n```\n\n----------------------------------------\n\nTITLE: Example Output of Vote Query with gRPC v1 in Cosmos SDK\nDESCRIPTION: The JSON response structure when querying a vote using the v1 gRPC endpoint, showing the voter's choice and weight.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/README.md#2025-04-22_snippet_41\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"vote\": {\n    \"proposalId\": \"1\",\n    \"voter\": \"cosmos1..\",\n    \"option\": \"VOTE_OPTION_YES\",\n    \"options\": [\n      {\n        \"option\": \"VOTE_OPTION_YES\",\n        \"weight\": \"1.000000000000000000\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Transaction Signatures in Cosmos SDK\nDESCRIPTION: Validates the signatures of a signed transaction in Cosmos SDK.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/auth/README.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nsimd tx validate-signatures tx.signed.json\n```\n\n----------------------------------------\n\nTITLE: Defining MsgSoftwareUpgrade Message in Protobuf\nDESCRIPTION: Protobuf definition for the MsgSoftwareUpgrade message used in upgrade proposals.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/upgrade/README.md#2025-04-22_snippet_3\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage MsgSoftwareUpgrade {\n  string                 authority = 1;\n  cosmos.upgrade.v1beta1.Plan plan     = 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CommitKVStoreCacheManager Interface in Go\nDESCRIPTION: Defines the CommitKVStoreCacheManager interface which maintains a mapping from store keys to KVStores. It tracks the cache size and manages a map of caches.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/spec/store/interblock-cache.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype CommitKVStoreCacheManager interface{\n    cacheSize uint\n    caches map[string]CommitKVStore\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Mapping Methods for State Space Operations\nDESCRIPTION: Core methods for the Mapping type that provide state space operations and proxy calls to Value methods.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-012-state-accessors.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// Constructs key-value pair reference corresponding to the key argument in the Mapping space\nfunc (Mapping) Value(key []byte) Value {}\n\n// Get and unmarshal stored data, noop if not exists, panic if cannot unmarshal\nfunc (Mapping) Get(ctx Context, key []byte, ptr interface{}) {}\n\n// Get and unmarshal stored data, return error if not exists or cannot unmarshal\nfunc (Mapping) GetSafe(ctx Context, key []byte, ptr interface{})\n\n// Get stored data as raw byte slice\nfunc (Mapping) GetRaw(ctx Context, key []byte) []byte {}\n\n// Marshal and set a raw value\nfunc (Mapping) Set(ctx Context, key []byte, o interface{}) {}\n\n// Check if a raw value exists\nfunc (Mapping) Has(ctx Context, key []byte) bool {}\n\n// Delete a raw value value\nfunc (Mapping) Delete(ctx Context, key []byte) {}\n```\n\n----------------------------------------\n\nTITLE: Plugin Loading and Registration System in Go\nDESCRIPTION: Implementation of plugin loading and registration functionality including utility functions for handling store keys.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-038-state-listening.md#2025-04-22_snippet_18\n\nLANGUAGE: go\nCODE:\n```\nfunc NewStreamingPlugin(name string, logLevel string) (interface{}, error) {\n    logger := hclog.New(&hclog.LoggerOptions{\n       Output: hclog.DefaultOutput,\n       Level:  toHclogLevel(logLevel),\n       Name:   fmt.Sprintf(\"plugin.%s\", name),\n    })\n\n    // We're a host. Start by launching the streaming process.\n    env := os.Getenv(GetPluginEnvKey(name))\n    client := plugin.NewClient(&plugin.ClientConfig{\n       HandshakeConfig: HandshakeMap[name],\n       Plugins:         PluginMap,\n       Cmd:             exec.Command(\"sh\", \"-c\", env),\n       Logger:          logger,\n       AllowedProtocols: []plugin.Protocol{\n           plugin.ProtocolNetRPC, plugin.ProtocolGRPC},\n    })\n\n    // Connect via RPC\n    rpcClient, err := client.Client()\n    if err != nil {\n       return nil, err\n    }\n\n    // Request streaming plugin\n    return rpcClient.Dispense(name)\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing appmodule.AppModule Interface Definition in Go\nDESCRIPTION: This Go code reference shows where the core appmodule.AppModule interface is defined. This key interface determines the structure by which application modules declare dependencies and capabilities using extension interfaces. Modules employing this should include the necessary extension interfaces (e.g., HasBeginBlocker) to enable ordered lifecycle hook execution.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-modules/01-module-manager.md#2025-04-22_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/6afece6/core/appmodule/module.go#L11-L20\n```\n\n----------------------------------------\n\nTITLE: Configuring ABCI Streaming in TOML\nDESCRIPTION: This TOML configuration snippet demonstrates how to set up ABCI streaming in a Cosmos SDK application. It includes settings for the plugin version, keys to listen to, asynchronous operation, and error handling.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-038-state-listening.md#2025-04-22_snippet_20\n\nLANGUAGE: toml\nCODE:\n```\n# gRPC streaming\n[streaming]\n\n# ABCI streaming service\n[streaming.abci]\n\n# The plugin version to use for ABCI listening\nplugin = \"abci_v1\"\n\n# List of kv store keys to listen to for state changes.\n# Set to [\"*\"] to expose all keys.\nkeys = [\"*\"]\n\n# Enable abciListeners to run asynchronously.\n# When abciListenersAsync=false and stopNodeOnABCIListenerErr=false listeners will run synchronized but will not stop the node.\n# When abciListenersAsync=true stopNodeOnABCIListenerErr will be ignored.\nasync = false\n\n# Whether to stop the node on message deliver error.\nstop-node-on-err = true\n```\n\n----------------------------------------\n\nTITLE: Defining GenesisAccount Interface in Go\nDESCRIPTION: Defines the GenesisAccount interface that includes validation capabilities.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-011-generalize-genesis-accounts.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ntype GenesisAccount interface {\n    exported.Account\n    Validate() error\n}\n```\n\n----------------------------------------\n\nTITLE: MsgExec Protobuf Definition for Executing Authorized Messages\nDESCRIPTION: The MsgExec message protobuf definition used by a grantee to execute messages on behalf of a granter. It specifies the grantee and a list of messages to execute under authorization.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/authz/README.md#2025-04-22_snippet_12\n\nLANGUAGE: protobuf\nCODE:\n```\n// MsgExec attempts to execute the provided messages using\n// authorizations granted to the grantee. Each message should have only\n// one signer corresponding to the granter of the authorization.\nmessage MsgExec {\n  string grantee = 1;\n  // Authorization Msg requests to execute. Each msg must implement Authorization interface\n  // The x/authz will try to find a grant matching (msg.signers[0], grantee, MsgTypeURL(msg))\n  // triple and validate it.\n  repeated google.protobuf.Any msgs = 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Plugin Implementation and Main Function in Go\nDESCRIPTION: Pre-compiled Go plugin implementation showcasing the ABCI listener functionality and plugin server setup.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-038-state-listening.md#2025-04-22_snippet_17\n\nLANGUAGE: go\nCODE:\n```\ntype ABCIListener struct{}\n\nfunc (m *ABCIListenerPlugin) ListenFinalizeBlock(ctx context.Context, req abci.RequestFinalizeBlock, res abci.ResponseFinalizeBlock) error {\n    // send data to external system\n}\n\nfunc (m *ABCIListenerPlugin) ListenCommit(ctx context.Context, res abci.ResponseCommit, changeSet []store.StoreKVPair) error {\n    // send data to external system\n}\n\nfunc main() {\n    plugin.Serve(&plugin.ServeConfig{\n        HandshakeConfig: grpc_abci_v1.Handshake,\n        Plugins: map[string]plugin.Plugin{\n           \"grpc_plugin_v1\": &grpc_abci_v1.ABCIListenerGRPCPlugin{Impl: &ABCIListenerPlugin{}},\n        },\n\n        // A non-nil value here enables gRPC serving for this streaming...\n        GRPCServer: plugin.DefaultGRPCServer,\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing New Params Structure and Update Message in Go for x/auth Module\nDESCRIPTION: Example of how to implement the new parameter management approach in Go for the x/auth module. It includes the Params struct, MsgUpdateParams for parameter updates, and the UpdateParams method to handle parameter changes.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-046-module-params.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype Params struct {\n\tMaxMemoCharacters      uint64\n\tTxSigLimit             uint64\n\tTxSizeCostPerByte      uint64\n\tSigVerifyCostED25519   uint64\n\tSigVerifyCostSecp256k1 uint64\n}\n\ntype MsgUpdateParams struct {\n\tMaxMemoCharacters      uint64\n\tTxSigLimit             uint64\n\tTxSizeCostPerByte      uint64\n\tSigVerifyCostED25519   uint64\n\tSigVerifyCostSecp256k1 uint64\n}\n\ntype MsgUpdateParamsResponse struct {}\n\nfunc (ms msgServer) UpdateParams(goCtx context.Context, msg *types.MsgUpdateParams) (*types.MsgUpdateParamsResponse, error) {\n  ctx := sdk.UnwrapSDKContext(goCtx)\n\n  // verification logic...\n\n  // persist params\n  params := ParamsFromMsg(msg)\n  ms.SaveParams(ctx, params)\n\n  return &types.MsgUpdateParamsResponse{}, nil\n}\n\nfunc ParamsFromMsg(msg *types.MsgUpdateParams) Params {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FileDescriptor Registration Options in Go\nDESCRIPTION: Defines options for registering FileDescriptors in different scenarios, including google.golang.org/protobuf compatible code, gogo proto generated code, and buf build generated descriptors.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-054-semver-compatible-modules.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\npackage appmodule\n\n// this can be used when we are using google.golang.org/protobuf compatible generated code\n// Ex:\n//   ProtoFiles(bankv1beta1.File_cosmos_bank_v1beta1_module_proto)\nfunc ProtoFiles(file []protoreflect.FileDescriptor) Option {}\n\n// this can be used when we are using gogo proto generated code.\nfunc GzippedProtoFiles(file [][]byte) Option {}\n\n// this can be used when we are using buf build to generated a pinned file descriptor\nfunc ProtoImage(protoImage []byte) Option {}\n```\n\n----------------------------------------\n\nTITLE: Using KVStoreService in a Message Handler\nDESCRIPTION: Demonstrates how to use the KVStoreService in a message handler function within a cosmos-sdk module.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-063-core-module-api.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc (k msgServer) Send(ctx context.Context, msg *types.MsgSend) (*types.MsgSendResponse, error) {\n    store := k.kvStoreSvc.OpenKVStore(ctx)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Genesis Validation in Go\nDESCRIPTION: Implements validation logic for auth genesis data including account duplication checks.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-011-generalize-genesis-accounts.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// ValidateGenesis performs basic validation of auth genesis data returning an\n// error for any failed validation criteria.\nfunc ValidateGenesis(data GenesisState) error {\n    // Validate params\n    ...\n\n    // Validate accounts\n    addrMap := make(map[string]bool, len(data.Accounts))\n    for _, acc := range data.Accounts {\n\n        // check for duplicated accounts\n        addrStr := acc.GetAddress().String()\n        if _, ok := addrMap[addrStr]; ok {\n            return fmt.Errorf(\"duplicate account found in genesis state; address: %s\", addrStr)\n        }\n        addrMap[addrStr] = true\n\n        // check account specific validation\n        if err := acc.Validate(); err != nil {\n            return fmt.Errorf(\"invalid account found in genesis state; address: %s, error: %s\", addrStr, err.Error())\n        }\n\n    }\n    return nil\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MintKeeper with Custom Minting Function\nDESCRIPTION: Example of implementing and adding a custom minting function to the MintKeeper. This demonstrates how to override the default minting behavior in the x/mint module.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/UPGRADING.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc myCustomMintFunc(ctx sdk.Context, k *mintkeeper.Keeper) {\n   // do minting...\n}\n\n// ...\n   mintKeeper := mintkeeper.NewKeeper(\n       appCodec,\n       storeService,\n       stakingKeeper,\n       accountKeeper,\n       bankKeeper,\n       authtypes.FeeCollectorName,\n       authtypes.NewModuleAddress(govtypes.ModuleName).String(),\n       mintkeeper.WithMintFn(myCustomMintFunc), // Use custom minting function\n   )\n```\n\n----------------------------------------\n\nTITLE: Signing Offline Transactions in Cosmos SDK\nDESCRIPTION: Signs transactions that were generated offline in Cosmos SDK.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/auth/README.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsimd tx sign tx.json --from $ALICE > tx.signed.json\n```\n\n----------------------------------------\n\nTITLE: Defining DelegationDistInfo Structure in Go\nDESCRIPTION: Defines the DelegationDistInfo structure which records the height at which a delegation last withdrew fees. This information is used for passive calculation of a delegator's accumulation factor.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/distribution/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype DelegationDistInfo struct {\n    WithdrawalHeight int64    // last time this delegation withdrew rewards\n}\n```\n\n----------------------------------------\n\nTITLE: Updating CacheMultiStoreWithVersion for listener support in Go\nDESCRIPTION: Modification of the CacheMultiStoreWithVersion method to ensure ListenKVStore wrappers are properly applied in the versioned cache, capturing state changes in the versioned cache.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-038-state-listening.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nfunc (rs *Store) CacheMultiStoreWithVersion(version int64) (types.CacheMultiStore, error) {\n // ...\n\n        // Wire the listenkv.Store to allow listeners to observe the writes from the cache store,\n        // set same listeners on cache store will observe duplicated writes.\n        if rs.ListeningEnabled(key) {\n            cacheStore = listenkv.NewStore(cacheStore, key, rs.listeners[key])\n        }\n\n        cachedStores[key] = cacheStore\n    }\n\n    return cachemulti.NewStore(rs.db, cachedStores, rs.keysByName, rs.traceWriter, rs.getTracingContext()), nil\n}\n```\n\n----------------------------------------\n\nTITLE: Example: Creating Lending Pool Module Address in Go\nDESCRIPTION: Illustrates creating a module account address for a BTC lending pool using the `address.Module` function. It takes the module name \"lending\" and the BTC address as the derivation key. Note the potentially extraneous closing parenthesis and brace `})` in the original snippet.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-028-public-key-addresses.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nbtcPool := address.Module(\"lending\", btc.Address()})\n```\n\n----------------------------------------\n\nTITLE: Implementing SubmitEvidence Keeper Method in Go\nDESCRIPTION: Implements the SubmitEvidence method in the module's keeper for routing and handling evidence submissions.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-009-evidence-module.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfunc (k Keeper) SubmitEvidence(ctx Context, evidence Evidence) error {\n  handler := keeper.router.GetRoute(evidence.Route())\n  if err := handler(ctx, evidence); err != nil {\n    return ErrInvalidEvidence(keeper.codespace, err)\n  }\n\n  keeper.setEvidence(ctx, evidence)\n  return nil\n}\n```\n\n----------------------------------------\n\nTITLE: Revoke Authorization Command in Cosmos SDK\nDESCRIPTION: The revoke command allows a granter to revoke a previously granted authorization from a grantee for a specific message type.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/authz/README.md#2025-04-22_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nsimd tx authz revoke [grantee] [msg-type-url] --from=[granter] [flags]\n```\n\n----------------------------------------\n\nTITLE: Configuring Modules with YAML\nDESCRIPTION: This YAML configuration snippet is utilized to define the settings for different modules within 'SimApp'. The configuration specifies parameters for modules such as 'runtime', 'auth', 'bank', and 'staking'. Each module is defined with a type and specific settings. The config is used by Go to set up the application environment in a structured format understood by Cosmos SDK.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-apps/01-app-go-di.md#2025-04-22_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nmodules:\n  - name: runtime\n    config:\n      \"@type\": cosmos.app.runtime.v1alpha1.Module\n      app_name: SimApp\n      begin_blockers: [staking, auth, bank]\n      end_blockers: [bank, auth, staking]\n      init_genesis: [bank, auth, staking]\n  - name: auth\n    config:\n      \"@type\": cosmos.auth.module.v1.Module\n      bech32_prefix: cosmos\n  - name: bank\n    config:\n      \"@type\": cosmos.bank.module.v1.Module\n  - name: staking\n    config:\n      \"@type\": cosmos.staking.module.v1.Module\n  - name: tx\n    config:\n      \"@type\": cosmos.tx.module.v1.Module\n\n```\n\n----------------------------------------\n\nTITLE: Querying Delegator Validator Information with gRPC in Cosmos Staking Module\nDESCRIPTION: This gRPC endpoint queries validator information for a given delegator. It requires both the delegator address and validator address as input parameters and returns comprehensive validator details including status, tokens, commission rates, and description.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/staking/README.md#2025-04-22_snippet_51\n\nLANGUAGE: bash\nCODE:\n```\ncosmos.staking.v1beta1.Query/DelegatorValidator\n```\n\nLANGUAGE: bash\nCODE:\n```\ngrpcurl -plaintext \\\n-d '{\"delegator_addr\": \"cosmos1eh5mwu044gd5ntkkc2xgfg8247mgc56f3n8rr7\", \"validator_addr\": \"cosmosvaloper1eh5mwu044gd5ntkkc2xgfg8247mgc56fww3vc8\"}' \\\nlocalhost:9090 cosmos.staking.v1beta1.Query/DelegatorValidator\n```\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"validator\": {\n    \"operator_address\": \"cosmosvaloper1eh5mwu044gd5ntkkc2xgfg8247mgc56fww3vc8\",\n    \"consensus_pubkey\": {\n      \"@type\": \"/cosmos.crypto.ed25519.PubKey\",\n      \"key\": \"UPwHWxH1zHJWGOa/m6JB3f5YjHMvPQPkVbDqqi+U7Uw=\"\n    },\n    \"jailed\": false,\n    \"status\": \"BOND_STATUS_BONDED\",\n    \"tokens\": \"347262754841\",\n    \"delegator_shares\": \"347262754841.000000000000000000\",\n    \"description\": {\n      \"moniker\": \"BouBouNode\",\n      \"identity\": \"\",\n      \"website\": \"https://boubounode.com\",\n      \"security_contact\": \"\",\n      \"details\": \"AI-based Validator. #1 AI Validator on Game of Stakes. Fairly priced. Don't trust (humans), verify. Made with BouBou love.\"\n    },\n    \"unbonding_height\": \"0\",\n    \"unbonding_time\": \"1970-01-01T00:00:00Z\",\n    \"commission\": {\n      \"commission_rates\": {\n        \"rate\": \"0.061000000000000000\",\n        \"max_rate\": \"0.300000000000000000\",\n        \"max_change_rate\": \"0.150000000000000000\"\n      },\n      \"update_time\": \"2021-10-01T15:00:00Z\"\n    },\n    \"min_self_delegation\": \"1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining HasPrecommit Interface in Go\nDESCRIPTION: The `HasPrecommit` Go interface extends `appmodule.AppModule`. Modules implementing this provide a `Precommit` method, allowing logic execution during the `Commit` phase of each block, utilizing the `finalizeblockstate`. This method takes a `context.Context` and should be implemented as empty if no precommit logic is needed.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-modules/01-module-manager.md#2025-04-22_snippet_15\n\nLANGUAGE: go\nCODE:\n```\n```go reference\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/core/appmodule/module.go#L49-L52\n```\n```\n\n----------------------------------------\n\nTITLE: Defining MsgCancelUnbondingDelegation Interface in Cosmos SDK\nDESCRIPTION: Protobuf reference for the MsgCancelUnbondingDelegation interface that allows delegators to cancel an unbonding delegation entry and delegate back to a previous validator.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/staking/README.md#2025-04-22_snippet_14\n\nLANGUAGE: protobuf\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.47.0-rc1/proto/cosmos/staking/v1beta1/tx.proto#L38-L42\n```\n\n----------------------------------------\n\nTITLE: Defining Value Type in Go for State Access\nDESCRIPTION: Core Value struct definition that works as a reference for a key-value pair in the state. Contains mapping information and specific key data.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-012-state-accessors.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype Value struct {\n  m   Mapping\n  key []byte\n}\n```\n\n----------------------------------------\n\nTITLE: Chaining Auth Module AnteHandlers in Go for Cosmos SDK\nDESCRIPTION: Combines VerifySignatures and ValidateMemo micro-functions into a single AuthModuleAnteHandler using the Chainer function.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-010-modular-antehandler.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nAuthModuleAnteHandler := Chainer([]AnteHandler{VerifySignatures, ValidateMemo})\n```\n\n----------------------------------------\n\nTITLE: Using Confix Diff Command\nDESCRIPTION: Examples of using the Confix diff command to compare configuration files with default versions.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/tools/confix/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsimd config diff v0.47 # gets the diff between defaultHome/config/app.toml and the latest v0.47 config\nsimd config diff v0.47 --client # gets the diff between defaultHome/config/client.toml and the latest v0.47 config\n```\n\nLANGUAGE: bash\nCODE:\n```\nconfix diff v0.47 ~/.simapp/config/app.toml # gets the diff between ~/.simapp/config/app.toml and the latest v0.47 config\nconfix diff v0.47 ~/.simapp/config/client.toml --client # gets the diff between ~/.simapp/config/client.toml and the latest v0.47 config\n```\n\n----------------------------------------\n\nTITLE: Defining Unordered Transaction Fields in Protobuf\nDESCRIPTION: Adds 'unordered' and 'timeout_timestamp' fields to the TxBody message for handling unordered transactions.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-070-unordered-account.md#2025-04-22_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage TxBody {\n  ...\n          \n  bool unordered = 4;\n  google.protobuf.Timestamp timeout_timestamp = 5\n}\n```\n\n----------------------------------------\n\nTITLE: Defining VerifyVoteExtensionHandler in Go for Cosmos SDK\nDESCRIPTION: Definition of the VerifyVoteExtensionHandler function type used to verify vote extensions from other validators in ABCI++.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/abci/03-vote-extensions.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype VerifyVoteExtensionHandler func(Context, *abci.RequestVerifyVoteExtension) (*abci.ResponseVerifyVoteExtension, error)\n```\n\n----------------------------------------\n\nTITLE: Querying Governance Module Parameters using gRPC v1 in Cosmos SDK\nDESCRIPTION: The gRPC endpoint for querying governance module parameters using the current v1 API.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/README.md#2025-04-22_snippet_51\n\nLANGUAGE: bash\nCODE:\n```\ncosmos.gov.v1.Query/Params\n```\n\n----------------------------------------\n\nTITLE: Validating Vote Extensions in Cosmos SDK\nDESCRIPTION: This Go code snippet defines a function `ValidateVoteExtensions` within the `BaseApp` for verifying vote extension signatures in the Cosmos SDK. It checks that at least 2/3 of validators' signatures (by voting power) are valid for a given block to be considered valid. Dependencies include an interface `ValidatorStore` that retrieves public keys from consensus addresses, and a method to verify signatures. It requires the `x/staking` module for accessing validators' public keys. Expected inputs are the application context, current block height, and vote extension commit information. Errors are returned if votes are missing or invalid signatures are found.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-064-abci-2.0.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype ValidatorStore interface {\n\tGetPubKeyByConsAddr(context.Context, sdk.ConsAddress) (cmtprotocrypto.PublicKey, error)\n}\n\n// ValidateVoteExtensions is a function that an application can execute in\n// ProcessProposal to verify vote extension signatures.\nfunc (app *BaseApp) ValidateVoteExtensions(ctx sdk.Context, currentHeight int64, extCommit abci.ExtendedCommitInfo) error {\n\tvotingPower := 0\n\ttotalVotingPower := 0\n\n\tfor _, vote := range extCommit.Votes {\n\t\ttotalVotingPower += vote.Validator.Power\n\n\t\tif !vote.SignedLastBlock || len(vote.VoteExtension) == 0 {\n\t\t\tcontinue\n\t\t}\n\n\t\tvalConsAddr := sdk.ConsAddress(vote.Validator.Address)\n\t\tpubKeyProto, err := valStore.GetPubKeyByConsAddr(ctx, valConsAddr)\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"failed to get public key for validator %s: %w\", valConsAddr, err)\n\t\t}\n\n\t\tif len(vote.ExtensionSignature) == 0 {\n\t\t\treturn fmt.Errorf(\"received a non-empty vote extension with empty signature for validator %s\", valConsAddr)\n\t\t}\n\n\t\tcmtPubKey, err := cryptoenc.PubKeyFromProto(pubKeyProto)\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"failed to convert validator %X public key: %w\", valConsAddr, err)\n\t\t}\n\n\t\tcve := cmtproto.CanonicalVoteExtension{\n\t\t\tExtension: vote.VoteExtension,\n\t\t\tHeight:    currentHeight - 1, // the vote extension was signed in the previous height\n\t\t\tRound:     int64(extCommit.Round),\n\t\t\tChainId:   app.GetChainID(),\n\t\t}\n\n\t\textSignBytes, err := cosmosio.MarshalDelimited(&cve)\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"failed to encode CanonicalVoteExtension: %w\", err)\n\t\t}\n\n\t\tif !cmtPubKey.VerifySignature(extSignBytes, vote.ExtensionSignature) {\n\t\t\treturn errors.New(\"received vote with invalid signature\")\n\t\t}\n\n\t\tvotingPower += vote.Validator.Power\n\t}\n\n\tif (votingPower / totalVotingPower) < threshold {\n\t\treturn errors.New(\"not enough voting power for the vote extensions\")\n\t}\n\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Generated Go Code for Module Configuration (Cosmos SDK, Go)\nDESCRIPTION: This snippet references the auto-generated Go file from the Pulsar code generator for module configuration. It exposes the generated types and methods for module wiring, making configurations available to Go code. The input is the compiled Protobuf message; output is a Go struct or message usable in the application. This depends on having run Pulsar (or protoc-gen-go) successfully, and will not exist otherwise.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-modules/15-depinject.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nreference\\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/api/cosmos/group/module/v1/module.pulsar.go#L515-L527\n```\n\n----------------------------------------\n\nTITLE: Defining MsgSignData Protocol Buffer Message\nDESCRIPTION: Protocol buffer definition for MsgSignData message type that enables signing arbitrary off-chain data. The message contains a signer address field and a data field for arbitrary bytes.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-036-arbitrary-signature.md#2025-04-22_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\n// MsgSignData defines an arbitrary, general-purpose, off-chain message\nmessage MsgSignData {\n    // Signer is the sdk.AccAddress of the message signer\n    bytes Signer = 1 [(gogoproto.jsontag) = \"signer\", (gogoproto.casttype) = \"github.com/cosmos/cosmos-sdk/types.AccAddress\"];\n    // Data represents the raw bytes of the content that is signed (text, json, etc)\n    bytes Data = 2 [(gogoproto.jsontag) = \"data\"];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DecisionPolicy Interface in Go\nDESCRIPTION: Interface definition for decision policies that determine how group proposals are evaluated. Includes methods for getting windows, validating policies and decisions, and getting voting results.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/group/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nreference\nhttps://github.com/cosmos/cosmos-sdk/tree/release/v0.50.x/x/group/types.go#L27-L45\n```\n\n----------------------------------------\n\nTITLE: MsgRevoke Protobuf Definition for Removing Authorizations\nDESCRIPTION: The MsgRevoke message protobuf definition used to remove an authorization grant. It identifies the grant to revoke by the granter, grantee, and message type URL associated with the authorization.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/authz/README.md#2025-04-22_snippet_11\n\nLANGUAGE: protobuf\nCODE:\n```\n// MsgRevoke revokes any authorization with the provided sdk.Msg type on the\n// granter's account with that has been granted to the grantee.\nmessage MsgRevoke {\n  string granter = 1;\n  string grantee = 2;\n  string msg_type_url = 3;\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation of dCERT Group Implementation\nDESCRIPTION: Comprehensive documentation detailing the architecture and implementation requirements for a Decentralized Computer Emergency Response Team (dCERT) group, including continuous voting mechanisms, membership management, and security controls.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-008-dCERT-group.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# ADR 008: Decentralized Computer Emergency Response Team (dCERT) Group\n\n## Changelog\n\n* 2019 Jul 31: Initial Draft\n\n## Context\n\nIn order to reduce the number of parties involved with handling sensitive\ninformation in an emergency scenario, we propose the creation of a\nspecialization group named The Decentralized Computer Emergency Response Team\n(dCERT).  Initially this group's role is intended to serve as coordinators\nbetween various actors within a blockchain community such as validators,\nbug-hunters, and developers.  During a time of crisis, the dCERT group would\naggregate and relay input from a variety of stakeholders to the developers who\nare actively devising a patch to the software, this way sensitive information\ndoes not need to be publicly disclosed while some input from the community can\nstill be gained.\n\nAdditionally, a special privilege is proposed for the dCERT group: the capacity\nto \"circuit-break\" (aka. temporarily disable)  a particular message path. Note\nthat this privilege should be enabled/disabled globally with a governance\nparameter such that this privilege could start disabled and later be enabled\nthrough a parameter change proposal, once a dCERT group has been established.\n\nIn the future it is foreseeable that the community may wish to expand the roles\nof dCERT with further responsibilities such as the capacity to \"pre-approve\" a\nsecurity update on behalf of the community prior to a full community\nwide vote whereby the sensitive information would be revealed prior to a\nvulnerability being patched on the live network.\n```\n\n----------------------------------------\n\nTITLE: MultiKeyIndex Structure Definition\nDESCRIPTION: Definition of MultiKeyIndex which allows multiple index entries to point to the same object.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/group/internal/orm/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nreference\nhttps://github.com/cosmos/cosmos-sdk/tree/release/v0.50.x/x/group/internal/orm/index.go#L26-L32\n```\n\n----------------------------------------\n\nTITLE: Keeper Initialization with Custom Mint Function\nDESCRIPTION: Example showing how to initialize the mint keeper with a custom minting function.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/mint/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\napp.MintKeeper = mintkeeper.NewKeeper(\n\t\tappCodec,\n\t\truntime.NewKVStoreService(keys[minttypes.StoreKey]),\n\t\tapp.StakingKeeper,\n\t\tapp.AccountKeeper,\n\t\tapp.BankKeeper,\n\t\tauthtypes.FeeCollectorName,\n\t\tauthtypes.NewModuleAddress(govtypes.ModuleName).String(),\n\t\t// mintkeeper.WithMintFn(CUSTOM_MINT_FN), // custom mintFn can be added here\n\t)\n```\n\n----------------------------------------\n\nTITLE: Full Example of depinject Usage in a Cosmos SDK Application\nDESCRIPTION: Demonstrates the use of depinject.Inject in a real Cosmos SDK application, showing how to inject dependencies into the application structure.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/depinject/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nvar(\n\t\tapp *simapp.SimApp\n\t\tappBuilder *runtime.AppBuilder\n\t\tappConfig simapp.SimAppConfig\n\t)\n\n\terr := depinject.Inject(appConfig,\n\t\t&appBuilder,\n\t\t&app,\n\t\tdepinject.Supply(\n\t\t\ttrace.NewStore(db),\n\t\t\tlog.NewNopLogger(),\n\t\t\tks,\n\t\t\tsm,\n\t\t\tserializer,\n\t\t\tauthzMsgServer,\n\t\t\tbech32,\n\t\t),\n\t)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n```\n\n----------------------------------------\n\nTITLE: Defining ExtensionSnapshotter Interface in Cosmos SDK\nDESCRIPTION: Interface definition for ExtensionSnapshotter, which extends the basic Snapshotter interface with additional methods for managing extension-specific formats and naming. Modules that maintain state outside of IAVL trees must implement this interface.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-049-state-sync-hooks.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// ExtensionPayloadReader read extension payloads,\n// it returns io.EOF when reached either end of stream or the extension boundaries.\ntype ExtensionPayloadReader = func() ([]byte, error)\n\n// ExtensionPayloadWriter is a helper to write extension payloads to underlying stream.\ntype ExtensionPayloadWriter = func([]byte) error\n\n// ExtensionSnapshotter is an extension Snapshotter that is appended to the snapshot stream.\n// ExtensionSnapshotter has an unique name and manages it's own internal formats.\ntype ExtensionSnapshotter interface {\n\t// SnapshotName returns the name of snapshotter, it should be unique in the manager.\n\tSnapshotName() string\n\n\t// SnapshotFormat returns the default format used to take a snapshot.\n\tSnapshotFormat() uint32\n\n\t// SupportedFormats returns a list of formats it can restore from.\n\tSupportedFormats() []uint32\n\n\t// SnapshotExtension writes extension payloads into the underlying protobuf stream.\n\tSnapshotExtension(height uint64, payloadWriter ExtensionPayloadWriter) error\n\n\t// RestoreExtension restores an extension state snapshot,\n\t// the payload reader returns `io.EOF` when reached the extension boundaries.\n\tRestoreExtension(height uint64, format uint32, payloadReader ExtensionPayloadReader) error\n\n}\n```\n\n----------------------------------------\n\nTITLE: Instantiating TxConfig in Go\nDESCRIPTION: The NewTxConfig function instantiates the default implementation of TxConfig in the x/auth/tx module.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/auth/tx/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc NewTxConfig(cdc codec.ProtoCodecMarshaler, enabledSignModes []signingtypes.SignMode) client.TxConfig {\n\treturn &config{\n\t\tcdc:             cdc,\n\t\tprotocodec:      codec.NewProtoCodec(cdc.InterfaceRegistry()),\n\t\taminoCodec:      codec.NewAminoCodec(codec.NewLegacyAmino()),\n\t\tenableSignModes: enabledSignModes,\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Comet Service for Block Information in Go\nDESCRIPTION: This snippet focuses on the `CometInfo` service, which provides comet-specific block data, including misbehavior evidence, validator hashes, proposer address, and commit info. It serves a specialized purpose for modules needing detailed comet integration.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-063-core-module-api.md#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\ntype Service interface {\n\tGetCometInfo(context.Context) Info\n}\n\ntype CometInfo struct {\n  Evidence []abci.Misbehavior // Misbehavior returns the misbehavior of the block\n\t// ValidatorsHash returns the hash of the validators\n\t// For Comet, it is the hash of the next validators\n\tValidatorsHash []byte\n\tProposerAddress []byte            // ProposerAddress returns the address of the block proposer\n\tDecidedLastCommit abci.CommitInfo // DecidedLastCommit returns the last commit info\n}\n\n```\n\n----------------------------------------\n\nTITLE: Unmarshaling Profile and Unpacking Any to Retrieve Interface Value (Go)\nDESCRIPTION: This Go code shows the process of unmarshaling protobuf-encoded Profile data using a codec (cdc) and then using GetCachedValue on the embedded Any field to retrieve the concrete Go struct originally packed inside (e.g., BaseAccount, ContinuousVestingAccount). Type assertion allows access to AccountI methods, illustrated by extracting the account address. Dependencies: Profile Go struct, cdc codec with Unmarshal support, Profile must implement UnpackInterfaces, and types must be registered with InterfaceRegistry. Inputs: marshaled bytes. Outputs: Restored Profile with concrete AccountI value.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/advanced/05-encoding.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nprofileBz := ... // The proto-encoded bytes of a Profile, e.g. retrieved through gRPC.\nvar myProfile Profile\n// Unmarshal the bytes into the myProfile struct.\nerr := cdc.Unmarshal(profilebz, &myProfile)\n\n// Let's see the types of the Account field.\nfmt.Printf(\"%T\\n\", myProfile.Account)                  // Prints \"Any\"\nfmt.Printf(\"%T\\n\", myProfile.Account.GetCachedValue()) // Prints \"BaseAccount\", \"ContinuousVestingAccount\" or whatever was initially packed in the Any.\n\n// Get the address of the account.\naccAddr := myProfile.Account.GetCachedValue().(AccountI).GetAddress()\n```\n\n----------------------------------------\n\nTITLE: Querying All Evidence via gRPC\nDESCRIPTION: gRPC endpoint for retrieving all evidence records. Uses the cosmos.evidence.v1beta1.Query/AllEvidence service endpoint.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/evidence/README.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncosmos.evidence.v1beta1.Query/AllEvidence\n```\n\nLANGUAGE: bash\nCODE:\n```\ngrpcurl -plaintext localhost:9090 cosmos.evidence.v1beta1.Query/AllEvidence\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"evidence\": [\n    {\n      \"consensus_address\": \"cosmosvalcons1ntk8eualewuprz0gamh8hnvcem2nrcdsgz563h\",\n      \"height\": \"11\",\n      \"power\": \"100\",\n      \"time\": \"2021-10-20T16:08:38.194017624Z\"\n    }\n  ],\n  \"pagination\": {\n    \"total\": \"1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GroupInfo Structure in Protobuf\nDESCRIPTION: Defines the GroupInfo message structure for tracking group metadata, admin, version, and total weight of members. The group_id is a unique identifier while the version tracks changes to membership that would invalidate proposals.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-042-group-module.md#2025-04-22_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage GroupInfo {\n\n    // group_id is the unique ID of this group.\n    uint64 group_id = 1;\n\n    // admin is the account address of the group's admin.\n    string admin = 2;\n\n    // metadata is any arbitrary metadata to attached to the group.\n    bytes metadata = 3;\n\n    // version is used to track changes to a group's membership structure that\n    // would break existing proposals. Whenever a member weight has changed,\n    // or any member is added or removed, the version is incremented and will\n    // invalidate all proposals from older versions.\n    uint64 version = 4;\n\n    // total_weight is the sum of the group members' weights.\n    string total_weight = 5;\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Query Service in AppModule\nDESCRIPTION: This code snippet demonstrates how to register the query service implementation with the AppModule. It shows the implementation of the RegisterQueryService method for the bank module.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-021-protobuf-query-encoding.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc (am AppModule) RegisterQueryService(server grpc.Server) {\n\ttypes.RegisterQueryServer(server, keeper.Querier{am.keeper})\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom AnteHandler Order in Go for Cosmos SDK Application\nDESCRIPTION: Demonstrates how to set a custom AnteHandler order in a Cosmos SDK application, including a custom signature verification function and rearranging the order of operations.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-010-modular-antehandler.md#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nmoduleManager.SetAnteHandlerOrder([]AnteHandler(ValidateMemo, CustomSigVerify, DistrModuleAnteHandler))\n```\n\n----------------------------------------\n\nTITLE: Setting Balance in Bank Keeper (Go)\nDESCRIPTION: This function sets the balance for a specific account and denomination. It stores the balance using a prefix key structure for efficient retrieval.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-004-split-denomination-keys.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nvar BalancesPrefix = []byte(\"balances\")\n\nfunc (k Keeper) SetBalance(ctx Context, addr AccAddress, balance Coin) error {\n  if !balance.IsValid() {\n    return err\n  }\n\n  store := ctx.KVStore(k.storeKey)\n  balancesStore := prefix.NewStore(store, BalancesPrefix)\n  accountStore := prefix.NewStore(balancesStore, addr.Bytes())\n\n  bz := Marshal(balance)\n  accountStore.Set([]byte(balance.Denom), bz)\n\n  return nil\n}\n```\n\n----------------------------------------\n\nTITLE: CLI Distribution Module Commands\nDESCRIPTION: Command line interface commands for querying and interacting with the distribution module including checking rewards, commission, community pool, and parameters.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/distribution/README.md#2025-04-22_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nsimd query distribution --help\nsimd query distribution commission [address] [flags]\nsimd query distribution community-pool [flags]\nsimd query distribution params [flags]\nsimd query distribution rewards [delegator-addr] [validator-addr] [flags]\nsimd query distribution slashes [validator] [start-height] [end-height] [flags]\nsimd query distribution validator-outstanding-rewards [validator] [flags]\nsimd query distribution validator-distribution-info cosmosvaloper1...\nsimd tx distribution fund-community-pool [amount] [flags]\n```\n\n----------------------------------------\n\nTITLE: Querying Staking Pool Information in Cosmos SDK\nDESCRIPTION: This command retrieves the current state of the staking pool, showing the amount of bonded and not bonded tokens in the network.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/staking/README.md#2025-04-22_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\nsimd q staking pool [flags]\n```\n\nLANGUAGE: bash\nCODE:\n```\nsimd q staking pool\n```\n\n----------------------------------------\n\nTITLE: Example Response from v1 Votes Query\nDESCRIPTION: The JSON response structure when querying votes for a proposal using the v1 endpoint. It includes votes with proposal ID, voter address, vote options, and adds a metadata field not present in v1beta1.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/README.md#2025-04-22_snippet_65\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"votes\": [\n    {\n      \"proposal_id\": \"1\",\n      \"voter\": \"cosmos1..\",\n      \"options\": [\n        {\n          \"option\": \"VOTE_OPTION_YES\",\n          \"weight\": \"1.000000000000000000\"\n        }\n      ],\n      \"metadata\": \"\"\n    }\n  ],\n  \"pagination\": {\n    \"next_key\": null,\n    \"total\": \"1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: DVPair Queue Protocol Buffer Definition\nDESCRIPTION: Protocol buffer definition for UnbondingDelegation queue entries tracking delegator-validator pairs during unbonding period.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/staking/README.md#2025-04-22_snippet_5\n\nLANGUAGE: protobuf\nCODE:\n```\n// reference: https://github.com/cosmos/cosmos-sdk/blob/v0.47.0-rc1/proto/cosmos/staking/v1beta1/staking.proto#L162-L172\n```\n\n----------------------------------------\n\nTITLE: Defining SnapshotItem Protobuf Messages for Snapshot Format\nDESCRIPTION: Protobuf definitions for SnapshotItem, SnapshotStoreItem, and SnapshotIAVLItem messages used in the snapshot format. These messages represent different types of items contained in a rootmulti.Store snapshot.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/store/snapshots/README.md#2025-04-22_snippet_2\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage SnapshotItem {\n  oneof item {\n    SnapshotStoreItem store = 1;\n    SnapshotIAVLItem  iavl  = 2 [(gogoproto.customname) = \"IAVL\"];\n  }\n}\n\nmessage SnapshotStoreItem {\n  string name = 1;\n}\n\nmessage SnapshotIAVLItem {\n  bytes key     = 1;\n  bytes value   = 2;\n  int64 version = 3;\n  int32 height  = 4;\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Querying a Vote with gRPC v1beta1 in Cosmos SDK\nDESCRIPTION: A practical example showing how to use grpcurl to query a specific voter's vote on proposal ID 1 using the v1beta1 gRPC endpoint.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/README.md#2025-04-22_snippet_37\n\nLANGUAGE: bash\nCODE:\n```\ngrpcurl -plaintext \\\n    -d '{\"proposal_id\":\"1\",\"voter\":\"cosmos1..\"}' \\\n    localhost:9090 \\\n    cosmos.gov.v1beta1.Query/Vote\n```\n\n----------------------------------------\n\nTITLE: Generating Baseline Configuration Diff\nDESCRIPTION: Command for generating a baseline configuration diff by comparing an empty file with a version-specific app.toml, capturing all settings in the target version.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/tools/confix/testdata/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncondiff /dev/null data/v45-app.toml > testdata/baseline.txt\n```\n\n----------------------------------------\n\nTITLE: Querying a Proposal using gRPC v1 in Cosmos SDK\nDESCRIPTION: The gRPC endpoint for querying details of a specific proposal using the current v1 API.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/README.md#2025-04-22_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\ncosmos.gov.v1.Query/Proposal\n```\n\n----------------------------------------\n\nTITLE: Defining Protobuf Generation with Gogo Generator - Go Reference\nDESCRIPTION: This Go reference links to the buf.gen.gogo.yaml configuration, specifying how protobuf files are generated using gogoproto, an alternative to the official Go proto generator. It is designed for enhanced performance and ergonomics in Cosmos SDK modules. The dependency is on gogoproto and the Buf toolchain; parameters defined in the file determine plugin options and output targets.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/tooling/00-protobuf.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/main/proto/buf.gen.gogo.yaml#L1-L9\n```\n\n----------------------------------------\n\nTITLE: Example AppModuleBasic Struct Implementation in Go\nDESCRIPTION: This Go code defines a simple `AppModuleBasic` struct. This pattern is used when the implementation of the `AppModuleBasic` interface requires no parameters or internal state, providing a minimal concrete type.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-modules/01-module-manager.md#2025-04-22_snippet_18\n\nLANGUAGE: go\nCODE:\n```\n```go\ntype AppModuleBasic struct{}\n```\n```\n\n----------------------------------------\n\nTITLE: Example of Querying a Proposal with gRPC v1beta1 in Cosmos SDK\nDESCRIPTION: A practical example showing how to use grpcurl to query proposal ID 1 using the v1beta1 gRPC endpoint.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/README.md#2025-04-22_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\ngrpcurl -plaintext \\\n    -d '{\"proposal_id\":\"1\"}' \\\n    localhost:9090 \\\n    cosmos.gov.v1beta1.Query/Proposal\n```\n\n----------------------------------------\n\nTITLE: Referencing CommitMultiStore Interface (Go Reference)\nDESCRIPTION: This code reference highlights the CommitMultiStore, the main extension of Multistore supporting persistent commit operations over multiple underlying stores. The documentation and code at the link provide direct context for implementing custom multi-store behavior in Go applications.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/advanced/04-store.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/store/types/store.go#L164-L227\n```\n\n----------------------------------------\n\nTITLE: Implementing setState Function for Context Initialization in Go\nDESCRIPTION: This function initializes the execution state with a new header and context. It resets the main gas meter and prepares the state for transaction processing during FinalizeBlock and InitChain.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/advanced/00-baseapp.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nfunc (app *BaseApp) setState(header cmtproto.Header, height int64, state state) {\n\tms := app.cms\n\n\tif state == execModePrepareProposal || state == execModeProcessProposal {\n\t\t// PrepareProposal and ProcessProposal are executed on a different branch of the main state\n\t\t// and always start from the last committed state\n\t\tms = app.cms.CacheMultiStore()\n\t}\n\n\tctx := sdk.NewContext(\n\t\tms, header, false, app.logger).WithBlockHeight(height)\n\n\tif app.checkState.ctx != nil {\n\t\tctx = ctx.WithHeaderHash(app.checkState.ctx.HeaderHash())\n\t}\n\n\tswitch state {\n\tcase runTxModeCheck:\n\t\tapp.checkState.ctx = ctx\n\tcase execModeFinalize:\n\t\tapp.finalizeBlockState.ctx = ctx\n\tcase execModePrepareProposal:\n\t\tapp.prepareProposalState.ctx = ctx\n\tcase execModeProcessProposal:\n\t\tapp.processProposalState.ctx = ctx\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ServiceRevision Method for intermodule.Client Interface in Go\nDESCRIPTION: Definition of a ServiceRevision method to be added to the cosmossdk.io/core/intermodule.Client interface. This method allows modules to introspect the minor API revision of peer modules by providing a service name.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-054-semver-compatible-modules.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nServiceRevision(ctx context.Context, serviceName string) uint64\n```\n\n----------------------------------------\n\nTITLE: Retrieving Values from CommitKVStoreCache in Go\nDESCRIPTION: Retrieves a value by key from the cache first, falling back to the underlying store if not found. When fetching from the store, the value is cached before being returned.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/spec/store/interblock-cache.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nfunc Get(\n    KVCache CommitKVStoreCache,\n    key string) []byte {\n    valueCache, success := KVCache.cache.Get(key)\n    if success {\n        // cache hit\n        return valueCache\n    } else {\n        // cache miss\n        valueStore = KVCache.store.Get(key)\n        KVCache.cache.Add(key, valueStore)\n        return valueStore\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AccountRetriever Interface in Go\nDESCRIPTION: Defines an interface for retrieving account information in the Cosmos SDK client.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-020-protobuf-transaction-encoding.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ntype AccountRetriever interface {\n  GetAccount(clientCtx Context, addr sdk.AccAddress) (client.Account, error)\n  GetAccountWithHeight(clientCtx Context, addr sdk.AccAddress) (client.Account, int64, error)\n  EnsureExists(clientCtx client.Context, addr sdk.AccAddress) error\n  GetAccountNumberSequence(clientCtx client.Context, addr sdk.AccAddress) (uint64, uint64, error)\n}\n```\n\n----------------------------------------\n\nTITLE: Example Request for Querying Specific Deposit with v1\nDESCRIPTION: An example curl command that demonstrates how to query deposit information for proposal ID 1 and a specific depositor using the v1 endpoint.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/README.md#2025-04-22_snippet_76\n\nLANGUAGE: bash\nCODE:\n```\ncurl localhost:1317/cosmos/gov/v1/proposals/1/deposits/cosmos1..\n```\n\n----------------------------------------\n\nTITLE: Defining Integration Testing Infrastructure in Go\nDESCRIPTION: Proposes an API for integration testing runners and fixtures to test modules with actual dependencies in various combinations.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-054-semver-compatible-modules.md#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\ntype IntegrationTestFixture interface {\n    TestFixture\n}\n\ntype IntegrationTestConfig struct {\n    ModuleConfig     proto.Message    // the module's config object\n    DependencyMatrix map[string][]proto.Message // all the dependent module configs\n}\n\n// Run runs the test function for all combinations of dependency modules.\nfunc (cfg IntegationTestConfig) Run(t *testing.T, f func (t *testing.T, f IntegrationTestFixture)) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Individual Validator via gRPC in Cosmos SDK\nDESCRIPTION: This gRPC endpoint queries validator information for a given validator address. It returns detailed information about the specified validator, including their address, consensus public key, and commission rates.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/staking/README.md#2025-04-22_snippet_42\n\nLANGUAGE: bash\nCODE:\n```\ngrpcurl -plaintext -d '{\"validator_addr\":\"cosmosvaloper1rne8lgs98p0jqe82sgt0qr4rdn4hgvmgp9ggcc\"}' \\\nlocalhost:9090 cosmos.staking.v1beta1.Query/Validator\n```\n\n----------------------------------------\n\nTITLE: Visualizing MultiStore Structure in Cosmos SDK (Text Diagram)\nDESCRIPTION: This text snippet provides a schematic visual representation of a Cosmos SDK application's multistore, illustrating how multiple KVStores, each managed by a different module keeper, are organized under the main multistore structure. It is meant for conceptual understanding only and does not require software dependencies or produce executable outputs. Its input is only for documentation or presentation purposes.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/advanced/04-store.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n+-----------------------------------------------------+\\n|                                                     |\\n|    +--------------------------------------------+   |\\n|    |                                            |   |\\n|    |  KVStore 1 - Manage by keeper of Module 1  |\\n|    |                                            |   |\\n|    +--------------------------------------------+   |\\n|                                                     |\\n|    +--------------------------------------------+   |\\n|    |                                            |   |\\n|    |  KVStore 2 - Manage by keeper of Module 2  |   |\\n|    |                                            |   |\\n|    +--------------------------------------------+   |\\n|                                                     |\\n|    +--------------------------------------------+   |\\n|    |                                            |   |\\n|    |  KVStore 3 - Manage by keeper of Module 2  |   |\\n|    |                                            |   |\\n|    +--------------------------------------------+   |\\n|                                                     |\\n|    +--------------------------------------------+   |\\n|    |                                            |   |\\n|    |  KVStore 4 - Manage by keeper of Module 3  |   |\\n|    |                                            |   |\\n|    +--------------------------------------------+   |\\n|                                                     |\\n|    +--------------------------------------------+   |\\n|    |                                            |   |\\n|    |  KVStore 5 - Manage by keeper of Module 4  |   |\\n|    |                                            |   |\\n|    +--------------------------------------------+   |\\n|                                                     |\\n|                    Main Multistore                  |\\n|                                                     |\\n+-----------------------------------------------------+\\n\\n                   Application's State\n```\n\n----------------------------------------\n\nTITLE: Defining Evidence Router Interface in Go\nDESCRIPTION: Definition of the Router interface that manages evidence routing to the appropriate handlers. It includes methods for adding routes, checking if routes exist, and retrieving handlers.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/evidence/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype Router interface {\n  AddRoute(r string, h Handler) Router\n  HasRoute(r string) bool\n  GetRoute(path string) Handler\n  Seal()\n  Sealed() bool\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Query Commands in Cosmos SDK Applications\nDESCRIPTION: Function that registers query commands in the application's command interface. This adds query capabilities to the CLI rootCmd to enable retrieving blockchain state information.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/advanced/07-cli.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nfunc queryCommand(encodingConfig params.EncodingConfig) *cobra.Command {\n\tcmd := &cobra.Command{\n\t\tUse:                        \"query\",\n\t\tAliases:                    []string{\"q\"},\n\t\tShort:                      \"Querying subcommands\",\n\t\tDisableFlagParsing:         true,\n\t\tSuggestionsMinimumDistance: 2,\n\t\tRunE:                       client.ValidateCmd,\n\t}\n\n\treturn cmd\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Pre Blockers in Go\nDESCRIPTION: Defines an interface `HasPreBlocker` for running module functionality before the beginning of a block. The `PreBlock` method is expected to be called before other block methods and operates within a `context.Context`.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-063-core-module-api.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\ntype HasPreBlocker interface {\n  AppModule\n  PreBlock(context.Context) error\n}\n\n```\n\n----------------------------------------\n\nTITLE: Applying Upgrade with Version Map in Go\nDESCRIPTION: Demonstrates how to apply an upgrade using the new UpgradeHandler signature, fetching and updating the VersionMap in the process.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-041-in-place-store-migrations.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfunc (k UpgradeKeeper) ApplyUpgrade(ctx sdk.Context, plan types.Plan) {\n    // --snip--\n-   handler(ctx, plan)\n+   updatedVM, err := handler(ctx, plan, k.GetModuleVersionMap(ctx)) // k.GetModuleVersionMap() fetches the VersionMap stored in state.\n+   if err != nil {\n+       return err\n+   }\n+\n+   // Set the updated consensus versions to state\n+   k.SetModuleVersionMap(ctx, updatedVM)\n}\n```\n\n----------------------------------------\n\nTITLE: Distribution Module Parameters Protobuf Definition\nDESCRIPTION: Protobuf reference for the Parameters structure of the distribution module. These parameters can be updated through governance or by an address with authority.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/distribution/README.md#2025-04-22_snippet_4\n\nLANGUAGE: protobuf\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.47.0-rc1/proto/cosmos/distribution/v1beta1/distribution.proto#L12-L42\n```\n\n----------------------------------------\n\nTITLE: Referencing Multistore Interface in Cosmos SDK (Go Reference)\nDESCRIPTION: This reference leads to the Go source defining the Multistore interface, which organizes multiple KVStores and supports tracing and branching. Developers leveraging this interface should check this link to understand available multistore operations and how module stores are managed in aggregate.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/advanced/04-store.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/store/types/store.go#L123-L155\n```\n\n----------------------------------------\n\nTITLE: Defining PeriodicAllowance in Protobuf\nDESCRIPTION: Protobuf definition for PeriodicAllowance, which specifies a repeating fee allowance with period reset and spend limits.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/feegrant/README.md#2025-04-22_snippet_3\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage PeriodicAllowance {\n  option (cosmos_proto.implements_interface) = \"FeeAllowanceI\";\n\n  BasicAllowance basic = 1 [(gogoproto.nullable) = false];\n  google.protobuf.Duration period = 2 [(gogoproto.stdduration) = true, (gogoproto.nullable) = false];\n  repeated cosmos.base.v1beta1.Coin period_spend_limit = 3\n      [(gogoproto.castrepeated) = \"github.com/cosmos/cosmos-sdk/types.Coins\", (gogoproto.nullable) = false];\n  repeated cosmos.base.v1beta1.Coin period_can_spend = 4\n      [(gogoproto.castrepeated) = \"github.com/cosmos/cosmos-sdk/types.Coins\", (gogoproto.nullable) = false];\n  google.protobuf.Timestamp period_reset = 5 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Multi-Tier Gas Price Parameters in Protobuf\nDESCRIPTION: Protobuf message definitions for tier parameters and configuration, including priority levels, gas prices, and adjustment bounds.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-048-consensus-fees.md#2025-04-22_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage TierParams {\n  uint32 priority = 1           // priority in tendermint mempool\n  Coin initial_gas_price = 2    //\n  uint32 parent_gas_target = 3  // the target saturation of block\n  uint32 change_denominator = 4 // decides the change speed\n  Coin min_gas_price = 5        // optional lower bound of the price adjustment\n  Coin max_gas_price = 6        // optional upper bound of the price adjustment\n}\n\nmessage Params {\n  repeated TierParams tiers = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Bank Module CLI Commands\nDESCRIPTION: Shell commands for querying bank module state including balances, metadata and total supply\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/bank/README.md#2025-04-22_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nsimd query bank --help\nsimd query bank balances [address] [flags]\nsimd query bank denom-metadata [flags]\nsimd query bank total [flags]\nsimd tx bank send [from_key_or_address] [to_address] [amount] [flags]\n```\n\n----------------------------------------\n\nTITLE: Querying Groups by Admin using gRPC\nDESCRIPTION: Demonstrates how to query groups associated with an admin account using gRPC. Returns group details including ID, admin, metadata, version and total weight.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/group/README.md#2025-04-22_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\ngrpcurl -plaintext \\\n    -d '{\"admin\":\"cosmos1..\"}'  localhost:9090 cosmos.group.v1.Query/GroupsByAdmin\n```\n\n----------------------------------------\n\nTITLE: Defining Grant and MsgGrant Messages - Protobuf - protobuf\nDESCRIPTION: Defines two Protobuf messages: Grant and MsgGrant. Grant encapsulates an Authorization (as google.protobuf.Any) and an expiration (as google.protobuf.Timestamp), using certain Cosmos and gogoproto extensions to ensure type expectations and serialization details. MsgGrant is a transaction message containing granted and grantee Cosmos addresses, also extending Msg signer semantics for Cosmos. Requires 'google.protobuf.Any', 'google.protobuf.Timestamp', and genetics proto annotations. Inputs are respective field values, outputs are correctly serialized Protobuf messages. Used for implementing authorization grants and related transaction flows.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-050-sign-mode-textual.md#2025-04-22_snippet_2\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage Grant {\n  google.protobuf.Any       authorization = 1 [(cosmos_proto.accepts_interface) = \"cosmos.authz.v1beta1.Authorization\"];\n  google.protobuf.Timestamp expiration    = 2 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];\n}\n\nmessage MsgGrant {\n  option (cosmos.msg.v1.signer) = \"granter\";\n\n  string granter = 1 [(cosmos_proto.scalar) = \"cosmos.AddressString\"];\n  string grantee = 2 [(cosmos_proto.scalar) = \"cosmos.AddressString\"];\n}\n\n```\n\n----------------------------------------\n\nTITLE: Example of Querying a Proposal with gRPC v1 in Cosmos SDK\nDESCRIPTION: A practical example showing how to use grpcurl to query proposal ID 1 using the v1 gRPC endpoint.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/README.md#2025-04-22_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\ngrpcurl -plaintext \\\n    -d '{\"proposal_id\":\"1\"}' \\\n    localhost:9090 \\\n    cosmos.gov.v1.Query/Proposal\n```\n\n----------------------------------------\n\nTITLE: Implementing MsgRedeemTokensforShares in Cosmos SDK\nDESCRIPTION: This message allows users to redeem delegation from share tokens. Any user owning share tokens can execute this message, resulting in delegations appearing for the user.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-061-liquid-staking.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### `MsgRedeemTokensforShares`\n\nThe MsgRedeemTokensforShares message is used to redeem the delegation from share tokens. This message can be executed by any user who owns share tokens. After execution delegations will appear to the user.\n```\n\n----------------------------------------\n\nTITLE: Querying Delegator Validator Information\nDESCRIPTION: REST endpoint to retrieve validator information for a specific delegator-validator pair. Returns detailed information about the validator including their status, commission rates, and delegation shares.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/staking/README.md#2025-04-22_snippet_59\n\nLANGUAGE: bash\nCODE:\n```\n/cosmos/staking/v1beta1/delegators/{delegatorAddr}/validators/{validatorAddr}\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \\\n\"http://localhost:1317/cosmos/staking/v1beta1/delegators/cosmos1xwazl8ftks4gn00y5x3c47auquc62ssune9ppv/validators/cosmosvaloper1xwazl8ftks4gn00y5x3c47auquc62ssuvynw64\" \\\n-H  \"accept: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Protobuf Service Path Examples\nDESCRIPTION: Examples showing the recommended shortened naming convention for gRPC service paths, demonstrating how to make them more concise while maintaining clarity.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-023-protobuf-naming.md#2025-04-22_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\n/cosmos_sdk.x.bank.v1.QueryService/QueryBalance\n/cosmos.bank.Query/Balance\n```\n\n----------------------------------------\n\nTITLE: Querying Auth Parameters in Cosmos SDK\nDESCRIPTION: Retrieves the current auth parameters in Cosmos SDK.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/auth/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsimd query auth params [flags]\n```\n\nLANGUAGE: bash\nCODE:\n```\nsimd query auth params\n```\n\n----------------------------------------\n\nTITLE: Implementing MsgSubmitEvidence Struct in Go\nDESCRIPTION: Defines the MsgSubmitEvidence struct for submitting evidence to the module.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-009-evidence-module.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype MsgSubmitEvidence struct {\n  Evidence\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Persistent Peers in TOML Configuration\nDESCRIPTION: This snippet shows how to configure the persistent_peers parameter in the config.toml file to enable connections to other validators in the testnet. The persistent_peers parameter accepts a comma-separated list of node addresses with their corresponding IP addresses and ports.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/simapp/README.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# Comma separated list of nodes to keep persistent connections to\npersistent_peers = \"[validator_address]@[ip_address]:[port],[validator_address]@[ip_address]:[port]\"\n```\n\n----------------------------------------\n\nTITLE: Defining and Modifying AppAccount in Go\nDESCRIPTION: This snippet demonstrates a violation of the object capabilities principle in Go. It defines an `AppAccount` and passes it to a method capable of modifying it. To comply with Ocap principles, the code should pass a copy instead of a pointer. This enforces immutability and safer handling of the account data.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/advanced/10-ocap.md#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\ntype AppAccount struct {...}\naccount := &AppAccount{\n    Address: pub.Address(),\n    Coins: sdk.Coins{sdk.NewInt64Coin(\"ATM\", 100)},\n}\nsumValue := externalModule.ComputeSumValue(account)\n```\n\nLANGUAGE: Go\nCODE:\n```\nsumValue := externalModule.ComputeSumValue(*account)\n```\n\n----------------------------------------\n\nTITLE: Indexable Interface Definition\nDESCRIPTION: Interface for tables that support secondary indexes, defining methods for index registration and interactions.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/group/internal/orm/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nreference\nhttps://github.com/cosmos/cosmos-sdk/tree/release/v0.50.x/x/group/internal/orm/types.go#L88-L93\n```\n\n----------------------------------------\n\nTITLE: Defining Public Key Message in Protobuf\nDESCRIPTION: Defines a protobuf message for encoding public keys with a single bytes field.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-020-protobuf-transaction-encoding.md#2025-04-22_snippet_3\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage PubKey {\n    bytes key = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting Version v0.1.0 in Markdown\nDESCRIPTION: This snippet documents the features, API breaking changes, and client breaking changes in version v0.1.0 of the Evidence module.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/evidence/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## [v0.1.0](https://github.com/cosmos/cosmos-sdk/releases/tag/x/evidence/v0.1.0) - 2023-11-07\n\n### Features\n\n* (x/evidence) [14724](https://github.com/cosmos/cosmos-sdk/pull/14724) The `x/evidence` module is extracted to have a separate go.mod file which allows it be a standalone module.\n* (keeper) [#15420](https://github.com/cosmos/cosmos-sdk/pull/15420) Move `BeginBlocker` to the keeper folder & make HandleEquivocation private\n\n### API Breaking Changes\n\n* [#16008](https://github.com/cosmos/cosmos-sdk/pull/16008) NewKeeper now takes in a KVStoreService instead of KVStoreKey, most functions use context.Context instead of sdk.Context and `IterateEvidence` callback function now returns an error to stop interation (`errors.ErrStopIterating`).\n* (keeper) [#15825](https://github.com/cosmos/cosmos-sdk/pull/15825) Evidence constructor now requires an `address.Codec` (`import \"cosmossdk.io/core/address\"`)\n* [#16336](https://github.com/cosmos/cosmos-sdk/pull/16336) Use collections for state management:\n    * Removed: keeper `SetEvidence`, `GetEvidence`, `IterateEvidences`, `GetAllEvidences`, `MustMarshalEvidence`, `MustUnmarshalEvidence`, `MarshalEvidence`, `UnmarshalEvidence`\n\n### Client Breaking Changes\n\n* [#16625](https://github.com/cosmos/cosmos-sdk/pull/16625) The `simd q evidence evidence` command supports only querying an evidence by hash. For querying all evidences, use `simd q evidence list` instead.\n```\n\n----------------------------------------\n\nTITLE: Implementing Chained AnteHandler in Go for Cosmos SDK\nDESCRIPTION: Defines a Chainer function that combines multiple AnteHandler micro-functions into a single AnteHandler. This allows for modular and customizable AnteHandler functionality.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-010-modular-antehandler.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc Chainer(order []AnteHandler) AnteHandler {\n    return func(ctx Context, tx Tx, simulate bool) (newCtx Context, err error) {\n        for _, ante := range order {\n            ctx, err := ante(ctx, tx, simulate)\n            if err != nil {\n                return ctx, err\n            }\n        }\n        return ctx, err\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Go AppCreator Function Signature Reference\nDESCRIPTION: Provides a reference URL to the Go code defining the `AppCreator` function signature. Application constructors must implement this signature to be usable by the node's `start` command for creating application instances.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/beginner/00-app-anatomy.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.53.0-rc.2/server/types/app.go#L67-L69\n```\n\n----------------------------------------\n\nTITLE: Referencing Event Type Definitions - Protobuf - protobuf\nDESCRIPTION: This snippet provides a direct reference to where the ABCI Event type is defined in the CometBFT Protobuf schema. The reference serves to link high-level documentation to the low-level protocol message structure, enabling developers to understand or extend event handling with accurate type information. No executable code is present; the snippet indicates the location within the repository for further inspection.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/advanced/08-events.md#2025-04-22_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nhttps://github.com/cometbft/cometbft/blob/v0.37.0/proto/tendermint/abci/types.proto#L334-L343\n```\n\n----------------------------------------\n\nTITLE: Tracking Undelegation for Continuous Vesting Account in Go\nDESCRIPTION: This function tracks the undelegation of coins for a continuous vesting account, updating the delegated free and delegated vesting amounts.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/auth/vesting/README.md#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nfunc (cva ContinuousVestingAccount) TrackUndelegation(amount Coins) {\n    x := min(cva.DelegatedFree, amount)\n    y := amount - x\n\n    cva.DelegatedFree -= x\n    cva.DelegatedVesting -= y\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Voter Vote - REST\nDESCRIPTION: Shows how to query a specific voter's vote on a proposal using REST endpoints in both v1beta1 and v1. Returns vote option and weight information.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/README.md#2025-04-22_snippet_59\n\nLANGUAGE: bash\nCODE:\n```\ncurl localhost:1317/cosmos/gov/v1beta1/proposals/1/votes/cosmos1..\n```\n\n----------------------------------------\n\nTITLE: Querying ValidatorUnbondingDelegations in Cosmos SDK\nDESCRIPTION: The ValidatorUnbondingDelegations endpoint retrieves information about all unbonding delegations from a specific validator. It requires the validator address as input and returns details about each unbonding process including creation height, completion time, and balance.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/staking/README.md#2025-04-22_snippet_44\n\nLANGUAGE: bash\nCODE:\n```\ncosmos.staking.v1beta1.Query/ValidatorUnbondingDelegations\n```\n\nLANGUAGE: bash\nCODE:\n```\ngrpcurl -plaintext -d '{\"validator_addr\":\"cosmosvaloper1rne8lgs98p0jqe82sgt0qr4rdn4hgvmgp9ggcc\"}' \\\nlocalhost:9090 cosmos.staking.v1beta1.Query/ValidatorUnbondingDelegations\n```\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"unbonding_responses\": [\n    {\n      \"delegator_address\": \"cosmos1z3pzzw84d6xn00pw9dy3yapqypfde7vg6965fy\",\n      \"validator_address\": \"cosmosvaloper1rne8lgs98p0jqe82sgt0qr4rdn4hgvmgp9ggcc\",\n      \"entries\": [\n        {\n          \"creation_height\": \"25325\",\n          \"completion_time\": \"2021-10-31T09:24:36.797320636Z\",\n          \"initial_balance\": \"20000000\",\n          \"balance\": \"20000000\"\n        }\n      ]\n    },\n    {\n      \"delegator_address\": \"cosmos1y8nyfvmqh50p6ldpzljk3yrglppdv3t8phju77\",\n      \"validator_address\": \"cosmosvaloper1rne8lgs98p0jqe82sgt0qr4rdn4hgvmgp9ggcc\",\n      \"entries\": [\n        {\n          \"creation_height\": \"13100\",\n          \"completion_time\": \"2021-10-30T12:53:02.272266791Z\",\n          \"initial_balance\": \"1000000\",\n          \"balance\": \"1000000\"\n        }\n      ]\n    }\n  ],\n  \"pagination\": {\n    \"next_key\": null,\n    \"total\": \"8\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GetVestedCoins for DelayedVestingAccount in Go\nDESCRIPTION: Implements the GetVestedCoins method for DelayedVestingAccount, returning all vested coins after the end time or zero before it.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/auth/vesting/README.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfunc (dva DelayedVestingAccount) GetVestedCoins(t Time) Coins {\n    if t >= dva.EndTime {\n        return dva.OriginalVesting\n    }\n\n    return ZeroCoins\n}\n\nfunc (dva DelayedVestingAccount) GetVestingCoins(t Time) Coins {\n    return dva.OriginalVesting - dva.GetVestedCoins(t)\n}\n```\n\n----------------------------------------\n\nTITLE: Interface Type Resolution with depinject in Go\nDESCRIPTION: Illustrates how depinject supports interface types as inputs to provider functions, helping to decouple dependencies between modules.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/depinject/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage duck\n\ntype Duck interface {\n quack()\n}\n\ntype AlsoDuck interface {\n quack()\n}\n\ntype Mallard struct{}\ntype Canvasback struct{}\n\nfunc (duck Mallard) quack()    {}\nfunc (duck Canvasback) quack() {}\n\ntype Pond struct {\n Duck AlsoDuck\n}\n```\n\nLANGUAGE: go\nCODE:\n```\nfunc GetMallard() duck.Mallard {\n return Mallard{}\n}\n\nfunc GetPond(duck Duck) Pond {\n return Pond{Duck: duck}\n}\n\nfunc GetCanvasback() Canvasback {\n return Canvasback{}\n}\n```\n\nLANGUAGE: go\nCODE:\n```\nvar pond Pond\n\ndepinject.Inject(\n  depinject.Provide(\n   GetMallard,\n   GetPond,\n  ),\n   &pond)\n```\n\nLANGUAGE: go\nCODE:\n```\nvar pond Pond\n\ndepinject.Inject(\n depinject.Provide(\n  GetMallard,\n  GetCanvasback,\n  GetPond,\n ),\n &pond)\n```\n\nLANGUAGE: go\nCODE:\n```\ndepinject.Inject(\n depinject.Configs(\n  depinject.BindInterface(\n   \"duck/duck.Duck\",\n   \"duck/duck.Mallard\",\n  ),\n  depinject.Provide(\n   GetMallard,\n   GetCanvasback,\n   GetPond,\n  ),\n ),\n &pond)\n```\n\n----------------------------------------\n\nTITLE: Initializing CommitKVStoreCache in Go\nDESCRIPTION: Creates a new CommitKVStoreCache instance with a specified store and cache size. Returns a CommitKVStoreCache object that wraps the underlying store with a caching layer.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/spec/store/interblock-cache.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nfunc NewCommitKVStoreCache(\n    store CommitKVStore,\n    size uint) CommitKVStoreCache {\n    KVCache = CommitKVStoreCache{store, NewCache(size)}\n    return KVCache\n}\n```\n\n----------------------------------------\n\nTITLE: Example Governance Proposal JSON\nDESCRIPTION: JSON structure for submitting a governance proposal with messages, metadata, and deposit information.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/README.md#2025-04-22_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"messages\": [\n    {\n      \"@type\": \"/cosmos.bank.v1beta1.MsgSend\",\n      \"from_address\": \"cosmos1...\",\n      \"to_address\": \"cosmos1...\",\n      \"amount\":[{\"denom\": \"stake\",\"amount\": \"10\"}]\n    }\n  ],\n  \"metadata\": \"AQ==\",\n  \"deposit\": \"10stake\",\n  \"title\": \"Proposal Title\",\n  \"summary\": \"Proposal Summary\"\n}\n```\n\n----------------------------------------\n\nTITLE: TraceKVStore Implementation in Cosmos SDK\nDESCRIPTION: Definition of a TraceKVStore that provides operation tracing functionality over an underlying KVStore. It logs all operations performed on the store.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/advanced/04-store.md#2025-04-22_snippet_21\n\nLANGUAGE: go\nCODE:\n```\n// Store implements the KVStore interface with tracing enabled.\n// Operations are traced on each core KVStore function call.\ntype Store struct {\n\tparent  types.KVStore\n\twriter  io.Writer\n\tcontext types.TraceContext\n}\n\ntype traceOperation struct {\n\tOp    string      `json:\"op\"`\n\tKey   string      `json:\"key\"`\n\tValue string      `json:\"value\"`\n\tErr   string      `json:\"err,omitempty\"`\n\n\t// Metadata is included in the trace output when it is not nil.\n\t// It contains tracing information about the KVStore operation.\n\tMetadata types.TraceContext `json:\"metadata,omitempty\"`\n}\n```\n\n----------------------------------------\n\nTITLE: CLI Command for Submitting Split Votes in Cosmos SDK\nDESCRIPTION: Demonstrates how to use the CLI command to submit a vote with weights distributed across multiple options. The example shows splitting voting power with 60% for yes, 30% for no, and 5% each for abstain and no_with_veto.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-037-gov-split-vote.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nsimd tx gov vote 1 \"yes=0.6,no=0.3,abstain=0.05,no_with_veto=0.05\" --from mykey\n```\n\n----------------------------------------\n\nTITLE: Bank Module gRPC Endpoints\nDESCRIPTION: gRPC endpoint examples for querying bank module state including balances and metadata\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/bank/README.md#2025-04-22_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ngrpcurl -plaintext \\\n    -d '{\"address\":\"cosmos1..\",\"denom\":\"stake\"}' \\\n    localhost:9090 \\\n    cosmos.bank.v1beta1.Query/Balance\n```\n\n----------------------------------------\n\nTITLE: REST Endpoint for Querying Grants in Cosmos SDK\nDESCRIPTION: REST endpoint for querying authorization grants with parameters for granter, grantee, and message type URL.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/authz/README.md#2025-04-22_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\n/cosmos/authz/v1beta1/grants\n```\n\n----------------------------------------\n\nTITLE: LastCommitInfo Struct Definition - Go\nDESCRIPTION: Defines the structure for storing validator voting information from the previous block including round number and votes.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/slashing/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype LastCommitInfo struct {\n\tRound int32\n\tVotes []VoteInfo\n}\n```\n\n----------------------------------------\n\nTITLE: Importing ProtocolPool Module Dependencies\nDESCRIPTION: Import statements required for the protocolpool module implementation in a Cosmos SDK application.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/UPGRADE_GUIDE.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    // ...\n    \"github.com/cosmos/cosmos-sdk/x/protocolpool\"\n    protocolpoolkeeper \"github.com/cosmos/cosmos-sdk/x/protocolpool/keeper\"\n    protocolpooltypes \"github.com/cosmos/cosmos-sdk/x/protocolpool/types\"\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Passing a Claimed Capability in Cosmos SDK (Go)\nDESCRIPTION: Module 2, in a different function (`SomeOtherFunction`), retrieves a previously claimed capability using its associated name (\"resourceABC\") via `k.sck.GetCapability`. It then passes this retrieved capability to Module 1's `UseResource` function, potentially to perform an action requiring that capability.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-003-dynamic-capability-store.md#2025-04-22_snippet_13\n\nLANGUAGE: go\nCODE:\n```\n```go\nfunc (k Mod2Keeper) SomeOtherFunction(ctx Context, name string) {\n  capability := k.sck.GetCapability(ctx, name)\n  mod1.UseResource(ctx, capability, \"resourceABC\")\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Claiming Capabilities in Go\nDESCRIPTION: ClaimCapability function that allows a module to claim ownership of a capability received from another module.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-003-dynamic-capability-store.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nfunc (sck ScopedCapabilityKeeper) ClaimCapability(ctx Context, capability Capability, name string) error {\n  persistentStore := ctx.KVStore(sck.persistentKey)\n\n  // set forward mapping in memory store from capability to name\n  memStore.Set(sck.moduleName + \"/fwd/\" + capability, name)\n\n  // set reverse mapping in memory store from name to capability\n  memStore.Set(sck.moduleName + \"/rev/\" + name, capability)\n\n  // update owner set in persistent store\n  owners := persistentStore.Get(capability.Index())\n  owners.add(sck.moduleName + \"/\" + name)\n  persistentStore.Set(capability.Index(), owners)\n}\n```\n\n----------------------------------------\n\nTITLE: State Machine Transition Diagram\nDESCRIPTION: ASCII diagram showing a basic state transition from state S to S' through applying a transaction T.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/intro/02-sdk-app-architecture.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n+--------+                 +--------+\n|        |                 |        |\n|   S    +---------------->+   S'   |\n|        |    apply(T)     |        |\n+--------+                 +--------+\n```\n\n----------------------------------------\n\nTITLE: Default Gas Configuration for KVStore in Cosmos SDK\nDESCRIPTION: Default gas configuration for KVStore operations, used when no specific configuration is provided. This sets the base costs for various storage operations.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/advanced/04-store.md#2025-04-22_snippet_20\n\nLANGUAGE: go\nCODE:\n```\n// DefaultGasConfig defines the default gas configuration for KVStores\nfunc DefaultGasConfig() GasConfig {\n\treturn GasConfig{\n\t\tHasGas:           DefaultHasGas,\n\t\tDeleteGas:        DefaultDeleteGas,\n\t\tReadGas:          DefaultReadGas,\n\t\tReadCostPerByte:  DefaultReadCostPerByte,\n\t\tWriteGas:         DefaultWriteGas,\n\t\tWriteCostPerByte: DefaultWriteCostPerByte,\n\t\tIterNextGas:      DefaultIterNextGas,\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MsgCancelUpgrade Message in Protobuf\nDESCRIPTION: Protobuf definition for the MsgCancelUpgrade message used to cancel scheduled upgrades.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/upgrade/README.md#2025-04-22_snippet_4\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage MsgCancelUpgrade {\n  string authority = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default AnteHandler Order in Go for Cosmos SDK Application\nDESCRIPTION: Demonstrates how to set the default AnteHandler order in a Cosmos SDK application using the ModuleManager.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-010-modular-antehandler.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nmoduleManager.SetAnteHandlerOrder([]AnteHandler(AuthModuleAnteHandler, DistrModuleAnteHandler))\n\napp.SetAnteHandler(mm.GetAnteHandler())\n```\n\n----------------------------------------\n\nTITLE: Documenting Changelog Entries for Cosmos SDK System Test Framework\nDESCRIPTION: This snippet contains the actual changelog entries for the Cosmos SDK system test framework. It lists changes across different versions, including unreleased changes, release candidates, and stable releases. Each entry includes a link to the corresponding pull request and a brief description of the change.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/systemtests/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# Changelog\n\n## [Unreleased]\n\n## [v1.2.0] -  2025-04-24\n\n* SDK v0.53.x support.\n\n## [v1.1.0] - 2025-01-05\n\n* [#23359](https://github.com/cosmos/cosmos-sdk/pull/23359) Add `RunCommandWithInputAndArgs` on CLIWrapper.\n\n## [v1.0.0] - 2024-12-19\n\n* [#22849](https://github.com/cosmos/cosmos-sdk/pull/22849) Avoid telemetry server conflicts on port 7180\n\n## [v1.0.0-rc.4] - 2024-12-10\n\n* [#22810](https://github.com/cosmos/cosmos-sdk/pull/22810) Avoid HTTP server conflicts on port 8080\n\n## [v1.0.0-rc.3] - 2024-12-05\n\n* [#22774](https://github.com/cosmos/cosmos-sdk/pull/22774) Add greater than or equal support in Rest test suite\n\n## [v1.0.0-rc.2] - 2024-11-26\n\n* [#22577](https://github.com/cosmos/cosmos-sdk/pull/22577) Support invalid RPC response for CometBFT v1\n\n## [v1.0.0-rc.1] - 2024-11-26\n\n* [#22578](https://github.com/cosmos/cosmos-sdk/pull/22578) Extract system test framework\n```\n\n----------------------------------------\n\nTITLE: Describing Protobuf Directory Structure for Cosmos SDK Module - Shell\nDESCRIPTION: This shell-formatted code snippet illustrates the recommended hierarchy for storing protobuf file definitions within a Cosmos SDK module. It displays the arrangement of protocol buffer files inside nested folders based on project, module, and proto version, including files for message types, events, genesis state, queries, and transactions. The structure guides developers in placing each type of protobuf definition appropriately for improved clarity and maintainability. There are no external dependencies as this is a filesystem organization guide.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-modules/11-structure.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nproto\n└── {project_name}\n    └── {module_name}\n        └── {proto_version}\n            ├── {module_name}.proto\n            ├── event.proto\n            ├── genesis.proto\n            ├── query.proto\n            └── tx.proto\n```\n\n----------------------------------------\n\nTITLE: Multi-Tier Gas Price Implementation in Python\nDESCRIPTION: Complete implementation pseudocode including tier management, transaction handling, and block processing logic.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-048-consensus-fees.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ninterface TieredTx:\n  def tier(self) -> int:\n    pass\n\ndef tx_tier(tx):\n    if isinstance(tx, TieredTx):\n      return tx.tier()\n    else:\n      # default tier for custom transactions\n      return 0\n    # NOTE: we can add more rules here per \"Tx Prioritization\" section \n\nclass TierParams:\n  'gas price strategy parameters of one tier'\n  priority: int           # priority in tendermint mempool\n  initial_gas_price: Coin\n  parent_gas_target: int\n  change_speed: Decimal   # 0 means don't adjust for block load.\n\nclass Params:\n    'protocol parameters'\n    tiers: List[TierParams]\n\nclass State:\n    'consensus state'\n    # total gas used in last block, None when it's the first block\n    parent_gas_used: Optional[int]\n    # gas prices of last block for all tiers\n    gas_prices: List[Coin]\n\ndef begin_block():\n    'Adjust gas prices'\n    for i, tier in enumerate(Params.tiers):\n        if State.parent_gas_used is None:\n            # initialized gas price for the first block\n\t          State.gas_prices[i] = tier.initial_gas_price\n        else:\n            # adjust gas price according to gas used in previous block\n            State.gas_prices[i] = adjust_gas_price(State.gas_prices[i], State.parent_gas_used, tier)\n\ndef mempoolFeeTxHandler_checkTx(ctx, tx):\n    # the minimal-gas-price configured by validator, zero in deliver_tx context\n    validator_price = ctx.MinGasPrice()\n    consensus_price = State.gas_prices[tx_tier(tx)]\n    min_price = max(validator_price, consensus_price)\n\n    # zero means infinity for gas price cap\n    if tx.gas_price() > 0 and tx.gas_price() < min_price:\n        return 'insufficient fees'\n    return next_CheckTx(ctx, tx)\n\ndef txPriorityHandler_checkTx(ctx, tx):\n    res, err := next_CheckTx(ctx, tx)\n    # pass priority to tendermint\n    res.Priority = Params.tiers[tx_tier(tx)].priority\n    return res, err\n\ndef end_block():\n    'Update block gas used'\n    State.parent_gas_used = block_gas_meter.consumed()\n```\n\n----------------------------------------\n\nTITLE: AutoUInt64Table Structure Definition\nDESCRIPTION: Definition of AutoUInt64Table which implements auto-incrementing uint64 IDs for table entries.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/group/internal/orm/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nreference\nhttps://github.com/cosmos/cosmos-sdk/tree/release/v0.50.x/x/group/internal/orm/auto_uint64.go#L15-L18\n```\n\n----------------------------------------\n\nTITLE: Cancel Continuous Fund Message Definition\nDESCRIPTION: Protobuf definition for CancelContinuousFund RPC method that cancels an existing continuous fund distribution.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/protocolpool/README.md#2025-04-22_snippet_3\n\nLANGUAGE: protobuf\nCODE:\n```\n  // CancelContinuousFund defines a method for cancelling continuous fund.\n  rpc CancelContinuousFund(MsgCancelContinuousFund) returns (MsgCancelContinuousFundResponse);\n```\n\n----------------------------------------\n\nTITLE: Defining ConsPubKeyRotationHistory Structure in Go\nDESCRIPTION: Definition of the ConsPubKeyRotationHistory structure used to track key rotation history. It stores information about the operator address, old and new consensus keys, and the height at which rotation occurred.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-016-validator-consensus-key-rotation.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype ConsPubKeyRotationHistory struct {\n    OperatorAddress         sdk.ValAddress\n    OldConsPubKey           crypto.PubKey\n    NewConsPubKey           crypto.PubKey\n    RotatedHeight           int64\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Go Code in CheckTx\nDESCRIPTION: A reference link to a specific Go source file in the Cosmos SDK repository that implements the CheckTx function, responsible for transaction validation. This snippet shows no direct code but refers to lines in the Go file for implementation details.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/abci/04-checktx.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/31c604762a434c7b676b6a89897ecbd7c4653a23/baseapp/abci.go#L350-L390\n```\n\n----------------------------------------\n\nTITLE: Representing Byte Concatenation in Cosmos SDK State Documentation\nDESCRIPTION: Example showing how to document byte concatenation in state mappings with encoding type specification. This format is used to precisely describe how keys are constructed in the state store.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/spec/SPEC_MODULE.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n0x00 | addressBytes | address2Bytes -> amino(value_object)\n```\n\n----------------------------------------\n\nTITLE: Adding Epochs Module to Module Manager\nDESCRIPTION: Adds the Epochs module to the application's module manager with its dependencies.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/UPGRADE_GUIDE.md#2025-04-22_snippet_26\n\nLANGUAGE: go\nCODE:\n```\napp.ModuleManager = module.NewManager(\n    // ...\n    epochs.NewAppModule(appCodec, app.EpochsKeeper),\n)\n```\n\n----------------------------------------\n\nTITLE: gRPC Applied Plan Query\nDESCRIPTION: gRPC endpoint to query a previously applied upgrade plan by name.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/upgrade/README.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ngrpcurl -plaintext \\\n    -d '{\"name\":\"v2.0-upgrade\"}' \\\n    localhost:9090 \\\n    cosmos.upgrade.v1beta1.Query/AppliedPlan\n```\n\n----------------------------------------\n\nTITLE: Querying Redelegations with REST in Cosmos Staking Module\nDESCRIPTION: This REST endpoint queries redelegations for a given delegator address. It accepts optional source and destination validator address parameters and returns details about the redelegation entries including completion time and balances.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/staking/README.md#2025-04-22_snippet_56\n\nLANGUAGE: bash\nCODE:\n```\n/cosmos/staking/v1beta1/delegators/{delegatorAddr}/redelegations\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \\\n\"http://localhost:1317/cosmos/staking/v1beta1/delegators/cosmos1thfntksw0d35n2tkr0k8v54fr8wxtxwxl2c56e/redelegations?srcValidatorAddr=cosmosvaloper1lzhlnpahvznwfv4jmay2tgaha5kmz5qx4cuznf&dstValidatorAddr=cosmosvaloper1vq8tw77kp8lvxq9u3c8eeln9zymn68rng8pgt4\" \\\n-H  \"accept: application/json\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"redelegation_responses\": [\n    {\n      \"redelegation\": {\n        \"delegator_address\": \"cosmos1thfntksw0d35n2tkr0k8v54fr8wxtxwxl2c56e\",\n        \"validator_src_address\": \"cosmosvaloper1lzhlnpahvznwfv4jmay2tgaha5kmz5qx4cuznf\",\n        \"validator_dst_address\": \"cosmosvaloper1vq8tw77kp8lvxq9u3c8eeln9zymn68rng8pgt4\",\n        \"entries\": null\n      },\n      \"entries\": [\n        {\n          \"redelegation_entry\": {\n            \"creation_height\": 151523,\n            \"completion_time\": \"2021-11-09T06:03:25.640682116Z\",\n            \"initial_balance\": \"200000000\",\n            \"shares_dst\": \"200000000.000000000000000000\"\n          },\n          \"balance\": \"200000000\"\n        }\n      ]\n    }\n  ],\n  \"pagination\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Using Interface Values with Collections in Cosmos SDK\nDESCRIPTION: This snippet demonstrates how to work with interface values in collections by using the codec.CollInterfaceValue type. This is necessary when handling different account types that implement the same interface.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/collections/README.md#2025-04-22_snippet_16\n\nLANGUAGE: go\nCODE:\n```\npackage example\n\nimport (\n    \"cosmossdk.io/collections\"\n    storetypes \"cosmossdk.io/store/types\"\n    \"github.com/cosmos/cosmos-sdk/codec\"\n    sdk \"github.com/cosmos/cosmos-sdk/types\"\n\tauthtypes \"github.com/cosmos/cosmos-sdk/x/auth/types\"\n)\n\nvar AccountsPrefix = collections.NewPrefix(0)\n\ntype Keeper struct {\n    Schema   collections.Schema\n    Accounts *collections.Map[sdk.AccAddress, sdk.AccountI]\n}\n\nfunc NewKeeper(cdc codec.BinaryCodec, storeKey *storetypes.KVStoreKey) Keeper {\n    sb := collections.NewSchemaBuilder(sdk.OpenKVStore(storeKey))\n    return Keeper{\n        Accounts: collections.NewMap(\n            sb, AccountsPrefix, \"accounts\",\n            sdk.AccAddressKey, codec.CollInterfaceValue[sdk.AccountI](cdc),\n        ),\n    }\n}\n\nfunc (k Keeper) SaveBaseAccount(ctx sdk.Context, account authtypes.BaseAccount) error {\n    return k.Accounts.Set(ctx, account.GetAddress(), account)\n}\n\nfunc (k Keeper) SaveModuleAccount(ctx sdk.Context, account authtypes.ModuleAccount) error {\n    return k.Accounts.Set(ctx, account.GetAddress(), account)\n}\n\nfunc (k Keeper) GetAccount(ctx sdk.context, addr sdk.AccAddress) (sdk.AccountI, error) {\n    return k.Accounts.Get(ctx, addr)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GenesisState Protobuf Message Structure - protobuf\nDESCRIPTION: This code reference provides an example definition of a GenesisState protobuf message in the Cosmos SDK's auth module. It serves as a model for defining module-specific genesis states as Protobuf message types, which represent the initial parameters and state needed during application genesis. The definition is external, so to use it, developers must check the referenced .proto file and understand the fields and structure used for module state initialization.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-modules/08-genesis.md#2025-04-22_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/proto/cosmos/auth/v1beta1/genesis.proto\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Command with Subcommands in Cosmos SDK\nDESCRIPTION: Example implementation of a query command with various subcommands for a Cosmos SDK application. This aggregates both core SDK query commands and module-specific query commands.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/advanced/07-cli.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nfunc queryCommand(app *appCreator) *cobra.Command {\n\tcmd := &cobra.Command{\n\t\tUse:                        \"query\",\n\t\tAliases:                    []string{\"q\"},\n\t\tShort:                      \"Querying subcommands\",\n\t\tDisableFlagParsing:         true,\n\t\tSuggestionsMinimumDistance: 2,\n\t\tRunE:                       client.ValidateCmd,\n\t}\n\n\tcmd.AddCommand(\n\t\trpc.QueryEventForTxCmd(),\n\t\trpc.QueryMempoolByHashCmd(),\n\t\trpc.QueryTxsByEventsCmd(),\n\t\trpc.QueryTxCmd(),\n\t\trpc.QueryBlockCmd(),\n\t\tauthcmd.QueryAuthzByGranterCmd(),\n\t\tauthcmd.QueryAuthzByGranteeCmd(),\n\t\tauthcmd.QueryAuthzGrantsCmd(),\n\t)\n\n\treturn cmd\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing HasName Interface Definition in Go\nDESCRIPTION: This Go code reference points to the HasName interface, which requires modules to implement a Name() method returning the module's name as a string. This is used for legacy module identification and registration purposes. Users should implement this only if backward compatibility with older SDK patterns is required.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-modules/01-module-manager.md#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/types/module/module.go#L71-L73\n```\n\n----------------------------------------\n\nTITLE: Defining Params Structure in Protobuf for x/auth Module\nDESCRIPTION: Example of how parameters are currently defined in the x/auth module using the x/params module for parameter management. This structure represents the existing approach that will be replaced.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-046-module-params.md#2025-04-22_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage Params {\n  uint64 max_memo_characters       = 1;\n  uint64 tx_sig_limit              = 2;\n  uint64 tx_size_cost_per_byte     = 3;\n  uint64 sig_verify_cost_ed25519   = 4;\n  uint64 sig_verify_cost_secp256k1 = 5;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MsgUndelegate Interface in Cosmos SDK Staking Module\nDESCRIPTION: Protobuf reference for the MsgUndelegate interface that allows delegators to undelegate their tokens from validators. This message is used to initiate the unbonding process.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/staking/README.md#2025-04-22_snippet_11\n\nLANGUAGE: protobuf\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.47.0-rc1/proto/cosmos/staking/v1beta1/tx.proto#L34-L36\n```\n\n----------------------------------------\n\nTITLE: Grant Delegate Authorization Example in Cosmos SDK\nDESCRIPTION: Example of granting a delegate authorization with spend limit, allowed validators, and denied validators for staking operations.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/authz/README.md#2025-04-22_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nsimd tx authz grant cosmos1.. delegate --spend-limit=100stake --allowed-validators=cosmos...,cosmos... --deny-validators=cosmos... --from=cosmos1..\n```\n\n----------------------------------------\n\nTITLE: Inverse Mapping of SIGN_MODE_TEXTUAL Rendering\nDESCRIPTION: Shows the corresponding input data that would generate the example output. This demonstrates the invertibility principle, where any rendered output can be traced back to exactly one input.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-050-sign-mode-textual-annex2.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nIndent  Text\n------  ----\n0       \"An introductory line.\"\n0       \"key1: 123456\"\n0       \"key2: a string that ends in whitespace   \"\n0       \"key3: a string that ends in  a single ampersand - @\"\n0       \">tricky key4<: note the leading space in the presentation\"\n0       \"introducing an aggregate\"\n1       \"key5: false\"\n1       \"key6: a very long line of text, please coöperate and break into multiple lines.\"\n1       \"Can we do further nesting?\"\n2       \"You bet we can!\"\n```\n\n----------------------------------------\n\nTITLE: Setting Module Account Permissions for ProtocolPool\nDESCRIPTION: Configures the module account permissions for the ProtocolPool module and its escrow account.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/UPGRADE_GUIDE.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmaccPerms = map[string][]string{\n    // ...\n    protocolpooltypes.ModuleName:                nil,\n    protocolpooltypes.ProtocolPoolEscrowAccount: nil,\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Keeper Implementation with Collections KeySet\nDESCRIPTION: Example showing how to implement a basic keeper structure using Collections KeySet with proper schema and prefix initialization.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/collections/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage collections\n\nimport (\n    \"cosmossdk.io/collections\"\n    storetypes \"cosmossdk.io/store/types\"\n    sdk \"github.com/cosmos/cosmos-sdk/types\"\n)\n\nvar AllowListPrefix = collections.NewPrefix(0)\n\ntype Keeper struct {\n\tSchema    collections.Schema\n\tAllowList collections.KeySet[string]\n}\n\nfunc NewKeeper(storeKey *storetypes.KVStoreKey) Keeper {\n\tsb := collections.NewSchemaBuilder(sdk.OpenKVStore(storeKey))\n\n\treturn Keeper{\n\t\tAllowList: collections.NewKeySet(sb, AllowListPrefix, \"allow_list\", collections.StringKey),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ExtendVoteHandler and VerifyVoteExtensionHandler in Go\nDESCRIPTION: Defines two new handler types for extending votes and verifying vote extensions in the ABCI 2.0 implementation.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-064-abci-2.0.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype ExtendVoteHandler func(sdk.Context, abci.RequestExtendVote) abci.ResponseExtendVote\ntype VerifyVoteExtensionHandler func(sdk.Context, abci.RequestVerifyVoteExtension) abci.ResponseVerifyVoteExtension\n```\n\n----------------------------------------\n\nTITLE: TypeSafeIterator Structure Definition\nDESCRIPTION: Iterator implementation for safe type handling when scanning through table rows.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/group/internal/orm/README.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nreference\nhttps://github.com/cosmos/cosmos-sdk/tree/release/v0.50.x/x/group/internal/orm/table.go#L287-L291\n```\n\n----------------------------------------\n\nTITLE: Deleting Values from CommitKVStoreCache in Go\nDESCRIPTION: Removes a key/value pair from both the cache and the underlying store, maintaining consistency across both layers.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/spec/store/interblock-cache.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nfunc Delete(\n    KVCache CommitKVStoreCache,\n    key string) {\n\n    KVCache.cache.Remove(key)\n    KVCache.store.Delete(key)\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Locked Coins for Vesting Account in Go\nDESCRIPTION: This function calculates the locked coins for a vesting account at a given time. It returns the maximum of vesting coins minus delegated vesting, or zero.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/auth/vesting/README.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nfunc (va VestingAccount) LockedCoins(t Time) Coins {\n   return max(va.GetVestingCoins(t) - va.DelegatedVesting, 0)\n}\n```\n\n----------------------------------------\n\nTITLE: Stopping a Local Network in Cosmos SDK\nDESCRIPTION: Command to stop a local Cosmos SDK network and destroy its containers. Works the same for both standard and debug mode networks.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/contrib/images/simd-dlv/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# make localnet-stop\n```\n\n----------------------------------------\n\nTITLE: Custom Mint Function Interface Definition\nDESCRIPTION: Defines the function signature required for implementing custom minting logic in the module.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/mint/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype MintFn func(ctx sdk.Context, k *Keeper) error\n```\n\n----------------------------------------\n\nTITLE: Example Request for Querying Specific Deposit with v1beta1\nDESCRIPTION: An example curl command that demonstrates how to query deposit information for proposal ID 1 and a specific depositor using the v1beta1 endpoint.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/README.md#2025-04-22_snippet_73\n\nLANGUAGE: bash\nCODE:\n```\ncurl localhost:1317/cosmos/gov/v1beta1/proposals/1/deposits/cosmos1..\n```\n\n----------------------------------------\n\nTITLE: Querying All Votes on a Proposal using gRPC v1 in Cosmos SDK\nDESCRIPTION: The gRPC endpoint for querying all votes on a specific proposal using the current v1 API.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/README.md#2025-04-22_snippet_45\n\nLANGUAGE: bash\nCODE:\n```\ncosmos.gov.v1.Query/Votes\n```\n\n----------------------------------------\n\nTITLE: Defining MsgWithdrawDelegatorReward Protobuf Message\nDESCRIPTION: Protobuf definition for the MsgWithdrawDelegatorReward message used by delegators to withdraw their rewards. This message is part of the distribution module's transaction protocol.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/distribution/README.md#2025-04-22_snippet_10\n\nLANGUAGE: protobuf\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.47.0-rc1/proto/cosmos/distribution/v1beta1/tx.proto#L66-L77\n```\n\n----------------------------------------\n\nTITLE: Adding Query Flags to Cobra Command - Go (Reference)\nDESCRIPTION: This code reference provides a URL to the AddQueryFlagsToCmd function in the Cosmos SDK, which appends common query-related CLI flags to a Cobra command. Intended for command implementations that query module state, it helps standardize query operations across different modules. The reference points to the relevant function source code in the Cosmos SDK client/flags package.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-modules/09-module-interfaces.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/client/flags/flags.go#L95-L106\n```\n\n----------------------------------------\n\nTITLE: Adding Epochs Keeper to App Struct\nDESCRIPTION: Adds the Epochs keeper to the application struct to make it accessible throughout the application.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/UPGRADE_GUIDE.md#2025-04-22_snippet_22\n\nLANGUAGE: go\nCODE:\n```\nEpochsKeeper epochskeeper.Keeper\n```\n\n----------------------------------------\n\nTITLE: Implementing cacheTxContext Function for Transaction Context Management in Go\nDESCRIPTION: This code defines the cacheTxContext function which creates isolated cached contexts for transaction execution. It branches both the context and its CacheMultiStore to prevent state changes from being committed if handlers fail.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/advanced/00-baseapp.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc (app *BaseApp) cacheTxContext(ctx sdk.Context, txBytes []byte) (sdk.Context, sdk.CacheMultiStore) {\n\tms := ctx.MultiStore()\n\t// TODO: https://github.com/cosmos/cosmos-sdk/issues/2824\n\tmsCache := ms.CacheMultiStore()\n\tif msCache.TracingEnabled() {\n\t\tmsCache = msCache.SetTracingContext(\n\t\t\tsdk.TraceContext(\n\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\"txHash\": fmt.Sprintf(\"%X\", sha256.Sum256(txBytes)),\n\t\t\t\t},\n\t\t\t),\n\t\t)\n\t}\n\tctx = ctx.WithMultiStore(msCache)\n\treturn ctx, msCache\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Group Info using REST\nDESCRIPTION: Shows how to query group information using the REST API endpoint. Returns group details including ID, admin, metadata, version and total weight.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/group/README.md#2025-04-22_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\ncurl localhost:1317/cosmos/group/v1/group_info/1\n```\n\n----------------------------------------\n\nTITLE: Retrieving Capabilities by Name in Go\nDESCRIPTION: GetCapability function that allows a module to fetch a previously claimed capability by its name.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-003-dynamic-capability-store.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nfunc (sck ScopedCapabilityKeeper) GetCapability(ctx Context, name string) (Capability, error) {\n  // fetch the index of capability using reverse mapping in memstore\n  index := memStore.Get(sck.moduleName + \"/rev/\" + name)\n\n  // fetch capability from go-map using index\n  capability := capMap[index]\n\n  // return the capability\n  return capability\n}\n```\n\n----------------------------------------\n\nTITLE: Withdrawing All Rewards Command\nDESCRIPTION: CLI command to withdraw all rewards for a delegator\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/distribution/README.md#2025-04-22_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nsimd tx distribution withdraw-all-rewards [flags]\n```\n\nLANGUAGE: shell\nCODE:\n```\nsimd tx distribution withdraw-all-rewards --from cosmos1...\n```\n\n----------------------------------------\n\nTITLE: Canceling a Governance Proposal using the CLI in Cosmos SDK\nDESCRIPTION: This command allows users to cancel an existing proposal using its ID. Upon cancellation, a portion of the deposits will be either burned or sent to the ProposalCancelDest address, with remaining deposits returned to depositors.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/README.md#2025-04-22_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nsimd tx gov cancel-proposal [proposal-id] [flags]\n```\n\n----------------------------------------\n\nTITLE: Starting TMKMS and Cosmos SDK Node\nDESCRIPTION: Commands to start both the TMKMS remote signer and the Cosmos SDK node. The TMKMS process must be started first to ensure it's ready to handle signing requests when the node connects.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/user/run-node/06-run-production.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ntmkms start -c $HOME/tmkms/config/tmkms.toml\n```\n\nLANGUAGE: bash\nCODE:\n```\nsimd start\n```\n\n----------------------------------------\n\nTITLE: Example Output of Proposal Query with gRPC v1beta1 in Cosmos SDK\nDESCRIPTION: The JSON response structure when querying a proposal using the v1beta1 gRPC endpoint, showing proposal status, timing, deposits and voting information.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/README.md#2025-04-22_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"proposal\": {\n    \"proposalId\": \"1\",\n    \"content\": {\"@type\":\"/cosmos.gov.v1beta1.TextProposal\",\"description\":\"testing, testing, 1, 2, 3\",\"title\":\"Test Proposal\"},\n    \"status\": \"PROPOSAL_STATUS_VOTING_PERIOD\",\n    \"finalTallyResult\": {\n      \"yes\": \"0\",\n      \"abstain\": \"0\",\n      \"no\": \"0\",\n      \"noWithVeto\": \"0\"\n    },\n    \"submitTime\": \"2021-09-16T19:40:08.712440474Z\",\n    \"depositEndTime\": \"2021-09-18T19:40:08.712440474Z\",\n    \"totalDeposit\": [\n      {\n        \"denom\": \"stake\",\n        \"amount\": \"10000000\"\n      }\n    ],\n    \"votingStartTime\": \"2021-09-16T19:40:08.712440474Z\",\n    \"votingEndTime\": \"2021-09-18T19:40:08.712440474Z\",\n    \"title\": \"Test Proposal\",\n    \"summary\": \"testing, testing, 1, 2, 3\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Transaction Handler to BaseApp Structure\nDESCRIPTION: Modification to BaseApp structure to include a reference to a transaction Handler for processing transactions.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-045-check-delivertx-middlewares.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype BaseApp  struct {\n    // other fields\n    txHandler tx.Handler\n}\n```\n\n----------------------------------------\n\nTITLE: Trip Circuit Breaker Message Structure in Protobuf\nDESCRIPTION: Complete protobuf definition for MsgTripCircuitBreaker which is used to disable processing of specific message types. References the full implementation from the Cosmos SDK repository.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/circuit/README.md#2025-04-22_snippet_7\n\nLANGUAGE: protobuf\nCODE:\n```\n// MsgTripCircuitBreaker defines the Msg/TripCircuitBreaker request type.\nmessage MsgTripCircuitBreaker {\n  option (cosmos.msg.v1.signer) = \"authority\";\n  option (amino.name) = \"cosmos-sdk/MsgTripCircuitBreaker\";\n\n  // authority is the account authorized to trip the circuit breaker.\n  string authority = 1 [(cosmos_proto.scalar) = \"cosmos.AddressString\"];\n\n  // msg_type_urls specifies a list of type URLs to immediately stop processing.\n  // If empty, all Msg's except for those required for an untrip will be disabled.\n  repeated string msg_type_urls = 2;\n}\n\n// MsgTripCircuitBreakerResponse defines the Msg/TripCircuitBreaker response type.\nmessage MsgTripCircuitBreakerResponse {}\n```\n\n----------------------------------------\n\nTITLE: CLI Query Commands for x/authz Module\nDESCRIPTION: Example of using the command line interface to query authz grants between accounts. This demonstrates how to retrieve authorization information for a granter-grantee pair with an optional message type filter.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/authz/README.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nsimd query authz grants cosmos1.. cosmos1.. /cosmos.bank.v1beta1.MsgSend\n```\n\n----------------------------------------\n\nTITLE: UpdateGroupPolicyAdmin Message Definition in Protobuf\nDESCRIPTION: Protocol buffer definition for MsgUpdateGroupPolicyAdmin which updates a group policy's admin address.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/group/README.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/tree/release/v0.50.x/proto/cosmos/group/v1/tx.proto#L173-L186\n```\n\n----------------------------------------\n\nTITLE: Adding ProtocolPool Module Config for DI\nDESCRIPTION: Adds the ProtocolPool module configuration to the ModuleConfig for dependency injection.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/UPGRADE_GUIDE.md#2025-04-22_snippet_20\n\nLANGUAGE: go\nCODE:\n```\n{\n    Name:   protocolpooltypes.ModuleName,\n    Config: appconfig.WrapAny(&protocolpoolmodulev1.Module{}),\n},\n```\n\n----------------------------------------\n\nTITLE: Importing Cosmos SDK Logging Packages\nDESCRIPTION: These examples show how to import the zerolog-based logging implementation and the slog wrapper for Cosmos SDK applications and modules.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/log/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Log\n\nThe `cosmossdk.io/log` provides a zerolog logging implementation for the Cosmos SDK and Cosmos SDK modules.\n\nTo use a logger wrapping an instance of the standard library's `log/slog` package, use `cosmossdk.io/log/slog`.\n```\n\n----------------------------------------\n\nTITLE: Defining Message Service for Account Rekeying in Protobuf\nDESCRIPTION: Protobuf definition for the account rekeying service and message types. Includes MsgChangePubKey for requesting a public key change and its response type.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-034-account-rekeying.md#2025-04-22_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nservice Msg {\n    rpc ChangePubKey(MsgChangePubKey) returns (MsgChangePubKeyResponse);\n}\n\nmessage MsgChangePubKey {\n  string address = 1;\n  google.protobuf.Any pub_key = 2;\n}\n\nmessage MsgChangePubKeyResponse {}\n```\n\n----------------------------------------\n\nTITLE: Valid Examples of 'Since' Comments in Protobuf\nDESCRIPTION: These examples show correct formatting for the 'Since' comment in Protobuf definitions, specifying the Cosmos SDK versions where new fields are introduced.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-044-protobuf-updates-guidelines.md#2025-04-22_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\n// Since: cosmos-sdk 0.44\n\n// Since: cosmos-sdk 0.42.11, 0.44.5\n```\n\n----------------------------------------\n\nTITLE: Extending Transaction Fee Structure with Granter Field\nDESCRIPTION: Protocol Buffer message definition extending the transaction Fee type to include a granter field, which identifies an account that has granted a fee allowance to the transaction signer or payer.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-029-fee-grant-module.md#2025-04-22_snippet_3\n\nLANGUAGE: protobuf\nCODE:\n```\npackage cosmos.tx.v1beta1;\n\nmessage Fee {\n  repeated cosmos.base.v1beta1.Coin amount = 1;\n  uint64 gas_limit = 2;\n  string payer = 3;\n  string granter = 4;\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Tally Results - gRPC\nDESCRIPTION: Demonstrates querying the tally results for a proposal using both v1beta1 and v1 gRPC endpoints. Returns voting counts for yes, no, abstain, and veto options.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/README.md#2025-04-22_snippet_56\n\nLANGUAGE: bash\nCODE:\n```\ngrpcurl -plaintext \\\n    -d '{\"proposal_id\":\"1\"}' \\\n    localhost:9090 \\\n    cosmos.gov.v1beta1.Query/TallyResult\n```\n\n----------------------------------------\n\nTITLE: ValidatorSigningInfo Proto Definition\nDESCRIPTION: Protobuf definition for tracking validator liveness and signing information including address, start height, index offset and other signing metrics.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/slashing/README.md#2025-04-22_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage ValidatorSigningInfo {\n  string address = 1;\n  int64 start_height = 2;\n  int64 index_offset = 3;\n  // Timestamp until which the validator is jailed due to liveness downtime.\n  google.protobuf.Timestamp jailed_until = 4;\n  // Whether or not a validator has been tombstoned (killed out of validator set)\n  bool tombstoned = 5;\n  // Missed blocks counter (to avoid scanning the array every time)\n  int64 missed_blocks_counter = 6;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Store Cache from the Manager in Go\nDESCRIPTION: Function to get a cache for a given store key. If the cache doesn't exist for the store key, a new one is created and added to the manager's cache map.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/spec/store/interblock-cache.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc GetStoreCache(\n    manager CommitKVStoreCacheManager,\n    storeKey string,\n    store CommitKVStore) CommitKVStore {\n\n    if manager.caches.has(storeKey) {\n        return manager.caches.get(storeKey)\n    } else {\n        cache = CommitKVStoreCacheManager{store, manager.cacheSize}\n        manager.set(storeKey, cache)\n        return cache\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Protobuf Serializer Implementation in Go\nDESCRIPTION: Example of a hand-written serializer in Go that follows the deterministic serialization rules. This implementation manually handles field serialization using protobuf wire format.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-027-deterministic-protobuf-serialization.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nif !signDoc.body_bytes.empty() {\n    buf.WriteUVarInt64(0xA) // wire type and field number for body_bytes\n    buf.WriteUVarInt64(signDoc.body_bytes.length())\n    buf.WriteBytes(signDoc.body_bytes)\n}\n\nif !signDoc.auth_info.empty() {\n    buf.WriteUVarInt64(0x12) // wire type and field number for auth_info\n    buf.WriteUVarInt64(signDoc.auth_info.length())\n    buf.WriteBytes(signDoc.auth_info)\n}\n\nif !signDoc.chain_id.empty() {\n    buf.WriteUVarInt64(0x1a) // wire type and field number for chain_id\n    buf.WriteUVarInt64(signDoc.chain_id.length())\n    buf.WriteBytes(signDoc.chain_id)\n}\n\nif signDoc.account_number != 0 {\n    buf.WriteUVarInt64(0x20) // wire type and field number for account_number\n    buf.WriteUVarInt(signDoc.account_number)\n}\n\nif signDoc.account_sequence != 0 {\n    buf.WriteUVarInt64(0x28) // wire type and field number for account_sequence\n    buf.WriteUVarInt(signDoc.account_sequence)\n}\n```\n\n----------------------------------------\n\nTITLE: General Format for Cosmos SDK CLI Query Commands (Bash)\nDESCRIPTION: This snippet shows the generic structure of a query command executed via the Cosmos SDK application CLI (`simd`). It illustrates the hierarchical components: the application binary, the `query` command type, the target module name, the specific query command within the module, mandatory arguments, and optional flags.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/beginner/02-query-lifecycle.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsimd query [moduleName] [command] <arguments> --flag <flagArg>\n```\n\n----------------------------------------\n\nTITLE: Querying All Fee Allowances via gRPC in Cosmos SDK (Shell)\nDESCRIPTION: gRPC command to query all granted fee allowances for a given grantee using the Allowances endpoint in the Cosmos SDK.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/feegrant/README.md#2025-04-22_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\ncosmos.feegrant.v1beta1.Query/Allowances\n```\n\nLANGUAGE: shell\nCODE:\n```\ngrpcurl -plaintext \\\n    -d '{\"address\":\"cosmos1..\"}' \\\n    localhost:9090 \\\n    cosmos.feegrant.v1beta1.Query/Allowances\n```\n\n----------------------------------------\n\nTITLE: Module Manager Structure Reference\nDESCRIPTION: Core definition of the Manager structure that holds and coordinates AppModules within a Cosmos SDK application.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-modules/01-module-manager.md#2025-04-22_snippet_19\n\nLANGUAGE: go\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/types/module/module.go#L267-L276\n```\n\n----------------------------------------\n\nTITLE: Defining NFT Structure in Protobuf for Individual Tokens\nDESCRIPTION: Protocol buffer definition for the NFT type which represents a unique, non-fungible token. Each NFT belongs to a Class and contains identifiers, metadata URIs, and optional app-specific data.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-043-nft-module.md#2025-04-22_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage NFT {\n  string class_id           = 1;\n  string id                 = 2;\n  string uri                = 3;\n  string uri_hash           = 4;\n  google.protobuf.Any data  = 10;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting ProtocolPool Module Account Permissions for DI\nDESCRIPTION: Configures module account permissions for the ProtocolPool module in the dependency injection system.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/UPGRADE_GUIDE.md#2025-04-22_snippet_15\n\nLANGUAGE: go\nCODE:\n```\nmoduleAccPerms = []*authmodulev1.ModuleAccountPermission{\n    // ...\n    {Account: protocolpooltypes.ModuleName},\n    {Account: protocolpooltypes.ProtocolPoolEscrowAccount},\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing HasGenesis Interface in Go\nDESCRIPTION: The `HasGenesis` interface enables modules to manage their state using genesis data. It provides methods for writing the default genesis state, validating genesis input, initializing module state, and exporting state data. Dependencies include `GenesisSource` and `GenesisTarget` interfaces.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-063-core-module-api.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\ntype HasGenesis interface {\n    AppModule\n\n    // DefaultGenesis writes the default genesis for this module to the target.\n    DefaultGenesis(GenesisTarget) error\n\n    // ValidateGenesis validates the genesis data read from the source.\n    ValidateGenesis(GenesisSource) error\n\n    // InitGenesis initializes module state from the genesis source.\n    InitGenesis(context.Context, GenesisSource) error\n\n    // ExportGenesis exports module state to the genesis target.\n    ExportGenesis(context.Context, GenesisTarget) error\n}\n\n```\n\n----------------------------------------\n\nTITLE: Querying a Vote on a Proposal using gRPC v1 in Cosmos SDK\nDESCRIPTION: The gRPC endpoint for querying an individual vote on a specific proposal using the current v1 API.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/README.md#2025-04-22_snippet_39\n\nLANGUAGE: bash\nCODE:\n```\ncosmos.gov.v1.Query/Vote\n```\n\n----------------------------------------\n\nTITLE: Releasing Claimed Capabilities in Go\nDESCRIPTION: ReleaseCapability function that allows a module to release ownership of a previously claimed capability.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-003-dynamic-capability-store.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nfunc (sck ScopedCapabilityKeeper) ReleaseCapability(ctx Context, capability Capability) err {\n  persistentStore := ctx.KVStore(sck.persistentKey)\n\n  name := capStore.Get(sck.moduleName + \"/fwd/\" + capability)\n  if name == nil {\n    return error(\"capability not owned by module\")\n  }\n\n  // delete forward mapping in memory store\n  memoryStore.Delete(sck.moduleName + \"/fwd/\" + capability, name)\n\n  // delete reverse mapping in memory store\n  memoryStore.Delete(sck.moduleName + \"/rev/\" + name, capability)\n\n  // update owner set in persistent store\n  owners := persistentStore.Get(capability.Index())\n  owners.remove(sck.moduleName + \"/\" + name)\n  if owners.size() > 0 {\n    // there are still other owners, keep the capability around\n    persistentStore.Set(capability.Index(), owners)\n  } else {\n    // no more owners, delete the capability\n    persistentStore.Delete(capability.Index())\n    delete(capMap[capability.Index()])\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: SimApp Module Configuration Example\nDESCRIPTION: Example of Module Manager integration within a simulation application, showing how modules are configured and ordered for different operations.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-modules/01-module-manager.md#2025-04-22_snippet_20\n\nLANGUAGE: go\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/simapp/app.go#L411-L434\n```\n\n----------------------------------------\n\nTITLE: Querying Validators via gRPC in Cosmos SDK\nDESCRIPTION: This gRPC endpoint queries all validators that match the given status. It returns detailed information about each validator, including their address, consensus public key, and commission rates.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/staking/README.md#2025-04-22_snippet_41\n\nLANGUAGE: bash\nCODE:\n```\ngrpcurl -plaintext localhost:9090 cosmos.staking.v1beta1.Query/Validators\n```\n\n----------------------------------------\n\nTITLE: Example of Querying All Votes with gRPC v1beta1 in Cosmos SDK\nDESCRIPTION: A practical example showing how to use grpcurl to query all votes on proposal ID 1 using the v1beta1 gRPC endpoint.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/README.md#2025-04-22_snippet_43\n\nLANGUAGE: bash\nCODE:\n```\ngrpcurl -plaintext \\\n    -d '{\"proposal_id\":\"1\"}' \\\n    localhost:9090 \\\n    cosmos.gov.v1beta1.Query/Votes\n```\n\n----------------------------------------\n\nTITLE: Implementing Alternative Value Codec for Bank Balance Migration\nDESCRIPTION: Shows how to implement an AltValueCodec for migrating bank balances from Coin to Int representation. The codec allows decoding both formats while ensuring new values are encoded in the new format.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/collections/README.md#2025-04-22_snippet_18\n\nLANGUAGE: go\nCODE:\n```\nvar BankBalanceValueCodec = codec.NewAltValueCodec(sdk.IntValue, func(b []byte) (sdk.Int, error) {\n    coin := sdk.Coin{}\n    err := coin.Unmarshal(b)\n    if err != nil {\n        return sdk.Int{}, err\n    }\n    return coin.Amount, nil\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Snapshot Protobuf Message for ABCI\nDESCRIPTION: Protobuf definition of the Snapshot message used in ABCI for state sync. It includes fields for height, format, chunks, hash, and metadata.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/store/snapshots/README.md#2025-04-22_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage Snapshot {\n  uint64 height   = 1;  // The height at which the snapshot was taken\n  uint32 format   = 2;  // The application-specific snapshot format\n  uint32 chunks   = 3;  // Number of chunks in the snapshot\n  bytes  hash     = 4;  // Arbitrary snapshot hash, equal only if identical\n  bytes  metadata = 5;  // Arbitrary application metadata\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Group\nDESCRIPTION: Command to create a new group with specified admin, metadata, and members from a JSON file\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/group/README.md#2025-04-22_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nsimd tx group create-group [admin] [metadata] [members-json-file]\n```\n\n----------------------------------------\n\nTITLE: Example: Creating Smart Contract Address with Multiple Keys in Go\nDESCRIPTION: Demonstrates constructing a smart contract address using `Module` with multiple distinct derivation keys: the VM name (\"mySmartContractVM\"), a namespace, and a contract-specific key. Note the potentially extraneous closing parenthesis and brace `})` in the original snippet.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-028-public-key-addresses.md#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nsmartContractAddr = Module(\"mySmartContractVM\", smartContractsNamespace, smartContractKey})\n```\n\n----------------------------------------\n\nTITLE: Implementing OutOfGas Recovery Middleware in Go\nDESCRIPTION: Shows an implementation of a specific recovery middleware for handling OutOfGas errors in Cosmos SDK. It checks if the recovery object is an OutOfGas error and wraps it with additional context if so.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-022-custom-panic-handling.md#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nfunc newOutOfGasRecoveryMiddleware(gasWanted uint64, ctx sdk.Context, next recoveryMiddleware) recoveryMiddleware {\n    handler := func(recoveryObj interface{}) error {\n        err, ok := recoveryObj.(sdk.ErrorOutOfGas)\n        if !ok { return nil }\n\n        return errorsmod.Wrap(\n            sdkerrors.ErrOutOfGas, fmt.Sprintf(\n                \"out of gas in location: %v; gasWanted: %d, gasUsed: %d\", err.Descriptor, gasWanted, ctx.GasMeter().GasConsumed(),\n            ),\n        )\n    }\n\n    return newRecoveryMiddleware(handler, next)\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Chain State in Cosmos SDK\nDESCRIPTION: Example of an InitChainer implementation from simapp that initializes application state from genesis file. It uses keeper getters and parameters to setup the initial blockchain state.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/beginner/00-app-anatomy.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc (app *SimApp) InitChainer(ctx sdk.Context, req abci.RequestInitChain) abci.ResponseInitChain {\n    var genesisState GenesisState\n    if err := json.Unmarshal(req.AppStateBytes, &genesisState); err != nil {\n        panic(err)\n    }\n    app.UpgradeKeeper.SetModuleVersionMap(ctx, app.mm.GetVersionMap())\n    return app.mm.InitGenesis(ctx, app.appCodec, genesisState)\n}\n```\n\n----------------------------------------\n\nTITLE: HistoricalInfo Protocol Buffer Definition\nDESCRIPTION: Protocol buffer definition for storing historical validator sets and headers. Used to track recent validator set changes and blockchain headers.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/staking/README.md#2025-04-22_snippet_4\n\nLANGUAGE: protobuf\nCODE:\n```\n// reference: https://github.com/cosmos/cosmos-sdk/blob/v0.47.0-rc1/proto/cosmos/staking/v1beta1/staking.proto#L17-L24\n```\n\n----------------------------------------\n\nTITLE: Implementing Typed Event Functions in Go\nDESCRIPTION: Implementation of EmitTypedEvent and ParseTypedEvent functions in the types package to handle conversion between typed events and sdk.Event.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-032-typed-events.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// types/events.go\n\n// EmitTypedEvent takes typed event and emits converting it into sdk.Event\nfunc (em *EventManager) EmitTypedEvent(event proto.Message) error {\n\tevtType := proto.MessageName(event)\n\tevtJSON, err := codec.ProtoMarshalJSON(event)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tvar attrMap map[string]json.RawMessage\n\terr = json.Unmarshal(evtJSON, &attrMap)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tvar attrs []abci.EventAttribute\n\tfor k, v := range attrMap {\n\t\tattrs = append(attrs, abci.EventAttribute{\n\t\t\tKey:   []byte(k),\n\t\t\tValue: v,\n\t\t})\n\t}\n\n\tem.EmitEvent(Event{\n\t\tType:       evtType,\n\t\tAttributes: attrs,\n\t})\n\n\treturn nil\n}\n\n// ParseTypedEvent converts abci.Event back to typed event\nfunc ParseTypedEvent(event abci.Event) (proto.Message, error) {\n\tconcreteGoType := proto.MessageType(event.Type)\n\tif concreteGoType == nil {\n\t\treturn nil, fmt.Errorf(\"failed to retrieve the message of type %q\", event.Type)\n\t}\n\n\tvar value reflect.Value\n\tif concreteGoType.Kind() == reflect.Ptr {\n\t\tvalue = reflect.New(concreteGoType.Elem())\n\t} else {\n\t\tvalue = reflect.Zero(concreteGoType)\n    }\n\n\tprotoMsg, ok := value.Interface().(proto.Message)\n\tif !ok {\n\t\treturn nil, fmt.Errorf(\"%q does not implement proto.Message\", event.Type)\n\t}\n\n\tattrMap := make(map[string]json.RawMessage)\n\tfor _, attr := range event.Attributes {\n\t\tattrMap[string(attr.Key)] = attr.Value\n\t}\n\n\tattrBytes, err := json.Marshal(attrMap)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\terr = jsonpb.Unmarshal(strings.NewReader(string(attrBytes)), protoMsg)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn protoMsg, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing PublishChainTxEvents for Transaction Events in Go\nDESCRIPTION: This snippet defines the PublishChainTxEvents function, which subscribes to transaction events, parses them using the basic manager, and publishes them to a pubsub bus. It demonstrates how to handle and process transaction events in the Cosmos SDK.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-032-typed-events.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// PublishChainTxEvents events using cmtclient. Waits on context shutdown signals to exit.\nfunc PublishChainTxEvents(ctx context.Context, client cmtclient.EventsClient, bus pubsub.Bus, mb module.BasicManager) (err error) {\n    // Subscribe to transaction events\n    txch, err := client.Subscribe(ctx, \"txevents\", \"tm.event='Tx'\", 100)\n    if err != nil {\n        return err\n    }\n\n    // Unsubscribe from transaction events on function exit\n    defer func() {\n        err = client.UnsubscribeAll(ctx, \"txevents\")\n    }()\n\n    // Use errgroup to manage concurrency\n    g, ctx := errgroup.WithContext(ctx)\n\n    // Publish transaction events in a goroutine\n    g.Go(func() error {\n        var err error\n        for {\n            select {\n            case <-ctx.Done():\n                break\n            case ed := <-ch:\n                switch evt := ed.Data.(type) {\n                case cmttypes.EventDataTx:\n                    if !evt.Result.IsOK() {\n                        continue\n                    }\n                    // range over events, parse them using the basic manager and\n                    // send them to the pubsub bus\n                    for _, abciEv := range events {\n                        typedEvent, err := sdk.ParseTypedEvent(abciEv)\n                        if err != nil {\n                            return er\n                        }\n                        if err := bus.Publish(typedEvent); err != nil {\n                            bus.Close()\n                            return\n                        }\n                        continue\n                    }\n                }\n            }\n        }\n        return err\n\t})\n\n    // Exit on error or context cancelation\n    return g.Wait()\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SpecializationGroup Interface for Group Management in Go\nDESCRIPTION: This code snippet defines the SpecializationGroup interface, which extends the Electionator interface and adds methods for managing group properties, handling messages, and executing end-block logic.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-007-specialization-groups.md#2025-04-22_snippet_3\n\nLANGUAGE: golang\nCODE:\n```\ntype SpecializationGroup interface {\n    Electionator\n    GetName() string\n    GetDescription() string\n\n    // general soft contract the group is expected\n    // to fulfill with the greater community\n    GetContract() string\n\n    // messages which can be executed by the members of the group\n    Handler(ctx sdk.Context, msg sdk.Msg) sdk.Result\n\n    // logic to be executed at endblock, this may for instance\n    // include payment of a stipend to the group members\n    // for participation in the security group.\n    EndBlocker(ctx sdk.Context)\n}\n```\n\n----------------------------------------\n\nTITLE: Gas Price Adjustment Algorithm in Python\nDESCRIPTION: Algorithm for adjusting gas prices based on previous block load, similar to EIP-1559 implementation.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-048-consensus-fees.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef adjust_gas_price(gas_price, parent_gas_used, tier):\n  if parent_gas_used == tier.parent_gas_target:\n    return gas_price\n  elif parent_gas_used > tier.parent_gas_target:\n    gas_used_delta = parent_gas_used - tier.parent_gas_target\n    gas_price_delta = max(gas_price * gas_used_delta // tier.parent_gas_target // tier.change_speed, 1)\n    return gas_price + gas_price_delta\n  else:\n    gas_used_delta = parent_gas_target - parent_gas_used\n    gas_price_delta = gas_price * gas_used_delta // parent_gas_target // tier.change_speed\n    return gas_price - gas_price_delta\n```\n\n----------------------------------------\n\nTITLE: Installing Confix Standalone via Go\nDESCRIPTION: Command to install Confix as a standalone tool using Go.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/tools/confix/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngo install cosmossdk.io/tools/confix/cmd/confix@latest\n```\n\n----------------------------------------\n\nTITLE: Defining ABCIListener interface for streaming services in Go\nDESCRIPTION: Definition of the ABCIListener interface which allows streaming services to listen to ABCI requests/responses and state changes from the BaseApp.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-038-state-listening.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\n// baseapp/streaming.go\n\n// ABCIListener is the interface that we're exposing as a streaming service.\ntype ABCIListener interface {\n\t// ListenFinalizeBlock updates the streaming service with the latest FinalizeBlock messages\n\tListenFinalizeBlock(ctx context.Context, req abci.RequestFinalizeBlock, res abci.ResponseFinalizeBlock) error\n\t// ListenCommit updates the steaming service with the latest Commit messages and state changes\n\tListenCommit(ctx context.Context, res abci.ResponseCommit, changeSet []*StoreKVPair) error\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Single Evidence via gRPC\nDESCRIPTION: gRPC endpoint for retrieving evidence by hash value. Uses the cosmos.evidence.v1beta1.Query/Evidence service endpoint.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/evidence/README.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncosmos.evidence.v1beta1.Query/Evidence\n```\n\nLANGUAGE: bash\nCODE:\n```\ngrpcurl -plaintext -d '{\"evidence_hash\":\"DF0C23E8634E480F84B9D5674A7CDC9816466DEC28A3358F73260F68D28D7660\"}' localhost:9090 cosmos.evidence.v1beta1.Query/Evidence\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"evidence\": {\n    \"consensus_address\": \"cosmosvalcons1ntk8eualewuprz0gamh8hnvcem2nrcdsgz563h\",\n    \"height\": \"11\",\n    \"power\": \"100\",\n    \"time\": \"2021-10-20T16:08:38.194017624Z\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Create Continuous Fund Message Definition\nDESCRIPTION: Protobuf definition for CreateContinuousFund RPC method that sets up continuous fund distribution to a specific recipient.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/protocolpool/README.md#2025-04-22_snippet_2\n\nLANGUAGE: protobuf\nCODE:\n```\n  // CreateContinuousFund defines a method to distribute a percentage of funds to an address continuously.\n  // This ContinuousFund can be indefinite or run until a given expiry time.\n  // Funds come from validator block rewards from x/distribution, but may also come from\n  // any user who funds the ProtocolPoolEscrow module account directly through x/bank.\n  rpc CreateContinuousFund(MsgCreateContinuousFund) returns (MsgCreateContinuousFundResponse);\n```\n\n----------------------------------------\n\nTITLE: Defining AppModule Interface in Go\nDESCRIPTION: Defines the core AppModule interface for the cosmos-sdk core API, which serves as a tag interface for identifying module implementations.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-063-core-module-api.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype AppModule interface {\n  depinject.OnePerModuleType\n\n  // IsAppModule is a dummy method to tag a struct as implementing an AppModule.\n  IsAppModule()\n}\n```\n\n----------------------------------------\n\nTITLE: Querying All Deposits for a Proposal using v1 in Cosmos SDK\nDESCRIPTION: REST API endpoint for retrieving all deposits for a specific proposal using the v1 path. Similar to the v1beta1 endpoint but with the updated API version.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/README.md#2025-04-22_snippet_81\n\nLANGUAGE: bash\nCODE:\n```\n/cosmos/gov/v1/proposals/{proposal_id}/deposits\n```\n\n----------------------------------------\n\nTITLE: gRPC Current Plan Query\nDESCRIPTION: gRPC endpoint to query the current upgrade plan.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/upgrade/README.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ngrpcurl -plaintext localhost:9090 cosmos.slashing.v1beta1.Query/CurrentPlan\n```\n\n----------------------------------------\n\nTITLE: Querying Governance Module Parameters using gRPC v1beta1 in Cosmos SDK\nDESCRIPTION: The gRPC endpoint for querying governance module parameters using the legacy v1beta1 API.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/README.md#2025-04-22_snippet_48\n\nLANGUAGE: bash\nCODE:\n```\ncosmos.gov.v1beta1.Query/Params\n```\n\n----------------------------------------\n\nTITLE: Querying Historical Information with gRPC in Cosmos Staking Module\nDESCRIPTION: This gRPC endpoint retrieves historical information at a specific blockchain height. It returns block header details and validator set information from that point in time, useful for historical analysis and verification.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/staking/README.md#2025-04-22_snippet_52\n\nLANGUAGE: bash\nCODE:\n```\ncosmos.staking.v1beta1.Query/HistoricalInfo\n```\n\nLANGUAGE: bash\nCODE:\n```\ngrpcurl -plaintext -d '{\"height\" : 1}' localhost:9090 cosmos.staking.v1beta1.Query/HistoricalInfo\n```\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"hist\": {\n    \"header\": {\n      \"version\": {\n        \"block\": \"11\",\n        \"app\": \"0\"\n      },\n      \"chain_id\": \"simd-1\",\n      \"height\": \"140142\",\n      \"time\": \"2021-10-11T10:56:29.720079569Z\",\n      \"last_block_id\": {\n        \"hash\": \"9gri/4LLJUBFqioQ3NzZIP9/7YHR9QqaM6B2aJNQA7o=\",\n        \"part_set_header\": {\n          \"total\": 1,\n          \"hash\": \"Hk1+C864uQkl9+I6Zn7IurBZBKUevqlVtU7VqaZl1tc=\"\n        }\n      },\n      \"last_commit_hash\": \"VxrcS27GtvGruS3I9+AlpT7udxIT1F0OrRklrVFSSKc=\",\n      \"data_hash\": \"80BjOrqNYUOkTnmgWyz9AQ8n7SoEmPVi4QmAe8RbQBY=\",\n      \"validators_hash\": \"95W49n2hw8RWpr1GPTAO5MSPi6w6Wjr3JjjS7AjpBho=\",\n      \"next_validators_hash\": \"95W49n2hw8RWpr1GPTAO5MSPi6w6Wjr3JjjS7AjpBho=\",\n      \"consensus_hash\": \"BICRvH3cKD93v7+R1zxE2ljD34qcvIZ0Bdi389qtoi8=\",\n      \"app_hash\": \"ZZaxnSY3E6Ex5Bvkm+RigYCK82g8SSUL53NymPITeOE=\",\n      \"last_results_hash\": \"47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=\",\n      \"evidence_hash\": \"47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=\",\n      \"proposer_address\": \"aH6dO428B+ItuoqPq70efFHrSMY=\"\n    },\n  \"valset\": [\n      {\n        \"operator_address\": \"cosmosvaloper196ax4vc0lwpxndu9dyhvca7jhxp70rmcqcnylw\",\n        \"consensus_pubkey\": {\n          \"@type\": \"/cosmos.crypto.ed25519.PubKey\",\n          \"key\": \"/O7BtNW0pafwfvomgR4ZnfldwPXiFfJs9mHg3gwfv5Q=\"\n        },\n        \"jailed\": false,\n        \"status\": \"BOND_STATUS_BONDED\",\n        \"tokens\": \"1426045203613\",\n        \"delegator_shares\": \"1426045203613.000000000000000000\",\n        \"description\": {\n          \"moniker\": \"SG-1\",\n          \"identity\": \"48608633F99D1B60\",\n          \"website\": \"https://sg-1.online\",\n          \"security_contact\": \"\",\n          \"details\": \"SG-1 - your favorite validator on Witval. We offer 100% Soft Slash protection.\"\n        },\n        \"unbonding_height\": \"0\",\n        \"unbonding_time\": \"1970-01-01T00:00:00Z\",\n        \"commission\": {\n          \"commission_rates\": {\n            \"rate\": \"0.037500000000000000\",\n            \"max_rate\": \"0.200000000000000000\",\n            \"max_change_rate\": \"0.030000000000000000\"\n          },\n          \"update_time\": \"2021-10-01T15:00:00Z\"\n        },\n        \"min_self_delegation\": \"1\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Address Derivation in Go\nDESCRIPTION: Defines the Derive function for cryptographically deriving one address from another using the Hash function. This allows for hierarchical address generation while maintaining security properties.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-028-public-key-addresses.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc Derive(address, derivationKey []byte) []byte {\n\treturn Hash(addres, derivationKey)\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Epochs Module for DI Configuration\nDESCRIPTION: Imports required packages for Epochs module configuration in the dependency injection system.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/UPGRADE_GUIDE.md#2025-04-22_snippet_31\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    epochsmodulev1 \"cosmossdk.io/api/cosmos/epochs/module/v1\"\n    \n    _ \"github.com/cosmos/cosmos-sdk/x/epochs\" // import for side-effects\n    epochstypes \"github.com/cosmos/cosmos-sdk/x/epochs/types\"\n)\n```\n\n----------------------------------------\n\nTITLE: Querying Group Policy Info using REST\nDESCRIPTION: Demonstrates querying group policy information using the REST API endpoint. Returns policy details including address, group ID, admin and decision policy.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/group/README.md#2025-04-22_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\ncurl localhost:1317/cosmos/group/v1/group_policy_info/cosmos1..\n```\n\n----------------------------------------\n\nTITLE: Defining MsgGrantAllowance in Protobuf\nDESCRIPTION: Protobuf definition for MsgGrantAllowance, used to create a fee allowance grant.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/feegrant/README.md#2025-04-22_snippet_6\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage MsgGrantAllowance {\n  option (cosmos.msg.v1.signer) = \"granter\";\n\n  string granter = 1;\n  string grantee = 2;\n  google.protobuf.Any allowance = 3 [(cosmos_proto.accepts_interface) = \"FeeAllowanceI\"];\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Group Policies by Admin\nDESCRIPTION: Command to query all group policies managed by a specific admin address.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/group/README.md#2025-04-22_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nsimd query group group-policies-by-admin cosmos1..\n```\n\n----------------------------------------\n\nTITLE: Adding Confix Command to Root Command in Go\nDESCRIPTION: Code snippet to add the Confix command to the application's root command in Go.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/tools/confix/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nrootCmd.AddCommand(\n    confixcmd.ConfigCommand(),\n)\n```\n\n----------------------------------------\n\nTITLE: Querying Specific Deposit for a Proposal using v1beta1 in Cosmos SDK\nDESCRIPTION: REST API endpoint for retrieving deposit information for a specific proposal from a specific depositor using the legacy v1beta1 path. The endpoint accepts both proposal ID and depositor address.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/README.md#2025-04-22_snippet_72\n\nLANGUAGE: bash\nCODE:\n```\n/cosmos/gov/v1beta1/proposals/{proposal_id}/deposits/{depositor}\n```\n\n----------------------------------------\n\nTITLE: Protobuf Tx Message for SIGN_MODE_DIRECT (Protobuf)\nDESCRIPTION: This reference links to the Protobuf definition of the Tx message used with SIGN_MODE_DIRECT in the Cosmos SDK. The definition specifies the structure for body and authentication information within a transaction, as well as the mechanism for deterministic signing using TxRaw and SignDoc. Dependencies include a valid Cosmos tx.proto file and tools supporting Protobuf and deterministic serialization (ADR-027). The inputs are Protobuf messages (body, auth_info), and the outputs are deterministically signed transaction binaries.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/advanced/01-transactions.md#2025-04-22_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.53.0-rc.2/proto/cosmos/tx/v1beta1/tx.proto#L15-L28\n```\n\n----------------------------------------\n\nTITLE: All Validators Signing Info Output\nDESCRIPTION: Example output showing signing information for all validators including pagination details\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/slashing/README.md#2025-04-22_snippet_13\n\nLANGUAGE: yml\nCODE:\n```\ninfo:\n- address: cosmosvalcons1nrqsld3aw6lh6t082frdqc84uwxn0t958c\n  index_offset: \"2075\"\n  jailed_until: \"1970-01-01T00:00:00Z\"\n  missed_blocks_counter: \"0\"\n  start_height: \"0\"\n  tombstoned: false\npagination:\n  next_key: null\n  total: \"0\"\n```\n\n----------------------------------------\n\nTITLE: Module Hook Implementation Example\nDESCRIPTION: Example showing how modules should implement epoch hooks by filtering specific epoch identifiers defined in their parameters.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/epochs/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc (k MyModuleKeeper) AfterEpochEnd(ctx sdk.Context, epochIdentifier string, epochNumber int64) {\n    params := k.GetParams(ctx)\n    if epochIdentifier == params.DistrEpochIdentifier {\n    // my logic\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing TxEmitter for Transaction Events in Go\nDESCRIPTION: This snippet defines the TxEmitter function, which sets up a CometBFT RPC client, starts a pubsub bus, and handles events. It demonstrates how to emit and process transaction events in the Cosmos SDK.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-032-typed-events.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// TxEmitter is an example of an event emitter that emits just transaction events. This can and\n// should be implemented somewhere in the Cosmos SDK. The Cosmos SDK can include an EventEmitters for tm.event='Tx'\n// and/or tm.event='NewBlock' (the new block events may contain typed events)\nfunc TxEmitter(ctx context.Context, cliCtx client.Context, ehs ...EventHandler) (err error) {\n    // Instantiate and start CometBFT RPC client\n    client, err := cliCtx.GetNode()\n    if err != nil {\n        return err\n    }\n\n    if err = client.Start(); err != nil {\n        return err\n    }\n\n    // Start the pubsub bus\n    bus := pubsub.NewBus()\n    defer bus.Close()\n\n    // Initialize a new error group\n    eg, ctx := errgroup.WithContext(ctx)\n\n    // Publish chain events to the pubsub bus\n    eg.Go(func() error {\n        return PublishChainTxEvents(ctx, client, bus, simapp.ModuleBasics)\n    })\n\n    // Subscribe to the bus events\n    subscriber, err := bus.Subscribe()\n    if err != nil {\n        return err\n    }\n\n\t// Handle all the events coming out of the bus\n\teg.Go(func() error {\n        var err error\n        for {\n            select {\n            case <-ctx.Done():\n                return nil\n            case <-subscriber.Done():\n                return nil\n            case ev := <-subscriber.Events():\n                for _, eh := range ehs {\n                    if err = eh(ev); err != nil {\n                        break\n                    }\n                }\n            }\n        }\n        return nil\n\t})\n\n\treturn group.Wait()\n}\n```\n\n----------------------------------------\n\nTITLE: Fee Grant Query Output Format (YAML)\nDESCRIPTION: Example output of a fee grant query in YAML format, showing allowance details including type, expiration, and spend limit.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/feegrant/README.md#2025-04-22_snippet_9\n\nLANGUAGE: yml\nCODE:\n```\nallowances:\n- allowance:\n    '@type': /cosmos.feegrant.v1beta1.BasicAllowance\n    expiration: null\n    spend_limit:\n    - amount: \"100\"\n      denom: stake\n  grantee: cosmos1..\n  granter: cosmos1..\npagination:\n  next_key: null\n  total: \"0\"\n```\n\n----------------------------------------\n\nTITLE: Defining MsgUpdateParams Message Structure in Cosmos SDK\nDESCRIPTION: Protobuf definition for the MsgUpdateParams message structure that allows updating the staking module parameters through a governance proposal. The signer must be the gov module account address.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/staking/README.md#2025-04-22_snippet_19\n\nLANGUAGE: protobuf\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.47.0-rc1/proto/cosmos/staking/v1beta1/tx.proto#L182-L195\n```\n\n----------------------------------------\n\nTITLE: Implementing AccountKeeper for Unordered Sequence Management in Go\nDESCRIPTION: Defines the AccountKeeper struct and methods for managing unordered sequences using the Cosmos SDK's KV Store.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-070-unordered-account.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage keeper\n\nimport (\n\tsdk \"github.com/cosmos/cosmos-sdk/types\"\n\n\t\"cosmossdk.io/collections\"\n\t\"cosmossdk.io/core/store\"\n)\n\nvar (\n\t// just arbitrarily picking some upper bound number.\n\tunorderedSequencePrefix = collections.NewPrefix(90)\n)\n\ntype AccountKeeper struct {\n\t// ...\n\tunorderedSequences collections.KeySet[collections.Pair[uint64, []byte]]\n}\n\nfunc (m *AccountKeeper) Contains(ctx sdk.Context, sender []byte, timestamp uint64) (bool, error) {\n\treturn m.unorderedSequences.Has(ctx, collections.Join(timestamp, sender))\n}\n\nfunc (m *AccountKeeper) Add(ctx sdk.Context, sender []byte, timestamp uint64) error {\n\treturn m.unorderedSequences.Set(ctx, collections.Join(timestamp, sender))\n}\n\nfunc (m *AccountKeeper) RemoveExpired(ctx sdk.Context) error {\n\tblkTime := ctx.BlockTime().UnixNano()\n\tit, err := m.unorderedSequences.Iterate(ctx, collections.NewPrefixUntilPairRange[uint64, []byte](uint64(blkTime)))\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer it.Close()\n\n\tkeys, err := it.Keys()\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tfor _, key := range keys {\n\t\tif err := m.unorderedSequences.Remove(ctx, key); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Example Response from v1 All Deposits Query\nDESCRIPTION: The JSON response structure when querying all deposits for a proposal using the v1 endpoint. It includes the same deposit details as v1beta1.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/README.md#2025-04-22_snippet_83\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"deposits\": [\n    {\n      \"proposal_id\": \"1\",\n      \"depositor\": \"cosmos1..\",\n      \"amount\": [\n        {\n          \"denom\": \"stake\",\n          \"amount\": \"10000000\"\n        }\n      ]\n    }\n  ],\n  \"pagination\": {\n    \"next_key\": null,\n    \"total\": \"1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Module Account Address Generation Function in Go\nDESCRIPTION: Presents the Go function definition for `Module`. It handles generating module account addresses. For backward compatibility, if no `derivationKeys` are provided, it calls the legacy `authtypes.NewModuleAddress`. Otherwise, it hashes the module name (separated by a null byte from the first key) to create a base address and then recursively applies the `Derive` function for any additional keys using a fold operation. Note the potential syntax issues and typo ('modulenName' instead of 'moduleName', '+ 0 + key', use of 'fold', 'key', 'subsubKeys' which aren't defined in this scope) in the provided snippet.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-028-public-key-addresses.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nfunc Module(moduleName string, derivationKeys ...[]byte) []byte{\n\tif len(derivationKeys) == 0 {\n\t\treturn authtypes.NewModuleAddress(modulenName)  // legacy case\n\t}\n\tsubmoduleAddress := Hash(\"module\", []byte(moduleName) + 0 + key)\n\treturn fold((a, k) => Derive(a, k), subsubKeys, submoduleAddress)\n}\n```\n\n----------------------------------------\n\nTITLE: Iterator Interface Definition\nDESCRIPTION: Interface for iterating through key-value pairs in the database.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/group/internal/orm/README.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nreference\nhttps://github.com/cosmos/cosmos-sdk/tree/release/v0.50.x/x/group/internal/orm/types.go#L77-L85\n```\n\n----------------------------------------\n\nTITLE: Querying All Unbonding Delegations for a Delegator in Cosmos SDK\nDESCRIPTION: This command retrieves all unbonding delegations for a specific delegator across all validators. It shows details about each unbonding process including validator addresses, balances, and completion times.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/staking/README.md#2025-04-22_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\nsimd query staking unbonding-delegations [delegator-addr] [flags]\n```\n\nLANGUAGE: bash\nCODE:\n```\nsimd query staking unbonding-delegations cosmos1gghjut3ccd8ay0zduzj64hwre2fxs9ld75ru9p\n```\n\n----------------------------------------\n\nTITLE: Circuit Breaker Permission Levels in Go\nDESCRIPTION: Defines the permission levels for circuit breaker operations. Levels include no permissions, permissions for specific message types, permissions for all messages, and super admin privileges that include granting permissions to others.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/circuit/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype level int32\n\nconst (\n    // LEVEL_NONE_UNSPECIFIED indicates that the account will have no circuit\n    // breaker permissions.\n    LEVEL_NONE_UNSPECIFIED = iota\n    // LEVEL_SOME_MSGS indicates that the account will have permission to\n    // trip or reset the circuit breaker for some Msg type URLs. If this level\n    // is chosen, a non-empty list of Msg type URLs must be provided in\n    // limit_type_urls.\n    LEVEL_SOME_MSGS\n    // LEVEL_ALL_MSGS indicates that the account can trip or reset the circuit\n    // breaker for Msg's of all type URLs.\n    LEVEL_ALL_MSGS \n    // LEVEL_SUPER_ADMIN indicates that the account can take all circuit breaker\n    // actions and can grant permissions to other accounts.\n    LEVEL_SUPER_ADMIN\n)\n\ntype Access struct {\n\tlevel int32 \n\tmsgs []string // if full permission, msgs can be empty\n}\n```\n\n----------------------------------------\n\nTITLE: REST API Current Plan Query\nDESCRIPTION: REST endpoint to query the current upgrade plan.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/upgrade/README.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \"http://localhost:1317/cosmos/upgrade/v1beta1/current_plan\" -H \"accept: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Initial Setup in `app.go` for Cosmos SDK Application in Go\nDESCRIPTION: Demonstrates how to set up the `app.go` file to load and run the app configuration in the Cosmos SDK. This involves importing necessary modules for their side effects and running the application with the loaded YAML configuration.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-057-app-wiring.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t// Each go package which registers a module must be imported just for side-effects\n\t// so that module implementations are registered.\n\t_ \"github.com/cosmos/cosmos-sdk/x/auth/module\"\n\t_ \"github.com/cosmos/cosmos-sdk/x/bank/module\"\n\t_ \"github.com/cosmos/cosmos-sdk/x/staking/module\"\n\t\"github.com/cosmos/cosmos-sdk/core/app\"\n)\n\n// go:embed app.yaml\nvar appConfigYAML []byte\n\nfunc main() {\n\tapp.Run(app.LoadYAML(appConfigYAML))\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Snapshot Stream Structure in Cosmos SDK\nDESCRIPTION: Pseudocode representation of the snapshot stream structure, showing how multi-store snapshots and extension snapshots are organized in the binary stream. Multi-store snapshots are always placed first, followed by alphabetically ordered extension snapshots.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-049-state-sync-hooks.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// multi-store snapshot\n{SnapshotStoreItem | SnapshotIAVLItem, ...}\n// extension1 snapshot\nSnapshotExtensionMeta\n{SnapshotExtensionPayload, ...}\n// extension2 snapshot\nSnapshotExtensionMeta\n{SnapshotExtensionPayload, ...}\n```\n\n----------------------------------------\n\nTITLE: Querying All Validators in Cosmos SDK\nDESCRIPTION: This command allows users to query details about all validators on a network, including their commission rates, consensus public keys, delegator shares, and other relevant information.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/staking/README.md#2025-04-22_snippet_34\n\nLANGUAGE: bash\nCODE:\n```\nsimd query staking validators [flags]\n```\n\nLANGUAGE: bash\nCODE:\n```\nsimd query staking validators\n```\n\n----------------------------------------\n\nTITLE: Building and Copying Binary for System Tests in Cosmos SDK\nDESCRIPTION: This command builds a new binary from the current branch and copies it to the 'tests/systemtests/binaries' folder by running system tests. It should be executed in the project root.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/tests/systemtests/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake test-system\n```\n\n----------------------------------------\n\nTITLE: Chaining Distribution Module AnteHandlers in Go for Cosmos SDK\nDESCRIPTION: Combines CheckMempoolFees and DeductFees micro-functions into a single DistrModuleAnteHandler using the Chainer function.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-010-modular-antehandler.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nDistrModuleAnteHandler := Chainer([]AnteHandler{CheckMempoolFees, DeductFees})\n```\n\n----------------------------------------\n\nTITLE: Querying Specific Delegation using REST API in Cosmos SDK\nDESCRIPTION: This endpoint retrieves information about a specific delegation for a given validator-delegator pair. It returns details about the delegation, including shares and balance.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/staking/README.md#2025-04-22_snippet_66\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \\\n\"http://localhost:1317/cosmos/staking/v1beta1/validators/cosmosvaloper16msryt3fqlxtvsy8u5ay7wv2p8mglfg9g70e3q/delegations/cosmos1n8f5fknsv2yt7a8u6nrx30zqy7lu9jfm0t5lq8\" \\\n-H  \"accept: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Querying Group Policy Info\nDESCRIPTION: Command to query group policy information by account address with example showing policy configuration.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/group/README.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nsimd query group group-policy-info cosmos1..\n```\n\n----------------------------------------\n\nTITLE: Referencing Complete app.go File with Cosmos SDK in Go\nDESCRIPTION: This snippet provides a direct reference to the app.go file of the Cosmos SDK's simapp implementation, specifying its location on GitHub. There are no code implementations included; rather, it links externally to the full source. It serves as a placeholder within this documentation to guide readers toward the full implementation.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-apps/00-app-go.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nreference\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/simapp/app.go\n```\n\n----------------------------------------\n\nTITLE: Broadcasting a Transaction via CLI - Bash\nDESCRIPTION: This Bash command demonstrates how to broadcast a prepared transaction using the Cosmos SDK application CLI (here, 'simd'). The example sends tokens from the validator's address to a recipient, specifying the amount and denomination. Required parameters are the sender's address ($MY_VALIDATOR_ADDRESS), recipient address ($RECIPIENT), and an amount (1000stake). This command assumes 'simd' is installed and properly configured in the user's environment, with the appropriate node endpoint and keyring. The result is submission of a new transaction to the network. Environmental variables must be set before use.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/advanced/01-transactions.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsimd tx send $MY_VALIDATOR_ADDRESS $RECIPIENT 1000stake\n```\n\n----------------------------------------\n\nTITLE: Installing Collections Package in Cosmos SDK\nDESCRIPTION: Command to install the collections package in a Cosmos SDK chain project.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/collections/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get cosmossdk.io/collections\n```\n\n----------------------------------------\n\nTITLE: Testing Module Configuration with depinject in Go\nDESCRIPTION: This snippet demonstrates how to test a module configuration using depinject. It loads a YAML configuration file, creates a depinject.Config instance, and uses it to inject dependencies into a Keeper struct for testing.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/core/appmodule/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n//go:embed app.yaml\nvar appConfig []byte\n\nvar AppConfig = appconfig.LoadYAML(appConfig)\n\nfunc TestModule(t *testing.T) {\n\tvar keeper Keeper\n\tassert.NilError(t, depinject.Inject(AppConfig, &keeper))\n}\n```\n\n----------------------------------------\n\nTITLE: UpgradeInstructions Message Definition - Protobuf\nDESCRIPTION: Defines the structure for upgrade instructions including pre-run and post-run commands, artifacts list, and description fields.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-047-extend-upgrade-plan.md#2025-04-22_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage UpgradeInstructions {\n  string pre_run              = 1;\n  string post_run             = 2;\n  repeated Artifact artifacts = 3;\n  string description          = 4;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Event Types and Sample Usage in Go\nDESCRIPTION: This snippet defines EventEmitter and EventHandler types, and provides a sample main function demonstrating their usage. It sets up a context and calls the TxEmitter function with a SubmitProposalEventHandler.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-032-typed-events.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// EventEmitter is a type that describes event emitter functions\n// This should be defined in `types/events.go`\ntype EventEmitter func(context.Context, client.Context, ...EventHandler) error\n\n// EventHandler is a type of function that handles events coming out of the event bus\n// This should be defined in `types/events.go`\ntype EventHandler func(proto.Message) error\n\n// Sample use of the functions below\nfunc main() {\n    ctx, cancel := context.WithCancel(context.Background())\n\n    if err := TxEmitter(ctx, client.Context{}.WithNodeURI(\"tcp://localhost:26657\"), SubmitProposalEventHandler); err != nil {\n        cancel()\n        panic(err)\n    }\n\n    return\n}\n```\n\n----------------------------------------\n\nTITLE: Building File Plugin - Compilation Command\nDESCRIPTION: Compiles the file plugin Go source code into an executable, placing it in the streaming/abci/examples/file directory.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/store/streaming/abci/examples/file/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo build -o streaming/abci/examples/file/file streaming/abci/examples/file/file.go\n```\n\n----------------------------------------\n\nTITLE: Creating New Application Instance in Cosmos SDK\nDESCRIPTION: Example showing how to create a new application instance using the server package with configuration options and dependencies.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/server/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc newApp(logger log.Logger, db dbm.DB, traceStore io.Writer, appOpts servertypes.AppOptions) servertypes.Application {\n\tbaseappOptions := server.DefaultBaseappOptions(appOpts)\n\treturn simapp.NewSimApp(\n\t\tlogger, db, traceStore, true,\n\t\tappOpts,\n\t\tbaseappOptions...,\n\t)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Signer Logic for a Message (Go)\nDESCRIPTION: Demonstrates a Go function designed to provide custom logic for extracting signers from a specific message type (e.g., an Ethereum-like transaction). It returns a `signing.CustomGetSigner` function, allowing developers to override the default signer extraction mechanism when necessary.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-modules/02-messages-and-queries.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc ProvideBankSendTransactionGetSigners() signing.CustomGetSigner {\n\n\t\t\t// Extract the signer from the signature.\n\t\t\tsigner, err := coretypes.LatestSigner(Tx).Sender(ethTx)\n      if err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\n\t\t\t// Return the signer in the required format.\n\t\t\treturn [][]byte{signer.Bytes()}, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Querying All Deposits - gRPC\nDESCRIPTION: Shows how to query all deposits for a given proposal using both v1beta1 and v1 gRPC endpoints. Only requires a proposal ID as input.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/README.md#2025-04-22_snippet_55\n\nLANGUAGE: bash\nCODE:\n```\ngrpcurl -plaintext \\\n    -d '{\"proposal_id\":\"1\"}' \\\n    localhost:9090 \\\n    cosmos.gov.v1beta1.Query/Deposits\n```\n\n----------------------------------------\n\nTITLE: Querying Delegator Unbonding Delegations with REST in Cosmos Staking Module\nDESCRIPTION: This REST endpoint queries all unbonding delegations of a given delegator address. It returns details about each unbonding delegation including the validator address, creation height, completion time, and balance.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/staking/README.md#2025-04-22_snippet_57\n\nLANGUAGE: bash\nCODE:\n```\n/cosmos/staking/v1beta1/delegators/{delegatorAddr}/unbonding_delegations\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \\\n\"http://localhost:1317/cosmos/staking/v1beta1/delegators/cosmos1nxv42u3lv642q0fuzu2qmrku27zgut3n3z7lll/unbonding_delegations\" \\\n-H  \"accept: application/json\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"unbonding_responses\": [\n    {\n      \"delegator_address\": \"cosmos1nxv42u3lv642q0fuzu2qmrku27zgut3n3z7lll\",\n      \"validator_address\": \"cosmosvaloper1e7mvqlz50ch6gw4yjfemsc069wfre4qwmw53kq\",\n      \"entries\": [\n        {\n          \"creation_height\": \"2442278\",\n          \"completion_time\": \"2021-10-12T10:59:03.797335857Z\",\n          \"initial_balance\": \"50000000000\",\n          \"balance\": \"50000000000\"\n        }\n      ]\n    }\n  ],\n  \"pagination\": {\n    \"next_key\": null,\n    \"total\": \"1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Store Services in Go\nDESCRIPTION: Defines three store services (KVStoreService, MemoryStoreService, and TransientStoreService) for different types of stores in the cosmos-sdk core API.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-063-core-module-api.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype KVStoreService interface {\n    OpenKVStore(context.Context) KVStore\n}\n\ntype MemoryStoreService interface {\n    OpenMemoryStore(context.Context) KVStore\n}\ntype TransientStoreService interface {\n    OpenTransientStore(context.Context) KVStore\n}\n```\n\n----------------------------------------\n\nTITLE: Epoch Query Service Definition\nDESCRIPTION: Protobuf service definition for querying epoch information, including current epoch details and epoch infos.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/epochs/README.md#2025-04-22_snippet_2\n\nLANGUAGE: protobuf\nCODE:\n```\nservice Query {\n  // EpochInfos provide running epochInfos\n  rpc EpochInfos(QueryEpochsInfoRequest) returns (QueryEpochsInfoResponse) {}\n  // CurrentEpoch provide current epoch of specified identifier\n  rpc CurrentEpoch(QueryCurrentEpochRequest) returns (QueryCurrentEpochResponse) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Table Driven Tests in Go with Required Assertions\nDESCRIPTION: Example of implementing table-driven tests in Go using the require package for assertions. The example shows the recommended format for error messages that includes the test case index and iteration number to facilitate debugging.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/CODING_GUIDELINES.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n<some table>\nfor tcIndex, tc := range cases {\n  <some code>\n  resp, err := doSomething()\n  require.NoError(err)\n  require.Equal(t, tc.expected, resp, \"should correctly perform X\")\n```\n\n----------------------------------------\n\nTITLE: Querying Evidence Using CLI Commands\nDESCRIPTION: Examples of using command-line interface to query evidence by hash or list all evidence in the module state.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/evidence/README.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# Query evidence by hash\nsimd query evidence evidence \"DF0C23E8634E480F84B9D5674A7CDC9816466DEC28A3358F73260F68D28D7660\"\n\n# Query all evidence\nsimd query evidence list\n```\n\n----------------------------------------\n\nTITLE: Querying Unbonding Delegations from Validator in Cosmos SDK\nDESCRIPTION: This command allows users to query delegations that are unbonding from a specific validator. It returns information about the delegator addresses, unbonding entries, and validator address.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/staking/README.md#2025-04-22_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\nsimd query staking unbonding-delegations-from [validator-addr] [flags]\n```\n\nLANGUAGE: bash\nCODE:\n```\nsimd query staking unbonding-delegations-from cosmosvaloper1gghjut3ccd8ay0zduzj64hwre2fxs9ldmqhffj\n```\n\n----------------------------------------\n\nTITLE: Redelegating Tokens Between Validators in Cosmos SDK\nDESCRIPTION: This command allows users to redelegate illiquid tokens from one validator to another. It requires the source and destination validator addresses and the amount to redelegate.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/staking/README.md#2025-04-22_snippet_38\n\nLANGUAGE: bash\nCODE:\n```\nsimd tx staking redelegate [src-validator-addr] [dst-validator-addr] [amount] [flags]\n```\n\nLANGUAGE: bash\nCODE:\n```\nsimd tx staking redelegate cosmosvaloper1gghjut3ccd8ay0zduzj64hwre2fxs9ldmqhffj cosmosvaloper1l2rsakp388kuv9k8qzq6lrm9taddae7fpx59wm 100stake --from mykey\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Account Types in Go\nDESCRIPTION: Shows how to register custom account types with the auth module codec.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-011-generalize-genesis-accounts.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nimport authtypes \"github.com/cosmos/cosmos-sdk/x/auth/types\"\n\n// Register the module account type with the auth module codec so it can decode module accounts stored in a genesis file\nfunc init() {\n    authtypes.RegisterAccountTypeCodec(ModuleAccount{}, \"cosmos-sdk/ModuleAccount\")\n}\n\ntype ModuleAccount struct {\n    ...\n```\n\n----------------------------------------\n\nTITLE: Adding a New Key to the Keyring with Test Backend\nDESCRIPTION: This code shows how to create a new key in the keyring using the 'test' backend, which stores keys unencrypted on disk (for testing purposes), and how to store the generated address in a variable for later use.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/user/run-node/00-keyring.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsimd keys add my_validator --keyring-backend test\n\n# Put the generated address in a variable for later use.\nMY_VALIDATOR_ADDRESS=$(simd keys show my_validator -a --keyring-backend test)\n```\n\n----------------------------------------\n\nTITLE: Querying Group Policies by Admin using gRPC\nDESCRIPTION: Details how to query group policies associated with an admin account using gRPC. Returns policy information including address, group ID, admin, and decision policy settings.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/group/README.md#2025-04-22_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\ngrpcurl -plaintext \\\n    -d '{\"admin\":\"cosmos1..\"}'  localhost:9090 cosmos.group.v1.Query/GroupPoliciesByAdmin\n```\n\n----------------------------------------\n\nTITLE: Querying Specific Group Info\nDESCRIPTION: Command to query information about a specific group by ID with example output showing group details.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/group/README.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nsimd query group group-info 1\n```\n\n----------------------------------------\n\nTITLE: Installing Cosmovisor v1.5.0 using Go\nDESCRIPTION: This command installs the latest version of Cosmovisor using Go's package manager. It fetches the package from the cosmossdk.io/tools/cosmovisor/cmd/cosmovisor repository.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/tools/cosmovisor/RELEASE_NOTES.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ngo install cosmossdk.io/tools/cosmovisor/cmd/cosmovisor@latest\n```\n\n----------------------------------------\n\nTITLE: Querying Delegator Delegations with REST in Cosmos Staking Module\nDESCRIPTION: This REST endpoint queries all delegations of a given delegator address. It returns details about each delegation including the validator address, shares delegated, and the equivalent token balance.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/staking/README.md#2025-04-22_snippet_55\n\nLANGUAGE: bash\nCODE:\n```\n/cosmos/staking/v1beta1/delegations/{delegatorAddr}\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \"http://localhost:1317/cosmos/staking/v1beta1/delegations/cosmos1vcs68xf2tnqes5tg0khr0vyevm40ff6zdxatp5\" -H  \"accept: application/json\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"delegation_responses\": [\n    {\n      \"delegation\": {\n        \"delegator_address\": \"cosmos1vcs68xf2tnqes5tg0khr0vyevm40ff6zdxatp5\",\n        \"validator_address\": \"cosmosvaloper1quqxfrxkycr0uzt4yk0d57tcq3zk7srm7sm6r8\",\n        \"shares\": \"256250000.000000000000000000\"\n      },\n      \"balance\": {\n        \"denom\": \"stake\",\n        \"amount\": \"256250000\"\n      }\n    },\n    {\n      \"delegation\": {\n        \"delegator_address\": \"cosmos1vcs68xf2tnqes5tg0khr0vyevm40ff6zdxatp5\",\n        \"validator_address\": \"cosmosvaloper194v8uwee2fvs2s8fa5k7j03ktwc87h5ym39jfv\",\n        \"shares\": \"255150000.000000000000000000\"\n      },\n      \"balance\": {\n        \"denom\": \"stake\",\n        \"amount\": \"255150000\"\n      }\n    }\n  ],\n  \"pagination\": {\n    \"next_key\": null,\n    \"total\": \"2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Cosmos SDK Specific Snapshot and Metadata Protobuf Messages\nDESCRIPTION: Protobuf definitions for Cosmos SDK specific Snapshot and Metadata messages. The Snapshot message includes a Metadata field with chunk hashes.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/store/snapshots/README.md#2025-04-22_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage Snapshot {\n  uint64   height   = 1;\n  uint32   format   = 2;\n  uint32   chunks   = 3;\n  bytes    hash     = 4;\n  Metadata metadata = 5 [(gogoproto.nullable) = false];\n}\n\nmessage Metadata {\n  repeated bytes chunk_hashes = 1; // SHA-256 chunk hashes\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Staking Parameters\nDESCRIPTION: REST endpoint to retrieve current staking parameters including unbonding time, maximum validators, and bond denomination.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/staking/README.md#2025-04-22_snippet_61\n\nLANGUAGE: bash\nCODE:\n```\n/cosmos/staking/v1beta1/params\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \"http://localhost:1317/cosmos/staking/v1beta1/params\" -H  \"accept: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Implementing ListenKVStore wrapper for KVStore state listening in Go\nDESCRIPTION: Defines a Store type that wraps a KVStore to enable state listening. It intercepts Set and Delete operations to track state changes via the provided MemoryListener.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-038-state-listening.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// Store implements the KVStore interface with listening enabled.\n// Operations are traced on each core KVStore call and written to any of the\n// underlying listeners with the proper key and operation permissions\ntype Store struct {\n    parent    types.KVStore\n    listener  *types.MemoryListener\n    parentStoreKey types.StoreKey\n}\n\n// NewStore returns a reference to a new traceKVStore given a parent\n// KVStore implementation and a buffered writer.\nfunc NewStore(parent types.KVStore, psk types.StoreKey, listener *types.MemoryListener) *Store {\n    return &Store{parent: parent, listener: listener, parentStoreKey: psk}\n}\n\n// Set implements the KVStore interface. It traces a write operation and\n// delegates the Set call to the parent KVStore.\nfunc (s *Store) Set(key []byte, value []byte) {\n    types.AssertValidKey(key)\n    s.parent.Set(key, value)\n    s.listener.OnWrite(s.parentStoreKey, key, value, false)\n}\n\n// Delete implements the KVStore interface. It traces a write operation and\n// delegates the Delete call to the parent KVStore.\nfunc (s *Store) Delete(key []byte) {\n    s.parent.Delete(key)\n    s.listener.OnWrite(s.parentStoreKey, key, nil, true)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Deposit Message in Protobuf\nDESCRIPTION: Protobuf message definition for making deposits to governance proposals, referenced from cosmos-sdk repository.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/README.md#2025-04-22_snippet_11\n\nLANGUAGE: protobuf\nCODE:\n```\nreference https://github.com/cosmos/cosmos-sdk/blob/v0.47.0-rc1/proto/cosmos/gov/v1/tx.proto#L134-L147\n```\n\n----------------------------------------\n\nTITLE: Querying Transactions by Events in CLI\nDESCRIPTION: This CLI command allows querying transactions given their events using the --type=events flag.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/auth/tx/README.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nsimd query txs --events 'message.sender=cosmos...' --page 1 --limit 30\n```\n\n----------------------------------------\n\nTITLE: Pagination Implementation\nDESCRIPTION: Implementation of pagination functionality for iterating through database results with support for page requests and responses.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/group/internal/orm/README.md#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nreference\nhttps://github.com/cosmos/cosmos-sdk/tree/release/v0.50.x/x/group/internal/orm/iterator.go#L102-L220\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Local Documentation Build in Shell\nDESCRIPTION: Shell commands for navigating to the docs directory and installing the required npm dependencies for building the Cosmos SDK documentation locally.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd docs\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Detailed Circuit Breaker Authorization Message Structure in Protobuf\nDESCRIPTION: Complete protobuf definition for MsgAuthorizeCircuitBreaker which is used to grant or revoke circuit breaker permissions. References the full implementation from the Cosmos SDK repository.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/circuit/README.md#2025-04-22_snippet_6\n\nLANGUAGE: protobuf\nCODE:\n```\n// Msg defines the circuit Msg service.\nservice Msg {\n  // AuthorizeCircuitBreaker allows a super-admin to grant (or revoke) another\n  // account's circuit breaker permissions.\n  rpc AuthorizeCircuitBreaker(MsgAuthorizeCircuitBreaker) returns (MsgAuthorizeCircuitBreakerResponse);\n\n  // TripCircuitBreaker pauses processing of Msg's in the state machine.\n  rpc TripCircuitBreaker(MsgTripCircuitBreaker) returns (MsgTripCircuitBreakerResponse);\n\n  // ResetCircuitBreaker resumes processing of Msg's in the state machine that\n  // have been been paused using TripCircuitBreaker.\n  rpc ResetCircuitBreaker(MsgResetCircuitBreaker) returns (MsgResetCircuitBreakerResponse);\n}\n\n// MsgAuthorizeCircuitBreaker defines the Msg/AuthorizeCircuitBreaker request type.\nmessage MsgAuthorizeCircuitBreaker {\n  option (cosmos.msg.v1.signer) = \"granter\";\n  option (amino.name) = \"cosmos-sdk/MsgAuthorizeCircuitBreaker\";\n\n  // granter is the granting account which must have a permission level of\n  // super-admin, except in the default case of the module param authority\n  // authorizing the first super-admin.\n  string granter = 1 [(cosmos_proto.scalar) = \"cosmos.AddressString\"];\n\n  // grantee is the account which will be authorized.\n  string grantee = 2 [(cosmos_proto.scalar) = \"cosmos.AddressString\"];\n\n  // permission is the permission level which will be granted.\n  CircuitBreakerPermission permission = 3;\n}\n\n// MsgAuthorizeCircuitBreakerResponse defines the Msg/AuthorizeCircuitBreaker response type.\nmessage MsgAuthorizeCircuitBreakerResponse {}\n\n// CircuitBreakerPermission is the permission to trip or reset a circuit breaker.\nmessage CircuitBreakerPermission {\n  // level is the level of permission granted.\n  Level level = 1;\n\n  // limit_type_urls is required for LEVEL_SOME_MSGS and ignored\n  // for all other levels. If level = LEVEL_SOME_MSGS then only the type urls\n  // listed here will be allowed.\n  repeated string limit_type_urls = 2;\n}\n\n// Level is the permission level.\nenum Level {\n  option (gogoproto.goproto_enum_prefix) = false;\n\n  // LEVEL_NONE_UNSPECIFIED indicates that the account will have no circuit\n  // breaker permissions.\n  LEVEL_NONE_UNSPECIFIED = 0 [(gogoproto.enumvalue_customname) = \"LevelNone\"];\n\n  // LEVEL_SOME_MSGS indicates that the account will have permission to\n  // trip or reset the circuit breaker for some Msg type URLs. If this level\n  // is chosen, a non-empty list of Msg type URLs must be provided in\n  // limit_type_urls.\n  LEVEL_SOME_MSGS = 1 [(gogoproto.enumvalue_customname) = \"LevelSomeMsgs\"];\n\n  // LEVEL_ALL_MSGS indicates that the account can trip or reset the circuit\n  // breaker for Msg's of all type URLs.\n  LEVEL_ALL_MSGS = 2 [(gogoproto.enumvalue_customname) = \"LevelAllMsgs\"];\n\n  // LEVEL_SUPER_ADMIN indicates that the account can take all circuit breaker\n  // actions and can grant permissions to other accounts.\n  LEVEL_SUPER_ADMIN = 3 [(gogoproto.enumvalue_customname) = \"LevelSuperAdmin\"];\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Group Policy\nDESCRIPTION: Command to create a group policy with decision policy parameters and metadata\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/group/README.md#2025-04-22_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nsimd tx group create-group-policy [admin] [group-id] [metadata] [decision-policy] [flags]\n```\n\n----------------------------------------\n\nTITLE: Querying Delegator Validators with REST in Cosmos Staking Module\nDESCRIPTION: This REST endpoint queries all validators information for a given delegator address. It returns comprehensive details about each validator including status, tokens, commission rates, and description.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/staking/README.md#2025-04-22_snippet_58\n\nLANGUAGE: bash\nCODE:\n```\n/cosmos/staking/v1beta1/delegators/{delegatorAddr}/validators\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \\\n\"http://localhost:1317/cosmos/staking/v1beta1/delegators/cosmos1xwazl8ftks4gn00y5x3c47auquc62ssune9ppv/validators\" \\\n-H  \"accept: application/json\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"validators\": [\n    {\n      \"operator_address\": \"cosmosvaloper1xwazl8ftks4gn00y5x3c47auquc62ssuvynw64\",\n      \"consensus_pubkey\": {\n        \"@type\": \"/cosmos.crypto.ed25519.PubKey\",\n        \"key\": \"5v4n3px3PkfNnKflSgepDnsMQR1hiNXnqOC11Y72/PQ=\"\n      },\n      \"jailed\": false,\n      \"status\": \"BOND_STATUS_BONDED\",\n      \"tokens\": \"21592843799\",\n      \"delegator_shares\": \"21592843799.000000000000000000\",\n      \"description\": {\n        \"moniker\": \"jabbey\",\n        \"identity\": \"\",\n        \"website\": \"https://twitter.com/JoeAbbey\",\n        \"security_contact\": \"\",\n        \"details\": \"just another dad in the cosmos\"\n      },\n      \"unbonding_height\": \"0\",\n      \"unbonding_time\": \"1970-01-01T00:00:00Z\",\n      \"commission\": {\n        \"commission_rates\": {\n          \"rate\": \"0.100000000000000000\",\n          \"max_rate\": \"0.200000000000000000\",\n          \"max_change_rate\": \"0.100000000000000000\"\n        },\n        \"update_time\": \"2021-10-09T19:03:54.984821705Z\"\n      },\n      \"min_self_delegation\": \"1\"\n    }\n  ],\n  \"pagination\": {\n    \"next_key\": null,\n    \"total\": \"1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing SimApp with Streaming Services in Go\nDESCRIPTION: This snippet shows the initialization of a SimApp, including the setup of KVStoreKeys and registration of streaming services based on configuration. It demonstrates how to dynamically load and register streaming plugins.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-038-state-listening.md#2025-04-22_snippet_19\n\nLANGUAGE: go\nCODE:\n```\nfunc NewSimApp(\n    logger log.Logger,\n    db dbm.DB,\n    traceStore io.Writer,\n    loadLatest bool,\n    appOpts servertypes.AppOptions,\n    baseAppOptions ...func(*baseapp.BaseApp),\n) *SimApp {\n\n    ...\n\n    keys := sdk.NewKVStoreKeys(\n       authtypes.StoreKey, banktypes.StoreKey, stakingtypes.StoreKey,\n       minttypes.StoreKey, distrtypes.StoreKey, slashingtypes.StoreKey,\n       govtypes.StoreKey, paramstypes.StoreKey, ibchost.StoreKey, upgradetypes.StoreKey,\n       evidencetypes.StoreKey, ibctransfertypes.StoreKey, capabilitytypes.StoreKey,\n    )\n\n    ...\n\n    // register streaming services\n    streamingCfg := cast.ToStringMap(appOpts.Get(baseapp.StreamingTomlKey))\n    for service := range streamingCfg {\n        pluginKey := fmt.Sprintf(\"%s.%s.%s\", baseapp.StreamingTomlKey, service, baseapp.StreamingPluginTomlKey)\n        pluginName := strings.TrimSpace(cast.ToString(appOpts.Get(pluginKey)))\n        if len(pluginName) > 0 {\n            logLevel := cast.ToString(appOpts.Get(flags.FlagLogLevel))\n            plugin, err := streaming.NewStreamingPlugin(pluginName, logLevel)\n            if err != nil {\n                tmos.Exit(err.Error())\n            }\n            if err := baseapp.RegisterStreamingPlugin(bApp, appOpts, keys, plugin); err != nil {\n                tmos.Exit(err.Error())\n            }\n        }\n    }\n\n    return app\n```\n\n----------------------------------------\n\nTITLE: Defining BasicAllowance in Protobuf\nDESCRIPTION: Protobuf definition for BasicAllowance, which specifies a simple fee allowance with spend limit and expiration.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/feegrant/README.md#2025-04-22_snippet_2\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage BasicAllowance {\n  option (cosmos_proto.implements_interface) = \"FeeAllowanceI\";\n\n  repeated cosmos.base.v1beta1.Coin spend_limit = 1\n      [(gogoproto.nullable) = false, (gogoproto.castrepeated) = \"github.com/cosmos/cosmos-sdk/types.Coins\"];\n  google.protobuf.Timestamp expiration = 2 [(gogoproto.stdtime) = true];\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Genesis Initialization and Export in Go\nDESCRIPTION: Implements InitGenesis and ExportGenesis functions to handle loading and saving account state.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-011-generalize-genesis-accounts.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// InitGenesis - Init store state from genesis data\nfunc InitGenesis(ctx sdk.Context, ak AccountKeeper, data GenesisState) {\n    ak.SetParams(ctx, data.Params)\n    // load the accounts\n    for _, a := range data.Accounts {\n        acc := ak.NewAccount(ctx, a) // set account number\n        ak.SetAccount(ctx, acc)\n    }\n}\n\n// ExportGenesis returns a GenesisState for a given context and keeper\nfunc ExportGenesis(ctx sdk.Context, ak AccountKeeper) GenesisState {\n    params := ak.GetParams(ctx)\n\n    var genAccounts []exported.GenesisAccount\n    ak.IterateAccounts(ctx, func(account exported.Account) bool {\n        genAccount := account.(exported.GenesisAccount)\n        genAccounts = append(genAccounts, genAccount)\n        return false\n    })\n\n    return NewGenesisState(params, genAccounts)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Module-Scoped Capability Keepers in Go\nDESCRIPTION: ScopeToModule function that creates module-specific capability managers, ensuring uniqueness per module.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-003-dynamic-capability-store.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc (ck CapabilityKeeper) ScopeToModule(moduleName string) ScopedCapabilityKeeper {\n\tif k.sealed {\n\t\tpanic(\"cannot scope to module via a sealed capability keeper\")\n\t}\n\n\tif _, ok := k.scopedModules[moduleName]; ok {\n\t\tpanic(fmt.Sprintf(\"cannot create multiple scoped keepers for the same module name: %s\", moduleName))\n\t}\n\n\tk.scopedModules[moduleName] = struct{}{}\n\n\treturn ScopedKeeper{\n\t\tcdc:      k.cdc,\n\t\tstoreKey: k.storeKey,\n\t\tmemKey:   k.memKey,\n\t\tcapMap:   k.capMap,\n\t\tmodule:   moduleName,\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Staking Parameters in Cosmos SDK\nDESCRIPTION: This command retrieves the current staking module parameters, including bond denomination, historical entries count, maximum entries, maximum validators, and unbonding time.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/staking/README.md#2025-04-22_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\nsimd query staking params [flags]\n```\n\nLANGUAGE: bash\nCODE:\n```\nsimd query staking params\n```\n\n----------------------------------------\n\nTITLE: Changelog Template Comments in Markdown\nDESCRIPTION: Header comments providing guidelines and principles for maintaining the changelog, including format rules and entry structure requirements.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/api/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!--\nGuiding Principles:\n\nChangelogs are for humans, not machines.\nThere should be an entry for every single version.\nThe same types of changes should be grouped.\nVersions and sections should be linkable.\nThe latest version comes first.\nThe release date of each version is displayed.\nMention whether you follow Semantic Versioning.\n\nUsage:\n\nChange log entries are to be added to the Unreleased section from newest to oldest.\nEach entry must include the Github issue reference in the following format:\n\n* [#<issue-number>] Changelog message.\n\n-->\n```\n\n----------------------------------------\n\nTITLE: Capability System Initialization in app.go\nDESCRIPTION: Example initialization pattern for the capability system in a Cosmos SDK application, showing module scoping and system sealing.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-003-dynamic-capability-store.md#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nck := NewCapabilityKeeper(persistentKey, memoryKey)\nmod1Keeper := NewMod1Keeper(ck.ScopeToModule(\"mod1\"), ....)\nmod2Keeper := NewMod2Keeper(ck.ScopeToModule(\"mod2\"), ....)\n\n// other initialisation logic ...\n\n// load initial state...\n\nck.InitialiseAndSeal(initialContext)\n```\n\n----------------------------------------\n\nTITLE: Illustrating Cosmos SDK Blockchain Node Architecture\nDESCRIPTION: A text diagram showing the architecture of a blockchain node built with the Cosmos SDK. The diagram depicts three layers: the application layer (state-machine) built with Cosmos SDK, the consensus layer, and the networking layer provided by CometBFT.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/intro/01-why-app-specific.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n                ^  +-------------------------------+  ^\n                |  |                               |  |   Built with Cosmos SDK\n                |  |  State-machine = Application  |  |\n                |  |                               |  v\n                |  +-------------------------------+\n                |  |                               |  ^\nBlockchain node |  |           Consensus           |  |\n                |  |                               |  |\n                |  +-------------------------------+  |   CometBFT\n                |  |                               |  |\n                |  |           Networking          |  |\n                |  |                               |  |\n                v  +-------------------------------+  v\n```\n\n----------------------------------------\n\nTITLE: Querying Group Info via CLI\nDESCRIPTION: CLI command for querying group module information, showing usage and example output including admin, group ID, metadata and total weight.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/group/README.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nsimd query group --help\n```\n\n----------------------------------------\n\nTITLE: Querying Fee Allowance via gRPC in Cosmos SDK (Shell)\nDESCRIPTION: gRPC command to query a granted fee allowance using the Allowance endpoint in the Cosmos SDK.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/feegrant/README.md#2025-04-22_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\ncosmos.feegrant.v1beta1.Query/Allowance\n```\n\nLANGUAGE: shell\nCODE:\n```\ngrpcurl -plaintext \\\n    -d '{\"grantee\":\"cosmos1..\",\"granter\":\"cosmos1..\"}' \\\n    localhost:9090 \\\n    cosmos.feegrant.v1beta1.Query/Allowance\n```\n\n----------------------------------------\n\nTITLE: Proposed Future Extension to MsgClient Interface for Service Revision\nDESCRIPTION: Example of how the code generator for protobuf services might be extended in the future to add a more concise ServiceRevision method directly to client types, enabling easier version checking.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-054-semver-compatible-modules.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\npackage bankv1beta1\n\ntype MsgClient interface {\n\tSend(context.Context, MsgSend) (MsgSendResponse, error)\n\tServiceRevision(context.Context) uint64\n}\n```\n\n----------------------------------------\n\nTITLE: Updated VerifySignature Interface\nDESCRIPTION: Modified x/auth/signing.VerifySignature to include context.Context as an argument.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nVerifySignature(ctx context.Context, ...) error\n```\n\n----------------------------------------\n\nTITLE: Initializing Auth Module Codec in Go\nDESCRIPTION: Defines the module codec initialization and registration function for account types.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-011-generalize-genesis-accounts.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nvar ModuleCdc *codec.LegacyAmino\n\nfunc init() {\n    ModuleCdc = codec.NewLegacyAmino()\n    // register module msg's and Account interface\n    ...\n    // leave the codec unsealed\n}\n\n// RegisterAccountTypeCodec registers an external account type defined in another module for the internal ModuleCdc.\nfunc RegisterAccountTypeCodec(o interface{}, name string) {\n    ModuleCdc.RegisterConcrete(o, name, nil)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MsgRotateConsPubKey Structure in Go\nDESCRIPTION: Definition of the MsgRotateConsPubKey message type used to communicate consensus key rotation. The message contains the validator address and the new public key that will replace the existing consensus key.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-016-validator-consensus-key-rotation.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype MsgRotateConsPubKey struct {\n    ValidatorAddress  sdk.ValAddress\n    NewPubKey         crypto.PubKey\n}\n```\n\n----------------------------------------\n\nTITLE: WithdrawProposal Message Definition in Protobuf\nDESCRIPTION: Protocol buffer definition for MsgWithdrawProposal which allows withdrawing an existing proposal by either a proposer or group policy admin.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/group/README.md#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/tree/release/v0.50.x/proto/cosmos/group/v1/tx.proto#L323-L333\n```\n\n----------------------------------------\n\nTITLE: Querying Historical Information\nDESCRIPTION: REST endpoint to retrieve historical information for a specific block height including validator sets and header information.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/staking/README.md#2025-04-22_snippet_60\n\nLANGUAGE: bash\nCODE:\n```\n/cosmos/staking/v1beta1/historical_info/{height}\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \"http://localhost:1317/cosmos/staking/v1beta1/historical_info/153332\" -H  \"accept: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Example: Equivalent Smart Contract Address Derivation in Go\nDESCRIPTION: Shows an alternative, equivalent way to derive the smart contract address from Example 2. It first creates an intermediate module address using the VM name and namespace, and then derives the final address using the `Derived` function with the `smartContractKey`. Note the potentially incorrect syntax `[]{smartContractKey}` in the original snippet.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-028-public-key-addresses.md#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nsmartContractAddr = Derived(\n    Module(\"mySmartContractVM\", smartContractsNamespace), \n    []{smartContractKey})\n```\n\n----------------------------------------\n\nTITLE: GenericAuthorization Protobuf Definition for Unrestricted Permissions\nDESCRIPTION: The GenericAuthorization protobuf definition provides unrestricted permission to execute a specified message type on behalf of the granter's account. It stores the message type URL to identify permitted messages.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/authz/README.md#2025-04-22_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\n// GenericAuthorization gives the grantee unrestricted permissions to execute\n// the provided method on behalf of the granter's account.\nmessage GenericAuthorization {\n  option (cosmos_proto.implements_interface) = \"Authorization\";\n\n  // Msg, identified by it's type URL, to grant unrestricted permissions to execute\n  string msg = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Querying All Proposals - REST\nDESCRIPTION: Demonstrates querying all proposals with optional filters using REST endpoints in both v1beta1 and v1. Returns a paginated list of all proposals.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/README.md#2025-04-22_snippet_58\n\nLANGUAGE: bash\nCODE:\n```\ncurl localhost:1317/cosmos/gov/v1beta1/proposals\n```\n\n----------------------------------------\n\nTITLE: Querying Proposals by Group Policy\nDESCRIPTION: Command to query proposals filtered by group policy account address with pagination support\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/group/README.md#2025-04-22_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nsimd query group proposals-by-group-policy [group-policy-account] [flags]\n```\n\n----------------------------------------\n\nTITLE: Implementing BeginBlock for Historical Header Storage in Go\nDESCRIPTION: This function handles the BeginBlock request in the Cosmos SDK, storing historical header information and pruning old data. It stores the current block header, validator set, and manages the number of recent headers to keep based on a configurable parameter.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-017-historical-header-module.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc BeginBlock(ctx sdk.Context, keeper HistoricalHeaderKeeper, req abci.RequestBeginBlock) abci.ResponseBeginBlock {\n  info := HistoricalInfo{\n    Header: ctx.BlockHeader(),\n    ValSet: keeper.StakingKeeper.GetAllValidators(ctx), // note that this must be stored in a canonical order\n  }\n  keeper.SetHistoricalInfo(ctx, ctx.BlockHeight(), info)\n  n := keeper.GetParamRecentHeadersToStore()\n  keeper.PruneHistoricalInfo(ctx, ctx.BlockHeight() - n)\n  // continue handling request\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ABCI ValidatorUpdate Messages for Consensus Key Rotation\nDESCRIPTION: Code snippet showing how to create ABCI ValidatorUpdate messages to remove the old consensus key and add the new one. The first update sets the power to 0 to deactivate the old key, while the second update adds the new key with the validator's consensus power.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-016-validator-consensus-key-rotation.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nabci.ValidatorUpdate{\n    PubKey: cmttypes.TM2PB.PubKey(OldConsPubKey),\n    Power:  0,\n}\n\nabci.ValidatorUpdate{\n    PubKey: cmttypes.TM2PB.PubKey(NewConsPubKey),\n    Power:  v.ConsensusPower(),\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing FeeGranter Flag in Go\nDESCRIPTION: Go code snippet showing the implementation of the FeeGranter flag for CLI transactions.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/feegrant/README.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nflags.AddTxFlagsToCmd(cmd)\ncmd.Flags().String(FlagFeeGranter, \"\", \"Fee granter address (ex: cosmos1...)\"\n```\n\n----------------------------------------\n\nTITLE: Querying Pool Information\nDESCRIPTION: REST endpoint to retrieve the current state of the staking pool including bonded and not bonded tokens.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/staking/README.md#2025-04-22_snippet_62\n\nLANGUAGE: bash\nCODE:\n```\n/cosmos/staking/v1beta1/pool\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \"http://localhost:1317/cosmos/staking/v1beta1/pool\" -H  \"accept: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Querying Single Proposal - REST\nDESCRIPTION: Shows how to query details of a specific proposal using REST endpoints in both v1beta1 and v1. Returns comprehensive proposal information including status, voting times, and deposits.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/README.md#2025-04-22_snippet_57\n\nLANGUAGE: bash\nCODE:\n```\ncurl localhost:1317/cosmos/gov/v1beta1/proposals/1\n```\n\n----------------------------------------\n\nTITLE: Defining Request and Response Types for Transaction Processing\nDESCRIPTION: Structure definitions for transaction request and response objects used in the Handler interface. Includes fields for transaction data, gas metrics, and response data.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-045-check-delivertx-middlewares.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype Request struct {\n\tTx      sdk.Tx\n\tTxBytes []byte\n}\n\ntype Response struct {\n\tGasWanted uint64\n\tGasUsed   uint64\n\t// MsgResponses is an array containing each Msg service handler's response\n\t// type, packed in an Any. This will get proto-serialized into the `Data` field\n\t// in the ABCI Check/DeliverTx responses.\n\tMsgResponses []*codectypes.Any\n\tLog          string\n\tEvents       []abci.Event\n}\n\ntype RequestCheckTx struct {\n\tType abci.CheckTxType\n}\n\ntype ResponseCheckTx struct {\n\tPriority int64\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring UFW Firewall for a Cosmos SDK Node\nDESCRIPTION: Commands to set up a UFW firewall for a Cosmos SDK node, restricting access to only necessary ports. This configuration allows SSH access and essential CometBFT ports while blocking other incoming connections.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/user/run-node/06-run-production.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo ufw default deny incoming\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo ufw default allow outgoing\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo ufw allow ssh\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo ufw allow 26656/tcp\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo ufw allow 26660/tcp\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo ufw allow 26657/tcp\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo ufw allow 9090/tcp\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo ufw allow 1317/tcp\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo ufw enable\n```\n\n----------------------------------------\n\nTITLE: Defining AllowedMsgAllowance Protobuf Message\nDESCRIPTION: Protobuf definition for AllowedMsgAllowance message containing a repeated string field that lists allowed messages.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-050-sign-mode-textual-annex1.md#2025-04-22_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage AllowedMsgAllowance {\n  repeated string allowed_messages = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: UpdateGroupMembers Message Definition in Protobuf\nDESCRIPTION: Protocol buffer definition for MsgUpdateGroupMembers which enables updating group members, including removal by setting weight to 0.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/group/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/tree/release/v0.50.x/proto/cosmos/group/v1/tx.proto#L88-L102\n```\n\n----------------------------------------\n\nTITLE: Fee Grant Transaction Commands Help (Shell)\nDESCRIPTION: Command to display help information for fee grant transaction commands in the Cosmos SDK CLI.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/feegrant/README.md#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nsimd tx feegrant --help\n```\n\n----------------------------------------\n\nTITLE: REST Query Grants Example in Cosmos SDK\nDESCRIPTION: Example of querying grants using the REST API with query parameters for granter, grantee, and message type.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/authz/README.md#2025-04-22_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"localhost:1317/cosmos/authz/v1beta1/grants?granter=cosmos1..&grantee=cosmos1..&msg_type_url=/cosmos.bank.v1beta1.MsgSend\"\n```\n\n----------------------------------------\n\nTITLE: Setting a Finite Block Gas Meter Post-Genesis in Go\nDESCRIPTION: This Go snippet demonstrates setting a finite block gas meter after the genesis block. It retrieves a gas meter appropriate for the current block (likely based on consensus parameters) using `app.getBlockGasMeter` and updates the context (`app.finalizeBlockState`) with this new, limited meter. This ensures subsequent blocks adhere to the defined gas limits.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/beginner/04-gas-fees.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ngasMeter := app.getBlockGasMeter(app.finalizeBlockState.Context())\napp.finalizeBlockState.SetContext(app.finalizeBlockState.Context().WithBlockGasMeter(gasMeter))\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Application with BaseApp in Go\nDESCRIPTION: This Go snippet shows how to define a custom application structure by extending the BaseApp in Cosmos SDK. It entails references to a BaseApp, lists of store keys, and various keepers, alongside a module manager. Developers can use this structure to easily extend BaseApp's functionalities and leverage its service routing and state management features. No specific prerequisites are necessary, but familiarity with the Cosmos SDK is recommended. Inputs include module configurations and expected applications that manage blockchain state.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/advanced/00-baseapp.md#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\ntype App struct {\n  // reference to a BaseApp\n  *baseapp.BaseApp\n\n  // list of application store keys\n\n  // list of application keepers\n\n  // module manager\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Renderer for a Msg - Protobuf Renderer Option - protobuf\nDESCRIPTION: Shows a Protobuf message MsgFooBar with a custom renderer defined via the cosmos.msg.textual.v1.expert_custom_renderer option. This allows developers to fully control how their Msg object is rendered to and from a textual string using application-defined logic, identified by a unique algorithm identifier. Requires implementation of both formatting and parsing (string\\u2194Protobuf) and that the message implements the sdk.Msg interface. Used when default rendering is insufficient, allowing custom transaction presentation on devices or client UIs.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-050-sign-mode-textual.md#2025-04-22_snippet_3\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage MsgFooBar {\n  // Optional comments to describe in human-readable language the formatting\n  // rules of the custom renderer.\n  option (cosmos.msg.textual.v1.expert_custom_renderer) = \"<unique algorithm identifier>\";\n\n  // proto fields\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Initial Protobuf Message for Foo Module (Protobuf)\nDESCRIPTION: This Protobuf definition outlines the initial version (`foo.v1`) of the `MsgDoSomething` message and its corresponding service RPC. It serves as the baseline for discussing versioning compatibility issues in the ADR. The message includes basic fields like `sender` and `amount`.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-054-semver-compatible-modules.md#2025-04-22_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\n```protobuf\npackage foo.v1;\n\nmessage MsgDoSomething {\n  string sender = 1;\n  uint64 amount = 2;\n}\n\nservice Msg {\n  DoSomething(MsgDoSomething) returns (MsgDoSomethingResponse);\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Querying VoteByProposalVoter Endpoint\nDESCRIPTION: REST endpoint for querying a specific vote by proposal ID and voter address. Returns vote details including choice and submission time.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/group/README.md#2025-04-22_snippet_37\n\nLANGUAGE: bash\nCODE:\n```\n/cosmos/group/v1/vote_by_proposal_voter/{proposal_id}/{voter}\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl localhost:1317/cosmos/group/v1beta1/vote_by_proposal_voter/1/cosmos1..\n```\n\n----------------------------------------\n\nTITLE: Protobuf Request/Response Type Convention\nDESCRIPTION: Example of the naming convention for request and response types in gRPC services, following the ServiceNameMethodNameRequest/Response pattern.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-023-protobuf-naming.md#2025-04-22_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\nQueryBalanceRequest\nQueryBalanceResponse\n```\n\n----------------------------------------\n\nTITLE: Defining Vote Message in Protobuf\nDESCRIPTION: Protobuf message definition for casting votes on governance proposals, referenced from cosmos-sdk repository.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/README.md#2025-04-22_snippet_12\n\nLANGUAGE: protobuf\nCODE:\n```\nreference https://github.com/cosmos/cosmos-sdk/blob/v0.47.0-rc1/proto/cosmos/gov/v1/tx.proto#L92-L108\n```\n\n----------------------------------------\n\nTITLE: Querying Proposal Endpoint\nDESCRIPTION: REST endpoint for querying a specific proposal by ID. Returns detailed proposal information including status, vote state, and associated messages.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/group/README.md#2025-04-22_snippet_35\n\nLANGUAGE: bash\nCODE:\n```\n/cosmos/group/v1/proposal/{proposal_id}\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl localhost:1317/cosmos/group/v1/proposal/1\n```\n\n----------------------------------------\n\nTITLE: Defining MsgBeginRedelegate Message Structure in Cosmos SDK\nDESCRIPTION: Protobuf definition for the MsgBeginRedelegate message structure that specifies the delegator address, source validator address, destination validator address, and amount to redelegate.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/staking/README.md#2025-04-22_snippet_17\n\nLANGUAGE: protobuf\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.47.0-rc1/proto/cosmos/staking/v1beta1/tx.proto#L119-L132\n```\n\n----------------------------------------\n\nTITLE: Configuring Telemetry in TOML for Cosmos SDK Applications\nDESCRIPTION: Configuration block for app.toml that defines telemetry settings including service name, enablement flags, hostname options, and Prometheus retention time.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-013-metrics.md#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n###############################################################################\n###                         Telemetry Configuration                         ###\n###############################################################################\n\n[telemetry]\n\n# Prefixed with keys to separate services\nservice-name = {{ .Telemetry.ServiceName }}\n\n# Enabled enables the application telemetry functionality. When enabled,\n# an in-memory sink is also enabled by default. Operators may also enabled\n# other sinks such as Prometheus.\nenabled = {{ .Telemetry.Enabled }}\n\n# Enable prefixing gauge values with hostname\nenable-hostname = {{ .Telemetry.EnableHostname }}\n\n# Enable adding hostname to labels\nenable-hostname-label = {{ .Telemetry.EnableHostnameLabel }}\n\n# Enable adding service to labels\nenable-service-label = {{ .Telemetry.EnableServiceLabel }}\n\n# PrometheusRetentionTime, when positive, enables a Prometheus metrics sink.\nprometheus-retention-time = {{ .Telemetry.PrometheusRetentionTime }}\n```\n\n----------------------------------------\n\nTITLE: Querying All Proposals using gRPC v1beta1 in Cosmos SDK\nDESCRIPTION: The gRPC endpoint for querying all proposals with optional filters using the legacy v1beta1 API.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/README.md#2025-04-22_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\ncosmos.gov.v1beta1.Query/Proposals\n```\n\n----------------------------------------\n\nTITLE: Generating Swagger Documentation for API - Go Reference\nDESCRIPTION: This Go reference targets buf.gen.swagger.yaml, the configuration for generating OpenAPI (Swagger) documentation from protobuf query and message service definitions. The generator walks the .proto files, extracting RPC endpoints to auto-generate RESTful docs. It requires Buf CLI, the relevant generation plugin, and the paths to .proto sources; outputs include only those endpoints defined in query and msg services.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/tooling/00-protobuf.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/main/proto/buf.gen.swagger.yaml#L1-L6\n```\n\n----------------------------------------\n\nTITLE: Querying All Votes on a Proposal using gRPC v1beta1 in Cosmos SDK\nDESCRIPTION: The gRPC endpoint for querying all votes on a specific proposal using the legacy v1beta1 API.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/README.md#2025-04-22_snippet_42\n\nLANGUAGE: bash\nCODE:\n```\ncosmos.gov.v1beta1.Query/Votes\n```\n\n----------------------------------------\n\nTITLE: Creating a Child Context in Go\nDESCRIPTION: Illustrates the standard Go pattern for creating a new, modified context (`childCtx`) from an existing one (`parentCtx`) using a `With` function (e.g., `WithBlockHeader`). This maintains the immutability principle of contexts, where the original context is never modified directly.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/advanced/02-context.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n```go\nchildCtx = parentCtx.WithBlockHeader(header)\n```\n```\n\n----------------------------------------\n\nTITLE: Article Protobuf Schema Definition\nDESCRIPTION: Example protobuf schema defining an Article message type with various field types including enums, strings, integers, and repeated fields.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-027-deterministic-protobuf-serialization.md#2025-04-22_snippet_2\n\nLANGUAGE: protobuf\nCODE:\n```\npackage blog;\nsyntax = \"proto3\";\n\nenum Type {\n  UNSPECIFIED = 0;\n  IMAGES = 1;\n  NEWS = 2;\n};\n\nenum Review {\n  UNSPECIFIED = 0;\n  ACCEPTED = 1;\n  REJECTED = 2;\n};\n\nmessage Article {\n  string title = 1;\n  string description = 2;\n  uint64 created = 3;\n  uint64 updated = 4;\n  bool public = 5;\n  bool promoted = 6;\n  Type type = 7;\n  Review review = 8;\n  repeated string comments = 9;\n  repeated string backlinks = 10;\n};\n```\n\n----------------------------------------\n\nTITLE: Example Request for Querying Tally with v1\nDESCRIPTION: An example curl command that demonstrates how to query the vote tally for proposal ID 1 using the v1 endpoint.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/README.md#2025-04-22_snippet_88\n\nLANGUAGE: bash\nCODE:\n```\ncurl localhost:1317/cosmos/gov/v1/proposals/1/tally\n```\n\n----------------------------------------\n\nTITLE: Importing Test Keys from Mnemonic\nDESCRIPTION: Command to import a key from the provided mnemonic phrase into the test keyring. This allows you to use the pre-funded validator account for testing transactions.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/user/run-node/05-run-testnet.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsimd keys add test --recover --keyring-backend test\n```\n\n----------------------------------------\n\nTITLE: Querying Groups by Admin\nDESCRIPTION: Command to query all groups managed by a specific admin address with pagination.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/group/README.md#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nsimd query group groups-by-admin cosmos1..\n```\n\n----------------------------------------\n\nTITLE: Setting Up TMKMS from Source with Softsign Feature\nDESCRIPTION: Commands to install TMKMS from source with software signing capabilities. This builds TMKMS, initializes the configuration, and generates a secret connection key for secure communication with the validator node.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/user/run-node/06-run-production.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd $HOME\ngit clone https://github.com/iqlusioninc/tmkms.git\ncd $HOME/tmkms\ncargo install tmkms --features=softsign\ntmkms init config\ntmkms softsign keygen ./config/secrets/secret_connection_key\n```\n\n----------------------------------------\n\nTITLE: Running Specific System Test in Cosmos SDK\nDESCRIPTION: This command runs a specific system test (TestStakeUnstake) with verbose output. It uses Go test with specific flags for system testing.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/tests/systemtests/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngo test -v -mod=readonly -failfast -tags='system_test' --run TestStakeUnstake    ./... --verbose\n```\n\n----------------------------------------\n\nTITLE: Example Response from v1 Specific Deposit Query\nDESCRIPTION: The JSON response structure when querying a specific deposit using the v1 endpoint. It includes the same deposit details as v1beta1.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/README.md#2025-04-22_snippet_77\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"deposit\": {\n    \"proposal_id\": \"1\",\n    \"depositor\": \"cosmos1..\",\n    \"amount\": [\n      {\n        \"denom\": \"stake\",\n        \"amount\": \"10000000\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Single Evidence via REST API\nDESCRIPTION: REST endpoint for retrieving evidence by its hash value. Returns details about a specific evidence including consensus address, height, power and timestamp.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/evidence/README.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n/cosmos/evidence/v1beta1/evidence/{hash}\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \"http://localhost:1317/cosmos/evidence/v1beta1/evidence/DF0C23E8634E480F84B9D5674A7CDC9816466DEC28A3358F73260F68D28D7660\"\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"evidence\": {\n    \"consensus_address\": \"cosmosvalcons1ntk8eualewuprz0gamh8hnvcem2nrcdsgz563h\",\n    \"height\": \"11\",\n    \"power\": \"100\",\n    \"time\": \"2021-10-20T16:08:38.194017624Z\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Transaction Help in Cosmos SDK\nDESCRIPTION: Shows help information for the tx command in Cosmos SDK.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/auth/README.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsimd tx --help\n```\n\n----------------------------------------\n\nTITLE: gRPC Query Grants Example in Cosmos SDK\nDESCRIPTION: Example of querying grants using gRPC for a specific granter-grantee pair and message type.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/authz/README.md#2025-04-22_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\ngrpcurl -plaintext \\\n    -d '{\"granter\":\"cosmos1..\",\"grantee\":\"cosmos1..\",\"msg_type_url\":\"/cosmos.bank.v1beta1.MsgSend\"}' \\\n    localhost:9090 \\\n    cosmos.authz.v1beta1.Query/Grants\n```\n\n----------------------------------------\n\nTITLE: Adding streaming control fields to BaseApp struct in Go\nDESCRIPTION: Addition of new fields to the BaseApp struct to control the behavior of ABCI listeners, including options for asynchronous operation and node halting on errors.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-038-state-listening.md#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\ntype BaseApp struct {\n\n    ...\n\n    // abciListenersAsync for determining if abciListeners will run asynchronously.\n    // When abciListenersAsync=false and stopNodeOnABCIListenerErr=false listeners will run synchronized but will not stop the node.\n    // When abciListenersAsync=true stopNodeOnABCIListenerErr will be ignored.\n    abciListenersAsync bool\n\n    // stopNodeOnABCIListenerErr halts the node when ABCI streaming service listening results in an error.\n    // stopNodeOnABCIListenerErr=true must be paired with abciListenersAsync=false.\n    stopNodeOnABCIListenerErr bool\n}\n```\n\n----------------------------------------\n\nTITLE: Editing TMKMS Configuration File\nDESCRIPTION: Command to open and modify the TMKMS configuration file. The configuration file specifies details such as chain ID, key format, network addresses, and other settings required for the remote signer.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/user/run-node/06-run-production.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nvim $HOME/tmkms/config/tmkms.toml\n```\n\n----------------------------------------\n\nTITLE: Example Request for Querying Governance Parameters with v1\nDESCRIPTION: An example curl command that demonstrates how to query voting parameters using the v1 endpoint.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/README.md#2025-04-22_snippet_70\n\nLANGUAGE: bash\nCODE:\n```\ncurl localhost:1317/cosmos/gov/v1/params/voting\n```\n\n----------------------------------------\n\nTITLE: Updating CacheMultiStore for listener support in Go\nDESCRIPTION: Modification of the CacheMultiStore method to ensure ListenKVStore wrappers are properly applied in the cache layer, allowing state changes in the cache to be captured.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-038-state-listening.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nfunc (rs *Store) CacheMultiStore() types.CacheMultiStore {\n    stores := make(map[types.StoreKey]types.CacheWrapper)\n    for k, v := range rs.stores {\n        store := v.(types.KVStore)\n        // Wire the listenkv.Store to allow listeners to observe the writes from the cache store,\n        // set same listeners on cache store will observe duplicated writes.\n        if rs.ListeningEnabled(k) {\n            store = listenkv.NewStore(store, k, rs.listeners[k])\n        }\n        stores[k] = store\n    }\n    return cachemulti.NewStore(rs.db, stores, rs.keysByName, rs.traceWriter, rs.getTracingContext())\n}\n```\n\n----------------------------------------\n\nTITLE: Revising Protobuf Message with New Field and Validation (Protobuf)\nDESCRIPTION: This Protobuf snippet shows a revision to the `MsgDoSomething` message within the same `foo.v1` package. It introduces a new optional `condition` field (marked `Since: Revision 1`) and notes a new validation rule (amount must be non-zero) applied in the corresponding Go implementation. This revision illustrates how Protobuf definitions evolve and potentially cause breaking changes at the state machine level, even if backward compatible at the Protobuf level.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-054-semver-compatible-modules.md#2025-04-22_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\n```protobuf\n// Revision 1\npackage foo.v1;\n\nmessage MsgDoSomething {\n  string sender = 1;\n  \n  // amount must be a non-zero integer.\n  uint64 amount = 2;\n  \n  // condition is an optional condition on doing the thing.\n  //\n  // Since: Revision 1\n  Condition condition = 3;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining MsgBeginRedelegateResponse in Cosmos SDK Staking Module\nDESCRIPTION: Protobuf definition for the MsgBeginRedelegateResponse which contains the completion time of the redelegation. This response is returned after processing a successful MsgBeginRedelegate transaction.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/staking/README.md#2025-04-22_snippet_18\n\nLANGUAGE: protobuf\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.47.0-rc1/proto/cosmos/staking/v1beta1/tx.proto#L133-L138\n```\n\n----------------------------------------\n\nTITLE: Initializing AllowedMsgAllowance with Go\nDESCRIPTION: Go code snippet showing how to initialize an AllowedMsgAllowance with two specific message types for bank and governance operations.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-050-sign-mode-textual-annex1.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nx := []AllowedMsgAllowance{\"cosmos.bank.v1beta1.MsgSend\", \"cosmos.gov.v1.MsgVote\"}\n```\n\n----------------------------------------\n\nTITLE: Decoding Transactions with gRPC\nDESCRIPTION: The TxDecode gRPC endpoint allows decoding a transaction. It takes the base64-encoded transaction bytes as input and returns the decoded transaction.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/auth/tx/README.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ngrpcurl -plaintext \\\n    -d '{\"tx_bytes\":\"Co8BCowBChwvY29zbW9zLmJhbmsudjFiZXRhMS5Nc2dTZW5kEmwKLWNvc21vczFsNnZzcWhoN3Jud3N5cjJreXozampnM3FkdWF6OGd3Z3lsODI3NRItY29zbW9zMTU4c2FsZHlnOHBteHU3Znd2dDBkNng3amVzd3A0Z3d5a2xrNnkzGgwKBXN0YWtlEgMxMDASBhIEEMCaDA==\"}' \\\n    localhost:9090 \\\n    cosmos.tx.v1beta1.Service/TxDecode\n```\n\n----------------------------------------\n\nTITLE: Creating Standard Vesting Account in Cosmos SDK\nDESCRIPTION: Creates a new vesting account with either delayed or continuous vesting schedule. Requires specification of recipient address, token amount, and end time in UNIX epoch timestamp. The start time is set to the block commit time.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/auth/vesting/README.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nsimd tx vesting create-vesting-account [to_address] [amount] [end_time] [flags]\n```\n\nLANGUAGE: bash\nCODE:\n```\nsimd tx vesting create-vesting-account cosmos1.. 100stake 2592000\n```\n\n----------------------------------------\n\nTITLE: Example Output of All Proposals Query with gRPC v1beta1 in Cosmos SDK\nDESCRIPTION: The JSON response structure when querying all proposals using the v1beta1 gRPC endpoint, showing a list of proposals with their status and details.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/README.md#2025-04-22_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"proposals\": [\n    {\n      \"proposalId\": \"1\",\n      \"status\": \"PROPOSAL_STATUS_VOTING_PERIOD\",\n      \"finalTallyResult\": {\n        \"yes\": \"0\",\n        \"abstain\": \"0\",\n        \"no\": \"0\",\n        \"noWithVeto\": \"0\"\n      },\n      \"submitTime\": \"2022-03-28T11:50:20.819676256Z\",\n      \"depositEndTime\": \"2022-03-30T11:50:20.819676256Z\",\n      \"totalDeposit\": [\n        {\n          \"denom\": \"stake\",\n          \"amount\": \"10000000010\"\n        }\n      ],\n      \"votingStartTime\": \"2022-03-28T14:25:26.644857113Z\",\n      \"votingEndTime\": \"2022-03-30T14:25:26.644857113Z\"\n    },\n    {\n      \"proposalId\": \"2\",\n      \"status\": \"PROPOSAL_STATUS_DEPOSIT_PERIOD\",\n      \"finalTallyResult\": {\n        \"yes\": \"0\",\n        \"abstain\": \"0\",\n        \"no\": \"0\",\n        \"noWithVeto\": \"0\"\n      },\n      \"submitTime\": \"2022-03-28T14:02:41.165025015Z\",\n      \"depositEndTime\": \"2022-03-30T14:02:41.165025015Z\",\n      \"totalDeposit\": [\n        {\n          \"denom\": \"stake\",\n          \"amount\": \"10\"\n        }\n      ],\n      \"votingStartTime\": \"0001-01-01T00:00:00Z\",\n      \"votingEndTime\": \"0001-01-01T00:00:00Z\"\n    }\n  ],\n  \"pagination\": {\n    \"total\": \"2\"\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Referencing appmodule.HasGenesis Interface Definition in Go\nDESCRIPTION: This Go code reference targets the experimental appmodule.HasGenesis interface in the Cosmos SDK core. appmodule.HasGenesis is not recommended for production use due to instability; it is meant for stateful genesis methods in modules developed with the new appmodule API package. Early adopters should review breaking changes expectations.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-modules/01-module-manager.md#2025-04-22_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/6ce2505/core/appmodule/genesis.go#L8-L25\n```\n\n----------------------------------------\n\nTITLE: Example Request for Querying Governance Parameters with v1beta1\nDESCRIPTION: An example curl command that demonstrates how to query voting parameters using the v1beta1 endpoint.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/README.md#2025-04-22_snippet_67\n\nLANGUAGE: bash\nCODE:\n```\ncurl localhost:1317/cosmos/gov/v1beta1/params/voting\n```\n\n----------------------------------------\n\nTITLE: Visualizing Transaction Flow in Cosmos SDK with Mermaid\nDESCRIPTION: This Mermaid diagram illustrates the flow of a transaction within a Cosmos SDK application. It depicts how a transaction is relayed from the consensus engine, decoded and routed by BaseApp to the appropriate application module (e.g., Auth, Bank, Staking, Gov), processed to update state, and finally, a result is returned to the consensus engine.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-modules/00-intro.md#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    A[Transaction relayed from the full-node's consensus engine to the node's application via DeliverTx]\n    A --> B[APPLICATION]\n    B --> C[\"Using baseapp's methods: Decode the Tx, extract and route the message(s)\"]\n    C --> D[Message routed to the correct module to be processed]\n    D --> E[AUTH MODULE]\n    D --> F[BANK MODULE]\n    D --> G[STAKING MODULE]\n    D --> H[GOV MODULE]\n    H --> I[Handles message, Updates state]\n    E --> I\n    F --> I\n    G --> I\n    I --> J[\"Return result to the underlying consensus engine (e.g. CometBFT) (0=Ok, 1=Err)\"]\n```\n\n----------------------------------------\n\nTITLE: Grant Send Authorization Example in Cosmos SDK\nDESCRIPTION: Example of granting a send authorization with a specified spend limit and optional allow list for permitted recipient addresses.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/authz/README.md#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nsimd tx authz grant cosmos1.. send --spend-limit=100stake --allow-list=cosmos1...,cosmos2... --from=cosmos1..\n```\n\n----------------------------------------\n\nTITLE: Defining Grant Structure in Protobuf\nDESCRIPTION: Protobuf definition for the Grant structure, which records a fee allowance grant with granter, grantee, and allowance details.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/feegrant/README.md#2025-04-22_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage Grant {\n  string granter = 1;\n  string grantee = 2;\n  google.protobuf.Any allowance = 3 [(cosmos_proto.accepts_interface) = \"FeeAllowanceI\"];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuration Parameter Changes\nDESCRIPTION: Documents configuration parameter modifications where '+M' indicates additions and '-M' indicates removals. Changes include database backend selection, pruning settings, gRPC message size limits, and Rosetta API configurations.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/tools/confix/testdata/diff-45-46.txt#2025-04-22_snippet_0\n\nLANGUAGE: config\nCODE:\n```\n+M app-db-backend\n-M pruning-keep-every\n+M grpc.max-recv-msg-size\n+M grpc.max-send-msg-size\n+M rosetta.denom-to-suggest\n+M rosetta.enable-fee-suggestion\n+M rosetta.gas-to-suggest\n```\n\n----------------------------------------\n\nTITLE: Defining Derived Types for Common Data Types\nDESCRIPTION: Type-specific implementations derived from Value type for common data types like Boolean, Enum, Integer, and String.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-012-state-accessors.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ntype Boolean struct { Value }\ntype Enum struct { Value }\ntype Integer struct { Value; enc IntEncoding }\ntype String struct { Value }\n// ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Telemetry Labels in TOML\nDESCRIPTION: This TOML snippet shows an example configuration for setting global labels within the application's `app.toml` file. The `global-labels` key accepts a list of [name, value] tuples. These labels, like the `chain_id` shown, are automatically applied to all metrics emitted using the Cosmos SDK's `telemetry` package, providing consistent context across all measurements.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/advanced/09-telemetry.md#2025-04-22_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n```toml\nglobal-labels = [\n  [\"chain_id\", \"chain-OfXo4V\"],\n]\n```\n```\n\n----------------------------------------\n\nTITLE: Executing Single System Test Command - Shell\nDESCRIPTION: Command to run a single system test with the test runner. Demonstrates how to execute the TestStakeUnstake test with verbose output and system_test tag.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/systemtests/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngo test -tags system_test -count=1 -v . --run TestStakeUnstake  -verbose\n```\n\n----------------------------------------\n\nTITLE: Referencing Typed Event Emission Usage - Go - go\nDESCRIPTION: This reference points to a real-world example in the Cosmos SDK where the EventManager emits a typed event within a module's message server implementation. The location helps developers find usage patterns of event emission with Protobuf-defined events in production-grade Cosmos SDK modules. The snippet is for reference and is not a copy-paste code sample.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/advanced/08-events.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/x/group/keeper/msg_server.go#L95-L97\n```\n\n----------------------------------------\n\nTITLE: Defining AllowedMsgAllowance in Protobuf\nDESCRIPTION: Protobuf definition for AllowedMsgAllowance, which specifies a fee allowance restricted to certain message types.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/feegrant/README.md#2025-04-22_snippet_4\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage AllowedMsgAllowance {\n  option (cosmos_proto.implements_interface) = \"FeeAllowanceI\";\n\n  google.protobuf.Any allowance = 1 [(cosmos_proto.accepts_interface) = \"FeeAllowanceI\"];\n  repeated string allowed_messages = 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Specific Validator Signing Info with REST\nDESCRIPTION: Uses REST endpoint to query the signing information of a specific validator by their consensus address, showing detailed information including missed blocks counter.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/slashing/README.md#2025-04-22_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\n/cosmos/slashing/v1beta1/signing_infos/%s\n```\n\nLANGUAGE: shell\nCODE:\n```\ncurl \"localhost:1317/cosmos/slashing/v1beta1/signing_infos/cosmosvalcons1nrqslkwd3pz096lh6t082frdqc84uwxn0t958c\"\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"val_signing_info\": {\n    \"address\": \"cosmosvalcons1nrqslkwd3pz096lh6t082frdqc84uwxn0t958c\",\n    \"start_height\": \"0\",\n    \"index_offset\": \"4184\",\n    \"jailed_until\": \"1970-01-01T00:00:00Z\",\n    \"tombstoned\": false,\n    \"missed_blocks_counter\": \"0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Response from v1 Tally Query\nDESCRIPTION: The JSON response structure when querying a proposal tally using the v1 endpoint. It includes the same vote count details as v1beta1.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/README.md#2025-04-22_snippet_89\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tally\": {\n    \"yes\": \"1000000\",\n    \"abstain\": \"0\",\n    \"no\": \"0\",\n    \"no_with_veto\": \"0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Example AnteDecorators in Go\nDESCRIPTION: Demonstrates example implementations of the `AnteDecorator` interface in Go for the Cosmos SDK. It includes `SetUpContextDecorator` for gas meter setup and panic recovery, `SigVerifyDecorator` for signature verification, and a generic `UserDefinedDecorator` showcasing pre- and post-processing logic around the next handler call.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-010-modular-antehandler.md#2025-04-22_snippet_13\n\nLANGUAGE: go\nCODE:\n```\n// Setup GasMeter, catch OutOfGasPanic and handle appropriately\ntype SetUpContextDecorator struct{}\n\nfunc (sud SetUpContextDecorator) AnteHandle(ctx Context, tx Tx, simulate bool, next AnteHandler) (newCtx Context, err error) {\n    ctx.GasMeter = NewGasMeter(tx.Gas)\n\n    defer func() {\n        // recover from OutOfGas panic and handle appropriately\n    }\n\n    return next(ctx, tx, simulate)\n}\n\n// Signature Verification decorator. Verify Signatures and move on\ntype SigVerifyDecorator struct{}\n\nfunc (svd SigVerifyDecorator) AnteHandle(ctx Context, tx Tx, simulate bool, next AnteHandler) (newCtx Context, err error) {\n    // verify sigs. Return error if invalid\n\n    // call next antehandler if sigs ok\n    return next(ctx, tx, simulate)\n}\n\n// User-defined Decorator. Can choose to pre- and post-process on AnteHandler\ntype UserDefinedDecorator struct{\n    // custom fields\n}\n\nfunc (udd UserDefinedDecorator) AnteHandle(ctx Context, tx Tx, simulate bool, next AnteHandler) (newCtx Context, err error) {\n    // pre-processing logic\n\n    ctx, err = next(ctx, tx, simulate)\n\n    // post-processing logic\n}\n```\n\n----------------------------------------\n\nTITLE: Normalizing Default Values in Protobuf.js\nDESCRIPTION: Example showing how to normalize default values to unset when using protobuf.js library. This implementation strategy helps achieve deterministic serialization by explicitly handling default values.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-027-deterministic-protobuf-serialization.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst bytes = SignDoc.encode({\n  bodyBytes: body.length > 0 ? body : null, // normalize empty bytes to unset\n  authInfoBytes: authInfo.length > 0 ? authInfo : null, // normalize empty bytes to unset\n  chainId: chainId || null, // normalize \"\" to unset\n  accountNumber: accountNumber || null, // normalize 0 to unset\n  accountSequence: accountSequence || null, // normalize 0 to unset\n}).finish();\n```\n\n----------------------------------------\n\nTITLE: Runtime Module Manager Implementation\nDESCRIPTION: Implementation of module management functionality in the runtime package, showing module configuration and dependency injection setup.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-modules/01-module-manager.md#2025-04-22_snippet_21\n\nLANGUAGE: go\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/runtime/module.go#L61\n```\n\nLANGUAGE: go\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/runtime/module.go#L82\n```\n\n----------------------------------------\n\nTITLE: JavaScript Signing Example\nDESCRIPTION: Example usage of cosmosSignBytes API using secp256k1 signing algorithm.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/spec/_ics/ics-030-signed-messages.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ndata = {\n  \"@chain_id\": \"1\",\n  \"@type\": \"message\",\n  \"text\": \"I hereby claim I am ABC on Keybase!\"\n}\n\ncosmosSignBytes(data, \"cosmos1pvsch6cddahhrn5e8ekw0us50dpnugwnlfngt3\")\n> \"0x7fc4a495473045022100dec81a9820df0102381cdbf7e8b0f1e2cb64c58e0ecda1324543742e0388e41a02200df37905a6505c1b56a404e23b7473d2c0bc5bcda96771d2dda59df6ed2b98f8\"\n```\n\n----------------------------------------\n\nTITLE: Fee Allowance Query Output via gRPC (JSON)\nDESCRIPTION: Example JSON output of a fee allowance query using the gRPC Allowance endpoint in the Cosmos SDK.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/feegrant/README.md#2025-04-22_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"allowance\": {\n    \"granter\": \"cosmos1..\",\n    \"grantee\": \"cosmos1..\",\n    \"allowance\": {\"@type\":\"/cosmos.feegrant.v1beta1.BasicAllowance\",\"spendLimit\":[{\"denom\":\"stake\",\"amount\":\"100\"}]}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Canonical Vote Structure in Go\nDESCRIPTION: Go struct definition for CometBFT's canonical JSON vote structure with required meta fields and type definitions.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/spec/_ics/ics-030-signed-messages.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype CanonicalJSONVote struct {\n    ChainID   string               `json:\"@chain_id\"`\n    Type      string               `json:\"@type\"`\n    BlockID   CanonicalJSONBlockID `json:\"block_id\"`\n    Height    int64                `json:\"height\"`\n    Round     int                  `json:\"round\"`\n    Timestamp string               `json:\"timestamp\"`\n    VoteType  byte                 `json:\"type\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Slashing Parameters Proto Definition\nDESCRIPTION: Protobuf definition of module parameters controlling slash fractions, downtime jail duration, and other slashing constraints.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/slashing/README.md#2025-04-22_snippet_2\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage Params {\n  bytes signed_blocks_window = 1;\n  bytes min_signed_per_window = 2;\n  bytes downtime_jail_duration = 3;\n  bytes slash_fraction_double_sign = 4;\n  bytes slash_fraction_downtime = 5;\n}\n```\n\n----------------------------------------\n\nTITLE: gRPC Module Versions Query\nDESCRIPTION: gRPC endpoint to query the list of module versions from state.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/upgrade/README.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ngrpcurl -plaintext localhost:9090 cosmos.slashing.v1beta1.Query/ModuleVersions\n```\n\n----------------------------------------\n\nTITLE: Example of Unit Testing Bar Module Calling Foo in Go\nDESCRIPTION: Demonstrates how to use the proposed unit testing infrastructure to test the Bar module calling the Foo module, including handling of different service revisions.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-054-semver-compatible-modules.md#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nfunc TestBar(t *testing.T) {\n    UnitTestConfig{ModuleConfig: &foomodulev1.Module{}}.Run(t, func (t *testing.T, f moduletesting.UnitTestFixture) {\n        ctrl := gomock.NewController(t)\n        mockFooMsgServer := footestutil.NewMockMsgServer()\n        foov1.RegisterMsgServer(f, mockFooMsgServer)\n        barMsgClient := barv1.NewMsgClient(f)\n\t\tif f.ServiceRevision(foov1.Msg_ServiceDesc.ServiceName) >= 1 {\n            mockFooMsgServer.EXPECT().DoSomething(gomock.Any(), &foov1.MsgDoSomething{\n\t\t\t\t...,\n\t\t\t\tCondition: ..., // condition is expected in revision >= 1\n            }).Return(&foov1.MsgDoSomethingResponse{}, nil)\n        } else {\n            mockFooMsgServer.EXPECT().DoSomething(gomock.Any(), &foov1.MsgDoSomething{...}).Return(&foov1.MsgDoSomethingResponse{}, nil)\n        }\n        res, err := barMsgClient.CallFoo(f, &MsgCallFoo{})\n        ...\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Querying All Redelegations for a Delegator in Cosmos SDK\nDESCRIPTION: This command retrieves all redelegation records for a specific delegator address, showing details about each redelegation including source and destination validators, balances, and completion times.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/staking/README.md#2025-04-22_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\nsimd query staking redelegations [delegator-addr] [flags]\n```\n\nLANGUAGE: bash\nCODE:\n```\nsimd query staking redelegation cosmos1gghjut3ccd8ay0zduzj64hwre2fxs9ld75ru9p\n```\n\n----------------------------------------\n\nTITLE: Delegating Coins from an Account in Go\nDESCRIPTION: This keeper function handles delegating coins from an account, differentiating between vesting and non-vesting accounts and updating the account balance accordingly.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/auth/vesting/README.md#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nfunc DelegateCoins(t Time, from Account, amount Coins) {\n    if isVesting(from) {\n        from.TrackDelegation(t, amount)\n    } else {\n        from.SetBalance(sc - amount)\n    }\n\n    // save account...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing PreBlock Method for Expired Sequence Removal in Go\nDESCRIPTION: Defines the PreBlock method for the AppModule to remove expired unordered sequences from the state.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-070-unordered-account.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc (am AppModule) PreBlock(ctx context.Context) (appmodule.ResponsePreBlock, error) {\n\terr := am.accountKeeper.RemoveExpired(sdk.UnwrapSDKContext(ctx))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn &sdk.ResponsePreBlock{ConsensusParamsChanged: false}, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Signer Information Structures in Protocol Buffers\nDESCRIPTION: Message definitions for handling signer information including public keys, signing modes and sequence numbers.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-020-protobuf-transaction-encoding.md#2025-04-22_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage SignerInfo {\n    google.protobuf.Any public_key = 1;\n    ModeInfo mode_info = 2;\n    uint64 sequence = 3;\n}\n\nmessage ModeInfo {\n    oneof sum {\n        Single single = 1;\n        Multi multi = 2;\n    }\n\n    message Single {\n        SignMode mode = 1;\n    }\n\n    message Multi {\n        CompactBitArray bitarray = 1;\n        repeated ModeInfo mode_infos = 2;\n    }\n}\n\nenum SignMode {\n    SIGN_MODE_UNSPECIFIED = 0;\n    SIGN_MODE_DIRECT = 1;\n    SIGN_MODE_TEXTUAL = 2;\n    SIGN_MODE_LEGACY_AMINO_JSON = 127;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MsgSend with Custom Title Option in Protobuf\nDESCRIPTION: This Protobuf snippet defines a MsgSend message with a custom msg_title option. It demonstrates how to associate a short title with a message for use in SIGN_MODE_TEXTUAL.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-050-sign-mode-textual-annex1.md#2025-04-22_snippet_5\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage MsgSend {\n  option (cosmos.msg.v1.textual.msg_title) = \"bank send coins\";\n}\n```\n\n----------------------------------------\n\nTITLE: Resetting the Cache Manager in JavaScript\nDESCRIPTION: Function to reset the manager's map of caches by deleting all stored cache entries. Note that this appears to be in JavaScript syntax despite the rest of the code being in Go.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/spec/store/interblock-cache.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Reset(manager CommitKVStoreCacheManager) {\n\n    for (let storeKey of manager.caches.keys()) {\n        manager.caches.delete(storeKey)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Keeper Interface for NFT Module Operations in Go\nDESCRIPTION: Interface definition for the NFT module's Keeper, which provides methods for creating and managing NFT classes, minting, burning, updating, and transferring NFTs, as well as various query methods for retrieving NFT data.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-043-nft-module.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype Keeper interface {\n  NewClass(ctx sdk.Context,class Class)\n  UpdateClass(ctx sdk.Context,class Class)\n\n  Mint(ctx sdk.Context,nft NFT，receiver sdk.AccAddress)   // updates totalSupply\n  BatchMint(ctx sdk.Context, tokens []NFT,receiver sdk.AccAddress) error\n\n  Burn(ctx sdk.Context, classId string, nftId string)    // updates totalSupply\n  BatchBurn(ctx sdk.Context, classID string, nftIDs []string) error\n\n  Update(ctx sdk.Context, nft NFT)\n  BatchUpdate(ctx sdk.Context, tokens []NFT) error\n\n  Transfer(ctx sdk.Context, classId string, nftId string, receiver sdk.AccAddress)\n  BatchTransfer(ctx sdk.Context, classID string, nftIDs []string, receiver sdk.AccAddress) error\n\n  GetClass(ctx sdk.Context, classId string) Class\n  GetClasses(ctx sdk.Context) []Class\n\n  GetNFT(ctx sdk.Context, classId string, nftId string) NFT\n  GetNFTsOfClassByOwner(ctx sdk.Context, classId string, owner sdk.AccAddress) []NFT\n  GetNFTsOfClass(ctx sdk.Context, classId string) []NFT\n\n  GetOwner(ctx sdk.Context, classId string, nftId string) sdk.AccAddress\n  GetBalance(ctx sdk.Context, classId string, owner sdk.AccAddress) uint64\n  GetTotalSupply(ctx sdk.Context, classId string) uint64\n}\n```\n\n----------------------------------------\n\nTITLE: buf.lock: Managing Protobuf Dependency Lock File - Go Reference\nDESCRIPTION: This Go reference points to the proto/buf.lock file, an autogenerated artifact tracking dependencies required for all protobuf generation configurations. Maintained by Buf, it ensures repeatable builds by pinning exact versions of upstream protos. It is regenerated automatically by Buf tools and should not be manually edited.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/tooling/00-protobuf.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/main/proto/buf.lock#L1-L16\n```\n\n----------------------------------------\n\nTITLE: Example Output of All Votes Query with gRPC v1 in Cosmos SDK\nDESCRIPTION: The JSON response structure when querying all votes using the v1 gRPC endpoint, showing a list of votes with voter addresses and their choices.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/README.md#2025-04-22_snippet_47\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"votes\": [\n    {\n      \"proposalId\": \"1\",\n      \"voter\": \"cosmos1..\",\n      \"options\": [\n        {\n          \"option\": \"VOTE_OPTION_YES\",\n          \"weight\": \"1.000000000000000000\"\n        }\n      ]\n    }\n  ],\n  \"pagination\": {\n    \"total\": \"1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Delegation Structure in Protobuf\nDESCRIPTION: This Protobuf snippet defines the Delegation structure, representing a delegation of tokens from a delegator to a validator.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/staking/README.md#2025-04-22_snippet_2\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage Delegation {\n  option (gogoproto.equal)            = false;\n  option (gogoproto.goproto_getters)  = false;\n\n  string delegator_address = 1 [(gogoproto.moretags) = \"yaml:\\\"delegator_address\\\"\"];\n  string validator_address = 2 [(gogoproto.moretags) = \"yaml:\\\"validator_address\\\"\"];\n  string shares            = 3 [(gogoproto.customtype) = \"github.com/cosmos/cosmos-sdk/types.Dec\", (gogoproto.nullable) = false];\n}\n```\n\n----------------------------------------\n\nTITLE: CI/Workflow for Protobuf Validation with GitHub Actions - Go Reference\nDESCRIPTION: This snippet references the CI workflow YAML in GitHub Actions responsible for continuous integration and validation of protobuf files in Cosmos SDK. It automates linting, breakage checks, and code generation according to buf.yaml specifications. Dependencies are GitHub Actions runners and any required actions or Buf CLI versions.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/tooling/00-protobuf.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/main/.github/workflows/proto.yml#L1-L32\n```\n\n----------------------------------------\n\nTITLE: Providing Custom Signer Logic via Dependency Injection (Go)\nDESCRIPTION: Shows how to register a custom signer function (like `ProvideBankSendTransactionGetSigners`) using the `depinject.Provide` method. This integrates the custom signer logic into the application's dependency injection system, making it available where needed.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-modules/02-messages-and-queries.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\ndepinject.Provide(banktypes.ProvideBankSendTransactionGetSigners)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Hooks for Epochs Keeper\nDESCRIPTION: Configures hooks for the Epochs keeper to interact with other modules.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/UPGRADE_GUIDE.md#2025-04-22_snippet_25\n\nLANGUAGE: go\nCODE:\n```\napp.EpochsKeeper.SetHooks(\n    epochstypes.NewMultiEpochHooks(\n        // insert epoch hooks receivers here\n        app.SomeOtherModule\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Example Go Application Type Definition Reference (simapp)\nDESCRIPTION: Provides a reference URL to the Go code in the `simapp` repository demonstrating the structure of a Cosmos SDK application's type definition. This definition typically embeds `runtime.App` (which wraps `BaseApp`) and includes references to codecs and module managers.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/beginner/00-app-anatomy.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.53.0-rc.2/simapp/app_di.go#L57-L90\n```\n\n----------------------------------------\n\nTITLE: Defining Tally Structure in Protobuf\nDESCRIPTION: Defines the Tally message that represents the sum of weighted votes. It tracks yes votes, no votes, abstentions, and vetoes separately to enable different decision policies to interpret voting results.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-042-group-module.md#2025-04-22_snippet_5\n\nLANGUAGE: protobuf\nCODE:\n```\n// Tally represents the sum of weighted votes.\nmessage Tally {\n    option (gogoproto.goproto_getters) = false;\n\n    // yes_count is the weighted sum of yes votes.\n    string yes_count = 1;\n\n    // no_count is the weighted sum of no votes.\n    string no_count = 2;\n\n    // abstain_count is the weighted sum of abstainers.\n    string abstain_count = 3;\n\n    // veto_count is the weighted sum of vetoes.\n    string veto_count = 4;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Periods Struct in Go\nDESCRIPTION: Defines a Periods struct to store all vesting periods for a PeriodicVestingAccount.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/auth/vesting/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Stores all vesting periods passed as part of a PeriodicVestingAccount\ntype Periods []Period\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Gentx Validation Script in Shell\nDESCRIPTION: Configuration environment variables required for the validate-gentxs.sh script. These variables define the daemon name, chain ID, denomination, GitHub URL, binary version, Go version, pre-launch genesis URL, and directory for genesis transactions.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/scripts/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nexport DAEMON=gaiad\nexport CHAIN_ID=cosmoshub-1\nexport DENOM=uatom\nexport GH_URL=https://github.com/cosmos/gaia\nexport BINARY_VERSION=v1.0.0\nexport GO_VERSION=1.17\nexport PRELAUNCH_GENESIS_URL=https://raw.githubusercontent.com/cosmos/mainnet/main/cosmoshub-1/genesis-prelaunch.json\nexport GENTXS_DIR=~/go/src/github.com/cosmos/mainnet/$CHAIN_ID/gentxs\n```\n\n----------------------------------------\n\nTITLE: Initializing the Pass Backend\nDESCRIPTION: Before using the 'pass' backend, which uses the pass utility to manage on-disk encryption, it must be initialized with a GPG key ID as shown in this command.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/user/run-node/00-keyring.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npass init <GPG_KEY_ID>\n```\n\n----------------------------------------\n\nTITLE: Building System Test Binary (Shell)\nDESCRIPTION: Commands to build and copy the simd binary for system testing\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/systemtests/GETTING_STARTED.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake test-system\n```\n\nLANGUAGE: shell\nCODE:\n```\nmake build\nmkdir -p ./tests/systemtests/binaries\ncp ./build/simd ./tests/systemtests/binaries/\n```\n\n----------------------------------------\n\nTITLE: UpdateGroupPolicyMetadata Message Definition in Protobuf\nDESCRIPTION: Protocol buffer definition for MsgUpdateGroupPolicyMetadata which updates a group policy's metadata.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/group/README.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/tree/release/v0.50.x/proto/cosmos/group/v1/tx.proto#L246-L259\n```\n\n----------------------------------------\n\nTITLE: UpdateGroupAdmin Message Definition in Protobuf\nDESCRIPTION: Protocol buffer definition for MsgUpdateGroupAdmin which allows updating a group's admin address.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/group/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/tree/release/v0.50.x/proto/cosmos/group/v1/tx.proto#L107-L120\n```\n\n----------------------------------------\n\nTITLE: Referencing Protobuf Files in Cosmos SDK\nDESCRIPTION: References to protobuf files used in the Cosmos SDK for transaction encoding and signing. These files define the structure of transactions and sign modes.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-076-tx-malleability.md#2025-04-22_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\n// Reference to aminojson.proto file\n../../x/tx/signing/aminojson/internal/aminojsonpb/aminojson.proto\n```\n\nLANGUAGE: protobuf\nCODE:\n```\n// Reference to tx.proto file\n../../proto/cosmos/tx/v1beta1/tx.proto\n```\n\n----------------------------------------\n\nTITLE: Running Bcrypt Benchmarks in Cosmos SDK\nDESCRIPTION: Command to execute Bcrypt benchmark tests in the Cosmos SDK crypto/keys/mintkey package to evaluate performance across different security parameters.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/crypto/bcrypt_readme.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo test -v --bench github.com/cosmos/cosmos-sdk/crypto/keys/mintkey\n```\n\n----------------------------------------\n\nTITLE: Defining Unit Testing Infrastructure in Go\nDESCRIPTION: Proposes an API for unit testing runners and fixtures to test modules with multiple versions of dependencies. It includes interfaces and configurations for setting up test environments.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-054-semver-compatible-modules.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\npackage moduletesting\n\nimport (\n\t\"context\"\n\t\"testing\"\n\n\t\"cosmossdk.io/core/intermodule\"\n\t\"cosmossdk.io/depinject\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/protobuf/proto\"\n\t\"google.golang.org/protobuf/reflect/protodesc\"\n)\n\ntype TestFixture interface {\n\tcontext.Context\n\tintermodule.Client // for making calls to the module we're testing\n\tBeginBlock()\n\tEndBlock()\n}\n\ntype UnitTestFixture interface {\n\tTestFixture\n\tgrpc.ServiceRegistrar // for registering mock service implementations\n}\n\ntype UnitTestConfig struct {\n\tModuleConfig              proto.Message    // the module's config object\n\tDepinjectConfig           depinject.Config // optional additional depinject config options\n\tDependencyFileDescriptors []protodesc.FileDescriptorProto // optional dependency file descriptors to use instead of the global registry\n}\n\n// Run runs the test function for all combinations of dependency API revisions.\nfunc (cfg UnitTestConfig) Run(t *testing.T, f func(t *testing.T, f UnitTestFixture)) {\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Makefile Commands for Protobuf Operations - Go Reference\nDESCRIPTION: This Go reference snippet points to a section of the Cosmos SDK Makefile that defines commands for generating, linting, and formatting protobuf files. These targets are essential for maintaining protobuf consistency and can be invoked from the Makefile in related projects. The snippet depends on the repository's Makefile and its Docker-based proto-builder image; it delineates the steps for developers to follow standard protobuf procedures.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/tooling/00-protobuf.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/Makefile#L411-L432\n```\n\n----------------------------------------\n\nTITLE: Defining ModuleManager with AnteHandler Order in Go for Cosmos SDK\nDESCRIPTION: Defines a ModuleManager struct with an AnteHandlerOrder field and a GetAnteHandler method to chain the AnteHandlers in the specified order.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-010-modular-antehandler.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\ntype ModuleManager struct {\n    // other fields\n    AnteHandlerOrder []AnteHandler\n}\n\nfunc (mm ModuleManager) GetAnteHandler() AnteHandler {\n    retun Chainer(mm.AnteHandlerOrder)\n}\n```\n\n----------------------------------------\n\nTITLE: Using Confix View Command\nDESCRIPTION: Examples of using the Confix view command to display configuration files.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/tools/confix/README.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsimd config view client # views the current app client config\n```\n\nLANGUAGE: bash\nCODE:\n```\nconfix view ~/.simapp/config/client.toml # views the current app client conf\n```\n\n----------------------------------------\n\nTITLE: Querying Votes for a Proposal using v1beta1 in Cosmos SDK\nDESCRIPTION: REST API endpoint for retrieving all votes for a specific proposal using the legacy v1beta1 path. The endpoint accepts a proposal ID and returns a list of votes with voter addresses and vote options.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/README.md#2025-04-22_snippet_60\n\nLANGUAGE: bash\nCODE:\n```\n/cosmos/gov/v1beta1/proposals/{proposal_id}/votes\n```\n\n----------------------------------------\n\nTITLE: Registering Modules with Protobuf and Dependency Injection in Go\nDESCRIPTION: Explains how to register modules in Cosmos SDK with options for dependency injection and protobuf typing. Each module must register itself using a unique type identifier and optionally provide dependency injection and type information through various options. Importantly, modules should ensure proper registration for app configuration decoding and dependency management.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-057-app-wiring.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// Register registers a module with the provided type name (ex. cosmos.bank.module.v1.Module)\n// and the provided options.\nfunc Register(configTypeName protoreflect.FullName, option ...Option) { ... }\n\ntype Option { /* private methods */ }\n\n// Provide registers dependency injection provider functions which work with the\n// cosmos-sdk container module. These functions can also accept an additional\n// parameter for the module's config object.\nfunc Provide(providers ...interface{}) Option { ... }\n\n// Types registers protobuf TypeInfo's with the protobuf registry.\nfunc Types(types ...TypeInfo) Option { ... }\n```\n\nLANGUAGE: go\nCODE:\n```\nfunc init() {\n\tappmodule.Register(\"cosmos.bank.module.v1.Module\",\n\t\tappmodule.Types(\n\t\t\ttypes.Types_tx_proto,\n            types.Types_query_proto,\n            types.Types_types_proto,\n\t    ),\n\t    appmodule.Provide(\n\t\t\tprovideBankModule,\n\t    )\n\t)\n}\n\ntype Inputs struct {\n\tcontainer.In\n\t\n\tAuthKeeper auth.Keeper\n\tDB ormdb.ModuleDB\n}\n\ntype Outputs struct {\n\tKeeper bank.Keeper\n\tAppModule appmodule.AppModule\n}\n\nfunc ProvideBankModule(config *bankmodulev1.Module, Inputs) (Outputs, error) { ... }\n```\n\n----------------------------------------\n\nTITLE: Implementing UnpackInterfaces and GetEvidence for MsgSubmitEvidence in Go\nDESCRIPTION: This code snippet shows the implementation of UnpackInterfaces method for MsgSubmitEvidence to unpack the evidence interface, and a convenience getter GetEvidence to retrieve the unpacked evidence.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-019-protobuf-state-encoding.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nfunc (msg MsgSubmitEvidence) UnpackInterfaces(ctx sdk.InterfaceRegistry) error {\n  var evi eviexported.Evidence\n  return ctx.UnpackAny(msg.Evidence, *evi)\n}\n\nfunc (msg MsgSubmitEvidence) GetEvidence() eviexported.Evidence {\n  return msg.Evidence.GetCachedValue().(eviexported.Evidence)\n}\n```\n\n----------------------------------------\n\nTITLE: Indexer Structure Definition\nDESCRIPTION: Implementation structure for managing index persistence and operations.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/group/internal/orm/README.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nreference\nhttps://github.com/cosmos/cosmos-sdk/tree/release/v0.50.x/x/group/internal/orm/indexer.go#L15-L19\n```\n\n----------------------------------------\n\nTITLE: Adding Epochs Module Config for DI\nDESCRIPTION: Adds the Epochs module configuration to the ModuleConfig for dependency injection.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/UPGRADE_GUIDE.md#2025-04-22_snippet_34\n\nLANGUAGE: go\nCODE:\n```\n{\n    Name:   epochstypes.ModuleName,\n    Config: appconfig.WrapAny(&epochsmodulev1.Module{}),\n},\n```\n\n----------------------------------------\n\nTITLE: Building All Documentation Versions in Shell\nDESCRIPTION: Shell command using Make to build all versions of the Cosmos SDK documentation, including the versioned docs, which is necessary for testing redirections.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nmake build-docs\n```\n\n----------------------------------------\n\nTITLE: Metadata Structure Definitions\nDESCRIPTION: JSON schemas for metadata storage in various group module components including proposals, votes, groups, and decision policies.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/group/README.md#2025-04-22_snippet_38\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"title\": \"\",\n  \"authors\": [\"\"],\n  \"summary\": \"\",\n  \"details\": \"\",\n  \"proposal_forum_url\": \"\",\n  \"vote_option_context\": \"\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"justification\": \"\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"\",\n  \"description\": \"\",\n  \"group_website_url\": \"\",\n  \"group_forum_url\": \"\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"\",\n  \"description\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Non-Root User for Node Operation in Ubuntu\nDESCRIPTION: Commands to create a non-root user and grant sudo privileges for securely operating a Cosmos SDK node. This is a security best practice to avoid running the node with root privileges.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/user/run-node/06-run-production.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo adduser change_me\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo usermod -aG sudo change_me\n```\n\n----------------------------------------\n\nTITLE: Running Cosmos SDK Simulation Commands via CLI - Bash\nDESCRIPTION: This Bash snippet shows how to run a set of simulation commands on the Cosmos SDK using the native Go test tool. It demonstrates invoking tests in the simapp package, targeting specific simulation commands, and passing various simulation flags. Key parameters include the simulation command (TestApp<simulation_command>), customization flags, verbosity, and a timeout setting. The command expects the Go toolchain and the Cosmos SDK source, and outputs logs and results from the simulation runs. The snippet focuses on reproducible simulation scenarios for debugging or testing blockchain applications.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/advanced/12-simulation.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n $ go test -mod=readonly github.com/cosmos/cosmos-sdk/simapp \\\n  -run=TestApp<simulation_command> \\\n  ...<flags>\n  -v -timeout 24h\n```\n\n----------------------------------------\n\nTITLE: Building libsecp256k1 using autotools\nDESCRIPTION: A series of commands to build the libsecp256k1 library using autotools. This process includes generating configuration scripts, configuring the build, compiling the code, running tests, and optionally installing the library system-wide.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/crypto/keys/secp256k1/internal/secp256k1/libsecp256k1/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./autogen.sh\n./configure\nmake\n./tests\nsudo make install  # optional\n```\n\n----------------------------------------\n\nTITLE: REST API Applied Plan Query\nDESCRIPTION: REST endpoint to query a previously applied upgrade plan by name.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/upgrade/README.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \"http://localhost:1317/cosmos/upgrade/v1beta1/applied_plan/v2.0-upgrade\" -H \"accept: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Querying All Proposal Deposits\nDESCRIPTION: Commands to query all deposits for a given proposal ID.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/README.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nsimd query gov deposits [proposal-id] [flags]\n```\n\n----------------------------------------\n\nTITLE: Example SIGN_MODE_TEXTUAL Rendered Output\nDESCRIPTION: Demonstrates how a SIGN_MODE_TEXTUAL transaction would render on a device with a single 80-character ASCII display. The example shows various text formatting including indentation, line breaks, and special character handling.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-050-sign-mode-textual-annex2.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nAn introductory line.\nkey1: 123456\nkey2: a string that ends in whitespace   @\nkey3: a string that ends in  a single ampersand - @@\n >tricky key4<: note the leading space in the presentation\nintroducing an aggregate\n> key5: false\n> key6: a very long line of text, please co\\u00F6perate and break into\n>+  multiple lines.\n> Can we do further nesting?\n>> You bet we can!\n```\n\n----------------------------------------\n\nTITLE: Defining Pruning Options Structure in Go\nDESCRIPTION: Structure definition for PruningOptions that controls how state pruning is performed. Includes fields for keeping recent heights, pruning interval, and strategy selection.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/spec/store/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype PruningOptions struct {\n\t// KeepRecent defines how many recent heights to keep on disk.\n\tKeepRecent uint64\n\n\t// Interval defines when the pruned heights are removed from disk.\n\tInterval uint64\n\n\t// Strategy defines the kind of pruning strategy. See below for more information on each.\n\tStrategy PruningStrategy\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting Index Mappings in Cosmos SDK Module State\nDESCRIPTION: Example showing how to document index mappings that don't store values (mapping to nil). This notation is used for indexes that only serve as lookups to other state entries.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/spec/SPEC_MODULE.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n0x01 | address2Bytes | addressBytes -> nil\n```\n\n----------------------------------------\n\nTITLE: Example of Querying Governance Parameters with gRPC v1 in Cosmos SDK\nDESCRIPTION: A practical example showing how to use grpcurl to query voting parameters using the v1 gRPC endpoint.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/README.md#2025-04-22_snippet_52\n\nLANGUAGE: bash\nCODE:\n```\ngrpcurl -plaintext \\\n    -d '{\"params_type\":\"voting\"}' \\\n    localhost:9090 \\\n    cosmos.gov.v1.Query/Params\n```\n\n----------------------------------------\n\nTITLE: Querying All Validators Signing Info\nDESCRIPTION: Command to query signing information for all validators in the network\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/slashing/README.md#2025-04-22_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nsimd query slashing signing-infos\n```\n\n----------------------------------------\n\nTITLE: Querying Governance Parameters using v1beta1 in Cosmos SDK\nDESCRIPTION: REST API endpoint for retrieving governance module parameters for a specific parameter type using the legacy v1beta1 path. The parameter type can be specified to get specific parameters.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/README.md#2025-04-22_snippet_66\n\nLANGUAGE: bash\nCODE:\n```\n/cosmos/gov/v1beta1/params/{params_type}\n```\n\n----------------------------------------\n\nTITLE: Slashing Parameters Output\nDESCRIPTION: Example output showing the slashing module's parameters including jail duration, signing requirements, and slash fractions\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/slashing/README.md#2025-04-22_snippet_9\n\nLANGUAGE: yml\nCODE:\n```\ndowntime_jail_duration: 600s\nmin_signed_per_window: \"0.500000000000000000\"\nsigned_blocks_window: \"100\"\nslash_fraction_double_sign: \"0.050000000000000000\"\nslash_fraction_downtime: \"0.010000000000000000\"\n```\n\n----------------------------------------\n\nTITLE: Defining MsgSubmitEvidence Message in Protobuf\nDESCRIPTION: Protobuf definition of the MsgSubmitEvidence message used to submit evidence of misbehavior. It contains the submitter's address and the evidence wrapped in Google's Any type.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/evidence/README.md#2025-04-22_snippet_4\n\nLANGUAGE: protobuf\nCODE:\n```\n// MsgSubmitEvidence represents a message that supports submitting arbitrary\n// Evidence of misbehavior such as equivocation or counterfactual signing.\nmessage MsgSubmitEvidence {\n  string              submitter = 1;\n  google.protobuf.Any evidence  = 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RootStore Interface Structure in Go\nDESCRIPTION: Defines the interface structure for RootStore which will replace MultiStore. It introduces BasicRootStore for read-only access, CommitRootStore as the main app state, and CacheRootStore for branched state operations. Also includes a configuration structure for constructor parameters.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-040-storage-and-smt-state-commitments.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// Used where read-only access to versions is needed.\ntype BasicRootStore interface {\n    Store\n    GetKVStore(StoreKey) KVStore\n    CacheRootStore() CacheRootStore\n}\n\n// Used as the main app state, replacing CommitMultiStore.\ntype CommitRootStore interface {\n    BasicRootStore\n    Committer\n    Snapshotter\n\n    GetVersion(uint64) (BasicRootStore, error)\n    SetInitialVersion(uint64) error\n\n    ... // Trace and Listen methods\n}\n\n// Replaces CacheMultiStore for branched state.\ntype CacheRootStore interface {\n    BasicRootStore\n    Write()\n\n    ... // Trace and Listen methods\n}\n\n// Example of constructor parameters for the concrete type.\ntype RootStoreConfig struct {\n    Upgrades        *StoreUpgrades\n    InitialVersion  uint64\n\n    ReservePrefix(StoreKey, StoreType)\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Epochs Module Dependencies\nDESCRIPTION: Import statements required for the Epochs module implementation in a Cosmos SDK application.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/UPGRADE_GUIDE.md#2025-04-22_snippet_21\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    // ...\n    \"github.com/cosmos/cosmos-sdk/x/epochs\"\n    epochskeeper \"github.com/cosmos/cosmos-sdk/x/epochs/keeper\"\n    epochstypes \"github.com/cosmos/cosmos-sdk/x/epochs/types\"\n)\n```\n\n----------------------------------------\n\nTITLE: Using Confix Set Command\nDESCRIPTION: Examples of using the Confix set command to set configuration values.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/tools/confix/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsimd config set app pruning \"enabled\" # sets the value pruning from app.toml\nsimd config set client chain-id \"foo-1\" # sets the value chain-id from client.toml\n```\n\nLANGUAGE: bash\nCODE:\n```\nconfix set ~/.simapp/config/app.toml pruning \"enabled\" # sets the value pruning from app.toml\nconfix set ~/.simapp/config/client.toml chain-id \"foo-1\" # sets the value chain-id from client.toml\n```\n\n----------------------------------------\n\nTITLE: Configuring Version Redirects in JavaScript for Docusaurus\nDESCRIPTION: JavaScript configuration example for setting up redirections in Docusaurus to direct deprecated version paths to the main documentation. This code should be updated when adding new versions or deprecating old ones.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/README.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n        {\n          from: [\"/\", \"/master\", \"/v0.43\", \"/v0.44\", \"/v0.XX\"], // here add the deprecated version\n          to: \"/main\",\n        },\n```\n\n----------------------------------------\n\nTITLE: Handling Genesis Transactions Before First Block - Go\nDESCRIPTION: This Go code reference points to a GenesisTxHandler in the core package, used by modules (such as x/genutil) to handle and process genesis transactions before the first block is committed. It is necessary for scenarios where modules must submit state changes ahead of canonical block production. Dependencies include the Cosmos SDK core and relevant transaction logic. The handler processes inputs (genesis transactions) and outputs state changes in the genesis context.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-modules/08-genesis.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/core/genesis/txhandler.go#L3-L6\n```\n\n----------------------------------------\n\nTITLE: gRPC Query Endpoints\nDESCRIPTION: gRPC endpoints for querying group information, policy details, and member data\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/group/README.md#2025-04-22_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\ncosmos.group.v1.Query/GroupInfo\ncosmos.group.v1.Query/GroupPolicyInfo\ncosmos.group.v1.Query/GroupMembers\n```\n\n----------------------------------------\n\nTITLE: Unjail Message Handler Pseudocode\nDESCRIPTION: Pseudocode implementation of the validator unjailing logic including validation checks and state updates.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/slashing/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nunjail(tx MsgUnjail)\n    validator = getValidator(tx.ValidatorAddr)\n    if validator == nil\n      fail with \"No validator found\"\n\n    if getSelfDelegation(validator) == 0\n      fail with \"validator must self delegate before unjailing\"\n\n    if !validator.Jailed\n      fail with \"Validator not jailed, cannot unjail\"\n\n    info = GetValidatorSigningInfo(operator)\n    if info.Tombstoned\n      fail with \"Tombstoned validator cannot be unjailed\"\n    if block time < info.JailedUntil\n      fail with \"Validator still jailed, cannot unjail until period has expired\"\n\n    validator.Jailed = false\n    setValidator(validator)\n\n    return\n```\n\n----------------------------------------\n\nTITLE: Referencing HasInvariants Interface Definition in Go\nDESCRIPTION: This Go code reference designates where the HasInvariants extension interface is defined. HasInvariants enables a module to register invariant checks, which can trigger halting or corrective protocol actions if module invariants are violated. Implementation may depend on sdk.InvariantRegistry from the Cosmos SDK.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-modules/01-module-manager.md#2025-04-22_snippet_8\n\nLANGUAGE: Go\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/types/module/module.go#L202-L205\n```\n\n----------------------------------------\n\nTITLE: Unjailing a Validator\nDESCRIPTION: Command to unjail a validator that was previously jailed for downtime\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/slashing/README.md#2025-04-22_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nsimd tx slashing unjail --from mykey\n```\n\n----------------------------------------\n\nTITLE: Example Response from v1beta1 Votes Query\nDESCRIPTION: The JSON response structure when querying votes for a proposal using the v1beta1 endpoint. It includes an array of votes, each containing the proposal ID, voter address, vote option, and pagination details.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/README.md#2025-04-22_snippet_62\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"votes\": [\n    {\n      \"proposal_id\": \"1\",\n      \"voter\": \"cosmos1..\",\n      \"option\": \"VOTE_OPTION_YES\",\n      \"options\": [\n        {\n          \"option\": \"VOTE_OPTION_YES\",\n          \"weight\": \"1.000000000000000000\"\n        }\n      ]\n    }\n  ],\n  \"pagination\": {\n    \"next_key\": null,\n    \"total\": \"1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining VotingParams Structure in Protobuf for Cosmos SDK Governance\nDESCRIPTION: This snippet defines the VotingParams message structure in Protobuf, which specifies the parameters related to the voting phase of a proposal in the governance module.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/README.md#2025-04-22_snippet_4\n\nLANGUAGE: protobuf\nCODE:\n```\n```protobuf reference\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.47.0-rc1/proto/cosmos/gov/v1/gov.proto#L164-L168\n```\n```\n\n----------------------------------------\n\nTITLE: Adding ProtocolPool Keeper to App Struct\nDESCRIPTION: Adds the ProtocolPool keeper to the application struct to make it accessible throughout the application.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/UPGRADE_GUIDE.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nProtocolPoolKeeper protocolpoolkeeper.Keeper\n```\n\n----------------------------------------\n\nTITLE: DVVTriplet Queue Protocol Buffer Definition\nDESCRIPTION: Protocol buffer definition for Redelegation queue entries tracking delegator and source/destination validator triplets.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/staking/README.md#2025-04-22_snippet_6\n\nLANGUAGE: protobuf\nCODE:\n```\n// reference: https://github.com/cosmos/cosmos-sdk/blob/v0.47.0-rc1/proto/cosmos/staking/v1beta1/staking.proto#L179-L191\n```\n\n----------------------------------------\n\nTITLE: Instantiating ProtocolPool Keeper\nDESCRIPTION: Creates a new instance of the ProtocolPool keeper with dependencies like AccountKeeper and BankKeeper.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/UPGRADE_GUIDE.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\napp.ProtocolPoolKeeper = protocolpoolkeeper.NewKeeper(\n    appCodec,\n    runtime.NewKVStoreService(keys[protocolpooltypes.StoreKey]),\n    app.AccountKeeper,\n    app.BankKeeper,\n    authtypes.NewModuleAddress(govtypes.ModuleName).String(),\n)\n```\n\n----------------------------------------\n\nTITLE: Using Confix Get Command\nDESCRIPTION: Examples of using the Confix get command to retrieve configuration values.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/tools/confix/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsimd config get app pruning # gets the value pruning from app.toml\nsimd config get client chain-id # gets the value chain-id from client.toml\n```\n\nLANGUAGE: bash\nCODE:\n```\nconfix get ~/.simapp/config/app.toml pruning # gets the value pruning from app.toml\nconfix get ~/.simapp/config/client.toml chain-id # gets the value chain-id from client.toml\n```\n\n----------------------------------------\n\nTITLE: Setting ProtocolPool in EndBlockers Order\nDESCRIPTION: Sets the execution order of EndBlockers for the ProtocolPool module.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/UPGRADE_GUIDE.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\napp.ModuleManager.SetOrderEndBlockers(\n    // order does not matter.\n    protocolpooltypes.ModuleName,\n)\n```\n\n----------------------------------------\n\nTITLE: Querying Validator Signing Info with gRPC\nDESCRIPTION: Uses gRPC to query the signing information of a specific validator by their consensus address, showing details like index offset and jailed status.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/slashing/README.md#2025-04-22_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\ncosmos.slashing.v1beta1.Query/SigningInfo\n```\n\nLANGUAGE: shell\nCODE:\n```\ngrpcurl -plaintext -d '{\"cons_address\":\"cosmosvalcons1nrqsld3aw6lh6t082frdqc84uwxn0t958c\"}' localhost:9090 cosmos.slashing.v1beta1.Query/SigningInfo\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"valSigningInfo\": {\n    \"address\": \"cosmosvalcons1nrqsld3aw6lh6t082frdqc84uwxn0t958c\",\n    \"indexOffset\": \"3493\",\n    \"jailedUntil\": \"1970-01-01T00:00:00Z\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: FeePool Protobuf Definition for Distribution Module\nDESCRIPTION: Protobuf reference for the FeePool structure used in the distribution module. The FeePool tracks all globally managed parameters for reward distribution.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/distribution/README.md#2025-04-22_snippet_3\n\nLANGUAGE: protobuf\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.47.0-rc1/proto/cosmos/distribution/v1beta1/distribution.proto#L116-L123\n```\n\n----------------------------------------\n\nTITLE: Defining Indexer Type for Custom Key Encoding\nDESCRIPTION: Indexer type derived from Mapping that provides custom key encoding functionality.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-012-state-accessors.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\ntype Indexer struct {\n  m   Mapping\n  enc IntEncoding\n}\n```\n\n----------------------------------------\n\nTITLE: Adding ProtocolPool Store Key\nDESCRIPTION: Adds the store key for the ProtocolPool module to the list of key-value store keys.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/UPGRADE_GUIDE.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nkeys := storetypes.NewKVStoreKeys(\n    // ...\n    protocolpooltypes.StoreKey,\n)\n```\n\n----------------------------------------\n\nTITLE: Proportional Slashing Formula Using Linear Approach\nDESCRIPTION: Initial naive formula for proportional slashing where the slash amount is proportional to a validator's voting power. This approach is vulnerable to sybil attacks.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-014-proportional-slashing.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nslash_amount = k * power // power is the faulting validator's voting power and k is some on-chain constant\n```\n\n----------------------------------------\n\nTITLE: UpdateGroupMetadata Message Definition in Protobuf\nDESCRIPTION: Protocol buffer definition for MsgUpdateGroupMetadata which enables updating a group's metadata.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/group/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/tree/release/v0.50.x/proto/cosmos/group/v1/tx.proto#L125-L138\n```\n\n----------------------------------------\n\nTITLE: Example Response from v1beta1 All Deposits Query\nDESCRIPTION: The JSON response structure when querying all deposits for a proposal using the v1beta1 endpoint. It includes an array of deposits with proposal ID, depositor address, amount details, and pagination information.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/README.md#2025-04-22_snippet_80\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"deposits\": [\n    {\n      \"proposal_id\": \"1\",\n      \"depositor\": \"cosmos1..\",\n      \"amount\": [\n        {\n          \"denom\": \"stake\",\n          \"amount\": \"10000000\"\n        }\n      ]\n    }\n  ],\n  \"pagination\": {\n    \"next_key\": null,\n    \"total\": \"1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Parameter Modification in Cosmos SDK Bank Module (Go)\nDESCRIPTION: This Go reference points to a specific location within the Cosmos SDK's `x/bank` module (`msg_server.go`). It serves as an example cited in the text to illustrate how modules possess elevated permissions (sudo capabilities) allowing them to perform actions like modifying parameters, which are typically restricted from regular users.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-modules/00-intro.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ngo reference\nhttps://github.com/cosmos/cosmos-sdk/blob/61da5d1c29c16a1eb5bb5488719fde604ec07b10/x/bank/keeper/msg_server.go#L147-L149\n```\n\n----------------------------------------\n\nTITLE: Querying Governance Module Help\nDESCRIPTION: Command to display help information for the governance module query commands.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/README.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nsimd query gov --help\n```\n\n----------------------------------------\n\nTITLE: Querying Single Deposit - gRPC\nDESCRIPTION: Demonstrates how to query a deposit for a specific proposal using both v1beta1 and v1 gRPC endpoints. The query requires a proposal ID and depositor address.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/README.md#2025-04-22_snippet_54\n\nLANGUAGE: bash\nCODE:\n```\ngrpcurl -plaintext \\\n    '{\"proposal_id\":\"1\",\"depositor\":\"cosmos1..\"}' \\\n    localhost:9090 \\\n    cosmos.gov.v1beta1.Query/Deposit\n```\n\n----------------------------------------\n\nTITLE: UpdateGroupPolicyDecisionPolicy Message Definition in Protobuf\nDESCRIPTION: Protocol buffer definition for MsgUpdateGroupPolicyDecisionPolicy which updates a group policy's decision policy.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/group/README.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/tree/release/v0.50.x/proto/cosmos/group/v1/tx.proto#L226-L241\n```\n\n----------------------------------------\n\nTITLE: Implementing Evidence Interface in Go for Cosmos SDK\nDESCRIPTION: Definition of the Evidence interface contract that must be implemented by any concrete evidence type. It includes methods for routing, validation, and retrieving information about the evidence.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/evidence/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// Evidence defines the contract which concrete evidence types of misbehavior\n// must implement.\ntype Evidence interface {\n\tproto.Message\n\n\tRoute() string\n\tString() string\n\tHash() []byte\n\tValidateBasic() error\n\n\t// Height at which the infraction occurred\n\tGetHeight() int64\n}\n\n// ValidatorEvidence extends Evidence interface to define contract\n// for evidence against malicious validators\ntype ValidatorEvidence interface {\n\tEvidence\n\n\t// The consensus address of the malicious validator at time of infraction\n\tGetConsensusAddress() sdk.ConsAddress\n\n\t// The total power of the malicious validator at time of infraction\n\tGetValidatorPower() int64\n\n\t// The total validator set power at time of infraction\n\tGetTotalPower() int64\n}\n```\n\n----------------------------------------\n\nTITLE: Example Output of Governance Parameters Query with gRPC v1beta1 in Cosmos SDK\nDESCRIPTION: The JSON response structure when querying governance parameters using the v1beta1 gRPC endpoint, showing voting period, deposit parameters and tally parameters.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/README.md#2025-04-22_snippet_50\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"votingParams\": {\n    \"votingPeriod\": \"172800s\"\n  },\n  \"depositParams\": {\n    \"maxDepositPeriod\": \"0s\"\n  },\n  \"tallyParams\": {\n    \"quorum\": \"MA==\",\n    \"threshold\": \"MA==\",\n    \"vetoThreshold\": \"MA==\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting ProtocolPool in EndBlockers for DI Configuration\nDESCRIPTION: Configures EndBlockers order for ProtocolPool module in the dependency injection system.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/UPGRADE_GUIDE.md#2025-04-22_snippet_17\n\nLANGUAGE: go\nCODE:\n```\nEndBlockers: []string{\n    // ...\n    // order for protocolpool does not matter.\n    protocolpooltypes.ModuleName,\n},\n```\n\n----------------------------------------\n\nTITLE: Querying All Validators Signing Info with gRPC\nDESCRIPTION: Uses gRPC to query signing information of all validators, returning an array of signing info objects with pagination details.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/slashing/README.md#2025-04-22_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\ncosmos.slashing.v1beta1.Query/SigningInfos\n```\n\nLANGUAGE: shell\nCODE:\n```\ngrpcurl -plaintext localhost:9090 cosmos.slashing.v1beta1.Query/SigningInfos\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"info\": [\n    {\n      \"address\": \"cosmosvalcons1nrqslkwd3pz096lh6t082frdqc84uwxn0t958c\",\n      \"indexOffset\": \"2467\",\n      \"jailedUntil\": \"1970-01-01T00:00:00Z\"\n    }\n  ],\n  \"pagination\": {\n    \"total\": \"1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Epochs Keeper for DI Wiring\nDESCRIPTION: Imports the Epochs keeper for dependency injection setup.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/UPGRADE_GUIDE.md#2025-04-22_snippet_29\n\nLANGUAGE: go\nCODE:\n```\nepochskeeper \"github.com/cosmos/cosmos-sdk/x/epochs/keeper\"\n```\n\n----------------------------------------\n\nTITLE: All Fee Allowances Query Output via gRPC (JSON)\nDESCRIPTION: Example JSON output of querying all fee allowances for a grantee using the gRPC Allowances endpoint in the Cosmos SDK.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/feegrant/README.md#2025-04-22_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"allowances\": [\n    {\n      \"granter\": \"cosmos1..\",\n      \"grantee\": \"cosmos1..\",\n      \"allowance\": {\"@type\":\"/cosmos.feegrant.v1beta1.BasicAllowance\",\"spendLimit\":[{\"denom\":\"stake\",\"amount\":\"100\"}]}\n    }\n  ],\n  \"pagination\": {\n    \"total\": \"1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Protobuf Message for Vote and WeightedVoteOption\nDESCRIPTION: Protobuf definition for vote-related messages including enums for vote options, weighted vote options, and the main Vote message structure with fields for proposal ID, voter address, and weighted voting options.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-050-sign-mode-textual-annex1.md#2025-04-22_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nenum VoteOption {\n  VOTE_OPTION_UNSPECIFIED = 0;\n  VOTE_OPTION_YES = 1;\n  VOTE_OPTION_ABSTAIN = 2;\n  VOTE_OPTION_NO = 3;\n  VOTE_OPTION_NO_WITH_VETO = 4;\n}\n\nmessage WeightedVoteOption {\n  VoteOption option = 1;\n  string     weight = 2 [(cosmos_proto.scalar) = \"cosmos.Dec\"];\n}\n\nmessage Vote {\n  uint64 proposal_id = 1;\n  string voter       = 2 [(cosmos_proto.scalar) = \"cosmos.AddressString\"];\n  reserved 3;\n  repeated WeightedVoteOption options = 4;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Protobuf Message for Public Key Schema Type\nDESCRIPTION: Provides an example Protobuf message definition (`PubKey`) within the `cosmos.crypto.sr25519` package. This illustrates how unique fully qualified Protobuf message names (like `cosmos.crypto.sr25519.PubKey`) are used as the `typ` parameter in the address hashing function to ensure uniqueness for different account types.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-028-public-key-addresses.md#2025-04-22_snippet_12\n\nLANGUAGE: protobuf\nCODE:\n```\npackage cosmos.crypto.sr25519;\n\nmessage PubKey {\n\tbytes key = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Artifact Message Definition - Protobuf\nDESCRIPTION: Defines the structure for downloadable artifacts including platform targeting, URL location, and checksum verification details.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-047-extend-upgrade-plan.md#2025-04-22_snippet_2\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage Artifact {\n  string platform      = 1;\n  string url           = 2;\n  string checksum      = 3;\n  string checksum_algo = 4;\n}\n```\n\n----------------------------------------\n\nTITLE: ABCI Communication Flow Diagram\nDESCRIPTION: ASCII diagram depicting the communication flow between the Application and CometBFT through the ABCI interface.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/intro/02-sdk-app-architecture.md#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n              +---------------------+\n              |                     |\n              |     Application     |\n              |                     |\n              +--------+---+--------+\n                       ^   |\n                       |   | ABCI\n                       |   v\n              +--------+---+--------+\n              |                     |\n              |                     |\n              |       CometBFT      |\n              |                     |\n              |                     |\n              +---------------------+\n```\n\n----------------------------------------\n\nTITLE: IndexIterator Structure Definition\nDESCRIPTION: Specialized iterator for handling index operations and row ID extraction.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/group/internal/orm/README.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nreference\nhttps://github.com/cosmos/cosmos-sdk/tree/release/v0.50.x/x/group/internal/orm/index.go#L233-L239\n```\n\n----------------------------------------\n\nTITLE: Keeper Constructor with Send Restriction - Go\nDESCRIPTION: Shows how to initialize a keeper and add send restrictions to the bank keeper.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/bank/README.md#2025-04-22_snippet_7\n\nLANGUAGE: golang\nCODE:\n```\nfunc NewKeeper(cdc codec.BinaryCodec, storeKey storetypes.StoreKey, bankKeeper mymodule.BankKeeper) Keeper {\n\trv := Keeper{/*...*/}\n\tbankKeeper.AppendSendRestriction(rv.SendRestrictionFn)\n\treturn rv\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Auth as a PreBlocker in Module Manager\nDESCRIPTION: Required change to set the x/auth module's PreBlocker in the module manager's SetOrderPreBlockers method.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/UPGRADE_GUIDE.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\napp.ModuleManager.SetOrderPreBlockers(\n    upgradetypes.ModuleName,\n    authtypes.ModuleName, // NEW\n)\n```\n\n----------------------------------------\n\nTITLE: Index Interface Definition\nDESCRIPTION: Interface definition for basic index operations and management.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/group/internal/orm/README.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nreference\nhttps://github.com/cosmos/cosmos-sdk/tree/release/v0.50.x/x/group/internal/orm/index.go#L15-L20\n```\n\n----------------------------------------\n\nTITLE: Defining Plugin Interface and Handshake in Go\nDESCRIPTION: Core plugin interface definition including handshake configuration and GRPC server/client setup for ABCI listener plugins.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-038-state-listening.md#2025-04-22_snippet_14\n\nLANGUAGE: go\nCODE:\n```\n// Handshake is a common handshake that is shared by streaming and host.\n// This prevents users from executing bad plugins or executing a plugin\n// directory. It is a UX feature, not a security feature.\nvar Handshake = plugin.HandshakeConfig{\n    ProtocolVersion:  1,\n    MagicCookieKey:   \"ABCI_LISTENER_PLUGIN\",\n    MagicCookieValue: \"ef78114d-7bdf-411c-868f-347c99a78345\",\n}\n\n// ListenerPlugin is the base struc for all kinds of go-plugin implementations\n// It will be included in interfaces of different Plugins\ntype ABCIListenerPlugin struct {\n    // GRPCPlugin must still implement the Plugin interface\n    plugin.Plugin\n    // Concrete implementation, written in Go. This is only used for plugins\n    // that are written in Go.\n    Impl baseapp.ABCIListener\n}\n\nfunc (p *ListenerGRPCPlugin) GRPCServer(_ *plugin.GRPCBroker, s *grpc.Server) error {\n    RegisterABCIListenerServiceServer(s, &GRPCServer{Impl: p.Impl})\n    return nil\n}\n\nfunc (p *ListenerGRPCPlugin) GRPCClient(\n    _ context.Context,\n    _ *plugin.GRPCBroker,\n    c *grpc.ClientConn,\n) (interface{}, error) {\n    return &GRPCClient{client: NewABCIListenerServiceClient(c)}, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Validator Delegations using REST API in Cosmos SDK\nDESCRIPTION: This endpoint retrieves information about all delegations for a specific validator. It returns details about each delegation, including delegator address, shares, and balance.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/staking/README.md#2025-04-22_snippet_65\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \"http://localhost:1317/cosmos/staking/v1beta1/validators/cosmosvaloper16msryt3fqlxtvsy8u5ay7wv2p8mglfg9g70e3q/delegations\" -H  \"accept: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Querying Staking Module CLI Help\nDESCRIPTION: Command to display help information for the staking module query commands in the Cosmos SDK CLI.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/staking/README.md#2025-04-22_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nsimd query staking --help\n```\n\n----------------------------------------\n\nTITLE: Defining Buf Package and Linting for Protobuf - Go Reference\nDESCRIPTION: This Go reference directs to proto/buf.yaml, which sets the Buf package name, linter, and breaking change checker. It dictates how Buf checks and creates the API, and lints proto files as per configured rules. Dependencies are Buf CLI and any listed linters; the file impacts both local and CI validation of proto definitions.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/tooling/00-protobuf.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/main/proto/buf.yaml#L1-L24\n```\n\n----------------------------------------\n\nTITLE: Extension Options for Tiered Transactions in Protobuf\nDESCRIPTION: Protobuf message definition for transaction extension options to specify the tier of service.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-048-consensus-fees.md#2025-04-22_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage ExtensionOptionsTieredTx {\n  uint32 fee_tier = 1\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Querying a Vote with gRPC v1 in Cosmos SDK\nDESCRIPTION: A practical example showing how to use grpcurl to query a specific voter's vote on proposal ID 1 using the v1 gRPC endpoint.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/README.md#2025-04-22_snippet_40\n\nLANGUAGE: bash\nCODE:\n```\ngrpcurl -plaintext \\\n    -d '{\"proposal_id\":\"1\",\"voter\":\"cosmos1..\"}' \\\n    localhost:9090 \\\n    cosmos.gov.v1.Query/Vote\n```\n\n----------------------------------------\n\nTITLE: Configuring VSCode Protobuf Path Settings in JSON\nDESCRIPTION: JSON configuration for VSCode settings that sets up the protobuf path correctly for development in the Cosmos SDK. This helps imports to properly compile in the IDE by specifying the proto file location.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"protoc\": {\n        \"options\": [\n        \"--proto_path=${workspaceRoot}/proto\",\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CacheKVStore Interface in Go\nDESCRIPTION: An example of pseudocode for defining a struct in Golang, demonstrating how to format struct definitions in SDK standard documents. This example shows a simple cache key-value store interface with map, parent store, and deleted key fields.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/spec/SPEC_STANDARD.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype CacheKVStore interface {\n  cache: map[Key]Value\n  parent: KVStore\n  deleted: Key\n}\n```\n\n----------------------------------------\n\nTITLE: Canceling Software Upgrade\nDESCRIPTION: Command to cancel a previously submitted upgrade proposal.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/upgrade/README.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsimd tx upgrade cancel-software-upgrade --title=\"Test Proposal\" --summary=\"testing\" --deposit=\"100000000stake\" --from cosmos1..\n```\n\n----------------------------------------\n\nTITLE: CLI Transaction Commands for x/authz Module\nDESCRIPTION: Example of using the command line interface to execute a transaction on behalf of another account. This demonstrates how a grantee can use their authorization to perform actions for the granter.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/authz/README.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nsimd tx authz exec tx.json --from=cosmos1..\n```\n\n----------------------------------------\n\nTITLE: Adding ProtocolPool Keeper for DI Wiring\nDESCRIPTION: Imports the ProtocolPool keeper for dependency injection setup.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/UPGRADE_GUIDE.md#2025-04-22_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nprotocolpoolkeeper \"github.com/cosmos/cosmos-sdk/x/protocolpool/keeper\"\n```\n\n----------------------------------------\n\nTITLE: Defining Electionator Interface for Specialization Group Elections in Go\nDESCRIPTION: This code snippet defines the Electionator interface, which abstracts various election mechanisms for specialization groups. It includes methods for voting, accepting elections, managing revokers, and querying election results.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-007-specialization-groups.md#2025-04-22_snippet_0\n\nLANGUAGE: golang\nCODE:\n```\n// The Electionator abstraction covers the concept space for\n// a wide variety of election kinds.  \ntype Electionator interface {\n\n    // is the election object accepting votes.\n    Active() bool\n\n    // functionality to execute for when a vote is cast in this election, here\n    // the vote field is anticipated to be marshalled into a vote type used\n    // by an election.\n    //\n    // NOTE There are no explicit ids here. Just votes which pertain specifically\n    // to one electionator. Anyone can create and send a vote to the electionator item\n    // which will presumably attempt to marshal those bytes into a particular struct\n    // and apply the vote information in some arbitrary way. There can be multiple\n    // Electionators within the Cosmos-Hub for multiple specialization groups, votes\n    // would need to be routed to the Electionator upstream of here.\n    Vote(addr sdk.AccAddress, vote []byte)\n\n    // here lies all functionality to authenticate and execute changes for\n    // when a member accepts being elected\n    AcceptElection(sdk.AccAddress)\n\n    // Register a revoker object\n    RegisterRevoker(Revoker)\n\n    // No more revokers may be registered after this function is called\n    SealRevokers()\n\n    // register hooks to call when an election actions occur\n    RegisterHooks(ElectionatorHooks)\n\n    // query for the current winner(s) of this election based on arbitrary\n    // election ruleset\n    QueryElected() []sdk.AccAddress\n\n    // query metadata for an address in the election this\n    // could include for example position that an address\n    // is being elected for within a group\n    //\n    // this metadata may be directly related to\n    // voting information and/or privileges enabled\n    // to members within a group.\n    QueryMetadata(sdk.AccAddress) []byte\n}\n```\n\n----------------------------------------\n\nTITLE: Example Signed MsgSignData JSON Structure\nDESCRIPTION: Example JSON structure showing a signed MsgSignData message including transaction details, fees, signatures and public key information.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-036-arbitrary-signature.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"cosmos-sdk/StdTx\",\n  \"value\": {\n    \"msg\": [\n      {\n        \"type\": \"sign/MsgSignData\",\n        \"value\": {\n          \"signer\": \"cosmos1hftz5ugqmpg9243xeegsqqav62f8hnywsjr4xr\",\n          \"data\": \"cmFuZG9t\"\n        }\n      }\n    ],\n    \"fee\": {\n      \"amount\": [],\n      \"gas\": \"0\"\n    },\n    \"signatures\": [\n      {\n        \"pub_key\": {\n          \"type\": \"tendermint/PubKeySecp256k1\",\n          \"value\": \"AqnDSiRoFmTPfq97xxEb2VkQ/Hm28cPsqsZm9jEVsYK9\"\n        },\n        \"signature\": \"8y8i34qJakkjse9pOD2De+dnlc4KvFgh0wQpes4eydN66D9kv7cmCEouRrkka9tlW9cAkIL52ErB+6ye7X5aEg==\"\n      }\n    ],\n    \"memo\": \"\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Blockchain Node Architecture Diagram\nDESCRIPTION: ASCII diagram showing the layered architecture of a blockchain node with Application, Consensus, and Networking layers.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/intro/02-sdk-app-architecture.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n                ^  +-------------------------------+  ^\n                |  |                               |  |   Built with Cosmos SDK\n                |  |  State-machine = Application  |  |\n                |  |                               |  v\n                |  +-------------------------------+\n                |  |                               |  ^\nBlockchain node |  |           Consensus           |  |\n                |  |                               |  |\n                |  +-------------------------------+  |   CometBFT\n                |  |                               |  |\n                |  |           Networking          |  |\n                |  |                               |  |\n                v  +-------------------------------+  v\n```\n\n----------------------------------------\n\nTITLE: Protobuf Message Reference for Snapshots\nDESCRIPTION: Reference to the Protobuf message structure used for storing snapshot metadata in the database. The message is stored with a composite key of prefix, height, and format in big-endian encoding.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/store/snapshots/README.md#2025-04-22_snippet_3\n\nLANGUAGE: protobuf\nCODE:\n```\ncosmos.base.snapshots.v1beta1.Snapshot\n```\n\n----------------------------------------\n\nTITLE: Referencing app.toml Configuration via GitHub Link - Markdown\nDESCRIPTION: This snippet provides a direct link to the example app.toml configuration file used by the Cosmos SDK, facilitating easy access for users who want to review or reference the default configuration. It is embedded within a code block labeled as 'python reference' for syntax highlighting in the documentation, but the content is a URL, not actual Python code. There are no required dependencies or parameters, and the expected output is users navigating to the configuration file. The primary limitation is that the URL must be reachable for reference.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/advanced/16-config.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```python reference\\nhttps://github.com/cosmos/cosmos-sdk/blob/main/tools/confix/data/v0.47-app.toml \\n```\n```\n\n----------------------------------------\n\nTITLE: Querying Slashing Module Help\nDESCRIPTION: Command to display help information for the slashing module query commands\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/slashing/README.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nsimd query slashing --help\n```\n\n----------------------------------------\n\nTITLE: Invoking Commit Hooks in BaseApp (Go)\nDESCRIPTION: This Go code snippet presents the modified `Commit` method in the `BaseApp` struct. After preparing the commit response (`res`), it iterates through the registered `abciListeners`. For each listener, it retrieves the state changes (`changeSet`) and calls the `ListenCommit` method, passing the context (`ctx`), the commit response (`res`), and the state changes (`changeSet`). Similar to `FinalizeBlock`, the invocation can be asynchronous or synchronous depending on `abciListenersAsync`. Error handling involves logging failures and potentially exiting the node based on `stopNodeOnABCIListenerErr` in synchronous mode.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-038-state-listening.md#2025-04-22_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nfunc (app *BaseApp) Commit() abci.ResponseCommit {\n\n    ...\n\n    res := abci.ResponseCommit{\n        Data:         commitID.Hash,\n        RetainHeight: retainHeight,\n    }\n\n    // call the streaming service hook with the Commit messages\n    for _, abciListener := range app.abciListeners {\n        ctx := app.deliverState.ctx\n        blockHeight := ctx.BlockHeight()\n        changeSet := app.cms.PopStateCache()\n        if app.abciListenersAsync {\n            go func(res abci.ResponseCommit, changeSet []store.StoreKVPair) {\n                if err := app.abciListener.ListenCommit(ctx, res, changeSet); err != nil {\n                    app.logger.Error(\"ListenCommit listening hook failed\", \"height\", blockHeight, \"err\", err)\n                }\n            }(res, changeSet)\n        } else {\n            if err := app.abciListener.ListenCommit(ctx, res, changeSet); err != nil {\n                app.logger.Error(\"ListenCommit listening hook failed\", \"height\", blockHeight, \"err\", err)\n                if app.stopNodeOnABCIListenerErr {\n                    os.Exit(1)\n                }\n            }\n        }\n    }\n\n    ...\n\n    return res\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Validator Unbonding Delegations using REST API in Cosmos SDK\nDESCRIPTION: This endpoint retrieves all unbonding delegations for a specific validator. It returns details about each unbonding delegation, including delegator address, entries, and balances.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/staking/README.md#2025-04-22_snippet_68\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \\\n\"http://localhost:1317/cosmos/staking/v1beta1/validators/cosmosvaloper13v4spsah85ps4vtrw07vzea37gq5la5gktlkeu/unbonding_delegations\" \\\n-H  \"accept: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Querying DelegatorUnbondingDelegations in Cosmos SDK\nDESCRIPTION: The DelegatorUnbondingDelegations endpoint retrieves all unbonding delegations initiated by a specific delegator. It requires the delegator address and returns details about each unbonding process including validator addresses, creation heights, completion times, and balances.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/staking/README.md#2025-04-22_snippet_48\n\nLANGUAGE: bash\nCODE:\n```\ncosmos.staking.v1beta1.Query/DelegatorUnbondingDelegations\n```\n\nLANGUAGE: bash\nCODE:\n```\ngrpcurl -plaintext \\\n-d '{\"delegator_addr\": \"cosmos1y8nyfvmqh50p6ldpzljk3yrglppdv3t8phju77\"}' \\\nlocalhost:9090 cosmos.staking.v1beta1.Query/DelegatorUnbondingDelegations\n```\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"unbonding_responses\": [\n    {\n      \"delegator_address\": \"cosmos1y8nyfvmqh50p6ldpzljk3yrglppdv3t8phju77\",\n      \"validator_address\": \"cosmosvaloper1sjllsnramtg3ewxqwwrwjxfgc4n4ef9uxyejze\",\n      \"entries\": [\n        {\n          \"creation_height\": \"136984\",\n          \"completion_time\": \"2021-11-08T05:38:47.505593891Z\",\n          \"initial_balance\": \"400000000\",\n          \"balance\": \"400000000\"\n        },\n        {\n          \"creation_height\": \"137005\",\n          \"completion_time\": \"2021-11-08T05:40:53.526196312Z\",\n          \"initial_balance\": \"385000000\",\n          \"balance\": \"385000000\"\n        }\n      ]\n    }\n  ],\n  \"pagination\": {\n    \"next_key\": null,\n    \"total\": \"1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: API server configuration in app.toml\nDESCRIPTION: Configuration setting for enabling the API server in the app.toml configuration file. When set to true, the REST API server will be activated.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/user/run-node/02-interact-node.md#2025-04-22_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\n# Enable defines if the API server should be enabled.\nenable = true\n```\n\n----------------------------------------\n\nTITLE: Running Multiple Password Prompts with File Backend\nDESCRIPTION: When using the 'file' backend, which may request a password multiple times in a single command, this script shows how to handle password prompts in bash scripts by passing environment variables.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/user/run-node/00-keyring.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# assuming that KEYPASSWD is set in the environment\n$ gaiacli config keyring-backend file                             # use file backend\n$ (echo $KEYPASSWD; echo $KEYPASSWD) | gaiacli keys add me        # multiple prompts\n$ echo $KEYPASSWD | gaiacli keys show me                          # single prompt\n```\n\n----------------------------------------\n\nTITLE: Invoking Protoc Generation Script - Shell Reference\nDESCRIPTION: This shell reference identifies the script used by the Cosmos SDK to generate protobuf files via protoc. The script, located in the 'scripts/' directory, embodies the process of compiling .proto definitions—typically invoked during the project's build or CI workflows. Requirements include shell environment, permissions to execute, and access to necessary tools and dependencies specified within the script.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/tooling/00-protobuf.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/scripts/protocgen.sh\n```\n\n----------------------------------------\n\nTITLE: Configuring Minimum Gas Prices in app.toml\nDESCRIPTION: Example configuration for the minimum-gas-prices field in the app.toml file, which defines the minimum gas prices a validator node will accept for processing transactions.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/user/run-node/01-run-node.md#2025-04-22_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n # The minimum gas prices a validator is willing to accept for processing a\n # transaction. A transaction's fees must meet the minimum of any denomination\n # specified in this config (e.g. 0.25token1;0.0001token2).\n minimum-gas-prices = \"0stake\"\n```\n\n----------------------------------------\n\nTITLE: Querying Historical State with Go gRPC Client\nDESCRIPTION: Shows how to query for historical state data by adding block height metadata to the gRPC request in a Go program.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/user/run-node/02-interact-node.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/metadata\"\n\n\t\"github.com/cosmos/cosmos-sdk/codec\"\n\tsdk \"github.com/cosmos/cosmos-sdk/types\"\n\tgrpctypes \"github.com/cosmos/cosmos-sdk/types/grpc\"\n\tbanktypes \"github.com/cosmos/cosmos-sdk/x/bank/types\"\n)\n\nfunc queryState() error {\n\tmyAddress, err := sdk.AccAddressFromBech32(\"cosmos1yerherx4d43gj5wa3zl5vflj9d4pln42n7kuzu\") // the my_validator or recipient address.\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Create a connection to the gRPC server.\n\tgrpcConn, err := grpc.Dial(\n\t\t\"127.0.0.1:9090\",    // your gRPC server address.\n\t\tgrpc.WithInsecure(), // The Cosmos SDK doesn't support any transport security mechanism.\n\t\t// This instantiates a general gRPC codec which handles proto bytes. We pass in a nil interface registry\n\t\t// if the request/response types contain interface instead of 'nil' you should pass the application specific codec.\n\t\tgrpc.WithDefaultCallOptions(grpc.ForceCodec(codec.NewProtoCodec(nil).GRPCCodec())),\n\t)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer grpcConn.Close()\n\n\t// This creates a gRPC client to query the x/bank service.\n\tbankClient := banktypes.NewQueryClient(grpcConn)\n\n\tvar header metadata.MD\n\t_, err = bankClient.Balance(\n\t\tmetadata.AppendToOutgoingContext(context.Background(), grpctypes.GRPCBlockHeightHeader, \"12\"), // Add metadata to request\n\t\t&banktypes.QueryBalanceRequest{Address: myAddress.String(), Denom: \"stake\"},\n\t\tgrpc.Header(&header), // Retrieve header from response\n\t)\n\tif err != nil {\n\t\treturn err\n\t}\n\tblockHeight := header.Get(grpctypes.GRPCBlockHeightHeader)\n\n\tfmt.Println(blockHeight) // Prints the block height (12)\n\n\treturn nil\n}\n\nfunc main() {\n    if err := queryState(); err != nil {\n        panic(err)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Skipping a Command in AutoCLI with Go\nDESCRIPTION: This snippet demonstrates how to manually skip a command in AutoCLI using the autocliv1.RpcCommandOptions struct. It sets the RpcMethod to 'Params' and Skip to true.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/client/v2/README.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n*autocliv1.RpcCommandOptions{\n  RpcMethod: \"Params\", // The name of the gRPC service\n  Skip: true,\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting Secp256k1 Package Source and License in Markdown\nDESCRIPTION: This markdown snippet provides information about the source of the secp256k1 package, its license, and the reasoning behind including it directly in the Cosmos SDK rather than depending on go-ethereum.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/crypto/keys/secp256k1/internal/secp256k1/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# secp256k1\n\n This package is copied from https://github.com/ethereum/go-ethereum/tree/8fddf27a989e246659fd018ea9be37b2b4f55326/crypto/secp256k1\n\n Unlike the rest of go-ethereum it is [3-clause BSD](https://opensource.org/licenses/BSD-3-Clause) licensed so compatible with our Apache2.0 license. We opt to copy in here rather than depend on go-ethereum to avoid issues with vendoring of the GPL parts of that repository by downstream.\n```\n\n----------------------------------------\n\nTITLE: Querying Transactions by Account Sequence in CLI\nDESCRIPTION: This CLI command allows querying a transaction from an account given its sequence using the --type=acc_seq flag.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/auth/tx/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nsimd query tx --type=acc_seq cosmos1u69uyr6v9qwe6zaaeaqly2h6wnedac0xpxq325/1\n```\n\n----------------------------------------\n\nTITLE: Importing ProtocolPool Module for DI Configuration\nDESCRIPTION: Imports required packages for ProtocolPool module configuration in the dependency injection system.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/UPGRADE_GUIDE.md#2025-04-22_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    protocolpoolmodulev1 \"cosmossdk.io/api/cosmos/protocolpool/module/v1\"\n    \n    _ \"github.com/cosmos/cosmos-sdk/x/protocolpool\" // import for side-effects\n    protocolpooltypes \"github.com/cosmos/cosmos-sdk/x/protocolpool/types\"\n)\n```\n\n----------------------------------------\n\nTITLE: Referencing Event Emission Methods - Go - go\nDESCRIPTION: This Go code reference indicates the location of the main methods (`EmitTypedEvent`, `EmitEvent`) used for emitting events within the EventManager. It guides developers to the part of the Cosmos SDK Go codebase responsible for event emission logic, assisting in understanding or overriding default event emission behaviors. This is a documentation-oriented link rather than a code snippet for direct use.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/advanced/08-events.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/types/events.go#L53-L62\n```\n\n----------------------------------------\n\nTITLE: GRPC Client and Server Implementation in Go\nDESCRIPTION: Implementation of the GRPC client and server components for the ABCI listener service.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-038-state-listening.md#2025-04-22_snippet_16\n\nLANGUAGE: go\nCODE:\n```\nvar (\n    _ baseapp.ABCIListener = (*GRPCClient)(nil)\n)\n\n// GRPCClient is an implementation of the ABCIListener and ABCIListenerPlugin interfaces that talks over RPC.\ntype GRPCClient struct {\n    client ABCIListenerServiceClient\n}\n\nfunc (m *GRPCClient) ListenFinalizeBlock(goCtx context.Context, req abci.RequestFinalizeBlock, res abci.ResponseFinalizeBlock) error {\n    ctx := sdk.UnwrapSDKContext(goCtx)\n    _, err := m.client.ListenDeliverTx(ctx, &ListenDeliverTxRequest{BlockHeight: ctx.BlockHeight(), Req: req, Res: res})\n    return err\n}\n\nfunc (m *GRPCClient) ListenCommit(goCtx context.Context, res abci.ResponseCommit, changeSet []store.StoreKVPair) error {\n    ctx := sdk.UnwrapSDKContext(goCtx)\n    _, err := m.client.ListenCommit(ctx, &ListenCommitRequest{BlockHeight: ctx.BlockHeight(), Res: res, ChangeSet: changeSet})\n    return err\n}\n\n// GRPCServer is the gRPC server that GRPCClient talks to.\ntype GRPCServer struct {\n    // This is the real implementation\n    Impl baseapp.ABCIListener\n}\n\nfunc (m *GRPCServer) ListenFinalizeBlock(ctx context.Context, req *ListenFinalizeBlockRequest) (*Empty, error) {\n    return &Empty{}, m.Impl.ListenFinalizeBlock(ctx, req.Req, req.Res)\n}\n\nfunc (m *GRPCServer) ListenCommit(ctx context.Context, req *ListenCommitRequest) (*Empty, error) {\n    return &Empty{}, m.Impl.ListenCommit(ctx, req.Res, req.ChangeSet)\n}\n```\n\n----------------------------------------\n\nTITLE: Example Response from v1beta1 Params Query\nDESCRIPTION: The JSON response structure when querying governance parameters using the v1beta1 endpoint. It includes voting, deposit, and tally parameters.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/README.md#2025-04-22_snippet_68\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"voting_params\": {\n    \"voting_period\": \"172800s\"\n  },\n  \"deposit_params\": {\n    \"min_deposit\": [\n    ],\n    \"max_deposit_period\": \"0s\"\n  },\n  \"tally_params\": {\n    \"quorum\": \"0.000000000000000000\",\n    \"threshold\": \"0.000000000000000000\",\n    \"veto_threshold\": \"0.000000000000000000\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example ATOM Token Metadata JSON Configuration\nDESCRIPTION: JSON example showing how the metadata for ATOM tokens would be structured, including various denominations (uatom, matom, atom) with their respective exponents and aliases.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-024-coin-metadata.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"atom\",\n  \"description\": \"The native staking token of the Cosmos Hub.\",\n  \"denom_units\": [\n    {\n      \"denom\": \"uatom\",\n      \"exponent\": 0,\n      \"aliases\": [\n        \"microatom\"\n      ],\n    },\n    {\n      \"denom\": \"matom\",\n      \"exponent\": 3,\n      \"aliases\": [\n        \"milliatom\"\n      ]\n    },\n    {\n      \"denom\": \"atom\",\n      \"exponent\": 6,\n    }\n  ],\n  \"base\": \"uatom\",\n  \"display\": \"atom\",\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Memo Validation AnteHandler in Go for Cosmos SDK\nDESCRIPTION: Defines a ValidateMemo function as an AnteHandler micro-function to validate the transaction memo.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-010-modular-antehandler.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc ValidateMemo(ctx Context, tx Tx, simulate bool) (newCtx Context, err error) {\n    // validate memo\n}\n```\n\n----------------------------------------\n\nTITLE: CBOR Serialization CDDL for SignDocTextual - Cosmos SDK - CDDL\nDESCRIPTION: This CDDL code defines the canonical CBOR serialization format for SIGN_MODE_TEXTUAL structured data, specifying key-value mappings and allowed fields for screen arrays and their structure. Dependencies include familiarity with CDDL and CBOR (RFC 8949) and deterministic encoding rules for predictable hashes. Each 'screen' is a map of integer-keyed fields (title, content, indent, expert), and the outer document is a map with key 1 holding the array. All fields are optional and omitted if default/empty, ensuring minimal encoding, and field keys are small for space efficiency. Inputs are structured sign docs as described, and output is a deterministic CBOR byte array. Limitations include that unknown or additional fields are not permitted unless the spec is extended.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-050-sign-mode-textual.md#2025-04-22_snippet_1\n\nLANGUAGE: cddl\nCODE:\n```\n;;; CDDL (RFC 8610) Specification of SignDoc for SIGN_MODE_TEXTUAL.\n;;; Must be encoded using CBOR deterministic encoding (RFC 8949, section 4.2.1).\n\n;; A Textual document is a struct containing one field: an array of screens.\nsign_doc = {\n  screens_key: [* screen],\n}\n\n;; The key is an integer to keep the encoding small.\nscreens_key = 1\n\n;; A screen consists of a text string, an indentation, and the expert flag,\n;; represented as an integer-keyed map. All entries are optional\n;; and MUST be omitted from the encoding if empty, zero, or false.\n;; Text defaults to the empty string, indent defaults to zero,\n;; and expert defaults to false.\nscreen = {\n  ? title_key: tstr,\n  ? content_key: tstr,\n  ? indent_key: uint,\n  ? expert_key: bool,\n}\n\n;; Keys are small integers to keep the encoding small.\ntitle_key = 1\ncontent_key = 2\nindent_key = 3\nexpert_key = 4\n\n```\n\n----------------------------------------\n\nTITLE: Adding 'Since' Comment for New Protobuf Fields\nDESCRIPTION: When adding new Protobuf definitions, a comment must be included to indicate the Cosmos SDK version from which the field is available. This helps client libraries manage compatibility across different node versions.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-044-protobuf-updates-guidelines.md#2025-04-22_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\n// Since: cosmos-sdk <version>{, <version>...}\n```\n\n----------------------------------------\n\nTITLE: Defining StoreKVPair protobuf message for state changes\nDESCRIPTION: Protobuf message definition for StoreKVPair which represents a key-value pair state change. It includes the store key, operation type (set/delete), and the key-value data.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-038-state-listening.md#2025-04-22_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage StoreKVPair {\n  optional string store_key = 1; // the store key for the KVStore this pair originates from\n  required bool set = 2; // true indicates a set operation, false indicates a delete operation\n  required bytes key = 3;\n  required bytes value = 4;\n}\n```\n\n----------------------------------------\n\nTITLE: Example Request for Querying Votes with v1beta1\nDESCRIPTION: An example curl command that demonstrates how to query votes for proposal ID 1 using the v1beta1 endpoint.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/README.md#2025-04-22_snippet_61\n\nLANGUAGE: bash\nCODE:\n```\ncurl localhost:1317/cosmos/gov/v1beta1/proposals/1/votes\n```\n\n----------------------------------------\n\nTITLE: Example Response from v1 Params Query\nDESCRIPTION: The JSON response structure when querying governance parameters using the v1 endpoint. It includes the same parameters as v1beta1.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/README.md#2025-04-22_snippet_71\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"voting_params\": {\n    \"voting_period\": \"172800s\"\n  },\n  \"deposit_params\": {\n    \"min_deposit\": [\n    ],\n    \"max_deposit_period\": \"0s\"\n  },\n  \"tally_params\": {\n    \"quorum\": \"0.000000000000000000\",\n    \"threshold\": \"0.000000000000000000\",\n    \"veto_threshold\": \"0.000000000000000000\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Linking to SDK Message Interface\nDESCRIPTION: Reference to the sdk.Msg interface in the Cosmos SDK codebase that is proposed for deprecation.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/rfc/rfc-001-tx-validation.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nsdk.Msg (https://github.com/cosmos/cosmos-sdk/blob/16a5404f8e00ddcf8857c8a55dca2f7c109c29bc/types/tx_msg.go#L16)\n```\n\n----------------------------------------\n\nTITLE: Setting ProtocolPool in ExportGenesis for DI Configuration\nDESCRIPTION: Configures ExportGenesis order for ProtocolPool module in the dependency injection system.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/UPGRADE_GUIDE.md#2025-04-22_snippet_19\n\nLANGUAGE: go\nCODE:\n```\nExportGenesis: []string{\n    // ...\n    // Must be exported before x/bank.\n    protocolpooltypes.ModuleName, \n    banktypes.ModuleName,\n},\n```\n\n----------------------------------------\n\nTITLE: Example Go Application Constructor Function Reference (simapp)\nDESCRIPTION: Provides a reference URL to the Go code in the `simapp` repository showing an example implementation of a Cosmos SDK application constructor function. This function handles instantiating codecs, keepers, the module manager, registering services and routes, setting ABCI handlers, and mounting stores.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/beginner/00-app-anatomy.md#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.53.0-rc.2/simapp/app.go#L190-L708\n```\n\n----------------------------------------\n\nTITLE: Adding Epochs Store Key\nDESCRIPTION: Adds the store key for the Epochs module to the list of key-value store keys.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/UPGRADE_GUIDE.md#2025-04-22_snippet_23\n\nLANGUAGE: go\nCODE:\n```\nkeys := storetypes.NewKVStoreKeys(\n    // ...\n    epochstypes.StoreKey,\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Unordered Transactions Options in Cosmos SDK\nDESCRIPTION: Configuration for enabling unordered transactions in the Cosmos SDK by setting the UnorderedNonceManager and optional parameters like gas cost and timeout duration in the ante.HandlerOptions.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/UPGRADING.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\noptions := ante.HandlerOptions{\n    UnorderedNonceManager: app.AccountKeeper,\n\t// The following options are set by default.\n\t// If you do not want to change these, you may remove the UnorderedTxOptions field entirely.\n    UnorderedTxOptions: []ante.UnorderedTxDecoratorOptions{\n        ante.WithUnorderedTxGasCost(2240),\n        ante.WithTimeoutDuration(10 * time.Minute),\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Organizing Cosmos SDK Documentation Folder Structure\nDESCRIPTION: This snippet presents the proposed folder structure for organizing Cosmos SDK documentation. It divides documentation into logical sections including README, intro, concepts, clients, modules, spec, translations, and architecture, creating a clear separation of content types.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-002-docs-structure.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ndocs/\n├── README\n├── intro/\n├── concepts/\n│   ├── baseapp\n│   ├── types\n│   ├── store\n│   ├── server\n│   ├── modules/\n│   │   ├── keeper\n│   │   ├── handler\n│   │   ├── cli\n│   ├── gas\n│   └── commands\n├── clients/\n│   ├── lite/\n│   ├── service-providers\n├── modules/\n├── spec/\n├── translations/\n└── architecture/\n```\n\n----------------------------------------\n\nTITLE: Setting Auth Module PreBlocker in Module Manager\nDESCRIPTION: Required app wiring change to set the auth module as a PreBlocker in the module manager's order. This is necessary for v0.53.x compatibility.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/UPGRADING.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\napp.ModuleManager.SetOrderPreBlockers(\n    upgradetypes.ModuleName,\n    authtypes.ModuleName, // NEW\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Parameter Management in a Module Keeper with Subspace in Go\nDESCRIPTION: Example showing how to set up parameter space in a module's keeper. This demonstrates creating an ExampleKeeper struct with a paramSpace field of type Subspace, and implementing a SetParams method that uses the paramSpace to store parameters.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/params/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype ExampleKeeper struct {\n\tparamSpace paramtypes.Subspace\n}\n\nfunc (k ExampleKeeper) SetParams(ctx sdk.Context, params types.Params) {\n\tk.paramSpace.SetParamSet(ctx, &params)\n}\n```\n\n----------------------------------------\n\nTITLE: Structuring ADR Template in Markdown\nDESCRIPTION: This snippet shows the overall structure of an ADR template using Markdown. It includes sections for changelog, status, abstract, context, alternatives, decision, consequences, further discussions, test cases, and references.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-template.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# ADR {ADR-NUMBER}: {TITLE}\n\n## Changelog\n\n* {date}: {changelog}\n\n## Status\n\n{DRAFT | PROPOSED} Not Implemented\n\n> Please have a look at the [PROCESS](./PROCESS.md#adr-status) page.\n> Use DRAFT if the ADR is in a draft stage (draft PR) or PROPOSED if it's in review.\n\n## Abstract\n\n> \"If you can't explain it simply, you don't understand it well enough.\" Provide\n> a simplified and layman-accessible explanation of the ADR.\n> A short (~200 word) description of the issue being addressed.\n\n## Context\n\n> This section describes the forces at play, including technological, political,\n> social, and project local. These forces are probably in tension, and should be\n> called out as such. The language in this section is value-neutral. It is simply\n> describing facts. It should clearly explain the problem and motivation that the\n> proposal aims to resolve.\n> {context body}\n\n## Alternatives\n\n> This section describes alternative designs to the chosen design. This section\n> is important and if an adr does not have any alternatives then it should be\n> considered that the ADR was not thought through. \n\n## Decision\n\n> This section describes our response to these forces. It is stated in full\n> sentences, with active voice. \"We will ...\"\n> {decision body}\n\n## Consequences\n\n> This section describes the resulting context, after applying the decision. All\n> consequences should be listed here, not just the \"positive\" ones. A particular\n> decision may have positive, negative, and neutral consequences, but all of them\n> affect the team and project in the future.\n\n### Backwards Compatibility\n\n> All ADRs that introduce backwards incompatibilities must include a section\n> describing these incompatibilities and their severity. The ADR must explain\n> how the author proposes to deal with these incompatibilities. ADR submissions\n> without a sufficient backwards compatibility treatise may be rejected outright.\n\n### Positive\n\n> {positive consequences}\n\n### Negative\n\n> {negative consequences}\n\n### Neutral\n\n> {neutral consequences}\n\n## Further Discussions\n\n> While an ADR is in the DRAFT or PROPOSED stage, this section should contain a\n> summary of issues to be solved in future iterations (usually referencing comments\n> from a pull-request discussion).\n> \n> Later, this section can optionally list ideas or improvements the author or\n> reviewers found during the analysis of this ADR.\n\n## Test Cases [optional]\n\nTest cases for an implementation are mandatory for ADRs that are affecting consensus\nchanges. Other ADRs can choose to include links to test cases if applicable.\n\n## References\n\n* {reference link}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Key-Value Mapping Notation in Cosmos SDK Documentation\nDESCRIPTION: Examples of the notation used to describe key-value mappings in module state documentation. The notation uses -> to represent mappings, | to represent byte concatenation, and specifies encoding types where needed.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/spec/SPEC_MODULE.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nkey -> value\n```\n\n----------------------------------------\n\nTITLE: Building File Plugin - Directory Navigation\nDESCRIPTION: Changes directory to the store folder to prepare for plugin build.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/store/streaming/abci/examples/file/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd store\n```\n\n----------------------------------------\n\nTITLE: Example Message JSON Structure\nDESCRIPTION: Example of a valid Cosmos signed message JSON structure with required fields populated.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/spec/_ics/ics-030-signed-messages.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@chain_id\": \"1\",\n  \"@type\": \"message\",\n  \"text\": \"Hello, you can identify me as XYZ on keybase.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Annotating Method and Field Additions in Cosmos SDK\nDESCRIPTION: These annotations indicate when certain methods, fields, or messages became part of the Cosmos SDK, which assists clients in managing versions and compatibility. Examples show how to use `method_added_in` to specify when a method was added. Dependency on correctly setting and tagging versions within documentation is essential.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-modules/05-protobuf-annotations.md#2025-04-22_snippet_3\n\nLANGUAGE: proto\nCODE:\n```\noption (cosmos_proto.method_added_in) = \"cosmos-sdk v0.50.1\";\n```\n\nLANGUAGE: proto\nCODE:\n```\noption (cosmos_proto.method_added_in) = \"x/epochs v1.0.0\";\n```\n\nLANGUAGE: proto\nCODE:\n```\noption (cosmos_proto.method_added_in) = \"simapp v24.0.0\";\n```\n\n----------------------------------------\n\nTITLE: Setting ProtocolPool in ExportGenesis Order\nDESCRIPTION: Sets the execution order of ExportGenesis ensuring ProtocolPool comes before Bank.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/UPGRADE_GUIDE.md#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\napp.ModuleManager.SetOrderInitGenesis(\n    protocolpooltypes.ModuleName, // must be exported before bank.\n    banktypes.ModuleName,\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Auth GenesisState Structure in Go\nDESCRIPTION: Defines the GenesisState structure containing params and accounts for the auth module.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-011-generalize-genesis-accounts.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// GenesisState - all auth state that must be provided at genesis\ntype GenesisState struct {\n    Params   Params           `json:\"params\" yaml:\"params\"`\n    Accounts []GenesisAccount `json:\"accounts\" yaml:\"accounts\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Using Confix Migrate Command\nDESCRIPTION: Examples of using the Confix migrate command to update configuration files to new versions.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/tools/confix/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsimd config migrate v0.50 # migrates defaultHome/config/app.toml to the latest v0.50 config\nsimd config migrate v0.50 --client # migrates defaultHome/config/client.toml to the latest v0.50 config\n```\n\nLANGUAGE: bash\nCODE:\n```\nconfix migrate v0.50 ~/.simapp/config/app.toml # migrate ~/.simapp/config/app.toml to the latest v0.50 config\nconfix migrate v0.50 ~/.simapp/config/client.toml --client # migrate ~/.simapp/config/client.toml to the latest v0.50 config\n```\n\n----------------------------------------\n\nTITLE: Checking Account Balance\nDESCRIPTION: Command to query the balance of an account address in the test network. Replace [address] with the actual account address obtained after importing the key.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/user/run-node/05-run-testnet.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsimd q bank balances [address]\n```\n\n----------------------------------------\n\nTITLE: Implementing VerifyVoteExtension in Cosmos SDK in Go\nDESCRIPTION: This snippet shows the implementation of the VerifyVoteExtension method in the Cosmos SDK. It's currently a no-op, allowing for future verification of vote extension data.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/advanced/00-baseapp.md#2025-04-22_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/baseapp/abci_utils.go#L282-L288\n```\n\n----------------------------------------\n\nTITLE: Updating ViewKeeper Interface in Go\nDESCRIPTION: Updates the ViewKeeper interface to include methods for calculating locked and spendable account balances.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/auth/vesting/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype ViewKeeper interface {\n  // ...\n\n  // Calculates the total locked account balance.\n  LockedCoins(ctx sdk.Context, addr sdk.AccAddress) sdk.Coins\n\n  // Calculates the total spendable balance that can be sent to other accounts.\n  SpendableCoins(ctx sdk.Context, addr sdk.AccAddress) sdk.Coins\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing EventManager Implementation - Go - go\nDESCRIPTION: This code reference points to the section in the Cosmos SDK Go source code where the EventManager is implemented. It is meant as a contextual link for developers to explore the details of event tracking and management in the SDK, rather than providing a functional code example. The snippet is not intended for direct execution but for navigation to relevant implementation details.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/advanced/08-events.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/types/events.go#L19-L26\n```\n\n----------------------------------------\n\nTITLE: Installing TMKMS Dependencies for Remote Signing\nDESCRIPTION: Commands to install the necessary dependencies for TMKMS (Tendermint Key Management System) which provides remote signing capabilities for validator nodes. This includes Rust, build tools, and libusb.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/user/run-node/06-run-production.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update -y && sudo apt install build-essential curl jq -y\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install libusb-1.0-0-dev\n```\n\n----------------------------------------\n\nTITLE: Querying All Validators Signing Info with REST\nDESCRIPTION: Uses REST endpoint to query signing information of all validators, returning an array of detailed signing info objects with pagination details.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/slashing/README.md#2025-04-22_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\n/cosmos/slashing/v1beta1/signing_infos\n```\n\nLANGUAGE: shell\nCODE:\n```\ncurl \"localhost:1317/cosmos/slashing/v1beta1/signing_infos\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"info\": [\n    {\n      \"address\": \"cosmosvalcons1nrqslkwd3pz096lh6t082frdqc84uwxn0t958c\",\n      \"start_height\": \"0\",\n      \"index_offset\": \"4169\",\n      \"jailed_until\": \"1970-01-01T00:00:00Z\",\n      \"tombstoned\": false,\n      \"missed_blocks_counter\": \"0\"\n    }\n  ],\n  \"pagination\": {\n    \"next_key\": null,\n    \"total\": \"1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Module Config Protobuf Message for Auth Module in Cosmos SDK\nDESCRIPTION: Example of creating a module configuration protobuf message for the auth module in Cosmos SDK. It includes the bech32 prefix and module account permissions as configuration parameters.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/depinject/appconfig/README.md#2025-04-22_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\npackage cosmos.auth.module.v1;\n\nimport \"cosmos/app/v1alpha1/module.proto\";\n\nmessage Module {\n  option (cosmos.app.v1alpha1.module) = {\n    go_import: \"github.com/cosmos/cosmos-sdk/x/auth\"\n  };\n  string bech32_prefix = 1;\n  repeated ModuleAccountPermission module_account_permissions = 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Resolving and Using a Handler for Message Validation in Go\nDESCRIPTION: This Go snippet illustrates the handler pattern proposed in Approach A. A `Keeper` method (`DoSomething`) uses a resolver (`k.resolver`) to obtain a specific handler (e.g., `ValidateBasicHandler`) for an incoming message (`MsgDoSomething`). It then invokes the appropriate method on the resolved handler (`ValidateBasic()`) instead of relying on the message type itself implementing the interface. This decouples interface implementations from generated Protobuf types, aiding version management. Dependencies include the `Keeper` type, a resolver mechanism, the specific message type (`MsgDoSomething`), and the handler interface (`ValidateBasicHandler`).\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-054-semver-compatible-modules.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n```go\nfunc (k Keeper) DoSomething(msg MsgDoSomething) error {\n\tvar validateBasicHandler ValidateBasicHandler\n\terr := k.resolver.Resolve(&validateBasic, msg)\n\tif err != nil {\n\t\treturn err\n\t}   \n\t\n\terr = validateBasicHandler.ValidateBasic()\n\t...\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Setting ProtocolPool in InitGenesis for DI Configuration\nDESCRIPTION: Configures InitGenesis order for ProtocolPool module in the dependency injection system.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/UPGRADE_GUIDE.md#2025-04-22_snippet_18\n\nLANGUAGE: go\nCODE:\n```\nInitGenesis: []string{\n    // ... must be AFTER distribution.\n    distrtypes.ModuleName,\n    protocolpooltypes.ModuleName,\n},\n```\n\n----------------------------------------\n\nTITLE: Example of Integration Testing Bar Module with Foo and Runtime Dependencies in Go\nDESCRIPTION: Demonstrates how to use the proposed integration testing infrastructure to test the Bar module with different versions of Foo and Runtime modules.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-054-semver-compatible-modules.md#2025-04-22_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nfunc TestBarIntegration(t *testing.T) {\n    IntegrationTestConfig{\n        ModuleConfig: &barmodulev1.Module{},\n        DependencyMatrix: map[string][]proto.Message{\n            \"runtime\": []proto.Message{ // test against two versions of runtime\n                &runtimev1.Module{},\n                &runtimev2.Module{},\n            },\n            \"foo\": []proto.Message{ // test against three versions of foo\n                &foomodulev1.Module{},\n                &foomodulev2.Module{},\n                &foomodulev3.Module{},\n            }\n        }   \n    }.Run(t, func (t *testing.T, f moduletesting.IntegrationTestFixture) {\n        barMsgClient := barv1.NewMsgClient(f)\n        res, err := barMsgClient.CallFoo(f, &MsgCallFoo{})\n        ...\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: RFC Consensus Status Flow Diagram in Markdown\nDESCRIPTION: Detailed text-based flow diagram showing all possible status transitions for an RFC's consensus status. It maps the complete lifecycle from DRAFT to final states like ACCEPTED, REJECTED, ABANDONED, or SUPERSEDED.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/rfc/PROCESS.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```text\nDRAFT -> PROPOSED -> LAST CALL yyyy-mm-dd -> ACCEPTED | REJECTED -> SUPERSEDED by ADR-xxx\n                  \\        |\n                   \\       |\n                    v      v\n                     ABANDONED\n```\n```\n\n----------------------------------------\n\nTITLE: Basic Bank Module Query Test (Go)\nDESCRIPTION: Initial system test implementation querying bank module's total supply\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/systemtests/GETTING_STARTED.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n//go:build system_test\n\npackage systemtests\n\nimport (\n\t\"testing\"\n)\n\nfunc TestQueryTotalSupply(t *testing.T) {\n\tsut.ResetChain(t)\n\tsut.StartChain(t)\n\n\tcli := NewCLIWrapper(t, sut, verbose)\n\traw := cli.CustomQuery(\"q\", \"bank\", \"total-supply\")\n\tt.Log(\"### got: \" + raw)\n}\n```\n\n----------------------------------------\n\nTITLE: Consuming Gas for Public Key Change Operation\nDESCRIPTION: Go code that charges additional gas fees for public key change operations to compensate for the inability to prune rekeyed accounts automatically. Uses the parameter PubKeyChangeCost from the account keeper.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-034-account-rekeying.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n\tamount := ak.GetParams(ctx).PubKeyChangeCost\n\tctx.GasMeter().ConsumeGas(amount, \"pubkey change fee\")\n```\n\n----------------------------------------\n\nTITLE: Defining RecoveryHandler Type in Go\nDESCRIPTION: Introduces a new RecoveryHandler type for custom panic handling in Cosmos SDK. This function type takes a recovery object and returns an error, allowing for type assertion and specific error handling.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-022-custom-panic-handling.md#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\ntype RecoveryHandler func(recoveryObj interface{}) error\n```\n\n----------------------------------------\n\nTITLE: Defining GenesisState Struct in Go\nDESCRIPTION: Defines the GenesisState struct for representing the initial state of the evidence module.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-009-evidence-module.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\ntype GenesisState struct {\n  Params       Params\n  Infractions  []Evidence\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Upgrade Module via CLI\nDESCRIPTION: Demonstrates how to use the CLI to query the upgrade module's state, including applied upgrades and module versions.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/upgrade/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsimd query upgrade --help\nsimd query upgrade applied \"test-upgrade\"\nsimd query upgrade module_versions\nsimd query upgrade module_versions ibc\n```\n\n----------------------------------------\n\nTITLE: Querying Individual Validator Details in Cosmos SDK\nDESCRIPTION: This command allows users to query details about an individual validator, including commission rates, consensus public key, delegator shares, and other relevant information.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/staking/README.md#2025-04-22_snippet_33\n\nLANGUAGE: bash\nCODE:\n```\nsimd query staking validator [validator-addr] [flags]\n```\n\nLANGUAGE: bash\nCODE:\n```\nsimd query staking validator cosmosvaloper1gghjut3ccd8ay0zduzj64hwre2fxs9ldmqhffj\n```\n\n----------------------------------------\n\nTITLE: Starting Local Documentation Server in Shell\nDESCRIPTION: Shell command to start a local development server for the current version of Cosmos SDK documentation. This runs pre.sh scripts to gather docs and post.sh scripts for cleanup when quitting.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Example Output of Vote Query with gRPC v1beta1 in Cosmos SDK\nDESCRIPTION: The JSON response structure when querying a vote using the v1beta1 gRPC endpoint, showing the voter's choice and weight.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/README.md#2025-04-22_snippet_38\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"vote\": {\n    \"proposalId\": \"1\",\n    \"voter\": \"cosmos1..\",\n    \"option\": \"VOTE_OPTION_YES\",\n    \"options\": [\n      {\n        \"option\": \"VOTE_OPTION_YES\",\n        \"weight\": \"1000000000000000000\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Auth Help in Cosmos SDK\nDESCRIPTION: Displays help information for the auth query commands in Cosmos SDK.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/auth/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsimd query auth --help\n```\n\n----------------------------------------\n\nTITLE: Querying Vote by Proposal and Voter using gRPC\nDESCRIPTION: Shows how to query a specific vote by proposal ID and voter address using gRPC. Returns vote details including choice and submission time.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/group/README.md#2025-04-22_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\ngrpcurl -plaintext \\\n    -d '{\"proposal_id\":\"1\",\"voter\":\"cosmos1..\"}'  localhost:9090 cosmos.group.v1.Query/VoteByProposalVoter\n```\n\n----------------------------------------\n\nTITLE: Example Output of Proposal Query with gRPC v1 in Cosmos SDK\nDESCRIPTION: The JSON response structure when querying a proposal using the v1 gRPC endpoint, showing proposal status, messages, timing, deposits and voting information.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/README.md#2025-04-22_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"proposal\": {\n    \"id\": \"1\",\n    \"messages\": [\n      {\"@type\":\"/cosmos.bank.v1beta1.MsgSend\",\"amount\":[{\"denom\":\"stake\",\"amount\":\"10\"}],\"fromAddress\":\"cosmos1..\",\"toAddress\":\"cosmos1..\"}\n    ],\n    \"status\": \"PROPOSAL_STATUS_VOTING_PERIOD\",\n    \"finalTallyResult\": {\n      \"yesCount\": \"0\",\n      \"abstainCount\": \"0\",\n      \"noCount\": \"0\",\n      \"noWithVetoCount\": \"0\"\n    },\n    \"submitTime\": \"2022-03-28T11:50:20.819676256Z\",\n    \"depositEndTime\": \"2022-03-30T11:50:20.819676256Z\",\n    \"totalDeposit\": [\n      {\n        \"denom\": \"stake\",\n        \"amount\": \"10000000\"\n      }\n    ],\n    \"votingStartTime\": \"2022-03-28T14:25:26.644857113Z\",\n    \"votingEndTime\": \"2022-03-30T14:25:26.644857113Z\",\n    \"metadata\": \"AQ==\",\n    \"title\": \"Test Proposal\",\n    \"summary\": \"testing, testing, 1, 2, 3\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Table - Vulnerability Reporting Scope\nDESCRIPTION: Defines the scope of vulnerability reporting, including supported versions and branches of the repository.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/SECURITY.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Scope                 |\n|-----------------------|\n| last release (tagged) |\n| main branch           |\n```\n\n----------------------------------------\n\nTITLE: Defining a Go Interface with Getters/Setters for Protobuf Types\nDESCRIPTION: This Go code, part of Approach B, defines an interface (`MsgSend`) for a Protobuf message type, exposing only getter and setter methods instead of direct field access. It embeds `proto.Message` and includes methods like `GetFromAddress` and `SetFromAddress`. A corresponding constructor (`NewMsgSend`) returns a concrete implementation (`msgSendImpl`) suggested to use internal memory buffers, potentially enabling zero-copy data transfer and improved version compatibility management, similar to Cap'n Proto or FlatBuffers. Dependencies include `proto.Message` from the Protobuf library and specific types like `v1beta1.Coin`.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-054-semver-compatible-modules.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n```go\ntype MsgSend interface {\n\tproto.Message\n\tGetFromAddress() string\n\tGetToAddress() string\n\tGetAmount() []v1beta1.Coin\n    SetFromAddress(string)\n    SetToAddress(string)\n    SetAmount([]v1beta1.Coin)\n}\n\nfunc NewMsgSend() MsgSend { return &msgSendImpl{memoryBuffers: ...} }\n```\n```\n\n----------------------------------------\n\nTITLE: RFC Status Flow Diagram in Markdown\nDESCRIPTION: Text-based diagram showing the possible status transitions for an RFC document. It illustrates how an RFC progresses from DRAFT through various stages including PROPOSED, LAST CALL, ACCEPTED, REJECTED, or ABANDONED.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/rfc/PROCESS.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```text\n{CONSENSUS STATUS}\n```\n```\n\n----------------------------------------\n\nTITLE: Starting a Local Network in Debug Mode using make in Cosmos SDK\nDESCRIPTION: Command to start a local Cosmos SDK network in debug mode where nodes can be connected to using go-delve debugger.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/contrib/images/simd-dlv/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# make localnet-debug\n```\n\n----------------------------------------\n\nTITLE: Documenting Version v0.1.1 in Markdown\nDESCRIPTION: This snippet documents the improvements made in version v0.1.1 of the Evidence module, including dependency upgrades.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/evidence/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## [v0.1.1](https://github.com/cosmos/cosmos-sdk/releases/tag/x/evidence/v0.1.1) - 2024-04-22\n\n### Improvements\n\n* (deps) [#19810](https://github.com/cosmos/cosmos-sdk/pull/19810) Upgrade SDK version due to prometheus breaking change.\n* (deps) [#19810](https://github.com/cosmos/cosmos-sdk/pull/19810) Bump `cosmossdk.io/store` to v1.1.0.\n```\n\n----------------------------------------\n\nTITLE: Slashing Module Transaction Help\nDESCRIPTION: Command to display help information for slashing module transactions\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/slashing/README.md#2025-04-22_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nsimd tx slashing --help\n```\n\n----------------------------------------\n\nTITLE: Example Request for Querying Tally with v1beta1\nDESCRIPTION: An example curl command that demonstrates how to query the vote tally for proposal ID 1 using the v1beta1 endpoint.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/README.md#2025-04-22_snippet_85\n\nLANGUAGE: bash\nCODE:\n```\ncurl localhost:1317/cosmos/gov/v1beta1/proposals/1/tally\n```\n\n----------------------------------------\n\nTITLE: Implementing Router Interface in Go\nDESCRIPTION: Defines the Router interface for registering and retrieving evidence handlers.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-009-evidence-module.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype Router interface {\n  AddRoute(r string, h Handler) Router\n  HasRoute(r string) bool\n  GetRoute(path string) Handler\n  Seal()\n}\n```\n\n----------------------------------------\n\nTITLE: Updated Keyring Sign Method\nDESCRIPTION: Modified keyring Sign method to include a new signMode parameter for Ledger hardware device support.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nSign(signMode int) // Updated signature for keyring Sign method\n```\n\n----------------------------------------\n\nTITLE: Querying ValidatorDelegations in Cosmos SDK Staking Module\nDESCRIPTION: The ValidatorDelegations endpoint retrieves information about all delegations to a specific validator. It requires the validator address as input and returns details about each delegation including delegator address, shares, and balance.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/staking/README.md#2025-04-22_snippet_43\n\nLANGUAGE: bash\nCODE:\n```\ncosmos.staking.v1beta1.Query/ValidatorDelegations\n```\n\nLANGUAGE: bash\nCODE:\n```\ngrpcurl -plaintext -d '{\"validator_addr\":\"cosmosvaloper1rne8lgs98p0jqe82sgt0qr4rdn4hgvmgp9ggcc\"}' \\\nlocalhost:9090 cosmos.staking.v1beta1.Query/ValidatorDelegations\n```\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"delegationResponses\": [\n    {\n      \"delegation\": {\n        \"delegatorAddress\": \"cosmos1rne8lgs98p0jqe82sgt0qr4rdn4hgvmgy3ua5t\",\n        \"validatorAddress\": \"cosmosvaloper1rne8lgs98p0jqe82sgt0qr4rdn4hgvmgp9ggcc\",\n        \"shares\": \"10000000000000000000000000\"\n      },\n      \"balance\": {\n        \"denom\": \"stake\",\n        \"amount\": \"10000000\"\n      }\n    }\n  ],\n  \"pagination\": {\n    \"total\": \"1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing TestData in Go\nDESCRIPTION: This Go code snippet initializes a TestData struct with only the Signer field set. It demonstrates how default values are omitted in the textual representation.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-050-sign-mode-textual-annex1.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nmyTestData := TestData{\n  Signer: \"cosmos1abc\"\n}\n```\n\n----------------------------------------\n\nTITLE: Changelog Header Comment Block\nDESCRIPTION: Documentation block explaining the guiding principles and usage guidelines for maintaining the changelog\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/client/v2/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!--\nGuiding Principles:\n\nChangelogs are for humans, not machines.\nThere should be an entry for every single version.\nThe same types of changes should be grouped.\nVersions and sections should be linkable.\nThe latest version comes first.\nThe release date of each version is displayed.\nMention whether you follow Semantic Versioning.\n\nUsage:\n\nChange log entries are to be added to the Unreleased section under the\nappropriate stanza (see below). Each entry should ideally include a tag and\nthe Github issue reference in the following format:\n\n* (<tag>) \\#<issue-number> message\n\nThe issue numbers will later be link-ified during the release process so you do\nnot have to worry about including a link manually, but you can if you wish.\n\nTypes of changes (Stanzas):\n\n\"Features\" for new features.\n\"Improvements\" for changes in existing functionality.\n\"Deprecated\" for soon-to-be removed features.\n\"Bug Fixes\" for any bug fixes.\n\"Client Breaking\" for breaking Protobuf, gRPC and REST routes used by end-users.\n\"CLI Breaking\" for breaking CLI commands.\n\"API Breaking\" for breaking exported APIs used by developers building on SDK.\nRef: https://keepachangelog.com/en/1.0.0/\n-->\n```\n\n----------------------------------------\n\nTITLE: Example Request for Querying Votes with v1\nDESCRIPTION: An example curl command that demonstrates how to query votes for proposal ID 1 using the v1 endpoint.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/README.md#2025-04-22_snippet_64\n\nLANGUAGE: bash\nCODE:\n```\ncurl localhost:1317/cosmos/gov/v1/proposals/1/votes\n```\n\n----------------------------------------\n\nTITLE: Manual Steps for Building and Copying Binary in Cosmos SDK\nDESCRIPTION: These commands manually build the binary and copy it to the required folder for system tests. They include building the project, creating the destination directory, and copying the binary.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/tests/systemtests/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake build\nmkdir -p ./tests/systemtests/binaries\ncp ./build/simd ./tests/systemtests/binaries/\n```\n\n----------------------------------------\n\nTITLE: Governance Proposal Metadata JSON Structure\nDESCRIPTION: Recommended JSON structure for off-chain governance proposal metadata. This structure is stored as JSON on IPFS and referenced from the on-chain proposal. It includes fields for title, authors, summary, details, and other contextual information.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/README.md#2025-04-22_snippet_90\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"title\": \"\",\n  \"authors\": [\"\"],\n  \"summary\": \"\",\n  \"details\": \"\",\n  \"proposal_forum_url\": \"\",\n  \"vote_option_context\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing dbadapter.Store Implementation (Go Reference)\nDESCRIPTION: This last code reference is for dbadapter.Store, an adapter allowing a dbm.DB instance to conform to the KVStore interface, primarily used for transient store variants. It is relevant for implementers needing to plug custom DB backends into Cosmos SDK storage abstractions.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/learn/advanced/04-store.md#2025-04-22_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/store/dbadapter/store.go#L13-L16\n```\n\n----------------------------------------\n\nTITLE: Visualizing Case 3 Transaction Dependencies with Mermaid\nDESCRIPTION: Graph showing transaction dependencies for Case 3 demonstrating how priority ties are handled between different senders.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/types/mempool/priority_nonce_spec.md#2025-04-22_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR\n    subgraph Sender A\n    5a[5]-->99\n    end\n    subgraph Sender B\n    5b[5]-->20\n    99-->5b\n    5a-->5b\n    end\n```\n\n----------------------------------------\n\nTITLE: Importing Confix Command Package in Go\nDESCRIPTION: Import statement to include the Confix command package in a Go application.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/tools/confix/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"cosmossdk.io/tools/confix/cmd\"\n```\n\n----------------------------------------\n\nTITLE: ADR Status Format in Markdown\nDESCRIPTION: Defines the format for representing ADR status, which has two components: consensus status and implementation status. The implementation status is binary (implemented or not), while consensus status follows a specific workflow.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/PROCESS.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n{CONSENSUS STATUS} {IMPLEMENTATION STATUS}\n```\n\n----------------------------------------\n\nTITLE: Updated ABCIListener Interface\nDESCRIPTION: Refactored ABCIListener interface to accept Go contexts for better context propagation and cancellation support.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype ABCIListener interface {\n    // Methods now accept context.Context\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating Capabilities in Go\nDESCRIPTION: AuthenticateCapability function that verifies a capability corresponds to a specific name associated by the calling module.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-003-dynamic-capability-store.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nfunc (sck ScopedCapabilityKeeper) AuthenticateCapability(name string, capability Capability) bool {\n  // return whether forward mapping in memory store matches name\n  return memStore.Get(sck.moduleName + \"/fwd/\" + capability) === name\n}\n```\n\n----------------------------------------\n\nTITLE: Linking to GetSigners Deprecation Issue\nDESCRIPTION: Reference to the GitHub issue discussing the deprecation of GetSigners functionality.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/rfc/rfc-001-tx-validation.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nGetSigners (https://github.com/cosmos/cosmos-sdk/issues/11275)\n```\n\n----------------------------------------\n\nTITLE: Defining a TestData Message in Protobuf\nDESCRIPTION: This snippet defines a TestData message with two string fields: signer and metadata. It demonstrates how default values are handled in the textual representation.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-050-sign-mode-textual-annex1.md#2025-04-22_snippet_3\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage TestData {\n  string signer = 1;\n  string metadata = 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required Go Tools for Pre-commit Hook\nDESCRIPTION: Commands to install the Go tools required by the pre-commit hook, including goimports for import formatting and misspell for spelling checks.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/contrib/githooks/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo install golang.org/x/tools/cmd/goimports\ngo install github.com/golangci/misspell/cmd/misspell@master\n```\n\n----------------------------------------\n\nTITLE: Example Response from v1beta1 Specific Deposit Query\nDESCRIPTION: The JSON response structure when querying a specific deposit using the v1beta1 endpoint. It includes the proposal ID, depositor address, and amount details.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/README.md#2025-04-22_snippet_74\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"deposit\": {\n    \"proposal_id\": \"1\",\n    \"depositor\": \"cosmos1..\",\n    \"amount\": [\n      {\n        \"denom\": \"stake\",\n        \"amount\": \"10000000\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: REST API Module Versions Query\nDESCRIPTION: REST endpoint to query the list of module versions from state.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/upgrade/README.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \"http://localhost:1317/cosmos/upgrade/v1beta1/module_versions\" -H \"accept: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Governance Vote Metadata JSON Structure\nDESCRIPTION: Recommended JSON structure for on-chain governance vote metadata. This structure is stored directly on-chain within the 255 character limit and includes a field for providing justification for the vote choice.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/README.md#2025-04-22_snippet_91\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"justification\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Git Hooks for Cosmos SDK\nDESCRIPTION: Command to configure Git to use the hooks located in the contrib/githooks directory of the Cosmos SDK project.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/contrib/githooks/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit config core.hooksPath contrib/githooks\n```\n\n----------------------------------------\n\nTITLE: ADR Consensus Status Workflow Diagram in Markdown\nDESCRIPTION: A text-based diagram that shows the possible state transitions for an ADR's consensus status. It illustrates how an ADR can progress from DRAFT through various states including PROPOSED, LAST CALL, ACCEPTED, REJECTED, SUPERSEDED, or ABANDONED.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/PROCESS.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nDRAFT -> PROPOSED -> LAST CALL yyyy-mm-dd -> ACCEPTED | REJECTED -> SUPERSEDED by ADR-xxx\n                  \\        |\n                   \\       |\n                    v      v\n                     ABANDONED\n```\n\n----------------------------------------\n\nTITLE: Changelog Format Guidelines Comment\nDESCRIPTION: HTML comment containing guidelines for maintaining the changelog, including principles, usage instructions and types of changes to document.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/collections/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!--\nGuiding Principles:\n\nChangelogs are for humans, not machines.\nThere should be an entry for every single version.\nThe same types of changes should be grouped.\nVersions and sections should be linkable.\nThe latest version comes first.\nThe release date of each version is displayed.\nMention whether you follow Semantic Versioning.\n\nUsage:\n\nChange log entries are to be added to the Unreleased section under the\nappropriate stanza (see below). Each entry should ideally include a tag and\nthe Github issue reference in the following format:\n\n* (<tag>) [#<issue-number>] Changelog message.\n\nTypes of changes (Stanzas):\n\n\"Features\" for new features.\n\"Improvements\" for changes in existing functionality.\n\"Deprecated\" for soon-to-be removed features.\n\"Bug Fixes\" for any bug fixes.\n\"API Breaking\" for breaking exported APIs used by developers building on SDK.\nRef: https://keepachangelog.com/en/1.0.0/\n-->\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry Format Example in Markdown\nDESCRIPTION: Demonstrates the recommended format for adding changelog entries, including the use of tags and GitHub issue references.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/tools/confix/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* (<tag>) [#<issue-number>] Changelog message.\n```\n\n----------------------------------------\n\nTITLE: Changelog Header Comment Block\nDESCRIPTION: Documentation block explaining the guiding principles and usage guidelines for maintaining the changelog, including entry format and types of changes to document.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!--\nGuiding Principles:\n\nChangelogs are for humans, not machines.\nThere should be an entry for every single version.\nThe same types of changes should be grouped.\nVersions and sections should be linkable.\nThe latest version comes first.\nThe release date of each version is displayed.\nMention whether you follow Semantic Versioning.\n\nUsage:\n\nChange log entries are to be added to the Unreleased section under the\nappropriate stanza (see below). Each entry is required to include a tag and\nthe Github issue reference in the following format:\n\n* (<tag>) \\#<issue-number> message\n\nThe tag should consist of where the change is being made ex. (x/staking), (store)\nThe issue numbers will later be link-ified during the release process so you do\nnot have to worry about including a link manually, but you can if you wish.\n\nTypes of changes (Stanzas):\n\n\"Features\" for new features.\n\"Improvements\" for changes in existing functionality.\n\"Deprecated\" for soon-to-be removed features.\n\"Bug Fixes\" for any bug fixes.\n\"Client Breaking\" for breaking Protobuf, gRPC and REST routes used by end-users.\n\"CLI Breaking\" for breaking CLI commands.\n\"API Breaking\" for breaking exported APIs used by developers building on SDK.\n\"State Machine Breaking\" for any changes that result in a different AppState given same genesisState and txList.\nRef: https://keepachangelog.com/en/1.0.0/\n-->\n```\n\n----------------------------------------\n\nTITLE: Configuring Algolia DocSearch in JavaScript for Cosmos SDK Documentation\nDESCRIPTION: JavaScript configuration for Algolia DocSearch integration with the Cosmos SDK documentation site. It specifies the application ID, API key, index name, and disables contextual search.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n      algolia: {\n        appId: \"QLS2QSP47E\",\n        apiKey: \"067b84458bfa80c295e1d4f12c461911\",\n        indexName: \"cosmos_network\",\n        contextualSearch: false,\n      },\n```\n\n----------------------------------------\n\nTITLE: Validator Signing Info Output\nDESCRIPTION: Example output showing a validator's signing information including jail status and missed blocks\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/slashing/README.md#2025-04-22_snippet_11\n\nLANGUAGE: yml\nCODE:\n```\naddress: cosmosvalcons1nrqsld3aw6lh6t082frdqc84uwxn0t958c\nindex_offset: \"2068\"\njailed_until: \"1970-01-01T00:00:00Z\"\nmissed_blocks_counter: \"0\"\nstart_height: \"0\"\ntombstoned: false\n```\n\n----------------------------------------\n\nTITLE: Querying Slashing Module Parameters with REST\nDESCRIPTION: Uses REST endpoint to query the parameters of the slashing module, which include parameters like signed blocks window, minimum signed per window, and slash fractions.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/slashing/README.md#2025-04-22_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\n/cosmos/slashing/v1beta1/params\n```\n\nLANGUAGE: shell\nCODE:\n```\ncurl \"localhost:1317/cosmos/slashing/v1beta1/params\"\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"params\": {\n    \"signed_blocks_window\": \"100\",\n    \"min_signed_per_window\": \"0.500000000000000000\",\n    \"downtime_jail_duration\": \"600s\",\n    \"slash_fraction_double_sign\": \"0.050000000000000000\",\n    \"slash_fraction_downtime\": \"0.010000000000000000\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cosmos SDK AnteHandler for Unordered Transactions in Go\nDESCRIPTION: This Go code snippet demonstrates how to configure the `ante.HandlerOptions` and the `AnteDecorator` slice within a Cosmos SDK application to enable optional unordered transaction processing. It involves setting the `UnorderedNonceManager`, defining optional `UnorderedTxOptions` like gas cost and timeout duration, and adding the `ante.NewUnorderedTxDecorator` to the decorator stack. Dependencies include various Cosmos SDK `ante` package components and application-specific keepers (AccountKeeper, BankKeeper, etc.).\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/UPGRADE_GUIDE.md#2025-04-22_snippet_35\n\nLANGUAGE: go\nCODE:\n```\n```go\noptions := ante.HandlerOptions{\n    // ...\n    UnorderedNonceManager: app.AccountKeeper,\n    // The following options are set by default.\n    // If you do not want to change these, you may remove the UnorderedTxOptions field entirely.\n    UnorderedTxOptions: []ante.UnorderedTxDecoratorOptions{\n        ante.WithUnorderedTxGasCost(2240),\n        ante.WithTimeoutDuration(10 * time.Minute),\n    },\n}\n\nanteDecorators := []sdk.AnteDecorator{\n    ante.NewSetUpContextDecorator(), // outermost AnteDecorator. SetUpContext must be called first\n    circuitante.NewCircuitBreakerDecorator(options.CircuitKeeper),\n    ante.NewExtensionOptionsDecorator(options.ExtensionOptionChecker),\n    ante.NewValidateBasicDecorator(),\n    ante.NewTxTimeoutHeightDecorator(),\n    ante.NewValidateMemoDecorator(options.AccountKeeper),\n    ante.NewConsumeGasForTxSizeDecorator(options.AccountKeeper),\n    ante.NewDeductFeeDecorator(options.AccountKeeper, options.BankKeeper, options.FeegrantKeeper, options.TxFeeChecker),\n    ante.NewSetPubKeyDecorator(options.AccountKeeper), // SetPubKeyDecorator must be called before all signature verification decorators\n    ante.NewValidateSigCountDecorator(options.AccountKeeper),\n    ante.NewSigGasConsumeDecorator(options.AccountKeeper, options.SigGasConsumer),\n    ante.NewSigVerificationDecorator(options.AccountKeeper, options.SignModeHandler),\n    ante.NewIncrementSequenceDecorator(options.AccountKeeper),\n    // NEW !! NEW !! NEW !!\n    ante.NewUnorderedTxDecorator(options.UnorderedNonceManager, options.UnorderedTxOptions...)\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Changelog Structure and Commit Message Guidelines in Markdown\nDESCRIPTION: This snippet outlines the structure of the changelog, explains the commit message conventions, and lists the supported commit types. It provides guidance for contributors on how to format their commit messages and what information to include in the changelog.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/systemtests/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!--\nGuiding Principles:\n\nChangelogs are for humans, not machines.\nThere should be an entry for every single version.\nThe same types of changes should be grouped.\nVersions and sections should be linkable.\nThe latest version comes first.\nThe release date of each version is displayed.\nMention whether you follow Semantic Versioning.\n\nUsage:\n\nChangelog entries are generated by git cliff ref: https://github.com/orhun/git-cliff\n\nEach commit should be conventional, the following message groups are supported.\n\n* feat: A new feature\n* fix: A bug fix\n* docs: Documentation only changes\n* style: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)\n* refactor: A code change that neither fixes a bug nor adds a feature\n* perf: A code change that improves performance\n* test: Adding missing tests or correcting existing tests\n* build: Changes that affect the build system or external dependencies (example scopes: go, npm)\n* ci: Changes to our CI configuration files and scripts (example scopes: GH Actions)\n* chore: Other changes that don't modify src or test files\n* revert: Reverts a previous commit\n\nWhen a change is made that affects the API or state machine, the commit message prefix should be suffixed with `!`.\n\nRef: https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json\n-->\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry Format Example\nDESCRIPTION: Shows the standardized format for adding changelog entries, including tag and issue reference formatting.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/tools/cosmovisor/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* (<tag>) \\#<issue-number> message\n```\n\n----------------------------------------\n\nTITLE: Describing Testdata Folder Contents in Markdown\nDESCRIPTION: This Markdown snippet explains the purpose of the testdata folder, which contains shared test vectors for CosmJS and Cosmos SDK. It provides a brief overview of the folder's contents and its importance in maintaining consistency between the two projects.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/tx/signing/textual/internal/testdata/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# Testdata\n\nThis folder contains test vectors shared between [CosmJS](https://github.com/cosmos/cosmjs/pull/1147) and the Cosmos SDK.\n```\n\n----------------------------------------\n\nTITLE: Example Response from v1beta1 Tally Query\nDESCRIPTION: The JSON response structure when querying a proposal tally using the v1beta1 endpoint. It includes the vote counts for yes, no, abstain, and no_with_veto options.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/README.md#2025-04-22_snippet_86\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tally\": {\n    \"yes\": \"1000000\",\n    \"abstain\": \"0\",\n    \"no\": \"0\",\n    \"no_with_veto\": \"0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuration Changes\nDESCRIPTION: Shows the addition of mempool configurations and removal of rosetta configurations. The changes include enabling mempool max transactions limit and removing various rosetta settings like enable flag, address, blockchain, network, retries, offline mode, fee suggestions and denomination settings.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/tools/confix/testdata/diff-46-47.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n+S mempool\n+M mempool.max-txs\n-S rosetta\n-M rosetta.enable\n-M rosetta.address\n-M rosetta.blockchain\n-M rosetta.network\n-M rosetta.retries\n-M rosetta.offline\n-M rosetta.enable-fee-suggestion\n-M rosetta.gas-to-suggest\n-M rosetta.denom-to-suggest\n```\n\n----------------------------------------\n\nTITLE: Generating Version Diffs with Condiff Tool\nDESCRIPTION: Commands for generating configuration file diffs between different Cosmos SDK versions using the condiff tool. Demonstrates comparing two version-specific app.toml files.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/tools/confix/testdata/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncondiff vXX-app.toml data/vYY-app.toml > testdata/diff-XX-YY.txt\n```\n\n----------------------------------------\n\nTITLE: Enhanced Proportional Slashing Formula for Sybil Resistance\nDESCRIPTION: Improved formula that considers the combined voting power of all validators who fault within a specific time frame, preventing sybil attacks by validators splitting their stake.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-014-proportional-slashing.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nslash_amount = k * (power_1 + power_2 + ... + power_n) // where power_i is the voting power of the ith validator faulting in the specified time frame and k is some on-chain constant\n```\n\n----------------------------------------\n\nTITLE: Setting Epochs in BeginBlockers Order\nDESCRIPTION: Sets the execution order of BeginBlockers for the Epochs module.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/UPGRADE_GUIDE.md#2025-04-22_snippet_27\n\nLANGUAGE: go\nCODE:\n```\napp.ModuleManager.SetOrderBeginBlockers(\n    // ...\n    epochstypes.ModuleName,\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Changelog Structure in Markdown\nDESCRIPTION: This code snippet outlines the structure and guidelines for maintaining the changelog. It includes instructions on how to add entries, categorize changes, and format the document.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/evidence/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!--\nGuiding Principles:\nChangelogs are for humans, not machines.\nThere should be an entry for every single version.\nThe same types of changes should be grouped.\nVersions and sections should be linkable.\nThe latest version comes first.\nThe release date of each version is displayed.\nMention whether you follow Semantic Versioning.\nUsage:\nChange log entries are to be added to the Unreleased section under the\nappropriate stanza (see below). Each entry should ideally include a tag and\nthe Github issue reference in the following format:\n* (<tag>) [#<issue-number>] Changelog message.\nTypes of changes (Stanzas):\n\"Features\" for new features.\n\"Improvements\" for changes in existing functionality.\n\"Deprecated\" for soon-to-be removed features.\n\"Bug Fixes\" for any bug fixes.\n\"API Breaking\" for breaking exported APIs used by developers building on SDK.\nRef: https://keepachangelog.com/en/1.0.0/\n-->\n```\n\n----------------------------------------\n\nTITLE: Documenting Version v0.2.0 in Markdown\nDESCRIPTION: This snippet documents the changes in version v0.2.0 of the Evidence module, which includes support for SDK v0.53.x.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/evidence/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## [v0.2.0](https://github.com/cosmos/cosmos-sdk/releases/tag/x/evidence/v0.2.0) - 2025-04-24\n\n* SDK v0.53.x support.\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Markdown Code Block Syntax\nDESCRIPTION: Shows how to create a Go code block in Markdown documentation. This example demonstrates the basic syntax for including code snippets directly in documentation files.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/DOC_WRITING_GUIDELINES.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```go\nfunc() {}\n```\n```\n\n----------------------------------------\n\nTITLE: Markdown Table - Reporting Methods\nDESCRIPTION: Lists the official channels for reporting security vulnerabilities in the Cosmos ecosystem.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/SECURITY.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Reporting methods                                             |\n|-------------------------------------------------------|\n| [GitHub Private Vulnerability Reporting][gh-private-advisory] |\n| [HackerOne bug bounty program][h1]                            |\n```\n\n----------------------------------------\n\nTITLE: Configuration Command Example\nDESCRIPTION: Example showing the run command with cosmovisor configuration options.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/tools/cosmovisor/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrun --cosmovisor-config <path> (other cmds with flags) ...\n```\n\n----------------------------------------\n\nTITLE: Querying Slashing Parameters\nDESCRIPTION: Command to query the genesis parameters for the slashing module\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/slashing/README.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nsimd query slashing params\n```\n\n----------------------------------------\n\nTITLE: Setting ProtocolPool in InitGenesis Order\nDESCRIPTION: Sets the execution order of InitGenesis for the ProtocolPool module.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/UPGRADE_GUIDE.md#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\napp.ModuleManager.SetOrderInitGenesis(\n    // order does not matter.\n    protocolpooltypes.ModuleName,   \n)\n```\n\n----------------------------------------\n\nTITLE: Visualizing Case 2 Transaction Dependencies with Mermaid\nDESCRIPTION: Graph showing transaction dependencies for Case 2 where two senders have multiple transactions. Illustrates how the highest priority transaction (9) is selected last due to nonce ordering constraints.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/types/mempool/priority_nonce_spec.md#2025-04-22_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR\n    subgraph Sender A\n    3-->5a[5]\n    5a-->9\n    end\n    subgraph Sender B\n    6-->5b[5]\n    6-->3\n    5b-->8\n    8-->3\n    end\n```\n\n----------------------------------------\n\nTITLE: Querying Governance Parameters using v1 in Cosmos SDK\nDESCRIPTION: REST API endpoint for retrieving governance module parameters for a specific parameter type using the v1 path. Similar to the v1beta1 endpoint but with the updated API version.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/README.md#2025-04-22_snippet_69\n\nLANGUAGE: bash\nCODE:\n```\n/cosmos/gov/v1/params/{params_type}\n```\n\n----------------------------------------\n\nTITLE: Proto Directory File Structure Visualization - Bash\nDESCRIPTION: This bash-style code block visually represents the structure of the proto/ directory within the Cosmos SDK. It outlines the placement of YAML configuration files, package directories, and documentation, aiding developers in navigating or mirroring the setup. No special dependencies are required, but understanding the layout is critical for project organization and build processes.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/tooling/00-protobuf.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n├── README.md\\n├── buf.gen.gogo.yaml\\n├── buf.gen.pulsar.yaml\\n├── buf.gen.swagger.yaml\\n├── buf.lock\\n├── buf.md\\n├── buf.yaml\\n├── cosmos\\n└── tendermint\n```\n\n----------------------------------------\n\nTITLE: Setting ProtocolPool in BeginBlockers for DI Configuration\nDESCRIPTION: Configures BeginBlockers order for ProtocolPool module in the dependency injection system.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/UPGRADE_GUIDE.md#2025-04-22_snippet_16\n\nLANGUAGE: go\nCODE:\n```\nBeginBlockers: []string{\n    // ...\n    // must be AFTER distribution.\n    distrtypes.ModuleName,\n    protocolpooltypes.ModuleName,\n},\n```\n\n----------------------------------------\n\nTITLE: Setting Epochs in BeginBlockers for DI Configuration\nDESCRIPTION: Configures BeginBlockers order for Epochs module in the dependency injection system.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/UPGRADE_GUIDE.md#2025-04-22_snippet_32\n\nLANGUAGE: go\nCODE:\n```\nBeginBlockers: []string{\n    // ...\n    epochstypes.ModuleName,\n},\n```\n\n----------------------------------------\n\nTITLE: Setting Epochs in InitGenesis Order\nDESCRIPTION: Sets the execution order of InitGenesis for the Epochs module.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/UPGRADE_GUIDE.md#2025-04-22_snippet_28\n\nLANGUAGE: go\nCODE:\n```\napp.ModuleManager.SetOrderInitGenesis(\n    // ...\n    epochstypes.ModuleName,\n)\n```\n\n----------------------------------------\n\nTITLE: Bcrypt Benchmark Results Output\nDESCRIPTION: Benchmark results showing execution times (in nanoseconds) for different Bcrypt security parameters from 9 to 15, demonstrating the exponential increase in computation time as the security parameter increases.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/crypto/bcrypt_readme.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngoos: linux\ngoarch: amd64\npkg: github.com/cosmos/cosmos-sdk/crypto/keys/mintkey\nBenchmarkBcryptGenerateFromPassword/benchmark-security-param-9-4         \t      50\t  34609268 ns/op\nBenchmarkBcryptGenerateFromPassword/benchmark-security-param-10-4        \t      20\t  67874471 ns/op\nBenchmarkBcryptGenerateFromPassword/benchmark-security-param-11-4        \t      10\t 135515404 ns/op\nBenchmarkBcryptGenerateFromPassword/benchmark-security-param-12-4        \t       5\t 274824600 ns/op\nBenchmarkBcryptGenerateFromPassword/benchmark-security-param-13-4        \t       2\t 547012903 ns/op\nBenchmarkBcryptGenerateFromPassword/benchmark-security-param-14-4        \t       1\t1083685904 ns/op\nBenchmarkBcryptGenerateFromPassword/benchmark-security-param-15-4        \t       1\t2183674041 ns/op\nPASS\nok  \tgithub.com/cosmos/cosmos-sdk/crypto/keys/mintkey\t12.093s\n```\n\n----------------------------------------\n\nTITLE: Module Integration with Bank Service Example\nDESCRIPTION: Example implementation showing how a hypothetical 'foo' module would interact with the bank module using the new ModuleKey and Client interfaces. Demonstrates initialization and usage of bank queries and messages.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-033-protobuf-inter-module-comm.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage foo\n\n\ntype FooMsgServer {\n  // ...\n\n  bankQuery bank.QueryClient\n  bankMsg   bank.MsgClient\n}\n\nfunc NewFooMsgServer(moduleKey RootModuleKey, ...) FooMsgServer {\n  // ...\n\n  return FooMsgServer {\n    // ...\n    modouleKey: moduleKey,\n    bankQuery: bank.NewQueryClient(moduleKey),\n    bankMsg: bank.NewMsgClient(moduleKey),\n  }\n}\n\nfunc (foo *FooMsgServer) Bar(ctx context.Context, req *MsgBarRequest) (*MsgBarResponse, error) {\n  balance, err := foo.bankQuery.Balance(&bank.QueryBalanceRequest{Address: fooMsgServer.moduleKey.Address(), Denom: \"foo\"})\n\n  ...\n\n  res, err := foo.bankMsg.Send(ctx, &bank.MsgSendRequest{FromAddress: fooMsgServer.moduleKey.Address(), ...})\n\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Instantiating Epochs Keeper\nDESCRIPTION: Creates a new instance of the Epochs keeper with dependencies.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/UPGRADE_GUIDE.md#2025-04-22_snippet_24\n\nLANGUAGE: go\nCODE:\n```\napp.EpochsKeeper = epochskeeper.NewKeeper(\n    runtime.NewKVStoreService(keys[epochstypes.StoreKey]),\n    appCodec,\n)\n```\n\n----------------------------------------\n\nTITLE: Injecting ProtocolPool Keeper in DI System\nDESCRIPTION: Adds the ProtocolPool keeper to the dependency injection system.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/UPGRADE_GUIDE.md#2025-04-22_snippet_13\n\nLANGUAGE: go\nCODE:\n```\ndepinject.Inject(\n    appConfig,\n    &appBuilder,\n    &app.appCodec,\n    &app.legacyAmino,\n    &app.txConfig,\n    &app.interfaceRegistry,\n    // ... other modules\n    &app.ProtocolPoolKeeper, // NEW MODULE!\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Distribution Keeper with External Community Pool\nDESCRIPTION: Passes the ProtocolPool keeper to the Distribution keeper to use it as an external community pool.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/UPGRADE_GUIDE.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\napp.DistrKeeper = distrkeeper.NewKeeper(\n    appCodec,\n    runtime.NewKVStoreService(keys[distrtypes.StoreKey]),\n    app.AccountKeeper,\n    app.BankKeeper,\n    app.StakingKeeper,\n    authtypes.FeeCollectorName,\n    authtypes.NewModuleAddress(govtypes.ModuleName).String(),\n    distrkeeper.WithExternalCommunityPool(app.ProtocolPoolKeeper), // NEW\n)\n```\n\n----------------------------------------\n\nTITLE: Example of Querying All Votes with gRPC v1 in Cosmos SDK\nDESCRIPTION: A practical example showing how to use grpcurl to query all votes on proposal ID 1 using the v1 gRPC endpoint.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/README.md#2025-04-22_snippet_46\n\nLANGUAGE: bash\nCODE:\n```\ngrpcurl -plaintext \\\n    -d '{\"proposal_id\":\"1\"}' \\\n    localhost:9090 \\\n    cosmos.gov.v1.Query/Votes\n```\n\n----------------------------------------\n\nTITLE: Example Protobuf Query Service Definition from x/auth (Protobuf)\nDESCRIPTION: References the Protobuf `Query` service definition within the `x/auth` module (v0.50.0-alpha.0). This exemplifies how to define gRPC endpoints (RPCs) for querying module-specific state, such as account details or module parameters.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-modules/02-messages-and-queries.md#2025-04-22_snippet_6\n\nLANGUAGE: protobuf\nCODE:\n```\n reference\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/proto/cosmos/auth/v1beta1/query.proto#L14-L89\n```\n\n----------------------------------------\n\nTITLE: Implementing Get Function for CacheKVStore in Go\nDESCRIPTION: An example pseudocode algorithm in Golang that demonstrates a get function for a CacheKVStore. The function first checks the cache for a value, and if not found, retrieves it from the parent store and updates the cache before returning the value.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/spec/SPEC_STANDARD.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc get(\n  store CacheKVStore,\n  key Key) Value {\n\n  value = store.cache.get(Key)\n  if (value !== null) {\n    return value\n  } else {\n    value = store.parent.get(key)\n    store.cache.set(key, value)\n    return value\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Cosmos Signed Message JSON Schema\nDESCRIPTION: JSON Schema definition for Cosmos signed messages specifying required fields, types and validation rules.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/spec/_ics/ics-030-signed-messages.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n  \"$id\": \"cosmos/signing/typeData/schema\",\n  \"title\": \"The Cosmos signed message typed data schema.\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"@chain_id\": {\n      \"type\": \"string\",\n      \"description\": \"The corresponding Cosmos chain identifier.\",\n      \"minLength\": 1\n    },\n    \"@type\": {\n      \"type\": \"string\",\n      \"description\": \"The message type. It must be 'message'.\",\n      \"enum\": [\n        \"message\"\n      ]\n    },\n    \"text\": {\n      \"type\": \"string\",\n      \"description\": \"The valid ASCII text to sign.\",\n      \"pattern\": \"^[\\\\x20-\\\\x7E]+$\",\n      \"minLength\": 1\n    }\n  },\n  \"required\": [\n    \"@chain_id\",\n    \"@type\",\n    \"text\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Generator Interface in Go\nDESCRIPTION: Defines an interface for generating and marshaling transactions and related components in the Cosmos SDK.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-020-protobuf-transaction-encoding.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\ntype Generator interface {\n  NewTx() TxBuilder\n  NewFee() ClientFee\n  NewSignature() ClientSignature\n  MarshalTx(tx types.Tx) ([]byte, error)\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing Case 1 Transaction Dependencies with Mermaid\nDESCRIPTION: Graph showing transaction dependencies for Case 1 where Sender A has 4 transactions and Sender B has 1 transaction. Demonstrates how a lower priority transaction (15) is selected before a higher priority one (21) due to ordering rules.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/types/mempool/priority_nonce_spec.md#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TB\n    subgraph Sender A\n    20-->6\n    6-->8\n    8-->21\n    end\n    subgraph Sender B\n    20-->15\n    15-->6\n    end\n```\n\n----------------------------------------\n\nTITLE: Setting Values in CommitKVStoreCache in Go\nDESCRIPTION: Inserts or updates a key/value pair in both the cache and the underlying store, implementing a write-through caching strategy.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/spec/store/interblock-cache.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nfunc Set(\n    KVCache CommitKVStoreCache,\n    key string,\n    value []byte) {\n\n    KVCache.cache.Add(key, value)\n    KVCache.store.Set(key, value)\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Slashing Module Parameters with gRPC\nDESCRIPTION: Uses gRPC to query the parameters of the slashing module, which include parameters like signed blocks window, minimum signed per window, downtime jail duration, and slash fractions.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/slashing/README.md#2025-04-22_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\ncosmos.slashing.v1beta1.Query/Params\n```\n\nLANGUAGE: shell\nCODE:\n```\ngrpcurl -plaintext localhost:9090 cosmos.slashing.v1beta1.Query/Params\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"params\": {\n    \"signedBlocksWindow\": \"100\",\n    \"minSignedPerWindow\": \"NTAwMDAwMDAwMDAwMDAwMDAw\",\n    \"downtimeJailDuration\": \"600s\",\n    \"slashFractionDoubleSign\": \"NTAwMDAwMDAwMDAwMDAwMDA=\",\n    \"slashFractionDowntime\": \"MTAwMDAwMDAwMDAwMDAwMDA=\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing External GitHub Code in Markdown\nDESCRIPTION: Demonstrates how to include code snippets from GitHub repositories by directly referencing specific files and line numbers. This approach helps maintain up-to-date code examples in documentation.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/DOC_WRITING_GUIDELINES.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```go reference\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.46.0/server/types/app.go#L57-L59\n```\n```\n\n----------------------------------------\n\nTITLE: Token Burn Transaction Test (Go)\nDESCRIPTION: Test implementation for burning tokens and verifying updated balances\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/systemtests/GETTING_STARTED.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n\t// and when\n\ttxHash := cli.Run(\"tx\", \"bank\", \"burn\", \"node0\", \"400000mytoken\")\n\tRequireTxSuccess(t, txHash)\n\n\texp[\"mytoken\"] = 600_000 // update expected state\n\traw = cli.CustomQuery(\"q\", \"bank\", \"total-supply\")\n\tfor k, v := range exp {\n\t\tgot := gjson.Get(raw, fmt.Sprintf(\"supply.#(denom==%q).amount\", k)).Int()\n\t\tassert.Equal(t, v, got, raw)\n\t}\n\tassert.Equal(t, int64(600_000), cli.QueryBalance(cli.GetKeyAddr(\"node0\"), \"mytoken\"))\n```\n\n----------------------------------------\n\nTITLE: Implementing PopStateCache method for rootmulti store in Go\nDESCRIPTION: Implementation of the PopStateCache method for rootmulti store which collects and sorts state changes from all registered listeners and returns the combined cache.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-038-state-listening.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nfunc (rs *Store) PopStateCache() []types.StoreKVPair {\n\tvar cache []types.StoreKVPair\n\tfor _, ls := range rs.listeners {\n\t\tcache = append(cache, ls.PopStateCache()...)\n\t}\n\tsort.SliceStable(cache, func(i, j int) bool {\n\t\treturn cache[i].StoreKey < cache[j].StoreKey\n\t})\n\treturn cache\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing MintKeeper with Default Configuration\nDESCRIPTION: Example of initializing the MintKeeper with default behavior in the x/mint module. This shows the basic configuration without any custom minting function.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/UPGRADING.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nmintKeeper := mintkeeper.NewKeeper(\n   appCodec,\n   storeService,\n   stakingKeeper,\n   accountKeeper,\n   bankKeeper,\n   authtypes.FeeCollectorName,\n   authtypes.NewModuleAddress(govtypes.ModuleName).String(),\n)\n```\n\n----------------------------------------\n\nTITLE: Broadcasting Bank Transaction using CLI\nDESCRIPTION: Example of using the Cosmos SDK CLI to send tokens from one address to another using the bank module. This command handles transaction generation, signing, and broadcasting in one step.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/user/run-node/03-txs.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsimd tx bank send $MY_VALIDATOR_ADDRESS $RECIPIENT 1000stake --chain-id my-test-chain --keyring-backend test\n```\n\n----------------------------------------\n\nTITLE: Defining MsgRevokeAllowance in Protobuf\nDESCRIPTION: Protobuf definition for MsgRevokeAllowance, used to revoke an existing fee allowance grant.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/feegrant/README.md#2025-04-22_snippet_7\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage MsgRevokeAllowance {\n  option (cosmos.msg.v1.signer) = \"granter\";\n\n  string granter = 1;\n  string grantee = 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Grant Generic Authorization Example in Cosmos SDK\nDESCRIPTION: Example of granting a generic authorization for a specific message type, allowing the grantee to execute any transaction containing the specified message type.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/authz/README.md#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nsimd tx authz grant cosmos1.. generic --msg-type=/cosmos.bank.v1beta1.MsgSend --from=cosmos1..\n```\n\n----------------------------------------\n\nTITLE: Checking Invariants Using CLI\nDESCRIPTION: Example of using the command line interface to check a blockchain invariant. This command submits proof when an invariant is broken, which could halt the chain.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/crisis/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsimd tx crisis invariant-broken [module-name] [invariant-route] [flags]\n```\n\n----------------------------------------\n\nTITLE: Querying Delegation for Specific Delegator and Validator\nDESCRIPTION: CLI command to query delegation information for a specific delegator address on a specific validator address in the Cosmos SDK staking module.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/staking/README.md#2025-04-22_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nsimd query staking delegation cosmos1gghjut3ccd8ay0zduzj64hwre2fxs9ld75ru9p cosmosvaloper1gghjut3ccd8ay0zduzj64hwre2fxs9ldmqhffj\n```\n\n----------------------------------------\n\nTITLE: Adding a Genesis Account to the Chain\nDESCRIPTION: Command to add a local account to the genesis file with an initial allocation of tokens. This registers the account with the blockchain before starting the node.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/user/run-node/01-run-node.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsimd genesis add-genesis-account $MY_VALIDATOR_ADDRESS 100000000000stake\n```\n\n----------------------------------------\n\nTITLE: Configuring Validator Node for Remote Signing\nDESCRIPTION: Command to modify the Cosmos SDK node configuration to use a remote signer. This sets the private validator listener address to accept connections from the TMKMS instance.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/user/run-node/06-run-production.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nvim $HOME/.simd/config/config.toml\n\npriv_validator_laddr = \"tcp://0.0.0.0:26659\"\n```\n\n----------------------------------------\n\nTITLE: Example Request for Querying All Deposits with v1\nDESCRIPTION: An example curl command that demonstrates how to query all deposits for proposal ID 1 using the v1 endpoint.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/README.md#2025-04-22_snippet_82\n\nLANGUAGE: bash\nCODE:\n```\ncurl localhost:1317/cosmos/gov/v1/proposals/1/deposits\n```\n\n----------------------------------------\n\nTITLE: Installing TMKMS via Cargo with Softsign Feature\nDESCRIPTION: Alternative commands to install TMKMS directly via Cargo with software signing capabilities. This initializes the configuration and generates a secret connection key for secure communication with the validator node.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/user/run-node/06-run-production.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncargo install tmkms --features=softsign\ntmkms init config\ntmkms softsign keygen ./config/secrets/secret_connection_key\n```\n\n----------------------------------------\n\nTITLE: Querying Transactions by Hash in CLI\nDESCRIPTION: This CLI command allows querying a transaction using its hash.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/auth/tx/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nsimd query tx DFE87B78A630C0EFDF76C80CD24C997E252792E0317502AE1A02B9809F0D8685\n```\n\n----------------------------------------\n\nTITLE: Unjail Message Proto Definition\nDESCRIPTION: Protobuf definition for message to unjail a validator after being jailed for downtime.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/slashing/README.md#2025-04-22_snippet_3\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage MsgUnjail {\n  string validator_addr = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Logging Upgrade Halt Behavior in Cosmos SDK (Text)\nDESCRIPTION: Illustrates how the upgrade module logs a halt requirement message in Cosmos SDK. The log includes upgrade details like name and height. Limits: Does not exit the process on halt, only logs and enforces a pause.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-apps/03-app-upgrade.md#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n UPGRADE \"<Name>\" NEEDED at height <NNNN>: <Info>\n```\n\n----------------------------------------\n\nTITLE: Using Logger in Module Initialization\nDESCRIPTION: Demonstrates how to use the logger in module initialization and keeper creation within the cosmos-sdk core API.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-063-core-module-api.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ntype ModuleInputs struct {\n  depinject.In\n\n  Logger log.Logger\n}\n\nfunc ProvideModule(in ModuleInputs) ModuleOutputs {\n  keeper := keeper.NewKeeper(\n    in.logger,\n  )\n}\n\nfunc NewKeeper(logger log.Logger) Keeper {\n  return Keeper{\n    logger: logger.With(log.ModuleKey, \"x/\"+types.ModuleName),\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Evidence Handler Function in Go\nDESCRIPTION: Defines the Handler function type for processing evidence submissions.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-009-evidence-module.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype Handler func(Context, Evidence) error\n```\n\n----------------------------------------\n\nTITLE: PrimaryKeyed Interface Definition\nDESCRIPTION: Interface definition for objects that can be stored in PrimaryKeyTable, requiring implementation of primary key field access.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/x/group/internal/orm/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nreference\nhttps://github.com/cosmos/cosmos-sdk/tree/release/v0.50.x/x/group/internal/orm/primary_key.go#L30-L44\n```\n\n----------------------------------------\n\nTITLE: Defining Custom RPC Command Options in Gov Module\nDESCRIPTION: Example from the Cosmos SDK gov module showing how to define custom RPC command options using the autocli.ModuleOptions struct for governance-related commands.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/client/v2/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n*autocliv1.RpcCommandOptions{\n  RpcMethod: \"Params\", // The name of the gRPC service\n  Use:       \"params\", // Command usage that is displayed in the help\n  Short:     \"Query the parameters of the governance process\", // Short description of the command\n  Long:      \"Query the parameters of the governance process. Specify specific param types (voting|tallying|deposit) to filter results.\", // Long description of the command\n  PositionalArgs: []*autocliv1.PositionalArgDescriptor{\n    {ProtoField: \"params_type\", Optional: true}, // Transform a flag into a positional argument\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing grpc.ClientConn.Invoke for RootModuleKey in Go\nDESCRIPTION: Shows the implementation of the Invoke method for RootModuleKey, which uses the Invoker to create and execute a function closure for the requested method.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-033-protobuf-inter-module-comm.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfunc (key RootModuleKey) Invoke(ctx context.Context, method string, args, reply interface{}, opts ...grpc.CallOption) error {\n  f := key.invoker(CallInfo {Method: method, Caller: ModuleID {ModuleName: key.moduleName}})\n  return f(ctx, args, reply)\n}\n```\n\n----------------------------------------\n\nTITLE: Major Release Version Progression Example\nDESCRIPTION: Shows the progression of version numbers during a major release cycle, from beta versions through release candidates to the final release.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/RELEASE_PROCESS.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nv1.0.0-beta1 → v1.0.0-beta2 → ... → v1.0.0-rc1 → v1.0.0-rc2 → ... → v1.0.0\n```\n\n----------------------------------------\n\nTITLE: Stable Release Exception Bug Template\nDESCRIPTION: Markdown template for submitting bug reports that require stable release exceptions. Includes sections for impact assessment, test case reproduction steps, and regression potential analysis.\nSOURCE: https://github.com/cosmos/cosmos-sdk/blob/main/RELEASE_PROCESS.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n#### Impact\n\nBrief xplanation of the effects of the bug on users and a justification for backporting the fix to the stable release.\n\n#### Test Case\n\nDetailed instructions on how to reproduce the bug on Stargate's most recently published point-release.\n\n#### Regression Potential\n\nExplanation on how regressions might manifest - even if it's unlikely.\nIt is assumed that stable release fixes are well-tested and they come with a low risk of regressions.\nIt's crucial to make the effort of thinking about what could happen in case a regression emerges.\n```"
  }
]