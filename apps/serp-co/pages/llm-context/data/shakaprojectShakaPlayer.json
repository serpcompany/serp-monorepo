[
  {
    "owner": "shaka-project",
    "repo": "shaka-player",
    "content": "TITLE: Setting up HTML Structure for Shaka Player\nDESCRIPTION: HTML boilerplate that includes the Shaka Player library, custom application script, and a video element with controls. The video element is configured with dimensions, poster image, and autoplay functionality.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/basic-usage.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <!-- Shaka Player compiled library: -->\n    <script src=\"dist/shaka-player.compiled.js\"></script>\n    <!-- Your application source: -->\n    <script src=\"myapp.js\"></script>\n  </head>\n  <body>\n    <video id=\"video\"\n           width=\"640\"\n           poster=\"//shaka-player-demo.appspot.com/assets/poster.jpg\"\n           controls autoplay></video>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Setting up Shaka Player UI with HTML attributes\nDESCRIPTION: HTML setup for Shaka Player UI with necessary scripts, CSS, and container configuration. The example shows how to create a container with cast receiver support and a video element with the data-shaka-player attribute.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/ui.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <!-- Shaka Player UI compiled library: -->\n    <script src=\"dist/shaka-player.ui.js\"></script>\n    <!-- Shaka Player UI compiled library default CSS: -->\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"dist/controls.css\">\n    <!-- Chromecast SDK (if you want Chromecast support for your app): -->\n    <script defer src=\"https://www.gstatic.com/cv/js/sender/v1/cast_sender.js\"></script>\n    <!-- Your application source: -->\n    <script src=\"myapp.js\"></script>\n  </head>\n  <body>\n    <!-- The data-shaka-player-container tag will make the UI library place the controls in this div.\n         The data-shaka-player-cast-receiver-id tag allows you to provide a Cast Application ID that\n           the cast button will cast to; the value provided here is the sample cast receiver. -->\n    <div data-shaka-player-container style=\"max-width:40em\"\n         data-shaka-player-cast-receiver-id=\"07AEE832\">\n       <!-- The data-shaka-player tag will make the UI library use this video element.\n            If no video is provided, the UI will automatically make one inside the container div. -->\n      <video autoplay data-shaka-player id=\"video\" style=\"width:100%;height:100%\"></video>\n    </div>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Initializing Shaka Player UI with JavaScript\nDESCRIPTION: JavaScript initialization for Shaka Player UI showing how to access UI components, handle errors, and load media content. The code demonstrates player initialization, error handling, and event listeners for UI loading.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/ui.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// myapp.js\n\nconst manifestUri =\n    'https://storage.googleapis.com/shaka-demo-assets/angel-one/dash.mpd';\n\nasync function init() {\n  // When using the UI, the player is made automatically by the UI object.\n  const video = document.getElementById('video');\n  const ui = video['ui'];\n  const controls = ui.getControls();\n  const player = controls.getPlayer();\n\n  // Attach player and UI to the window to make it easy to access in the JS console.\n  window.player = player;\n  window.ui = ui;\n\n  // Listen for error events.\n  player.addEventListener('error', onPlayerErrorEvent);\n  controls.addEventListener('error', onUIErrorEvent);\n\n  // Try to load a manifest.\n  // This is an asynchronous process.\n  try {\n    await player.load(manifestUri);\n    // This runs if the asynchronous load is successful.\n    console.log('The video has now been loaded!');\n  } catch (error) {\n    onPlayerError(error);\n  }\n}\n\nfunction onPlayerErrorEvent(errorEvent) {\n  // Extract the shaka.util.Error object from the event.\n  onPlayerError(event.detail);\n}\n\nfunction onPlayerError(error) {\n  // Handle player error\n  console.error('Error code', error.code, 'object', error);\n}\n\nfunction onUIErrorEvent(errorEvent) {\n  // Extract the shaka.util.Error object from the event.\n  onPlayerError(event.detail);\n}\n\nfunction initFailed(errorEvent) {\n  // Handle the failure to load; errorEvent.detail.reasonCode has a\n  // shaka.ui.FailReasonCode describing why.\n  console.error('Unable to load the UI library!');\n}\n\n// Listen to the custom shaka-ui-loaded event, to wait until the UI is loaded.\ndocument.addEventListener('shaka-ui-loaded', init);\n// Listen to the custom shaka-ui-load-failed event, in case Shaka Player fails\n// to load (e.g. due to lack of browser support).\ndocument.addEventListener('shaka-ui-load-failed', initFailed);\n```\n\n----------------------------------------\n\nTITLE: Implementing Shaka Player with JavaScript\nDESCRIPTION: JavaScript implementation for initializing Shaka Player. The code installs polyfills, checks for browser compatibility, creates a player instance, attaches it to the video element, sets up error handling, and loads a DASH manifest. It also includes utility functions for error handling.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/basic-usage.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// myapp.js\n\nconst manifestUri =\n    'https://storage.googleapis.com/shaka-demo-assets/angel-one/dash.mpd';\n\nfunction initApp() {\n  // Install built-in polyfills to patch browser incompatibilities.\n  shaka.polyfill.installAll();\n\n  // Check to see if the browser supports the basic APIs Shaka needs.\n  if (shaka.Player.isBrowserSupported()) {\n    // Everything looks good!\n    initPlayer();\n  } else {\n    // This browser does not have the minimum set of APIs we need.\n    console.error('Browser not supported!');\n  }\n}\n\nasync function initPlayer() {\n  // Create a Player instance.\n  const video = document.getElementById('video');\n  const player = new shaka.Player();\n  await player.attach(video);\n\n  // Attach player to the window to make it easy to access in the JS console.\n  window.player = player;\n\n  // Listen for error events.\n  player.addEventListener('error', onErrorEvent);\n\n  // Try to load a manifest.\n  // This is an asynchronous process.\n  try {\n    await player.load(manifestUri);\n    // This runs if the asynchronous load is successful.\n    console.log('The video has now been loaded!');\n  } catch (e) {\n    // onError is executed if the asynchronous load fails.\n    onError(e);\n  }\n}\n\nfunction onErrorEvent(event) {\n  // Extract the shaka.util.Error object from the event.\n  onError(event.detail);\n}\n\nfunction onError(error) {\n  // Log the error.\n  console.error('Error code', error.code, 'object', error);\n}\n\ndocument.addEventListener('DOMContentLoaded', initApp);\n```\n\n----------------------------------------\n\nTITLE: Initializing Shaka Player with DRM Configuration\nDESCRIPTION: Configuration setup for Shaka Player including manifest URI and license server URL\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/license-wrapping.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst manifestUri =\n    'https://storage.googleapis.com/shaka-demo-assets/sintel-widevine/dash.mpd';\nconst licenseServer = 'https://cwip-shaka-proxy.appspot.com/wrapped_request';\n```\n\n----------------------------------------\n\nTITLE: Configuring DRM License Servers in Shaka Player\nDESCRIPTION: Sets up license server URLs for Widevine and PlayReady DRM systems using player.configure(). This is the basic configuration needed to play protected content.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/drm-config.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nplayer.configure({\n  drm: {\n    servers: {\n      'com.widevine.alpha': 'https://foo.bar/drm/widevine',\n      'com.microsoft.playready': 'https://foo.bar/drm/playready'\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Offline Content with Shaka Player\nDESCRIPTION: Removes previously stored content from offline storage using the storage API. Takes the content's offline URI as input and supports progress reporting through a callback set during initialization.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/offline.md#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nreturn window.storage.remove(content.offlineUri);\n```\n\n----------------------------------------\n\nTITLE: Playing Offline Content with Shaka Player\nDESCRIPTION: Loads and plays previously stored offline content using the player's load method with the content's offline URI. The player handles the redirection of network requests to offline storage automatically.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/offline.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.player.load(content.offlineUri);\n```\n\n----------------------------------------\n\nTITLE: Basic Player and Offline Storage Implementation (Initial Code)\nDESCRIPTION: JavaScript implementation for the offline storage application including functions for initializing the player, handling errors, selecting tracks, and refreshing content list. Contains TODOs for implementing offline storage functionality.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/offline.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// myapp.js\n\nasync function initApp() {\n  // Install built-in polyfills to patch browser incompatibilities.\n  shaka.polyfill.installAll();\n\n  // Check to see if the browser supports the basic APIs Shaka needs.\n  if (shaka.Player.isBrowserSupported()) {\n    // Everything looks good!\n    await initPlayer();\n  } else {\n    // This browser does not have the minimum set of APIs we need.\n    console.error('Browser not supported!');\n  }\n\n  // Update the online status and add listeners so that we can visualize\n  // our network state to the user.\n  updateOnlineStatus();\n  window.addEventListener('online',  updateOnlineStatus);\n  window.addEventListener('offline', updateOnlineStatus);\n}\n\nasync function initPlayer() {\n  // Create a Player instance.\n  const video = document.getElementById('video');\n  const player = new shaka.Player();\n  await player.attach(video);\n\n  // Attach player and storage to the window to make it easy to access\n  // in the JS console and so we can access it in other methods.\n  window.player = player;\n\n  // Listen for error events.\n  player.addEventListener('error', onErrorEvent);\n\n  initStorage(player);\n\n  const downloadButton = document.getElementById('download-button');\n  downloadButton.onclick = onDownloadClick;\n\n  // Update the content list to show what items we initially have\n  // stored offline.\n  refreshContentList();\n}\n\nfunction onErrorEvent(event) {\n  // Extract the shaka.util.Error object from the event.\n  onError(event.detail);\n}\n\nfunction onError(error) {\n  // Log the error.\n  console.error('Error code', error.code, 'object', error);\n}\n\nfunction selectTracks(tracks) {\n  // This example stores the highest bandwidth variant.\n  //\n  // Note that this is just an example of an arbitrary algorithm, and not a best\n  // practice for storing content offline.  Decide what your app needs, or keep\n  // the default (user-pref-matching audio, best SD video, all text).\n  const found = tracks\n      .filter(function(track) { return track.type == 'variant'; })\n      .sort(function(a, b) { return a.bandwidth - b.bandwidth; })\n      .pop();\n  console.log('Offline Track bandwidth: ' + found.bandwidth);\n  return [ found ];\n}\n\nfunction initStorage(player) {\n  // TODO : Initialize storage.\n}\n\nfunction listContent() {\n  // TODO : return all downloaded content.\n}\n\nfunction playContent(content) {\n  // TODO : play offline content.\n}\n\nfunction removeContent(content) {\n  // TODO : remove content from storage.\n}\n\nfunction downloadContent(manifestUri, title) {\n  // TODO : save content with storage.\n}\n\n/*\n * UI callback for when the download button is clicked. This will\n * disable the button while the download is in progress, start the\n * download, and refresh the content list once the download is\n * complete.\n */\nfunction onDownloadClick() {\n  const downloadButton = document.getElementById('download-button');\n  const manifestUri = document.getElementById('asset-uri-input').value;\n  const title = document.getElementById('asset-title-input').value;\n\n  // Disable the download button to prevent user from requesting\n  // another download until this download is complete.\n  downloadButton.disabled = true;\n\n  setDownloadProgress(null, 0);\n\n  // Download the content and then re-enable the download button so\n  // that more content can be downloaded.\n  downloadContent(manifestUri, title)\n    .then(function() {\n      return refreshContentList();\n    })\n    .then(function(content) {\n      setDownloadProgress(null, 1);\n      downloadButton.disabled = false;\n    })\n    .catch(function(error) {\n      // In the case of an error, re-enable the download button so\n      // that the user can try to download another item.\n      downloadButton.disabled = false;\n      onError(error);\n    });\n}\n\n/*\n * Update the online status box at the top of the page to tell the\n * user whether or not they have an internet connection.\n */\nfunction updateOnlineStatus() {\n  const signal = document.getElementById('online-signal');\n  if (navigator.onLine) {\n    signal.innerHTML = 'ONLINE';\n    signal.style.background = 'green';\n  } else {\n    signal.innerHTML = 'OFFLINE';\n    signal.style.background = 'grey';\n  }\n}\n\n/*\n * Find our progress bar and set the value to show the progress we\n * have made.\n */\nfunction setDownloadProgress(content, progress) {\n  const progressBar = document.getElementById('progress-bar');\n  progressBar.value = progress * progressBar.max;\n}\n\n/*\n * Clear our content table and repopulate it table with the current\n * list of downloaded content.\n */\nfunction refreshContentList() {\n  const contentTable = document.getElementById('content-table');\n\n  // Clear old rows from the table.\n  while (contentTable.rows.length) {\n    contentTable.deleteRow(0);\n  }\n\n  const addRow = function(content) {\n    const append = -1;\n\n    const row = contentTable.insertRow(append);\n    row.insertCell(append).innerHTML = content.offlineUri;\n    Object.keys(content.appMetadata)\n        .map(function(key) {\n          return content.appMetadata[key];\n        })\n        .forEach(function(value) {\n          row.insertCell(append).innerHTML = value;\n        });\n\n    row.insertCell(append).appendChild(createButton(\n        'PLAY',\n        function() { playContent(content); }));\n\n    row.insertCell(append).appendChild(createButton(\n        'REMOVE',\n        function() {\n          removeContent(content)\n              .then(function() { refreshContentList() });\n        }));\n  };\n\n  return listContent()\n      .then(function(content) { content.forEach(addRow); });\n};\n\n/*\n * Create a new button but do not add it to the DOM. The caller\n * will need to do that.\n */\nfunction createButton(text, action) {\n  const button = document.createElement('button');\n  button.innerHTML = text;\n  button.onclick = action;\n  return button;\n}\n\ndocument.addEventListener('DOMContentLoaded', initApp);\n```\n\n----------------------------------------\n\nTITLE: Implementing Shaka Player Offline Storage Functionality\nDESCRIPTION: This JavaScript code implements the functionality for offline content storage using Shaka Player. It includes functions for initializing the player, downloading content, managing the content list, and handling playback.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/offline.md#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// myapp.js\n\nasync function initApp() {\n  // Install built-in polyfills to patch browser incompatibilities.\n  shaka.polyfill.installAll();\n\n  // Check to see if the browser supports the basic APIs Shaka needs.\n  if (shaka.Player.isBrowserSupported()) {\n    // Everything looks good!\n    await initPlayer();\n  } else {\n    // This browser does not have the minimum set of APIs we need.\n    console.error('Browser not supported!');\n  }\n\n  // Update the online status and add listeners so that we can visualize\n  // our network state to the user.\n  updateOnlineStatus();\n  window.addEventListener('online',  updateOnlineStatus);\n  window.addEventListener('offline', updateOnlineStatus);\n}\n\nasync function initPlayer() {\n  // Create a Player instance.\n  const video = document.getElementById('video');\n  const player = new shaka.Player();\n  await player.attach(video);\n\n  // Attach player and storage to the window to make it easy to access\n  // in the JS console and so we can access it in other methods.\n  window.player = player;\n\n  // Listen for error events.\n  player.addEventListener('error', onErrorEvent);\n\n  initStorage(player);\n\n  const downloadButton = document.getElementById('download-button');\n  downloadButton.onclick = onDownloadClick;\n\n  // Update the content list to show what items we initially have\n  // stored offline.\n  refreshContentList();\n}\n\nfunction onErrorEvent(event) {\n  // Extract the shaka.util.Error object from the event.\n  onError(event.detail);\n}\n\nfunction onError(error) {\n  // Log the error.\n  console.error('Error code', error.code, 'object', error);\n}\n\nfunction selectTracks(tracks) {\n  // This example stores the highest bandwidth variant.\n  //\n  // Note that this is just an example of an arbitrary algorithm, and not a best\n  // practice for storing content offline.  Decide what your app needs, or keep\n  // the default (user-pref-matching audio, best SD video, all text).\n  const found = tracks\n      .filter(function(track) { return track.type == 'variant'; })\n      .sort(function(a, b) { return a.bandwidth - b.bandwidth; })\n      .pop();\n  console.log('Offline Track bandwidth: ' + found.bandwidth);\n  return [ found ];\n}\n\nfunction initStorage(player) {\n  // Create a storage instance and configure it with optional\n  // callbacks. Set the progress callback so that we visualize\n  // download progress and override the track selection callback.\n  window.storage = new shaka.offline.Storage(player);\n  window.storage.configure({\n    offline: {\n      progressCallback: setDownloadProgress,\n      trackSelectionCallback: selectTracks\n    }\n  });\n}\n\nfunction listContent() {\n  return window.storage.list();\n}\n\nfunction playContent(content) {\n  window.player.load(content.offlineUri);\n}\n\nfunction removeContent(content) {\n  return window.storage.remove(content.offlineUri);\n}\n\nfunction downloadContent(manifestUri, title) {\n  // Construct a metadata object to be stored along side the content.\n  // This can hold any information the app wants to be stored with the\n  // content.\n  const metadata = {\n    'title': title,\n    'downloaded': Date()\n  };\n\n  return window.storage.store(manifestUri, metadata).promise;\n}\n\n/*\n * UI callback for when the download button is clicked. This will\n * disable the button while the download is in progress, start the\n * download, and refresh the content list once the download is\n * complete.\n */\nfunction onDownloadClick() {\n  const downloadButton = document.getElementById('download-button');\n  const manifestUri = document.getElementById('asset-uri-input').value;\n  const title = document.getElementById('asset-title-input').value;\n\n  // Disable the download button to prevent user from requesting\n  // another download until this download is complete.\n  downloadButton.disabled = true;\n\n  setDownloadProgress(null, 0);\n\n  // Download the content and then re-enable the download button so\n  // that more content can be downloaded.\n  downloadContent(manifestUri, title)\n    .then(function() {\n      return refreshContentList();\n    })\n    .then(function(content) {\n      setDownloadProgress(null, 1);\n      downloadButton.disabled = false;\n    })\n    .catch(function(error) {\n      // In the case of an error, re-enable the download button so\n      // that the user can try to download another item.\n      downloadButton.disabled = false;\n      onError(error);\n    });\n}\n\n/*\n * Update the online status box at the top of the page to tell the\n * user whether or not they have an internet connection.\n */\nfunction updateOnlineStatus() {\n  const signal = document.getElementById('online-signal');\n  if (navigator.onLine) {\n    signal.innerHTML = 'ONLINE';\n    signal.style.background = 'green';\n  } else {\n    signal.innerHTML = 'OFFLINE';\n    signal.style.background = 'grey';\n  }\n}\n\n/*\n * Find our progress bar and set the value to show the progress we\n * have made.\n */\nfunction setDownloadProgress(content, progress) {\n  const progressBar = document.getElementById('progress-bar');\n  progressBar.value = progress * progressBar.max;\n}\n\n/*\n * Clear our content table and repopulate it table with the current\n * list of downloaded content.\n */\nfunction refreshContentList() {\n  const contentTable = document.getElementById('content-table');\n\n  // Clear old rows from the table.\n  while (contentTable.rows.length) {\n    contentTable.deleteRow(0);\n  }\n\n  const addRow = function(content) {\n    const append = -1;\n\n    const row = contentTable.insertRow(append);\n    row.insertCell(append).innerHTML = content.offlineUri;\n    Object.keys(content.appMetadata)\n        .map(function(key) {\n          return content.appMetadata[key];\n        })\n        .forEach(function(value) {\n          row.insertCell(append).innerHTML = value;\n        });\n\n    row.insertCell(append).appendChild(createButton(\n        'PLAY',\n        function() { playContent(content); }));\n\n    row.insertCell(append).appendChild(createButton(\n        'REMOVE',\n        function() {\n          removeContent(content)\n              .then(function() { refreshContentList() });\n        }));\n  };\n\n  return listContent()\n      .then(function(content) { content.forEach(addRow); });\n};\n\n/*\n * Create a new button but do not add it to the DOM. The caller\n * will need to do that.\n */\nfunction createButton(text, action) {\n  const button = document.createElement('button');\n  button.innerHTML = text;\n  button.onclick = action;\n  return button;\n}\n\ndocument.addEventListener('DOMContentLoaded', initApp);\n```\n\n----------------------------------------\n\nTITLE: Listing Offline Content with Shaka Player\nDESCRIPTION: Retrieves a list of all content stored offline using the storage API. Returns a Promise that resolves to an array of StoredContent objects containing information about each downloaded item.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/offline.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nreturn window.storage.list();\n```\n\n----------------------------------------\n\nTITLE: Initializing Storage in Shaka Player\nDESCRIPTION: Code snippet implementing the initialization of Shaka Player's offline storage module with custom progress and track selection callbacks.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/offline.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n  // Create a storage instance and configure it with optional\n  // callbacks. Set the progress callback so that we visualize\n  // download progress and override the track selection callback.\n  window.storage = new shaka.offline.Storage(player);\n  window.storage.configure({\n    offline: {\n      progressCallback: setDownloadProgress,\n      trackSelectionCallback: selectTracks\n    }\n  });\n```\n\n----------------------------------------\n\nTITLE: Implementing Full Manifest Parser for Shaka Player in JavaScript\nDESCRIPTION: This code snippet demonstrates a complete implementation of a custom manifest parser for Shaka Player. It includes methods for loading the manifest, creating variants and streams, and generating segment references. The parser handles video, audio, and text streams, setting up necessary metadata for each.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/manifest-parser.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nMyManifestParser.prototype.loadManifest_ = function(data) {\n  // |data| is the response data from load(); but in this example, we ignore it.\n\n  // The arguments are only used for live.\n  const timeline = new shaka.media.PresentationTimeline(null, 0);\n  timeline.setDuration(3600);  // seconds\n\n  return {\n    presentationTimeline: timeline,\n    offlineSessionIds: [],\n    variants: [\n      this.loadVariant_(true, true),\n      this.loadVariant_(true, false)\n    ],\n    textStreams: [\n      this.loadStream_('text'),\n      this.loadStream_('text')\n    ]\n  };\n};\n\nMyManifestParser.prototype.loadVariant_ = function(hasVideo, hasAudio) {\n  console.assert(hasVideo || hasAudio);\n\n  return {\n    id:        this.curId_++,  // globally unique ID\n    language:  'en',\n    primary:   false,\n    audio:     hasAudio ? this.loadStream_('audio') : null,\n    video:     hasVideo ? this.loadStream_('video') : null,\n    bandwidth: 8000,  // bits/sec, audio+video combined\n    allowedByApplication: true,  // always initially true\n    allowedByKeySystem:   true   // always initially true\n  };\n};\n\nMyManifestParser.prototype.loadStream_ = function(type) {\n  const getUris = function() { return ['https://example.com/init']; };\n  const initSegmentReference = new shaka.media.InitSegmentReference(getUris,\n      /* startByte= */ 0, /* endByte= */ null);\n\n  const index = new shaka.media.SegmentIndex([\n    // Times are in seconds, relative to the presentation\n    this.loadReference_(0, 0, 10, initSegmentReference),\n    this.loadReference_(1, 10, 20, initSegmentReference),\n    this.loadReference_(2, 20, 30, initSegmentReference),\n  ]);\n\n  const id = this.curId_++;\n  return {\n    id: id,  // globally unique ID\n    originalId: id, // original ID from manifest, if any\n    createSegmentIndex:     function() { return Promise.resolve(); },\n    segmentIndex:           index,\n    mimeType: type == 'video' ?\n        'video/webm' : (type == 'audio' ? 'audio/webm' : 'text/vtt'),\n    codecs:    type == 'video' ? 'vp9' : (type == 'audio' ? 'vorbis' : ''),\n    frameRate: type == 'video' ? 24 : undefined,\n    pixelAspectRatio: type == 'video' ? 4 / 3 : undefined,\n    bandwidth: 4000,  // bits/sec\n    width:     type == 'video' ? 640 : undefined,\n    height:    type == 'video' ? 480 : undefined,\n    kind:      type == 'text' ? 'subtitles' : undefined,\n    channelsCount: type == 'audio' ? 2 : undefined,\n    encrypted: false,\n    drmInfos:  [],\n    keyIds:    new Set(),\n    language:  'en',\n    label:     'my_stream',\n    type:      type,\n    primary:   false,\n    trickModeVideo: null,\n    emsgSchemeIdUris: null,\n    roles:     []\n    channelsCount: type == 'audio' ? 6 : null,\n    audioSamplingRate: type == 'audio' ? 44100 : null,\n    closedCaptions: new Map(),\n  };\n};\n\nMyManifestParser.prototype.loadReference_ =\n    function(position, start, end, initSegmentReference) {\n  const getUris = function() { return ['https://example.com/ref_' + position]; };\n  return new shaka.media.SegmentReference(\n      start, end, getUris,\n      /* startByte */ 0,\n      /* endByte */ null,\n      initSegmentReference,\n      /* timestampOffset */ 0,\n      /* appendWindowStart */ 0,\n      /* appendWindowEnd */ Infinity);\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Headers for DRM\nDESCRIPTION: Sets up custom headers for DRM license requests to the server.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/drm-config.md#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nplayer.configure({\n  drm: {\n    servers: {\n      'com.widevine.alpha': 'https://foo.bar/drm/widevine'\n    },\n    advanced: {\n      'com.widevine.alpha': {\n        'headers': {\n          'customHeader1': 'value1',\n          'customHeader2': 'value2'\n        }\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Programmatic Shaka Player UI setup with JavaScript\nDESCRIPTION: JavaScript code for programmatically setting up Shaka Player UI after page load. Demonstrates how to initialize the player, create the UI overlay, and configure Chromecast support without relying on HTML data attributes.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/ui.md#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// \"local\" because it is for local playback only, as opposed to the player proxy\n// object, which will route your calls to the ChromeCast receiver as necessary.\nconst localPlayer = new shaka.Player();\n// \"Overlay\" because the UI will add DOM elements inside the container,\n// to visually overlay the video element\nconst ui = new shaka.ui.Overlay(localPlayer, videoContainerElement,\n  videoElement);\n// Now that the player has been configured to be part of a UI, attach it to the\n// video.\nawait localPlayer.attach(videoElement);\n\n// As with DOM-based setup, get access to the UI controls and player from the\n// UI.\nconst controls = ui.getControls();\n\n// These are cast-enabled proxy objects, so that when you are casting,\n// your API calls will be routed to the remote playback session.\nconst player = controls.getPlayer();\nconst video = controls.getVideo();\n\n// Programmatically configure the Chromecast Receiver App Id and Android\n// Receiver Compatibility.\nui.configure({\n  // Set the castReceiverAppId\n  'castReceiverAppId': '07AEE832',\n  // Enable casting to native Android Apps (e.g. Android TV Apps)\n  'castAndroidReceiverCompatible': true,\n});\n```\n\n----------------------------------------\n\nTITLE: Downloading Content with Shaka Player Storage\nDESCRIPTION: Stores video content offline with Shaka Player's storage API, including custom metadata like title and download date. Returns an operation that resolves to a stored content instance.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/offline.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n  // Construct a metadata object to be stored alongside the content.\n  // This can hold any information the app wants to be stored with\n  // the content.\n  const metadata = {\n    'title': title,\n    'downloaded': new Date()\n  };\n\n  return window.storage.store(manifestUri, metadata);\n```\n\n----------------------------------------\n\nTITLE: Configuring Widevine Service Certificates in Shaka Player\nDESCRIPTION: This code demonstrates how to fetch and configure a Widevine service certificate in a Shaka Player instance. It shows both direct certificate configuration and URI-based configuration using both short-form and long-form approaches. The certificate is loaded before calling player.load() and persists across multiple loads.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/widevine-service-certs.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// This is an example of loading the certificate from your site at runtime.\n// You could also choose to bundle it into your JavaScript as a Uint8Array.\nconst req = await fetch('https://example.com/service.cert');\nconst cert = new Uint8Array(await req.arrayBuffer());\n\n// This is the short form for configuration of a certificate:\nplayer.configure('drm.advanced.com\\\\.widevine\\\\.alpha.serverCertificate',\n                 cert);\n\n// This is the long form:\nplayer.configure({\n  drm: {\n    advanced: {\n      'com.widevine.alpha': {\n        'serverCertificate': cert,\n      },\n    },\n  },\n});\n\n\n// This is the short form for configuration of a certificate URI:\nplayer.configure('drm.advanced.com\\\\.widevine\\\\.alpha.serverCertificateUri',\n                 'https://example.com/service.cert');\n\n// This is the long form:\nplayer.configure({\n  drm: {\n    advanced: {\n      'com.widevine.alpha': {\n        'serverCertificateUri': 'https://example.com/service.cert',\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Clear Key DRM\nDESCRIPTION: Sets up Clear Key DRM configuration with hex-encoded key IDs and content keys for testing and integration.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/drm-config.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nplayer.configure({\n  drm: {\n    clearKeys: {\n      'deadbeefdeadbeefdeadbeefdeadbeef': '18675309186753091867530918675309',\n      '02030507011013017019023029031037': '03050701302303204201080425098033'\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Manifest Parser Plugin in JavaScript\nDESCRIPTION: This code snippet demonstrates the implementation of a custom manifest parser plugin for Shaka Player. It includes the required methods (configure, start, stop) and shows how to register the parser with the library based on file extension and MIME type.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/manifest-parser.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction MyManifestParser() {\n  this.curId_ = 0;\n  this.config_ = null;\n}\n\nMyManifestParser.prototype.configure = function(config) {\n  this.config_ = config;\n};\n\nMyManifestParser.prototype.start = async function(uri, playerInterface) {\n  const type = shaka.net.NetworkingEngine.RequestType.MANIFEST;\n  const request = {\n    uris: [uri],\n    method: 'GET',\n    retryParameters: this.config_.retryParameters\n  };\n  const response =\n      await playerInterface.networkingEngine.request(type, request).promise;\n  return this.loadManifest_(response.data);\n};\n\nMyManifestParser.prototype.stop = function() {\n  return Promise.resolve();\n};\n\n\nshaka.media.ManifestParser.registerParserByExtension('json', MyManifestParser);\nshaka.media.ManifestParser.registerParserByMime(\n    'application/json', MyManifestParser);\n```\n\n----------------------------------------\n\nTITLE: Advanced DRM Configuration with Hardware Security\nDESCRIPTION: Demonstrates advanced DRM configuration options including hardware security requirements for Widevine.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/drm-config.md#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nplayer.configure({\n  drm: {\n    servers: {\n      'com.widevine.alpha': 'https://foo.bar/drm/widevine'\n    },\n    advanced: {\n      'com.widevine.alpha': {\n        'videoRobustness': ['HW_SECURE_ALL'],\n        'audioRobustness': ['HW_SECURE_ALL']\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Clear Key License Server\nDESCRIPTION: Configures a license server for Clear Key DRM using the standard EME Clear Key license protocol.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/drm-config.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nplayer.configure({\n  drm: {\n    servers: {\n      'org.w3.clearkey': 'http://foo.bar/drm/clearkey'\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Service Worker for Shaka Player in JavaScript\nDESCRIPTION: This code snippet demonstrates how to register a service worker for use with Shaka Player. It checks for browser support, attempts to register the service worker, and logs the result.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/service-worker.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nif ('serviceWorker' in navigator) {\n  try {\n    await navigator.serviceWorker.register('/service_worker.js');\n    console.log('Service worker registered successfully');\n  } catch(e) {\n    console.error('Error registering service worker', e);\n  }\n} else {\n  console.error('Browser doesn\\'t support service workers');\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DRM License Server\nDESCRIPTION: Setting up the DRM configuration and loading the manifest in Shaka Player\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/license-wrapping.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n  player.configure({\n    drm: {\n      servers: { 'com.widevine.alpha': licenseServer }\n    }\n  });\n\n  // Try to load a manifest.\n  try {\n    await player.load(manifestUri);\n    // The video should now be playing!\n  } catch(e) {\n    onError(e);\n  }\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous Credentials in Shaka Player\nDESCRIPTION: This snippet shows how to implement asynchronous credentials by making an additional request for an authorization token before completing the license request.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/license-server-auth.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst licenseServer = 'https://cwip-shaka-proxy.appspot.com/header_auth';\nconst authTokenServer = 'https://cwip-shaka-proxy.appspot.com/get_auth_token';\nconst authToken = null;\n```\n\nLANGUAGE: javascript\nCODE:\n```\n  player.getNetworkingEngine().registerRequestFilter(function(type, request, context) {\n    // Only add headers to license requests:\n    if (type != shaka.net.NetworkingEngine.RequestType.LICENSE) return;\n\n    // If we already know the token, attach it right away:\n    if (authToken) {\n      console.log('Have auth token, attaching to license request.');\n      request.headers['CWIP-Auth-Header'] = authToken;\n      return;\n    }\n\n    console.log('Need auth token.');\n    // Start an asynchronous request, and return a Promise chain based on that.\n    const authRequest = {\n      uris: [authTokenServer],\n      method: 'POST',\n    };\n    const requestType = shaka.net.NetworkingEngine.RequestType.APP;\n    return player.getNetworkingEngine().request(requestType, authRequest)\n        .promise.then(function(response) {\n          // This endpoint responds with the value we should use in the header.\n          authToken = shaka.util.StringUtils.fromUTF8(response.data);\n          console.log('Received auth token', authToken);\n          request.headers['CWIP-Auth-Header'] = authToken;\n          console.log('License request can now continue.');\n        });\n  });\n```\n\n----------------------------------------\n\nTITLE: Configuring DASH Key Systems Mapping\nDESCRIPTION: Updates the DASH key systems mapping by scheme URI to specify which DRM systems to use for content protection.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/drm-config.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nplayer.configure({\n  manifest: {\n    dash: {\n      keySystemsByURI: {\n        'urn:uuid:9a04f079-9840-4286-ab92-e65be0885f95': 'com.microsoft.playready.recommendation',\n        'urn:uuid:79f0049a-4098-8642-ab92-e65be0885f95': 'com.microsoft.playready.recommendation',\n      }\n  }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Registering HTTP plugin for file:// requests in Electron with Shaka Player\nDESCRIPTION: This snippet shows how to register the existing HTTP plugin to handle file:// requests in environments like Electron where loading local files is appropriate. It should be called before loading a manifest.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/faq.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nshaka.net.NetworkingEngine.registerScheme('file', shaka.net.HttpXHRPlugin.parse);\n```\n\n----------------------------------------\n\nTITLE: Implementing FairPlay License Wrapping in JavaScript\nDESCRIPTION: This snippet shows how to implement license wrapping for FairPlay in Shaka Player. It includes both request and response filters to handle custom formats required by some FairPlay servers.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/fairplay.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nplayer.getNetworkingEngine().registerRequestFilter((type, request, context) => {\n  if (type != shaka.net.NetworkingEngine.RequestType.LICENSE) {\n    return;\n  }\n\n  const originalPayload = new Uint8Array(request.body);\n  const base64Payload =\n      shaka.util.Uint8ArrayUtils.toStandardBase64(originalPayload);\n  const params = 'spc=' + encodeURIComponent(base64Payload);\n  request.headers['Content-Type'] = 'application/x-www-form-urlencoded';\n  request.body = shaka.util.StringUtils.toUTF8(params);\n});\n\nplayer.getNetworkingEngine().registerResponseFilter((type, response, context) => {\n  if (type != shaka.net.NetworkingEngine.RequestType.LICENSE) {\n    return;\n  }\n\n  let responseText = shaka.util.StringUtils.fromUTF8(response.data);\n  // Trim whitespace.\n  responseText = responseText.trim();\n\n  // Look for <ckc> wrapper and remove it.\n  if (responseText.substr(0, 5) === '<ckc>' &&\n      responseText.substr(-6) === '</ckc>') {\n    responseText = responseText.slice(5, -6);\n  }\n\n  // Decode the base64-encoded data into the format the browser expects.\n  response.data = shaka.util.Uint8ArrayUtils.fromBase64(responseText).buffer;\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Header Authentication for Shaka Player\nDESCRIPTION: This snippet demonstrates how to configure header authentication for the license server. It shows two methods: using a custom config and registering a request filter.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/license-server-auth.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nplayer.configure({\n  drm: {\n    servers: {\n      'com.widevine.alpha': 'https://cwip-shaka-proxy.appspot.com/header_auth'\n    },\n    advanced: {\n      'com.widevine.alpha': {\n        'headers': {\n          // This is the specific header name and value the server wants:\n          'CWIP-Auth-Header': 'VGhpc0lzQVRlc3QK',\n        }\n      }\n    }\n  }\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\n  player.getNetworkingEngine().registerRequestFilter(function(type, request, context) {\n    // Only add headers to license requests:\n    if (type == shaka.net.NetworkingEngine.RequestType.LICENSE) {\n      // This is the specific header name and value the server wants:\n      request.headers['CWIP-Auth-Header'] = 'VGhpc0lzQVRlc3QK';\n    }\n  });\n```\n\n----------------------------------------\n\nTITLE: Initializing Shaka Player with Widevine License Server\nDESCRIPTION: This snippet sets up the manifest URI and license server URL for a Widevine-protected stream. It also configures the player to use the specified license server before loading the manifest.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/license-server-auth.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst manifestUri =\n    'https://storage.googleapis.com/shaka-demo-assets/sintel-widevine/dash.mpd';\nconst licenseServer = 'https://cwip-shaka-proxy.appspot.com/no_auth';\n```\n\nLANGUAGE: javascript\nCODE:\n```\n  player.configure({\n    drm: {\n      servers: { 'com.widevine.alpha': licenseServer }\n    }\n  });\n\n  // Try to load a manifest.\n  try {\n    await player.load(manifestUri);\n    // The video should now be playing!  \n  } catch (e) {\n    onError(e);\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring Chromecast support in Shaka Player UI\nDESCRIPTION: HTML and JavaScript code for enabling Chromecast support in Shaka Player. Shows how to set a Cast Application ID and implement a listener for cast status changes.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/ui.md#2025-04-17_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!-- Add a data-shaka-player-cast-receiver-id tag to provide a Cast Application ID that\n           the cast button will cast to; the value provided here is the sample cast receiver. -->\n    <div data-shaka-player-container style=\"max-width:40em\"\n         data-shaka-player-cast-receiver-id=\"07AEE832\">\n    </div>\n```\n\nLANGUAGE: javascript\nCODE:\n```\n  controls.addEventListener('caststatuschanged', onCastStatusChanged);\n\n  function onCastStatusChanged(event) {\n    const newCastStatus = event['newStatus'];\n    // Handle cast status change\n    console.log('The new cast status is: ' + newCastStatus);\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring Network Retry Parameters in Shaka Player (JavaScript)\nDESCRIPTION: This snippet demonstrates the structure of retry parameters for different types of requests in Shaka Player. It includes settings for timeout, stall timeout, connection timeout, maximum attempts, base delay, backoff factor, and fuzz factor.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/network-and-buffering-config.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nretryParameters: {\n  timeout: 30000,       // timeout in ms, after which we abort\n  stallTimeout: 5000,  // stall timeout in ms, after which we abort\n  connectionTimeout: 10000, // connection timeout in ms, after which we abort\n  maxAttempts: 2,   // the maximum number of requests before we fail\n  baseDelay: 1000,  // the base delay in ms between retries\n  backoffFactor: 2, // the multiplicative backoff factor between retries\n  fuzzFactor: 0.5,  // the fuzz factor to apply to each retry delay\n}\n```\n\n----------------------------------------\n\nTITLE: Complete JavaScript Implementation\nDESCRIPTION: Full JavaScript implementation for initializing Shaka Player with LCEVC enhancement, including error handling and event listeners\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/lcevc.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst manifestUri = 'https://dyctis843rxh5.cloudfront.net/vnIAZIaowG1K7qOt/master.m3u8';\n\nasync function init() {\n  const video = document.getElementById('video');\n  const ui = video['ui'];\n  const controls = ui.getControls();\n  const player = controls.getPlayer();\n\n  player.configure('lcevc.enabled', true);\n\n  player.addEventListener('error', onError);\n  controls.addEventListener('error', onError);\n\n  try {\n    await player.load(manifestUri);\n    console.log('The video has now been loaded!');\n  } catch (error) {\n    onError(error);\n  }\n}\n\nfunction onError(error) {\n  console.error('Error', error);\n}\n\ndocument.addEventListener('shaka-ui-loaded', init);\ndocument.addEventListener('shaka-ui-load-failed', onError);\n```\n\n----------------------------------------\n\nTITLE: Requesting VOD Stream with Server Side Ads\nDESCRIPTION: Creates a VOD stream request for server side ad insertion. The request contains content identifiers that the IMA SDK uses to retrieve the appropriate VOD stream with dynamically inserted ads.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/ad_monetization.md#2025-04-17_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst streamRequest = new google.ima.dai.api.VODStreamRequest();\n// Your stream information will go here. We are using IMA's sample stream info\n// in this tutorial.\nstreamRequest.contentSourceId = '2528370';\nstreamRequest.videoId = 'tears-of-steel';\nconst uri = await adManager.requestServerSideStream(streamRequest);\nplayer.load(uri);\n```\n\n----------------------------------------\n\nTITLE: Integrating EZDRM with Modern EME in JavaScript\nDESCRIPTION: This code shows how to integrate EZDRM with Modern EME in Shaka Player. It registers request and response filters specific to EZDRM's FairPlay implementation.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/fairplay.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nplayer.getNetworkingEngine()\n    .registerRequestFilter(shaka.drm.FairPlay.ezdrmFairPlayRequest);\nplayer.getNetworkingEngine()\n    .registerResponseFilter(shaka.drm.FairPlay.commonFairPlayResponse);\n```\n\n----------------------------------------\n\nTITLE: Implementing Application-Level Redirect Response Filter in Shaka Player\nDESCRIPTION: A response filter implementation that handles Application-Level Redirects by detecting URLs in response bodies and making follow-up requests. The filter specifically targets manifest requests for cookie-based authentication, checks for 'http' at the start of responses, and handles the redirect while preserving cross-site credentials.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/application-level-redirects.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// The UTF-8 characters \"h\", \"t\", \"t\", and \"p\".\nconst HTTP_IN_HEX = 0x68747470;\n\nconst RequestType = shaka.net.NetworkingEngine.RequestType;\n\nplayer.getNetworkingEngine().registerResponseFilter(async (type, response, context) => {\n  // NOTE: If the system requires an ALR for both manifests and segments,\n  // remove this RequestType check.\n  if (type != RequestType.MANIFEST) {\n    return;\n  }\n\n  const dataView = new DataView(response.data);\n  if (response.data.byteLength < 4 ||\n      dataView.getUint32(0) != HTTP_IN_HEX) {\n    // Our ALRs are detected by a response body which is a URL.\n    // This doesn't start with \"http\", so it is not an ALR.\n    return;\n  }\n\n  // It's an Application-Level Redirect (ALR).  That requires us to get the new\n  // URL and follow it.\n\n  // Interpret the response data as a URL string.\n  const responseAsString = shaka.util.StringUtils.fromUTF8(response.data);\n\n  // For maximum flexibility for those who will copy and paste this whole code\n  // snippet, check the type of the request to determine what retry parameters\n  // to use.  Those who are reading and customizing this code can hard-code the\n  // parameters instead.\n  let retryParameters;\n  if (type == RequestType.MANIFEST) {\n    retryParameters = player.getConfiguration().manifest.retryParameters;\n  } else if (type == RequestType.SEGMENT) {\n    retryParameters = player.getConfiguration().streaming.retryParameters;\n  } else if (type == RequestType.LICENSE) {\n    retryParameters = player.getConfiguration().drm.retryParameters;\n  } else {\n    retryParameters = shaka.net.NetworkingEngine.defaultRetryParameters();\n  }\n\n  // Make another request for the redirect URL.\n  const uris = [responseAsString];\n  const redirectRequest =\n      shaka.net.NetworkingEngine.makeRequest(uris, retryParameters);\n\n  // NOTE: Only do this if the purpose of the redirect is authentication.  If\n  // the ALR is meant for something like load-balancing, remove the next line.\n  redirectRequest.allowCrossSiteCredentials = true;\n\n  const requestOperation =\n      player.getNetworkingEngine().request(type, redirectRequest);\n  const redirectResponse = await requestOperation.promise;\n\n  // Modify the original response to contain the results of the redirect\n  // response.\n  response.data = redirectResponse.data;\n  response.headers = redirectResponse.headers;\n  response.uri = redirectResponse.uri;\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Client Side Ad Insertion with Shaka UI\nDESCRIPTION: Initializes the client side ad logic with Shaka Player's UI library. Uses the UI's built-in client side ad container to display ads within the player interface.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/ad_monetization.md#2025-04-17_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst adManager = player.getAdManager();\nconst video = document.getElementById('video');\nconst ui = video['ui'];\n// If you're using a non-UI build, this is the div you'll need to create\n// for your layout.  The ad manager will clear this div, when it unloads, so\n// don't pass in a div that contains non-ad elements.\nconst container = video.ui.getControls().getClientSideAdContainer();\nadManager.initClientSide(container, video);\n```\n\n----------------------------------------\n\nTITLE: Initializing MediaTailor Integration in Shaka Player with UI\nDESCRIPTION: Sets up the server-side ad logic by initializing the MediaTailor integration with Shaka UI. This retrieves necessary elements like the ad container, player, network engine, and ad manager.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/ad_monetization.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst video = document.getElementById('video');\nconst ui = video['ui'];\nconst controls = video.ui.getControls();\n// If you're using a non-UI build, this is the div you'll need to create\n// for your layout.\nconst container = controls.getServerSideAdContainer();\nconst player = controls.getPlayer();\nconst netEngine = player.getNetworkingEngine();\nconst adManager = player.getAdManager();\nadManager.initMediaTailor(container, netEngine, video);\n```\n\n----------------------------------------\n\nTITLE: Requesting a Client Side Stream with MediaTailor in Shaka Player\nDESCRIPTION: Demonstrates how to request a client-side ad insertion stream from MediaTailor. It includes setting ad parameters like asset ID and pod duration, then requests the stream and loads it into the player.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/ad_monetization.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst mediaTailorUrl = 'https://d305rncpy6ne2q.cloudfront.net/v1/session/94063eadf7d8c56e9e2edd84fdf897826a70d0df/SFP-MediaTailor-VOD-HLS-DASH/out/v1/b94f3611978f419985a18335bac9d9cb/ddb73bf548a44551a0059c346226445a/eaa5485198bf497284559efb8172425e/index.mpd';\nconst mediaTailorAdsParams = {\n  adsParams: {\n    assetid: 'test2',\n    podduration: '15',\n  },\n};\nconst uri = await adManager.requestMediaTailorStream(mediaTailorUrl, mediaTailorAdsParams);\nplayer.load(uri);\n```\n\n----------------------------------------\n\nTITLE: Implementing Parameter Authentication in Shaka Player\nDESCRIPTION: This snippet shows how to implement parameter authentication by modifying the license request URL using a request filter.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/license-server-auth.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n  player.getNetworkingEngine().registerRequestFilter(function(type, request, context) {\n    // Only add headers to license requests:\n    if (type == shaka.net.NetworkingEngine.RequestType.LICENSE) {\n      // This is the specific parameter name and value the server wants:\n      // Note that all network requests can have multiple URIs (for fallback),\n      // and therefore this is an array. But there should only be one license\n      // server URI in this tutorial.\n      request.uris[0] += '?CWIP-Auth-Param=VGhpc0lzQVRlc3QK';\n    }\n  });\n```\n\n----------------------------------------\n\nTITLE: Implementing VAST/VMAP Playback in Shaka Player\nDESCRIPTION: Shows how to integrate VAST/VMAP ads for playback without tracking. This example initializes the interstitial manager and adds a VAST ad from Google's DoubleClick service.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/ad_monetization.md#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst adManager = player.getAdManager();\nconst video = document.getElementById('video');\nconst ui = video['ui'];\n// If you're using a non-UI build, this is the div you'll need to create\n// for your layout.  The ad manager will clear this div, when it unloads, so\n// don't pass in a div that contains non-ad elements.\nconst container = video.ui.getControls().getClientSideAdContainer();\nadManager.initInterstitial(container, player, video);\nconst url = 'https://pubads.g.doubleclick.net/gampad/ads?sz=640x480&iu=/124319096/external/single_ad_samples&ciu_szs=300x250&impl=s&gdfp_req=1&env=vp&output=vast&unviewed_position_start=1&cust_params=deployment%3Ddevsite%26sample_ct%3Dlinear&correlator=';\nadManager.addAdUrlInterstitial(url);\n```\n\n----------------------------------------\n\nTITLE: Updating a SegmentIndex Periodically in JavaScript\nDESCRIPTION: This snippet demonstrates how to set up periodic updates for a SegmentIndex, which is useful for live streaming content. It shows how to evict old references and generate new ones at regular intervals.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/manifest-parser.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nindex.updateEvery(updateIntervalSeconds, () => {\n  // Evict old references\n  index.evict(windowStartTime);\n\n  // Generate new references to append to the end of the index\n  const references = [];\n  // ...\n  return references;\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing License Request Filter\nDESCRIPTION: Network request filter implementation for wrapping license requests with additional data\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/license-wrapping.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n  player.getNetworkingEngine().registerRequestFilter(function(type, request, context) {\n    // Alias some utilities provided by the library.\n    const StringUtils = shaka.util.StringUtils;\n    const Uint8ArrayUtils = shaka.util.Uint8ArrayUtils;\n\n    // Only manipulate license requests:\n    if (type == shaka.net.NetworkingEngine.RequestType.LICENSE) {\n      // Create the wrapped request structure.\n      const wrapped = {};\n\n      // Encode the raw license request in base64.\n      // The server we are using in this tutorial expects this field and this\n      // encoding for the raw request.\n      wrapped.rawLicenseRequestBase64 =\n          Uint8ArrayUtils.toBase64(new Uint8Array(request.body));\n\n      // Add whatever else we want to communicate to the server.\n      // None of these values are read by the server we are using in this\n      // tutorial.\n      // In practice, you would send what the server needs and the server would\n      // react to it.\n      wrapped.favoriteColor = 'blue';\n      wrapped.Beatles = ['John', 'Paul', 'George', 'Ringo'];\n      wrapped.bestBeatleIndex = 1;  // Paul, of course.\n      wrapped.pEqualsNP = false;  // maybe?\n\n      // Encode the wrapped request as JSON.\n      const wrappedJson = JSON.stringify(wrapped);\n      // Convert the JSON string back into an ArrayBuffer to replace the request\n      // body.\n      request.body = StringUtils.toUTF8(wrappedJson);\n    }\n  });\n```\n\n----------------------------------------\n\nTITLE: Basic Preload Implementation in Shaka Player\nDESCRIPTION: Demonstrates how to initialize a Shaka Player instance and preload a media asset. Shows handling of both successful preload operations and cases where preloading isn't supported.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/preload.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nasync function initPlayer() {\n  const player = new shaka.Player();\n  const preloadManager = await player.preload(\n      'https://storage.googleapis.com/shaka-demo-assets/angel-one/dash.mpd');\n  if (preloadManager) {\n    // The asset is something that can be preloaded. Once you have this manager,\n    // you can load it later by passing it to the load method:\n    await player.load(preloadManager);\n    // If you decide to not play the preloaded asset, you can instead destroy\n    // the preload manager:\n    await preloadManager.destroy();\n  } else {\n    // This asset is something that cannot be preloaded (for instance, a raw\n    // media file, or browser-based HLS on Safari), so the promise of the\n    // preload method yielded null.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating EZDRM with Legacy Apple Media Keys in JavaScript\nDESCRIPTION: This code demonstrates how to integrate EZDRM with legacy Apple Media Keys in Shaka Player. It installs the necessary polyfill and configures the appropriate filters and transforms.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/fairplay.md#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nshaka.polyfill.PatchedMediaKeysApple.install();\nplayer.getNetworkingEngine()\n    .registerRequestFilter(shaka.drm.FairPlay.ezdrmFairPlayRequest);\nplayer.getNetworkingEngine()\n    .registerResponseFilter(shaka.drm.FairPlay.commonFairPlayResponse);\nplayer.configure('drm.initDataTransform',\n                 shaka.drm.FairPlay.ezdrmInitDataTransform);\n```\n\n----------------------------------------\n\nTITLE: Calculating Live Edge in DASH Streaming\nDESCRIPTION: This JavaScript snippet demonstrates how to calculate the live edge position for DASH live streaming. It uses availabilityStartTime, current time, and maximum segment size to determine the appropriate playback position.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/design/current/dash-manifests.md#2025-04-17_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst ast = 1518717600;  // availabilityStartTime=\"2018-02-15T18:00:00Z\"\nconst now = 1518718680;  // (Date.now() / 1000) -> 2018-02-15T18:18:00Z\nconst maxSegmentSize = 10;  // seconds\n\nconst liveEdge = now - ast - maxSegmentSize;  // 1070\n\nvideo.currentTime = liveEdge;  // Start playing at live edge.\n// We'll start playing segments with a *presentation time* around 1070.\n```\n\n----------------------------------------\n\nTITLE: Implementing License Response Filter\nDESCRIPTION: Network response filter implementation for unwrapping license responses and extracting metadata\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/license-wrapping.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n  player.getNetworkingEngine().registerResponseFilter(function(type, response, context) {\n    // Alias some utilities provided by the library.\n    const StringUtils = shaka.util.StringUtils;\n    const Uint8ArrayUtils = shaka.util.Uint8ArrayUtils;\n\n    // Only manipulate license responses:\n    if (type == shaka.net.NetworkingEngine.RequestType.LICENSE) {\n      // This is the wrapped license, which is a JSON string.\n      const wrappedString = StringUtils.fromUTF8(response.data);\n      // Parse the JSON string into an object.\n      const wrapped = JSON.parse(wrappedString);\n\n      // This is a base64-encoded version of the raw license.\n      const rawLicenseBase64 = wrapped.rawLicenseBase64;\n      // Decode that base64 string into a Uint8Array and replace the response\n      // data.  The raw license will be fed to the Widevine CDM.\n      response.data = Uint8ArrayUtils.fromBase64(rawLicenseBase64);\n\n      // Read additional fields from the server.\n      // The server we are using in this tutorial does not send anything useful.\n      // In practice, you could send any license metadata the client might need.\n      // Here we log what the server sent to the JavaScript console for\n      // inspection.\n      console.log(wrapped);\n    }\n  });\n```\n\n----------------------------------------\n\nTITLE: Requesting Client Side Ads with IMA SDK\nDESCRIPTION: Creates an IMA AdsRequest object and uses it to request client side ads through the adManager. The ad tag URL specifies the ad content to be displayed.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/ad_monetization.md#2025-04-17_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst adsRequest = new google.ima.AdsRequest();\n// Your ad tag url should go here. We are using a sample ad tag from the\n// IMA HTML5 SDK implementation guide for this tutorial.\nadsRequest.adTagUrl = 'https://pubads.g.doubleclick.net/gampad/ads?sz=640x480&iu=/124319096/external/single_ad_samples&ciu_szs=300x250&impl=s&gdfp_req=1&env=vp&output=vast&unviewed_position_start=1&cust_params=deployment%3Ddevsite%26sample_ct%3Dlinear&correlator=';\nadManager.requestClientSideAds(adsRequest);\n```\n\n----------------------------------------\n\nTITLE: Integrating Mux with Legacy Apple Media Keys in JavaScript\nDESCRIPTION: This snippet demonstrates the integration of Mux with legacy Apple Media Keys in Shaka Player. It configures the necessary polyfill, request and response filters, and init data transform for Mux's FairPlay implementation.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/fairplay.md#2025-04-17_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nshaka.polyfill.PatchedMediaKeysApple.install();\nplayer.getNetworkingEngine()\n    .registerRequestFilter(shaka.drm.FairPlay.muxFairPlayRequest);\nplayer.getNetworkingEngine()\n    .registerResponseFilter(shaka.drm.FairPlay.commonFairPlayResponse);\nplayer.configure('drm.initDataTransform',\n                 shaka.drm.FairPlay.muxInitDataTransform);\n```\n\n----------------------------------------\n\nTITLE: Complete HTML Setup with Shaka UI and LCEVC\nDESCRIPTION: Full HTML structure for implementing Shaka Player with UI controls and LCEVC decoder\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/lcevc.md#2025-04-17_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <!-- Shaka Player UI compiled library and default CSS for player controls: -->\n    <script src=\"dist/shaka-player.ui.js\"></script>\n    <link rel=\"stylesheet\" href=\"dist/controls.css\" />\n\n    <!-- LCEVC decoder compiled library -->\n    <script src=\"https://unpkg.com/lcevc_dec.js@1.2.1/dist/lcevc_dec.min.js\"></script>\n\n    <!-- Application source: -->\n    <script src=\"app.js\"></script>\n  </head>\n\n  <body>\n    <!-- The data-shaka-player-container tag will make the UI library place the controls in this div. -->\n    <div data-shaka-player-container style=\"max-width:40em\">\n      <!-- The data-shaka-player tag will make the UI library use this video element. -->\n      <video data-shaka-player id=\"video\" style=\"width:100%;height:100%\"></video>\n    </div>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Side Ad Rendering Settings\nDESCRIPTION: Sets up and updates ad rendering settings for client side ads. These settings control how ads are displayed and behavior after ad breaks complete.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/ad_monetization.md#2025-04-17_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst adsRenderingSettings = new google.ima.AdsRenderingSettings();\nadsRenderingSettings.restoreCustomPlaybackStateOnAdBreakComplete = true;\nadManager.initClientSide(container, video, adsRenderingSettings);\n// Updates the ads rendering settings.\nadManager.updateClientSideAdsRenderingSettings(adsRenderingSettings);\n```\n\n----------------------------------------\n\nTITLE: Requesting a Server Side Stream with MediaTailor in Shaka Player\nDESCRIPTION: Shows the process for requesting a server-side ad insertion stream from MediaTailor. Unlike client-side insertion, this requires only the MediaTailor URL without additional ad parameters.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/ad_monetization.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst mediaTailorUrl = 'https://ad391cc0d55b44c6a86d232548adc225.mediatailor.us-east-1.amazonaws.com/v1/session/d02fedbbc5a68596164208dd24e9b48aa60dadc7/singssai/master.m3u8';\nconst uri = await adManager.requestMediaTailorStream(mediaTailorUrl);\nplayer.load(uri);\n```\n\n----------------------------------------\n\nTITLE: Implementing Lazy-Loading Localization in Shaka Player\nDESCRIPTION: Implementation of lazy-loading locale data on demand. Sets up an event listener to automatically fetch and load translations when unknown locales are requested.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/ui-customization.md#2025-04-17_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst controls = ui.getControls();\nconst localization = controls.getLocalization();\n\nlocalization.addEventListener('unknown-locales', async (e) => {\n  for (const locale of e.locales) {\n    const response = await fetch('ui/locales/' + locale + '.json');     // <----- JSON translation URL here\n    const translations = await response.json();\n    const translation_map = new Map(Object.entries(translations));\n    localization.insert(locale, translation_map);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring UI Control Panel Elements\nDESCRIPTION: Configuration for adding custom buttons to the UI control panel. Shows how to specify the order of controls including both built-in and custom elements.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/ui-customization.md#2025-04-17_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nuiConfig['controlPanelElements'] = ['rewind', 'fast_forward', 'skip'];\n```\n\n----------------------------------------\n\nTITLE: Initializing Server Side Ad Insertion with Shaka UI\nDESCRIPTION: Initializes the server side ad logic with Shaka Player's UI library. Uses the UI's built-in server side ad container to display ads within the player interface.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/ad_monetization.md#2025-04-17_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst adManager = player.getAdManager();\nconst video = document.getElementById('video');\nconst ui = video['ui'];\n// If you're using a non-UI build, this is the div you'll need to create\n// for your layout.\nconst container = video.ui.getControls().getServerSideAdContainer();\nadManager.initServerSide(container, video);\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Robustness Levels\nDESCRIPTION: Sets up multiple robustness levels for both hardware and software security in Widevine DRM.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/drm-config.md#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nplayer.configure({\n  drm: {\n    servers: {\n      'com.widevine.alpha': 'https://foo.bar/drm/widevine'\n    },\n    advanced: {\n      'com.widevine.alpha': {\n        'videoRobustness': ['HW_SECURE_ALL', 'SW_SECURE_CRYPTO'],\n        'audioRobustness': ['HW_SECURE_ALL', 'SW_SECURE_CRYPTO']\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Skip Button in Shaka Player\nDESCRIPTION: Implementation of a custom UI button that allows users to skip to the next video. Demonstrates creating a custom element class, implementing click handling, and registering the element with Shaka Controls.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/ui-customization.md#2025-04-17_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// skipButton.js\n\n// Use shaka.ui.Element as a base class\nmyapp.SkipButton = class extends shaka.ui.Element {\n  constructor(parent, controls) {\n    super(parent, controls);\n\n    // The actual button that will be displayed\n    this.button_ = document.createElement('button');\n    this.button_.textContent = 'Skip current video';\n    this.parent.appendChild(this.button_);\n\n    // Listen for clicks on the button to start the next playback\n    this.eventManager.listen(this.button_, 'click', () => {\n      const nextManifest = /* Your logic to pick the next video to be played */\n        myapp.getNextManifest();\n\n      // shaka.ui.Element gives us access to the player object as member of the class\n      this.player.load(nextManifest);\n    });\n  }\n};\n\n\n// Factory that will create a button at run time.\nmyapp.SkipButton.Factory = class {\n  create(rootElement, controls) {\n    return new myapp.SkipButton(rootElement, controls);\n  }\n};\n\n// Register our factory with the controls, so controls can create button instances.\nshaka.ui.Controls.registerElement(\n  /* This name will serve as a reference to the button in the UI configuration object */ 'skip',\n  new myapp.SkipButton.Factory());\n```\n\n----------------------------------------\n\nTITLE: Integrating Conax with Legacy Apple Media Keys in JavaScript\nDESCRIPTION: This code demonstrates the integration of Conax with legacy Apple Media Keys in Shaka Player. It configures the necessary polyfill, filters, and data transform for Conax's FairPlay implementation.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/fairplay.md#2025-04-17_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nshaka.polyfill.PatchedMediaKeysApple.install();\nplayer.getNetworkingEngine()\n    .registerRequestFilter(shaka.drm.FairPlay.conaxFairPlayRequest);\nplayer.getNetworkingEngine()\n    .registerResponseFilter(shaka.drm.FairPlay.commonFairPlayResponse);\nplayer.configure('drm.initDataTransform',\n                 shaka.drm.FairPlay.conaxInitDataTransform);\n```\n\n----------------------------------------\n\nTITLE: Configuring Network Requests for Limited Ads Mode\nDESCRIPTION: Sets up appropriate request filtering for limited ads mode (when cookies are disabled). This ensures manifest and segment requests are made without credentials when the user hasn't given consent for cookies.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/ad_monetization.md#2025-04-17_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n  player.getNetworkingEngine().registerRequestFilter(function(type, request, context) {\n    if (type == shaka.net.NetworkingEngine.RequestType.MANIFEST ||\n        type == shaka.net.NetworkingEngine.RequestType.SEGMENT) {\n      request.withCredentials = false;\n    }\n  });\n```\n\n----------------------------------------\n\nTITLE: Setting Up Custom Ad Manager Implementation\nDESCRIPTION: Shows how to configure Shaka Player to use a custom ad manager implementation. This allows for integration with ad platforms not supported by Shaka's built-in IMA integration.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/ad_monetization.md#2025-04-17_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n// myapp.CustomAdManager is a placeholder name for your ad manager implementation.\nshaka.Player.setAdManagerFactory(() => new myapp.CustomAdManager());\n```\n\n----------------------------------------\n\nTITLE: Creating a SegmentIndex with SegmentReferences in JavaScript\nDESCRIPTION: This code illustrates how to create a SegmentIndex for a manifest parser by mapping custom segment data to Shaka Player's SegmentReference objects. It shows how to handle URI creation and set appropriate parameters for each segment.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/manifest-parser.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst references = refs.map(function(r) {\n  // Should return an array of possible URI choices; this is used for failover\n  // in the event of network error.  This is a function to defer calculations.\n  const getUris = function() { return [r.uri]; };\n\n  return new shaka.media.SegmentReference(\n      r.start, r.end, getUris,\n      /* startByte */ 0,\n      /* endByte */ null,\n      initSegmentReference,\n      /* timestampOffset */ 0,\n      /* appendWindowStart */ 0,\n      /* appendWindowEnd */ Infinity);\n});\n\nconst index = new shaka.media.SegmentIndex(references);\n```\n\n----------------------------------------\n\nTITLE: Integrating Verimatrix with Legacy Apple Media Keys in JavaScript\nDESCRIPTION: This snippet shows how to integrate Verimatrix with legacy Apple Media Keys in Shaka Player. It sets up the necessary polyfill, request and response filters, and init data transform.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/fairplay.md#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nshaka.polyfill.PatchedMediaKeysApple.install();\nplayer.getNetworkingEngine()\n    .registerRequestFilter(shaka.drm.FairPlay.verimatrixFairPlayRequest);\nplayer.getNetworkingEngine()\n    .registerResponseFilter(shaka.drm.FairPlay.commonFairPlayResponse);\nplayer.configure('drm.initDataTransform',\n                 shaka.drm.FairPlay.verimatrixInitDataTransform);\n```\n\n----------------------------------------\n\nTITLE: Preload with Custom Parameters in Shaka Player\nDESCRIPTION: Shows how to preload a media asset with specific start time and MIME type parameters. This allows for more granular control over the preloading process.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/preload.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst preloadManager = await player.preload(\n    'https://storage.googleapis.com/shaka-demo-assets/angel-one/dash.mpd',\n    15, 'application/dash+xml');\n```\n\n----------------------------------------\n\nTITLE: Custom EZDRM License Server URL Transformation in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a custom request filter for EZDRM to transform the license server URL, typically to add a content ID. This is useful when the default URL transformation is not sufficient.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/fairplay.md#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nplayer.getNetworkingEngine().registerRequestFilter((type, request, context) => {\n  if (type != shaka.net.NetworkingEngine.RequestType.LICENSE) {\n    return;\n  }\n  const uri = request.uris[0];\n  const contentId = shaka.drm.FairPlay.defaultGetContentId(request.initData);\n  const newUri = uri.replace('^assetId^', contentId);\n  request.uris = [newUri];\n  request.headers['Content-Type'] = 'application/octet-stream'\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Caching Service Worker for Shaka Player in JavaScript\nDESCRIPTION: This code snippet shows the implementation of a caching service worker for use with Shaka Player. It defines functions for determining which files to cache, handling fetch requests, and caching responses with a custom header for Shaka Player compatibility.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/service-worker.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst CACHE_NAME = 'segment-cache-v1';\n\nfunction shouldCache(url) {\n  return url.endsWith('.mp4') || url.endsWith('.m4s');\n}\n\nfunction loadFromCacheOrFetch(request) {\n  return caches.open(CACHE_NAME).then(function(cache) {\n    return cache.match(request).then(function(response) {\n      if (response) {\n        // The custom header was added before putting it in the cache.\n        console.log('Handling cached request', request.url);\n        return response;\n      }\n\n      // Request not cached, make a real request for the file.\n      return fetch(request).then(function(response) {\n        // Cache any successfully request for an MP4 segment.  Service\n        // workers cannot cache 206 (Partial Content).  This means that\n        // content that uses range requests (e.g. SegmentBase) will require\n        // more work.\n        if (response.ok && response.status != 206 && shouldCache(request.url)) {\n          console.log('Caching MP4 segment', request.url);\n          cacheResponse(cache, request, response);\n        }\n\n        return response;\n      });\n    });\n  })\n}\n\nfunction cacheResponse(cache, request, response) {\n  // Response objects are read-only, so to add our custom header, we need to\n  // recreate the object.\n  const init = {\n    status: response.status,\n    statusText: response.statusText,\n    headers: {'X-Shaka-From-Cache': true}\n  };\n\n  response.headers.forEach(function(value, key) {\n    init.headers[key] = value;\n  });\n\n  // Response objects are single use.  This means we need to call clone() so\n  // we can both store the ArrayBuffer and give the response to the page.\n  return response.clone().arrayBuffer().then(function(ab) {\n    cache.put(request, new Response(ab, init));\n  });\n}\n\n\nself.addEventListener('fetch', function(event) {\n  event.respondWith(loadFromCacheOrFetch(event.request));\n});\n```\n\n----------------------------------------\n\nTITLE: Setting FairPlay Server Certificate in JavaScript\nDESCRIPTION: This snippet shows two methods of setting the FairPlay server certificate in Shaka Player: directly providing the certificate or setting a URI for Shaka to fetch it.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/fairplay.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst req = await fetch('https://example.com/cert.der');\nconst cert = await req.arrayBuffer();\n\nplayer.configure('drm.advanced.com\\\\.apple\\\\.fps.serverCertificate',\n                 new Uint8Array(cert));\n```\n\nLANGUAGE: javascript\nCODE:\n```\nplayer.configure('drm.advanced.com\\\\.apple\\\\.fps.serverCertificateUri',\n                 'https://example.com/cert.der');\n```\n\n----------------------------------------\n\nTITLE: Saving Preload State in Shaka Player\nDESCRIPTION: Demonstrates how to save the current playback state using the unloadAndSavePreload method, which creates a preload manager for the currently playing asset while unloading the player.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/preload.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// This both unloads the player, and creates a preload manager for the currently\n// playing asset.\nconst preloadManager = await player.unloadAndSavePreload();\n```\n\n----------------------------------------\n\nTITLE: Configuring Persistent Licenses for Protected Content\nDESCRIPTION: This code snippet demonstrates how to configure Shaka Player's storage to use persistent or non-persistent licenses for protected content. It includes options for different browser support scenarios.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/offline.md#2025-04-17_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nusePersistentLicense: false\n```\n\nLANGUAGE: javascript\nCODE:\n```\nusePersistentLicense: true\n```\n\n----------------------------------------\n\nTITLE: Auto-loading content with source tag in Shaka Player UI\nDESCRIPTION: HTML example showing how to auto-load content using the source tag within the video element. This approach allows automatic media loading without JavaScript initialization.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/ui.md#2025-04-17_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n    <div data-shaka-player-container style=\"max-width:40em\"\n         data-shaka-player-cast-receiver-id=\"07AEE832\">\n      <video autoplay data-shaka-player id=\"video\" style=\"width:100%;height:100%\">\n        <!-- The manifest url in the src attribute will be auto loaded -->\n        <source src=\"https://storage.googleapis.com/shaka-demo-assets/angel-one/dash.mpd\"/>\n      </video>\n    </div>\n```\n\n----------------------------------------\n\nTITLE: Auto-loading content with backup sources in Shaka Player UI\nDESCRIPTION: HTML setup for providing backup manifest URLs using multiple source tags. Shows how to implement failover sources that will be tried in sequence if earlier sources fail to load.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/ui.md#2025-04-17_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n    <div data-shaka-player-container style=\"max-width:40em\"\n         data-shaka-player-cast-receiver-id=\"07AEE832\">\n      <video autoplay data-shaka-player id=\"video\" style=\"width:100%;height:100%\">\n        <!-- Try this first -->\n        <source src=\"https://storage.googleapis.com/shaka-demo-assets/angel-one/dash.mpd\"/>\n        <!-- Try this if the first one has failed -->\n        <source src=\"https://storage.googleapis.com/shaka-demo-assets/angel-one-hls-apple/master.m3u8\"/>\n      </video>\n    </div>\n```\n\n----------------------------------------\n\nTITLE: Loading DASH manifest from Blob URL in Shaka Player\nDESCRIPTION: Loads a DASH MPD manifest from a computed blob URL with a specific MIME type. Requires startTime parameter to set the beginning playback position.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/blob-url.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nplayer.load(computedMpdBlobURL, startTime, 'application/dash+xml');\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Content ID Derivation for FairPlay in JavaScript\nDESCRIPTION: This code snippet demonstrates how to specify a custom init data transform for FairPlay content that uses custom signaling for the content ID. It's typically used with legacy Apple Media Keys.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/fairplay.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nplayer.configure('drm.initDataTransform', (initData, initDataType, drmInfo) => {\n  if (initDataType != 'skd') {\n    // it is possible to get the skd urls from drmInfo, if necessary\n    const skdUriSet = drmInfo.keySystemUris;\n    // now you can handle it especially if necessary\n    // handleSkdUris(skdUriSet);\n    return initData;\n  }\n  // 'initData' is a buffer containing an 'skd://' URL as a UTF-8 string.\n  const skdUri = shaka.util.StringUtils.fromBytesAutoDetect(initData);\n  const contentId = getMyContentId(skdUri);\n  const cert = drmInfo.serverCertificate;\n  return shaka.drm.FairPlay.initDataTransform(initData, contentId, cert);\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling VR in Shaka Player UI\nDESCRIPTION: JavaScript configuration for enabling VR content playback in Shaka Player. Shows how to configure VR mode through the UI configuration object.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/ui.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  'displayInVrMode': true\n}\nui.configure(config);\n```\n\n----------------------------------------\n\nTITLE: Auto-loading content with src attribute in Shaka Player UI\nDESCRIPTION: HTML example showing how to auto-load content by providing the src attribute on the video element. This method allows automatic media loading without JavaScript initialization.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/ui.md#2025-04-17_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n    <div data-shaka-player-container style=\"max-width:40em\"\n         data-shaka-player-cast-receiver-id=\"07AEE832\">\n      <!-- The manifest url in the src attribute will be automatically loaded -->\n      <video autoplay data-shaka-player id=\"video\" style=\"width:100%;height:100%\"\n             src=\"https://storage.googleapis.com/shaka-demo-assets/angel-one/dash.mpd\"></video>\n    </div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Accessible Skip Button in JavaScript for Shaka Player\nDESCRIPTION: This snippet shows how to create a custom skip button extending shaka.ui.Element with an ARIA label for accessibility. It demonstrates setting up the button element with appropriate text content and aria-label attribute.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/a11y.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// skipButton.js\n\n// Use shaka.ui.Element as a base class\nmyapp.SkipButton = class extends shaka.ui.Element {\n  constructor(parent, controls) {\n    super(parent, controls);\n\n    // The actual button that will be displayed\n    this.button_ = document.createElement('button');\n    this.button_.textContent = 'Skip current video';\n    // Screen readers will read \"skip button\"\n    this.button_.setAttribute('aria-label', 'Skip');\n    this.parent.appendChild(this.button_);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Loading Specific Locale Data in Shaka Player\nDESCRIPTION: Implementation for loading specific locale translation data at runtime. Demonstrates fetching and inserting translations for a particular language.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/ui-customization.md#2025-04-17_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst locale = 'el';\nconst controls = ui.getControls();\nconst localization = controls.getLocalization();\nconst response = await fetch('ui/locales/' + locale + '.json');     // <----- JSON translation URL here\nconst translations = await response.json();\nconst translation_map = new Map(Object.entries(translations));\nlocalization.insert(locale, translation_map);\n```\n\n----------------------------------------\n\nTITLE: Loading the Uncompiled Shaka Player Library in HTML\nDESCRIPTION: This HTML snippet shows how to load the uncompiled version of Shaka Player for rapid development and testing. It requires loading Closure's base library, a dependency file, and the uncompiled bootstrap file.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/debugging.md#2025-04-17_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n  <head>\n    <!-- Closure base: -->\n    <script src=\"node_modules/google-closure-library/closure/goog/base.js\"></script>\n    <!-- Deps file: -->\n    <script src=\"dist/deps.js\"></script>\n    <!-- Shaka Player uncompiled library: -->\n    <script src=\"shaka-player.uncompiled.js\"></script>\n\n    <!-- Your application source: -->\n    <script src=\"myapp.js\"></script>\n  </head>\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Context Menu\nDESCRIPTION: Demonstrates how to enable and configure a custom context menu with specific elements.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/ui-customization.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  'customContextMenu' : true,\n  'contextMenuElements' : ['statistics'],\n}\nui.configure(config);\n```\n\n----------------------------------------\n\nTITLE: Updating Skip Button Functionality and Accessibility in JavaScript for Shaka Player\nDESCRIPTION: This snippet demonstrates how to update the skip button's functionality, icon, and ARIA label based on the current position in a video playlist. It shows how to maintain accessibility when the button's purpose changes.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/a11y.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nthis.eventManager.listen(this.button_, 'click', () => {\n  const nextManifest = /* Your logic to pick the next video to be played */\n    myapp.getNextManifest();\n\n  this.player.load(nextManifest);\n\n  if (this.isLastManifest(nextManifest)) {\n    // This is the last video. Change icon and aria label.\n    this.button_.icon = goToBeginningIcon;\n    // Screen readers will read \"Go to the first video button\"\n    this.button_.setAttribute('aria-label', 'Go to the first video');\n  } else if (this.isFirstManifest(nextManifest)){\n    // Change icon and aria label back to the skip state\n    this.button_.icon = skipIcon;\n    this.button_.setAttribute('aria-label', 'Skip');\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Loading HLS manifest from Blob URL in Shaka Player\nDESCRIPTION: Loads an HLS M3U8 manifest from a computed blob URL with a specific MIME type. Requires startTime parameter to set the beginning playback position.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/blob-url.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nplayer.load(computedMpdBlobURL, startTime, 'application/x-mpegurl');\n```\n\n----------------------------------------\n\nTITLE: Setting Shaka Player Log Levels in JavaScript\nDESCRIPTION: This snippet demonstrates how to set different log levels in Shaka Player. Higher verbosity levels provide more detailed output useful for debugging complex issues.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/debugging.md#2025-04-17_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n// Debug logs, when the default of INFO isn't enough:\nshaka.log.setLevel(shaka.log.Level.DEBUG);\n\n// Verbose logs, which can generate a lot of output:\nshaka.log.setLevel(shaka.log.Level.V1);\n\n// Verbose 2, which is extremely noisy:\nshaka.log.setLevel(shaka.log.Level.V2);\n```\n\n----------------------------------------\n\nTITLE: Accessing IMA AdManager and StreamManager Objects\nDESCRIPTION: Demonstrates how to get direct access to the IMA SDK's AdManager (for client side) and StreamManager (for server side) objects. This allows for advanced IMA SDK usage not exposed through Shaka's ad API.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/ad_monetization.md#2025-04-17_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nadManager.addEventListener(shaka.ads.Utils.IMA_AD_MANAGER_LOADED, (e) => {\n  const imaAdManager = e['imaAdManager'];\n});\n\nadManager.addEventListener(shaka.ads.Utils.IMA_STREAM_MANAGER_LOADED, (e) => {\n  const imaStreamManager = e['imaStreamManager'];\n});\n```\n\n----------------------------------------\n\nTITLE: CastReceiver API Implementation in JavaScript\nDESCRIPTION: API sketch for the CastReceiver class that handles receiver-side Chromecast functionality. The class manages playback and communication on the Chromecast device.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/design/current/chromecast.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nnew shaka.cast.CastReceiver(video, player, appDataCallback)\n\n// True if there are cast senders connected\nshaka.cast.CastReceiver.prototype.isConnected() => boolean\n\n// Fired when isConnected changes\nshaka.cast.CastReceiver.CastStatusChangedEvent\n```\n\n----------------------------------------\n\nTITLE: Using SCTE-35 with Custom Interstitials in Shaka Player\nDESCRIPTION: Shows how to integrate SCTE-35 markers with custom interstitial ads. This example listens for timeline region events and adds an interstitial ad when a SCTE-35 marker is detected.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/ad_monetization.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst adManager = player.getAdManager();\nconst video = document.getElementById('video');\nconst ui = video['ui'];\n// If you're using a non-UI build, this is the div you'll need to create\n// for your layout.  The ad manager will clear this div, when it unloads, so\n// don't pass in a div that contains non-ad elements.\nconst container = video.ui.getControls().getClientSideAdContainer();\nadManager.initInterstitial(container, player, video);\nplayer.addEventListener('timelineregionadded', (e) => {\n  const event = e.detail;\n  if (event.schemeIdUri != 'urn:scte:scte35:2014:xml+bin') {\n    return;\n  }\n  adManager.addCustomInterstitial({\n    id: event.id,\n    groupId: null,\n    startTime: event.startTime,\n    endTime: event.endTime,\n    uri: 'YOUR_URL',\n    mimeType: null,\n    isSkippable: false,\n    skipOffset: null,\n    skipFor: null,\n    canJump: true,\n    resumeOffset: player.isLive() ? null : 0,\n    playoutLimit: null,\n    once: false,\n    pre: false,\n    post: false,\n    timelineRange: player.isLive(), // If true, the ad will appear as a range on the timeline.\n    loop: false,\n    overlay: null,\n    displayOnBackground: false,\n    currentVideo: null,\n    background: null,\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Playback Rates in Shaka Player\nDESCRIPTION: Configuration for setting up playback, fast forward, and rewind rates in the player UI. Defines arrays of available rates for normal playback, fast forward, and rewind functionality.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/ui-customization.md#2025-04-17_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  'controlPanelElements': ['playback_rate', 'fast_forward', 'rewind'],\n  'playbackRates': [0.5, 0.75, 1, 1.25, 1.5, 1.75, 2],\n  'fastForwardRates': [2, 4, 8, 1],\n  'rewindRates': [-1, -2, -4, -8],\n}\nui.configure(config);\n```\n\n----------------------------------------\n\nTITLE: Configuring DRM Key Systems Mapping\nDESCRIPTION: Configures mapping between DRM key systems to specify preferred implementations.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/drm-config.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nplayer.configure({\n  drm: {\n    keySystemsMapping: {\n      'com.microsoft.playready': 'com.microsoft.playready.recommendation',\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Storage API Implementation in JavaScript for Shaka Player v2\nDESCRIPTION: API sketch for the shaka.offline.Storage class, which handles offline content management. It includes methods for storing, removing, and listing content, as well as configuration options for track selection and progress tracking.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/design/current/offline.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnew shaka.offline.Storage(player)\n\nshaka.offline.Storage.support => boolean\n\n// NOTE: Not connected to player.configure().\nshaka.offline.Storage.prototype.configure({\n  trackSelectionCallback: function(allTracks) {\n    // The default callback selects:\n    //   1. highest bandwidth video track with height <= 480,\n    //   2. middle bandwidth audio track with best audio pref language match,\n    //   3. all text tracks with any text pref language match.\n    // Return an array of selected Tracks.\n  },\n  progressCallback: function(storedContent, percentComplete) {}\n});\n\n// Store content and metadata.\nshaka.offline.Storage.prototype.store(manifestUri, appMetadata, manifestParser) => Promise.<StoredContent>\n\n// Remove stored content and metadata.\nshaka.offline.Storage.prototype.remove(storedContent) => Promise\n\n// List stored content.\nshaka.offline.Storage.prototype.list() => Promise.<Array.<StoredContent>>\n\nStoredContent:\n  offlineUri: string  // at which the stored content can be accessed\n  originalManifestUri: string  // the original manifest URI of the content we stored\n  duration: number  // length of the stored content in seconds\n  size: number  // size of the stored content in bytes\n  tracks: !Array.<shaka.extern.Track>  // the tracks we stored\n  appMetadata: object  // arbitrary format, provided by the application to store()\n```\n\n----------------------------------------\n\nTITLE: Requesting Live Stream with Server Side Ads\nDESCRIPTION: Creates a live stream request for server side ad insertion. The request contains an asset key that the IMA SDK uses to retrieve the appropriate live stream with dynamically inserted ads.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/ad_monetization.md#2025-04-17_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst streamRequest = new google.ima.dai.api.LiveStreamRequest();\n// Your stream information will go here. We are using IMA's sample stream info\n// in this tutorial.\nstreamRequest.assetKey = 'sN_IYUG8STe1ZzhIIE_ksA';\nconst uri = await adManager.requestServerSideStream(streamRequest);\nplayer.load(uri);\n```\n\n----------------------------------------\n\nTITLE: Enabling Control Panel Tooltips\nDESCRIPTION: Shows how to enable tooltips for control panel buttons that display their functions and current selections.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/ui-customization.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  'enableTooltips' : true\n}\nui.configure(config);\n```\n\n----------------------------------------\n\nTITLE: Configuring Preferred Decoding Attributes in Shaka Player\nDESCRIPTION: Example showing how to configure codec selection based on decoding attributes like smoothness and bandwidth. The array order determines priority of attributes.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/design/current/codec_preferences.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nplayer.configure('preferredDecodingAttributes', [\n  'smooth',\n  'bandwidth',\n]);\n```\n\n----------------------------------------\n\nTITLE: Computing Presentation Time from DASH Segment Timing Values\nDESCRIPTION: This JavaScript snippet shows the formula for converting segment times from manifest values to actual presentation times. It accounts for presentationTimeOffset, timescale, and periodStart to calculate when segments should play.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/design/current/dash-manifests.md#2025-04-17_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nstart = 111;  // S@t\npresentationTime = (start - presentationTimeOffset) / timescale + periodStart;\n```\n\n----------------------------------------\n\nTITLE: Accessing Original IMA SDK Events and Objects\nDESCRIPTION: Shows how to access the original IMA SDK event object and ad object from Shaka's ad events. This provides access to IMA-specific information not exposed through Shaka's ad API.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/ad_monetization.md#2025-04-17_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n// Note that unlike in the previous example, we are capturing the AD_STARTED\n// event object here (the \"e\" parameter of the lambda function) so we can access\n// its properties.\nadManager.addEventListener(shaka.ads.Utils.AD_STARTED, (e) => {\n  const sdkAdObject = e['sdkAdObject'];\n  const originalEvent = e['originalEvent'];\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Manifest Filtering in Shaka Player v3.0\nDESCRIPTION: Shows the change in filtering API from v2.5 to v3.0, demonstrating how to handle period and stream filtering. The new filter method is asynchronous and should be used with .then() or await.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/upgrade-manifest.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// v2.5:\n// Call this after the initial parsing\nthis.playerInterface_.filterAllPeriods(periods);\n\n// Call this after any new periods are added\nthis.playerInterface_.filterNewPeriod(someNewPeriod);\n\n// v3.0:\n// Call this after the initial parsing or after any new streams are added\nawait this.playerInterface_.filter(manifest);\n```\n\n----------------------------------------\n\nTITLE: Calculating Presentation Times with DASH SegmentTemplate Example\nDESCRIPTION: This XML snippet demonstrates a DASH Period with SegmentTemplate and SegmentTimeline elements. It shows how segments are defined with timing attributes that will be used to calculate presentation times.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/design/current/dash-manifests.md#2025-04-17_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<Period start=\"PT30S\" duration=\"PT10S\">\n  <AdaptationSet>\n    <Representation>\n      <SegmentTemplate timescale=\"10\" presentationTimeOffset=\"100\"\n          media=\"s$Number$.mp4\" initialization=\"init.mp4\">\n        <SegmentTimeline>\n          <S t=\"111\" d=\"40\" />\n          <S d=\"10\" />\n          <S t=\"170\" d=\"10\" />\n        </SegmentTimeline>\n      </SegmentTemplate>\n    </Representation>\n  </AdaptationSet>\n</Period>\n```\n\n----------------------------------------\n\nTITLE: Handling Embedded Captions in Shaka Player v3.0\nDESCRIPTION: Demonstrates how to enable embedded captions like CEA 608 by calling makeTextStreamsForClosedCaptions on the manifest when content is added.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/upgrade-manifest.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nthis.playerInterface_.makeTextStreamsForClosedCaptions(manifest);\n```\n\n----------------------------------------\n\nTITLE: Adding Simple Ad Event Listener in Shaka Player\nDESCRIPTION: Registers an event listener for Shaka's AD_STARTED event. This example demonstrates a basic method to respond to ad playback events.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/ad_monetization.md#2025-04-17_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nadManager.addEventListener(shaka.ads.Utils.AD_STARTED, () => {\n  console.log('An ad has started');\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Ad Break Markers Color\nDESCRIPTION: Demonstrates how to set the color for ad break markers on the timeline.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/ui-customization.md#2025-04-17_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  'seekBarColors': {\n    adBreaks: 'rgb(255, 204, 0)',\n  }\n}\nui.configure(config);\n```\n\n----------------------------------------\n\nTITLE: Integrating ExpressPlay with Legacy Apple Media Keys in JavaScript\nDESCRIPTION: This snippet shows the integration of ExpressPlay with legacy Apple Media Keys in Shaka Player. It sets up the required polyfill, request and response filters, and init data transform for ExpressPlay's FairPlay implementation.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/fairplay.md#2025-04-17_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nshaka.polyfill.PatchedMediaKeysApple.install();\nplayer.getNetworkingEngine()\n    .registerRequestFilter(shaka.drm.FairPlay.expressplayFairPlayRequest);\nplayer.getNetworkingEngine()\n    .registerResponseFilter(shaka.drm.FairPlay.commonFairPlayResponse);\nplayer.configure('drm.initDataTransform',\n                 shaka.drm.FairPlay.expressplayInitDataTransform);\n```\n\n----------------------------------------\n\nTITLE: Installing Legacy Apple Media Keys Polyfill in JavaScript\nDESCRIPTION: This snippet shows how to install the polyfill for legacy Apple Media Keys in Shaka Player. It allows support for older Safari versions that don't support Modern EME.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/fairplay.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nshaka.polyfill.PatchedMediaKeysApple.install();\n```\n\n----------------------------------------\n\nTITLE: Attaching Custom Canvas\nDESCRIPTION: JavaScript code for attaching a user-provided canvas to the Shaka Player\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/lcevc.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nplayer.attachCanvas(canvas);\n```\n\n----------------------------------------\n\nTITLE: Configuring HDCP Version Requirement\nDESCRIPTION: Sets a minimum required HDCP version for content playback.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/drm-config.md#2025-04-17_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nplayer.configure({\n  drm: {\n    minHdcpVersion: '2.3'\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Uninstallation of Legacy Apple Media Keys Polyfill in JavaScript\nDESCRIPTION: This code demonstrates how to enable the uninstallation of the legacy Apple Media Keys polyfill, which is useful when supporting multiple DRM providers that may require switching between legacy and Modern EME.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/fairplay.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nshaka.polyfill.PatchedMediaKeysApple.install(/* enableUninstall= */ true);\nshaka.polyfill.PatchedMediaKeysApple.uninstall();\n```\n\n----------------------------------------\n\nTITLE: Implementing Double Box Format Ad Experience in Shaka Player\nDESCRIPTION: Demonstrates how to create a double box format where both the main content and ad are shown in separate boxes with a custom background. This setup enables picture-in-picture style ad experiences.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/ad_monetization.md#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst adManager = player.getAdManager();\nconst video = document.getElementById('video');\nconst ui = video['ui'];\n// If you're using a non-UI build, this is the div you'll need to create\n// for your layout.  The ad manager will clear this div, when it unloads, so\n// don't pass in a div that contains non-ad elements.\nconst container = video.ui.getControls().getClientSideAdContainer();\nadManager.initInterstitial(container, player, video);\nadManager.addCustomInterstitial({\n  id: null,\n  groupId: null,\n  startTime: 10,\n  endTime: null,\n  uri: 'YOUR_URL',\n  mimeType: null,\n  isSkippable: true,\n  skipOffset: 10,\n  skipFor: null,\n  canJump: false,\n  resumeOffset: null,\n  playoutLimit: null,\n  once: true,\n  pre: false,\n  post: false,\n  timelineRange: false,\n  loop: false,\n  overlay: {\n    viewport: {\n      x: 1920, // Pixels\n      y: 1080, // Pixels\n    },\n    topLeft: {\n      x: 960, // Pixels\n      y: 270, // Pixels\n    },\n    size: {\n      x: 960, // Pixels\n      y: 540, // Pixels\n    },\n  },\n  displayOnBackground: true,\n  currentVideo: {\n    viewport: {\n      x: 1920, // Pixels\n      y: 1080, // Pixels\n    },\n    topLeft: {\n      x: 160, // Pixels\n      y: 360, // Pixels\n    },\n    size: {\n      x: 640, // Pixels\n      y: 360, // Pixels\n    },\n  },\n  background: 'content-box radial-gradient(crimson, skyblue)',\n});\n```\n\n----------------------------------------\n\nTITLE: Including LCEVC Decoder via NPM\nDESCRIPTION: HTML script tag for including the LCEVC decoder library from local NPM installation\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/lcevc.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"../node_modules/lcevc_dec.js/dist/lcevc_dec.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Using Await for Promise Resolution\nDESCRIPTION: Shows how to use async/await syntax for handling promises. This approach is recommended for better readability compared to using then/catch chains.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/style.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n  await sleep(5);\n```\n\n----------------------------------------\n\nTITLE: Loading the Shaka Player Debug Library in HTML\nDESCRIPTION: This HTML snippet shows how to load the debug version of Shaka Player instead of the compiled version. The debug library provides detailed logs and line numbers for errors.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/debugging.md#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n  <head>\n    <!-- Shaka Player debug library: -->\n    <script src=\"shaka-player.compiled.debug.js\"></script>\n\n    <!-- Your application source: -->\n    <script src=\"myapp.js\"></script>\n  </head>\n```\n\n----------------------------------------\n\nTITLE: Creating L-Shape Format Ad Experience in Shaka Player\nDESCRIPTION: Shows how to create an L-shape format ad experience where both the content video and ad content are visible simultaneously. This configures the interstitial to display alongside the main content with specific positioning.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/ad_monetization.md#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst adManager = player.getAdManager();\nconst video = document.getElementById('video');\nconst ui = video['ui'];\n// If you're using a non-UI build, this is the div you'll need to create\n// for your layout.  The ad manager will clear this div, when it unloads, so\n// don't pass in a div that contains non-ad elements.\nconst container = video.ui.getControls().getClientSideAdContainer();\nadManager.initInterstitial(container, player, video);\nadManager.addCustomInterstitial({\n  id: null,\n  groupId: null,\n  startTime: 10,\n  endTime: null,\n  uri: 'YOUR_URL',\n  mimeType: null,\n  isSkippable: true,\n  skipOffset: 10,\n  skipFor: null,\n  canJump: false,\n  resumeOffset: null,\n  playoutLimit: null,\n  once: true,\n  pre: false,\n  post: false,\n  timelineRange: false,\n  loop: false,\n  overlay: {\n    viewport: {\n      x: 1920,\n      y: 1080,\n    },\n    topLeft: {\n      x: 0,\n      y: 0,\n    },\n    size: {\n      x: 1920,\n      y: 1080,\n    },\n  },\n  displayOnBackground: true,\n  currentVideo: {\n    viewport: {\n      x: 1920,\n      y: 1080,\n    },\n    topLeft: {\n      x: 0,\n      y: 0,\n    },\n    size: {\n      x: 960,\n      y: 540,\n    },\n  },\n  background: null,\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Video Container for UITextDisplayer in Shaka Player\nDESCRIPTION: Demonstrates how to attach a video container element to Shaka Player for subtitle display, either through constructor or dedicated method.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/text-displayer.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Take your custom video container element.\nconst container = document.getElementById('video_container');\n// Attach container using player constructor.\nconst player = new shaka.Player(/* mediaElement= */ null, container);\n// Alternatively, pass it using dedicated method.\nplayer.setVideoContainer(container);\n```\n\n----------------------------------------\n\nTITLE: CastProxy API Implementation in JavaScript\nDESCRIPTION: API sketch for the CastProxy class that handles sender-side Chromecast functionality. The class wraps both shaka.Player and HTMLMediaElement to delegate between local and remote playback.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/design/current/chromecast.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnew shaka.cast.CastProxy(video, player, receiverAppId, androidReceiverCompatible)\n\n// Also destroys the underlying local Player object\nshaka.cast.CastProxy.prototype.destroy() => Promise\n\n// Looks like shaka.Player, proxies to local or remote player based on cast\n// state\nshaka.cast.CastProxy.prototype.getPlayer() => shaka.Player\n\n// Looks like HTMLMediaElement, proxies to local or remote video based on cast\n// state\nshaka.cast.CastProxy.prototype.getVideo() => HTMLMediaElement\n\n// True if there are cast receivers available\nshaka.cast.CastProxy.prototype.canCast() => boolean\n\n// True if we are currently casting\nshaka.cast.CastProxy.prototype.isCasting() => boolean\n\n// Fired when either canCast or isCasting changes\nshaka.cast.CastProxy.CastStatusChangedEvent\n\n// Resolved when connected to a receiver, rejected if the connection fails\nshaka.cast.CastProxy.prototype.cast() => Promise\n\n// Transmits application-specific data to the receiver (now or on later connect)\nshaka.cast.CastProxy.prototype.setAppData(appData)\n\n// Disconnect from the receiver\nshaka.cast.CastProxy.prototype.disconnect()\n```\n\n----------------------------------------\n\nTITLE: Verbose Log Output from Shaka Player\nDESCRIPTION: This shows the verbose log output when the log level is set to V1. It displays detailed information about the HTTP requests, error handling, and the sequence of events leading to the error.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/debugging.md#2025-04-17_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nHEAD http://storage.googleapis.com/shaka-demo-assets/angel-one/dash.mp 404 (Not Found)  http_plugin.js:94\n\nUnable to find byte-order-mark, making an educated guess.  string_utils.js:130\n\nHTTP error text:  http_plugin.js:69\n\nHEAD http://storage.googleapis.com/shaka-demo-assets/angel-one/dash.mp 404 (Not Found)  http_plugin.js:94\n\nUnable to find byte-order-mark, making an educated guess.  string_utils.js:130\n\nHTTP error text:  http_plugin.js:69\n\nHEAD request to guess manifest type failed! shaka.util.Error  manifest_parser.js:179\n\nload() failed: shaka.util.Error  player.js:498\n\nError code 1001 object shaka.util.Error  myapp.js:48\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Interstitials in Shaka Player\nDESCRIPTION: Demonstrates how to add a custom interstitial ad at a specific time in the video. This example includes configuration options like skippability, start time, and one-time playback.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/ad_monetization.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst adManager = player.getAdManager();\nconst video = document.getElementById('video');\nconst ui = video['ui'];\n// If you're using a non-UI build, this is the div you'll need to create\n// for your layout.  The ad manager will clear this div, when it unloads, so\n// don't pass in a div that contains non-ad elements.\nconst container = video.ui.getControls().getClientSideAdContainer();\nadManager.initInterstitial(container, player, video);\nadManager.addCustomInterstitial({\n  id: null,\n  groupId: null,\n  startTime: 10,\n  endTime: null,\n  uri: 'YOUR_URL',\n  mimeType: null,\n  isSkippable: true,\n  skipOffset: 10,\n  skipFor: null,\n  canJump: false,\n  resumeOffset: null,\n  playoutLimit: null,\n  once: true,\n  pre: false,\n  post: false,\n  timelineRange: false,\n  loop: false,\n  overlay: null,\n  displayOnBackground: false,\n  currentVideo: null,\n  background: null,\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Cookie Authentication in Shaka Player\nDESCRIPTION: This snippet demonstrates how to enable cookie authentication by setting the allowCrossSiteCredentials flag in the request filter.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/license-server-auth.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n  player.getNetworkingEngine().registerRequestFilter(function(type, request, context) {\n    if (type == shaka.net.NetworkingEngine.RequestType.LICENSE) {\n      request.allowCrossSiteCredentials = true;\n    }\n  });\n```\n\n----------------------------------------\n\nTITLE: Configuring Ad Statistics Display\nDESCRIPTION: Example of customizing which ad statistics are displayed in the UI.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/ui-customization.md#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  'customContextMenu' : true,\n  'contextMenuElements' : ['ad_statistics'],\n  'adStatisticsList' : ['started', 'playedCompletely'],\n}\nui.configure(config);\n```\n\n----------------------------------------\n\nTITLE: Configuring Seek Bar Visibility in Shaka UI\nDESCRIPTION: Example showing how to disable the seek bar in Shaka Player's UI by configuring the UI overlay after creation.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/ui-customization.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst video = document.getElementById('video');\nconst ui = video['ui'];\nconst config = {\n  addSeekBar: false\n};\nui.configure(config);\n```\n\n----------------------------------------\n\nTITLE: Implementing Overlay Interstitials in Shaka Player\nDESCRIPTION: Demonstrates how to configure an overlay interstitial that appears in a specific position on the screen. This example places the ad in the upper right quadrant with defined size and position parameters.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/ad_monetization.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst adManager = player.getAdManager();\nconst video = document.getElementById('video');\nconst ui = video['ui'];\n// If you're using a non-UI build, this is the div you'll need to create\n// for your layout.  The ad manager will clear this div, when it unloads, so\n// don't pass in a div that contains non-ad elements.\nconst container = video.ui.getControls().getClientSideAdContainer();\nadManager.initInterstitial(container, player, video);\nadManager.addCustomInterstitial({\n  id: null,\n  groupId: null,\n  startTime: 10,\n  endTime: null,\n  uri: 'YOUR_URL',\n  mimeType: null,\n  isSkippable: true,\n  skipOffset: 10,\n  skipFor: null,\n  canJump: false,\n  resumeOffset: null,\n  playoutLimit: null,\n  once: true,\n  pre: false,\n  post: false,\n  timelineRange: false,\n  loop: false,\n  overlay: { // Show interstitial in upper right quadrant\n    viewport: {\n      x: 1920, // Pixels\n      y: 1080, // Pixels\n    },\n    topLeft: {\n      x: 960, // Pixels\n      y: 0, // Pixels\n    },\n    size: {\n      x: 960, // Pixels\n      y: 540, // Pixels\n    },\n  },\n  displayOnBackground: false,\n  currentVideo: null,\n  background: null,\n});\n```\n\n----------------------------------------\n\nTITLE: Integrating Nagra with Legacy Apple Media Keys in JavaScript\nDESCRIPTION: This code shows how to integrate Nagra with legacy Apple Media Keys in Shaka Player. For Nagra, only the installation of the polyfill is required.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/fairplay.md#2025-04-17_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nshaka.polyfill.PatchedMediaKeysApple.install();\n```\n\n----------------------------------------\n\nTITLE: Iterating through SegmentIndex in JavaScript\nDESCRIPTION: Demonstrates new ways to iterate through a SegmentIndex or convert it to an Array using the newly implemented Iterable protocol. This is useful for applications reading the contents of a Manifest.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/upgrade-manifest.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfor (const reference of stream.segmentIndex) {\n  // ...\n}\n\n// OR\n\nconst listOfReferences = Array.from(stream.segmentIndex);\n\n// OR\n\nconst firstReference = Array.from(stream.segmentIndex)[0];\n```\n\n----------------------------------------\n\nTITLE: Customizing Control Panel Elements Order\nDESCRIPTION: Demonstrates how to configure the UI to show only specific control buttons (rewind and fast forward) in a particular order.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/ui-customization.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  'controlPanelElements': ['rewind', 'fast_forward']\n}\nui.configure(config);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Text Displayer in Shaka Player\nDESCRIPTION: Demonstrates how to configure a custom text displayer implementation by passing a factory function to the player configuration.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/text-displayer.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nplayer.configure({\n   textDisplayFactory: () => new CustomTextDisplayer(),\n});\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Structure for Shaka Player Offline Storage\nDESCRIPTION: This HTML code sets up the structure for a web page that uses Shaka Player for offline content storage. It includes input fields for asset information, a download button, a video player, and a table to display stored content.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/offline.md#2025-04-17_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <!-- Shaka Player compiled library: -->\n    <script src=\"dist/shaka-player.compiled.js\"></script>\n    <!-- Your application source: -->\n    <script src=\"myapp.js\"></script>\n\n    <style>\n      table, th, td {\n        border: 1px solid black;\n      }\n    </style>\n  </head>\n  <body>\n    <div id='online-signal' style='width:640px;text-align:center'></div>\n    <div>\n      <div>\n        <span style=\"width:120px;display:inline-block\">Asset Name</span>\n        <input id=\"asset-title-input\" type=\"text\" style=\"width:500px\" value=\"Star Trek: Angel One\">\n      </div>\n      <div>\n        <span style=\"width:120px;display:inline-block\">Asset Manifest</span>\n        <input id=\"asset-uri-input\" type=\"text\" style=\"width:500px\" value=\"//storage.googleapis.com/shaka-demo-assets/angel-one/dash.mpd\">\n      </div>\n    </div>\n\n    <div>\n      <span><progress id=\"progress-bar\" value=\"0\" max=\"100\"></span>\n      <span><button id=\"download-button\">Download</button></span>\n    </div>\n\n    <video id=\"video\"\n           width=\"640\"\n           poster=\"//shaka-player-demo.appspot.com/assets/poster.jpg\"\n           controls autoplay></video>\n\n    <table id=\"content-table\" style=\"width:640px\"></table>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Defining UI Component Relationships in JavaScript\nDESCRIPTION: Code demonstrating the equality relationships between UI components, video elements, cast proxy, and player instances in the Shaka UI system.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/design/current/ui.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncontainer.ui == video.ui\ncastProxy.video == video\ncastProxy.player == ui.player\n```\n\n----------------------------------------\n\nTITLE: Reversing Control Elements Order\nDESCRIPTION: Shows how to reverse the order of control panel elements in the UI configuration.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/ui-customization.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n 'controlPanelElements': ['fast_forward', 'rewind']\n}\nui.configure(config);\n```\n\n----------------------------------------\n\nTITLE: Configuring Font Scale Factor for Text Display in Shaka Player\nDESCRIPTION: Shows how to configure font scaling for better subtitle readability using player configuration.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/text-displayer.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nplayer.configure({\n   textDisplayer: {\n      fontScaleFactor: 1.5,\n   },\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Build Configuration Examples\nDESCRIPTION: Examples demonstrating how to use build.py with different configuration options to create custom builds of the library with specific feature sets.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/build/README.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# Examples:\nbuild.py +@complete\nbuild.py +@complete -@networking\nbuild.py --name custom +@manifests +@networking +../my_plugin.js\n```\n\n----------------------------------------\n\nTITLE: Console Output from Shaka Player Error\nDESCRIPTION: This shows the console output when an HTTP request fails in Shaka Player. It displays the HTTP 404 error and the resulting Shaka error code 1001.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/debugging.md#2025-04-17_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nHEAD http://storage.googleapis.com/shaka-demo-assets/angel-one/dash.mp 404 (Not Found)  http_plugin.js:94\n\nHEAD http://storage.googleapis.com/shaka-demo-assets/angel-one/dash.mp 404 (Not Found)  http_plugin.js:94\n\nHEAD request to guess manifest type failed! shaka.util.Error  manifest_parser.js:179\n\nError code 1001 object shaka.util.Error  myapp.js:45\n```\n\n----------------------------------------\n\nTITLE: Configuring Statistics Display\nDESCRIPTION: Shows how to customize which statistics are displayed when toggling the statistics button.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/ui-customization.md#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  'customContextMenu' : true,\n  'contextMenuElements' : ['statistics'],\n  'statisticsList' : ['width', 'height', 'playTime', 'bufferingTime'],\n}\nui.configure(config);\n```\n\n----------------------------------------\n\nTITLE: Enabling Android Receiver Apps in Shaka Player UI\nDESCRIPTION: HTML setup for enabling casting to Android receiver apps. Demonstrates how to set the data-shaka-player-cast-android-receiver-compatible attribute for Android receiver compatibility.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/ui.md#2025-04-17_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n    <div data-shaka-player-container style=\"max-width:40em\"\n         data-shaka-player-cast-receiver-id=\"07AEE832\"\n         data-shaka-player-cast-android-receiver-compatible=\"true\">\n      <!-- The manifest url in the src attribute will be automatically loaded -->\n      <video autoplay data-shaka-player id=\"video\" style=\"width:100%;height:100%\"\n             src=\"https://storage.googleapis.com/shaka-demo-assets/angel-one/dash.mpd\"></video>\n    </div\n```\n\n----------------------------------------\n\nTITLE: Custom Build Configuration Example\nDESCRIPTION: Example of a custom build configuration file showing how to customize the library build with specific includes and excludes.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/plugins.md#2025-04-17_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n# Start with a complete library\n+@complete\n# Drop subtitle support\n-@text\n# Remove default networking plugins\n-@networking\n# Add my custom HTTP implementation\n+/path/to/my_http_plugin.js\n# Add an additional polyfill for some odd platform I'm targeting\n+/path/to/my_platform_polyfill.js\n```\n\n----------------------------------------\n\nTITLE: Adding LCEVC Library to Demo Page\nDESCRIPTION: Shows how to include the LCEVC decoder library in the Shaka Player demo page implementation.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/design/current/lcevc-integration.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n  <!-- MPEG-5 Part2 LCEVC support is enabled by including this: -->\n  <script defer src=\"../node_modules/lcevc_dec.js/dist/lcevc_dec.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Customizing Seek Bar Colors\nDESCRIPTION: Shows how to customize the colors of different segments in the seek bar.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/ui-customization.md#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  'seekBarColors': {\n    base: 'rgba(255, 255, 255, 0.3)',\n    buffered: 'rgba(255, 255, 255, 0.54)',\n    played: 'rgb(255, 255, 255)',\n  }\n}\nui.configure(config);\n```\n\n----------------------------------------\n\nTITLE: Configuring Overflow Menu Buttons\nDESCRIPTION: Example of how to customize the overflow menu to only show the cast button.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/ui-customization.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  'overflowMenuButtons' : ['cast']\n}\nui.configure(config);\n```\n\n----------------------------------------\n\nTITLE: Using langmap Package in JavaScript\nDESCRIPTION: Examples of how to use the 'langmap' package to retrieve native and English names of languages using their language codes.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/third_party/language-mapping-list/README.md#2025-04-17_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar langmap = require(\"langmap\");\n\n\"Native\" => English (US)\nvar native = langmap[\"en-US\"][\"nativeName\"];\n\"Native\" => ภาษาไทย\nvar native = langmap[\"th\"][\"nativeName\"];\n\"English\" => Thai\nvar native = langmap[\"th\"][\"englishName\"];\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Multi-Locale Search Order in Markdown\nDESCRIPTION: This code snippet illustrates the search order when multiple locale preferences are provided. It shows how the system prioritizes searching within earlier locales before moving to later ones, maintaining language consistency in the results.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/design/current/localization-design-principles.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n```\nAvailable locales:\n   \"en\", \"en-US\", \"en-GB\", en-CA\", \"fr\", \"fr-CA\", \"fr-FR\", ...\n\nSearch Order for multiple preferences:\n\n | Preference 1 | -> | Preference 2 | -> ... ->  | Preference N |\n | (en-US)      |    | (fr-CA)      |            | (...)        |\n ----------------------------------------------------------------\n | a. en-US     |    | a. fr-CA     |            | ...          |\n | b. en        |    | b. fr        |            |              |\n | c. en-GB     |    | c. fr-FR     |            |              |\n | d. en-CA     |    |              |            |              |\n```\n```\n\n----------------------------------------\n\nTITLE: Accessing Shaka Player's Ad Manager\nDESCRIPTION: Retrieves the ad manager instance from a Shaka Player object for ad integration purposes.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/ad_monetization.md#2025-04-17_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst adManager = player.getAdManager();\n```\n\n----------------------------------------\n\nTITLE: Setting Timeout for IndexedDB Storage Opening\nDESCRIPTION: These code snippets show how to configure the timeout for opening IndexedDB-based storage in Shaka Player. It includes options to set a custom timeout or disable the timeout entirely.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/offline.md#2025-04-17_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// In seconds\nshaka.offline.indexeddb.StorageMechanismOpenTimeout = 10;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nshaka.offline.indexeddb.StorageMechanismOpenTimeout = false;\n```\n\n----------------------------------------\n\nTITLE: Wrapped License Response Structure\nDESCRIPTION: Example JSON structure showing how a wrapped license response is formatted\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/license-wrapping.md#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rawLicenseBase64\":\n      \"VGhlIHJhdyBsaWNlbnNlIGZyb20gdGhlIGxpY2Vuc2Ugc2VydmVyIGJhY2tlbmQ=\",\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tizen Privilege for Screen Resolution Detection\nDESCRIPTION: XML configuration required in Tizen's config.xml file to enable access to product information APIs for screen resolution detection.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/screen-resolution-detection.md#2025-04-17_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<tizen:privilege name=\"http://developer.samsung.com/privilege/productinfo\"/>\n```\n\n----------------------------------------\n\nTITLE: Including IMA SDK Libraries in HTML\nDESCRIPTION: HTML setup for including Shaka Player and IMA SDK libraries. Includes both Client Side (ima3.js) and Server Side (ima3_dai.js) IMA SDKs alongside Shaka Player UI components.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/ad_monetization.md#2025-04-17_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <!-- Shaka Player ui compiled library: -->\n    <script src=\"dist/shaka-player.ui.js\"></script>\n    <!-- Shaka Player ui compiled library default CSS: -->\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"dist/controls.css\">\n    <!-- IMA HTML5 SDK (for serving Client Side ads): -->\n    <script type=\"text/javascript\" src=\"https://imasdk.googleapis.com/js/sdkloader/ima3.js\"></script>\n    <!-- IMA DAI SDK (for serving Server Side ads): -->\n    <script type=\"text/javascript\" src=\"https://imasdk.googleapis.com/js/sdkloader/ima3_dai.js\"></script>\n    <!-- Your application source: -->\n    <script src=\"myapp.js\"></script>\n  </head>\n</html>\n```\n\n----------------------------------------\n\nTITLE: SegmentReference Creation in Shaka Player v2.5 vs v3.0\nDESCRIPTION: Shows the transition from v2.5 to v3.0 SegmentReference creation, including changes to timestamp handling, initialization segments, and new parameters for append windows and timestamp offsets.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/upgrade-manifest.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// v2.5\nconst period = {\n  startTime: 100,\n  /* ... */\n};\nconst initSegmentReference = /* ... */;\nconst stream = {\n  /* ... */\n  initSegmentReference,\n  presentationTimeOffset: 20,\n};\nconst ref = new shaka.media.SegmentReference(\n    /* position= */ 0,\n    /* startTime= */ 0,\n    /* endTime= */ 10,\n    /* uris= */ () => [uri],\n    /* startByte= */ 0,\n    /* endByte= */ null);\n\n// v3.0\nconst ref = new shaka.media.SegmentReference(\n    /* startTime= */ 100,  // <-- period start 100 + period-relative timestamp 0\n    /* endTime= */ 110,\n    /* uris= */ () => [uri],\n    /* startByte= */ 0,\n    /* endByte= */ null,\n    initSegmentReference,\n    /* timestampOffset= */ 80,  // <-- period start 100 - PTO 20\n    /* appendWindowStart= */ 100,  // <-- period start\n    /* appendWindowEnd= */ Infinity);  // <-- for the last period in live stream\n```\n\n----------------------------------------\n\nTITLE: Including LCEVC Decoder Script in HTML\nDESCRIPTION: Demonstrates how to include the LCEVC decoder JavaScript library from NPM package in the HTML page for Shaka Player integration.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/design/current/lcevc-integration.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n  <!-- MPEG-5 Part2 LCEVC support is enabled by including this: -->\n  <script defer src=\"../node_modules/lcevc_dec.js/dist/lcevc_dec.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Locale Format Examples in Shaka Player\nDESCRIPTION: Demonstrates the three valid patterns for locale formatting: language only, language with region, and language with region and dialect. Uses ISO 639 for language codes and ISO 3166 for region codes.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/design/current/talking-about-languages.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nlanguage (e.g. \"en\")\nlanguage-REGION (e.g. \"en-US\")\nlanguage-REGION-dialect (e.g. \"en-US-wa\")\n```\n\n----------------------------------------\n\nTITLE: Configuring HLS live streaming delay in Shaka Player\nDESCRIPTION: This code configures the liveSegmentsDelay setting for HLS live streams to reduce buffering between chunks when the chunk list is short. It sets the delay to 1 segment.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/faq.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nplayer.configure('manifest.hls.liveSegmentsDelay', 1);\n```\n\n----------------------------------------\n\nTITLE: Shaka Error Object Structure\nDESCRIPTION: This shows the structure of a Shaka error object in the console, including the error category, code, data array, message, and stack trace. This provides detailed information for debugging.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/debugging.md#2025-04-17_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nshaka.util.Error\n  category: 1\n  code: 1001\n  data: Array[3]\n    0: \"http://storage.googleapis.com/shaka-demo-assets/angel-one/dash.mp\"\n    1: 404\n    2: \"\"\n    length: 3\n  message:\n    \"Shaka Error NETWORK.BAD_HTTP_STATUS (...)\"\n  stack: \"Error: Shaka Error NETWORK.BAD_HTTP_STATUS (http://storage.googleapis.com/shaka-demo-assets/angel-one/dash.mp,404,)\n    at new shaka.util.Error (http://localhost/shaka/lib/util/error.js:77:13)\n    at XMLHttpRequest.xhr.onload (http://localhost/shaka/lib/net/http_plugin.js:70:16)\"\n```\n\n----------------------------------------\n\nTITLE: HTML Image References for Shaka Architecture Diagrams\nDESCRIPTION: HTML markup for displaying a series of architectural diagrams with proper alt text and responsive sizing. Each image represents a different aspect of Shaka Player's architecture.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/architecture.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<img\n  src=\"../design/current/dataflow.gv.png\"\n  alt=\"Shaka data flow diagram\"\n  style=\"max-width: 100%\">\n\n<img\n  src=\"../design/current/ownership.gv.png\"\n  alt=\"Shaka ownership diagram\"\n  style=\"max-width: 100%\">\n\n<img\n  src=\"../design/current/cast.gv.png\"\n  alt=\"Shaka cast diagram\"\n  style=\"max-width: 100%;\">\n\n<img\n  src=\"../design/current/offline.gv.png\"\n  alt=\"Shaka offline diagram\"\n  style=\"max-width: 100%\">\n\n<img\n  src=\"../design/current/timeline.svg\"\n  alt=\"PresentationTimeline diagram\"\n  style=\"max-width: 100%\">\n\n<img\n  src=\"../design/current/newdemo.gv.png\"\n  alt=\"Demo page architecture\"\n  style=\"max-width: 100%\">\n```\n\n----------------------------------------\n\nTITLE: Building Shaka Player Using Docker\nDESCRIPTION: These Docker commands build a container for compiling Shaka Player and run it to build the project, useful for consistent builds across environments.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/welcome.md#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ndocker build -t shaka-player-build build/docker\ndocker run -v $(pwd):/usr/src --user $(id -u):$(id -g) shaka-player-build\n```\n\n----------------------------------------\n\nTITLE: Configuring DRM Key System Preferences in Shaka Player\nDESCRIPTION: Shows how to set preferred DRM key systems when multiple systems are supported. The array order determines which key system is tried first.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/design/current/codec_preferences.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nplayer.configure('drm.preferredKeySystems', [\n  'com.widevine.alpha',\n  'com.microsoft.playready',\n]);\n```\n\n----------------------------------------\n\nTITLE: DASH CENC Content Protection XML\nDESCRIPTION: XML snippet showing Common Encryption (CENC) content protection declaration in DASH manifest.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/drm-config.md#2025-04-17_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ContentProtection schemeIdUri=\"urn:mpeg:dash:mp4protection:2011\" value=\"cenc\"/>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating a Bad Manifest URI in JavaScript\nDESCRIPTION: This snippet shows an example of an incorrect manifest URI that will generate an error for debugging purposes. The URI is missing the last character which will cause a 404 error.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/debugging.md#2025-04-17_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst manifestUri =\n    'https://storage.googleapis.com/shaka-demo-assets/angel-one/dash.mp';\n```\n\n----------------------------------------\n\nTITLE: Compiling Shaka Player Library and Generating Documentation\nDESCRIPTION: This Python command compiles the Shaka Player library and generates documentation using the build script.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/welcome.md#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npython build/all.py\n```\n\n----------------------------------------\n\nTITLE: Enabling LCEVC Enhancement\nDESCRIPTION: JavaScript configuration to enable LCEVC enhancement in Shaka Player\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/lcevc.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nplayer.configure('lcevc.enabled', true);\n```\n\n----------------------------------------\n\nTITLE: Building Shaka Player with Plugin Exclusions\nDESCRIPTION: Example showing how to build Shaka Player while excluding specific plugins or plugin categories using the build.py script.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/plugins.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npython build/build.py +@complete -lib/text/mp4_ttml_parser.js\n```\n\n----------------------------------------\n\nTITLE: Array Transformation (Before)\nDESCRIPTION: Shows a less preferred approach to transforming arrays by using forEach and push. This pattern is discouraged in favor of using map for simple transformations.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/style.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst audio = [];\nvariants.forEach((variant) => audio.push(variant.audio));\n```\n\n----------------------------------------\n\nTITLE: App Engine YAML Configuration\nDESCRIPTION: App Engine configuration file that defines cache expiration rules and URL routing mappings for static and dynamic content.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/app-engine/shaka-player-demo/README.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napp.yaml\n```\n\n----------------------------------------\n\nTITLE: Including LCEVC Decoder via CDN\nDESCRIPTION: HTML script tag for including the LCEVC decoder library from unpkg CDN\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/lcevc.md#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/lcevc_dec.js@1.2.1/dist/lcevc_dec.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Creating HTML UI for Offline Storage Application\nDESCRIPTION: HTML markup for the offline storage application UI, including video player element, download form, progress bar, and content table for displaying stored content.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/offline.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <!-- Shaka Player compiled library: -->\n    <script src=\"dist/shaka-player.compiled.js\"></script>\n    <!-- Your application source: -->\n    <script src=\"myapp.js\"></script>\n\n    <style>\n      table, th, td {\n        border: 1px solid black;\n      }\n    </style>\n  </head>\n  <body>\n    <div id='online-signal' style='width:640px;text-align:center'></div>\n    <div>\n      <div>\n        <span style=\"width:120px;display:inline-block\">Asset Name</span>\n        <input id=\"asset-title-input\" type=\"text\" style=\"width:500px\" value=\"Star Trek: Angel One\">\n      </div>\n      <div>\n        <span style=\"width:120px;display:inline-block\">Asset Manifest</span>\n        <input id=\"asset-uri-input\" type=\"text\" style=\"width:500px\" value=\"//storage.googleapis.com/shaka-demo-assets/angel-one/dash.mpd\">\n      </div>\n    </div>\n\n    <div>\n      <span><progress id=\"progress-bar\" value=\"0\" max=\"100\"></span>\n      <span><button id=\"download-button\">Download</button></span>\n    </div>\n\n    <video id=\"video\"\n           width=\"640\"\n           poster=\"//shaka-player-demo.appspot.com/assets/poster.jpg\"\n           controls autoplay></video>\n\n    <table id=\"content-table\" style=\"width:640px\"></table>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Composing Chrome Configurations in YAML\nDESCRIPTION: Demonstration of composing Chrome configurations using YAML anchors and merging them for different platforms, including headless options.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/selenium-grid-config.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nvars:\n  basic_chrome_config: &basic_chrome_config\n    goog:chromeOptions:\n      args:\n        - \"--autoplay-policy=no-user-gesture-required\"\n      excludeSwitches:\n        - \"disable-component-update\"\n\n  headless_chrome_config: &headless_chrome_config\n    goog:chromeOptions:\n      args:\n        - \"--headless\"\n\nChromeLinux:\n  browser: chrome\n  os: Mac\n  extra_configs:\n    - *basic_chrome_config\n\nChromeWindows:\n  browser: chrome\n  os: Mac\n  extra_configs:\n    - *basic_chrome_config\n\nChromeMac:\n  browser: chrome\n  os: Mac\n  extra_configs:\n    - *basic_chrome_config\n    - *headless_chrome_config\n```\n\n----------------------------------------\n\nTITLE: Python Service Handler\nDESCRIPTION: Main Python service that handles non-static file requests, including HTTP redirects for the root path and a custom poster service with date-specific image responses.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/app-engine/shaka-player-demo/README.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nmain.py\n```\n\n----------------------------------------\n\nTITLE: Storing Promise Results with Await\nDESCRIPTION: Demonstrates how to capture the result of a promise using await without changing scope, which is the recommended approach for handling asynchronous operations in Shaka Player.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/style.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n  const response = await networkingEngine.request(...);\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Plugins to Shaka Build\nDESCRIPTION: Examples showing how to add custom plugin source files to the Shaka Player build process.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/plugins.md#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\npython build/build.py +@complete +my_plugin.js\npython build/build.py +@complete +my_plugin.js +/path/to/my_other_plugin.js\n```\n\n----------------------------------------\n\nTITLE: Explaining Localization Table Merging in Markdown\nDESCRIPTION: This code snippet demonstrates how localization tables are merged to prioritize look-up efficiency. It shows the process of flattening multiple tables into a single map, with more preferred entries overriding lesser preferred values.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/design/current/localization-design-principles.md#2025-04-17_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n```\n    Preference Order : en-US > en > en-GB > en-CA\n    Merge Order      : en-CA > en-GB > en > en-US\n\n    Merged : [ A4 ] [ B1 ] [ C2 ] [ D1 ] [ E2 ] [ F3 ] [ G1 ]\n               ^      ^      ^      ^      ^      ^      ^\n    en-US  :   ^    [ B1 ]   ^    [ D1 ]   ^      ^    [ G1 ]\n    en     :   ^    [ B2 ] [ C2 ] [ D2 ] [ E2 ]   ^    [ G2 ]\n    en-GB  :   ^    [ B3 ] [ C3 ] [ D3 ] [ E3 ] [ F3 ] [ G3 ]\n    en-CA  : [ A4 ] [ B4 ]        [ D4 ] [ E4 ]        [ G4 ]\n    ...\n```\n```\n\n----------------------------------------\n\nTITLE: Basic Desktop Browser Definitions in YAML\nDESCRIPTION: Examples of defining various desktop browsers for different operating systems in the Selenium Grid configuration.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/selenium-grid-config.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nChromeMac:\n  browser: chrome\n  os: Mac\n\nFirefoxMac:\n  browser: firefox\n  os: Mac\n\nSafari:\n  browser: safari\n  os: Mac\n\nSafariTP:\n  browser: safari\n  os: Mac\n  extra_configs:\n    - safari.options:\n        technologyPreview: true\n\nChromeWindows:\n  browser: chrome\n  os: Windows\n\nFirefoxWindows:\n  browser: firefox\n  os: Windows\n\nEdge:\n  browser: msedge\n  os: Windows\n\nChromeLinux:\n  browser: chrome\n  os: Linux\n\nFirefoxLinux:\n  browser: firefox\n  os: Linux\n```\n\n----------------------------------------\n\nTITLE: Basic JSON Structure for Wrapped License Request\nDESCRIPTION: Example JSON structure showing how a wrapped license request should be formatted\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/license-wrapping.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rawLicenseRequestBase64\": \n      \"VGhlIHJhdyBsaWNlbnNlIHJlcXVlc3QgZ2VuZXJhdGVkIGJ5IHRoZSBDRE0=\",\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Installing langmap Package with NPM\nDESCRIPTION: Command to install the 'langmap' package using NPM package manager.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/third_party/language-mapping-list/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install langmap\n```\n\n----------------------------------------\n\nTITLE: Python Dependencies\nDESCRIPTION: Requirements file listing Python package dependencies, specifically Flask for the server implementation.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/app-engine/shaka-player-demo/README.md#2025-04-17_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nrequirements.txt\n```\n\n----------------------------------------\n\nTITLE: Platform and Browser Support Matrix in Markdown\nDESCRIPTION: A markdown table showing the compatibility of Shaka Player across different platforms and browsers. It includes support for various operating systems and devices.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|Browser       |Windows   |Mac      |Linux    |Android  |iOS >= 9  |iOS >= 17.1|iPadOS >= 13|ChromeOS|Other|\n|:------------:|:--------:|:-------:|:-------:|:-------:|:--------:|:---------:|:----------:|:------:|:---:|\n|Chrome        |**Y**     |**Y**    |**Y**    |**Y**    |**Native**|**Native** |**Native**  |**Y**   | -   |\n|Firefox       |**Y**     |**Y**    |**Y**    |untested⁵|**Native**|**Native** |**Native**  | -      | -   |\n|Edge          |**Y**     | -       | -       | -       | -        | -         | -          | -      | -   |\n|Edge Chromium |**Y**     |**Y**    |**Y**    |untested⁵|**Native**|**Native** |**Native**  | -      | -   |\n|IE            | N        | -       | -       | -       | -        | -         | -          | -      | -   |\n|Safari        | -        |**Y**    | -       | -       |**Native**|**Y**      |**Y**       | -      | -   |\n|Opera         |**Y**     |**Y**    |**Y**    |untested⁵|**Native**| -         | -          | -      | -   |\n|Chromecast²   | -        | -       | -       | -       | -        | -         | -          | -      |**Y**|\n|Tizen TV³     | -        | -       | -       | -       | -        | -         | -          | -      |**Y**|\n|WebOS⁶        | -        | -       | -       | -       | -        | -         | -          | -      |**Y**|\n|Hisense⁷      | -        | -       | -       | -       | -        | -         | -          | -      |**Y**|\n|Vizio⁷        | -        | -       | -       | -       | -        | -         | -          | -      |**Y**|\n|Xbox One      | -        | -       | -       | -       | -        | -         | -          | -      |**Y**|\n|Playstation 4⁷| -        | -       | -       | -       | -        | -         | -          | -      |**Y**|\n|Playstation 5⁷| -        | -       | -       | -       | -        | -         | -          | -      |**Y**|\n```\n\n----------------------------------------\n\nTITLE: Running Shaka Player Build and Test Scripts\nDESCRIPTION: Commands for testing changes using Shaka Player's build system. The first command runs both the compiler and linter checks, while the second command executes the unit and integration tests. Both checks must pass before a patch can be accepted.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/CONTRIBUTING.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npython build/all.py\n```\n\nLANGUAGE: sh\nCODE:\n```\npython build/test.py\n```\n\n----------------------------------------\n\nTITLE: Cloning Shaka Player Repository\nDESCRIPTION: These shell commands clone the Shaka Player repository from GitHub and navigate into the project directory.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/welcome.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/shaka-project/shaka-player.git\ncd shaka-player\n```\n\n----------------------------------------\n\nTITLE: Breaking Changes in Shaka Player v4.0.0\nDESCRIPTION: Major breaking changes including removal of deprecated features, configuration changes, and API updates that affect backward compatibility.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n* Remove small/large gap config, always jump gaps\n* manifest.dash.defaultPresentationDelay replaced by manifest.defaultPresentationDelay\n* Configuration factories should be plain functions, not constructors\n* addTextTrack() replaced by addTextTrackAsync()\n* TrackLabelFormat and FailReasonCode moved to shaka.ui.Overlay namespace\n* Storage.store() now returns AbortableOperation instead of Promise\n* Removed getStoreInProgress()\n* Uint8ArrayUtils.equal replaced by BufferUtils.equal\n* SegmentIndex.destroy() replaced by synchronous release()\n* SegmentIterator.seek() replaced by SegmentIndex.getIteratorForTime()\n* SegmentIndex.merge() made private\n* AbrManager plugins must implement playbackRateChanged()\n* Cue.spacer replaced by lineBreak\n* IUIElement plugins must have release() method\n```\n\n----------------------------------------\n\nTITLE: Manifest Format Support Matrix in Markdown\nDESCRIPTION: A markdown table showing the support for different manifest formats (DASH, HLS, MSS) across various streaming types such as Video On-Demand, Live, Event, and In-Progress Recording.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/README.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n|Format|Video On-Demand|Live |Event|In-Progress Recording|\n|:----:|:-------------:|:---:|:---:|:-------------------:|\n|DASH  |**Y**          |**Y**| -   |**Y**                |\n|HLS   |**Y**          |**Y**|**Y**| -                   |\n|MSS   |**Y**          | -   | -   | -                   |\n```\n\n----------------------------------------\n\nTITLE: Installing Prerequisites on Ubuntu/Debian for Shaka Player\nDESCRIPTION: This shell command downloads and executes a script to install the necessary prerequisites for Shaka Player on Ubuntu or Debian systems.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/welcome.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl https://raw.githubusercontent.com/shaka-project/shaka-player/main/build/install-linux-prereqs.sh | bash\n```\n\n----------------------------------------\n\nTITLE: Running Shaka Player Tests in Specific Browsers\nDESCRIPTION: These shell commands demonstrate how to run Shaka Player tests in specific browsers using the test script, with examples for Opera and multiple browsers.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/welcome.md#2025-04-17_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n./build/test.py --browsers Opera\n\n# or:\n\n./build/test.py --browsers Chrome,Firefox,Edge\n```\n\n----------------------------------------\n\nTITLE: Specifying Flask Dependency for Shaka Player Demo in Python\nDESCRIPTION: This snippet defines the required version of Flask for the Shaka Player demo. It ensures compatibility with the Appspot Python runtime.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/app-engine/shaka-player-demo/requirements.txt#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nFlask==2.2.5\n```\n\n----------------------------------------\n\nTITLE: Building Shaka Player without Polyfills and Text Parsers\nDESCRIPTION: Commands demonstrating how to build Shaka Player while excluding entire categories of plugins like polyfills and text parsers.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/plugins.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n# Build without polyfills:\npython build/build.py +@complete -@polyfill\n# Build without polyfills or text parsers:\npython build/build.py +@complete -@polyfill -@text\n```\n\n----------------------------------------\n\nTITLE: Networking Build Configuration Example\nDESCRIPTION: Example content of a build configuration file showing how to include standard networking scheme plugins.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/plugins.md#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n# All standard networking scheme plugins.\n+../../lib/net/http_xhr_plugin.js\n+../../lib/net/http_fetch_plugin.js\n+../../lib/net/http_plugin_utils.js\n+../../lib/net/data_uri_plugin.js\n```\n\n----------------------------------------\n\nTITLE: Generating Green Pixel Video for Shaka Player Testing (Bash)\nDESCRIPTION: This bash script creates a 10-second video of a green pixel for testing purposes. It generates 300 frames of a 32x32 green pixel image, then uses ffmpeg to combine them into a 320x180 MP4 video at 30fps.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/test/test/assets/green-pixel.txt#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p pixel\n\n# Create a 32x32 green pixel image\nconvert xc:#008000[32x32] pixel/pixel0.png\n\n# Copy it to make 300 frames\nfor i in $(seq 1 299); do cp pixel/pixel0.png pixel/pixel$i.png; done\n\n# Combine the frames into a 30fps, 10s video, scaled up to 320x180\nffmpeg -r 30 -i pixel/pixel%d.png \\\n  -c:v h264 -vf fps=30 -pix_fmt yuv420p -preset veryslow -tune stillimage \\\n  -vf scale=320:180 \\\n  -y test/test/assets/green-pixel.mp4\n```\n\n----------------------------------------\n\nTITLE: Running Shaka Player Tests with Selenium Grid\nDESCRIPTION: Command to execute Shaka Player tests using a Selenium Grid configuration file and specifying the grid address.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/selenium-grid-config.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npython build/test.py \\\n    --grid-config grid-config.yaml \\\n    --grid-address selenium-hub-hostname:4444\n```\n\n----------------------------------------\n\nTITLE: Member vs Static Function Example (Member)\nDESCRIPTION: Demonstrates the correct usage pattern for member functions that modify class state. Member functions should be used when they operate on the instance's state.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/style.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nX = class {\n  doSomething() {\n    // a lot of math\n    // …\n    result = ...\n    this.fast.doSomething(result);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Executing Build Script with Arguments Printing\nDESCRIPTION: Example showing how to run the build.py script with PRINT_ARGUMENTS environment variable to display subprocess command lines during execution.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/build/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ PRINT_ARGUMENTS=1 build.py\ngit -C /path/to/shaka describe --tags --dirty\nCompiling the library...\njava -jar /path/to/shaka/node_modules/.../compiler.jar --language_in ...\n```\n\n----------------------------------------\n\nTITLE: Defining Localization Terms in Markdown\nDESCRIPTION: This code snippet defines key terms used in the localization system, including Locale, Phrase, Context, and Localized Phrase. It uses a markdown table format to clearly present the terms and their definitions with examples.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/design/current/localization-design-principles.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```\nTerm             | Definition                     | Example\n-----------------|-------------------------------------------------------------\nLocale           | See \"Talking About Languages\". | \"en-CA\"\n                 |                                |\nPhrase           | Any series of words that have  | -\n                 | some meaning in some locale.   |\n                 |                                |\nContext          | A description of a phrase.     | \"The title for a button that\n                 |                                | stops video playback\"\n                 |                                |\nLocalized Phrase | A phrase in a specific locale  | \"arret\" (fr-CA)\n                 | that maps to a context.        |\n```\n```\n\n----------------------------------------\n\nTITLE: Member vs Static Function Example (Static)\nDESCRIPTION: Demonstrates the correct usage pattern for static functions. Static functions should be used when the same operation needs to be applied to different targets without modifying the class state directly.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/style.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nX = class {\n  doSomethingFast() {\n    X.doSomething(this.fast);\n  }\n  doSomethingSlow() {\n    X.doSomething(this.slow);\n  }\n  static doSomething(target) {\n    // a lot of math\n    // …\n    result = ...\n    target.doSomething(result);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: TextEncoder/TextDecoder Polyfill Import Reference for Shaka Player v3.1\nDESCRIPTION: Reference to a suggested polyfill for TextEncoder/TextDecoder support which is required in Shaka Player v3.1, particularly for Xbox One compatibility.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/upgrade.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nfastestsmallesttextencoderdecoder/EncoderDecoderTogether.min.js\n```\n\n----------------------------------------\n\nTITLE: Illustrating Locale Search Order in Markdown\nDESCRIPTION: This code snippet demonstrates the search order for locales using ASCII art diagrams. It shows how the system searches for localized phrases within a specific locale, grouping related locales into self, parent, siblings, and children categories.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/design/current/localization-design-principles.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```\nAvailable locales:\n   \"en\", \"en-US\", \"en-GB\", en-CA\", \"fr\", \"fr-CA\"\n\nSearch order for \"en\":\n\n| 1. self | -> | 2. parent | -> | 3. siblings | -> | 4. children |\n-----------------------------------------------------------------\n| a. en   |    |           |    |             |    | a. en-US    |\n|         |    |           |    |             |    | b. en-GB    |\n|         |    |           |    |             |    | c. en-CA    |\n```\n```\n\n----------------------------------------\n\nTITLE: Documentation Structure for Gap Jumping Feature\nDESCRIPTION: Comprehensive markdown documentation explaining the gap jumping feature in Shaka Player, including background information, issue references, and technical implementation details across different components.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/design/current/gap-jumping.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Shaka Player Gap Jumping\n\n## Overview\n\nGap jumping is a feature to automatically jump over gaps (i.e. missing content)\nin a stream.  There are several cases where content may not be present.  This\nmissing content can cause gaps in the video which will cause the player to stop,\nwaiting for content that may never exist.  Gap jumping is one of the most\nrequested features by developers.\n\nThere are two kinds of gaps we need to consider: gaps in the manifest and gaps\nin the media itself.  Gaps in the manifest can be fixed by simply adjusting the\nstart and end times of the segments.  We already adjust the segment index to\nmake the segments continuous.  Gaps in the media cannot be detected early (since\nthe gaps may not appear in the manifest); they can only be detected once the\nmedia has been appended to the MediaSource and the browser gives us a gap in the\nbuffered ranges.\n```\n\n----------------------------------------\n\nTITLE: Shaka Player Changelog Entry\nDESCRIPTION: A markdown-formatted changelog detailing bug fixes for the Shaka Player project, organized by components and linked to their respective GitHub issues and commits.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\n\n* Active track state on variantchanged and adaptation events ([#7350](https://github.com/shaka-project/shaka-player/issues/7350)) ([c15ca1d](https://github.com/shaka-project/shaka-player/commit/c15ca1dd180576b2512b03c4bcda75aaad2e3abe))\n* **Ads:** Allow play interstitials on iOS fullscreen ([#7538](https://github.com/shaka-project/shaka-player/issues/7538)) ([84ae806](https://github.com/shaka-project/shaka-player/commit/84ae80675ade19e6cf542ef90481094b29a29d42))\n* **Ads:** Allow play interstitials using single video element when use native HLS ([#7550](https://github.com/shaka-project/shaka-player/issues/7550)) ([fd6c322](https://github.com/shaka-project/shaka-player/commit/fd6c3223203b318f6236e227b31f234c87590a34))\n```\n\n----------------------------------------\n\nTITLE: Stats Script Graph Generation\nDESCRIPTION: Example showing how to use stats.py to generate dependency graphs in DOT format and convert them to SVG using graphviz tools.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/build/README.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nstats.py -c -d | fdb -Goverlap=prism | neato -n2 -Tsvg > out.svg\n```\n\n----------------------------------------\n\nTITLE: Array Transformation (After)\nDESCRIPTION: Shows the preferred approach to transforming arrays using map. This pattern is more concise and readable for simple array transformations.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/style.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst audio = variants.map((variant) => variant.audio);\n```\n\n----------------------------------------\n\nTITLE: Installing Flask Dependency for Python Web App\nDESCRIPTION: Specifies Flask version 2.2.5 as a required dependency for the Shaka Player Version Index service. This version pinning ensures consistent behavior across deployments.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/app-engine/demo-version-index/requirements.txt#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nFlask==2.2.5\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Locale Matching Examples in Markdown\nDESCRIPTION: This code snippet shows a markdown table that illustrates examples of locale matching. It demonstrates how different user locale preferences are matched with available content locales based on the described matching strategy.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/design/current/fuzzy-locale-matching.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nUser Wants | Matching Type       | Locale\n-----------|---------------------|----------\nen         | Locale Compatible   | en\nen-UK      | Parent Locale       | en\nfr         | Language Compatible | fr-CA\nzk         | No Match            | No Match\n```\n\n----------------------------------------\n\nTITLE: HTML Comment for Shaka Player Bug Report Template\nDESCRIPTION: An HTML comment block providing context about the auto-filled issue template for bug reports in Shaka Player. It warns users that confidential URLs may need to be censored and provides a link to manually fill out an issue template.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/demo/customWarning.txt#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!--\nNote: This auto-filled issue template contains the manifest and license server\nof the asset you were playing at the time you pressed the bug report button.\nWe have detected that you were playing a custom asset.\nIf this asset's URL is confidential, you might instead want to censor this or\nfill out an issue template manually:\nhttps://github.com/shaka-project/shaka-player/issues/new/choose\n-->\n```\n\n----------------------------------------\n\nTITLE: Time Synchronization File\nDESCRIPTION: Static file configured with cross-origin access headers for client-side time synchronization.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/app-engine/shaka-player-demo/README.md#2025-04-17_snippet_3\n\nLANGUAGE: text\nCODE:\n```\ntime.txt\n```\n\n----------------------------------------\n\nTITLE: Defining Variables and Browser Configurations in YAML\nDESCRIPTION: Example of using YAML anchors to define reusable browser configurations and applying them to multiple browser definitions.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/selenium-grid-config.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nvars:\n  firefox_config: &firefox_config\n    moz:firefoxOptions:\n      prefs:\n        media.gmp-manager.updateEnabled: true\n        media.eme.enabled: true\n\nFirefoxMac:\n  browser: firefox\n  os: Mac\n  extra_configs:\n    - *firefox_config\n\nFirefoxWindows:\n  browser: firefox\n  os: Windows\n  extra_configs:\n    - *firefox_config\n\nFirefoxLinux:\n  browser: firefox\n  os: Linux\n  extra_configs:\n    - *firefox_config\n```\n\n----------------------------------------\n\nTITLE: Custom Handling of Retries in Shaka Player (JavaScript)\nDESCRIPTION: This snippet demonstrates how to implement custom retry handling in Shaka Player. It shows how to convert a retry into a critical error, specifically for the case of a missing VOD manifest. The code uses the NetworkingEngine's retry event to intercept and handle specific error scenarios.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/errors.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst nwEngine = player.getNetworkingEngine();\n\nconst vodManifestNotFoundHandler = (event /* shaka.net.NetworkingEngine.RetryEvent */) => {\n  const code = event.error.code;\n  const data = event.error.data;\n\n  if (code === shaka.util.Error.Code.BAD_HTTP_STATUS) {\n    if (\n      // each type of error has its own data structure (or none at all), tread with care\n      Array.isArray(data) &&\n      data[1] === 404 &&\n      data[4] === shaka.net.NetworkingEngine.RequestType.MANIFEST\n    ) {\n      // preventDefault inside a retry callback will immediately stop retries\n      event.preventDefault();\n    }\n  }\n};\n\nnwEngine.addEventListener('retry', vodManifestNotFoundHandler);\n\nplayer.addEventListener('load'() => {\n  nwEngine.removeEventListener('retry', vodManifestNotFoundHandler);\n});\n```\n\n----------------------------------------\n\nTITLE: Listening to and Handling Errors in Shaka Player (JavaScript)\nDESCRIPTION: This snippet demonstrates how to set up error handling for a Shaka Player instance. It shows how to handle both native Error and shaka.util.Error, distinguishing between critical and non-critical errors. The code also illustrates different ways to catch errors during player load.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/errors.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst handleError = (error) => {\n  if (error instanceof Error) {\n    // shaka crashed with an unhandled native error\n  }\n\n  if (error.severity === shaka.util.Error.Severity.CRITICAL) {\n    // handle fatal error, playback can not continue\n  } else {\n    // handle non-fatal error, playback can continue\n  }\n};\n\nconst player = new shaka.Player();\nawait player.attach(video);\n\n// handle errors that occur after load\nplayer.addEventListener('error', (event) = handleError(event.detail));\n\n// there are two options for catching errors that occur during load\n\n// it's possible to listen directly on the promise\nplayer.load(url).catch(handleError);\n\n// or to use async/await with a try/catch\ntry {\n  await player.load(url);\n} catch (e) {\n  handleError(e);\n}\n```\n\n----------------------------------------\n\nTITLE: Locale Compatibility Examples in Shaka Player\nDESCRIPTION: Illustrates the three types of locale compatibility (Locale Compatible, Region Compatible, and Language Compatible) with specific examples for each type.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/design/current/talking-about-languages.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n\"en\" and \"en\"\n\"en-US\" and \"en-US\"\n\"en-US-wa\" and \"en-US-wa\"\n\"en-US\" and \"en-US\"\n\"en-US\" and \"en-US-wa\"\n\"en-US-wa\" and \"en-US-tx\"\n\"en-US\" and \"en-US\"\n\"en-US\" and \"en-CA\"\n\"en-US-wa\" and \"en-US-tx\"\n\"en-US-wa\" and \"en-CA-mb\"\n\"en\" and \"en-US-wa\"\n\"en-US\" and \"en-US-wa\"\n```\n\n----------------------------------------\n\nTITLE: Custom Handling of Streaming Errors in Shaka Player (JavaScript)\nDESCRIPTION: This snippet shows how to configure custom handling of streaming errors in Shaka Player. It uses the streaming.failureCallback property to define custom behavior for critical and recoverable errors during streaming.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/tutorials/errors.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nplayer.configure('streaming.failureCallback', (error) => {\n  if (error.severity === shaka.util.Error.Severity.CRITICAL) {\n    // custom handling of critical error\n    // e.g. player.retryStreaming();\n  } else {\n    // custom handling of recoverable error\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Preferred Codecs in Shaka Player\nDESCRIPTION: Demonstrates how to configure preferred codec types when multiple codecs are available. The array specifies codec preference order.\nSOURCE: https://github.com/shaka-project/shaka-player/blob/main/docs/design/current/codec_preferences.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nplayer.configure('preferredCodecs', ['avc1', 'vp09']);\n```"
  }
]