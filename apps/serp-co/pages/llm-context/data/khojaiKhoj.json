[
  {
    "owner": "khoj-ai",
    "repo": "khoj",
    "content": "TITLE: Updating Routes in web_client.py\nDESCRIPTION: This Python code snippet demonstrates how to add a new route in the `web_client.py` file, likely part of a Khoj application. It defines a POST endpoint at `/new_route` that serves the `new_file/index.html` template, providing request context to the template.  It requires authentication.\nSOURCE: https://github.com/khoj-ai/khoj/blob/master/src/interface/web/README.md#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n@web_client.post(\"/new_route\", response_class=FileResponse)\n@requires([\"authenticated\"], redirect=\"login_page\")\ndef index_post(request: Request):\n\n    return templates.TemplateResponse(\n        \"new_file/index.html\",\n        context={\n            \"request\": request,\n        },\n    )\n```\n\n----------------------------------------\n\nTITLE: Setting KHOJ_DOMAIN for Remote Access (Shell/Config)\nDESCRIPTION: Configures the `KHOJ_DOMAIN` environment variable to specify the remotely accessible IP address or domain name for the Khoj application. This setting is essential for enabling remote access and can be applied via shell commands or within configuration files like docker-compose.yml. Examples include setting it to a custom domain, a local network IP, a Tailscale IP, or a Tailscale FQDN. Secure remote access also requires setting passwords, the `KHOJ_DJANGO_SECRET_KEY`, configuring authentication, and opening firewall ports.\nSOURCE: https://github.com/khoj-ai/khoj/blob/master/documentation/docs/advanced/remote.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nKHOJ_DOMAIN=my.khoj-domain.com\n```\n\nLANGUAGE: Shell\nCODE:\n```\nKHOJ_DOMAIN=192.168.0.4\n```\n\nLANGUAGE: Shell\nCODE:\n```\nKHOJ_DOMAIN=100.4.2.0\n```\n\nLANGUAGE: Shell\nCODE:\n```\nKHOJ_DOMAIN=khoj.tailfe8c.ts.net\n```\n\n----------------------------------------\n\nTITLE: Installing khoj.el with use-package and Custom Indexing (Standard)\nDESCRIPTION: Provides a standard `use-package` configuration for installing `khoj.el` from MELPA Stable. In addition to setting the API key and server URL, it demonstrates how to specify custom org files and directories for Khoj to index using `khoj-index-directories` and `khoj-index-files`. Requires `use-package` and MELPA Stable.\nSOURCE: https://github.com/khoj-ai/khoj/blob/master/documentation/docs/clients/emacs.md#_snippet_2\n\nLANGUAGE: elisp\nCODE:\n```\n;; Install Khoj client from MELPA Stable\n(use-package khoj\n  :ensure t\n  :pin melpa-stable\n  :bind (\"C-c s\" . 'khoj)\n  :config (setq khoj-api-key \"YOUR_KHOJ_CLOUD_API_KEY\"\n                khoj-server-url \"https://app.khoj.dev\"\n                khoj-index-directories '(\"~/docs/org-roam\" \"~/docs/notes\")\n                khoj-index-files '(\"~/docs/todo.org\" \"~/docs/work.org\")))\n```\n\n----------------------------------------\n\nTITLE: Configuring Rewrites in next.config.mjs\nDESCRIPTION: This JavaScript code snippet defines rewrite rules within the `next.config.mjs` file for a Next.js application.  It proxies requests to the API server, mapping requests from `/api/:path*` to `http://localhost:42110/api/:path*`. This assumes an API server running locally on port 42110.\nSOURCE: https://github.com/khoj-ai/khoj/blob/master/src/interface/web/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n    rewrites: async () => {\n        return [\n            {\n                source: '/api/:path*',\n                destination: 'http://localhost:42110/api/:path*',\n            },\n        ];\n    },\n```\n\n----------------------------------------\n\nTITLE: Applying Django Database Migrations (Bash)\nDESCRIPTION: Executes the Django management command `migrate` via the Python interpreter. This command applies any pending migration files to the configured database, updating the schema.\nSOURCE: https://github.com/khoj-ai/khoj/blob/master/src/khoj/app/README.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npython3 src/manage.py migrate\n```\n\n----------------------------------------\n\nTITLE: Starting Khoj FastAPI Server (Bash)\nDESCRIPTION: Runs the main Khoj application entry point (`main.py`) using the Python interpreter. This starts the FastAPI server and includes the `--anonymous-mode` flag to bypass authentication for local single-user use.\nSOURCE: https://github.com/khoj-ai/khoj/blob/master/src/khoj/app/README.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\npython3 src/khoj/main.py --anonymous-mode\n```\n\n----------------------------------------\n\nTITLE: Starting Khoj Server for Local Use with Anonymous Access\nDESCRIPTION: This shell command initiates the Khoj server with anonymous mode enabled, allowing login-free access suitable for single-user or local deployment. It requires Khoj to be installed via pip beforehand.\nSOURCE: https://github.com/khoj-ai/khoj/blob/master/documentation/docs/get-started/setup.mdx#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nUSE_EMBEDDED_DB=\"true\" khoj --anonymous-mode\n```\n\n----------------------------------------\n\nTITLE: Running the Khoj Development Server\nDESCRIPTION: Command to start the Khoj server using the `khoj` command-line tool. The `-vv` flag increases verbosity for debugging purposes. Assumes Khoj is installed and the virtual environment is active.\nSOURCE: https://github.com/khoj-ai/khoj/blob/master/documentation/docs/contributing/development.mdx#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nkhoj -vv\n```\n\n----------------------------------------\n\nTITLE: Starting Khoj Server with HTTPS via Tailscale Bash (bash)\nDESCRIPTION: This bash snippet starts the Khoj server using HTTPS on the standard port (443). It uses environment variable KHOJ_DOMAIN and requires specifying paths to the SSL certificate (.crt) and key (.key) generated previously via Tailscale. Replace the domain and SSL paths with those specific to your setup. sudo may be required for binding to privileged ports. Expected input is Khoj server binary and valid certificate files; output is a running HTTPS server accessible within your Tailscale network.\nSOURCE: https://github.com/khoj-ai/khoj/blob/master/documentation/docs/advanced/tailscale.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo KHOJ_DOMAIN=server.black-forest.ts.net \\\nkhoj \\\n--sslcert /path/to/your/tailscale.crt \\\n--sslkey path/to/your/tailscale.key \\\n--host=server.black-forest.ts.net \\\n--port 443\n```\n\n----------------------------------------\n\nTITLE: Setting Ollama URL and Starting Khoj via Pip (Bash)\nDESCRIPTION: Sets the `OPENAI_BASE_URL` environment variable in the shell to point to the default Ollama API endpoint (`http://localhost:11434/v1/`) and then starts the Khoj server (installed via Pip) using the `khoj` command with the `--anonymous-mode` flag. This configures Khoj to communicate with the local Ollama instance.\nSOURCE: https://github.com/khoj-ai/khoj/blob/master/documentation/docs/advanced/ollama.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_BASE_URL=\"http://localhost:11434/v1/\"\nkhoj --anonymous-mode\n```\n\n----------------------------------------\n\nTITLE: Continuously Building Code with Yarn\nDESCRIPTION: This command continuously rebuilds the Next.js project as changes are made to the source code.  This allows for a faster development feedback loop.\nSOURCE: https://github.com/khoj-ai/khoj/blob/master/src/interface/web/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nyarn watch\n```\n\n----------------------------------------\n\nTITLE: Starting Khoj Services with Docker Compose\nDESCRIPTION: Command to start the Khoj server and database services defined in the `docker-compose.yml` file. The `-d` flag runs the containers in detached mode (in the background). Assumes Docker and Docker Compose are installed.\nSOURCE: https://github.com/khoj-ai/khoj/blob/master/documentation/docs/contributing/development.mdx#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ndocker-compose up -d\n```\n\n----------------------------------------\n\nTITLE: Continuously Building Code on Windows with Yarn\nDESCRIPTION: This command continuously rebuilds the Next.js project for Windows environments as changes are made.  Similar to `yarn watch`, but adapted for Windows command-line tooling.\nSOURCE: https://github.com/khoj-ai/khoj/blob/master/src/interface/web/README.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nyarn windowswatch\n```\n\n----------------------------------------\n\nTITLE: Running Khoj Unit Tests with Pytest\nDESCRIPTION: Command to execute the Python unit tests for the Khoj project using the `pytest` framework. This should be run from the project's root directory within an active virtual environment to ensure all test dependencies are available.\nSOURCE: https://github.com/khoj-ai/khoj/blob/master/documentation/docs/contributing/development.mdx#_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\npytest\n```\n\n----------------------------------------\n\nTITLE: Running Cohere Terrarium Docker Sandbox - Bash\nDESCRIPTION: These commands pull the latest Terrarium Docker image and run it in detached mode, mapping the container's port 8080 to the host's port 8080, making the sandbox accessible locally. It requires Docker installed to set up the local code execution environment for Khoj.\nSOURCE: https://github.com/khoj-ai/khoj/blob/master/documentation/docs/features/code_execution.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\ndocker pull ghcr.io/khoj-ai/terrarium:latest\ndocker run -d -p 8080:8080 ghcr.io/khoj-ai/terrarium:latest\n```\n\n----------------------------------------\n\nTITLE: Generating HTTPS Certificate with Tailscale Bash (bash)\nDESCRIPTION: This bash snippet runs the Tailscale CLI to generate HTTPS certificate and key files for your server's Tailscale domain (e.g., server.black-forest.ts.net). You must have Tailscale installed and be authenticated on the server. The output will be .crt and .key files in your current directory for use in SSL server configurations. You need to substitute the domain with your actual server's Tailscale-assigned DNS name.\nSOURCE: https://github.com/khoj-ai/khoj/blob/master/documentation/docs/advanced/tailscale.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Assuming the server is named, `server` and your tailnet is `black-forest.ts.net`\n# Note path of the .crt and .key files generated\n\ntailscale cert server.black-forest.ts.net\n```\n\n----------------------------------------\n\nTITLE: Rebuilding Khoj Docker Image after Code Changes\nDESCRIPTION: Command to rebuild the Docker images defined in `docker-compose.yml`, specifically targeting the Khoj application image. The `--no-cache` flag ensures that the build process does not use cached layers, incorporating any recent code changes. This is necessary after modifying the source code.\nSOURCE: https://github.com/khoj-ai/khoj/blob/master/documentation/docs/contributing/development.mdx#_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\ndocker-compose build --no-cache\n```\n\n----------------------------------------\n\nTITLE: Installing khoj.el with use-package (Minimal)\nDESCRIPTION: Demonstrates a minimal configuration to install and set up the `khoj` package using `use-package`, ensuring it's fetched from MELPA Stable. It binds the main command to `C-c s` and configures the API key and server URL. Requires the `use-package` macro and MELPA Stable repository configured in Emacs. Assumes default indexing of org-agenda files.\nSOURCE: https://github.com/khoj-ai/khoj/blob/master/documentation/docs/clients/emacs.md#_snippet_1\n\nLANGUAGE: elisp\nCODE:\n```\n;; Install Khoj client from MELPA Stable\n(use-package khoj\n  :ensure t\n  :pin melpa-stable\n  :bind (\"C-c s\" . 'khoj)\n  :config (setq khoj-api-key \"YOUR_KHOJ_CLOUD_API_KEY\"\n                khoj-server-url \"https://app.khoj.dev\"))\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server for Docusaurus Website - Shell\nDESCRIPTION: This snippet provides the command to start a local development server for the Docusaurus website. The server serves the site on localhost and supports live reload, meaning changes in source files are automatically reflected in the browser without manual restarts. This facilitates efficient site development and testing.\nSOURCE: https://github.com/khoj-ai/khoj/blob/master/documentation/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ yarn start\n```\n\n----------------------------------------\n\nTITLE: Running the Development Server\nDESCRIPTION: This command starts the Next.js development server, which allows you to view and test the application in a local environment.  It typically runs on port 3000 by default.\nSOURCE: https://github.com/khoj-ai/khoj/blob/master/src/interface/web/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Starting Khoj with Docker Compose (Bash)\nDESCRIPTION: Executes the `docker-compose up` command in the directory containing the Khoj `docker-compose.yml` file. This command builds, (re)creates, starts, and attaches to containers for a service, effectively starting the Khoj application configured to potentially use Ollama if the `OPENAI_BASE_URL` environment variable is uncommented in the compose file.\nSOURCE: https://github.com/khoj-ai/khoj/blob/master/documentation/docs/advanced/ollama.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up\n```\n\n----------------------------------------\n\nTITLE: Installing khoj.el via package-install (Direct)\nDESCRIPTION: Installs the `khoj` package directly using `M-x package-install` and sets the necessary `khoj-api-key` and `khoj-server-url` variables for connecting to the Khoj service. Assumes default indexing of org-agenda files. Requires a running Emacs instance with package management configured.\nSOURCE: https://github.com/khoj-ai/khoj/blob/master/documentation/docs/clients/emacs.md#_snippet_0\n\nLANGUAGE: elisp\nCODE:\n```\n;; Install Khoj.el\nM-x package-install khoj\n\n; Set your Khoj API key\n(setq khoj-api-key \"YOUR_KHOJ_CLOUD_API_KEY\")\n(setq khoj-server-url \"https://app.khoj.dev\")\n```\n\n----------------------------------------\n\nTITLE: Installing Khoj Locally via Pip on Linux\nDESCRIPTION: Shell commands to clone the Khoj repository, create and activate a Python virtual environment, and install Khoj with development dependencies using pip on Linux systems. Assumes `python3` and `git` are installed.\nSOURCE: https://github.com/khoj-ai/khoj/blob/master/documentation/docs/contributing/development.mdx#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# Get Khoj Code\ngit clone https://github.com/khoj-ai/khoj && cd khoj\n\n# Create, Activate Virtual Environment\npython3 -m venv .venv && source .venv/bin/activate\n\n# Install Khoj for Development\npip install -e '.[dev]'\n```\n\n----------------------------------------\n\nTITLE: Running the Khoj Application Locally with Yarn - Bash\nDESCRIPTION: This snippet executes 'yarn start' to launch the Khoj application in development mode. Yarn must be installed, and dependencies must already be present via 'yarn install'. No parameters are required. The command starts the app, serving it on a configured local port or Electron process, as defined in the project scripts.\nSOURCE: https://github.com/khoj-ai/khoj/blob/master/src/interface/desktop/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn start\n\n```\n\n----------------------------------------\n\nTITLE: Installing Khoj Locally via Pip on Windows\nDESCRIPTION: Shell commands specifically for Windows to clone the Khoj repository, create a Python virtual environment, activate it using the Windows script path, and install Khoj with development dependencies using pip. Assumes `python3` and `git` are installed.\nSOURCE: https://github.com/khoj-ai/khoj/blob/master/documentation/docs/contributing/development.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# Get Khoj Code\ngit clone https://github.com/khoj-ai/khoj && cd khoj\n\n# Create, Activate Virtual Environment\npython3 -m venv .venv && .venv\\Scripts\\activate\n\n# Install Khoj for Development\npip install -e '.[dev]'\n```\n\n----------------------------------------\n\nTITLE: Install LiteLLM\nDESCRIPTION: Installs LiteLLM with the proxy extension. This is the first step in setting up LiteLLM to act as a proxy for LLM APIs.\nSOURCE: https://github.com/khoj-ai/khoj/blob/master/documentation/docs/advanced/litellm.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install litellm[proxy]\n```\n\n----------------------------------------\n\nTITLE: Installing Khoj Server via pip on Windows with CUDA GPU\nDESCRIPTION: This command installs the Khoj server on Windows with NVIDIA CUDA GPU support by setting the CMAKE_ARGS environment variable. Dependencies include Python, pip, and llama-cpp-python.\nSOURCE: https://github.com/khoj-ai/khoj/blob/master/documentation/docs/get-started/setup.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$env:CMAKE_ARGS = \"-DGGML_CUDA=on\"\npy -m pip install 'khoj[local]'\n```\n\n----------------------------------------\n\nTITLE: Disabling HTTPS with KHOJ_NO_HTTPS (Shell/Config)\nDESCRIPTION: Sets the `KHOJ_NO_HTTPS` environment variable to `True` to prevent Khoj from enforcing HTTPS. This configuration is useful when Khoj is deployed behind a reverse proxy that handles SSL termination or when it's only accessible within a secure private network. It should not be used if Khoj is exposed directly to the public internet without SSL.\nSOURCE: https://github.com/khoj-ai/khoj/blob/master/documentation/docs/advanced/remote.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nKHOJ_NO_HTTPS=True\n```\n\n----------------------------------------\n\nTITLE: Downloading Ollama Model via CLI (Bash)\nDESCRIPTION: Uses the `ollama pull` command in Bash to download a specific large language model (e.g., `llama3.1`) from the Ollama library for local execution. This is a prerequisite step before configuring Khoj to use the model.\nSOURCE: https://github.com/khoj-ai/khoj/blob/master/documentation/docs/advanced/ollama.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nollama pull llama3.1\n```\n\n----------------------------------------\n\nTITLE: Building Static Content for Docusaurus Website - Shell\nDESCRIPTION: This snippet features the command to build the website into static content using yarn. The static site files are generated into the 'build' directory, which can then be served using any static content hosting service. This step is necessary before deploying the site to production.\nSOURCE: https://github.com/khoj-ai/khoj/blob/master/documentation/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ yarn build\n```\n\n----------------------------------------\n\nTITLE: Installing Khoj Locally via Pip on macOS\nDESCRIPTION: Shell commands to clone the Khoj repository, create and activate a Python virtual environment, and install Khoj with development dependencies using pip on macOS or systems using zsh. Assumes `python3` and `git` are installed.\nSOURCE: https://github.com/khoj-ai/khoj/blob/master/documentation/docs/contributing/development.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# Get Khoj Code\ngit clone https://github.com/khoj-ai/khoj && cd khoj\n\n# Create, Activate Virtual Environment\npython3 -m venv .venv && source .venv/bin/activate\n\n# For MacOS or zsh users run this\npip install -e '.[dev]'\n```\n\n----------------------------------------\n\nTITLE: Exporting Built Files with Yarn\nDESCRIPTION: This command builds the Next.js project into static files that can be served by a web server. This command is platform-agnostic.\nSOURCE: https://github.com/khoj-ai/khoj/blob/master/src/interface/web/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn export\n```\n\n----------------------------------------\n\nTITLE: Exporting Built Files on Windows with Yarn\nDESCRIPTION: This command builds the Next.js project into static files, specifically for Windows environments, and serves them. It's tailored for Windows command-line environments.\nSOURCE: https://github.com/khoj-ai/khoj/blob/master/src/interface/web/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn windowsexport\n```\n\n----------------------------------------\n\nTITLE: Verifying Terrarium Sandbox - Bash\nDESCRIPTION: This `curl` command sends a POST request to the local Terrarium endpoint (`http://localhost:8080`) with a JSON payload containing a simple Python expression (`{\"code\": \"1 + 1\"}`). It verifies that the sandbox is running and can execute code. Requires the `curl` command-line tool installed.\nSOURCE: https://github.com/khoj-ai/khoj/blob/master/documentation/docs/features/code_execution.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" \\\n--url http://localhost:8080 \\\n--data-raw '{\"code\": \"1 + 1\"}' \\\n--no-buffer\n```\n\n----------------------------------------\n\nTITLE: Start LiteLLM with Mistral Tiny\nDESCRIPTION: Starts the LiteLLM proxy, configuring it to use the Mistral Tiny model via the Mistral API.  Requires setting the `MISTRAL_API_KEY` environment variable.\nSOURCE: https://github.com/khoj-ai/khoj/blob/master/documentation/docs/advanced/litellm.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport MISTRAL_API_KEY=<MISTRAL_API_KEY>\nlitellm --model mistral/mistral-tiny --drop_params\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Docusaurus Website - Shell\nDESCRIPTION: This snippet shows the command to install required dependencies for the Docusaurus project using yarn, a package manager. It assumes that yarn is installed on the system. The command installs all packages listed in the project's package.json file, enabling local development and build tasks.\nSOURCE: https://github.com/khoj-ai/khoj/blob/master/documentation/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ yarn\n```\n\n----------------------------------------\n\nTITLE: Cloning Khoj Repository for Docker Setup\nDESCRIPTION: Shell command to clone the Khoj git repository from GitHub and then change the current directory into the newly cloned project folder (`khoj`). This is the initial step for setting up the development environment using Docker.\nSOURCE: https://github.com/khoj-ai/khoj/blob/master/documentation/docs/contributing/development.mdx#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/khoj-ai/khoj && cd khoj\n```\n\n----------------------------------------\n\nTITLE: Installing Khoj using Pipx to Avoid Dependency Conflicts\nDESCRIPTION: Provides the command to install Khoj using Pipx. Pipx installs Python applications in isolated environments, preventing dependency conflicts with other globally installed Python packages. This is recommended if `pip install khoj` fails due to version conflicts.\nSOURCE: https://github.com/khoj-ai/khoj/blob/master/documentation/docs/get-started/setup.mdx#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\npipx install khoj\n```\n\n----------------------------------------\n\nTITLE: Creating Khoj Postgres Database on macOS\nDESCRIPTION: Shell command using `createdb` utility to create the 'khoj' PostgreSQL database with 'postgres' as the owner on macOS. It prompts for the password for the 'postgres' user, which should match the `POSTGRES_PASSWORD` environment variable if set.\nSOURCE: https://github.com/khoj-ai/khoj/blob/master/documentation/docs/contributing/development.mdx#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncreatedb khoj -U postgres --password\n```\n\n----------------------------------------\n\nTITLE: Creating Khoj Postgres Database on Windows\nDESCRIPTION: Shell command using `createdb` utility to create the 'khoj' PostgreSQL database with 'postgres' as the owner on Windows. It prompts for the password for the 'postgres' user, which should match the `POSTGRES_PASSWORD` environment variable if set.\nSOURCE: https://github.com/khoj-ai/khoj/blob/master/documentation/docs/contributing/development.mdx#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncreatedb -U postgres khoj --password\n```\n\n----------------------------------------\n\nTITLE: Installing khoj.el with straight.el and Custom Indexing\nDESCRIPTION: Shows how to install `khoj.el` using the `straight.el` package manager, fetching it directly from the Khoj GitHub repository. The configuration includes setting the API key, server URL, binding `C-c s`, and specifying custom org directories and files to be indexed using `khoj-org-directories` and `khoj-org-files`. Requires `straight.el` and `org-mode`.\nSOURCE: https://github.com/khoj-ai/khoj/blob/master/documentation/docs/clients/emacs.md#_snippet_3\n\nLANGUAGE: elisp\nCODE:\n```\n;; Install Khoj client using Straight.el\n(use-package khoj\n  :after org\n  :straight (khoj :type git :host github :repo \"khoj-ai/khoj\" :files (:defaults \"src/interface/emacs/khoj.el\"))\n  :bind (\"C-c s\" . 'khoj)\n  :config (setq khoj-api-key \"YOUR_KHOJ_CLOUD_API_KEY\"\n                khoj-server-url \"https://app.khoj.dev\"\n                khoj-org-directories '(\"~/docs/org-roam\" \"~/docs/notes\")\n                khoj-org-files '(\"~/docs/todo.org\" \"~/docs/work.org\")))\n```\n\n----------------------------------------\n\nTITLE: Installing Git Hooks for Code Validation\nDESCRIPTION: Shell command to execute a setup script (`./scripts/dev_setup.sh`). This script likely installs Git hooks (e.g., using pre-commit) to automatically run code formatting fixes and validation checks before commits or pushes, ensuring code quality.\nSOURCE: https://github.com/khoj-ai/khoj/blob/master/documentation/docs/contributing/development.mdx#_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\n./scripts/dev_setup.sh\n```\n\n----------------------------------------\n\nTITLE: Creating Khoj Database on MacOS (Bash)\nDESCRIPTION: Creates a new PostgreSQL database named 'khoj' using the `createdb` command-line utility, specifying the 'postgres' user for ownership or access.\nSOURCE: https://github.com/khoj-ai/khoj/blob/master/src/khoj/app/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncreatedb khoj -U postgres\n```\n\n----------------------------------------\n\nTITLE: Installing Khoj Server via pip on MacOS with ARM/M1+ GPU\nDESCRIPTION: This snippet provides the command to install the Khoj server with GPU support on MacOS ARM architecture, using CMake arguments for Metal acceleration. Dependencies include Python, pip, and llama-cpp-python.\nSOURCE: https://github.com/khoj-ai/khoj/blob/master/documentation/docs/get-started/setup.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nCMAKE_ARGS=\"-DGGML_METAL=on\" python -m pip install 'khoj[local]'\n```\n\n----------------------------------------\n\nTITLE: Creating Django Database Migrations (Bash)\nDESCRIPTION: Executes the Django management command `makemigrations` via the Python interpreter. This command inspects model changes and generates migration files to update the database schema.\nSOURCE: https://github.com/khoj-ai/khoj/blob/master/src/khoj/app/README.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npython3 src/manage.py makemigrations\n```\n\n----------------------------------------\n\nTITLE: Running Python Type Checker (Mypy)\nDESCRIPTION: Command to run `mypy`, a static type checker for Python. This command analyzes the Khoj codebase for type consistency and errors, helping to improve code reliability. It should be run within an active virtual environment.\nSOURCE: https://github.com/khoj-ai/khoj/blob/master/documentation/docs/contributing/development.mdx#_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\nmypy\n```\n\n----------------------------------------\n\nTITLE: Building Khoj Front-end Assets with Yarn\nDESCRIPTION: Shell commands to navigate into the web interface source directory (`src/interface/web/`), install Node.js dependencies using `yarn install`, and then build the static front-end assets for deployment using `yarn export`. Assumes Yarn is installed.\nSOURCE: https://github.com/khoj-ai/khoj/blob/master/documentation/docs/contributing/development.mdx#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ncd src/interface/web/\nyarn install\nyarn export\n```\n\n----------------------------------------\n\nTITLE: Deploying Docusaurus Website Using SSH - Shell\nDESCRIPTION: This snippet shows the command to deploy the built static website to GitHub Pages using SSH authentication. The environment variable USE_SSH=true instructs the deployment script to use SSH keys for pushing to the 'gh-pages' branch. It requires SSH keys to be properly configured with GitHub for authentication.\nSOURCE: https://github.com/khoj-ai/khoj/blob/master/documentation/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ USE_SSH=true yarn deploy\n```\n\n----------------------------------------\n\nTITLE: Installing Postgres and PgVector on Debian/Ubuntu (Bash)\nDESCRIPTION: Installs the PostgreSQL database server and the PgVector extension on Debian or Ubuntu systems using the apt package manager, configuring the official PostgreSQL apt repository first.\nSOURCE: https://github.com/khoj-ai/khoj/blob/master/src/khoj/app/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install -y postgresql-common\nsudo /usr/share/postgresql-common/pgdg/apt.postgresql.org.sh\nsudo apt install postgres-16 postgresql-16-pgvector\n```\n\n----------------------------------------\n\nTITLE: Deploying Docusaurus Website Using GitHub Username - Shell\nDESCRIPTION: This snippet presents the command for deploying the website to GitHub Pages without SSH by specifying the GitHub username in the GIT_USER environment variable. This method uses username-based authentication for pushing built content to the 'gh-pages' branch. Users must substitute '<Your GitHub username>' with their actual GitHub username.\nSOURCE: https://github.com/khoj-ai/khoj/blob/master/documentation/README.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ GIT_USER=<Your GitHub username> yarn deploy\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Khoj Server using Docker\nDESCRIPTION: Shows the command to stop and remove the Khoj server containers, networks, images, and associated data volumes managed by Docker Compose. This command should be run from the directory containing the `docker-compose.yml` file.\nSOURCE: https://github.com/khoj-ai/khoj/blob/master/documentation/docs/get-started/setup.mdx#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndocker-compose down --volumes\n```\n\n----------------------------------------\n\nTITLE: Creating Khoj Postgres Database on Linux\nDESCRIPTION: Shell command using `sudo` to run the `createdb` utility as the 'postgres' system user to create the 'khoj' PostgreSQL database on Linux. It prompts for the password for the 'postgres' database user, which should match the `POSTGRES_PASSWORD` environment variable if set.\nSOURCE: https://github.com/khoj-ai/khoj/blob/master/documentation/docs/contributing/development.mdx#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nsudo -u postgres createdb khoj --password\n```\n\n----------------------------------------\n\nTITLE: Installing Prod Package for Google OAuth (Bash)\nDESCRIPTION: When using a pip installation of Khoj, the production version is required to support Google OAuth. Use this command to install the `prod` extra, which includes necessary dependencies like Google OAuth libraries.\nSOURCE: https://github.com/khoj-ai/khoj/blob/master/documentation/docs/advanced/authentication.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install khoj[prod]\n```\n\n----------------------------------------\n\nTITLE: Installing Khoj Python Dependencies (Bash)\nDESCRIPTION: Installs the Khoj project's Python dependencies, including those specified for development (`[dev]`), using `pip` in editable mode (`-e`).\nSOURCE: https://github.com/khoj-ai/khoj/blob/master/src/khoj/app/README.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npip install -e '.[dev]'\n```\n\n----------------------------------------\n\nTITLE: Creating Khoj Database on Debian/Ubuntu (Bash)\nDESCRIPTION: Creates a new PostgreSQL database named 'khoj' using the `createdb` command-line utility, executing the command as the 'postgres' system user via `sudo`.\nSOURCE: https://github.com/khoj-ai/khoj/blob/master/src/khoj/app/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo -u postgres createdb khoj\n```\n\n----------------------------------------\n\nTITLE: Upgrading khoj.el using MELPA\nDESCRIPTION: Provides the Emacs commands (`M-x package-refresh-content` followed by `M-x package-reinstall khoj`) executed interactively to upgrade the `khoj.el` package when it was installed using the standard Emacs package manager with MELPA.\nSOURCE: https://github.com/khoj-ai/khoj/blob/master/documentation/docs/clients/emacs.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n1. Run `M-x package-refresh-content`\n2. Run `M-x package-reinstall khoj`\n```\n\n----------------------------------------\n\nTITLE: Configuring Khoj AI Model API for LM Studio\nDESCRIPTION: These configuration values are used when creating a new AI Model API entry in the Khoj admin panel to point Khoj towards the LM Studio local server.\nSOURCE: https://github.com/khoj-ai/khoj/blob/master/documentation/docs/advanced/lmstudio.md#_snippet_0\n\nLANGUAGE: Configuration Value\nCODE:\n```\nlmstudio\n```\n\nLANGUAGE: Configuration Value\nCODE:\n```\nany string\n```\n\nLANGUAGE: Configuration Value\nCODE:\n```\nhttp://localhost:1234/v1/\n```\n\n----------------------------------------\n\nTITLE: Upgrading khoj.el using straight.el\nDESCRIPTION: Shows the Emacs command (`M-x straight-pull-package khoj`) executed interactively to upgrade the `khoj.el` package when it was installed using the `straight.el` package manager.\nSOURCE: https://github.com/khoj-ai/khoj/blob/master/documentation/docs/clients/emacs.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n- Run `M-x straight-pull-package khoj`\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Khoj Server using Pip\nDESCRIPTION: This snippet demonstrates how to uninstall the Khoj server package using Pip and subsequently remove the associated PostgreSQL database named 'khoj'. This is intended for users who installed the server via Pip.\nSOURCE: https://github.com/khoj-ai/khoj/blob/master/documentation/docs/get-started/setup.mdx#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n# uninstall khoj server\npip uninstall khoj\n\n# delete khoj postgres db\ndropdb khoj -U postgres\n```\n\n----------------------------------------\n\nTITLE: Exporting Postgres Password Environment Variable (Bash)\nDESCRIPTION: Sets the `POSTGRES_PASSWORD` environment variable in the current shell session. This variable is often used by PostgreSQL client libraries and applications to authenticate without explicitly providing the password elsewhere.\nSOURCE: https://github.com/khoj-ai/khoj/blob/master/src/khoj/app/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nexport $POSTGRES_PASSWORD=my_secure_password\n```\n\n----------------------------------------\n\nTITLE: Installing PgVector from Source (Bash)\nDESCRIPTION: Manually compiles and installs the PgVector extension for PostgreSQL from a specific source code version. This is useful if pre-built packages are not available or a custom build is needed. Requires git, make, and a C compiler.\nSOURCE: https://github.com/khoj-ai/khoj/blob/master/src/khoj/app/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd /tmp\ngit clone --branch v0.5.1 https://github.com/pgvector/pgvector.git\ncd pgvector\nmake\nmake install # may need sudo\n```\n\n----------------------------------------\n\nTITLE: Setting Postgres User Password (SQL)\nDESCRIPTION: A SQL command intended to be executed via the `psql` client to set the password for the 'postgres' database user.\nSOURCE: https://github.com/khoj-ai/khoj/blob/master/src/khoj/app/README.md#_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nALTER USER postgres PASSWORD 'my_secure_password';\n```\n\n----------------------------------------\n\nTITLE: Starting Khoj Obsidian Plugin Development Server\nDESCRIPTION: Starts the development server for the Khoj Obsidian plugin using Yarn's `dev` script. This command, run within `src/interface/obsidian`, typically watches for file changes in the plugin source code and automatically rebuilds the `main.js` output file.\nSOURCE: https://github.com/khoj-ai/khoj/blob/master/documentation/docs/contributing/development.mdx#_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Updating Docker Image for Google OAuth (Bash)\nDESCRIPTION: To enable Google OAuth authentication in Khoj when using Docker, update the `image` line in your `docker-compose.yml` file to use the `latest` tag of the `ghcr.io/khoj-ai/khoj-cloud` image. This ensures you are running the production version required for OAuth.\nSOURCE: https://github.com/khoj-ai/khoj/blob/master/documentation/docs/advanced/authentication.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nimage: ghcr.io/khoj-ai/khoj-cloud:latest\n```\n\n----------------------------------------\n\nTITLE: Installing Khoj Obsidian Plugin Dependencies\nDESCRIPTION: Installs Node.js dependencies required for the Khoj Obsidian plugin using Yarn. This command must be executed within the plugin's source directory (`src/interface/obsidian`). Assumes Yarn is installed.\nSOURCE: https://github.com/khoj-ai/khoj/blob/master/documentation/docs/contributing/development.mdx#_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Running Khoj with Docker Compose (Bash)\nDESCRIPTION: This command starts the Khoj application and its required services (database, etc.) using the configurations defined in the `docker-compose.yml` file located in the root directory.\nSOURCE: https://github.com/khoj-ai/khoj/blob/master/src/khoj/app/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies Using Yarn - Bash\nDESCRIPTION: This snippet runs 'yarn install' to install all project dependencies, including development and runtime packages, as specified in the project's package.json. Yarn is required as a prerequisite. No input parameters are needed; it will read dependencies from the current working directory. The output is a fully set up node_modules directory, ready for further development or running the application.\nSOURCE: https://github.com/khoj-ai/khoj/blob/master/src/interface/desktop/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\n\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Yarn\nDESCRIPTION: This command installs the necessary dependencies for the Next.js project using Yarn. It ensures that all required packages are available for the application to run correctly.\nSOURCE: https://github.com/khoj-ai/khoj/blob/master/src/interface/web/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Building the Electron App with ToDesktop CLI - Bash\nDESCRIPTION: This snippet invokes 'todesktop build' to initiate building the Electron application for all supported platforms. The ToDesktop CLI must be installed and configured, and the user may be prompted to log in. The command reads from 'todesktop.json' for build settings and outputs platform-specific application builds.\nSOURCE: https://github.com/khoj-ai/khoj/blob/master/src/interface/desktop/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ntodesktop build\n\n```\n\n----------------------------------------\n\nTITLE: Installing Rust to Build Tokenizers Dependency on Mac\nDESCRIPTION: Details the steps to install Rust on macOS using Homebrew and rustup. Rust is required to build the 'tokenizers' package, a dependency of Khoj, when installing via Pip. These commands install Rust, initialize it, and update the environment.\nSOURCE: https://github.com/khoj-ai/khoj/blob/master/documentation/docs/get-started/setup.mdx#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nbrew install rustup\nrustup-init\nsource ~/.cargo/env\n```\n\n----------------------------------------\n\nTITLE: Example Postgres Binary Path on Windows\nDESCRIPTION: An example file path showing the typical installation location of PostgreSQL binaries (`bin` directory) on a Windows system (version 16 in this case). This path needs to be added to the system's PATH environment variable for commands like `createdb` to be recognized.\nSOURCE: https://github.com/khoj-ai/khoj/blob/master/documentation/docs/contributing/development.mdx#_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nC:\\Program Files\\PostgreSQL\\16\\bin\n```\n\n----------------------------------------\n\nTITLE: Configuring Khoj Chat Model for LM Studio\nDESCRIPTION: These settings are applied when creating a new Chat Model entry in the Khoj admin panel, linking it to the previously configured LM Studio AI Model API and defining model-specific parameters like name and max prompt size.\nSOURCE: https://github.com/khoj-ai/khoj/blob/master/documentation/docs/advanced/lmstudio.md#_snippet_1\n\nLANGUAGE: Configuration Value\nCODE:\n```\nllama3.1\n```\n\nLANGUAGE: Configuration Value\nCODE:\n```\nOpenai\n```\n\nLANGUAGE: Configuration Value\nCODE:\n```\nthe lmstudio Ai Model Api you created in step 3\n```\n\nLANGUAGE: Configuration Value\nCODE:\n```\n20000\n```\n\nLANGUAGE: Configuration Value\nCODE:\n```\nDo not set for OpenAI, mistral, llama3 based models\n```\n\n----------------------------------------\n\nTITLE: Example pg_hba.conf Trust Configuration\nDESCRIPTION: An example snippet from a PostgreSQL `pg_hba.conf` configuration file. It demonstrates setting the authentication method to `trust` for local connections (Unix domain socket, IPv4 loopback, IPv6 loopback) for all users and databases, specifically highlighting the 'postgres' user for IPv4. This configuration bypasses password checks for local connections and might be needed for troubleshooting.\nSOURCE: https://github.com/khoj-ai/khoj/blob/master/documentation/docs/contributing/development.mdx#_snippet_10\n\nLANGUAGE: text\nCODE:\n```\nhost    all             postgres        127.0.0.1/32            trust\n# \"local\" is for Unix domain socket connections only\nlocal   all             all                                     trust\n# IPv4 local connections:\nhost    all             all             127.0.0.1/32            trust\n# IPv6 local connections:\nhost    all             all             ::1/128                 trust\n```\n\n----------------------------------------\n\nTITLE: Example AI Model API Configuration in Markdown\nDESCRIPTION: Illustrates how to configure AI model APIs in the Khoj admin panel using a Markdown image reference, showing fields for API keys, naming, and base URL configuration.\nSOURCE: https://github.com/khoj-ai/khoj/blob/master/documentation/docs/advanced/admin.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n![example configuration for ai model api](/img/example_openai_processor_config.png)\n```\n\n----------------------------------------\n\nTITLE: Example Chat Model Options Configuration in Markdown\nDESCRIPTION: Shows a Markdown image reference for configuring chat model options in the Khoj admin panel, demonstrating how to set up model parameters like type, vision capability, and context sizes.\nSOURCE: https://github.com/khoj-ai/khoj/blob/master/documentation/docs/advanced/admin.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n![example configuration for chat model options](/img/example_chatmodel_option.png)\n```\n\n----------------------------------------\n\nTITLE: Pushing Release Tag - Git\nDESCRIPTION: This Git command pushes the release tag (created by the bump_version script and associated with the release commit) to the origin repository. Pushing the tag typically triggers automated release workflows (e.g., CI/CD) on platforms like GitHub.\nSOURCE: https://github.com/khoj-ai/khoj/blob/master/documentation/docs/contributing/development.mdx#_snippet_21\n\nLANGUAGE: git\nCODE:\n```\ngit push origin <release_version>\n```\n\n----------------------------------------\n\nTITLE: Pushing Release Commit - Git\nDESCRIPTION: This Git command pushes the release commit, created by the bump_version script, to the 'master' branch of the origin repository. This is a necessary step before pushing the corresponding release tag.\nSOURCE: https://github.com/khoj-ai/khoj/blob/master/documentation/docs/contributing/development.mdx#_snippet_20\n\nLANGUAGE: git\nCODE:\n```\ngit push origin master\n```\n\n----------------------------------------\n\nTITLE: Bumping Khoj Version - Shell\nDESCRIPTION: This shell script command is used to increment the version number of the Khoj project during the release process. The `-c` flag specifies the target release version. This updates metadata files before creating a release commit.\nSOURCE: https://github.com/khoj-ai/khoj/blob/master/documentation/docs/contributing/development.mdx#_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\n./scripts/bump_version.sh -c \"<release_version>\"\n```\n\n----------------------------------------\n\nTITLE: Adding Next.js as a Dependency\nDESCRIPTION: This command adds Next.js as a direct dependency to the project using Yarn. This is helpful if there are any dependency linking issues encountered during the initial installation.\nSOURCE: https://github.com/khoj-ai/khoj/blob/master/src/interface/web/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add next\n```\n\n----------------------------------------\n\nTITLE: Installing the ToDesktop CLI Globally via Yarn - Bash\nDESCRIPTION: This snippet runs 'yarn global add @todesktop/cli' to install the ToDesktop command-line interface globally on the user's system. Yarn must be available, and installation requires appropriate permissions. It installs the CLI tool, which is used to package and deploy Electron applications.\nSOURCE: https://github.com/khoj-ai/khoj/blob/master/src/interface/desktop/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn global add @todesktop/cli\n\n```\n\n----------------------------------------\n\nTITLE: Importing Tabs and TabItem Components in MDX for UI Customization\nDESCRIPTION: This snippet demonstrates how to import 'Tabs' and 'TabItem' components from the '@theme' package in MDX files. These components are used to create tabbed interfaces in the documentation, allowing better organization of content related to self-hosting procedures. Dependencies include the '@theme' package, and the code is intended for use within MDX documentation files.\nSOURCE: https://github.com/khoj-ai/khoj/blob/master/documentation/docs/get-started/setup.mdx#_snippet_0\n\nLANGUAGE: MDX\nCODE:\n```\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n```\n\n----------------------------------------\n\nTITLE: Importing Tabs Component in MDX\nDESCRIPTION: Imports the `Tabs` and `TabItem` components from the '@theme/Tabs' library. These components are used within the MDX file to create a tabbed interface for presenting different setup instructions (e.g., Docker vs. Pip, First Run vs. Update).\nSOURCE: https://github.com/khoj-ai/khoj/blob/master/documentation/docs/advanced/ollama.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Components for Tabs\nDESCRIPTION: Imports the `Tabs` and `TabItem` components from the '@theme' library using MDX syntax. These components are likely used to create tabbed interfaces within the Markdown documentation for displaying OS-specific instructions.\nSOURCE: https://github.com/khoj-ai/khoj/blob/master/documentation/docs/contributing/development.mdx#_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n```\n\n----------------------------------------\n\nTITLE: Example Search Model Settings in Markdown\nDESCRIPTION: Presents a Markdown HTML image element with styling to show how search model settings appear in the admin panel, with width constraints for better display.\nSOURCE: https://github.com/khoj-ai/khoj/blob/master/documentation/docs/advanced/admin.md#_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<img src=\"/img/example_search_model_admin_settings.png\" alt=\"Example Search Model Settings\" style={{width: 500}} />\n```"
  }
]