[
  {
    "owner": "embeddedllm",
    "repo": "jamaibase",
    "content": "TITLE: Complete JamAI Python SDK Example Script\nDESCRIPTION: This is the complete Python script demonstrating JamAI functionality. It imports necessary modules and defines functions for creating tables, adding rows, fetching data, implementing RAG, and managing table operations within the JamAIBase framework.\nSOURCE: https://github.com/embeddedllm/jamaibase/blob/main/clients/python/README.md#2025-04-23_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nfrom jamaibase import JamAI\nfrom jamaibase import protocol as p\n\n\ndef create_tables(jamai: JamAI):\n    # Create an Action Table\n    table = jamai.table.create_action_table(\n        p.ActionTableSchemaCreate(\n            id=\"action-simple\",\n            cols=[\n                p.ColumnSchemaCreate(id=\"image\", dtype=\"image\"),  # Image input\n                p.ColumnSchemaCreate(id=\"length\", dtype=\"int\"),  # Integer input\n                p.ColumnSchemaCreate(id=\"question\", dtype=\"str\"),\n                p.ColumnSchemaCreate(\n                    id=\"answer\",\n                    dtype=\"str\",\n                    gen_config=p.LLMGenConfig(\n                        model=\"openai/gpt-4o-mini\",  # Leave this out to use a default model\n                        system_prompt=\"You are a concise assistant.\",\n                        prompt=\"Image: ${image}\\n\\nQuestion: ${question}\\n\\nAnswer the question in ${length} words.\",\n                        temperature=0.001,\n                        top_p=0.001,\n                        max_tokens=100,\n                    ),\n                ),\n            ],\n        )\n    )\n    print(table)\n\n    # Create a Knowledge Table\n    table = jamai.table.create_knowledge_table(\n        p.KnowledgeTableSchemaCreate(\n            id=\"knowledge-simple\",\n            cols=[],\n            embedding_model=\"ellm/BAAI/bge-m3\",\n        )\n    )\n    print(table)\n\n    # Create a Chat Table\n    table = jamai.table.create_chat_table(\n        p.ChatTableSchemaCreate(\n            id=\"chat-simple\",\n            cols=[\n                p.ColumnSchemaCreate(id=\"User\", dtype=\"str\"),\n                p.ColumnSchemaCreate(\n                    id=\"AI\",\n                    dtype=\"str\",\n                    gen_config=p.LLMGenConfig(\n                        model=\"openai/gpt-4o-mini\",  # Leave this out to use a default model\n                        system_prompt=\"You are a pirate.\",\n                        temperature=0.001,\n                        top_p=0.001,\n                        max_tokens=100,\n                    ),\n                ),\n            ],\n        )\n    )\n    print(table)\n\n\ndef add_rows(jamai: JamAI):\n    text_a = 'Summarize this: \"Arrival\" is a 2016 science fiction drama film directed by Denis Villeneuve and adapted by Eric Heisserer.'\n    text_b = 'Summarize this: \"Dune: Part Two is a 2024 epic science fiction film directed by Denis Villeneuve.\"'\n    text_c = \"Identify the subject of the image.\"\n\n    # --- Action Table --- #\n    # Streaming\n    completion = jamai.table.add_table_rows(\n        \"action\",\n        p.RowAddRequest(\n            table_id=\"action-simple\",\n            data=[dict(length=5, question=text_a)],\n            stream=True,\n        ),\n    )\n    for chunk in completion:\n        if chunk.output_column_name != \"answer\":\n            continue\n        print(chunk.text, end=\"\", flush=True)\n    print(\"\")\n\n    # Non-streaming\n    completion = jamai.table.add_table_rows(\n        \"action\",\n        p.RowAddRequest(\n            table_id=\"action-simple\",\n            data=[dict(length=5, question=text_b)],\n            stream=False,\n        ),\n    )\n    print(completion.rows[0].columns[\"answer\"].text)\n\n    # Streaming (with image input)\n    upload_response = jamai.file.upload_file(\"clients/python/tests/files/jpeg/rabbit.jpeg\")\n    completion = jamai.table.add_table_rows(\n        \"action\",\n        p.RowAddRequest(\n            table_id=\"action-simple\",\n            data=[dict(image=upload_response.uri, length=5, question=text_c)],\n            stream=True,\n        ),\n    )\n    for chunk in completion:\n        if chunk.output_column_name != \"answer\":\n            continue\n        print(chunk.text, end=\"\", flush=True)\n    print(\"\")\n\n    # Non-streaming (with image input)\n    completion = jamai.table.add_table_rows(\n        \"action\",\n        p.RowAddRequest(\n            table_id=\"action-simple\",\n            data=[dict(image=upload_response.uri, length=5, question=text_c)],\n            stream=False,\n        ),\n    )\n    print(completion.rows[0].columns[\"answer\"].text)\n\n    # --- Chat Table --- #\n    # Streaming\n    completion = jamai.table.add_table_rows(\n        \"chat\",\n        p.RowAddRequest(\n            table_id=\"chat-simple\",\n            data=[dict(User=\"Who directed Arrival (2016)?\")],\n            stream=True,\n        ),\n    )\n    for chunk in completion:\n        if chunk.output_column_name != \"AI\":\n            continue\n        print(chunk.text, end=\"\", flush=True)\n    print(\"\")\n\n    # Non-streaming\n    completion = jamai.table.add_table_rows(\n        \"chat\",\n        p.RowAddRequest(\n            table_id=\"chat-simple\",\n            data=[dict(User=\"Who directed Dune (2024)?\")],\n            stream=False,\n        ),\n    )\n    print(completion.rows[0].columns[\"AI\"].text)\n\n    # --- Knowledge Table --- #\n    # Streaming\n    completion = jamai.table.add_table_rows(\n        \"knowledge\",\n        p.RowAddRequest(\n            table_id=\"knowledge-simple\",\n            data=[dict(Title=\"Arrival (2016)\", Text=text_a)],\n            stream=True,\n        ),\n    )\n    assert len(list(completion)) == 0\n\n    # Non-streaming\n    completion = jamai.table.add_table_rows(\n        \"knowledge\",\n        p.RowAddRequest(\n            table_id=\"knowledge-simple\",\n            data=[dict(Title=\"Dune (2024)\", Text=text_b)],\n            stream=False,\n        ),\n    )\n    assert len(completion.rows[0].columns) == 0\n\n\ndef fetch_rows(jamai: JamAI):\n    # --- List rows -- #\n    # Action\n    rows = jamai.table.list_table_rows(\"action\", \"action-simple\")\n    assert len(rows.items) == 4\n    # Paginated items\n    for row in rows.items:\n        print(row[\"ID\"], row[\"answer\"][\"value\"])\n\n    # Knowledge\n    rows = jamai.table.list_table_rows(\"knowledge\", \"knowledge-simple\")\n    assert len(rows.items) == 2\n    for row in rows.items:\n        print(row[\"ID\"], row[\"Title\"][\"value\"])\n        print(row[\"Title Embed\"][\"value\"][:3])  # Knowledge Table has embeddings\n\n    # Chat\n    rows = jamai.table.list_table_rows(\"chat\", \"chat-simple\")\n    assert len(rows.items) == 2\n    for row in rows.items:\n        print(row[\"ID\"], row[\"User\"][\"value\"], row[\"AI\"][\"value\"])\n\n    # --- Fetch a specific row -- #\n    row = jamai.table.get_table_row(\"chat\", \"chat-simple\", rows.items[0][\"ID\"])\n    print(row[\"ID\"], row[\"AI\"][\"value\"])\n\n    # --- Filter using a search term -- #\n    rows = jamai.table.list_table_rows(\"action\", \"action-simple\", search_query=\"Dune\")\n    assert len(rows.items) == 1\n    for row in rows.items:\n        print(row[\"ID\"], row[\"answer\"][\"value\"])\n\n\ndef fetch_columns(jamai: JamAI):\n    # --- Only fetch specific columns -- #\n    rows = jamai.table.list_table_rows(\"action\", \"action-simple\", columns=[\"length\"])\n    assert len(rows.items) == 4\n    for row in rows.items:\n        # \"ID\" and \"Updated at\" will always be fetched\n        print(row[\"ID\"], row[\"length\"][\"value\"])\n\n\ndef rag(jamai: JamAI):\n    from os.path import join\n    from tempfile import TemporaryDirectory\n\n    with TemporaryDirectory() as tmp_dir:\n        file_path = join(tmp_dir, \"text.txt\")\n        with open(file_path, \"w\") as f:\n            f.write(\"I bought a Mofusand book in 2024.\\n\\n\")\n            f.write(\"I went to Italy in 2018.\\n\\n\")\n        response = jamai.table.embed_file(file_path, \"knowledge-simple\")\n        assert response.ok\n\n    # Create an Action Table with RAG\n    table = jamai.table.create_action_table(\n        p.ActionTableSchemaCreate(\n            id=\"action-rag\",\n            cols=[\n                p.ColumnSchemaCreate(id=\"question\", dtype=\"str\"),\n                p.ColumnSchemaCreate(\n                    id=\"answer\",\n                    dtype=\"str\",\n                    gen_config=p.LLMGenConfig(\n                        model=\"openai/gpt-4o-mini\",  # Leave this out to use a default model\n                        system_prompt=\"You are a concise assistant.\",\n                        prompt=\"${question}\",\n                        rag_params=p.RAGParams(\n                            table_id=\"knowledge-simple\",\n                            k=2,\n                        ),\n                        temperature=0.001,\n                        top_p=0.001,\n                        max_tokens=100,\n                    ),\n                ),\n            ],\n        )\n    )\n    print(table)\n\n    # Ask a question with streaming\n    completion = jamai.table.add_table_rows(\n        \"action\",\n        p.RowAddRequest(\n            table_id=\"action-rag\",\n            data=[dict(question=\"Where did I went in 2018?\")],\n            stream=True,\n        ),\n    )\n    for chunk in completion:\n        if chunk.output_column_name != \"answer\":\n            continue\n        if isinstance(chunk, p.GenTableStreamReferences):\n            # References that are retrieved from KT\n            assert len(chunk.chunks) == 2  # k = 2\n            print(chunk.chunks)\n        else:\n            # LLM generation\n            print(chunk.text, end=\"\", flush=True)\n    print(\"\")\n\n\ndef fetch_tables(jamai: JamAI):\n    # --- List tables -- #\n    # Action\n    tables = jamai.table.list_tables(\"action\", count_rows=True)\n    assert len(tables.items) == 2\n    # Paginated items\n    for table in tables.items:\n        print(f\"{table.id=}, {table.num_rows=}\")\n\n    # Knowledge\n    tables = jamai.table.list_tables(\"knowledge\")\n    assert len(tables.items) == 1\n    for table in tables.items:\n        print(f\"{table.id=}, {table.num_rows=}\")\n\n    # Chat\n    tables = jamai.table.list_tables(\"chat\")\n    assert len(tables.items) == 1\n    for table in tables.items:\n        print(f\"{table.id=}, {table.num_rows=}\")\n\n    # --- Fetch a specific table -- #\n    table = jamai.table.get_table(\"action\", \"action-rag\")\n    print(f\"{table.id=}, {table.num_rows=}\")\n\n\ndef delete_rows(jamai: JamAI):\n    # Delete all rows\n    rows = jamai.table.list_table_rows(\"action\", \"action-simple\")\n    response = jamai.table.delete_table_rows(\n        \"action\",\n        p.RowDeleteRequest(\n            table_id=\"action-simple\",\n```\n\n----------------------------------------\n\nTITLE: Installing JamAI Base Client Library using npm\nDESCRIPTION: Command to install the latest version of the JamAI Base client library using npm package manager.\nSOURCE: https://github.com/embeddedllm/jamaibase/blob/main/clients/typescript/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install jamaibase@latest\n```\n\n----------------------------------------\n\nTITLE: Creating a Streamlit Chat Application with JamAI\nDESCRIPTION: A complete example showing how to build a simple chat application using Streamlit and JamAI. It creates a chat table with appropriate schema, manages chat history, and implements streaming responses from the AI assistant.\nSOURCE: https://github.com/embeddedllm/jamaibase/blob/main/clients/python/README.md#2025-04-23_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\n\nst.title(\"Simple chat\")\n\ntry:\n    # Create a Chat Table\n    jamai.table.create_chat_table(\n        p.ChatTableSchemaCreate(\n            id=\"chat-simple\",\n            cols=[\n                p.ColumnSchemaCreate(id=\"User\", dtype=\"str\"),\n                p.ColumnSchemaCreate(\n                    id=\"AI\",\n                    dtype=\"str\",\n                    gen_config=p.LLMGenConfig(\n                        model=\"openai/gpt-4o-mini\",  # Leave this out to use a default model\n                        system_prompt=\"You are a pirate.\",\n                        temperature=0.001,\n                        top_p=0.001,\n                        max_tokens=500,\n                    ),\n                ),\n            ],\n        )\n    )\nexcept RuntimeError:\n    # Table already exists\n    pass\n\n# Initialize chat history\nif \"messages\" not in st.session_state:\n    st.session_state.messages = []\n\n# Display chat messages from history on app rerun\nfor message in st.session_state.messages:\n    with st.chat_message(message[\"role\"]):\n        st.markdown(message[\"content\"])\n\ndef response_generator(_prompt):\n    completion = jamai.table.add_table_rows(\n        \"chat\",\n        p.RowAddRequest(\n            table_id=\"chat-simple\",\n            data=[dict(User=_prompt)],\n            stream=True,\n        ),\n    )\n    for chunk in completion:\n        if chunk.output_column_name != \"AI\":\n            continue\n        yield chunk.text\n\n# Accept user input\nif prompt := st.chat_input(\"What is up?\"):\n    # Add user message to chat history\n    st.session_state.messages.append({\"role\": \"user\", \"content\": prompt})\n    # Display user message in chat message container\n    with st.chat_message(\"user\"):\n        st.markdown(prompt)\n\n    # Display assistant response in chat message container\n    with st.chat_message(\"assistant\"):\n        response = st.write_stream(response_generator(prompt))\n    # Add assistant response to chat history\n    st.session_state.messages.append({\"role\": \"assistant\", \"content\": response})\n```\n\n----------------------------------------\n\nTITLE: Creating JamAI API Client with API Key and Project ID in JavaScript\nDESCRIPTION: Example of creating a JamAI API client instance using an API key and project ID. This is typically used for cloud-based deployments.\nSOURCE: https://github.com/embeddedllm/jamaibase/blob/main/clients/typescript/README.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport JamAI from \"jamaibase\";\n\nconst jamai = new JamAI({ apiKey: \"jamai_apikey\", projectId: \"proj_id\" });\n```\n\n----------------------------------------\n\nTITLE: Implementing Retrieval-Augmented Generation (RAG) with JamAI in Python\nDESCRIPTION: This function demonstrates how to implement Retrieval-Augmented Generation (RAG) with JamAI. It shows embedding text files into a knowledge table, creating an action table with RAG parameters, and querying the system with streaming responses including reference information from the knowledge base.\nSOURCE: https://github.com/embeddedllm/jamaibase/blob/main/clients/python/README.md#2025-04-23_snippet_23\n\nLANGUAGE: python\nCODE:\n```\ndef rag(jamai: JamAI):\n    from os.path import join\n    from tempfile import TemporaryDirectory\n\n    with TemporaryDirectory() as tmp_dir:\n        file_path = join(tmp_dir, \"text.txt\")\n        with open(file_path, \"w\") as f:\n            f.write(\"I bought a Mofusand book in 2024.\\n\\n\")\n            f.write(\"I went to Italy in 2018.\\n\\n\")\n        response = jamai.table.embed_file(file_path, \"knowledge-simple\")\n        assert response.ok\n\n    # Create an Action Table with RAG\n    table = jamai.table.create_action_table(\n        p.ActionTableSchemaCreate(\n            id=\"action-rag\",\n            cols=[\n                p.ColumnSchemaCreate(id=\"question\", dtype=\"str\"),\n                p.ColumnSchemaCreate(\n                    id=\"answer\",\n                    dtype=\"str\",\n                    gen_config=p.LLMGenConfig(\n                        model=\"openai/gpt-4o-mini\",  # Leave this out to use a default model\n                        system_prompt=\"You are a concise assistant.\",\n                        prompt=\"${question}\",\n                        rag_params=p.RAGParams(\n                            table_id=\"knowledge-simple\",\n                            k=2,\n                        ),\n                        temperature=0.001,\n                        top_p=0.001,\n                        max_tokens=100,\n                    ),\n                ),\n            ],\n        )\n    )\n    print(table)\n\n    # Ask a question with streaming\n    completion = jamai.table.add_table_rows(\n        \"action\",\n        p.RowAddRequest(\n            table_id=\"action-rag\",\n            data=[dict(question=\"Where did I went in 2018?\")],\n            stream=True,\n        ),\n    )\n    for chunk in completion:\n        if chunk.output_column_name != \"answer\":\n            continue\n        if isinstance(chunk, p.GenTableStreamReferences):\n            # References that are retrieved from KT\n            assert len(chunk.chunks) == 2  # k = 2\n            print(chunk.chunks)\n        else:\n            # LLM generation\n            print(chunk.text, end=\"\", flush=True)\n    print(\"\")\n```\n\n----------------------------------------\n\nTITLE: Creating JamAI API Client with baseURL in JavaScript\nDESCRIPTION: Example of creating a JamAI API client instance using a base URL. This is typically used for local development or custom API endpoints.\nSOURCE: https://github.com/embeddedllm/jamaibase/blob/main/clients/typescript/README.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport JamAI from \"jamaibase\";\n\nconst jamai = new JamAI({ baseURL: \"http://localhost:5173/\" });\n```\n\n----------------------------------------\n\nTITLE: Adding Rows to JamAI Tables with Streaming and Non-Streaming Responses\nDESCRIPTION: This function demonstrates how to add rows to various JamAI table types with both streaming and non-streaming responses. It shows adding text data to Chat and Knowledge tables, and both text and image data to Action tables. The function also includes file upload functionality for image processing.\nSOURCE: https://github.com/embeddedllm/jamaibase/blob/main/clients/python/README.md#2025-04-23_snippet_20\n\nLANGUAGE: python\nCODE:\n```\ndef add_rows(jamai: JamAI):\n    text_a = 'Summarize this: \"Arrival\" is a 2016 science fiction drama film directed by Denis Villeneuve and adapted by Eric Heisserer.'\n    text_b = 'Summarize this: \"Dune: Part Two is a 2024 epic science fiction film directed by Denis Villeneuve.\"'\n    text_c = \"Identify the subject of the image.\"\n\n    # --- Action Table --- #\n    # Streaming\n    completion = jamai.table.add_table_rows(\n        \"action\",\n        p.RowAddRequest(\n            table_id=\"action-simple\",\n            data=[dict(length=5, question=text_a)],\n            stream=True,\n        ),\n    )\n    for chunk in completion:\n        if chunk.output_column_name != \"answer\":\n            continue\n        print(chunk.text, end=\"\", flush=True)\n    print(\"\")\n\n    # Non-streaming\n    completion = jamai.table.add_table_rows(\n        \"action\",\n        p.RowAddRequest(\n            table_id=\"action-simple\",\n            data=[dict(length=5, question=text_b)],\n            stream=False,\n        ),\n    )\n    print(completion.rows[0].columns[\"answer\"].text)\n\n    # Streaming (with image input)\n    upload_response = jamai.file.upload_file(\"clients/python/tests/files/jpeg/rabbit.jpeg\")\n    completion = jamai.table.add_table_rows(\n        \"action\",\n        p.RowAddRequest(\n            table_id=\"action-simple\",\n            data=[dict(image=upload_response.uri, length=5, question=text_c)],\n            stream=True,\n        ),\n    )\n    for chunk in completion:\n        if chunk.output_column_name != \"answer\":\n            continue\n        print(chunk.text, end=\"\", flush=True)\n    print(\"\")\n\n    # Non-streaming (with image input)\n    completion = jamai.table.add_table_rows(\n        \"action\",\n        p.RowAddRequest(\n            table_id=\"action-simple\",\n            data=[dict(image=upload_response.uri, length=5, question=text_c)],\n            stream=False,\n        ),\n    )\n    print(completion.rows[0].columns[\"answer\"].text)\n\n    # --- Chat Table --- #\n    # Streaming\n    completion = jamai.table.add_table_rows(\n        \"chat\",\n        p.RowAddRequest(\n            table_id=\"chat-simple\",\n            data=[dict(User=\"Who directed Arrival (2016)?\")],\n            stream=True,\n        ),\n    )\n    for chunk in completion:\n        if chunk.output_column_name != \"AI\":\n            continue\n        print(chunk.text, end=\"\", flush=True)\n    print(\"\")\n\n    # Non-streaming\n    completion = jamai.table.add_table_rows(\n        \"chat\",\n        p.RowAddRequest(\n            table_id=\"chat-simple\",\n            data=[dict(User=\"Who directed Dune (2024)?\")],\n            stream=False,\n        ),\n    )\n    print(completion.rows[0].columns[\"AI\"].text)\n\n    # --- Knowledge Table --- #\n    # Streaming\n    completion = jamai.table.add_table_rows(\n        \"knowledge\",\n        p.RowAddRequest(\n            table_id=\"knowledge-simple\",\n            data=[dict(Title=\"Arrival (2016)\", Text=text_a)],\n            stream=True,\n        ),\n    )\n    assert len(list(completion)) == 0\n\n    # Non-streaming\n    completion = jamai.table.add_table_rows(\n        \"knowledge\",\n        p.RowAddRequest(\n            table_id=\"knowledge-simple\",\n            data=[dict(Title=\"Dune (2024)\", Text=text_b)],\n            stream=False,\n        ),\n    )\n    assert len(completion.rows[0].columns) == 0\n```\n\n----------------------------------------\n\nTITLE: Creating JamAI API Client with Custom HTTP Client in JavaScript\nDESCRIPTION: Example of creating a JamAI API client instance with a custom HTTP client using Axios. This allows for custom authentication and headers.\nSOURCE: https://github.com/embeddedllm/jamaibase/blob/main/clients/typescript/README.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport axios from \"axios\";\nimport JamAI from \"jamaibase\";\n\nconst username = \"user\";\nconst password = \"password\";\n\nconst credentials = Buffer.from(`${username}:${password}`).toString(\"base64\");\n\nconst httpClient = axios.create({\n    headers: {\n        Authorization: `Basic ${credentials}`,\n        \"Content-Type\": \"application/json\"\n    }\n});\n\nconst jamai = new JamAI({\n    baseURL: \"https://api.jamaibase.com\",\n    httpClient: httpClient\n});\n```\n\n----------------------------------------\n\nTITLE: Creating JamAI Tables with Different Schemas in Python\nDESCRIPTION: This function demonstrates how to create three different types of tables in JamAI: Action Table, Knowledge Table, and Chat Table. Each table is created with a specific schema including column definitions, data types, and generation configurations for LLM-powered columns.\nSOURCE: https://github.com/embeddedllm/jamaibase/blob/main/clients/python/README.md#2025-04-23_snippet_19\n\nLANGUAGE: python\nCODE:\n```\ndef create_tables(jamai: JamAI):\n    # Create an Action Table\n    table = jamai.table.create_action_table(\n        p.ActionTableSchemaCreate(\n            id=\"action-simple\",\n            cols=[\n                p.ColumnSchemaCreate(id=\"image\", dtype=\"image\"),  # Image input\n                p.ColumnSchemaCreate(id=\"length\", dtype=\"int\"),  # Integer input\n                p.ColumnSchemaCreate(id=\"question\", dtype=\"str\"),\n                p.ColumnSchemaCreate(\n                    id=\"answer\",\n                    dtype=\"str\",\n                    gen_config=p.LLMGenConfig(\n                        model=\"openai/gpt-4o-mini\",  # Leave this out to use a default model\n                        system_prompt=\"You are a concise assistant.\",\n                        prompt=\"Image: ${image}\\n\\nQuestion: ${question}\\n\\nAnswer the question in ${length} words.\",\n                        temperature=0.001,\n                        top_p=0.001,\n                        max_tokens=100,\n                    ),\n                ),\n            ],\n        )\n    )\n    print(table)\n\n    # Create a Knowledge Table\n    table = jamai.table.create_knowledge_table(\n        p.KnowledgeTableSchemaCreate(\n            id=\"knowledge-simple\",\n            cols=[],\n            embedding_model=\"ellm/BAAI/bge-m3\",\n        )\n    )\n    print(table)\n\n    # Create a Chat Table\n    table = jamai.table.create_chat_table(\n        p.ChatTableSchemaCreate(\n            id=\"chat-simple\",\n            cols=[\n                p.ColumnSchemaCreate(id=\"User\", dtype=\"str\"),\n                p.ColumnSchemaCreate(\n                    id=\"AI\",\n                    dtype=\"str\",\n                    gen_config=p.LLMGenConfig(\n                        model=\"openai/gpt-4o-mini\",  # Leave this out to use a default model\n                        system_prompt=\"You are a pirate.\",\n                        temperature=0.001,\n                        top_p=0.001,\n                        max_tokens=100,\n                    ),\n                ),\n            ],\n        )\n    )\n    print(table)\n```\n\n----------------------------------------\n\nTITLE: Adding a Row to JamAI Action Table in JavaScript\nDESCRIPTION: Example of using the JamAI client to add a row to an action table. This demonstrates how to interact with JamAI tables and handle responses.\nSOURCE: https://github.com/embeddedllm/jamaibase/blob/main/clients/typescript/README.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ntry {\n    const response = await jamai.table.addRow({\n        table_type: \"action\",\n        table_id: \"workout-suggestion\",\n        data: [\n            {\n                age: 30,\n                height_in_centimeters: 170,\n                weight_in_kg: 60\n            }\n        ],\n        reindex: null,\n        concurrent: false\n    });\n    console.log(\"response: \", response);\n} catch (err) {\n    console.error(err.message);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing RAG with File Embedding in Python\nDESCRIPTION: Demonstrates Retrieval Augmented Generation setup including file embedding, table creation with RAG configuration, and question answering with streaming.\nSOURCE: https://github.com/embeddedllm/jamaibase/blob/main/clients/python/README.md#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom os.path import join\nfrom tempfile import TemporaryDirectory\n\nwith TemporaryDirectory() as tmp_dir:\n    file_path = join(tmp_dir, \"text.txt\")\n    with open(file_path, \"w\") as f:\n        f.write(\"I bought a Mofusand book in 2024.\\n\\n\")\n        f.write(\"I went to Italy in 2018.\\n\\n\")\n    response = jamai.table.embed_file(file_path, \"knowledge-simple\")\n    assert response.ok\n\n# Create an Action Table with RAG\ntable = jamai.table.create_action_table(\n    p.ActionTableSchemaCreate(\n        id=\"action-rag\",\n        cols=[\n            p.ColumnSchemaCreate(id=\"question\", dtype=\"str\"),\n            p.ColumnSchemaCreate(\n                id=\"answer\",\n                dtype=\"str\",\n                gen_config=p.LLMGenConfig(\n                    model=\"openai/gpt-4o-mini\",  # Leave this out to use a default model\n                    system_prompt=\"You are a concise assistant.\",\n                    prompt=\"${question}\",\n                    rag_params=p.RAGParams(\n                        table_id=\"knowledge-simple\",\n                        k=2,\n                    ),\n                    temperature=0.001,\n                    top_p=0.001,\n                    max_tokens=100,\n                ),\n            ),\n        ],\n    )\n)\nprint(table)\n```\n\n----------------------------------------\n\nTITLE: Implementing JamAI Client in React Component\nDESCRIPTION: React component that uses the JamAI client to fetch and display table data. It demonstrates how to initialize the client, make API calls, and render the response.\nSOURCE: https://github.com/embeddedllm/jamaibase/blob/main/clients/typescript/README.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// App.tsx\n\nimport { useEffect, useState } from \"react\";\nimport JamAI from \"jamaibase\";\nimport { PageListTableMetaResponse } from \"jamaibase/dist/resources/gen_tables/tables\";\n\nexport default function Home() {\n    const [tableData, setTableData] = useState<PageListTableMetaResponse>();\n\n    useEffect(() => {\n        const fetchData = async () => {\n            const jamai = new JamAI({\n                baseURL: process.env.NEXT_PUBLIC_JAMAI_BASEURL!,\n                apiKey: process.env.JAMAI_API_KEY,\n                projectId: process.env.JAMAI_PROJECT_ID,\n            });\n            try {\n                const response = await jamai.table.listTables({\n                    table_type: \"action\",\n                });\n                setTableData(response);\n            } catch (err: any) {\n                console.error(err.message);\n            }\n            fetchData();\n        };\n    }, []);\n\n    return (\n        <div>\n            <h1>List of Tables</h1>\n            <ul>\n                {tableData?.items.map((table) => (\n                    <li key={table.id}>\n                        <h2>Table ID: {table.id}</h2>\n                        <h3>Columns:</h3>\n                        <ul>\n                            {table.cols.map((column) => (\n                                <li key={column.id}>\n                                    <p>ID: {column.id}</p>\n                                    <p>Data Type: {column.dtype}</p>\n                                    {/* Render other properties as needed */}\n                                </li>\n                            ))}\n                        </ul>\n                    </li>\n                ))}\n            </ul>\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating API Endpoint for Listing Tables\nDESCRIPTION: Server-side API handler that interacts with the JamAI SDK to fetch tables by type. It initializes the JamAI client with configuration from environment variables and returns the data in a structured response.\nSOURCE: https://github.com/embeddedllm/jamaibase/blob/main/clients/typescript/README.md#2025-04-23_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nimport JamAI from \"jamaibase\";\n\nconst {\n    JAMAI_API_KEY,\n    public: { JAMAI_BASEURL, JAMAI_PROJECT_ID }\n} = useRuntimeConfig();\n\nconst jamai = new JamAI({\n    baseURL: JAMAI_BASEURL,\n    apiKey: JAMAI_API_KEY,\n    projectId: JAMAI_PROJECT_ID\n});\n\nexport default defineEventHandler(async (event) => {\n    const { type = \"action\" } = getQuery(event);\n\n    try {\n        const data = await jamai.table.listTables({ table_type: type });\n        return { success: true, data: data };\n    } catch (error) {\n        console.error(\"Error fetching tables:\", error);\n        return { success: false, data: \"Something went wrong\" };\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching and Filtering Rows from JamAI Tables in Python\nDESCRIPTION: This function demonstrates how to retrieve rows from different JamAI table types including Action, Knowledge, and Chat tables. It shows listing all rows, fetching specific rows by ID, and filtering rows using search queries to find relevant information.\nSOURCE: https://github.com/embeddedllm/jamaibase/blob/main/clients/python/README.md#2025-04-23_snippet_21\n\nLANGUAGE: python\nCODE:\n```\ndef fetch_rows(jamai: JamAI):\n    # --- List rows -- #\n    # Action\n    rows = jamai.table.list_table_rows(\"action\", \"action-simple\")\n    assert len(rows.items) == 4\n    # Paginated items\n    for row in rows.items:\n        print(row[\"ID\"], row[\"answer\"][\"value\"])\n\n    # Knowledge\n    rows = jamai.table.list_table_rows(\"knowledge\", \"knowledge-simple\")\n    assert len(rows.items) == 2\n    for row in rows.items:\n        print(row[\"ID\"], row[\"Title\"][\"value\"])\n        print(row[\"Title Embed\"][\"value\"][:3])  # Knowledge Table has embeddings\n\n    # Chat\n    rows = jamai.table.list_table_rows(\"chat\", \"chat-simple\")\n    assert len(rows.items) == 2\n    for row in rows.items:\n        print(row[\"ID\"], row[\"User\"][\"value\"], row[\"AI\"][\"value\"])\n\n    # --- Fetch a specific row -- #\n    row = jamai.table.get_table_row(\"chat\", \"chat-simple\", rows.items[0][\"ID\"])\n    print(row[\"ID\"], row[\"AI\"][\"value\"])\n\n    # --- Filter using a search term -- #\n    rows = jamai.table.list_table_rows(\"action\", \"action-simple\", search_query=\"Dune\")\n    assert len(rows.items) == 1\n    for row in rows.items:\n        print(row[\"ID\"], row[\"answer\"][\"value\"])\n```\n\n----------------------------------------\n\nTITLE: Creating API Endpoint for Table Creation\nDESCRIPTION: Server-side API handler that processes table creation requests using the JamAI SDK. It accepts table ID and column definition data and calls the appropriate JamAI API to create a new action table.\nSOURCE: https://github.com/embeddedllm/jamaibase/blob/main/clients/typescript/README.md#2025-04-23_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nimport JamAI from \"jamaibase\";\n\nconst {\n    JAMAI_API_KEY,\n    public: { JAMAI_BASEURL, JAMAI_PROJECT_ID }\n} = useRuntimeConfig();\n\nconst jamai = new JamAI({\n    baseURL: JAMAI_BASEURL,\n    apiKey: JAMAI_API_KEY,\n    projectId: JAMAI_PROJECT_ID\n});\n\nexport default defineEventHandler(async (event) => {\n    const { table_id, column_name, column_d_type } = await readBody(event);\n\n    try {\n        const response = await jamai.table.createActionTable({\n            id: table_id,\n            cols: [{ id: column_name, dtype: column_d_type }]\n        });\n\n        return { success: true, data: response };\n    } catch (error) {\n        console.error(\"error: \", error.response);\n        return { success: false, message: \"Something went wrong!\" };\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Form Action for JamAI Table Creation\nDESCRIPTION: A SvelteKit server-side form action that processes form data and creates an action table in JamAI. It initializes the JamAI client with configuration and handles form submission.\nSOURCE: https://github.com/embeddedllm/jamaibase/blob/main/clients/typescript/README.md#2025-04-23_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nimport JamAI from \"jamaibase\";\nimport { fail } from \"@sveltejs/kit\";\nimport { PUBLIC_JAMAI_URL } from \"$env/static/public\";\nimport { JAMAI_API_KEY, JAMAI_PROJECT_ID } from \"$env/static/private\";\n\nconst jamai = new JamAI({\n    baseURL: PUBLIC_JAMAI_URL,\n    apiKey: JAMAI_API_KEY,\n    projectId: JAMAI_PROJECT_ID,\n});\n\nexport const actions = {\n    default: async ({ request }) => {\n\n        type DTypes = \"float\" | \"int\" | \"bool\" | \"str\" | undefined;\n\n        const data = await request.formData();\n        const tableId = data.get(\"table_id\")?.toString();\n        const columnName = data.get(\"column_name\")?.toString();\n        const columnDType = data.get(\"column_d_type\")?.toString() as DTypes;\n\n        console.log(\"data: \", data);\n        try {\n            const response = await jamai.table.createActionTable({\n                id: tableId!,\n                cols: [{ id: columnName!, dtype: columnDType! }],\n            });\n\n            return { success: true, data: response };\n        } catch (error) {\n            console.error(error);\n            fail(500, { message: \"Something went wrong!\" });\n        }\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Main Function for JamAI Table Operations Workflow\nDESCRIPTION: The main function that orchestrates the complete workflow of JamAI table operations, including cleanup, creation, row management, querying, and duplication operations.\nSOURCE: https://github.com/embeddedllm/jamaibase/blob/main/clients/python/README.md#2025-04-23_snippet_31\n\nLANGUAGE: python\nCODE:\n```\ndef main():\n    jamai = JamAI()\n\n    delete_all_tables(jamai)\n    create_tables(jamai)\n    add_rows(jamai)\n    fetch_rows(jamai)\n    fetch_columns(jamai)\n    rag(jamai)\n    fetch_tables(jamai)\n    duplicate_tables(jamai)\n    delete_rows(jamai)\n    delete_all_tables(jamai)\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n----------------------------------------\n\nTITLE: Implementing API Route Handler in Next.js\nDESCRIPTION: Next.js API route handler that initializes the JamAI client and fetches table data based on the provided table type.\nSOURCE: https://github.com/embeddedllm/jamaibase/blob/main/clients/typescript/README.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// src/app/api/list-tables/route.ts\nimport JamAI from \"jamaibase\";\nimport {\n    PageListTableMetaResponse,\n    TableTypes,\n} from \"jamaibase/resources/gen_tables/tables\";\nimport { NextRequest, NextResponse } from \"next/server\";\n\nconst jamai = new JamAI({\n    baseURL: process.env.NEXT_PUBLIC_JAMAI_BASEURL!,\n    apiKey: process.env.JAMAI_API_KEY,\n    projectId: process.env.JAMAI_PROJECT_ID,\n});\n\nexport async function GET(request: NextRequest) {\n    const searchParams = request.nextUrl.searchParams;\n    const tableType = (searchParams.get(\"type\") || \"action\") as TableTypes;\n\n    try {\n        let data: PageListTableMetaResponse = await jamai.table.listTables({\n            table_type: tableType,\n        });\n        return NextResponse.json(data);\n    } catch (error: any) {\n        console.error(\"Error fetching tables:\", error.response);\n        return NextResponse.json(\n            { message: \"Internal server error\" },\n            { status: 500 }\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing and Retrieving JamAI Table Information in Python\nDESCRIPTION: This function demonstrates how to list and retrieve information about tables in a JamAI instance. It shows listing tables of different types (action, knowledge, chat) with optional row counting, and fetching details about a specific table by ID.\nSOURCE: https://github.com/embeddedllm/jamaibase/blob/main/clients/python/README.md#2025-04-23_snippet_24\n\nLANGUAGE: python\nCODE:\n```\ndef fetch_tables(jamai: JamAI):\n    # --- List tables -- #\n    # Action\n    tables = jamai.table.list_tables(\"action\", count_rows=True)\n    assert len(tables.items) == 2\n    # Paginated items\n    for table in tables.items:\n        print(f\"{table.id=}, {table.num_rows=}\")\n\n    # Knowledge\n    tables = jamai.table.list_tables(\"knowledge\")\n    assert len(tables.items) == 1\n    for table in tables.items:\n        print(f\"{table.id=}, {table.num_rows=}\")\n\n    # Chat\n    tables = jamai.table.list_tables(\"chat\")\n    assert len(tables.items) == 1\n    for table in tables.items:\n        print(f\"{table.id=}, {table.num_rows=}\")\n\n    # --- Fetch a specific table -- #\n    table = jamai.table.get_table(\"action\", \"action-rag\")\n    print(f\"{table.id=}, {table.num_rows=}\")\n```\n\n----------------------------------------\n\nTITLE: Adding a Row with Streaming Output to JamAI Action Table in JavaScript\nDESCRIPTION: Example of using the JamAI client to add a row to an action table with streaming output. This demonstrates how to handle real-time data streams from JamAI.\nSOURCE: https://github.com/embeddedllm/jamaibase/blob/main/clients/typescript/README.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ntry {\n    const stream = await jamai.table.addRowStream({\n        table_type: \"action\",\n        table_id: \"action-table-example-1\",\n        data: [\n            {\n                Name: \"Albert Eistein\"\n            }\n        ],\n        reindex: null,\n        concurrent: false\n    });\n\n    const reader = stream.getReader();\n\n    while (true) {\n        const { done, value } = await reader.read();\n        if (done) {\n            console.log(\"Done\");\n            break;\n        }\n        console.log(value);\n        if (value) {\n            console.log(value?.choices[0]?.message.content);\n        }\n    }\n} catch (err) {}\n```\n\n----------------------------------------\n\nTITLE: Creating JamAI API Client with Retry and Timeout Settings in JavaScript\nDESCRIPTION: Example of creating a JamAI API client instance with custom maximum retries and timeout settings for API requests.\nSOURCE: https://github.com/embeddedllm/jamaibase/blob/main/clients/typescript/README.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport JamAI from \"jamaibase\";\n\nconst jamai = new JamAI({\n    baseURL: \"https://api.jamaibase.com\",\n    maxRetries: 3,\n    timeout: 500\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Information About Available Models\nDESCRIPTION: Functions that demonstrate different ways to retrieve information about available AI models in the JamAI system, including filtering by capability and getting detailed model information.\nSOURCE: https://github.com/embeddedllm/jamaibase/blob/main/clients/python/README.md#2025-04-23_snippet_35\n\nLANGUAGE: python\nCODE:\n```\n# Get all model info\nmodels = jamai.model_info()\nmodel = models.data[0]\nprint(f\"Model: {model.id}  Context length: {model.context_length}\")\n# Model: openai/gpt-4o  Context length: 128000\n\n# Get specific model info\nmodels = jamai.model_info(name=\"openai/gpt-4o\")\nprint(models.data[0])\n# id='openai/gpt-4o' object='model' name='OpenAI GPT-4' context_length=128000 languages=['en', 'cn'] capabilities=['chat'] owned_by='openai'\n\n# Filter based on capability: \"chat\", \"embed\", \"rerank\"\nmodels = jamai.model_info(capabilities=[\"chat\"])\nfor model in models.data:\n    print(model)\n\nmodels = jamai.model_info(capabilities=[\"embed\"])\nfor model in models.data:\n    print(model)\n\nmodels = jamai.model_info(capabilities=[\"rerank\"])\nfor model in models.data:\n    print(model)\n```\n\n----------------------------------------\n\nTITLE: Creating Table Creation Form in Vue\nDESCRIPTION: Vue component that provides a form for creating new action tables with JamAI. It includes fields for table ID, column name, and data type selection, along with success/error state handling.\nSOURCE: https://github.com/embeddedllm/jamaibase/blob/main/clients/typescript/README.md#2025-04-23_snippet_31\n\nLANGUAGE: html\nCODE:\n```\n<template>\n    <main>\n        <h1>Create Action Table</h1>\n\n        <div v-if=\"form.success\">\n            <p>Successfully created the table.</p>\n        </div>\n        <div v-else-if=\"form.error\">\n            <p>Sorry, something went wrong!</p>\n        </div>\n\n        <form @submit.prevent=\"submitForm\">\n            <label>\n                Table ID\n                <input v-model=\"tableId\" />\n            </label>\n            <label>\n                Column Name\n                <input v-model=\"columnName\" />\n            </label>\n            <label>\n                Column Data Type\n                <select v-model=\"columnDType\">\n                    <option value=\"str\">str</option>\n                    <option value=\"int\">int</option>\n                    <option value=\"float\">float</option>\n                    <option value=\"bool\">bool</option>\n                </select>\n            </label>\n            <button type=\"submit\">Create</button>\n        </form>\n    </main>\n</template>\n\n<script setup>\n    import { ref } from \"vue\";\n    import { useRouter } from \"vue-router\";\n\n    const tableId = ref(\"\");\n    const columnName = ref(\"\");\n    const columnDType = ref(\"str\");\n    const form = ref({ success: false, error: false });\n    const router = useRouter();\n\n    async function submitForm() {\n        const { data } = useFetch(\"/api/create-table\", {\n            method: \"post\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: {\n                table_id: tableId.value,\n                column_name: columnName.value,\n                column_d_type: columnDType.value\n            }\n        });\n\n        if (data.value?.success) {\n            form.value.success = true;\n            form.value.error = false;\n        } else {\n            form.value.success = false;\n            form.value.error = true;\n        }\n    }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Getting Model IDs and Names with Filtering\nDESCRIPTION: Functions that retrieve lists of available model IDs/names in the JamAI system, with options to filter by capability and specify preferred models to appear at the top of the list.\nSOURCE: https://github.com/embeddedllm/jamaibase/blob/main/clients/python/README.md#2025-04-23_snippet_36\n\nLANGUAGE: python\nCODE:\n```\n# Get all model IDs\nmodel_names = jamai.model_names()\nprint(model_names)\n# ['ellm/meta-llama/Llama-3-8B-Instruct', 'ellm/meta-llama/Llama-3-70B-Instruct', 'openai/gpt-4o-mini', ..., 'cohere/rerank-english-v3.0', 'cohere/rerank-multilingual-v3.0']\n\n# Model IDs with the preferred model at the top if available\nmodel_names = jamai.model_names(prefer=\"openai/gpt-4o\")\nprint(model_names[0])\n\n# Filter based on capability: \"chat\", \"embed\", \"rerank\"\nmodels = jamai.model_names(capabilities=[\"chat\"])\nprint(models)\n\nmodels = jamai.model_names(capabilities=[\"embed\"])\nprint(models)\n\nmodels = jamai.model_names(capabilities=[\"rerank\"])\nprint(models)\n```\n\n----------------------------------------\n\nTITLE: Creating Table Listing Page in Vue\nDESCRIPTION: Vue component for listing JamAI tables with filtering by table type. Includes template with a dropdown selector and a table to display table information like ID, columns, column types, and row counts.\nSOURCE: https://github.com/embeddedllm/jamaibase/blob/main/clients/typescript/README.md#2025-04-23_snippet_28\n\nLANGUAGE: html\nCODE:\n```\n<template>\n    <main>\n        <div class=\"container\">\n            <label>Choose Table Type:</label>\n            <select v-model=\"tableType\" @change=\"fetchTables\">\n                <option value=\"action\">Action</option>\n                <option value=\"chat\">Chat</option>\n                <option value=\"knowledge\">Knowledge</option>\n            </select>\n        </div>\n\n        <div class=\"container\">\n            <h1>List of Tables</h1>\n            <table>\n                <thead>\n                    <tr>\n                        <th>Table ID</th>\n                        <th>Columns</th>\n                        <th>Column Type</th>\n                        <th>Number of Rows</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr v-for=\"table in tableData.items\" :key=\"table.id\">\n                        <td>{{ table.id }}</td>\n                        <td>\n                            <ul>\n                                <li v-for=\"column in table.cols\" :key=\"column.id\">{{ column.id }}: {{ column.dtype }}</li>\n                            </ul>\n                        </td>\n                        <td>\n                            <ul>\n                                <li v-for=\"column in table.cols\" :key=\"column.id\">{{ column.gen_config ? \"Output\" : \"Input\" }}</li>\n                            </ul>\n                        </td>\n                        <td>{{ table.num_rows }}</td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    </main>\n</template>\n\n<script setup>\n    import { ref, onMounted } from \"vue\";\n\n    const tableType = ref(\"action\");\n    const tableData = ref({ items: [] });\n\n    async function fetchTables() {\n        const response = await $fetch(`/api/list-tables?type=${tableType.value}`);\n\n        if (response.success) {\n            tableData.value = response.data;\n        } else {\n            console.error(\"Failed to fetch data\");\n        }\n    }\n\n    onMounted(() => {\n        fetchTables();\n    });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initializing JamAI Client in Python\nDESCRIPTION: Code snippet showing how to import and initialize the JamAI client for both synchronous and asynchronous usage. It demonstrates setting up the client with an API token and project ID.\nSOURCE: https://github.com/embeddedllm/jamaibase/blob/main/clients/python/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom jamaibase import JamAI, protocol as p\n\njamai = JamAI(token=\"your_pat\", project_id=\"your_project_id\")\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom jamaibase import JamAIAsync, protocol as p\n\njamai = JamAIAsync(token=\"your_pat\", project_id=\"your_project_id\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Next.js Component to Display JamAI Data\nDESCRIPTION: Next.js component that fetches data from the API route and renders a table of JamAI table information, including a dropdown to select the table type.\nSOURCE: https://github.com/embeddedllm/jamaibase/blob/main/clients/typescript/README.md#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n// src/app/page.tsx\n\n\"use client\";\n\nimport { PageListTableMetaResponse } from \"jamaibase/dist/resources/gen_tables/tables\";\nimport { ChangeEvent, useEffect, useState } from \"react\";\n\nexport default function Home() {\n    const [tableData, setTableData] = useState<PageListTableMetaResponse>();\n    const [tableType, setTableType] = useState(\"action\");\n\n    const handleTableTypeChange = (e: ChangeEvent<HTMLSelectElement>) => {\n        setTableType(e.target.value);\n    };\n\n    useEffect(() => {\n        const fetchData = async () => {\n            console.log(\"fetch data\");\n            const response = await fetch(`/api/list-tables?type=${tableType}`);\n            if (response.ok) {\n                const data: PageListTableMetaResponse = await response.json();\n                setTableData(data);\n            } else {\n                console.error(\"Failed to fetch data:\", response.statusText);\n            }\n        };\n        fetchData();\n    }, [tableType]);\n    return (\n        <main className=\"flex min-h-screen flex-col  p-24\">\n            <div className=\"max-w-sm mx-auto my-10 p-5 bg-white rounded-lg shadow-md\">\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Choose Table Type:\n                </label>\n                <select\n                    value={tableType}\n                    onChange={handleTableTypeChange}\n                    className=\"block w-full py-2 px-3 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm text-black\"\n                >\n                    <option value=\"action\">Action</option>\n                    <option value=\"chat\">Chat</option>\n                    <option value=\"knowledge\">Knowledge</option>\n                </select>\n            </div>\n\n            <div className=\"space-y-6\">\n                <h1 className=\"text-4xl\">List of Tables</h1>\n                <table className=\"min-w-full divide-y divide-gray-200\">\n                    <thead className=\"bg-gray-50\">\n                        <tr>\n                            <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                                Table ID\n                            </th>\n                            <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                                Columns\n                            </th>\n                            <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                                Column Type\n                            </th>\n                            <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                                Number of Rows\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody className=\"bg-white divide-y divide-gray-300 text-black\">\n                        {tableData?.items.map((table) => (\n                            <tr key={table.id}>\n                                <td className=\"px-6 py-4 whitespace-nowrap\">\n                                    {table.id}\n                                </td>\n                                <td className=\"px-6 py-4 whitespace-nowrap\">\n                                    <ul className=\"space-y-2\">\n                                        {table.cols.map((column) => (\n                                            <li className=\"\" key={column.id}>\n                                                <span>{column.id}: </span>\n                                                <span>{column.dtype}</span>\n                                            </li>\n                                        ))}\n                                    </ul>\n                                </td>\n                                <td className=\"px-6 py-4 whitespace-nowrap\">\n                                    <ul className=\"space-y-2\">\n                                        {table.cols.map((column) => (\n                                            <li className=\"\" key={column.id}>\n                                                <span>\n                                                    {column.gen_config\n                                                        ? \"Output\"\n                                                        : \"Input\"}\n                                                </span>\n                                            </li>\n                                        ))}\n                                    </ul>\n                                </td>\n                                <td className=\"px-6 py-4 whitespace-nowrap\">\n                                    {table.num_rows}\n                                </td>\n                            </tr>\n                        ))}\n                    </tbody>\n                </table>\n            </div>\n        </main>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Action Table in JamAI\nDESCRIPTION: Example of creating an Action Table in JamAI, defining its schema with various column types and configurations for AI-generated content.\nSOURCE: https://github.com/embeddedllm/jamaibase/blob/main/clients/python/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ntable = jamai.table.create_action_table(\n    p.ActionTableSchemaCreate(\n        id=\"action-simple\",\n        cols=[\n            p.ColumnSchemaCreate(id=\"image\", dtype=\"image\"),  # Image input\n            p.ColumnSchemaCreate(id=\"length\", dtype=\"int\"),  # Integer input\n            p.ColumnSchemaCreate(id=\"question\", dtype=\"str\"),\n            p.ColumnSchemaCreate(\n                id=\"answer\",\n                dtype=\"str\",\n                gen_config=p.LLMGenConfig(\n                    model=\"openai/gpt-4o-mini\",  # Leave this out to use a default model\n                    system_prompt=\"You are a concise assistant.\",\n                    prompt=\"Image: ${image}\\n\\nQuestion: ${question}\\n\\nAnswer the question in ${length} words.\",\n                    temperature=0.001,\n                    top_p=0.001,\n                    max_tokens=100,\n                ),\n            ),\n        ],\n    )\n)\nprint(table)\n```\n\n----------------------------------------\n\nTITLE: Creating Action Table Form Component in SvelteKit\nDESCRIPTION: A SvelteKit component that renders a form for creating action tables in JamAI. The form collects table ID, column name, and data type.\nSOURCE: https://github.com/embeddedllm/jamaibase/blob/main/clients/typescript/README.md#2025-04-23_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n<script>\n   <script lang=\"ts\">\n    export let form;\n</script>\n\n<main>\n    <h1>Create Action Table</h1>\n\n    {#if form?.success}\n        <!-- this message is ephemeral; it exists because the page was rendered in\n\t\t   response to a form submission. it will vanish if the user reloads -->\n        <p>Successfully created the table.</p>\n    {/if}\n    {#if !form?.success}\n        <!-- this message is ephemeral; it exists because the page was rendered in\n\t\t   response to a form submission. it will vanish if the user reloads -->\n        <p>Sorry, something went wrong!</p>\n    {/if}\n\n    <form method=\"POST\" action=\"/create-table\">\n        <label>\n            Table ID\n            <input name=\"table_id\" />\n        </label>\n        <label>\n            Column Name\n            <input name=\"column_name\" />\n        </label>\n        <label>\n            Columng Data Type\n            <select name=\"column_d_type\">\n                <option value=\"str\">str</option>\n                <option value=\"int\">int</option>\n                <option value=\"float\">float</option>\n                <option value=\"bool\">bool</option>\n            </select>\n        </label>\n        <button type=\"submit\">Create</button>\n    </form>\n</main>\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Agent for JamAI API Client in JavaScript\nDESCRIPTION: Example of configuring the HTTP agent settings for a JamAI API client instance, including maximum sockets and free socket timeout.\nSOURCE: https://github.com/embeddedllm/jamaibase/blob/main/clients/typescript/README.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport JamAI from \"jamaibase\";\n\nconst jamai = new JamAI({\n    baseURL: \"https://api.jamaibase.com\"\n});\n\njamai.setHttpagentConfig({\n    maxSockets: 100,\n    maxFreeSockets: 10,\n    freeSocketTimeout: 30000 // free socket keepalive for 30 seconds\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Knowledge Table in JamAI\nDESCRIPTION: Example of creating a Knowledge Table in JamAI, specifying the embedding model to be used for processing the table's content.\nSOURCE: https://github.com/embeddedllm/jamaibase/blob/main/clients/python/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ntable = jamai.table.create_knowledge_table(\n    p.KnowledgeTableSchemaCreate(\n        id=\"knowledge-simple\",\n        cols=[],\n        embedding_model=\"ellm/BAAI/bge-m3\",\n    )\n)\nprint(table)\n```\n\n----------------------------------------\n\nTITLE: Importing JamAI from UMD Module in JavaScript\nDESCRIPTION: Example of importing the JamAI client from a UMD (Universal Module Definition) module, which can be used in various module systems.\nSOURCE: https://github.com/embeddedllm/jamaibase/blob/main/clients/typescript/README.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport JamAI from \"jamaibase/index.umd.js\";\n```\n\n----------------------------------------\n\nTITLE: Creating Chat Table in JamAI\nDESCRIPTION: Example of creating a Chat Table in JamAI, defining columns for user input and AI-generated responses with specific configuration for the AI model.\nSOURCE: https://github.com/embeddedllm/jamaibase/blob/main/clients/python/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ntable = jamai.table.create_chat_table(\n    p.ChatTableSchemaCreate(\n        id=\"chat-simple\",\n        cols=[\n            p.ColumnSchemaCreate(id=\"User\", dtype=\"str\"),\n            p.ColumnSchemaCreate(\n                id=\"AI\",\n                dtype=\"str\",\n                gen_config=p.LLMGenConfig(\n                    model=\"openai/gpt-4o-mini\",  # Leave this out to use a default model\n                    system_prompt=\"You are a pirate.\",\n                    temperature=0.001,\n                    top_p=0.001,\n                    max_tokens=100,\n                ),\n            ),\n        ],\n    )\n)\nprint(table)\n```\n\n----------------------------------------\n\nTITLE: Creating Navigation Layout in Vue\nDESCRIPTION: Vue layout component that provides consistent navigation between pages. It includes links to the home page and table creation page, with styling for the navigation bar.\nSOURCE: https://github.com/embeddedllm/jamaibase/blob/main/clients/typescript/README.md#2025-04-23_snippet_33\n\nLANGUAGE: html\nCODE:\n```\n<template>\n    <div>\n        <nav>\n            <ul>\n                <li><NuxtLink to=\"/\">Home</NuxtLink></li>\n                <li><NuxtLink to=\"/create-table\">Create Table</NuxtLink></li>\n            </ul>\n        </nav>\n        <slot />\n    </div>\n</template>\n\n<script setup></script>\n\n<style scoped>\n    nav {\n        background-color: #f8f9fa;\n        padding: 10px;\n    }\n\n    nav ul {\n        list-style: none;\n        padding: 0;\n        margin: 0;\n        display: flex;\n        gap: 20px;\n    }\n\n    nav ul li {\n        display: inline;\n    }\n\n    nav a {\n        text-decoration: none;\n        color: #007bff;\n    }\n\n    nav a:hover {\n        text-decoration: underline;\n    }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Table Rows with Filtering in Python\nDESCRIPTION: Shows different methods of retrieving rows from action, knowledge, and chat tables, including pagination and specific row retrieval by ID.\nSOURCE: https://github.com/embeddedllm/jamaibase/blob/main/clients/python/README.md#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n# --- List rows -- #\n# Action\nrows = jamai.table.list_table_rows(\"action\", \"action-simple\")\n# Paginated items\nfor row in rows.items:\n    print(row[\"ID\"], row[\"answer\"][\"value\"])\n\n# Knowledge\nrows = jamai.table.list_table_rows(\"knowledge\", \"knowledge-simple\")\nfor row in rows.items:\n    print(row[\"ID\"], row[\"Title\"][\"value\"])\n    print(row[\"Title Embed\"][\"value\"][:3])  # Knowledge Table has embeddings\n\n# Chat\nrows = jamai.table.list_table_rows(\"chat\", \"chat-simple\")\nfor row in rows.items:\n    print(row[\"ID\"], row[\"User\"][\"value\"], row[\"AI\"][\"value\"])\n\n# --- Fetch a specific row -- #\nrow = jamai.table.get_table_row(\"chat\", \"chat-simple\", rows.items[0][\"ID\"])\nprint(row[\"ID\"], row[\"AI\"][\"value\"])\n\n# --- Filter using a search term -- #\nrows = jamai.table.list_table_rows(\"action\", \"action-simple\", search_query=\"Dune\")\nfor row in rows.items:\n    print(row[\"ID\"], row[\"answer\"][\"value\"])\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Next.js\nDESCRIPTION: Example of environment variables to be added to the .env.local file for JamAI configuration in a Next.js project.\nSOURCE: https://github.com/embeddedllm/jamaibase/blob/main/clients/typescript/README.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nNEXT_PUBLIC_JAMAI_BASEURL=http://api.jamaibase.com/\nJAMAI_API_KEY=your_jamai_sk_api_key\nJAMAI_PROJECT_ID=your_proj_id\n```\n\n----------------------------------------\n\nTITLE: Deleting Rows from a JamAI Table\nDESCRIPTION: A function that demonstrates how to delete rows from a table by specifying row IDs. It verifies the deletion by checking that the table is empty after the operation.\nSOURCE: https://github.com/embeddedllm/jamaibase/blob/main/clients/python/README.md#2025-04-23_snippet_30\n\nLANGUAGE: python\nCODE:\n```\ndef delete_rows(jamai: JamAI):\n    # Delete rows\n    rows = jamai.table.list_table_rows(\"action\", \"action-simple\")\n    response = jamai.table.delete_table_rows(\n        \"action\",\n        p.RowDeleteRequest(\n            table_id=\"action-simple\",\n            row_ids=[row[\"ID\"] for row in rows.items],\n        ),\n    )\n    assert response.ok\n    # Assert that the table is empty\n    rows = jamai.table.list_table_rows(\"action\", \"action-simple\")\n    assert len(rows.items) == 0\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for JamAI\nDESCRIPTION: Example of environment variables needed for JamAI integration, including the base URL, API key, and project ID.\nSOURCE: https://github.com/embeddedllm/jamaibase/blob/main/clients/typescript/README.md#2025-04-23_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nPUBLIC_JAMAI_BASEURL=http://api.jamaibase.com/\nJAMAI_API_KEY=your_jamai_sk_api_key\nJAMAI_PROJECT_ID=your_proj_id\n```\n\n----------------------------------------\n\nTITLE: Deleting All Tables from JamAI System\nDESCRIPTION: A function that batch deletes all tables of specified types (action, knowledge, chat) from the JamAI system. It uses pagination with a specified batch size to handle large numbers of tables.\nSOURCE: https://github.com/embeddedllm/jamaibase/blob/main/clients/python/README.md#2025-04-23_snippet_27\n\nLANGUAGE: python\nCODE:\n```\ndef delete_all_tables(jamai: JamAI):\n    batch_size = 100\n    for table_type in [\"action\", \"knowledge\", \"chat\"]:\n        offset, total = 0, 1\n        while offset < total:\n            tables = jamai.table.list_tables(table_type, offset=offset, limit=batch_size)\n            assert isinstance(tables.items, list)\n            for table in tables.items:\n                jamai.table.delete_table(table_type, table.id)\n            total = tables.total\n            offset += batch_size\n```\n\n----------------------------------------\n\nTITLE: Creating Environment Configuration for JamAI\nDESCRIPTION: Environment variable configuration for JamAI API connectivity, including the base URL, API key, and project ID.\nSOURCE: https://github.com/embeddedllm/jamaibase/blob/main/clients/typescript/README.md#2025-04-23_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nPUBLIC_JAMAI_BASEURL=http://api.jamaibase.com/\nJAMAI_API_KEY=your_jamai_sk_api_key\nJAMAI_PROJECT_ID=your_proj_id\n```\n\n----------------------------------------\n\nTITLE: Duplicating Tables in JamAI System\nDESCRIPTION: A function that demonstrates how to duplicate tables in JamAI with options to include or exclude data. It shows copying a table with both schema and data (default), and creating another copy with just the schema.\nSOURCE: https://github.com/embeddedllm/jamaibase/blob/main/clients/python/README.md#2025-04-23_snippet_28\n\nLANGUAGE: python\nCODE:\n```\ndef duplicate_tables(jamai: JamAI):\n    # By default, both schema (like generation config) and data are included\n    table = jamai.table.duplicate_table(\n        \"action\",\n        \"action-rag\",\n        \"action-rag-copy\",\n    )\n    assert table.id == \"action-rag-copy\"\n    rows = jamai.table.list_table_rows(\"action\", \"action-rag-copy\")\n    assert rows.total > 0\n\n    # We can also duplicate a table without its data\n    table = jamai.table.duplicate_table(\n        \"action\",\n        \"action-rag\",\n        \"action-rag-copy-schema-only\",\n        include_data=False,\n    )\n    assert table.id == \"action-rag-copy-schema-only\"\n    rows = jamai.table.list_table_rows(\"action\", \"action-rag-copy-schema-only\")\n    assert rows.total == 0\n```\n\n----------------------------------------\n\nTITLE: Configuring Nuxt Runtime Environment\nDESCRIPTION: Configuration in nuxt.config.ts to expose environment variables to the application, making them available both on server and client sides as needed.\nSOURCE: https://github.com/embeddedllm/jamaibase/blob/main/clients/typescript/README.md#2025-04-23_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nruntimeConfig: {\n        JAMAI_API_KEY: process.env.JAMAI_API_KEY,\n        public: {\n            JAMAI_BASEURL: process.env.JAMAI_BASEURL,\n            JAMAI_PROJECT_ID: process.env.JAMAI_PROJECT_ID,\n        },\n    },\n```\n\n----------------------------------------\n\nTITLE: Deleting Tables in JamAI System\nDESCRIPTION: A function that deletes specific tables from the JamAI system, verifying the success of each deletion operation through assertion checks.\nSOURCE: https://github.com/embeddedllm/jamaibase/blob/main/clients/python/README.md#2025-04-23_snippet_29\n\nLANGUAGE: python\nCODE:\n```\ndef delete_tables(jamai: JamAI):\n    # Delete tables\n    response = jamai.table.delete_table(\"action\", \"action-simple\")\n    assert response.ok\n    response = jamai.table.delete_table(\"knowledge\", \"knowledge-simple\")\n    assert response.ok\n    response = jamai.table.delete_table(\"chat\", \"chat-simple\")\n    assert response.ok\n    response = jamai.table.delete_table(\"action\", \"action-rag\")\n    assert response.ok\n```\n\n----------------------------------------\n\nTITLE: Creating Python Environment for JamAI API\nDESCRIPTION: Commands for setting up a fresh Python 3.10 environment using Conda and activating it\nSOURCE: https://github.com/embeddedllm/jamaibase/blob/main/services/api/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nconda create -n jamaiapi python=3.10\n```\n\nLANGUAGE: bash\nCODE:\n```\nconda activate jamaiapi\n```\n\n----------------------------------------\n\nTITLE: Adding Rows to Action Table with Streaming in JamAI\nDESCRIPTION: Demonstrates adding rows to an Action Table with streaming enabled, processing text inputs and receiving AI-generated responses in real-time.\nSOURCE: https://github.com/embeddedllm/jamaibase/blob/main/clients/python/README.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ntext_a = 'Summarize this: \"Arrival\" is a 2016 science fiction drama film directed by Denis Villeneuve and adapted by Eric Heisserer.'\ntext_b = 'Summarize this: \"Dune: Part Two is a 2024 epic science fiction film directed by Denis Villeneuve.\"'\ntext_c = \"Identify the subject of the image.\"\n\n# Streaming\ncompletion = jamai.table.add_table_rows(\n    \"action\",\n    p.RowAddRequest(\n        table_id=\"action-simple\",\n        data=[dict(length=5, question=text_a)],\n        stream=True,\n    ),\n)\nfor chunk in completion:\n    if chunk.output_column_name != \"answer\":\n        continue\n    print(chunk.text, end=\"\", flush=True)\nprint(\"\")\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Building Executable\nDESCRIPTION: Series of commands to install required dependencies and create the executable using Pyinstaller\nSOURCE: https://github.com/embeddedllm/jamaibase/blob/main/services/api/README.md#2025-04-23_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n.\\scripts\\remove_cloud_modules.ps1\n```\n\nLANGUAGE: bash\nCODE:\n```\npip install .\\clients\\python\n```\n\nLANGUAGE: bash\nCODE:\n```\ncd services\\api ; pip install -e .\n```\n\nLANGUAGE: bash\nCODE:\n```\npip install pyinstaller\n```\n\nLANGUAGE: bash\nCODE:\n```\npyinstaller api.spec\n```\n\n----------------------------------------\n\nTITLE: Adding Rows to Action Table without Streaming in JamAI\nDESCRIPTION: Shows how to add rows to an Action Table without streaming, processing text inputs and receiving complete AI-generated responses.\nSOURCE: https://github.com/embeddedllm/jamaibase/blob/main/clients/python/README.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# Non-streaming\ncompletion = jamai.table.add_table_rows(\n    \"action\",\n    p.RowAddRequest(\n        table_id=\"action-simple\",\n        data=[dict(length=5, question=text_b)],\n        stream=False,\n    ),\n)\nprint(completion.rows[0].columns[\"answer\"].text)\n```\n\n----------------------------------------\n\nTITLE: Initial Environment Setup - Bash\nDESCRIPTION: Creates a copy of the environment configuration file and sets up development environment\nSOURCE: https://github.com/embeddedllm/jamaibase/blob/main/services/app/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.example .env\n```\n\n----------------------------------------\n\nTITLE: Adding Rows with Image Input to Action Table in JamAI\nDESCRIPTION: Demonstrates adding rows with image input to an Action Table, both with and without streaming, to process image-based queries.\nSOURCE: https://github.com/embeddedllm/jamaibase/blob/main/clients/python/README.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# Streaming (with image input)\nupload_response = jamai.file.upload_file(\"clients/python/tests/files/jpeg/rabbit.jpeg\")\ncompletion = jamai.table.add_table_rows(\n    \"action\",\n    p.RowAddRequest(\n        table_id=\"action-simple\",\n        data=[dict(image=upload_response.uri, length=5, question=text_c)],\n        stream=True,\n    ),\n)\nfor chunk in completion:\n    if chunk.output_column_name != \"answer\":\n        continue\n    print(chunk.text, end=\"\", flush=True)\nprint(\"\")\n\n# Non-streaming (with image input)\ncompletion = jamai.table.add_table_rows(\n    \"action\",\n    p.RowAddRequest(\n        table_id=\"action-simple\",\n        data=[dict(image=upload_response.uri, length=5, question=text_c)],\n        stream=False,\n    ),\n)\nprint(completion.rows[0].columns[\"answer\"].text)\n```\n\n----------------------------------------\n\nTITLE: Styling the Table Display with CSS\nDESCRIPTION: CSS styling for the table display component, including responsive design elements, table formatting, and container styling to enhance visual presentation.\nSOURCE: https://github.com/embeddedllm/jamaibase/blob/main/clients/typescript/README.md#2025-04-23_snippet_29\n\nLANGUAGE: css\nCODE:\n```\n<style scoped>\n/* Main layout styling */\nmain {\n    display: flex;\n    flex-direction: column;\n    min-height: 100vh;\n    padding: 24px;\n}\n\n/* Container styling */\n.container {\n    max-width: 600px;\n    margin: 40px auto;\n    padding: 20px;\n    background-color: #fff;\n    border-radius: 8px;\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n}\n\n/* Label and select input styling */\nlabel {\n    display: block;\n    margin-bottom: 8px;\n    font-size: 14px;\n    font-weight: 500;\n    color: #333;\n}\n\nselect {\n    display: block;\n    width: 100%;\n    padding: 8px;\n    border: 1px solid #ccc;\n    border-radius: 4px;\n    background-color: #fff;\n    margin-bottom: 20px;\n    font-size: 14px;\n}\n\n/* Table styling */\ntable {\n    width: 100%;\n    border-collapse: collapse;\n    margin-top: 20px;\n}\n\nth,\ntd {\n    padding: 12px;\n    border: 1px solid #ddd;\n    text-align: left;\n}\n\nth {\n    background-color: #f4f4f4;\n    font-weight: 600;\n}\n\ntr:nth-child(even) {\n    background-color: #f9f9f9;\n}\n\ntr:hover {\n    background-color: #f1f1f1;\n}\n\n/* Responsive styling */\n@media (max-width: 600px) {\n    .container {\n        padding: 10px;\n    }\n\n    table,\n    th,\n    td {\n        font-size: 12px;\n    }\n\n    th,\n    td {\n        padding: 8px;\n    }\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Adding Rows to Chat Table in JamAI\nDESCRIPTION: Examples of adding rows to a Chat Table, demonstrating both streaming and non-streaming approaches for processing user inputs and receiving AI responses.\nSOURCE: https://github.com/embeddedllm/jamaibase/blob/main/clients/python/README.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# Streaming\ncompletion = jamai.table.add_table_rows(\n    \"chat\",\n    p.RowAddRequest(\n        table_id=\"chat-simple\",\n        data=[dict(User=\"Who directed Arrival (2016)?\")],\n        stream=True,\n    ),\n)\nfor chunk in completion:\n    if chunk.output_column_name != \"AI\":\n        continue\n    print(chunk.text, end=\"\", flush=True)\nprint(\"\")\n\n# Non-streaming\ncompletion = jamai.table.add_table_rows(\n    \"chat\",\n    p.RowAddRequest(\n        table_id=\"chat-simple\",\n        data=[dict(User=\"Who directed Dune (2024)?\")],\n        stream=False,\n    ),\n)\nprint(completion.rows[0].columns[\"AI\"].text)\n```\n\n----------------------------------------\n\nTITLE: Installing React and Creating a New Project\nDESCRIPTION: Commands to create a new React application using Create React App and navigate to the project directory.\nSOURCE: https://github.com/embeddedllm/jamaibase/blob/main/clients/typescript/README.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-react-app my-app\ncd my-app\n```\n\n----------------------------------------\n\nTITLE: Adding Rows to Knowledge Table in JamAI\nDESCRIPTION: Demonstrates adding rows to a Knowledge Table, which is primarily used for embedding external knowledge and files for Retrieval Augmented Generation.\nSOURCE: https://github.com/embeddedllm/jamaibase/blob/main/clients/python/README.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# Streaming\ncompletion = jamai.table.add_table_rows(\n    \"knowledge\",\n    p.RowAddRequest(\n        table_id=\"knowledge-simple\",\n        data=[dict(Title=\"Arrival (2016)\", Text=text_a)],\n        stream=True,\n    ),\n)\nassert len(list(completion)) == 0\n```\n\n----------------------------------------\n\nTITLE: Installing Next.js and Creating a New Project\nDESCRIPTION: Commands to create a new Next.js application and navigate to the project directory.\nSOURCE: https://github.com/embeddedllm/jamaibase/blob/main/clients/typescript/README.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app@latest\ncd (path/to/your/app)\n```\n\n----------------------------------------\n\nTITLE: Adding Non-streaming Rows to Knowledge Table in Python\nDESCRIPTION: Demonstrates adding rows to a knowledge table without streaming. The example adds a movie entry with title and text data.\nSOURCE: https://github.com/embeddedllm/jamaibase/blob/main/clients/python/README.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ncompletion = jamai.table.add_table_rows(\n    \"knowledge\",\n    p.RowAddRequest(\n        table_id=\"knowledge-simple\",\n        data=[dict(Title=\"Dune (2024)\", Text=text_b)],\n        stream=False,\n    ),\n)\nassert len(completion.rows[0].columns) == 0\n```\n\n----------------------------------------\n\nTITLE: Setting up SvelteKit Project with NPM\nDESCRIPTION: Commands to create a new SvelteKit project and install necessary dependencies.\nSOURCE: https://github.com/embeddedllm/jamaibase/blob/main/clients/typescript/README.md#2025-04-23_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nnpm create svelte@latest jamai-example-app\ncd jamai-example-app\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Fetching Specific Columns from JamAI Tables in Python\nDESCRIPTION: This function demonstrates how to retrieve only specific columns from JamAI tables for more efficient data access. It shows how to list rows with only the requested columns while ID and timestamp columns are always included in the results.\nSOURCE: https://github.com/embeddedllm/jamaibase/blob/main/clients/python/README.md#2025-04-23_snippet_22\n\nLANGUAGE: python\nCODE:\n```\ndef fetch_columns(jamai: JamAI):\n    # --- Only fetch specific columns -- #\n    rows = jamai.table.list_table_rows(\"action\", \"action-simple\", columns=[\"length\"])\n    assert len(rows.items) == 4\n    for row in rows.items:\n        # \"ID\" and \"Updated at\" will always be fetched\n        print(row[\"ID\"], row[\"length\"][\"value\"])\n```\n\n----------------------------------------\n\nTITLE: Initializing Nuxt Project with Command Line\nDESCRIPTION: Commands to create a new Nuxt.js project, navigate to the project directory, and install dependencies.\nSOURCE: https://github.com/embeddedllm/jamaibase/blob/main/clients/typescript/README.md#2025-04-23_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\nnpx nuxi init jamai-example-app\ncd jamai-example-app\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Generating Embeddings for Text Input\nDESCRIPTION: Code demonstrating how to generate embeddings for given input texts using the BAAI bge-m3 model. It shows how to format the embedding request and access the resulting embedding vectors.\nSOURCE: https://github.com/embeddedllm/jamaibase/blob/main/clients/python/README.md#2025-04-23_snippet_34\n\nLANGUAGE: python\nCODE:\n```\ntexts = [\"What is love?\", \"What is a llama?\"]\nembeddings = jamai.generate_embeddings(\n    p.EmbeddingRequest(\n        model=\"ellm/BAAI/bge-m3\",\n        input=texts,\n    )\n)\n# Inspect one of the embeddings\nprint(embeddings.data[0].embedding[:3])\n# Print the text and its embedding\nfor text, data in zip(texts, embeddings.data):\n    print(text, data.embedding[:3])\n```\n\n----------------------------------------\n\nTITLE: Environment Configuration - Bash\nDESCRIPTION: Required environment variable settings for building the Electron app\nSOURCE: https://github.com/embeddedllm/jamaibase/blob/main/services/app/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nPUBLIC_JAMAI_URL=\"http://localhost:6969\"\nPUBLIC_IS_SPA=\"true\"\nCHECK_ORIGIN=\"false\"\n```\n\n----------------------------------------\n\nTITLE: Streaming Chat Completions with OpenAI Models\nDESCRIPTION: Example code showing how to generate streaming chat completions using the OpenAI GPT-4o-mini model. The code sets up a chat request with system and user messages and handles the streaming response.\nSOURCE: https://github.com/embeddedllm/jamaibase/blob/main/clients/python/README.md#2025-04-23_snippet_32\n\nLANGUAGE: python\nCODE:\n```\n# Streaming\nrequest = p.ChatRequest(\n    model=\"openai/gpt-4o-mini\",\n    messages=[\n        p.ChatEntry.system(\"You are a concise assistant.\"),\n        p.ChatEntry.user(\"What is a llama?\"),\n    ],\n    temperature=0.001,\n    top_p=0.001,\n    max_tokens=10,\n    stream=True,\n)\ncompletion = jamai.generate_chat_completions(request)\nfor chunk in completion:\n    print(chunk.text, end=\"\", flush=True)\nprint(\"\")\n```\n\n----------------------------------------\n\nTITLE: Installing jamaibase Package\nDESCRIPTION: Command to install the jamaibase package using npm, which is required for integrating JamAI into the application.\nSOURCE: https://github.com/embeddedllm/jamaibase/blob/main/clients/typescript/README.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnpm install jamaibase\n```\n\n----------------------------------------\n\nTITLE: Non-Streaming Chat Completions with OpenAI Models\nDESCRIPTION: Example code showing how to generate non-streaming chat completions using the OpenAI GPT-4o-mini model. The code sets up a chat request with system and user messages and returns the complete response at once.\nSOURCE: https://github.com/embeddedllm/jamaibase/blob/main/clients/python/README.md#2025-04-23_snippet_33\n\nLANGUAGE: python\nCODE:\n```\n# Non-streaming\nrequest = p.ChatRequest(\n    model=\"openai/gpt-4o-mini\",\n    messages=[\n        p.ChatEntry.system(\"You are a concise assistant.\"),\n        p.ChatEntry.user(\"What is a llama?\"),\n    ],\n    temperature=0.001,\n    top_p=0.001,\n    max_tokens=10,\n    stream=False,\n)\ncompletion = jamai.generate_chat_completions(request)\nprint(completion.text)\n```\n\n----------------------------------------\n\nTITLE: Installing JamAI Package\nDESCRIPTION: NPM command to install the JamAIbase package.\nSOURCE: https://github.com/embeddedllm/jamaibase/blob/main/clients/typescript/README.md#2025-04-23_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nnpm i jamaibase\n```\n\n----------------------------------------\n\nTITLE: Initializing JamAI Client for OSS Usage\nDESCRIPTION: Code snippet demonstrating how to initialize the JamAI client for open-source usage, specifying a custom API base URL.\nSOURCE: https://github.com/embeddedllm/jamaibase/blob/main/clients/python/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom jamaibase import JamAI, protocol as p\n\njamai = JamAI(api_base=\"http://localhost:6969/api\")\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom jamaibase import JamAIAsync, protocol as p\n\njamai = JamAIAsync(api_base=\"http://localhost:6969/api\")\n```\n\n----------------------------------------\n\nTITLE: Installing JamAI Package\nDESCRIPTION: Command to install the JamAI package as a dependency in the Nuxt project.\nSOURCE: https://github.com/embeddedllm/jamaibase/blob/main/clients/typescript/README.md#2025-04-23_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\nnpm i jamaibase\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific Columns in Python\nDESCRIPTION: Shows how to retrieve specific columns from a table while ID and Updated at fields are always included.\nSOURCE: https://github.com/embeddedllm/jamaibase/blob/main/clients/python/README.md#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n# --- Only fetch specific columns -- #\nrows = jamai.table.list_table_rows(\"action\", \"action-simple\", columns=[\"length\"])\nfor row in rows.items:\n    # \"ID\" and \"Updated at\" will always be fetched\n    print(row[\"ID\"], row[\"length\"][\"value\"])\n```\n\n----------------------------------------\n\nTITLE: Electron App Building - Bash\nDESCRIPTION: Commands for packaging the Electron application\nSOURCE: https://github.com/embeddedllm/jamaibase/blob/main/services/app/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd services/app\nnpm run package\n```\n\n----------------------------------------\n\nTITLE: Retrieving Tables in Python\nDESCRIPTION: Shows how to list and fetch tables of different types (action, knowledge, chat) with optional row counting.\nSOURCE: https://github.com/embeddedllm/jamaibase/blob/main/clients/python/README.md#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n# --- List tables -- #\n# Action\ntables = jamai.table.list_tables(\"action\", count_rows=True)\nassert len(tables.items) == 2\n# Paginated items\nfor table in tables.items:\n    print(f\"{table.id=}, {table.num_rows=}\")\n\n# Knowledge\ntables = jamai.table.list_tables(\"knowledge\")\nassert len(tables.items) == 1\nfor table in tables.items:\n    print(f\"{table.id=}, {table.num_rows=}\")\n\n# Chat\ntables = jamai.table.list_tables(\"chat\")\nassert len(tables.items) == 1\nfor table in tables.items:\n    print(f\"{table.id=}, {table.num_rows=}\")\n\n# --- Fetch a specific table -- #\ntable = jamai.table.get_table(\"action\", \"action-rag\")\nprint(f\"{table.id=}, {table.num_rows=}\")\n```\n\n----------------------------------------\n\nTITLE: Complete Build Commands - PowerShell\nDESCRIPTION: Commands for building and extracting the complete JamAIBase Electron app\nSOURCE: https://github.com/embeddedllm/jamaibase/blob/main/services/app/README.md#2025-04-23_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\ncd services/app\nnpm run make\n\ncd .\\services\\app\\build-electron\\make\\zip\\win32\\x64\nExpand-Archive -Path 'jamaibase-app-win32-x64-0.2.0.zip' -DestinationPath 'jamaibase-app-win32-x64-0.2.0' -Force\n```\n\n----------------------------------------\n\nTITLE: Deleting Table Rows in Python\nDESCRIPTION: Shows how to delete rows from a table and verify the deletion.\nSOURCE: https://github.com/embeddedllm/jamaibase/blob/main/clients/python/README.md#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n# Delete all rows\nrows = jamai.table.list_table_rows(\"action\", \"action-simple\")\nresponse = jamai.table.delete_table_rows(\n    \"action\",\n    p.RowDeleteRequest(\n        table_id=\"action-simple\",\n        row_ids=[row[\"ID\"] for row in rows.items],\n    ),\n)\nassert response.ok\n# Assert that the table is empty\nrows = jamai.table.list_table_rows(\"action\", \"action-simple\")\nassert len(rows.items) == 0\n```\n\n----------------------------------------\n\nTITLE: Model Download Commands - PowerShell\nDESCRIPTION: Commands for downloading and setting up required AI models\nSOURCE: https://github.com/embeddedllm/jamaibase/blob/main/services/app/README.md#2025-04-23_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nconda create -n hfcli python=3.10\nconda activate hfcli\npip install -U \"huggingface_hub[cli]\"\ncd .\\services\\app\\build-electron\\make\\zip\\win32\\x64\\jamaibase-app-win32-x64-0.2.0\\resources\nhuggingface-cli download sentence-transformers/all-MiniLM-L6-v2 --local-dir .\\sentence-transformers_all-MiniLM-L6-v2\nhuggingface-cli download cross-encoder/ms-marco-TinyBERT-L-2 --local-dir .\\cross-encoder_ms-marco-TinyBERT-L-2\nhuggingface-cli download EmbeddedLLM/Phi-3-mini-4k-instruct-062024-onnx --include=\"onnx/directml/Phi-3-mini-4k-instruct-062024-int4/*\" --local-dir .\\llm_model\n```\n\n----------------------------------------\n\nTITLE: Deleting Tables in Python\nDESCRIPTION: Demonstrates both individual table deletion and batch deletion of all tables by type.\nSOURCE: https://github.com/embeddedllm/jamaibase/blob/main/clients/python/README.md#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n# Delete tables\nresponse = jamai.table.delete_table(\"action\", \"action-simple\")\nassert response.ok\nresponse = jamai.table.delete_table(\"knowledge\", \"knowledge-simple\")\nassert response.ok\nresponse = jamai.table.delete_table(\"chat\", \"chat-simple\")\nassert response.ok\nresponse = jamai.table.delete_table(\"action\", \"action-rag\")\nassert response.ok\n```\n\n----------------------------------------\n\nTITLE: Starting the Next.js Application\nDESCRIPTION: Command to start the Next.js development server.\nSOURCE: https://github.com/embeddedllm/jamaibase/blob/main/clients/typescript/README.md#2025-04-23_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Batch Deleting All Tables by Type in Python\nDESCRIPTION: Shows how to delete all tables of specific types using pagination and batch processing.\nSOURCE: https://github.com/embeddedllm/jamaibase/blob/main/clients/python/README.md#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nbatch_size = 100\nfor table_type in [\"action\", \"knowledge\", \"chat\"]:\n    offset, total = 0, 1\n    while offset < total:\n        tables = jamai.table.list_tables(table_type, offset=offset, limit=batch_size)\n        assert isinstance(tables.items, list)\n        for table in tables.items:\n            jamai.table.delete_table(table_type, table.id)\n        total = tables.total\n        offset += batch_size\n```\n\n----------------------------------------\n\nTITLE: Starting the SvelteKit Application\nDESCRIPTION: Command to run the SvelteKit development server.\nSOURCE: https://github.com/embeddedllm/jamaibase/blob/main/clients/typescript/README.md#2025-04-23_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Deleting Rows from JamAI Tables in Python\nDESCRIPTION: This function demonstrates the beginning of an implementation for deleting rows from JamAI tables. It shows how to list rows from a table and prepare a delete request. Note that the implementation is incomplete in the provided code snippet.\nSOURCE: https://github.com/embeddedllm/jamaibase/blob/main/clients/python/README.md#2025-04-23_snippet_25\n\nLANGUAGE: python\nCODE:\n```\ndef delete_rows(jamai: JamAI):\n    # Delete all rows\n    rows = jamai.table.list_table_rows(\"action\", \"action-simple\")\n    response = jamai.table.delete_table_rows(\n        \"action\",\n        p.RowDeleteRequest(\n            table_id=\"action-simple\",\n```\n\n----------------------------------------\n\nTITLE: Starting the Nuxt Development Server\nDESCRIPTION: Command to start the Nuxt.js development server and run the application locally.\nSOURCE: https://github.com/embeddedllm/jamaibase/blob/main/clients/typescript/README.md#2025-04-23_snippet_34\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing JamAI SDK in Python Environment\nDESCRIPTION: Commands to create a Python environment and install the JamAI SDK using micromamba. This setup is necessary for using JamAI in your Python projects.\nSOURCE: https://github.com/embeddedllm/jamaibase/blob/main/clients/python/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ micromamba create -n jam310 python=3.10 -y\n$ micromamba activate jam310\n$ pip install jamaibase\n```\n\n----------------------------------------\n\nTITLE: Cloud Module Removal Script - PowerShell\nDESCRIPTION: PowerShell script to remove cloud-related modules and files before building the Electron app\nSOURCE: https://github.com/embeddedllm/jamaibase/blob/main/services/app/README.md#2025-04-23_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nGet-ChildItem -Recurse -File -Filter \"cloud*.py\" | Remove-Item -Force\nGet-ChildItem -Recurse -File -Filter \"compose.*.cloud.yml\" | Remove-Item -Force\nGet-ChildItem -Recurse -Directory -Filter \"(cloud)\" | Remove-Item -Recurse -Force\nRemove-Item -Force \"services/app/ecosystem.config.cjs\"\nRemove-Item -Force \"services/app/ecosystem.json\"\n```\n\n----------------------------------------\n\nTITLE: Innosetup Configuration Copy - PowerShell\nDESCRIPTION: Commands for copying Innosetup configuration files\nSOURCE: https://github.com/embeddedllm/jamaibase/blob/main/services/app/README.md#2025-04-23_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\ncd .\\services\\app\nCopy-Item -Path .\\JamAIBase.iss -Destination .\\build-electron\\make\\zip\\win32\\x64\\jamaibase-app-win32-x64-0.2.0\nCopy-Item -Path .\\electron\\icons -Destination .\\build-electron\\make\\zip\\win32\\x64\\jamaibase-app-win32-x64-0.2.0\\ -Recurse\n```\n\n----------------------------------------\n\nTITLE: Running Migration Script for v0.4.0 in Python\nDESCRIPTION: Command to execute the Python script for migrating to v0.4.0. This script adds a 'file' column and renames it to 'image', and adds a 'Page' column to the knowledge table.\nSOURCE: https://github.com/embeddedllm/jamaibase/blob/main/MIGRATION_GUIDE.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython scripts/migration_v040.py\n```\n\n----------------------------------------\n\nTITLE: Running Migration Script for v0.3.0 in Python\nDESCRIPTION: Command to execute the Python script for migrating to v0.3.0. This script adds a 'version' column and 'object' attribute to all gen_config in all action tables.\nSOURCE: https://github.com/embeddedllm/jamaibase/blob/main/MIGRATION_GUIDE.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython scripts/migration_v030.py\n```\n\n----------------------------------------\n\nTITLE: Navigating to JamAIBase Repository Directory in Bash\nDESCRIPTION: Command to change directory to the JamAIBase repository. This step is common for both v0.4.0 and v0.3.0 migrations.\nSOURCE: https://github.com/embeddedllm/jamaibase/blob/main/MIGRATION_GUIDE.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd <JamAIBase repository directory>\n```\n\n----------------------------------------\n\nTITLE: Cosmic Teapot Configuration in JSON\nDESCRIPTION: Defines teapot properties and status in JSON format including temperature and brewing information\nSOURCE: https://github.com/embeddedllm/jamaibase/blob/main/clients/python/tests/files/txt/creative-story.txt#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"чайник\": {\n    \"имя\": \"Космос-1\",\n    \"статус\": \"заваривает\",\n    \"температура\": 1.618e8,\n    \"типЧая\": \"кварк-глюонная плазма\",\n    \"времяЗаварки\": \"вечность\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Windows Environment for DocIO\nDESCRIPTION: PowerShell commands for setting up the environment and generating a Windows executable for DocIO. The process involves installing dependencies and creating the executable in the dist directory.\nSOURCE: https://github.com/embeddedllm/jamaibase/blob/main/services/docio/README.md#2025-04-23_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n.\\scripts\\SetupWinExeEnv.ps1\n```\n\nLANGUAGE: powershell\nCODE:\n```\n.\\scripts\\GenerateWinExe.ps1\n```\n\n----------------------------------------\n\nTITLE: Importing Types from JamAI Resources in TypeScript\nDESCRIPTION: Example of importing specific types from the JamAI resources for use in TypeScript projects, enhancing type safety and developer experience.\nSOURCE: https://github.com/embeddedllm/jamaibase/blob/main/clients/typescript/README.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ChatRequest } from \"jamaibase/dist/resources/llm/chat\";\n\nlet response: ChatRequest;\n```\n\n----------------------------------------\n\nTITLE: Treasure Planets Database Schema in SQL\nDESCRIPTION: Creates a database table for storing cosmic treasure planet information and inserts sample data\nSOURCE: https://github.com/embeddedllm/jamaibase/blob/main/clients/python/tests/files/txt/creative-story.txt#2025-04-23_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE planetas_tesoro (\n    id INT PRIMARY KEY,\n    nombre VARCHAR(50),\n    tipo_tesoro VARCHAR(100),\n    coordenadas_x FLOAT,\n    coordenadas_y FLOAT,\n    coordenadas_z FLOAT\n);\n\nINSERT INTO planetas_tesoro (id, nombre, tipo_tesoro, coordenadas_x, coordenadas_y, coordenadas_z)\nVALUES (1, 'Nebulosa del Azúcar', 'Cristales de sacarosa estelar', 123.45, -67.89, 0.12);\n```\n\n----------------------------------------\n\nTITLE: Cosmic Teapot Class Definition in Java\nDESCRIPTION: Defines a Java class representing a cosmic teapot with properties for material, age, and volume\nSOURCE: https://github.com/embeddedllm/jamaibase/blob/main/clients/python/tests/files/txt/creative-story.txt#2025-04-23_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class CosmicTeapot {\n    private String 材質 = \"中性子星の心\";\n    private long 年齢 = 13_800_000_000L; // 年\n    private double 容量 = 1.889e27; // リットル (木星の体積)\n    \n    public void ティーポットの情報を表示() {\n        System.out.println(\"材質: \" + 材質);\n        System.out.println(\"年齢: \" + 年齢 + \" 年\");\n        System.out.println(\"容量: \" + 容量 + \" L\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Cosmic Teapot API Response in JSON\nDESCRIPTION: JSON structure representing the cosmic teapot's current state and properties.\nSOURCE: https://github.com/embeddedllm/jamaibase/blob/main/clients/python/tests/files/md/creative-story.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"чайник\": {\n    \"имя\": \"Космос-1\",\n    \"статус\": \"заваривает\",\n    \"температура\": 1.618e8,\n    \"типЧая\": \"кварк-глюонная плазма\",\n    \"времяЗаварки\": \"вечность\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Cosmic Teapot Class Implementation in Java\nDESCRIPTION: Java class defining properties and methods for a cosmic teapot including material, age, and volume specifications.\nSOURCE: https://github.com/embeddedllm/jamaibase/blob/main/clients/python/tests/files/md/creative-story.md#2025-04-23_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class CosmicTeapot {\n    private String 材質 = \"中性子星の心\";\n    private long 年齢 = 13_800_000_000L; // 年\n    private double 容量 = 1.889e27; // リットル (木星の体積)\n\n    public void ティーポットの情報を表示() {\n        System.out.println(\"材質: \" + 材質);\n        System.out.println(\"年齢: \" + 年齢 + \" 年\");\n        System.out.println(\"容量: \" + 容量 + \" L\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Treasure Planets Database Schema in SQL\nDESCRIPTION: SQL schema for storing cosmic treasure planet data including coordinates and treasure types.\nSOURCE: https://github.com/embeddedllm/jamaibase/blob/main/clients/python/tests/files/md/creative-story.md#2025-04-23_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE planetas_tesoro (\n    id INT PRIMARY KEY,\n    nombre VARCHAR(50),\n    tipo_tesoro VARCHAR(100),\n    coordenadas_x FLOAT,\n    coordenadas_y FLOAT,\n    coordenadas_z FLOAT\n);\n\nINSERT INTO planetas_tesoro (id, nombre, tipo_tesoro, coordenadas_x, coordenadas_y, coordenadas_z)\nVALUES (1, 'Nebulosa del Azúcar', 'Cristales de sacarosa estelar', 123.45, -67.89, 0.12);\n```\n\n----------------------------------------\n\nTITLE: Temperature Calculation in Python\nDESCRIPTION: Calculates and displays the cosmic tea temperature in Kelvin using scientific notation.\nSOURCE: https://github.com/embeddedllm/jamaibase/blob/main/clients/python/tests/files/md/creative-story.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ntempérature_thé = 3.7e11  # Kelvins\nprint(f\"La température du thé cosmique est de {température_thé:.2e} K\")\n```\n\n----------------------------------------\n\nTITLE: Teapot Coordinates in JavaScript\nDESCRIPTION: Defines and displays 3D coordinates for the cosmic teapot's position in space.\nSOURCE: https://github.com/embeddedllm/jamaibase/blob/main/clients/python/tests/files/md/creative-story.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst teekannePosition = {\n  x: 42.1337,\n  y: 73.1457,\n  z: 69.42,\n};\n\nconsole.log(`Teekanne-Koordinaten: (${teekannePosition.x}, ${teekannePosition.y}, ${teekannePosition.z})`);\n```\n\n----------------------------------------\n\nTITLE: Temperature Calculation in Python\nDESCRIPTION: Calculates and displays cosmic tea temperature in Kelvin using scientific notation\nSOURCE: https://github.com/embeddedllm/jamaibase/blob/main/clients/python/tests/files/txt/creative-story.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ntempérature_thé = 3.7e11  # Kelvins\nprint(f\"La température du thé cosmique est de {température_thé:.2e} K\")\n```\n\n----------------------------------------\n\nTITLE: Teapot Coordinates in JavaScript\nDESCRIPTION: Defines and displays 3D coordinates for the cosmic teapot's position in space\nSOURCE: https://github.com/embeddedllm/jamaibase/blob/main/clients/python/tests/files/txt/creative-story.txt#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst teekannePosition = {\n    x: 42.1337,\n    y: 73.1457,\n    z: 69.4200\n};\n\nconsole.log(`Teekanne-Koordinaten: (${teekannePosition.x}, ${teekannePosition.y}, ${teekannePosition.z})`);\n```"
  }
]