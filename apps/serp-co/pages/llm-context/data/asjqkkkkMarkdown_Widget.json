[
  {
    "owner": "asjqkkkk",
    "repo": "markdown_widget",
    "content": "TITLE: Implementing Table of Contents (TOC) feature\nDESCRIPTION: This code demonstrates how to implement a Table of Contents (TOC) feature using `TocWidget` and `TocController` in conjunction with `MarkdownWidget`. It shows how to display a TOC alongside the markdown content, enabling easy navigation through headings.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/README.md#_snippet_5\n\nLANGUAGE: Dart\nCODE:\n```\nfinal tocController = TocController();\n\nWidget buildTocWidget() => TocWidget(controller: tocController);\n\nWidget buildMarkdown() => MarkdownWidget(data: data, tocController: tocController);\n\n@override\nWidget build(BuildContext context) {\n  return Scaffold(\n      body: Row(\n        children: <Widget>[\n          Expanded(child: buildTocWidget()),\n          Expanded(child: buildMarkdown(), flex: 3)\n        ],\n      ));\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing TOC (Table of Contents) in Flutter Markdown\nDESCRIPTION: This snippet shows how to add a Table of Contents (TOC) to the MarkdownWidget using the TocController and TocWidget. It creates a TocController, passes it to both the TocWidget and MarkdownWidget, and arranges them side-by-side within a Row. This enables navigation within the Markdown content via the TOC.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/README_ZH.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nfinal tocController = TocController();\n\n  Widget buildTocWidget() => TocWidget(controller: tocController);\n\n  Widget buildMarkdown() => MarkdownWidget(data: data, tocController: tocController);\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n        body: Row(\n          children: <Widget>[\n            Expanded(child: buildTocWidget()),\n            Expanded(child: buildMarkdown(), flex: 3)\n          ],\n        ));\n  }\n```\n\n----------------------------------------\n\nTITLE: Implementing TOC Functionality with Markdown Widget (Dart)\nDESCRIPTION: This code snippet illustrates how to implement Table of Contents (TOC) functionality using the `markdown_widget` and `TocController`. It creates a `TocWidget` for displaying the TOC and a `MarkdownWidget` for rendering the Markdown content. The `TocController` is used to synchronize the TOC with the Markdown content. Requires the `markdown_widget` package.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/example/assets/demo_zh.md#_snippet_5\n\nLANGUAGE: Dart\nCODE:\n```\nfinal tocController = TocController();\n\nWidget buildTocWidget() => TocWidget(controller: tocController);\n\nWidget buildMarkdown() => MarkdownWidget(data: data, tocController: tocController);\n\n@override\nWidget build(BuildContext context) {\n  return Scaffold(\n      body: Row(\n        children: <Widget>[\n          Expanded(child: buildTocWidget()),\n          Expanded(child: buildMarkdown(), flex: 3)\n        ],\n      ));\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing TOC (Table of Contents) Functionality\nDESCRIPTION: This code snippet showcases how to implement a Table of Contents (TOC) feature using the `markdown_widget` package. It demonstrates how to use the `TocController` to manage the TOC state and how to integrate the `TocWidget` and `MarkdownWidget` to display the TOC and Markdown content, respectively. The `tocController` is passed to both widgets to enable synchronization between the TOC and the Markdown content.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/README_JP.md#_snippet_5\n\nLANGUAGE: Dart\nCODE:\n```\nfinal tocController = TocController();\n\nWidget buildTocWidget() => TocWidget(controller: tocController);\n\nWidget buildMarkdown() => MarkdownWidget(data: data, tocController: tocController);\n\n@override\nWidget build(BuildContext context) {\n  return Scaffold(\n      body: Row(\n        children: <Widget>[\n          Expanded(child: buildTocWidget()),\n          Expanded(child: buildMarkdown(), flex: 3)\n        ],\n      ));\n}\n```\n\n----------------------------------------\n\nTITLE: Table of Contents (TOC) Feature Dart\nDESCRIPTION: This snippet shows how to use the TOC (Table of Contents) feature.  It initializes a `TocController`, creates a `TocWidget` to display the table of contents, and passes the controller to both the `TocWidget` and the `MarkdownWidget`. This allows the TOC to dynamically update based on the headings in the Markdown content.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/example/assets/demo_en.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nfinal tocController = TocController();\n\nWidget buildTocWidget() => TocWidget(controller: tocController);\n\nWidget buildMarkdown() => MarkdownWidget(data: data, tocController: tocController);\n\n@override\nWidget build(BuildContext context) {\n  return Scaffold(\n      body: Row(\n        children: <Widget>[\n          Expanded(child: buildTocWidget()),\n          Expanded(child: buildMarkdown(), flex: 3)\n        ],\n      ));\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Link Style and Click Events\nDESCRIPTION: This snippet demonstrates how to customize the style and click events of links within the `MarkdownWidget` using `LinkConfig`. It allows you to change the color, decoration, and add custom actions when a link is tapped.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/README.md#_snippet_4\n\nLANGUAGE: Dart\nCODE:\n```\nWidget buildMarkdown() => MarkdownWidget(\n    data: data,\n    config: MarkdownConfig(configs: [\n      LinkConfig(\n        style: TextStyle(\n          color: Colors.red,\n          decoration: TextDecoration.underline,\n        ),\n        onTap: (url) {\n          ///TODO:on tap\n        },\n      )\n    ]));\n```\n\n----------------------------------------\n\nTITLE: Customizing Link Styles and Click Events\nDESCRIPTION: This snippet demonstrates how to customize the style of links and handle click events within the `markdown_widget`.  It creates a `LinkConfig` with a specific text style (red, underlined) and an `onTap` callback function that can be used to handle link clicks. The `url` parameter in the `onTap` function provides the URL of the clicked link.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/README_JP.md#_snippet_4\n\nLANGUAGE: Dart\nCODE:\n```\nWidget buildMarkdown() => MarkdownWidget(\n    data: data,\n    config: MarkdownConfig(configs: [\n      LinkConfig(\n        style: TextStyle(\n          color: Colors.red,\n          decoration: TextDecoration.underline,\n        ),\n        onTap: (url) {\n          ///TODO:on tap\n        },\n      )\n    ]));\n```\n\n----------------------------------------\n\nTITLE: Customizing Link Style and Events Dart\nDESCRIPTION: This snippet demonstrates how to customize the appearance and behavior of links in the MarkdownWidget. It uses the LinkConfig to set the style (color, text decoration) and provides an onTap callback function to handle link clicks. The `url` parameter in the `onTap` callback contains the URL of the clicked link.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/example/assets/demo_en.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nWidget buildMarkdown() => MarkdownWidget(\n    data: data,\n    config: MarkdownConfig(configs: [\n      LinkConfig(\n        style: TextStyle(\n          color: Colors.red,\n          decoration: TextDecoration.underline,\n        ),\n        onTap: (url) {\n          ///TODO:on tap\n        },\n      )\n    ]));\n```\n\n----------------------------------------\n\nTITLE: Basic MarkdownWidget Usage in Flutter\nDESCRIPTION: This code snippet demonstrates the basic usage of the `MarkdownWidget` to render markdown content in a Flutter application. It defines a `MarkdownPage` widget that takes markdown data as input and displays it using `MarkdownWidget`.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/README.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'package:flutter/material.dart';\nimport 'package:markdown_widget/markdown_widget.dart';\n\nclass MarkdownPage extends StatelessWidget {\n  final String data;\n\n  MarkdownPage(this.data);\n\n  @override\n  Widget build(BuildContext context) => Scaffold(body: buildMarkdown());\n\n  Widget buildMarkdown() => MarkdownWidget(data: data);\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Night Mode with MarkdownConfig\nDESCRIPTION: This code shows how to enable night mode in the `markdown_widget` using different `MarkdownConfig` based on the current theme's brightness. It also demonstrates how to use `CodeWrapperWidget` for custom code block styling in both light and dark themes.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/README.md#_snippet_3\n\nLANGUAGE: Dart\nCODE:\n```\nWidget buildMarkdown(BuildContext context) {\n  final isDark = Theme.of(context).brightness == Brightness.dark;\n  final config = isDark\n      ? MarkdownConfig.darkConfig\n      : MarkdownConfig.defaultConfig;\n  final codeWrapper = (child, text, language) =>\n      CodeWrapperWidget(child, text, language);\n  return MarkdownWidget(\n      data: data,\n      config: config.copy(configs: [\n      isDark\n      ? PreConfig.darkConfig.copy(wrapper: codeWrapper)\n      : PreConfig().copy(wrapper: codeWrapper)\n  ]));\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Rendering with Custom Column Widget (Dart)\nDESCRIPTION: This code snippet illustrates how to use `MarkdownGenerator` to build Markdown widgets within a custom `Column` widget in Flutter. It allows integrating the Markdown output into existing layout structures. Requires the `markdown_widget` package.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/example/assets/demo_zh.md#_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\nWidget buildMarkdown() =>\n    Column(children: MarkdownGenerator().buildWidgets(data));\n```\n\n----------------------------------------\n\nTITLE: Implementing Night Mode in Markdown Widget\nDESCRIPTION: This snippet demonstrates how to implement night mode in the `markdown_widget` by using different `MarkdownConfig` settings based on the current theme's brightness. It utilizes `Theme.of(context).brightness` to detect whether the app is in dark mode and applies either the `darkConfig` or `defaultConfig` accordingly. It also shows how to wrap code blocks with a custom widget (`CodeWrapperWidget`) for styling.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/README_JP.md#_snippet_3\n\nLANGUAGE: Dart\nCODE:\n```\nWidget buildMarkdown(BuildContext context) {\n  final isDark = Theme.of(context).brightness == Brightness.dark;\n  final config = isDark\n      ? MarkdownConfig.darkConfig\n      : MarkdownConfig.defaultConfig;\n  final codeWrapper = (child, text, language) =>\n      CodeWrapperWidget(child, text, language);\n  return MarkdownWidget(\n      data: data,\n      config: config.copy(configs: [\n      isDark\n      ? PreConfig.darkConfig.copy(wrapper: codeWrapper)\n      : PreConfig().copy(wrapper: codeWrapper)\n  ]));\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dark Mode for Markdown Widget (Dart)\nDESCRIPTION: This code demonstrates how to implement a dark mode for the `markdown_widget` in a Flutter application. It checks the current theme's brightness and applies either the default or dark configuration accordingly. It also uses `CodeWrapperWidget` to customize the appearance of code blocks based on the theme. Requires the `markdown_widget` package.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/example/assets/demo_zh.md#_snippet_3\n\nLANGUAGE: Dart\nCODE:\n```\nWidget buildMarkdown(BuildContext context) {\n  final isDark = Theme.of(context).brightness == Brightness.dark;\n  final config = isDark\n      ? MarkdownConfig.darkConfig\n      : MarkdownConfig.defaultConfig;\n  final codeWrapper = (child, text, language) =>\n      CodeWrapperWidget(child, text, language);\n  return MarkdownWidget(\n      data: data,\n      config: config.copy(configs: [\n      isDark\n      ? PreConfig.darkConfig.copy(wrapper: codeWrapper)\n      : PreConfig().copy(wrapper: codeWrapper)\n  ]));\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Code Highlighting with Markdown Widget (Dart)\nDESCRIPTION: This code snippet demonstrates how to add code highlighting to the `markdown_widget` using the `flutter_highlight` package. It imports a theme (e.g., `a11yLightTheme`) and configures the `PreConfig` to use that theme for code blocks. Requires the `markdown_widget` and `flutter_highlight` packages.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/example/assets/demo_zh.md#_snippet_6\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'package:flutter_highlight/themes/a11y-light.dart';\n\nWidget buildMarkdown() => MarkdownWidget(\n    data: data,\n    config: MarkdownConfig(configs: [\n      PreConfig(theme: a11yLightTheme),\n    ]));\n```\n\n----------------------------------------\n\nTITLE: Enabling Night Mode in Markdown Widget in Flutter\nDESCRIPTION: This snippet explains how to implement a dark/light theme switch for the MarkdownWidget using MarkdownConfig.  It dynamically chooses between defaultConfig and darkConfig based on the current theme's brightness. It also includes the CodeWrapperWidget to customize the appearance of code blocks according to the selected theme.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/README_ZH.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nWidget buildMarkdown(BuildContext context) {\n    final isDark = Theme.of(context).brightness == Brightness.dark;\n    final config = isDark\n        ? MarkdownConfig.darkConfig\n        : MarkdownConfig.defaultConfig;\n    final codeWrapper = (child, text, language) =>\n        CodeWrapperWidget(child, text, language);\n    return MarkdownWidget(\n        data: data,\n        config: config.copy(configs: [\n        isDark\n        ? PreConfig.darkConfig.copy(wrapper: codeWrapper)\n        : PreConfig().copy(wrapper: codeWrapper)\n    ]));\n  }\n```\n\n----------------------------------------\n\nTITLE: Highlighting Code with Themes Dart\nDESCRIPTION: This snippet demonstrates how to highlight code blocks in the MarkdownWidget using a specific theme from the `flutter_highlight` package.  It imports a theme (e.g., `a11yLightTheme`) and applies it using the `PreConfig` within the `MarkdownConfig`. It requires the `flutter_highlight` package as a dependency.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/example/assets/demo_en.md#_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter_highlight/themes/a11y-light.dart';\n\nWidget buildMarkdown() => MarkdownWidget(\n    data: data,\n    config: MarkdownConfig(configs: [\n      PreConfig(theme: a11yLightTheme),\n    ]));\n```\n\n----------------------------------------\n\nTITLE: Night Mode Configuration Dart\nDESCRIPTION: This snippet demonstrates how to enable night mode in the MarkdownWidget by using different MarkdownConfig based on the current theme's brightness. It checks if the current theme is dark and uses `MarkdownConfig.darkConfig` if it is, otherwise it uses `MarkdownConfig.defaultConfig`. The `codeWrapper` parameter allows customizing the appearance of code snippets.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/example/assets/demo_en.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nWidget buildMarkdown(BuildContext context) {\n  final isDark = Theme.of(context).brightness == Brightness.dark;\n  final config = isDark\n      ? MarkdownConfig.darkConfig\n      : MarkdownConfig.defaultConfig;\n  final codeWrapper = (child, text, language) =>\n      CodeWrapperWidget(child, text, language);\n  return MarkdownWidget(\n      data: data,\n      config: config.copy(configs: [\n      isDark\n      ? PreConfig.darkConfig.copy(wrapper: codeWrapper)\n      : PreConfig().copy(wrapper: codeWrapper)\n  ]));\n}\n```\n\n----------------------------------------\n\nTITLE: Code Highlighting with a Specific Theme\nDESCRIPTION: This snippet shows how to enable code highlighting with a specific theme in the `markdown_widget`. It imports a theme from the `flutter_highlight` package (e.g., `a11yLightTheme`) and applies it to the `PreConfig` within the `MarkdownConfig`. This configuration will style code blocks rendered by the `markdown_widget` using the specified theme.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/README_JP.md#_snippet_6\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'package:flutter_highlight/themes/a11y-light.dart';\n\nWidget buildMarkdown() => MarkdownWidget(\n    data: data,\n    config: MarkdownConfig(configs: [\n      PreConfig(theme: a11yLightTheme),\n    ]));\n```\n\n----------------------------------------\n\nTITLE: Using MarkdownGenerator for Custom Layout\nDESCRIPTION: This snippet shows how to use `MarkdownGenerator` to build markdown widgets within a custom layout, such as a `Column`. This gives more control over the placement and styling of the markdown content.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/README.md#_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\nWidget buildMarkdown() =>\n    Column(children: MarkdownGenerator().buildWidgets(data));\n```\n\n----------------------------------------\n\nTITLE: Enabling Code Highlighting with Custom Themes in Flutter Markdown\nDESCRIPTION: This snippet shows how to enable code highlighting in the MarkdownWidget by utilizing the flutter_highlight package and specifying a theme. It requires importing both markdown_widget and flutter_highlight and configuring the PreConfig with the desired theme.  The output is a Markdown view with syntax-highlighted code blocks.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/README_ZH.md#_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter_highlight/themes/a11y-light.dart';\n\n  Widget buildMarkdown() => MarkdownWidget(\n      data: data,\n      config: MarkdownConfig(configs: [\n        PreConfig(theme: a11yLightTheme),\n      ]));\n```\n\n----------------------------------------\n\nTITLE: Customizing Link Style and Tap Event in Markdown (Dart)\nDESCRIPTION: This code snippet shows how to customize the appearance and behavior of links in the `markdown_widget`. It uses `LinkConfig` to define a custom style (e.g., red color and underline) and an `onTap` event handler to handle link clicks. Requires the `markdown_widget` package.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/example/assets/demo_zh.md#_snippet_4\n\nLANGUAGE: Dart\nCODE:\n```\nWidget buildMarkdown() => MarkdownWidget(\n    data: data,\n    config: MarkdownConfig(configs: [\n      LinkConfig(\n        style: TextStyle(\n          color: Colors.red,\n          decoration: TextDecoration.underline,\n        ),\n        onTap: (url) {\n          ///TODO:on tap\n        },\n      )\n    ]));\n```\n\n----------------------------------------\n\nTITLE: Customizing Link Styles and Actions in Flutter Markdown\nDESCRIPTION: This snippet demonstrates how to customize the appearance and behavior of links within the MarkdownWidget. It allows specifying a custom TextStyle for links and defining an onTap handler for link clicks. It requires importing the markdown_widget package and configuring the LinkConfig.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/README_ZH.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nWidget buildMarkdown() => MarkdownWidget(\n      data: data,\n      config: MarkdownConfig(configs: [\n        LinkConfig(\n          style: TextStyle(\n            color: Colors.red,\n            decoration: TextDecoration.underline,\n          ),\n          onTap: (url) {\n            ///TODO:on tap\n          },\n        )\n      ]));\n      \n```\n\n----------------------------------------\n\nTITLE: Highlighting Code with Custom Themes\nDESCRIPTION: This snippet illustrates how to highlight code within the `MarkdownWidget` using custom themes from the `flutter_highlight` package. It shows how to apply a specific theme, such as `a11yLightTheme`, to code blocks in the markdown content.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/README.md#_snippet_6\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'package:flutter_highlight/themes/a11y-light.dart';\n\nWidget buildMarkdown() => MarkdownWidget(\n    data: data,\n    config: MarkdownConfig(configs: [\n      PreConfig(theme: a11yLightTheme),\n    ]));\n```\n\n----------------------------------------\n\nTITLE: Markdown Widget Usage with Custom Text Node in Dart\nDESCRIPTION: This code snippet demonstrates how to incorporate the custom `TextNode` into the `MarkdownWidget`. It shows how to specify a custom `textGenerator` within the `MarkdownGeneratorConfig` to use the `CustomTextNode` for processing text nodes, effectively enabling HTML rendering within the Markdown content.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/example/assets/html_description_en.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nWidget buildMarkdown() {  \n  ...\n  return MarkdownWidget(  \n    data: _text,  \n    markdownGeneratorConfig: MarkdownGeneratorConfig(  \n        generators: [videoGeneratorWithTag]), \n        textGenerator: (node, config, visitor) =>  \n\t\t    CustomTextNode(node.textContent, config, visitor) \n  );  \n}\n```\n\n----------------------------------------\n\nTITLE: Linking Dependencies and Setting Include Directories\nDESCRIPTION: This snippet links the necessary libraries (flutter, flutter_wrapper_app, dwmapi.lib) to the executable target and specifies the include directories. It makes available Flutter's core functionality, application wrapper and the dwmapi library (for desktop window management) to the application.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/example/windows/runner/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# Add dependency libraries and include directories. Add any application-specific\n# dependencies here.\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_link_libraries(${BINARY_NAME} PRIVATE \"dwmapi.lib\")\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Markdown Widget Usage - Dart\nDESCRIPTION: This code snippet shows how to incorporate the custom LaTeX tag and syntax into a `MarkdownWidget`. It creates a `MarkdownGeneratorConfig` with the custom generator and syntax, and passes it to the `MarkdownWidget`.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/example/assets/latex_description_en.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nWidget buildMarkdown() {\n  ...\n  return MarkdownWidget(\n    data: _text,\n    markdownGeneratorConfig: MarkdownGeneratorConfig(\n        generators: [latexGenerator], inlineSyntaxList: [LatexSyntax()]),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Latex Syntax - Dart\nDESCRIPTION: This code defines a custom syntax `LatexSyntax` that filters content wrapped by `$$` and `$` using regular expressions. It extracts the LaTeX content and determines if it's inline or block-level, then creates an Element with the custom tag and adds it to the parser.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/example/assets/latex_description_en.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass LatexSyntax extends m.InlineSyntax {\n  LatexSyntax() : super(r'(\\$\\$[\\s\\S]+\\$\\$)|(\\$.+\\$)');\n\n  @override\n  bool onMatch(m.InlineParser parser, Match match) {\n    final input = match.input;\n    final matchValue = input.substring(match.start, match.end);\n    String content = '';\n    bool isInline = true;\n    const blockSyntax = '\\$\\$';\n    const inlineSyntax = '\\$';\n    if (matchValue.startsWith(blockSyntax) &&\n        matchValue.endsWith(blockSyntax) &&\n        (matchValue != blockSyntax)) {\n      content = matchValue.substring(2, matchValue.length - 2);\n      isInline = false;\n    } else if (matchValue.startsWith(inlineSyntax) &&\n        matchValue.endsWith(inlineSyntax) &&\n        matchValue != inlineSyntax) {\n      content = matchValue.substring(1, matchValue.length - 1);\n    }\n    m.Element el = m.Element.text(_latexTag, matchValue);\n    el.attributes['content'] = content;\n    el.attributes['isInline'] = '$isInline';\n    parser.addNode(el);\n    return true;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Markdown Widget Implementation in Flutter\nDESCRIPTION: This snippet demonstrates the simplest way to integrate the MarkdownWidget into a Flutter application. It requires importing the markdown_widget package and passing the Markdown data as a string. The output is a rendered Markdown view within a Scaffold.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/README_ZH.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\nimport 'package:markdown_widget/markdown_widget.dart';\n\nclass MarkdownPage extends StatelessWidget {\n  final String data;\n\n  MarkdownPage(this.data);\n\n  @override\n  Widget build(BuildContext context) => Scaffold(body: buildMarkdown());\n\n  Widget buildMarkdown() => MarkdownWidget(data: data);\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Markdown Widget Usage in Flutter\nDESCRIPTION: This snippet demonstrates the most basic usage of the `markdown_widget` package to render Markdown data within a Flutter application. It shows how to import the package and create a simple `MarkdownPage` widget that displays the Markdown content. The `data` parameter holds the Markdown string to be rendered.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/README_JP.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'package:flutter/material.dart';\nimport 'package:markdown_widget/markdown_widget.dart';\n\nclass MarkdownPage extends StatelessWidget {\n  final String data;\n\n  MarkdownPage(this.data);\n\n  @override\n  Widget build(BuildContext context) => Scaffold(body: buildMarkdown());\n\n  Widget buildMarkdown() => MarkdownWidget(data: data);\n}\n```\n\n----------------------------------------\n\nTITLE: Using MarkdownBlock for SingleChildScrollView\nDESCRIPTION: This code illustrates how to use `MarkdownBlock` within a `SingleChildScrollView`. This approach is useful when rendering large markdown content that might exceed the screen's bounds and requires scrolling.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/README.md#_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\nWidget buildMarkdown() =>\n    SingleChildScrollView(child: MarkdownBlock(data: data));\n```\n\n----------------------------------------\n\nTITLE: Basic Markdown Widget Usage Dart\nDESCRIPTION: This snippet demonstrates the basic usage of the MarkdownWidget in a Flutter application. It imports the necessary packages, defines a StatelessWidget, and uses MarkdownWidget to render Markdown data.  The `data` parameter is expected to be a string containing the Markdown content to be displayed.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/example/assets/demo_en.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\nimport 'package:markdown_widget/markdown_widget.dart';\n\nclass MarkdownPage extends StatelessWidget {\n  final String data;\n\n  MarkdownPage(this.data);\n\n  @override\n  Widget build(BuildContext context) => Scaffold(body: buildMarkdown());\n\n  Widget buildMarkdown() => MarkdownWidget(data: data);\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Markdown Rendering in Flutter (Dart)\nDESCRIPTION: This code snippet demonstrates how to use the `markdown_widget` package to render Markdown data in a Flutter application. It imports the necessary package, defines a `MarkdownPage` widget that accepts Markdown data, and uses the `MarkdownWidget` to display the rendered Markdown. Requires the `markdown_widget` package to be added as a dependency.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/example/assets/demo_zh.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'package:flutter/material.dart';\nimport 'package:markdown_widget/markdown_widget.dart';\n\nclass MarkdownPage extends StatelessWidget {\n  final String data;\n\n  MarkdownPage(this.data);\n\n  @override\n  Widget build(BuildContext context) => Scaffold(body: buildMarkdown());\n\n  Widget buildMarkdown() => MarkdownWidget(data: data);\n}\n```\n\n----------------------------------------\n\nTITLE: Using MarkdownGenerator with Custom Column in Flutter\nDESCRIPTION: This snippet shows how to use MarkdownGenerator to build a list of widgets from Markdown data, allowing for custom layouts, such as using a Column widget. It requires the markdown_widget package.  The output is a Column containing the rendered Markdown elements.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/README_ZH.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nWidget buildMarkdown() =>\n      Column(children: MarkdownGenerator().buildWidgets(data));\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Variables\nDESCRIPTION: Sets several variables related to the Flutter library, including the path to the library file (`FLUTTER_LIBRARY`), the ICU data file (`FLUTTER_ICU_DATA_FILE`), the project build directory (`PROJECT_BUILD_DIR`), and the AOT library path (`AOT_LIBRARY`). These variables are then published to the parent scope for use in subsequent build steps.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/example/linux/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: MarkdownGenerator Usage with Column Widget\nDESCRIPTION: This snippet showcases how to use `MarkdownGenerator` to build a list of widgets from Markdown data and integrate them within a `Column` widget. This allows for more flexible control over the layout and integration of the rendered Markdown elements within a larger Flutter UI. No specific dependencies beyond the core markdown_widget package are needed.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/README_JP.md#_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\nWidget buildMarkdown() =>\n    Column(children: MarkdownGenerator().buildWidgets(data));\n```\n\n----------------------------------------\n\nTITLE: Custom Latex SpanNode - Dart\nDESCRIPTION: This code defines a custom SpanNode `LatexNode` that renders LaTeX expressions using the `flutter_math_fork` plugin.  It takes attributes, text content, and a MarkdownConfig as input and builds an InlineSpan to display the LaTeX.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/example/assets/latex_description_en.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass LatexNode extends SpanNode {\n  final Map<String, String> attributes;\n  final String textContent;\n  final MarkdownConfig config;\n\n  LatexNode(this.attributes, this.textContent, this.config);\n\n  @override\n  InlineSpan build() {\n    final content = attributes['content'] ?? '';\n    final isInline = attributes['isInline'] == 'true';\n    final style = parentStyle ?? config.p.textStyle;\n    if (content.isEmpty) return TextSpan(style: style, text: textContent);\n    final latex = Math.tex(\n      content,\n      mathStyle: MathStyle.text,\n      textStyle: style,\n      textScaleFactor: 1,\n      onErrorFallback: (error) {\n        return Text(\n          '$textContent',\n          style: style.copyWith(color: Colors.red),\n        );\n      },\n    );\n    return WidgetSpan(\n        child: !isInline\n            ? Container(\n                width: double.infinity,\n                child: Center(child: latex),\n                margin: EdgeInsets.symmetric(vertical: 16),\n              )\n            : latex);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Interface Library in CMake\nDESCRIPTION: Creates an interface library named `flutter`. This library represents the Flutter engine and its associated header files. It defines the include directories and link libraries that are required to use the Flutter engine in other parts of the build system. Links to the flutter_windows.dll.lib file.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/example/windows/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Custom Text Node Implementation in Dart\nDESCRIPTION: This code snippet defines a custom `SpanNode` called `CustomTextNode` that extends `ElementNode`. Its purpose is to convert the content of a `Text` node, handling HTML elements within the text. It uses `parseHtml` to parse the HTML and convert it into corresponding `Element` objects.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/example/assets/html_description_en.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass CustomTextNode extends ElementNode {  \n  final String text;  \n  final MarkdownConfig config;  \n  final WidgetVisitor visitor;  \n  \n  CustomTextNode(this.text, this.config, this.visitor);  \n  \n  @override  \n  void onAccepted(SpanNode parent) {  \n    final textStyle = config.p.textStyle.merge(parentStyle);  \n    children.clear();  \n    if (!text.contains(htmlRep)) {  \n      accept(TextNode(text: text, style: textStyle));  \n      return;  \n    }  \n    final spans = parseHtml(  \n      m.Text(text),  \n      visitor:  \n          WidgetVisitor(config: visitor.config, generators: visitor.generators),  \n      parentStyle: parentStyle,  \n    );  \n    spans.forEach((element) {  \n      accept(element);  \n    });  \n  }  \n}\n```\n\n----------------------------------------\n\nTITLE: Custom Text Node Implementation (Dart)\nDESCRIPTION: This code defines a CustomTextNode class that extends ElementNode. It overrides the onAccepted method to handle text content containing HTML. The code parses the HTML using the parseHtml function and adds the resulting spans to the children. It requires the 'markdown' package and a custom WidgetVisitor.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/example/assets/html_description_zh.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass CustomTextNode extends ElementNode {  \n  final String text;  \n  final MarkdownConfig config;  \n  final WidgetVisitor visitor;  \n  \n  CustomTextNode(this.text, this.config, this.visitor);  \n  \n  @override  \n  void onAccepted(SpanNode parent) {  \n    final textStyle = config.p.textStyle.merge(parentStyle);  \n    children.clear();  \n    if (!text.contains(htmlRep)) {  \n      accept(TextNode(text: text, style: textStyle));  \n      return;  \n    }  \n    final spans = parseHtml(  \n      m.Text(text),  \n      visitor:  \n          WidgetVisitor(config: visitor.config, generators: visitor.generators),  \n      parentStyle: parentStyle,  \n    );  \n    spans.forEach((element) {  \n      accept(element);  \n    });  \n  }  \n}\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Interface Library\nDESCRIPTION: Creates an interface library named `flutter` and sets the include directories and link libraries for it.  The interface library is used to provide the necessary headers and link dependencies to other parts of the project that depend on the Flutter library.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/example/linux/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing MarkdownBlock with SingleChildScrollView in Flutter\nDESCRIPTION: This example demonstrates the usage of MarkdownBlock within a SingleChildScrollView for handling large Markdown content that might overflow the screen. It requires the markdown_widget package. The output is a scrollable view containing the rendered Markdown content.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/README_ZH.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nWidget buildMarkdown() =>\n      SingleChildScrollView(child: MarkdownBlock(data: data));\n```\n\n----------------------------------------\n\nTITLE: MarkdownBlock Usage with SingleChildScrollView\nDESCRIPTION: This example demonstrates how to use `MarkdownBlock` to render Markdown data within a `SingleChildScrollView`. This is useful when the Markdown content is expected to be larger than the available screen space, allowing the user to scroll through the content. The code requires the `markdown_widget` package.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/README_JP.md#_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\nWidget buildMarkdown() =>\n    SingleChildScrollView(child: MarkdownBlock(data: data));\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Wrapper App Library in CMake\nDESCRIPTION: Creates a static library named `flutter_wrapper_app`. This library contains the C++ wrapper code that is used by the main application. It includes the core wrapper sources and the application-specific wrapper sources. It also applies standard settings, links to the flutter library, and defines include directories and dependencies.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/example/windows/flutter/CMakeLists.txt#_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\nLANGUAGE: CMake\nCODE:\n```\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Markdown Rendering with SingleChildScrollView (Dart)\nDESCRIPTION: This code snippet showcases how to embed a `MarkdownBlock` within a `SingleChildScrollView` in Flutter. This is useful when the Markdown content exceeds the available screen space, allowing users to scroll through the content. Requires the `markdown_widget` package.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/example/assets/demo_zh.md#_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\nWidget buildMarkdown() =>\n    SingleChildScrollView(child: MarkdownBlock(data: data));\n```\n\n----------------------------------------\n\nTITLE: Adding Dependency for Flutter Assembly\nDESCRIPTION: This snippet adds a dependency on the flutter_assemble target, ensuring that the Flutter tool is executed as part of the build process. This step is essential for building Flutter projects, and its presence is mandatory.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/example/windows/runner/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n# Run the Flutter tool portions of the build. This must not be removed.\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Using MarkdownBlock Dart\nDESCRIPTION: This snippet shows how to use `MarkdownBlock` within a `SingleChildScrollView` to display Markdown content. This is useful when the content might exceed the available screen space. It expects the `data` string containing the Markdown to render.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/example/assets/demo_en.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nWidget buildMarkdown() =>\n    SingleChildScrollView(child: MarkdownBlock(data: data));\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Latex Tag - Dart\nDESCRIPTION: This code defines a custom tag `_latexTag` used to identify LaTeX expressions within the Markdown content. It also associates the tag with a SpanNode generator.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/example/assets/latex_description_en.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nconst _latexTag = 'latex';\n```\n\nLANGUAGE: dart\nCODE:\n```\nSpanNodeGeneratorWithTag latexGenerator = SpanNodeGeneratorWithTag(\n    tag: _latexTag,\n    generator: (e, config, visitor) =>\n        LatexNode(e.attributes, e.textContent, config));\n```\n\n----------------------------------------\n\nTITLE: MarkdownHelper Class Definition in Dart\nDESCRIPTION: This Dart class, MarkdownHelper, is designed to process markdown nodes and return corresponding Flutter widgets. It relies on other classes (title, p, pre) to handle specific markdown elements like titles, paragraphs, and preformatted text. The class provides methods to retrieve widgets for these elements based on the input markdown node.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/example/assets/editor.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass MarkdownHelper {\n\n\n  Map<String, Widget> getTitleWidget(m.Node node) => title.getTitleWidget(node);\n\n  Widget getPWidget(m.Element node) => p.getPWidget(node);\n\n  Widget getPreWidget(m.Node node) => pre.getPreWidget(node);\n\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Widget Configuration (Dart)\nDESCRIPTION: This code snippet shows how to integrate the CustomTextNode into the MarkdownWidget. It configures the MarkdownGeneratorConfig to use a custom textGenerator that creates CustomTextNode instances. This allows the MarkdownWidget to handle HTML content in the markdown data. The 'videoGeneratorWithTag' variable is assumed to be defined elsewhere.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/example/assets/html_description_zh.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nWidget buildMarkdown() {  \n  ...\n  return MarkdownWidget(  \n    data: _text,  \n    markdownGeneratorConfig: MarkdownGeneratorConfig(  \n        generators: [videoGeneratorWithTag]), \n        textGenerator: (node, config, visitor) =>  \n\t\t    CustomTextNode(node.textContent, config, visitor) \n  );  \n}\n```\n\n----------------------------------------\n\nTITLE: Including Generated Plugins\nDESCRIPTION: This snippet includes the generated plugins CMake file, which manages building plugins and adding them to the application.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/example/windows/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Wrapper Plugin Library in CMake\nDESCRIPTION: Creates a static library named `flutter_wrapper_plugin`. This library contains the C++ wrapper code that is used by Flutter plugins. It includes the core wrapper sources and the plugin-specific wrapper sources.  It also applies standard settings, sets properties for position independent code and CXX visibility, links to the flutter library, and defines include directories and dependencies.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/example/windows/flutter/CMakeLists.txt#_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\n```\n\nLANGUAGE: CMake\nCODE:\n```\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Command for Flutter Assembly\nDESCRIPTION: Adds a custom command to assemble the Flutter engine using the Flutter tool backend. The command runs the `tool_backend.sh` script with the specified environment variables and arguments. The output of the command is the Flutter library and header files.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/example/linux/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Finding System Packages\nDESCRIPTION: Uses `pkg_check_modules` to find required system packages (GTK, GLIB, GIO) using PkgConfig. This ensures that the necessary libraries are available on the system before building the Flutter application.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/example/linux/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Variable in CMake\nDESCRIPTION: Defines the `FLUTTER_LIBRARY` variable, which specifies the path to the Flutter Windows dynamic link library (DLL). This DLL contains the Flutter engine code that is used to run the Flutter application on Windows. The PARENT_SCOPE option makes the variable available to parent scopes.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/example/windows/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n```\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Compilation Settings Function\nDESCRIPTION: This snippet defines a function `APPLY_STANDARD_SETTINGS` that applies standard compilation features and options to a given target.  It sets C++ standard to 17, enables warnings, and disables exceptions. It takes `TARGET` as input, the name of the target to apply these settings to.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/example/windows/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Appending Flutter Library Headers in CMake\nDESCRIPTION: Appends a list of Flutter library header files to the `FLUTTER_LIBRARY_HEADERS` list. These header files define the API for interacting with the Flutter engine. These headers are then prepended with the ephemeral directory, ensuring the correct paths are used.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/example/windows/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Build Settings\nDESCRIPTION: This snippet applies a set of standard build settings to the executable target, which likely includes configurations for optimization, debugging, and other common build options.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/example/windows/runner/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Apply the standard set of build settings. This can be removed for applications\n# that need different build settings.\napply_standard_settings(${BINARY_NAME})\n```\n\n----------------------------------------\n\nTITLE: Installing AOT Library\nDESCRIPTION: This snippet installs the AOT library into the data directory of the installation prefix for Profile and Release configurations.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/example/windows/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Appending C++ Wrapper Sources (Plugin) in CMake\nDESCRIPTION: Appends a list of plugin-related C++ wrapper source files to the `CPP_WRAPPER_SOURCES_PLUGIN` list. These source files handle plugin registration and management. These sources are then prepended with the wrapper root directory, ensuring the correct paths are used.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/example/windows/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Including Generated Plugins CMake\nDESCRIPTION: This snippet includes the generated plugins CMake file, which manages building the plugins and adding them to the application.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/example/linux/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Adding Dependency on Flutter Assembly\nDESCRIPTION: Adds a dependency on the `flutter_assemble` target to the `flutter` interface library. This ensures that the Flutter engine is assembled before any target that depends on the `flutter` library is built.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/example/linux/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: CMake Project Setup and Executable Definition\nDESCRIPTION: This snippet sets the minimum CMake version, defines the project name, and creates an executable target for the Flutter runner application. It includes the source files required for the application and specifies that it is a WIN32 application.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/example/windows/runner/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(runner LANGUAGES CXX)\n\n# Define the application target. To change its name, change BINARY_NAME in the\n# top-level CMakeLists.txt, not the value here, or `flutter run` will no longer\n# work.\n#\n# Any new source files that you add to the application should be added here.\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Command for Flutter Assembly\nDESCRIPTION: Creates a custom command that runs the Flutter tool backend to assemble the Flutter library and its dependencies. The command uses a phony output file to ensure that it runs every time, because the tool backend doesn't provide full input/output list. It executes a batch script with the FLUTTER_TOOL_ENVIRONMENT environment variables, config, and flutter root.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/example/windows/flutter/CMakeLists.txt#_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      windows-x64 $<CONFIG>\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Library\nDESCRIPTION: This snippet installs the Flutter library to the lib directory within the bundle.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/example/linux/CMakeLists.txt#_snippet_21\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting Build Bundle Directory\nDESCRIPTION: This snippet sets the build bundle directory to be next to the executable, and defaults the install step, required for running.  It checks and sets the CMAKE_INSTALL_PREFIX if it's initialized to the default value.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/example/windows/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\n# Make the \"install\" step default, as it's required to run.\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Runner Subdirectory\nDESCRIPTION: This snippet adds the \"runner\" subdirectory, which contains the application's build files. This is where the actual executable is built.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/example/windows/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(\"runner\")\n```\n\n----------------------------------------\n\nTITLE: Disabling Conflicting Windows Macros\nDESCRIPTION: This snippet disables the NOMINMAX macro to prevent conflicts between Windows API macros and C++ standard library functions, ensuring that the code compiles correctly by avoiding name collisions.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/example/windows/runner/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# Disable Windows macros that collide with C++ standard library functions.\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Target for Flutter Assembly\nDESCRIPTION: Adds a custom target named `flutter_assemble` that depends on the Flutter library and header files. This target is used to trigger the custom command that assembles the Flutter engine.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/example/linux/flutter/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Preprocessor Definitions for Build Version\nDESCRIPTION: This snippet adds preprocessor definitions to the target, which provide information about the Flutter version to the C++ code. This allows the application to access version numbers, major/minor versions, patch numbers, and build numbers at compile time.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/example/windows/runner/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# Add preprocessor definitions for the build version.\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION=\\\"${FLUTTER_VERSION}\\\"\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}\")\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Target for Flutter Assembly\nDESCRIPTION: Creates a custom target named `flutter_assemble`. This target depends on the Flutter library, its header files, and the C++ wrapper source files. The purpose of this target is to ensure that the Flutter library and its dependencies are assembled before any other targets that depend on them are built.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/example/windows/flutter/CMakeLists.txt#_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Assets\nDESCRIPTION: This snippet installs the Flutter assets directory into the bundle. It first removes any existing assets to ensure a clean copy.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/example/linux/CMakeLists.txt#_snippet_23\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\"\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Removing and Installing Assets Directory\nDESCRIPTION: This snippet removes and reinstalls the assets directory on each build to ensure no stale files remain from a previous install. The directory is located under flutter_assets.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/example/windows/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Installing Bundled Libraries\nDESCRIPTION: This snippet iterates through the list of bundled libraries and installs each one to the lib directory within the bundle.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/example/linux/CMakeLists.txt#_snippet_22\n\nLANGUAGE: cmake\nCODE:\n```\nforeach(bundled_library ${PLUGIN_BUNDLED_LIBRARIES})\n  install(FILES \"${bundled_library}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendforeach(bundled_library)\n```\n\n----------------------------------------\n\nTITLE: Removing Existing Bundle Directory\nDESCRIPTION: This snippet removes the existing build bundle directory before each installation, ensuring a clean build.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/example/linux/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\"\n  \" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Defining Build Configuration Options\nDESCRIPTION: This snippet defines build configuration options, distinguishing between multi-configuration generators (e.g., Visual Studio) and single-configuration generators. It sets the CMAKE_BUILD_TYPE based on the generator type.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/example/windows/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing AOT Library\nDESCRIPTION: This snippet installs the AOT (Ahead-Of-Time) compiled library on non-Debug builds only, placing it into the lib directory of the bundle.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/example/linux/CMakeLists.txt#_snippet_24\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Compilation Settings\nDESCRIPTION: This function applies a standard set of compilation settings to a given target. It sets the C++ standard to 14, enables warnings as errors, and applies optimization flags for non-Debug builds.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/example/linux/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Installing Bundled Plugin Libraries\nDESCRIPTION: This snippet installs bundled plugin libraries, if any, into the library directory of the installation prefix.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/example/windows/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Appending C++ Wrapper Sources (Core) in CMake\nDESCRIPTION: Appends a list of core C++ wrapper source files to the `CPP_WRAPPER_SOURCES_CORE` list. These source files provide the core implementation of the C++ wrapper, including codec implementations. These sources are then prepended with the wrapper root directory, ensuring the correct paths are used.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/example/windows/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Settings to Executable\nDESCRIPTION: This snippet applies the standard compilation settings to the executable target.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/example/linux/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\napply_standard_settings(${BINARY_NAME})\n```\n\n----------------------------------------\n\nTITLE: Installing ICU Data File\nDESCRIPTION: This snippet installs the Flutter ICU data file to the data directory within the bundle. This file contains locale data required by Flutter.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/example/linux/CMakeLists.txt#_snippet_20\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Appending C++ Wrapper Sources (App) in CMake\nDESCRIPTION: Appends a list of application-related C++ wrapper source files to the `CPP_WRAPPER_SOURCES_APP` list. These source files include flutter engine and view controller implementations. These sources are then prepended with the wrapper root directory, ensuring the correct paths are used.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/example/windows/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Adding Executable Target\nDESCRIPTION: This snippet adds the executable target for the application, specifying the source files to be compiled and linked into the executable. The executable's name is determined by the `BINARY_NAME` variable.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/example/linux/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter ICU Data File\nDESCRIPTION: This snippet installs the Flutter ICU data file into the data directory of the installation prefix.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/example/windows/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Linking Dependencies to Executable\nDESCRIPTION: This snippet links the necessary libraries (Flutter engine and GTK) to the executable target.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/example/linux/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\n```\n\n----------------------------------------\n\nTITLE: Installing Runtime Target\nDESCRIPTION: This snippet installs the runtime target (the main executable) into the installation prefix.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/example/windows/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Library\nDESCRIPTION: This snippet installs the Flutter library into the library directory of the installation prefix.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/example/windows/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Adding Application ID Definition\nDESCRIPTION: This snippet adds a compile-time definition for the application ID. It allows embedding the application identifier directly into the compiled code.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/example/linux/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n```\n\n----------------------------------------\n\nTITLE: Installing Executable\nDESCRIPTION: This snippet installs the executable to the specified destination directory within the bundle.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/example/linux/CMakeLists.txt#_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Adding Dependency on Flutter Assemble\nDESCRIPTION: This snippet adds a dependency on the 'flutter_assemble' target, ensuring that the Flutter assets are assembled before the executable is built.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/example/linux/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting Installation Directories\nDESCRIPTION: This snippet defines the installation directories for data and libraries within the bundle.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/example/linux/CMakeLists.txt#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n```\n\n----------------------------------------\n\nTITLE: Finding GTK Package\nDESCRIPTION: This snippet uses PkgConfig to find the GTK library and its dependencies. It requires GTK version 3.0 or higher.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/example/linux/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n```\n\n----------------------------------------\n\nTITLE: Defining Profile Build Mode Settings\nDESCRIPTION: This snippet defines settings for the Profile build mode, aligning them with the Release build mode in terms of linker and compiler flags.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/example/windows/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Managed Directory\nDESCRIPTION: This snippet adds the Flutter managed directory as a subdirectory to the build process. This incorporates Flutter's build rules and resources into the overall build.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/example/linux/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Defining Build Type\nDESCRIPTION: This snippet defines the build type (Debug, Profile, or Release) if not already set. This allows specifying the build mode for the application.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/example/linux/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: List Prepend Function\nDESCRIPTION: Defines a function `list_prepend` that prepends a given prefix to each element in a list. It takes the list name and prefix as arguments and modifies the list in the parent scope.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/example/linux/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Setting Sysroot for Cross-Building\nDESCRIPTION: This snippet configures the sysroot for cross-building. It sets the CMAKE_SYSROOT and related variables to use the provided Flutter target platform sysroot, which allows finding libraries and includes within that sysroot during the build process.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/example/linux/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(FLUTTER_TARGET_PLATFORM_SYSROOT)\n  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Flutter Library Headers\nDESCRIPTION: Defines a list of Flutter library header files and prepends the ephemeral directory path to each header using the custom `list_prepend` function. This ensures that the compiler can find the necessary header files during the build process.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/example/linux/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\n```\n\n----------------------------------------\n\nTITLE: Setting Runtime Path for Bundled Libraries\nDESCRIPTION: This snippet sets the runtime path for bundled libraries. This ensures that the application can find its bundled libraries in the 'lib' directory relative to the executable.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/example/linux/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Setting Wrapper Root Directory Variable in CMake\nDESCRIPTION: Sets the `WRAPPER_ROOT` variable, which specifies the path to the C++ client wrapper directory within the ephemeral directory. This directory contains the C++ wrapper code that provides an interface between the Flutter engine and the application code. This is used in subsequent file paths.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/example/windows/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n```\n\n----------------------------------------\n\nTITLE: Enabling Modern CMake Behaviors\nDESCRIPTION: This snippet explicitly opts in to modern CMake behaviors. This helps avoid warnings and ensures compatibility with recent CMake versions by setting the CMP0063 policy to NEW.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/example/linux/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_policy(SET CMP0063 NEW)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Configuration\nDESCRIPTION: Includes the generated configuration file from the ephemeral directory. This file likely contains platform-specific settings and dependencies required for the Flutter build.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/example/linux/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Defining Ephemeral Directory\nDESCRIPTION: Defines the `EPHEMERAL_DIR` variable, which points to the directory containing generated configuration files and other ephemeral build artifacts.  This path is used throughout the build process to locate necessary files.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/example/linux/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Setting Binary Name and Application ID\nDESCRIPTION: This snippet defines the binary name for the executable and the GTK application identifier. The binary name controls the name of the created application file, while the application ID is a unique identifier for the GTK application, following the reverse domain name convention.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/example/linux/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(BINARY_NAME \"example\")\nset(APPLICATION_ID \"com.example.example\")\n```\n\n----------------------------------------\n\nTITLE: Setting Build Bundle Directory\nDESCRIPTION: This snippet sets the build bundle directory, defining where the relocatable application bundle will be created.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/example/linux/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Install Directories\nDESCRIPTION: This snippet sets the installation directories for data and library files within the build bundle.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/example/windows/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Executable Output Directory\nDESCRIPTION: This snippet sets the output directory for the executable. It moves the executable to a subdirectory to prevent users from running the unbundled copy, as the resources must be in the correct relative locations.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/example/linux/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nset_target_properties(${BINARY_NAME}\n  PROPERTIES\n  RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/intermediates_do_not_run\"\n)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Configuration File in CMake\nDESCRIPTION: Includes the `generated_config.cmake` file, which is located in the ephemeral directory. This file contains configuration settings that are generated by the Flutter tool. Including this file ensures that the build process uses the correct configuration values provided by the Flutter toolchain.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/example/windows/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project\nDESCRIPTION: This snippet initializes the CMake project, sets the minimum required CMake version, and specifies the languages used (CXX). It also defines the binary name of the executable.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/example/windows/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(example LANGUAGES CXX)\n\n# The name of the executable created for the application. Change this to change\n# the on-disk name of your application.\nset(BINARY_NAME \"example\")\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version and Project Name\nDESCRIPTION: This snippet sets the minimum required CMake version and defines the project name with CXX language support.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/example/linux/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Setting Unicode Definitions\nDESCRIPTION: This snippet adds definitions to ensure Unicode support for all projects.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/example/windows/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DUNICODE -D_UNICODE)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version\nDESCRIPTION: Specifies the minimum required CMake version for the project. This ensures that the CMake version used to build the project is compatible with the CMakeLists.txt file.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/example/linux/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Subdirectory\nDESCRIPTION: This snippet adds the Flutter managed directory as a subdirectory to the project, integrating Flutter's build system.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/example/windows/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Policy\nDESCRIPTION: This snippet explicitly opts in to modern CMake behaviors to avoid warnings with recent CMake versions by setting a specific CMake policy.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/example/windows/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_policy(SET CMP0063 NEW)\n```\n\n----------------------------------------\n\nTITLE: Setting Ephemeral Directory Variable in CMake\nDESCRIPTION: Defines the `EPHEMERAL_DIR` variable, which specifies the path to the ephemeral directory within the source directory. This directory contains generated configuration files and other temporary build artifacts produced by the Flutter toolchain. This variable is heavily used by the rest of the CMake script.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/example/windows/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version\nDESCRIPTION: Specifies the minimum required version of CMake for the build system. This ensures that the CMake features used in the script are supported by the CMake version installed on the system. In this case, the minimum required version is 3.14.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/example/windows/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n```\n\n----------------------------------------\n\nTITLE: Using MarkdownGenerator Dart\nDESCRIPTION: This snippet demonstrates how to use `MarkdownGenerator` to build a list of widgets from Markdown data, which can then be used within a Column or other list widget.  It relies on the `data` string containing the Markdown content.\nSOURCE: https://github.com/asjqkkkk/markdown_widget/blob/master/example/assets/demo_en.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nWidget buildMarkdown() =>\n    Column(children: MarkdownGenerator().buildWidgets(data));\n```"
  }
]