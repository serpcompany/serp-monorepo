[
  {
    "owner": "containers",
    "repo": "skopeo",
    "content": "TITLE: Inspecting a Repository with Skopeo\nDESCRIPTION: This command uses `skopeo inspect` to display the properties of the `fedora:latest` image from the `registry.fedoraproject.org` Docker registry. The output is a JSON object containing metadata about the image, such as its digest, tags, creation date, labels, architecture, and layers. This allows users to gather information about an image before pulling it.\nSOURCE: https://github.com/containers/skopeo/blob/main/README.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ skopeo inspect docker://registry.fedoraproject.org/fedora:latest\n{\n    \"Name\": \"registry.fedoraproject.org/fedora\",\n    \"Digest\": \"sha256:0f65bee641e821f8118acafb44c2f8fe30c2fc6b9a2b3729c0660376391aa117\",\n    \"RepoTags\": [\n        \"34-aarch64\",\n        \"34\",\n        \"latest\",\n        ...\n    ],\n    \"Created\": \"2022-11-24T13:54:18Z\",\n    \"DockerVersion\": \"1.10.1\",\n    \"Labels\": {\n        \"license\": \"MIT\",\n        \"name\": \"fedora\",\n        \"vendor\": \"Fedora Project\",\n        \"version\": \"37\"\n    },\n    \"Architecture\": \"amd64\",\n    \"Os\": \"linux\",\n    \"Layers\": [\n        \"sha256:2a0fc6bf62e155737f0ace6142ee686f3c471c1aab4241dc3128904db46288f0\"\n    ],\n    \"LayersData\": [\n        {\n            \"MIMEType\": \"application/vnd.docker.image.rootfs.diff.tar.gzip\",\n            \"Digest\": \"sha256:2a0fc6bf62e155737f0ace6142ee686f3c471c1aab4241dc3128904db46288f0\",\n            \"Size\": 71355009,\n            \"Annotations\": null\n        }\n    ],\n    \"Env\": [\n        \"DISTTAG=f37container\",\n        \"FGC=f37\",\n        \"container=oci\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Default Fields with Logrus - Go\nDESCRIPTION: This snippet shows how to create a `logrus.Entry` with default fields that are automatically included in all subsequent log statements made through that entry. This approach simplifies logging common context like `request_id` and `user_ip` without repeating them in every log call.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/sirupsen/logrus/README.md#_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\nrequestLogger := log.WithFields(log.Fields{\"request_id\": request_id, \"user_ip\": user_ip})\nrequestLogger.Info(\"something happened on that request\") # will log request_id and user_ip\nrequestLogger.Warn(\"something not great happened\")\n```\n\n----------------------------------------\n\nTITLE: Displaying Image Digest with Skopeo\nDESCRIPTION: This command uses `skopeo inspect` to retrieve the digest of the `fedora:latest` image from the Docker registry and pipes it to `jq` to extract the `Digest` field. The output shows the unverified image's digest. This is used to uniquely identify a container image.\nSOURCE: https://github.com/containers/skopeo/blob/main/README.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ skopeo inspect docker://registry.fedoraproject.org/fedora:latest | jq '.Digest'\n\"sha256:655721ff613ee766a4126cb5e0d5ae81598e1b0c3bcf7017c36c4d72cb092fe9\"\n```\n\n----------------------------------------\n\nTITLE: Copying Images with Skopeo\nDESCRIPTION: These commands demonstrate how to copy container images between different storage mechanisms using `skopeo copy`. The first command copies an image from Quay.io to an internal Docker registry. The second copies an image from a local OCI-layout directory to a local directory.  This allows for flexible image transfers across different environments.\nSOURCE: https://github.com/containers/skopeo/blob/main/README.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ skopeo copy docker://quay.io/buildah/stable docker://registry.internal.company.com/buildah\n$ skopeo copy oci:busybox_ocilayout:latest dir:existingemptydirectory\n```\n\n----------------------------------------\n\nTITLE: Example of using pgzip for compression\nDESCRIPTION: This code demonstrates how to use the pgzip package for compression. It creates a new pgzip writer, sets the concurrency for parallel compression, writes data to the writer, and closes the writer.  The concurrency settings control the block size and the number of parallel blocks.  A block size of 100000 and 10 parallel blocks are configured here.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/klauspost/pgzip/README.md#_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nvar b bytes.Buffer\nw := gzip.NewWriter(&b)\nw.SetConcurrency(100000, 10)\nw.Write([]byte(\"hello, world\\n\"))\nw.Close()\n```\n\n----------------------------------------\n\nTITLE: Initializing Logrus with Hooks in Go\nDESCRIPTION: This snippet demonstrates how to initialize Logrus with custom hooks, including Airbrake and Syslog. It shows how to add these hooks to the logger instance and handle potential errors during Syslog hook creation. The Airbrake hook reports errors to an exception tracker, while the Syslog hook sends logs to a local syslog daemon.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/sirupsen/logrus/README.md#_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nimport (\n  log \"github.com/sirupsen/logrus\"\n  \"gopkg.in/gemnasium/logrus-airbrake-hook.v2\" // the package is named \"airbrake\"\n  logrus_syslog \"github.com/sirupsen/logrus/hooks/syslog\"\n  \"log/syslog\"\n)\n\nfunc init() {\n\n  // Use the Airbrake hook to report errors that have Error severity or above to\n  // an exception tracker. You can create custom hooks, see the Hooks section.\n  log.AddHook(airbrake.NewHook(123, \"xyz\", \"production\"))\n\n  hook, err := logrus_syslog.NewSyslogHook(\"udp\", \"localhost:514\", syslog.LOG_INFO, \"\")\n  if err != nil {\n    log.Error(\"Unable to connect to local syslog daemon\")\n  } else {\n    log.AddHook(hook)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Create Docker Archive\nDESCRIPTION: Creates a Docker archive from a container image using the `docker-archive:` transport. This archive can be used with `docker load`. The format is `docker-archive:archive-file.tar:image_name:tag`.\nSOURCE: https://github.com/containers/skopeo/blob/main/docs/skopeo-copy.1.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nskopeo copy docker://busybox:latest docker-archive:archive-file.tar:busybox:latest\n```\n\n----------------------------------------\n\nTITLE: Copy and Sign Image\nDESCRIPTION: Copies a container image and signs it using the `--sign-by` option. It requires `containers-storage:` transport for the source and `docker://` transport for the destination, along with a signing key identified by its email address.\nSOURCE: https://github.com/containers/skopeo/blob/main/docs/skopeo-copy.1.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nskopeo copy --sign-by dev@example.com containers-storage:example/busybox:streaming docker://example/busybox:gold\n```\n\n----------------------------------------\n\nTITLE: Extracting Route Variables using mux.Vars in Go\nDESCRIPTION: This code snippet demonstrates how to extract route variables using the `mux.Vars()` function in Go. It retrieves the 'category' variable from the request and writes it to the response. The function handles an HTTP request, extracts the route variables, and writes the category to the response body.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/gorilla/mux/README.md#_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nfunc ArticlesCategoryHandler(w http.ResponseWriter, r *http.Request) {\n    vars := mux.Vars(r)\n    w.WriteHeader(http.StatusOK)\n    fmt.Fprintf(w, \"Category: %v\\n\", vars[\"category\"])\n}\n```\n\n----------------------------------------\n\nTITLE: Inspecting Container Configuration with Skopeo\nDESCRIPTION: This command uses `skopeo inspect --config` to retrieve the configuration of the `fedora:latest` image from the `registry.fedoraproject.org` Docker registry. The output is piped to `jq` for pretty-printing the JSON. This command is useful to understand the settings and environment variables the container image has.\nSOURCE: https://github.com/containers/skopeo/blob/main/README.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ skopeo inspect --config docker://registry.fedoraproject.org/fedora:latest  | jq\n{\n  \"created\": \"2020-04-29T06:48:16Z\",\n  \"architecture\": \"amd64\",\n  \"os\": \"linux\",\n  \"config\": {\n    \"Env\": [\n      \"DISTTAG=f32container\",\n      \"FGC=f32\",\n      \"container=oci\"\n    ],\n    \"Cmd\": [\n      \"/bin/bash\"\n    ],\n    \"Labels\": {\n      \"license\": \"MIT\",\n      \"name\": \"fedora\",\n      \"vendor\": \"Fedora Project\",\n      \"version\": \"32\"\n    }\n  },\n  \"rootfs\": {\n    \"type\": \"layers\",\n    \"diff_ids\": [\n      \"sha256:a4c0fa2b217d3fd63d51e55a6fd59432e543d499c0df2b1acd48fbe424f2ddd1\"\n    ]\n  },\n  \"history\": [\n    {\n      \"created\": \"2020-04-29T06:48:16Z\",\n      \"comment\": \"Created by Image Factory\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Skopeo Sync: Synchronizing to a Container Registry Keeping the Repository\nDESCRIPTION: This example shows how to synchronize images from one container registry to another while preserving the repository structure. The command copies all tags from the `registry.example.com/repo/busybox` repository to the `my-registry.local.lan/repo` registry. After execution, the images will be available in the destination registry with the original repository path.\nSOURCE: https://github.com/containers/skopeo/blob/main/docs/skopeo-sync.1.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ skopeo sync --src docker --dest docker registry.example.com/repo/busybox my-registry.local.lan/repo\n```\n\n----------------------------------------\n\nTITLE: Setting Log Level in Go with Logrus\nDESCRIPTION: This snippet demonstrates how to set the logging level for Logrus, which determines the minimum severity of log entries that will be output. Setting the level to InfoLevel will log anything that is Info or above (warn, error, fatal, panic). This is the default level.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/sirupsen/logrus/README.md#_snippet_9\n\nLANGUAGE: go\nCODE:\n```\n// Will log anything that is info or above (warn, error, fatal, panic). Default.\nlog.SetLevel(log.InfoLevel)\n```\n\n----------------------------------------\n\nTITLE: Logrus as io.Writer in Go\nDESCRIPTION: This example demonstrates how to transform Logrus into an io.Writer, allowing it to be used with standard library components like http.Server. It creates a stdlib log.Logger that writes to Logrus.  Each line written to the writer will be logged using Logrus' formatters and hooks at the Info level.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/sirupsen/logrus/README.md#_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nw := logger.Writer()\ndefer w.Close()\n\nsrv := http.Server{\n    // create a stdlib log.Logger that writes to\n    // logrus.Logger.\n    ErrorLog: log.New(w, \"\", 0),\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Error Cause in Go\nDESCRIPTION: Illustrates how to use `errors.Cause` to retrieve the original error from a wrapped error.  The example shows how to use a type switch to handle different error types after unwrapping.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/pkg/errors/README.md#_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nswitch err := errors.Cause(err).(type) {\ncase *MyError:\n        // handle specifically\ndefault:\n        // unknown error\n}\n```\n\n----------------------------------------\n\nTITLE: Skopeo Login with Disabled TLS Verification\nDESCRIPTION: This snippet shows how to use the `--tls-verify=false` flag to disable TLS verification when connecting to the registry.\nSOURCE: https://github.com/containers/skopeo/blob/main/docs/skopeo-login.1.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ skopeo login --tls-verify=false -u test -p test localhost:5000\nLogin Succeeded!\n```\n\n----------------------------------------\n\nTITLE: Decrypt Image\nDESCRIPTION: Decrypts a container image using a private key. The `--decryption-key` option is used to specify the private key file path. It copies an encrypted image from one OCI store to another, decrypting it in the process.\nSOURCE: https://github.com/containers/skopeo/blob/main/docs/skopeo-copy.1.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nskopeo copy --decryption-key ./private.key oci:try-encrypt:encrypted oci:try-decrypt:decrypted\n```\n\n----------------------------------------\n\nTITLE: Skopeo Sync YAML Configuration Example\nDESCRIPTION: This YAML file demonstrates various options for configuring image synchronization using skopeo. It includes configurations for specifying images by name, tag, digest, regular expression, and semantic version. It also demonstrates credential and TLS verification settings for different registries.\nSOURCE: https://github.com/containers/skopeo/blob/main/docs/skopeo-sync.1.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nregistry.example.com:\n    images:\n        busybox: []\n        redis:\n            - \"1.0\"\n            - \"2.0\"\n            - \"sha256:0000000000000000000000000000000011111111111111111111111111111111\"\n    images-by-tag-regex:\n        nginx: ^1\\.13\\.[12]-alpine-perl$\n    images-by-semver:\n        alpine: \">= 3.12.0\"\n    credentials:\n        username: john\n        password: this is a secret\n    tls-verify: true\n    cert-dir: /home/john/certs\nquay.io:\n    tls-verify: false\n    images:\n        coreos/etcd:\n            - latest\n```\n\n----------------------------------------\n\nTITLE: Deleting Images with Skopeo\nDESCRIPTION: This command demonstrates how to delete a container image from a Docker registry using `skopeo delete`. It targets the `imagename:latest` image on `localhost:5000`. This allows for removal of unused or outdated images.\nSOURCE: https://github.com/containers/skopeo/blob/main/README.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ skopeo delete docker://localhost:5000/imagename:latest\n```\n\n----------------------------------------\n\nTITLE: Basic Route Registration with gorilla/mux in Go\nDESCRIPTION: This code snippet demonstrates basic route registration using the gorilla/mux package in Go. It creates a new router, registers handlers for the root path, /products, and /articles. It then registers the router with the default HTTP handler.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/gorilla/mux/README.md#_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nfunc main() {\n    r := mux.NewRouter()\n    r.HandleFunc(\"/\", HomeHandler)\n    r.HandleFunc(\"/products\", ProductsHandler)\n    r.HandleFunc(\"/articles\", ArticlesHandler)\n    http.Handle(\"/\", r)\n}\n```\n\n----------------------------------------\n\nTITLE: Importing go-jose v4 in Go\nDESCRIPTION: Shows how to import the current stable version (v4) of the go-jose library in a Go program. This import statement allows you to utilize the library's functionalities for JSON Object Signing and Encryption.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/go-jose/go-jose/v4/README.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nimport \"github.com/go-jose/go-jose/v4\"\n```\n\n----------------------------------------\n\nTITLE: Compress data using io.Reader and io.Writer in Go\nDESCRIPTION: This code snippet demonstrates how to compress data from an io.Reader to an io.Writer using the zstd library. It creates a new zstd writer, copies data from the input reader to the writer, and closes the writer to finalize the compression. It returns an error if any step fails.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/klauspost/compress/zstd/README.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n// Compress input to output.\nfunc Compress(in io.Reader, out io.Writer) error {\n    enc, err := zstd.NewWriter(out)\n    if err != nil {\n        return err\n    }\n    _, err = io.Copy(enc, in)\n    if err != nil {\n        enc.Close()\n        return err\n    }\n    return enc.Close()\n}\n```\n\n----------------------------------------\n\nTITLE: Copy Image Between Registries\nDESCRIPTION: Copies a container image from one registry to another using the `skopeo copy` command. It specifies the source and destination image locations using the `docker://` transport.\nSOURCE: https://github.com/containers/skopeo/blob/main/docs/skopeo-copy.1.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nskopeo copy docker://quay.io/skopeo/stable:latest docker://registry.example.com/skopeo:latest\n```\n\n----------------------------------------\n\nTITLE: Encrypt Image\nDESCRIPTION: Encrypts a container image using JWE (JSON Web Encryption). It involves generating RSA keys, and using the public key to encrypt the image during the copy operation.  The `--encryption-key` option is used to specify the public key file path.\nSOURCE: https://github.com/containers/skopeo/blob/main/docs/skopeo-copy.1.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nskopeo copy --encryption-key jwe:./public.key oci:local_nginx:1.17.8 oci:try-encrypt:encrypted\n```\n\nLANGUAGE: bash\nCODE:\n```\nopenssl genrsa -out private.key 1024\nopenssl rsa -in private.key -pubout > public.key\n```\n\n----------------------------------------\n\nTITLE: Importing pflag as a drop-in replacement for Go's flag package\nDESCRIPTION: This snippet demonstrates how to import the pflag package under the name \"flag\" to make it a drop-in replacement for Go's native flag package. This allows existing code that uses the standard flag package to function without modifications.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/spf13/pflag/README.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nimport flag \"github.com/spf13/pflag\"\n```\n\n----------------------------------------\n\nTITLE: Skopeo Logout Example\nDESCRIPTION: This example demonstrates how to remove login credentials for a specific registry (docker.io) using the `skopeo logout` command. It removes the cached credentials stored in the default authentication file.\nSOURCE: https://github.com/containers/skopeo/blob/main/docs/skopeo-logout.1.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ skopeo logout docker.io\nRemove login credentials for docker.io\n```\n\n----------------------------------------\n\nTITLE: Skopeo Inspect Image without Tags\nDESCRIPTION: This example demonstrates how to use the `--no-tags` option with the `skopeo inspect` command to exclude repository tags from the output when inspecting the `python` image from the `docker.io` registry. This can be useful for simplifying the output when tags are not needed.\nSOURCE: https://github.com/containers/skopeo/blob/main/docs/skopeo-inspect.1.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ skopeo inspect --no-tags docker://docker.io/library/python\n{\n    \"Name\": \"docker.io/library/python\",\n    \"Digest\": \"sha256:10fc14aa6ae69f69e4c953cffd9b0964843d8c163950491d2138af891377bc1d\",\n    \"RepoTags\": [],\n    \"Created\": \"2022-11-16T06:55:28.566254104Z\",\n    \"DockerVersion\": \"20.10.12\",\n    \"Labels\": null,\n    \"Architecture\": \"amd64\",\n    \"Os\": \"linux\",\n    \"Layers\": [\n        \"sha256:a8ca11554fce00d9177da2d76307bdc06df7faeb84529755c648ac4886192ed1\",\n        \"sha256:e4e46864aba2e62ba7c75965e4aa33ec856ee1b1074dda6b478101c577b63abd\",\n        \"...\"\n    ],\n    \"LayersData\": [\n        {\n            \"MIMEType\": \"application/vnd.docker.image.rootfs.diff.tar.gzip\",\n            \"Digest\": \"sha256:a8ca11554fce00d9177da2d76307bdc06df7faeb84529755c648ac4886192ed1\",\n            \"Size\": 55038615,\n            \"Annotations\": null\n        },\n        {\n            \"MIMEType\": \"application/vnd.docker.image.rootfs.diff.tar.gzip\",\n            \"Digest\": \"sha256:e4e46864aba2e62ba7c75965e4aa33ec856ee1b1074dda6b478101c577b63abd\",\n            \"Size\": 5164893,\n            \"Annotations\": null\n        },\n        \"...\"\n    ],\n    \"Env\": [\n        \"PATH=/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\",\n        \"LANG=C.UTF-8\",\n        \"...\",\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Skopeo Delete Example\nDESCRIPTION: This example demonstrates how to use the `skopeo delete` command to mark an image for deletion from a specified registry. The command requires the image name with its tag.\nSOURCE: https://github.com/containers/skopeo/blob/main/docs/skopeo-delete.1.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ skopeo delete docker://registry.example.com/example/pause:latest\n```\n\n----------------------------------------\n\nTITLE: Opening SQLite Database with Shared Cache\nDESCRIPTION: This Go code snippet demonstrates how to open a SQLite database with the `cache=shared` option in the connection string. This allows multiple connections to share the same database cache, preventing 'database is locked' errors when accessing the database concurrently.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/mattn/go-sqlite3/README.md#_snippet_23\n\nLANGUAGE: go\nCODE:\n```\ndb, err := sql.Open(\"sqlite3\", \"file:locked.sqlite?cache=shared\")\n```\n\n----------------------------------------\n\nTITLE: Listing tags in a Docker repository using skopeo\nDESCRIPTION: This example demonstrates how to list the tags in the \"fedora\" repository from the docker.io registry using the `skopeo list-tags` command with the `docker://` transport.  The output is a JSON object containing the repository name and an array of tags.\nSOURCE: https://github.com/containers/skopeo/blob/main/docs/skopeo-list-tags.1.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ skopeo list-tags docker://docker.io/fedora\n{\n    \"Repository\": \"docker.io/library/fedora\",\n    \"Tags\": [\n        \"20\",\n        \"21\",\n        \"22\",\n        \"23\",\n        \"24\",\n        \"25\",\n        \"26-modular\",\n        \"26\",\n        \"27\",\n        \"28\",\n        \"29\",\n        \"30\",\n        \"31\",\n        \"32\",\n        \"branched\",\n        \"heisenbug\",\n        \"latest\",\n        \"modular\",\n        \"rawhide\"\n    ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Skopeo Sync: Synchronizing to a Container Registry\nDESCRIPTION: This example shows how to synchronize images from one container registry to another. The command copies all tags from the `registry.example.com/busybox` repository to the `my-registry.local.lan` registry. After execution, the images will be available under the new registry.\nSOURCE: https://github.com/containers/skopeo/blob/main/docs/skopeo-sync.1.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ skopeo sync --src docker --dest docker registry.example.com/busybox my-registry.local.lan\n```\n\n----------------------------------------\n\nTITLE: Logging into a Private Registry with Skopeo\nDESCRIPTION: These commands demonstrate how to authenticate with a private registry using `skopeo login` and `skopeo logout`. First, the user logs in using their username. Then, they inspect an image on the private registry, followed by logging out. This allows access to private images requiring authentication.\nSOURCE: https://github.com/containers/skopeo/blob/main/README.md#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ skopeo login --username USER myregistrydomain.com:5000\nPassword:\n$ skopeo inspect docker://myregistrydomain.com:5000/busybox\n{\"Tag\":\"latest\",\"Digest\":\"sha256:473bb2189d7b913ed7187a33d11e743fdc2f88931122a44d91a301b64419f092\",\"RepoTags\":[\"latest\"],\"Comment\":\"\",\"Created\":\"2016-01-15T18:06:41.282540103Z\",\"ContainerConfig\":{\"Hostname\":\"aded96b43f48\",\"Domainname\":\"\",\"User\":\"\",\"AttachStdin\":false,\"AttachStdout\":false,\"AttachStderr\":false,\"Tty\":false,\"OpenStdin\":false,\"StdinOnce\":false,\"Env\":null,\"Cmd\":[\"/bin/sh\",\"-c\",\"#(nop) CMD [\\\"sh\\\"]\"],\"Image\":\"9e77fef7a1c9f989988c06620dabc4020c607885b959a2cbd7c2283c91da3e33\",\"Volumes\":null,\"WorkingDir\":\"\",\"Entrypoint\":null,\"OnBuild\":null,\"Labels\":null},\"DockerVersion\":\"1.8.3\",\"Author\":\"\",\"Config\":{\"Hostname\":\"aded96b43f48\",\"Domainname\":\"\",\"User\":\"\",\"AttachStdin\":false,\"AttachStdout\":false,\"AttachStderr\":false,\"Tty\":false,\"OpenStdin\":false,\"StdinOnce\":false,\"Env\":null,\"Cmd\":[\"sh\"],\"Image\":\"9e77fef7a1c9f989988c06620dabc4020c607885b959a2cbd7c2283c91da3e33\",\"Volumes\":null,\"WorkingDir\":\"\",\"Entrypoint\":null,\"OnBuild\":null,\"Labels\":null},\"Architecture\":\"amd64\",\"Os\":\"linux\"}\n$ skopeo logout myregistrydomain.com:5000\n```\n\n----------------------------------------\n\nTITLE: Logging with Fields - Go\nDESCRIPTION: This snippet demonstrates how to use Logrus to log structured data with fields instead of using `printf`-style formatting. It illustrates the recommended approach for creating more discoverable and useful log messages by associating key-value pairs with each log entry.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/sirupsen/logrus/README.md#_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\nlog.WithFields(log.Fields{\n  \"event\": event,\n  \"topic\": topic,\n  \"key\": key,\n}).Fatal(\"Failed to send event\")\n```\n\n----------------------------------------\n\nTITLE: Docker Exec Garbage Collection Command\nDESCRIPTION: This command triggers the garbage collector for a github.com/distribution/distribution registry server running inside a Docker container. It uses `docker exec` to execute the `registry garbage-collect` command within the container.\nSOURCE: https://github.com/containers/skopeo/blob/main/docs/skopeo-delete.1.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ docker exec -it registry /usr/bin/registry garbage-collect /etc/docker-distribution/registry/config.yml\n```\n\n----------------------------------------\n\nTITLE: Skopeo Login with Username/Password Input\nDESCRIPTION: This snippet demonstrates the basic usage of `skopeo login` command, prompting the user for a username and password via standard input.\nSOURCE: https://github.com/containers/skopeo/blob/main/docs/skopeo-login.1.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ skopeo login docker.io\nUsername: testuser\nPassword:\nLogin Succeeded!\n```\n\n----------------------------------------\n\nTITLE: Matching Routes based on Host using gorilla/mux in Go\nDESCRIPTION: This code snippet shows how to match routes based on the host domain or subdomain using the gorilla/mux package in Go. It registers routes that only match specific hostnames, including dynamic subdomains. This allows routing requests to different handlers based on the host.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/gorilla/mux/README.md#_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\nr := mux.NewRouter()\n// Only matches if domain is \"www.example.com\".\nr.Host(\"www.example.com\")\n// Matches a dynamic subdomain.\nr.Host(\"{subdomain:[a-z]+}.example.com\")\n```\n\n----------------------------------------\n\nTITLE: Encrypting/Decrypting Layers with Ocicrypt in Go\nDESCRIPTION: This code snippet demonstrates how to use the `EncryptLayer` and `DecryptLayer` functions from the `github.com/containers/ocicrypt` package to encrypt and decrypt container image layers. It highlights the need to configure encryption settings using the `github.com/containers/ocicrypt/config` package and the caller's responsibility to ensure the layer descriptor adheres to the OCI specification.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/containers/ocicrypt/README.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage \"github.com/containers/ocicrypt\"\nfunc EncryptLayer(ec *config.EncryptConfig, encOrPlainLayerReader io.Reader, desc ocispec.Descriptor) (io.Reader, EncryptLayerFinalizer, error)\nfunc DecryptLayer(dc *config.DecryptConfig, encLayerReader io.Reader, desc ocispec.Descriptor, unwrapOnly bool) (io.Reader, digest.Digest, error)\n```\n\n----------------------------------------\n\nTITLE: Custom Validator Definition in Go\nDESCRIPTION: This snippet demonstrates how to define a custom validator function and register it with govalidator for use in struct validation. It defines a simple validator that checks if a string is equal to \"duck\".\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/asaskevich/govalidator/README.md#_snippet_13\n\nLANGUAGE: go\nCODE:\n```\ngovalidator.TagMap[\"duck\"] = govalidator.Validator(func(str string) bool {\n\treturn str == \"duck\"\n})\n```\n\n----------------------------------------\n\nTITLE: Skopeo Inspect with Go Template - Architecture\nDESCRIPTION: This example demonstrates how to use the `--format` option with a Go template to extract and display only the architecture of the `fedora` image from `registry.fedoraproject.org`. The Go template `{{ .Architecture }}` accesses the `Architecture` field in the JSON output.\nSOURCE: https://github.com/containers/skopeo/blob/main/docs/skopeo-inspect.1.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n$ /bin/skopeo inspect --config docker://registry.fedoraproject.org/fedora --format \"{{ .Architecture }}\"\namd64\n```\n\n----------------------------------------\n\nTITLE: Compress a byte buffer using zstd in Go\nDESCRIPTION: This code snippet demonstrates how to compress a byte buffer using the zstd library. It creates a global zstd encoder for reuse and defines a Compress function that takes a source byte slice as input and returns the compressed byte slice. It uses the EncodeAll method of the encoder to compress the input and appends the result to a new byte slice.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/klauspost/compress/zstd/README.md#_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nimport \"github.com/klauspost/compress/zstd\"\n\n// Create a writer that caches compressors.\n// For this operation type we supply a nil Reader.\nvar encoder, _ = zstd.NewWriter(nil)\n\n// Compress a buffer. \n// If you have a destination buffer, the allocation in the call can also be eliminated.\nfunc Compress(src []byte) []byte {\n    return encoder.EncodeAll(src, make([]byte, 0, len(src)))\n} \n```\n\n----------------------------------------\n\nTITLE: Listing tags in a local Docker registry using skopeo\nDESCRIPTION: This example showcases how to list the tags in the \"fedora\" repository in a local Docker registry running on port 5000 using `skopeo list-tags` with the `docker://` transport. The output is a JSON object containing the repository name and its associated tags.\nSOURCE: https://github.com/containers/skopeo/blob/main/docs/skopeo-list-tags.1.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ skopeo list-tags docker://localhost:5000/fedora\n{\n    \"Repository\": \"localhost:5000/fedora\",\n    \"Tags\": [\n        \"latest\",\n        \"30\",\n        \"31\"\n    ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Decrypt Image with Multiple Keys\nDESCRIPTION: Decrypts an encrypted container image that requires multiple decryption keys. The `--decryption-key` option is used multiple times to specify each key file path.  This is necessary if the image was encrypted using multiple recipients.\nSOURCE: https://github.com/containers/skopeo/blob/main/docs/skopeo-copy.1.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nskopeo copy --decryption-key ./private1.key --decryption-key ./private2.key --decryption-key ./private3.key oci:try-encrypt:encrypted oci:try-decrypt:decrypted\n```\n\n----------------------------------------\n\nTITLE: Skopeo Sync: Synchronizing to a Container Registry from Local\nDESCRIPTION: This example demonstrates synchronizing an image from a local directory to a container registry. The command copies the image tagged `busybox:1-glibc` from the `/media/usb` directory to the `my-registry.local.lan/test/` repository. After execution, the specified image is available in the destination registry.\nSOURCE: https://github.com/containers/skopeo/blob/main/docs/skopeo-sync.1.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ skopeo sync --src dir --dest docker /media/usb/busybox:1-glibc my-registry.local.lan/test/\n```\n\n----------------------------------------\n\nTITLE: Testing Route Variables in Go\nDESCRIPTION: This Go code demonstrates how to test handlers that use route variables in Gorilla Mux. It creates a table-driven test to check different route variables. A new router is created to add the variables to the context before serving the HTTP request. The test verifies that the handler returns the correct status code for valid and invalid route variables. Dependencies include `net/http`, `net/http/httptest`, `testing`, and `fmt` packages, along with `github.com/gorilla/mux`.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/gorilla/mux/README.md#_snippet_35\n\nLANGUAGE: go\nCODE:\n```\n// endpoints_test.go\nimport \"fmt\"\n\nfunc TestMetricsHandler(t *testing.T) {\n    tt := []struct{\n        routeVariable string\n        shouldPass bool\n    }{\n        {\"goroutines\", true},\n        {\"heap\", true},\n        {\"counters\", true},\n        {\"queries\", true},\n        {\"adhadaeqm3k\", false},\n    }\n\n    for _, tc := range tt {\n        path := fmt.Sprintf(\"/metrics/%s\", tc.routeVariable)\n        req, err := http.NewRequest(\"GET\", path, nil)\n        if err != nil {\n            t.Fatal(err)\n        }\n\n        rr := httptest.NewRecorder()\n\t\n\t\t// To add the vars to the context, \n\t\t// we need to create a router through which we can pass the request.\n\t\trouter := mux.NewRouter()\n        router.HandleFunc(\"/metrics/{type}\", MetricsHandler)\n        router.ServeHTTP(rr, req)\n\n        // In this case, our MetricsHandler returns a non-200 response\n        // for a route variable it doesn't know about.\n        if rr.Code == http.StatusOK && !tc.shouldPass {\n            t.Errorf(\"handler should have failed on routeVariable %s: got %v want %v\",\n                tc.routeVariable, rr.Code, http.StatusOK)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Logrus Usage - Go\nDESCRIPTION: This simple example demonstrates the most basic way to use Logrus: importing the package and logging an informational message with a field.  It shows how to add structured data to logs for easier parsing and analysis.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/sirupsen/logrus/README.md#_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n  log \"github.com/sirupsen/logrus\"\n)\n\nfunc main() {\n  log.WithFields(log.Fields{\n    \"animal\": \"walrus\",\n  }).Info(\"A walrus appears\")\n}\n```\n\n----------------------------------------\n\nTITLE: Buffer Decompression with zstd in Go\nDESCRIPTION: This code snippet demonstrates how to decompress a buffer using the zstd library in Go. It creates a reusable zstd Reader with a disabled concurrency to improve memory management and uses it to decompress a byte slice, allocating a new buffer for the decompressed output.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/klauspost/compress/zstd/README.md#_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nimport \"github.com/klauspost/compress/zstd\"\n\n// Create a reader that caches decompressors.\n// For this operation type we supply a nil Reader.\nvar decoder, _ = zstd.NewReader(nil, zstd.WithDecoderConcurrency(0))\n\n// Decompress a buffer. We don't supply a destination buffer,\n// so it will be allocated by the decoder.\nfunc Decompress(src []byte) ([]byte, error) {\n    return decoder.DecodeAll(src, nil)\n} \n```\n\n----------------------------------------\n\nTITLE: Skopeo Inspect with Go Template - Environment\nDESCRIPTION: This example demonstrates how to use the `--format` option with a Go template to extract and display the environment variables of the `ubi8` image from `registry.access.redhat.com`.  The Go template `{{ .Env }}` accesses the `Env` field in the JSON output, which contains an array of environment variables.\nSOURCE: https://github.com/containers/skopeo/blob/main/docs/skopeo-inspect.1.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n$ /bin/skopeo inspect --format '{{ .Env }}' docker://registry.access.redhat.com/ubi8\n[PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin container=oci]\n```\n\n----------------------------------------\n\nTITLE: Applying Authentication Middleware in Go\nDESCRIPTION: This snippet demonstrates how to instantiate and apply the authentication middleware to a Gorilla Mux router.  The middleware is initialized with user tokens and then added to the router's middleware stack.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/gorilla/mux/README.md#_snippet_29\n\nLANGUAGE: go\nCODE:\n```\nr := mux.NewRouter()\nr.HandleFunc(\"/\", handler)\n\namw := authenticationMiddleware{tokenUsers: make(map[string]string)}\namw.Populate()\n\nr.Use(amw.Middleware)\n```\n\n----------------------------------------\n\nTITLE: Serializing Span Context to Wire in Go\nDESCRIPTION: This snippet shows how to inject the span context into HTTP headers for propagation to downstream services. It retrieves the active span from the context using `opentracing.SpanFromContext`, and then uses `opentracing.GlobalTracer().Inject` to serialize the span context into the `httpReq.Header`. This ensures that the trace is continued in the downstream service. Dependencies include the `net/http` package.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/opentracing/opentracing-go/README.md#_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\nfunc makeSomeRequest(ctx context.Context) ... {\n    if span := opentracing.SpanFromContext(ctx); span != nil {\n        httpClient := &http.Client{}\n        httpReq, _ := http.NewRequest(\"GET\", \"http://myservice/\", nil)\n\n        // Transmit the span's TraceContext as HTTP headers on our\n        // outbound request.\n        opentracing.GlobalTracer().Inject(\n            span.Context(),\n            opentracing.HTTPHeaders,\n            opentracing.HTTPHeadersCarrier(httpReq.Header))\n\n        resp, err := httpClient.Do(httpReq)\n        ...\n    }\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Performing a GET Request with retryablehttp in Go\nDESCRIPTION: This code snippet demonstrates a simple GET request using the `retryablehttp` package. It automatically retries the request with exponential backoff in case of failures. The response is an `*http.Response` object, similar to the standard `net/http` library.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/hashicorp/go-retryablehttp/README.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nresp, err := retryablehttp.Get(\"/foo\")\nif err != nil {\n    panic(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Skopeo Login with Password from File\nDESCRIPTION: This snippet shows how to use the `--password-stdin` flag to read the password from standard input, which can be redirected from a file.\nSOURCE: https://github.com/containers/skopeo/blob/main/docs/skopeo-login.1.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ skopeo login -u testuser  --password-stdin < testpassword.txt docker.io\nLogin Succeeded!\n```\n\n----------------------------------------\n\nTITLE: Skopeo Logout All Registries\nDESCRIPTION: This example demonstrates how to remove login credentials for all registries stored in the authentication file using the `--all` option. It clears all cached credentials.\nSOURCE: https://github.com/containers/skopeo/blob/main/docs/skopeo-logout.1.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ skopeo logout --all\nRemove login credentials for all registries\n```\n\n----------------------------------------\n\nTITLE: Generating Sigstore Key Pair with Skopeo\nDESCRIPTION: This command generates a sigstore public/private key pair using the skopeo tool. It requires the --output-prefix option to specify the base name for the output files. The private key will be encrypted and stored as mykey.private, and the public key will be stored as mykey.pub.\nSOURCE: https://github.com/containers/skopeo/blob/main/docs/skopeo-generate-sigstore-key.1.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nskopeo generate-sigstore-key --output-prefix mykey\n```\n\n----------------------------------------\n\nTITLE: Struct Validation Example in Go\nDESCRIPTION: This code demonstrates how to use struct tags and govalidator to validate a struct's fields. It includes custom validator examples with and without parameters.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/asaskevich/govalidator/README.md#_snippet_17\n\nLANGUAGE: go\nCODE:\n```\ntype Post struct {\n\tTitle    string `valid:\"alphanum,required\"`\n\tMessage  string `valid:\"duck,ascii\"`\n\tMessage2 string `valid:\"animal(dog)\"`\n\tAuthorIP string `valid:\"ipv4\"`\n\tDate     string `valid:\"-\"`\n}\npost := &Post{\n\tTitle:   \"My Example Post\",\n\tMessage: \"duck\",\n\tMessage2: \"dog\",\n\tAuthorIP: \"123.234.54.3\",\n}\n\n// Add your own struct validation tags\ngovalidator.TagMap[\"duck\"] = govalidator.Validator(func(str string) bool {\n\treturn str == \"duck\"\n})\n\n// Add your own struct validation tags with parameter\ngovalidator.ParamTagMap[\"animal\"] = govalidator.ParamValidator(func(str string, params ...string) bool {\n    species := params[0]\n    return str == species\n})\ngovalidator.ParamTagRegexMap[\"animal\"] = regexp.MustCompile(\"^animal\\\\((\\w+)\\\\)$\")\n\nresult, err := govalidator.ValidateStruct(post)\nif err != nil {\n\tprintln(\"error: \" + err.Error())\n}\nprintln(result)\n```\n\n----------------------------------------\n\nTITLE: Skopeo Inspect Image\nDESCRIPTION: This example demonstrates how to use the `skopeo inspect` command to retrieve information about the `fedora` image from the `docker.io` registry. It shows the command's basic usage and the JSON output it produces, including details like image name, digest, repository tags, and other metadata.\nSOURCE: https://github.com/containers/skopeo/blob/main/docs/skopeo-inspect.1.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ skopeo inspect docker://docker.io/fedora\n\n{\n    \"Name\": \"docker.io/library/fedora\",\n    \"Digest\": \"sha256:f99efcddc4dd6736d8a88cc1ab6722098ec1d77dbf7aed9a7a514fc997ca08e0\",\n    \"RepoTags\": [\n        \"20\",\n        \"21\",\n        \"...\"\n    ],\n    \"Created\": \"2022-11-16T07:26:42.618327645Z\",\n    \"DockerVersion\": \"20.10.12\",\n    \"Labels\": {\n        \"maintainer\": \"Clement Verna \\u003ccverna@fedoraproject.org\\u003e\"\n    },\n    \"Architecture\": \"amd64\",\n    \"Os\": \"linux\",\n    \"Layers\": [\n        \"sha256:cb8b1ed77979b894115a983f391465651aa7eb3edd036be4b508eea47271eb93\"\n    ],\n    \"LayersData\": [\n        {\n            \"MIMEType\": \"application/vnd.docker.image.rootfs.diff.tar.gzip\",\n            \"Digest\": \"sha256:cb8b1ed77979b894115a983f391465651aa7eb3edd036be4b508eea47271eb93\",\n            \"Size\": 65990920,\n            \"Annotations\": null\n        }\n    ],\n    \"Env\": [\n        \"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\",\n        \"DISTTAG=f37container\",\n        \"FGC=f37\",\n        \"FBR=f37\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Digest with io.Reader in Go\nDESCRIPTION: This code snippet demonstrates how to verify a digest using an `io.Reader`.  A `Verifier` is created from the digest, and the content from the reader is copied to the verifier. After copying, the `Verified` method checks if the content matches the expected digest. This approach is useful for verifying large streams of data. This requires importing the `github.com/opencontainers/go-digest` and `io` packages.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/opencontainers/go-digest/README.md#_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nrd := getContent()\nverifier := id.Verifier()\nio.Copy(verifier, rd)\n\nif !verifier.Verified() {\n  return errors.New(\"the content has changed!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Skopeo Sync: Synchronizing to a Container Registry with Tag Suffix\nDESCRIPTION: This example shows how to synchronize images from one container registry to another while adding a suffix to the tags. The command copies all tags from the `registry.example.com/busybox` repository to the `my-registry.local.lan` registry, appending `-mirror` to each tag. This allows distinguishing between original and mirrored images.\nSOURCE: https://github.com/containers/skopeo/blob/main/docs/skopeo-sync.1.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ skopeo sync --src docker --dest docker --append-suffix '-mirror' registry.example.com/busybox my-registry.local.lan\n```\n\n----------------------------------------\n\nTITLE: CORS Method Middleware Example in Go\nDESCRIPTION: This snippet demonstrates how to use CORSMethodMiddleware from Gorilla Mux to strictly set the `Access-Control-Allow-Methods` response header. It requires a custom OPTIONS handler to set other CORS headers like `Access-Control-Allow-Origin`. The middleware sets the `Access-Control-Allow-Methods` header based on the method matchers defined for a route. It's important to specify an OPTIONS method matcher for the middleware to work correctly.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/gorilla/mux/README.md#_snippet_30\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"net/http\"\n\t\"github.com/gorilla/mux\"\n)\n\nfunc main() {\n    r := mux.NewRouter()\n\n    // IMPORTANT: you must specify an OPTIONS method matcher for the middleware to set CORS headers\n    r.HandleFunc(\"/foo\", fooHandler).Methods(http.MethodGet, http.MethodPut, http.MethodPatch, http.MethodOptions)\n    r.Use(mux.CORSMethodMiddleware(r))\n    \n    http.ListenAndServe(\":8080\", r)\n}\n\nfunc fooHandler(w http.ResponseWriter, r *http.Request) {\n    w.Header().Set(\"Access-Control-Allow-Origin\", \"*\")\n    if r.Method == http.MethodOptions {\n        return\n    }\n\n    w.Write([]byte(\"foo\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Logrus Instance - Go\nDESCRIPTION: This snippet demonstrates creating a new instance of the Logrus logger, allowing for more advanced usage such as logging to multiple locations.  It shows how to set the output stream for the logger and log structured messages using `WithFields`.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/sirupsen/logrus/README.md#_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n  \"os\"\n  \"github.com/sirupsen/logrus\"\n)\n\n// Create a new instance of the logger. You can have any number of instances.\nvar log = logrus.New()\n\nfunc main() {\n  // The API for setting attributes is a little different than the package level\n  // exported logger. See Godoc.\n  log.Out = os.Stdout\n\n  // You could set this to any `io.Writer` such as a file\n  // file, err := os.OpenFile(\"logrus.log\", os.O_CREATE|os.O_WRONLY|os.O_APPEND, 0666)\n  // if err == nil {\n  //  log.Out = file\n  // } else {\n  //  log.Info(\"Failed to log to file, using default stderr\")\n  // }\n\n  log.WithFields(logrus.Fields{\n    \"animal\": \"walrus\",\n    \"size\":   10,\n  }).Info(\"A group of walrus emerges from the ocean\")\n}\n```\n\n----------------------------------------\n\nTITLE: Registry Garbage Collection Command\nDESCRIPTION: This command triggers the garbage collector for a github.com/distribution/distribution registry server. It requires logging into the server and executing the `registry garbage-collect` command with the configuration file path.\nSOURCE: https://github.com/containers/skopeo/blob/main/docs/skopeo-delete.1.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n/usr/bin/registry garbage-collect /etc/docker-distribution/registry/config.yml\n```\n\n----------------------------------------\n\nTITLE: Skopeo Login with Custom Authentication File\nDESCRIPTION: This example demonstrates how to use the `--authfile` flag to specify a custom authentication file to be used for logging in.\nSOURCE: https://github.com/containers/skopeo/blob/main/docs/skopeo-login.1.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ skopeo login --authfile authdir/myauths.json docker.io\nUsername: testuser\nPassword:\nLogin Succeeded!\n```\n\n----------------------------------------\n\nTITLE: Skopeo Standalone Sign Example\nDESCRIPTION: This example demonstrates how to use the `skopeo standalone-sign` command to sign a container image manifest locally. It takes a manifest file, a docker reference, a key fingerprint, and specifies an output file for the signature.\nSOURCE: https://github.com/containers/skopeo/blob/main/docs/skopeo-standalone-sign.1.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ skopeo standalone-sign busybox-manifest.json registry.example.com/example/busybox 1D8230F6CDB6A06716E414C1DB72F2188BB46CC8 --output busybox.signature\n$\n```\n\n----------------------------------------\n\nTITLE: Skopeo Sync: Synchronizing to a Local Directory with Scoped Option\nDESCRIPTION: This example shows how to synchronize images from a container registry to a local directory using the `--scoped` option.  The command copies all tags from `registry.example.com/busybox` to `/media/usb`, prefixing image paths with the source to allow storage of multiple images with the same name. After execution, directories are created for each image under the destination with the registry name included in the path.\nSOURCE: https://github.com/containers/skopeo/blob/main/docs/skopeo-sync.1.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ skopeo sync --src docker --dest dir --scoped registry.example.com/busybox /media/usb\n```\n\n----------------------------------------\n\nTITLE: Appending errors to a multierror\nDESCRIPTION: This snippet demonstrates how to use the `multierror.Append` function to accumulate errors. It checks for errors in `step1` and `step2` and appends them to the `result` error variable. The function behaves like the built-in `append` function, handling nil, `multierror.Error`, or other error types correctly.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/hashicorp/go-multierror/README.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nvar result error\n\nif err := step1(); err != nil {\n\tresult = multierror.Append(result, err)\n}\nif err := step2(); err != nil {\n\tresult = multierror.Append(result, err)\n}\n\nreturn result\n```\n\n----------------------------------------\n\nTITLE: Matching Routes based on Query Values using gorilla/mux in Go\nDESCRIPTION: This code snippet demonstrates how to match routes based on the presence of specific query parameters using the gorilla/mux package in Go.  It ensures that the route is only matched when the request includes the 'key' query parameter with the value 'value'.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/gorilla/mux/README.md#_snippet_9\n\nLANGUAGE: Go\nCODE:\n```\nr.Queries(\"key\", \"value\")\n```\n\n----------------------------------------\n\nTITLE: Skopeo Sync: Synchronizing to a Local Directory\nDESCRIPTION: This example demonstrates how to synchronize images from a container registry to a local directory using `skopeo sync`. The command copies all tags from the `registry.example.com/busybox` repository to the `/media/usb` directory. After execution, individual directories are created for each image tag within the specified destination path.\nSOURCE: https://github.com/containers/skopeo/blob/main/docs/skopeo-sync.1.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ skopeo sync --src docker --dest dir registry.example.com/busybox /media/usb\n```\n\n----------------------------------------\n\nTITLE: Installing govalidator\nDESCRIPTION: This snippet shows the command to install the govalidator package using go get.  It also shows how to install a specific version using `gopkg.in`.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/asaskevich/govalidator/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngo get github.com/asaskevich/govalidator\n```\n\nLANGUAGE: Shell\nCODE:\n```\ngo get gopkg.in/asaskevich/govalidator.v10\n```\n\n----------------------------------------\n\nTITLE: Strip ANSI escape codes using Go\nDESCRIPTION: This Go code snippet demonstrates how to import and use the stripansi package to remove ANSI escape codes from a string. It defines a string containing ANSI escape codes, calls the `Strip` function to clean the string, and prints the cleaned string to the console.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/acarl005/stripansi/README.md#_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nimport (\n\t\"fmt\"\n\t\"github.com/acarl005/stripansi\"\n)\n\nfunc main() {\n\tmsg := \"\\x1b[38;5;140m foo\\x1b[0m bar\"\n\tcleanMsg := stripansi.Strip(msg)\n\tfmt.Println(cleanMsg) // \" foo bar\"\n}\n```\n\n----------------------------------------\n\nTITLE: Generating URLs with Route Variables in Go\nDESCRIPTION: This example shows how to use named routes and the `URL()` method in Gorilla Mux to generate URLs dynamically, providing key-value pairs for route variables to construct the final URL path.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/gorilla/mux/README.md#_snippet_18\n\nLANGUAGE: go\nCODE:\n```\nurl, err := r.Get(\"article\").URL(\"category\", \"technology\", \"id\", \"42\")\n```\n\n----------------------------------------\n\nTITLE: Installing Skopeo on RHEL/CentOS Stream 8+\nDESCRIPTION: This command installs the skopeo package using the dnf package manager on RHEL/CentOS Stream 8 or later. The `-y` flag is used to automatically accept the installation.\nSOURCE: https://github.com/containers/skopeo/blob/main/install.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nsudo dnf -y install skopeo\n```\n\n----------------------------------------\n\nTITLE: Combining Matchers in a Single Route using gorilla/mux in Go\nDESCRIPTION: This code snippet demonstrates how to combine multiple matchers in a single route using the gorilla/mux package in Go. It registers a handler for the /products path, but only when the host is 'www.example.com', the method is GET, and the scheme is 'http'.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/gorilla/mux/README.md#_snippet_11\n\nLANGUAGE: Go\nCODE:\n```\nr.HandleFunc(\"/products\", ProductsHandler).\n  Host(\"www.example.com\").\n  Methods(\"GET\").\n  Schemes(\"http\")\n```\n\n----------------------------------------\n\nTITLE: Parsing command-line flags with flag.Parse()\nDESCRIPTION: This snippet demonstrates how to parse the command line into the defined flags using `flag.Parse()`. This function must be called after all flags are defined to process the command-line arguments.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/spf13/pflag/README.md#_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\nflag.Parse()\n```\n\n----------------------------------------\n\nTITLE: Streaming Decompression with zstd in Go\nDESCRIPTION: This code snippet demonstrates how to use the zstd library for streaming decompression in Go. It creates a new zstd Reader from an io.Reader, copies the decompressed content to an io.Writer, and closes the Reader to release resources.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/klauspost/compress/zstd/README.md#_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nimport \"github.com/klauspost/compress/zstd\"\n\nfunc Decompress(in io.Reader, out io.Writer) error {\n    d, err := zstd.NewReader(in)\n    if err != nil {\n        return err\n    }\n    defer d.Close()\n    \n    // Copy content...\n    _, err = io.Copy(out, d)\n    return err\n}\n```\n\n----------------------------------------\n\nTITLE: Copy Image Layers to Local Directory\nDESCRIPTION: Copies the layers of a Docker image to a local directory. It uses the `dir:` transport to specify the destination directory and shows how to list the extracted layers.\nSOURCE: https://github.com/containers/skopeo/blob/main/docs/skopeo-copy.1.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p /var/lib/images/busybox\nskopeo copy docker://busybox:latest dir:/var/lib/images/busybox\nls /var/lib/images/busybox/*\n```\n\n----------------------------------------\n\nTITLE: Customizing error formatting\nDESCRIPTION: This snippet shows how to customize the format of the `Error() string` function by specifying a custom `ErrorFormat`. This allows controlling how the multierror is represented as a string.  It defines a function that returns a custom error message.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/hashicorp/go-multierror/README.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nvar result *multierror.Error\n\n// ... accumulate errors here, maybe using Append\n\nif result != nil {\n\tresult.ErrorFormat = func([]error) string {\n\t\treturn \"errors!\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Using json-iterator Marshal in Go\nDESCRIPTION: This code snippet shows how to utilize json-iterator's `Marshal` function in Go after replacing the standard `encoding/json` package. It configures json-iterator for standard library compatibility and then uses its `Marshal` function to encode the `data` variable into JSON.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/json-iterator/go/README.md#_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nimport jsoniter \"github.com/json-iterator/go\"\n\nvar json = jsoniter.ConfigCompatibleWithStandardLibrary\njson.Marshal(&data)\n```\n\n----------------------------------------\n\nTITLE: SQL User Management Examples\nDESCRIPTION: These SQL examples demonstrate how to manage users within a SQLite database protected by user authentication. They cover creating an admin user, changing a user's password, and deleting a user using the custom SQL functions provided by the library.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/mattn/go-sqlite3/README.md#_snippet_22\n\nLANGUAGE: sql\nCODE:\n```\n// Autheticate user\n// Create Admin User\nSELECT auth_user_add('admin2', 'admin2', 1);\n\n// Change password for user\nSELECT auth_user_change('user', 'userpassword', 0);\n\n// Delete user\nSELECT user_delete('user');\n```\n\n----------------------------------------\n\nTITLE: Installing Skopeo on RHEL/CentOS 7.x\nDESCRIPTION: This command installs the skopeo package using the yum package manager on RHEL/CentOS 7.x. The `-y` flag is used to automatically accept the installation.\nSOURCE: https://github.com/containers/skopeo/blob/main/install.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nsudo yum -y install skopeo\n```\n\n----------------------------------------\n\nTITLE: Rendering a Single Progress Bar with mpb in Go\nDESCRIPTION: This code snippet demonstrates how to render a single progress bar using the mpb Go library. It initializes a progress container, creates a bar with a custom style, prepends decorators for displaying the bar's name and completion status, appends a percentage decorator, simulates work, and waits for the bar to complete.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/vbauerster/mpb/v8/README.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n\t\"math/rand\"\n\t\"time\"\n\n\t\"github.com/vbauerster/mpb/v8\"\n\t\"github.com/vbauerster/mpb/v8/decor\"\n)\n\nfunc main() {\n\t// initialize progress container, with custom width\n\tp := mpb.New(mpb.WithWidth(64))\n\n\ttotal := 100\n\tname := \"Single Bar:\"\n\t// create a single bar, which will inherit container's width\n\tbar := p.New(int64(total),\n\t\t// BarFillerBuilder with custom style\n\t\tmpb.BarStyle().Lbound(\"╢\").Filler(\"▌\").Tip(\"▌\").Padding(\"░\").Rbound(\"╟\"),\n\t\tmpb.PrependDecorators(\n\t\t\t// display our name with one space on the right\n\t\t\tdecor.Name(name, decor.WC{C: decor.DindentRight | decor.DextraSpace}),\n\t\t\t// replace ETA decorator with \"done\" message, OnComplete event\n\t\t\tdecor.OnComplete(decor.AverageETA(decor.ET_STYLE_GO), \"done\"),\n\t\t),\n\t\tmpb.AppendDecorators(decor.Percentage()),\n\t)\n\t// simulating some work\n\tmax := 100 * time.Millisecond\n\tfor i := 0; i < total; i++ {\n\t\ttime.Sleep(time.Duration(rand.Intn(10)+1) * max / 10)\n\t\tbar.Increment()\n\t}\n\t// wait for our bar to complete and flush\n\tp.Wait()\n}\n```\n\n----------------------------------------\n\nTITLE: Building go-sqlite3 with Multiple Features\nDESCRIPTION: This bash command shows how to build the go-sqlite3 library with several features (icu, json1, fts5, and secure_delete) enabled using build tags. Multiple tags should be space delimited.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/mattn/go-sqlite3/README.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\ngo build -tags \"icu json1 fts5 secure_delete\"\n```\n\n----------------------------------------\n\nTITLE: Binding a flag to a variable using flag.IntVar()\nDESCRIPTION: This snippet shows how to bind a flag to a variable using the `flag.IntVar()` function within the `init()` function. It declares a flag named \"flagname\" which defaults to 1234 and has a help message. The value of the flag will be stored in the variable `flagvar`.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/spf13/pflag/README.md#_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nvar flagvar int\nfunc init() {\n    flag.IntVar(&flagvar, \"flagname\", 1234, \"help message for flagname\")\n}\n```\n\n----------------------------------------\n\nTITLE: Skopeo Sync Command Example\nDESCRIPTION: This command demonstrates how to use the `skopeo sync` command with the `--src yaml` option to synchronize images based on the configuration specified in the `sync.yml` file. The `--dest docker` option indicates that the destination is a docker registry.\nSOURCE: https://github.com/containers/skopeo/blob/main/docs/skopeo-sync.1.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ skopeo sync --src yaml --dest docker sync.yml my-registry.local.lan/repo/\n```\n\n----------------------------------------\n\nTITLE: Syncing Registries with Skopeo\nDESCRIPTION: This command demonstrates how to sync a registry using `skopeo sync`.  It copies the `busybox` image from `registry.example.com` to a directory `/media/usb`. The `--src` and `--dest` flags specify the source and destination types respectively.\nSOURCE: https://github.com/containers/skopeo/blob/main/README.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ skopeo sync --src docker --dest dir registry.example.com/busybox /media/usb\n```\n\n----------------------------------------\n\nTITLE: Replacing standard JSON Marshal with json-iterator in Go\nDESCRIPTION: This snippet demonstrates how to replace the standard `encoding/json` import and `json.Marshal` function with the `json-iterator/go` equivalent for encoding JSON data in Go. It involves importing the `jsoniter` package, configuring it to be compatible with the standard library, and then using `json.Marshal` for encoding.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/json-iterator/go/README.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nimport \"encoding/json\"\njson.Marshal(&data)\n```\n\n----------------------------------------\n\nTITLE: URL Validation with govalidator\nDESCRIPTION: This snippet demonstrates how to validate if a string is a valid URL using the `IsURL` function from the `govalidator` library. It checks if the provided string represents a valid URL format.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/asaskevich/govalidator/README.md#_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nprintln(govalidator.IsURL(`http://user@pass:domain.com/path/page`))\n```\n\n----------------------------------------\n\nTITLE: YAML Unmarshal/Marshal Example in Go\nDESCRIPTION: This code snippet demonstrates how to use the `gopkg.in/yaml.v3` package to unmarshal YAML data into a Go struct and a map, and then marshal the data back into YAML format. It requires the `gopkg.in/yaml.v3` package. The code defines a struct `T` with fields `A` and `B`, where `B` is another struct with fields `RenamedC` and `D`. The `yaml` tags are used to map the YAML keys to the struct fields.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/gopkg.in/yaml.v3/README.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n\t\t\"fmt\"\n\t\t\"log\"\n\n\t\t\"gopkg.in/yaml.v3\"\n)\n\nvar data = `\na: Easy!\nb:\n  c: 2\n  d: [3, 4]\n`\n\n// Note: struct fields must be public in order for unmarshal to\n// correctly populate the data.\ntype T struct {\n\t\tA string\n\t\tB struct {\n\t\t\t\tRenamedC int   `yaml:\"c\"`\n\t\t\t\tD        []int `yaml:\",flow\"`\n\t\t}\n}\n\nfunc main() {\n\t\tt := T{}\n    \n\t\terr := yaml.Unmarshal([]byte(data), &t)\n\t\tif err != nil {\n\t\t\t\tlog.Fatalf(\"error: %v\", err)\n\t\t}\n\t\tfmt.Printf(\"--- t:\\n%v\\n\\n\", t)\n    \n\t\td, err := yaml.Marshal(&t)\n\t\tif err != nil {\n\t\t\t\tlog.Fatalf(\"error: %v\", err)\n\t\t}\n\t\tfmt.Printf(\"--- t dump:\\n%s\\n\\n\", string(d))\n    \n\t\tm := make(map[interface{}]interface{})\n    \n\t\terr = yaml.Unmarshal([]byte(data), &m)\n\t\tif err != nil {\n\t\t\t\tlog.Fatalf(\"error: %v\", err)\n\t\t}\n\t\tfmt.Printf(\"--- m:\\n%v\\n\\n\", m)\n    \n\t\td, err = yaml.Marshal(&m)\n\t\tif err != nil {\n\t\t\t\tlog.Fatalf(\"error: %v\", err)\n\t\t}\n\t\tfmt.Printf(\"--- m dump:\\n%s\\n\\n\", string(d))\n}\n```\n\n----------------------------------------\n\nTITLE: Authentication Middleware in Go\nDESCRIPTION: This example provides a more complex authentication middleware that maps session tokens to users. It demonstrates how to define a middleware as a struct, populate it with data, and use it to authenticate requests based on a header.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/gorilla/mux/README.md#_snippet_28\n\nLANGUAGE: go\nCODE:\n```\n// Define our struct\ntype authenticationMiddleware struct {\n\ttokenUsers map[string]string\n}\n\n// Initialize it somewhere\nfunc (amw *authenticationMiddleware) Populate() {\n\tamw.tokenUsers[\"00000000\"] = \"user0\"\n\tamw.tokenUsers[\"aaaaaaaa\"] = \"userA\"\n\tamw.tokenUsers[\"05f717e5\"] = \"randomUser\"\n\tamw.tokenUsers[\"deadbeef\"] = \"user0\"\n}\n\n// Middleware function, which will be called for each request\nfunc (amw *authenticationMiddleware) Middleware(next http.Handler) http.Handler {\n    return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n        token := r.Header.Get(\"X-Session-Token\")\n\n        if user, found := amw.tokenUsers[token]; found {\n        \t// We found the token in our map\n        \tlog.Printf(\"Authenticated user %s\\n\", user)\n        \t// Pass down the request to the next middleware (or final handler)\n        \tnext.ServeHTTP(w, r)\n        } else {\n        \t// Write an error and stop the handler chain\n        \thttp.Error(w, \"Forbidden\", http.StatusForbidden)\n        }\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: String Whitelisting in Go\nDESCRIPTION: This snippet shows how to use the govalidator.WhiteList function to remove characters from a string, keeping only those within the specified whitelist.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/asaskevich/govalidator/README.md#_snippet_19\n\nLANGUAGE: go\nCODE:\n```\n// Remove all characters from string ignoring characters between \"a\" and \"z\"\nprintln(govalidator.WhiteList(\"a3a43a5a4a3a2a23a4a5a4a3a4\", \"a-z\") == \"aaaaaaaaaaaa\")\n```\n\n----------------------------------------\n\nTITLE: Building for ARM with environment variables and go build\nDESCRIPTION: This command sets up the environment for compiling go-sqlite3 for ARM architecture.  It defines the C and C++ compilers, enables CGO, sets the GOOS and GOARCH, and then runs the `go build` command. The `GOARM=7` specifies the ARM version.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/mattn/go-sqlite3/README.md#_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\nenv CC=arm-linux-gnueabihf-gcc CXX=arm-linux-gnueabihf-g++ \\\n    CGO_ENABLED=1 GOOS=linux GOARCH=arm GOARM=7 \\\n    go build -v\n```\n\n----------------------------------------\n\nTITLE: Basic Logging Middleware in Go\nDESCRIPTION: This example demonstrates how to create a basic middleware function that logs the URI of each request handled by the Gorilla Mux router.  It showcases the standard middleware function signature and how to chain handlers.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/gorilla/mux/README.md#_snippet_26\n\nLANGUAGE: go\nCODE:\n```\nfunc loggingMiddleware(next http.Handler) http.Handler {\n    return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n        // Do stuff here\n        log.Println(r.RequestURI)\n        // Call the next handler, which can be another middleware in the chain, or the final handler.\n        next.ServeHTTP(w, r)\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Running Skopeo from a Container Image\nDESCRIPTION: This command demonstrates how to run Skopeo from a container image using podman.  It executes the `copy --help` command within the container.\nSOURCE: https://github.com/containers/skopeo/blob/main/install.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\npodman run docker://quay.io/skopeo/stable:latest copy --help\n```\n\n----------------------------------------\n\nTITLE: Creating Subrouters with Host Matcher using gorilla/mux in Go\nDESCRIPTION: This code snippet demonstrates how to create subrouters with a host matcher using the gorilla/mux package in Go. It creates a subrouter that only matches requests to 'www.example.com' allowing routes to be grouped by domain.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/gorilla/mux/README.md#_snippet_12\n\nLANGUAGE: Go\nCODE:\n```\nr := mux.NewRouter()\ns := r.Host(\"www.example.com\").Subrouter()\n```\n\n----------------------------------------\n\nTITLE: Looping Over Errors in Go\nDESCRIPTION: This code shows how to iterate over individual validation errors when using govalidator, as the .Error() method returns all errors concatenated into a single string.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/asaskevich/govalidator/README.md#_snippet_21\n\nLANGUAGE: go\nCODE:\n```\nif err != nil {\n    errs := err.(govalidator.Errors).Errors()\n    for _, e := range errs {\n      fmt.Println(e.Error())\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Matching Routes based on HTTP Methods using gorilla/mux in Go\nDESCRIPTION: This code snippet demonstrates how to match routes based on HTTP methods (GET, POST, etc.) using gorilla/mux in Go. This ensures that the route is only matched when the incoming request uses one of the specified HTTP methods.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/gorilla/mux/README.md#_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\nr.Methods(\"GET\", \"POST\")\n```\n\n----------------------------------------\n\nTITLE: Logrus Testing Hook Example in Go\nDESCRIPTION: This code demonstrates how to use the testing hook provided by Logrus to assert the presence and content of log messages in unit tests. It creates a null logger, logs an error message, and then asserts that the hook contains the expected entry.  It uses testify/assert for the assertions.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/sirupsen/logrus/README.md#_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nimport(\n  \"github.com/sirupsen/logrus\"\n  \"github.com/sirupsen/logrus/hooks/test\"\n  \"github.com/stretchr/testify/assert\"\n  \"testing\"\n)\n\nfunc TestSomething(t*testing.T){\n  logger, hook := test.NewNullLogger()\n  logger.Error(\"Helloerror\")\n\n  assert.Equal(t, 1, len(hook.Entries))\n  assert.Equal(t, logrus.ErrorLevel, hook.LastEntry().Level)\n  assert.Equal(t, \"Helloerror\", hook.LastEntry().Message)\n\n  hook.Reset()\n  assert.Nil(t, hook.LastEntry())\n}\n```\n\n----------------------------------------\n\nTITLE: Health Check Handler in Go\nDESCRIPTION: This Go code defines a simple HTTP handler called `HealthCheckHandler` that returns a JSON response with the status `{\"alive\": true}`. It sets the `Content-Type` header to `application/json` and the HTTP status code to 200 OK. The handler is then registered with a Gorilla Mux router for the `/health` endpoint. It depends on the net/http package and gorilla/mux.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/gorilla/mux/README.md#_snippet_32\n\nLANGUAGE: go\nCODE:\n```\n// endpoints.go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\n\n\t\"github.com/gorilla/mux\"\n)\n\nfunc HealthCheckHandler(w http.ResponseWriter, r *http.Request) {\n    // A very simple health check.\n    w.Header().Set(\"Content-Type\", \"application/json\")\n    w.WriteHeader(http.StatusOK)\n\n    // In the future we could report back on the status of our DB, or our cache\n    // (e.g. Redis) by performing a simple PING, and include them in the response.\n    io.WriteString(w, `{\"alive\": true}`)\n}\n\nfunc main() {\n    r := mux.NewRouter()\n    r.HandleFunc(\"/health\", HealthCheckHandler)\n\n    log.Fatal(http.ListenAndServe(\"localhost:8080\", r))\n}\n```\n\n----------------------------------------\n\nTITLE: Using Logger in App Object in Go\nDESCRIPTION: This snippet shows how to use the logr.Logger object within an application object. The logger is passed to other libraries or stored in structs.  This enables logging throughout the application using the chosen implementation without tight coupling.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/go-logr/logr/README.md#_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\napp := createTheAppObject(logger)\napp.Run()\n```\n\n----------------------------------------\n\nTITLE: Custom JSON Formatter in Go with Logrus\nDESCRIPTION: This code defines a custom JSON formatter for Logrus.  It implements the Formatter interface by defining a Format method. The Format method marshals the entry data (fields) to JSON and appends a newline character. It shows how to create and register a custom formatter for Logrus.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/sirupsen/logrus/README.md#_snippet_11\n\nLANGUAGE: go\nCODE:\n```\ntype MyJSONFormatter struct {\n}\n\nlog.SetFormatter(new(MyJSONFormatter))\n\nfunc (f *MyJSONFormatter) Format(entry *Entry) ([]byte, error) {\n  // Note this doesn't include Time, Level and Message which are available on\n  // the Entry. Consult `godoc` on information about those fields or read the\n  // source of the official loggers.\n  serialized, err := json.Marshal(entry.Data)\n    if err != nil {\n      return nil, fmt.Errorf(\"Failed to marshal fields to JSON, %w\", err)\n    }\n  return append(serialized, '\\n'), nil\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Digest from Bytes in Go\nDESCRIPTION: This code snippet demonstrates how to create a digest from a byte slice using the `digest.FromBytes` function. The resulting digest can be used as a unique identifier for the content in Content Addressable Storage systems. This requires importing the `github.com/opencontainers/go-digest` package.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/opencontainers/go-digest/README.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nid := digest.FromBytes([]byte(\"my content\"))\n```\n\n----------------------------------------\n\nTITLE: Skopeo Login with Password from Pipe\nDESCRIPTION: This example demonstrates using a pipe to pass the password to `skopeo login` via standard input using the `--password-stdin` option.\nSOURCE: https://github.com/containers/skopeo/blob/main/docs/skopeo-login.1.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ echo $testpassword | skopeo login -u testuser --password-stdin docker.io\nLogin Succeeded!\n```\n\n----------------------------------------\n\nTITLE: Replacing gzip import with pgzip\nDESCRIPTION: This shows how to replace the standard gzip import with the pgzip package. It involves changing the import statement from \"compress/gzip\" to \"github.com/klauspost/pgzip\" and aliasing it as \"gzip\".\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/klauspost/pgzip/README.md#_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nimport gzip \"github.com/klauspost/pgzip\"\n```\n\n----------------------------------------\n\nTITLE: Verifying a Digest in Go\nDESCRIPTION: This code snippet shows how to verify a digest against a known byte slice.  It checks if the digest of the current content matches the original digest. If the digests don't match, it indicates that the content has been modified. This requires importing the `github.com/opencontainers/go-digest` and `errors` packages.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/opencontainers/go-digest/README.md#_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nif id != digest.FromBytes([]byte(\"my content\")) {\n  return errors.New(\"the content has changed!\")\n}\n```\n\n----------------------------------------\n\nTITLE: xxhash Sum64 Function in Go\nDESCRIPTION: The Sum64 function calculates the 64-bit xxHash of a byte slice. It provides a simple way to hash byte data using the xxHash algorithm. No external dependencies are required.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/klauspost/compress/zstd/internal/xxhash/README.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nfunc Sum64(b []byte) uint64\n```\n\n----------------------------------------\n\nTITLE: Skopeo Login with Custom Certificate Directory\nDESCRIPTION: This example demonstrates how to use the `--cert-dir` flag to specify a custom certificate directory.\nSOURCE: https://github.com/containers/skopeo/blob/main/docs/skopeo-login.1.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ skopeo login --cert-dir /etc/containers/certs.d/ -u foo -p bar localhost:5000\nLogin Succeeded!\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Open Connections\nDESCRIPTION: This Go code snippet sets the maximum number of open connections to the database to 1. This, in combination with `cache=shared`, is a workaround for 'database is locked' errors, especially in concurrent scenarios.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/mattn/go-sqlite3/README.md#_snippet_24\n\nLANGUAGE: go\nCODE:\n```\ndb.SetMaxOpenConns(1)\n```\n\n----------------------------------------\n\nTITLE: Simple Mux Server in Go\nDESCRIPTION: This Go code defines a complete, runnable example of a small server based on Gorilla Mux. The `YourHandler` function writes \"Gorilla!\\n\" to the response. The `main` function creates a new router, registers the handler for the root path (\"/\"), and starts the server on port 8000. It uses the `net/http`, `log`, and `github.com/gorilla/mux` packages.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/gorilla/mux/README.md#_snippet_36\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"net/http\"\n    \"log\"\n    \"github.com/gorilla/mux\"\n)\n\nfunc YourHandler(w http.ResponseWriter, r *http.Request) {\n    w.Write([]byte(\"Gorilla!\\n\"))\n}\n\nfunc main() {\n    r := mux.NewRouter()\n    // Routes consist of a path and a handler function.\n    r.HandleFunc(\"/\", YourHandler)\n\n    // Bind to a port and pass our router in\n    log.Fatal(http.ListenAndServe(\":8000\", r))\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an integer flag using flag.Int()\nDESCRIPTION: This snippet shows how to define an integer flag using the `flag.Int()` function. It declares a flag named \"flagname\" which defaults to 1234 and has a help message. The value of the flag will be stored in the pointer `ip`.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/spf13/pflag/README.md#_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nvar ip *int = flag.Int(\"flagname\", 1234, \"help message for flagname\")\n```\n\n----------------------------------------\n\nTITLE: Creating a custom flag with flag.Var()\nDESCRIPTION: This snippet shows how to create custom flags that satisfy the Value interface (with pointer receivers) and couple them to flag parsing using `flag.Var()`. The default value of the flag is just the initial value of the variable `flagVal`.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/spf13/pflag/README.md#_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nflag.Var(&flagVal, \"name\", \"help message for flagname\")\n```\n\n----------------------------------------\n\nTITLE: Activating Field Requirement by Default in govalidator\nDESCRIPTION: This code shows how to activate the behavior to require all fields to have a validation tag by default using `SetFieldsRequiredByDefault`. It also shows how to configure if nil pointers are allowed using `SetNilPtrAllowedByRequired`. This is typically done in an init function.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/asaskevich/govalidator/README.md#_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nimport \"github.com/asaskevich/govalidator\"\n\nfunc init() {\n  govalidator.SetFieldsRequiredByDefault(true)\n}\n```\n\n----------------------------------------\n\nTITLE: Graceful Shutdown with Gorilla Mux in Go\nDESCRIPTION: This example demonstrates how to implement a graceful shutdown for an HTTP server using Gorilla Mux and the `http.Server.Shutdown` function introduced in Go 1.8. It includes signal handling and a timeout for existing connections.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/gorilla/mux/README.md#_snippet_25\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"context\"\n    \"flag\"\n    \"log\"\n    \"net/http\"\n    \"os\"\n    \"os/signal\"\n    \"time\"\n\n    \"github.com/gorilla/mux\"\n)\n\nfunc main() {\n    var wait time.Duration\n    flag.DurationVar(&wait, \"graceful-timeout\", time.Second * 15, \"the duration for which the server gracefully wait for existing connections to finish - e.g. 15s or 1m\")\n    flag.Parse()\n\n    r := mux.NewRouter()\n    // Add your routes as needed\n\n    srv := &http.Server{\n        Addr:         \"0.0.0.0:8080\",\n        // Good practice to set timeouts to avoid Slowloris attacks.\n        WriteTimeout: time.Second * 15,\n        ReadTimeout:  time.Second * 15,\n        IdleTimeout:  time.Second * 60,\n        Handler: r, // Pass our instance of gorilla/mux in.\n    }\n\n    // Run our server in a goroutine so that it doesn't block.\n    go func() {\n        if err := srv.ListenAndServe(); err != nil {\n            log.Println(err)\n        }\n    }()\n\n    c := make(chan os.Signal, 1)\n    // We'll accept graceful shutdowns when quit via SIGINT (Ctrl+C)\n    // SIGKILL, SIGQUIT or SIGTERM (Ctrl+/) will not be caught.\n    signal.Notify(c, os.Interrupt)\n\n    // Block until we receive our signal.\n    <-c\n\n    // Create a deadline to wait for.\n    ctx, cancel := context.WithTimeout(context.Background(), wait)\n    defer cancel()\n    // Doesn't block if no connections, but will otherwise wait\n    // until the timeout deadline.\n    srv.Shutdown(ctx)\n    // Optionally, you could run srv.Shutdown in a goroutine and block on\n    // <-ctx.Done() if your application should wait for other services\n    // to finalize based on context cancellation.\n    log.Println(\"shutting down\")\n    os.Exit(0)\n}\n```\n\n----------------------------------------\n\nTITLE: Printing ValidationError Hierarchy in Go\nDESCRIPTION: This code snippet demonstrates how to print the hierarchy of a `ValidationError` in Go using the `%#v` format specifier.  This prints a detailed, hierarchical representation of the error, including the location in both the instance and schema documents where the validation failed.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/santhosh-tekuri/jsonschema/v5/README.md#_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\nfmt.Printf(\"%#v\\n\", err) // using %#v prints errors hierarchy\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Credentials Directly\nDESCRIPTION: These commands show how to authenticate with a registry using the `--creds` flag, providing the username and password directly.  The first command inspects the image, and the second command copies an image to a local OCI image. This method allows for non-interactive authentication, useful in scripts or automated processes.\nSOURCE: https://github.com/containers/skopeo/blob/main/README.md#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ skopeo inspect --creds=testuser:testpassword docker://myregistrydomain.com:5000/busybox\n{\"Tag\":\"latest\",\"Digest\":\"sha256:473bb2189d7b913ed7187a33d11e743fdc2f88931122a44d91a301b64419f092\",\"RepoTags\":[\"latest\"],\"Comment\":\"\",\"Created\":\"2016-01-15T18:06:41.282540103Z\",\"ContainerConfig\":{\"Hostname\":\"aded96b43f48\",\"Domainname\":\"\",\"User\":\"\",\"AttachStdin\":false,\"AttachStdout\":false,\"AttachStderr\":false,\"Tty\":false,\"OpenStdin\":false,\"StdinOnce\":false,\"Env\":null,\"Cmd\":[\"/bin/sh\",\"-c\",\"#(nop) CMD [\\\"sh\\\"]\"],\"Image\":\"9e77fef7a1c9f989988c06620dabc4020c607885b959a2cbd7c2283c91da3e33\",\"Volumes\":null,\"WorkingDir\":\"\",\"Entrypoint\":null,\"OnBuild\":null,\"Labels\":null},\"DockerVersion\":\"1.8.3\",\"Author\":\"\",\"Config\":{\"Hostname\":\"aded96b43f48\",\"Domainname\":\"\",\"User\":\"\",\"AttachStdin\":false,\"AttachStdout\":false,\"AttachStderr\":false,\"Tty\":false,\"OpenStdin\":false,\"StdinOnce\":false,\"Env\":null,\"Cmd\":[\"sh\"],\"Image\":\"9e77fef7a1c9f989988c06620dabc4020c607885b959a2cbd7c2283c91da3e33\",\"Volumes\":null,\"WorkingDir\":\"\",\"Entrypoint\":null,\"OnBuild\":null,\"Labels\":null},\"Architecture\":\"amd64\",\"Os\":\"linux\"}\n```\n\nLANGUAGE: console\nCODE:\n```\n$ skopeo copy --src-creds=testuser:testpassword docker://myregistrydomain.com:5000/private oci:local_oci_image\n```\n\n----------------------------------------\n\nTITLE: Struct Validation with govalidator\nDESCRIPTION: This snippet demonstrates how to validate the fields of a struct using the `ValidateStruct` function and the `type` tag. The `IsType` validator is used through struct tags. It validates the data types of `Name`, `Age`, and `Meta` fields of the `User` struct.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/asaskevich/govalidator/README.md#_snippet_8\n\nLANGUAGE: go\nCODE:\n```\ntype User\tstruct {\n  Name string      `valid:\"type(string)\"`\n  Age  int         `valid:\"type(int)\"`\n  Meta interface{} `valid:\"type(string)\"`\n}\nresult, err := govalidator.ValidateStruct(User{\"Bob\", 20, \"meta\"})\nif err != nil {\n\tprintln(\"error: \" + err.Error())\n}\nprintln(result)\n```\n\n----------------------------------------\n\nTITLE: Using Denco as URL Router in Go\nDESCRIPTION: This snippet demonstrates how to use Denco as a URL router. It defines a simple route struct and builds a router with several URL patterns, including static filepaths and named parameters. It then uses the `Lookup` method to match URLs against the defined routes and extract parameters. The output shows the matched route, parameters, and a boolean indicating whether a match was found.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/go-openapi/runtime/middleware/denco/README.md#_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/go-openapi/runtime/middleware/denco\"\n)\n\ntype route struct {\n\tname string\n}\n\nfunc main() {\n\trouter := denco.New()\n\trouter.Build([]denco.Record{\n\t\t{\"/\", &route{\"root\"}},\n\t\t{\"/user/:id\", &route{\"user\"}},\n\t\t{\"/user/:name/:id\", &route{\"username\"}},\n\t\t{\"/static/*filepath\", &route{\"static\"}},\n\t})\n\n\tdata, params, found := router.Lookup(\"/\")\n\t// print `&main.route{name:\"root\"}, denco.Params(nil), true`.\n\tfmt.Printf(\"%#v, %#v, %#v\\n\", data, params, found)\n\n\tdata, params, found = router.Lookup(\"/user/hoge\")\n\t// print `&main.route{name:\"user\"}, denco.Params{denco.Param{Name:\"id\", Value:\"hoge\"}}, true`.\n\tfmt.Printf(\"%#v, %#v, %#v\\n\", data, params, found)\n\n\tdata, params, found = router.Lookup(\"/user/hoge/7\")\n\t// print `&main.route{name:\"username\"}, denco.Params{denco.Param{Name:\"name\", Value:\"hoge\"}, denco.Param{Name:\"id\", Value:\"7\"}}, true`.\n\tfmt.Printf(\"%#v, %#v, %#v\\n\", data, params, found)\n\n\tdata, params, found = router.Lookup(\"/static/path/to/file\")\n\t// print `&main.route{name:\"static\"}, denco.Params{denco.Param{Name:\"filepath\", Value:\"path/to/file\"}}, true`.\n\tfmt.Printf(\"%#v, %#v, %#v\\n\", data, params, found)\n}\n```\n\n----------------------------------------\n\nTITLE: Capturing HTTP Metrics in Go\nDESCRIPTION: This code snippet demonstrates how to wrap an existing http.Handler to capture metrics such as response code, duration, and bytes written. It uses the httpsnoop.CaptureMetrics function to wrap the handler and logs the request details.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/felixge/httpsnoop/README.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// myH is your app's http handler, perhaps a http.ServeMux or similar.\nvar myH http.Handler\n// wrappedH wraps myH in order to log every request.\nwrappedH := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\tm := httpsnoop.CaptureMetrics(myH, w, r)\n\tlog.Printf(\n\t\t\"%s %s (code=%d dt=%s written=%d)\",\n\t\tr.Method,\n\t\tr.URL,\n\t\tm.Code,\n\t\tm.Duration,\n\t\tm.Written,\n\t)\n})\nhttp.ListenAndServe(\":8080\", wrappedH)\n```\n\n----------------------------------------\n\nTITLE: JSON Schema with $ref definition\nDESCRIPTION: This JSON schema defines a reference to an 'employee' definition located in the 't.json' file.  It uses the `$ref` keyword to point to the definition, allowing for modular schema design.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/santhosh-tekuri/jsonschema/v5/README.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n      \"$ref\": \"t.json#/definitions/employee\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Authenticated SQLite Database\nDESCRIPTION: This example shows how to create a SQLite database protected by user authentication using a connection string. The `_auth`, `_auth_user`, and `_auth_pass` parameters are used to enable authentication and create an initial administrator user with the username 'admin' and password 'admin'.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/mattn/go-sqlite3/README.md#_snippet_20\n\nLANGUAGE: sql\nCODE:\n```\nfile:test.s3db?_auth&_auth_user=admin&_auth_pass=admin\n```\n\n----------------------------------------\n\nTITLE: Override Standard Library Logger in Go with Logrus\nDESCRIPTION: This snippet shows how to override the standard library's log output to use Logrus.  It configures Logrus with a JSON formatter and then sets the standard library's output to Logrus' io.Writer. This allows all standard library log messages to be formatted and processed by Logrus.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/sirupsen/logrus/README.md#_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nlogger := logrus.New()\nlogger.Formatter = &logrus.JSONFormatter{}\n\n// Use logrus for standard log output\n// Note that `log` here references stdlib's log\n// Not logrus imported under the name `log`.\nlog.SetOutput(logger.Writer())\n```\n\n----------------------------------------\n\nTITLE: Importing Google Protobuf Packages in Go\nDESCRIPTION: This snippet showcases the explicit import of various Google Protobuf packages in a Go project. These packages provide functionalities for encoding, decoding, reflection, and other utilities related to Protocol Buffers. They're crucial for defining data structures and managing data serialization.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/modules.txt#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\ngoogle.golang.org/protobuf/encoding/protojson\ngoogle.golang.org/protobuf/encoding/prototext\ngoogle.golang.org/protobuf/encoding/protowire\ngoogle.golang.org/protobuf/internal/descfmt\ngoogle.golang.org/protobuf/internal/descopts\ngoogle.golang.org/protobuf/internal/detrand\ngoogle.golang.org/protobuf/internal/editiondefaults\ngoogle.golang.org/protobuf/internal/editionssupport\ngoogle.golang.org/protobuf/internal/encoding/defval\ngoogle.golang.org/protobuf/internal/encoding/json\ngoogle.golang.org/protobuf/internal/encoding/messageset\ngoogle.golang.org/protobuf/internal/encoding/tag\ngoogle.golang.org/protobuf/internal/encoding/text\ngoogle.golang.org/protobuf/internal/errors\ngoogle.golang.org/protobuf/internal/filedesc\ngoogle.golang.org/protobuf/internal/filetype\ngoogle.golang.org/protobuf/internal/flags\ngoogle.golang.org/protobuf/internal/genid\ngoogle.golang.org/protobuf/internal/impl\ngoogle.golang.org/protobuf/internal/order\ngoogle.golang.org/protobuf/internal/pragma\ngoogle.golang.org/protobuf/internal/protolazy\ngoogle.golang.org/protobuf/internal/set\ngoogle.golang.org/protobuf/internal/strs\ngoogle.golang.org/protobuf/internal/version\ngoogle.golang.org/protobuf/proto\ngoogle.golang.org/protobuf/protoadapt\ngoogle.golang.org/protobuf/reflect/protodesc\ngoogle.golang.org/protobuf/reflect/protoreflect\ngoogle.golang.org/protobuf/reflect/protoregistry\ngoogle.golang.org/protobuf/runtime/protoiface\ngoogle.golang.org/protobuf/runtime/protoimpl\ngoogle.golang.org/protobuf/types/descriptorpb\ngoogle.golang.org/protobuf/types/gofeaturespb\ngoogle.golang.org/protobuf/types/known/anypb\ngoogle.golang.org/protobuf/types/known/durationpb\ngoogle.golang.org/protobuf/types/known/timestamppb\n```\n\n----------------------------------------\n\nTITLE: ToString Conversion with govalidator\nDESCRIPTION: This snippet shows how to convert a struct to a string representation using the `ToString` function. This is useful for logging or debugging purposes where a string representation of a struct is required.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/asaskevich/govalidator/README.md#_snippet_9\n\nLANGUAGE: go\nCODE:\n```\ntype User struct {\n\tFirstName string\n\tLastName string\n}\n\nstr := govalidator.ToString(&User{\"John\", \"Juan\"})\nprintln(str)\n```\n\n----------------------------------------\n\nTITLE: Listing tags including untagged images in skopeo\nDESCRIPTION: This example demonstrates listing tags, including source-index entries for untagged images, from a Docker archive. It uses the `docker-archive` transport with `skopeo list-tags`. The JSON output includes a tag named `@2` representing an untagged image.\nSOURCE: https://github.com/containers/skopeo/blob/main/docs/skopeo-list-tags.1.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ skopeo list-tags docker-archive:/tmp/four-tags-with-an-untag.tar\n{\n    \"Tags\": [\n        \"image1:tag1\",\n        \"image2:tag2\",\n        \"@2\",\n        \"image4:tag4\"\n    ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Running Container with ctr.exe - PowerShell\nDESCRIPTION: This snippet demonstrates how to run a container using ctr.exe with the io.containerd.runhcs.v1 runtime. It pulls the nanoserver image and executes a simple command to print \"Hello World!\" inside the container.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/Microsoft/hcsshim/README.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nC:\\> ctr.exe run --runtime io.containerd.runhcs.v1 --rm mcr.microsoft.com/windows/nanoserver:2004 windows-test cmd /c \"echo Hello World!\"\n```\n\n----------------------------------------\n\nTITLE: Custom Type Validation in Go\nDESCRIPTION: This snippet demonstrates how to implement custom validation for custom types using govalidator.CustomTypeTagMap.  It validates a CustomByteArray type and a StructWithCustomByteArray struct, including dependent validation.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/asaskevich/govalidator/README.md#_snippet_20\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/asaskevich/govalidator\"\n\ntype CustomByteArray [6]byte // custom types are supported and can be validated\n\ntype StructWithCustomByteArray struct {\n  ID              CustomByteArray `valid:\"customByteArrayValidator,customMinLengthValidator\"` // multiple custom validators are possible as well and will be evaluated in sequence\n  Email           string          `valid:\"email\"`\n  CustomMinLength int             `valid:\"-\"`\n}\n\ngovalidator.CustomTypeTagMap.Set(\"customByteArrayValidator\", func(i interface{}, context interface{}) bool {\n  switch v := context.(type) { // you can type switch on the context interface being validated\n  case StructWithCustomByteArray:\n    // you can check and validate against some other field in the context,\n    // return early or not validate against the context at all – your choice\n  case SomeOtherType:\n    // ...\n  default:\n    // expecting some other type? Throw/panic here or continue\n  }\n\n  switch v := i.(type) { // type switch on the struct field being validated\n  case CustomByteArray:\n    for _, e := range v { // this validator checks that the byte array is not empty, i.e. not all zeroes\n      if e != 0 {\n        return true\n      }\n    }\n  }\n  return false\n})\ngovalidator.CustomTypeTagMap.Set(\"customMinLengthValidator\", func(i interface{}, context interface{}) bool {\n  switch v := context.(type) { // this validates a field against the value in another field, i.e. dependent validation\n  case StructWithCustomByteArray:\n    return len(v.ID) >= v.CustomMinLength\n  }\n  return false\n})\n```\n\n----------------------------------------\n\nTITLE: Decoding TOML into Go Struct\nDESCRIPTION: This snippet shows how to decode a TOML string into a Go struct. It requires the `github.com/BurntSushi/toml` and `time` packages. It defines a struct `Config` with fields corresponding to the TOML keys and uses `toml.Decode` to populate the struct from the TOML data.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/BurntSushi/toml/README.md#_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype Config struct {\n\tAge        int\n\tCats       []string\n\tPi         float64\n\tPerfection []int\n\tDOB        time.Time\n}\n\nvar conf Config\n_, err := toml.Decode(tomlData, &conf)\n```\n\n----------------------------------------\n\nTITLE: Accessing flag values after parsing\nDESCRIPTION: This snippet shows how to access the values of the defined flags after parsing using either the pointer `*ip` or the bound variable `flagvar`. The values are then printed to the console using `fmt.Println()`.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/spf13/pflag/README.md#_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\nfmt.Println(\"ip has value \", *ip)\nfmt.Println(\"flagvar has value \", flagvar)\n```\n\n----------------------------------------\n\nTITLE: Encrypt Specific Image Layer\nDESCRIPTION: Encrypts only a specific layer of a container image. The `--encrypt-layer` option is used to specify the index of the layer to encrypt, starting from 0.  Negative indexes can be used for layers at the end of the image (e.g. -1 for the last layer).\nSOURCE: https://github.com/containers/skopeo/blob/main/docs/skopeo-copy.1.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nskopeo copy --encryption-key jwe:./public.key --encrypt-layer 1 oci:local_nginx:1.17.8 oci:try-encrypt:encrypted\n```\n\n----------------------------------------\n\nTITLE: Replacing standard JSON Unmarshal with json-iterator in Go\nDESCRIPTION: This snippet illustrates how to replace the standard `encoding/json` import and `json.Unmarshal` function with the `json-iterator/go` equivalent for decoding JSON data in Go. It involves importing the `jsoniter` package, configuring it to be compatible with the standard library, and then using `json.Unmarshal` for decoding.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/json-iterator/go/README.md#_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nimport \"encoding/json\"\njson.Unmarshal(input, &data)\n```\n\n----------------------------------------\n\nTITLE: Applying Middleware to Router in Go\nDESCRIPTION: This snippet shows how to add middleware to a Gorilla Mux router using the `Use()` method. It demonstrates how the middleware is applied to all routes defined on the router.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/gorilla/mux/README.md#_snippet_27\n\nLANGUAGE: go\nCODE:\n```\nr := mux.NewRouter()\nr.HandleFunc(\"/\", handler)\nr.Use(loggingMiddleware)\n```\n\n----------------------------------------\n\nTITLE: Running pre-commit checks with Make\nDESCRIPTION: Runs the project's pre-commit checks using `make precommit`. This command formats the code, checks the status of go module files and verifies other aspects of the project to ensure consistency.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nmake precommit\n```\n\n----------------------------------------\n\nTITLE: Getting Path Parameter Values in Go\nDESCRIPTION: This snippet shows two ways to retrieve path parameter values using Denco. The first method uses the `denco.Params.Get` method to directly access a parameter by name. The second method iterates through the `denco.Params` slice and checks each parameter's `Name` field.  Both methods achieve the same result of extracting and printing the value of the 'name' parameter from the URL.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/go-openapi/runtime/middleware/denco/README.md#_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/go-openapi/runtime/middleware/denco\"\n)\n\nfunc main() {\n\trouter := denco.New()\n\tif err := router.Build([]denco.Record{\n\t\t{\"/user/:name/:id\", \"route1\"},\n\t}); err != nil {\n\t\tpanic(err)\n\t}\n\n\t// 1. Using denco.Params.Get method.\n\t_, params, _ := router.Lookup(\"/user/alice/1\")\n\tname := params.Get(\"name\")\n\tif name != \"\" {\n\t\tfmt.Printf(\"Hello %s.\\n\", name) // prints \"Hello alice.\".\n\t}\n\n\t// 2. Find by loop.\n\tfor _, param := range params {\n\t\tif param.Name == \"name\" {\n\t\t\tfmt.Printf(\"Hello %s.\\n\", name) // prints \"Hello alice.\".\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Generating ULID from Timestamp and Entropy in Go\nDESCRIPTION: This Go code snippet demonstrates how to generate a ULID using a specific timestamp and a monotonic entropy source. It initializes a time, creates a new random number generator seeded with the timestamp, and then generates a ULID using the `ulid.MustNew` function, combining the timestamp and the monotonic entropy.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/oklog/ulid/README.md#_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nfunc ExampleULID() {\n\tt := time.Unix(1000000, 0)\n\tentropy := ulid.Monotonic(rand.New(rand.NewSource(t.UnixNano())), 0)\n\tfmt.Println(ulid.MustNew(ulid.Timestamp(t), entropy))\n\t// Output: 0000XSNJG0MQJHBF4QX1EFD6Y3\n\n}\n```\n\n----------------------------------------\n\nTITLE: Returning a multierror conditionally with ErrorOrNil\nDESCRIPTION: This snippet shows how to use the `ErrorOrNil` function to return a `multierror.Error` only if there are errors accumulated. If no errors were added, it returns `nil`, indicating that there were no errors. This helps prevent returning a multierror when it's not needed.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/hashicorp/go-multierror/README.md#_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nvar result *multierror.Error\n\n// ... accumulate errors here\n\n// Return the `error` only if errors were added to the multierror, otherwise\n// return nil since there are no errors.\nreturn result.ErrorOrNil()\n```\n\n----------------------------------------\n\nTITLE: xxhash Sum64String Function in Go\nDESCRIPTION: The Sum64String function calculates the 64-bit xxHash of a string. It allows direct hashing of strings using the xxHash algorithm. No external dependencies are required.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/klauspost/compress/zstd/internal/xxhash/README.md#_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nfunc Sum64String(s string) uint64\n```\n\n----------------------------------------\n\nTITLE: Basic ZFS Operations in Go\nDESCRIPTION: This Go code snippet demonstrates basic ZFS operations, including creating a filesystem, taking a snapshot, cloning the snapshot, and then destroying the clone, snapshot, and filesystem. It assumes a zpool named 'test' exists. Error handling is omitted for brevity, but should be included in production code. Requires the 'github.com/mistifyio/go-zfs' package.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/mistifyio/go-zfs/v3/README.md#_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\n//assuming a zpool named test\n//error handling omitted\n\n\nf, err := zfs.CreateFilesystem(\"test/snapshot-test\", nil)\nok(t, err)\n\ns, err := f.Snapshot(\"test\", nil)\nok(t, err)\n\n// snapshot is named \"test/snapshot-test@test\"\n\nc, err := s.Clone(\"test/clone-test\", nil)\n\nerr := c.Destroy()\nerr := s.Destroy()\nerr := f.Destroy()\n```\n\n----------------------------------------\n\nTITLE: Initializing Logger with Implementation in Go\nDESCRIPTION: This snippet demonstrates how to initialize a logger with a specific implementation (logimpl) in the main function. It showcases the decoupling provided by logr, where the application chooses a logging library and creates a logger instance.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/go-logr/logr/README.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nfunc main() {\n    // ... other setup code ...\n\n    // Create the \"root\" logger.  We have chosen the \"logimpl\" implementation,\n    // which takes some initial parameters and returns a logr.Logger.\n    logger := logimpl.New(param1, param2)\n\n    // ... other setup code ...\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Version Constraints in Go\nDESCRIPTION: This code snippet demonstrates how to check if a version meets a specific constraint using `semver.NewConstraint` and the `Check` method. It creates a constraint, parses a version string, and then checks if the version satisfies the constraint.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/Masterminds/semver/v3/README.md#_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nc, err := semver.NewConstraint(\">= 1.2.3\")\nif err != nil {\n    // Handle constraint not being parsable.\n}\n\nv, err := semver.NewVersion(\"1.3\")\nif err != nil {\n    // Handle version not being parsable.\n}\n// Check if the version meets the constraints. The variable a will be true.\na := c.Check(v)\n```\n\n----------------------------------------\n\nTITLE: Using gzip.NewWriterLevel with StatelessCompression in Go\nDESCRIPTION: This code snippet demonstrates how to use the gzip package with stateless compression. It creates a gzip writer with the `gzip.StatelessCompression` level, wraps it with a `bufio.Writer` for buffering, and writes data to the writer. The use of `bufio.Writer` allows controlling the write size, which affects output size in stateless compression.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/klauspost/compress/README.md#_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\n\t// replace 'ioutil.Discard' with your output.\n\tgzw, err := gzip.NewWriterLevel(ioutil.Discard, gzip.StatelessCompression)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer gzw.Close()\n\n\tw := bufio.NewWriterSize(gzw, 4096)\n\tdefer w.Flush()\n\t\n\t// Write to 'w' \n```\n\n----------------------------------------\n\nTITLE: xxhash Digest Type and New Function in Go\nDESCRIPTION: The Digest type implements the hash.Hash64 interface and allows incremental hashing. The New function creates a new Digest instance for use in hashing operations.  It leverages Go's standard library 'hash' package.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/klauspost/compress/zstd/internal/xxhash/README.md#_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\ntype Digest struct{ ... }\nfunc New() *Digest\n```\n\n----------------------------------------\n\nTITLE: Conditional Logging with log.Noop in Go\nDESCRIPTION: This snippet demonstrates how to conditionally log a field based on the environment. The `log.Noop()` function is used when the environment is not \"dev\", effectively preventing the customer ID from being logged in production. The `os` package is required to read environment variables.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/opentracing/opentracing-go/README.md#_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\nfunc Customer(order *Order) log.Field {\n    if os.Getenv(\"ENVIRONMENT\") == \"dev\" {\n        return log.String(\"customer\", order.Customer.ID)\n    }\n    return log.Noop()\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Build Dependencies on Ubuntu\nDESCRIPTION: Installs dependencies needed for building Skopeo from source on Ubuntu using apt. This includes development libraries for gpgme, assuan, and btrfs, along with pkg-config.  `libbtrfs-dev` requires Ubuntu 18.10 or higher.\nSOURCE: https://github.com/containers/skopeo/blob/main/install.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n# Ubuntu (`libbtrfs-dev` requires Ubuntu 18.10 and above):\nsudo apt install libgpgme-dev libassuan-dev libbtrfs-dev pkg-config\n```\n\n----------------------------------------\n\nTITLE: Route Variables with Regular Expressions in Go\nDESCRIPTION: This code snippet demonstrates how to define route variables with optional regular expressions using the gorilla/mux package in Go.  It defines routes with named variables and regular expression constraints.  These variables can be extracted using mux.Vars().\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/gorilla/mux/README.md#_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nr := mux.NewRouter()\nr.HandleFunc(\"/products/{key}\", ProductHandler)\nr.HandleFunc(\"/articles/{category}/\", ArticlesCategoryHandler)\nr.HandleFunc(\"/articles/{category}/{id:[0-9]+}\", ArticleHandler)\n```\n\n----------------------------------------\n\nTITLE: Cloning and Building Skopeo\nDESCRIPTION: Clones the Skopeo repository, navigates into it, and builds the skopeo binary. It assumes the user has configured their GOPATH.\nSOURCE: https://github.com/containers/skopeo/blob/main/install.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/containers/skopeo $GOPATH/src/github.com/containers/skopeo\ncd $GOPATH/src/github.com/containers/skopeo && make bin/skopeo\n```\n\n----------------------------------------\n\nTITLE: Getting flag value with flagset.GetInt()\nDESCRIPTION: This snippet demonstrates how to retrieve the int value of a flag from a pflag.FlagSet using the GetInt() method. The flag must exist and be of type int, otherwise, an error will be returned.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/spf13/pflag/README.md#_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\ni, err := flagset.GetInt(\"flagname\")\n```\n\n----------------------------------------\n\nTITLE: Installing Fedora dependencies with yum\nDESCRIPTION: This command installs the necessary development tools and libraries for compiling go-sqlite3 on Fedora. It uses `yum` to install the 'Development Tools' and 'Development Libraries' groups.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/mattn/go-sqlite3/README.md#_snippet_10\n\nLANGUAGE: Bash\nCODE:\n```\nsudo yum groupinstall \"Development Tools\" \"Development Libraries\"\n```\n\n----------------------------------------\n\nTITLE: Building URLs with Host and Query Parameters in Go\nDESCRIPTION: This snippet demonstrates how to create a route with host, path, and query parameters and then use the `URL()` method to generate a complete URL, incorporating values for all defined parameters.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/gorilla/mux/README.md#_snippet_19\n\nLANGUAGE: go\nCODE:\n```\nr := mux.NewRouter()\nr.Host(\"{subdomain}.example.com\").\n  Path(\"/articles/{category}/{id:[0-9]+}\").\n  Queries(\"filter\", \"{filter}\").\n  HandlerFunc(ArticleHandler).\n  Name(\"article\")\n\n// url.String() will be \"http://news.example.com/articles/technology/42?filter=gorilla\"\nurl, err := r.Get(\"article\").URL(\"subdomain\", \"news\",\n                                 \"category\", \"technology\",\n                                 \"id\", \"42\",\n                                 \"filter\", \"gorilla\")\n```\n\n----------------------------------------\n\nTITLE: Using concurrent.Executor in Go\nDESCRIPTION: This snippet demonstrates how to use the `concurrent.Executor` to manage goroutines. It creates an unbounded executor, starts a goroutine that executes until the context is cancelled, and then stops the executor, waiting for all goroutines to finish. This is useful for controlling the lifecycle and handling panics in goroutines.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/modern-go/concurrent/README.md#_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nexecutor := concurrent.NewUnboundedExecutor()\nexecutor.Go(func(ctx context.Context) {\n    everyMillisecond := time.NewTicker(time.Millisecond)\n    for {\n        select {\n        case <-ctx.Done():\n            fmt.Println(\"goroutine exited\")\n            return\n        case <-everyMillisecond.C:\n            // do something\n        }\n    }\n})\ntime.Sleep(time.Second)\nexecutor.StopAndWaitForever()\nfmt.Println(\"executor stopped\")\n```\n\n----------------------------------------\n\nTITLE: Running tests using Make\nDESCRIPTION: Executes the project's test suite using the `make test` command.  This is preferred over using `go test` directly, as it may include additional setup or checks.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nmake test\n```\n\n----------------------------------------\n\nTITLE: Developer Certificate of Origin (DCO) v1.1\nDESCRIPTION: This snippet presents the Developer Certificate of Origin (DCO) version 1.1. By signing off on a commit, a developer certifies that they meet the conditions outlined in the DCO, regarding the origin and licensing of their contribution. It's a declaration of the authenticity and licensing compliance of the contributed code.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/opencontainers/go-digest/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nDeveloper Certificate of Origin\nVersion 1.1\n\nCopyright (C) 2004, 2006 The Linux Foundation and its contributors.\n1 Letterman Drive\nSuite D4700\nSan Francisco, CA, 94129\n\nEveryone is permitted to copy and distribute verbatim copies of this\nlicense document, but changing it is not allowed.\n\n\nDeveloper's Certificate of Origin 1.1\n\nBy making a contribution to this project, I certify that:\n\n(a) The contribution was created in whole or in part by me and I\n    have the right to submit it under the open source license\n    indicated in the file; or\n\n(b) The contribution is based upon previous work that, to the best\n    of my knowledge, is covered under an appropriate open source\n    license and I have the right under that license to submit that\n    work with modifications, whether created in whole or in part\n    by me, under the same open source license (unless I am\n    permitted to submit under a different license), as indicated\n    in the file; or\n\n(c) The contribution was provided directly to me by some other\n    person who certified (a), (b) or (c) and I have not modified\n    it.\n\n(d) I understand and agree that this project and the contribution\n    are public and that a record of the contribution (including all\n    personal information I submit with it, including my sign-off) is\n    maintained indefinitely and may be redistributed consistent with\n    this project or the open source license(s) involved.\n\n```\n\n----------------------------------------\n\nTITLE: Getting a stdlib *http.Client with retries in Go\nDESCRIPTION: This code snippet shows how to convert a `*retryablehttp.Client` to a standard `*http.Client`. This allows the use of `retryablehttp` with minimal code changes. The example configures the retryable client with a retry limit and then converts it.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/hashicorp/go-retryablehttp/README.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nretryClient := retryablehttp.NewClient()\nretryClient.RetryMax = 10\n\nstandardClient := retryClient.StandardClient() // *http.Client\n```\n\n----------------------------------------\n\nTITLE: DSN Example\nDESCRIPTION: Shows an example of a Data Source Name (DSN) used for connecting to a SQLite database in memory with shared cache enabled.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/mattn/go-sqlite3/README.md#_snippet_3\n\nLANGUAGE: Text\nCODE:\n```\nfile:test.db?cache=shared&mode=memory\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Validator in govalidator\nDESCRIPTION: This code illustrates the change in how custom validators are added to prevent data races. It shows the old (incorrect) way and the new (correct) way using `CustomTypeTagMap.Set`.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/asaskevich/govalidator/README.md#_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\nimport \"github.com/asaskevich/govalidator\"\n\n// before\ngovalidator.CustomTypeTagMap[\"customByteArrayValidator\"] = func(i interface{}, o interface{}) bool {\n  // ...\n}\n\n// after\ngovalidator.CustomTypeTagMap.Set(\"customByteArrayValidator\", func(i interface{}, o interface{}) bool {\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Parsing Semantic Versions in Go\nDESCRIPTION: This code snippet demonstrates how to parse a semantic version string using the `semver.NewVersion` function. It returns a `Version` object and an error if parsing fails. The Version object can then be used for comparisons and other operations.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/Masterminds/semver/v3/README.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nv, err := semver.NewVersion(\"1.2.3-beta.1+build345\")\n```\n\n----------------------------------------\n\nTITLE: Installing Skopeo on openSUSE\nDESCRIPTION: This command installs the skopeo package using the zypper package manager on openSUSE. It requires root privileges.\nSOURCE: https://github.com/containers/skopeo/blob/main/install.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nsudo zypper install skopeo\n```\n\n----------------------------------------\n\nTITLE: Building for macOS on ARM64 with libsqlite3 and go build\nDESCRIPTION: This command compiles the go-sqlite3 package for macOS on ARM64 architecture, linking directly to the `libsqlite3` library. It specifies the `libsqlite3`, `darwin`, and `arm64` build tags.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/mattn/go-sqlite3/README.md#_snippet_17\n\nLANGUAGE: Bash\nCODE:\n```\ngo build -tags \"libsqlite3 darwin arm64\"\n```\n\n----------------------------------------\n\nTITLE: Replacing Go Dependency with go mod edit\nDESCRIPTION: This snippet shows how to replace a dependency in the go.mod file with a specific version from a forked repository. The `go mod edit -replace` command is used to substitute the original dependency path with the path to the forked repository and a specific pseudo-version.\nSOURCE: https://github.com/containers/skopeo/blob/main/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\ngo mod edit -replace=github.com/containers/image/v5=github.com/$REPO/image/v5@$PSEUDO_VERSION\n```\n\n----------------------------------------\n\nTITLE: Listing Containers with Docker Engine API - Go\nDESCRIPTION: This snippet demonstrates how to list all containers using the Docker Engine API Go client. It initializes the Docker client, calls the ContainerList function with the 'All' option set to true, and then iterates through the returned containers to print their ID, image, and status. This requires the 'github.com/docker/docker/client' and 'github.com/docker/docker/api/types/container' packages.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/docker/docker/client/README.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/docker/docker/api/types/container\"\n\t\"github.com/docker/docker/client\"\n)\n\nfunc main() {\n\tapiClient, err := client.NewClientWithOpts(client.FromEnv)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer apiClient.Close()\n\n\tcontainers, err := apiClient.ContainerList(context.Background(), container.ListOptions{All: true})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfor _, ctr := range containers {\n\t\tfmt.Printf(\"%s %s (status: %s)\\n\", ctr.ID, ctr.Image, ctr.Status)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Skopeo on Alpine\nDESCRIPTION: This command installs the skopeo package using the apk package manager on Alpine Linux. It requires root privileges.\nSOURCE: https://github.com/containers/skopeo/blob/main/install.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nsudo apk add skopeo\n```\n\n----------------------------------------\n\nTITLE: Creating a Root Span in Go\nDESCRIPTION: This snippet illustrates how to create a root span, which has no parent. `opentracing.StartSpan` is called with only the operation name to create a root span.  `defer sp.Finish()` is essential to properly close the span when the operation completes, ensuring the tracing data is recorded correctly.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/opentracing/opentracing-go/README.md#_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nfunc xyz() {\n    ...\n    sp := opentracing.StartSpan(\"operation_name\")\n    defer sp.Finish()\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Type Checking with govalidator\nDESCRIPTION: This snippet illustrates the use of the `IsType` function to verify the data type of a variable. It checks if the provided value matches the specified type (string, int, *int). This function is especially useful with reflection and interface types.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/asaskevich/govalidator/README.md#_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nprintln(govalidator.IsType(\"Bob\", \"string\"))\nprintln(govalidator.IsType(1, \"int\"))\ni := 1\nprintln(govalidator.IsType(&i, \"*int\"))\n```\n\n----------------------------------------\n\nTITLE: Creating Authenticated SQLite Database with SHA1 Encoding\nDESCRIPTION: This example shows how to create a SQLite database protected by user authentication, specifying SHA1 as the password encoding algorithm. The `_auth_crypt=sha1` parameter configures the password encoding method.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/mattn/go-sqlite3/README.md#_snippet_21\n\nLANGUAGE: sql\nCODE:\n```\nfile:test.s3db?_auth&_auth_user=admin&_auth_pass=admin&_auth_crypt=sha1\n```\n\n----------------------------------------\n\nTITLE: Benchmark After Refactor PR\nDESCRIPTION: This snippet presents benchmark results after a code refactoring PR, showing minor improvements with reduced allocations compared to the initial benchmark. The benchmark was executed using `go test -bench Spec`.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/go-openapi/validate/BENCHMARK.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ngo test -bench Spec\ngoos: linux\ngoarch: amd64\npkg: github.com/go-openapi/validate\ncpu: AMD Ryzen 7 5800X 8-Core Processor\nBenchmark_KubernetesSpec/validating_kubernetes_API-16         \t       1\t4064535557 ns/op\t3379715592 B/op\t25320330 allocs/op\n```\n\n----------------------------------------\n\nTITLE: Building Named URLs with Gorilla Mux in Go\nDESCRIPTION: This snippet demonstrates how to define a named route and then build a URL for it using the `URL()` method. It covers both path variables and host/query value variables, showing how to construct complex URLs.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/gorilla/mux/README.md#_snippet_17\n\nLANGUAGE: go\nCODE:\n```\nr := mux.NewRouter()\nr.HandleFunc(\"/articles/{category}/{id:[0-9]+}\", ArticleHandler).\n  Name(\"article\")\n```\n\n----------------------------------------\n\nTITLE: Installing Skopeo on macOS\nDESCRIPTION: This command installs the skopeo package using the Homebrew package manager on macOS.  It assumes Homebrew is already installed.\nSOURCE: https://github.com/containers/skopeo/blob/main/install.md#_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nbrew install skopeo\n```\n\n----------------------------------------\n\nTITLE: Matching Headers with Regex in Go\nDESCRIPTION: This snippet shows how to use regular expressions to match headers within a route in Gorilla Mux. The `HeadersRegexp()` method allows you to define patterns for header values, enabling flexible request matching.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/gorilla/mux/README.md#_snippet_20\n\nLANGUAGE: go\nCODE:\n```\nr.HeadersRegexp(\"Content-Type\", \"application/(text|json)\")\n```\n\n----------------------------------------\n\nTITLE: Installing Cobra Library with Go\nDESCRIPTION: This command retrieves the latest version of the Cobra library using the `go get` command. It downloads and installs the necessary packages to integrate Cobra into your Go projects.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/spf13/cobra/README.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ngo get -u github.com/spf13/cobra@latest\n```\n\n----------------------------------------\n\nTITLE: Conditional Logrus Formatter in Go\nDESCRIPTION: This code shows how to conditionally set the Logrus formatter based on the environment. It uses a global `Environment` variable to determine whether to use JSONFormatter in production or TextFormatter in other environments. This demonstrates how to customize log output based on the application's environment.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/sirupsen/logrus/README.md#_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nimport (\n  log \"github.com/sirupsen/logrus\"\n)\n\nfunc init() {\n  // do something here to set environment depending on an environment variable\n  // or command-line flag\n  if Environment == \"production\" {\n    log.SetFormatter(&log.JSONFormatter{})\n  } else {\n    // The TextFormatter is default, you don't actually have to do this.\n    log.SetFormatter(&log.TextFormatter{})\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Routes in a Subrouter using gorilla/mux in Go\nDESCRIPTION: This code snippet shows how to register routes within a subrouter created using the gorilla/mux package in Go. The routes will only be matched if the subrouter's conditions are met. These conditions could include things such as a specific hostname.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/gorilla/mux/README.md#_snippet_13\n\nLANGUAGE: Go\nCODE:\n```\ns.HandleFunc(\"/products/\", ProductsHandler)\ns.HandleFunc(\"/products/{key}\", ProductHandler)\ns.HandleFunc(\"/articles/{category}/{id:[0-9]+}\", ArticleHandler)\n```\n\n----------------------------------------\n\nTITLE: Type Validator in Go\nDESCRIPTION: This snippet showcases the \"type(type)\" validator available in the govalidator library. This validator checks if a value conforms to the given type.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/asaskevich/govalidator/README.md#_snippet_16\n\nLANGUAGE: go\nCODE:\n```\n\"type(type)\": IsType,\n```\n\n----------------------------------------\n\nTITLE: xxhash Digest Sum64 Method in Go\nDESCRIPTION: The Sum64 method of the Digest type returns the 64-bit hash value. This method finalizes the hashing process and returns the calculated hash.  It is part of the hash.Hash64 interface implementation and requires a prior call to Write or WriteString.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/klauspost/compress/zstd/internal/xxhash/README.md#_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\nfunc (*Digest) Sum64() uint64\n```\n\n----------------------------------------\n\nTITLE: Installing ULID Package with Go\nDESCRIPTION: This shell command is used to install the `ulid` package from GitHub using the `go get` command. This package provides functionality for generating and working with ULIDs in Go applications.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/oklog/ulid/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngo get github.com/oklog/ulid\n```\n\n----------------------------------------\n\nTITLE: Inspecting a KSUID with Template Formatting\nDESCRIPTION: This command inspects a KSUID and outputs the components in a specific template format using the -f template and -t flags. The template defines how the Time and Payload components are displayed.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/segmentio/ksuid/README.md#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n$ ksuid -f template -t '{{ .Time }}: {{ .Payload }}' 0ujtsYcgvSTl8PAuAdqWYSMnLOv\n```\n\n----------------------------------------\n\nTITLE: Serving Single Page Applications with gorilla/mux in Go\nDESCRIPTION: This code shows how to serve a Single Page Application (SPA) using gorilla/mux. It defines a custom handler `spaHandler` that serves static files from a specified directory or the index file if the requested file does not exist. It also includes an API endpoint example at `/api/health`.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/gorilla/mux/README.md#_snippet_16\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n\t\"encoding/json\"\n\t\"log\"\n\t\"net/http\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"time\"\n\n\t\"github.com/gorilla/mux\"\n)\n\n// spaHandler implements the http.Handler interface, so we can use it\n// to respond to HTTP requests. The path to the static directory and\n// path to the index file within that static directory are used to\n// serve the SPA in the given static directory.\ntype spaHandler struct {\n\tstaticPath string\n\tindexPath  string\n}\n\n// ServeHTTP inspects the URL path to locate a file within the static dir\n// on the SPA handler. If a file is found, it will be served. If not, the\n// file located at the index path on the SPA handler will be served. This\n// is suitable behavior for serving an SPA (single page application).\nfunc (h spaHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n\t// Join internally call path.Clean to prevent directory traversal\n\tpath := filepath.Join(h.staticPath, r.URL.Path)\n\n\t// check whether a file exists or is a directory at the given path\n\tfi, err := os.Stat(path)\n\tif os.IsNotExist(err) || fi.IsDir() {\n\t\t// file does not exist or path is a directory, serve index.html\n\t\thttp.ServeFile(w, r, filepath.Join(h.staticPath, h.indexPath))\n\t\treturn\n\t}\n\n\tif err != nil {\n\t\t// if we got an error (that wasn't that the file doesn't exist) stating the\n\t\t// file, return a 500 internal server error and stop\n\t\thttp.Error(w, err.Error(), http.StatusInternalServerError)\n        return\n\t}\n\n\t// otherwise, use http.FileServer to serve the static file\n\thttp.FileServer(http.Dir(h.staticPath)).ServeHTTP(w, r)\n}\n\nfunc main() {\n\trouter := mux.NewRouter()\n\n\trouter.HandleFunc(\"/api/health\", func(w http.ResponseWriter, r *http.Request) {\n\t\t// an example API handler\n\t\tjson.NewEncoder(w).Encode(map[string]bool{\"ok\": true})\n\t})\n\n\tspa := spaHandler{staticPath: \"build\", indexPath: \"index.html\"}\n\trouter.PathPrefix(\"/\").Handler(spa)\n\n\tsrv := &http.Server{\n\t\tHandler: router,\n\t\tAddr:    \"127.0.0.1:8000\",\n\t\t// Good practice: enforce timeouts for servers you create!\n\t\tWriteTimeout: 15 * time.Second,\n\t\tReadTimeout:  15 * time.Second,\n\t}\n\n\tlog.Fatal(srv.ListenAndServe())\n}\n```\n\n----------------------------------------\n\nTITLE: Benchmark After GC Pressure Reduction\nDESCRIPTION: This snippet presents benchmark results after a PR focused on reducing GC pressure. It shows a significant reduction in allocations compared to the previous benchmarks, indicating further performance improvements.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/go-openapi/validate/BENCHMARK.md#_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ngoos: linux\ngoarch: amd64\npkg: github.com/go-openapi/validate\ncpu: AMD Ryzen 7 5800X 8-Core Processor             \nBenchmark_KubernetesSpec/validating_kubernetes_API-16         \t       1\t3758414145 ns/op\t2593881496 B/op\t17111373 allocs/op\n```\n\n----------------------------------------\n\nTITLE: Creating a Child Span in Go\nDESCRIPTION: This snippet demonstrates creating a child span given an existing parent span. `opentracing.StartSpan` is called with the operation name and `opentracing.ChildOf(parentSpan.Context())` to establish the parent-child relationship. It allows tracing the flow of execution across different functions or services. As with all spans, `defer sp.Finish()` is crucial to ensure proper span closure.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/opentracing/opentracing-go/README.md#_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nfunc xyz(parentSpan opentracing.Span, ...) {\n    ...\n    sp := opentracing.StartSpan(\n        \"operation_name\",\n        opentracing.ChildOf(parentSpan.Context()))\n    defer sp.Finish()\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Building Linux Guest Agent - PowerShell\nDESCRIPTION: This snippet demonstrates how to build the Linux guest agent by setting the GOOS environment variable to \"linux\" and then using the go build command. This configures the Go compiler to target the Linux operating system during the build process.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/Microsoft/hcsshim/README.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nC:\\> $env:GOOS=\"linux\"\nC:\\> go build .\\cmd\\gcs\\\n```\n\n----------------------------------------\n\nTITLE: Benchmark Initial Validation\nDESCRIPTION: This snippet shows the initial benchmark results for validating the Kubernetes API using the go-openapi/validate package. It indicates a large number of allocations (60,000,000) and a significant execution time.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/go-openapi/validate/BENCHMARK.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ngoos: linux\ngoarch: amd64\npkg: github.com/go-openapi/validate\ncpu: AMD Ryzen 7 5800X 8-Core Processor\nBenchmark_KubernetesSpec/validating_kubernetes_API-16         \t       1\t8549863982 ns/op\t7067424936 B/op\t59583275 allocs/op\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Slices with govalidator.Each\nDESCRIPTION: This snippet shows how to use `govalidator.Each` to iterate over a slice of interfaces and execute a function for each element.  It iterates over a slice of integers and prints each integer value.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/asaskevich/govalidator/README.md#_snippet_10\n\nLANGUAGE: go\nCODE:\n```\ndata := []interface{}{1, 2, 3, 4, 5}\nvar fn govalidator.Iterator = func(value interface{}, index int) {\n\tprintln(value.(int))\n}\ngovalidator.Each(data, fn)\n```\n\n----------------------------------------\n\nTITLE: Walking Registered Routes in Go\nDESCRIPTION: This snippet shows how to use the `Walk` function on `mux.Router` to iterate through all registered routes and print their details, including path templates, regular expressions, queries, and methods.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/gorilla/mux/README.md#_snippet_24\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"strings\"\n\n\t\"github.com/gorilla/mux\"\n)\n\nfunc handler(w http.ResponseWriter, r *http.Request) {\n\treturn\n}\n\nfunc main() {\n\tr := mux.NewRouter()\n\tr.HandleFunc(\"/\", handler)\n\tr.HandleFunc(\"/products\", handler).Methods(\"POST\")\n\tr.HandleFunc(\"/articles\", handler).Methods(\"GET\")\n\tr.HandleFunc(\"/articles/{id}\", handler).Methods(\"GET\", \"PUT\")\n\tr.HandleFunc(\"/authors\", handler).Queries(\"surname\", \"{surname}\")\n\terr := r.Walk(func(route *mux.Route, router *mux.Router, ancestors []*mux.Route) error {\n\t\tpathTemplate, err := route.GetPathTemplate()\n\t\tif err == nil {\n\t\t\tfmt.Println(\"ROUTE:\", pathTemplate)\n\t\t}\n\t\tpathRegexp, err := route.GetPathRegexp()\n\t\tif err == nil {\n\t\t\tfmt.Println(\"Path regexp:\", pathRegexp)\n\t\t}\n\t\tqueriesTemplates, err := route.GetQueriesTemplates()\n\t\tif err == nil {\n\t\t\tfmt.Println(\"Queries templates:\", strings.Join(queriesTemplates, \",\"))\n\t\t}\n\t\tqueriesRegexps, err := route.GetQueriesRegexp()\n\t\tif err == nil {\n\t\t\tfmt.Println(\"Queries regexps:\", strings.Join(queriesRegexps, \",\"))\n\t\t}\n\t\tmethods, err := route.GetMethods()\n\t\tif err == nil {\n\t\t\tfmt.Println(\"Methods:\", strings.Join(methods, \",\"))\n\t\t}\n\t\tfmt.Println()\n\t\treturn nil\n\t})\n\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n\n\thttp.Handle(\"/\", r)\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Output of Detailed Format\nDESCRIPTION: This JSON showcases the 'detailed' output format of a validation error.  It represents a hierarchical structure starting with a `valid` status and then detailing nested errors. Each error contains its own `keywordLocation`, `absoluteKeywordLocation`, and potentially further nested `errors`, allowing for precise diagnosis of validation failures.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/santhosh-tekuri/jsonschema/v5/README.md#_snippet_11\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"valid\": false,\n  \"keywordLocation\": \"\",\n  \"absoluteKeywordLocation\": \"file:///Users/santhosh/jsonschema/schema.json#\",\n  \"instanceLocation\": \"\",\n  \"errors\": [\n    {\n      \"valid\": false,\n      \"keywordLocation\": \"/$ref\",\n      \"absoluteKeywordLocation\": \"file:///Users/santhosh/jsonschema/schema.json#/$ref\",\n      \"instanceLocation\": \"\",\n      \"errors\": [\n        {\n          \"valid\": false,\n          \"keywordLocation\": \"/$ref/type\",\n          \"absoluteKeywordLocation\": \"file:///Users/santhosh/jsonschema/t.json#/definitions/employee/type\",\n          \"instanceLocation\": \"\",\n          \"error\": \"expected string, but got number\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Denco as HTTP Request Multiplexer in Go\nDESCRIPTION: This snippet demonstrates how to use Denco as an HTTP request multiplexer. It defines handler functions for different routes and then builds a handler using the `denco.NewMux` to route HTTP requests to appropriate handlers based on the URL and HTTP method (GET, POST). The example sets up routes for the root path and user path with a name parameter.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/go-openapi/runtime/middleware/denco/README.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\n\t\"github.com/go-openapi/runtime/middleware/denco\"\n)\n\nfunc Index(w http.ResponseWriter, r *http.Request, params denco.Params) {\n\tfmt.Fprintf(w, \"Welcome to Denco!\\n\")\n}\n\nfunc User(w http.ResponseWriter, r *http.Request, params denco.Params) {\n\tfmt.Fprintf(w, \"Hello %s!\\n\", params.Get(\"name\"))\n}\n\nfunc main() {\n\tmux := denco.NewMux()\n\thandler, err := mux.Build([]denco.Handler{\n\t\tmux.GET(\"/\", Index),\n\t\tmux.GET(\"/user/:name\", User),\n\t\tmux.POST(\"/user/:name\", User),\n\t})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tlog.Fatal(http.ListenAndServe(\":8080\", handler))\n}\n```\n\n----------------------------------------\n\nTITLE: Compute Manifest Digest using skopeo\nDESCRIPTION: This snippet shows how to compute the manifest digest of a file named `manifest.json` using the `skopeo manifest-digest` command. The command outputs the SHA256 digest of the manifest to standard output.\nSOURCE: https://github.com/containers/skopeo/blob/main/docs/skopeo-manifest-digest.1.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ skopeo manifest-digest manifest.json\nsha256:a59906e33509d14c036c8678d687bd4eec81ed7c4b8ce907b888c607f6a1e0e6\n```\n\n----------------------------------------\n\nTITLE: Reinstalling go-sqlite3\nDESCRIPTION: This command removes the downloaded repository from your disk and reinstalls it, which can resolve internal compiler errors during the installation process. This ensures a fresh installation of the library.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/mattn/go-sqlite3/README.md#_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\ngo install github.com/mattn/go-sqlite3\n```\n\n----------------------------------------\n\nTITLE: Using json-iterator Unmarshal in Go\nDESCRIPTION: This code snippet shows how to utilize json-iterator's `Unmarshal` function in Go after replacing the standard `encoding/json` package. It configures json-iterator for standard library compatibility and then uses its `Unmarshal` function to decode the `input` variable into the `data` variable.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/json-iterator/go/README.md#_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nimport jsoniter \"github.com/json-iterator/go\"\n\nvar json = jsoniter.ConfigCompatibleWithStandardLibrary\njson.Unmarshal(input, &data)\n```\n\n----------------------------------------\n\nTITLE: Adding a remote fork to the local repository\nDESCRIPTION: Adds a remote pointing to your forked repository on GitHub. Replace `<YOUR_FORK>` with a name for the remote (e.g., `origin`) and `<YOUR_GITHUB_USERNAME>` with your GitHub username.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ngit remote add <YOUR_FORK> git@github.com:<YOUR_GITHUB_USERNAME>/opentelemetry-go\n```\n\n----------------------------------------\n\nTITLE: Defining shorthand flags with IntP, BoolVarP, VarP\nDESCRIPTION: This snippet shows how to define flags with one-letter shorthands using the 'P' versions of the standard flag functions (IntP, BoolVarP, VarP).\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/spf13/pflag/README.md#_snippet_7\n\nLANGUAGE: Go\nCODE:\n```\nvar ip = flag.IntP(\"flagname\", \"f\", 1234, \"help message\")\nvar flagvar bool\nfunc init() {\n\tflag.BoolVarP(&flagvar, \"boolname\", \"b\", true, \"help message\")\n}\nflag.VarP(&flagVal, \"varname\", \"v\", \"help message\")\n```\n\n----------------------------------------\n\nTITLE: Decoding TOML with Custom Unmarshaler in Go\nDESCRIPTION: This Go code snippet shows how to use a custom `UnmarshalText` method to parse TOML values into a custom type, specifically a `mail.Address`. It defines an `address` type and implements the `UnmarshalText` method to parse email addresses, then uses `toml.Decode` to populate a struct containing a slice of these `address` types.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/BurntSushi/toml/README.md#_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// Create address type which satisfies the encoding.TextUnmarshaler interface.\ntype address {\n\t*mail.Address\n}\n\nfunc (a *address) UnmarshalText(text []byte) error {\n\tvar err error\n\ta.Address, err = mail.ParseAddress(string(text))\n\treturn err\n}\n\n// Decode it.\nfunc decode() {\n\tblob := `\n\t\tcontacts = [\n\t\t\t\"Donald Duck <donald@duckburg.com>\",\n\t\t\t\"Scrooge McDuck <scrooge@duckburg.com>\",\n\t\t]\n\t`\n\n\tvar contacts struct {\n\t\tContacts []address\n\t}\n\n\t_, err := toml.Decode(blob, &contacts)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tfor _, c := range contacts.Contacts {\n\t\tfmt.Printf(\"%#v\\n\", c.Address)\n\t}\n\n\t// Output:\n\t// &mail.Address{Name:\"Donald Duck\", Address:\"donald@duckburg.com\"}\n\t// &mail.Address{Name:\"Scrooge McDuck\", Address:\"scrooge@duckburg.com\"}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Struct Validation Rules in govalidator\nDESCRIPTION: This code illustrates how to define validation rules for struct fields using struct tags with the `valid` keyword. It shows examples of making fields optional or ignoring them during validation.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/asaskevich/govalidator/README.md#_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\n// this struct definition will fail govalidator.ValidateStruct() (and the field values do not matter):\ntype exampleStruct struct {\n  Name  string ``\n  Email string `valid:\"email\"`\n}\n\n// this, however, will only fail when Email is empty or an invalid email address:\ntype exampleStruct2 struct {\n  Name  string `valid:\"-\"`\n  Email string `valid:\"email\"`\n}\n\n// lastly, this will only fail when Email is an invalid email address but not when it's empty:\ntype exampleStruct2 struct {\n  Name  string `valid:\"-\"`\n  Email string `valid:\"email,optional\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Skopeo on Gentoo\nDESCRIPTION: This command installs the skopeo package using the emerge package manager on Gentoo. It requires root privileges.\nSOURCE: https://github.com/containers/skopeo/blob/main/install.md#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nsudo emerge app-containers/skopeo\n```\n\n----------------------------------------\n\nTITLE: Subrouter with Path Prefix using gorilla/mux in Go\nDESCRIPTION: This code snippet demonstrates how path prefixes work with subrouters in gorilla/mux. Routes within a subrouter with a path prefix inherit that prefix, creating a nested path structure.  This example shows how the base paths of each route are derived.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/gorilla/mux/README.md#_snippet_14\n\nLANGUAGE: Go\nCODE:\n```\nr := mux.NewRouter()\ns := r.PathPrefix(\"/products\").Subrouter()\n// \"/products/\"\ns.HandleFunc(\"/\", ProductsHandler)\n// \"/products/{key}/\"\ns.HandleFunc(\"/{key}/\", ProductHandler)\n// \"/products/{key}/details\"\ns.HandleFunc(\"/{key}/details\", ProductDetailsHandler)\n```\n\n----------------------------------------\n\nTITLE: Signing a Git Commit\nDESCRIPTION: This snippet demonstrates how to sign off on a Git commit using the `Signed-off-by` line in the commit message. It shows the required format for the sign-off, including the contributor's real name and email address. The email must be a valid email address.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/opencontainers/go-digest/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\nSigned-off-by: Joe Smith <joe.smith@email.com>\n```\n\n----------------------------------------\n\nTITLE: VSCode Linting Configuration - JSON\nDESCRIPTION: This snippet shows how to configure VSCode for linting Go code using golangci-lint. It adds settings to the workspace or folder configuration to enable linting on save.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/Microsoft/hcsshim/README.md#_snippet_6\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"go.lintTool\": \"golangci-lint\",\n    \"go.lintOnSave\": \"package\",\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Logrus - Go\nDESCRIPTION: This example demonstrates how to customize Logrus by setting the formatter to JSON, redirecting output to stdout, and setting the logging level to warning or above. It uses `log.WithFields` to add context to log messages, illustrating the structured logging capabilities.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/sirupsen/logrus/README.md#_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n  \"os\"\n  log \"github.com/sirupsen/logrus\"\n)\n\nfunc init() {\n  // Log as JSON instead of the default ASCII formatter.\n  log.SetFormatter(&log.JSONFormatter{})\n\n  // Output to stdout instead of the default stderr\n  // Can be any io.Writer, see below for File example\n  log.SetOutput(os.Stdout)\n\n  // Only log the warning severity or above.\n  log.SetLevel(log.WarnLevel)\n}\n\nfunc main() {\n  log.WithFields(log.Fields{\n    \"animal\": \"walrus\",\n    \"size\":   10,\n  }).Info(\"A group of walrus emerges from the ocean\")\n\n  log.WithFields(log.Fields{\n    \"omg\":    true,\n    \"number\": 122,\n  }).Warn(\"The group's number increased tremendously!\")\n\n  log.WithFields(log.Fields{\n    \"omg\":    true,\n    \"number\": 100,\n  }).Fatal(\"The ice breaks!\")\n\n  // A common pattern is to re-use fields between logging statements by re-using\n  // the logrus.Entry returned from WithFields()\n  contextLogger := log.WithFields(log.Fields{\n    \"common\": \"this is a common field\",\n    \"other\": \"I also should be logged always\",\n  })\n\n  contextLogger.Info(\"I'll be logged with common and other field\")\n  contextLogger.Info(\"Me too\")\n}\n```\n\n----------------------------------------\n\nTITLE: Copy Encrypted Image Without Decryption\nDESCRIPTION: Copies an encrypted container image without decrypting it. This is useful for moving encrypted images between storage backends without needing to access the decryption keys. The oci transport is used in this example.\nSOURCE: https://github.com/containers/skopeo/blob/main/docs/skopeo-copy.1.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nskopeo copy oci:try-encrypt:encrypted oci:try-encrypt-copy:encrypted\n```\n\n----------------------------------------\n\nTITLE: Importing Cobra Library in Go\nDESCRIPTION: This code snippet demonstrates how to import the Cobra library into your Go application. It allows you to access the Cobra functionalities and utilize them to create CLI commands and interfaces.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/spf13/cobra/README.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/spf13/cobra\"\n```\n\n----------------------------------------\n\nTITLE: Importing Go JOSE v4\nDESCRIPTION: Imports the current stable version 4 of the go-jose library in a Go program. This allows access to the JOSE functionalities such as JWE, JWS, and JWT.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/go-jose/go-jose/v3/README.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nimport \"github.com/go-jose/go-jose/v4\"\n```\n\n----------------------------------------\n\nTITLE: Invalid JSON Document\nDESCRIPTION: This JSON document represents an invalid employee record. It is used to demonstrate how the validator reports errors when the document does not conform to the schema, specifically expecting a string but receiving a number.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/santhosh-tekuri/jsonschema/v5/README.md#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n1\n```\n\n----------------------------------------\n\nTITLE: Setting NoOptDefVal for a flag\nDESCRIPTION: This snippet demonstrates how to set the NoOptDefVal for a flag. If a flag has a NoOptDefVal and is set on the command line without an option, the flag will be set to the NoOptDefVal.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/spf13/pflag/README.md#_snippet_8\n\nLANGUAGE: Go\nCODE:\n```\nvar ip = flag.IntP(\"flagname\", \"f\", 1234, \"help message\")\nflag.Lookup(\"flagname\").NoOptDefVal = \"4321\"\n```\n\n----------------------------------------\n\nTITLE: Initializing PKCS#11 with SoftHSM in Go\nDESCRIPTION: This code snippet demonstrates how to initialize and interact with a PKCS#11 module using the `pkcs11` package in Go. It initializes the module, opens a session, logs in, performs a SHA-1 hash, and then logs out, closes the session, and finalizes the module. It depends on the `pkcs11` Go package and a configured SoftHSM.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/miekg/pkcs11/README.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\np := pkcs11.New(\"/usr/lib/softhsm/libsofthsm2.so\")\nerr := p.Initialize()\nif err != nil {\n    panic(err)\n}\n\ndefer p.Destroy()\ndefer p.Finalize()\n\nslots, err := p.GetSlotList(true)\nif err != nil {\n    panic(err)\n}\n\nsession, err := p.OpenSession(slots[0], pkcs11.CKF_SERIAL_SESSION|pkcs11.CKF_RW_SESSION)\nif err != nil {\n    panic(err)\n}\ndefer p.CloseSession(session)\n\nerr = p.Login(session, pkcs11.CKU_USER, \"1234\")\nif err != nil {\n    panic(err)\n}\ndefer p.Logout(session)\n\np.DigestInit(session, []*pkcs11.Mechanism{pkcs11.NewMechanism(pkcs11.CKM_SHA_1, nil)})\nhash, err := p.Digest(session, []byte(\"this is a string\"))\nif err != nil {\n    panic(err)\n}\n\nfor _, d := range hash {\n        fmt.Printf(\"%x\", d)\n}\nfmt.Println()\n```\n\n----------------------------------------\n\nTITLE: Custom Error Messages in Go\nDESCRIPTION: This snippet illustrates how to define custom error messages for validators using the `~` separator in struct tags within govalidator.  This allows for more user-friendly error reporting.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/asaskevich/govalidator/README.md#_snippet_22\n\nLANGUAGE: go\nCODE:\n```\ntype Ticket struct {\n  Id        int64     `json:\"id\"`\n  FirstName string    `json:\"firstname\" valid:\"required~First name is blank\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Basic TOML Data Example\nDESCRIPTION: This example presents a simple TOML configuration file with key-value pairs and lists. It demonstrates basic data types like integers, strings, floats, dates, and arrays.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/BurntSushi/toml/README.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\nAge = 25\nCats = [ \"Cauchy\", \"Plato\" ]\nPi = 3.14\nPerfection = [ 6, 28, 496, 8128 ]\nDOB = 1987-07-05T05:45:00Z\n```\n\n----------------------------------------\n\nTITLE: Deprecating a flag\nDESCRIPTION: This snippet shows how to deprecate a flag by specifying its name and a usage message. Deprecating a flag hides it from help text and prints a usage message when the deprecated flag is used.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/spf13/pflag/README.md#_snippet_10\n\nLANGUAGE: Go\nCODE:\n```\n// deprecate a flag by specifying its name and a usage message\nflags.MarkDeprecated(\"badflag\", \"please use --good-flag instead\")\n```\n\n----------------------------------------\n\nTITLE: Creating a branch, committing changes, and pushing to fork\nDESCRIPTION: This set of commands creates a new branch, stages and commits changes, runs precommit checks and pushes the branch to your fork on GitHub.  `<YOUR_BRANCH_NAME>` should be replaced with a descriptive branch name, and `<YOUR_FORK>` should be the name of your remote fork.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ngit checkout -b <YOUR_BRANCH_NAME>\n# edit files\n# update changelog\nmake precommit\ngit add -p\ngit commit\ngit push <YOUR_FORK> <YOUR_BRANCH_NAME>\n```\n\n----------------------------------------\n\nTITLE: Defining Network Statistics Message Type (Protobuf)\nDESCRIPTION: Defines the structure for network interface statistics.  It includes fields for interface name, received and transmitted bytes, packets, errors, and dropped packets.  Rx and Tx metrics use unsigned 64-bit integers, while the interface `name` is a string.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/containerd/cgroups/v3/cgroup1/stats/metrics.pb.txt#_snippet_14\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"NetworkStat\"\n  field {\n    name: \"name\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"name\"\n  }\n  field {\n    name: \"rx_bytes\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_UINT64\n    json_name: \"rxBytes\"\n  }\n  field {\n    name: \"rx_packets\"\n    number: 3\n    label: LABEL_OPTIONAL\n    type: TYPE_UINT64\n    json_name: \"rxPackets\"\n  }\n  field {\n    name: \"rx_errors\"\n    number: 4\n    label: LABEL_OPTIONAL\n    type: TYPE_UINT64\n    json_name: \"rxErrors\"\n  }\n  field {\n    name: \"rx_dropped\"\n    number: 5\n    label: LABEL_OPTIONAL\n    type: TYPE_UINT64\n    json_name: \"rxDropped\"\n  }\n  field {\n    name: \"tx_bytes\"\n    number: 6\n    label: LABEL_OPTIONAL\n    type: TYPE_UINT64\n    json_name: \"txBytes\"\n  }\n  field {\n    name: \"tx_packets\"\n    number: 7\n    label: LABEL_OPTIONAL\n    type: TYPE_UINT64\n    json_name: \"txPackets\"\n  }\n  field {\n    name: \"tx_errors\"\n    number: 8\n    label: LABEL_OPTIONAL\n    type: TYPE_UINT64\n    json_name: \"txErrors\"\n  }\n  field {\n    name: \"tx_dropped\"\n    number: 9\n    label: LABEL_OPTIONAL\n    type: TYPE_UINT64\n    json_name: \"txDropped\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Validators With Parameters in Go\nDESCRIPTION: This snippet provides a list of govalidator validators that require parameters, such as range, length, matches, and in.  These validators provide more specific validation rules based on the provided parameters.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/asaskevich/govalidator/README.md#_snippet_15\n\nLANGUAGE: go\nCODE:\n```\n\"range(min|max)\": Range,\n\"length(min|max)\": ByteLength,\n\"runelength(min|max)\": RuneLength,\n\"stringlength(min|max)\": StringLength,\n\"matches(pattern)\": StringMatches,\n\"in(string1|string2|...|stringN)\": IsIn,\n\"rsapub(keylength)\" : IsRsaPub,\n\"minstringlength(int): MinStringLength,\n\"maxstringlength(int): MaxStringLength,\n```\n\n----------------------------------------\n\nTITLE: Creating Span from Context in Go\nDESCRIPTION: This snippet shows how to create a new OpenTracing span as a child of an existing span stored in a `context.Context`. The `StartSpanFromContext` function creates the span and returns a new context containing it. The `defer span.Finish()` ensures the span is closed when the function exits. `span.LogFields` is used to record specific events or metadata within the span.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/opentracing/opentracing-go/README.md#_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nfunc xyz(ctx context.Context, ...) {\n    ...\n    span, ctx := opentracing.StartSpanFromContext(ctx, \"operation_name\")\n    defer span.Finish()\n    span.LogFields(\n        log.String(\"event\", \"soft error\"),\n        log.String(\"type\", \"cache timeout\"),\n        log.Int(\"waited.millis\", 1500))\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Assembly System Call Dispatch\nDESCRIPTION: This assembly code defines the entry points for system call dispatch, handling different numbers of arguments and low-level use cases. `Syscall` and `Syscall6` are standard system calls with varying argument counts, while `RawSyscall` provides low-level access without scheduler interaction. This file is critical when porting Go to a new architecture/OS.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/golang.org/x/sys/unix/README.md#_snippet_0\n\nLANGUAGE: Assembly\nCODE:\n```\nfunc Syscall(trap, a1, a2, a3 uintptr) (r1, r2, err uintptr)\nfunc Syscall6(trap, a1, a2, a3, a4, a5, a6 uintptr) (r1, r2, err uintptr)\nfunc RawSyscall(trap, a1, a2, a3 uintptr) (r1, r2, err uintptr)\n```\n\n----------------------------------------\n\nTITLE: Creating a Feature Branch\nDESCRIPTION: This snippet demonstrates how to create a new feature branch from the master branch.  It's important to work on feature branches to isolate changes and simplify the pull request process.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/mistifyio/go-zfs/v3/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ git checkout -b <feature-branch-name>\n```\n\n----------------------------------------\n\nTITLE: Installing TOML validator CLI tool with Go\nDESCRIPTION: This snippet shows how to install and use the TOML validator command-line tool.  It requires Go to be installed and configured. It installs the `tomlv` tool using `go install` and then runs it against a TOML file.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/BurntSushi/toml/README.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n% go install github.com/BurntSushi/toml/cmd/tomlv@latest\n% tomlv some-toml-file.toml\n```\n\n----------------------------------------\n\nTITLE: Profiling with Tags in OpenCensus Go\nDESCRIPTION: This code demonstrates how to apply OpenCensus tags as profiler labels for Go versions 1.9 and above.  The snippet first creates a new context with tags using `tag.New`, then uses `tag.Do` to execute a function where the profiler will record samples with the tag key/values from the tag map. This allows correlating profile data with specific tag contexts.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/go.opencensus.io/README.md#_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\nctx, err = tag.New(ctx,\n\ttag.Insert(osKey, \"macOS-10.12.5\"),\n\ttag.Insert(userIDKey, \"fff0989878\"),\n)\nif err != nil {\n\tlog.Fatal(err)\n}\ntag.Do(ctx, func(ctx context.Context) {\n\t// Do work.\n\t// When profiling is on, samples will be\n\t// recorded with the key/values from the tag map.\n})\n```\n\n----------------------------------------\n\nTITLE: Installing gxz Command-Line Tool\nDESCRIPTION: This command demonstrates how to install the gxz command-line utility, which is included with the xz package. It uses the `go get` command to download and install the gxz utility from the specified GitHub repository.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/ulikunitz/xz/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ go get github.com/ulikunitz/xz/cmd/gxz\n```\n\n----------------------------------------\n\nTITLE: Deprecating a shorthand flag\nDESCRIPTION: This snippet shows how to deprecate a flag shorthand by specifying its flag name and a usage message. Deprecating a shorthand hides it from help text and prints a usage message when the deprecated shorthand is used.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/spf13/pflag/README.md#_snippet_11\n\nLANGUAGE: Go\nCODE:\n```\n// deprecate a flag shorthand by specifying its flag name and a usage message\nflags.MarkShorthandDeprecated(\"noshorthandflag\", \"please use --noshorthandflag only\")\n```\n\n----------------------------------------\n\nTITLE: Matching Routes based on URL Schemes using gorilla/mux in Go\nDESCRIPTION: This code snippet demonstrates how to match routes based on URL schemes (e.g., 'https') using the gorilla/mux package in Go.  It allows routing requests based on whether they use secure or insecure protocols.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/gorilla/mux/README.md#_snippet_7\n\nLANGUAGE: Go\nCODE:\n```\nr.Schemes(\"https\")\n```\n\n----------------------------------------\n\nTITLE: Filtering Slices with govalidator.Filter\nDESCRIPTION: This snippet shows how to use `govalidator.Filter` to filter a slice of interfaces based on a condition. It filters a slice of integers to keep only the even numbers. It also demonstrates how to count items that satisfy the condition with `govalidator.Count`.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/asaskevich/govalidator/README.md#_snippet_12\n\nLANGUAGE: go\nCODE:\n```\ndata := []interface{}{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\nvar fn govalidator.ConditionIterator = func(value interface{}, index int) bool {\n\treturn value.(int)%2 == 0\n}\n_ = govalidator.Filter(data, fn) // result = []interface{}{2, 4, 6, 8, 10}\n_ = govalidator.Count(data, fn) // result = 5\n```\n\n----------------------------------------\n\nTITLE: TOML Key Name with Struct Tag\nDESCRIPTION: This example shows how to use struct tags to map TOML keys with different names to Go struct fields. It defines a TOML key named `some_key_NAME` which is mapped to the `ObscureKey` field in the `TOML` struct using the `toml:\"some_key_NAME\"` tag.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/BurntSushi/toml/README.md#_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\nsome_key_NAME = \"wat\"\n```\n\n----------------------------------------\n\nTITLE: Installing Skopeo on Fedora\nDESCRIPTION: This command installs the skopeo package using the dnf package manager on Fedora. It utilizes the `-y` flag to automatically confirm the installation.\nSOURCE: https://github.com/containers/skopeo/blob/main/install.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nsudo dnf -y install skopeo\n```\n\n----------------------------------------\n\nTITLE: Adding LinkFromContext API to OpenTelemetry Go\nDESCRIPTION: The `LinkFromContext` API has been added to return a Link which encapsulates a SpanContext from a provided context and also encapsulates attributes. This API helps in creating links between spans using context information.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Disabling sorting of flags\nDESCRIPTION: This snippet demonstrates how to disable the sorting of flags for help and usage messages by setting `flags.SortFlags = false`.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/spf13/pflag/README.md#_snippet_13\n\nLANGUAGE: Go\nCODE:\n```\nflags.BoolP(\"verbose\", \"v\", false, \"verbose output\")\nflags.String(\"coolflag\", \"yeaah\", \"it's really cool flag\")\nflags.Int(\"usefulflag\", 777, \"sometimes it's very useful\")\nflags.SortFlags = false\nflags.PrintDefaults()\n```\n\n----------------------------------------\n\nTITLE: Building for Linux with libsqlite3 and go build\nDESCRIPTION: This command compiles the go-sqlite3 package for Linux, linking directly to the `libsqlite3` library. The `-tags \"libsqlite3 linux\"` flags include both the `libsqlite3` and `linux` build configurations.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/mattn/go-sqlite3/README.md#_snippet_8\n\nLANGUAGE: Bash\nCODE:\n```\ngo build -tags \"libsqlite3 linux\"\n```\n\n----------------------------------------\n\nTITLE: Zstd Benchmark Results\nDESCRIPTION: These benchmarks show the performance of the zstd decoder on various workloads, measured in nanoseconds per operation (ns/op) and megabytes per second (MB/s). They also show bytes per operation and allocation numbers. The benchmarks reflect the decoder's performance around May 2022, but may be out of date.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/klauspost/compress/zstd/README.md#_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\nBenchmarkDecoderSilesia-32    \t                   5\t 206878840 ns/op\t1024.50 MB/s\t   49808 B/op\t      43 allocs/op\nBenchmarkDecoderEnwik9-32                          1\t1271809000 ns/op\t 786.28 MB/s\t   72048 B/op\t      52 allocs/op\n\nConcurrent blocks, performance:\n\nBenchmarkDecoder_DecodeAllParallel/kppkn.gtb.zst-32         \t   67356\t     17857 ns/op\t10321.96 MB/s\t        22.48 pct\t     102 B/op\t       0 allocs/op\nBenchmarkDecoder_DecodeAllParallel/geo.protodata.zst-32     \t  266656\t      4421 ns/op\t26823.21 MB/s\t        11.89 pct\t      19 B/op\t       0 allocs/op\nBenchmarkDecoder_DecodeAllParallel/plrabn12.txt.zst-32      \t   20992\t     56842 ns/op\t8477.17 MB/s\t        39.90 pct\t     754 B/op\t       0 allocs/op\nBenchmarkDecoder_DecodeAllParallel/lcet10.txt.zst-32        \t   27456\t     43932 ns/op\t9714.01 MB/s\t        33.27 pct\t     524 B/op\t       0 allocs/op\nBenchmarkDecoder_DecodeAllParallel/asyoulik.txt.zst-32      \t   78432\t     15047 ns/op\t8319.15 MB/s\t        40.34 pct\t      66 B/op\t       0 allocs/op\nBenchmarkDecoder_DecodeAllParallel/alice29.txt.zst-32       \t   65800\t     18436 ns/op\t8249.63 MB/s\t        37.75 pct\t      88 B/op\t       0 allocs/op\nBenchmarkDecoder_DecodeAllParallel/html_x_4.zst-32          \t  102993\t     11523 ns/op\t35546.09 MB/s\t         3.637 pct\t     143 B/op\t       0 allocs/op\nBenchmarkDecoder_DecodeAllParallel/paper-100k.pdf.zst-32    \t 1000000\t      1070 ns/op\t95720.98 MB/s\t        80.53 pct\t       3 B/op\t       0 allocs/op\nBenchmarkDecoder_DecodeAllParallel/fireworks.jpeg.zst-32    \t  749802\t      1752 ns/op\t70272.35 MB/s\t       100.0 pct\t       5 B/op\t       0 allocs/op\nBenchmarkDecoder_DecodeAllParallel/urls.10K.zst-32          \t   22640\t     52934 ns/op\t13263.37 MB/s\t        26.25 pct\t    1014 B/op\t       0 allocs/op\nBenchmarkDecoder_DecodeAllParallel/html.zst-32              \t  226412\t      5232 ns/op\t19572.27 MB/s\t        14.49 pct\t      20 B/op\t       0 allocs/op\nBenchmarkDecoder_DecodeAllParallel/comp-data.bin.zst-32     \t  923041\t      1276 ns/op\t3194.71 MB/s\t        31.26 pct\t       0 B/op\t       0 allocs/op\n```\n\n----------------------------------------\n\nTITLE: Serving Static Files with gorilla/mux in Go\nDESCRIPTION: This code snippet demonstrates how to serve static files using gorilla/mux in Go. It creates a router, sets up a route that handles requests to the `/static/` path prefix by stripping the `/static/` prefix and serving files from a specified directory. It uses the http.FileServer and http.StripPrefix functions to achieve this.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/gorilla/mux/README.md#_snippet_15\n\nLANGUAGE: Go\nCODE:\n```\nfunc main() {\n    var dir string\n\n    flag.StringVar(&dir, \"dir\", \".\", \"the directory to serve files from. Defaults to the current dir\")\n    flag.Parse()\n    r := mux.NewRouter()\n\n    // This will serve files under http://localhost:8000/static/<filename>\n    r.PathPrefix(\"/static/\").Handler(http.StripPrefix(\"/static/\", http.FileServer(http.Dir(dir))))\n\n    srv := &http.Server{\n        Handler:      r,\n        Addr:         \"127.0.0.1:8000\",\n        // Good practice: enforce timeouts for servers you create!\n        WriteTimeout: 15 * time.Second,\n        ReadTimeout:  15 * time.Second,\n    }\n\n    log.Fatal(srv.ListenAndServe())\n}\n```\n\n----------------------------------------\n\nTITLE: Hiding a flag\nDESCRIPTION: This snippet shows how to hide a flag by specifying its name. A hidden flag will still function as normal, however will not show up in usage/help text.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/spf13/pflag/README.md#_snippet_12\n\nLANGUAGE: Go\nCODE:\n```\n// hide a flag by specifying its name\nflags.MarkHidden(\"secretFlag\")\n```\n\n----------------------------------------\n\nTITLE: Defining Memory Statistics Message Type (Protobuf)\nDESCRIPTION: Defines the structure for memory statistics including usage, max usage, and failure count. It specifies the data types for each field, using unsigned 64-bit integers (uint64). This message is used to track memory consumption of containers.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/containerd/cgroups/v3/cgroup1/stats/metrics.pb.txt#_snippet_8\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"MemoryStat\"\n  field {\n    name: \"usage\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_UINT64\n    json_name: \"usage\"\n  }\n  field {\n    name: \"max\"\n    number: 3\n    label: LABEL_OPTIONAL\n    type: TYPE_UINT64\n    json_name: \"max\"\n  }\n  field {\n    name: \"failcnt\"\n    number: 4\n    label: LABEL_OPTIONAL\n    type: TYPE_UINT64\n    json_name: \"failcnt\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Supporting Go flags when using pflag\nDESCRIPTION: This snippet shows how to add Go flags to the pflag flagset, usually necessary to support flags defined by third-party dependencies (e.g. golang/glog).\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/spf13/pflag/README.md#_snippet_14\n\nLANGUAGE: Go\nCODE:\n```\nimport (\n\tgoflag \"flag\"\n\tflag \"github.com/spf13/pflag\"\n)\n\nvar ip *int = flag.Int(\"flagname\", 1234, \"help message for flagname\")\n\nfunc main() {\n\tflag.CommandLine.AddGoFlagSet(goflag.CommandLine)\n\tflag.Parse()\n}\n```\n\n----------------------------------------\n\nTITLE: TOML Key Name with Struct Tag in Go\nDESCRIPTION: This Go snippet defines a struct using TOML tags to map a TOML key to a struct field with a different name. The struct field `ObscureKey` will be populated with the value of the TOML key `some_key_NAME`.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/BurntSushi/toml/README.md#_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ntype TOML struct {\n    ObscureKey string `toml:\"some_key_NAME\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Decompressing a File using gxz\nDESCRIPTION: This command demonstrates how to decompress a file using the gxz command-line tool. The `-d` flag is used to specify decompression mode, and the command decompresses the specified file (`bigfile.xz`).\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/ulikunitz/xz/README.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n$ gxz -d bigfile.xz\n```\n\n----------------------------------------\n\nTITLE: Setting Protobuf Syntax Version (Protobuf)\nDESCRIPTION: Specifies the protobuf syntax version used in this file. The syntax is set to `proto3`, which is the latest version of protobuf.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/containerd/cgroups/v3/cgroup1/stats/metrics.pb.txt#_snippet_17\n\nLANGUAGE: protobuf\nCODE:\n```\nsyntax: \"proto3\"\n\n```\n\n----------------------------------------\n\nTITLE: Installing Skopeo Binary and Documentation\nDESCRIPTION: This command installs the Skopeo binary and documentation to the system using make. It requires root privileges.\nSOURCE: https://github.com/containers/skopeo/blob/main/install.md#_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\nsudo make install\n```\n\n----------------------------------------\n\nTITLE: Enabling Caller Reporting - Go\nDESCRIPTION: This code snippet enables the reporting of the calling method in the log output. It sets the `ReportCaller` property to true, which adds the method name to each log entry under the 'method' field. Note that this adds measurable overhead.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/sirupsen/logrus/README.md#_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nlog.SetReportCaller(true)\n```\n\n----------------------------------------\n\nTITLE: xxhash Digest WriteString Method in Go\nDESCRIPTION: The WriteString method of the Digest type writes a string to the hash.  It is part of the hash.Hash64 interface implementation for incremental hashing of strings. It returns the number of bytes written and any error encountered.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/klauspost/compress/zstd/internal/xxhash/README.md#_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\nfunc (*Digest) WriteString(string) (int, error)\n```\n\n----------------------------------------\n\nTITLE: Logging Information with logr.Logger in Go\nDESCRIPTION: This snippet illustrates how to use the logr.Logger to log information with key-value pairs. The Info method is called on the logger, passing a message and associated data.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/go-logr/logr/README.md#_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\ntype appObject struct {\n    // ... other fields ...\n    logger logr.Logger\n    // ... other fields ...\n}\n\nfunc (app *appObject) Run() {\n    app.logger.Info(\"starting up\", \"timestamp\", time.Now())\n\n    // ... app code ...\n}\n```\n\n----------------------------------------\n\nTITLE: Deprecated Any Function in OpenTelemetry Attribute\nDESCRIPTION: The `Any` function in the `go.opentelemetry.io/otel/attribute` package is deprecated. Users are encouraged to use the typed functions instead.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Verifying Image Signature with Skopeo\nDESCRIPTION: This command verifies an image signature using local files, printing the digest on success. It requires the image manifest, a Docker reference, trusted signing key fingerprints, and the signature file path. It's primarily used for debugging and requires ensuring the image isn't modified between verification and usage.\nSOURCE: https://github.com/containers/skopeo/blob/main/docs/skopeo-standalone-verify.1.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ skopeo standalone-verify busybox-manifest.json registry.example.com/example/busybox 1D8230F6CDB6A06716E414C1DB72F2188BB46CC8  busybox.signature\nSignature verified, digest sha256:20bf21ed457b390829cdbeec8795a7bea1626991fda603e0d01b4e7f60427e55\n```\n\n----------------------------------------\n\nTITLE: Installing the Compression Package\nDESCRIPTION: This command is used to install the 'klauspost/compress' package into your Go project. It uses the 'go get' command with the '@latest' flag to ensure you get the most recent version of the package.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/klauspost/compress/README.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\ngo get github.com/klauspost/compress@latest\n```\n\n----------------------------------------\n\nTITLE: VSCode Configuration for golangci-lint (JSON)\nDESCRIPTION: This JSON snippet configures VSCode to use golangci-lint for linting Go code on save. It sets the `go.lintTool` to `golangci-lint` and `go.lintOnSave` to `package`. This allows for automatic linting of Go packages within VSCode.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/Microsoft/go-winio/README.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"go.lintTool\": \"golangci-lint\",\n    \"go.lintOnSave\": \"package\"\n}\n```\n\n----------------------------------------\n\nTITLE: Amending Commit Message\nDESCRIPTION: This shows the command to modify the commit message after squashing your commits together.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/sigstore/rekor/CONTRIBUTORS.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit commit --amend\n```\n\n----------------------------------------\n\nTITLE: Registering a View with OpenCensus Go\nDESCRIPTION: This snippet shows how to register a view with OpenCensus Go. It defines a view named \"example.com/video_size_distribution\" with a description and associates it with the `videoSize` measure.  It also specifies a `DistributionAggregation` with defined buckets.  Registering a view begins collecting data for that view, which will be exported via registered exporters.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/go.opencensus.io/README.md#_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nif err := view.Register(&view.View{\n\tName:        \"example.com/video_size_distribution\",\n\tDescription: \"distribution of processed video size over time\",\n\tMeasure:     videoSize,\n\tAggregation: view.Distribution(1<<32, 2<<32, 3<<32),\n}); err != nil {\n\tlog.Fatalf(\"Failed to register view: %v\", err)\n}\n```\n\n----------------------------------------\n\nTITLE: Logrus Fatal Exit Handler in Go\nDESCRIPTION: This example demonstrates how to register exit handlers that will be called before Logrus performs an os.Exit(1) when a fatal level message is logged.  This allows for graceful shutdown procedures to be executed before the application exits.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/sirupsen/logrus/README.md#_snippet_15\n\nLANGUAGE: go\nCODE:\n```\n...handler := func() {\n  // gracefully shutdown something...\n}\nlogrus.RegisterExitHandler(handler)\n...\n```\n\n----------------------------------------\n\nTITLE: Signing Git Commits\nDESCRIPTION: This snippet illustrates the standard format for signing off a Git commit to certify the origin and rights to contribute the patch. It includes the 'Signed-off-by' line with the contributor's real name and email address. This confirms adherence to the Developer Certificate of Origin (DCO).\nSOURCE: https://github.com/containers/skopeo/blob/main/CONTRIBUTING.md#_snippet_4\n\nLANGUAGE: Git\nCODE:\n```\nSigned-off-by: Joe Smith <joe.smith@email.com>\n```\n\n----------------------------------------\n\nTITLE: Inspecting Multiple KSUIDs with Template Formatting\nDESCRIPTION: This command generates multiple KSUIDs and then inspects each one using a template. `$(ksuid -n 4)` generates 4 KSUIDs, and the outer ksuid command formats each KSUID using the specified template.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/segmentio/ksuid/README.md#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n$ ksuid -f template -t '{{ .Time }}: {{ .Payload }}' $(ksuid -n 4)\n```\n\n----------------------------------------\n\nTITLE: Struct Field Validators List in Go\nDESCRIPTION: This snippet lists the built-in validators available for struct fields when using the govalidator library. Each validator corresponds to a specific validation function.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/asaskevich/govalidator/README.md#_snippet_14\n\nLANGUAGE: go\nCODE:\n```\n\"email\":              IsEmail,\n\"url\":                IsURL,\n\"dialstring\":         IsDialString,\n\"requrl\":             IsRequestURL,\n\"requri\":             IsRequestURI,\n\"alpha\":              IsAlpha,\n\"utfletter\":          IsUTFLetter,\n\"alphanum\":           IsAlphanumeric,\n\"utfletternum\":       IsUTFLetterNumeric,\n\"numeric\":            IsNumeric,\n\"utfnumeric\":         IsUTFNumeric,\n\"utfdigit\":           IsUTFDigit,\n\"hexadecimal\":        IsHexadecimal,\n\"hexcolor\":           IsHexcolor,\n\"rgbcolor\":           IsRGBcolor,\n\"lowercase\":          IsLowerCase,\n\"uppercase\":          IsUpperCase,\n\"int\":                IsInt,\n\"float\":              IsFloat,\n\"null\":               IsNull,\n\"uuid\":               IsUUID,\n\"uuidv3\":             IsUUIDv3,\n\"uuidv4\":             IsUUIDv4,\n\"uuidv5\":             IsUUIDv5,\n\"creditcard\":         IsCreditCard,\n\"isbn10\":             IsISBN10,\n\"isbn13\":             IsISBN13,\n\"json\":               IsJSON,\n\"multibyte\":          IsMultibyte,\n\"ascii\":              IsASCII,\n\"printableascii\":     IsPrintableASCII,\n\"fullwidth\":          IsFullWidth,\n\"halfwidth\":          IsHalfWidth,\n\"variablewidth\":      IsVariableWidth,\n\"base64\":             IsBase64,\n\"datauri\":            IsDataURI,\n\"ip\":                 IsIP,\n\"port\":               IsPort,\n\"ipv4\":               IsIPv4,\n\"ipv6\":               IsIPv6,\n\"dns\":                IsDNSName,\n\"host\":               IsHost,\n\"mac\":                IsMAC,\n\"latitude\":           IsLatitude,\n\"longitude\":          IsLongitude,\n\"ssn\":                IsSSN,\n\"semver\":             IsSemver,\n\"rfc3339\":            IsRFC3339,\n\"rfc3339WithoutZone\": IsRFC3339WithoutZone,\n\"ISO3166Alpha2\":      IsISO3166Alpha2,\n\"ISO3166Alpha3\":      IsISO3166Alpha3,\n\"ulid\":               IsULID,\n```\n\n----------------------------------------\n\nTITLE: Matching Routes based on Header Values using gorilla/mux in Go\nDESCRIPTION: This code snippet demonstrates how to match routes based on the presence and value of HTTP headers using the gorilla/mux package in Go. It matches requests that include a specific header with a specific value, useful for handling API requests from specific clients.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/gorilla/mux/README.md#_snippet_8\n\nLANGUAGE: Go\nCODE:\n```\nr.Headers(\"X-Requested-With\", \"XMLHttpRequest\")\n```\n\n----------------------------------------\n\nTITLE: Route Variable Example in Go\nDESCRIPTION: This snippet shows how to define a route with a variable using Gorilla Mux. The route `/metrics/{type}` captures the value of the `{type}` variable, which can be accessed in the `MetricsHandler`. This route definition is essential for handling dynamic requests based on the provided type parameter.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/gorilla/mux/README.md#_snippet_34\n\nLANGUAGE: go\nCODE:\n```\n// endpoints.go\nfunc main() {\n    r := mux.NewRouter()\n    // A route with a route variable:\n    r.HandleFunc(\"/metrics/{type}\", MetricsHandler)\n\n    log.Fatal(http.ListenAndServe(\"localhost:8080\", r))\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing gRPC with GitHub mirror using go mod\nDESCRIPTION: This code shows how to use the `go mod edit` command to replace the official gRPC package with a mirror on GitHub. This is useful when the `golang.org` domain is inaccessible. `go mod tidy` ensures that the go.mod file is consistent with the code, `go mod vendor` copies the project's dependencies into a local vendor directory and `go build -mod=vendor` command compiles the project using the local vendor directory for dependencies.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/google.golang.org/grpc/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ngo mod edit -replace=google.golang.org/grpc=github.com/grpc/grpc-go@latest\ngo mod tidy\ngo mod vendor\ngo build -mod=vendor\n```\n\n----------------------------------------\n\nTITLE: Rendering Multiple Progress Bars with mpb in Go\nDESCRIPTION: This code snippet demonstrates how to render multiple progress bars concurrently using the mpb Go library. It initializes a progress container with a wait group, adds multiple bars with custom decorators for displaying names, percentages, and estimated time of arrival (ETA), simulates work in goroutines, and waits for all bars to complete.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/vbauerster/mpb/v8/README.md#_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nvar wg sync.WaitGroup\n\t// passed wg will be accounted at p.Wait() call\n\tp := mpb.New(mpb.WithWaitGroup(&wg))\n\ttotal, numBars := 100, 3\n\twg.Add(numBars)\n\n\tfor i := 0; i < numBars; i++ {\n\t\tname := fmt.Sprintf(\"Bar#%d:\", i)\n\t\tbar := p.AddBar(int64(total),\n\t\t\tmpb.PrependDecorators(\n\t\t\t\t// simple name decorator\n\t\t\t\tdecor.Name(name),\n\t\t\t\t// decor.DSyncWidth bit enables column width synchronization\n\t\t\t\tdecor.Percentage(decor.WCSyncSpace),\n\t\t\t),\n\t\t\tmpb.AppendDecorators(\n\t\t\t\t// replace ETA decorator with \"done\" message, OnComplete event\n\t\t\t\tdecor.OnComplete(\n\t\t\t\t\t// ETA decorator with ewma age of 30\n\t\t\t\t\tdecor.EwmaETA(decor.ET_STYLE_GO, 30, decor.WCSyncWidth), \"done\",\n\t\t\t\t),\n\t\t\t),\n\t\t)\n\t\t// simulating some work\n\t\tgo func() {\n\t\t\tdefer wg.Done()\n\t\t\trng := rand.New(rand.NewSource(time.Now().UnixNano()))\n\t\t\tmax := 100 * time.Millisecond\n\t\t\tfor i := 0; i < total; i++ {\n\t\t\t\t// start variable is solely for EWMA calculation\n\t\t\t\t// EWMA's unit of measure is an iteration's duration\n\t\t\t\tstart := time.Now()\n\t\t\t\ttime.Sleep(time.Duration(rng.Intn(10)+1) * max / 10)\n\t\t\t\t// we need to call EwmaIncrement to fulfill ewma decorator's contract\n\t\t\t\tbar.EwmaIncrement(time.Since(start))\n\t\t\t}\n\t\t}()\n\t}\n\t// wait for passed wg and for all bars to complete and flush\n\tp.Wait()\n```\n\n----------------------------------------\n\nTITLE: Installing the UUID Package\nDESCRIPTION: This shell command installs the github.com/google/uuid package using the go get command. It fetches the package and its dependencies, making it available for use in Go projects.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/google/uuid/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngo get github.com/google/uuid\n```\n\n----------------------------------------\n\nTITLE: Splitting CamelCase String in Go\nDESCRIPTION: This code snippet demonstrates how to use the `camelcase.Split` function to split a camel case string into its constituent words.  It imports the `camelcase` package and uses `fmt.Println` to print the first and second elements of the resulting slice. Requires the `camelcase` package to be installed.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/containers/common/pkg/report/camelcase/README.md#_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nsplit := camelcase.Split(\"GolangPackage\")\n\nfmt.Println(split[0], split[1]) // prints: \"Golang\", \"Package\"\n```\n\n----------------------------------------\n\nTITLE: JSON Output of Basic Format\nDESCRIPTION: This JSON shows the 'basic' output format of a validation error, including the `valid` status and a list of `errors` with details such as `keywordLocation`, `absoluteKeywordLocation`, `instanceLocation`, and a descriptive `error` message.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/santhosh-tekuri/jsonschema/v5/README.md#_snippet_9\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"valid\": false,\n  \"errors\": [\n    {\n      \"keywordLocation\": \"\",\n      \"absoluteKeywordLocation\": \"file:///Users/santhosh/jsonschema/schema.json#\",\n      \"instanceLocation\": \"\",\n      \"error\": \"doesn't validate with file:///Users/santhosh/jsonschema/schema.json#\"\n    },\n    {\n      \"keywordLocation\": \"/$ref\",\n      \"absoluteKeywordLocation\": \"file:///Users/santhosh/jsonschema/schema.json#/$ref\",\n      \"instanceLocation\": \"\",\n      \"error\": \"doesn't validate with 'file:///Users/santhosh/jsonschema/t.json#/definitions/employee'\"\n    },\n    {\n      \"keywordLocation\": \"/$ref/type\",\n      \"absoluteKeywordLocation\": \"file:///Users/santhosh/jsonschema/t.json#/definitions/employee/type\",\n      \"instanceLocation\": \"\",\n      \"error\": \"expected string, but got number\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Hash Implementations in Go\nDESCRIPTION: This code snippet shows how to import hash implementations, such as SHA256 and SHA512, into your application.  This is necessary because the `go-digest` package relies on these implementations for creating digests. Without importing these implementations, the package will panic. The blank identifier `_` is used to import the packages for their side effects.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/opencontainers/go-digest/README.md#_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nimport (\n        _ \"crypto/sha256\"\n        _ \"crypto/sha512\"\n    )\n```\n\n----------------------------------------\n\nTITLE: xz API Usage Example in Go\nDESCRIPTION: This code demonstrates how to compress a string using the xz.NewWriter and decompress it using xz.NewReader. It compresses a sample text and writes the compressed data to a buffer, then reads from the buffer and writes the decompressed text to standard output. This example requires the \"bytes\", \"io\", \"log\", \"os\", and \"github.com/ulikunitz/xz\" packages.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/ulikunitz/xz/README.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n    \"bytes\"\n    \"io\"\n    \"log\"\n    \"os\"\n\n    \"github.com/ulikunitz/xz\"\n)\n\nfunc main() {\n    const text = \"The quick brown fox jumps over the lazy dog.\\n\"\n    var buf bytes.Buffer\n    // compress text\n    w, err := xz.NewWriter(&buf)\n    if err != nil {\n        log.Fatalf(\"xz.NewWriter error %s\", err)\n    }\n    if _, err := io.WriteString(w, text); err != nil {\n        log.Fatalf(\"WriteString error %s\", err)\n    }\n    if err := w.Close(); err != nil {\n        log.Fatalf(\"w.Close error %s\", err)\n    }\n    // decompress buffer and write output to stdout\n    r, err := xz.NewReader(&buf)\n    if err != nil {\n        log.Fatalf(\"NewReader error %s\", err)\n    }\n    if _, err = io.Copy(os.Stdout, r); err != nil {\n        log.Fatalf(\"io.Copy error %s\", err)\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Wrapping Errors with Context in Go\nDESCRIPTION: Shows how to use `errors.Wrap` to add context to an error.  The `errors.Wrap` function returns a new error that includes the original error and a descriptive message, providing more information about the failure.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/pkg/errors/README.md#_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\n_, err := ioutil.ReadAll(r)\nif err != nil {\n        return errors.Wrap(err, \"read failed\")\n}\n```\n\n----------------------------------------\n\nTITLE: Matching Routes with Custom Matcher Function using gorilla/mux in Go\nDESCRIPTION: This code snippet shows how to use a custom matcher function to determine if a route matches a given request using the gorilla/mux package.  The function receives the HTTP request and a RouteMatch object as input and returns a boolean indicating whether the route matches. This example checks the HTTP protocol version.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/gorilla/mux/README.md#_snippet_10\n\nLANGUAGE: Go\nCODE:\n```\nr.MatcherFunc(func(r *http.Request, rm *RouteMatch) bool {\n    return r.ProtoMajor == 0\n})\n```\n\n----------------------------------------\n\nTITLE: Semantic Convention Generation using Docker and Make\nDESCRIPTION: This snippet demonstrates how to generate new versions of the `semconv` package using a local copy of the OpenTelemetry Semantic Conventions, a Docker image, and a `make` target. It requires setting environment variables for the release tag and the path to the semantic conventions repository.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/go.opentelemetry.io/otel/RELEASING.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nexport TAG=\"v1.21.0\" # Change to the release version you are generating.\nexport OTEL_SEMCONV_REPO=\"/absolute/path/to/opentelemetry/semantic-conventions\"\ndocker pull otel/semconvgen:latest\nmake semconv-generate # Uses the exported TAG and OTEL_SEMCONV_REPO.\n```\n\n----------------------------------------\n\nTITLE: Building go-sqlite3 with -fno-PIC\nDESCRIPTION: This command is used to build the go-sqlite3 library on hardened systems where the -fPIC flag causes compilation errors.  It disables position-independent code generation. This is a workaround for systems that require specific compilation flags.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/mattn/go-sqlite3/README.md#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ngo build -ldflags '-extldflags=-fno-PIC'\n```\n\n----------------------------------------\n\nTITLE: Skopeo Logout with Custom Authfile\nDESCRIPTION: This example demonstrates how to remove login credentials for a specific registry (docker.io) using a custom authentication file specified by the `--authfile` option. It removes the cached credentials from the specified file.\nSOURCE: https://github.com/containers/skopeo/blob/main/docs/skopeo-logout.1.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ skopeo logout --authfile authdir/myauths.json docker.io\nRemove login credentials for docker.io\n```\n\n----------------------------------------\n\nTITLE: Reversing String with Grapheme Support Go\nDESCRIPTION: This code snippet demonstrates how to reverse a string while preserving grapheme clusters using the `ReverseString` function from the uniseg package. It takes the string \"🇩🇪🏳️‍🌈\" as input, reverses it, and prints the reversed string, ensuring that the flag emojis remain intact as single grapheme clusters.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/rivo/uniseg/README.md#_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\nfmt.Println(uniseg.ReverseString(\"🇩🇪🏳️‍🌈\"))\n// 🏳️‍🌈🇩🇪\n```\n\n----------------------------------------\n\nTITLE: Level Logging Example in Go with Logrus\nDESCRIPTION: This example showcases the different logging levels available in Logrus: Trace, Debug, Info, Warning, Error, Fatal, and Panic. Each level is demonstrated with a corresponding log message. Fatal calls os.Exit(1) after logging, while Panic calls panic() after logging.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/sirupsen/logrus/README.md#_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nlog.Trace(\"Something very low level.\")\nlog.Debug(\"Useful debugging information.\")\nlog.Info(\"Something noteworthy happened!\")\nlog.Warn(\"You should probably take a look at this.\")\nlog.Error(\"Something failed but I'm not quitting.\")\n// Calls os.Exit(1) after logging\nlog.Fatal(\"Bye.\")\n// Calls panic() after logging\nlog.Panic(\"I'm bailing.\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Global Tracer (Singleton) in Go\nDESCRIPTION: This snippet demonstrates how to initialize the global OpenTracing tracer using a tracing implementation-specific `New` function. It's crucial to perform this initialization as early as possible in the application's lifecycle, typically in the `main` function. The `SetGlobalTracer` function sets the tracer that will be used throughout the application.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/opentracing/opentracing-go/README.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nimport \"github.com/opentracing/opentracing-go\"\nimport \".../some_tracing_impl\"\n\nfunc main() {\n    opentracing.SetGlobalTracer(\n        // tracing impl specific:\n        some_tracing_impl.New(...),\n    )\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using jsonschema CLI tool\nDESCRIPTION: This bash command invokes the `jv` (JSON Validator) command-line tool. It validates one or more JSON or YAML documents against a specified JSON schema. The `-draft`, `-output`, `-assertformat`, and `-assertcontent` flags customize validation behavior.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/santhosh-tekuri/jsonschema/v5/README.md#_snippet_13\n\nLANGUAGE: Bash\nCODE:\n```\njv [-draft INT] [-output FORMAT] [-assertformat] [-assertcontent] <json-schema> [<json-or-yaml-doc>]...\n```\n\n----------------------------------------\n\nTITLE: Map Validation Example in Go\nDESCRIPTION: This code demonstrates how to use govalidator to validate a map[string]interface{} using a validation template map.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/asaskevich/govalidator/README.md#_snippet_18\n\nLANGUAGE: go\nCODE:\n```\nvar mapTemplate = map[string]interface{}{\n\t\"name\":\"required,alpha\",\n\t\"family\":\"required,alpha\",\n\t\"email\":\"required,email\",\n\t\"cell-phone\":\"numeric\",\n\t\"address\":map[string]interface{}{\n\t\t\"line1\":\"required,alphanum\",\n\t\t\"line2\":\"alphanum\",\n\t\t\"postal-code\":\"numeric\",\n\t},\n}\n\nvar inputMap = map[string]interface{}{\n\t\"name\":\"Bob\",\n\t\"family\":\"Smith\",\n\t\"email\":\"foo@bar.baz\",\n\t\"address\":map[string]interface{}{\n\t\t\"line1\":\"\",\n\t\t\"line2\":\"\",\n\t\t\"postal-code\":\"\",\n\t},\n}\n\nresult, err := govalidator.ValidateMap(inputMap, mapTemplate)\nif err != nil {\n\tprintln(\"error: \" + err.Error())\n}\nprintln(result)\n```\n\n----------------------------------------\n\nTITLE: Setting gRPC logging level\nDESCRIPTION: This code snippet demonstrates how to set the gRPC logging verbosity and severity levels using environment variables. Setting `GRPC_GO_LOG_VERBOSITY_LEVEL` to 99 and `GRPC_GO_LOG_SEVERITY_LEVEL` to `info` enables verbose logging for debugging purposes. These environment variables control the amount and type of information logged by the gRPC library.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/google.golang.org/grpc/README.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nexport GRPC_GO_LOG_VERBOSITY_LEVEL=99\nexport GRPC_GO_LOG_SEVERITY_LEVEL=info\n```\n\n----------------------------------------\n\nTITLE: Validating SemVer Version Against Constraint in Go\nDESCRIPTION: This code snippet demonstrates how to validate a SemVer version against a defined constraint using the `semver` library in Go. It first creates a constraint and a version, then uses the `Validate` method to check if the version satisfies the constraint. If the validation fails, it iterates through the error messages to identify the reasons for the failure.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/Masterminds/semver/v3/README.md#_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nc, err := semver.NewConstraint(\"<= 1.2.3, >= 1.4\")\nif err != nil {\n    // Handle constraint not being parseable.\n}\n\nv, err := semver.NewVersion(\"1.3\")\nif err != nil {\n    // Handle version not being parseable.\n}\n\n// Validate a version against a constraint.\na, msgs := c.Validate(v)\n// a is false\nfor _, m := range msgs {\n    fmt.Println(m)\n\n    // Loops over the errors which would read\n    // \"1.3 is greater than 1.2.3\"\n    // \"1.3 is less than 1.4\"\n}\n```\n\n----------------------------------------\n\nTITLE: Generating code using go generate (Shell)\nDESCRIPTION: This shell command executes the `go generate` tool to generate code for the entire repository. It ensures that any auto-generated code is up-to-date, which is a requirement for the pull request pipeline.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/Microsoft/go-winio/README.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n> go generate ./...\n```\n\n----------------------------------------\n\nTITLE: Generating KSUIDs and Outputting JSON\nDESCRIPTION: This command generates a set of KSUIDs and outputs them in JSON format, using the template functionality to define the JSON structure.  The template includes the timestamp, payload, and the KSUID string itself.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/segmentio/ksuid/README.md#_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\n$ ksuid -f template -t '{ \\\"timestamp\\\": \\\"{{ .Timestamp }}\\\", \\\"payload\\\": \\\"{{ .Payload }}\\\", \\\"ksuid\\\": \\\"{{.String}}\\\"}' -n 4\n```\n\n----------------------------------------\n\nTITLE: Installing Ubuntu dependencies with apt-get\nDESCRIPTION: This command installs the `build-essential` package, which provides essential tools for compiling software on Ubuntu.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/mattn/go-sqlite3/README.md#_snippet_11\n\nLANGUAGE: Bash\nCODE:\n```\nsudo apt-get install build-essential\n```\n\n----------------------------------------\n\nTITLE: Adding Tags to Context in OpenCensus Go\nDESCRIPTION: This snippet demonstrates how to add or modify tags within the current context using the `tag` package in OpenCensus Go. It utilizes `tag.New` to create a new context with specified tags. The `osKey` is assigned the value \"macOS-10.12.5\" and the `userIDKey` is assigned \"cde36753ed\".\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/go.opencensus.io/README.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nctx, err := tag.New(ctx,\n\ttag.Insert(osKey, \"macOS-10.12.5\"),\n\ttag.Upsert(userIDKey, \"cde36753ed\"),\n)\nif err != nil {\n\tlog.Fatal(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Building URLs with Subrouters in Go\nDESCRIPTION: This example demonstrates how to use subrouters in Gorilla Mux to define routes and then build URLs using the main router. It illustrates how host and path definitions are combined across routers.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/gorilla/mux/README.md#_snippet_22\n\nLANGUAGE: go\nCODE:\n```\nr := mux.NewRouter()\ns := r.Host(\"{subdomain}.example.com\").Subrouter()\ns.Path(\"/articles/{category}/{id:[0-9]+}\").\n  HandlerFunc(ArticleHandler).\n  Name(\"article\")\n\n// \"http://news.example.com/articles/technology/42\"\nurl, err := r.Get(\"article\").URL(\"subdomain\", \"news\",\n                                 \"category\", \"technology\",\n                                 \"id\", \"42\")\n```\n\n----------------------------------------\n\nTITLE: JSON Example for Mapstructure\nDESCRIPTION: A JSON example demonstrating a simple structure that can be decoded using mapstructure. This example highlights a scenario where the 'type' field determines the specific Go struct to decode into.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/mitchellh/mapstructure/README.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"type\": \"person\",\n  \"name\": \"Mitchell\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing sqlite3 on macOS with brew\nDESCRIPTION: This command installs the `sqlite3` package on macOS using Homebrew, which is a required dependency for building go-sqlite3.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/mattn/go-sqlite3/README.md#_snippet_12\n\nLANGUAGE: Bash\nCODE:\n```\nbrew install sqlite3\n```\n\n----------------------------------------\n\nTITLE: Testing Health Check Handler in Go\nDESCRIPTION: This Go code defines a test function `TestHealthCheckHandler` for the `HealthCheckHandler`. It creates a new HTTP request and a ResponseRecorder, then calls the handler's `ServeHTTP` method. It checks if the status code and response body match the expected values. Dependencies include `net/http`, `net/http/httptest`, and `testing` packages.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/gorilla/mux/README.md#_snippet_33\n\nLANGUAGE: go\nCODE:\n```\n// endpoints_test.go\npackage main\n\nimport (\n    \"net/http\"\n    \"net/http/httptest\"\n    \"testing\"\n)\n\nfunc TestHealthCheckHandler(t *testing.T) {\n    // Create a request to pass to our handler. We don't have any query parameters for now, so we'll\n    // pass 'nil' as the third parameter.\n    req, err := http.NewRequest(\"GET\", \"/health\", nil)\n    if err != nil {\n        t.Fatal(err)\n    }\n\n    // We create a ResponseRecorder (which satisfies http.ResponseWriter) to record the response.\n    rr := httptest.NewRecorder()\n    handler := http.HandlerFunc(HealthCheckHandler)\n\n    // Our handlers satisfy http.Handler, so we can call their ServeHTTP method\n    // directly and pass in our Request and ResponseRecorder.\n    handler.ServeHTTP(rr, req)\n\n    // Check the status code is what we expect.\n    if status := rr.Code; status != http.StatusOK {\n        t.Errorf(\"handler returned wrong status code: got %v want %v\",\n            status, http.StatusOK)\n    }\n\n    // Check the response body is what we expect.\n    expected := `{\"alive\": true}`\n    if rr.Body.String() != expected {\n        t.Errorf(\"handler returned unexpected body: got %v want %v\",\n            rr.Body.String(), expected)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Cross Compiling Skopeo\nDESCRIPTION: This command cross-compiles Skopeo for a specific OS and architecture. For example, it builds Skopeo for RISC-V 64-bit Linux.\nSOURCE: https://github.com/containers/skopeo/blob/main/install.md#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nmake bin/skopeo.linux.riscv64\n```\n\n----------------------------------------\n\nTITLE: Using Marshaler and TextUnmarshaler with TOML\nDESCRIPTION: This snippet demonstrates how to use the `encoding.TextUnmarshaler` interface to automatically parse values, specifically `mail.Address` values, when decoding TOML data. It defines an `address` type that implements `UnmarshalText` to parse email addresses from the TOML string.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/BurntSushi/toml/README.md#_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\ncontacts = [\n    \"Donald Duck <donald@duckburg.com>\",\n    \"Scrooge McDuck <scrooge@duckburg.com>\",\n]\n```\n\n----------------------------------------\n\nTITLE: Running golangci-lint for Windows and Linux - PowerShell\nDESCRIPTION: This snippet shows how to run golangci-lint across the entire repository for both Windows and Linux operating systems using PowerShell.  It iterates through the 'windows' and 'linux' GOOS values and then the root and test directories, executing golangci-lint in each context.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/Microsoft/hcsshim/README.md#_snippet_8\n\nLANGUAGE: PowerShell\nCODE:\n```\n> foreach ( $goos in ('windows', 'linux') ) {\n    foreach ( $repo in ('.', 'test') ) {\n        pwsh -Command \"cd $repo && go env -w GOOS=$goos && golangci-lint.exe run --verbose\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Compressing a File using gxz\nDESCRIPTION: This command shows how to compress a file using the gxz command-line tool. It compresses the specified file (`bigfile`) and replaces it with a compressed version (`bigfile.xz`).\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/ulikunitz/xz/README.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n$ gxz bigfile\n```\n\n----------------------------------------\n\nTITLE: Installing Alpine dependencies with apk\nDESCRIPTION: This command installs the necessary dependencies for compiling go-sqlite3 in an Alpine Linux container. It updates the package index and installs `gcc` and `musl-dev`.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/mattn/go-sqlite3/README.md#_snippet_9\n\nLANGUAGE: Bash\nCODE:\n```\napk add --update gcc musl-dev\n```\n\n----------------------------------------\n\nTITLE: Adding Go Dependency with go get\nDESCRIPTION: This snippet demonstrates how to add a new dependency to the project by using the go get command with the -d flag to modify the go.mod file without downloading the dependency immediately.  The path to the dependency and desired version are specified. This should be followed by `make vendor` to update the vendor directory.\nSOURCE: https://github.com/containers/skopeo/blob/main/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\ngo get -d path/to/dep@version\n```\n\n----------------------------------------\n\nTITLE: Setting Default Draft Version in Go\nDESCRIPTION: This code snippet demonstrates how to force the JSON schema compiler to use a specific draft version when the `$schema` property is missing in the schema. It initializes a new compiler instance and sets the `Draft` property to `jsonschema.Draft4`, ensuring that the draft 4 version is used for compilation.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/santhosh-tekuri/jsonschema/v5/README.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\ncompiler := jsonschema.NewCompiler()\ncompiler.Draft = jsonschema.Draft4\n```\n\n----------------------------------------\n\nTITLE: Extracting an error using errors.As\nDESCRIPTION: This snippet shows how to use `errors.As` to extract a specific error type from a multierror. It attempts to extract a `RichErrorType` from the error returned by `somefunc()`. If the extraction is successful, the `errRich` variable will be populated with the extracted error.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/hashicorp/go-multierror/README.md#_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// Assume err is a multierror value\nerr := somefunc()\n\n// We want to know if \"err\" has a \"RichErrorType\" in it and extract it.\nvar errRich RichErrorType\nif errors.As(err, &errRich) {\n\t// It has it, and now errRich is populated.\n}\n```\n\n----------------------------------------\n\nTITLE: Installing uniseg package\nDESCRIPTION: This command installs the uniseg package, which provides Unicode text segmentation functionality in Go. It uses the go get command to download and install the package from the specified GitHub repository.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/rivo/uniseg/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/rivo/uniseg\n```\n\n----------------------------------------\n\nTITLE: Defining MemoryStat Message in Protobuf\nDESCRIPTION: This protobuf snippet defines the 'MemoryStat' message, representing memory usage statistics for a cgroup. It includes fields for cache, rss, rss_huge, mapped_file, dirty, writeback, various page fault statistics, inactive and active memory regions, and hierarchical memory limits, along with totals for many of these metrics and usage breakdown (usage, swap, kernel, kernel_tcp).\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/containerd/cgroups/v3/cgroup1/stats/metrics.pb.txt#_snippet_6\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage MemoryStat {\n  optional uint64 cache = 1;\n  optional uint64 rss = 2;\n  optional uint64 rss_huge = 3;\n  optional uint64 mapped_file = 4;\n  optional uint64 dirty = 5;\n  optional uint64 writeback = 6;\n  optional uint64 pg_pg_in = 7;\n  optional uint64 pg_pg_out = 8;\n  optional uint64 pg_fault = 9;\n  optional uint64 pg_maj_fault = 10;\n  optional uint64 inactive_anon = 11;\n  optional uint64 active_anon = 12;\n  optional uint64 inactive_file = 13;\n  optional uint64 active_file = 14;\n  optional uint64 unevictable = 15;\n  optional uint64 hierarchical_memory_limit = 16;\n  optional uint64 hierarchical_swap_limit = 17;\n  optional uint64 total_cache = 18;\n  optional uint64 total_rss = 19;\n  optional uint64 total_rss_huge = 20;\n  optional uint64 total_mapped_file = 21;\n  optional uint64 total_dirty = 22;\n  optional uint64 total_writeback = 23;\n  optional uint64 total_pg_pg_in = 24;\n  optional uint64 total_pg_pg_out = 25;\n  optional uint64 total_pg_fault = 26;\n  optional uint64 total_pg_maj_fault = 27;\n  optional uint64 total_inactive_anon = 28;\n  optional uint64 total_active_anon = 29;\n  optional uint64 total_inactive_file = 30;\n  optional uint64 total_active_file = 31;\n  optional uint64 total_unevictable = 32;\n  optional MemoryEntry usage = 33;\n  optional MemoryEntry swap = 34;\n  optional MemoryEntry kernel = 35;\n  optional MemoryEntry kernel_tcp = 36;\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for an exact error value using errors.Is\nDESCRIPTION: This snippet demonstrates how to use `errors.Is` to check if a multierror contains a specific error value, such as `os.ErrNotExist`. It checks if the error returned by `somefunc()` is `os.ErrNotExist`. If it is, the code executes the corresponding block.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/hashicorp/go-multierror/README.md#_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// Assume err is a multierror value\nerr := somefunc()\nif errors.Is(err, os.ErrNotExist) {\n\t// err contains os.ErrNotExist\n}\n```\n\n----------------------------------------\n\nTITLE: Installing jsonschema CLI tool in Go\nDESCRIPTION: This command installs the `jv` command-line tool, which is part of the `jsonschema` package. It uses `go install` to download and install the tool from the specified GitHub repository at the latest version.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/santhosh-tekuri/jsonschema/v5/README.md#_snippet_12\n\nLANGUAGE: Bash\nCODE:\n```\ngo install github.com/santhosh-tekuri/jsonschema/cmd/jv@latest\n```\n\n----------------------------------------\n\nTITLE: Building with Specific Features using Build Tags\nDESCRIPTION: This bash command demonstrates how to build the go-sqlite3 library with specific features enabled using build tags.  Multiple tags are space delimited. The CGO_ENABLED=1 environment variable must be set, and a gcc compiler must be present in the path.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/mattn/go-sqlite3/README.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\ngo build -tags \"<FEATURE>\"\n```\n\n----------------------------------------\n\nTITLE: EWMA Usage Example in Go\nDESCRIPTION: This code demonstrates how to use the `ewma` package in Go to calculate exponentially weighted moving averages. It initializes both a `SimpleEWMA` (using `NewMovingAverage()`) and a `VariableEWMA` (using `NewMovingAverage(5)`), adds sample data, and then retrieves the calculated average using the `Value()` method. The decay factor for `VariableEWMA` is set based on the provided parameter.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/VividCortex/ewma/README.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport \"github.com/VividCortex/ewma\"\n\nfunc main() {\n\tsamples := [100]float64{\n\t\t4599, 5711, 4746, 4621, 5037, 4218, 4925, 4281, 5207, 5203, 5594, 5149,\n\t}\n\n\te := ewma.NewMovingAverage()  //=> Returns a SimpleEWMA if called without params\n\ta := ewma.NewMovingAverage(5) //=> returns a VariableEWMA with a decay of 2 / (5 + 1)\n\n\tfor _, f := range samples {\n\t\te.Add(f)\n\t\ta.Add(f)\n\t}\n\n\te.Value() //=> 13.577404704631077\n\ta.Value() //=> 1.5806140565521463e-12\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Skopeo on Ubuntu\nDESCRIPTION: These commands install the skopeo package on Ubuntu using apt-get. First, the package lists are updated, then skopeo is installed. The `-y` flag automatically confirms the installation.\nSOURCE: https://github.com/containers/skopeo/blob/main/install.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n# Ubuntu 20.10 and newer\nsudo apt-get -y update\nsudo apt-get -y install skopeo\n```\n\n----------------------------------------\n\nTITLE: Go Constant Definition\nDESCRIPTION: This code snippet shows an example of how constant declarations can lead to type mismatches in Go, and how to resolve it by explicitly defining the type for each constant.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/ulikunitz/xz/TODO.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nconst (\n  a byte = 0x1\n  b      = 0x2\n)\n```\n\nLANGUAGE: go\nCODE:\n```\nconst (\n  a byte = 0x1\n  b byte = 0x2\n)\n```\n\n----------------------------------------\n\nTITLE: Generating Containerd Configuration - PowerShell\nDESCRIPTION: This snippet demonstrates how to generate a default Containerd configuration file using the containerd.exe command.  The output is redirected to a config.toml file, encoded as ASCII, which configures the runtime environment for Containerd.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/Microsoft/hcsshim/README.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\n.\\containerd.exe config default | Out-File \"C:\\Program Files\\containerd\\config.toml\" -Encoding ascii\n```\n\n----------------------------------------\n\nTITLE: Accessing the list of errors using type assertion\nDESCRIPTION: This snippet demonstrates how to access the underlying list of errors within a `multierror.Error` using a type assertion. If the error returned by `something()` is a `multierror.Error`, the code extracts the list of errors using `merr.Errors`. This requires awareness that a multierror might be returned.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/hashicorp/go-multierror/README.md#_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nif err := something(); err != nil {\n\tif merr, ok := err.(*multierror.Error); ok {\n\t\t// Use merr.Errors\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Build Dependencies on Arch Linux\nDESCRIPTION: Installs dependencies needed for building Skopeo from source on Arch Linux using pacman. This includes base-devel, gpgme, and btrfs-progs.\nSOURCE: https://github.com/containers/skopeo/blob/main/install.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n# Arch Linux:\nsudo pacman -S base-devel gpgme btrfs-progs\n```\n\n----------------------------------------\n\nTITLE: Sorting Semantic Versions in Go\nDESCRIPTION: This code snippet illustrates how to sort a slice of semantic versions using the `sort` package and the `semver.Collection` type. It first parses a list of raw version strings into `semver.Version` objects, and then sorts them.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/Masterminds/semver/v3/README.md#_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nraw := []string{\"1.2.3\", \"1.0\", \"1.3\", \"2\", \"0.4.2\",}\nvs := make([]*semver.Version, len(raw))\nfor i, r := range raw {\n    v, err := semver.NewVersion(r)\n    if err != nil {\n        t.Errorf(\"Error parsing version: %s\", err)\n    }\n\n    vs[i] = v\n}\n\nsort.Sort(semver.Collection(vs))\n```\n\n----------------------------------------\n\nTITLE: Defining CPUStat Message in Protobuf\nDESCRIPTION: This protobuf snippet defines the 'CPUStat' message, representing CPU usage statistics for a cgroup. It includes fields for 'usage' (CPUUsage message) and 'throttling' (Throttle message).\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/containerd/cgroups/v3/cgroup1/stats/metrics.pb.txt#_snippet_3\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage CPUStat {\n  optional CPUUsage usage = 1;\n  optional Throttle throttling = 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Declared Type Option Implementation Go\nDESCRIPTION: Demonstrates implementing an option with a declared type. A struct holds the value, and the `apply` method updates the `config` with this value. The `WithMyType` function creates the option.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#_snippet_12\n\nLANGUAGE: go\nCODE:\n```\ntype myTypeOption struct {\n\tMyType MyType\n}\n\nfunc (o myTypeOption) apply(c config) config {\n\tc.MyType = o.MyType\n    return c\n}\n\n// WithMyType sets T to have include MyType.\nfunc WithMyType(t MyType) Option {\n\treturn myTypeOption{t}\n}\n\n```\n\n----------------------------------------\n\nTITLE: Calculating String Width with runewidth in Go\nDESCRIPTION: This code snippet demonstrates how to use the `runewidth.StringWidth` function to determine the display width of a string. The library is required to be imported before usage. The expected output would be 12, the calculated string width of \"つのだ☆HIRO\".\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/mattn/go-runewidth/README.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nrunewidth.StringWidth(\"つのだ☆HIRO\") == 12\n```\n\n----------------------------------------\n\nTITLE: Create a new branch, modify, commit and push\nDESCRIPTION: Creates a new branch, applies modifications, commits the changes, and pushes the branch to the user's forked repository. This is the standard workflow for making changes and submitting them as a pull request.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/go.opencensus.io/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ git checkout -b feature\n# edit files\n$ git commit\n$ git push fork feature\n```\n\n----------------------------------------\n\nTITLE: Installing CamelCase Package Go\nDESCRIPTION: This command retrieves and installs the `camelcase` package from GitHub, making it available for use in Go projects. It uses the `go get` command, a standard tool for managing Go dependencies. The package is located at `github.com/fatih/camelcase`.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/containers/common/pkg/report/camelcase/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/fatih/camelcase\n```\n\n----------------------------------------\n\nTITLE: Retrieving Route Variable Names in Go\nDESCRIPTION: Demonstrates how to retrieve the required variable names for a given route using the `GetVarNames()` method in Gorilla Mux. This helps in understanding the necessary parameters for URL construction.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/gorilla/mux/README.md#_snippet_23\n\nLANGUAGE: go\nCODE:\n```\nr := mux.NewRouter()\nr.Host(\"{domain}\").\n    Path(\"/{group}/{item_id}\").\n    Queries(\"some_data1\", \"{some_data1}\").\n    Queries(\"some_data2\", \"{some_data2}\").\n    Name(\"article\")\n\n// Will print [domain group item_id some_data1 some_data2] <nil>\nfmt.Println(r.Get(\"article\").GetVarNames())\n```\n\n----------------------------------------\n\nTITLE: Installing Skopeo on Debian\nDESCRIPTION: These commands install the skopeo package on Debian using apt-get. First, the package lists are updated, then skopeo is installed. The `-y` flag automatically confirms the installation.\nSOURCE: https://github.com/containers/skopeo/blob/main/install.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n# Debian Bullseye, Testing or Unstable/Sid\nsudo apt-get update\nsudo apt-get -y install skopeo\n```\n\n----------------------------------------\n\nTITLE: Logging changes with git\nDESCRIPTION: This snippet is used to log changes between the last tag and HEAD.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/go.opentelemetry.io/otel/RELEASING.md#_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ngit --no-pager log --pretty=oneline \"<last tag>..HEAD\"\n```\n\n----------------------------------------\n\nTITLE: OpenInRoot API Usage Example\nDESCRIPTION: This section describes the `OpenInRoot` and related APIs (`OpenatInRoot`, `Reopen`) which are much safer versions of using `SecureJoin` with `os.OpenFile`. The description highlights that the returned `*os.File` is an O_PATH file descriptor, and that `Reopen` may be needed to make the handle more usable. It also warns about the potential security issues when using the returned handle.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/cyphar/filepath-securejoin/README.md#_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nfunc OpenInRoot(root, unsafePath string) (*os.File, error)\nfunc OpenatInRoot(root *os.File, unsafePath string) (*os.File, error)\nfunc Reopen(handle *os.File, flags int) (*os.File, error)\n```\n\n----------------------------------------\n\nTITLE: Inspecting a KSUID using the CLI\nDESCRIPTION: This command inspects the components of a KSUID using the ksuid command-line tool with the -f inspect flag. It displays the string representation, raw bytes, timestamp, and payload.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/segmentio/ksuid/README.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ ksuid -f inspect 0ujtsYcgvSTl8PAuAdqWYSMnLOv\n```\n\n----------------------------------------\n\nTITLE: Building the CLI wrapper - Makefile\nDESCRIPTION: This snippet describes the command used to build the command line interface (CLI) wrapper for the `containers/storage` library. The wrapper facilitates manual interaction and scripting use with the library's functionalities. It uses the `make` utility to execute the build process as defined in the Makefile.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/containers/storage/README.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake binary\n```\n\n----------------------------------------\n\nTITLE: Defining CPUUsage Message in Protobuf\nDESCRIPTION: This protobuf snippet defines the 'CPUUsage' message, representing detailed CPU usage statistics. It contains fields for total, kernel, user, and per-CPU usage.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/containerd/cgroups/v3/cgroup1/stats/metrics.pb.txt#_snippet_4\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage CPUUsage {\n  optional uint64 total = 1;\n  optional uint64 kernel = 2;\n  optional uint64 user = 3;\n  repeated uint64 per_cpu = 4;\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Go Dependency Replacement with go mod edit\nDESCRIPTION: This snippet shows how to remove a previously added replacement from the go.mod file using the `go mod edit -dropreplace` command.  The original dependency path that was replaced is specified.\nSOURCE: https://github.com/containers/skopeo/blob/main/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\ngo mod edit -dropreplace=github.com/containers/image\n```\n\n----------------------------------------\n\nTITLE: Defining Throttle Message in Protobuf\nDESCRIPTION: This protobuf snippet defines the 'Throttle' message, representing CPU throttling statistics for a cgroup. It contains fields for periods, throttled_periods, and throttled_time.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/containerd/cgroups/v3/cgroup1/stats/metrics.pb.txt#_snippet_5\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage Throttle {\n  optional uint64 periods = 1;\n  optional uint64 throttled_periods = 2;\n  optional uint64 throttled_time = 3;\n}\n```\n\n----------------------------------------\n\nTITLE: Building for macOS on x86_64 with libsqlite3 and go build\nDESCRIPTION: This command compiles the go-sqlite3 package for macOS on x86_64 architecture, linking directly to the `libsqlite3` library. It specifies the `libsqlite3`, `darwin`, and `amd64` build tags.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/mattn/go-sqlite3/README.md#_snippet_16\n\nLANGUAGE: Bash\nCODE:\n```\ngo build -tags \"libsqlite3 darwin amd64\"\n```\n\n----------------------------------------\n\nTITLE: Installing gorilla/mux with go get\nDESCRIPTION: This command installs the gorilla/mux package using the go get command. It assumes a correctly configured Go toolchain. The `-u` flag ensures that the package and its dependencies are updated to the latest version.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/gorilla/mux/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngo get -u github.com/gorilla/mux\n```\n\n----------------------------------------\n\nTITLE: Importing HTTP Loader for JSON Schema in Go\nDESCRIPTION: This code snippet shows how to import the `httploader` package to enable loading JSON schemas from HTTP URLs. The blank import `_` is used to ensure that the `httploader` package is initialized without directly referencing any of its exported identifiers.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/santhosh-tekuri/jsonschema/v5/README.md#_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nimport _ \"github.com/santhosh-tekuri/jsonschema/v5/httploader\"\n```\n\n----------------------------------------\n\nTITLE: Add fork as a remote origin\nDESCRIPTION: Adds the user's forked repository as a remote origin in the local Git configuration. This allows the user to push changes to their fork.  `YOUR_GITHUB_USERNAME` should be replaced with the actual username.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/go.opencensus.io/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd $(go env GOPATH)/src/go.opencensus.io\ngit remote add fork git@github.com:YOUR_GITHUB_USERNAME/opencensus-go.git\n```\n\n----------------------------------------\n\nTITLE: Install ZFS on Ubuntu 14.04\nDESCRIPTION: These shell commands install ZFS on Ubuntu 14.04. They add a ZFS-native repository, update the package list, and install the ubuntu-zfs and libzfs-dev packages. Requires root privileges to execute.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/mistifyio/go-zfs/v3/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nsudo apt-get install python-software-properties\nsudo apt-add-repository ppa:zfs-native/stable\nsudo apt-get update\nsudo apt-get install ubuntu-zfs libzfs-dev\n```\n\n----------------------------------------\n\nTITLE: MkdirAll and MkdirAllHandle API Definitions\nDESCRIPTION: This section describes the `MkdirAll` and `MkdirAllHandle` APIs, providing safer versions of using `SecureJoin` with `os.MkdirAll`. It points out that `MkdirAllHandle` returns an `*os.File` of the final created directory, which is guaranteed to be identical to the directory created. Both functions will return errors if they encounter dangling symlinks or non-existent paths.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/cyphar/filepath-securejoin/README.md#_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nfunc MkdirAll(root, unsafePath string, mode int) error\nfunc MkdirAllHandle(root *os.File, unsafePath string, mode int) (*os.File, error)\n```\n\n----------------------------------------\n\nTITLE: Output ValidationError in Detailed Format (Go)\nDESCRIPTION: This code snippet demonstrates how to output a `ValidationError` in the `detailed` format. It marshals the `DetailedOutput()` of the error to JSON with indentation, presenting a hierarchical view of errors with nested `errors` arrays, which includes location information and error messages.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/santhosh-tekuri/jsonschema/v5/README.md#_snippet_10\n\nLANGUAGE: Go\nCODE:\n```\nb, _ := json.MarshalIndent(err.DetailedOutput(), \"\", \"  \")\nfmt.Println(string(b))\n```\n\n----------------------------------------\n\nTITLE: Listing tags in a Docker archive file using skopeo\nDESCRIPTION: This example demonstrates how to list the tags in a local docker-archive file named `/tmp/busybox.tar.gz` using the `skopeo list-tags` command with the `docker-archive:` transport. The output is a JSON object containing an array of tags found within the archive.\nSOURCE: https://github.com/containers/skopeo/blob/main/docs/skopeo-list-tags.1.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ skopeo list-tags docker-archive:/tmp/busybox.tar.gz\n{\n    \"Tags\": [\n        \"busybox:1.28.3\"\n    ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Normalizing Flag Names\nDESCRIPTION: Demonstrates how to set a custom flag name normalization function. This function allows flag names to be mutated both when created in the code and when used on the command line to some 'normalized' form.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/spf13/pflag/README.md#_snippet_9\n\nLANGUAGE: Go\nCODE:\n```\nfunc wordSepNormalizeFunc(f *pflag.FlagSet, name string) pflag.NormalizedName {\n\tfrom := []string{\"-\", \"_\"}\n\tto := \".\"\n\tfor _, sep := range from {\n\t\tname = strings.Replace(name, sep, to, -1)\n\t}\n\treturn pflag.NormalizedName(name)\n}\n\nmyFlagSet.SetNormalizeFunc(wordSepNormalizeFunc)\n```\n\nLANGUAGE: Go\nCODE:\n```\nfunc aliasNormalizeFunc(f *pflag.FlagSet, name string) pflag.NormalizedName {\n\tswitch name {\n\tcase \"old-flag-name\":\n\t\tname = \"new-flag-name\"\n\t\tbreak\n\t}\n\treturn pflag.NormalizedName(name)\n}\n\nmyFlagSet.SetNormalizeFunc(aliasNormalizeFunc)\n```\n\n----------------------------------------\n\nTITLE: Installing Skopeo on Arch Linux\nDESCRIPTION: This command installs the skopeo package using the pacman package manager on Arch Linux. It requires root privileges.\nSOURCE: https://github.com/containers/skopeo/blob/main/install.md#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nsudo pacman -S skopeo\n```\n\n----------------------------------------\n\nTITLE: Generating Multiple KSUIDs using the CLI\nDESCRIPTION: This command generates a specified number of KSUIDs (in this case, 4) using the ksuid command-line tool with the -n flag. Each KSUID is printed on a new line.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/segmentio/ksuid/README.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ ksuid -n 4\n```\n\n----------------------------------------\n\nTITLE: Importing gRPC in Go\nDESCRIPTION: This code snippet shows how to import the gRPC package in your Go project.  This is a necessary step to use gRPC functionality.  The import statement allows you to access the gRPC library functions and types.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/google.golang.org/grpc/README.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nimport \"google.golang.org/grpc\"\n```\n\n----------------------------------------\n\nTITLE: Renaming Metric Instruments in OpenTelemetry Go\nDESCRIPTION: This snippet highlights the renaming of metric instruments in the OpenTelemetry Go SDK to align with the feature-frozen metric API specification. ValueRecorder is renamed to Histogram, ValueObserver to Gauge, SumObserver to CounterObserver, and UpDownSumObserver to UpDownCounterObserver.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Running code spell check with Make\nDESCRIPTION: Runs the code spell checker using `make codespell`. This command sets up a virtual environment, installs `codespell` within it and checks for common typos in the codebase.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nmake codespell\n```\n\n----------------------------------------\n\nTITLE: Config Struct Definition Go\nDESCRIPTION: Defines a `config` struct to hold configuration options.  This struct should contain all configurable settings.  It's generally unexported to encapsulate configuration logic and prevent direct modification.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#_snippet_8\n\nLANGUAGE: go\nCODE:\n```\n// config contains configuration options for a thing.\ntype config struct {\n\t// options ...\n}\n\n```\n\n----------------------------------------\n\nTITLE: Run tests\nDESCRIPTION: Installs necessary tools and then executes tests to ensure the codebase is functioning correctly.  `make install-tools` is run only the first time to install necessary dependencies.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/go.opencensus.io/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ make install-tools  # Only first time.\n$ make\n```\n\n----------------------------------------\n\nTITLE: Building Containerd Shim - PowerShell\nDESCRIPTION: This snippet shows how to build the containerd shim for Windows by setting the GOOS environment variable to \"windows\" and then using the go build command. This ensures that the resulting binary is compatible with the Windows operating system.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/Microsoft/hcsshim/README.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nC:\\> $env:GOOS=\"windows\"\nC:\\> go build .\\cmd\\containerd-shim-runhcs-v1\n```\n\n----------------------------------------\n\nTITLE: Benchmark Results (b3e7a5386f996177e4808f11acb2aa93a0f660df)\nDESCRIPTION: These are benchmark results for the github.com/go-openapi/swag package on a Linux AMD64 system with an Intel i5-6200U CPU. The results show the performance of various name mangling functions, including execution time (ns/op), memory allocation (B/op), and number of allocations (allocs/op).\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/go-openapi/swag/BENCHMARK.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ngoos: linux\ngoarch: amd64\npkg: github.com/go-openapi/swag\ncpu: Intel(R) Core(TM) i5-6200U CPU @ 2.30GHz\nBenchmarkToXXXName/ToGoName-4         \t  862623\t     44101 ns/op\t   10450 B/op\t     732 allocs/op\nBenchmarkToXXXName/ToVarName-4        \t  853656\t     40728 ns/op\t   10468 B/op\t     734 allocs/op\nBenchmarkToXXXName/ToFileName-4       \t 1268312\t     27813 ns/op\t    9785 B/op\t     617 allocs/op\nBenchmarkToXXXName/ToCommandName-4    \t 1276322\t     27903 ns/op\t    9785 B/op\t     617 allocs/op\nBenchmarkToXXXName/ToHumanNameLower-4 \t  895334\t     40354 ns/op\t   10472 B/op\t     731 allocs/op\nBenchmarkToXXXName/ToHumanNameTitle-4 \t  882441\t     40678 ns/op\t   10566 B/op\t     749 allocs/op\n```\n\n----------------------------------------\n\nTITLE: Recording Stats with OpenCensus Go\nDESCRIPTION: This code snippet showcases how to record measurements associated with a specific measure using the `stats` package in OpenCensus Go. The `stats.Record` function implicitly tags the measurement with the tags from the provided context (`ctx`). In this case, it records a video size of 102478 using the `videoSize` measure.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/go.opencensus.io/README.md#_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nstats.Record(ctx, videoSize.M(102478))\n```\n\n----------------------------------------\n\nTITLE: Installing Skopeo on Nix/NixOS\nDESCRIPTION: This command installs the skopeo package using the Nix package manager on Nix/NixOS. It assumes Nix is already installed.\nSOURCE: https://github.com/containers/skopeo/blob/main/install.md#_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\n$ nix-env -i skopeo\n```\n\n----------------------------------------\n\nTITLE: Generating a KSUID using the CLI\nDESCRIPTION: This command generates a single KSUID using the ksuid command-line tool. It assumes the tool is installed and available in the system's PATH.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/segmentio/ksuid/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ ksuid\n```\n\n----------------------------------------\n\nTITLE: Counting Grapheme Clusters Go\nDESCRIPTION: This example counts the number of grapheme clusters in a given string using the uniseg package. It calls the `GraphemeClusterCount` function with the string \"🇩🇪🏳️‍🌈\" and prints the result, which is 2 because each flag is considered one grapheme cluster.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/rivo/uniseg/README.md#_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nn := uniseg.GraphemeClusterCount(\"🇩🇪🏳️‍🌈\")\nfmt.Println(n)\n// 2\n```\n\n----------------------------------------\n\nTITLE: Installing Mapstructure with go get\nDESCRIPTION: Installs the mapstructure library using the standard `go get` command. This command retrieves the library and its dependencies from the specified repository.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/mitchellh/mapstructure/README.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n$ go get github.com/mitchellh/mapstructure\n```\n\n----------------------------------------\n\nTITLE: Cross Compiling with musl-cross and go build\nDESCRIPTION: This command demonstrates cross-compilation from macOS to Linux using `musl-cross`.  It sets the CC and CXX environment variables to the musl-cross compilers, sets GOARCH and GOOS, enables CGO, and then runs the `go build` command with linker flags for static linking.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/mattn/go-sqlite3/README.md#_snippet_6\n\nLANGUAGE: Bash\nCODE:\n```\nCC=x86_64-linux-musl-gcc CXX=x86_64-linux-musl-g++ GOARCH=amd64 GOOS=linux CGO_ENABLED=1 go build -ldflags \"-linkmode external -extldflags -static\"\n```\n\n----------------------------------------\n\nTITLE: Packaging Guest Agent with RootFS - Shell\nDESCRIPTION: This snippet demonstrates how to package the Linux guest agent inside a root filesystem. It involves pulling a Busybox image, exporting the container's root filesystem, and then using make to build the final image. The rootfs is then packaged with the agent for booting.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/Microsoft/hcsshim/README.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ndocker pull busybox\ndocker run --name base_image_container busybox\ndocker export base_image_container | gzip > base.tar.gz\nBASE=./base.tar.gz\nmake all\n```\n\n----------------------------------------\n\nTITLE: Updating Go Dependency with go get\nDESCRIPTION: This snippet demonstrates how to update an existing dependency in the project by using the go get command with the -d and -u flags. The -u flag ensures that the dependency is updated to the specified version or the latest version if no version is provided. This is followed by `make vendor` to update the vendor directory.\nSOURCE: https://github.com/containers/skopeo/blob/main/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\ngo get -d -u path/to/dep@version\n```\n\n----------------------------------------\n\nTITLE: Sign and Detach PKCS7 Data in Go\nDESCRIPTION: This function signs provided content using PKCS7, detaches the signature, and verifies the signature. It takes the content to be signed, a certificate, and a private key as input. It returns the signed data as a byte array or an error if signing or verification fails. It uses the smallstep/pkcs7 library.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/smallstep/pkcs7/README.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"bytes\"\n\t\"crypto/rsa\"\n\t\"crypto/x509\"\n\t\"encoding/pem\"\n\t\"fmt\"\n\t\"os\"\n\n    \"github.com/smallstep/pkcs7\"\n)\n\nfunc SignAndDetach(content []byte, cert *x509.Certificate, privkey *rsa.PrivateKey) (signed []byte, err error) {\n\ttoBeSigned, err := NewSignedData(content)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"Cannot initialize signed data: %w\", err)\n\t}\n\tif err = toBeSigned.AddSigner(cert, privkey, SignerInfoConfig{}); err != nil {\n\t\treturn nil, fmt.Errorf(\"Cannot add signer: %w\", err)\n\t}\n\n\t// Detach signature, omit if you want an embedded signature\n\ttoBeSigned.Detach()\n\n\tsigned, err = toBeSigned.Finish()\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"Cannot finish signing data: %w\", err)\n\t}\n\n\t// Verify the signature\n\tpem.Encode(os.Stdout, &pem.Block{Type: \"PKCS7\", Bytes: signed})\n\tp7, err := pkcs7.Parse(signed)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"Cannot parse our signed data: %w\", err)\n\t}\n\n\t// since the signature was detached, reattach the content here\n\tp7.Content = content\n\n\tif bytes.Compare(content, p7.Content) != 0 {\n\t\treturn nil, fmt.Errorf(\"Our content was not in the parsed data:\\n\\tExpected: %s\\n\\tActual: %s\", content, p7.Content)\n\t}\n\tif err = p7.Verify(); err != nil {\n\t\treturn nil, fmt.Errorf(\"Cannot verify our signed data: %w\", err)\n\t}\n\n\treturn signed, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Text Formatter with Color Disable - Go\nDESCRIPTION: This snippet configures the Logrus logger to use the TextFormatter and disables color output, setting a full timestamp.  It's useful when a TTY is not attached, ensuring consistent log formatting across different environments.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/sirupsen/logrus/README.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n\tlog.SetFormatter(&log.TextFormatter{\n\t\tDisableColors: true,\n\t\tFullTimestamp: true,\n\t})\n```\n\n----------------------------------------\n\nTITLE: Matching Routes based on Path Prefix using gorilla/mux in Go\nDESCRIPTION: This code snippet demonstrates how to match routes based on a path prefix using the gorilla/mux package in Go. It registers a route that matches any request with a URL path starting with '/products/'. This is useful for grouping routes under a common path.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/gorilla/mux/README.md#_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\nr.PathPrefix(\"/products/\")\n```\n\n----------------------------------------\n\nTITLE: Instantiation with Options Go\nDESCRIPTION: Shows how to use the options in an instantiation function `NewT`.  Required parameters are declared before the variadic `options` parameter.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nfunc NewT(options ...Option) T {…}\n\n```\n\n----------------------------------------\n\nTITLE: Installing go-md2man on Fedora\nDESCRIPTION: Installs go-md2man on Fedora based systems.\nSOURCE: https://github.com/containers/skopeo/blob/main/install.md#_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\n# Fedora:\nsudo dnf install go-md2man\n```\n\n----------------------------------------\n\nTITLE: Running Benchmark Tests in Go\nDESCRIPTION: This command is used to run benchmark tests in Go. The `-bench` flag specifies the benchmark to run, `-run` specifies the tests to run (in this case, none), and `-benchtime` sets the duration for each benchmark to 30 seconds. This provides a comprehensive performance analysis.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/go-openapi/swag/BENCHMARK.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo test -bench XXX -run XXX -benchtime 30s\n```\n\n----------------------------------------\n\nTITLE: Importing govalidator Package\nDESCRIPTION: This snippet shows how to import the govalidator package in a Go file. It demonstrates both the standard import and aliased import methods.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/asaskevich/govalidator/README.md#_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nimport \"github.com/asaskevich/govalidator\"\n```\n\nLANGUAGE: Go\nCODE:\n```\nimport (\n  valid \"github.com/asaskevich/govalidator\"\n)\n```\n\n----------------------------------------\n\nTITLE: Building Skopeo Binary\nDESCRIPTION: This command builds the Skopeo binary inside a container. It requires podman to be installed and configured.\nSOURCE: https://github.com/containers/skopeo/blob/main/install.md#_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\n$ make binary\n```\n\n----------------------------------------\n\nTITLE: Developer Certificate of Origin\nDESCRIPTION: This code snippet displays the Developer Certificate of Origin (DCO) version 1.1. It outlines the terms and conditions for contributing to the project, ensuring that contributors have the right to submit their work under the open-source license indicated in the file.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/docker/go-units/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nDeveloper Certificate of Origin\nVersion 1.1\n\nCopyright (C) 2004, 2006 The Linux Foundation and its contributors.\n660 York Street, Suite 102,\nSan Francisco, CA 94110 USA\n\nEveryone is permitted to copy and distribute verbatim copies of this\nlicense document, but changing it is not allowed.\n\nDeveloper's Certificate of Origin 1.1\n\nBy making a contribution to this project, I certify that:\n\n(a) The contribution was created in whole or in part by me and I\n    have the right to submit it under the open source license\n    indicated in the file; or\n\n(b) The contribution is based upon previous work that, to the best\n    of my knowledge, is covered under an appropriate open source\n    license and I have the right under that license to submit that\n    work with modifications, whether created in whole or in part\n    by me, under the same open source license (unless I am\n    permitted to submit under a different license), as indicated\n    in the file; or\n\n(c) The contribution was provided directly to me by some other\n    person who certified (a), (b) or (c) and I have not modified\n    it.\n\n(d) I understand and agree that this project and the contribution\n    are public and that a record of the contribution (including all\n    personal information I submit with it, including my sign-off) is\n    maintained indefinitely and may be redistributed consistent with\n    this project or the open source license(s) involved.\n```\n\n----------------------------------------\n\nTITLE: Running golangci-lint from the command line (Shell)\nDESCRIPTION: This shell command demonstrates how to run golangci-lint on a Go package. It allows linting of either the current directory (`.`) or a specific path (`./...`). Additional flags can be used to show all lint errors by adjusting the maximum issues per linter and maximum same issues.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/Microsoft/go-winio/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n# use . or specify a path to only lint a package\n# to show all lint errors, use flags \"--max-issues-per-linter=0 --max-same-issues=0\"\n> golangci-lint run ./...\n```\n\n----------------------------------------\n\nTITLE: Basic Error Handling in Go\nDESCRIPTION: Demonstrates the traditional error handling idiom in Go, where an error is checked for nil and returned if it exists. This snippet serves as a contrast to the error handling provided by the errors package.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/pkg/errors/README.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nif err != nil {\n        return err\n}\n```\n\n----------------------------------------\n\nTITLE: Iterating Words with FirstWordInString Go\nDESCRIPTION: This example demonstrates how to iterate over words in a string using the `FirstWordInString` function from the uniseg package. It initializes a state variable to -1 and iterates through the string \"Hello, world!\", extracting each word and printing it within parentheses.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/rivo/uniseg/README.md#_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\nstr := \"Hello, world!\"\nstate := -1\nvar c string\nfor len(str) > 0 {\n\tc, str, state = uniseg.FirstWordInString(str, state)\n\tfmt.Printf(\"(%s)\\n\", c)\n}\n// (Hello)\n// (,)\n// ( )\n// (world)\n// (!)\n```\n\n----------------------------------------\n\nTITLE: Building for Linux with go build\nDESCRIPTION: This command compiles the go-sqlite3 package for Linux. The `-tags \"linux\"` flag includes Linux-specific build configurations.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/mattn/go-sqlite3/README.md#_snippet_7\n\nLANGUAGE: Bash\nCODE:\n```\ngo build -tags \"linux\"\n```\n\n----------------------------------------\n\nTITLE: Installing pgzip using go get\nDESCRIPTION: This command installs the pgzip package and its dependencies using the go get command. It retrieves the package from the specified GitHub repository and places it in your Go workspace.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/klauspost/pgzip/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngo get github.com/klauspost/pgzip/...\n```\n\n----------------------------------------\n\nTITLE: Using concurrent.Map in Go\nDESCRIPTION: This snippet demonstrates how to use the `concurrent.Map` from the `modern-go/concurrent` package. It initializes a new map, stores a key-value pair, and then loads the value associated with the key. This is useful for concurrent access to maps in Go versions before 1.9, which lacked `sync.Map`.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/modern-go/concurrent/README.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nm := concurrent.NewMap()\nm.Store(\"hello\", \"world\")\nelem, found := m.Load(\"hello\")\n// elem will be \"world\"\n// found will be true\n```\n\n----------------------------------------\n\nTITLE: Defining RDMA Statistics Message Type (Protobuf)\nDESCRIPTION: Defines the structure for RDMA (Remote Direct Memory Access) statistics. It includes repeated fields for current and limit RDMA entries, both of type `RdmaEntry`. This message tracks RDMA resource usage.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/containerd/cgroups/v3/cgroup1/stats/metrics.pb.txt#_snippet_12\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"RdmaStat\"\n  field {\n    name: \"current\"\n    number: 1\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".io.containerd.cgroups.v1.RdmaEntry\"\n    json_name: \"current\"\n  }\n  field {\n    name: \"limit\"\n    number: 2\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".io.containerd.cgroups.v1.RdmaEntry\"\n    json_name: \"limit\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Benchmark Results (After PR #79)\nDESCRIPTION: These benchmark results showcase the performance improvements after applying PR #79 to the github.com/go-openapi/swag package. The data, collected on the same hardware configuration (Intel i5-6200U), demonstrates a significant reduction in execution time and memory allocation for the name mangling functions.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/go-openapi/swag/BENCHMARK.md#_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ngoos: linux\ngoarch: amd64\npkg: github.com/go-openapi/swag\ncpu: Intel(R) Core(TM) i5-6200U CPU @ 2.30GHz\nBenchmarkToXXXName/ToGoName-4         \t 9595830\t      3991 ns/op\t      42 B/op\t       5 allocs/op\nBenchmarkToXXXName/ToVarName-4        \t 9194276\t      3984 ns/op\t      62 B/op\t       7 allocs/op\nBenchmarkToXXXName/ToFileName-4       \t17002711\t      2123 ns/op\t     147 B/op\t       7 allocs/op\nBenchmarkToXXXName/ToCommandName-4    \t16772926\t      2111 ns/op\t     147 B/op\t       7 allocs/op\nBenchmarkToXXXName/ToHumanNameLower-4 \t 9788331\t      3749 ns/op\t      92 B/op\t       6 allocs/op\nBenchmarkToXXXName/ToHumanNameTitle-4 \t 9188260\t      3941 ns/op\t     104 B/op\t       6 allocs/op\n```\n\n----------------------------------------\n\nTITLE: Running golangci-lint - Shell\nDESCRIPTION: This snippet shows how to run golangci-lint locally. It can be used to lint a specific package or the entire project. Flags are included to show all lint errors.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/Microsoft/hcsshim/README.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\n# use . or specify a path to only lint a package\n# to show all lint errors, use flags \"--max-issues-per-linter=0 --max-same-issues=0\"\n> golangci-lint run\n```\n\n----------------------------------------\n\nTITLE: Running go generate - Shell\nDESCRIPTION: This snippet shows how to run `go generate` in both the root and test Go modules, ensuring that all auto-generated code is up to date.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/Microsoft/hcsshim/README.md#_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\n> go generate ./...\n> cd test && go generate ./...\n```\n\n----------------------------------------\n\nTITLE: Installing KSUID with Go\nDESCRIPTION: This command installs the KSUID library using the go get command. The -u flag ensures that the package and its dependencies are updated to the latest version.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/segmentio/ksuid/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngo get -u github.com/segmentio/ksuid\n```\n\n----------------------------------------\n\nTITLE: Additional Interface Definition Example Go\nDESCRIPTION: Example of a simple interface in go. This is created so that additional functionality can be used with the previous example.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#_snippet_16\n\nLANGUAGE: go\nCODE:\n```\ntype Closer interface {\n\tClose()\n}\n\n```\n\n----------------------------------------\n\nTITLE: Transforming Slices with govalidator.Map\nDESCRIPTION: This snippet demonstrates the use of `govalidator.Map` to transform a slice of interfaces by applying a function to each element. The example multiplies each integer element by 3. The result is a new slice with the transformed values.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/asaskevich/govalidator/README.md#_snippet_11\n\nLANGUAGE: go\nCODE:\n```\ndata := []interface{}{1, 2, 3, 4, 5}\nvar fn govalidator.ResultIterator = func(value interface{}, index int) interface{} {\n\treturn value.(int) * 3\n}\n_ = govalidator.Map(data, fn) // result = []interface{}{1, 6, 9, 12, 15}\n```\n\n----------------------------------------\n\nTITLE: Defining MemoryEntry Message in Protobuf\nDESCRIPTION: This protobuf snippet defines the 'MemoryEntry' message, representing a simple memory entry with fields for limit and usage. It's reused within 'MemoryStat' to represent different types of memory usage.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/containerd/cgroups/v3/cgroup1/stats/metrics.pb.txt#_snippet_7\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage MemoryEntry {\n  optional uint64 limit = 1;\n  optional uint64 usage = 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Metrics Message in Protobuf\nDESCRIPTION: This protobuf snippet defines the 'Metrics' message, which aggregates various cgroup statistics like hugetlb, pids, cpu, memory, blkio, rdma, network, cgroup_stats, and memory_oom_control. It serves as the top-level message for representing cgroup metrics.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/containerd/cgroups/v3/cgroup1/stats/metrics.pb.txt#_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage Metrics {\n  repeated HugetlbStat hugetlb = 1;\n  optional PidsStat pids = 2;\n  optional CPUStat cpu = 3;\n  optional MemoryStat memory = 4;\n  optional BlkIOStat blkio = 5;\n  optional RdmaStat rdma = 6;\n  repeated NetworkStat network = 7;\n  optional CgroupStats cgroup_stats = 8;\n  optional MemoryOomControl memory_oom_control = 9;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing json-iterator/go using go get\nDESCRIPTION: This snippet demonstrates how to install the `json-iterator/go` package using the `go get` command. This command retrieves the library and its dependencies, making it available for use in Go projects.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/json-iterator/go/README.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\ngo get github.com/json-iterator/go\n```\n\n----------------------------------------\n\nTITLE: Installing Cobra CLI Generator with Go\nDESCRIPTION: This command installs the `cobra-cli` tool, which is used to generate Cobra applications and command files. This greatly assists with bootstrapping the scaffolding for a Cobra based application.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/spf13/cobra/README.md#_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ngo install github.com/spf13/cobra-cli@latest\n```\n\n----------------------------------------\n\nTITLE: JSON Output of Flag Format\nDESCRIPTION: This JSON represents the 'flag' output format of a validation error, indicating a failed validation with `valid: false`.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/santhosh-tekuri/jsonschema/v5/README.md#_snippet_7\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"valid\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Monospace String Width Go\nDESCRIPTION: This snippet calculates the monospace width of a string using the `StringWidth` function from the uniseg package. It takes the string \"🇩🇪🏳️‍🌈!\" as input and prints the calculated width, which is 5 because the two flags take up 2 cells each, and the exclamation mark takes up one cell.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/rivo/uniseg/README.md#_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nwidth := uniseg.StringWidth(\"🇩🇪🏳️‍🌈!\")\nfmt.Println(width)\n// 5\n```\n\n----------------------------------------\n\nTITLE: Cloning and Configuring Git Repository\nDESCRIPTION: This snippet demonstrates how to clone a forked repository, navigate to the directory, and add the original upstream repository as a remote.  This allows contributors to fetch updates from the main project.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/mistifyio/go-zfs/v3/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone git@github.com:<your-username>/go-zfs.git\n$ cd go-zfs\n$ git remote add upstream https://github.com/mistifyio/go-zfs.git\n```\n\n----------------------------------------\n\nTITLE: Custom Validator Function Signature in govalidator\nDESCRIPTION: This code demonstrates the change in the custom validator function signature.  The new signature includes a context parameter (the object being validated) as the second parameter.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/asaskevich/govalidator/README.md#_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\nimport \"github.com/asaskevich/govalidator\"\n\n// old signature\nfunc(i interface{}) bool\n\n// new signature\nfunc(i interface{}, o interface{}) bool\n```\n\n----------------------------------------\n\nTITLE: Using reflect2.TypeByName in Go\nDESCRIPTION: Demonstrates how to use `reflect2.TypeByName` to retrieve a type by its name, similar to `Class.forName` in Java. It emphasizes that the type must be used in the code to avoid being eliminated by the compiler.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/modern-go/reflect2/README.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n// given package is github.com/your/awesome-package\ntype MyStruct struct {\n\t// ...\n}\n\n// will return the type\nreflect2.TypeByName(\"awesome-package.MyStruct\")\n// however, if the type has not been used\n// it will be eliminated by compiler, so we can not get it in runtime\n```\n\n----------------------------------------\n\nTITLE: Option Interface Definition Go\nDESCRIPTION: Defines the `Option` interface with an `apply` method. This interface is used to modify a `config` struct. The `apply` method is unexported to prevent external implementations and seal the interface.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#_snippet_10\n\nLANGUAGE: go\nCODE:\n```\ntype Option interface {\n\tapply(config) config\n}\n\n```\n\n----------------------------------------\n\nTITLE: Installing Build Dependencies on openSUSE\nDESCRIPTION: Installs dependencies needed for building Skopeo from source on openSUSE using zypper. This includes development libraries for gpgme, btrfs, and glib2.\nSOURCE: https://github.com/containers/skopeo/blob/main/install.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n# openSUSE:\nsudo zypper install libgpgme-devel libbtrfs-devel glib2-devel\n```\n\n----------------------------------------\n\nTITLE: Output ValidationError in Basic Format (Go)\nDESCRIPTION: This code snippet demonstrates how to output a `ValidationError` in the `basic` format. It marshals the `BasicOutput()` of the error to JSON with indentation, providing a list of errors with their keyword and instance locations.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/santhosh-tekuri/jsonschema/v5/README.md#_snippet_8\n\nLANGUAGE: Go\nCODE:\n```\nb, _ := json.MarshalIndent(err.BasicOutput(), \"\", \"  \")\nfmt.Println(string(b))\n```\n\n----------------------------------------\n\nTITLE: Starting and Ending a Span with OpenCensus Go\nDESCRIPTION: This snippet demonstrates how to start and end a span using the `trace` package in OpenCensus Go. `trace.StartSpan` creates a new span, and `defer span.End()` ensures the span is ended when the function exits. The span is named \"cache.Get\", indicating a cache retrieval operation. The context `ctx` is updated to include the new span.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/go.opencensus.io/README.md#_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\nctx, span := trace.StartSpan(ctx, \"cache.Get\")\ndefer span.End()\n\n// Do work to get from cache.\n```\n\n----------------------------------------\n\nTITLE: Defining Block I/O Statistics Message Type (Protobuf)\nDESCRIPTION: Defines the structure for block I/O statistics. It includes repeated fields for I/O service bytes, serviced operations, queued operations, service time, wait time, merged operations, time, and sectors. Each field is a repeated message of type `BlkIOEntry`. This structure captures detailed I/O activity.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/containerd/cgroups/v3/cgroup1/stats/metrics.pb.txt#_snippet_10\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"BlkIOStat\"\n  field {\n    name: \"io_service_bytes_recursive\"\n    number: 1\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".io.containerd.cgroups.v1.BlkIOEntry\"\n    json_name: \"ioServiceBytesRecursive\"\n  }\n  field {\n    name: \"io_serviced_recursive\"\n    number: 2\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".io.containerd.cgroups.v1.BlkIOEntry\"\n    json_name: \"ioServicedRecursive\"\n  }\n  field {\n    name: \"io_queued_recursive\"\n    number: 3\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".io.containerd.cgroups.v1.BlkIOEntry\"\n    json_name: \"ioQueuedRecursive\"\n  }\n  field {\n    name: \"io_service_time_recursive\"\n    number: 4\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".io.containerd.cgroups.v1.BlkIOEntry\"\n    json_name: \"ioServiceTimeRecursive\"\n  }\n  field {\n    name: \"io_wait_time_recursive\"\n    number: 5\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".io.containerd.cgroups.v1.BlkIOEntry\"\n    json_name: \"ioWaitTimeRecursive\"\n  }\n  field {\n    name: \"io_merged_recursive\"\n    number: 6\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".io.containerd.cgroups.v1.BlkIOEntry\"\n    json_name: \"ioMergedRecursive\"\n  }\n  field {\n    name: \"io_time_recursive\"\n    number: 7\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".io.containerd.cgroups.v1.BlkIOEntry\"\n    json_name: \"ioTimeRecursive\"\n  }\n  field {\n    name: \"sectors_recursive\"\n    number: 8\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".io.containerd.cgroups.v1.BlkIOEntry\"\n    json_name: \"sectorsRecursive\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deserializing Span Context from Wire in Go\nDESCRIPTION: This snippet demonstrates how to extract the span context from HTTP headers when receiving a request. It uses `opentracing.GlobalTracer().Extract` to deserialize the context from the `req.Header`. If a context is successfully extracted, a child span is created using `ext.RPCServerOption`. If extraction fails, a root span is created.  The code uses the `net/http` package for handling HTTP requests and responses, and includes error handling to manage potential extraction failures.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/opentracing/opentracing-go/README.md#_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\nhttp.HandleFunc(\"/\", func(w http.ResponseWriter, req *http.Request) {\n    var serverSpan opentracing.Span\n    appSpecificOperationName := ...\n    wireContext, err := opentracing.GlobalTracer().Extract(\n        opentracing.HTTPHeaders,\n        opentracing.HTTPHeadersCarrier(req.Header))\n    if err != nil {\n        // Optionally record something about err here\n    }\n\n    // Create the span referring to the RPC client if available.\n    // If wireContext == nil, a root span will be created.\n    serverSpan = opentracing.StartSpan(\n        appSpecificOperationName,\n        ext.RPCServerOption(wireContext))\n\n    defer serverSpan.Finish()\n\n    ctx := opentracing.ContextWithSpan(context.Background(), serverSpan)\n    ...\n})\n```\n\n----------------------------------------\n\nTITLE: Defining RDMA Entry Message Type (Protobuf)\nDESCRIPTION: Defines the structure for a single RDMA entry, which contains RDMA device information. It includes the device name (`device`), the number of HCA (Host Channel Adapter) handles (`hca_handles`), and the number of HCA objects (`hca_objects`). The device is a string, while handles and objects are unsigned 32-bit integers.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/containerd/cgroups/v3/cgroup1/stats/metrics.pb.txt#_snippet_13\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"RdmaEntry\"\n  field {\n    name: \"device\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"device\"\n  }\n  field {\n    name: \"hca_handles\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_UINT32\n    json_name: \"hcaHandles\"\n  }\n  field {\n    name: \"hca_objects\"\n    number: 3\n    label: LABEL_OPTIONAL\n    type: TYPE_UINT32\n    json_name: \"hcaObjects\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining HugetlbStat Message in Protobuf\nDESCRIPTION: This protobuf snippet defines the 'HugetlbStat' message, representing statistics related to hugetlb memory usage within a cgroup. It contains fields for usage, max, failcnt, and pagesize.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/containerd/cgroups/v3/cgroup1/stats/metrics.pb.txt#_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage HugetlbStat {\n  optional uint64 usage = 1;\n  optional uint64 max = 2;\n  optional uint64 failcnt = 3;\n  optional string pagesize = 4;\n}\n```\n\n----------------------------------------\n\nTITLE: Boolean Option Implementation Go\nDESCRIPTION: Illustrates how to implement a boolean option using a dedicated type and `apply` method. It shows `WithOption` for setting the option to true and `WithoutOption` for setting it to false.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#_snippet_11\n\nLANGUAGE: go\nCODE:\n```\ntype defaultFalseOption bool\n\nfunc (o defaultFalseOption) apply(c config) config {\n\tc.Bool = bool(o)\n    return c\n}\n\n// WithOption sets a T to have an option included.\nfunc WithOption() Option {\n\treturn defaultFalseOption(true)\n}\n\n```\n\nLANGUAGE: go\nCODE:\n```\ntype defaultTrueOption bool\n\nfunc (o defaultTrueOption) apply(c config) config {\n\tc.Bool = bool(o)\n    return c\n}\n\n// WithoutOption sets a T to have Bool option excluded.\nfunc WithoutOption() Option {\n\treturn defaultTrueOption(false)\n}\n\n```\n\n----------------------------------------\n\nTITLE: reflect2: Get/Set Interface{} in Go\nDESCRIPTION: Explains how to use `reflect2` to set the value of an interface{}. It shows how to get the `reflect2.Type` of a value and then use the `Set` method to change the value of the interface. Always use a pointer `*type` when getting the set type.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/modern-go/reflect2/README.md#_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nvalType := reflect2.TypeOf(1)\ni := 1\nj := 10\nvalType.Set(&i, &j)\n// i will be 10\n```\n\n----------------------------------------\n\nTITLE: Defining Block I/O Entry Message Type (Protobuf)\nDESCRIPTION: Defines the structure for a single block I/O entry, containing details about an I/O operation. It includes the operation type (`op`), device name (`device`), major and minor device numbers (`major`, `minor`), and the value (`value`). The operation and device are strings, while major, minor, and value are unsigned 64-bit integers.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/containerd/cgroups/v3/cgroup1/stats/metrics.pb.txt#_snippet_11\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"BlkIOEntry\"\n  field {\n    name: \"op\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"op\"\n  }\n  field {\n    name: \"device\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"device\"\n  }\n  field {\n    name: \"major\"\n    number: 3\n    label: LABEL_OPTIONAL\n    type: TYPE_UINT64\n    json_name: \"major\"\n  }\n  field {\n    name: \"minor\"\n    number: 4\n    label: LABEL_OPTIONAL\n    type: TYPE_UINT64\n    json_name: \"minor\"\n  }\n  field {\n    name: \"value\"\n    number: 5\n    label: LABEL_OPTIONAL\n    type: TYPE_UINT64\n    json_name: \"value\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Pushing the Feature Branch\nDESCRIPTION: This snippet shows how to push the feature branch to the contributor's forked repository on GitHub. This allows the changes to be reviewed and merged into the main project.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/mistifyio/go-zfs/v3/CONTRIBUTING.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ git push origin <feature-branch-name>\n```\n\n----------------------------------------\n\nTITLE: Functional Option Implementation Go\nDESCRIPTION: Illustrates using a functional option.  A function type implements the `Option` interface and directly modifies the `config` within the `apply` method. The `WithMyType` function returns an `optionFunc`.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#_snippet_13\n\nLANGUAGE: go\nCODE:\n```\ntype optionFunc func(config) config\n\nfunc (fn optionFunc) apply(c config) config {\n\treturn fn(c)\n}\n\n// WithMyType sets t as MyType.\nfunc WithMyType(t MyType) Option {\n\treturn optionFunc(func(c config) config {\n\t\tc.MyType = t\n        return c\n\t})\n}\n\n```\n\n----------------------------------------\n\nTITLE: Installing and running a local Go Doc site\nDESCRIPTION: Installs the `pkgsite` tool and runs it to serve a local Go Doc site. This allows you to view the project's documentation locally as it would appear on pkg.go.dev.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ngo install golang.org/x/pkgsite/cmd/pkgsite@latest\npkgsite\n```\n\n----------------------------------------\n\nTITLE: Setting Go Package Option (Protobuf)\nDESCRIPTION: Specifies the Go package for the generated Go code. This allows Go programs to import and use the generated protobuf code.  The package path is set to `github.com/containerd/cgroups/cgroup1/stats`.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/containerd/cgroups/v3/cgroup1/stats/metrics.pb.txt#_snippet_16\n\nLANGUAGE: protobuf\nCODE:\n```\noptions {\n  go_package: \"github.com/containerd/cgroups/cgroup1/stats\"\n}\n```\n\n----------------------------------------\n\nTITLE: Benchmark Results (AMD Ryzen 7 5800X)\nDESCRIPTION: These are benchmark results for the github.com/go-openapi/swag package on a Linux AMD64 system with an AMD Ryzen 7 5800X CPU. The results show the performance of various name mangling functions, including execution time (ns/op), memory allocation (B/op), and number of allocations (allocs/op).\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/go-openapi/swag/BENCHMARK.md#_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ngoos: linux\ngoarch: amd64\npkg: github.com/go-openapi/swag\ncpu: AMD Ryzen 7 5800X 8-Core Processor             \nBenchmarkToXXXName/ToGoName-16         \t18527378\t      1972 ns/op\t      42 B/op\t       5 allocs/op\nBenchmarkToXXXName/ToVarName-16        \t15552692\t      2093 ns/op\t      62 B/op\t       7 allocs/op\nBenchmarkToXXXName/ToFileName-16       \t32161176\t      1117 ns/op\t     147 B/op\t       7 allocs/op\nBenchmarkToXXXName/ToCommandName-16    \t32256634\t      1137 ns/op\t     147 B/op\t       7 allocs/op\nBenchmarkToXXXName/ToHumanNameLower-16 \t18599661\t      1946 ns/op\t      92 B/op\t       6 allocs/op\nBenchmarkToXXXName/ToHumanNameTitle-16 \t17581353\t      2054 ns/op\t     105 B/op\t       6 allocs/op\n```\n\n----------------------------------------\n\nTITLE: Fetching and Merging Upstream Changes\nDESCRIPTION: This snippet shows how to fetch the latest changes from the upstream repository and merge them into your local master branch. This ensures that your local copy is up-to-date before creating a new feature branch.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/mistifyio/go-zfs/v3/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ git checkout master\n$ git fetch upstream\n$ git merge upstream/master\n```\n\n----------------------------------------\n\nTITLE: Defining Memory OOM Control Message Type (Protobuf)\nDESCRIPTION: Defines the structure for memory out-of-memory (OOM) control parameters.  It includes fields for disabling OOM killing, indicating if the process is under OOM, and reporting OOM kills.  All fields are unsigned 64-bit integers (uint64).\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/containerd/cgroups/v3/cgroup1/stats/metrics.pb.txt#_snippet_9\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"MemoryOomControl\"\n  field {\n    name: \"oom_kill_disable\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_UINT64\n    json_name: \"oomKillDisable\"\n  }\n  field {\n    name: \"under_oom\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_UINT64\n    json_name: \"underOom\"\n  }\n  field {\n    name: \"oom_kill\"\n    number: 3\n    label: LABEL_OPTIONAL\n    type: TYPE_UINT64\n    json_name: \"oomKill\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Squashing Commits with Git Rebase\nDESCRIPTION: This snippet demonstrates how to squash multiple commits into a single commit using `git rebase -i`. It explains how to select the commits to squash and how to modify the rebase instruction file to achieve the desired outcome.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/sigstore/rekor/CONTRIBUTORS.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit rebase -i HEAD~3\n```\n\n----------------------------------------\n\nTITLE: Skopeo Login with Username/Password Flags\nDESCRIPTION: This snippet shows how to use the `-u` (username) and `-p` (password) flags to directly specify the login credentials on the command line.\nSOURCE: https://github.com/containers/skopeo/blob/main/docs/skopeo-login.1.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ skopeo login -u testuser -p testpassword localhost:5000\nLogin Succeeded!\n```\n\n----------------------------------------\n\nTITLE: Example Git Rebase Instruction File\nDESCRIPTION: This is an example of the instruction file that opens during interactive rebasing. This file dictates how `git rebase` will manipulate your commits, in this case, squashing the commits into one another.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/sigstore/rekor/CONTRIBUTORS.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\npick eb36612 initial commit\npick 9ac8968 second commit\npick a760569 final commit\n\n# Rebase eb1429f..a760569 onto eb1429f (3 commands)\n```\n\n----------------------------------------\n\nTITLE: Locker Usage Example in Go\nDESCRIPTION: This code snippet demonstrates how to use the `locker` package to protect access to resources identified by a name. It uses the `Lock` and `Unlock` methods to ensure exclusive access to the resource. The example includes a global mutex (`sync.Mutex`) to protect modifications to the underlying data.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/containers/storage/pkg/locker/README.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage important\n\nimport (\n\t\"sync\"\n\t\"time\"\n\n\t\"github.com/containers/storage/pkg/locker\"\n)\n\ntype important struct {\n\tlocks *locker.Locker\n\tdata  map[string]interface{}\n\tmu    sync.Mutex\n}\n\nfunc (i *important) Get(name string) interface{} {\n\ti.locks.Lock(name)\n\tdefer i.locks.Unlock(name)\n\treturn data[name]\n}\n\nfunc (i *important) Create(name string, data interface{}) {\n\ti.locks.Lock(name)\n\tdefer i.locks.Unlock(name)\n\n\ti.createImportant(data)\n\n\ts.mu.Lock()\n\ti.data[name] = data\n\ts.mu.Unlock()\n}\n\nfunc (i *important) createImportant(data interface{}) {\n\ttime.Sleep(10 * time.Second)\n}\n```\n\n----------------------------------------\n\nTITLE: Updating pgzip Dependencies\nDESCRIPTION: This command updates the dependencies for the pgzip package, including the klauspost/compress library. This ensures that you have the latest versions of the required packages.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/klauspost/pgzip/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ngo get -u github.com/klauspost/compress\n```\n\n----------------------------------------\n\nTITLE: Building for macOS on ARM64 with go build\nDESCRIPTION: This command compiles the go-sqlite3 package for macOS on ARM64 architecture.  It specifies the `darwin` and `arm64` build tags.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/mattn/go-sqlite3/README.md#_snippet_15\n\nLANGUAGE: Bash\nCODE:\n```\ngo build -tags \"darwin arm64\"\n```\n\n----------------------------------------\n\nTITLE: Defining Cgroup Statistics Message Type (Protobuf)\nDESCRIPTION: Defines the structure for cgroup statistics, representing process states. It includes fields for the number of sleeping, running, stopped, uninterruptible, and I/O wait processes. All fields use unsigned 64-bit integers (uint64).\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/containerd/cgroups/v3/cgroup1/stats/metrics.pb.txt#_snippet_15\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"CgroupStats\"\n  field {\n    name: \"nr_sleeping\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_UINT64\n    json_name: \"nrSleeping\"\n  }\n  field {\n    name: \"nr_running\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_UINT64\n    json_name: \"nrRunning\"\n  }\n  field {\n    name: \"nr_stopped\"\n    number: 3\n    label: LABEL_OPTIONAL\n    type: TYPE_UINT64\n    json_name: \"nrStopped\"\n  }\n  field {\n    name: \"nr_uninterruptible\"\n    number: 4\n    label: LABEL_OPTIONAL\n    type: TYPE_UINT64\n    json_name: \"nrUninterruptible\"\n  }\n  field {\n    name: \"nr_io_wait\"\n    number: 5\n    label: LABEL_OPTIONAL\n    type: TYPE_UINT64\n    json_name: \"nrIoWait\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Force Pushing After Rebase\nDESCRIPTION: This shows the command to force push after performing a rebase, to update the remote branch with the new commit history. This command overwrites the remote branch with your local branch.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/sigstore/rekor/CONTRIBUTORS.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin your-branch --force\n```\n\n----------------------------------------\n\nTITLE: Tagging a Release with Make\nDESCRIPTION: This snippet shows how to add tags for a release using the `add-tags` make target. It requires specifying the `MODSET` variable to indicate which modules are being released and the `COMMIT` hash of the merged pull request. The commit value is explicit when HEAD isn't the correct commit.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/go.opentelemetry.io/otel/RELEASING.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nmake add-tags MODSET=<module set> COMMIT=<commit hash>\n```\n\n----------------------------------------\n\nTITLE: JSON Schema Definition\nDESCRIPTION: This JSON schema defines an 'employee' definition with the type 'string'. It is part of a larger schema structure used for validation.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/santhosh-tekuri/jsonschema/v5/README.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"definitions\": {\n        \"employee\": {\n            \"type\": \"string\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Iterating Graphemes with StepString Go\nDESCRIPTION: This code iterates over grapheme clusters in a string using the `StepString` function from the uniseg package. It initializes a state variable to -1 and iterates through the string \"🇩🇪🏳️‍🌈\", extracting each grapheme cluster and printing its runes in hexadecimal format. The `StepString` function avoids allocating a new `Graphemes` object.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/rivo/uniseg/README.md#_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\nstr := \"🇩🇪🏳️‍🌈\"\nstate := -1\nvar c string\nfor len(str) > 0 {\n\tc, str, _, state = uniseg.StepString(str, state)\n\tfmt.Printf(\"%x \", []rune(c))\n}\n// [1f1e9 1f1ea] [1f3f3 fe0f 200d 1f308]\n```\n\n----------------------------------------\n\nTITLE: Building for macOS on x86_64 with go build\nDESCRIPTION: This command compiles the go-sqlite3 package for macOS on x86_64 architecture.  It specifies the `darwin` and `amd64` build tags.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/mattn/go-sqlite3/README.md#_snippet_14\n\nLANGUAGE: Bash\nCODE:\n```\ngo build -tags \"darwin amd64\"\n```\n\n----------------------------------------\n\nTITLE: Installing GPGME Go Wrapper\nDESCRIPTION: This command installs the GPGME Go wrapper library. It uses the `go get` command with the `-u` flag to update the package and its dependencies.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/proglottis/gpgme/README.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\ngo get -u github.com/proglottis/gpgme\n```\n\n----------------------------------------\n\nTITLE: Pushing Tags to Upstream Remote\nDESCRIPTION: This snippet demonstrates how to push the created tags for the release to the upstream remote, including the main module and any sub-modules.  It's crucial to push to the correct remote and all submodules.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/go.opentelemetry.io/otel/RELEASING.md#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ngit push upstream <new tag>\ngit push upstream <submodules-path/new tag>\n...\n```\n\n----------------------------------------\n\nTITLE: Installing go-md2man on macOS\nDESCRIPTION: Installs go-md2man on macOS based systems.\nSOURCE: https://github.com/containers/skopeo/blob/main/install.md#_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\n# MacOS:\nbrew install go-md2man\n```\n\n----------------------------------------\n\nTITLE: Curl Request Example for CORS Testing\nDESCRIPTION: This bash command sends a GET request to the `/foo` endpoint at `localhost:8080` using curl. The `-v` flag enables verbose mode, showing the request and response headers. This command can be used to test if the CORS headers are correctly set in the response.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/gorilla/mux/README.md#_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\ncurl localhost:8080/foo -v\n```\n\n----------------------------------------\n\nTITLE: Adding WithRetry Option to OTLP HTTP Exporter\nDESCRIPTION: The `WithRetry` option has been added to the `go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracehttp` package. This option replaces the removed `WithMaxAttempts` and `WithBackoff` options for configuring retry behavior.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Installing Build Dependencies on macOS\nDESCRIPTION: Installs gpgme using Homebrew, which is required to build Skopeo from source on macOS.\nSOURCE: https://github.com/containers/skopeo/blob/main/install.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n# macOS:\nbrew install gpgme\n```\n\n----------------------------------------\n\nTITLE: Squashing Commits (Modified Rebase File)\nDESCRIPTION: This snippet demonstrates the modified content of the rebase instruction file for squashing commits.  `squash` commands tells git to merge that commits changes into the commit above.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/sigstore/rekor/CONTRIBUTORS.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\npick eb36612 initial commit\nsquash 9ac8968 second commit\nsquash a760569 final commit\n```\n\n----------------------------------------\n\nTITLE: Adding SpanRecorder to OpenTelemetry Trace Test\nDESCRIPTION: The `SpanRecorder` type has been added to the `go.opentelemetry.io/otel/skd/trace/tracetest` package. This type can be used with the default SDK as a `SpanProcessor` during testing.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: Deprecated TextMapCarrier and TextMapPropagator in oteltest\nDESCRIPTION: The `TextMapCarrier` and `TextMapPropagator` from the `go.opentelemetry.io/otel/oteltest` package and their associated creation functions (`TextMapCarrier`, `NewTextMapPropagator`) are deprecated.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: xxhash Digest Write Method in Go\nDESCRIPTION: The Write method of the Digest type writes a byte slice to the hash. It is part of the hash.Hash64 interface implementation for incremental hashing. It returns the number of bytes written and any error encountered.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/klauspost/compress/zstd/internal/xxhash/README.md#_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nfunc (*Digest) Write([]byte) (int, error)\n```\n\n----------------------------------------\n\nTITLE: Building URL Host or Path in Go\nDESCRIPTION: This code shows how to build only the URL host or path for a route using `URLHost()` and `URLPath()` methods. Useful when only a partial URL needs to be generated.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/gorilla/mux/README.md#_snippet_21\n\nLANGUAGE: go\nCODE:\n```\n// \"http://news.example.com/\"\nhost, err := r.Get(\"article\").URLHost(\"subdomain\", \"news\")\n\n// \"/articles/technology/42\"\npath, err := r.Get(\"article\").URLPath(\"category\", \"technology\", \"id\", \"42\")\n```\n\n----------------------------------------\n\nTITLE: Installing Build Dependencies on Fedora\nDESCRIPTION: Installs dependencies needed for building Skopeo from source on Fedora using dnf. This includes development libraries for gpgme, assuan, and btrfs.\nSOURCE: https://github.com/containers/skopeo/blob/main/install.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n# Fedora:\nsudo dnf install gpgme-devel libassuan-devel btrfs-progs-devel\n```\n\n----------------------------------------\n\nTITLE: Deprecated TraceStateFromKeyValues Function in oteltest\nDESCRIPTION: The `TraceStateFromKeyValues` function from the `go.opentelemetry.io/otel/oteltest` package is deprecated. Use the `trace.ParseTraceState` function instead.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#_snippet_10\n\n\n\n----------------------------------------\n\nTITLE: Config Instantiation Function Go\nDESCRIPTION: Demonstrates the `newConfig` function for creating and configuring a `config` struct using options.  It sets default values, applies options, and performs validation. This function is usually unexported to keep configuration logic internal.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#_snippet_9\n\nLANGUAGE: go\nCODE:\n```\n// newConfig returns an appropriately configured config.\nfunc newConfig(options ...Option) config {\n\t// Set default values for config.\n\tconfig := config{/* […] */}\n\tfor _, option := range options {\n\t\tconfig = option.apply(config)\n\t}\n\t// Perform any validation here.\n\treturn config\n}\n\n```\n\n----------------------------------------\n\nTITLE: Markdown Link to Go Package Documentation\nDESCRIPTION: This Markdown snippet creates a badge that links to the Go package documentation for `go.opentelemetry.io/otel/propagation`.  It uses the PkgGoDev service to generate the badge. The badge provides a quick visual indicator of the package's documentation status and links directly to the relevant page.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/go.opentelemetry.io/otel/propagation/README.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/propagation)](https://pkg.go.dev/go.opentelemetry.io/otel/propagation)\n```\n\n----------------------------------------\n\nTITLE: Merging a prerelease branch using git\nDESCRIPTION: This snippet demonstrates how to merge the changes from automatically generated prerelease branch into your pre-release branch after the changes have been verified.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/go.opentelemetry.io/otel/RELEASING.md#_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ngit merge prerelease_<module set>_<new tag>\n```\n\n----------------------------------------\n\nTITLE: Upgrading icu4c on macOS with brew\nDESCRIPTION: This command upgrades the `icu4c` package on macOS using Homebrew. This is required if you wish to build the `icu` extension for go-sqlite3.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/mattn/go-sqlite3/README.md#_snippet_13\n\nLANGUAGE: Bash\nCODE:\n```\nbrew upgrade icu4c\n```\n\n----------------------------------------\n\nTITLE: Importing gopkg.in/yaml.v3 in Go\nDESCRIPTION: This snippet demonstrates the explicit import of the 'gopkg.in/yaml.v3' package in a Go project. This package is used for parsing and serializing YAML (YAML Ain't Markup Language) data. It is particularly useful for handling configuration files and data serialization where human-readability is preferred.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/modules.txt#_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\ngopkg.in/yaml.v3\n```\n\n----------------------------------------\n\nTITLE: SecureJoin Implementation with chroot and readlink (Insecure)\nDESCRIPTION: This code snippet demonstrates a trivial implementation of the SecureJoin function using chroot and readlink on GNU/Linux systems. This approach requires root privileges and relies on the trustworthiness of the readlink command within the root path. The implementation is provided as an example and is less secure and more opaque than the primary implementation of the library.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/cyphar/filepath-securejoin/README.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage securejoin\n\nimport (\n\t\"os/exec\"\n\t\"path/filepath\"\n)\n\nfunc SecureJoin(root, unsafePath string) (string, error) {\n\tunsafePath = string(filepath.Separator) + unsafePath\n\tcmd := exec.Command(\"chroot\", root,\n\t\t\"readlink\", \"--canonicalize-missing\", \"--no-newline\", unsafePath)\n\toutput, err := cmd.CombinedOutput()\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\texpanded := string(output)\n\treturn filepath.Join(root, expanded), nil\n}\n```\n\n----------------------------------------\n\nTITLE: SpanModels Function Exported in Zipkin Exporter\nDESCRIPTION: The `SpanModels` function is now exported from the `go.opentelemetry.io/otel/exporters/zipkin` package to convert OpenTelemetry spans into Zipkin model spans. This change allows for easier integration with Zipkin.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: Deprecated oteltest Package in OpenTelemetry\nDESCRIPTION: The `go.opentelemetry.io/otel/oteltest` package is deprecated. The `go.opentelemetry.io/otel/sdk/trace/tracetest.SpanRecorder` can be registered with the default SDK as a `SpanProcessor` and used as a replacement.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Signing off on a git commit\nDESCRIPTION: This code snippet shows the format required for signing off on git commits. This involves adding a line \"Signed-off-by: Joe Smith <joe.smith@email.com>\" to the end of the commit message to indicate that the contributor certifies the Developer Certificate of Origin (DCO).\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/docker/go-units/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\nSigned-off-by: Joe Smith <joe.smith@email.com>\n```\n\n----------------------------------------\n\nTITLE: Building Skopeo Documentation\nDESCRIPTION: This command builds the Skopeo documentation using make. It requires `go-md2man` to be installed.\nSOURCE: https://github.com/containers/skopeo/blob/main/install.md#_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nmake docs\n```\n\n----------------------------------------\n\nTITLE: Detecting Explorer Invocation in Windows - Go\nDESCRIPTION: This Go function determines whether the current process was started by double-clicking the executable in Windows Explorer. It can be used to provide more helpful behavior to users unfamiliar with command-line tools. No external dependencies are needed besides the standard Go library.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/inconshreveable/mousetrap/README.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nfunc StartedByExplorer() (bool)\n```\n\n----------------------------------------\n\nTITLE: Interface exclusion in OpenTelemetry Go SDK\nDESCRIPTION: This code snippet lists interfaces that end-users should not implement directly in the OpenTelemetry Go SDK. This helps maintain the stability and intended behavior of the SDK by preventing custom implementations of internal interfaces.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#_snippet_11\n\nLANGUAGE: Go\nCODE:\n```\n      \"otel/exporters/otlp/otlphttp\".Option\n      \"otel/exporters/stdout\".Option\n      \"otel/oteltest\".Option\n      \"otel/trace\".TracerOption\n      \"otel/trace\".SpanOption\n      \"otel/trace\".EventOption\n      \"otel/trace\".LifeCycleOption\n      \"otel/trace\".InstrumentationOption\n      \"otel/sdk/resource\".Option\n      \"otel/sdk/trace\".ParentBasedSamplerOption\n      \"otel/sdk/trace\".ReadOnlySpan\n      \"otel/sdk/trace\".ReadWriteSpan\n  \n```\n\n----------------------------------------\n\nTITLE: Deprecated Array Function in OpenTelemetry Attribute\nDESCRIPTION: The `Array` function and the related `ARRAY` value type in the `go.opentelemetry.io/otel/attribute` package have been deprecated. Users should now use the typed `*Slice` functions and types instead.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Iterating Graphemes with Graphemes Class Go\nDESCRIPTION: This example demonstrates how to iterate over grapheme clusters in a string using the `Graphemes` class from the uniseg package. It initializes a new `Graphemes` object with the string \"👍🏼!\" and iterates over the grapheme clusters, printing the runes (code points) of each cluster in hexadecimal format.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/rivo/uniseg/README.md#_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\ngr := uniseg.NewGraphemes(\"👍🏼!\")\nfor gr.Next() {\n\tfmt.Printf(\"%x \", gr.Runes())\n}\n// [1f44d 1f3fc] [21]\n```\n\n----------------------------------------\n\nTITLE: Defining PidsStat Message in Protobuf\nDESCRIPTION: This protobuf snippet defines the 'PidsStat' message, representing process ID statistics for a cgroup. It contains fields for current and limit, representing the current number of processes and the maximum allowed.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/containerd/cgroups/v3/cgroup1/stats/metrics.pb.txt#_snippet_2\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage PidsStat {\n  optional uint64 current = 1;\n  optional uint64 limit = 2;\n}\n```\n\n----------------------------------------\n\nTITLE: reflect2: Get/Set unsafe.Pointer in Go\nDESCRIPTION: Illustrates how to use `reflect2` to set the value of an `unsafe.Pointer`. It gets the `reflect2.Type` of a value and uses the `UnsafeSet` method to modify the value pointed to by the `unsafe.Pointer`. To get set `type`, always use its pointer `*type`.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/modern-go/reflect2/README.md#_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nvalType := reflect2.TypeOf(1)\ni := 1\nj := 10\nvalType.UnsafeSet(unsafe.Pointer(&i), unsafe.Pointer(&j))\n// i will be 10\n```\n\n----------------------------------------\n\nTITLE: Output ValidationError in Flag Format (Go)\nDESCRIPTION: This code snippet shows how to output a `ValidationError` in the `flag` format. It marshals the `FlagOutput()` of the error to JSON with indentation for readability, indicating whether the validation was successful or not.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/santhosh-tekuri/jsonschema/v5/README.md#_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\nb, _ := json.MarshalIndent(err.FlagOutput(), \"\", \"  \")\nfmt.Println(string(b))\n```\n\n----------------------------------------\n\nTITLE: Install stripansi Go package\nDESCRIPTION: This command installs the stripansi Go package using the `go get` command. The `-u` flag ensures that the package and its dependencies are updated to the latest versions.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/acarl005/stripansi/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ go get -u github.com/acarl005/stripansi\n```\n\n----------------------------------------\n\nTITLE: Listing tags in a Docker archive with multiple images using skopeo\nDESCRIPTION: This example demonstrates listing tags from a Docker archive containing multiple images. It uses the `docker-archive` transport with `skopeo list-tags`. The command outputs a JSON object with the `Tags` array listing all tags found in the archive.\nSOURCE: https://github.com/containers/skopeo/blob/main/docs/skopeo-list-tags.1.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ skopeo list-tags docker-archive:/tmp/docker-two-images.tar.gz\n{\n    \"Tags\": [\n        \"example.com/empty:latest\",\n        \"example.com/empty/but:different\"\n    ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining causer Interface in Go\nDESCRIPTION: Defines the `causer` interface, which provides a `Cause()` method for retrieving the underlying error. This interface is used by `errors.Cause` to recursively find the root cause of an error.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/pkg/errors/README.md#_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\ntype causer interface {\n        Cause() error\n}\n```\n\n----------------------------------------\n\nTITLE: Generating and Inspecting a KSUID using the CLI\nDESCRIPTION: This command generates a KSUID and immediately inspects its components using the ksuid command-line tool with the -f inspect flag. It combines generation and inspection in a single step.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/segmentio/ksuid/README.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n$ ksuid -f inspect\n```\n\n----------------------------------------\n\nTITLE: Interface Definition Example Go\nDESCRIPTION: Example of a simple interface in go. Used to showcase how to add a close method using another interface.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#_snippet_15\n\nLANGUAGE: go\nCODE:\n```\ntype Exporter interface {\n\tExport()\n}\n\n```\n\n----------------------------------------\n\nTITLE: Building for Android with go build\nDESCRIPTION: This command compiles the go-sqlite3 package for the Android operating system. The `-tags \"android\"` flag includes Android-specific build configurations.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/mattn/go-sqlite3/README.md#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\ngo build -tags \"android\"\n```\n\n----------------------------------------\n\nTITLE: Creating a prerelease branch with make\nDESCRIPTION: This snippet shows how to create a pre-release branch for a specific module set using the `prerelease` make target.  It requires specifying the `MODSET` variable to indicate which modules are being released.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/go.opentelemetry.io/otel/RELEASING.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmake prerelease MODSET=<module set>\n```\n\n----------------------------------------\n\nTITLE: Installing go-sqlite3 Package\nDESCRIPTION: This command installs the go-sqlite3 package using go get. It's a cgo package and requires gcc for building.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/mattn/go-sqlite3/README.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\ngo get github.com/mattn/go-sqlite3\n```\n\n----------------------------------------\n\nTITLE: Running ULID Tests with Go\nDESCRIPTION: This shell command executes all tests within the current directory and its subdirectories using the `go test` command.  It is used to verify the correctness and functionality of the ULID package.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/oklog/ulid/README.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ngo test ./...\n```\n\n----------------------------------------\n\nTITLE: Installing go-md2man on Debian\nDESCRIPTION: Installs go-md2man on Debian based systems.\nSOURCE: https://github.com/containers/skopeo/blob/main/install.md#_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\n# Debian:\nsudo apt-get install go-md2man\n```\n\n----------------------------------------\n\nTITLE: Deprecated Harness Type in oteltest\nDESCRIPTION: The `Harness` type from the `go.opentelemetry.io/otel/oteltest` package and its associated creation function, `NewHarness` are deprecated and will be removed in the next release.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: Building Linux Guest Agent - Shell\nDESCRIPTION: This snippet demonstrates how to build the Linux guest agent on a Linux machine. It uses the `go build` command to compile the source code located in the `./cmd/gcs` directory.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/Microsoft/hcsshim/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n> go build ./cmd/gcs\n```\n\n----------------------------------------\n\nTITLE: Defining Aggregations for Views in OpenCensus Go\nDESCRIPTION: This snippet demonstrates how to define different aggregation types for views in OpenCensus Go. It creates a `DistributionAggregation`, a `CountAggregation`, and a `SumAggregation`.  These aggregations are later used when registering a view to aggregate recorded measurements.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/go.opencensus.io/README.md#_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\ndistAgg := view.Distribution(1<<32, 2<<32, 3<<32)\ncountAgg := view.Count()\nsumAgg := view.Sum()\n```\n\n----------------------------------------\n\nTITLE: Initializing a local Go module\nDESCRIPTION: Retrieves the opentelemetry-go module using `go get`. This may display warnings about build constraints, which can be safely ignored. It places the project in `${GOPATH}/src/go.opentelemetry.io/otel`.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngo get -d go.opentelemetry.io/otel\n```\n\n----------------------------------------\n\nTITLE: Commit Message Example\nDESCRIPTION: This example demonstrates the recommended format for commit messages, including a concise summary, detailed explanation, and references to issue trackers. It also shows how to structure the commit message body with paragraphs and bullet points.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/sigstore/rekor/CONTRIBUTORS.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nSummarize changes in around 50 characters or less\n\nMore detailed explanatory text, if necessary. Wrap it to about 72\ncharacters or so. In some contexts, the first line is treated as the\nsubject of the commit and the rest of the text as the body. The\nblank line separating the summary from the body is critical (unless\nyou omit the body entirely); various tools like `log`, `shortlog`\nand `rebase` can get confused if you run the two together.\n\nExplain the problem that this commit is solving. Focus on why you\nare making this change as opposed to how (the code explains that).\nAre there side effects or other unintuitive consequences of this\nchange? Here's the place to explain them.\n\nFurther paragraphs come after blank lines.\n\n - Bullet points are okay, too\n\n - Typically a hyphen or asterisk is used for the bullet, preceded\n   by a single space, with blank lines in between, but conventions\n   vary here\n\nIf you use an issue tracker, put references to them at the bottom,\nlike this:\n\nResolves: #123\nSee also: #456, #789\n```\n\n----------------------------------------\n\nTITLE: Get project dependencies using go get\nDESCRIPTION: Fetches the project dependencies using the `go get` command. The `-d` flag ensures that only the dependencies are downloaded, without building or installing the package. This step is necessary to set up the development environment.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/go.opencensus.io/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ go get -d go.opencensus.io\n```\n\n----------------------------------------\n\nTITLE: Committing Changes\nDESCRIPTION: This snippet shows how to commit changes with a clear message including the issue number. This is important for tracking and linking changes to specific issues.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/github.com/mistifyio/go-zfs/v3/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ git commit -m \"Issue #<issue-number> - <commit-message>\"\n```\n\n----------------------------------------\n\nTITLE: Cloning the opentelemetry-go repository using git\nDESCRIPTION: Clones the opentelemetry-go repository from GitHub using git. This command is an alternative to using `go get` and places the project in the `opentelemetry-go` directory in the current working directory.\nSOURCE: https://github.com/containers/skopeo/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/open-telemetry/opentelemetry-go\n```"
  }
]