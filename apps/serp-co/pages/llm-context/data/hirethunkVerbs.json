[
  {
    "owner": "hirethunk",
    "repo": "verbs",
    "content": "TITLE: Adding Validation and State Mutation in Event (PHP)\nDESCRIPTION: Adds validate and apply methods to the CustomerBeganTrial event for custom business logic. The validate method checks that the customer hasn't started a trial in the last year, throwing an error if not allowed. The apply method updates the CustomerState with the new timestamp. Depends on the Carbon library and Verbs' assertion and event lifecycles. Inputs: CustomerState instance. Returns void but can prevent event firing on validation failure.\nSOURCE: https://github.com/hirethunk/verbs/blob/main/docs/quickstart.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nclass CustomerBeganTrial extends Event\n{\n    #[StateId(CustomerState::class)]\n    public int $customer_id;\n\n    public function validate(CustomerState $state)\n\t{\n        $this->assert(\n            $state->trial_started_at === null\n            || $state->trial_started_at->diffInDays() > 365,\n            'This user has started a trial within the last year.'\n        );\n\t}\n\n    public function apply(CustomerState $state)\n    {\n        $state->trial_started_at = now();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Side Effects with the Event handle Method (PHP)\nDESCRIPTION: Demonstrates how to create a Subscription Eloquent model record in the handle method of the CustomerBeganTrial event. This method is called after validation and state mutation, and persists subscription data to the database. Dependencies: Laravel's Eloquent ORM, a Subscription model with customer_id and expires_at columns. Inputs: event properties. Outputs: a new Subscription database record.\nSOURCE: https://github.com/hirethunk/verbs/blob/main/docs/quickstart.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n// after apply()\n\npublic function handle()\n{\n    Subscription::create([\n        'customer_id' => $this->customer_id,\n        'expires_at' => now()->addDays(30),\n    ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Singleton State\nDESCRIPTION: This code shows how to define a singleton state by extending the `SingletonState` class. Singleton states have only one instance across the application and do not require an ID. The example demonstrates how to create a `CountState` as a singleton, ensuring that only one instance of the state exists application-wide.\nSOURCE: https://github.com/hirethunk/verbs/blob/main/docs/states.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nclass CountState extends SingletonState {}\n```\n\n----------------------------------------\n\nTITLE: Committing Events and accessing results PHP\nDESCRIPTION: This demonstrates calling `Event::commit()` (instead of `fire()`) to both fire AND commit the event (and all events in the queue). It is also shown how to immediately use the result of an event by returning a value from the `handle()` method. This is useful when you need to use the result of an event in a controller method.\nSOURCE: https://github.com/hirethunk/verbs/blob/main/docs/events.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// CustomerBeganTrial event\npublic function handle()\n{\n    return Subscription::create([\n        'customer_id' => $this->customer_id,\n        'expires_at' => now()->addDays(30),\n    ]);\n}\n\n// TrialController\n{\n    public function store(TrialRequest $request) {\n        $subscription = CustomerBeganTrial::commit(customer_id: Auth::id());\n        return to_route('subscriptions.show', $subscription);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic State Class Definition\nDESCRIPTION: This code defines a basic state class named `ExampleState` within the `App\\States` namespace. It extends the `Thunk\\Verbs\\State` class, providing a foundation for managing state data within the Verbs package. It demonstrates the basic structure of a state file.\nSOURCE: https://github.com/hirethunk/verbs/blob/main/docs/states.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace App\\States;\n\nuse Thunk\\Verbs\\State;\n\nclass ExampleState extends State\n{\n    // It ain't my birthday but I got my name on the cake - Lil Wayne\n}\n```\n\n----------------------------------------\n\nTITLE: Firing Additional Events with 'fired' hook PHP\nDESCRIPTION: This code showcases the `fired()` hook, which allows an event to trigger subsequent events after it has fired and before being stored in the database. It demonstrates passing data between events, and is intended to handle further actions related to the original event. This promotes composability and allows you to chain events together.\nSOURCE: https://github.com/hirethunk/verbs/blob/main/docs/events.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nCountIncrementedTwice::fire(count_id: $id);\n\n// CountIncrementedTwice event\npublic function fired()\n{\n    CountIncremented::fire(count_id: $this->count_id);\n    CountIncremented::fire(count_id: $this->count_id);\n}\n\n// CountIncremented event\npublic function apply(CountState $state)\n{\n    $state->count++;\n}\n\n// test or other file\nCountState::load($id)->count; // 2\n```\n\nLANGUAGE: php\nCODE:\n```\nPlayerLeveledUp::fire(player_id: $id);\n\n// PlayerLeveledUp event\npublic function apply(PlayerState $state)\n{\n    $state->level++;\n}\n\npublic function fired()\n{\n    PlayerRewarded::fire(player_id: $this->player_id);\n}\n\n// PlayerRewarded event\npublic function apply(PlayerState $state)\n{\n    if ($state->level === 5) {\n        $state->max_inventory = 100;\n    }\n}\n\n// test or other file\nPlayerState::load($id)->max_inventory; // 100;\n```\n\n----------------------------------------\n\nTITLE: Replaying Events via Artisan Command PHP\nDESCRIPTION: This snippet demonstrates replaying events using the `php artisan verbs:replay` command. This allows the recreation of the application's state by re-executing all stored events in chronological order.\nSOURCE: https://github.com/hirethunk/verbs/blob/main/docs/events.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan verbs:replay\n```\n\n----------------------------------------\n\nTITLE: Defining a Parent State Class with Child ID in PHP\nDESCRIPTION: Defines a simple `ParentState` class extending `State`. It contains a public integer property `child_id`, which is intended to store the ID of a related `ChildState` instance, forming the basis for a parent-child state relationship within the Verbs framework.\nSOURCE: https://github.com/hirethunk/verbs/blob/main/docs/attributes.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nclass ParentState extends State\n{\n    public int $child_id;\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a New Event with Artisan (Shell)\nDESCRIPTION: Creates a new Event class using Verbs' custom artisan command. Relies on Verbs being installed and configured within a Laravel project. Replace 'CustomerBeganTrial' with your event name to scaffold the PHP class under app/Events. No special parameters, required input is the event class name.\nSOURCE: https://github.com/hirethunk/verbs/blob/main/docs/quickstart.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan verbs:event CustomerBeganTrial\n```\n\n----------------------------------------\n\nTITLE: Defining an Event to Link Parent and Child States in PHP\nDESCRIPTION: Example of an event class `ChildAddedToParent` that uses `#[AppliesToState]` to link both a `ParentState` (via `parent_id`) and a `ChildState` (via `child_id`). It includes an `applyToParentState` method, which is invoked by Verbs to update the `ParentState` instance by setting its `child_id` property, thereby establishing the link needed for nested state access.\nSOURCE: https://github.com/hirethunk/verbs/blob/main/docs/attributes.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// ChildAddedToParent.php\n#[AppliesToState(state_type: ParentState::class, id: 'parent_id')]\n#[AppliesToState(state_type: ChildState::class, id: 'child_id')]\nclass ChildAddedToParent extends Event\n{\n    public int $parent_id;\n\n    public int $child_id;\n\n    public function applyToParentState(ParentState $state)\n    {\n        $state->child_id = $this->child_id;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using #[AppliesToState] with Explicit ID Mapping in PHP\nDESCRIPTION: Illustrates using the `#[AppliesToState]` attribute with the optional `id` parameter to explicitly map specific event properties (`foo_id`, `bar_id`) to their corresponding State classes (`GameState`, `PlayerState`). This is useful when property names don't follow the standard Verbs naming convention.\nSOURCE: https://github.com/hirethunk/verbs/blob/main/docs/attributes.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n#[AppliesToState(state_type: GameState::class, id: foo_id)]\n#[AppliesToState(state_type: PlayerState::class, id: bar_id)]\nclass RolledDice extends Event\n{\n    use PlayerAction;\n\n    public function __construct(\n        public int $foo_id,\n        public int $bar_id,\n        public array $dice,\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Assertion Methods for Verbs Commits\nDESCRIPTION: Example usage of various assertion methods to verify commit behavior after using Verbs::fake() to isolate the testing environment.\nSOURCE: https://github.com/hirethunk/verbs/blob/main/docs/testing.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nVerbs::assertNothingCommitted();\nVerbs::assertCommitted(...);\nVerbs::assertNotCommitted(...);\n```\n\n----------------------------------------\n\nTITLE: Defining a Child State Class in PHP\nDESCRIPTION: Defines a simple `ChildState` class extending `State`. It includes a public property `count` initialized to 0. This state class is designed to be associated with a `ParentState` in a nested state structure.\nSOURCE: https://github.com/hirethunk/verbs/blob/main/docs/attributes.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nclass ChildState extends State\n{\n    public int $count = 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a State Using Factory Method\nDESCRIPTION: Examples of creating states using the State::factory() method, with options for specifying IDs and initial data. Demonstrates both standard and ID chaining syntax.\nSOURCE: https://github.com/hirethunk/verbs/blob/main/docs/testing.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nBankAccountState::factory()->create(\n    data: ['balance' => 1337]\n    id: $bank_account_id\n);\n\n// Or, using `id()` syntax:\n\nBankAccountState::factory()\n    ->id($bank_account_id)\n    ->create(\n        data: ['balance' => 1337]\n    );\n```\n\n----------------------------------------\n\nTITLE: Creating State with Explicit Data\nDESCRIPTION: Shows how to create a state with explicit data using the create() method, which returns a State or StateCollection.\nSOURCE: https://github.com/hirethunk/verbs/blob/main/docs/testing.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nUserState::factory()->create([ /* state data */ ]);\n```\n\n----------------------------------------\n\nTITLE: Applying Event Data to State\nDESCRIPTION: This example demonstrates how to apply event data to a state using the `apply()` method. The `CountIncremented` event updates the `event_count` property of the `CountState`. The example shows the event definition, state definition, and usage scenario including firing event, committing changes and loading state to observe the effect.\nSOURCE: https://github.com/hirethunk/verbs/blob/main/docs/states.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n// CountIncremented.php\nclass CountIncremented extends Event\n{\n    #[StateId(CountState::class)]\n    public int $example_id;\n\n    public function apply(CountState $state)\n    {\n        $state->event_count++;\n    }\n}\n\n// CountState.php\nclass CountState extends State\n{\n    public $event_count = 0;\n}\n\n// test or other file\n$id = snowflake_id();\n\nCountIncremented::fire(example_id: $id);\nVerbs::commit();\nCountState::load($id)->event_count // = 1\n```\n\n----------------------------------------\n\nTITLE: Conditionally Toggling Metadata for Promotional Notifications in Verbs PHP\nDESCRIPTION: This code illustrates selectively applying metadata to events within a user notification context by dynamically setting a 'suppress_notifications' flag. It registers metadata via Verbs::createMetadataUsing with an arrow function that inspects user preferences to determine whether promotional notifications should be suppressed. After firing the promotional event, the metadata flag is reset to avoid side effects on subsequent events. This pattern enables fine-grained control over event metadata within application logic and requires user preference data retrieval, Verbs event firing, and metadata support.\nSOURCE: https://github.com/hirethunk/verbs/blob/main/docs/metadata.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic function sendPromotionalNotification($user)\n{\n    $user_preferences = $this->getUserPreferences($user->id);\n\n    Verbs::createMetadataUsing(fn (Metadata $metadata) => [\n        'suppress_notifications' => !$userPreferences->acceptsPromotionalNotifications,\n    ]);\n\n    PromotionalEvent::fire(details: $user->location->promoDetails());\n\n    // resets Metadata bool for the next user\n    Verbs::createMetadataUsing(fn (Metadata $metadata) => ['suppress_notifications' => false]);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Metadata using Closure - Verbs (PHP)\nDESCRIPTION: This snippet demonstrates how to add metadata to Verbs events using a closure. The closure receives a `Metadata` object and an `Event` object as arguments. It allows you to directly modify the `Metadata` object to include additional information. Dependencies: Requires the Verbs package and the `Metadata` and `Event` classes. `current_team_id()` function is assumed to exist.\nSOURCE: https://github.com/hirethunk/verbs/blob/main/docs/old/metadata.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nVerbs::createMetadataUsing(function (Metadata $metadata, Event $event) {\n  $metadata->team_id = current_team_id();\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Event Metadata to Suppress Notifications in Verbs PHP\nDESCRIPTION: This snippet shows an example event handler that checks the 'suppress_notifications' metadata flag on a PromotionalEvent instance to conditionally abort sending a notification. It uses $event->metadata() to retrieve the metadata value with a default fallback. If suppression is enabled, the handler returns early; otherwise, it proceeds to send the notification using event details. This demonstrates consuming metadata attached via Verbs to influence event handling logic.\nSOURCE: https://github.com/hirethunk/verbs/blob/main/docs/metadata.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function handlePromotionalEvent(PromotionalEvent $event)\n{\n    if ($event->metadata('suppress_notifications', false)) {\n        return;\n    }\n\n    $this->sendNotification($event->details);\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a State using Artisan\nDESCRIPTION: This command generates a new state file in the `app/States` directory. It utilizes the artisan command-line tool provided by Laravel. The generated file provides a basic state class that extends `Thunk\\Verbs\\State`.\nSOURCE: https://github.com/hirethunk/verbs/blob/main/docs/states.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nphp artisan verbs:state ExampleState\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple States with count() Method\nDESCRIPTION: Demonstrates how to create multiple state instances at once using the count method, which returns a StateCollection.\nSOURCE: https://github.com/hirethunk/verbs/blob/main/docs/testing.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nUserState::factory()->count(3)->create();\n```\n\n----------------------------------------\n\nTITLE: Configuring After-Creation Actions\nDESCRIPTION: Example of implementing the configure() method to set up actions to be performed after creating a state, such as firing additional events.\nSOURCE: https://github.com/hirethunk/verbs/blob/main/docs/testing.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\npublic function configure(): void\n{\n    $this->afterCreating(function (ExampleState $state) {\n        ExampleEvent::fire(\n            id: $state->id,\n        );\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple State Updates in Event\nDESCRIPTION: This example demonstrates how an event can apply updates to multiple states using descriptive apply methods. It defines separate `applyToGameState` and `applyToPlayerState` methods to update different state instances. This approach improves code readability and maintainability when dealing with complex event-state interactions.\nSOURCE: https://github.com/hirethunk/verbs/blob/main/docs/states.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\npublic function applyToGameState(GameState $state) {}\n\npublic function applyToPlayerState(PlayerState $state) {}\n```\n\n----------------------------------------\n\nTITLE: Validating Event Data using State\nDESCRIPTION: This example demonstrates how to use the state to validate whether an event should be fired. The `validate()` method checks the state's properties and uses the `assert()` method to determine if the event is valid. If `assert()` fails, the event will not be fired, preventing invalid state transitions.\nSOURCE: https://github.com/hirethunk/verbs/blob/main/docs/states.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\npublic function validate()\n{\n    $this->assert(\n        $game->started, // if this has not happened\n        'Game must be started before a player can join.' // then display this error message\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Event to State & Handling Model Update (PHP)\nDESCRIPTION: This PHP code snippet demonstrates how an event modifies the state and subsequently updates the model. The `apply` method modifies the `PlayerState` by adding the event's amount to the state's `wealth` property. The `handle` method then uses the updated `wealth` from the state to update the corresponding `Player` model in the database. This approach keeps business logic separate from the model and allows for complex calculations before model modification.\nSOURCE: https://github.com/hirethunk/verbs/blob/main/docs/state-first-development.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function apply(PlayerState $state)\n{\n    $state->wealth += $this->amount;\n}\n\npublic function handle()\n{\n    // our apply method has already happened!\n\n    Player::fromId($this->player_id)\n        ->update([\n            'wealth' => $this->state(PlayerState::class)->wealth,\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Allowing Model Normalization (PHP)\nDESCRIPTION: This PHP code snippet disables the default behavior of Verbs that prevents storing references to models inside events or states. It uses the `dangerouslyAllowModelNormalization()` method of the `ModelNormalizer` class.  The documentation strongly discourages using this method due to potential unintended consequences, especially when replaying events. This should only be used if you fully understand the implications and have a specific reason to allow model normalization.\nSOURCE: https://github.com/hirethunk/verbs/blob/main/docs/state-first-development.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nThunk\\Verbs\\Support\\Normalization\\ModelNormalizer::dangerouslyAllowModelNormalization();\n```\n\n----------------------------------------\n\nTITLE: Loading a State\nDESCRIPTION: This snippet shows how to load a state using the `load()` method. The state is loaded into memory and can be updated with events. The example also mentions `loadOrFail()` which throws an exception if the state is not found, resulting in a 404 HTTP response if the exception is not caught.\nSOURCE: https://github.com/hirethunk/verbs/blob/main/docs/states.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nCardState::load($card_id);\n```\n\n----------------------------------------\n\nTITLE: Using States in Routes\nDESCRIPTION: This snippet illustrates how to use states in Laravel routes leveraging the `UrlRoutable` interface. The state is automatically loaded based on the route parameter. The example shows a route definition that automatically loads a `UserState` instance based on the `{user_state}` route parameter, providing convenient access to state data within the route closure.\nSOURCE: https://github.com/hirethunk/verbs/blob/main/docs/states.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nRoute::get('/users/{user_state}', function(UserState $user_state) {\n  // $user_state is automatically loaded for you!\n});\n```\n\n----------------------------------------\n\nTITLE: Loading a Singleton State\nDESCRIPTION: This snippet demonstrates how to load a singleton state using the `singleton()` method. Trying to load a singleton state using other methods will result in an exception. The example showcases the correct way to retrieve the single instance of `YourState` when it's defined as a singleton.\nSOURCE: https://github.com/hirethunk/verbs/blob/main/docs/states.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\nYourState::singleton();\n```\n\n----------------------------------------\n\nTITLE: Applying Verbs Event State Hooks in PHP\nDESCRIPTION: Implements apply methods within a Verbs event class to update properties on related state objects (UserState and TeamState) as the event is fired. The methods are type-hinted to control invocation per state and alter stateful properties, such as updating team relationships and seat counts. This enables event-sourced rebuilding and consistent application of state changes.\nSOURCE: https://github.com/hirethunk/verbs/blob/main/docs/event-lifecycle.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass UserJoinedTeam\n{\n    // ...\n    \n    public function applyToUser(UserState $user)\n    {\n        $user->team_id = $this->team_id;\n    }\n    \n    public function applyToTeam(TeamState $team)\n    {\n        $team->team_seats--;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using #[AppliesToState] Attribute for Class-Level State Linking in PHP\nDESCRIPTION: Shows how to use the `#[AppliesToState]` attribute at the class level (`RolledDice` event) to associate the event with multiple State classes (`GameState`, `PlayerState`). By default, Verbs automatically finds corresponding ID properties (`game_id`, `player_id`) based on state class name conventions (e.g., `GameState` maps to `game_id`).\nSOURCE: https://github.com/hirethunk/verbs/blob/main/docs/attributes.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n#[AppliesToState(GameState::class)]\n#[AppliesToState(PlayerState::class)]\nclass RolledDice extends Event\n{\n    use PlayerAction;\n\n    public function __construct(\n        public int $game_id,\n        public int $player_id,\n        public array $dice,\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Using #[StateId] Attribute to Link Event Properties to States in PHP\nDESCRIPTION: Demonstrates how to use the `#[StateId]` attribute directly on public properties within an Event class (`YourEvent`). This attribute links the event instance to specific State classes (`GameState`, `PlayerState`) using the values of the decorated properties (`$game_id`, `$player_id`) as identifiers.\nSOURCE: https://github.com/hirethunk/verbs/blob/main/docs/attributes.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass YourEvent extends Event\n{\n    #[StateId(GameState::class)]\n    public int $game_id;\n\n    #[StateId(PlayerState::class)]\n    public int $player_id;\n}\n```\n\n----------------------------------------\n\nTITLE: Using HasSnowflakes Trait for Snowflake IDs in Laravel Models with PHP\nDESCRIPTION: This snippet demonstrates how to enable Snowflake IDs as primary keys in a Laravel Eloquent model by including the HasSnowflakes trait. It requires the glhd/bits package for generating Snowflake IDs. By using this trait, the model's primary key is no longer an auto-incrementing integer but a globally unique Snowflake ID stored as an unsigned bigint. This setup improves uniqueness and scalability for event-sourced applications.\nSOURCE: https://github.com/hirethunk/verbs/blob/main/docs/old/ids.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass JobApplication extends Model\n{\n    use HasSnowflakes; // Add this to your model\n}\n```\n\n----------------------------------------\n\nTITLE: Using #[AppliesToChildState] to Access Nested States in PHP\nDESCRIPTION: Demonstrates the `#[AppliesToChildState]` attribute on the `NestedStateAccessed` event class. This attribute instructs Verbs to load the `ChildState` by looking up its ID (`child_id`) within the associated `ParentState`. The `#[StateId]` attribute identifies the parent (`parent_id`). The `apply` method then directly receives and modifies the loaded `ChildState` instance.\nSOURCE: https://github.com/hirethunk/verbs/blob/main/docs/attributes.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// NestedStateAccessed.php\n#[AppliesToChildState(\n    state_type: ChildState::class,\n    parent_type: ParentState::class,\n    id: 'child_id'\n)]\nclass NestedStateAccessed extends Event\n{\n    #[StateId(ParentState::class)]\n    public int $parent_id;\n\n    public function apply(ChildState $state)\n    {\n        $state->count++; // 1\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using #[Once] Attribute to Prevent Event Handler Replay in PHP\nDESCRIPTION: Shows how to apply the `#[Once]` attribute to an event's `handle()` method, specifying a State class (`YourState`). This attribute ensures the `handle()` logic is executed only the first time the event is processed for a given state instance and is skipped during subsequent replays for that state.\nSOURCE: https://github.com/hirethunk/verbs/blob/main/docs/attributes.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nclass YourEvent extends Event\n{\n    #[Once(YourState::class)]\n    public function handle()\n    {\n        //\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Snowflake ID Database Columns in Laravel Migrations\nDESCRIPTION: Demonstrates how to create database columns for Snowflake IDs in Laravel migrations. The example shows creating both primary key columns and foreign key columns, complete with proper indexing and relationships.\nSOURCE: https://github.com/hirethunk/verbs/blob/main/docs/ids.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Run the migrations.\n */\npublic function up(): void\n{\n    Schema::create('job_applications', function (Blueprint $table) {\n        $table->snowflakeId();\n        $table->snowflake('user_id')->index();\n        $table->foreign('user_id')->references('id')->on('users');\n        // ...\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Hirethunk/Verbs via Composer\nDESCRIPTION: Command to install the Hirethunk/Verbs package using Composer. This adds the package to your Laravel project dependencies.\nSOURCE: https://github.com/hirethunk/verbs/blob/main/docs/old/quickstart.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require hirethunk/verbs\n```\n\n----------------------------------------\n\nTITLE: Implementing HasSnowflakes Trait in Laravel Models with PHP\nDESCRIPTION: Shows how to integrate Snowflake IDs into Laravel models by using the HasSnowflakes trait and casting the ID attribute to the Snowflake class. This setup ensures the model uses globally unique, sortable, time-based integer IDs.\nSOURCE: https://github.com/hirethunk/verbs/blob/main/docs/ids.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Glhd\\Bits\\Database\\HasSnowflakes;\nuse Glhd\\Bits\\Snowflake;\n\nclass JobApplication extends Model\n{\n    use HasSnowflakes; // Add this to your model\n\n    // Any attribute can be cast to a `Snowflake` (or `Sonyflake`)\n    protected function casts(): array\n    {\n        return [\n            'id' => Snowflake::class,\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Verbs Event Class Structure in PHP\nDESCRIPTION: Example of a basic Verbs Event class with a constructor receiving parameters and a handle method for implementing event logic.\nSOURCE: https://github.com/hirethunk/verbs/blob/main/docs/old/quickstart.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nclass CustomerBeganTrial extends Event\n{\n    public function __construct(\n\t    public int $customer_id,\n    ) {}\n\n    public function handle()\n    {\n        // Your event handler logic will go here.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Firing Events with Auto-generated Snowflake IDs\nDESCRIPTION: Demonstrates how to fire an event without explicitly providing an ID, allowing Verbs to automatically generate a Snowflake ID. This showcases the autofill functionality that simplifies working with unique IDs in event-sourcing.\nSOURCE: https://github.com/hirethunk/verbs/blob/main/docs/ids.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n    $event = CustomerBeganTrial::fire() // no set customer_id\n\n    $event->customer_id; // = snowflake_id()\n```\n\n----------------------------------------\n\nTITLE: Publishing and Running Migrations for Verbs\nDESCRIPTION: Commands to publish the migration files and run them to set up the necessary database tables for the Verbs package.\nSOURCE: https://github.com/hirethunk/verbs/blob/main/docs/old/quickstart.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan vendor:publish --tag=verbs-migrations\nphp artisan migrate\n```\n\n----------------------------------------\n\nTITLE: Configuring StateId Attribute with Auto-generated Snowflake IDs\nDESCRIPTION: Shows how to configure an event class in Verbs to use automatically generated Snowflake IDs. By setting the state_id property to null and using the StateId attribute, Verbs will provide a Snowflake ID automatically.\nSOURCE: https://github.com/hirethunk/verbs/blob/main/docs/ids.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass CustomerBeganTrial extends Event\n{\n    #[StateId(CustomerState::class)]\n    public ?int $customer_id = null;\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a Verbs State Class\nDESCRIPTION: Artisan command to generate a new State class for the Verbs system. This creates a boilerplate state in the app/States directory.\nSOURCE: https://github.com/hirethunk/verbs/blob/main/docs/old/quickstart.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan verbs:state CustomerState\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Handler with Model Creation in PHP\nDESCRIPTION: Example of using the handle method in an event to create an Eloquent model. This shows how to create a Subscription record when a customer begins a trial.\nSOURCE: https://github.com/hirethunk/verbs/blob/main/docs/old/quickstart.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nclass CustomerBeganTrial extends Event\n{\n    public function __construct(\n\t    public int $customer_id,\n    ) {}\n\n    public function handle()\n    {\n        Subscription::create([\n\t\t\t'customer_id' => $this->customer_id,\n\t\t\t'expires_at' => now()->addDays(30),\n\t\t]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Event with State Integration in PHP\nDESCRIPTION: Complete example of an event that integrates with a state for validation. It includes state ID attribute, validation logic to check trial eligibility, and a handler to create a subscription.\nSOURCE: https://github.com/hirethunk/verbs/blob/main/docs/old/quickstart.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nclass CustomerBeganTrial extends Event\n{\n    public function __construct(\n        #[StateId(CustomerState::class)]\n\t    public int $customer_id,\n    ) {}\n    \n    public function validate(CustomerState $state) \n\t{\n\t\treturn $state->latest_trial_started_at === null\n\t\t\t|| $state->last_trial_started_at->diffInDays() > 365\n\t}\n\n    public function handle()\n    {\n        Subscription::create([\n\t\t\t'customer_id' => $this->customer_id,\n\t\t\t'expires_at' => now()->addDays(30),\n\t\t]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a State Class in PHP\nDESCRIPTION: Example of a State class definition with a property to track when a customer last started a trial. This state can be used for validation and persistence.\nSOURCE: https://github.com/hirethunk/verbs/blob/main/docs/old/quickstart.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nclass CustomerState extends State\n{\n\tpublic Carbon|null $latest_trial_started_at = null;\n}\n```\n\n----------------------------------------\n\nTITLE: Firing a Verbs Event in PHP\nDESCRIPTION: Code example showing how to fire a Verbs event anywhere in your application code using the static fire method.\nSOURCE: https://github.com/hirethunk/verbs/blob/main/docs/old/quickstart.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nCustomerBeganTrial::fire(customer_id: 1);\n```\n\n----------------------------------------\n\nTITLE: Generating a Verbs Event Class\nDESCRIPTION: Artisan command to generate a new Event class for the Verbs system. This creates a boilerplate event in the app/Events directory.\nSOURCE: https://github.com/hirethunk/verbs/blob/main/docs/old/quickstart.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan verbs:event CustomerBeganTrial\n```\n\n----------------------------------------\n\nTITLE: Handling Mailing List Signup Event with Eloquent - PHP\nDESCRIPTION: This snippet extends the SignedUpForMailingList event by adding a handle() method that responds to the event. The handler creates a new subscriber record using the Subscribers Eloquent model and sends a welcome email through the sendWelcomeEmail() method. Dependencies include the Verbs Event class, the Subscribers Eloquent model, and Laravel's environment. The handle() method expects the event instance to have an email property, and outputs the creation of a subscriber record and dispatch of a welcome email. Assumes Subscribers is correctly implemented and email sending is configured; improper configurations may limit usage.\nSOURCE: https://github.com/hirethunk/verbs/blob/main/docs/old/building-blocks.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass SignedUpForMailingList extends Event\n{\n    public function __construct(public string $email) {}\n    \n    public function handle()\n    {\n        // In this case, `Subscribers` is an Eloquent model\n        $subscriber = Subscribers::create([\n            'email' => $this->email,\n        ]);\n        \n        $subscriber->sendWelcomeEmail();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Mailing List Signup Event in Verbs - PHP\nDESCRIPTION: This PHP snippet defines a SignedUpForMailingList event class that represents a user signing up for the mailing list. It stores the user's email as a public property. Prerequisites include having the Verbs library and an Event base class available in your PHP project. The class constructor requires the email address of the new subscriber as an input parameter; there are no outputs or side effects in this definition.\nSOURCE: https://github.com/hirethunk/verbs/blob/main/docs/old/building-blocks.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass SignedUpForMailingList extends Event\n{\n    public function __construct(public string $email) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Metadata using Array Return - Verbs (PHP)\nDESCRIPTION: This snippet shows how to add metadata to Verbs events by returning an array from the closure passed to `createMetadataUsing`. Verbs will automatically merge this array into the event metadata. Dependencies: Requires the Verbs package. `current_team_id()` function is assumed to exist.\nSOURCE: https://github.com/hirethunk/verbs/blob/main/docs/old/metadata.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nVerbs::createMetadataUsing(fn () => ['team_id' => current_team_id()]);\n```\n\n----------------------------------------\n\nTITLE: Using Arrow Function to Return Metadata Array in Verbs PHP\nDESCRIPTION: This snippet demonstrates returning a plain array of metadata from a closure registered via Verbs::createMetadataUsing. Instead of manipulating the Metadata object directly, the closure returns an associative array which Verbs automatically merges into event metadata. This approach is useful for attaching simple, event-related data that does not originate from event parameters. It depends on Verbs and assumes a current_team_id() helper function provides context.\nSOURCE: https://github.com/hirethunk/verbs/blob/main/docs/metadata.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nVerbs::createMetadataUsing(fn () => ['team_id' => current_team_id()]);\n```\n\n----------------------------------------\n\nTITLE: Handling Event with unlessReplaying in Verbs (PHP)\nDESCRIPTION: This code demonstrates how to use the `unlessReplaying` method from the Verbs package within an event handler to execute code only when the event is initially fired, preventing it from running during replay.  It assumes the existence of a `User` model and a `WelcomeEmail` mail class. Dependencies: Verbs package, Laravel's Mail facade.\nSOURCE: https://github.com/hirethunk/verbs/blob/main/docs/old/one-time-handlers.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass CustomerRegistered extends Event\n{\n    // ...\n    \n    public function handle()\n    {\n        // When this event is fired or replayed create a User model\n        $user = User::create([\n            // ..\n        ]);\n    \n        // But only send the welcome email the first time it's fired\n        Verbs::unlessReplaying(function() {\n            Mail::send(new WelcomeEmail());\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Model Normalization Check in Verbs Using PHP\nDESCRIPTION: This PHP code snippet shows how to disable the safeguard in Verbs that prevents storing references to Eloquent models inside events or states. It calls the static method dangeriouslyAllowModelNormalization() from the ModelNormalizer class to override the default exception-throwing behavior. Use of this method is risky and can cause inconsistencies during event replay, so it is intended for advanced users who understand the potential consequences.\nSOURCE: https://github.com/hirethunk/verbs/blob/main/docs/old/state-vs-model.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nThunk\\Verbs\\Support\\Normalization\\ModelNormalizer::dangerouslyAllowModelNormalization();\n```\n\n----------------------------------------\n\nTITLE: Registering Metadata Generator Using Verbs in PHP\nDESCRIPTION: This snippet shows how to configure Verbs to automatically include additional metadata on every event by registering a closure via Verbs::createMetadataUsing. The closure receives Metadata and Event objects to dynamically assign metadata values such as team IDs. Multiple calls to createMetadataUsing can be made for layered metadata contributions. Dependencies include the Verbs event system and a Metadata class. This setup facilitates automatic enrichment of event data across the application or third-party packages.\nSOURCE: https://github.com/hirethunk/verbs/blob/main/docs/metadata.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nVerbs::createMetadataUsing(function (Metadata $metadata, Event $event) {\n  $metadata->team_id = current_team_id();\n});\n```\n\n----------------------------------------\n\nTITLE: Validating Verbs Event State Hooks in PHP\nDESCRIPTION: Defines validation methods within a Verbs event class to enforce business rules on multiple state objects (UserState and TeamState). Each validate method is automatically invoked according to its parameter's type hint, ensuring that only authorized and appropriate actions occur. Assertions provide specific validation messages relevant to the state being checked.\nSOURCE: https://github.com/hirethunk/verbs/blob/main/docs/event-lifecycle.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass UserJoinedTeam\n{\n    // ...\n    \n    public function validateUser(UserState $user)\n    {\n        $this->assert($user->can_join_teams, 'This user must upgrade before joining a team.');\n    }\n    \n    public function validateTeam(TeamState $team)\n    {\n        $this->assert($team->seats_available > 0, 'This team does not have any more seats available.');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handle method PHP\nDESCRIPTION: The snippet demonstrates the use of the `handle()` method within an event class.  The `handle()` method is where the event's logic, such as updating the database or models, is implemented.  The code also shows the use of state parameters, which are automatically injected when they are type-hinted in the `handle()` method, making the event logic easier to manage.\nSOURCE: https://github.com/hirethunk/verbs/blob/main/docs/events.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nclass CustomerRenewedSubscription extends Event\n{\n    #[StateId(CustomerState::class)]\n    public int $customer_id;\n\n    public function handle(CustomerState $customer)\n    {\n        Subscription::find($customer->active_subscription_id)\n            ->update([\n                'renewed_at' => now(),\n                'expires_at' => now()->addYear(),\n            ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Committing Events PHP\nDESCRIPTION: This code demonstrates the use of `Verbs::commit()` to persist events stored in an in-memory queue to the database. It highlights automatic commits at the end of requests, console commands, and queued jobs, as well as manual commits.  This is critical in tests or when needing transactional guarantees.  Also shown are the special considerations when firing events in database transactions.\nSOURCE: https://github.com/hirethunk/verbs/blob/main/docs/events.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nDB::transaction(function() {\n    // Some non-Verbs Eloquent calls\n    \n    CustomerRegistered::fire(...);\n    CustomerBeganTrial::fire(...);\n    \n    // …some more non-Verbs Eloquent calls\n    \n    Verbs::commit();\n});\n```\n\n----------------------------------------\n\nTITLE: Publishing and Running Verb Migrations (Shell)\nDESCRIPTION: Publishes and executes the database migrations required by the Verbs package. The first command publishes the migration files; the second applies them to the configured database (must have a valid database connection set up in Laravel). No parameters required; must run inside a Laravel project. Output is provisioned tables to support Verbs' state/event tracking.\nSOURCE: https://github.com/hirethunk/verbs/blob/main/docs/quickstart.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan vendor:publish --tag=verbs-migrations\nphp artisan migrate\n```\n\n----------------------------------------\n\nTITLE: Associating Event with State using StateId Attribute (PHP)\nDESCRIPTION: Demonstrates usage of the #[StateId] attribute to associate CustomerBeganTrial event's customer_id with a CustomerState instance. Allows the event to automatically look up and mutate the appropriate state object. Dependencies include the Verbs package and the CustomerState class. Inputs: customer_id. The event can now use state hooks for business rule enforcement.\nSOURCE: https://github.com/hirethunk/verbs/blob/main/docs/quickstart.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nclass CustomerBeganTrial extends Event\n{\n    #[StateId(CustomerState::class)]\n\tpublic int $customer_id;\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing the CustomerState Class (PHP)\nDESCRIPTION: Defines a CustomerState class with a nullable Carbon property for tracking trial start timestamps. Extends the State class from Verbs. Requires the Carbon library for date manipulation. The trial_started_at property is set to null initially and updated by events. Inputs: none at construction. This state is mutated by relevant events, especially for enforcing trial eligibility.\nSOURCE: https://github.com/hirethunk/verbs/blob/main/docs/quickstart.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nclass CustomerState extends State\n{\n\tpublic Carbon|null $trial_started_at = null;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the CustomerBeganTrial Event Class (PHP)\nDESCRIPTION: Defines a custom event called CustomerBeganTrial, storing a customer_id for referencing affected users. Extends the base Event class from Verbs and sets a public integer property. Requires the Verbs package and a valid Event superclass. Inputs: integer customer_id, set during event instantiation or firing. Output: Initialized event instance.\nSOURCE: https://github.com/hirethunk/verbs/blob/main/docs/quickstart.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nclass CustomerBeganTrial extends Event\n{\n    public int $customer_id;\n}\n```\n\n----------------------------------------\n\nTITLE: Firing a Custom Event (PHP)\nDESCRIPTION: Demonstrates how to fire the CustomerBeganTrial event using the static 'fire' method provided by Verbs. Assumes the event class is defined and imported. Input is an integer representing the customer_id. Firing the event will execute its associated validation, mutation, and handling hooks. Returns status or throws on validation failure.\nSOURCE: https://github.com/hirethunk/verbs/blob/main/docs/quickstart.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nCustomerBeganTrial::fire(customer_id: 1);\n```\n\n----------------------------------------\n\nTITLE: Installing Verbs Package using Composer (Shell)\nDESCRIPTION: Installs the Verbs package using Composer, making its features available to your Laravel application. Requires a working installation of Composer, Laravel version 10 or later, and PHP version 8.1 or later. No additional parameters necessary; run the command in your project root. The output is package files installed to the vendor directory.\nSOURCE: https://github.com/hirethunk/verbs/blob/main/docs/quickstart.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require hirethunk/verbs\n```\n\n----------------------------------------\n\nTITLE: Generating a New State with Artisan (Shell)\nDESCRIPTION: Scaffolds a new State class using a Verbs artisan command. The state is used to store and mutate event-related data, supporting event sourcing patterns. Requires the Verbs package and a Laravel application. Input parameter is the desired state class name (CustomerState in this example). Output is a PHP class under app/States.\nSOURCE: https://github.com/hirethunk/verbs/blob/main/docs/quickstart.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan verbs:state CustomerState\n```\n\n----------------------------------------\n\nTITLE: Firing Events and Handling State with ApplicantRejected Event in PHP\nDESCRIPTION: This example demonstrates the event-driven approach using the ApplicantRejected event. It shows how to fire an event in a controller, define the event class with apply and handle methods, and properly update both the application state and database models.\nSOURCE: https://github.com/hirethunk/verbs/blob/main/docs/old/verbs-opinions.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// Fire the event (in your controller or Livewire component, for example)\nApplicantRejected::fire(\n    applicant_id: $request->integer('applicant_id'),\n    rejected_at: now(),\n    reason: $request->input('rejection_reason'),\n);\n```\n\nLANGUAGE: php\nCODE:\n```\nclass ApplicantRejected extends Event\n{\n    public function __construct(\n        public int $applicant_id,\n        public CarbonInterface $rejected_at,\n        public string $reason,\n    ) {}\n\n    // Update State\n    public function apply(ApplicantState $state)\n    {\n        // We'll store the new status on our state so that if future events are\n        // fired for this application, we can validate them using the status\n        // \n        // e.g. a SentOfferLetter event can check the status and fail validation\n        //      if the status is \"rejected\"\n        $state->status = 'rejected';\n    }\n    \n    // Write to Models\n    public function handle()\n    {\n        // Note that it's possible to just set a freeform \"status\" value here, because\n        // in this example, our application UI doesn't care about anything other than\n        // a status string. If the UI needed more granular data (e.g. if it wanted to show\n        // the timestamp in a separate table column, or elsewhere on the page), we could\n        // update this method and replay our events. \n        JobApplication::firstWhere('applicant_id', $this->applicant_id)\n            ->update('status', \"Rejected on {{$this->rejected_at->toFormattedDateString()}}\");\n    }\n}\n```\n\nLANGUAGE: html\nCODE:\n```\n<!-- Now, in your view… -->\n<dt>Status</dt>\n<dd>{{ $application->status }}</dd>\n```\n\n----------------------------------------\n\nTITLE: Using 'unlessReplaying' in Event Handlers PHP\nDESCRIPTION: This code shows how to prevent certain actions from occurring during event replays using `Verbs::unlessReplaying()`. This is useful to prevent actions that should only happen once, such as sending a welcome email. It encapsulates a function that is executed only when not replaying.\nSOURCE: https://github.com/hirethunk/verbs/blob/main/docs/events.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nVerbs::unlessReplaying(function () {\n    // one-time effect\n});\n```\n\n----------------------------------------\n\nTITLE: Event with Named Parameters PHP\nDESCRIPTION: This code shows firing an event with named parameters, demonstrating the use of named parameters to pass data to the event. It also showcases how to declare properties within the event class to receive the parameter values passed during the event firing.\nSOURCE: https://github.com/hirethunk/verbs/blob/main/docs/events.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// Game model\nPlayerAddedToGame::fire(\n    game_id: $this->id,\n    player_id: $player->id,\n);\n\n// PlayerAddedToGame event\n#[StateId(GameState::class)]\npublic string $game_id;\n\n#[StateId(PlayerState::class)]\npublic string $player_id;\n```\n\n----------------------------------------\n\nTITLE: Creating Model Instance From State Data\nDESCRIPTION: This snippet demonstrates how to create a model instance using data from a state. The `FooCreated` event contains the `foo_id` which is used to create a new `Foo` model instance. This allows synchronization between state data and database models.\nSOURCE: https://github.com/hirethunk/verbs/blob/main/docs/states.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\nclass FooCreated\n{\n    #[StateId(FooState::class)]\n    public int $foo_id;\n\n    // etc\n\n    public function handle()\n    {\n        Foo::create(\n            snowflake: $this->foo_id\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Snowflakes for Globally Unique IDs in PHP\nDESCRIPTION: This snippet demonstrates how to use Snowflakes with the glhd/bits package for generating globally unique IDs that aren't coupled to the database. It includes setting up a model to use Snowflakes and generating IDs in events.\nSOURCE: https://github.com/hirethunk/verbs/blob/main/docs/old/verbs-opinions.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass JobApplication extends Model\n{\n    // Using `HasSnowflakes` lets us treat our primary keys as though they were\n    // normal auto-incrementing IDs, but actually have globally-unique IDs that\n    // are not coupled to our database in any way.\n    use HasSnowflakes;\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nclass JobApplicationController\n{\n    public function store(JobApplicationRequest $request) {\n        ApplicationSubmitted::fire(\n            applicant_id: snowflake_id(),\n            // ...\n        );\n    }\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nclass ApplicationSubmitted extends Event\n{\n    public function __construct(\n        public int $applicant_id,\n        // ...\n    ) {}\n\n    public function handle()\n    {\n        // If you use regular auto-incrementing primary keys on your models,\n        // you can't use those IDs in your events because they may be different\n        // if you ever replay events. But because Snowflakes are globally unique\n        // in your app, it's safe to just use them in events and models.\n        JobApplication::updateOrCreate(\n            attributes: ['id' => $this->applicant_id],\n            values: ['status' => 'Application submitted', /* ... */ ],\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Firing Events PHP\nDESCRIPTION: This snippet demonstrates how to fire events using the `::fire()` method of the event class. The `fire()` method triggers the execution of any event hooks, such as `handle()`, that have been defined within the event class. This initiates the event's processing.\nSOURCE: https://github.com/hirethunk/verbs/blob/main/docs/events.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// Game model\nPlayerAddedToGame::fire(\n    game_id: $this->id,\n    player_id: $player->id,\n);\n```\n\n----------------------------------------\n\nTITLE: Generating Event via Artisan Command PHP\nDESCRIPTION: This snippet demonstrates how to generate a new event class using the `php artisan verbs:event` command. The command creates a new event file in the `app/Events` directory with a basic structure, including a `handle()` method for event logic.\nSOURCE: https://github.com/hirethunk/verbs/blob/main/docs/events.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan verbs:event CustomerBeganTrial\n```\n\n----------------------------------------\n\nTITLE: Event Class Structure PHP\nDESCRIPTION: This code provides an example of a basic event class generated by the `verbs:event` artisan command. It includes the necessary `class` declaration, and a `handle()` method, which serves as a placeholder for the event's logic.\nSOURCE: https://github.com/hirethunk/verbs/blob/main/docs/events.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass MyEvent extends Event\n{\n    public function handle()\n    {\n        // what you want to happen\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Immediate Commits in Verbs Tests\nDESCRIPTION: Sets up Verbs to automatically commit events immediately in test environments, eliminating the need to manually call Verbs::commit() after each event.\nSOURCE: https://github.com/hirethunk/verbs/blob/main/docs/testing.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nbeforeEach(function () {\n    Verbs::commitImmediately();\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom State Factory\nDESCRIPTION: Example of creating a custom factory class for a state with additional methods for generating states with specific characteristics.\nSOURCE: https://github.com/hirethunk/verbs/blob/main/docs/testing.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\States\\Factories;\n\nuse Thunk\\Verbs\\StateFactory;\n\nclass ExampleStateFactory extends StateFactory\n{\n    public function confirmed(): static\n    {\n        return $this->state(['confirmed' => true]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing the Initial Event in State Factory\nDESCRIPTION: Demonstrates how to change the default VerbsStateInitialized event to a custom event when creating a state factory by defining an $initial_event property.\nSOURCE: https://github.com/hirethunk/verbs/blob/main/docs/testing.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nclass ExampleStateFactory extends StateFactory\n{\n    protected string $initial_event = ExampleCreated::class;\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting a Custom Factory to a State\nDESCRIPTION: Shows how to link a custom factory to a state by implementing the newFactory() method that returns your custom factory.\nSOURCE: https://github.com/hirethunk/verbs/blob/main/docs/testing.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\npublic bool $confirmed = false;\n\npublic int $example_count = 0;\n\npublic static function newFactory(): ExampleStateFactory\n{\n    return ExampleStateFactory::new(static::class);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Default Factory Values\nDESCRIPTION: Shows how to implement the definition() method to provide default property values for state creation in a custom factory.\nSOURCE: https://github.com/hirethunk/verbs/blob/main/docs/testing.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\npublic function definition(): array\n{\n    return [\n        'example_count' => 4,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Singleton State with Factory\nDESCRIPTION: Example of creating a singleton state using the factory method. Singleton states don't require an ID as they maintain global application state.\nSOURCE: https://github.com/hirethunk/verbs/blob/main/docs/testing.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nChurnState::factory()->create(['churn' => 40]);\n```\n\n----------------------------------------\n\nTITLE: Setting Default State Data\nDESCRIPTION: Example of using the state() method to define default data, which can be overridden by create().\nSOURCE: https://github.com/hirethunk/verbs/blob/main/docs/testing.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nUserState::factory()->state([ /* state data */ ])->create();\n```\n\n----------------------------------------\n\nTITLE: Setting State ID Explicitly\nDESCRIPTION: Shows how to explicitly set a state ID when using the factory method. Cannot be used with count().\nSOURCE: https://github.com/hirethunk/verbs/blob/main/docs/testing.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nUserState::factory()->id(123)->create();\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Factory Method\nDESCRIPTION: Demonstrates how to use a custom factory method that was defined in a custom state factory.\nSOURCE: https://github.com/hirethunk/verbs/blob/main/docs/testing.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nExampleState::factory()->confirmed()->create(); // ->confirmed will be true\n```"
  }
]