[
  {
    "owner": "expo",
    "repo": "expo",
    "content": "TITLE: Playing Sounds with expo-av in React Native\nDESCRIPTION: This code demonstrates how to play audio files in a React Native app using the expo-av library. It loads a sound file, plays it, and properly unloads it when the component unmounts to prevent memory leaks.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/audio.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEffect, useState } from 'react';\nimport { View, StyleSheet, Button } from 'react-native';\nimport { Audio } from 'expo-av';\n\nexport default function App() {\n  const [sound, setSound] = useState();\n\n  async function playSound() {\n    console.log('Loading Sound');\n    /* @info */ const { sound } = await Audio.Sound.createAsync(\n      /* @end */ require('./assets/Hello.mp3')\n    );\n    setSound(sound);\n\n    console.log('Playing Sound');\n    await /* @info */ sound.playAsync(); /* @end */\n  }\n\n  useEffect(() => {\n    return sound\n      ? () => {\n          console.log('Unloading Sound');\n          /* @info Always unload the Sound after using it to prevent memory leaks.*/ sound.unloadAsync(); /* @end */\n        }\n      : undefined;\n  }, [sound]);\n\n  return (\n    <View style={styles.container}>\n      <Button title=\"Play Sound\" onPress={playSound} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    backgroundColor: '#ecf0f1',\n    padding: 10,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Complete Push Notifications Example in React Native with Expo\nDESCRIPTION: A comprehensive example showing how to register for push notifications, handle notification permissions, schedule notifications, and listen for notification events. The code demonstrates setting up notification channels for Android, getting Expo push tokens, and responding to received notifications.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/notifications.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState, useEffect, useRef } from 'react';\nimport { Text, View, Button, Platform } from 'react-native';\nimport * as Device from 'expo-device';\nimport * as Notifications from 'expo-notifications';\nimport Constants from 'expo-constants';\n\nNotifications.setNotificationHandler({\n  handleNotification: async () => ({\n    shouldShowAlert: true,\n    shouldPlaySound: false,\n    shouldSetBadge: false,\n  }),\n});\n\nexport default function App() {\n  const [expoPushToken, setExpoPushToken] = useState('');\n  const [channels, setChannels] = useState<Notifications.NotificationChannel[]>([]);\n  const [notification, setNotification] = useState<Notifications.Notification | undefined>(\n    undefined\n  );\n  const notificationListener = useRef<Notifications.EventSubscription>();\n  const responseListener = useRef<Notifications.EventSubscription>();\n\n  useEffect(() => {\n    registerForPushNotificationsAsync().then(token => token && setExpoPushToken(token));\n\n    if (Platform.OS === 'android') {\n      Notifications.getNotificationChannelsAsync().then(value => setChannels(value ?? []));\n    }\n    notificationListener.current = Notifications.addNotificationReceivedListener(notification => {\n      setNotification(notification);\n    });\n\n    responseListener.current = Notifications.addNotificationResponseReceivedListener(response => {\n      console.log(response);\n    });\n\n    return () => {\n      notificationListener.current &&\n        Notifications.removeNotificationSubscription(notificationListener.current);\n      responseListener.current &&\n        Notifications.removeNotificationSubscription(responseListener.current);\n    };\n  }, []);\n\n  return (\n    <View\n      style={{\n        flex: 1,\n        alignItems: 'center',\n        justifyContent: 'space-around',\n      }}>\n      <Text>Your expo push token: {expoPushToken}</Text>\n      <Text>{`Channels: ${JSON.stringify(\n        channels.map(c => c.id),\n        null,\n        2\n      )}`}</Text>\n      <View style={{ alignItems: 'center', justifyContent: 'center' }}>\n        <Text>Title: {notification && notification.request.content.title} </Text>\n        <Text>Body: {notification && notification.request.content.body}</Text>\n        <Text>Data: {notification && JSON.stringify(notification.request.content.data)}</Text>\n      </View>\n      <Button\n        title=\"Press to schedule a notification\"\n        onPress={async () => {\n          await schedulePushNotification();\n        }}\n      />\n    </View>\n  );\n}\n\nasync function schedulePushNotification() {\n  await Notifications.scheduleNotificationAsync({\n    content: {\n      title: \"You've got mail! 📬\",\n      body: 'Here is the notification body',\n      data: { data: 'goes here', test: { test1: 'more data' } },\n    },\n    trigger: {\n      type: Notifications.SchedulableTriggerInputTypes.TIME_INTERVAL,\n      seconds: 2,\n    },\n  });\n}\n\nasync function registerForPushNotificationsAsync() {\n  let token;\n\n  if (Platform.OS === 'android') {\n    await Notifications.setNotificationChannelAsync('myNotificationChannel', {\n      name: 'A channel is needed for the permissions prompt to appear',\n      importance: Notifications.AndroidImportance.MAX,\n      vibrationPattern: [0, 250, 250, 250],\n      lightColor: '#FF231F7C',\n    });\n  }\n\n  if (Device.isDevice) {\n    const { status: existingStatus } = await Notifications.getPermissionsAsync();\n    let finalStatus = existingStatus;\n    if (existingStatus !== 'granted') {\n      const { status } = await Notifications.requestPermissionsAsync();\n      finalStatus = status;\n    }\n    if (finalStatus !== 'granted') {\n      alert('Failed to get push token for push notification!');\n      return;\n    }\n    // Learn more about projectId:\n    // https://docs.expo.dev/push-notifications/push-notifications-setup/#configure-projectid\n    // EAS projectId is used here.\n    try {\n      const projectId =\n        Constants?.expoConfig?.extra?.eas?.projectId ?? Constants?.easConfig?.projectId;\n      if (!projectId) {\n        throw new Error('Project ID not found');\n      }\n      token = (\n        await Notifications.getExpoPushTokenAsync({\n          projectId,\n        })\n      ).data;\n      console.log(token);\n    } catch (e) {\n      token = `${e}`;\n    }\n  } else {\n    alert('Must use physical device for Push Notifications');\n  }\n\n  return token;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Expo Push Notifications in React Native\nDESCRIPTION: A complete example of how to register for, send, and receive push notifications in a React Native app using Expo. It includes setting up notification handlers, sending notifications, and managing permissions.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/push-notifications/push-notifications-setup.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState, useEffect, useRef } from 'react';\nimport { Text, View, Button, Platform } from 'react-native';\nimport * as Device from 'expo-device';\nimport * as Notifications from 'expo-notifications';\nimport Constants from 'expo-constants';\n\nNotifications.setNotificationHandler({\n  handleNotification: async () => ({\n    shouldShowAlert: true,\n    shouldPlaySound: true,\n    shouldSetBadge: true,\n  }),\n});\n\nasync function sendPushNotification(expoPushToken: string) {\n  const message = {\n    to: expoPushToken,\n    sound: 'default',\n    title: 'Original Title',\n    body: 'And here is the body!',\n    data: { someData: 'goes here' },\n  };\n\n  await fetch('https://exp.host/--/api/v2/push/send', {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Accept-encoding': 'gzip, deflate',\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(message),\n  });\n}\n\nfunction handleRegistrationError(errorMessage: string) {\n  alert(errorMessage);\n  throw new Error(errorMessage);\n}\n\nasync function registerForPushNotificationsAsync() {\n  if (Platform.OS === 'android') {\n    Notifications.setNotificationChannelAsync('default', {\n      name: 'default',\n      importance: Notifications.AndroidImportance.MAX,\n      vibrationPattern: [0, 250, 250, 250],\n      lightColor: '#FF231F7C',\n    });\n  }\n\n  if (Device.isDevice) {\n    const { status: existingStatus } = await Notifications.getPermissionsAsync();\n    let finalStatus = existingStatus;\n    if (existingStatus !== 'granted') {\n      const { status } = await Notifications.requestPermissionsAsync();\n      finalStatus = status;\n    }\n    if (finalStatus !== 'granted') {\n      handleRegistrationError('Permission not granted to get push token for push notification!');\n      return;\n    }\n    const projectId =\n      Constants?.expoConfig?.extra?.eas?.projectId ?? Constants?.easConfig?.projectId;\n    if (!projectId) {\n      handleRegistrationError('Project ID not found');\n    }\n    try {\n      const pushTokenString = (\n        await Notifications.getExpoPushTokenAsync({\n          projectId,\n        })\n      ).data;\n      console.log(pushTokenString);\n      return pushTokenString;\n    } catch (e: unknown) {\n      handleRegistrationError(`${e}`);\n    }\n  } else {\n    handleRegistrationError('Must use physical device for push notifications');\n  }\n}\n\nexport default function App() {\n  const [expoPushToken, setExpoPushToken] = useState('');\n  const [notification, setNotification] = useState<Notifications.Notification | undefined>(\n    undefined\n  );\n  const notificationListener = useRef<Notifications.EventSubscription>();\n  const responseListener = useRef<Notifications.EventSubscription>();\n\n  useEffect(() => {\n    registerForPushNotificationsAsync()\n      .then(token => setExpoPushToken(token ?? ''))\n      .catch((error: any) => setExpoPushToken(`${error}`));\n\n    notificationListener.current = Notifications.addNotificationReceivedListener(notification => {\n      setNotification(notification);\n    });\n\n    responseListener.current = Notifications.addNotificationResponseReceivedListener(response => {\n      console.log(response);\n    });\n\n    return () => {\n      notificationListener.current &&\n        Notifications.removeNotificationSubscription(notificationListener.current);\n      responseListener.current &&\n        Notifications.removeNotificationSubscription(responseListener.current);\n    };\n  }, []);\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'space-around' }}>\n      <Text>Your Expo push token: {expoPushToken}</Text>\n      <View style={{ alignItems: 'center', justifyContent: 'center' }}>\n        <Text>Title: {notification && notification.request.content.title} </Text>\n        <Text>Body: {notification && notification.request.content.body}</Text>\n        <Text>Data: {notification && JSON.stringify(notification.request.content.data)}</Text>\n      </View>\n      <Button\n        title=\"Press to Send Notification\"\n        onPress={async () => {\n          await sendPushNotification(expoPushToken);\n        }}\n      />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring @stripe/stripe-react-native plugin in app.json for Expo\nDESCRIPTION: This snippet shows how to add the @stripe/stripe-react-native config plugin to the app.json file. It allows setting up merchantIdentifier for iOS and enabling Google Pay for Android.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/stripe.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"@stripe/stripe-react-native\",\n        {\n          \"merchantIdentifier\": string | string [],\n          \"enableGooglePay\": boolean\n        }\n      ]\n    ],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Notifications Flow with Expo Notifications in React Native (TSX)\nDESCRIPTION: This example shows a full workflow for enabling push notifications in a React Native app using expo-notifications, including requesting permissions, handling notification listeners, fetching push tokens, and scheduling notifications. Required dependencies include expo-notifications, expo-device, expo-constants, and react-native. Key parameters involve platform detection, notification content, trigger configuration, and notification channel setup for Android. The main input/output involves user device permissions, Expo push token retrieval, and system notifications shown to the user. Limitations: Push notifications require a physical device (not simulator/emulator), and project ID must be configured for Expo push token retrieval.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/notifications.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState, useEffect, useRef } from 'react';\\nimport { Text, View, Button, Platform } from 'react-native';\\nimport * as Device from 'expo-device';\\nimport * as Notifications from 'expo-notifications';\\nimport Constants from 'expo-constants';\\n\\nNotifications.setNotificationHandler({\\n  handleNotification: async () => ({\\n    shouldShowAlert: true,\\n    shouldPlaySound: false,\\n    shouldSetBadge: false,\\n  }),\\n});\\n\\nexport default function App() {\\n  const [expoPushToken, setExpoPushToken] = useState('');\\n  const [channels, setChannels] = useState<Notifications.NotificationChannel[]>([]);\\n  const [notification, setNotification] = useState<Notifications.Notification | undefined>(\\n    undefined\\n  );\\n  const notificationListener = useRef<Notifications.EventSubscription>();\\n  const responseListener = useRef<Notifications.EventSubscription>();\\n\\n  useEffect(() => {\\n    registerForPushNotificationsAsync().then(token => token && setExpoPushToken(token));\\n\\n    if (Platform.OS === 'android') {\\n      Notifications.getNotificationChannelsAsync().then(value => setChannels(value ?? []));\\n    }\\n    notificationListener.current = Notifications.addNotificationReceivedListener(notification => {\\n      setNotification(notification);\\n    });\\n\\n    responseListener.current = Notifications.addNotificationResponseReceivedListener(response => {\\n      console.log(response);\\n    });\\n\\n    return () => {\\n      notificationListener.current &&\\n        Notifications.removeNotificationSubscription(notificationListener.current);\\n      responseListener.current &&\\n        Notifications.removeNotificationSubscription(responseListener.current);\\n    };\\n  }, []);\\n\\n  return (\\n    <View\\n      style={{\\n        flex: 1,\\n        alignItems: 'center',\\n        justifyContent: 'space-around',\\n      }}>\\n      <Text>Your expo push token: {expoPushToken}</Text>\\n      <Text>{`Channels: ${JSON.stringify(\\n        channels.map(c => c.id),\\n        null,\\n        2\\n      )}`}</Text>\\n      <View style={{ alignItems: 'center', justifyContent: 'center' }}>\\n        <Text>Title: {notification && notification.request.content.title} </Text>\\n        <Text>Body: {notification && notification.request.content.body}</Text>\\n        <Text>Data: {notification && JSON.stringify(notification.request.content.data)}</Text>\\n      </View>\\n      <Button\\n        title=\"Press to schedule a notification\"\\n        onPress={async () => {\\n          await schedulePushNotification();\\n        }}\\n      />\\n    </View>\\n  );\\n}\\n\\nasync function schedulePushNotification() {\\n  await Notifications.scheduleNotificationAsync({\\n    content: {\\n      title: \"You've got mail! 📬\",\\n      body: 'Here is the notification body',\\n      data: { data: 'goes here', test: { test1: 'more data' } },\\n    },\\n    trigger: {\\n      type: Notifications.SchedulableTriggerInputTypes.TIME_INTERVAL,\\n      seconds: 2,\\n    },\\n  });\\n}\\n\\nasync function registerForPushNotificationsAsync() {\\n  let token;\\n\\n  if (Platform.OS === 'android') {\\n    await Notifications.setNotificationChannelAsync('myNotificationChannel', {\\n      name: 'A channel is needed for the permissions prompt to appear',\\n      importance: Notifications.AndroidImportance.MAX,\\n      vibrationPattern: [0, 250, 250, 250],\\n      lightColor: '#FF231F7C',\\n    });\\n  }\\n\\n  if (Device.isDevice) {\\n    const { status: existingStatus } = await Notifications.getPermissionsAsync();\\n    let finalStatus = existingStatus;\\n    if (existingStatus !== 'granted') {\\n      const { status } = await Notifications.requestPermissionsAsync();\\n      finalStatus = status;\\n    }\\n    if (finalStatus !== 'granted') {\\n      alert('Failed to get push token for push notification!');\\n      return;\\n    }\\n    // Learn more about projectId:\\n    // https://docs.expo.dev/push-notifications/push-notifications-setup/#configure-projectid\\n    // EAS projectId is used here.\\n    try {\\n      const projectId =\\n        Constants?.expoConfig?.extra?.eas?.projectId ?? Constants?.easConfig?.projectId;\\n      if (!projectId) {\\n        throw new Error('Project ID not found');\\n      }\\n      token = (\\n        await Notifications.getExpoPushTokenAsync({\\n          projectId,\\n        })\\n      ).data;\\n      console.log(token);\\n    } catch (e) {\\n      token = `${e}`;\\n    }\\n  } else {\\n    alert('Must use physical device for Push Notifications');\\n  }\\n\\n  return token;\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Push Notification Navigation with React Navigation\nDESCRIPTION: Configuration of React Navigation to handle push notification deep links using NavigationContainer's linking prop. Includes handling of both initial URLs and subscription to notification events.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/notifications.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react';\nimport { Linking } from 'react-native';\nimport * as Notifications from 'expo-notifications';\nimport { NavigationContainer } from '@react-navigation/native';\n\nexport default function App() {\n  return (\n    <NavigationContainer\n      linking={{\n        config: {\n          // Configuration for linking\n        },\n        async getInitialURL() {\n          const url = await Linking.getInitialURL();\n\n          if (url != null) {\n            return url;\n          }\n\n          const response = await Notifications.getLastNotificationResponseAsync();\n\n          return response?.notification.request.content.data.url;\n        },\n        subscribe(listener) {\n          const onReceiveURL = ({ url }: { url: string }) => listener(url);\n\n          const eventListenerSubscription = Linking.addEventListener('url', onReceiveURL);\n\n          const subscription = Notifications.addNotificationResponseReceivedListener(response => {\n            const url = response.notification.request.content.data.url;\n            listener(url);\n          });\n\n          return () => {\n            eventListenerSubscription.remove();\n            subscription.remove();\n          };\n        },\n      }}>\n      {/* Your app content */}\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Notification Channel for Custom Sounds\nDESCRIPTION: Prepares a notification channel on Android to use a custom sound for notifications. The sound file must be placed in the raw resource directory. The channel and its sound settings need to be defined and used when scheduling notifications on Android 8.0+.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/notifications.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// Prepare the notification channel\nawait Notifications.setNotificationChannelAsync('new_emails', {\n  name: 'E-mail notifications',\n  importance: Notifications.AndroidImportance.HIGH,\n  sound: 'email_sound.wav',\n});\n\n// Eg. schedule the notification\nawait Notifications.scheduleNotificationAsync({\n  content: {\n    title: \"You've got mail! 📬\",\n    body: 'Open the notification to read them all',\n    sound: 'email_sound.wav',\n  },\n  trigger: {\n    type: Notifications.SchedulableTriggerInputTypes.TIME_INTERVAL,\n    seconds: 2,\n    channelId: 'new_emails',\n});\n```\n\n----------------------------------------\n\nTITLE: HTTP Headers for Expo Push API\nDESCRIPTION: Required HTTP headers for making requests to the Expo Push API endpoint.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/push-notifications/sending-notifications.mdx#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhost: exp.host\naccept: application/json\naccept-encoding: gzip, deflate\ncontent-type: application/json\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Context Provider in TypeScript\nDESCRIPTION: Sets up a React Context provider for authentication with signIn, signOut, and session management functionality. Includes a custom hook useSession for accessing authentication state throughout the app.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/advanced/authentication.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useContext, createContext, type PropsWithChildren } from 'react';\nimport { useStorageState } from './useStorageState';\n\nconst AuthContext = createContext<{\n  signIn: () => void;\n  signOut: () => void;\n  session?: string | null;\n  isLoading: boolean;\n}>({ \n  signIn: () => null,\n  signOut: () => null,\n  session: null,\n  isLoading: false,\n});\n\nexport function useSession() {\n  const value = useContext(AuthContext);\n  if (process.env.NODE_ENV !== 'production') {\n    if (!value) {\n      throw new Error('useSession must be wrapped in a <SessionProvider />');\n    }\n  }\n  return value;\n}\n\nexport function SessionProvider({ children }: PropsWithChildren) {\n  const [[isLoading, session], setSession] = useStorageState('session');\n\n  return (\n    <AuthContext.Provider\n      value={{\n        signIn: () => {\n          setSession('xxx');\n        },\n        signOut: () => {\n          setSession(null);\n        },\n        session,\n        isLoading,\n      }}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading Files Resumably with Expo FileSystem (JavaScript)\nDESCRIPTION: Demonstrates how to download a file using `FileSystem.createDownloadResumable`. It shows how to track progress, handle completion or errors, pause the download, save its state using `AsyncStorage` for potential app restarts, and resume the download later from the saved state.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/filesystem.mdx#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst callback = downloadProgress => {\n  const progress = downloadProgress.totalBytesWritten / downloadProgress.totalBytesExpectedToWrite;\n  this.setState({\n    downloadProgress: progress,\n  });\n};\n\nconst downloadResumable = FileSystem.createDownloadResumable(\n  'http://techslides.com/demos/sample-videos/small.mp4',\n  FileSystem.documentDirectory + 'small.mp4',\n  {},\n  callback\n);\n\ntry {\n  const { uri } = await downloadResumable.downloadAsync();\n  console.log('Finished downloading to ', uri);\n} catch (e) {\n  console.error(e);\n}\n\ntry {\n  await downloadResumable.pauseAsync();\n  console.log('Paused download operation, saving for future retrieval');\n  AsyncStorage.setItem('pausedDownload', JSON.stringify(downloadResumable.savable()));\n} catch (e) {\n  console.error(e);\n}\n\ntry {\n  const { uri } = await downloadResumable.resumeAsync();\n  console.log('Finished downloading to ', uri);\n} catch (e) {\n  console.error(e);\n}\n\n//To resume a download across app restarts, assuming the DownloadResumable.savable() object was stored:\nconst downloadSnapshotJson = await AsyncStorage.getItem('pausedDownload');\nconst downloadSnapshot = JSON.parse(downloadSnapshotJson);\nconst downloadResumable = new FileSystem.DownloadResumable(\n  downloadSnapshot.url,\n  downloadSnapshot.fileUri,\n  downloadSnapshot.options,\n  callback,\n  downloadSnapshot.resumeData\n);\n\ntry {\n  const { uri } = await downloadResumable.resumeAsync();\n  console.log('Finished downloading to ', uri);\n} catch (e) {\n  console.error(e);\n}\n```\n\n----------------------------------------\n\nTITLE: Saving and Retrieving Secure Key-Value Pairs with expo-secure-store (React Native, JSX)\nDESCRIPTION: This React Native (JSX/JavaScript) snippet implements an interface for storing and retrieving encrypted key-value pairs using expo-secure-store. It provides functions to save and retrieve values securely, and demonstrates handling user input and basic status display. Dependencies include expo-secure-store, react-native, and React hooks, and inputs are user-provided keys and values; stored values are displayed in an alert. Limitations: value size is limited to 2048 bytes and biometric protection may be unavailable in certain environments.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/securestore.mdx#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\\nimport { Text, View, StyleSheet, TextInput, Button } from 'react-native';\\nimport * as SecureStore from 'expo-secure-store';\\n\\nasync function save(key, value) {\\n  await SecureStore.setItemAsync(key, value);\\n}\\n\\nasync function getValueFor(key) {\\n  let result = await SecureStore.getItemAsync(key);\\n  if (result) {\\n    alert(\\\"\\ud83d\\udd10 Here's your value \\ud83d\\udd10 \\n\\\" + result);\\n  } else {\\n    alert('No values stored under that key.');\\n  }\\n}\\n\\nexport default function App() {\\n  const [key, onChangeKey] = useState('Your key here');\\n  const [value, onChangeValue] = useState('Your value here');\\n\\n  return (\\n    <View style={styles.container}>\\n      <Text style={styles.paragraph}>Save an item, and grab it later!</Text>\\n      {/* @hide Add some TextInput components... */}\\n\\n      <TextInput\\n        style={styles.textInput}\\n        clearTextOnFocus\\n        onChangeText={text => onChangeKey(text)}\\n        value={key}\\n      />\\n      <TextInput\\n        style={styles.textInput}\\n        clearTextOnFocus\\n        onChangeText={text => onChangeValue(text)}\\n        value={value}\\n      />\\n      {/* @end */}\\n      <Button\\n        title=\\\"Save this key/value pair\\\"\\n        onPress={() => {\\n          save(key, value);\\n          onChangeKey('Your key here');\\n          onChangeValue('Your value here');\\n        }}\\n      />\\n      <Text style={styles.paragraph}>\\ud83d\\udd10 Enter your key \\ud83d\\udd10</Text>\\n      <TextInput\\n        style={styles.textInput}\\n        onSubmitEditing={event => {\\n          getValueFor(event.nativeEvent.text);\\n        }}\\n        placeholder=\\\"Enter the key for the value you want to get\\\"\\n      />\\n    </View>\\n  );\\n}\\n\\nconst styles = StyleSheet.create({\\n  container: {\\n    flex: 1,\\n    justifyContent: 'center',\\n    paddingTop: 10,\\n    backgroundColor: '#ecf0f1',\\n    padding: 8,\\n  },\\n  paragraph: {\\n    marginTop: 34,\\n    margin: 24,\\n    fontSize: 18,\\n    fontWeight: 'bold',\\n    textAlign: 'center',\\n  },\\n  textInput: {\\n    height: 35,\\n    borderColor: 'gray',\\n    borderWidth: 0.5,\\n    padding: 4,\\n  },\\n});\n```\n\n----------------------------------------\n\nTITLE: Preloading Videos for Smooth Transitions\nDESCRIPTION: Demonstrates how to preload videos for quicker transitions between subsequent videos, improving user experience. This example shows switching between two preloaded videos.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/video.mdx#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useVideoPlayer, VideoView, VideoSource } from 'expo-video';\nimport { useState, useCallback } from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View } from 'react-native';\n\nconst bigBuckBunnySource: VideoSource =\n  'https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4';\n\nconst elephantsDreamSource: VideoSource =\n  'https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ElephantsDream.mp4';\n\nexport default function PreloadingVideoPlayerScreen() {\n  const player1 = useVideoPlayer(bigBuckBunnySource, player => {\n    player.play();\n  });\n\n  const player2 = useVideoPlayer(elephantsDreamSource, player => {\n    player.currentTime = 20;\n  });\n\n  const [currentPlayer, setCurrentPlayer] = useState(player1);\n\n  const replacePlayer = useCallback(async () => {\n    currentPlayer.pause();\n    if (currentPlayer === player1) {\n      setCurrentPlayer(player2);\n      player1.pause();\n      player2.play();\n    } else {\n      setCurrentPlayer(player1);\n      player2.pause();\n      player1.play();\n    }\n  }, [player1, currentPlayer]);\n\n  return (\n    <View style={styles.contentContainer}>\n      <VideoView player={currentPlayer} style={styles.video} nativeControls={false} />\n      <TouchableOpacity style={styles.button} onPress={replacePlayer}>\n        <Text style={styles.buttonText}>Replace Player</Text>\n      </TouchableOpacity>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  contentContainer: {\n    flex: 1,\n    padding: 10,\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingHorizontal: 50,\n  },\n  button: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    borderRadius: 3,\n    paddingVertical: 8,\n    paddingHorizontal: 12,\n    backgroundColor: '#4630ec',\n  },\n  buttonText: {\n    fontSize: 12,\n    fontWeight: 'bold',\n    color: '#eeeeee',\n    textAlign: 'center',\n  },\n  video: {\n    width: 300,\n    height: 168.75,\n    marginVertical: 20,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Animation with React Native Reanimated\nDESCRIPTION: This example demonstrates how to create a simple width animation using react-native-reanimated. It uses shared values, animated styles, and timing animations to create a box that changes width when a button is pressed.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/reanimated.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Animated, {\n  useSharedValue,\n  withTiming,\n  useAnimatedStyle,\n  Easing,\n} from 'react-native-reanimated';\nimport { View, Button, StyleSheet } from 'react-native';\n\nexport default function AnimatedStyleUpdateExample() {\n  const randomWidth = useSharedValue(10);\n\n  const config = {\n    duration: 500,\n    easing: Easing.bezier(0.5, 0.01, 0, 1),\n  };\n\n  const style = useAnimatedStyle(() => {\n    return {\n      width: withTiming(randomWidth.value, config),\n    };\n  });\n\n  return (\n    <View style={styles.container}>\n      <Animated.View style={[styles.box, style]} />\n      <Button\n        title=\"toggle\"\n        onPress={() => {\n          randomWidth.value = Math.random() * 350;\n        }}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  box: {\n    width: 100,\n    height: 80,\n    backgroundColor: 'black',\n    margin: 30,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing SplashScreen in React Native App\nDESCRIPTION: This snippet demonstrates how to use the SplashScreen module to keep the splash screen visible while loading app resources and then hide it when the app has rendered initial content. It includes pre-loading fonts, making API calls, and handling the app's ready state.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/splash-screen.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useCallback, useEffect, useState } from 'react';\nimport { Text, View } from 'react-native';\nimport Entypo from '@expo/vector-icons/Entypo';\nimport * as SplashScreen from 'expo-splash-screen';\nimport * as Font from 'expo-font';\n\n// Keep the splash screen visible while we fetch resources\nSplashScreen.preventAutoHideAsync();\n\n// Set the animation options. This is optional.\nSplashScreen.setOptions({\n  duration: 1000,\n  fade: true,\n});\n\nexport default function App() {\n  const [appIsReady, setAppIsReady] = useState(false);\n\n  useEffect(() => {\n    async function prepare() {\n      try {\n        // Pre-load fonts, make any API calls you need to do here\n        await Font.loadAsync(Entypo.font);\n        // Artificially delay for two seconds to simulate a slow loading\n        // experience. Remove this if you copy and paste the code!\n        await new Promise(resolve => setTimeout(resolve, 2000));\n      } catch (e) {\n        console.warn(e);\n      } finally {\n        // Tell the application to render\n        setAppIsReady(true);\n      }\n    }\n\n    prepare();\n  }, []);\n\n  const onLayoutRootView = useCallback(() => {\n    if (appIsReady) {\n      // This tells the splash screen to hide immediately! If we call this after\n      // `setAppIsReady`, then we may see a blank screen while the app is\n      // loading its initial state and rendering its first pixels. So instead,\n      // we hide the splash screen once we know the root view has already\n      // performed layout.\n      SplashScreen.hide();\n    }\n  }, [appIsReady]);\n\n  if (!appIsReady) {\n    return null;\n  }\n\n  return (\n    <View\n      style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}\n      onLayout={onLayoutRootView}>\n      <Text>SplashScreen Demo! 👋</Text>\n      <Entypo name=\"rocket\" size={30} />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Apple Authentication in React Native\nDESCRIPTION: Complete React Native example showing how to implement Apple Authentication with a sign-in button and proper error handling. The code handles user cancellation and shows how to request scopes for name and email.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/apple-authentication.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as AppleAuthentication from 'expo-apple-authentication';\nimport { View, StyleSheet } from 'react-native';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <AppleAuthentication.AppleAuthenticationButton\n        buttonType={AppleAuthentication.AppleAuthenticationButtonType.SIGN_IN}\n        buttonStyle={AppleAuthentication.AppleAuthenticationButtonStyle.BLACK}\n        cornerRadius={5}\n        style={styles.button}\n        onPress={async () => {\n          try {\n            const credential = await AppleAuthentication.signInAsync({\n              requestedScopes: [\n                AppleAuthentication.AppleAuthenticationScope.FULL_NAME,\n                AppleAuthentication.AppleAuthenticationScope.EMAIL,\n              ],\n            });\n            // signed in\n          } catch (e) {\n            if (e.code === 'ERR_REQUEST_CANCELED') {\n              // handle that the user canceled the sign-in flow\n            } else {\n              // handle other errors\n            }\n          }\n        }}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  button: {\n    width: 200,\n    height: 44,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Redirect with Authentication Check\nDESCRIPTION: Shows how to implement a conditional redirect that checks authentication status before redirecting unauthenticated users to a login page.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/advanced/redirects.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Redirect } from 'expo-router';\nimport { useState, useEffect } from 'react';\n\nexport default function ProtectedPage() {\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n  useEffect(() => {\n    // Simulate checking authentication status\n    setTimeout(() => setIsAuthenticated(true), 2000);\n  }, []);\n\n  if (!isAuthenticated) {\n    return <Redirect href=\"/login\" />;\n  }\n\n  return <Text>Welcome to the protected page!</Text>;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Location Usage Example with React Native\nDESCRIPTION: A complete React Native component that demonstrates how to request location permissions and get the current position using expo-location. Includes state management, permission handling, and displaying location data.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/location.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { Platform, Text, View, StyleSheet } from 'react-native';\n/* @hide */\nimport * as Device from 'expo-device';\n/* @end */\nimport * as Location from 'expo-location';\n\nexport default function App() {\n  const [location, setLocation] = useState(null);\n  const [errorMsg, setErrorMsg] = useState(null);\n\n  useEffect(() => {\n    (async () => {\n      /* @hide */\n      if (Platform.OS === 'android' && !Device.isDevice) {\n        setErrorMsg(\n          'Oops, this will not work on Snack in an Android Emulator. Try it on your device!'\n        );\n        return;\n      }\n      /* @end */\n      let { status } = await Location.requestForegroundPermissionsAsync();\n      if (status !== 'granted') {\n        setErrorMsg('Permission to access location was denied');\n        return;\n      }\n\n      let location = await Location.getCurrentPositionAsync({});\n      setLocation(location);\n    })();\n  }, []);\n\n  let text = 'Waiting..';\n  if (errorMsg) {\n    text = errorMsg;\n  } else if (location) {\n    text = JSON.stringify(location);\n  }\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.paragraph}>{text}</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 20,\n  },\n  paragraph: {\n    fontSize: 18,\n    textAlign: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Modal-based Authentication Layout\nDESCRIPTION: Creates a layout that displays a login modal for unauthenticated users instead of redirecting, allowing read-only access to the app.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/basics/common-navigation-patterns.mdx#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SafeAreaView, Modal } from 'react-native';\nimport { Stack } from 'expo-router';\n\nexport default function Layout() {\n  const isAuthenticated = /* check for valid auth token / session */\n\n  return (\n    <SafeAreaView>\n      <Stack />\n      <Modal visible={!isAuthenticated}>{/* login UX */}</Modal>\n    </SafeAreaView>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Link with asChild Prop in Expo Router\nDESCRIPTION: Demonstrates how to use the Link component with the asChild prop to wrap a Pressable component, allowing for more customization of the link appearance and behavior.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/basics/navigation.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Pressable, Text } from 'react-native';\nimport { Link } from 'expo-router';\n\nexport default function Page() {\n  return (\n    <Link href=\"/other\" asChild>\n      <Pressable>\n        <Text>Home</Text>\n      </Pressable>\n    </Link>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Writing and Reading Text Files with Expo FileSystem Next (TypeScript)\nDESCRIPTION: Demonstrates creating a text file, writing a string to it, and reading its contents using the new 'File' and 'Paths' classes from 'expo-file-system/next'. This snippet assumes the app has appropriate storage permissions. Key parameters include the file path and string content. Throws errors if the file already exists or permissions are insufficient. Expects a string to be written and later logged from the file.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/filesystem-next.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { File, Paths } from 'expo-file-system/next';\n\ntry {\n  const file = new File(Paths.cache, 'example.txt');\n  file.create(); // can throw an error if the file already exists or no permission to create it\n  file.write('Hello, world!');\n  console.log(file.text()); // Hello, world!\n} catch (error) {\n  console.error(error);\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading Files with Progress Tracking in JavaScript\nDESCRIPTION: This code demonstrates how to download a file with progress tracking, pause/resume functionality, and state persistence across app restarts using FileSystem.createDownloadResumable.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/filesystem.mdx#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst callback = downloadProgress => {\n  const progress = downloadProgress.totalBytesWritten / downloadProgress.totalBytesExpectedToWrite;\n  this.setState({\n    downloadProgress: progress,\n  });\n};\n\nconst downloadResumable = FileSystem.createDownloadResumable(\n  'http://techslides.com/demos/sample-videos/small.mp4',\n  FileSystem.documentDirectory + 'small.mp4',\n  {},\n  callback\n);\n\ntry {\n  const { uri } = await downloadResumable.downloadAsync();\n  console.log('Finished downloading to ', uri);\n} catch (e) {\n  console.error(e);\n}\n\ntry {\n  await downloadResumable.pauseAsync();\n  console.log('Paused download operation, saving for future retrieval');\n  AsyncStorage.setItem('pausedDownload', JSON.stringify(downloadResumable.savable()));\n} catch (e) {\n  console.error(e);\n}\n\ntry {\n  const { uri } = await downloadResumable.resumeAsync();\n  console.log('Finished downloading to ', uri);\n} catch (e) {\n  console.error(e);\n}\n\n//To resume a download across app restarts, assuming the DownloadResumable.savable() object was stored:\nconst downloadSnapshotJson = await AsyncStorage.getItem('pausedDownload');\nconst downloadSnapshot = JSON.parse(downloadSnapshotJson);\nconst downloadResumable = new FileSystem.DownloadResumable(\n  downloadSnapshot.url,\n  downloadSnapshot.fileUri,\n  downloadSnapshot.options,\n  callback,\n  downloadSnapshot.resumeData\n);\n\ntry {\n  const { uri } = await downloadResumable.resumeAsync();\n  console.log('Finished downloading to ', uri);\n} catch (e) {\n  console.error(e);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Background Fetch Task Registration and Management in React Native\nDESCRIPTION: This TypeScript/React Native example demonstrates the full workflow for using `expo-background-fetch`. It shows how to define a background task using `TaskManager.defineTask` in the global scope, register the task with `BackgroundFetch.registerTaskAsync` within a component (including configuration options like `minimumInterval`), unregister it with `unregisterBackgroundFetchAsync`, and check the current status using `BackgroundFetch.getStatusAsync` and `TaskManager.isTaskRegisteredAsync`. The example includes a basic UI to toggle task registration and display status.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/background-fetch.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { StyleSheet, Text, View, Button } from 'react-native';\nimport * as BackgroundFetch from 'expo-background-fetch';\nimport * as TaskManager from 'expo-task-manager';\n\nconst BACKGROUND_FETCH_TASK = 'background-fetch';\n\n// 1. Define the task by providing a name and the function that should be executed\n// Note: This needs to be called in the global scope (e.g outside of your React components)\nTaskManager.defineTask(BACKGROUND_FETCH_TASK, async () => {\n  const now = Date.now();\n\n  console.log(`Got background fetch call at date: ${new Date(now).toISOString()}`);\n\n  // Be sure to return the successful result type!\n  return BackgroundFetch.BackgroundFetchResult.NewData;\n});\n\n// 2. Register the task at some point in your app by providing the same name,\n// and some configuration options for how the background fetch should behave\n// Note: This does NOT need to be in the global scope and CAN be used in your React components!\nasync function registerBackgroundFetchAsync() {\n  return BackgroundFetch.registerTaskAsync(BACKGROUND_FETCH_TASK, {\n    minimumInterval: 60 * 15, // 15 minutes\n    stopOnTerminate: false, // android only,\n    startOnBoot: true, // android only\n  });\n}\n\n// 3. (Optional) Unregister tasks by specifying the task name\n// This will cancel any future background fetch calls that match the given name\n// Note: This does NOT need to be in the global scope and CAN be used in your React components!\nasync function unregisterBackgroundFetchAsync() {\n  return BackgroundFetch.unregisterTaskAsync(BACKGROUND_FETCH_TASK);\n}\n\nexport default function BackgroundFetchScreen() {\n  const [isRegistered, setIsRegistered] = useState(false);\n  const [status, setStatus] = useState(null);\n\n  useEffect(() => {\n    checkStatusAsync();\n  }, []);\n\n  const checkStatusAsync = async () => {\n    const status = await BackgroundFetch.getStatusAsync();\n    const isRegistered = await TaskManager.isTaskRegisteredAsync(BACKGROUND_FETCH_TASK);\n    setStatus(status);\n    setIsRegistered(isRegistered);\n  };\n\n  const toggleFetchTask = async () => {\n    if (isRegistered) {\n      await unregisterBackgroundFetchAsync();\n    } else {\n      await registerBackgroundFetchAsync();\n    }\n\n    checkStatusAsync();\n  };\n\n  return (\n    <View style={styles.screen}>\n      <View style={styles.textContainer}>\n        <Text>\n          Background fetch status:{' '}\n          <Text style={styles.boldText}>\n            {status && BackgroundFetch.BackgroundFetchStatus[status]}\n          </Text>\n        </Text>\n        <Text>\n          Background fetch task name:{' '}\n          <Text style={styles.boldText}>\n            {isRegistered ? BACKGROUND_FETCH_TASK : 'Not registered yet!'}\n          </Text>\n        </Text>\n      </View>\n      <View style={styles.textContainer}></View>\n      <Button\n        title={isRegistered ? 'Unregister BackgroundFetch task' : 'Register BackgroundFetch task'}\n        onPress={toggleFetchTask}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  screen: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  textContainer: {\n    margin: 10,\n  },\n  boldText: {\n    fontWeight: 'bold',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting View Properties\nDESCRIPTION: Example of defining a property setter for view background color in both iOS and Android platforms.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/module-api.mdx#2025-04-22_snippet_20\n\nLANGUAGE: swift\nCODE:\n```\nProp(\"background\") { (view: UIView, color: UIColor) in\n  view.backgroundColor = color\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nProp(\"background\") { view: View, @ColorInt color: Int ->\n  view.setBackgroundColor(color)\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Expo Development Server with Tunnel\nDESCRIPTION: Alternative command to start Expo server using tunnel connection type for cases where LAN connection isn't working, typically on public networks.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/get-started/start-developing.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo start --tunnel\n```\n\n----------------------------------------\n\nTITLE: Basic ImagePicker Implementation in React Native\nDESCRIPTION: Complete example of implementing image picking functionality in a React Native app using expo-image-picker. Shows how to launch the image library, handle the result, and display the selected image.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/imagepicker.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState } from 'react';\nimport { Button, Image, View, StyleSheet } from 'react-native';\nimport * as ImagePicker from 'expo-image-picker';\n\nexport default function ImagePickerExample() {\n  const [image, setImage] = useState<string | null>(null);\n\n  const pickImage = async () => {\n    // No permissions request is necessary for launching the image library\n    let result = await ImagePicker.launchImageLibraryAsync({\n      mediaTypes: ['images', 'videos'],\n      allowsEditing: true,\n      aspect: [4, 3],\n      quality: 1,\n    });\n\n    console.log(result);\n\n    if (!result.canceled) {\n      setImage(result.assets[0].uri);\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      <Button title=\"Pick an image from camera roll\" onPress={pickImage} />\n      {image && <Image source={{ uri: image }} style={styles.image} />}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  image: {\n    width: 200,\n    height: 200,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Apple Sign In Entitlement (iOS .entitlements, XML)\nDESCRIPTION: This XML snippet is added to the ios/[app]/[app].entitlements file to declare the Apple Sign In entitlement for your iOS app. The key com.apple.developer.applesignin with the string 'Default' is necessary for iOS to enable Apple authentication. There are no explicit inputs or outputs; instead, adding this entry ensures the app can request Apple authentication at runtime. Required when configuring manually or outside EAS Build. The entitlements file is necessary for code signing and app capability activation.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/apple-authentication.mdx#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<key>com.apple.developer.applesignin</key>\\n<array>\\n  <string>Default</string>\\n</array>\\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Haptic Feedback in React Native with expo-haptics\nDESCRIPTION: This React Native component demonstrates various haptic feedback methods available in expo-haptics. It includes buttons for selection feedback, notification feedback (success, error, warning), and impact feedback with varying intensities (light, medium, heavy, rigid, soft).\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/haptics.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { StyleSheet, View, Text, Button } from 'react-native';\nimport * as Haptics from 'expo-haptics';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.text}>Haptics.selectionAsync</Text>\n      <View style={styles.buttonContainer}>\n        <Button title=\"Selection\" onPress={() => /* @info */ Haptics.selectionAsync() /* @end */} />\n      </View>\n      <Text style={styles.text}>Haptics.notificationAsync</Text>\n      <View style={styles.buttonContainer}>\n        <Button\n          title=\"Success\"\n          onPress={\n            () =>\n              /* @info */ Haptics.notificationAsync(\n                Haptics.NotificationFeedbackType.Success\n              ) /* @end */\n          }\n        />\n        <Button\n          title=\"Error\"\n          onPress={\n            () =>\n              /* @info */ Haptics.notificationAsync(\n                Haptics.NotificationFeedbackType.Error\n              ) /* @end */\n          }\n        />\n        <Button\n          title=\"Warning\"\n          onPress={\n            () =>\n              /* @info */ Haptics.notificationAsync(\n                Haptics.NotificationFeedbackType.Warning\n              ) /* @end */\n          }\n        />\n      </View>\n      <Text style={styles.text}>Haptics.impactAsync</Text>\n      <View style={styles.buttonContainer}>\n        <Button\n          title=\"Light\"\n          onPress={\n            () => /* @info */ Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light) /* @end */\n          }\n        />\n        <Button\n          title=\"Medium\"\n          onPress={\n            () => /* @info */ Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium) /* @end */\n          }\n        />\n        <Button\n          title=\"Heavy\"\n          onPress={\n            () => /* @info */ Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Heavy) /* @end */\n          }\n        />\n        <Button\n          title=\"Rigid\"\n          onPress={\n            () => /* @info */ Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Rigid) /* @end */\n          }\n        />\n        <Button\n          title=\"Soft\"\n          onPress={\n            () => /* @info */ Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Soft) /* @end */\n          }\n        />\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    paddingHorizontal: 16,\n  },\n  buttonContainer: {\n    flexDirection: 'row',\n    alignItems: 'stretch',\n    marginTop: 10,\n    marginBottom: 30,\n    justifyContent: 'space-between',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Android Package Name in app.json\nDESCRIPTION: This JSON snippet shows how to define the Android package name for your Expo app within the app.json file.  The package name is required for submitting your app to the Google Play Store. It is important to replace `com.yourcompany.yourapp` with your actual package name.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/submit/android.mdx#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"android\": {\n    \"package\": \"com.yourcompany.yourapp\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Expo Build Properties via app.config.js (JavaScript)\nDESCRIPTION: This snippet shows how to configure the expo-build-properties plugin using a JavaScript file (app.config.js). It allows dynamic or programmatic configuration by exporting an object structure matching the expected Expo manifest format. The snippet sets Android SDK versions and the iOS deployment target. Requires installation of the expo-build-properties plugin and compatibility with projects using npx expo prebuild.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/build-properties.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\\n  expo: {\\n    plugins: [\\n      [\\n        'expo-build-properties',\\n        {\\n          android: {\\n            compileSdkVersion: 35,\\n            targetSdkVersion: 35,\\n            buildToolsVersion: '35.0.0',\\n          },\\n          ios: {\\n            deploymentTarget: '15.1',\\n          },\\n        },\\n      ],\\n    ],\\n  },\\n};\n```\n\n----------------------------------------\n\nTITLE: Preloading Videos for Smooth Transitions\nDESCRIPTION: An example of preloading videos to achieve smoother transitions between different video sources. This snippet demonstrates creating multiple VideoPlayer instances and switching between them.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/video.mdx#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useVideoPlayer, VideoView, VideoSource } from 'expo-video';\nimport { useState, useCallback } from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View } from 'react-native';\n\nconst bigBuckBunnySource: VideoSource =\n  'https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4';\n\nconst elephantsDreamSource: VideoSource =\n  'https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ElephantsDream.mp4';\n\nexport default function PreloadingVideoPlayerScreen() {\n  const player1 = useVideoPlayer(bigBuckBunnySource, player => {\n    player.play();\n  });\n\n  const player2 = useVideoPlayer(elephantsDreamSource, player => {\n    player.currentTime = 20;\n  });\n\n  const [currentPlayer, setCurrentPlayer] = useState(player1);\n\n  const replacePlayer = useCallback(async () => {\n    currentPlayer.pause();\n    if (currentPlayer === player1) {\n      setCurrentPlayer(player2);\n      player1.pause();\n      player2.play();\n    } else {\n      setCurrentPlayer(player1);\n      player2.pause();\n      player1.play();\n    }\n  }, [player1, currentPlayer]);\n\n  return (\n    <View style={styles.contentContainer}>\n      <VideoView player={currentPlayer} style={styles.video} nativeControls={false} />\n      <TouchableOpacity style={styles.button} onPress={replacePlayer}>\n        <Text style={styles.buttonText}>Replace Player</Text>\n      </TouchableOpacity>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  contentContainer: {\n    flex: 1,\n    padding: 10,\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingHorizontal: 50,\n  },\n  button: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    borderRadius: 3,\n    paddingVertical: 8,\n    paddingHorizontal: 12,\n    backgroundColor: '#4630ec',\n  },\n  buttonText: {\n    fontSize: 12,\n    fontWeight: 'bold',\n    color: '#eeeeee',\n    textAlign: 'center',\n  },\n  video: {\n    width: 300,\n    height: 168.75,\n    marginVertical: 20,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Haptics Feedback in React Native\nDESCRIPTION: A complete example demonstrating how to use the expo-haptics library to create different types of haptic feedback in a React Native application. The code shows various methods including selectionAsync, notificationAsync with different feedback types, and impactAsync with varying intensity levels.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/haptics.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { StyleSheet, View, Text, Button } from 'react-native';\nimport * as Haptics from 'expo-haptics';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.text}>Haptics.selectionAsync</Text>\n      <View style={styles.buttonContainer}>\n        <Button title=\"Selection\" onPress={() => Haptics.selectionAsync()} />\n      </View>\n      <Text style={styles.text}>Haptics.notificationAsync</Text>\n      <View style={styles.buttonContainer}>\n        <Button\n          title=\"Success\"\n          onPress={\n            () =>\n              Haptics.notificationAsync(\n                Haptics.NotificationFeedbackType.Success\n              )\n          }\n        />\n        <Button\n          title=\"Error\"\n          onPress={\n            () =>\n              Haptics.notificationAsync(\n                Haptics.NotificationFeedbackType.Error\n              )\n          }\n        />\n        <Button\n          title=\"Warning\"\n          onPress={\n            () =>\n              Haptics.notificationAsync(\n                Haptics.NotificationFeedbackType.Warning\n              )\n          }\n        />\n      </View>\n      <Text style={styles.text}>Haptics.impactAsync</Text>\n      <View style={styles.buttonContainer}>\n        <Button\n          title=\"Light\"\n          onPress={\n            () => Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light)\n          }\n        />\n        <Button\n          title=\"Medium\"\n          onPress={\n            () => Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium)\n          }\n        />\n        <Button\n          title=\"Heavy\"\n          onPress={\n            () => Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Heavy)\n          }\n        />\n        <Button\n          title=\"Rigid\"\n          onPress={\n            () => Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Rigid)\n          }\n        />\n        <Button\n          title=\"Soft\"\n          onPress={\n            () => Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Soft)\n          }\n        />\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    paddingHorizontal: 16,\n  },\n  buttonContainer: {\n    flexDirection: 'row',\n    alignItems: 'stretch',\n    marginTop: 10,\n    marginBottom: 30,\n    justifyContent: 'space-between',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Native Event Emitters in Swift and Kotlin\nDESCRIPTION: Shows how to send events from native modules to JavaScript using the Events component and sendEvent method. The example implements a clipboard module that notifies JavaScript when clipboard content changes.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/module-api.mdx#2025-04-22_snippet_30\n\nLANGUAGE: swift\nCODE:\n```\nlet CLIPBOARD_CHANGED_EVENT_NAME = \"onClipboardChanged\"\n\npublic class ClipboardModule: Module {\n  public func definition() -> ModuleDefinition {\n    Events(CLIPBOARD_CHANGED_EVENT_NAME)\n\n    OnStartObserving {\n      NotificationCenter.default.addObserver(\n        self,\n        selector: #selector(self.clipboardChangedListener),\n        name: UIPasteboard.changedNotification,\n        object: nil\n      )\n    }\n\n    OnStopObserving {\n      NotificationCenter.default.removeObserver(\n        self,\n        name: UIPasteboard.changedNotification,\n        object: nil\n      )\n    }\n  }\n\n  @objc\n  private func clipboardChangedListener() {\n    sendEvent(CLIPBOARD_CHANGED_EVENT_NAME, [\n      \"contentTypes\": availableContentTypes()\n    ])\n  }\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nconst val CLIPBOARD_CHANGED_EVENT_NAME = \"onClipboardChanged\"\n\nclass ClipboardModule : Module() {\n  override fun definition() = ModuleDefinition {\n    Events(CLIPBOARD_CHANGED_EVENT_NAME)\n\n    OnStartObserving {\n      clipboardManager?.addPrimaryClipChangedListener(listener)\n    }\n\n    OnStopObserving {\n      clipboardManager?.removePrimaryClipChangedListener(listener)\n    }\n  }\n\n  private val clipboardManager: ClipboardManager?\n    get() = appContext.reactContext?.getSystemService(Context.CLIPBOARD_SERVICE) as? ClipboardManager\n\n  private val listener = ClipboardManager.OnPrimaryClipChangedListener {\n    clipboardManager?.primaryClipDescription?.let { clip ->\n      this@ClipboardModule.sendEvent(\n        CLIPBOARD_CHANGED_EVENT_NAME,\n        bundleOf(\n          \"contentTypes\" to availableContentTypes(clip)\n        )\n      )\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Location Tracking in Expo React Native\nDESCRIPTION: This code snippet shows a complete example of implementing location tracking in an Expo React Native application. It demonstrates requesting permissions, getting the current location, and displaying the result or error message.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/location.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { Platform, Text, View, StyleSheet } from 'react-native';\nimport * as Device from 'expo-device';\nimport * as Location from 'expo-location';\n\nexport default function App() {\n  const [location, setLocation] = useState<Location.LocationObject | null>(null);\n  const [errorMsg, setErrorMsg] = useState<string | null>(null);\n\n  useEffect(() => {\n    async function getCurrentLocation() {\n      if (Platform.OS === 'android' && !Device.isDevice) {\n        setErrorMsg(\n          'Oops, this will not work on Snack in an Android Emulator. Try it on your device!'\n        );\n        return;\n      }\n      let { status } = await Location.requestForegroundPermissionsAsync();\n      if (status !== 'granted') {\n        setErrorMsg('Permission to access location was denied');\n        return;\n      }\n\n      let location = await Location.getCurrentPositionAsync({});\n      setLocation(location);\n    }\n\n    getCurrentLocation();\n  }, []);\n\n  let text = 'Waiting...';\n  if (errorMsg) {\n    text = errorMsg;\n  } else if (location) {\n    text = JSON.stringify(location);\n  }\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.paragraph}>{text}</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 20,\n  },\n  paragraph: {\n    fontSize: 18,\n    textAlign: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Sending Basic Push Notification with cURL\nDESCRIPTION: Example of sending a \"hello world\" push notification using cURL to the Expo Push API. The request sends a simple notification with a title and body to a specified push token.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/push-notifications/sending-notifications.mdx#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncurl -H \"Content-Type: application/json\" -X POST \"https://exp.host/--/api/v2/push/send\" -d '{\n  \"to\": \"ExponentPushToken[xxxxxxxxxxxxxxxxxxxxxx]\",\n  \"title\":\"hello\",\n  \"body\": \"world\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Setting Up Notification Event Listeners in React Native\nDESCRIPTION: This code snippet demonstrates how to set up notification event listeners using useEffect in a React Native component. It registers for push notifications, sets up listeners for received notifications and user interactions, and handles cleanup.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/push-notifications/receiving-notifications.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nuseEffect(() => {\n  registerForPushNotificationsAsync().then(token => setExpoPushToken(token));\n\n  notificationListener.current = Notifications.addNotificationReceivedListener(notification => {\n    setNotification(notification);\n  });\n\n  responseListener.current = Notifications.addNotificationResponseReceivedListener(response => {\n    console.log(response);\n  });\n\n  return () => {\n    Notifications.removeNotificationSubscription(notificationListener.current);\n    Notifications.removeNotificationSubscription(responseListener.current);\n  };\n}, []);\n```\n\n----------------------------------------\n\nTITLE: Configuring Expo Build Properties via app.json (JSON)\nDESCRIPTION: This snippet demonstrates how to configure the expo-build-properties plugin within the app.json file. It specifies Android build settings such as compileSdkVersion, targetSdkVersion, and buildToolsVersion, as well as the iOS deploymentTarget. This approach is suitable for projects that use static configuration files, and requires the expo-build-properties plugin and Expo prebuild workflow. All key parameters are nested under the plugins array, and they determine how native directories are generated during build.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/build-properties.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"expo\": {\\n    \"plugins\": [\\n      [\\n        \"expo-build-properties\",\\n        {\\n          \"android\": {\\n            \"compileSdkVersion\": 35,\\n            \"targetSdkVersion\": 35,\\n            \"buildToolsVersion\": \"35.0.0\"\\n          },\\n          \"ios\": {\\n            \"deploymentTarget\": \"15.1\"\\n          }\\n        }\\n      ]\\n    ]\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: iOS Custom Notification Sound Implementation\nDESCRIPTION: TypeScript implementation for scheduling notifications with custom sounds on iOS.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/notifications.mdx#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nawait Notifications.scheduleNotificationAsync({\n  content: {\n    title: \"You've got mail! 📬\",\n    body: 'Open the notification to read them all',\n    sound: 'notification.wav',\n  },\n  trigger: {\n    // ...\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Adding NSFaceIDUsageDescription in Info.plist (XML)\nDESCRIPTION: This XML snippet demonstrates adding the NSCameraUsageDescription key-value pair to Info.plist, which is required by iOS applications that use biometric features via expo-secure-store. The key specifies the message shown to users when requesting access to the camera. Add this to your iOS project’s Info.plist to satisfy App Store and OS requirements.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/securestore.mdx#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<key>NSCameraUsageDescription</key>\\n<string>Allow $(PRODUCT_NAME) to use the camera</string>\n```\n\n----------------------------------------\n\nTITLE: Presenting a Local Notification with Expo Notifications (TypeScript)\nDESCRIPTION: This snippet demonstrates how to display a local (in-app) notification to the user using expo-notifications in TypeScript. It shows setting up a basic notification handler to control alert behavior and then immediately schedules a notification with specified title and body. Dependencies: expo-notifications; expected inputs/outputs: no direct parameters, outputs a system notification popup. Trigger is null, making the notification appear instantly. No network request or push token required for this approach.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/notifications.mdx#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport * as Notifications from 'expo-notifications';\\n\\n// First, set the handler that will cause the notification\\n// to show the alert\\nNotifications.setNotificationHandler({\\n  handleNotification: async () => ({\\n    shouldShowAlert: true,\\n    shouldPlaySound: false,\\n    shouldSetBadge: false,\\n  }),\\n});\\n\\n// Second, call scheduleNotificationAsync()\\nNotifications.scheduleNotificationAsync({\\n  content: {\\n    title: 'Look at that notification',\\n    body: \"I'm so proud of myself!\",\\n  },\\n  trigger: null,\\n});\\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Shared Tab Layout\nDESCRIPTION: Creates a tab layout that enables route sharing between multiple tabs. This setup allows for shared screens accessible from different tabs while maintaining distinct navigation stacks.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/basics/common-navigation-patterns.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Tabs } from 'expo-router';\n\nexport default function TabLayout() {\n  return (\n    <Tabs>\n      <Tabs.Screen name=\"(feed)\" options={{ title: 'Feed' }} />\n      <Tabs.Screen name=\"(search)\" options={{ title: 'Search' }} />\n    </Tabs>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using useRouter for Native Navigation in Expo Router\nDESCRIPTION: Demonstrates how to use the useRouter hook to navigate between pages in an Expo Router app. The example shows navigation to an 'about' page using a button press.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/basics/navigation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useRouter } from 'expo-router';\n\nexport default function Home() {\n  const router = useRouter();\n\n  return <Button onPress={() => router.navigate('/about')}>Go to About</Button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Haptic Feedback in React Native\nDESCRIPTION: A complete example showing implementation of various haptic feedback types including selection, notification, and impact feedback. The component demonstrates different haptic patterns and their usage with buttons.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/haptics.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { StyleSheet, View, Text, Button } from 'react-native';\nimport * as Haptics from 'expo-haptics';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.text}>Haptics.selectionAsync</Text>\n      <View style={styles.buttonContainer}>\n        <Button title=\"Selection\" onPress={() => Haptics.selectionAsync()} />\n      </View>\n      <Text style={styles.text}>Haptics.notificationAsync</Text>\n      <View style={styles.buttonContainer}>\n        <Button\n          title=\"Success\"\n          onPress={\n            () =>\n              Haptics.notificationAsync(\n                Haptics.NotificationFeedbackType.Success\n              )\n          }\n        />\n        <Button\n          title=\"Error\"\n          onPress={\n            () =>\n              Haptics.notificationAsync(\n                Haptics.NotificationFeedbackType.Error\n              )\n          }\n        />\n        <Button\n          title=\"Warning\"\n          onPress={\n            () =>\n              Haptics.notificationAsync(\n                Haptics.NotificationFeedbackType.Warning\n              )\n          }\n        />\n      </View>\n      <Text style={styles.text}>Haptics.impactAsync</Text>\n      <View style={styles.buttonContainer}>\n        <Button\n          title=\"Light\"\n          onPress={\n            () => Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light)\n          }\n        />\n        <Button\n          title=\"Medium\"\n          onPress={\n            () => Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium)\n          }\n        />\n        <Button\n          title=\"Heavy\"\n          onPress={\n            () => Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Heavy)\n          }\n        />\n        <Button\n          title=\"Rigid\"\n          onPress={\n            () => Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Rigid)\n          }\n        />\n        <Button\n          title=\"Soft\"\n          onPress={\n            () => Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Soft)\n          }\n        />\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    paddingHorizontal: 16,\n  },\n  buttonContainer: {\n    flexDirection: 'row',\n    alignItems: 'stretch',\n    marginTop: 10,\n    marginBottom: 30,\n    justifyContent: 'space-between',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Clipboard in React Native with Expo\nDESCRIPTION: This snippet demonstrates how to use the expo-clipboard module in a React Native application. It includes functions to copy text to the clipboard and fetch text from the clipboard, as well as a simple UI to interact with these functions.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/clipboard.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { View, Text, Button, StyleSheet } from 'react-native';\nimport * as Clipboard from 'expo-clipboard';\n\nexport default function App() {\n  const [copiedText, setCopiedText] = useState('');\n\n  const copyToClipboard = async () => {\n    await Clipboard.setStringAsync('hello world');\n  };\n\n  const fetchCopiedText = async () => {\n    const text = await Clipboard.getStringAsync();\n    setCopiedText(text);\n  };\n\n  return (\n    <View style={styles.container}>\n      <Button title=\"Click here to copy to Clipboard\" onPress={copyToClipboard} />\n      <Button title=\"View copied text\" onPress={fetchCopiedText} />\n      <Text style={styles.copiedText}>{copiedText}</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  copiedText: {\n    marginTop: 10,\n    color: 'red',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Storage State Management Hook for Authentication\nDESCRIPTION: Implements a custom hook for managing authentication state storage, supporting both web localStorage and native secure storage via expo-secure-store.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/advanced/authentication.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport  { useEffect, useCallback, useReducer } from 'react';\nimport * as SecureStore from 'expo-secure-store';\nimport { Platform } from 'react-native';\n\ntype UseStateHook<T> = [[boolean, T | null], (value: T | null) => void];\n\nfunction useAsyncState<T>(\n  initialValue: [boolean, T | null] = [true, null],\n): UseStateHook<T> {\n  return useReducer(\n    (state: [boolean, T | null], action: T | null = null): [boolean, T | null] => [false, action],\n    initialValue\n  ) as UseStateHook<T>;\n}\n\nexport async function setStorageItemAsync(key: string, value: string | null) {\n  if (Platform.OS === 'web') {\n    try {\n      if (value === null) {\n        localStorage.removeItem(key);\n      } else {\n        localStorage.setItem(key, value);\n      }\n    } catch (e) {\n      console.error('Local storage is unavailable:', e);\n    }\n  } else {\n    if (value == null) {\n      await SecureStore.deleteItemAsync(key);\n    } else {\n      await SecureStore.setItemAsync(key, value);\n    }\n  }\n}\n\nexport function useStorageState(key: string): UseStateHook<string> {\n  const [state, setState] = useAsyncState<string>();\n\n  useEffect(() => {\n    if (Platform.OS === 'web') {\n      try {\n        if (typeof localStorage !== 'undefined') {\n          setState(localStorage.getItem(key));\n        }\n      } catch (e) {\n        console.error('Local storage is unavailable:', e);\n      }\n    } else {\n      SecureStore.getItemAsync(key).then(value => {\n        setState(value);\n      });\n    }\n  }, [key]);\n\n  const setValue = useCallback(\n    (value: string | null) => {\n      setState(value);\n      setStorageItemAsync(key, value);\n    },\n    [key]\n  );\n\n  return [state, setValue];\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Network State Updates with NetInfo (JavaScript)\nDESCRIPTION: This code snippet shows how to subscribe to ongoing network state changes using NetInfo.addEventListener. The callback will be called with an updated state object each time the network changes. The subscription returns an unsubscribe function which should be called to clean up listeners, preventing memory leaks. Dependencies are the same as above, and state carries properties like type and isConnected. Intended for scenarios where the app needs to respond to connectivity changes in real time.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/netinfo.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst unsubscribe = NetInfo.addEventListener(state => {\n  console.log('Connection type', state.type);\n  console.log('Is connected?', state.isConnected);\n});\n\n// To unsubscribe to these update, just use:\nunsubscribe();\n```\n\n----------------------------------------\n\nTITLE: Fetching Albums and Displaying Assets with expo-media-library\nDESCRIPTION: This React Native component demonstrates how to request media library permissions, fetch albums with their assets, and display them in a scrollable view. It shows the complete workflow of accessing device media using expo-media-library.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/media-library.mdx#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { Button, Text, SafeAreaView, ScrollView, StyleSheet, Image, View, Platform } from 'react-native';\nimport * as MediaLibrary from 'expo-media-library';\n\nexport default function App() {\n  const [albums, setAlbums] = useState(null);\n  const [permissionResponse, requestPermission] = MediaLibrary.usePermissions();\n\n  async function getAlbums() {\n    if (permissionResponse.status !== 'granted') {\n      await requestPermission();\n    }\n    const fetchedAlbums = await MediaLibrary.getAlbumsAsync({\n      includeSmartAlbums: true,\n    });\n    setAlbums(fetchedAlbums);\n  }\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <Button onPress={getAlbums} title=\"Get albums\" />\n      <ScrollView>\n        {albums && albums.map((album) => <AlbumEntry album={album} />)}\n      </ScrollView>\n    </SafeAreaView>\n  );\n}\n\nfunction AlbumEntry({ album }) {\n  const [assets, setAssets] = useState([]);\n\n  useEffect(() => {\n    async function getAlbumAssets() {\n      const albumAssets = await MediaLibrary.getAssetsAsync({ album });\n      setAssets(albumAssets.assets);\n    }\n    getAlbumAssets();\n  }, [album]);\n\n  return (\n    <View key={album.id} style={styles.albumContainer}>\n      <Text>\n        {album.title} - {album.assetCount ?? 'no'} assets\n      </Text>\n      <View style={styles.albumAssetsContainer}>\n        {assets && assets.map((asset) => (\n          <Image source={{ uri: asset.uri }} width={50} height={50} />\n        ))}\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    gap: 8,\n    justifyContent: 'center',\n    ...Platform.select({\n      android: {\n        paddingTop: 40,\n      },\n    }),\n  },\n  albumContainer: {\n    paddingHorizontal: 20,\n    marginBottom: 12,\n    gap: 4,\n  },\n  albumAssetsContainer: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring NSUserTrackingUsageDescription in Info.plist (XML)\nDESCRIPTION: Demonstrates how to insert the NSUserTrackingUsageDescription key and a custom description string in the iOS Info.plist file. This setting is mandatory for iOS 14 and higher to inform users why the app requests permission to track and is required to pass Apple's app review for tracking capabilities. The snippet should be added to ios/[app]/Info.plist in a native or bare workflow project.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/tracking-transparency.mdx#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<key>NSUserTrackingUsageDescription</key>\\n<string>Your custom usage description string here.</string>\\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Gyroscope Sensor with React Native and Expo\nDESCRIPTION: A complete React Native component demonstrating gyroscope sensor implementation using expo-sensors. The example shows how to subscribe to gyroscope updates, control update intervals, and display x, y, z rotation values with UI controls for toggling speed and subscription.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/gyroscope.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View } from 'react-native';\nimport { Gyroscope } from 'expo-sensors';\n\nexport default function App() {\n  const [{ x, y, z }, setData] = useState({\n    x: 0,\n    y: 0,\n    z: 0,\n  });\n  const [subscription, setSubscription] = useState(null);\n\n  const _slow = () => Gyroscope.setUpdateInterval(1000);\n  const _fast = () => Gyroscope.setUpdateInterval(16);\n\n  const _subscribe = () => {\n    setSubscription(\n      Gyroscope.addListener(gyroscopeData => {\n        setData(gyroscopeData);\n      })\n    );\n  };\n\n  const _unsubscribe = () => {\n    subscription && subscription.remove();\n    setSubscription(null);\n  };\n\n  useEffect(() => {\n    _subscribe();\n    return () => _unsubscribe();\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.text}>Gyroscope:</Text>\n      <Text style={styles.text}>x: {x}</Text>\n      <Text style={styles.text}>y: {y}</Text>\n      <Text style={styles.text}>z: {z}</Text>\n      <View style={styles.buttonContainer}>\n        <TouchableOpacity onPress={subscription ? _unsubscribe : _subscribe} style={styles.button}>\n          <Text>{subscription ? 'On' : 'Off'}</Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={_slow} style={[styles.button, styles.middleButton]}>\n          <Text>Slow</Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={_fast} style={styles.button}>\n          <Text>Fast</Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    paddingHorizontal: 10,\n  },\n  text: {\n    textAlign: 'center',\n  },\n  buttonContainer: {\n    flexDirection: 'row',\n    alignItems: 'stretch',\n    marginTop: 15,\n  },\n  button: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#eee',\n    padding: 10,\n  },\n  middleButton: {\n    borderLeftWidth: 1,\n    borderRightWidth: 1,\n    borderColor: '#ccc',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Performing Basic CRUD Operations with expo-sqlite\nDESCRIPTION: Demonstrates basic Create, Read, Update, and Delete (CRUD) operations using expo-sqlite. It includes examples of executing bulk queries, inserting data, updating records, deleting records, and retrieving data from the database.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/sqlite.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst db = await SQLite.openDatabaseAsync('databaseName');\n\n// `execAsync()` is useful for bulk queries when you want to execute altogether.\n// Note that `execAsync()` does not escape parameters and may lead to SQL injection.\nawait db.execAsync(`\nPRAGMA journal_mode = WAL;\nCREATE TABLE IF NOT EXISTS test (id INTEGER PRIMARY KEY NOT NULL, value TEXT NOT NULL, intValue INTEGER);\nINSERT INTO test (value, intValue) VALUES ('test1', 123);\nINSERT INTO test (value, intValue) VALUES ('test2', 456);\nINSERT INTO test (value, intValue) VALUES ('test3', 789);\n`);\n\n// `runAsync()` is useful when you want to execute some write operations.\nconst result = await db.runAsync('INSERT INTO test (value, intValue) VALUES (?, ?)', 'aaa', 100);\nconsole.log(result.lastInsertRowId, result.changes);\nawait db.runAsync('UPDATE test SET intValue = ? WHERE value = ?', 999, 'aaa'); // Binding unnamed parameters from variadic arguments\nawait db.runAsync('UPDATE test SET intValue = ? WHERE value = ?', [999, 'aaa']); // Binding unnamed parameters from array\nawait db.runAsync('DELETE FROM test WHERE value = $value', { $value: 'aaa' }); // Binding named parameters from object\n\n// `getFirstAsync()` is useful when you want to get a single row from the database.\nconst firstRow = await db.getFirstAsync('SELECT * FROM test');\nconsole.log(firstRow.id, firstRow.value, firstRow.intValue);\n\n// `getAllAsync()` is useful when you want to get all results as an array of objects.\nconst allRows = await db.getAllAsync('SELECT * FROM test');\nfor (const row of allRows) {\n  console.log(row.id, row.value, row.intValue);\n}\n\n// `getEachAsync()` is useful when you want to iterate SQLite query cursor.\nfor await (const row of db.getEachAsync('SELECT * FROM test')) {\n  console.log(row.id, row.value, row.intValue);\n}\n```\n\n----------------------------------------\n\nTITLE: Background Update Task Setup (TypeScript)\nDESCRIPTION: Sets up a background task to check for updates, download them if available, and reload the app. This ensures users have the latest version, even if they haven't opened the app recently. It utilizes expo-task-manager, expo-background-task, and expo-updates.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/download-updates.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as TaskManager from 'expo-task-manager';\nimport * as BackgroundTask from 'expo-background-task';\nimport * as Updates from 'expo-updates';\n\nconst BACKGROUND_TASK_NAME = 'task-run-expo-update';\n\nexport const setupBackgroundUpdates = async () => {\n  TaskManager.defineTask(BACKGROUND_TASK_NAME, async () => {\n    const update = await Updates.checkForUpdateAsync();\n    if (update.isAvailable) {\n      await Updates.fetchUpdateAsync();\n      await Updates.reloadAsync();\n    }\n    return Promise.resolve();\n  });\n\n  const isRegistered = await TaskManager.isTaskRegisteredAsync(BACKGROUND_TASK_NAME);\n  if (!isRegistered) {\n    await BackgroundTask.registerTaskAsync(BACKGROUND_TASK_NAME, {\n      minimumInterval: 60 * 24,\n    });\n  }\n};\n\nsetupBackgroundUpdates();\n```\n\n----------------------------------------\n\nTITLE: Using SQLite Context with Existing Database in TSX\nDESCRIPTION: This example demonstrates how to utilize an existing SQLite database in an Expo application using the SQLiteProvider. By referencing an existing .db file via assetSource, the code sets up the context for database operations within a component tree. Dependencies include the SQLite package and React Native component libraries. The primary input is an asset file containing the database, and integration into components requires minimal modification.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/sqlite.mdx#2025-04-22_snippet_8\n\nLANGUAGE: TSX\nCODE:\n```\nimport { SQLiteProvider, useSQLiteContext } from 'expo-sqlite';\nimport { View, Text, StyleSheet } from 'react-native';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <SQLiteProvider databaseName=\"test.db\" assetSource={{ assetId: require('./assets/test.db') }}>\n        <Header />\n        <Content />\n      </SQLiteProvider>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Link Component for Navigation in Expo Router\nDESCRIPTION: Shows how to use the Link component from expo-router to create a clickable link to the 'about' page. This example demonstrates the basic usage of Link within a React Native View.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/basics/navigation.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { View } from 'react-native';\nimport { Link } from 'expo-router';\n\nexport default function Page() {\n  return (\n    <View>\n      <Link href=\"/about\">About</Link>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Sign In Screen Implementation\nDESCRIPTION: Creates a sign-in screen component that handles user authentication and navigation after successful sign-in.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/advanced/authentication.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { router } from 'expo-router';\nimport { Text, View } from 'react-native';\n\nimport { useSession } from '../ctx';\n\nexport default function SignIn() {\n  const { signIn } = useSession();\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text\n        onPress={() => {\n          signIn();\n          router.replace('/');\n        }}>\n        Sign In\n      </Text>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Minimal Example Using useSafeAreaInsets in Expo TypeScript\nDESCRIPTION: This is a complete, minimal working example that demonstrates the use of useSafeAreaInsets hook to apply top padding to a view, wrapped in a SafeAreaProvider.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/user-interface/safe-areas.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Text, View } from 'react-native';\nimport { SafeAreaProvider, useSafeAreaInsets } from 'react-native-safe-area-context';\n\nfunction HomeScreen() {\n  const insets = useSafeAreaInsets();\n  return (\n    <View style={{ flex: 1, paddingTop: insets.top }}>\n      <Text style={{ fontSize: 28 }}>Content is in safe area.</Text>\n    </View>\n  );\n}\n\nexport default function App() {\n  return (\n    <SafeAreaProvider>\n      <HomeScreen />\n    </SafeAreaProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Package Name in app.json\nDESCRIPTION: This snippet demonstrates how to include the Android package name in the app.json file, which is required for submitting to the Google Play Store.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/deploy/submit-to-app-stores.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"android\": {\n    \"package\": \"com.yourcompany.yourapp\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extended Build Profile Configuration\nDESCRIPTION: Example showing how to extend build profiles to share configuration between different build types.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/build/eas-json.mdx#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"production\": {\n      \"node\": \"18.18.0\"\n    },\n    \"preview\": {\n      \"extends\": \"production\",\n      \"distribution\": \"internal\"\n    },\n    \"development\": {\n      \"extends\": \"production\",\n      \"developmentClient\": true,\n      \"distribution\": \"internal\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Scheme in Expo App Configuration\nDESCRIPTION: This snippet shows how to add a custom scheme to the app.json configuration file for an Expo app. The 'scheme' property allows you to define a custom URL scheme for deep linking.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/linking/into-your-app.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"scheme\": \"myapp\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SQLite Context Hook in React Native\nDESCRIPTION: Demonstrates how to use SQLiteProvider and useSQLiteContext hook to manage SQLite database operations in a React Native app. Includes database initialization, migrations, and data fetching examples.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/sqlite.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SQLiteProvider, useSQLiteContext, type SQLiteDatabase } from 'expo-sqlite';\nimport { useEffect, useState } from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <SQLiteProvider databaseName=\"test.db\" onInit={migrateDbIfNeeded}>\n        <Header />\n        <Content />\n      </SQLiteProvider>\n    </View>\n  );\n}\n\n// ... rest of the implementation\n```\n\n----------------------------------------\n\nTITLE: Basic Text-to-Speech Implementation in React Native with Expo\nDESCRIPTION: A simple React Native component that demonstrates how to use the expo-speech library to convert text to speech. It includes a button that, when pressed, speaks the text '1' using the Speech.speak() method.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/speech.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { View, StyleSheet, Button } from 'react-native';\nimport * as Speech from 'expo-speech';\n\nexport default function App() {\n  const speak = () => {\n    const thingToSay = '1';\n    Speech.speak(thingToSay);\n  };\n\n  return (\n    <View style={styles.container}>\n      <Button title=\"Press to hear some words\" onPress={speak} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    backgroundColor: '#ecf0f1',\n    padding: 8,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Strict Type Checking in tsconfig.json\nDESCRIPTION: A TypeScript configuration example that extends the Expo base configuration and enables strict type checking to reduce runtime errors.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/typescript.mdx#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"expo/tsconfig.base\",\n  \"compilerOptions\": {\n    \"strict\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating and Using Checkbox in React Native\nDESCRIPTION: This code snippet demonstrates the basic usage and customization of the Checkbox component from the expo-checkbox package in a React Native application. It includes examples of a normal checkbox, a custom-colored checkbox, and a disabled checkbox. Dependencies include expo-checkbox and react-native.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/checkbox.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport Checkbox from 'expo-checkbox';\nimport { useState } from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\n\nexport default function App() {\n  const [isChecked, setChecked] = useState(false);\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.section}>\n        <Checkbox style={styles.checkbox} value={isChecked} onValueChange={setChecked} />\n        <Text style={styles.paragraph}>Normal checkbox</Text>\n      </View>\n      <View style={styles.section}>\n        <Checkbox\n          style={styles.checkbox}\n          value={isChecked}\n          onValueChange={setChecked}\n          color={isChecked ? '#4630EB' : undefined}\n        />\n        <Text style={styles.paragraph}>Custom colored checkbox</Text>\n      </View>\n      <View style={styles.section}>\n        <Checkbox style={styles.checkbox} disabled value={isChecked} onValueChange={setChecked} />\n        <Text style={styles.paragraph}>Disabled checkbox</Text>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginHorizontal: 16,\n    marginVertical: 32,\n  },\n  section: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  paragraph: {\n    fontSize: 15,\n  },\n  checkbox: {\n    margin: 8,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Generating APNs Authorization Token (JavaScript)\nDESCRIPTION: This snippet shows how to generate a JSON Web Token (JWT) for APNs authorization using the jsonwebtoken library. It requires your Apple Team ID, the path to your .p8 key file, and the Key ID.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/push-notifications/sending-notifications-custom.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst jwt = require(\"jsonwebtoken\");\nconst authorizationToken = jwt.sign(\n  {\n    iss: \"YOUR-APPLE-TEAM-ID\"\n    iat: Math.round(new Date().getTime() / 1000),\n  },\n  fs.readFileSync(\"./path/to/appName_apns_key.p8\", \"utf8\"),\n  {\n    header: {\n      alg: \"ES256\",\n      kid: \"YOUR-P8-KEY-ID\",\n    },\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Using Expo Clipboard in a React Native App - JavaScript/JSX\nDESCRIPTION: This usage example demonstrates a minimal React Native application utilizing expo-clipboard to copy and retrieve text using the system clipboard. The example requires expo-clipboard and react-native as dependencies and assumes the environment is correctly set up for Expo or React Native. Key functions include copyToClipboard, which sets a hard-coded string to the clipboard, and fetchCopiedText, which retrieves the current clipboard content and displays it in the UI. Inputs are user button presses; outputs are clipboard modifications and visual feedback.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/clipboard.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { View, Text, Button, StyleSheet } from 'react-native';\nimport * as Clipboard from 'expo-clipboard';\n\nexport default function App() {\n  const [copiedText, setCopiedText] = useState('');\n\n  const copyToClipboard = async () => {\n    /* @info Copy the text to the clipboard */\n    await Clipboard.setStringAsync('hello world');\n    /* @end */\n  };\n\n  const fetchCopiedText = async () => {\n    const text = /* @info Paste the text from the clipboard */ await Clipboard.getStringAsync();\n    /* @end */\n    setCopiedText(text);\n  };\n\n  return (\n    <View style={styles.container}>\n      <Button title=\"Click here to copy to Clipboard\" onPress={copyToClipboard} />\n      <Button title=\"View copied text\" onPress={fetchCopiedText} />\n      <Text style={styles.copiedText}>{copiedText}</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  copiedText: {\n    marginTop: 10,\n    color: 'red',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Importing expo-secure-store in JavaScript\nDESCRIPTION: A minimal example illustrating how to import all SecureStore functions from the expo-secure-store package for use in JavaScript or TypeScript projects. This import is the prerequisite for all SecureStore operations in React Native/Expo environments. Enables access to all encrypted storage APIs provided by the library.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/securestore.mdx#2025-04-22_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nimport * as SecureStore from 'expo-secure-store';\n```\n\n----------------------------------------\n\nTITLE: Screen Capture Control with Function-based API\nDESCRIPTION: Example demonstrating the usage of Screen Capture functions to manually control screen capture prevention and detect screenshots. Includes permission handling and screenshot event listener implementation.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/screen-capture.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEffect } from 'react';\nimport { Button, StyleSheet, View } from 'react-native';\nimport * as ScreenCapture from 'expo-screen-capture';\nimport * as MediaLibrary from 'expo-media-library';\n\nexport default function ScreenCaptureExample() {\n  useEffect(() => {\n    if (hasPermissions()) {\n      const subscription = ScreenCapture.addScreenshotListener(() => {\n        alert('Thanks for screenshotting my beautiful app 😊');\n      });\n      return () => subscription.remove();\n    }\n  }, []);\n\n  const hasPermissions = async () => {\n    const { status } = await MediaLibrary.requestPermissionsAsync();\n    return status === 'granted';\n  };\n\n  const activate = async () => {\n    await ScreenCapture.preventScreenCaptureAsync();\n  };\n\n  const deactivate = async () => {\n    await ScreenCapture.allowScreenCaptureAsync();\n  };\n\n  return (\n    <View style={styles.container}>\n      <Button title=\"Activate\" onPress={activate} />\n      <Button title=\"Deactivate\" onPress={deactivate} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Push Notifications in React Native with Expo\nDESCRIPTION: A complete example showing how to implement push notifications in a React Native app using expo-notifications. It demonstrates registering for push tokens, setting up notification handlers, listening for notification events, and scheduling local notifications.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/notifications.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState, useEffect, useRef } from 'react';\nimport { Text, View, Button, Platform } from 'react-native';\nimport * as Device from 'expo-device';\nimport * as Notifications from 'expo-notifications';\nimport Constants from 'expo-constants';\n\nNotifications.setNotificationHandler({\n  handleNotification: async () => ({\n    shouldShowAlert: true,\n    shouldPlaySound: false,\n    shouldSetBadge: false,\n  }),\n});\n\nexport default function App() {\n  const [expoPushToken, setExpoPushToken] = useState('');\n  const [channels, setChannels] = useState<Notifications.NotificationChannel[]>([]);\n  const [notification, setNotification] = useState<Notifications.Notification | undefined>(\n    undefined\n  );\n  const notificationListener = useRef<Notifications.EventSubscription>();\n  const responseListener = useRef<Notifications.EventSubscription>();\n\n  useEffect(() => {\n    registerForPushNotificationsAsync().then(token => token && setExpoPushToken(token));\n\n    if (Platform.OS === 'android') {\n      Notifications.getNotificationChannelsAsync().then(value => setChannels(value ?? []));\n    }\n    notificationListener.current = Notifications.addNotificationReceivedListener(notification => {\n      setNotification(notification);\n    });\n\n    responseListener.current = Notifications.addNotificationResponseReceivedListener(response => {\n      console.log(response);\n    });\n\n    return () => {\n      notificationListener.current &&\n        Notifications.removeNotificationSubscription(notificationListener.current);\n      responseListener.current &&\n        Notifications.removeNotificationSubscription(responseListener.current);\n    };\n  }, []);\n\n  return (\n    <View\n      style={{\n        flex: 1,\n        alignItems: 'center',\n        justifyContent: 'space-around',\n      }}>\n      <Text>Your expo push token: {expoPushToken}</Text>\n      <Text>{`Channels: ${JSON.stringify(\n        channels.map(c => c.id),\n        null,\n        2\n      )}`}</Text>\n      <View style={{ alignItems: 'center', justifyContent: 'center' }}>\n        <Text>Title: {notification && notification.request.content.title} </Text>\n        <Text>Body: {notification && notification.request.content.body}</Text>\n        <Text>Data: {notification && JSON.stringify(notification.request.content.data)}</Text>\n      </View>\n      <Button\n        title=\"Press to schedule a notification\"\n        onPress={async () => {\n          await schedulePushNotification();\n        }}\n      />\n    </View>\n  );\n}\n\nasync function schedulePushNotification() {\n  await Notifications.scheduleNotificationAsync({\n    content: {\n      title: \"You've got mail! 📬\",\n      body: 'Here is the notification body',\n      data: { data: 'goes here', test: { test1: 'more data' } },\n    },\n    trigger: {\n      type: Notifications.SchedulableTriggerInputTypes.TIME_INTERVAL,\n      seconds: 2,\n    },\n  });\n}\n\nasync function registerForPushNotificationsAsync() {\n  let token;\n\n  if (Platform.OS === 'android') {\n    await Notifications.setNotificationChannelAsync('myNotificationChannel', {\n      name: 'A channel is needed for the permissions prompt to appear',\n      importance: Notifications.AndroidImportance.MAX,\n      vibrationPattern: [0, 250, 250, 250],\n      lightColor: '#FF231F7C',\n    });\n  }\n\n  if (Device.isDevice) {\n    const { status: existingStatus } = await Notifications.getPermissionsAsync();\n    let finalStatus = existingStatus;\n    if (existingStatus !== 'granted') {\n      const { status } = await Notifications.requestPermissionsAsync();\n      finalStatus = status;\n    }\n    if (finalStatus !== 'granted') {\n      alert('Failed to get push token for push notification!');\n      return;\n    }\n    // Learn more about projectId:\n    // https://docs.expo.dev/push-notifications/push-notifications-setup/#configure-projectid\n    // EAS projectId is used here.\n    try {\n      const projectId =\n        Constants?.expoConfig?.extra?.eas?.projectId ?? Constants?.easConfig?.projectId;\n      if (!projectId) {\n        throw new Error('Project ID not found');\n      }\n      token = (\n        await Notifications.getExpoPushTokenAsync({\n          projectId,\n        })\n      ).data;\n      console.log(token);\n    } catch (e) {\n      token = `${e}`;\n    }\n  } else {\n    alert('Must use physical device for Push Notifications');\n  }\n\n  return token;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Push Notifications with React Navigation in TypeScript\nDESCRIPTION: This code snippet demonstrates how to configure React Navigation to handle deep linking from push notifications. It integrates with Expo's Notifications API to manage URLs from initial and runtime notifications. Key functionalities involve listening for incoming URLs and directing the navigation container to the appropriate screen. This setup requires '@react-navigation/native' and 'expo-notifications'.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/notifications.mdx#2025-04-22_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport React from 'react';\nimport { Linking } from 'react-native';\nimport * as Notifications from 'expo-notifications';\nimport { NavigationContainer } from '@react-navigation/native';\n\nexport default function App() {\n  return (\n    <NavigationContainer\n      linking={{\n        config: {\n          // Configuration for linking\n        },\n        async getInitialURL() {\n          const url = await Linking.getInitialURL();\n\n          if (url != null) {\n            return url;\n          }\n\n          const response = await Notifications.getLastNotificationResponseAsync();\n\n          return response?.notification.request.content.data.url;\n        },\n        subscribe(listener) {\n          const onReceiveURL = ({ url }: { url: string }) => listener(url);\n\n          const eventListenerSubscription = Linking.addEventListener('url', onReceiveURL);\n\n          const subscription = Notifications.addNotificationResponseReceivedListener(response => {\n            const url = response.notification.request.content.data.url;\n\n            listener(url);\n          });\n\n          return () => {\n            eventListenerSubscription.remove();\n            subscription.remove();\n          };\n        },\n      }}>\n      {/* Your app content */}\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring code signing in Expo.plist for iOS projects\nDESCRIPTION: This XML snippet shows how to add code signing configuration to the Expo.plist file for iOS projects. It includes fields for the code signing certificate and metadata about the signing algorithm.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/code-signing.mdx#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n    <key>EXUpdatesCodeSigningCertificate</key>\n    <string>-----BEGIN CERTIFICATE-----&#xD;\n(insert XML-escaped certificate, it should look something like this)&#xD;\n(spanning multiple lines with \\r escaped but \\n not escaped)&#xD;\n+-----END CERTIFICATE-----&#xD;\n</string>\n    <key>EXUpdatesCodeSigningMetadata</key>\n    <dict>\n      <key>keyid</key>\n      <string>main</string>\n      <key>alg</key>\n      <string>rsa-v1_5-sha256</string>\n    </dict>\n```\n\n----------------------------------------\n\nTITLE: Configuring EAS Update Channels in eas.json\nDESCRIPTION: Example configuration for EAS Update channels in eas.json, defining production, staging, and preview build profiles with their respective channels.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/deployment.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"production\": {\n      \"channel\": \"production\"\n    },\n    \"staging\": {\n      \"channel\": \"staging\"\n    },\n    \"preview\": {\n      \"channel\": \"preview\",\n      \"distribution\": \"internal\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Gyroscope Sensor in React Native with Expo\nDESCRIPTION: This code demonstrates how to use the Gyroscope sensor in a React Native application using Expo. It shows how to subscribe to gyroscope updates, set update intervals, and display the x, y, z rotation values. The example also includes UI controls to toggle the sensor on/off and adjust update frequency.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/gyroscope.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View } from 'react-native';\nimport { Gyroscope } from 'expo-sensors';\n\nexport default function App() {\n  const [{ x, y, z }, setData] = useState({\n    x: 0,\n    y: 0,\n    z: 0,\n  });\n  const [subscription, setSubscription] = useState(null);\n\n  const _slow = () => Gyroscope.setUpdateInterval(1000);\n  const _fast = () => Gyroscope.setUpdateInterval(16);\n\n  const _subscribe = () => {\n    setSubscription(\n      Gyroscope.addListener(gyroscopeData => {\n        setData(gyroscopeData);\n      })\n    );\n  };\n\n  const _unsubscribe = () => {\n    subscription && subscription.remove();\n    setSubscription(null);\n  };\n\n  useEffect(() => {\n    _subscribe();\n    return () => _unsubscribe();\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.text}>Gyroscope:</Text>\n      <Text style={styles.text}>x: {x}</Text>\n      <Text style={styles.text}>y: {y}</Text>\n      <Text style={styles.text}>z: {z}</Text>\n      <View style={styles.buttonContainer}>\n        <TouchableOpacity onPress={subscription ? _unsubscribe : _subscribe} style={styles.button}>\n          <Text>{subscription ? 'On' : 'Off'}</Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={_slow} style={[styles.button, styles.middleButton]}>\n          <Text>Slow</Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={_fast} style={styles.button}>\n          <Text>Fast</Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    paddingHorizontal: 10,\n  },\n  text: {\n    textAlign: 'center',\n  },\n  buttonContainer: {\n    flexDirection: 'row',\n    alignItems: 'stretch',\n    marginTop: 15,\n  },\n  button: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#eee',\n    padding: 10,\n  },\n  middleButton: {\n    borderLeftWidth: 1,\n    borderRightWidth: 1,\n    borderColor: '#ccc',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Publishing EAS Update\nDESCRIPTION: Command to publish an update to EAS servers with a specified channel name and update message. Used for deploying non-native changes without creating new builds.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/getting-started.mdx#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n$ eas update --channel [channel-name] --message \"[message]\"\n```\n\n----------------------------------------\n\nTITLE: Using the Image Component from expo-image in a React Native App\nDESCRIPTION: A complete example showing how to use the Image component from expo-image with blurhash placeholder, content fitting, and transition animation in a React Native application.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/image.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Image } from 'expo-image';\nimport { StyleSheet, View } from 'react-native';\n\nconst blurhash =\n  '|rF?hV%2WCj[ayj[a|j[az_NaeWBj@ayfRayfQfQM{M|azj[azf6fQfQfQIpWXofj[ayj[j[fQayWCoeoeaya}j[ayfQa{oLj?j[WVj[ayayj[fQoff7azayj[ayj[j[ayofayayayj[fQj[ayayj[ayfjj[j[ayjuayj[';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Image\n        style={styles.image}\n        source=\"https://picsum.photos/seed/696/3000/2000\"\n        placeholder={{ blurhash }}\n        contentFit=\"cover\"\n        transition={1000}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  image: {\n    flex: 1,\n    width: '100%',\n    backgroundColor: '#0553',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Fonts in Expo React Native\nDESCRIPTION: This snippet illustrates using the useFonts hook from expo-font to load and apply custom fonts in a React Native application. It includes handling splash screen visibility while fonts load. Requires expo-font and expo-splash-screen packages. Key dependencies include the useFonts hook for font loading and useCallback for managing layout updates. The app imports custom fonts and adjusts splash screen behavior based on load state. Inputs are font files, outputs include text display with custom fonts.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/font.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useCallback } from 'react';\nimport { Text, View, StyleSheet } from 'react-native';\n/* @info Import useFonts hook from 'expo-font'. */ import { useFonts } from 'expo-font'; /* @end */\n/* @info Also, import SplashScreen so that when the fonts are not loaded, we can continue to show SplashScreen. */ import * as SplashScreen from 'expo-splash-screen'; /* @end */\n\n/* @info This prevents SplashScreen from auto hiding while the fonts are loaded. */\nSplashScreen.preventAutoHideAsync();\n/* @end */\n\nexport default function App() {\n  const [fontsLoaded, fontError] = useFonts({\n    'Inter-Black': require('./assets/fonts/Inter-Black.otf'),\n  });\n\n  /* @info After the custom fonts have loaded, we can hide the splash screen and display the app screen. */\n  const onLayoutRootView = useCallback(async () => {\n    if (fontsLoaded || fontError) {\n      await SplashScreen.hideAsync();\n    }\n  }, [fontsLoaded, fontError]);\n  /* @end */\n\n  if (!fontsLoaded && !fontError) {\n    return null;\n  }\n\n  return (\n    <View style={styles.container} onLayout={onLayoutRootView}>\n      <Text style={{ fontFamily: 'Inter-Black', fontSize: 30 }}>Inter Black</Text>\n      <Text style={{ fontSize: 30 }}>Platform Default</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Notification Channels with Custom Sounds\nDESCRIPTION: TypeScript code that demonstrates how to set up notification channels with custom sounds on Android 8.0+ and schedule a notification using that channel. It references a sound file placed in the Android project's resources.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/notifications.mdx#2025-04-22_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\n// Prepare the notification channel\nawait Notifications.setNotificationChannelAsync('new_emails', {\n  name: 'E-mail notifications',\n  importance: Notifications.AndroidImportance.HIGH,\n  sound: 'email_sound.wav', // <- for Android 8.0+, see channelId property below\n});\n\n// Eg. schedule the notification\nawait Notifications.scheduleNotificationAsync({\n  content: {\n    title: \"You've got mail! 📬\",\n    body: 'Open the notification to read them all',\n    sound: 'email_sound.wav', // <- for Android below 8.0\n  },\n  trigger: {\n    type: Notifications.SchedulableTriggerInputTypes.TIME_INTERVAL,\n    seconds: 2,\n    channelId: 'new_emails', // <- for Android 8.0+, see definition above\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Camera Usage in React Native with TypeScript\nDESCRIPTION: This TypeScript export function demonstrates a basic implementation of the expo-camera in a React Native app. It includes camera permissions management and functionality to toggle between front and back cameras.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/camera.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CameraView, CameraType, useCameraPermissions } from 'expo-camera';\nimport { useState } from 'react';\nimport { Button, StyleSheet, Text, TouchableOpacity, View } from 'react-native';\n\nexport default function App() {\n  const [facing, setFacing] = useState<CameraType>('back');\n  const [permission, requestPermission] = useCameraPermissions();\n\n  if (!permission) {\n    // Camera permissions are still loading.\n    return <View />;\n  }\n\n  if (!permission.granted) {\n    // Camera permissions are not granted yet.\n    return (\n      <View style={styles.container}>\n        <Text style={styles.message}>We need your permission to show the camera</Text>\n        <Button onPress={requestPermission} title=\"Grant permission\" />\n      </View>\n    );\n  }\n\n  function toggleCameraFacing() {\n    setFacing(current => (current === 'back' ? 'front' : 'back'));\n  }\n\n  return (\n    <View style={styles.container}>\n      <CameraView style={styles.camera} facing={facing}>\n        <View style={styles.buttonContainer}>\n          <TouchableOpacity style={styles.button} onPress={toggleCameraFacing}>\n            <Text style={styles.text}>Flip Camera</Text>\n          </TouchableOpacity>\n        </View>\n      </CameraView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n  message: {\n    textAlign: 'center',\n    paddingBottom: 10,\n  },\n  camera: {\n    flex: 1,\n  },\n  buttonContainer: {\n    flex: 1,\n    flexDirection: 'row',\n    backgroundColor: 'transparent',\n    margin: 64,\n  },\n  button: {\n    flex: 1,\n    alignSelf: 'flex-end',\n    alignItems: 'center',\n  },\n  text: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: 'white',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Tab Navigator in Layout (TypeScript)\nDESCRIPTION: This code snippet shows how to implement a tab navigator in a layout file using the `Tabs` component from `expo-router`. It also imports `MaterialIcons` from `@expo/vector-icons/MaterialIcons` for adding icons to the tabs. It configures a tab for the \"index\" route, setting its title to \"Home\" and using a MaterialIcons icon.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/basics/layout.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Tabs } from 'expo-router';\nimport MaterialIcons from '@expo/vector-icons/MaterialIcons';\n\nexport default function TabLayout() {\n  return (\n    <Tabs>\n      <Tabs.Screen\n        name=\"index\"\n        options={{\n          title: 'Home',\n          tabBarIcon: ({ color }) => <MaterialIcons size={28} name=\"house.fill\" color={color} />,\n        }}\n      />\n      {/* Add more tabs here */}\n    </Tabs>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Config Plugin Configuration with Options\nDESCRIPTION: Demonstrates how to configure a config plugin with custom options, using expo-camera as an example with a custom camera permission message.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/config-plugins/introduction.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-camera\",\n        {\n          \"cameraPermission\": \"Allow $(PRODUCT_NAME) to access your camera.\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Protected App Layout with Authentication Check\nDESCRIPTION: Implements a layout component that handles authentication checking and redirects unauthenticated users to the sign-in screen.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/advanced/authentication.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Text } from 'react-native';\nimport { Redirect, Stack } from 'expo-router';\n\nimport { useSession } from '../../ctx';\n\nexport default function AppLayout() {\n  const { session, isLoading } = useSession();\n\n  if (isLoading) {\n    return <Text>Loading...</Text>;\n  }\n\n  if (!session) {\n    return <Redirect href=\"/sign-in\" />;\n  }\n\n  return <Stack />;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Push Notifications in React Native with expo-notifications\nDESCRIPTION: A complete example demonstrating how to set up push notifications in a React Native app, including registering for a push token, setting up notification channels on Android, listening for notifications, and scheduling local notifications.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/notifications.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState, useEffect, useRef } from 'react';\nimport { Text, View, Button, Platform } from 'react-native';\nimport * as Device from 'expo-device';\nimport * as Notifications from 'expo-notifications';\nimport Constants from 'expo-constants';\n\nNotifications.setNotificationHandler({\n  handleNotification: async () => ({\n    shouldShowAlert: true,\n    shouldPlaySound: false,\n    shouldSetBadge: false,\n  }),\n});\n\nexport default function App() {\n  const [expoPushToken, setExpoPushToken] = useState('');\n  const [channels, setChannels] = useState<Notifications.NotificationChannel[]>([]);\n  const [notification, setNotification] = useState<Notifications.Notification | undefined>(\n    undefined\n  );\n  const notificationListener = useRef<Notifications.Subscription>();\n  const responseListener = useRef<Notifications.Subscription>();\n\n  useEffect(() => {\n    registerForPushNotificationsAsync().then(token => token && setExpoPushToken(token));\n\n    if (Platform.OS === 'android') {\n      Notifications.getNotificationChannelsAsync().then(value => setChannels(value ?? []));\n    }\n    notificationListener.current = Notifications.addNotificationReceivedListener(notification => {\n      setNotification(notification);\n    });\n\n    responseListener.current = Notifications.addNotificationResponseReceivedListener(response => {\n      console.log(response);\n    });\n\n    return () => {\n      notificationListener.current &&\n        Notifications.removeNotificationSubscription(notificationListener.current);\n      responseListener.current &&\n        Notifications.removeNotificationSubscription(responseListener.current);\n    };\n  }, []);\n\n  return (\n    <View\n      style={{\n        flex: 1,\n        alignItems: 'center',\n        justifyContent: 'space-around',\n      }}>\n      <Text>Your expo push token: {expoPushToken}</Text>\n      <Text>{`Channels: ${JSON.stringify(\n        channels.map(c => c.id),\n        null,\n        2\n      )}`}</Text>\n      <View style={{ alignItems: 'center', justifyContent: 'center' }}>\n        <Text>Title: {notification && notification.request.content.title} </Text>\n        <Text>Body: {notification && notification.request.content.body}</Text>\n        <Text>Data: {notification && JSON.stringify(notification.request.content.data)}</Text>\n      </View>\n      <Button\n        title=\"Press to schedule a notification\"\n        onPress={async () => {\n          await schedulePushNotification();\n        }}\n      />\n    </View>\n  );\n}\n\nasync function schedulePushNotification() {\n  await Notifications.scheduleNotificationAsync({\n    content: {\n      title: \"You've got mail! 📬\",\n      body: 'Here is the notification body',\n      data: { data: 'goes here', test: { test1: 'more data' } },\n    },\n    trigger: { seconds: 2 },\n  });\n}\n\nasync function registerForPushNotificationsAsync() {\n  let token;\n\n  if (Platform.OS === 'android') {\n    await Notifications.setNotificationChannelAsync('default', {\n      name: 'default',\n      importance: Notifications.AndroidImportance.MAX,\n      vibrationPattern: [0, 250, 250, 250],\n      lightColor: '#FF231F7C',\n    });\n  }\n\n  if (Device.isDevice) {\n    const { status: existingStatus } = await Notifications.getPermissionsAsync();\n    let finalStatus = existingStatus;\n    if (existingStatus !== 'granted') {\n      const { status } = await Notifications.requestPermissionsAsync();\n      finalStatus = status;\n    }\n    if (finalStatus !== 'granted') {\n      alert('Failed to get push token for push notification!');\n      return;\n    }\n    // Learn more about projectId:\n    // https://docs.expo.dev/push-notifications/push-notifications-setup/#configure-projectid\n    // EAS projectId is used here.\n    try {\n      const projectId =\n        Constants?.expoConfig?.extra?.eas?.projectId ?? Constants?.easConfig?.projectId;\n      if (!projectId) {\n        throw new Error('Project ID not found');\n      }\n      token = (\n        await Notifications.getExpoPushTokenAsync({\n          projectId,\n        })\n      ).data;\n      console.log(token);\n    } catch (e) {\n      token = `${e}`;\n    }\n  } else {\n    alert('Must use physical device for Push Notifications');\n  }\n\n  return token;\n}\n```\n\n----------------------------------------\n\nTITLE: React Native Entry Point with Expo Registration\nDESCRIPTION: Example of a React Native entry point using Expo's registerRootComponent for proper initialization.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/integration-in-existing-native-apps.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport App from './App';\nimport { registerRootComponent } from 'expo';\n\nregisterRootComponent(App);\n```\n\n----------------------------------------\n\nTITLE: Basic Android Version Configuration in EAS Build\nDESCRIPTION: YAML configuration for setting Android app version. Shows the basic implementation without custom version inputs.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_33\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: Configure Android version\n  steps:\n    - eas/checkout\n    - eas/install_node_modules\n    - eas/prebuild\n    - eas/configure_eas_update\n    - eas/inject_android_credentials\n    - eas/configure_android_version\n```\n\n----------------------------------------\n\nTITLE: Customizing Tab Navigator with Icons and Styling\nDESCRIPTION: Enhanced tab navigator implementation with custom icons from Ionicons, custom colors for active tabs, and styled tab bar appearance. Includes configuration for both active and inactive states.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/add-navigation.mdx#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Tabs } from 'expo-router';\nimport Ionicons from '@expo/vector-icons/Ionicons';\n\nexport default function TabLayout() {\n  return (\n    <Tabs\n      screenOptions={{\n        tabBarActiveTintColor: '#ffd33d',\n      }}\n    >\n      <Tabs.Screen\n        name=\"index\"\n        options={{\n          title: 'Home',\n          tabBarIcon: ({ color, focused }) => (\n            <Ionicons name={focused ? 'home-sharp' : 'home-outline'} color={color} size={24} />\n          ),\n        }}\n      />\n      <Tabs.Screen\n        name=\"about\"\n        options={{\n          title: 'About',\n          tabBarIcon: ({ color, focused }) => (\n            <Ionicons name={focused ? 'information-circle' : 'information-circle-outline'} color={color} size={24}/>\n          ),\n        }}\n      />\n    </Tabs>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: iOS Media Library Permissions\nDESCRIPTION: XML configuration for iOS Info.plist to set up photo library access and save permissions.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/media-library.mdx#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<key>NSPhotoLibraryUsageDescription</key>\n<string>Give $(PRODUCT_NAME) permission to access your photos</string>\n<key>NSPhotoLibraryAddUsageDescription</key>\n<string>Give $(PRODUCT_NAME) permission to save photos</string>\n```\n\n----------------------------------------\n\nTITLE: Opening Android Play Store for Reviews in TypeScript\nDESCRIPTION: This snippet demonstrates how to open the Android Play Store to the reviews section for a specific app, both in the browser and directly in the Play Store app.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/storereview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst androidPackageName = 'host.exp.exponent';\n// Open the Android Play Store in the browser -> redirects to Play Store on Android\nLinking.openURL(\n  `https://play.google.com/store/apps/details?id=${androidPackageName}&showAllReviews=true`\n);\n// Open the Android Play Store directly\nLinking.openURL(`market://details?id=${androidPackageName}&showAllReviews=true`);\n```\n\n----------------------------------------\n\nTITLE: Handling Deep Links with Expo Linking in React Native\nDESCRIPTION: This code demonstrates how to use the Linking.useURL() hook from expo-linking to observe and handle deep links that launch the app. It renders the URL in a Text component.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/linking/into-your-app.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as Linking from 'expo-linking';\n\nexport default function Home() {\n  const url = Linking.useURL();\n\n  return <Text>URL: {url}</Text>;\n}\n```\n\n----------------------------------------\n\nTITLE: Logging into EAS Account\nDESCRIPTION: Command to authenticate with EAS services using the CLI\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/build/setup.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ eas login\n```\n\n----------------------------------------\n\nTITLE: Basic Calendar Usage Example in React Native\nDESCRIPTION: A React Native component demonstrating basic usage of the expo-calendar module. It includes requesting permissions, fetching calendars, and creating a new calendar.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/calendar.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEffect } from 'react';\nimport { StyleSheet, View, Text, Button, Platform } from 'react-native';\nimport * as Calendar from 'expo-calendar';\n\nexport default function App() {\n  useEffect(() => {\n    (async () => {\n      const { status } = await Calendar.requestCalendarPermissionsAsync();\n      if (status === 'granted') {\n        const calendars = await Calendar.getCalendarsAsync(Calendar.EntityTypes.EVENT);\n        console.log('Here are all your calendars:');\n        console.log({ calendars });\n      }\n    })();\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <Text>Calendar Module Example</Text>\n      <Button title=\"Create a new calendar\" onPress={createCalendar} />\n    </View>\n  );\n}\n\nasync function getDefaultCalendarSource() {\n  const defaultCalendar = await Calendar.getDefaultCalendarAsync();\n  return defaultCalendar.source;\n}\n\nasync function createCalendar() {\n  const defaultCalendarSource =\n    Platform.OS === 'ios'\n      ? await getDefaultCalendarSource()\n      : { isLocalAccount: true, name: 'Expo Calendar' };\n  const newCalendarID = await Calendar.createCalendarAsync({\n    title: 'Expo Calendar',\n    color: 'blue',\n    entityType: Calendar.EntityTypes.EVENT,\n    sourceId: defaultCalendarSource.id,\n    source: defaultCalendarSource,\n    name: 'internalCalendarName',\n    ownerAccount: 'personal',\n    accessLevel: Calendar.CalendarAccessLevel.OWNER,\n  });\n  console.log(`Your new calendar ID is: ${newCalendarID}`);\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'space-around',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Apple Authentication Button in React Native with expo-apple-authentication (JSX)\nDESCRIPTION: This React Native code example demonstrates how to integrate the Apple Sign In button using expo-apple-authentication. It imports the relevant Expo module, renders the AppleAuthenticationButton component, and handles the sign-in flow asynchronously. On success, credentials are received; on failure or cancellation, appropriate error handling is provided. Inputs include props for button styling and requested scopes (FULL_NAME, EMAIL). Outputs include user authentication data or error codes. Dependencies: expo-apple-authentication and react-native. Button appearance and onPress callback are customizable. The demo handles both user cancellation (ERR_REQUEST_CANCELED) and other errors.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/apple-authentication.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as AppleAuthentication from 'expo-apple-authentication';\\nimport { View, StyleSheet } from 'react-native';\\n\\nexport default function App() {\\n  return (\\n    <View style={styles.container}>\\n      <AppleAuthentication.AppleAuthenticationButton\\n        buttonType={AppleAuthentication.AppleAuthenticationButtonType.SIGN_IN}\\n        buttonStyle={AppleAuthentication.AppleAuthenticationButtonStyle.BLACK}\\n        cornerRadius={5}\\n        style={styles.button}\\n        onPress={async () => {\\n          try {\\n            const credential = await AppleAuthentication.signInAsync({\\n              requestedScopes: [\\n                AppleAuthentication.AppleAuthenticationScope.FULL_NAME,\\n                AppleAuthentication.AppleAuthenticationScope.EMAIL,\\n              ],\\n            });\\n            // signed in\\n          } catch (e) {\\n            if (e.code === 'ERR_REQUEST_CANCELED') {\\n              // handle that the user canceled the sign-in flow\\n            } else {\\n              // handle other errors\\n            }\\n          }\\n        }}\\n      />\\n    </View>\\n  );\\n}\\n\\nconst styles = StyleSheet.create({\\n  container: {\\n    flex: 1,\\n    alignItems: 'center',\\n    justifyContent: 'center',\\n  },\\n  button: {\\n    width: 200,\\n    height: 44,\\n  },\\n});\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Tracking Transparency Plugin in Expo via app.json (JSON)\nDESCRIPTION: This JSON configuration snippet demonstrates how to add the expo-tracking-transparency plugin and set a custom usage description for user tracking within app.json. The userTrackingPermission field is used to declare why the app needs tracking access and ensures your app complies with App Store requirements. This config should be used when integrating tracking transparency through Expo's managed workflow or EAS Build; be sure to rebuild your app after changes.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/tracking-transparency.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-tracking-transparency\",\n        {\n          \"userTrackingPermission\": \"This identifier will be used to deliver personalized ads to you.\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Video Playback with Play/Pause Button using expo-av in React Native (JSX)\nDESCRIPTION: This snippet demonstrates how to render a video with built-in native controls and a custom play/pause button using the expo-av package in a React Native functional component. Required dependencies include expo-av and react-native. The example employs useRef to interact with the Video component's ref and useState to manage playback status. Video playback is tied to a toggle button that switches between play and pause states. The code requires a valid video URL, assumes network access, and wraps presentational styling within a StyleSheet.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/video-av.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useRef } from 'react';\\nimport { View, StyleSheet, Button } from 'react-native';\\nimport { Video, ResizeMode } from 'expo-av';\\n\\nexport default function App() {\\n  const video = useRef(null);\\n  const [status, setStatus] = useState({});\\n  return (\\n    <View style={styles.container}>\\n      <Video\\n        ref={video}\\n        style={styles.video}\\n        source={{\\n          uri: 'https://d23dyxeqlo5psv.cloudfront.net/big_buck_bunny.mp4',\\n        }}\\n        useNativeControls\\n        resizeMode={ResizeMode.CONTAIN}\\n        isLooping\\n        onPlaybackStatusUpdate={status => setStatus(() => status)}\\n      />\\n      <View style={styles.buttons}>\\n        <Button\\n          title={status.isPlaying ? 'Pause' : 'Play'}\\n          onPress={() =>\\n            status.isPlaying ? video.current.pauseAsync() : video.current.playAsync()\\n          }\\n        />\\n      </View>\\n    </View>\\n  );\\n}\\n\\n/* @hide const styles = StyleSheet.create({ ... }); */\\nconst styles = StyleSheet.create({\\n  container: {\\n    flex: 1,\\n    justifyContent: 'center',\\n    backgroundColor: '#ecf0f1',\\n  },\\n  video: {\\n    alignSelf: 'center',\\n    width: 320,\\n    height: 200,\\n  },\\n  buttons: {\\n    flexDirection: 'row',\\n    justifyContent: 'center',\\n    alignItems: 'center',\\n  },\\n});\\n/* @end */\n```\n\n----------------------------------------\n\nTITLE: Configuring Expo Camera Plugin in JSON\nDESCRIPTION: This JSON snippet configures the `expo-camera` plugin in an Expo app, specifying permissions for camera and microphone access. These settings are required for accessing device hardware and must be included in the app's configuration to function correctly.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/camera.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"expo\": {\"plugins\": [[\"expo-camera\", {\"cameraPermission\": \"Allow $(PRODUCT_NAME) to access your camera\", \"microphonePermission\": \"Allow $(PRODUCT_NAME) to access your microphone\", \"recordAudioAndroid\": true}]}}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Keyboard-Aware Chat Screen in React Native with TypeScript\nDESCRIPTION: This snippet shows a ChatScreen component that uses the useGradualAnimation hook to create a smooth animation when the keyboard appears or disappears. It includes a FlatList for messages, a TextInput for new messages, and an animated view that adjusts its height based on the keyboard.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/keyboard-handling.mdx#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StyleSheet, Platform, FlatList, View, StatusBar, TextInput } from 'react-native';\nimport Animated, { useAnimatedStyle, useSharedValue } from 'react-native-reanimated';\nimport { useKeyboardHandler } from 'react-native-keyboard-controller';\n\nimport MessageItem from '@/components/MessageItem';\nimport { messages } from '@/messages';\n\nconst useGradualAnimation = () => {\n  /* @hide // Code remains same from previous example */\n  /* @end */\n};\n\nexport default function ChatScreen() {\n  const { height } = useGradualAnimation();\n\n  const fakeView = useAnimatedStyle(() => {\n    return {\n      height: Math.abs(height.value),\n    };\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <FlatList\n        data={messages}\n        renderItem={({ item }) => <MessageItem message={item} />}\n        keyExtractor={item => item.createdAt.toString()}\n        contentContainerStyle={styles.listStyle}\n      />\n      <TextInput placeholder=\"Type a message...\" style={styles.textInput} />\n      <Animated.View style={fakeView} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingTop: Platform.OS === 'android' ? StatusBar.currentHeight : 0,\n  },\n  listStyle: {\n    padding: 16,\n    gap: 16,\n  },\n  textInput: {\n    width: '95%',\n    height: 45,\n    borderWidth: 1,\n    borderRadius: 8,\n    borderColor: '#d8d8d8',\n    backgroundColor: '#fff',\n    padding: 8,\n    alignSelf: 'center',\n    marginBottom: 8,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Blur Effects with Expo BlurView in React Native\nDESCRIPTION: Provides a comprehensive example of using the `BlurView` component within a React Native `SafeAreaView`. It demonstrates creating multiple `BlurView` instances with varying `intensity` and `tint` props ('light', 'dark') layered over a patterned background. The example includes necessary imports (`React`, `StyleSheet`, `View`, `Text`, `SafeAreaView`, `BlurView`), component structure, and styling using `StyleSheet` to achieve centered text within blurred containers with rounded corners (`overflow: 'hidden'`, `borderRadius`).\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/blur-view.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Text, StyleSheet, View, SafeAreaView } from 'react-native';\nimport { BlurView } from 'expo-blur';\n\nexport default function App() {\n  const text = 'Hello, my container is blurring contents underneath!';\n  return (\n    <SafeAreaView style={styles.container}>\n      <View style={styles.background}>\n        {[...Array(20).keys()].map(i => (\n          <View\n            key={`box-${i}`}\n            style={[styles.box, i % 2 === 1 ? styles.boxOdd : styles.boxEven]}\n          />\n        ))}\n      </View>\n      <BlurView intensity={100} style={styles.blurContainer}>\n        <Text style={styles.text}>{text}</Text>\n      </BlurView>\n      <BlurView intensity={80} tint=\"light\" style={styles.blurContainer}>\n        <Text style={styles.text}>{text}</Text>\n      </BlurView>\n      <BlurView intensity={90} tint=\"dark\" style={styles.blurContainer}>\n        <Text style={[styles.text, { color: '#fff' }]}>{text}</Text>\n      </BlurView>\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  blurContainer: {\n    flex: 1,\n    padding: 20,\n    margin: 16,\n    textAlign: 'center',\n    justifyContent: 'center',\n    overflow: 'hidden',\n    borderRadius: 20,\n  },\n  background: {\n    flex: 1,\n    flexWrap: 'wrap',\n    ...StyleSheet.absoluteFill,\n  },\n  box: {\n    width: '25%',\n    height: '20%',\n  },\n  boxEven: {\n    backgroundColor: 'orangered',\n  },\n  boxOdd: {\n    backgroundColor: 'gold',\n  },\n  text: {\n    fontSize: 24,\n    fontWeight: '600',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Pedometer Functionality in React Native with Expo\nDESCRIPTION: This code snippet demonstrates how to use the Pedometer module from expo-sensors in a React Native application. It shows how to check pedometer availability, get past step count, and subscribe to real-time step count updates.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/pedometer.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\nimport { Pedometer } from 'expo-sensors';\n\nexport default function App() {\n  const [isPedometerAvailable, setIsPedometerAvailable] = useState('checking');\n  const [pastStepCount, setPastStepCount] = useState(0);\n  const [currentStepCount, setCurrentStepCount] = useState(0);\n\n  const subscribe = async () => {\n    const isAvailable = await Pedometer.isAvailableAsync();\n    setIsPedometerAvailable(String(isAvailable));\n\n    if (isAvailable) {\n      const end = new Date();\n      const start = new Date();\n      start.setDate(end.getDate() - 1);\n\n      const pastStepCountResult = await Pedometer.getStepCountAsync(start, end);\n      if (pastStepCountResult) {\n        setPastStepCount(pastStepCountResult.steps);\n      }\n\n      return Pedometer.watchStepCount(result => {\n        setCurrentStepCount(result.steps);\n      });\n    }\n  };\n\n  useEffect(() => {\n    const subscription = subscribe();\n    return () => subscription && subscription.remove();\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <Text>Pedometer.isAvailableAsync(): {isPedometerAvailable}</Text>\n      <Text>Steps taken in the last 24 hours: {pastStepCount}</Text>\n      <Text>Walk! And watch this go up: {currentStepCount}</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: 15,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Downloading Files with expo-file-system/next in TypeScript\nDESCRIPTION: Downloads a PDF file from a URL to a specified directory in the device's cache. Shows how to create a destination directory and download a file asynchronously, then check the result properties.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/filesystem-next.mdx#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { File, Paths } from 'expo-file-system/next';\n\nconst url = 'https://pdfobject.com/pdf/sample.pdf';\nconst destination = new Directory(Paths.cache, 'pdfs');\ntry {\n  destination.create();\n  const output = await File.downloadFileAsync(url, destination);\n  console.log(output.exists); // true\n  console.log(output.uri); // path to the downloaded file, e.g. '${cacheDirectory}/pdfs/sample.pdf'\n} catch (error) {\n  console.error(error);\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Local Package in an Expo App Component\nDESCRIPTION: This React Native component demonstrates how to import and use the greeting export from a local package in the monorepo. The component renders the greeting text in a centered view.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/monorepos.mdx#2025-04-22_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport { greeting } from 'cool-package';\nimport { StatusBar } from 'expo-status-bar';\nimport React from 'react';\nimport { Text, View } from 'react-native';\n\nexport default function App() {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>{greeting}</Text>\n      <StatusBar style=\"auto\" />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using SQLite Context with React Suspense\nDESCRIPTION: Shows how to integrate SQLiteProvider with React.Suspense to handle loading states while the database initializes.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/sqlite.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SQLiteProvider, useSQLiteContext } from 'expo-sqlite';\nimport { Suspense } from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Suspense fallback={<Fallback />}>\n        <SQLiteProvider databaseName=\"test.db\" onInit={migrateDbIfNeeded} useSuspense>\n          <Header />\n          <Content />\n        </SQLiteProvider>\n      </Suspense>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Background Location Tracking Example in React Native\nDESCRIPTION: Example React component demonstrating how to implement background location tracking using expo-task-manager and expo-location. Shows permission handling, task definition, and UI setup.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/task-manager.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Button, View, StyleSheet } from 'react-native';\nimport * as TaskManager from 'expo-task-manager';\nimport * as Location from 'expo-location';\n\nconst LOCATION_TASK_NAME = 'background-location-task';\n\nconst requestPermissions = async () => {\n  const { status: foregroundStatus } = await Location.requestForegroundPermissionsAsync();\n  if (foregroundStatus === 'granted') {\n    const { status: backgroundStatus } = await Location.requestBackgroundPermissionsAsync();\n    if (backgroundStatus === 'granted') {\n      await Location.startLocationUpdatesAsync(LOCATION_TASK_NAME, {\n        accuracy: Location.Accuracy.Balanced,\n      });\n    }\n  }\n};\n\nconst PermissionsButton = () => (\n  <View style={styles.container}>\n    <Button onPress={requestPermissions} title=\"Enable background location\" />\n  </View>\n);\n\nTaskManager.defineTask(LOCATION_TASK_NAME, ({ data, error }) => {\n  if (error) {\n    // Error occurred - check `error.message` for more details.\n    return;\n  }\n  if (data) {\n    const { locations } = data;\n    // do something with the locations captured in the background\n  }\n});\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n\nexport default PermissionsButton;\n```\n\n----------------------------------------\n\nTITLE: Configuring EAS Build Lifecycle Hooks in package.json\nDESCRIPTION: This snippet demonstrates how to set up EAS Build lifecycle hooks in the package.json file. It shows the structure for defining pre-install, post-install, success, error, and cancel hooks.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/build-reference/npm-hooks.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my-app\",\n  \"scripts\": {\n    \"eas-build-pre-install\": \"echo 123\",\n    \"eas-build-post-install\": \"echo 456\",\n    \"eas-build-on-success\": \"echo 789\",\n    \"eas-build-on-error\": \"echo 012\",\n    \"eas-build-on-cancel\": \"echo 345\",\n    \"start\": \"expo start\",\n    \"test\": \"jest\"\n  },\n  \"dependencies\": {\n    \"expo\": \"51.0.0\"\n    /* @hide ... */ /* @end */\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Recording Audio with expo-av in React Native\nDESCRIPTION: This code demonstrates how to implement audio recording functionality in a React Native app. It handles permission requests, configures the audio mode for recording, and provides methods to start and stop recording with proper cleanup.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/audio.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { View, StyleSheet, Button } from 'react-native';\nimport { Audio } from 'expo-av';\n\nexport default function App() {\n  const [recording, setRecording] = useState();\n  const [permissionResponse, requestPermission] = Audio.usePermissions();\n\n  async function startRecording() {\n    try {\n      /* @info */ if (permissionResponse.status !== 'granted') {\n        console.log('Requesting permission..');\n        await requestPermission();\n      }\n      await Audio.setAudioModeAsync({\n        allowsRecordingIOS: true,\n        playsInSilentModeIOS: true,\n      }); /* @end */\n\n      console.log('Starting recording..');\n      /* @info */ const { recording } = await Audio.Recording.createAsync(\n        /* @end */ Audio.RecordingOptionsPresets.HIGH_QUALITY\n      );\n      setRecording(recording);\n      console.log('Recording started');\n    } catch (err) {\n      console.error('Failed to start recording', err);\n    }\n  }\n\n  async function stopRecording() {\n    console.log('Stopping recording..');\n    setRecording(undefined);\n    /* @info */ await recording.stopAndUnloadAsync(); /* @end */\n    /* @info iOS may reroute audio playback to the phone earpiece when recording is allowed, so disable once finished. */ await Audio.setAudioModeAsync(\n      {\n        allowsRecordingIOS: false,\n      }\n    ); /* @end */\n    /* @info */ const uri = recording.getURI(); /* @end */\n    console.log('Recording stopped and stored at', uri);\n  }\n\n  return (\n    <View style={styles.container}>\n      <Button\n        title={recording ? 'Stop Recording' : 'Start Recording'}\n        onPress={recording ? stopRecording : startRecording}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    backgroundColor: '#ecf0f1',\n    padding: 10,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Device Usage with React Native\nDESCRIPTION: Demonstrates how to use the expo-device library within a React Native application to display the device manufacturer and model name on the screen. Dependencies include 'expo-device' and 'react-native'. The component fetches and displays data such as the manufacturer and model from the Device API. It returns a View displaying the manufacturer's name and model of the device.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/device.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Text, View } from 'react-native';\nimport * as Device from 'expo-device';\n\nexport default function App() {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>\n        {Device.manufacturer}: {Device.modelName}\n      </Text>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Stripe Plugin in Expo app.json\nDESCRIPTION: JSON configuration for setting up the @stripe/stripe-react-native plugin in an Expo project's app.json file. It includes options for setting the merchant identifier and enabling Google Pay.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/stripe.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"@stripe/stripe-react-native\",\n        {\n          \"merchantIdentifier\": string | string [],\n          \"enableGooglePay\": boolean\n        }\n      ]\n    ],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Hashing a String with Expo Crypto in React Native\nDESCRIPTION: This React Native component demonstrates basic usage of the `expo-crypto` library. It imports `useEffect` from React, UI components from `react-native`, and the `Crypto` module from `expo-crypto`. Inside `useEffect`, it asynchronously computes the SHA256 hash of a string using `Crypto.digestStringAsync` and logs the result. Depends on `react`, `react-native`, and `expo-crypto`.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/crypto.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx\nimport { useEffect } from 'react';\nimport { StyleSheet, View, Text } from 'react-native';\nimport * as Crypto from 'expo-crypto';\n\nexport default function App() {\n  useEffect(() => {\n    (async () => {\n      const digest = await Crypto.digestStringAsync(\n        Crypto.CryptoDigestAlgorithm.SHA256,\n        'GitHub stars are neat 🌟'\n      );\n      console.log('Digest: ', digest);\n      /* Some crypto operation... */\n    })();\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <Text>Crypto Module Example</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring projectId for Expo Push Notifications\nDESCRIPTION: Code snippet demonstrating how to configure the projectId for Expo push notifications using expo-constants. This is important for attributing Expo push tokens to specific projects.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/push-notifications/push-notifications-setup.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst projectId = Constants?.expoConfig?.extra?.eas?.projectId ?? Constants?.easConfig?.projectId;\nconst pushTokenString = (await Notifications.getExpoPushTokenAsync({ projectId })).data;\n```\n\n----------------------------------------\n\nTITLE: Using SQLite-based Key-Value Storage with Async API\nDESCRIPTION: Demonstrates how to use the expo-sqlite/kv-store module as a drop-in replacement for @react-native-async-storage/async-storage. This implementation provides key-value storage backed by SQLite with the same async API.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/sqlite.mdx#2025-04-22_snippet_13\n\nLANGUAGE: ts\nCODE:\n```\n// The storage API is the default export, you can call it Storage, AsyncStorage, or whatever you prefer.\nimport Storage from 'expo-sqlite/kv-store';\n\nawait Storage.setItem('key', JSON.stringify({ entity: 'value' }));\nconst value = await Storage.getItem('key');\nconst entity = JSON.parse(value);\nconsole.log(entity); // { entity: 'value' }\n```\n\n----------------------------------------\n\nTITLE: Recording Sounds with expo-av in React Native\nDESCRIPTION: This snippet showcases how to record sounds using the `expo-av` library in a React Native application. It covers requesting permissions, starting and stopping a recording session, and setting audio modes on iOS. Dependencies include `expo-av` and `expo-asset`. Important parameters involve setting recording configurations and switching between recording states. Outputs include the audio file's URI, and it assumes user permission is granted for recording.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/audio-av.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { View, StyleSheet, Button } from 'react-native';\nimport { Audio } from 'expo-av';\n\nexport default function App() {\n  const [recording, setRecording] = useState();\n  const [permissionResponse, requestPermission] = Audio.usePermissions();\n\n  async function startRecording() {\n    try {\n      /* @info */ if (permissionResponse.status !== 'granted') {\n        console.log('Requesting permission..');\n        await requestPermission();\n      }\n      await Audio.setAudioModeAsync({\n        allowsRecordingIOS: true,\n        playsInSilentModeIOS: true,\n      }); /* @end */\n\n      console.log('Starting recording..');\n      /* @info */ const { recording } = await Audio.Recording.createAsync(\n        /* @end */ Audio.RecordingOptionsPresets.HIGH_QUALITY\n      );\n      setRecording(recording);\n      console.log('Recording started');\n    } catch (err) {\n      console.error('Failed to start recording', err);\n    }\n  }\n\n  async function stopRecording() {\n    console.log('Stopping recording..');\n    setRecording(undefined);\n    /* @info */ await recording.stopAndUnloadAsync(); /* @end */\n    /* @info iOS may reroute audio playback to the phone earpiece when recording is allowed, so disable once finished. */ await Audio.setAudioModeAsync(\n      {\n        allowsRecordingIOS: false,\n      }\n    ); /* @end */\n    /* @info */ const uri = recording.getURI(); /* @end */\n    console.log('Recording stopped and stored at', uri);\n  }\n\n  return (\n    <View style={styles.container}>\n      <Button\n        title={recording ? 'Stop Recording' : 'Start Recording'}\n        onPress={recording ? stopRecording : startRecording}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    backgroundColor: '#ecf0f1',\n    padding: 10,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Profiles in EAS JSON\nDESCRIPTION: This JSON snippet demonstrates how to set up build profiles with environment variables in the eas.json file. It defines production and development profiles with different APP_ENV values.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/build/automate-submissions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"production\": {\n      \"env\": {\n        \"APP_ENV\": \"production\"\n      }\n    },\n    \"development\": {\n      \"env\": {\n        \"APP_ENV\": \"development\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Expo Camera Plugin in app.json\nDESCRIPTION: Example configuration for the `expo-camera` config plugin within the `app.json` file. It sets custom permission messages for iOS camera (`NSCameraUsageDescription`) and microphone (`NSMicrophoneUsageDescription`) access and enables the `RECORD_AUDIO` permission on Android. This configuration is applied during the build process (EAS Build or `npx expo run:[android|ios]`).\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/camera-next.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n```json app.json\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-camera\",\n        {\n          \"cameraPermission\": \"Allow $(PRODUCT_NAME) to access your camera\",\n          \"microphonePermission\": \"Allow $(PRODUCT_NAME) to access your microphone\",\n          \"recordAudioAndroid\": true\n        }\n      ]\n    ]\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Basic GLView Implementation in React Native\nDESCRIPTION: This snippet demonstrates how to create a basic OpenGL ES rendering application using expo-gl. It sets up a GLView component, implements an onContextCreate handler that creates vertex and fragment shaders, links them into a program, and renders a single point on a cyan background.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/gl-view.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { View } from 'react-native';\nimport { GLView } from 'expo-gl';\n\nexport default function App() {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <GLView style={{ width: 300, height: 300 }} onContextCreate={onContextCreate} />\n    </View>\n  );\n}\n\nfunction onContextCreate(gl) {\n  gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n  gl.clearColor(0, 1, 1, 1);\n\n  // Create vertex shader (shape & position)\n  const vert = gl.createShader(gl.VERTEX_SHADER);\n  gl.shaderSource(\n    vert,\n    `\n    void main(void) {\n      gl_Position = vec4(0.0, 0.0, 0.0, 1.0);\n      gl_PointSize = 150.0;\n    }\n  `\n  );\n  gl.compileShader(vert);\n\n  // Create fragment shader (color)\n  const frag = gl.createShader(gl.FRAGMENT_SHADER);\n  gl.shaderSource(\n    frag,\n    `\n    void main(void) {\n      gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n    }\n  `\n  );\n  gl.compileShader(frag);\n\n  // Link together into a program\n  const program = gl.createProgram();\n  gl.attachShader(program, vert);\n  gl.attachShader(program, frag);\n  gl.linkProgram(program);\n  gl.useProgram(program);\n\n  gl.clear(gl.COLOR_BUFFER_BIT);\n  gl.drawArrays(gl.POINTS, 0, 1);\n\n  gl.flush();\n  gl.endFrameEXP();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Runtime Version Manually in Expo App Config (JSON)\nDESCRIPTION: This snippet demonstrates how to manually set the runtimeVersion field in an Expo app configuration JSON. The runtimeVersion uniquely identifies the combination of native code and configuration present at build time and determines update compatibility. Required for using remote updates; replace <runtime_version_string> with your desired version. The config should be in your app.json or app.config.js file. Input: none; Output: Expo reads this configuration at build time.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/updates.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"expo\\\": {\\n    \\\"runtimeVersion\\\": \\\"<runtime_version_string>\\\"\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Basic CRUD Operations with expo-sqlite in JavaScript\nDESCRIPTION: Demonstrates basic Create, Read, Update, and Delete operations using expo-sqlite, including executing bulk queries, running individual operations, and retrieving data from the database.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/sqlite.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst db = await SQLite.openDatabaseAsync('databaseName');\n\n// `execAsync()` is useful for bulk queries when you want to execute altogether.\n// Note that `execAsync()` does not escape parameters and may lead to SQL injection.\nawait db.execAsync(`\nPRAGMA journal_mode = WAL;\nCREATE TABLE IF NOT EXISTS test (id INTEGER PRIMARY KEY NOT NULL, value TEXT NOT NULL, intValue INTEGER);\nINSERT INTO test (value, intValue) VALUES ('test1', 123);\nINSERT INTO test (value, intValue) VALUES ('test2', 456);\nINSERT INTO test (value, intValue) VALUES ('test3', 789);\n`);\n\n// `runAsync()` is useful when you want to execute some write operations.\nconst result = await db.runAsync('INSERT INTO test (value, intValue) VALUES (?, ?)', 'aaa', 100);\nconsole.log(result.lastInsertRowId, result.changes);\nawait db.runAsync('UPDATE test SET intValue = ? WHERE value = ?', 999, 'aaa'); // Binding unnamed parameters from variadic arguments\nawait db.runAsync('UPDATE test SET intValue = ? WHERE value = ?', [999, 'aaa']); // Binding unnamed parameters from array\nawait db.runAsync('DELETE FROM test WHERE value = $value', { $value: 'aaa' }); // Binding named parameters from object\n\n// `getFirstAsync()` is useful when you want to get a single row from the database.\nconst firstRow = await db.getFirstAsync('SELECT * FROM test');\nconsole.log(firstRow.id, firstRow.value, firstRow.intValue);\n\n// `getAllAsync()` is useful when you want to get all results as an array of objects.\nconst allRows = await db.getAllAsync('SELECT * FROM test');\nfor (const row of allRows) {\n  console.log(row.id, row.value, row.intValue);\n}\n\n// `getEachAsync()` is useful when you want to iterate SQLite query cursor.\nfor await (const row of db.getEachAsync('SELECT * FROM test')) {\n  console.log(row.id, row.value, row.intValue);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Build and Submit Workflow in YAML\nDESCRIPTION: This snippet shows an EAS Workflow that builds and submits an iOS app on every push to any branch. It includes two jobs: 'build' for creating the iOS build, and 'submit' for submitting it to the App Store.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/workflows/get-started.mdx#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: Release iOS app\n\non:\n  push:\n    branches: ['*']\n\njobs:\n  build:\n    type: build\n    params:\n      platform: ios\n      profile: production\n  submit:\n    needs: [build]\n    type: submit\n    params:\n      build_id: ${{ needs.build.outputs.build_id }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Stripe Plugin in app.json\nDESCRIPTION: Configuration for the Stripe React Native plugin in app.json, including merchantIdentifier for iOS Apple Pay and enableGooglePay flag for Android.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/stripe.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"@stripe/stripe-react-native\",\n        {\n          \"merchantIdentifier\": string | string [],\n          \"enableGooglePay\": boolean\n        }\n      ]\n    ],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Environment-Aware App Configuration\nDESCRIPTION: Enhanced app.config.js with environment variable support to switch between development and production variants.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/build-reference/variants.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst IS_DEV = process.env.APP_VARIANT === 'development';\n\nexport default {\n  name: IS_DEV ? 'MyApp (Dev)' : 'MyApp',\n  slug: 'my-app',\n  ios: {\n    bundleIdentifier: IS_DEV ? 'com.myapp.dev' : 'com.myapp',\n  },\n  android: {\n    package: IS_DEV ? 'com.myapp.dev' : 'com.myapp',\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Location Usage Example in React Native\nDESCRIPTION: Complete example showing how to request location permissions and get the current position in a React Native application using expo-location.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/location.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { Platform, Text, View, StyleSheet } from 'react-native';\nimport * as Location from 'expo-location';\n\nexport default function App() {\n  const [location, setLocation] = useState(null);\n  const [errorMsg, setErrorMsg] = useState(null);\n\n  useEffect(() => {\n    (async () => {\n      let { status } = await Location.requestForegroundPermissionsAsync();\n      if (status !== 'granted') {\n        setErrorMsg('Permission to access location was denied');\n        return;\n      }\n\n      let location = await Location.getCurrentPositionAsync({});\n      setLocation(location);\n    })();\n  }, []);\n\n  let text = 'Waiting..';\n  if (errorMsg) {\n    text = errorMsg;\n  } else if (location) {\n    text = JSON.stringify(location);\n  }\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.paragraph}>{text}</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 20,\n  },\n  paragraph: {\n    fontSize: 18,\n    textAlign: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Image Picker Implementation in React Native\nDESCRIPTION: Complete React Native example showing how to implement image picking functionality. This component allows users to select an image from their device's gallery and display it in the app. It demonstrates how to use the launchImageLibraryAsync method with configuration options.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/imagepicker.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState } from 'react';\nimport { Button, Image, View, StyleSheet } from 'react-native';\nimport * as ImagePicker from 'expo-image-picker';\n\nexport default function ImagePickerExample() {\n  const [image, setImage] = useState<string | null>(null);\n\n  const pickImage = async () => {\n    // No permissions request is necessary for launching the image library\n    let result = await ImagePicker.launchImageLibraryAsync({\n      mediaTypes: ImagePicker.MediaTypeOptions.All,\n      allowsEditing: true,\n      aspect: [4, 3],\n      quality: 1,\n    });\n\n    console.log(result);\n\n    if (!result.canceled) {\n      setImage(result.assets[0].uri);\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      <Button title=\"Pick an image from camera roll\" onPress={pickImage} />\n      {image && <Image source={{ uri: image }} style={styles.image} />}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  image: {\n    width: 200,\n    height: 200,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Downloading and Resuming Files with expo-file-system (JavaScript)\nDESCRIPTION: This snippet demonstrates how to perform file downloads with progress reporting, pause and resume downloads using FileSystem.DownloadResumable, and persist download state across app sessions using AsyncStorage. Dependencies include 'expo-file-system' and 'AsyncStorage'. Key parameters involve the remote URL, a local file URI, and a user-defined progress callback. Inputs are remote file URLs and target paths, output is a saved file URI; error handling is performed for each operation.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/filesystem.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst callback = downloadProgress => {\n  const progress = downloadProgress.totalBytesWritten / downloadProgress.totalBytesExpectedToWrite;\n  this.setState({\n    downloadProgress: progress,\n  });\n};\n\nconst downloadResumable = FileSystem.createDownloadResumable(\n  'http://techslides.com/demos/sample-videos/small.mp4',\n  FileSystem.documentDirectory + 'small.mp4',\n  {},\n  callback\n);\n\ntry {\n  const { uri } = await downloadResumable.downloadAsync();\n  console.log('Finished downloading to ', uri);\n} catch (e) {\n  console.error(e);\n}\n\ntry {\n  await downloadResumable.pauseAsync();\n  console.log('Paused download operation, saving for future retrieval');\n  AsyncStorage.setItem('pausedDownload', JSON.stringify(downloadResumable.savable()));\n} catch (e) {\n  console.error(e);\n}\n\ntry {\n  const { uri } = await downloadResumable.resumeAsync();\n  console.log('Finished downloading to ', uri);\n} catch (e) {\n  console.error(e);\n}\n\n//To resume a download across app restarts, assuming the DownloadResumable.savable() object was stored:\nconst downloadSnapshotJson = await AsyncStorage.getItem('pausedDownload');\nconst downloadSnapshot = JSON.parse(downloadSnapshotJson);\nconst downloadResumable = new FileSystem.DownloadResumable(\n  downloadSnapshot.url,\n  downloadSnapshot.fileUri,\n  downloadSnapshot.options,\n  callback,\n  downloadSnapshot.resumeData\n);\n\ntry {\n  const { uri } = await downloadResumable.resumeAsync();\n  console.log('Finished downloading to ', uri);\n} catch (e) {\n  console.error(e);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Parsing Deep Link URLs in React Native with Expo Linking\nDESCRIPTION: This snippet shows how to use Linking.parse() to extract the hostname, path, and query parameters from a deep link URL. It logs the parsed information to the console.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/linking/into-your-app.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as Linking from 'expo-linking';\n\nexport default function Home() {\n  const url = Linking.useURL();\n\n  if (url) {\n    const { hostname, path, queryParams } = Linking.parse(url);\n\n    console.log(\n      `Linked to app with hostname: ${hostname}, path: ${path} and data: ${JSON.stringify(\n        queryParams\n      )}`\n    );\n  }\n\n  return (\n    /* @hide Your React component here. */ /* @end */\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Short Interval for Android Background Fetch Testing\nDESCRIPTION: This TypeScript code snippet shows how to modify the `registerBackgroundFetchAsync` function to set a very short `minimumInterval` (1 minute) when registering a background fetch task. This configuration is useful during development on Android to trigger the task more frequently for testing purposes after the app is backgrounded.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/background-fetch.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nasync function registerBackgroundFetchAsync() {\n  return BackgroundFetch.registerTaskAsync(BACKGROUND_FETCH_TASK, {\n    minimumInterval: 1 * 60, // task will fire 1 minute after app is backgrounded\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Importing APISection Component in JavaScript/TypeScript\nDESCRIPTION: Imports the `APISection` component from a local project path '~/components/plugins/APISection'. This component is part of the documentation website's infrastructure, used for rendering structured API documentation sections.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/updates.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport APISection from '~/components/plugins/APISection';\n```\n\n----------------------------------------\n\nTITLE: Accessing Array Parameters from URL Search String - Expo Router - TypeScript\nDESCRIPTION: This code snippet (not yet production, per TODO) demonstrates how multiple occurrences of a search parameter in the URL are grouped into an array when accessed via useLocalSearchParams. It shows how, for a URL like /route?myParam=1&myParam=2, the 'myParam' variable will be an array [\"1\", \"2\"]. Requires expo-router. The component does not render output but shows the grouping logic, supporting scenarios where parameters repeat in the search string.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/reference/url-parameters.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { router, useLocalSearchParams } from 'expo-router';\n\nexport default function Route() {\n  // If the current URL is `/route?myParam=1&myParam=2\n  const { myParam } = useLocalSearchParams();\n  // myParam === [\"1\", \"2\"]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Saving and Retrieving Key-Value Pairs Securely using expo-secure-store (React Native / JSX)\nDESCRIPTION: Implements a React Native app to demonstrate how to store and retrieve encrypted key-value pairs using expo-secure-store on Android/iOS. Dependencies include expo-secure-store and react-native components. Users input a key and value, save them securely, and later retrieve values by key via UI elements. Supports both saving and fetching logic with user prompts; input is managed via useState, and alerts give feedback. Storage size is capped at 2048 bytes per value. Outputs are shown via alert popups.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/securestore.mdx#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\\nimport { Text, View, StyleSheet, TextInput, Button } from 'react-native';\\nimport * as SecureStore from 'expo-secure-store';\\n\\nasync function save(key, value) {\\n  await SecureStore.setItemAsync(key, value);\\n}\\n\\nasync function getValueFor(key) {\\n  let result = await SecureStore.getItemAsync(key);\\n  if (result) {\\n    alert(\"\\ud83d\\udd10 Here's your value \\ud83d\\udd10 \\n\" + result);\\n  } else {\\n    alert('No values stored under that key.');\\n  }\\n}\\n\\nexport default function App() {\\n  const [key, onChangeKey] = useState('Your key here');\\n  const [value, onChangeValue] = useState('Your value here');\\n\\n  return (\\n    <View style={styles.container}>\\n      <Text style={styles.paragraph}>Save an item, and grab it later!</Text>\\n      {/* @hide Add some TextInput components... */}\\n\\n      <TextInput\\n        style={styles.textInput}\\n        clearTextOnFocus\\n        onChangeText={text => onChangeKey(text)}\\n        value={key}\\n      />\\n      <TextInput\\n        style={styles.textInput}\\n        clearTextOnFocus\\n        onChangeText={text => onChangeValue(text)}\\n        value={value}\\n      />\\n      {/* @end */}\\n      <Button\\n        title=\"Save this key/value pair\"\\n        onPress={() => {\\n          save(key, value);\\n          onChangeKey('Your key here');\\n          onChangeValue('Your value here');\\n        }}\\n      />\\n      <Text style={styles.paragraph}>\\ud83d\\udd10 Enter your key \\ud83d\\udd10</Text>\\n      <TextInput\\n        style={styles.textInput}\\n        onSubmitEditing={event => {\\n          getValueFor(event.nativeEvent.text);\\n        }}\\n        placeholder=\"Enter the key for the value you want to get\"\\n      />\\n    </View>\\n  );\\n}\\n\\nconst styles = StyleSheet.create({\\n  container: {\\n    flex: 1,\\n    justifyContent: 'center',\\n    paddingTop: 10,\\n    backgroundColor: '#ecf0f1',\\n    padding: 8,\\n  },\\n  paragraph: {\\n    marginTop: 34,\\n    margin: 24,\\n    fontSize: 18,\\n    fontWeight: 'bold',\\n    textAlign: 'center',\\n  },\\n  textInput: {\\n    height: 35,\\n    borderColor: 'gray',\\n    borderWidth: 0.5,\\n    padding: 4,\\n  },\\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Background Tasks in React Native with Expo\nDESCRIPTION: A complete example demonstrating how to register, unregister, and manage background tasks using expo-background-task and expo-task-manager in a React Native application.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/background-task.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as BackgroundTask from 'expo-background-task';\nimport * as TaskManager from 'expo-task-manager';\nimport { useEffect, useState } from 'react';\nimport { StyleSheet, Text, View, Button } from 'react-native';\n\nconst BACKGROUND_TASK_IDENTIFIER = 'background-task';\n\n// Register and create the task so that it is available also when the background task screen\n// (a React component defined later in this example) is not visible.\n// Note: This needs to be called in the global scope, not in a React component.\nTaskManager.defineTask(BACKGROUND_TASK_IDENTIFIER, async () => {\n  try {\n    const now = Date.now();\n    console.log(`Got background task call at date: ${new Date(now).toISOString()}`);\n  } catch (error) {\n    console.error('Failed to execute the background task:', error);\n    return BackgroundTask.BackgroundTaskResult.Failed;\n  }\n  return BackgroundTask.BackgroundTaskResult.Success;\n});\n\n// 2. Register the task at some point in your app by providing the same name\n// Note: This does NOT need to be in the global scope and CAN be used in your React components!\nasync function registerBackgroundTaskAsync() {\n  return BackgroundTask.registerTaskAsync(BACKGROUND_TASK_IDENTIFIER);\n}\n\n// 3. (Optional) Unregister tasks by specifying the task name\n// This will cancel any future background task calls that match the given name\n// Note: This does NOT need to be in the global scope and CAN be used in your React components!\nasync function unregisterBackgroundTaskAsync() {\n  return BackgroundTask.unregisterTaskAsync(BACKGROUND_TASK_IDENTIFIER);\n}\n\nexport default function BackgroundTaskScreen() {\n  const [isRegistered, setIsRegistered] = useState<boolean>(false);\n  const [status, setStatus] = useState<BackgroundTask.BackgroundTaskStatus | null>(null);\n\n  useEffect(() => {\n    checkStatusAsync();\n  }, []);\n\n  const checkStatusAsync = async () => {\n    const status = await BackgroundTask.getStatusAsync();\n    setStatus(status);\n  };\n\n  const toggle = async () => {\n    if (isRegistered) {\n      await registerBackgroundTaskAsync();\n    } else {\n      await unregisterBackgroundTaskAsync();\n    }\n    setIsRegistered(!isRegistered);\n  };\n\n  return (\n    <View style={styles.screen}>\n      <View style={styles.textContainer}>\n        <Text>\n          Background Task Service Availability:{' '}\n          <Text style={styles.boldText}>\n            {status ? BackgroundTask.BackgroundTaskStatus[status] : null}\n          </Text>\n        </Text>\n      </View>\n      <Button\n        disabled={status === BackgroundTask.BackgroundTaskStatus.Restricted}\n        title={isRegistered ? 'Cancel Background Task' : 'Schedule Background Task'}\n        onPress={toggle}\n      />\n      <Button title=\"Check Background Task Status\" onPress={checkStatusAsync} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  screen: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  textContainer: {\n    margin: 10,\n  },\n  boldText: {\n    fontWeight: 'bold',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Managing and Caching GIF Files with expo-file-system (JavaScript/TypeScript)\nDESCRIPTION: This snippet provides utilities for caching GIF images from Giphy locally using expo-file-system to optimize network usage and enable offline access. Functions include managing the cache directory, downloading multiple GIFs, fetching a single GIF (downloading and caching if not present), getting a content URI for sharing, and deleting all cached files. It requires 'expo-file-system' and is compatible with both JavaScript and TypeScript. Inputs are Giphy IDs, outputs are local or shareable URIs; all operations are asynchronous and handle directory state.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/filesystem.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as FileSystem from 'expo-file-system';\n\nconst gifDir = FileSystem.cacheDirectory + 'giphy/';\nconst gifFileUri = (gifId: string) => gifDir + `gif_${gifId}_200.gif`;\nconst gifUrl = (gifId: string) => `https://media1.giphy.com/media/${gifId}/200.gif`;\n\n// Checks if gif directory exists. If not, creates it\nasync function ensureDirExists() {\n  const dirInfo = await FileSystem.getInfoAsync(gifDir);\n  if (!dirInfo.exists) {\n    console.log(\"Gif directory doesn't exist, creating…\");\n    await FileSystem.makeDirectoryAsync(gifDir, { intermediates: true });\n  }\n}\n\n// Downloads all gifs specified as array of IDs\nexport async function addMultipleGifs(gifIds: string[]) {\n  try {\n    await ensureDirExists();\n\n    console.log('Downloading', gifIds.length, 'gif files…');\n    await Promise.all(gifIds.map(id => FileSystem.downloadAsync(gifUrl(id), gifFileUri(id))));\n  } catch (e) {\n    console.error(\"Couldn't download gif files:\", e);\n  }\n}\n\n// Returns URI to our local gif file\n// If our gif doesn't exist locally, it downloads it\nexport async function getSingleGif(gifId: string) {\n  await ensureDirExists();\n\n  const fileUri = gifFileUri(gifId);\n  const fileInfo = await FileSystem.getInfoAsync(fileUri);\n\n  if (!fileInfo.exists) {\n    console.log(\"Gif isn't cached locally. Downloading…\");\n    await FileSystem.downloadAsync(gifUrl(gifId), fileUri);\n  }\n\n  return fileUri;\n}\n\n// Exports shareable URI - it can be shared outside your app\nexport async function getGifContentUri(gifId: string) {\n  return FileSystem.getContentUriAsync(await getSingleGif(gifId));\n}\n\n// Deletes whole giphy directory with all its content\nexport async function deleteAllGifs() {\n  console.log('Deleting all GIF files…');\n  await FileSystem.deleteAsync(gifDir);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Tab Navigation Layout in Expo Router\nDESCRIPTION: Creates a tab navigator layout using Expo Router's Tabs component. Defines the structure for navigating between home and settings sections.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/file-based-routing.mdx#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Tabs } from 'expo-router';\n\nexport default function TabLayout() {\n  return (\n    <Tabs>\n      <Tabs.Screen name=\"(home)\" />\n      <Tabs.Screen name=\"settings\" />\n    </Tabs>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Background Location Tracking with TaskManager and Location\nDESCRIPTION: This React Native code demonstrates how to use expo-task-manager and expo-location to implement background location tracking. It includes requesting permissions, defining a background task, and rendering a button to enable the feature.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/task-manager.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Button, View, StyleSheet } from 'react-native';\nimport * as TaskManager from 'expo-task-manager';\nimport * as Location from 'expo-location';\n\nconst LOCATION_TASK_NAME = 'background-location-task';\n\nconst requestPermissions = async () => {\n  const { status: foregroundStatus } = await Location.requestForegroundPermissionsAsync();\n  if (foregroundStatus === 'granted') {\n    const { status: backgroundStatus } = await Location.requestBackgroundPermissionsAsync();\n    if (backgroundStatus === 'granted') {\n      await Location.startLocationUpdatesAsync(LOCATION_TASK_NAME, {\n        accuracy: Location.Accuracy.Balanced,\n      });\n    }\n  }\n};\n\nconst PermissionsButton = () => (\n  <View style={styles.container}>\n    <Button onPress={requestPermissions} title=\"Enable background location\" />\n  </View>\n);\n\nTaskManager.defineTask(LOCATION_TASK_NAME, ({ data, error }) => {\n  if (error) {\n    // Error occurred - check `error.message` for more details.\n    return;\n  }\n  if (data) {\n    const { locations } = data;\n    // do something with the locations captured in the background\n  }\n});\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n\nexport default PermissionsButton;\n```\n\n----------------------------------------\n\nTITLE: Uploading Files as Blobs with expo/fetch in TypeScript\nDESCRIPTION: Shows how to convert a file to a blob and upload it directly using fetch from the Expo package. Creates a text file, converts it to a blob, and sends it in a POST request.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/filesystem-next.mdx#2025-04-22_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { fetch } from 'expo/fetch';\nimport { File } from 'expo-file-system/next';\n\nconst src = new File(testDirectory, 'file.txt');\nfile.write('Hello, world!');\nconst blob = src.blob();\n\nconst response = await fetch('https://example.com', {\n  method: 'POST',\n  body: blob,\n});\n```\n\n----------------------------------------\n\nTITLE: EAS Workflow for Submitting Android App\nDESCRIPTION: This YAML snippet configures an EAS Workflow to automatically build and submit an Android app to the Google Play Store when a push occurs on the `main` branch.  It defines two jobs: `build_android` for building the app and `submit_android` for submitting it.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/submit/android.mdx#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  push:\n    branches: ['main']\n\njobs:\n  build_android:\n    name: Build Android app\n    type: build\n    params:\n      platform: android\n      profile: production\n\n  # @info #\n  submit_android:\n    name: Submit to Google Play Store\n    needs: [build_android]\n    type: submit\n    params:\n      platform: android\n      build_id: ${{ needs.build_android.outputs.build_id }}\n  # @end #\n```\n\n----------------------------------------\n\nTITLE: Button Component with onPress Handler in TypeScript\nDESCRIPTION: Defines a React Native Button component, which invokes the 'pickImageAsync' function when pressed. The component uses styled components and allows for an optional 'onPress' function to be executed upon a button press. No dependencies outside React Native and FontAwesome are required.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/image-picker.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default function Button({ label, theme, onPress }: Props) {\n  if (theme === 'primary') {\n    return (\n      <View style={[styles.buttonContainer, {...}]}>...\n        <Pressable style={[styles.button, {...}]} onPress={onPress}>...\n          <Text style={[styles.buttonLabel, {...}]}>{label}</Text>\n        </Pressable>\n      </View>\n    );\n  }\n\n  return (...\n);\n```\n\n----------------------------------------\n\nTITLE: Using Secrets in Server Components with Environment Variables\nDESCRIPTION: Demonstrates how to access and use secrets in Server Components using environment variables. It shows how to protect server-only code using the 'server-only' package and how to define secrets in an .env file.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/server-components.mdx#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n// This will assert if the module runs on the client.\nimport 'server-only';\n\nimport { Text } from 'react-native';\n\nexport async function renderData() {\n  // This code only runs on the server.\n  const data = await fetch('https://my-endpoint/', {\n    headers: {\n      Authorization: `Bearer ${process.env.SECRET}`,\n    },\n  });\n\n  // ...\n  return <div />;\n}\n```\n\nLANGUAGE: text\nCODE:\n```\nSECRET=123\n```\n\n----------------------------------------\n\nTITLE: Dynamic Route Parameter Typing\nDESCRIPTION: Examples of typed dynamic routes with parameter validation in TypeScript.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/reference/typed-routes.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n✅ <Link href={{ pathname: \"/user/[id]\", params: { id: 1 }}} />\n// TypeScript errors as href is valid, but it should be a HrefObject with params\n❌ <Link href=\"/user/[id]\" />\n// TypeScript errors as params contain invalid keys\n❌ <Link href={{ pathname: \"/user/[id]\", params: { _id: 1 }}} />\n// TypeScript errors as params contain unknown keys\n❌ <Link href={{ pathname: \"/user/[id]\", params: { id: 1, id2: 2 }}} />\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Video Playback with Controls using expo-video in React Native\nDESCRIPTION: A simple React Native component demonstrating basic video playback using `expo-video`. It utilizes the `useVideoPlayer` hook to create and manage a player instance for a remote video source, `VideoView` to render the video UI with fullscreen and PiP options enabled, and the `useEvent` hook to track the `playingChange` event for updating the play/pause button state.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/video.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEvent } from 'expo';\nimport { useVideoPlayer, VideoView } from 'expo-video';\nimport { StyleSheet, View, Button } from 'react-native';\n\nconst videoSource =\n  'https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4';\n\nexport default function VideoScreen() {\n  const player = useVideoPlayer(videoSource, player => {\n    player.loop = true;\n    player.play();\n  });\n\n  const { isPlaying } = useEvent(player, 'playingChange', { isPlaying: player.playing });\n\n  return (\n    <View style={styles.contentContainer}>\n      <VideoView style={styles.video} player={player} allowsFullscreen allowsPictureInPicture />\n      <View style={styles.controlsContainer}>\n        <Button\n          title={isPlaying ? 'Pause' : 'Play'}\n          onPress={() => {\n            if (isPlaying) {\n              player.pause();\n            } else {\n              player.play();\n            }\n          }}\n        />\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  contentContainer: {\n    flex: 1,\n    padding: 10,\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingHorizontal: 50,\n  },\n  video: {\n    width: 350,\n    height: 275,\n  },\n  controlsContainer: {\n    padding: 10,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring PaymentSheet Localization for iOS in Expo app.json\nDESCRIPTION: JSON configuration for enabling PaymentSheet localization on iOS in an Expo project's app.json file. It shows how to set CFBundleAllowMixedLocalizations and CFBundleLocalizations.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/stripe.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"ios\": {\n      \"infoPlist\": {\n        \"CFBundleAllowMixedLocalizations\": true,\n        \"CFBundleLocalizations\": [\"fr\"]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Photo Library Permissions to iOS Info.plist\nDESCRIPTION: XML configuration for iOS Info.plist to add required NSPhotoLibraryUsageDescription and NSPhotoLibraryAddUsageDescription keys for photo access.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/media-library.mdx#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<key>NSPhotoLibraryUsageDescription</key>\n<string>Give $(PRODUCT_NAME) permission to access your photos</string>\n<key>NSPhotoLibraryAddUsageDescription</key>\n<string>Give $(PRODUCT_NAME) permission to save photos</string>\n```\n\n----------------------------------------\n\nTITLE: Executing Queries within an Async Transaction in SQLite\nDESCRIPTION: Demonstrates how to execute SQL queries within an asynchronous transaction using the withTransactionAsync method. This approach ensures atomicity for database operations, where either all operations succeed or none do.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/sqlite.mdx#2025-04-22_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nconst db = await SQLite.openDatabaseAsync('databaseName');\n\nawait db.withTransactionAsync(async () => {\n  const result = await db.getFirstAsync('SELECT COUNT(*) FROM USERS');\n  console.log('Count:', result.rows[0]['COUNT(*)']);\n});\n```\n\n----------------------------------------\n\nTITLE: Sending FCMv1 Notification (TypeScript)\nDESCRIPTION: This function demonstrates how to send a notification using FCMv1 API. It obtains an access token, constructs the notification payload, and sends a POST request to the FCM endpoint.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/push-notifications/sending-notifications-custom.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nasync function sendFCMv1Notification() {\n  const key = require(process.env.FCM_SERVER_KEY);\n  const firebaseAccessToken = await getAccessTokenAsync(key);\n  const deviceToken = process.env.FCM_DEVICE_TOKEN;\n\n  const messageBody = {\n    message: {\n      token: deviceToken,\n      data: {\n        channelId: 'default',\n        message: 'Testing',\n        title: `This is an FCM notification message`,\n        body: JSON.stringify({ title: 'bodyTitle', body: 'bodyBody' }),\n        scopeKey: '@yourExpoUsername/yourProjectSlug',\n        experienceId: '@yourExpoUsername/yourProjectSlug',\n      },\n    },\n  };\n\n  const response = await fetch(\n    `https://fcm.googleapis.com/v1/projects/${process.env.FCM_PROJECT_NAME}/messages:send`,\n    {\n      method: 'POST',\n      headers: {\n        Authorization: `Bearer ${firebaseAccessToken}`,\n        Accept: 'application/json',\n        'Accept-encoding': 'gzip, deflate',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(messageBody),\n    }\n  );\n\n  const readResponse = (response: Response) => response.json();\n  const json = await readResponse(response);\n\n  console.log(`Response JSON: ${JSON.stringify(json, null, 2)}`);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Shared Container for SQLite Database on iOS\nDESCRIPTION: Demonstrates how to access a shared container directory on iOS to store a SQLite database that can be shared between apps or extensions in the same App Group using expo-file-system's Paths API.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/sqlite.mdx#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SQLiteProvider, defaultDatabaseDirectory } from 'expo-sqlite';\nimport { Paths } from 'expo-file-system/next';\nimport { useMemo } from 'react';\nimport { Platform, View } from 'react-native';\n\nexport default function App() {\n  const dbDirectory = useMemo(() => {\n    if (Platform.OS === 'ios') {\n      return Object.values(Paths.appleSharedContainers)?.[0]?.uri;\n      // or `Paths.appleSharedContainers['group.com.myapp']?.uri` to choose specific container\n    }\n    return defaultDatabaseDirectory;\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <SQLiteProvider databaseName=\"test.db\" directory={dbDirectory}>\n        <Header />\n        <Content />\n      </SQLiteProvider>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Background Fetch in React Native with Expo\nDESCRIPTION: This snippet demonstrates how to use expo-background-fetch to register and manage background fetch tasks in a React Native application. It includes task definition, registration, and a component to control the background fetch status.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/background-fetch.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { StyleSheet, Text, View, Button } from 'react-native';\nimport * as BackgroundFetch from 'expo-background-fetch';\nimport * as TaskManager from 'expo-task-manager';\n\nconst BACKGROUND_FETCH_TASK = 'background-fetch';\n\n// 1. Define the task by providing a name and the function that should be executed\n// Note: This needs to be called in the global scope (e.g outside of your React components)\nTaskManager.defineTask(BACKGROUND_FETCH_TASK, async () => {\n  const now = Date.now();\n\n  console.log(`Got background fetch call at date: ${new Date(now).toISOString()}`);\n\n  // Be sure to return the successful result type!\n  return BackgroundFetch.BackgroundFetchResult.NewData;\n});\n\n// 2. Register the task at some point in your app by providing the same name,\n// and some configuration options for how the background fetch should behave\n// Note: This does NOT need to be in the global scope and CAN be used in your React components!\nasync function registerBackgroundFetchAsync() {\n  return BackgroundFetch.registerTaskAsync(BACKGROUND_FETCH_TASK, {\n    minimumInterval: 60 * 15, // 15 minutes\n    stopOnTerminate: false, // android only,\n    startOnBoot: true, // android only\n  });\n}\n\n// 3. (Optional) Unregister tasks by specifying the task name\n// This will cancel any future background fetch calls that match the given name\n// Note: This does NOT need to be in the global scope and CAN be used in your React components!\nasync function unregisterBackgroundFetchAsync() {\n  return BackgroundFetch.unregisterTaskAsync(BACKGROUND_FETCH_TASK);\n}\n\nexport default function BackgroundFetchScreen() {\n  const [isRegistered, setIsRegistered] = useState(false);\n  const [status, setStatus] = useState(null);\n\n  useEffect(() => {\n    checkStatusAsync();\n  }, []);\n\n  const checkStatusAsync = async () => {\n    const status = await BackgroundFetch.getStatusAsync();\n    const isRegistered = await TaskManager.isTaskRegisteredAsync(BACKGROUND_FETCH_TASK);\n    setStatus(status);\n    setIsRegistered(isRegistered);\n  };\n\n  const toggleFetchTask = async () => {\n    if (isRegistered) {\n      await unregisterBackgroundFetchAsync();\n    } else {\n      await registerBackgroundFetchAsync();\n    }\n\n    checkStatusAsync();\n  };\n\n  return (\n    <View style={styles.screen}>\n      <View style={styles.textContainer}>\n        <Text>\n          Background fetch status:{' '}\n          <Text style={styles.boldText}>\n            {status && BackgroundFetch.BackgroundFetchStatus[status]}\n          </Text>\n        </Text>\n        <Text>\n          Background fetch task name:{' '}\n          <Text style={styles.boldText}>\n            {isRegistered ? BACKGROUND_FETCH_TASK : 'Not registered yet!'}\n          </Text>\n        </Text>\n      </View>\n      <View style={styles.textContainer}></View>\n      <Button\n        title={isRegistered ? 'Unregister BackgroundFetch task' : 'Register BackgroundFetch task'}\n        onPress={toggleFetchTask}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  screen: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  textContainer: {\n    margin: 10,\n  },\n  boldText: {\n    fontWeight: 'bold',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Complete SecureStore Usage Example in React Native\nDESCRIPTION: A complete example of using expo-secure-store to save, retrieve, and display securely stored data in a React Native application with text inputs and buttons.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/securestore.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { Text, View, StyleSheet, TextInput, Button } from 'react-native';\nimport * as SecureStore from 'expo-secure-store';\n\nasync function save(key, value) {\n  await SecureStore.setItemAsync(key, value);\n}\n\nasync function getValueFor(key) {\n  let result = await SecureStore.getItemAsync(key);\n  if (result) {\n    alert(\"🔐 Here's your value 🔐 \\n\" + result);\n  } else {\n    alert('No values stored under that key.');\n  }\n}\n\nexport default function App() {\n  const [key, onChangeKey] = useState('Your key here');\n  const [value, onChangeValue] = useState('Your value here');\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.paragraph}>Save an item, and grab it later!</Text>\n      {/* @hide Add some TextInput components... */}\n\n      <TextInput\n        style={styles.textInput}\n        clearTextOnFocus\n        onChangeText={text => onChangeKey(text)}\n        value={key}\n      />\n      <TextInput\n        style={styles.textInput}\n        clearTextOnFocus\n        onChangeText={text => onChangeValue(text)}\n        value={value}\n      />\n      {/* @end */}\n      <Button\n        title=\"Save this key/value pair\"\n        onPress={() => {\n          save(key, value);\n          onChangeKey('Your key here');\n          onChangeValue('Your value here');\n        }}\n      />\n      <Text style={styles.paragraph}>🔐 Enter your key 🔐</Text>\n      <TextInput\n        style={styles.textInput}\n        onSubmitEditing={event => {\n          getValueFor(event.nativeEvent.text);\n        }}\n        placeholder=\"Enter the key for the value you want to get\"\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    paddingTop: 10,\n    backgroundColor: '#ecf0f1',\n    padding: 8,\n  },\n  paragraph: {\n    marginTop: 34,\n    margin: 24,\n    fontSize: 18,\n    fontWeight: 'bold',\n    textAlign: 'center',\n  },\n  textInput: {\n    height: 35,\n    borderColor: 'gray',\n    borderWidth: 0.5,\n    padding: 4,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Executing PRAGMA Queries with SQLite in JavaScript\nDESCRIPTION: Shows how to execute PRAGMA queries to configure SQLite database settings, such as setting the journal mode to WAL and enabling foreign key constraints.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/sqlite-next.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst db = await SQLite.openDatabaseAsync('databaseName');\nawait db.execAsync('PRAGMA journal_mode = WAL');\nawait db.execAsync('PRAGMA foreign_keys = ON');\n```\n\n----------------------------------------\n\nTITLE: Executing SQLite Queries with Async Transaction in Expo\nDESCRIPTION: Example of how to execute SQL statements asynchronously using transactions in expo-sqlite. This approach is recommended for most database operations.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/sqlite-legacy.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as SQLite from 'expo-sqlite/legacy';\n\nconst db = SQLite.openDatabase('dbName', version);\n\nconst readOnly = true;\nawait db.transactionAsync(async tx => {\n  const result = await tx.executeSqlAsync('SELECT COUNT(*) FROM USERS', []);\n  console.log('Count:', result.rows[0]['COUNT(*)']);\n}, readOnly);\n```\n\n----------------------------------------\n\nTITLE: Manually Checking for Expo Updates in a React Native App (JSX)\nDESCRIPTION: This React Native code snippet demonstrates how to configure an app to check for updates manually using the 'expo-updates' API. It imports required dependencies from 'react-native' and 'expo-updates', provides an async update check/download/reload workflow, and displays a button to trigger the update process. Key parameters include the various expo-updates functions and a catch handler to display errors. The function expects Expo environment setup and requires either 'ON_ERROR_RECOVERY' or 'NEVER' in config to disable automatic update checks.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/updates.mdx#2025-04-22_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport { View, Button } from 'react-native';\nimport * as Updates from 'expo-updates';\n\nfunction App() {\n  async function onFetchUpdateAsync() {\n    try {\n      const update = await Updates.checkForUpdateAsync();\n\n      if (update.isAvailable) {\n        await Updates.fetchUpdateAsync();\n        await Updates.reloadAsync();\n      }\n    } catch (error) {\n      // You can also add an alert() to see the error message in case of an error when fetching updates.\n      alert(`Error fetching latest Expo update: ${error}`);\n    }\n  }\n\n  return (\n    <View>\n      <Button title=\"Fetch update\" onPress={onFetchUpdateAsync} />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Queries in Async Transaction with SQLite in JavaScript\nDESCRIPTION: Demonstrates how to open a SQLite database and execute queries within an asynchronous transaction using the withTransactionAsync method. This snippet also shows how to retrieve and log query results.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/sqlite-next.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst db = await SQLite.openDatabaseAsync('databaseName');\n\nawait db.withTransactionAsync(async () => {\n  const result = await db.getFirstAsync('SELECT COUNT(*) FROM USERS');\n  console.log('Count:', result.rows[0]['COUNT(*)']);\n});\n```\n\n----------------------------------------\n\nTITLE: Hiding a Tab in Expo Router\nDESCRIPTION: This code shows how to hide a specific tab from the tab bar by setting the 'href' option to null in the tab's screen options.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/advanced/tabs.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Tabs } from 'expo-router';\n\nexport default function TabLayout() {\n  return (\n    <Tabs>\n      <Tabs.Screen\n        name=\"index\"\n        options={{\n          href: null,\n        }}\n      />\n    </Tabs>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Index Screen in React Native\nDESCRIPTION: Update the app/index.tsx file to customize the home screen with new styles and text content using React Native components.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/create-your-first-app.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Text, View, StyleSheet } from 'react-native';\n\nexport default function Index() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.text}>Home screen</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#25292e',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  text: {\n    color: '#fff',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json for Custom Entry File\nDESCRIPTION: JSON configuration for setting a custom main entry file in package.json when not using the default App.js or app/_layout.tsx files.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/register-root-component.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"main\": \"src/main.jsx\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using the plugins Array in app.config.js for Chaining\nDESCRIPTION: Shows how to use the plugins array in app.config.js to chain multiple plugins, which internally uses withPlugins.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/config-plugins/plugins-and-mods.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  name: 'my app',\n  plugins: [\n    [withBar, 'input 1'],\n    [withFoo, 'input 2'],\n    [withDelta, 'input 3'],\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Android 11- Auto Backup Exclusions (XML)\nDESCRIPTION: Provides an XML full-backup-content structure to exclude SecureStore data from backup for devices below Android 12. This prevents loss of cryptographic keys required to decrypt SecureStore values after reinstallation/restoration. Intended for inclusion as res/xml/full_backup_content.xml and referenced in AndroidManifest.xml when customizing backup configuration.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/securestore.mdx#2025-04-22_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<full-backup-content>\n  <include domain=\"sharedpref\" path=\".\"/>\n  <exclude domain=\"sharedpref\" path=\"SecureStore\"/>\n</full-backup-content>\n```\n\n----------------------------------------\n\nTITLE: Implementing Background Location Updates with TaskManager in React Native\nDESCRIPTION: This snippet demonstrates how to use TaskManager and Location modules to implement background location tracking in a React Native app. It includes requesting permissions, defining a background task, and a button component to enable the feature.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/task-manager.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Button, View, StyleSheet } from 'react-native';\nimport * as TaskManager from 'expo-task-manager';\nimport * as Location from 'expo-location';\n\nconst LOCATION_TASK_NAME = 'background-location-task';\n\nconst requestPermissions = async () => {\n  const { status: foregroundStatus } = await Location.requestForegroundPermissionsAsync();\n  if (foregroundStatus === 'granted') {\n    const { status: backgroundStatus } = await Location.requestBackgroundPermissionsAsync();\n    if (backgroundStatus === 'granted') {\n      await Location.startLocationUpdatesAsync(LOCATION_TASK_NAME, {\n        accuracy: Location.Accuracy.Balanced,\n      });\n    }\n  }\n};\n\nconst PermissionsButton = () => (\n  <View style={styles.container}>\n    <Button onPress={requestPermissions} title=\"Enable background location\" />\n  </View>\n);\n\nTaskManager.defineTask(LOCATION_TASK_NAME, ({ data, error }) => {\n  if (error) {\n    // Error occurred - check `error.message` for more details.\n    return;\n  }\n  if (data) {\n    const { locations } = data;\n    // do something with the locations captured in the background\n  }\n});\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n\nexport default PermissionsButton;\n```\n\n----------------------------------------\n\nTITLE: Implementing Push Notification Navigation with Expo Router\nDESCRIPTION: Sets up push notification handling with deep linking in Expo Router by implementing a notification observer in the root layout. Handles both initial and runtime notifications, redirecting to specified URLs.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/notifications.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useEffect } from 'react';\nimport * as Notifications from 'expo-notifications';\nimport { router } from 'expo-router';\n\nfunction useNotificationObserver() {\n  useEffect(() => {\n    let isMounted = true;\n\n    function redirect(notification: Notifications.Notification) {\n      const url = notification.request.content.data?.url;\n      if (url) {\n        router.push(url);\n      }\n    }\n\n    Notifications.getLastNotificationResponseAsync()\n      .then(response => {\n        if (!isMounted || !response?.notification) {\n          return;\n        }\n        redirect(response?.notification);\n      });\n\n    const subscription = Notifications.addNotificationResponseReceivedListener(response => {\n      redirect(response.notification);\n    });\n\n    return () => {\n      isMounted = false;\n      subscription.remove();\n    };\n  }, []);\n}\n\nexport default function Layout() {\n  useNotificationObserver();\n  return <Slot />;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Module Properties in JavaScript\nDESCRIPTION: Demonstrates how to access and modify properties from a native module in JavaScript code. Properties are accessed directly on the module object.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/module-api.mdx#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport { requireNativeModule } from 'expo-modules-core';\n\n// Assume that we have named the module \"MyModule\"\nconst MyModule = requireNativeModule('MyModule');\n\n// Obtain the property value\nMyModule.foo;\n\n// Set a new value\nMyModule.foo = 'foobar';\n```\n\n----------------------------------------\n\nTITLE: Applying Safe Area Insets Universally with useSafeAreaInsets Hook (JSX)\nDESCRIPTION: Shows the universal approach using `react-native-safe-area-context` to handle safe area insets, replacing web-specific CSS. The `useSafeAreaInsets` hook provides the inset values, which are then applied as padding to a `View` component's style prop, ensuring consistent behavior across platforms.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/safe-area-context.mdx#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n// App.js\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\n\nfunction App() {\n  const insets = useSafeAreaInsets();\n  return (\n    <View\n      style={{\n        paddingTop: insets.top,\n        paddingLeft: insets.left,\n        paddingBottom: insets.bottom,\n        paddingRight: insets.right,\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Android and iOS Build Properties in app.config.js\nDESCRIPTION: This JavaScript snippet shows how to configure the expo-build-properties plugin in an Expo app using app.config.js, detailing build properties for Android and iOS. It requires an active Expo CLI and is intended for projects that implement native directories via npx expo prebuild. Configuration necessitates specific Android and iOS build settings.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/build-properties.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  expo: {\n    plugins: [\n      [\n        'expo-build-properties',\n        {\n          android: {\n            compileSdkVersion: 35,\n            targetSdkVersion: 35,\n            buildToolsVersion: '35.0.0',\n          },\n          ios: {\n            deploymentTarget: '15.1',\n          },\n        },\n      ],\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing Route Parameters in Expo Router\nDESCRIPTION: Demonstrates how to access route parameters in the destination page using the useLocalSearchParams hook. This example shows how to retrieve both dynamic route variables and query parameters.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/basics/navigation.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useLocalSearchParams } from 'expo-router';\nimport { View, Text } from 'react-native';\n\nexport default function Users() {\n  const { id, limit } = useLocalSearchParams();\n\n  return (\n    <View>\n      <Text>User ID: {id}</Text>\n      <Text>Limit: {limit}</Text>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Playing Audio in React Native\nDESCRIPTION: React component demonstrating basic audio playback functionality using expo-audio's useAudioPlayer hook.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/audio.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEffect, useState } from 'react';\nimport { View, StyleSheet, Button } from 'react-native';\nimport { useAudioPlayer } from 'expo-audio';\n\nconst audioSource = require('./assets/Hello.mp3');\n\nexport default function App() {\n  const player = useAudioPlayer(audioSource);\n\n  return (\n    <View style={styles.container}>\n      <Button title=\"Play Sound\" onPress={() => player.play()} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    backgroundColor: '#ecf0f1',\n    padding: 10,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Contacts Usage in React Native\nDESCRIPTION: Complete example of requesting contacts permission and fetching contact data in a React Native component. The code demonstrates requesting permission, fetching contacts with email fields, and logging the first contact.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/contacts.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEffect } from 'react';\nimport { StyleSheet, View, Text } from 'react-native';\nimport * as Contacts from 'expo-contacts';\n\nexport default function App() {\n  useEffect(() => {\n    (async () => {\n      const { status } = await Contacts.requestPermissionsAsync();\n      if (status === 'granted') {\n        const { data } = await Contacts.getContactsAsync({\n          fields: [Contacts.Fields.Emails],\n        });\n\n        if (data.length > 0) {\n          const contact = data[0];\n          console.log(contact);\n        }\n      }\n    })();\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <Text>Contacts Module Example</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Permissions for expo-location in JSX\nDESCRIPTION: This code snippet demonstrates how to configure Android permissions for the expo-location module using the AndroidPermissions component. It includes both required and optional permissions for location access.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/location.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<AndroidPermissions\n  permissions={[\n    'ACCESS_COARSE_LOCATION',\n    'ACCESS_FINE_LOCATION',\n    'FOREGROUND_SERVICE',\n    'FOREGROUND_SERVICE_LOCATION',\n    'ACCESS_BACKGROUND_LOCATION',\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring DocumentPicker with iCloud Storage in app.json\nDESCRIPTION: JSON configuration for enabling iCloud storage features in DocumentPicker using the Expo config plugin system. Sets the iCloudContainerEnvironment to Production.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/document-picker.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-document-picker\",\n        {\n          \"iCloudContainerEnvironment\": \"Production\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: React Native Implementation for Safe Area Insets\nDESCRIPTION: Example of migrating from CSS to React Native using the useSafeAreaInsets hook to apply appropriate padding.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/safe-area-context.mdx#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\n\nfunction App() {\n  const insets = useSafeAreaInsets();\n  return (\n    <View\n      style={{\n        paddingTop: insets.top,\n        paddingLeft: insets.left,\n        paddingBottom: insets.bottom,\n        paddingRight: insets.right,\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Git Submodules in EAS Build Pre-Install Script\nDESCRIPTION: A bash script that sets up SSH authentication and initializes git submodules during the EAS Build process. The script creates SSH directories, handles private key restoration from base64-encoded environment variables, configures known hosts, and updates git submodules.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/build-reference/git-submodules.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n#!/usr/bin/env bash\n\nmkdir -p ~/.ssh\n\n# Real origin URL is lost during the packaging process, so if your\n# submodules are defined using relative urls in .gitmodules then\n# you need to restore it with:\n#\n# git remote set-url origin git@github.com:example/repo.git\n\n# restore private key from env variable and generate public key\numask 0177\necho \"$SSH_KEY_BASE64\" | base64 -d > ~/.ssh/id_rsa\numask 0022\nssh-keygen -y -f ~/.ssh/id_rsa > ~/.ssh/id_rsa.pub\n\n# add your git provider to the list of known hosts\nssh-keyscan github.com >> ~/.ssh/known_hosts\n\ngit submodule update --init\n```\n\n----------------------------------------\n\nTITLE: Dynamic App Identifier Functions\nDESCRIPTION: Functions to generate unique identifiers and app names based on build type\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/eas/multiple-app-variants.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst getUniqueIdentifier = () => {\n  if (IS_DEV) {\n    return 'com.yourname.stickersmash.dev';\n  }\n\n  if (IS_PREVIEW) {\n    return 'com.yourname.stickersmash.preview';\n  }\n\n  return 'com.yourname.stickersmash';\n};\n\nconst getAppName = () => {\n  if (IS_DEV) {\n    return 'StickerSmash (Dev)';\n  }\n\n  if (IS_PREVIEW) {\n    return 'StickerSmash (Preview)';\n  }\n\n  return 'StickerSmash: Emoji Stickers';\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Animated Width Component with React Native Reanimated\nDESCRIPTION: Example demonstrating how to create an animated component with dynamic width using react-native-reanimated. The component uses shared values, animated styles, and timing animations to smoothly transition a box's width based on button clicks.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/reanimated.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Animated, {\n  useSharedValue,\n  withTiming,\n  useAnimatedStyle,\n  Easing,\n} from 'react-native-reanimated';\nimport { View, Button, StyleSheet } from 'react-native';\n\nexport default function AnimatedStyleUpdateExample() {\n  const randomWidth = useSharedValue(10);\n\n  const config = {\n    duration: 500,\n    easing: Easing.bezier(0.5, 0.01, 0, 1),\n  };\n\n  const style = useAnimatedStyle(() => {\n    return {\n      width: withTiming(randomWidth.value, config),\n    };\n  });\n\n  return (\n    <View style={styles.container}>\n      <Animated.View style={[styles.box, style]} />\n      <Button\n        title=\"toggle\"\n        onPress={() => {\n          randomWidth.value = Math.random() * 350;\n        }}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  box: {\n    width: 100,\n    height: 80,\n    backgroundColor: 'black',\n    margin: 30,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Camera Functionality in React Native\nDESCRIPTION: React Native component using expo-camera to create a basic camera implementation with permission handling and camera flipping functionality.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/camera.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CameraView, CameraType, useCameraPermissions } from 'expo-camera';\nimport { useState } from 'react';\nimport { Button, StyleSheet, Text, TouchableOpacity, View } from 'react-native';\n\nexport default function App() {\n  const [facing, setFacing] = useState<CameraType>('back');\n  const [permission, requestPermission] = useCameraPermissions();\n\n  if (!permission) {\n    // Camera permissions are still loading.\n    return <View />;\n  }\n\n  if (!permission.granted) {\n    // Camera permissions are not granted yet.\n    return (\n      <View style={styles.container}>\n        <Text style={styles.message}>We need your permission to show the camera</Text>\n        <Button onPress={requestPermission} title=\"grant permission\" />\n      </View>\n    );\n  }\n\n  function toggleCameraFacing() {\n    setFacing(current => (current === 'back' ? 'front' : 'back'));\n  }\n\n  return (\n    <View style={styles.container}>\n      <CameraView style={styles.camera} facing={facing}>\n        <View style={styles.buttonContainer}>\n          <TouchableOpacity style={styles.button} onPress={toggleCameraFacing}>\n            <Text style={styles.text}>Flip Camera</Text>\n          </TouchableOpacity>\n        </View>\n      </CameraView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n  message: {\n    textAlign: 'center',\n    paddingBottom: 10,\n  },\n  camera: {\n    flex: 1,\n  },\n  buttonContainer: {\n    flex: 1,\n    flexDirection: 'row',\n    backgroundColor: 'transparent',\n    margin: 64,\n  },\n  button: {\n    flex: 1,\n    alignSelf: 'flex-end',\n    alignItems: 'center',\n  },\n  text: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: 'white',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Typed Routes in app.json\nDESCRIPTION: Configuration required in app.json to enable typed routes functionality in Expo Router.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/reference/typed-routes.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"experiments\": {\n      \"typedRoutes\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Maps API Key in app.json for Android\nDESCRIPTION: Configuration snippet for adding a Google Maps API key to the Android section of an Expo app.json file. This is required for deploying applications using Google Maps on Android.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/map-view.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n    \"android\": {\n      \"config\": {\n        \"googleMaps\": {\n          \"apiKey\": \"process.env.GOOGLE_MAPS_API_KEY\",\n        },\n      },\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing Haptic Feedback in React Native\nDESCRIPTION: Complete example showing how to implement different types of haptic feedback including selection, notification (success, error, warning), and impact (light, medium, heavy) feedback using expo-haptics. Includes UI components and styling for demonstration.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/haptics.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { StyleSheet, View, Text, Button } from 'react-native';\nimport * as Haptics from 'expo-haptics';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.text}>Haptics.selectionAsync</Text>\n      <View style={styles.buttonContainer}>\n        <Button title=\"Selection\" onPress={() => Haptics.selectionAsync()} />\n      </View>\n      <Text style={styles.text}>Haptics.notificationAsync</Text>\n      <View style={styles.buttonContainer}>\n        <Button\n          title=\"Success\"\n          onPress={\n            () =>\n              Haptics.notificationAsync(\n                Haptics.NotificationFeedbackType.Success\n              )\n          }\n        />\n        <Button\n          title=\"Error\"\n          onPress={\n            () =>\n              Haptics.notificationAsync(\n                Haptics.NotificationFeedbackType.Error\n              )\n          }\n        />\n        <Button\n          title=\"Warning\"\n          onPress={\n            () =>\n              Haptics.notificationAsync(\n                Haptics.NotificationFeedbackType.Warning\n              )\n          }\n        />\n      </View>\n      <Text style={styles.text}>Haptics.impactAsync</Text>\n      <View style={styles.buttonContainer}>\n        <Button\n          title=\"Light\"\n          onPress={\n            () => Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light)\n          }\n        />\n        <Button\n          title=\"Medium\"\n          onPress={\n            () => Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium)\n          }\n        />\n        <Button\n          title=\"Heavy\"\n          onPress={\n            () => Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Heavy)\n          }\n        />\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    paddingHorizontal: 16,\n  },\n  buttonContainer: {\n    flexDirection: 'row',\n    alignItems: 'stretch',\n    marginTop: 10,\n    marginBottom: 30,\n    justifyContent: 'space-between',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Performing Basic CRUD Operations with expo-sqlite\nDESCRIPTION: Example demonstrating basic Create, Read, Update, and Delete (CRUD) operations using expo-sqlite. This includes opening a database, executing queries, and retrieving results.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/sqlite.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst db = await SQLite.openDatabaseAsync('databaseName');\n\n// `execAsync()` is useful for bulk queries when you want to execute altogether.\n// Note that `execAsync()` does not escape parameters and may lead to SQL injection.\nawait db.execAsync(`\nPRAGMA journal_mode = WAL;\nCREATE TABLE IF NOT EXISTS test (id INTEGER PRIMARY KEY NOT NULL, value TEXT NOT NULL, intValue INTEGER);\nINSERT INTO test (value, intValue) VALUES ('test1', 123);\nINSERT INTO test (value, intValue) VALUES ('test2', 456);\nINSERT INTO test (value, intValue) VALUES ('test3', 789);\n`);\n\n// `runAsync()` is useful when you want to execute some write operations.\nconst result = await db.runAsync('INSERT INTO test (value, intValue) VALUES (?, ?)', 'aaa', 100);\nconsole.log(result.lastInsertRowId, result.changes);\nawait db.runAsync('UPDATE test SET intValue = ? WHERE value = ?', 999, 'aaa'); // Binding unnamed parameters from variadic arguments\nawait db.runAsync('UPDATE test SET intValue = ? WHERE value = ?', [999, 'aaa']); // Binding unnamed parameters from array\nawait db.runAsync('DELETE FROM test WHERE value = $value', { $value: 'aaa' }); // Binding named parameters from object\n\n// `getFirstAsync()` is useful when you want to get a single row from the database.\nconst firstRow = await db.getFirstAsync('SELECT * FROM test');\nconsole.log(firstRow.id, firstRow.value, firstRow.intValue);\n\n// `getAllAsync()` is useful when you want to get all results as an array of objects.\nconst allRows = await db.getAllAsync('SELECT * FROM test');\nfor (const row of allRows) {\n  console.log(row.id, row.value, row.intValue);\n}\n\n// `getEachAsync()` is useful when you want to iterate SQLite query cursor.\nfor await (const row of db.getEachAsync('SELECT * FROM test')) {\n  console.log(row.id, row.value, row.intValue);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring 'on.pull_request' in YAML\nDESCRIPTION: This snippet showcases the usage of `on.pull_request` to trigger workflows based on pull request events targeting specific branches and of certain event types. Branches are specified in the branches array. Event types are specified in the types array.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/workflows/syntax.mdx#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  # @info #\n  pull_request:\n    # @end #\n    branches:\n      - main\n      - feature/**\n      - !feature/test-** # other branch names and globs\n\n\n    types:\n      - opened\n      # other event types\n```\n\n----------------------------------------\n\nTITLE: Encoding and Decoding Text with TextEncoder/TextDecoder - JavaScript\nDESCRIPTION: Demonstrates how to encode a string into a Uint8Array and decode it back to a string using the globally available TextEncoder and TextDecoder APIs, which require no import in Expo projects. Dependencies: Available globally in JavaScript environments with Expo (Hermes engine for native platforms). The 'hello' string is encoded to a byte array and decoded back, showing usage for UTF-8 text. Only UTF-8 decoding is available on native, so use a polyfill for other encodings. Inputs: string to encode; Outputs: encoded byte array and decoded string.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/encoding.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// [104, 101, 108, 108, 111]\\nconst hello = new TextEncoder().encode('hello');\\n\\n// \\\"hello\\\"\\nconst text = new TextDecoder().decode(hello);\n```\n\n----------------------------------------\n\nTITLE: Manual Check for Updates - Expo Updates API in React Native (JSX)\nDESCRIPTION: Implements a React Native functional component that manually checks for Expo updates on a button press. Uses expo-updates APIs: checkForUpdateAsync, fetchUpdateAsync, and reloadAsync. Key dependencies: react-native, expo-updates. onFetchUpdateAsync is called on button press; it checks for updates, downloads, and reloads if available. Errors are caught and displayed using alert().\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/updates.mdx#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { View, Button } from 'react-native';\nimport * as Updates from 'expo-updates';\n\nfunction App() {\n  async function onFetchUpdateAsync() {\n    try {\n      const update = await Updates.checkForUpdateAsync();\n\n      if (update.isAvailable) {\n        await Updates.fetchUpdateAsync();\n        await Updates.reloadAsync();\n      }\n    } catch (error) {\n      // You can also add an alert() to see the error message in case of an error when fetching updates.\n      alert(`Error fetching latest Expo update: ${error}`);\n    }\n  }\n\n  return (\n    <View>\n      <Button title=\"Fetch update\" onPress={onFetchUpdateAsync} />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Server Output Configuration in Expo\nDESCRIPTION: Configuration in app.json to enable server output for export and production builds.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/reference/api-routes.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"web\": {\n    \"output\": \"server\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Directory Contents Recursively with expo-file-system/next in TypeScript\nDESCRIPTION: Implements a recursive function to print the contents of a directory, including subdirectories and files with their sizes. Demonstrates how to traverse directory structures.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/filesystem-next.mdx#2025-04-22_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Directory, Paths } from 'expo-file-system/next';\n\nfunction printDirectory(directory: Directory, indent: number = 0) {\n  console.log(`${' '.repeat(indent)} + ${directory.name}`);\n  const contents = directory.list();\n  for (const item of contents) {\n    if (item instanceof Directory) {\n      printDirectory(item, indent + 2);\n    } else {\n      console.log(`${' '.repeat(indent + 2)} - ${item.name} (${item.size} bytes)`);\n    }\n  }\n}\n\ntry {\n  printDirectory(new Directory(Paths.cache));\n} catch (error) {\n  console.error(error);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Video Playback with Play/Pause in React Native\nDESCRIPTION: This snippet demonstrates how to create a simple video player with a play/pause button using the Video component from expo-av. It includes state management for playback status and uses native controls.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/video-av.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useRef } from 'react';\nimport { View, StyleSheet, Button } from 'react-native';\nimport { Video, ResizeMode } from 'expo-av';\n\nexport default function App() {\n  const video = useRef(null);\n  const [status, setStatus] = useState({});\n  return (\n    <View style={styles.container}>\n      <Video\n        ref={video}\n        style={styles.video}\n        source={{\n          uri: 'https://d23dyxeqlo5psv.cloudfront.net/big_buck_bunny.mp4',\n        }}\n        useNativeControls\n        resizeMode={ResizeMode.CONTAIN}\n        isLooping\n        onPlaybackStatusUpdate={status => setStatus(() => status)}\n      />\n      <View style={styles.buttons}>\n        <Button\n          title={status.isPlaying ? 'Pause' : 'Play'}\n          onPress={() =>\n            status.isPlaying ? video.current.pauseAsync() : video.current.playAsync()\n          }\n        />\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    backgroundColor: '#ecf0f1',\n  },\n  video: {\n    alignSelf: 'center',\n    width: 320,\n    height: 200,\n  },\n  buttons: {\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Different JavaScript Engines per Platform in app.json\nDESCRIPTION: This snippet demonstrates how to set different JavaScript engines for Android and iOS platforms in the app.json configuration file. It uses Hermes as the default engine and overrides it with JSC for iOS.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/configuring-js-engines.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"jsEngine\": \"hermes\",\n    \"ios\": {\n      \"jsEngine\": \"jsc\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Intent Filters in app.json for Android App Links\nDESCRIPTION: This snippet shows how to add the android.intentFilters property to your app.json configuration with autoVerify set to true, which is required for Android App Links to function correctly. It configures the app to handle links to the webapp.io domain.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/linking/android-app-links.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"android\": {\n      \"intentFilters\": [\n        {\n          \"action\": \"VIEW\",\n          /* @info Add the <CODE>autoVerify</CODE> property to the intent filter in app config to enable app links.*/\n          \"autoVerify\": true,\n          /* @end */\n          \"data\": [\n            {\n              \"scheme\": \"https\",\n              \"host\": \"*.webapp.io\",\n              \"pathPrefix\": \"/records\"\n            }\n          ],\n          \"category\": [\"BROWSABLE\", \"DEFAULT\"]\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Presenting a Local Notification in Expo\nDESCRIPTION: A simple example showing how to present a local notification to the user using expo-notifications. It demonstrates setting up a notification handler and scheduling a basic notification with a title and body.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/notifications.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Notifications from 'expo-notifications';\n\n// First, set the handler that will cause the notification\n// to show the alert\nNotifications.setNotificationHandler({\n  handleNotification: async () => ({\n    shouldShowAlert: true,\n    shouldPlaySound: false,\n    shouldSetBadge: false,\n  }),\n});\n\n// Second, call scheduleNotificationAsync()\nNotifications.scheduleNotificationAsync({\n  content: {\n    title: 'Look at that notification',\n    body: \"I'm so proud of myself!\",\n  },\n  trigger: null,\n});\n```\n\n----------------------------------------\n\nTITLE: Type-Safe Route Parameters Usage\nDESCRIPTION: Example of using strongly typed route parameters with useLocalSearchParams hook.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/reference/typed-routes.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Text } from 'react-native';\nimport { useLocalSearchParams } from 'expo-router';\n\nexport default function Page() {\n  const {\n    profile, // string\n    search, // string[]\n  } = useLocalSearchParams<'app/(search)/[profile]/[...search].tsx'>();\n\n  return (\n    <>\n      <Text>Profile: {profile}</Text>\n      <Text>Search: {search.join(',')}</Text>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Video Playback with Play/Pause Button\nDESCRIPTION: A simple example of implementing video playback using expo-video. It includes a VideoView component and a button to toggle play/pause functionality.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/video.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEvent } from 'expo';\nimport { useVideoPlayer, VideoView } from 'expo-video';\nimport { StyleSheet, View, Button } from 'react-native';\n\nconst videoSource =\n  'https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4';\n\nexport default function VideoScreen() {\n  const player = useVideoPlayer(videoSource, player => {\n    player.loop = true;\n    player.play();\n  });\n\n  const { isPlaying } = useEvent(player, 'playingChange', { isPlaying: player.playing });\n\n  return (\n    <View style={styles.contentContainer}>\n      <VideoView style={styles.video} player={player} allowsFullscreen allowsPictureInPicture />\n      <View style={styles.controlsContainer}>\n        <Button\n          title={isPlaying ? 'Pause' : 'Play'}\n          onPress={() => {\n            if (isPlaying) {\n              player.pause();\n            } else {\n              player.play();\n            }\n          }}\n        />\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  contentContainer: {\n    flex: 1,\n    padding: 10,\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingHorizontal: 50,\n  },\n  video: {\n    width: 350,\n    height: 275,\n  },\n  controlsContainer: {\n    padding: 10,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase Client in React Native\nDESCRIPTION: Sets up the Supabase client with authentication configuration using AsyncStorage for session persistence. Includes URL polyfill and creates a reusable client instance for accessing Supabase services throughout the application.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/using-supabase.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport 'react-native-url-polyfill/auto';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { createClient } from '@supabase/supabase-js';\n\nconst supabaseUrl = YOUR_REACT_NATIVE_SUPABASE_URL;\nconst supabaseAnonKey = YOUR_REACT_NATIVE_SUPABASE_ANON_KEY;\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey, {\n  auth: {\n    storage: AsyncStorage,\n    autoRefreshToken: true,\n    persistSession: true,\n    detectSessionInUrl: false,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Custom Fonts in React Native\nDESCRIPTION: Complete example showing how to load and use custom fonts in a React Native application using expo-font and expo-splash-screen.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/font.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useFonts } from 'expo-font';\nimport * as SplashScreen from 'expo-splash-screen';\nimport { useEffect } from 'react';\nimport { Text, View, StyleSheet } from 'react-native';\n\nSplashScreen.preventAutoHideAsync();\n\nexport default function App() {\n  const [loaded, error] = useFonts({\n    'Inter-Black': require('./assets/fonts/Inter-Black.otf'),\n  });\n\n  useEffect(() => {\n    if (loaded || error) {\n      SplashScreen.hideAsync();\n    }\n  }, [loaded, error]);\n\n  if (!loaded && !error) {\n    return null;\n  }\n\n  return (\n    <View style={styles.container}>\n      <Text style={{ fontFamily: 'Inter-Black', fontSize: 30 }}>Inter Black</Text>\n      <Text style={{ fontSize: 30 }}>Platform Default</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using ScreenCapture Hook in React Native\nDESCRIPTION: This snippet demonstrates how to use the usePreventScreenCapture hook to prevent screen capture in a React Native component.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/screen-capture.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { usePreventScreenCapture } from 'expo-screen-capture';\nimport { Text, View } from 'react-native';\n\nexport default function ScreenCaptureExample() {\n  usePreventScreenCapture();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>As long as this component is mounted, this screen is unrecordable!</Text>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Battery Level with Expo Battery in React Native (JSX)\nDESCRIPTION: This snippet demonstrates how to display the current battery level in a React Native app using the useBatteryLevel hook from the expo-battery library. The main App component subscribes to battery level updates and renders the value in a styled view. Dependencies include expo-battery and react-native (for core components and styling). Input parameters are handled by the hook; output is the battery level value displayed as text. Note that this requires running on a physical device or emulator with relevant battery APIs.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/battery.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport { useBatteryLevel } from 'expo-battery';\nimport { StyleSheet, Text, View } from 'react-native';\n\nexport default function App() {\n  const batteryLevel = useBatteryLevel();\n\n  return (\n    <View style={styles.container}>\n      <Text>Current Battery Level: {batteryLevel}</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: 15,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Google Maps API Key in app.json\nDESCRIPTION: Specifies the structure within `app.json` for setting the Google Maps API key for the iOS platform. The key should be placed under `ios.config.googleMapsApiKey`. It's recommended to use environment variables (like `process.env.GOOGLE_MAPS_API_KEY`) to store the actual key for security.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/map-view.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n    \"ios\": {\n      \"config\": {\n        \"googleMapsApiKey\":  \"process.env.GOOGLE_MAPS_API_KEY\",\n        },\n      }\n```\n\n----------------------------------------\n\nTITLE: Importing expo-clipboard\nDESCRIPTION: This snippet shows the import statement needed to use the entire expo-clipboard library in a JavaScript project. This import is essential for accessing clipboard functionalities on Android, iOS, and Web platforms.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/clipboard.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as Clipboard from 'expo-clipboard';\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Light Sensor Data using Expo Sensors in JavaScript/React Native\nDESCRIPTION: This React Native component example demonstrates how to use expo-sensors' LightSensor module to monitor the device's visible light level (illuminance) in real time on Android. It uses React hooks to manage the light sensor's subscription and the current illuminance state, showing the illuminance value in lux or a fallback message if unavailable. Required dependency is 'expo-sensors', and key parameters include the listener callback for LightSensor and platform check for Android. The main output is a UI displaying the current illuminance and a toggle button for subscription, limited to Android devices and requiring device sensor support.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/light-sensor.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View, Platform } from 'react-native';\nimport { LightSensor } from 'expo-sensors';\n\nexport default function App() {\n  const [{ illuminance }, setData] = useState({ illuminance: 0 });\n  const [subscription, setSubscription] = useState(null);\n\n  const toggle = () => {\n    if (subscription) {\n      unsubscribe();\n    } else {\n      subscribe();\n    }\n  };\n\n  const subscribe = () => {\n    setSubscription(\n      LightSensor.addListener(sensorData => {\n        setData(sensorData);\n      })\n    );\n  };\n\n  const unsubscribe = () => {\n    subscription && subscription.remove();\n    setSubscription(null);\n  };\n\n  useEffect(() => {\n    subscribe();\n    return () => unsubscribe();\n  }, []);\n\n  return (\n    <View style={styles.sensor}>\n      <Text>Light Sensor:</Text>\n      <Text>\n        Illuminance: {Platform.OS === 'android' ? `${illuminance} lx` : `Only available on Android`}\n      </Text>\n      <View style={styles.buttonContainer}>\n        <TouchableOpacity onPress={toggle} style={styles.button}>\n          <Text>Toggle</Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  sensor: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    paddingHorizontal: 10,\n  },\n  buttonContainer: {\n    flexDirection: 'row',\n    alignItems: 'stretch',\n    marginTop: 15,\n  },\n  button: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#eee',\n    padding: 10,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Executing PRAGMA Queries in SQLite\nDESCRIPTION: Shows how to execute PRAGMA queries for configuring SQLite database settings like journal mode and foreign keys.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/sqlite.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst db = await SQLite.openDatabaseAsync('databaseName');\nawait db.execAsync('PRAGMA journal_mode = WAL');\nawait db.execAsync('PRAGMA foreign_keys = ON');\n```\n\n----------------------------------------\n\nTITLE: Implementing Step Counting with Expo Pedometer in React Native\nDESCRIPTION: A complete React Native example showing how to use the Pedometer module from expo-sensors to check if the pedometer is available, get past step count data for the last 24 hours, and subscribe to real-time step count updates.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/pedometer.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\nimport { Pedometer } from 'expo-sensors';\n\nexport default function App() {\n  const [isPedometerAvailable, setIsPedometerAvailable] = useState('checking');\n  const [pastStepCount, setPastStepCount] = useState(0);\n  const [currentStepCount, setCurrentStepCount] = useState(0);\n\n  const subscribe = async () => {\n    const isAvailable = await Pedometer.isAvailableAsync();\n    setIsPedometerAvailable(String(isAvailable));\n\n    if (isAvailable) {\n      const end = new Date();\n      const start = new Date();\n      start.setDate(end.getDate() - 1);\n\n      const pastStepCountResult = await Pedometer.getStepCountAsync(start, end);\n      if (pastStepCountResult) {\n        setPastStepCount(pastStepCountResult.steps);\n      }\n\n      return Pedometer.watchStepCount(result => {\n        setCurrentStepCount(result.steps);\n      });\n    }\n  };\n\n  useEffect(() => {\n    const subscription = subscribe();\n    return () => subscription && subscription.remove();\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <Text>Pedometer.isAvailableAsync(): {isPedometerAvailable}</Text>\n      <Text>Steps taken in the last 24 hours: {pastStepCount}</Text>\n      <Text>Walk! And watch this go up: {currentStepCount}</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: 15,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Recording Sounds with expo-av in React Native\nDESCRIPTION: This snippet shows how to implement audio recording using the Audio.Recording API from expo-av. It includes requesting permissions, starting and stopping recording, and handling the recorded audio file.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/audio-av.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { View, StyleSheet, Button } from 'react-native';\nimport { Audio } from 'expo-av';\n\nexport default function App() {\n  const [recording, setRecording] = useState();\n  const [permissionResponse, requestPermission] = Audio.usePermissions();\n\n  async function startRecording() {\n    try {\n      if (permissionResponse.status !== 'granted') {\n        console.log('Requesting permission..');\n        await requestPermission();\n      }\n      await Audio.setAudioModeAsync({\n        allowsRecordingIOS: true,\n        playsInSilentModeIOS: true,\n      });\n\n      console.log('Starting recording..');\n      const { recording } = await Audio.Recording.createAsync(\n        Audio.RecordingOptionsPresets.HIGH_QUALITY\n      );\n      setRecording(recording);\n      console.log('Recording started');\n    } catch (err) {\n      console.error('Failed to start recording', err);\n    }\n  }\n\n  async function stopRecording() {\n    console.log('Stopping recording..');\n    setRecording(undefined);\n    await recording.stopAndUnloadAsync();\n    await Audio.setAudioModeAsync(\n      {\n        allowsRecordingIOS: false,\n      }\n    );\n    const uri = recording.getURI();\n    console.log('Recording stopped and stored at', uri);\n  }\n\n  return (\n    <View style={styles.container}>\n      <Button\n        title={recording ? 'Stop Recording' : 'Start Recording'}\n        onPress={recording ? stopRecording : startRecording}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    backgroundColor: '#ecf0f1',\n    padding: 10,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing View-Specific Event Callbacks\nDESCRIPTION: Demonstrates how to create and dispatch view-specific events using the EventDispatcher mechanism in both Swift and Kotlin. The example implements a camera view that dispatches a 'camera ready' event.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/module-api.mdx#2025-04-22_snippet_32\n\nLANGUAGE: swift\nCODE:\n```\nclass CameraViewModule: Module {\n  public func definition() -> ModuleDefinition {\n    View(CameraView.self) {\n      Events(\n        \"onCameraReady\"\n      )\n      /* @hide ... */ /* @end */\n    }\n  }\n}\n\nclass CameraView: ExpoView {\n  let onCameraReady = EventDispatcher()\n\n  func callOnCameraReady() {\n    onCameraReady([\n      \"message\": \"Camera was mounted\"\n    ]);\n  }\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass CameraViewModule : Module() {\n  override fun definition() = ModuleDefinition {\n    View(ExpoCameraView::class) {\n      Events(\n        \"onCameraReady\"\n      )\n      /* @hide ... */ /* @end */\n    }\n  }\n}\n\nclass CameraView(\n  context: Context,\n  appContext: AppContext\n) : ExpoView(context, appContext) {\n  val onCameraReady by EventDispatcher()\n\n  fun callOnCameraReady() {\n    onCameraReady(mapOf(\n      \"message\" to \"Camera was mounted\"\n    ));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Push Notifications with Expo Router in TypeScript\nDESCRIPTION: This code snippet configures Expo Router to handle deep linking through incoming push notifications. It uses the Notifications API from Expo to detect and respond to notifications containing URLs. The main function observes incoming notifications and redirects to the specified URL if present. Dependencies include 'expo-notifications' and 'expo-router'. The snippet requires configuring the root layout to handle notifications with Expo Router.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/notifications.mdx#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { useEffect } from 'react';\nimport * as Notifications from 'expo-notifications';\nimport { router } from 'expo-router';\n\nfunction useNotificationObserver() {\n  useEffect(() => {\n    let isMounted = true;\n\n    function redirect(notification: Notifications.Notification) {\n      const url = notification.request.content.data?.url;\n      if (url) {\n        router.push(url);\n      }\n    }\n\n    Notifications.getLastNotificationResponseAsync()\n      .then(response => {\n        if (!isMounted || !response?.notification) {\n          return;\n        }\n        redirect(response?.notification);\n      });\n\n    const subscription = Notifications.addNotificationResponseReceivedListener(response => {\n      redirect(response.notification);\n    });\n\n    return () => {\n      isMounted = false;\n      subscription.remove();\n    };\n  }, []);\n}\n\nexport default function Layout() {\n  useNotificationObserver();\n\n  return <Slot />;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Screen Capture Callback in React Native\nDESCRIPTION: This snippet demonstrates how to use the ScreenCapture API to add a listener for screenshot events in a React Native app, including permission handling for Android.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/screen-capture.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as ScreenCapture from 'expo-screen-capture';\nimport { useEffect } from 'react';\nimport { Button, StyleSheet, View } from 'react-native';\n\nexport default function useScreenCaptureCallback() {\n  // Only use this if you add the READ_MEDIA_IMAGES permission to your AndroidManifest.xml\n  const hasPermissions = async () => {\n    const { status } = await ScreenCapture.requestPermissionsAsync();\n    return status === 'granted';\n  };\n\n  useEffect(() => {\n    let subscription;\n\n    const addListenerAsync = async () => {\n      if (await hasPermissions()) {\n        subscription = ScreenCapture.addScreenshotListener(() => {\n          alert('Thanks for screenshotting my beautiful app 😊');\n        });\n      } else {\n        console.error('Permissions needed to subscribe to screenshot events are missing!');\n      }\n    };\n    addListenerAsync();\n\n    return () => {\n      subscription?.remove();\n    };\n  }, []);\n}\n```\n\n----------------------------------------\n\nTITLE: Capturing View Images with react-native-view-shot in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the captureRef function from the react-native-view-shot library to capture a React Native view as an image, considering the device's pixel ratio for consistent image resolution. It requires the react-native-view-shot library and access to the PixelRatio API from React Native. The key parameters include the target image resolution, the pixel ratio of the current device, and capture options such as result format, dimensions, quality, and file type. The function returns a result containing the image data or file path. Make sure that this.imageContainer is a valid ref to a native view.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/captureRef.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst targetPixelCount = 1080; // If you want full HD pictures\\nconst pixelRatio = PixelRatio.get(); // The pixel ratio of the device\\n// pixels * pixelRatio = targetPixelCount, so pixels = targetPixelCount / pixelRatio\\nconst pixels = targetPixelCount / pixelRatio;\\n\\nconst result = await captureRef(this.imageContainer, {\\n  result: 'tmpfile',\\n  height: pixels,\\n  width: pixels,\\n  quality: 1,\\n  format: 'png',\\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Playback Status Updates in JavaScript\nDESCRIPTION: JavaScript example demonstrating the use of the `setOnPlaybackStatusUpdate` method on a `playbackObject` (either `Audio.Sound` or `Video`). It defines a callback function (`_onPlaybackStatusUpdate`) that receives `playbackStatus` objects and updates the UI based on the media's state (loaded, playing, paused, buffering, finished). It also shows how to handle fatal playback errors.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/av.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n```js\n_onPlaybackStatusUpdate = playbackStatus => {\n  if (!playbackStatus.isLoaded) {\n    // Update your UI for the unloaded state\n    if (playbackStatus.error) {\n      console.log(`Encountered a fatal error during playback: ${playbackStatus.error}`);\n      // Send Expo team the error on Slack or the forums so we can help you debug!\n    }\n  } else {\n    // Update your UI for the loaded state\n\n    if (playbackStatus.isPlaying) {\n      // Update your UI for the playing state\n    } else {\n      // Update your UI for the paused state\n    }\n\n    if (playbackStatus.isBuffering) {\n      // Update your UI for the buffering state\n    }\n\n    if (playbackStatus.didJustFinish && !playbackStatus.isLooping) {\n      // The player has just finished playing and will stop. Maybe you want to play something else?\n    }\n\n    /* @hide ... */ /* @end */\n  }\n};\n\n// Load the playbackObject and obtain the reference.\nplaybackObject.setOnPlaybackStatusUpdate(this._onPlaybackStatusUpdate);\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Production Store Build Settings - EAS Build - JSON\nDESCRIPTION: Configures EAS Build with production profiles for both Android and iOS builds, referencing separate YAML files for each platform. Used to produce distributable builds for the Google Play Store and Apple App Store. Dependencies include correct path references in the JSON to valid YAML build configuration files, and appropriate credentials for both platforms.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_54\n\nLANGUAGE: json\nCODE:\n```\n{\n  /* @hide ... */ /* @end */\n  \"build\": {\n    /* @hide ... */ /* @end */\n    \"productionBuild\": {\n      \"android\": {\n        \"config\": \"production-build-android.yml\"\n      },\n      \"ios\": {\n        \"config\": \"production-build-ios.yml\"\n      }\n    }\n    /* @hide ... */ /* @end */\n  }\n  /* @hide ... */ /* @end */\n}\n```\n\n----------------------------------------\n\nTITLE: Updating MainActivity.java for registerRootComponent in Android\nDESCRIPTION: A diff showing how to update the Android MainActivity.java file to use 'main' as the component name for registerRootComponent.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/register-root-component.mdx#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n  @Override\n  protected String getMainComponentName() {\n+    return \"main\";\n  }\n```\n\n----------------------------------------\n\nTITLE: Route Parameter Updates with onPress Handler\nDESCRIPTION: Example of updating route parameters using an onPress event handler\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/reference/url-parameters.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useLocalSearchParams, router } from 'expo-router';\nimport { Text } from 'react-native';\n\nexport default function User() {\n  const params = useLocalSearchParams<{ user: string }>();\n\n  return (\n    <>\n      <Text>User: {params.user}</Text>\n      <Text onPress={() => router.setParams({ user: 'evan' })}>Go to Evan</Text>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Playing Local Media from Assets Directory\nDESCRIPTION: Example of how to play local media files using require and configuring additional properties using VideoSource.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/video.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { VideoSource } from 'expo-video';\n\nconst assetId = require('./assets/bigbuckbunny.mp4');\n\nconst videoSource: VideoSource = {\n  assetId,\n  metadata: {\n    title: 'Big Buck Bunny',\n    artist: 'The Open Movie Project',\n  },\n};\n\nconst player1 = useVideoPlayer(assetId); // You can use the `asset` directly as a video source\nconst player2 = useVideoPlayer(videoSource);\n```\n\n----------------------------------------\n\nTITLE: Dynamic Route Parameters with Local and Global Hooks\nDESCRIPTION: Component demonstrating the difference between useLocalSearchParams and useGlobalSearchParams with navigation links\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/reference/url-parameters.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Text, View } from 'react-native';\nimport { useLocalSearchParams, useGlobalSearchParams, Link } from 'expo-router';\n\nconst friends = ['charlie', 'james']\n\nexport default function Route() {\n  const glob = useGlobalSearchParams();\n  const local = useLocalSearchParams();\n\n  console.log(\"Local:\", local.user, \"Global:\", glob.user);\n\n  return (\n    <View>\n      <Text>User: {local.user}</Text>\n      {friends.map(friend => (\n        <Link key={friend} href={`/${friend}`}>\n          Visit {friend}\n        </Link>\n      ))}\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Background Audio Playback and Recording\nDESCRIPTION: This JSON snippet indicates how to configure an iOS standalone app to support background audio playback and recording. It involves modifying the `UIBackgroundModes` array in the `Info.plist` file through the `app.json` configuration. The required dependency is a standalone app environment, and the expected outcome is that the app can handle audio tasks while in the background. Suitable keys must be added as needed for the specific background audio features required.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/audio-av.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    ...\n    \"ios\": {\n      ...\n      \"infoPlist\": {\n        ...\n        \"UIBackgroundModes\": [\n          \"audio\"\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic EAS Metadata in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a dynamic store config using JavaScript. It imports data from a JSON file and adds a dynamic copyright notice with the current year.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/metadata/config.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Use the data from `eas metadata:pull`\nconst config = require('./store.config.json');\n\nconst year = new Date().getFullYear();\nconfig.apple.copyright = `${year} Acme, Inc.`;\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Applying expo-autolinking-settings-plugin in Gradle\nDESCRIPTION: The settings plugin is applied to the root settings.gradle file of the application. It adds modules to the project hierarchy, includes extra Maven repositories, links and applies custom plugins, and exposes autolinking configuration.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-modules-autolinking/android/expo-gradle-plugin/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Gradle\nCODE:\n```\n// Apply to root settings.gradle\napply plugin: 'expo-autolinking-settings-plugin'\n```\n\n----------------------------------------\n\nTITLE: Basic Camera usage in React Native\nDESCRIPTION: This React Native snippet demonstrates the basic usage of the expo-camera component. It includes requesting camera permissions, handling permission states, and toggling between front and back cameras.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/camera.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Camera, CameraType } from 'expo-camera';\nimport { useState } from 'react';\nimport { Button, StyleSheet, Text, TouchableOpacity, View } from 'react-native';\n\nexport default function App() {\n  const [type, setType] = useState(CameraType.back);\n  const [permission, requestPermission] = Camera.useCameraPermissions();\n\n  if (!permission) {\n    // Camera permissions are still loading\n    return <View />;\n  }\n\n  if (!permission.granted) {\n    // Camera permissions are not granted yet\n    return (\n      <View style={styles.container}>\n        <Text style={{ textAlign: 'center' }}>We need your permission to show the camera</Text>\n        <Button onPress={requestPermission} title=\"grant permission\" />\n      </View>\n    );\n  }\n\n  function toggleCameraType() {\n    setType(current => (current === CameraType.back ? CameraType.front : CameraType.back));\n  }\n\n  return (\n    <View style={styles.container}>\n      <Camera style={styles.camera} type={type}>\n        <View style={styles.buttonContainer}>\n          <TouchableOpacity style={styles.button} onPress={toggleCameraType}>\n            <Text style={styles.text}>Flip Camera</Text>\n          </TouchableOpacity>\n        </View>\n      </Camera>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n  camera: {\n    flex: 1,\n  },\n  buttonContainer: {\n    flex: 1,\n    flexDirection: 'row',\n    backgroundColor: 'transparent',\n    margin: 64,\n  },\n  button: {\n    flex: 1,\n    alignSelf: 'flex-end',\n    alignItems: 'center',\n  },\n  text: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: 'white',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Route and Search Parameters with useLocalSearchParams - Expo Router - TypeScript\nDESCRIPTION: This snippet demonstrates how to access both route and optional search parameters using the useLocalSearchParams hook from Expo Router in a TypeScript React Native component. It shows extracting the route parameter 'user' and optional search parameter 'tab', as well as expected outputs depending on the URL. Requires expo-router to be installed and TypeScript type annotations for safer parameter access. Inputs are inferred from the URL path and query string; outputs are parameter values passed to the component. The approach ensures that route parameters are always present and never nullish.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/reference/url-parameters.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useLocalSearchParams } from 'expo-router';\n\nexport default function User() {\n  const {\n    // The route parameter\n    user,\n    // An optional search parameter.\n    tab,\n  } = useLocalSearchParams<{ user: string; tab?: string }>();\n\n  console.log({ user, tab });\n\n  // Given the URL: `/bacon?tab=projects`, the following is printed:\n  // { user: 'bacon', tab: 'projects' }\n\n  // Given the URL: `/expo`, the following is printed:\n  // { user: 'expo', tab: undefined }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Importing Expo VideoThumbnails Module (JavaScript)\nDESCRIPTION: This snippet demonstrates the importation of the expo-video-thumbnails module in JavaScript, which is required for accessing the library's API functions. There are no parameters or outputs, and it is necessary as a setup step in any project that uses the VideoThumbnails functionality. This line must be included before calling any video thumbnail extraction methods.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/video-thumbnails.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as VideoThumbnails from 'expo-video-thumbnails';\n```\n\n----------------------------------------\n\nTITLE: Displaying Android Permissions in Expo\nDESCRIPTION: This code snippet demonstrates how to specify required Android permissions for the FileSystem module using Expo's AndroidPermissions component. It lists READ_EXTERNAL_STORAGE, WRITE_EXTERNAL_STORAGE, and INTERNET permissions.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/filesystem.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<AndroidPermissions permissions={['READ_EXTERNAL_STORAGE', 'WRITE_EXTERNAL_STORAGE', 'INTERNET']} />\n```\n\n----------------------------------------\n\nTITLE: Implementing KeyboardAvoidingView in React Native\nDESCRIPTION: This snippet demonstrates how to use KeyboardAvoidingView to adjust content based on keyboard visibility. It uses different behaviors for iOS and Android platforms.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/keyboard-handling.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { KeyboardAvoidingView, TextInput } from 'react-native';\n\nexport default function HomeScreen() {\n  return (\n    <KeyboardAvoidingView behavior={Platform.OS === 'ios' ? 'padding' : undefined} style={{ flex: 1 }}>\n      <TextInput placeholder=\"Type here...\" />\n    </KeyboardAvoidingView>;\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating iOS E2E Test Workflow\nDESCRIPTION: YAML workflow configuration for running E2E tests on iOS, including build and test steps using Maestro.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/workflows/reference/e2e-tests.mdx#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nname: e2e-test-ios\n\non:\n  pull_request:\n    branches: ['*']\n\njobs:\n  build_ios_for_e2e:\n    type: build\n    params:\n      platform: ios\n      profile: e2e-test\n\n  maestro_test:\n    needs: [build_ios_for_e2e]\n    type: maestro\n    params:\n      build_id: ${{ needs.build_ios_for_e2e.outputs.build_id }}\n      flow_path: ['.maestro/home.yml']\n```\n\n----------------------------------------\n\nTITLE: Sending APNs Notification (JavaScript)\nDESCRIPTION: This code demonstrates how to send a push notification using the APNs HTTP/2 API. It establishes an HTTP/2 connection, constructs the notification payload, and sends the request to Apple's servers.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/push-notifications/sending-notifications-custom.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst http2 = require('http2');\n\nconst client = http2.connect(\n  IS_PRODUCTION ? 'https://api.push.apple.com' : 'https://api.sandbox.push.apple.com'\n);\n\nconst request = client.request({\n  ':method': 'POST',\n  ':scheme': 'https',\n  'apns-topic': 'YOUR-BUNDLE-IDENTIFIER',\n  ':path': '/3/device/' + nativeDeviceToken, // This is the native device token you grabbed client-side\n  authorization: `bearer ${authorizationToken}`, // This is the JSON web token generated in the \"Authorization\" step\n});\nrequest.setEncoding('utf8');\n\nrequest.write(\n  JSON.stringify({\n    aps: {\n      alert: {\n        title: \"\\uD83D\\uDCE7 You've got mail!\",\n        body: 'Hello world! \\uD83C\\uDF10',\n      },\n    },\n    experienceId: '@yourExpoUsername/yourProjectSlug', // Required when testing in the Expo Go app\n    scopeKey: '@yourExpoUsername/yourProjectSlug', // Required when testing in the Expo Go app\n  })\n);\nrequest.end();\n```\n\n----------------------------------------\n\nTITLE: Importing Battery Module from expo-battery\nDESCRIPTION: This snippet shows how to import the Battery module from the expo-battery package. This import statement is typically used at the beginning of a file to access the full range of battery-related functions and constants provided by the module.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/battery.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as Battery from 'expo-battery';\n```\n\n----------------------------------------\n\nTITLE: Implementing Gyroscope Tracking with React Hooks in React Native\nDESCRIPTION: A complete example showing how to implement gyroscope tracking in a React Native application using React hooks. It demonstrates setting up listeners, updating state with gyroscope data, controlling update intervals, and providing user controls to toggle tracking speed.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/gyroscope.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View } from 'react-native';\nimport { Gyroscope } from 'expo-sensors';\n\nexport default function App() {\n  const [{ x, y, z }, setData] = useState({\n    x: 0,\n    y: 0,\n    z: 0,\n  });\n  const [subscription, setSubscription] = useState(null);\n\n  const _slow = () => Gyroscope.setUpdateInterval(1000);\n  const _fast = () => Gyroscope.setUpdateInterval(16);\n\n  const _subscribe = () => {\n    setSubscription(\n      Gyroscope.addListener(gyroscopeData => {\n        setData(gyroscopeData);\n      })\n    );\n  };\n\n  const _unsubscribe = () => {\n    subscription && subscription.remove();\n    setSubscription(null);\n  };\n\n  useEffect(() => {\n    _subscribe();\n    return () => _unsubscribe();\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.text}>Gyroscope:</Text>\n      <Text style={styles.text}>x: {x}</Text>\n      <Text style={styles.text}>y: {y}</Text>\n      <Text style={styles.text}>z: {z}</Text>\n      <View style={styles.buttonContainer}>\n        <TouchableOpacity onPress={subscription ? _unsubscribe : _subscribe} style={styles.button}>\n          <Text>{subscription ? 'On' : 'Off'}</Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={_slow} style={[styles.button, styles.middleButton]}>\n          <Text>Slow</Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={_fast} style={styles.button}>\n          <Text>Fast</Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    paddingHorizontal: 10,\n  },\n  text: {\n    textAlign: 'center',\n  },\n  buttonContainer: {\n    flexDirection: 'row',\n    alignItems: 'stretch',\n    marginTop: 15,\n  },\n  button: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#eee',\n    padding: 10,\n  },\n  middleButton: {\n    borderLeftWidth: 1,\n    borderRightWidth: 1,\n    borderColor: '#ccc',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Structuring Push Notification Message in JSON for Expo\nDESCRIPTION: This JSON structure defines the format for push notification messages in Expo. It includes fields for both Android and iOS platforms, specifying recipient(s), content, delivery options, and platform-specific customizations.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/push-notifications/sending-notifications.mdx#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"to\": \"string | string[]\",\n  \"_contentAvailable\": \"boolean | undefined\",\n  \"data\": \"Object\",\n  \"title\": \"string\",\n  \"body\": \"string\",\n  \"ttl\": \"number\",\n  \"expiration\": \"number\",\n  \"priority\": \"'default' | 'normal' | 'high'\",\n  \"subtitle\": \"string\",\n  \"sound\": \"string | null\",\n  \"badge\": \"number\",\n  \"interruptionLevel\": \"'active' | 'critical' | 'passive' | 'time-sensitive'\",\n  \"channelId\": \"string\",\n  \"icon\": \"string\",\n  \"richContent\": \"Object\",\n  \"categoryId\": \"string\",\n  \"mutableContent\": \"boolean\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Profiles in eas.json\nDESCRIPTION: Setting up environment variables for different build profiles in eas.json\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/eas/multiple-app-variants.mdx#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"development\": {\n      \"developmentClient\": true,\n      \"distribution\": \"internal\",\n      \"env\": {\n        \"APP_VARIANT\": \"development\"\n      }\n    },\n    \"preview\": {\n      \"distribution\": \"internal\",\n      \"env\": {\n        \"APP_VARIANT\": \"preview\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring WebView Props in DOM Component\nDESCRIPTION: Demonstrates how to pass WebView props to a DOM component using the dom property.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/dom-components.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport DOMComponent from './my-component';\n\nexport default function App() {\n  return (\n    <DOMComponent\n      dom={{\n        scrollEnabled: false,\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Magnetometer Compass in React Native with Expo\nDESCRIPTION: A complete React Native component that implements a compass using the Magnetometer sensor. It shows how to subscribe to magnetometer updates, handle sensor data, and control update intervals. The component includes controls for turning the sensor on/off and adjusting update frequency.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/magnetometer.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View } from 'react-native';\nimport { Magnetometer } from 'expo-sensors';\n\nexport default function Compass() {\n  const [{ x, y, z }, setData] = useState({\n    x: 0,\n    y: 0,\n    z: 0,\n  });\n  const [subscription, setSubscription] = useState(null);\n\n  const _slow = () => Magnetometer.setUpdateInterval(1000);\n  const _fast = () => Magnetometer.setUpdateInterval(16);\n\n  const _subscribe = () => {\n    setSubscription(\n      Magnetometer.addListener(result => {\n        setData(result);\n      })\n    );\n  };\n\n  const _unsubscribe = () => {\n    subscription && subscription.remove();\n    setSubscription(null);\n  };\n\n  useEffect(() => {\n    _subscribe();\n    return () => _unsubscribe();\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.text}>Magnetometer:</Text>\n      <Text style={styles.text}>x: {x}</Text>\n      <Text style={styles.text}>y: {y}</Text>\n      <Text style={styles.text}>z: {z}</Text>\n      <View style={styles.buttonContainer}>\n        <TouchableOpacity onPress={subscription ? _unsubscribe : _subscribe} style={styles.button}>\n          <Text>{subscription ? 'On' : 'Off'}</Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={_slow} style={[styles.button, styles.middleButton]}>\n          <Text>Slow</Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={_fast} style={styles.button}>\n          <Text>Fast</Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    paddingHorizontal: 10,\n  },\n  text: {\n    textAlign: 'center',\n  },\n  buttonContainer: {\n    flexDirection: 'row',\n    alignItems: 'stretch',\n    marginTop: 15,\n  },\n  button: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#eee',\n    padding: 10,\n  },\n  middleButton: {\n    borderLeftWidth: 1,\n    borderRightWidth: 1,\n    borderColor: '#ccc',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring EAS Workflows Build Configuration\nDESCRIPTION: Basic EAS Workflows configuration that triggers Android and iOS builds when code is pushed to the main branch. Defines build jobs for both platforms using the build type.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/build/building-on-ci.mdx#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Build\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  build_android:\n    name: Build Android App\n    type: build\n    params:\n      platform: android\n  build_ios:\n    name: Build iOS App\n    type: build\n    params:\n      platform: ios\n```\n\n----------------------------------------\n\nTITLE: Using StatusBar Component in Expo React Native App\nDESCRIPTION: This snippet demonstrates how to use the StatusBar component from expo-status-bar in a React Native app. It sets up a dark background with light text and configures the status bar to have light text.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/status-bar.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { StyleSheet, Text, View } from 'react-native';\nimport { StatusBar } from 'expo-status-bar';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.text}>Notice that the status bar has light text!</Text>\n      <StatusBar style=\"light\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#000',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  text: {\n    color: '#fff',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Basic CRUD Operations with SQLite\nDESCRIPTION: Examples of basic database operations including creating tables, inserting, updating, deleting, and querying data using different methods like execAsync, runAsync, getFirstAsync, and getAllAsync\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/sqlite.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst db = await SQLite.openDatabaseAsync('databaseName');\n\nawait db.execAsync(`\nPRAGMA journal_mode = WAL;\nCREATE TABLE IF NOT EXISTS test (id INTEGER PRIMARY KEY NOT NULL, value TEXT NOT NULL, intValue INTEGER);\nINSERT INTO test (value, intValue) VALUES ('test1', 123);\nINSERT INTO test (value, intValue) VALUES ('test2', 456);\nINSERT INTO test (value, intValue) VALUES ('test3', 789);\n`);\n\nconst result = await db.runAsync('INSERT INTO test (value, intValue) VALUES (?, ?)', 'aaa', 100);\nconsole.log(result.lastInsertRowId, result.changes);\nawait db.runAsync('UPDATE test SET intValue = ? WHERE value = ?', 999, 'aaa');\nawait db.runAsync('UPDATE test SET intValue = ? WHERE value = ?', [999, 'aaa']);\nawait db.runAsync('DELETE FROM test WHERE value = $value', { $value: 'aaa' });\n\nconst firstRow = await db.getFirstAsync('SELECT * FROM test');\nconsole.log(firstRow.id, firstRow.value, firstRow.intValue);\n\nconst allRows = await db.getAllAsync('SELECT * FROM test');\nfor (const row of allRows) {\n  console.log(row.id, row.value, row.intValue);\n}\n\nfor await (const row of db.getEachAsync('SELECT * FROM test')) {\n  console.log(row.id, row.value, row.intValue);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Version Source in eas.json\nDESCRIPTION: Configuration example showing how to set up local version source and auto-increment functionality in eas.json. This includes setting appVersionSource to local and enabling autoIncrement for production builds.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/build-reference/app-versions.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"cli\": {\n    \"appVersionSource\": \"local\"\n  },\n  \"build\": {\n    \"development\": {\n    },\n    \"preview\": {\n    },\n    \"production\": {\n      \"autoIncrement\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Inline HTML in React Native WebView\nDESCRIPTION: This example shows how to use the WebView component to render inline HTML content. It sets up a minimal WebView with custom HTML and applies basic styling. The originWhitelist prop is set to allow content from any origin.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/webview.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { WebView } from 'react-native-webview';\nimport Constants from 'expo-constants';\nimport { StyleSheet } from 'react-native';\n\nexport default function App() {\n  return (\n    <WebView\n      style={styles.container}\n      originWhitelist={['*']}\n      source={{ html: '<h1><center>Hello world</center></h1>' }}\n    />\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: Constants.statusBarHeight,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS WebView Module\nDESCRIPTION: Module definition for iOS WebView that registers the onLoad event and url property handler.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/native-view-tutorial.mdx#2025-04-22_snippet_14\n\nLANGUAGE: swift\nCODE:\n```\nimport ExpoModulesCore\n\npublic class ExpoWebViewModule: Module {\n  public func definition() -> ModuleDefinition {\n    Name(\"ExpoWebView\")\n\n    View(ExpoWebView.self) {\n      Events(\"onLoad\")\n\n      Prop(\"url\") { (view, url: URL) in\n        if view.webView.url != url {\n          let urlRequest = URLRequest(url: url)\n          view.webView.load(urlRequest)\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: EAS Checkout Function YAML\nDESCRIPTION: Uses the `eas/checkout` function, which checks out the project source files. This is typically the first step in a workflow.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/workflows/syntax.mdx#_snippet_44\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  my_job:\n    steps:\n      # @info #\n      - uses: eas/checkout\n        # @end #\n```\n\n----------------------------------------\n\nTITLE: Uninstalling CodePush package in React Native\nDESCRIPTION: This command uninstalls the react-native-code-push package from the project to remove CodePush and prepare for EAS Update integration.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/codepush.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npm uninstall react-native-code-push\n```\n\n----------------------------------------\n\nTITLE: Using AppleMaps and GoogleMaps Components in TypeScript\nDESCRIPTION: This TypeScript snippet shows how to use the AppleMaps and GoogleMaps components from the expo-maps library. It conditionally renders either AppleMaps on iOS or GoogleMaps on Android, demonstrating platform-specific map component usage. The code imports the necessary components and the Platform API from react-native.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/maps.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { AppleMaps, GoogleMaps } from 'expo-maps';\nimport { Platform, Text } from 'react-native';\n\nexport default function App() {\n  if (Platform.OS === 'ios') {\n    return <AppleMaps.View style={{ flex: 1 }} />;\n  } else if (Platform.OS === 'android') {\n    return <GoogleMaps.View style={{ flex: 1 }} />;\n  } else {\n    return <Text>Maps are only available on Android and iOS</Text>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-location Plugin in app.json\nDESCRIPTION: JSON configuration example showing how to use the expo-location config plugin to set custom location permission messages in the app.json file.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/location.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-location\",\n        {\n          \"locationAlwaysAndWhenInUsePermission\": \"Allow $(PRODUCT_NAME) to use your location.\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Hooks from expo-audio\nDESCRIPTION: This Javascript snippet shows the standard way to import the primary hooks, `useAudioPlayer` and `useAudioRecorder`, from the `expo-audio` library for use in React Native components.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/audio.mdx#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport { useAudioPlayer, useAudioRecorder } from 'expo-audio';\n```\n\n----------------------------------------\n\nTITLE: Opening Android Play Store for Reviews (TypeScript)\nDESCRIPTION: This snippet demonstrates how to open the Android Play Store to the reviews section for a specific app, both in the browser and directly in the Play Store app.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/storereview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst androidPackageName = 'host.exp.exponent';\n// Open the Android Play Store in the browser -> redirects to Play Store on Android\nLinking.openURL(\n  `https://play.google.com/store/apps/details?id=${androidPackageName}&showAllReviews=true`\n);\n// Open the Android Play Store directly\nLinking.openURL(`market://details?id=${androidPackageName}&showAllReviews=true`);\n```\n\n----------------------------------------\n\nTITLE: Configuring Update Channels in app.json\nDESCRIPTION: JSON snippet showing how to configure update channels using the requestHeaders property in the app.json file for projects using Continuous Native Generation.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/getting-started.mdx#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"updates\": {\n      \"requestHeaders\": {\n        \"expo-channel-name\": \"your-channel-name\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Complete Localized App Store Info in JSON (English U.S.)\nDESCRIPTION: This snippet shows a comprehensive configuration for an app's App Store presence, including title, subtitle, description, keywords, release notes, and various URLs for marketing, support, and privacy.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/metadata/schema.mdx#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"configVersion\": 0,\n  \"apple\": {\n    \"info\": {\n      \"en-US\": {\n        \"title\": \"App title\",\n        \"subtitle\": \"Subtitle for your app\",\n        \"description\": \"A longer description of what your app does\",\n        \"keywords\": [\"keyword\", \"other-keyword\"],\n        \"releaseNotes\": \"Bug fixes and improved stability\",\n        \"promoText\": \"Short tagline for your app\",\n        \"marketingUrl\": \"https://example.com/en\",\n        \"supportUrl\": \"https://example.com/en/help\",\n        \"privacyPolicyUrl\": \"https://example.com/en/privacy\",\n        \"privacyChoicesUrl\": \"https://example.com/en/privacy/choices\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Notification Presentation with Expo\nDESCRIPTION: Shows how to set up a notification handler and schedule a basic notification using expo-notifications. Demonstrates setting notification content and trigger options.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/notifications.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Notifications from 'expo-notifications';\n\n// First, set the handler that will cause the notification\n// to show the alert\n\nNotifications.setNotificationHandler({\n  handleNotification: async () => ({\n    shouldShowAlert: true,\n    shouldPlaySound: false,\n    shouldSetBadge: false,\n  }),\n});\n\n// Second, call the method\n\nNotifications.scheduleNotificationAsync({\n  content: {\n    title: 'Look at that notification',\n    body: \"I'm so proud of myself!\",\n  },\n  trigger: null,\n});\n```\n\n----------------------------------------\n\nTITLE: Moving and Copying Files with Expo FileSystem Next (TypeScript)\nDESCRIPTION: Illustrates moving a file between directories with the 'move' method on a 'File' instance. Shows updating and logging the file URI after each operation, including moving into a new folder. The file is created prior to moving. Aims to demonstrate directory structure changes and requires write permissions. Inputs are existing file and destination directories; output is the new file URI.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/filesystem-next.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { File, Paths } from 'expo-file-system/next';\n\ntry {\n  const file = new File(Paths.document, 'example.txt');\n  file.create();\n  console.log(file.uri); // '${documentDirectory}/example.txt'\n  file.move(Paths.cache);\n  console.log(file.uri); // '${cacheDirectory}/example.txt'\n  file.move(new Directory(Paths.cache, 'newFolder'));\n  console.log(file.uri); // '${cacheDirectory}/newFolder/example.txt'\n} catch (error) {\n  console.error(error);\n}\n```\n\n----------------------------------------\n\nTITLE: Basic BlurView Usage in React Native\nDESCRIPTION: This example shows how to use the BlurView component in a React Native application. It demonstrates creating multiple BlurView instances with different intensities and tints, as well as styling techniques including the use of borderRadius and overflow properties.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/blur-view.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Text, StyleSheet, View, SafeAreaView } from 'react-native';\nimport { BlurView } from 'expo-blur';\n\nexport default function App() {\n  const text = 'Hello, my container is blurring contents underneath!';\n  return (\n    <SafeAreaView style={styles.container}>\n      <View style={styles.background}>\n        {[...Array(20).keys()].map(i => (\n          <View\n            key={`box-${i}`}\n            style={[styles.box, i % 2 === 1 ? styles.boxOdd : styles.boxEven]}\n          />\n        ))}\n      </View>\n      <BlurView intensity={100} style={styles.blurContainer}>\n        <Text style={styles.text}>{text}</Text>\n      </BlurView>\n      <BlurView intensity={80} tint=\"light\" style={styles.blurContainer}>\n        <Text style={styles.text}>{text}</Text>\n      </BlurView>\n      <BlurView intensity={90} tint=\"dark\" style={styles.blurContainer}>\n        <Text style={[styles.text, { color: '#fff' }]}>{text}</Text>\n      </BlurView>\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  blurContainer: {\n    flex: 1,\n    padding: 20,\n    margin: 16,\n    textAlign: 'center',\n    justifyContent: 'center',\n    overflow: 'hidden',\n    borderRadius: 20,\n  },\n  background: {\n    flex: 1,\n    flexWrap: 'wrap',\n    ...StyleSheet.absoluteFill,\n  },\n  box: {\n    width: '25%',\n    height: '20%',\n  },\n  boxEven: {\n    backgroundColor: 'orangered',\n  },\n  boxOdd: {\n    backgroundColor: 'gold',\n  },\n  text: {\n    fontSize: 24,\n    fontWeight: '600',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Development and Internal Distribution Build Settings - EAS Build - JSON\nDESCRIPTION: Defines a configuration for EAS Build using a JSON file to set up separate profiles for development builds. The example specifies internal distribution for Android using a dedicated YAML config and a simulator build for iOS with its own YAML configuration file. Dependencies include properly structured \"eas.json\" and referenced .yml files. Key parameters include the \"distribution\" type for Android and the \"simulator\" flag for iOS, determining output build types.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_51\n\nLANGUAGE: json\nCODE:\n```\n{\n  /* @hide ... */ /* @end */\n  \"build\": {\n    /* @hide ... */ /* @end */\n    \"developmentBuild\": {\n      \"distribution\": \"internal\",\n      \"android\": {\n        \"config\": \"development-build-android.yml\"\n      },\n      \"ios\": {\n        \"simulator\": true,\n        \"config\": \"development-build-ios.yml\"\n      }\n    }\n    /* @hide ... */ /* @end */\n  }\n  /* @hide ... */ /* @end */\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-router Plugin in app.json\nDESCRIPTION: Configuration example showing how to add the expo-router plugin to the app.json configuration file. This setup is required to use expo-router/ui components in your Expo project.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/router-ui.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\"expo-router\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Tracking Transparency Implementation\nDESCRIPTION: React Native component demonstrating basic usage of tracking transparency permissions request.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/tracking-transparency.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEffect } from 'react';\nimport { Text, StyleSheet, View } from 'react-native';\nimport { requestTrackingPermissionsAsync } from 'expo-tracking-transparency';\n\nexport default function App() {\n  useEffect(() => {\n    (async () => {\n      const { status } = await requestTrackingPermissionsAsync();\n      if (status === 'granted') {\n        console.log('Yay! I have user permission to track data');\n      }\n    })();\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <Text>Tracking Transparency Module Example</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using useSQLiteContext() Hook in React Native with TypeScript\nDESCRIPTION: Demonstrates how to use the useSQLiteContext() hook in a React Native application with TypeScript, including setting up the SQLiteProvider, creating components that use the database context, and performing database operations.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/sqlite.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SQLiteProvider, useSQLiteContext, type SQLiteDatabase } from 'expo-sqlite';\nimport { useEffect, useState } from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <SQLiteProvider databaseName=\"test.db\" onInit={migrateDbIfNeeded}>\n        <Header />\n        <Content />\n      </SQLiteProvider>\n    </View>\n  );\n}\n\nexport function Header() {\n  const db = useSQLiteContext();\n  const [version, setVersion] = useState('');\n  useEffect(() => {\n    async function setup() {\n      const result = await db.getFirstAsync<{ 'sqlite_version()': string }>(\n        'SELECT sqlite_version()'\n      );\n      setVersion(result['sqlite_version()']);\n    }\n    setup();\n  }, []);\n  return (\n    <View style={styles.headerContainer}>\n      <Text style={styles.headerText}>SQLite version: {version}</Text>\n    </View>\n  );\n}\n\ninterface Todo {\n  value: string;\n  intValue: number;\n}\n\nexport function Content() {\n  const db = useSQLiteContext();\n  const [todos, setTodos] = useState<Todo[]>([]);\n\n  useEffect(() => {\n    async function setup() {\n      const result = await db.getAllAsync<Todo>('SELECT * FROM todos');\n      setTodos(result);\n    }\n    setup();\n  }, []);\n\n  return (\n    <View style={styles.contentContainer}>\n      {todos.map((todo, index) => (\n        <View style={styles.todoItemContainer} key={index}>\n          <Text>{`${todo.intValue} - ${todo.value}`}</Text>\n        </View>\n      ))}\n    </View>\n  );\n}\n\nasync function migrateDbIfNeeded(db: SQLiteDatabase) {\n  const DATABASE_VERSION = 1;\n  let { user_version: currentDbVersion } = await db.getFirstAsync<{ user_version: number }>(\n    'PRAGMA user_version'\n  );\n  if (currentDbVersion >= DATABASE_VERSION) {\n    return;\n  }\n  if (currentDbVersion === 0) {\n    await db.execAsync(`\nPRAGMA journal_mode = 'wal';\nCREATE TABLE todos (id INTEGER PRIMARY KEY NOT NULL, value TEXT NOT NULL, intValue INTEGER);\n`);\n    await db.runAsync('INSERT INTO todos (value, intValue) VALUES (?, ?)', 'hello', 1);\n    await db.runAsync('INSERT INTO todos (value, intValue) VALUES (?, ?)', 'world', 2);\n    currentDbVersion = 1;\n  }\n  // if (currentDbVersion === 1) {\n  //   Add more migrations\n  // }\n  await db.execAsync(`PRAGMA user_version = ${DATABASE_VERSION}`);\n}\n\nconst styles = StyleSheet.create({\n  // Your styles...\n});\n```\n\n----------------------------------------\n\nTITLE: Expo Router Nested Navigation Example\nDESCRIPTION: Demonstrates how to navigate to a nested screen using Expo Router's push method with a direct path.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/advanced/nesting-navigators.mdx#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nrouter.push('/root/settings/media');\n```\n\n----------------------------------------\n\nTITLE: Configuring Metro for Monorepo Support in Expo\nDESCRIPTION: Custom Metro configuration for Expo projects in a monorepo, setting up watchFolders and nodeModulesPaths to properly resolve dependencies across the monorepo structure.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/monorepos.mdx#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst { getDefaultConfig } = require('expo/metro-config');\nconst path = require('path');\n\n// Find the project and workspace directories\nconst projectRoot = __dirname;\n// This can be replaced with `find-yarn-workspace-root`\nconst monorepoRoot = path.resolve(projectRoot, '../..');\n\nconst config = getDefaultConfig(projectRoot);\n\n// 1. Watch all files within the monorepo\nconfig.watchFolders = [monorepoRoot];\n// 2. Let Metro know where to resolve packages and in what order\nconfig.resolver.nodeModulesPaths = [\n  path.resolve(projectRoot, 'node_modules'),\n  path.resolve(monorepoRoot, 'node_modules'),\n];\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Importing NetInfo Module in React Native (JavaScript)\nDESCRIPTION: This snippet shows how to import the NetInfo library from the @react-native-community/netinfo package in a JavaScript React Native application. This import is necessary in any file where you intend to access network information functionalities. Ensure that the @react-native-community/netinfo package is added as a dependency to the project.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/netinfo.mdx#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport NetInfo from '@react-native-community/netinfo';\n```\n\n----------------------------------------\n\nTITLE: Implementing OAuth Implicit Flow with Expo Auth Session\nDESCRIPTION: Example of implementing OAuth implicit flow authentication using expo-auth-session. Uses Spotify's OAuth endpoints and demonstrates handling the authentication response including access token retrieval.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/authentication.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEffect } from 'react';\nimport * as WebBrowser from 'expo-web-browser';\nimport { makeRedirectUri, useAuthRequest, ResponseType } from 'expo-auth-session';\n\nWebBrowser.maybeCompleteAuthSession();\n\nconst discovery = {\n  authorizationEndpoint: 'https://accounts.spotify.com/authorize',\n};\n\nfunction App() {\n  const [request, response, promptAsync] = useAuthRequest(\n    {\n      responseType: ResponseType.Token,\n      clientId: 'CLIENT_ID',\n      scopes: ['user-read-email', 'playlist-modify-public'],\n      redirectUri: makeRedirectUri({\n        scheme: 'your.app'\n      }),\n    },\n    discovery\n  );\n\n  useEffect(() => {\n    if (response && response.type === 'success') {\n      const token = response.params.access_token;\n    }\n  }, [response]);\n\n  return <Button disabled={!request} onPress={() => promptAsync()} title=\"Login\" />;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing a Swift Module for iOS WebView\nDESCRIPTION: Swift code for setting up the basic iOS module definition that exposes a native WKWebView component to React Native using Expo Modules API.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/native-view-tutorial.mdx#2025-04-22_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nimport ExpoModulesCore\n\npublic class ExpoWebViewModule: Module {\n  public func definition() -> ModuleDefinition {\n    Name(\"ExpoWebView\")\n\n    View(ExpoWebView.self) {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Video Components from Expo Video Module in JavaScript\nDESCRIPTION: This code snippet shows how to import the VideoView component and useVideoPlayer hook from the expo-video module. These are the main components used for video playback in Expo applications.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/video.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { VideoView, useVideoPlayer } from 'expo-video';\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Network Information Updates in React Native\nDESCRIPTION: This snippet shows how to subscribe to network state changes using the addEventListener method. It provides a callback function that will be called whenever the network state changes, and returns an unsubscribe function.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/netinfo.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst unsubscribe = NetInfo.addEventListener(state => {\n  console.log('Connection type', state.type);\n  console.log('Is connected?', state.isConnected);\n});\n\n// To unsubscribe to these update, just use:\nunsubscribe();\n```\n\n----------------------------------------\n\nTITLE: Defining EAS Build Schema Structure\nDESCRIPTION: Core schema structure for EAS build configuration, defining CLI settings and build profile options for both Android and iOS platforms. Includes version requirements, commit checks, and platform-specific build configurations.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/build/eas-json.mdx#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"cli\": {\n    \"version\": \"SEMVER_RANGE\",\n    \"requireCommit\": boolean,\n    \"appVersionSource\": string,\n    \"promptToConfigurePushNotifications\": boolean\n  },\n  \"build\": {\n    \"BUILD_PROFILE_NAME_1\": {\n      ...COMMON_OPTIONS,\n      \"android\": {\n        ...COMMON_OPTIONS,\n        ...ANDROID_OPTIONS\n      },\n      \"ios\": {\n        ...COMMON_OPTIONS,\n        ...IOS_OPTIONS\n      }\n    },\n    \"BUILD_PROFILE_NAME_2\": {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using SecureStore in a React Native Component\nDESCRIPTION: Example React Native component demonstrating how to use expo-secure-store to save and retrieve encrypted key-value pairs.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/securestore.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { Text, View, StyleSheet, TextInput, Button } from 'react-native';\nimport * as SecureStore from 'expo-secure-store';\n\nasync function save(key, value) {\n  await SecureStore.setItemAsync(key, value);\n}\n\nasync function getValueFor(key) {\n  let result = await SecureStore.getItemAsync(key);\n  if (result) {\n    alert(\"🔐 Here's your value 🔐 \\n\" + result);\n  } else {\n    alert('No values stored under that key.');\n  }\n}\n\nexport default function App() {\n  const [key, onChangeKey] = useState('Your key here');\n  const [value, onChangeValue] = useState('Your value here');\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.paragraph}>Save an item, and grab it later!</Text>\n      <TextInput\n        style={styles.textInput}\n        clearTextOnFocus\n        onChangeText={text => onChangeKey(text)}\n        value={key}\n      />\n      <TextInput\n        style={styles.textInput}\n        clearTextOnFocus\n        onChangeText={text => onChangeValue(text)}\n        value={value}\n      />\n      <Button\n        title=\"Save this key/value pair\"\n        onPress={() => {\n          save(key, value);\n          onChangeKey('Your key here');\n          onChangeValue('Your value here');\n        }}\n      />\n      <Text style={styles.paragraph}>🔐 Enter your key 🔐</Text>\n      <TextInput\n        style={styles.textInput}\n        onSubmitEditing={event => {\n          getValueFor(event.nativeEvent.text);\n        }}\n        placeholder=\"Enter the key for the value you want to get\"\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    paddingTop: 10,\n    backgroundColor: '#ecf0f1',\n    padding: 8,\n  },\n  paragraph: {\n    marginTop: 34,\n    margin: 24,\n    fontSize: 18,\n    fontWeight: 'bold',\n    textAlign: 'center',\n  },\n  textInput: {\n    height: 35,\n    borderColor: 'gray',\n    borderWidth: 0.5,\n    padding: 4,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Third-Party Library with Expo CLI\nDESCRIPTION: This command shows how to install a third-party library (@react-navigation/native in this case) using Expo CLI, which helps in version compatibility and provides warnings for known issues.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/workflow/using-libraries.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo install @react-navigation/native\n```\n\n----------------------------------------\n\nTITLE: Configuring Shared Layout Stack Navigation\nDESCRIPTION: Implements a shared stack navigation layout that can be used across multiple tabs, enabling consistent navigation behavior for shared routes.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/basics/common-navigation-patterns.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Stack } from 'expo-router';\n\nexport default function SharedLayout() {\n  return <Stack />;\n}\n```\n\n----------------------------------------\n\nTITLE: Submitting an Android App with EAS Submit via CI/CD\nDESCRIPTION: This command submits an Android app to the Google Play Store using EAS Submit, which can be used in CI/CD environments. It requires a personal access token stored in the `EXPO_TOKEN` environment variable for authentication.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/submit/android.mdx#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n$ eas submit --platform android --profile production\n```\n\n----------------------------------------\n\nTITLE: Job Outputs Definition JSON\nDESCRIPTION: Defines the structure of job outputs, including a 'status' field indicating the job's success or failure and an 'outputs' field containing job-specific data. The outputs can be used in downstream jobs using interpolation. Each pre-packaged job exposes different outputs, as documented for that specific job type.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/workflows/syntax.mdx#_snippet_16\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"status\": \"success\" | \"failure\" | \"skipped\",\n  /* @info Every job produces a different set of outputs. See the specific job's documentation for details. */\n  \"outputs\": {}\n  /* @end */\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Stack Navigator Options in Expo Router (TypeScript)\nDESCRIPTION: Demonstrates how to set global screen options for the Stack navigator, including header styles. This configuration applies to all screens in the stack.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/advanced/stack.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Stack } from 'expo-router';\n\nexport default function Layout() {\n  return (\n    <Stack\n      screenOptions={{\n        headerStyle: {\n          backgroundColor: '#f4511e',\n        },\n        headerTintColor: '#fff',\n        headerTitleStyle: {\n          fontWeight: 'bold',\n        },\n      }}>\n      {/* Optionally configure static options outside the route.*/}\n      <Stack.Screen name=\"home\" options={{}} />\n    </Stack>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Login Navigation\nDESCRIPTION: Handles login functionality with navigation, redirecting users to protected routes after successful authentication.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/basics/common-navigation-patterns.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from 'react-native';\nimport { useRouter } from 'expo-router';\n\nexport default function Login() {\n  return (\n    <View>\n      <Button\n        title=\"Login\"\n        onPress={() => {\n          /* authenticate user */\n          router.replace('/(logged-in)');\n        }}\n      />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Tunnel URL for Expo Development Server\nDESCRIPTION: This command starts the Expo development server with a tunneled URL, which is helpful for connecting through firewalls or sharing with others.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/development-builds/development-workflows.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo start --tunnel\n```\n\n----------------------------------------\n\nTITLE: Configuring Tab Layout and Icons in Expo Router\nDESCRIPTION: This code defines the tab layout, including screen options for tab bar appearance and individual tab configurations with icons and titles.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/advanced/tabs.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport FontAwesome from '@expo/vector-icons/FontAwesome';\nimport { Tabs } from 'expo-router';\n\nexport default function TabLayout() {\n  return (\n    <Tabs screenOptions={{ tabBarActiveTintColor: 'blue' }}>\n      <Tabs.Screen\n        name=\"index\"\n        options={{\n          title: 'Home',\n          tabBarIcon: ({ color }) => <FontAwesome size={28} name=\"home\" color={color} />,\n        }}\n      />\n      <Tabs.Screen\n        name=\"settings\"\n        options={{\n          title: 'Settings',\n          tabBarIcon: ({ color }) => <FontAwesome size={28} name=\"cog\" color={color} />,\n        }}\n      />\n    </Tabs>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Building a React Native Compass with Magnetometer Sensor in JSX\nDESCRIPTION: This example demonstrates how to create a simple compass app using the Magnetometer from expo-sensors. It shows how to subscribe to magnetometer data, set update intervals, and manage the subscription lifecycle with React hooks.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/magnetometer.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View } from 'react-native';\nimport { Magnetometer } from 'expo-sensors';\n\nexport default function Compass() {\n  const [{ x, y, z }, setData] = useState({\n    x: 0,\n    y: 0,\n    z: 0,\n  });\n  const [subscription, setSubscription] = useState(null);\n\n  const _slow = () => Magnetometer.setUpdateInterval(1000);\n  const _fast = () => Magnetometer.setUpdateInterval(16);\n\n  const _subscribe = () => {\n    setSubscription(\n      Magnetometer.addListener(result => {\n        setData(result);\n      })\n    );\n  };\n\n  const _unsubscribe = () => {\n    subscription && subscription.remove();\n    setSubscription(null);\n  };\n\n  useEffect(() => {\n    _subscribe();\n    return () => _unsubscribe();\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.text}>Magnetometer:</Text>\n      <Text style={styles.text}>x: {x}</Text>\n      <Text style={styles.text}>y: {y}</Text>\n      <Text style={styles.text}>z: {z}</Text>\n      <View style={styles.buttonContainer}>\n        <TouchableOpacity onPress={subscription ? _unsubscribe : _subscribe} style={styles.button}>\n          <Text>{subscription ? 'On' : 'Off'}</Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={_slow} style={[styles.button, styles.middleButton]}>\n          <Text>Slow</Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={_fast} style={styles.button}>\n          <Text>Fast</Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    paddingHorizontal: 10,\n  },\n  text: {\n    textAlign: 'center',\n  },\n  buttonContainer: {\n    flexDirection: 'row',\n    alignItems: 'stretch',\n    marginTop: 15,\n  },\n  button: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#eee',\n    padding: 10,\n  },\n  middleButton: {\n    borderLeftWidth: 1,\n    borderRightWidth: 1,\n    borderColor: '#ccc',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Background Fetch in React Native with Expo\nDESCRIPTION: Complete example of implementing background fetch functionality using expo-background-fetch and expo-task-manager. Demonstrates how to define, register, and unregister background fetch tasks, along with a React component to manage and display the background fetch status.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/background-fetch.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { StyleSheet, Text, View, Button } from 'react-native';\nimport * as BackgroundFetch from 'expo-background-fetch';\nimport * as TaskManager from 'expo-task-manager';\n\nconst BACKGROUND_FETCH_TASK = 'background-fetch';\n\n// 1. Define the task by providing a name and the function that should be executed\n// Note: This needs to be called in the global scope (e.g outside of your React components)\nTaskManager.defineTask(BACKGROUND_FETCH_TASK, async () => {\n  const now = Date.now();\n\n  console.log(`Got background fetch call at date: ${new Date(now).toISOString()}`);\n\n  // Be sure to return the successful result type!\n  return BackgroundFetch.BackgroundFetchResult.NewData;\n});\n\n// 2. Register the task at some point in your app by providing the same name,\n// and some configuration options for how the background fetch should behave\n// Note: This does NOT need to be in the global scope and CAN be used in your React components!\nasync function registerBackgroundFetchAsync() {\n  return BackgroundFetch.registerTaskAsync(BACKGROUND_FETCH_TASK, {\n    minimumInterval: 60 * 15, // 15 minutes\n    stopOnTerminate: false, // android only,\n    startOnBoot: true, // android only\n  });\n}\n\n// 3. (Optional) Unregister tasks by specifying the task name\n// This will cancel any future background fetch calls that match the given name\n// Note: This does NOT need to be in the global scope and CAN be used in your React components!\nasync function unregisterBackgroundFetchAsync() {\n  return BackgroundFetch.unregisterTaskAsync(BACKGROUND_FETCH_TASK);\n}\n\nexport default function BackgroundFetchScreen() {\n  const [isRegistered, setIsRegistered] = useState(false);\n  const [status, setStatus] = useState(null);\n\n  useEffect(() => {\n    checkStatusAsync();\n  }, []);\n\n  const checkStatusAsync = async () => {\n    const status = await BackgroundFetch.getStatusAsync();\n    const isRegistered = await TaskManager.isTaskRegisteredAsync(BACKGROUND_FETCH_TASK);\n    setStatus(status);\n    setIsRegistered(isRegistered);\n  };\n\n  const toggleFetchTask = async () => {\n    if (isRegistered) {\n      await unregisterBackgroundFetchAsync();\n    } else {\n      await registerBackgroundFetchAsync();\n    }\n\n    checkStatusAsync();\n  };\n\n  return (\n    <View style={styles.screen}>\n      <View style={styles.textContainer}>\n        <Text>\n          Background fetch status:{' '}\n          <Text style={styles.boldText}>\n            {status && BackgroundFetch.BackgroundFetchStatus[status]}\n          </Text>\n        </Text>\n        <Text>\n          Background fetch task name:{' '}\n          <Text style={styles.boldText}>\n            {isRegistered ? BACKGROUND_FETCH_TASK : 'Not registered yet!'}\n          </Text>\n        </Text>\n      </View>\n      <View style={styles.textContainer}></View>\n      <Button\n        title={isRegistered ? 'Unregister BackgroundFetch task' : 'Register BackgroundFetch task'}\n        onPress={toggleFetchTask}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  screen: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  textContainer: {\n    margin: 10,\n  },\n  boldText: {\n    fontWeight: 'bold',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Print Module with React Native\nDESCRIPTION: A complete example demonstrating how to use expo-print for printing HTML content, saving to PDF files, and selecting printers on iOS. The example includes a React component with buttons for different print operations.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/print.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { View, StyleSheet, Button, Platform, Text } from 'react-native';\nimport * as Print from 'expo-print';\nimport { shareAsync } from 'expo-sharing';\n\nconst html = `\n<html>\n  <head>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no\" />\n  </head>\n  <body style=\"text-align: center;\">\n    <h1 style=\"font-size: 50px; font-family: Helvetica Neue; font-weight: normal;\">\n      Hello Expo!\n    </h1>\n    <img\n      src=\"https://d30j33t1r58ioz.cloudfront.net/static/guides/sdk.png\"\n      style=\"width: 90vw;\" />\n  </body>\n</html>\n`;\n\nexport default function App() {\n  const [selectedPrinter, setSelectedPrinter] = useState();\n\n  const print = async () => {\n    // On iOS/android prints the given html. On web prints the HTML from the current page.\n    /* @info */ await Print.printAsync({\n      html,\n      printerUrl: selectedPrinter?.url, // iOS only\n    }); /* @end */\n  };\n\n  const printToFile = async () => {\n    // On iOS/android prints the given html. On web prints the HTML from the current page.\n    /* @info */ const { uri } = await Print.printToFileAsync({ html }); /* @end */\n    console.log('File has been saved to:', uri);\n    await shareAsync(uri, { UTI: '.pdf', mimeType: 'application/pdf' });\n  };\n\n  const selectPrinter = async () => {\n    /* @info */ const printer = await Print.selectPrinterAsync(); // iOS only\n    /* @end */\n    setSelectedPrinter(printer);\n  };\n\n  return (\n    <View style={styles.container}>\n      <Button title=\"Print\" onPress={print} />\n      <View style={styles.spacer} />\n      <Button title=\"Print to PDF file\" onPress={printToFile} />\n      {Platform.OS === 'ios' && (\n        <>\n          <View style={styles.spacer} />\n          <Button title=\"Select printer\" onPress={selectPrinter} />\n          <View style={styles.spacer} />\n          {selectedPrinter ? (\n            <Text style={styles.printer}>{`Selected printer: ${selectedPrinter.name}`}</Text>\n          ) : undefined}\n        </>\n      )}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    backgroundColor: '#ecf0f1',\n    flexDirection: 'column',\n    padding: 8,\n  },\n  spacer: {\n    height: 8,\n  },\n  printer: {\n    textAlign: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Routing Components from Expo Router\nDESCRIPTION: This code snippet demonstrates importing routing components such as Stack, Tabs, and Link from the expo-router library. These components are used to define and manage routes within a React Native application.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/router.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Stack, Tabs, Link } from 'expo-router';\n```\n\n----------------------------------------\n\nTITLE: Implementing GitHub OAuth Authentication in React Native with Expo\nDESCRIPTION: This code snippet demonstrates how to implement GitHub OAuth authentication using the expo-auth-session library in a React Native app. It includes setting up the authentication request, handling the response, and exchanging the code for an access token.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/authentication.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEffect } from 'react';\nimport * as WebBrowser from 'expo-web-browser';\nimport { makeRedirectUri, useAuthRequest } from 'expo-auth-session';\nimport { Button } from 'react-native';\n\nWebBrowser.maybeCompleteAuthSession();\n\nconst discovery = {\n  authorizationEndpoint: 'https://github.com/login/oauth/authorize',\n  tokenEndpoint: 'https://github.com/login/oauth/access_token',\n  revocationEndpoint: 'https://github.com/settings/connections/applications/<CLIENT_ID>',\n};\n\nexport default function App() {\n  const [request, response, promptAsync] = useAuthRequest(\n    {\n      clientId: 'CLIENT_ID',\n      scopes: ['identity'],\n      redirectUri: makeRedirectUri({\n        scheme: 'your.app'\n      }),\n    },\n    discovery\n  );\n\n  useEffect(() => {\n    if (response?.type === 'success') {\n      const { code } = response.params;\n    }\n  }, [response]);\n\n  return (\n    <Button\n      disabled={!request}\n      title=\"Login\"\n      onPress={() => {\n        promptAsync();\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Exempting Encryption Prompt for App Store Compliance (JSON)\nDESCRIPTION: This JSON snippet sets the ios.config.usesNonExemptEncryption flag in app.json to false, indicating that the application does not use prohibited encryption. It is necessary for App Store or TestFlight submissions to simplify the Export Compliance information process. Place within the expo object of app.json to take effect during export or build time.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/securestore.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"expo\\\": {\\n    \\\"ios\\\": {\\n      \\\"config\\\": {\\n        \\\"usesNonExemptEncryption\\\": false\\n      }\\n      /* @hide ... */ /* @end */\\n    }\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Function to Pick Image with Expo Image Picker in TypeScript\nDESCRIPTION: Defines the 'pickImageAsync' function that uses Expo Image Picker to open the media library and select an image. It requires the 'expo-image-picker' library and provides options such as mediaTypes, allowsEditing, and quality. The function logs the result or alerts if no image is selected.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/image-picker.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default function Index() {\n  const pickImageAsync = async () => {\n    let result = await ImagePicker.launchImageLibraryAsync({\n      mediaTypes: ['images'],\n      allowsEditing: true,\n      quality: 1,\n    });\n\n    if (!result.canceled) {\n      console.log(result);\n    } else {\n      alert('You did not select any image.');\n    }\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Configure NPM with Token (YAML)\nDESCRIPTION: This snippet demonstrates how to use the `eas/use_npm_token` build step to configure Node package managers (npm, yarn, pnpm, or bun) for use with private packages. It assumes that the `NPM_TOKEN` is set in your project's secrets. The step creates a `.npmrc` file with the provided token, allowing the build process to install private packages. 'eas/checkout' must be used prior to this function.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/workflows/syntax.mdx#_snippet_48\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  my_job:\n    name: Install private npm modules\n    steps:\n      - uses: eas/checkout\n      # @info #\n      - uses: eas/use_npm_token\n      # @end #\n      - name: Install dependencies\n        run: npm install # <---- Can now install private packages\n```\n\n----------------------------------------\n\nTITLE: Implementing Media Library Permissions in React Native\nDESCRIPTION: Sets up media library permission handling using expo-media-library hook to request and check permission status for accessing device storage.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/screenshot.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as MediaLibrary from 'expo-media-library';\n\nexport default function Index() {\n  const [status, requestPermission] = MediaLibrary.usePermissions();\n\n  if (status === null) {\n    requestPermission();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-asset Plugin in app.json\nDESCRIPTION: This snippet demonstrates how to configure the expo-asset plugin in the app.json file. It allows specifying asset files or directories to be linked to the native project.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/asset.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-asset\",\n        {\n          \"assets\": [\"path/to/file.png\", \"path/to/directory\"]\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Existing Configuration in JavaScript\nDESCRIPTION: Shows how to export a function in app.config.js to modify existing configuration from app.json.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/workflow/configuration.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = ({ config }) => {\n  console.log(config.name); // prints 'My App'\n  return {\n    ...config,\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Reading and Modifying the URL Hash with useLocalSearchParams and router - Expo Router - TypeScript\nDESCRIPTION: This example demonstrates how to read and set the URL hash fragment as a search parameter using Expo Router in React Native. The code uses useLocalSearchParams to extract the hash (with key '#'), and allows modifying it via router.setParams, router.push, or a Link. The hash is treated as a special search parameter, and the UI provides interactive controls to change it. Dependencies are expo-router and react-native, with inputs from navigation or user actions and outputs as navigation and state changes.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/reference/url-parameters.mdx#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Text } from 'react-native';\nimport { router, useLocalSearchParams, Link } from 'expo-router';\n\nexport default function User() {\n  // Access the hash\n  const { '#': hash } = useLocalSearchParams<{ '#': string }>();\n\n  return (\n    <>\n      <Text onPress={() => router.setParams({ '#': 'my-hash' })}>Set a new hash</Text>\n      <Text onPress={() => router.push('/#my-hash')}>Push with a new hash</Text>\n      <Link href=\"/#my-hash\">Link with a hash</Link>\n    </>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Deploying Expo App to Vercel with CLI Commands\nDESCRIPTION: These terminal commands demonstrate how to deploy an Expo application to Vercel using the Vercel CLI. The process includes installing the CLI globally, building the website, and deploying the pre-built application.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/reference/api-routes.mdx#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n# Install the Vercel CLI globally if needed.\n$ npm install vercel -g\n# Build the website.\n$ vercel build\n# Deploy the website.\n$ vercel deploy --prebuilt\n```\n\n----------------------------------------\n\nTITLE: Importing ImagePicker Module\nDESCRIPTION: Code snippet showing how to import the ImagePicker module into a JavaScript or TypeScript file. This is the basic import statement needed to use the ImagePicker functionality in your application.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/imagepicker.mdx#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport * as ImagePicker from 'expo-image-picker';\n```\n\n----------------------------------------\n\nTITLE: Configuring Path Aliases in tsconfig.json\nDESCRIPTION: TypeScript configuration for setting up path aliases in an Expo project, allowing imports using custom aliases instead of relative paths.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/typescript.mdx#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"expo/tsconfig.base\",\n  \"compilerOptions\": {\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@/*\": [\"src/*\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Production Build - EAS Build - Shell\nDESCRIPTION: This command triggers an iOS production build using EAS Build, leveraging the default 'production' profile configured in eas.json. It authenticates the developer, queues the build on Expo's cloud, and manages code signing with previously configured credentials. Dependencies include Node.js, Expo CLI, and EAS Build account access. Outputs a cloud build artifact for App Store delivery; no explicit profile flag is required if 'production' is the default.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/eas/ios-production-build.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ eas build --platform ios\n```\n\n----------------------------------------\n\nTITLE: Submitting an iOS Build to App Store Connect - EAS Submit - Shell\nDESCRIPTION: This shell command submits the latest available iOS build from EAS Build to App Store Connect, initiating the release and TestFlight process. The interactive CLI assists the user in selecting the build and authenticating with App Store Connect, optionally reusing an existing API key. Requires an existing iOS app build via EAS, Apple Developer credentials, and Expo CLI/EAS Submit module installed. Outputs submission status and errors; build selection is prompted interactively.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/eas/ios-production-build.mdx#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ eas submit --platform ios\n```\n\n----------------------------------------\n\nTITLE: Image Manipulation with React Native and Expo\nDESCRIPTION: A complete React Native component demonstrating image manipulation using expo-image-manipulator. The example shows how to rotate an image 90 degrees clockwise and flip it vertically, with state management for the image display.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/imagemanipulator.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { Button, Image, StyleSheet, View } from 'react-native';\nimport { Asset } from 'expo-asset';\nimport { manipulateAsync, FlipType, SaveFormat } from 'expo-image-manipulator';\n\nexport default function App() {\n  const [ready, setReady] = useState(false);\n  const [image, setImage] = useState(null);\n\n  useEffect(() => {\n    (async () => {\n      const image = Asset.fromModule(require('./assets/snack-icon.png'));\n      await image.downloadAsync();\n      setImage(image);\n      setReady(true);\n    })();\n  }, []);\n\n  const _rotate90andFlip = async () => {\n    const manipResult = await manipulateAsync(\n      image.localUri || image.uri,\n      [{ rotate: 90 }, { flip: FlipType.Vertical }],\n      { compress: 1, format: SaveFormat.PNG }\n    );\n    setImage(manipResult);\n  };\n\n  const _renderImage = () => (\n    <View style={styles.imageContainer}>\n      <Image source={{ uri: image.localUri || image.uri }} style={styles.image} />\n    </View>\n  );\n\n  return (\n    <View style={styles.container}>\n      {ready && image && _renderImage()}\n      <Button title=\"Rotate and Flip\" onPress={_rotate90andFlip} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n  imageContainer: {\n    marginVertical: 20,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  image: {\n    width: 300,\n    height: 300,\n    resizeMode: 'contain',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Sentry in Expo Router Root Layout\nDESCRIPTION: This snippet demonstrates how to initialize Sentry in an Expo Router project. It sets up the Sentry configuration, includes the navigation integration, and wraps the root layout component.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/using-sentry.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Slot, useNavigationContainerRef } from 'expo-router';\nimport { useEffect } from 'react';\nimport * as Sentry from '@sentry/react-native';\nimport { isRunningInExpoGo } from 'expo';\n\nconst navigationIntegration = Sentry.reactNavigationIntegration({\n  enableTimeToInitialDisplay: !isRunningInExpoGo(),\n});\n\nSentry.init({\n  dsn: 'YOUR DSN HERE',\n  debug: true,\n  tracesSampleRate: 1.0,\n  integrations: [\n    navigationIntegration,\n  ],\n  enableNativeFramesTracking: !isRunningInExpoGo(),\n});\n\nfunction RootLayout() {\n  const ref = useNavigationContainerRef();\n\n  useEffect(() => {\n    if (ref?.current) {\n      navigationIntegration.registerNavigationContainer(ref);\n    }\n  }, [ref]);\n\n  return <Slot />;\n}\n\nexport default Sentry.wrap(RootLayout);\n```\n\n----------------------------------------\n\nTITLE: Loading and Using Custom Fonts in React Native with expo-font\nDESCRIPTION: Demonstrates a minimal implementation of loading and using a custom font in a React Native application. The example uses the useFonts hook, integrates with SplashScreen to handle the loading state, and applies the custom font to text elements.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/font.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/* @info Import useFonts hook from 'expo-font'. */ import { useFonts } from 'expo-font'; /* @end */\n/* @info Also, import SplashScreen so that when the fonts are not loaded, we can continue to show SplashScreen. */ import * as SplashScreen from 'expo-splash-screen'; /* @end */\nimport { useEffect } from 'react';\nimport { Text, View, StyleSheet } from 'react-native';\n\n/* @info This prevents SplashScreen from auto hiding while the fonts are loaded. */\nSplashScreen.preventAutoHideAsync();\n/* @end */\n\nexport default function App() {\n  const [loaded, error] = useFonts({\n    'Inter-Black': require('./assets/fonts/Inter-Black.otf'),\n  });\n\n  useEffect(() => {\n    if (loaded || error) {\n      /* @info After the custom fonts have loaded, we can hide the splash screen and display the app screen. */\n      SplashScreen.hideAsync();\n      /* @end */\n    }\n  }, [loaded, error]);\n\n  if (!loaded && !error) {\n    return null;\n  }\n\n  return (\n    <View style={styles.container}>\n      <Text style={{ fontFamily: 'Inter-Black', fontSize: 30 }}>Inter Black</Text>\n      <Text style={{ fontSize: 30 }}>Platform Default</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Importing the AuthSession API (JavaScript)\nDESCRIPTION: This JavaScript snippet shows how to import the AuthSession module from 'expo-auth-session'. This import grants access to all AuthSession API functions used for initiating and handling browser-based authentication flows. Requires both 'expo-auth-session' and its peer dependency 'expo-crypto' to be installed. Input: None; Output: the AuthSession object is available for use in your code.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/auth-session.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as AuthSession from 'expo-auth-session';\n```\n\n----------------------------------------\n\nTITLE: ImagePicker Import Statement\nDESCRIPTION: Example of importing the ImagePicker module from expo-image-picker package.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/imagepicker.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as ImagePicker from 'expo-image-picker';\n```\n\n----------------------------------------\n\nTITLE: Defining Background Task Using Expo Task Manager in TypeScript\nDESCRIPTION: Demonstrates how to define, register, and unregister a background task using the Expo Background Task library in a React Native application. The script ensures the background task can run when the app is inactive, with dependency on the 'expo-background-task' and 'expo-task-manager' packages.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/background-task.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as BackgroundTask from 'expo-background-task';\nimport * as TaskManager from 'expo-task-manager';\nimport { useEffect, useState } from 'react';\nimport { StyleSheet, Text, View, Button } from 'react-native';\n\nconst BACKGROUND_TASK_IDENTIFIER = 'background-task';\n\nTaskManager.defineTask(BACKGROUND_TASK_IDENTIFIER, async () => {\n  try {\n    const now = Date.now();\n    console.log(`Got background task call at date: ${new Date(now).toISOString()}`);\n  } catch (error) {\n    console.error('Failed to execute the background task:', error);\n    return BackgroundTask.BackgroundTaskResult.Failed;\n  }\n  return BackgroundTask.BackgroundTaskResult.Success;\n});\n\nasync function registerBackgroundTaskAsync() {\n  return BackgroundTask.registerTaskAsync(BACKGROUND_TASK_IDENTIFIER);\n}\n\nasync function unregisterBackgroundTaskAsync() {\n  return BackgroundTask.unregisterTaskAsync(BACKGROUND_TASK_IDENTIFIER);\n}\n\nexport default function BackgroundTaskScreen() {\n  const [isRegistered, setIsRegistered] = useState<boolean>(false);\n  const [status, setStatus] = useState<BackgroundTask.BackgroundTaskStatus | null>(null);\n\n  useEffect(() => {\n    checkStatusAsync();\n  }, []);\n\n  const checkStatusAsync = async () => {\n    const status = await BackgroundTask.getStatusAsync();\n    setStatus(status);\n  };\n\n  const toggle = async () => {\n    if (isRegistered) {\n      await registerBackgroundTaskAsync();\n    } else {\n      await unregisterBackgroundTaskAsync();\n    }\n    setIsRegistered(!isRegistered);\n  };\n\n  return (\n    <View style={styles.screen}>\n      <View style={styles.textContainer}>\n        <Text>\n          Background Task Service Availability:{' '}\n          <Text style={styles.boldText}>\n            {status ? BackgroundTask.BackgroundTaskStatus[status] : null}\n          </Text>\n        </Text>\n      </View>\n      <Button\n        disabled={status === BackgroundTask.BackgroundTaskStatus.Restricted}\n        title={isRegistered ? 'Cancel Background Task' : 'Schedule Background Task'}\n        onPress={toggle}\n      />\n      <Button title=\"Check Background Task Status\" onPress={checkStatusAsync} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  screen: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  textContainer: {\n    margin: 10,\n  },\n  boldText: {\n    fontWeight: 'bold',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: React Native Media Library Implementation\nDESCRIPTION: Complete React Native implementation showing how to fetch albums and display media assets using expo-media-library.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/media-library.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { Button, Text, SafeAreaView, ScrollView, StyleSheet, Image, View, Platform } from 'react-native';\nimport * as MediaLibrary from 'expo-media-library';\n\nexport default function App() {\n  const [albums, setAlbums] = useState(null);\n  const [permissionResponse, requestPermission] = MediaLibrary.usePermissions();\n\n  async function getAlbums() {\n    if (permissionResponse.status !== 'granted') {\n      await requestPermission();\n    }\n    const fetchedAlbums = await MediaLibrary.getAlbumsAsync({\n      includeSmartAlbums: true,\n    });\n    setAlbums(fetchedAlbums);\n  }\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <Button onPress={getAlbums} title=\"Get albums\" />\n      <ScrollView>\n        {albums && albums.map((album) => <AlbumEntry album={album} />)}\n      </ScrollView>\n    </SafeAreaView>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Opening Existing SQLite Database\nDESCRIPTION: Demonstrates how to open an existing SQLite database file using SQLiteProvider with assetSource configuration.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/sqlite.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SQLiteProvider, useSQLiteContext } from 'expo-sqlite';\nimport { View, Text, StyleSheet } from 'react-native';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <SQLiteProvider databaseName=\"test.db\" assetSource={{ assetId: require('./assets/test.db') }}>\n        <Header />\n        <Content />\n      </SQLiteProvider>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Node.js Server for Handling File Uploads from expo-file-system\nDESCRIPTION: Implements a simple Express server that handles both binary and multipart file uploads from mobile applications using expo-file-system. Includes endpoints for saving uploaded images to disk.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/filesystem.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst express = require('express');\nconst app = express();\nconst fs = require('fs');\nconst multer = require('multer');\nconst upload = multer({ dest: 'uploads/' });\n\n// This method will save the binary content of the request as a file.\napp.patch('/binary-upload', (req, res) => {\n  req.pipe(fs.createWriteStream('./uploads/image' + Date.now() + '.png'));\n  res.end('OK');\n});\n\n// This method will save a \"photo\" field from the request as a file.\napp.patch('/multipart-upload', upload.single('photo'), (req, res) => {\n  // You can access other HTTP parameters. They are located in the body object.\n  console.log(req.body);\n  res.end('OK');\n});\n\napp.listen(3000, () => {\n  console.log('Working on port 3000');\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Metro Resolver for Alias Support - TypeScript (metro.config.js)\nDESCRIPTION: This extended metro.config.js snippet demonstrates how to customize the Metro resolver to add custom module resolution logic, such as aliasing or alternative lookups. It overrides config.resolver.resolveRequest to provide custom file resolution for module names matching a user-defined pattern, while delegating to the default resolver otherwise. Requires expo/metro-config and knowledge of Metro's resolver contract.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/config/metro.mdx#2025-04-22_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nconst { getDefaultConfig } = require('expo/metro-config');\\n\\n/** @type {import('expo/metro-config').MetroConfig} */\\nconst config = getDefaultConfig(__dirname);\\n\\nconfig.resolver.resolveRequest = (context, moduleName, platform) => {\\n  if (moduleName.startsWith('my-custom-resolver:')) {\\n    // Logic to resolve the module name to a file path...\\n    // NOTE: Throw an error if there is no resolution.\\n    return {\\n      filePath: 'path/to/file',\\n      type: 'sourceFile',\\n    };\\n  }\\n\\n  // Ensure you call the default resolver.\\n  return context.resolveRequest(context, moduleName, platform);\\n};\\n\\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Basic CRUD Operations with SQLite in Expo\nDESCRIPTION: Demonstrates basic database operations including creating tables, inserting, updating, deleting, and querying data using different methods like execAsync, runAsync, getFirstAsync, getAllAsync, and getEachAsync.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/sqlite-next.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst db = await SQLite.openDatabaseAsync('databaseName');\n\nawait db.execAsync(`\nPRAGMA journal_mode = WAL;\nCREATE TABLE IF NOT EXISTS test (id INTEGER PRIMARY KEY NOT NULL, value TEXT NOT NULL, intValue INTEGER);\nINSERT INTO test (value, intValue) VALUES ('test1', 123);\nINSERT INTO test (value, intValue) VALUES ('test2', 456);\nINSERT INTO test (value, intValue) VALUES ('test3', 789);\n`);\n\nconst result = await db.runAsync('INSERT INTO test (value, intValue) VALUES (?, ?)', 'aaa', 100);\nconsole.log(result.lastInsertRowId, result.changes);\nawait db.runAsync('UPDATE test SET intValue = ? WHERE value = ?', 999, 'aaa');\nawait db.runAsync('UPDATE test SET intValue = ? WHERE value = ?', [999, 'aaa']);\nawait db.runAsync('DELETE FROM test WHERE value = $value', { $value: 'aaa' });\n\nconst firstRow = await db.getFirstAsync('SELECT * FROM test');\nconsole.log(firstRow.id, firstRow.value, firstRow.intValue);\n\nconst allRows = await db.getAllAsync('SELECT * FROM test');\nfor (const row of allRows) {\n  console.log(row.id, row.value, row.intValue);\n}\n\nfor await (const row of db.getEachAsync('SELECT * FROM test')) {\n  console.log(row.id, row.value, row.intValue);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Screenshot Capture and Save Functionality\nDESCRIPTION: Implements the screenshot capture logic using captureRef and saves the captured image to device media library using MediaLibrary.saveToLibraryAsync.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/screenshot.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst onSaveImageAsync = async () => {\n  try {\n    const localUri = await captureRef(imageRef, {\n      height: 440,\n      quality: 1,\n    });\n\n    await MediaLibrary.saveToLibraryAsync(localUri);\n    if (localUri) {\n      alert('Saved!');\n    }\n  } catch (e) {\n    console.log(e);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Vercel Server Entry Point with Expo Server Adapter\nDESCRIPTION: This TypeScript file creates a request handler for Vercel deployment, pointing to the server's build directory in dist/server. It delegates all requests through this middleware.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/reference/api-routes.mdx#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst { createRequestHandler } = require('@expo/server/adapter/vercel');\n\nmodule.exports = createRequestHandler({\n  /* @info Points to the root <CODE>dist/</CODE> (output) directory */\n  build: require('path').join(__dirname, '../dist/server'),\n  /* @end */\n});\n```\n\n----------------------------------------\n\nTITLE: Basic ImageManipulator Usage with React Native\nDESCRIPTION: This example demonstrates how to use the useImageManipulator hook to rotate an image 90 degrees clockwise, flip it vertically, and save it as a PNG format. The code includes a React component with state management and UI elements to trigger the image transformation.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/imagemanipulator.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { Button, Image, StyleSheet, View } from 'react-native';\nimport { Asset } from 'expo-asset';\nimport { FlipType, SaveFormat, useImageManipulator } from 'expo-image-manipulator';\n\nconst IMAGE = Asset.fromModule(require('./assets/snack-icon.png'));\n\nexport default function App() {\n  const [image, setImage] = useState(IMAGE);\n  const context = useImageManipulator(IMAGE.uri);\n\n  const rotate90andFlip = async () => {\n    context.rotate(90).flip(FlipType.Vertical);\n    const image = await context.renderAsync();\n    const result = await image.saveAsync({\n      format: SaveFormat.PNG,\n    });\n\n    setImage(result);\n  };\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.imageContainer}>\n        <Image source={{ uri: image.localUri || image.uri }} style={styles.image} />\n      </View>\n      <Button title=\"Rotate and Flip\" onPress={rotate90andFlip} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n  imageContainer: {\n    marginVertical: 20,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  image: {\n    width: 300,\n    height: 300,\n    resizeMode: 'contain',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Type Checking Expo Project Files\nDESCRIPTION: Terminal commands for running the TypeScript compiler (tsc) to type check project files, showing commands for both npm and yarn package managers.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/typescript.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# For npm\n$ npm run tsc\n\n# For yarn\n$ yarn tsc\n```\n\n----------------------------------------\n\nTITLE: Setting URL Scheme for Stripe Initialization in React Native\nDESCRIPTION: JavaScript code snippet demonstrating how to set the correct URL scheme when initializing Stripe in a React Native app. It uses expo-linking and expo-constants to create the appropriate URL based on whether the app is running in Expo Go or as a standalone app.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/stripe.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Linking from 'expo-linking';\nimport Constants from 'expo-constants';\n\nurlScheme:\n  Constants.appOwnership === 'expo'\n    ? Linking.createURL('/--/')\n    : Linking.createURL(''),\n```\n\n----------------------------------------\n\nTITLE: Using Secret File Environment Variable in Expo App Configuration\nDESCRIPTION: This snippet demonstrates how to use a secret file environment variable (GOOGLE_SERVICES_JSON) in the app.config.js file to provide the google-services.json file for Android configuration, with a fallback for local development.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/environment-variables.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  android: {\n    googleServicesFile: process.env.GOOGLE_SERVICES_JSON ?? '/local/path/to/google-services.json',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Metro Configuration for Sentry in Expo\nDESCRIPTION: This code updates the Metro configuration to inject a 'debug ID' into source maps for Sentry. It replaces the default Expo Metro config with a Sentry-specific one.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/using-sentry.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { getSentryExpoConfig } = require('@sentry/react-native/metro');\n\nconst config = getSentryExpoConfig(__dirname);\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Implementing Accelerometer Data Subscription with Expo Sensors (React Native, JSX)\nDESCRIPTION: This snippet demonstrates a full React Native component utilizing the Accelerometer from expo-sensors to display real-time x, y, and z axis data. It highlights installing dependencies, setting up subscription via Accelerometer.addListener, controlling update intervals, and managing state and subscriptions using React hooks. Inputs are user interactions (button presses) and device movement, outputs are acceleration values shown in the UI. Requires expo-sensors and React Native; runs on Android, iOS, and web. Limitations include requiring appropriate device capabilities and user permissions.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/accelerometer.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useEffect } from 'react';\\nimport { StyleSheet, Text, TouchableOpacity, View } from 'react-native';\\nimport { Accelerometer } from 'expo-sensors';\\n\\nexport default function App() {\\n  const [{ x, y, z }, setData] = useState({\\n    x: 0,\\n    y: 0,\\n    z: 0,\\n  });\\n  const [subscription, setSubscription] = useState(null);\\n\\n  const _slow = () => Accelerometer.setUpdateInterval(1000);\\n  const _fast = () => Accelerometer.setUpdateInterval(16);\\n\\n  const _subscribe = () => {\\n    setSubscription(Accelerometer.addListener(setData));\\n  };\\n\\n  const _unsubscribe = () => {\\n    subscription && subscription.remove();\\n    setSubscription(null);\\n  };\\n\\n  useEffect(() => {\\n    _subscribe();\\n    return () => _unsubscribe();\\n  }, []);\\n\\n  return (\\n    <View style={styles.container}>\\n      <Text style={styles.text}>Accelerometer: (in gs where 1g = 9.81 m/s^2)</Text>\\n      <Text style={styles.text}>x: {x}</Text>\\n      <Text style={styles.text}>y: {y}</Text>\\n      <Text style={styles.text}>z: {z}</Text>\\n      <View style={styles.buttonContainer}>\\n        <TouchableOpacity onPress={subscription ? _unsubscribe : _subscribe} style={styles.button}>\\n          <Text>{subscription ? 'On' : 'Off'}</Text>\\n        </TouchableOpacity>\\n        <TouchableOpacity onPress={_slow} style={[styles.button, styles.middleButton]}>\\n          <Text>Slow</Text>\\n        </TouchableOpacity>\\n        <TouchableOpacity onPress={_fast} style={styles.button}>\\n          <Text>Fast</Text>\\n        </TouchableOpacity>\\n      </View>\\n    </View>\\n  );\\n}\\n\\nconst styles = StyleSheet.create({\\n  container: {\\n    flex: 1,\\n    justifyContent: 'center',\\n    paddingHorizontal: 20,\\n  },\\n  text: {\\n    textAlign: 'center',\\n  },\\n  buttonContainer: {\\n    flexDirection: 'row',\\n    alignItems: 'stretch',\\n    marginTop: 15,\\n  },\\n  button: {\\n    flex: 1,\\n    justifyContent: 'center',\\n    alignItems: 'center',\\n    backgroundColor: '#eee',\\n    padding: 10,\\n  },\\n  middleButton: {\\n    borderLeftWidth: 1,\\n    borderRightWidth: 1,\\n    borderColor: '#ccc',\\n  },\\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Dynamic Route Parameters in React Native\nDESCRIPTION: Shows how to access dynamic segment parameters using the useLocalSearchParams hook in a details screen component.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/dynamic-routes.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useLocalSearchParams } from 'expo-router';\nimport { View, Text, StyleSheet } from 'react-native';\n\nexport default function DetailsScreen() {\n  const { id } = useLocalSearchParams();\n\n  return (\n    <View style={styles.container}>\n      <Text>Details of user {id} </Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Custom Font in React Native Text Component\nDESCRIPTION: This snippet demonstrates how to apply a custom font to a Text component in React Native using the fontFamily style property.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/user-interface/fonts.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Text style={{ fontFamily: 'Inter-Black' }}>Inter Black</Text>\n```\n\n----------------------------------------\n\nTITLE: SafeAreaProvider Setup\nDESCRIPTION: Setting up SafeAreaProvider at the root of the application.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/safe-area-context.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\n\nfunction App() {\n  return <SafeAreaProvider>...</SafeAreaProvider>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Stack Navigator in Layout (TypeScript)\nDESCRIPTION: This code shows how to create a stack navigator layout within a specific directory using a `_layout.tsx` file. It imports the `Stack` component from `expo-router` and returns it within the `StackLayout` component. This will arrange all pages within that directory in a stack relationship, enabling navigation between them using a stack.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/basics/layout.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Stack } from 'expo-router';\n\nexport default function StackLayout() {\n  return <Stack />;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Expo.plist\nDESCRIPTION: XML configuration for iOS that sets up expo-updates parameters including update URL, runtime version, and update checking behavior.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/bare/installing-updates.mdx#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n  <dict>\n    <key>EXUpdatesCheckOnLaunch</key>\n    <string>ALWAYS</string>\n    <key>EXUpdatesEnabled</key>\n    <true/>\n    <key>EXUpdatesLaunchWaitMs</key>\n    <integer>0</integer>\n    <key>EXUpdatesRuntimeVersion</key>\n    <string>1.0.0</string>\n    <key>EXUpdatesURL</key>\n    <string>http://localhost:3000/api/manifest</string>\n  </dict>\n</plist>\n```\n\n----------------------------------------\n\nTITLE: Implementing the iOS WKWebView Native Component\nDESCRIPTION: Swift implementation of the iOS WKWebView that loads a hardcoded URL. The code handles proper layout by overriding layoutSubviews to match the parent's bounds.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/native-view-tutorial.mdx#2025-04-22_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nimport ExpoModulesCore\nimport WebKit\n\nclass ExpoWebView: ExpoView {\n  let webView = WKWebView()\n\n  required init(appContext: AppContext? = nil) {\n    super.init(appContext: appContext)\n    clipsToBounds = true\n    addSubview(webView)\n\n    let url =  URL(string:\"https://docs.expo.dev/modules/\")!\n    let urlRequest = URLRequest(url:url)\n    webView.load(urlRequest)\n  }\n\n  override func layoutSubviews() {\n    webView.frame = bounds\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Background Location Tracking Example with TaskManager\nDESCRIPTION: Complete example of implementing background location tracking using expo-task-manager and expo-location. It demonstrates requesting permissions, starting location updates, and defining a background task to process location data.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/task-manager.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Button, View, StyleSheet } from 'react-native';\nimport * as TaskManager from 'expo-task-manager';\nimport * as Location from 'expo-location';\n\nconst LOCATION_TASK_NAME = 'background-location-task';\n\nconst requestPermissions = async () => {\n  const { status: foregroundStatus } = await Location.requestForegroundPermissionsAsync();\n  if (foregroundStatus === 'granted') {\n    const { status: backgroundStatus } = await Location.requestBackgroundPermissionsAsync();\n    if (backgroundStatus === 'granted') {\n      await Location.startLocationUpdatesAsync(LOCATION_TASK_NAME, {\n        accuracy: Location.Accuracy.Balanced,\n      });\n    }\n  }\n};\n\nconst PermissionsButton = () => (\n  <View style={styles.container}>\n    <Button onPress={requestPermissions} title=\"Enable background location\" />\n  </View>\n);\n\nTaskManager.defineTask(LOCATION_TASK_NAME, ({ data, error }) => {\n  if (error) {\n    // Error occurred - check `error.message` for more details.\n    return;\n  }\n  if (data) {\n    const { locations } = data;\n    // do something with the locations captured in the background\n  }\n});\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n\nexport default PermissionsButton;\n```\n\n----------------------------------------\n\nTITLE: Configuring Apple App Site Association (AASA) File in JSON\nDESCRIPTION: JSON configuration for the apple-app-site-association file that enables Universal Links, Apple Handoff, and Shared Web Credentials. The file must be placed in the .well-known directory of the website.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/linking/ios-universal-links.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"applinks\": {\n    \"apps\": [],\n    \"details\": [\n      {\n        \"appID\": \"QQ57RJ5UTD.com.example.myapp\",\n        \"paths\": [\"/records/*\"]\n      }\n    ]\n  },\n  \"activitycontinuation\": {\n    \"apps\": [\"<APPLE_TEAM_ID>.<BUNDLE_ID>\"]\n  },\n  \"webcredentials\": {\n    \"apps\": [\"<APPLE_TEAM_ID>.<BUNDLE_ID>\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Expo SecureStore for Encrypted Storage\nDESCRIPTION: Expo SecureStore provides encrypted key-value pair storage locally on the device, suitable for sensitive data storage.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/user-interface/store-data.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexpo-secure-store\n```\n\n----------------------------------------\n\nTITLE: Setting Up Notification Channels and Scheduling Notifications\nDESCRIPTION: TypeScript code that demonstrates creating a notification channel with a custom sound and scheduling a notification that uses this channel. This is particularly important for Android 8.0+ where channels are required.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/notifications.mdx#2025-04-22_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nawait Notifications.setNotificationChannelAsync('new_emails', {\n  name: 'E-mail notifications',\n  importance: Notifications.AndroidImportance.HIGH,\n  sound: 'mySoundFile.wav', // Provide ONLY the base filename\n});\n\nawait Notifications.scheduleNotificationAsync({\n  content: {\n    title: \"You've got mail! 📬\",\n    sound: 'mySoundFile.wav', // Provide ONLY the base filename\n  },\n  trigger: {\n    type: Notifications.SchedulableTriggerInputTypes.TIME_INTERVAL,\n    seconds: 2,\n    channelId: 'new_emails',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Text-to-Speech in React Native with expo-speech\nDESCRIPTION: This snippet demonstrates how to use the expo-speech library to implement text-to-speech functionality in a React Native application. It creates a simple button that, when pressed, speaks the text '1' using the device's text-to-speech capabilities.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/speech.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { View, StyleSheet, Button } from 'react-native';\nimport * as Speech from 'expo-speech';\n\nexport default function App() {\n  const speak = () => {\n    const thingToSay = '1';\n    Speech.speak(thingToSay);\n  };\n\n  return (\n    <View style={styles.container}>\n      <Button title=\"Press to hear some words\" onPress={speak} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    backgroundColor: '#ecf0f1',\n    padding: 8,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Opening App Settings Using React Native Linking\nDESCRIPTION: Demonstrates how to use the `Linking.openURL` method from `react-native` to open the application's settings page on the user's device. This is often used to prompt users to manually adjust permissions, such as enabling background location access on iOS after initially selecting \"Allow Once\".\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/location.mdx#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport { Linking } from 'react-native';\n\nfunction openSettings() {\n  Linking.openURL('app-settings:');\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Calendar Permissions in iOS Info.plist\nDESCRIPTION: XML snippet showing how to add calendar and reminder usage description keys to the iOS Info.plist file.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/calendar.mdx#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<key>NSCalendarsUsageDescription</key>\n<string>Allow $(PRODUCT_NAME) to access your calendar</string>\n<key>NSRemindersUsageDescription</key>\n<string>Allow $(PRODUCT_NAME) to access your reminders</string>\n```\n\n----------------------------------------\n\nTITLE: iOS Native Module Implementation in Swift\nDESCRIPTION: Swift implementation for reading custom API key from Info.plist.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/config-plugin-and-native-module-tutorial.mdx#2025-04-22_snippet_14\n\nLANGUAGE: swift\nCODE:\n```\nimport ExpoModulesCore\n\npublic class ExpoNativeConfigurationModule: Module {\n  public func definition() -> ModuleDefinition {\n    Name(\"ExpoNativeConfiguration\")\n\n    Function(\"getApiKey\") {\n     return Bundle.main.object(forInfoDictionaryKey: \"MY_CUSTOM_API_KEY\") as? String\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Production Build Profile Configuration\nDESCRIPTION: Minimal configuration for production builds intended for app store submission.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/build/eas-json.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"production\": {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Metro Bundler for Web in Expo (JSON)\nDESCRIPTION: This snippet shows how to configure the app.json file to use Metro as the web bundler in an Expo project, which is required for Tailwind CSS support.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/tailwind.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"web\": {\n      \"bundler\": \"metro\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using IntentLauncher to Open Android Settings\nDESCRIPTION: Demonstrates how to import and use the startActivityAsync function to open Android location settings. This is a basic example of the expo-intent-launcher API usage.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/intent-launcher.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { startActivityAsync, ActivityAction } from 'expo-intent-launcher';\n\n// Open location settings\nstartActivityAsync(ActivityAction.LOCATION_SOURCE_SETTINGS);\n```\n\n----------------------------------------\n\nTITLE: Handling Keyboard Events in React Native\nDESCRIPTION: This example shows how to listen for keyboard events, toggle visibility state, and implement a dismiss button. It uses the Keyboard module from React Native.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/keyboard-handling.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useEffect, useState } from 'react';\nimport { Keyboard, View, Button, TextInput } from 'react-native';\n\nexport default function HomeScreen() {\n  const [isKeyboardVisible, setIsKeyboardVisible] = useState(false);\n\n  useEffect(() => {\n    const showSubscription = Keyboard.addListener('keyboardDidShow', handleKeyboardShow);\n    const hideSubscription = Keyboard.addListener('keyboardDidHide', handleKeyboardHide);\n\n    return () => {\n      showSubscription.remove();\n    };\n  }, []);\n\n  const handleKeyboardShow = event => {\n    setIsKeyboardVisible(true);\n  };\n\n  const handleKeyboardHide = event => {\n    setIsKeyboardVisible(false);\n  };\n\n  return (\n    <View>\n      {isKeyboardVisible && <Button title=\"Dismiss keyboard\" onPress={Keyboard.dismiss} />}\n      <TextInput placeholder=\"Type here...\" />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Native Version Policy Configuration\nDESCRIPTION: Example configuration showing how to use the nativeVersion policy to set runtime version based on version and build numbers.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/updates.mdx#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"runtimeVersion\": {\n      \"policy\": \"nativeVersion\"\n    },\n    \"version\": \"1.0.0\",\n    \"ios\": {\n      \"buildNumber\": \"1\"\n    },\n    \"android\": {\n      \"versionCode\": 1\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic BarCodeScanner Usage in React Native\nDESCRIPTION: A complete example of implementing the BarCodeScanner component in a React Native application. This code demonstrates requesting camera permissions, handling barcode scanning events, and managing the scanner state.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/bar-code-scanner.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { Text, View, StyleSheet, Button } from 'react-native';\nimport { BarCodeScanner } from 'expo-barcode-scanner';\n\nexport default function App() {\n  const [hasPermission, setHasPermission] = useState(null);\n  const [scanned, setScanned] = useState(false);\n\n  useEffect(() => {\n    const getBarCodeScannerPermissions = async () => {\n      const { status } = await BarCodeScanner.requestPermissionsAsync();\n      setHasPermission(status === 'granted');\n    };\n\n    getBarCodeScannerPermissions();\n  }, []);\n\n  const handleBarCodeScanned = ({ type, data }) => {\n    setScanned(true);\n    alert(`Bar code with type ${type} and data ${data} has been scanned!`);\n  };\n\n  if (hasPermission === null) {\n    return <Text>Requesting for camera permission</Text>;\n  }\n  if (hasPermission === false) {\n    return <Text>No access to camera</Text>;\n  }\n\n  return (\n    <View style={styles.container}>\n      <BarCodeScanner\n        onBarCodeScanned={scanned ? undefined : handleBarCodeScanned}\n        style={StyleSheet.absoluteFillObject}\n      />\n      {scanned && <Button title={'Tap to Scan Again'} onPress={() => setScanned(false)} />}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column',\n    justifyContent: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Streaming Data with Expo Fetch API - TypeScript\nDESCRIPTION: This example shows how to use the 'expo/fetch' API to perform a streamed fetch request compatible with WinterCG standards, reading data chunks as they arrive. The code depends on the 'expo/fetch' package for cross-platform Fetch API support and demonstrates handling a streaming response from a remote server. Key parameters include the request URL and headers specifying an event stream. The input is a fetch request, and the output is a Uint8Array buffer of all streamed data. Limitations: requires async functions and is intended for use in environments compatible with Expo's fetch polyfill.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/expo.mdx#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { fetch } from 'expo/fetch';\n\nconst resp = await fetch('https://httpbin.org/drip?numbytes=512&duration=2', {\n  headers: { Accept: 'text/event-stream' },\n});\nconst reader = resp.body.getReader();\nconst chunks = [];\nwhile (true) {\n  const { done, value } = await reader.read();\n  if (done) {\n    break;\n  }\n  chunks.push(value);\n}\nconst buffer = new Uint8Array(chunks.reduce((acc, chunk) => acc + chunk.length, 0));\nconsole.log(buffer.length); // 512\n```\n\n----------------------------------------\n\nTITLE: Root Layout Configuration with Session Provider\nDESCRIPTION: Sets up the root layout component that wraps the entire application with the SessionProvider for authentication context.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/advanced/authentication.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Slot } from 'expo-router';\nimport { SessionProvider } from '../ctx';\n\nexport default function Root() {\n  return (\n    <SessionProvider>\n      <Slot />\n    </SessionProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Screenshot Events with Expo Screen Capture (React Native/JavaScript)\nDESCRIPTION: This snippet details how to use expo-screen-capture to subscribe to screenshot events using addScreenshotListener, triggered after requesting and checking for the appropriate permissions (notably READ_MEDIA_IMAGES on Android 13 or lower). Employing React's useEffect hook, it ensures that the event subscription is cleaned up on component unmount. Dependencies include expo-screen-capture and react-native, with optional expo-media-library. The main parameter is platform permission, and the output is UI alert notification for each screenshot event. Permissions and platform API limitations apply, especially on older Android and all iOS versions.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/screen-capture.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as ScreenCapture from 'expo-screen-capture';\nimport { useEffect } from 'react';\nimport { Button, StyleSheet, View } from 'react-native';\n\nexport default function useScreenCaptureCallback() {\n  // Only use this if you add the READ_MEDIA_IMAGES permission to your AndroidManifest.xml\n  const hasPermissions = async () => {\n    const { status } = await ScreenCapture.requestPermissionsAsync();\n    return status === 'granted';\n  };\n\n  useEffect(() => {\n    let subscription;\n\n    const addListenerAsync = async () => {\n      if (await hasPermissions()) {\n        subscription = ScreenCapture.addScreenshotListener(() => {\n          alert('Thanks for screenshotting my beautiful app 😊');\n        });\n      } else {\n        console.error('Permissions needed to subscribe to screenshot events are missing!');\n      }\n    };\n    addListenerAsync();\n\n    return () => {\n      subscription?.remove();\n    };\n  }, []);\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Video Thumbnails with React Native and expo-video-thumbnails\nDESCRIPTION: This snippet demonstrates how to use the expo-video-thumbnails library in a React Native application to generate a thumbnail from a video URL. It uses the getThumbnailAsync function to create a thumbnail at a specific time in the video.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/video-thumbnails.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { StyleSheet, Button, View, Image, Text } from 'react-native';\nimport * as VideoThumbnails from 'expo-video-thumbnails';\n\nexport default function App() {\n  const [image, setImage] = useState(null);\n\n  const generateThumbnail = async () => {\n    try {\n      const { uri } = await VideoThumbnails.getThumbnailAsync(\n        'https://d23dyxeqlo5psv.cloudfront.net/big_buck_bunny.mp4',\n        {\n          time: 15000,\n        }\n      );\n      setImage(uri);\n    } catch (e) {\n      console.warn(e);\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      <Button onPress={generateThumbnail} title=\"Generate thumbnail\" />\n      {image && <Image source={{ uri: image }} style={styles.image} />}\n      <Text>{image}</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#F5FCFF',\n  },\n  image: {\n    width: 200,\n    height: 200,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Adding NSMicrophoneUsageDescription in Info.plist (iOS)\nDESCRIPTION: XML snippet for **ios/[app]/Info.plist**. It adds the `NSMicrophoneUsageDescription` key with a string value explaining why the app needs microphone access. This is required for iOS apps that use audio recording features when not using Expo's Continuous Native Generation (CNG).\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/av.mdx#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n```xml\n<key>NSMicrophoneUsageDescription</key>\n<string>Allow $(PRODUCT_NAME) to access your microphone</string>\n```\n```\n\n----------------------------------------\n\nTITLE: Using startActivityAsync with ActivityAction in TypeScript\nDESCRIPTION: Demonstrates how to launch an Android intent to open the location settings screen using the startActivityAsync function and ActivityAction enum from the expo-intent-launcher package.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/intent-launcher.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { startActivityAsync, ActivityAction } from 'expo-intent-launcher';\n\n// Open location settings\nstartActivityAsync(ActivityAction.LOCATION_SOURCE_SETTINGS);\n```\n\n----------------------------------------\n\nTITLE: Implementing Push Notification Navigation with React Navigation\nDESCRIPTION: This code shows how to configure React Navigation to handle deep linking from push notifications. It sets up the NavigationContainer with custom linking configuration that handles both standard deep links and URLs from push notifications.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/notifications.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { Linking } from 'react-native';\nimport * as Notifications from 'expo-notifications';\nimport { NavigationContainer } from '@react-navigation/native';\n\nexport default function App() {\n  return (\n    <NavigationContainer\n      linking={{\n        config: {\n          // Configuration for linking\n        },\n        async getInitialURL() {\n          // First, you may want to do the default deep link handling\n          // Check if app was opened from a deep link\n          const url = await Linking.getInitialURL();\n\n          if (url != null) {\n            return url;\n          }\n\n          // Handle URL from expo push notifications\n          const response = await Notifications.getLastNotificationResponseAsync();\n\n          return response?.notification.request.content.data.url;\n        },\n        subscribe(listener) {\n          const onReceiveURL = ({ url }: { url: string }) => listener(url);\n\n          // Listen to incoming links from deep linking\n          const eventListenerSubscription = Linking.addEventListener('url', onReceiveURL);\n\n          // Listen to expo push notifications\n          const subscription = Notifications.addNotificationResponseReceivedListener(response => {\n            const url = response.notification.request.content.data.url;\n\n            // Any custom logic to see whether the URL needs to be handled\n            //...\n\n            // Let React Navigation handle the URL\n            listener(url);\n          });\n\n          return () => {\n            // Clean up the event listeners\n            eventListenerSubscription.remove();\n            subscription.remove();\n          };\n        },\n      }}>\n      {/* Your app content */}\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Okta OpenID Authentication in React Native with Expo\nDESCRIPTION: This code snippet shows how to implement Okta OpenID authentication using the expo-auth-session library in a React Native app. It uses auto-discovery for Okta endpoints and demonstrates setting up the authentication request and handling the response.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/authentication.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEffect } from 'react';\nimport * as WebBrowser from 'expo-web-browser';\nimport { makeRedirectUri, useAuthRequest, useAutoDiscovery } from 'expo-auth-session';\nimport { Button, Platform } from 'react-native';\n\nWebBrowser.maybeCompleteAuthSession();\n\nexport default function App() {\n  const discovery = useAutoDiscovery('https://<OKTA_DOMAIN>.com/oauth2/default');\n  const [request, response, promptAsync] = useAuthRequest(\n    {\n      clientId: 'CLIENT_ID',\n      scopes: ['openid', 'profile'],\n      redirectUri: makeRedirectUri({\n        native: 'com.okta.<OKTA_DOMAIN>:/callback',\n      }),\n    },\n    discovery\n  );\n\n  useEffect(() => {\n    if (response?.type === 'success') {\n      const { code } = response.params;\n    }\n  }, [response]);\n\n  return (\n    <Button\n      disabled={!request}\n      title=\"Login\"\n      onPress={() => {\n        promptAsync();\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Playing Audio with expo-av in React Native\nDESCRIPTION: This React Native functional component demonstrates how to play an audio file using the `expo-av` library. It initializes an `Audio.Sound` object from a local asset, plays it upon button press, and ensures the sound is unloaded when the component unmounts to prevent memory leaks. State is used to manage the sound object.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/audio.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx\nimport { useEffect, useState } from 'react';\nimport { View, StyleSheet, Button } from 'react-native';\nimport { Audio } from 'expo-av';\n\nexport default function App() {\n  const [sound, setSound] = useState();\n\n  async function playSound() {\n    console.log('Loading Sound');\n    /* @info */ const { sound } = await Audio.Sound.createAsync(\n      /* @end */ require('./assets/Hello.mp3')\n    );\n    setSound(sound);\n\n    console.log('Playing Sound');\n    await /* @info */ sound.playAsync(); /* @end */\n  }\n\n  useEffect(() => {\n    return sound\n      ? () => {\n          console.log('Unloading Sound');\n          /* @info Always unload the Sound after using it to prevent memory leaks.*/ sound.unloadAsync(); /* @end */\n        }\n      : undefined;\n  }, [sound]);\n\n  return (\n    <View style={styles.container}>\n      <Button title=\"Play Sound\" onPress={playSound} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    backgroundColor: '#ecf0f1',\n    padding: 10,\n  },\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Simple Animation with React Native Reanimated\nDESCRIPTION: This example demonstrates how to create a basic animation using react-native-reanimated. It uses shared values, animated styles, and timing functions to animate the width of a box component when a button is pressed.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/reanimated.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Animated, {\n  useSharedValue,\n  withTiming,\n  useAnimatedStyle,\n  Easing,\n} from 'react-native-reanimated';\nimport { View, Button, StyleSheet } from 'react-native';\n\nexport default function AnimatedStyleUpdateExample() {\n  const randomWidth = useSharedValue(10);\n\n  const config = {\n    duration: 500,\n    easing: Easing.bezier(0.5, 0.01, 0, 1),\n  };\n\n  const style = useAnimatedStyle(() => {\n    return {\n      width: withTiming(randomWidth.value, config),\n    };\n  });\n\n  return (\n    <View style={styles.container}>\n      <Animated.View style={[styles.box, style]} />\n      <Button\n        title=\"toggle\"\n        onPress={() => {\n          randomWidth.value = Math.random() * 350;\n        }}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  box: {\n    width: 100,\n    height: 80,\n    backgroundColor: 'black',\n    margin: 30,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Expo Web Output Target\nDESCRIPTION: Configuration for setting the web app export method in app.json, specifying output type and bundler settings.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/publishing-websites.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"web\": {\n      \"output\": \"server\",\n      \"bundler\": \"metro\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deploy Job Type Configuration YAML\nDESCRIPTION: Configures a 'deploy' job in an EAS Workflow. The 'type' keyword is set to 'deploy', and the 'params' object specifies the 'alias' and 'prod' parameters for the deployment. This snippet illustrates how to configure a deploy job to deploy an application using EAS Hosting.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/workflows/syntax.mdx#_snippet_23\n\nLANGUAGE: YAML\nCODE:\n```\njobs:\n  my_job:\n    # @info #\n    type: deploy\n    # @end #\n    params:\n      alias: string # optional\n      prod: boolean # optional\n```\n\n----------------------------------------\n\nTITLE: Enhanced iOS Theme Module with UserDefaults\nDESCRIPTION: Complete iOS implementation with UserDefaults for persistent theme storage and event emission.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/native-module-tutorial.mdx#2025-04-22_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nimport ExpoModulesCore\n\npublic class ExpoSettingsModule: Module {\n  public func definition() -> ModuleDefinition {\n    Name(\"ExpoSettings\")\n\n    Events(\"onChangeTheme\")\n\n    Function(\"setTheme\") { (theme: String) -> Void in\n      UserDefaults.standard.set(theme, forKey:\"theme\")\n      sendEvent(\"onChangeTheme\", [\n        \"theme\": theme\n      ])\n    }\n\n    Function(\"getTheme\") { () -> String in\n      UserDefaults.standard.string(forKey: \"theme\") ?? \"system\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring iCloud Container Environment for expo-document-picker in app.json (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to configure the expo-document-picker plugin in the app.json file to specify the iCloud container environment on iOS. It sets the iCloudContainerEnvironment property to \\\"Production\\\" under the expo-document-picker plugin array. Required dependencies include the Expo CLI and expo-document-picker, and this configuration will only take effect when building a new app binary using EAS Build or npx expo run:ios. The input is a portion of app.json, and no explicit output is created aside from build-time configuration. The limitation is that changing this requires a full rebuild of the app.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/document-picker.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-document-picker\",\n        {\n          \"iCloudContainerEnvironment\": \"Production\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Pan and Tap Gestures to EmojiSticker Component in React Native\nDESCRIPTION: This code snippet covers the complete implementation of the 'EmojiSticker' component, showcasing the integration of pan and double-tap gestures. It imports necessary dependencies from 'react-native-gesture-handler' and 'react-native-reanimated', defines gestures for dragging and double-tapping, and applies animated styles for smooth transformation. Key parameters include 'imageSize' and 'stickerSource'. The pan gesture updates the sticker's position while the double-tap gesture toggles its size.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/gestures.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Gesture, GestureDetector } from 'react-native-gesture-handler';\nimport Animated, { useAnimatedStyle, useSharedValue, withSpring } from 'react-native-reanimated';\nimport { type ImageSource } from 'expo-image';\n\ntype Props = {\n  imageSize: number;\n  stickerSource: ImageSource;\n};\n\nexport default function EmojiSticker({ imageSize, stickerSource }: Props) {\n  const scaleImage = useSharedValue(imageSize);\n  const translateX = useSharedValue(0);\n  const translateY = useSharedValue(0);\n\n  const doubleTap = Gesture.Tap()\n    .numberOfTaps(2)\n    .onStart(() => {\n      if (scaleImage.value !== imageSize * 2) {\n        scaleImage.value = scaleImage.value * 2;\n      } else {\n        scaleImage.value = Math.round(scaleImage.value / 2);\n      }\n    });\n\n  const imageStyle = useAnimatedStyle(() => {\n    return {\n      width: withSpring(scaleImage.value),\n      height: withSpring(scaleImage.value),\n    };\n  });\n\n  const drag = Gesture.Pan().onChange(event => {\n    translateX.value += event.changeX;\n    translateY.value += event.changeY;\n  });\n\n  const containerStyle = useAnimatedStyle(() => {\n    return {\n      transform: [\n        {\n          translateX: translateX.value,\n        },\n        {\n          translateY: translateY.value,\n        },\n      ],\n    };\n  });\n\n  return (\n    <GestureDetector gesture={drag}>\n      <Animated.View style={[containerStyle, { top: -350 }]/* @end */}>\n        <GestureDetector gesture={doubleTap}>\n          <Animated.Image\n            source={stickerSource}\n            resizeMode=\"contain\"\n            style={[imageStyle, { width: imageSize, height: imageSize }]} \n          />\n        </GestureDetector>\n      </Animated.View>\n    </GestureDetector>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring 'on.push' for Branch Triggers in YAML\nDESCRIPTION: This snippet illustrates how to use the `on.push` configuration to trigger a workflow based on pushes to specific branches and tags.  It includes specifying branches and tags using globs and exclusions using the '!' prefix.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/workflows/syntax.mdx#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  # @info #\n  push:\n    # @end #\n    branches:\n      - main\n      - feature/**\n      - !feature/test-** # other branch names and globs\n\n\n    tags:\n      - v1\n      - v2*\n      - !v2-preview** # other tag names and globs\n\n```\n\n----------------------------------------\n\nTITLE: Secure Storage of OAuth Tokens with Expo Secure Store\nDESCRIPTION: Implementation of secure token storage using expo-secure-store for native platforms. Demonstrates how to save authentication response data securely on the device.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/authentication.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as SecureStore from 'expo-secure-store';\n\nconst MY_SECURE_AUTH_STATE_KEY = 'MySecureAuthStateKey';\n\nfunction App() {\n  const [, response] = useAuthRequest({});\n\n  useEffect(() => {\n    if (response && response.type === 'success') {\n      const auth = response.params;\n      const storageValue = JSON.stringify(auth);\n\n      if (Platform.OS !== 'web') {\n        // Securely store the auth on your device\n        SecureStore.setItemAsync(MY_SECURE_AUTH_STATE_KEY, storageValue);\n      }\n    }\n  }, [response]);\n\n  // More login code...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Module Aliases in Metro Config\nDESCRIPTION: Implementing custom module aliases in Metro configuration using a custom resolver function.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/customizing-metro.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { getDefaultConfig } = require('expo/metro-config');\n\n/** @type {import('expo/metro-config').MetroConfig} */\nconst config = getDefaultConfig(__dirname);\n\nconst ALIASES = {\n  'old-module': 'new-module',\n};\n\nconfig.resolver.resolveRequest = (context, moduleName, platform) => {\n  // Ensure you call the default resolver.\n  return context.resolveRequest(\n    context,\n    // Use an alias if one exists.\n    ALIASES[moduleName] ?? moduleName,\n    platform\n  );\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Comparing In-App Browser and System Browser in React Native\nDESCRIPTION: This example demonstrates opening a URL using both the system's default browser (via expo-linking) and an in-app browser (via expo-web-browser) in a React Native app.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/linking/into-other-apps.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Button, View, StyleSheet } from 'react-native';\nimport * as Linking from 'expo-linking';\nimport * as WebBrowser from 'expo-web-browser';\n\nexport default function Home() {\n  return (\n    <View style={styles.container}>\n      <Button\n        title=\"Open URL with the system browser\"\n        onPress={() => Linking.openURL('https://expo.dev')}\n        style={styles.button}\n      />\n      <Button\n        title=\"Open URL with an in-app browser\"\n        onPress={() => WebBrowser.openBrowserAsync('https://expo.dev')}\n        style={styles.button}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  button: {\n    marginVertical: 10,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Expo Image Picker via npx\nDESCRIPTION: Installs the expo-image-picker library using npx to facilitate image selection from device media libraries. Ensure the React Native development server is stopped before running this command. After installation, restart the server with 'npx expo start'.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/image-picker.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ npx expo install expo-image-picker\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of BarCodeScanner in React Native\nDESCRIPTION: This React Native component demonstrates the use of the BarCodeScanner from expo-barcode-scanner. It handles requesting camera permissions, managing the scanned state, and displaying the scanning viewfinder.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/bar-code-scanner.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { Text, View, StyleSheet, Button } from 'react-native';\nimport { BarCodeScanner } from 'expo-barcode-scanner';\n\nexport default function App() {\n  const [hasPermission, setHasPermission] = useState(null);\n  const [scanned, setScanned] = useState(false);\n\n  useEffect(() => {\n    const getBarCodeScannerPermissions = async () => {\n      const { status } = await BarCodeScanner.requestPermissionsAsync();\n      setHasPermission(status === 'granted');\n    };\n\n    getBarCodeScannerPermissions();\n  }, []);\n\n  const handleBarCodeScanned = ({ type, data }) => {\n    setScanned(true);\n    alert(`Bar code with type ${type} and data ${data} has been scanned!`);\n  };\n\n  if (hasPermission === null) {\n    return <Text>Requesting for camera permission</Text>;\n  }\n  if (hasPermission === false) {\n    return <Text>No access to camera</Text>;\n  }\n\n  return (\n    <View style={styles.container}>\n      <BarCodeScanner\n        onBarCodeScanned={scanned ? undefined : handleBarCodeScanned}\n        style={StyleSheet.absoluteFillObject}\n      />\n      {scanned && <Button title={'Tap to Scan Again'} onPress={() => setScanned(false)} />}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column',\n    justifyContent: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic and Custom Checkboxes in React Native with Expo\nDESCRIPTION: This snippet demonstrates how to use the expo-checkbox component to create normal, custom-colored, and disabled checkboxes in a React Native application. It utilizes the useState hook for managing the checkbox state and applies custom styling.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/checkbox.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport Checkbox from 'expo-checkbox';\nimport { useState } from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\n\nexport default function App() {\n  const [isChecked, setChecked] = useState(false);\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.section}>\n        <Checkbox style={styles.checkbox} value={isChecked} onValueChange={setChecked} />\n        <Text style={styles.paragraph}>Normal checkbox</Text>\n      </View>\n      <View style={styles.section}>\n        <Checkbox\n          style={styles.checkbox}\n          value={isChecked}\n          onValueChange={setChecked}\n          color={isChecked ? '#4630EB' : undefined}\n        />\n        <Text style={styles.paragraph}>Custom colored checkbox</Text>\n      </View>\n      <View style={styles.section}>\n        <Checkbox style={styles.checkbox} disabled value={isChecked} onValueChange={setChecked} />\n        <Text style={styles.paragraph}>Disabled checkbox</Text>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginHorizontal: 16,\n    marginVertical: 32,\n  },\n  section: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  paragraph: {\n    fontSize: 15,\n  },\n  checkbox: {\n    margin: 8,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-updates in app.json\nDESCRIPTION: Example of configuring expo-updates in the app.json file, showing the required 'updates.url' and 'runtimeVersion' properties.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/updates.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"updates\": {\n      \"url\": \"https://your-update-server.com\"\n    },\n    \"runtimeVersion\": \"1.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Root Layout in Expo Router (TypeScript)\nDESCRIPTION: This snippet shows how to create a root layout file in Expo Router. It exports a default React component called RootLayout, which can be used to define shared UI elements and navigation structure.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/file-based-routing.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function RootLayout() {\n  return (\n\t  /* @hide ... */ /* @end */\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Setting URL Scheme for Stripe Redirects in Expo\nDESCRIPTION: JavaScript code snippet demonstrating how to properly set the URL scheme for Stripe redirects in an Expo app, ensuring compatibility with both Expo Go and production builds.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/stripe.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Linking from 'expo-linking';\nimport Constants from 'expo-constants';\n\nurlScheme:\n  Constants.appOwnership === 'expo'\n    ? Linking.createURL('/--/')\n    : Linking.createURL(''),\n```\n\n----------------------------------------\n\nTITLE: Logging into Expo Account with EAS CLI\nDESCRIPTION: Command to log into an Expo account using the EAS CLI, necessary for using EAS services.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/getting-started.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ eas login\n```\n\n----------------------------------------\n\nTITLE: Implementing Location Tracking in React Native with Expo\nDESCRIPTION: This example shows how to implement basic location tracking in a React Native app using Expo's Location API. It requests foreground permissions, retrieves the current position, and displays the location data or error messages.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/location.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { Platform, Text, View, StyleSheet } from 'react-native';\nimport * as Device from 'expo-device';\nimport * as Location from 'expo-location';\n\nexport default function App() {\n  const [location, setLocation] = useState<Location.LocationObject | null>(null);\n  const [errorMsg, setErrorMsg] = useState<string | null>(null);\n\n  useEffect(() => {\n    async function getCurrentLocation() {\n      if (Platform.OS === 'android' && !Device.isDevice) {\n        setErrorMsg(\n          'Oops, this will not work on Snack in an Android Emulator. Try it on your device!'\n        );\n        return;\n      }\n      let { status } = await Location.requestForegroundPermissionsAsync();\n      if (status !== 'granted') {\n        setErrorMsg('Permission to access location was denied');\n        return;\n      }\n\n      let location = await Location.getCurrentPositionAsync({});\n      setLocation(location);\n    }\n\n    getCurrentLocation();\n  }, []);\n\n  let text = 'Waiting...';\n  if (errorMsg) {\n    text = errorMsg;\n  } else if (location) {\n    text = JSON.stringify(location);\n  }\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.paragraph}>{text}</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 20,\n  },\n  paragraph: {\n    fontSize: 18,\n    textAlign: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Runtime Version Configuration\nDESCRIPTION: Shows how to set a runtime version specifically for Android platform in the Expo configuration.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/runtime-versions.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"android\": {\n      \"runtimeVersion\": \"1.0.0\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Search Parameter Updates with TextInput\nDESCRIPTION: Implementation of dynamic search parameter updates using TextInput and router.setParams\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/reference/url-parameters.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useLocalSearchParams, router } from 'expo-router';\nimport { useState } from 'react';\nimport { TextInput, View } from 'react-native';\n\nexport default function Page() {\n  const params = useLocalSearchParams<{ query?: string }>();\n  const [search, setSearch] = useState(params.query);\n\n  return (\n    <TextInput\n      value={search}\n      onChangeText={search => {\n        setSearch(search);\n        router.setParams({ query: search });\n      }}\n      placeholderTextColor=\"#A0A0A0\"\n      placeholder=\"Search\"\n      style={{\n        borderRadius: 12,\n        backgroundColor: '#fff',\n        fontSize: 24,\n        color: '#000',\n        margin: 12,\n        padding: 16,\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Localization Functions in React Native\nDESCRIPTION: Example showing how to import the main localization functions getLocales and getCalendars from the expo-localization package.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/localization.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { getLocales, getCalendars } from 'expo-localization';\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-asset with JSON\nDESCRIPTION: This JSON snippet demonstrates how to configure the 'expo-asset' library in the app's configuration file using a config plugin. It defines the assets to be included by specifying their paths. Make sure to list paths relative to the project root. Supported file types include images, media, and SQLite databases.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/asset.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-asset\",\n        {\n          \"assets\": [\"path/to/file.png\", \"path/to/directory\"]\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Apple App Store Advisory Settings in EAS Metadata\nDESCRIPTION: Example configuration showing the complete advisory settings for Apple App Store with least restrictive answers. This includes age ratings, content warnings, and access restrictions that determine the app's parental control settings.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/metadata/schema.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"configVersion\": 0,\n  \"apple\": {\n    \"advisory\": {\n      \"alcoholTobaccoOrDrugUseOrReferences\": \"NONE\",\n      \"contests\": \"NONE\",\n      \"gamblingSimulated\": \"NONE\",\n      \"horrorOrFearThemes\": \"NONE\",\n      \"matureOrSuggestiveThemes\": \"NONE\",\n      \"medicalOrTreatmentInformation\": \"NONE\",\n      \"profanityOrCrudeHumor\": \"NONE\",\n      \"sexualContentGraphicAndNudity\": \"NONE\",\n      \"sexualContentOrNudity\": \"NONE\",\n      \"violenceCartoonOrFantasy\": \"NONE\",\n      \"violenceRealistic\": \"NONE\",\n      \"violenceRealisticProlongedGraphicOrSadistic\": \"NONE\",\n      \"gambling\": false,\n      \"unrestrictedWebAccess\": false,\n      \"kidsAgeBand\": null,\n      \"ageRatingOverride\": \"NONE\",\n      \"koreaAgeRatingOverride\": \"NONE\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Relative Routes in Expo Router\nDESCRIPTION: Shows examples of using relative routes for navigation in Expo Router. This includes using the Link component and the router.navigate function with relative paths.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/basics/navigation.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Link href=\"./article\">Go to article</Link>\n```\n\nLANGUAGE: ts\nCODE:\n```\nrouter.navigate('./article');\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS App Groups for SQLite Database Sharing\nDESCRIPTION: Configuration for sharing SQLite databases between iOS apps/extensions using App Groups.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/sqlite.mdx#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"ios\": {\n      \"bundleIdentifier\": \"com.myapp\",\n      \"entitlements\": {\n        \"com.apple.security.application-groups\": [\"group.com.myapp\"]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Firebase JS SDK in Expo\nDESCRIPTION: Code snippet to initialize the Firebase JS SDK in an Expo project. It creates a config object with API keys and other identifiers, then initializes the Firebase app.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/using-firebase.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { initializeApp } from 'firebase/app';\n\n// Optionally import the services that you want to use\n// import {...} from 'firebase/auth';\n// import {...} from 'firebase/database';\n// import {...} from 'firebase/firestore';\n// import {...} from 'firebase/functions';\n// import {...} from 'firebase/storage';\n\n// Initialize Firebase\nconst firebaseConfig = {\n  apiKey: 'api-key',\n  authDomain: 'project-id.firebaseapp.com',\n  databaseURL: 'https://project-id.firebaseio.com',\n  projectId: 'project-id',\n  storageBucket: 'project-id.appspot.com',\n  messagingSenderId: 'sender-id',\n  appId: 'app-id',\n  measurementId: 'G-measurement-id',\n};\n\nconst app = initializeApp(firebaseConfig);\n// For more information on how to access Firebase in your project,\n// see the Firebase documentation: https://firebase.google.com/docs/web/setup#access-firebase\n```\n\n----------------------------------------\n\nTITLE: Deploying to Production Workflow in YAML\nDESCRIPTION: This complex workflow automates the process of deploying to production. It checks for existing builds, creates new builds if necessary, submits to app stores, and publishes updates. It requires EAS Build, EAS Submit, and EAS Update to be set up.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/workflows/examples.mdx#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nname: Deploy to production\n\non:\n  push:\n    branches: ['main']\n\njobs:\n  fingerprint:\n    name: Fingerprint\n    type: fingerprint\n  get_android_build:\n    name: Check for existing android build\n    needs: [fingerprint]\n    type: get-build\n    params:\n      fingerprint_hash: ${{ needs.fingerprint.outputs.android_fingerprint_hash }}\n      profile: production\n  get_ios_build:\n    name: Check for existing ios build\n    needs: [fingerprint]\n    type: get-build\n    params:\n      fingerprint_hash: ${{ needs.fingerprint.outputs.ios_fingerprint_hash }}\n      profile: production\n  build_android:\n    name: Build Android\n    needs: [get_android_build]\n    if: ${{ !needs.get_android_build.outputs.build_id }}\n    type: build\n    params:\n      platform: android\n      profile: production\n  build_ios:\n    name: Build iOS\n    needs: [get_ios_build]\n    if: ${{ !needs.get_ios_build.outputs.build_id }}\n    type: build\n    params:\n      platform: ios\n      profile: production\n  submit_android_build:\n    name: Submit Android Build\n    needs: [build_android]\n    type: submit\n    params:\n      build_id: ${{ needs.build_android.outputs.build_id }}\n  submit_ios_build:\n    name: Submit iOS Build\n    needs: [build_ios]\n    type: submit\n    params:\n      build_id: ${{ needs.build_ios.outputs.build_id }}\n  publish_android_update:\n    name: Publish Android update\n    needs: [get_android_build]\n    if: ${{ needs.get_android_build.outputs.build_id }}\n    type: update\n    params:\n      branch: production\n      platform: android\n  publish_ios_update:\n    name: Publish iOS update\n    needs: [get_ios_build]\n    if: ${{ needs.get_ios_build.outputs.build_id }}\n    type: update\n    params:\n      branch: production\n      platform: ios\n```\n\n----------------------------------------\n\nTITLE: Loading Vector Icons with useFonts\nDESCRIPTION: Example of preloading vector icons using useFonts to prevent initial invisible icons.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/user-interface/fonts.mdx#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useFonts } from 'expo-font';\nimport Ionicons from '@expo/vector-icons/Ionicons';\n\nexport default function RootLayout() {\n  useFonts([require('./assets/fonts/Inter-Black.otf', Ionicons.font)]);\n\n  return (\n    /* ... */\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Boundary Component in Expo Router\nDESCRIPTION: Demonstrates how to create a custom error boundary component to handle and display component-level errors. Includes error message display and retry functionality.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/error-handling.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { View, Text } from 'react-native';\nimport { type ErrorBoundaryProps } from 'expo-router';\n\nexport function ErrorBoundary({ error, retry }: ErrorBoundaryProps) {\n  return (\n    <View style={{ flex: 1, backgroundColor: \"red\" }}>\n      <Text>{error.message}</Text>\n      <Text onPress={retry}>Try Again?</Text>\n    </View>\n  );\n}\n\nexport default function Page() { ... }\n```\n\n----------------------------------------\n\nTITLE: Deleting Devices from Expo Account in EAS Build\nDESCRIPTION: This command deletes devices from your Expo account and optionally disables them on the Apple Developer Portal for ad hoc distribution.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/build/internal-distribution.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ eas device:delete\n```\n\n----------------------------------------\n\nTITLE: Recording Audio in React Native\nDESCRIPTION: React component showing audio recording implementation using expo-audio's useAudioRecorder hook with permission handling.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/audio.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { View, StyleSheet, Button } from 'react-native';\nimport { useAudioRecorder, RecordingOptions, AudioModule, RecordingPresets } from 'expo-audio';\n\nexport default function App() {\n  const audioRecorder = useAudioRecorder(RecordingPresets.HIGH_QUALITY);\n\n  const record = async () => {\n    await audioRecorder.prepareToRecordAsync();\n    audioRecorder.record();\n  };\n\n  const stopRecording = async () => {\n    // The recording will be available on `audioRecorder.uri`.\n    await audioRecorder.stop();\n  };\n\n  useEffect(() => {\n    (async () => {\n      const status = await AudioModule.requestRecordingPermissionsAsync();\n      if (!status.granted) {\n        Alert.alert('Permission to access microphone was denied');\n      }\n    })();\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <Button\n        title={audioRecorder.isRecording ? 'Stop Recording' : 'Start Recording'}\n        onPress={audioRecorder.isRecording ? stopRecording : record}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    backgroundColor: '#ecf0f1',\n    padding: 10,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Manual Update Check Implementation in React Native\nDESCRIPTION: Example React Native component demonstrating how to manually check for and apply updates using expo-updates. Includes error handling and user interface for triggering updates.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/updates.mdx#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { View, Button } from 'react-native';\nimport * as Updates from 'expo-updates';\n\nfunction App() {\n  async function onFetchUpdateAsync() {\n    try {\n      const update = await Updates.checkForUpdateAsync();\n\n      if (update.isAvailable) {\n        await Updates.fetchUpdateAsync();\n        await Updates.reloadAsync();\n      }\n    } catch (error) {\n      // You can also add an alert() to see the error message in case of an error when fetching updates.\n      alert(`Error fetching latest Expo update: ${error}`);\n    }\n  }\n\n  return (\n    <View>\n      <Button title=\"Fetch update\" onPress={onFetchUpdateAsync} />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using WebView Component in React Native\nDESCRIPTION: This snippet demonstrates how to use the WebView component from the `react-native-webview` library to display web content in a React Native application. Dependencies include `react-native-webview` and `expo-constants`. It imports the necessary modules and sets up a simple UI that loads a webpage. The snippet requires a defined `styles` object for styling the WebView component.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/webview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { WebView } from 'react-native-webview';\nimport Constants from 'expo-constants';\nimport { StyleSheet } from 'react-native';\n\nexport default function App() {\n  return (\n    <WebView\n      style={styles.container}\n      source={{ uri: 'https://expo.dev' }}\n    />\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: Constants.statusBarHeight,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring App Versions in app.config.js\nDESCRIPTION: Example configuration showing how to manually set developer-facing version values (versionCode for Android and buildNumber for iOS) in app.config.js, though this is typically handled automatically by EAS Build.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/eas/manage-app-versions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  ios: {\n    buildNumber: 1\n    /* @hide ... */ /* @end */\n  },\n  android: {\n    versionCode: 1\n  }\n  /* @hide ... */ /* @end */\n}\n```\n\n----------------------------------------\n\nTITLE: Installing EAS CLI Globally\nDESCRIPTION: Command to install the EAS CLI globally using npm, allowing interaction with EAS services from the terminal.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/getting-started.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install --global eas-cli\n```\n\n----------------------------------------\n\nTITLE: Implementing Print Functionality in React Native with expo-print\nDESCRIPTION: A complete React Native component example demonstrating how to use expo-print and expo-sharing to print HTML content directly or save it as a PDF file. It includes functionality to select a printer on iOS and handle different platform behaviors.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/print.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { View, StyleSheet, Button, Platform, Text } from 'react-native';\nimport * as Print from 'expo-print';\nimport { shareAsync } from 'expo-sharing';\n\nconst html = `\n<html>\n  <head>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no\" />\n  </head>\n  <body style=\"text-align: center;\">\n    <h1 style=\"font-size: 50px; font-family: Helvetica Neue; font-weight: normal;\">\n      Hello Expo!\n    </h1>\n    <img\n      src=\"https://d30j33t1r58ioz.cloudfront.net/static/guides/sdk.png\"\n      style=\"width: 90vw;\" />\n  </body>\n</html>\n`;\n\nexport default function App() {\n  const [selectedPrinter, setSelectedPrinter] = useState();\n\n  const print = async () => {\n    // On iOS/android prints the given html. On web prints the HTML from the current page.\n    /* @info */ await Print.printAsync({\n      html,\n      printerUrl: selectedPrinter?.url, // iOS only\n    }); /* @end */\n  };\n\n  const printToFile = async () => {\n    // On iOS/android prints the given html. On web prints the HTML from the current page.\n    /* @info */ const { uri } = await Print.printToFileAsync({ html }); /* @end */\n    console.log('File has been saved to:', uri);\n    await shareAsync(uri, { UTI: '.pdf', mimeType: 'application/pdf' });\n  };\n\n  const selectPrinter = async () => {\n    /* @info */ const printer = await Print.selectPrinterAsync(); // iOS only\n    /* @end */\n    setSelectedPrinter(printer);\n  };\n\n  return (\n    <View style={styles.container}>\n      <Button title=\"Print\" onPress={print} />\n      <View style={styles.spacer} />\n      <Button title=\"Print to PDF file\" onPress={printToFile} />\n      {Platform.OS === 'ios' && (\n        <>\n          <View style={styles.spacer} />\n          <Button title=\"Select printer\" onPress={selectPrinter} />\n          <View style={styles.spacer} />\n          {selectedPrinter ? (\n            <Text style={styles.printer}>{`Selected printer: ${selectedPrinter.name}`}</Text>\n          ) : undefined}\n        </>\n      )}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    backgroundColor: '#ecf0f1',\n    flexDirection: 'column',\n    padding: 8,\n  },\n  spacer: {\n    height: 8,\n  },\n  printer: {\n    textAlign: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Working Directory for Job Steps in YAML\nDESCRIPTION: This snippet shows how to set the working directory for all steps in a job using `jobs.<job_id>.defaults.run.working_directory`. This ensures all commands are executed within the specified directory.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/workflows/syntax.mdx#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  my_job:\n    # @info #\n    defaults:\n      run:\n        working_directory: ./my-app\n    # @end #\n    steps:\n      - name: My first step\n        run: pwd # prints: /home/expo/workingdir/build/my-app\n```\n\n----------------------------------------\n\nTITLE: Playing Audio with useAudioPlayer Hook in React Native\nDESCRIPTION: This JSX snippet demonstrates how to play an audio file in a React Native component using the `useAudioPlayer` hook from `expo-audio`. It imports the necessary modules, loads an audio asset, initializes the player with the audio source, and provides a button to trigger playback via the `player.play()` method. Requires `expo-audio` and `expo-asset` dependencies.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/audio.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEffect, useState } from 'react';\nimport { View, StyleSheet, Button } from 'react-native';\nimport { useAudioPlayer } from 'expo-audio';\n\nconst audioSource = require('./assets/Hello.mp3');\n\nexport default function App() {\n  const player = useAudioPlayer(audioSource);\n\n  return (\n    <View style={styles.container}>\n      <Button title=\"Play Sound\" onPress={() => player.play()} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    backgroundColor: '#ecf0f1',\n    padding: 10,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Android Camera Permissions in AndroidManifest.xml\nDESCRIPTION: Declares necessary permissions in `AndroidManifest.xml` for projects not using Continuous Native Generation (CNG). `android.permission.CAMERA` permission is typically added automatically by `expo-camera`, but `android.permission.RECORD_AUDIO` needs to be manually added if video recording with audio is required.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/camera-next.mdx#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n```xml\n<!-- Added permission -->\n<uses-permission android:name=\"android.permission.CAMERA\" />\n\n<!-- Only when recording videos with audio -->\n<uses-permission android:name=\"android.permission.RECORD_AUDIO\" />\n```\n```\n\n----------------------------------------\n\nTITLE: Example of setting default tool versions in YAML\nDESCRIPTION: This snippet demonstrates how to define default tool versions for an EAS workflow using the `defaults.tools` configuration. It includes examples for Node.js, Yarn, corepack, pnpm, bun, fastlane, and cocoapods.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/workflows/syntax.mdx#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nname: Set up custom versions\ndefaults:\n  tools:\n    node: latest\n    yarn: '2'\n    corepack: true\n    pnpm: '8'\n    bun: '1.0.0'\n    fastlane: 2.224.0\n    cocoapods: 1.12.0\n\non:\n  push:\n    branches: ['*']\n\njobs:\n  setup:\n    steps:\n      - name: Check Node version\n        run: node --version # should print a concrete version, like 23.9.0\n      - name: Check Yarn version\n        run: yarn --version # should print a concrete version, like 2.4.3\n```\n\n----------------------------------------\n\nTITLE: Setting Up SafeAreaProvider in App Root\nDESCRIPTION: How to set up the SafeAreaProvider component at the root of your application, which is required for the context to work properly.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/safe-area-context.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\n\nfunction App() {\n  return <SafeAreaProvider>...</SafeAreaProvider>;\n}\n```\n\n----------------------------------------\n\nTITLE: Image Picker Implementation Example\nDESCRIPTION: React Native component demonstrating image picking functionality with preview display and console logging of selected image details.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/imagepicker.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useState } from 'react';\nimport { Button, Image, View, StyleSheet } from 'react-native';\nimport * as ImagePicker from 'expo-image-picker';\n\nexport default function ImagePickerExample() {\n  const [image, setImage] = useState<string | null>(null);\n\n  const pickImage = async () => {\n    // No permissions request is necessary for launching the image library\n    let result = await ImagePicker.launchImageLibraryAsync({\n      mediaTypes: ['images', 'videos'],\n      allowsEditing: true,\n      aspect: [4, 3],\n      quality: 1,\n    });\n\n    console.log(result);\n\n    if (!result.canceled) {\n      setImage(result.assets[0].uri);\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      <Button title=\"Pick an image from camera roll\" onPress={pickImage} />\n      {image && <Image source={{ uri: image }} style={styles.image} />}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  image: {\n    width: 200,\n    height: 200,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Importing and Using expo-crypto for SHA256 Hashing in React Native\nDESCRIPTION: This example demonstrates how to use expo-crypto to create a SHA256 hash of a string in a React Native application. The code sets up a basic React Native component with a useEffect hook that asynchronously generates a digest of a string and logs the result to the console.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/crypto.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEffect } from 'react';\nimport { StyleSheet, View, Text } from 'react-native';\nimport * as Crypto from 'expo-crypto';\n\nexport default function App() {\n  useEffect(() => {\n    (async () => {\n      const digest = await Crypto.digestStringAsync(\n        Crypto.CryptoDigestAlgorithm.SHA256,\n        'GitHub stars are neat 🌟'\n      );\n      console.log('Digest: ', digest);\n      /* Some crypto operation... */\n    })();\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <Text>Crypto Module Example</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using expo-clipboard in React Native\nDESCRIPTION: This code snippet demonstrates how to use the `expo-clipboard` library to copy a string to the clipboard and retrieve text from the clipboard in a React Native application. It uses state management to display the copied text on the screen. Dependencies include `expo-clipboard` and `react-native`. The input is straightforward user interaction with buttons, and the output is displayed text on the screen.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/clipboard.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport { useState } from 'react';\nimport { View, Text, Button, StyleSheet } from 'react-native';\nimport * as Clipboard from 'expo-clipboard';\n\nexport default function App() {\n  const [copiedText, setCopiedText] = useState('');\n\n  const copyToClipboard = async () => {\n    /* @info Copy the text to the clipboard */\n    await Clipboard.setStringAsync('hello world');\n    /* @end */\n  };\n\n  const fetchCopiedText = async () => {\n    const text = /* @info Paste the text from the clipboard */ await Clipboard.getStringAsync();\n    /* @end */\n    setCopiedText(text);\n  };\n\n  return (\n    <View style={styles.container}>\n      <Button title=\"Click here to copy to Clipboard\" onPress={copyToClipboard} />\n      <Button title=\"View copied text\" onPress={fetchCopiedText} />\n      <Text style={styles.copiedText}>{copiedText}</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  copiedText: {\n    marginTop: 10,\n    color: 'red',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Moving and Copying Files with expo-file-system/next in TypeScript\nDESCRIPTION: Demonstrates how to create a file and then move it to different locations on the filesystem. Shows how to track the changing URI as the file is moved between directories.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/filesystem-next.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { File, Paths } from 'expo-file-system/next';\n\ntry {\n  const file = new File(Paths.document, 'example.txt');\n  file.create();\n  console.log(file.uri); // '${documentDirectory}/example.txt'\n  file.move(Paths.cache);\n  console.log(file.uri); // '${cacheDirectory}/example.txt'\n  file.move(new Directory(Paths.cache, 'newFolder'));\n  console.log(file.uri); // '${cacheDirectory}/newFolder/example.txt'\n} catch (error) {\n  console.error(error);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Pedometer Tracking in React Native with Expo\nDESCRIPTION: Complete React Native component demonstrating pedometer functionality including step counting for the last 24 hours and real-time step tracking. Uses useState and useEffect hooks for state management and lifecycle handling.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/pedometer.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\nimport { Pedometer } from 'expo-sensors';\n\nexport default function App() {\n  const [isPedometerAvailable, setIsPedometerAvailable] = useState('checking');\n  const [pastStepCount, setPastStepCount] = useState(0);\n  const [currentStepCount, setCurrentStepCount] = useState(0);\n\n  const subscribe = async () => {\n    const isAvailable = await Pedometer.isAvailableAsync();\n    setIsPedometerAvailable(String(isAvailable));\n\n    if (isAvailable) {\n      const end = new Date();\n      const start = new Date();\n      start.setDate(end.getDate() - 1);\n\n      const pastStepCountResult = await Pedometer.getStepCountAsync(start, end);\n      if (pastStepCountResult) {\n        setPastStepCount(pastStepCountResult.steps);\n      }\n\n      return Pedometer.watchStepCount(result => {\n        setCurrentStepCount(result.steps);\n      });\n    }\n  };\n\n  useEffect(() => {\n    const subscription = subscribe();\n    return () => subscription && subscription.remove();\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <Text>Pedometer.isAvailableAsync(): {isPedometerAvailable}</Text>\n      <Text>Steps taken in the last 24 hours: {pastStepCount}</Text>\n      <Text>Walk! And watch this go up: {currentStepCount}</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: 15,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Push Receipt Response Format in JavaScript\nDESCRIPTION: Defines the response structure for push receipt requests, mapping receipt IDs to their status and potential error information.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/push-notifications/sending-notifications.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"data\": {\n    Receipt ID: {\n      \"status\": \"error\" | \"ok\",\n      // if status === \"error\"\n      \"message\": string,\n      \"details\": JSON\n    },\n    ...\n  },\n  // only populated if there was an error with the entire request\n  \"errors\": [{\n    \"code\": string,\n    \"message\": string\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Android E2E Test Workflow\nDESCRIPTION: YAML workflow configuration for running E2E tests on Android, including build and test steps using Maestro.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/workflows/reference/e2e-tests.mdx#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nname: e2e-test-android\n\non:\n  pull_request:\n    branches: ['*']\njobs:\n  build_android_for_e2e:\n    type: build\n    params:\n      platform: android\n      profile: e2e-test\n\n  maestro_test:\n    needs: [build_android_for_e2e]\n    type: maestro\n    params:\n      build_id: ${{ needs.build_android_for_e2e.outputs.build_id }}\n      flow_path: ['.maestro/home.yml']\n```\n\n----------------------------------------\n\nTITLE: Importing Core Components from Expo Router\nDESCRIPTION: This code snippet demonstrates how to import the essential navigation components from expo-router. It shows the import statement for Stack, Tabs, and Link which are the primary navigation elements.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/router.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { Stack, Tabs, Link } from 'expo-router';\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Services File Path in app.json\nDESCRIPTION: Configuration snippet for specifying the path to google-services.json file in the Expo app configuration. This setting is required for FCM push notifications to work properly in Android applications.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/push-notifications/fcm-credentials.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n  /* @hide ...*/ /* @end */\n  \"android\": {\n    /* @hide ...*/ /* @end */\n    \"googleServicesFile\": \"./path/to/google-services.json\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Regenerating Native Project Directories Cleanly with Expo Prebuild using Bash\nDESCRIPTION: This command forces a clean regeneration of the native `android` and `ios` project directories by first removing existing ones and then running the `prebuild` process based on the current Expo app config and dependencies. It is used when updates to native dependencies or configurations require a fresh native project setup. Requires Node.js, npm/npx, and Expo CLI.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/workflow/overview.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo prebuild --clean\n```\n\n----------------------------------------\n\nTITLE: Importing an Existing SQLite Database with SQLiteProvider\nDESCRIPTION: Demonstrates how to open a pre-existing SQLite database file in a React Native application using SQLiteProvider with the assetSource prop, allowing you to bundle database files with your application.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/sqlite.mdx#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SQLiteProvider, useSQLiteContext } from 'expo-sqlite';\nimport { View, Text, StyleSheet } from 'react-native';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <SQLiteProvider databaseName=\"test.db\" assetSource={{ assetId: require('./assets/test.db') }}>\n        <Header />\n        <Content />\n      </SQLiteProvider>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using CSS in Server Components\nDESCRIPTION: Shows how to import global CSS and CSS modules in Server Components. The CSS will be hoisted into the client bundle from the server.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/server-components.mdx#2025-04-22_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport './styles.css';\nimport styles from './styles.module.css';\n\nexport default function Index() {\n  return <div className={styles.container}>Hello, world!</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Imperative Redirects with useRouter Hook\nDESCRIPTION: Shows how to perform programmatic navigation using the useRouter hook and useFocusEffect. This approach allows for dynamic redirects that occur each time the screen comes into focus.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/reference/redirects.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Text } from 'react-native';\nimport { useRouter, useFocusEffect } from 'expo-router';\n\nfunction MyScreen() {\n  const router = useRouter();\n\n  useFocusEffect(() => {\n    router.replace('/profile/settings');\n  });\n\n  return <Text>My Screen</Text>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Video component with expo-av\nDESCRIPTION: Illustrates handling a Video component reference for controlling playback state in expo-av. Essential for React components using video playback.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/av.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n_handleVideoRef = component => {\n  const playbackObject = component;\n  ...\n}\n\nrender() {\n  return (\n      <Video\n        ref={this._handleVideoRef}\n      />\n      /* @hide ... */ /* @end */\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Static Pages with generateStaticParams\nDESCRIPTION: Example showing how to generate static pages at build-time using the generateStaticParams function. This is useful for components that must only run at build-time and not on the server.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/server-components.mdx#2025-04-22_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Text } from 'react-native';\n\n// Adding `unstable_settings.render: 'static'` will prevent this component from running on the server.\nexport const unstable_settings = {\n  render: 'static',\n};\n\n// This function will generate static pages for each shape.\nexport async function generateStaticParams() {\n  return [{ shape: 'square' }];\n}\n\nexport default function ShapeRoute({ shape }) {\n  return <Text>{shape}</Text>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint for Expo/React Native Projects (js)\nDESCRIPTION: This example shows the `eslintConfig` object within `package.json` specifically configured for an Expo or React Native project. It extends `universe/native`, which includes rules tailored for React Native development.\nSOURCE: https://github.com/expo/expo/blob/main/packages/eslint-config-universe/README.md#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n\"eslintConfig\": {\n  \"extends\": \"universe/native\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding expo-apple-authentication Plugin in Expo app.json (JSON)\nDESCRIPTION: This JSON snippet adds the expo-apple-authentication config plugin to your Expo app.json file, enabling build-time configuration for Sign In with Apple. The plugins field under the expo object should include \\\"expo-apple-authentication\\\". This is essential when using EAS Build as it ensures the necessary native settings and entitlements are automatically configured during the build process. No outputs are generated directly; all configuration is handled at build time.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/apple-authentication.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"expo\\\": {\\n    \\\"plugins\\\": [\\\"expo-apple-authentication\\\"]\\n  }\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Basic WebBrowser Usage in React Native with Expo\nDESCRIPTION: This snippet demonstrates how to use the WebBrowser.openBrowserAsync method to open a URL in the system's web browser. It also shows how to handle the result of the browser session.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/webbrowser.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { Button, Text, View, StyleSheet } from 'react-native';\nimport * as WebBrowser from 'expo-web-browser';\n/* @hide */\nimport Constants from 'expo-constants';\n/* @end */\n\nexport default function App() {\n  const [result, setResult] = useState(null);\n\n  const _handlePressButtonAsync = async () => {\n    let result = await WebBrowser.openBrowserAsync('https://expo.dev');\n    setResult(result);\n  };\n  return (\n    <View style={styles.container}>\n      <Button title=\"Open WebBrowser\" onPress={_handlePressButtonAsync} />\n      <Text>{result && JSON.stringify(result)}</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingTop: Constants.statusBarHeight,\n    backgroundColor: '#ecf0f1',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting up urlScheme for Stripe initialization in Expo\nDESCRIPTION: This code snippet demonstrates how to properly set up the urlScheme when initializing Stripe. It uses expo-linking and expo-constants to create the correct URL scheme for both Expo Go and production apps.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/stripe.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Linking from 'expo-linking';\nimport Constants from 'expo-constants';\n\nurlScheme:\n  Constants.appOwnership === 'expo'\n    ? Linking.createURL('/--/')\n    : Linking.createURL(''),\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-media-library plugin in app.json\nDESCRIPTION: Example of configuring the expo-media-library plugin in the app.json file. It sets permissions for photos access and saving, and enables media location access on Android.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/media-library.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-media-library\",\n        {\n          \"photosPermission\": \"Allow $(PRODUCT_NAME) to access your photos.\",\n          \"savePhotosPermission\": \"Allow $(PRODUCT_NAME) to save photos.\",\n          \"isAccessMediaLocationEnabled\": true\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Expo Development Server\nDESCRIPTION: Command to start the Expo development server which enables viewing the app on connected devices.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/get-started/start-developing.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo start\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables in Expo App Configuration\nDESCRIPTION: This example shows how to use environment variables in the app.config.js file to dynamically set app name, bundle identifier, and package name based on the APP_VARIANT environment variable.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/environment-variables.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst IS_DEV = process.env.APP_VARIANT === 'development';\nconst IS_PREVIEW = process.env.APP_VARIANT === 'preview';\n\nconst getUniqueIdentifier = () => {\n  if (IS_DEV) {\n    return 'com.yourname.stickersmash.dev';\n  }\n\n  if (IS_PREVIEW) {\n    return 'com.yourname.stickersmash.preview';\n  }\n\n  return 'com.yourname.stickersmash';\n};\n\nconst getAppName = () => {\n  if (IS_DEV) {\n    return 'StickerSmash (Dev)';\n  }\n\n  if (IS_PREVIEW) {\n    return 'StickerSmash (Preview)';\n  }\n\n  return 'StickerSmash: Emoji Stickers';\n};\n\nexport default {\n  name: getAppName(),\n  ios: {\n    bundleIdentifier: getUniqueIdentifier(),\n  },\n  android: {\n    package: getUniqueIdentifier(),\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Event Handling with useEvent Hook\nDESCRIPTION: Demonstrates how to use the useEvent hook to listen for changes in the VideoPlayer's status and error state.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/video.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEvent } from 'expo';\n// ... Other imports, definition of the component, creating the player etc.\n\nconst { status, error } = useEvent(player, 'statusChange', { status: player.status });\n// Rest of the component...\n```\n\n----------------------------------------\n\nTITLE: Creating and Publishing EAS Updates\nDESCRIPTION: Commands for creating new updates with manual branch/message specification or using Git information automatically.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/eas-cli.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ eas update --branch [branch-name] --message \"...\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ eas update --auto\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Reusable Button Component in React Native (tsx)\nDESCRIPTION: Defines a functional component `Button` in `components/Button.tsx` using React Native's `Pressable` for touch handling. It accepts a `label` prop and displays it as text. An `onPress` handler is attached to trigger an alert. Basic styling is applied using `StyleSheet.create` for layout and appearance.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/build-a-screen.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StyleSheet, View, Pressable, Text } from 'react-native';\n\ntype Props = {\n  label: string;\n};\n\nexport default function Button({ label }: Props) {\n  return (\n    <View style={styles.buttonContainer}>\n      <Pressable style={styles.button} onPress={() => alert('You pressed a button.')}>\n        <Text style={styles.buttonLabel}>{label}</Text>\n      </Pressable>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  buttonContainer: {\n    width: 320,\n    height: 68,\n    marginHorizontal: 20,\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 3,\n  },\n  button: {\n    borderRadius: 10,\n    width: '100%',\n    height: '100%',\n    alignItems: 'center',\n    justifyContent: 'center',\n    flexDirection: 'row',\n  },\n  buttonLabel: {\n    color: '#fff',\n    fontSize: 16,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Expo Location Plugin in app.json\nDESCRIPTION: Example configuration for expo-location plugin in the app.json file to set location permission messages and enable background location features.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/location.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-location\",\n        {\n          \"locationAlwaysAndWhenInUsePermission\": \"Allow $(PRODUCT_NAME) to use your location.\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Playing Audio in React Native with expo-av\nDESCRIPTION: Example showing how to load and play an audio file using expo-av's Audio.Sound API. Includes proper sound resource management through useEffect hook.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/audio-av.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEffect, useState } from 'react';\nimport { View, StyleSheet, Button } from 'react-native';\nimport { Audio } from 'expo-av';\n\nexport default function App() {\n  const [sound, setSound] = useState();\n\n  async function playSound() {\n    console.log('Loading Sound');\n    const { sound } = await Audio.Sound.createAsync(\n      require('./assets/Hello.mp3')\n    );\n    setSound(sound);\n\n    console.log('Playing Sound');\n    await sound.playAsync();\n  }\n\n  useEffect(() => {\n    return sound\n      ? () => {\n          console.log('Unloading Sound');\n          sound.unloadAsync();\n        }\n      : undefined;\n  }, [sound]);\n\n  return (\n    <View style={styles.container}>\n      <Button title=\"Play Sound\" onPress={playSound} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    backgroundColor: '#ecf0f1',\n    padding: 10,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Adding URL Prop Support to Android WebView Module\nDESCRIPTION: Updated Kotlin module definition that adds a URL prop to the WebView component, allowing the URL to be set from React Native.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/native-view-tutorial.mdx#2025-04-22_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\npackage expo.modules.webview\n\nimport expo.modules.kotlin.modules.Module\nimport expo.modules.kotlin.modules.ModuleDefinition\nimport java.net.URL\n\nclass ExpoWebViewModule : Module() {\n  override fun definition() = ModuleDefinition {\n    Name(\"ExpoWebView\")\n\n    View(ExpoWebView::class) {\n      Prop(\"url\") { view: ExpoWebView, url: URL? ->\n        view.webView.loadUrl(url.toString())\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic expo-calendar Usage in React Native\nDESCRIPTION: This React Native (JSX) code demonstrates the basic usage of the `expo-calendar` library. It shows how to request calendar permissions using `requestCalendarPermissionsAsync`, fetch available calendars with `getCalendarsAsync`, and create a new calendar using `createCalendarAsync`. The example uses a `useEffect` hook to request permissions on component mount and includes a button to trigger calendar creation.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/calendar.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEffect } from 'react';\nimport { StyleSheet, View, Text, Button, Platform } from 'react-native';\nimport * as Calendar from 'expo-calendar';\n\nexport default function App() {\n  useEffect(() => {\n    (async () => {\n      const { status } = await Calendar.requestCalendarPermissionsAsync();\n      if (status === 'granted') {\n        const calendars = await Calendar.getCalendarsAsync(Calendar.EntityTypes.EVENT);\n        console.log('Here are all your calendars:');\n        console.log({ calendars });\n      }\n    })();\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <Text>Calendar Module Example</Text>\n      <Button title=\"Create a new calendar\" onPress={createCalendar} />\n    </View>\n  );\n}\n\nasync function getDefaultCalendarSource() {\n  const defaultCalendar = await Calendar.getDefaultCalendarAsync();\n  return defaultCalendar.source;\n}\n\nasync function createCalendar() {\n  const defaultCalendarSource =\n    Platform.OS === 'ios'\n      ? await getDefaultCalendarSource()\n      : { isLocalAccount: true, name: 'Expo Calendar' };\n  const newCalendarID = await Calendar.createCalendarAsync({\n    title: 'Expo Calendar',\n    color: 'blue',\n    entityType: Calendar.EntityTypes.EVENT,\n    sourceId: defaultCalendarSource.id,\n    source: defaultCalendarSource,\n    name: 'internalCalendarName',\n    ownerAccount: 'personal',\n    accessLevel: Calendar.CalendarAccessLevel.OWNER,\n  });\n  console.log(`Your new calendar ID is: ${newCalendarID}`);\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'space-around',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Chaining Multiple Plugins Using withPlugins in JavaScript\nDESCRIPTION: Demonstrates how to use the withPlugins function to chain multiple plugins together for better readability and organization.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/config-plugins/plugins-and-mods.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { withPlugins } from 'expo/config-plugins';\n\nconst config = {\n  name: 'my app',\n};\n\nwithPlugins(config, [\n  [withBar, 'input 1'],\n  [withFoo, 'input 2'],\n  withDelta,\n]);\n```\n\n----------------------------------------\n\nTITLE: Importing Crypto Module from Expo-Crypto\nDESCRIPTION: This snippet illustrates the import statement necessary to access the crypto functionalities provided by the expo-crypto library. It's a simple import necessary for utilizing the library’s API within an application. No inputs or outputs are defined within this snippet.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/crypto.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as Crypto from 'expo-crypto';\n```\n\n----------------------------------------\n\nTITLE: Configuring Metro to Remove Console Logs in Production\nDESCRIPTION: This code snippet shows how to modify the Metro configuration to remove all console log statements in production builds. It uses the 'drop_console' option in the Terser minifier config.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/minify.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { getDefaultConfig } = require('expo/metro-config');\n\nconst config = getDefaultConfig(__dirname);\n\nconfig.transformer.minifierConfig = {\n  compress: {\n    // The option below removes all console logs statements in production.\n    drop_console: true,\n  },\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Update Job Outputs Definition JSON\nDESCRIPTION: Defines the structure of outputs for an 'update' job, including 'first_update_group_id' and 'updates_json'. These outputs provide information about the published update, such as the ID of the first update group and a stringified JSON array of update groups.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/workflows/syntax.mdx#_snippet_31\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"first_update_group_id\": string, // ID of the first update group. You can use it to e.g. construct the update URL for a development client deep link.\n  \"updates_json\": string // Stringified JSON array of update groups. Output of `eas update --json`.\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Lottie Animation Component in React Native with TypeScript\nDESCRIPTION: Example showing how to create a React Native component that displays and controls a Lottie animation. Features include autoPlay functionality, animation reference control, and a restart button. Uses TypeScript for type safety.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/lottie.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useRef, useEffect } from 'react';\nimport { Button, StyleSheet, View } from 'react-native';\nimport LottieView from 'lottie-react-native';\n\nexport default function App() {\n  const animation = useRef<LottieView>(null);\n  useEffect(() => {\n    // You can control the ref programmatically, rather than using autoPlay\n    // animation.current?.play();\n  }, []);\n\n  return (\n    <View style={styles.animationContainer}>\n      <LottieView\n        autoPlay\n        ref={animation}\n        style={{\n          width: 200,\n          height: 200,\n          backgroundColor: '#eee',\n        }}\n        // Find more Lottie files at https://lottiefiles.com/featured\n        source={require('./assets/gradientBall.json')}\n      />\n      <View style={styles.buttonContainer}>\n        <Button\n          title=\"Restart Animation\"\n          onPress={() => {\n            animation.current?.reset();\n            animation.current?.play();\n          }}\n        />\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  animationContainer: {\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n    flex: 1,\n  },\n  buttonContainer: {\n    paddingTop: 20,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Adding URL Prop Support to iOS WebView Module\nDESCRIPTION: Updated Swift module definition that adds a URL prop to the WebView component, allowing the URL to be set from React Native. It includes logic to avoid reloading the same URL.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/native-view-tutorial.mdx#2025-04-22_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\nimport ExpoModulesCore\n\npublic class ExpoWebViewModule: Module {\n  public func definition() -> ModuleDefinition {\n    Name(\"ExpoWebView\")\n\n    View(ExpoWebView.self) {\n      Prop(\"url\") { (view, url: URL) in\n        if view.webView.url != url {\n          let urlRequest = URLRequest(url: url)\n          view.webView.load(urlRequest)\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Configuration for iOS Notification Sounds\nDESCRIPTION: Demonstrates how to configure custom notification sounds in an iOS project by placing the sound file in the Xcode project and specifying it in the `NotificationContentInput`. This manual setup is essential for leveraging custom sounds on iOS devices.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/notifications.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nawait Notifications.scheduleNotificationAsync({\n  content: {\n    title: \"You've got mail! 📬\",\n    body: 'Open the notification to read them all',\n    sound: 'notification.wav',\n  },\n  trigger: {\n    // ...\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Navigating to Dynamic Routes in Expo Router\nDESCRIPTION: Illustrates different ways to navigate to dynamic routes in Expo Router, including using inline parameters, passing params in the href object, and using imperative navigation.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/basics/navigation.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Link } from 'expo-router';\nimport { View, Pressable } from 'react-native';\n\nexport default function Page() {\n  return (\n    <View>\n      <Link\n        href=\"/user/bacon\">\n        View user (id inline)\n      </Link>\n      <Link\n        href={{\n          pathname: '/user/[id]',\n          params: { id: 'bacon' }\n        }}>\n        View user (id in params in href)\n      </Link>\n      <Pressable onPress={() => router.navigate('/user', { id: 'bacon' })}>\n        <Text>View user (imperative)</Text>\n      </Pressable>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Contacts Usage with expo-contacts in React Native (React Native, JSX)\nDESCRIPTION: Provides a complete React Native functional component demonstrating permission handling and fetching contacts' email fields using expo-contacts. Requires expo-contacts as a dependency. Key parameters include the permission status and returned contact data. Expects permission to be granted and outputs contact information to the console if available.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/contacts.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEffect } from 'react';\\nimport { StyleSheet, View, Text } from 'react-native';\\nimport * as Contacts from 'expo-contacts';\\n\\nexport default function App() {\\n  useEffect(() => {\\n    (async () => {\\n      const { status } = await Contacts.requestPermissionsAsync();\\n      if (status === 'granted') {\\n        const { data } = await Contacts.getContactsAsync({\\n          fields: [Contacts.Fields.Emails],\\n        });\\n\\n        if (data.length > 0) {\\n          const contact = data[0];\\n          console.log(contact);\\n        }\\n      }\\n    })();\\n  }, []);\\n\\n  return (\\n    <View style={styles.container}>\\n      <Text>Contacts Module Example</Text>\\n    </View>\\n  );\\n}\\n\\nconst styles = StyleSheet.create({\\n  container: {\\n    flex: 1,\\n    backgroundColor: '#fff',\\n    alignItems: 'center',\\n    justifyContent: 'center',\\n  },\\n});\n```\n\n----------------------------------------\n\nTITLE: Adding RECORD_AUDIO Permission in AndroidManifest.xml\nDESCRIPTION: XML snippet for **android/app/src/main/AndroidManifest.xml**. It adds the `android.permission.RECORD_AUDIO` permission, which is required for audio recording functionality on Android when not using Expo's Continuous Native Generation (CNG).\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/av.mdx#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n```xml\n<uses-permission android:name=\"android.permission.RECORD_AUDIO\" />\n```\n```\n\n----------------------------------------\n\nTITLE: POST Request Body Handling\nDESCRIPTION: Demonstrates how to access and parse the request body in a POST handler.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/reference/api-routes.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function POST(request: Request) {\n  const body = await request.json();\n\n  return Response.json({ ... });\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Config Plugin Configuration in app.json\nDESCRIPTION: Shows how to add a basic config plugin (expo-camera) to the Expo project configuration file.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/config-plugins/introduction.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\"expo-camera\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing SecureStore Module\nDESCRIPTION: Example of importing the SecureStore module from expo-secure-store for use in a JavaScript application.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/securestore.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as SecureStore from 'expo-secure-store';\n```\n\n----------------------------------------\n\nTITLE: Configuring Android permissions for contacts\nDESCRIPTION: XML snippet showing how to add READ_CONTACTS and WRITE_CONTACTS permissions to the AndroidManifest.xml file for Android projects.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/contacts.mdx#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"android.permission.READ_CONTACTS\" />\n<uses-permission android:name=\"android.permission.WRITE_CONTACTS\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Lottie Animation View in TypeScript (React Native)\nDESCRIPTION: This React Native component demonstrates how to use the `LottieView` component from `lottie-react-native` to display an animation loaded from a local JSON file (`./assets/gradientBall.json`). It utilizes the `useRef` hook to get a reference to the animation, enabling programmatic control like resetting and playing the animation via a button press. The example configures the view's style, sets it to `autoPlay`, and includes basic styling with `StyleSheet`.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/lottie.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nimport { useRef, useEffect } from 'react';\nimport { Button, StyleSheet, View } from 'react-native';\nimport LottieView from 'lottie-react-native';\n\nexport default function App() {\n  const animation = useRef<LottieView>(null);\n  useEffect(() => {\n    // You can control the ref programmatically, rather than using autoPlay\n    // animation.current?.play();\n  }, []);\n\n  return (\n    <View style={styles.animationContainer}>\n      <LottieView\n        autoPlay\n        ref={animation}\n        style={{\n          width: 200,\n          height: 200,\n          backgroundColor: '#eee',\n        }}\n        // Find more Lottie files at https://lottiefiles.com/featured\n        source={require('./assets/gradientBall.json')}\n      />\n      <View style={styles.buttonContainer}>\n        <Button\n          title=\"Restart Animation\"\n          onPress={() => {\n            animation.current?.reset();\n            animation.current?.play();\n          }}\n        />\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  animationContainer: {\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n    flex: 1,\n  },\n  buttonContainer: {\n    paddingTop: 20,\n  },\n});\n```\n```\n\n----------------------------------------\n\nTITLE: React Native Safe Area Implementation\nDESCRIPTION: Modern React Native implementation using useSafeAreaInsets hook to replace CSS environment variables.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/safe-area-context.mdx#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\n\nfunction App() {\n  const insets = useSafeAreaInsets();\n  return (\n    <View\n      style={{\n        paddingTop: insets.top,\n        paddingLeft: insets.left,\n        paddingBottom: insets.bottom,\n        paddingRight: insets.right,\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Splash Screen in Expo app.json\nDESCRIPTION: This JSON snippet shows how to configure the splash screen properties in the app.json file for an Expo project. It includes settings for background color, image path, dark mode, and image width.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/user-interface/splash-screen-and-app-icon.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-splash-screen\",\n        {\n          \"backgroundColor\": \"#232323\",\n          \"image\": \"./assets/images/splash-icon.png\",\n          \"dark\": {\n            \"image\": \"./assets/images/splash-icon-dark.png\",\n            \"backgroundColor\": \"#000000\"\n          },\n          \"imageWidth\": 200\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring UIBackgroundModes for iOS\nDESCRIPTION: This snippet configures the `UIBackgroundModes` in the `Expo.plist` file for handling remote notifications on iOS. The `remote-notification` key must be added to ensure background push notifications are correctly received. This is necessary when not using Continuous Native Generation (CNG) in Expo-managed projects.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/notifications.mdx#2025-04-22_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<key>UIBackgroundModes</key>\n<array>\n  <string>remote-notification</string>\n</array>\n```\n\n----------------------------------------\n\nTITLE: Disabling CSS Support in Metro Config\nDESCRIPTION: This code snippet demonstrates how to disable CSS support in the Metro configuration for Expo SDK 50 and above.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/config/metro.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('expo/metro-config').MetroConfig} */\nconst config = getDefaultConfig(__dirname, {\n  // Disable CSS support.\n  isCSSEnabled: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Latest Expo SDK Version with Yarn\nDESCRIPTION: Commands to install the latest version of Expo SDK or a specific version (e.g., SDK 52) using Yarn.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/workflow/upgrading-expo-sdk-walkthrough.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Install latest\n$ yarn expo install expo@latest\n\n# Install a specific SDK version (for example, SDK 52)\n$ yarn expo install expo@^52.0.0\n```\n\n----------------------------------------\n\nTITLE: Fetching Network Information Once in React Native\nDESCRIPTION: Demonstrates how to use NetInfo.fetch() to retrieve network connection information a single time. The example shows how to access the connection type and connection status.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/netinfo.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nNetInfo.fetch().then(state => {\n  console.log('Connection type', state.type);\n  console.log('Is connected?', state.isConnected);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring SecureStore Plugin in Expo App Config (JSON)\nDESCRIPTION: Demonstrates how to enable and configure the expo-secure-store plugin by adding the configuration object to the app.json file. This includes settings such as android auto backup behavior and Face ID permission customization. Required for projects leveraging config plugins; these settings influence how SecureStore integrates during build time. Values should be adjusted based on backup policies and permission strings needed for biometric authentication.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/securestore.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-secure-store\",\n        {\n          \"configureAndroidBackup\": true,\n          \"faceIDPermission\": \"Allow $(PRODUCT_NAME) to access your Face ID biometric data.\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Runtime Version Policy Automatically in Expo App Config (JSON)\nDESCRIPTION: This snippet sets the runtimeVersion in the Expo config to use an automatic policy. The policy derives the runtime version from existing project fields (e.g., appVersion or nativeVersion) to simplify version management. Requires Expo SDK with runtimeVersion policy support. Inputs: policy name; Output: runtimeVersion is derived at build time according to the selected policy.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/updates.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"expo\\\": {\\n    \\\"runtimeVersion\\\": {\\n      \\\"policy\\\": \\\"<policy_name>\\\"\\n    }\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Linking EAS Update Branch to Staging Channel\nDESCRIPTION: This command links the 'version-3.0' EAS Update branch to the 'staging' channel, making the updates from that branch available to builds with the 'staging' channel.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/how-it-works.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ eas channel:edit staging --branch version-3.0\n```\n\n----------------------------------------\n\nTITLE: Updating expo-module.config.json for Apple Platform Support\nDESCRIPTION: Updates the module configuration to use the universal 'apple' platform instead of 'ios' to support multiple Apple platforms including macOS and tvOS.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/additional-platform-support.mdx#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n```diff expo-module.config.json\n{\n-   \"platforms\": [\"ios\"],\n-   \"ios\": {\n-     \"modules\": [\"MyModule\"]\n-   }\n+   \"platforms\": [\"apple\"],\n+   \"apple\": {\n+     \"modules\": [\"MyModule\"]\n+   }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-calendar Plugin in JSON\nDESCRIPTION: This JSON snippet shows how to configure the `expo-calendar` config plugin within the `app.json` or `app.config.js` file. It specifically demonstrates setting a custom permission message for calendar access on iOS (`NSCalendarsUsageDescription`). This configuration is used when building the app with EAS Build or `npx expo run:[android|ios]`.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/calendar.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-calendar\",\n        {\n          \"calendarPermission\": \"The app needs to access your calendar.\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: iOS Info.plist Permission Configuration\nDESCRIPTION: Required permission keys and descriptions for iOS photo library, camera, and microphone access in Info.plist file.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/imagepicker.mdx#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<key>NSPhotoLibraryUsageDescription</key>\n<string>Give $(PRODUCT_NAME) permission to save photos</string>\n<key>NSCameraUsageDescription</key>\n<string>Give $(PRODUCT_NAME) permission to access your camera</string>\n<key>NSMicrophoneUsageDescription</key>\n<string>Give $(PRODUCT_NAME) permission to use your microphone</string>\n```\n\n----------------------------------------\n\nTITLE: Raw Function Config Plugin Implementation\nDESCRIPTION: Shows how to implement Config Plugins using raw functions in app.config.js, both with and without props.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/config-plugins/plugins-and-mods.mdx#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst withCustom = (config, props) => config;\n\nconst config = {\n  plugins: [\n    [\n      withCustom,\n      {\n        /* props */\n      },\n    ],\n    /* @info Without props */\n    withCustom,\n    /* @end */\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Detecting Faces with Expo FaceDetector in React Native (JSX)\nDESCRIPTION: This snippet demonstrates the integration of expo-face-detector with expo-camera in a functional React Native component. It sets up camera face detection with a custom onFacesDetected callback and faceDetectorSettings to use fast mode, disable landmarks/smile detection, specify minimum interval, and enable tracking. Dependencies include expo-camera and expo-face-detector. The input is camera frames, and output is the faces array passed to handleFacesDetected. The example is intended for development builds and will not work in the standard Expo Go app.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/facedetector.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Camera } from 'expo-camera';\nimport * as FaceDetector from 'expo-face-detector';\n\nconst App = () => (\n  <Camera\n    // other props\n    onFacesDetected={handleFacesDetected}\n    faceDetectorSettings={{\n      mode: FaceDetector.FaceDetectorMode.fast,\n      detectLandmarks: FaceDetector.FaceDetectorLandmarks.none,\n      runClassifications: FaceDetector.FaceDetectorClassifications.none,\n      minDetectionInterval: 100,\n      tracking: true,\n    }}\n  />\n);\n\nconst handleFacesDetected = ({ faces }) => {\n  console.log(faces);\n};\n\nexport default App;\n\n```\n\n----------------------------------------\n\nTITLE: Manual Update Check Implementation in React Native\nDESCRIPTION: Example React Native component showing how to manually check for and apply updates using expo-updates.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/updates.mdx#2025-04-22_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nimport { View, Button } from 'react-native';\nimport * as Updates from 'expo-updates';\n\nfunction App() {\n  async function onFetchUpdateAsync() {\n    try {\n      const update = await Updates.checkForUpdateAsync();\n\n      if (update.isAvailable) {\n        await Updates.fetchUpdateAsync();\n        await Updates.reloadAsync();\n      }\n    } catch (error) {\n      alert(`Error fetching latest Expo update: ${error}`);\n    }\n  }\n\n  return (\n    <View>\n      <Button title=\"Fetch update\" onPress={onFetchUpdateAsync} />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SplashScreen Control in React Native\nDESCRIPTION: Example showing how to keep splash screen visible while loading app resources and hide it after initial content render. Demonstrates font loading, API simulation, and proper splash screen management.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/splash-screen.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useCallback, useEffect, useState } from 'react';\nimport { Text, View } from 'react-native';\nimport Entypo from '@expo/vector-icons/Entypo';\nimport * as SplashScreen from 'expo-splash-screen';\nimport * as Font from 'expo-font';\n\n// Keep the splash screen visible while we fetch resources\nSplashScreen.preventAutoHideAsync();\n\n// Set the animation options. This is optional.\nSplashScreen.setOptions({\n  duration: 1000,\n  fade: true,\n});\n\nexport default function App() {\n  const [appIsReady, setAppIsReady] = useState(false);\n\n  useEffect(() => {\n    async function prepare() {\n      try {\n        // Pre-load fonts, make any API calls you need to do here\n        await Font.loadAsync(Entypo.font);\n        // Artificially delay for two seconds to simulate a slow loading\n        // experience. Remove this if you copy and paste the code!\n        await new Promise(resolve => setTimeout(resolve, 2000));\n      } catch (e) {\n        console.warn(e);\n      } finally {\n        // Tell the application to render\n        setAppIsReady(true);\n      }\n    }\n\n    prepare();\n  }, []);\n\n  const onLayoutRootView = useCallback(() => {\n    if (appIsReady) {\n      // This tells the splash screen to hide immediately! If we call this after\n      // `setAppIsReady`, then we may see a blank screen while the app is\n      // loading its initial state and rendering its first pixels. So instead,\n      // we hide the splash screen once we know the root view has already\n      // performed layout.\n      SplashScreen.hide();\n    }\n  }, [appIsReady]);\n\n  if (!appIsReady) {\n    return null;\n  }\n\n  return (\n    <View\n      style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}\n      onLayout={onLayoutRootView}>\n      <Text>SplashScreen Demo! 👋</Text>\n      <Entypo name=\"rocket\" size={30} />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Expo Notifications in app.json\nDESCRIPTION: Example of using the expo-notifications config plugin in app.json to configure notification properties like custom icon, color, and sounds that require building a new app binary to take effect.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/notifications.mdx#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-notifications\",\n        {\n          \"icon\": \"./local/assets/notification-icon.png\",\n          \"color\": \"#ffffff\",\n          \"sounds\": [\n            \"./local/assets/notification-sound.wav\",\n            \"./local/assets/notification-sound-other.wav\"\n          ]\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic TrackingTransparency Usage in React Native\nDESCRIPTION: Example React Native component demonstrating how to request tracking permissions using the expo-tracking-transparency module.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/tracking-transparency.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEffect } from 'react';\nimport { Text, StyleSheet, View } from 'react-native';\nimport { requestTrackingPermissionsAsync } from 'expo-tracking-transparency';\n\nexport default function App() {\n  useEffect(() => {\n    (async () => {\n      const { status } = await requestTrackingPermissionsAsync();\n      if (status === 'granted') {\n        console.log('Yay! I have user permission to track data');\n      }\n    })();\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <Text>Tracking Transparency Module Example</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel for Expo Router\nDESCRIPTION: Sets up the Babel configuration to use babel-preset-expo for Expo Router compatibility.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/installation.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = function (api) {\n  api.cache(true);\n  return {\n    presets: ['babel-preset-expo'],\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Android AD_ID Permission in AndroidManifest.xml (XML)\nDESCRIPTION: This XML snippet shows how to manually add the com.google.android.gms.permission.AD_ID permission to AndroidManifest.xml for apps not using Expo's managed workflow. This permission is required for apps using advertising features on Android 13+ and enables access to the Advertising ID. Make sure your Android project includes this entry if using tracking functionality and Google Play Services.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/tracking-transparency.mdx#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"com.google.android.gms.permission.AD_ID\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Deep Link Scheme in Expo App.json (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to specify the deep linking scheme in your app.json configuration file for Expo. The \"scheme\" property under the \"expo\" key is used by AuthSession and the platform to handle authentication redirects back into the app. You must set this field before building a standalone app, as it cannot be updated OTA. The configured scheme (e.g., 'mycoolredirect') allows OAuth providers to redirect users after authentication. Inputs: a valid scheme string; Outputs: the app is configured for handling the custom scheme.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/auth-session.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"expo\\\": {\\n    \\\"scheme\\\": \\\"mycoolredirect\\\"\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Production EAS Hosting Deployment\nDESCRIPTION: This command creates a production deployment of your web app on EAS Hosting. The --prod flag designates this as a production deployment rather than a preview.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/deploy/web.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ eas deploy --prod\n```\n\n----------------------------------------\n\nTITLE: Importing Video Component from expo-av in JavaScript\nDESCRIPTION: This snippet shows how to import the Video component from the expo-av package in a JavaScript file, which is the prerequisite for using expo-av's video playback capabilities. It must be placed at the top of any file utilizing the Video component, requires the expo-av package to be installed, and does not include any additional functionality beyond the import statement.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/video-av.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { Video } from 'expo-av';\n```\n\n----------------------------------------\n\nTITLE: Dynamic Route Generation\nDESCRIPTION: Implementation of generateStaticParams for creating static pages from dynamic routes\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/reference/static-rendering.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Text } from 'react-native';\nimport { useLocalSearchParams } from 'expo-router';\n\nexport async function generateStaticParams(): Promise<Record<string, string>[]> {\n  const posts = await getPosts();\n  return posts.map(post => ({ id: post.id }));\n}\n\nexport default function Page() {\n  const { id } = useLocalSearchParams();\n\n  return <Text>Post {id}</Text>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Push Notification Navigation with Expo Router\nDESCRIPTION: This code demonstrates how to handle deep linking from push notifications using Expo Router. It sets up listeners for both initial and runtime notifications, and redirects to the appropriate URL when a notification contains a URL in its data payload.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/notifications.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEffect } from 'react';\nimport * as Notifications from 'expo-notifications';\nimport { router } from 'expo-router';\n\nfunction useNotificationObserver() {\n  useEffect(() => {\n    let isMounted = true;\n\n    function redirect(notification: Notifications.Notification) {\n      const url = notification.request.content.data?.url;\n      if (url) {\n        /* @info Push the URL. You may want to verify the format before navigating. */\n        router.push(url);\n        /* @end */\n      }\n    }\n\n    /* @info Handle the initial push notification. */\n    Notifications.getLastNotificationResponseAsync() /* @end */\n      .then(response => {\n        if (!isMounted || !response?.notification) {\n          return;\n        }\n        redirect(response?.notification);\n      });\n\n    /* @info Listen for runtime notifications. */\n    const subscription = Notifications.addNotificationResponseReceivedListener(response => {\n      /* @end */\n      redirect(response.notification);\n    });\n\n    return () => {\n      isMounted = false;\n      subscription.remove();\n    };\n  }, []);\n}\n\nexport default function Layout() {\n  /* @info Observe at the root. Ensure this layout never returns <b>null</b> or the navigation will go unhandled. */\n  useNotificationObserver();\n  /* @end */\n\n  return <Slot />;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Location Permissions Manually in Info.plist\nDESCRIPTION: XML configuration for manually adding the required location permission keys to iOS Info.plist file when not using Continuous Native Generation.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/location.mdx#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<key>NSLocationAlwaysAndWhenInUseUsageDescription</key>\n<string>Allow $(PRODUCT_NAME) to use your location</string>\n<key>NSLocationAlwaysUsageDescription</key>\n<string>Allow $(PRODUCT_NAME) to use your location</string>\n<key>NSLocationWhenInUseUsageDescription</key>\n<string>Allow $(PRODUCT_NAME) to use your location</string>\n```\n\n----------------------------------------\n\nTITLE: Creating a Video Player with Play/Pause using expo-av in JSX\nDESCRIPTION: This code snippet demonstrates how to use expo-av's Video component within a React Native application to display a video and provide interactive play/pause controls via a Button component. Required dependencies include 'expo-av', 'expo-asset', and 'react-native'. The example initializes playback status state and a component ref for controlling the video; it expects a video URI for the source and allows the user to toggle between playing and pausing the video. The code also defines a StyleSheet for layout, with expected inputs including the video URI, and outputs include rendered video playback with play/pause interactivity.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/video-av.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useRef } from 'react';\\nimport { View, StyleSheet, Button } from 'react-native';\\nimport { Video, ResizeMode } from 'expo-av';\\n\\nexport default function App() {\\n  const video = useRef(null);\\n  const [status, setStatus] = useState({});\\n  return (\\n    <View style={styles.container}>\\n      <Video\\n        ref={video}\\n        style={styles.video}\\n        source={{\\n          uri: 'https://d23dyxeqlo5psv.cloudfront.net/big_buck_bunny.mp4',\\n        }}\\n        useNativeControls\\n        resizeMode={ResizeMode.CONTAIN}\\n        isLooping\\n        onPlaybackStatusUpdate={status => setStatus(() => status)}\\n      />\\n      <View style={styles.buttons}>\\n        <Button\\n          title={status.isPlaying ? 'Pause' : 'Play'}\\n          onPress={() =>\\n            status.isPlaying ? video.current.pauseAsync() : video.current.playAsync()\\n          }\\n        />\\n      </View>\\n    </View>\\n  );\\n}\\n\\n/* @hide const styles = StyleSheet.create({ ... }); */\\nconst styles = StyleSheet.create({\\n  container: {\\n    flex: 1,\\n    justifyContent: 'center',\\n    backgroundColor: '#ecf0f1',\\n  },\\n  video: {\\n    alignSelf: 'center',\\n    width: 320,\\n    height: 200,\\n  },\\n  buttons: {\\n    flexDirection: 'row',\\n    justifyContent: 'center',\\n    alignItems: 'center',\\n  },\\n});\\n/* @end */\n```\n\n----------------------------------------\n\nTITLE: Adding NSUserTrackingUsageDescription to iOS Info.plist (XML)\nDESCRIPTION: This XML snippet should be included in your iOS project's Info.plist to provide the NSUserTrackingUsageDescription key and a custom description string. This key is mandatory on iOS 14+ when requesting tracking permissions through the App Tracking Transparency framework. The key parameter is the usage description string, which should inform users how and why their data will be used for tracking. Not providing this string will cause permission requests to fail at runtime.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-tracking-transparency/README.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<key>NSUserTrackingUsageDescription</key>\\n<string>Your custom usage description string here.</string>\n```\n\n----------------------------------------\n\nTITLE: EAS Install Node Modules Function YAML\nDESCRIPTION: Uses the `eas/install_node_modules` function to install node_modules using the package manager (bun, npm, pnpm, or Yarn) detected in the project.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/workflows/syntax.mdx#_snippet_45\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  my_job:\n    steps:\n      - uses: eas/checkout\n      # @info #\n      - uses: eas/install_node_modules\n      # @end #\n```\n\n----------------------------------------\n\nTITLE: Configuring ImagePicker Plugin in app.json\nDESCRIPTION: JSON configuration for the expo-image-picker plugin in app.json. This example sets a custom photos permission message that will be displayed to users when the app requests access to their photos.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/imagepicker.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-image-picker\",\n        {\n          \"photosPermission\": \"The app accesses your photos to let you share them with your friends.\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Serialized Config Plugin Example\nDESCRIPTION: Demonstrates how function-based plugins are serialized into JSON format for manifest generation.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/config-plugins/plugins-and-mods.mdx#2025-04-22_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [[\"withCustom\", {}], \"withCustom\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Uploading Files with FormData and expo/fetch in TypeScript\nDESCRIPTION: Demonstrates how to upload a file using FormData to append the file as a blob. Creates a text file, converts it to a blob, creates a FormData object with the blob, and sends it in a POST request.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/filesystem-next.mdx#2025-04-22_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { fetch } from 'expo/fetch';\n\nconst src = new File(testDirectory, 'file.txt');\nfile.write('Hello, world!');\nconst blob = src.blob();\n\nconst formData = new FormData();\nformData.append('data', blob);\n\nconst response = await fetch('https://example.com', {\n  method: 'POST',\n  body: formData,\n});\n```\n\n----------------------------------------\n\nTITLE: Using useKeepAwake Hook in React Native\nDESCRIPTION: This snippet demonstrates the usage of the useKeepAwake hook from expo-keep-awake. The hook prevents the device screen from sleeping as long as the component is mounted. Required dependencies: expo-keep-awake.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/keep-awake.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useKeepAwake } from 'expo-keep-awake';\nimport React from 'react';\nimport { Text, View } from 'react-native';\n\nexport default function KeepAwakeExample() {\n  /* @info As long as this component is mounted, the screen will not turn off from being idle. */\n  useKeepAwake();\n  /* @end */\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>This screen will never sleep!</Text>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Granting Android Camera Permissions in XML\nDESCRIPTION: The XML snippet demonstrates how to grant camera and audio recording permissions in the AndroidManifest.xml file for Android apps using `expo-camera`. These permissions are necessary for capturing photos and videos with audio.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/camera.mdx#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Added permission -->\n<uses-permission android:name=\"android.permission.CAMERA\" />\n\n<!-- Only add when recording videos with audio -->\n<uses-permission android:name=\"android.permission.RECORD_AUDIO\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Step Counting with Expo Pedometer in React Native\nDESCRIPTION: A complete React Native component that demonstrates how to check pedometer availability, get historical step data for the past 24 hours, and subscribe to real-time step count updates using expo-sensors. The example handles component cleanup by removing the subscription when unmounted.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/pedometer.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\nimport { Pedometer } from 'expo-sensors';\n\nexport default function App() {\n  const [isPedometerAvailable, setIsPedometerAvailable] = useState('checking');\n  const [pastStepCount, setPastStepCount] = useState(0);\n  const [currentStepCount, setCurrentStepCount] = useState(0);\n\n  const subscribe = async () => {\n    const isAvailable = await Pedometer.isAvailableAsync();\n    setIsPedometerAvailable(String(isAvailable));\n\n    if (isAvailable) {\n      const end = new Date();\n      const start = new Date();\n      start.setDate(end.getDate() - 1);\n\n      const pastStepCountResult = await Pedometer.getStepCountAsync(start, end);\n      if (pastStepCountResult) {\n        setPastStepCount(pastStepCountResult.steps);\n      }\n\n      return Pedometer.watchStepCount(result => {\n        setCurrentStepCount(result.steps);\n      });\n    }\n  };\n\n  useEffect(() => {\n    const subscription = subscribe();\n    return () => subscription && subscription.remove();\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <Text>Pedometer.isAvailableAsync(): {isPedometerAvailable}</Text>\n      <Text>Steps taken in the last 24 hours: {pastStepCount}</Text>\n      <Text>Walk! And watch this go up: {currentStepCount}</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: 15,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Calendar Usage in React Native\nDESCRIPTION: Complete example demonstrating how to request calendar permissions, query calendars, and create a new calendar in a React Native application using expo-calendar.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/calendar.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEffect } from 'react';\nimport { StyleSheet, View, Text, Button, Platform } from 'react-native';\nimport * as Calendar from 'expo-calendar';\n\nexport default function App() {\n  useEffect(() => {\n    (async () => {\n      const { status } = await Calendar.requestCalendarPermissionsAsync();\n      if (status === 'granted') {\n        const calendars = await Calendar.getCalendarsAsync(Calendar.EntityTypes.EVENT);\n        console.log('Here are all your calendars:');\n        console.log({ calendars });\n      }\n    })();\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <Text>Calendar Module Example</Text>\n      <Button title=\"Create a new calendar\" onPress={createCalendar} />\n    </View>\n  );\n}\n\nasync function getDefaultCalendarSource() {\n  const defaultCalendar = await Calendar.getDefaultCalendarAsync();\n  return defaultCalendar.source;\n}\n\nasync function createCalendar() {\n  const defaultCalendarSource =\n    Platform.OS === 'ios'\n      ? await getDefaultCalendarSource()\n      : { isLocalAccount: true, name: 'Expo Calendar' };\n  const newCalendarID = await Calendar.createCalendarAsync({\n    title: 'Expo Calendar',\n    color: 'blue',\n    entityType: Calendar.EntityTypes.EVENT,\n    sourceId: defaultCalendarSource.id,\n    source: defaultCalendarSource,\n    name: 'internalCalendarName',\n    ownerAccount: 'personal',\n    accessLevel: Calendar.CalendarAccessLevel.OWNER,\n  });\n  console.log(`Your new calendar ID is: ${newCalendarID}`);\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'space-around',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Apple Authentication in Expo app.json (JSON)\nDESCRIPTION: This JSON snippet is placed in an app.json file to enable the Sign In with Apple capability within your Expo-managed iOS app. The usesAppleSignIn property must be set to true under the ios section. This configuration is required to grant your app access to Apple authentication features. Input is the Expo app.json file, and there are no outputs; changes take effect during the next build. Requires Expo CLI tooling and is only relevant for iOS platforms.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/apple-authentication.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"expo\\\": {\\n    \\\"ios\\\": {\\n      \\\"usesAppleSignIn\\\": true\\n    }\\n  }\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: React Component with SQLite Context Hook\nDESCRIPTION: Example of using SQLite in a React component with the useSQLiteContext hook, including database initialization, migrations, and data display\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/sqlite.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SQLiteProvider, useSQLiteContext, type SQLiteDatabase } from 'expo-sqlite';\nimport { useEffect, useState } from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <SQLiteProvider databaseName=\"test.db\" onInit={migrateDbIfNeeded}>\n        <Header />\n        <Content />\n      </SQLiteProvider>\n    </View>\n  );\n}\n\nexport function Header() {\n  const db = useSQLiteContext();\n  const [version, setVersion] = useState('');\n  useEffect(() => {\n    async function setup() {\n      const result = await db.getFirstAsync<{ 'sqlite_version()': string }>(\n        'SELECT sqlite_version()'\n      );\n      setVersion(result['sqlite_version()']);\n    }\n    setup();\n  }, []);\n  return (\n    <View style={styles.headerContainer}>\n      <Text style={styles.headerText}>SQLite version: {version}</Text>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Obtaining Device Token for FCM or APNs in Expo (TypeScript)\nDESCRIPTION: This snippet demonstrates how to obtain a native device token for FCM or APNs using the expo-notifications package, instead of using Expo's push token.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/push-notifications/sending-notifications-custom.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Notifications from 'expo-notifications';\n...\n- const token = (await Notifications.getExpoPushTokenAsync()).data;\n+ const token = (await Notifications.getDevicePushTokenAsync()).data;\n// send token to your server\n```\n\n----------------------------------------\n\nTITLE: Executing Queries within Async Transaction in SQLite with JavaScript\nDESCRIPTION: This snippet demonstrates executing queries within an async transaction using SQLite in an Expo environment. It features the use of the 'withTransactionAsync' method ensuring all queries are part of a single atomic transaction. Dependencies include SQLite and support for async/await. The snippet includes anticipated behavioral quirks where queries executed outside a transaction's function scope may still run within it.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/sqlite.mdx#2025-04-22_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst db = await SQLite.openDatabaseAsync('databaseName');\n\nawait db.withTransactionAsync(async () => {\n  const result = await db.getFirstAsync('SELECT COUNT(*) FROM USERS');\n  console.log('Count:', result.rows[0]['COUNT(*)']);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitignore for Environment Files\nDESCRIPTION: Shows how to set up .gitignore to exclude local environment files from version control.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/environment-variables.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n.env*.local\n```\n\n----------------------------------------\n\nTITLE: Implementing a Multi-Page Carousel with PagerView in React Native\nDESCRIPTION: This example demonstrates how to create a simple multi-page carousel using the PagerView component from react-native-pager-view. It sets up three pages with different content and applies basic styling.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/view-pager.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { StyleSheet, View, Text } from 'react-native';\nimport PagerView from 'react-native-pager-view';\n\nexport default function MyPager() {\n  return (\n    <View style={styles.container}>\n      <PagerView style={styles.container} initialPage={0}>\n        <View style={styles.page} key=\"1\">\n          <Text>First page</Text>\n          <Text>Swipe ➡️</Text>\n        </View>\n        <View style={styles.page} key=\"2\">\n          <Text>Second page</Text>\n        </View>\n        <View style={styles.page} key=\"3\">\n          <Text>Third page</Text>\n        </View>\n      </PagerView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  page: {\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Media Library Permissions with Config Plugin\nDESCRIPTION: Example of configuring photo permission messages using the expo-media-library config plugin\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/permissions.mdx#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    [\n      \"expo-media-library\",\n      {\n        \"photosPermission\": \"Allow $(PRODUCT_NAME) to access your photos.\",\n        \"savePhotosPermission\": \"Allow $(PRODUCT_NAME) to save photos.\"\n      }\n    ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Magnetometer Sensor with React Native and Expo\nDESCRIPTION: A complete React Native component implementing magnetometer functionality using expo-sensors. Includes real-time sensor data display, subscription management, and update interval controls. The component displays X, Y, Z magnetic field values and provides buttons to toggle sensor state and update frequency.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/magnetometer.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View } from 'react-native';\nimport { Magnetometer } from 'expo-sensors';\n\nexport default function Compass() {\n  const [{ x, y, z }, setData] = useState({\n    x: 0,\n    y: 0,\n    z: 0,\n  });\n  const [subscription, setSubscription] = useState(null);\n\n  const _slow = () => Magnetometer.setUpdateInterval(1000);\n  const _fast = () => Magnetometer.setUpdateInterval(16);\n\n  const _subscribe = () => {\n    setSubscription(\n      Magnetometer.addListener(result => {\n        setData(result);\n      })\n    );\n  };\n\n  const _unsubscribe = () => {\n    subscription && subscription.remove();\n    setSubscription(null);\n  };\n\n  useEffect(() => {\n    _subscribe();\n    return () => _unsubscribe();\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.text}>Magnetometer:</Text>\n      <Text style={styles.text}>x: {x}</Text>\n      <Text style={styles.text}>y: {y}</Text>\n      <Text style={styles.text}>z: {z}</Text>\n      <View style={styles.buttonContainer}>\n        <TouchableOpacity onPress={subscription ? _unsubscribe : _subscribe} style={styles.button}>\n          <Text>{subscription ? 'On' : 'Off'}</Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={_slow} style={[styles.button, styles.middleButton]}>\n          <Text>Slow</Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={_fast} style={styles.button}>\n          <Text>Fast</Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    paddingHorizontal: 10,\n  },\n  text: {\n    textAlign: 'center',\n  },\n  buttonContainer: {\n    flexDirection: 'row',\n    alignItems: 'stretch',\n    marginTop: 15,\n  },\n  button: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#eee',\n    padding: 10,\n  },\n  middleButton: {\n    borderLeftWidth: 1,\n    borderRightWidth: 1,\n    borderColor: '#ccc',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Expo Dev Client Plugin in App Configuration (JSON)\nDESCRIPTION: This snippet demonstrates how to configure the expo-dev-client plugin using the app.json configuration file. The configuration is placed under the \"expo.plugins\" array and includes a sample property, \"launchMode\", to determine launch behavior for the development client. This requires expo and the expo-dev-client package to be installed, and the project must use config plugins (e.g., EAS Build or npx expo run commands). Key parameters include the plugin name and options such as launchMode. Input is a JSON object, output is consumed by Expo tools at build time. Limitations include requirement for rebuilding the app binary to apply configuration changes.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/dev-client.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-dev-client\",\n        {\n          \"launchMode\": \"most-recent\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Absolute Imports in React Components\nDESCRIPTION: Example TypeScript code showing how to import a component using an absolute path after configuring baseUrl in tsconfig.json.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/typescript.mdx#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport Button from 'src/components/Button';\n```\n\n----------------------------------------\n\nTITLE: Implementing Stack Navigation in Expo Router Root Layout (TypeScript)\nDESCRIPTION: This snippet demonstrates how to set up stack navigation in the root layout file of an Expo Router app. It uses the Stack component to define routes and apply common screen options.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/file-based-routing.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Stack } from 'expo-router';\n\nexport default function RootLayout() {\n  return (\n    <Stack\n      screenOptions={{\n        headerStyle: {\n          backgroundColor: '#f4511e',\n        },\n        headerTintColor: '#fff',\n        headerTitleStyle: {\n          fontWeight: 'bold',\n        },\n      }}>\n      <Stack.Screen name=\"index\" />\n      <Stack.Screen name=\"details\" />\n    </Stack>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Per-Update Rollout with EAS CLI\nDESCRIPTION: Command to initiate a rollout that makes an update available to a specified percentage of users. The example shows rolling out to 10% of users.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/rollouts.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ eas update --rollout-percentage=10\n```\n\n----------------------------------------\n\nTITLE: Implementing Config Plugin\nDESCRIPTION: Basic implementation of an Expo config plugin that can modify the app configuration.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/config-plugin-and-native-module-tutorial.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ConfigPlugin } from 'expo/config-plugins';\n\nconst withMyApiKey: ConfigPlugin = config => {\n  console.log('my custom plugin');\n  return config;\n};\n\nexport default withMyApiKey;\n```\n\n----------------------------------------\n\nTITLE: Setting up Gesture Animation Values\nDESCRIPTION: Initializes shared values and imports required gesture handling dependencies for implementing tap gestures.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/gestures.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Gesture, GestureDetector } from 'react-native-gesture-handler';\nimport Animated, { useAnimatedStyle, useSharedValue, withSpring } from 'react-native-reanimated';\n\nexport default function EmojiSticker({ imageSize, stickerSource }: Props) {\n  const scaleImage = useSharedValue(imageSize);\n\n  return (\n    // ...rest of the code remains same\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Root Layout with Stack Navigation\nDESCRIPTION: Sets up the root layout with Stack navigation, defining routes for Home and About screens with custom titles.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/add-navigation.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Stack } from 'expo-router';\n\nexport default function RootLayout() {\n  return (\n    <Stack>\n      <Stack.Screen name=\"index\" options={{ title: 'Home' }} />\n      <Stack.Screen name=\"about\" options={{ title: 'About' }} />\n    </Stack>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Legacy FileSystem API with expo-file-system/next in TypeScript\nDESCRIPTION: Shows how to combine the legacy FileSystem API with the new object-oriented approach. Uses the File class to get a URI and then the legacy API to read file contents asynchronously.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/filesystem-next.mdx#2025-04-22_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as FileSystem from 'expo-file-system';\nimport { File, Paths } from 'expo-file-system/next';\n\ntry {\n  const file = new File(Paths.cache, 'example.txt');\n  const content = await FileSystem.readAsStringAsync(file.uri);\n  console.log(content);\n} catch (error) {\n  console.error(error);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Info.plist Calendar Usage Descriptions (iOS XML)\nDESCRIPTION: This snippet details how to set iOS privacy usage descriptions in Info.plist, required for accessing calendars and reminders. Dependencies include an iOS native project. The 'NSCalendarsUsageDescription' and 'NSRemindersUsageDescription' keys must be present with meaningful human-readable strings. These values are displayed in system permission dialogs. Inputs are string values set per Apple guidelines; outputs are compliant permission prompts.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/calendar.mdx#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<key>NSCalendarsUsageDescription</key>\\n<string>Allow $(PRODUCT_NAME) to access your calendar</string>\\n<key>NSRemindersUsageDescription</key>\\n<string>Allow $(PRODUCT_NAME) to access your reminders</string>\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Splash Screen in Expo App Configuration\nDESCRIPTION: JSON configuration for expo-splash-screen plugin in app.json to set up the splash screen image path and related settings.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/configuration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    [\n      \"expo-splash-screen\",\n      {\n        \"image\": \"./assets/images/splash-icon.png\"\n      }\n    ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Expo Web Project for Deployment\nDESCRIPTION: This command exports your Expo web project into a static build in the dist directory, which is required before deploying to EAS Hosting.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/deploy/web.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo export --platform web\n```\n\n----------------------------------------\n\nTITLE: Requesting Tracking Permission in a React Native App with expo-tracking-transparency (JSX)\nDESCRIPTION: This React Native component demonstrates requesting user tracking permission using the expo-tracking-transparency library. It uses the useEffect hook to asynchronously call requestTrackingPermissionsAsync on mount, and logs a message if permission is granted. The sample includes basic styles and UI, requires expo-tracking-transparency as a dependency, and serves as a template for integrating tracking transparency in Expo apps. Input: none. Output: UI status and console log.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/tracking-transparency.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEffect } from 'react';\nimport { Text, StyleSheet, View } from 'react-native';\nimport { requestTrackingPermissionsAsync } from 'expo-tracking-transparency';\n\nexport default function App() {\n  useEffect(() => {\n    (async () => {\n      const { status } = await requestTrackingPermissionsAsync();\n      if (status === 'granted') {\n        console.log('Yay! I have user permission to track data');\n      }\n    })();\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <Text>Tracking Transparency Module Example</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Update Channels in eas.json\nDESCRIPTION: JSON snippet showing how to configure update channels for preview and production builds in the eas.json file.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/getting-started.mdx#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"preview\": {\n      \"channel\": \"preview\"\n      // ...\n    },\n    \"production\": {\n      \"channel\": \"production\"\n      // ...\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Metro Resolver in Expo (JavaScript)\nDESCRIPTION: This snippet demonstrates how to extend the default Metro resolver in Expo projects. It shows how to add custom module resolution logic and ensure the default resolver is still called for unhandled cases.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/config/metro.mdx#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nconst { getDefaultConfig } = require('expo/metro-config');\n\n/** @type {import('expo/metro-config').MetroConfig} */\nconst config = getDefaultConfig(__dirname);\n\nconfig.resolver.resolveRequest = (context, moduleName, platform) => {\n  if (moduleName.startsWith('my-custom-resolver:')) {\n    // Logic to resolve the module name to a file path...\n    // NOTE: Throw an error if there is no resolution.\n    return {\n      filePath: 'path/to/file',\n      type: 'sourceFile',\n    };\n  }\n\n  // Ensure you call the default resolver.\n  return context.resolveRequest(context, moduleName, platform);\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Routes in Tab Navigation with Expo Router\nDESCRIPTION: This snippet demonstrates how to use dynamic routes in a tab bar, specifically for a user profile tab. It shows how to set a static href or use an href object with parameters.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/advanced/tabs.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Tabs } from 'expo-router';\n\nexport default function TabLayout() {\n  return (\n    <Tabs>\n      <Tabs.Screen\n        name=\"[user]\"\n        options={{\n          href: '/evanbacon',\n          href: {\n            pathname: '/[user]',\n            params: {\n              user: 'evanbacon',\n            },\n          },\n        }}\n      />\n    </Tabs>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an iOS Development Build with EAS Build\nDESCRIPTION: This command creates a development build for iOS using EAS Build. It specifies the iOS platform and uses the development profile defined in eas.json.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/eas/ios-development-build-for-devices.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ eas build --platform ios --profile development\n```\n\n----------------------------------------\n\nTITLE: Configuring Metro with InlineRequires Optimization\nDESCRIPTION: Enhances metro.config.js to enable both experimentalImportSupport and inlineRequires. This optimizes module loading for faster startup time when used with Expo tree shaking.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/tree-shaking.mdx#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst { getDefaultConfig } = require('expo/metro-config');\n\nconst config = getDefaultConfig(__dirname);\n\nconfig.transformer.getTransformOptions = async () => ({\n  transform: {\n    experimentalImportSupport: true,\n    inlineRequires: true,\n  },\n});\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Creating a Node.js Server for Handling File Uploads\nDESCRIPTION: A simple Express server implementation that handles both binary and multipart file uploads. It demonstrates how to receive and save files sent from a mobile app using expo-file-system.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/filesystem.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst express = require('express');\nconst app = express();\nconst fs = require('fs');\nconst multer = require('multer');\nconst upload = multer({ dest: 'uploads/' });\n\n// This method will save the binary content of the request as a file.\napp.patch('/binary-upload', (req, res) => {\n  req.pipe(fs.createWriteStream('./uploads/image' + Date.now() + '.png'));\n  res.end('OK');\n});\n\n// This method will save a \"photo\" field from the request as a file.\napp.patch('/multipart-upload', upload.single('photo'), (req, res) => {\n  // You can access other HTTP parameters. They are located in the body object.\n  console.log(req.body);\n  res.end('OK');\n});\n\napp.listen(3000, () => {\n  console.log('Working on port 3000');\n});\n```\n\n----------------------------------------\n\nTITLE: Installing expo-store-review in Expo and React Native Projects - Shell\nDESCRIPTION: This shell snippet provides the command to install the expo-store-review package using the Expo CLI. It is required for integrating in-app rating functionalities in Expo and bare React Native apps. The command must be executed in the project root directory; no additional arguments are needed. For managed workflows, this is the only step needed. For iOS in bare projects, further setup with CocoaPods may be required.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-store-review/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx expo install expo-store-review\n```\n\n----------------------------------------\n\nTITLE: Importing Video Component from expo-av\nDESCRIPTION: This code snippet shows how to import the Video component from the expo-av library for use in a React Native application.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/video-av.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Video } from 'expo-av';\n```\n\n----------------------------------------\n\nTITLE: Configuring StatusBar Component in React Native\nDESCRIPTION: Example showing how to implement a StatusBar component with light text styling for better contrast against dark backgrounds using expo-status-bar.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/configuring-statusbar.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { StatusBar } from 'expo-status-bar';\n\nexport default function Playlists() {\n  return (\n    <>\n      {/* @hide ...*/} {/* @end */}\n      {/* Use light text instead of dark text in the status bar to provide more contrast with a dark background. */}\n      <StatusBar style=\"light\" />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Navigation Events to Third-Party Services\nDESCRIPTION: This example demonstrates how to send navigation events to an external service, such as analytics or logging, using the usePathname hook and useEffect in the root layout component.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/advanced/native-intent.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport ThirdPartyService from 'third-party-sdk';\nimport { Slot, usePathname } from 'expo-router';\n\nconst thirdParty = new ThirdPartyService();\n\nexport default function RootLayout() {\n  const pathname = usePathname();\n\n  // Perform the service initiation logic\n  useEffect(() => {\n    thirdParty.register();\n    return () => {\n      thirdParty.deregister();\n    };\n  }, [thirdParty]);\n\n  // Send pathname changes to the third party\n  useEffect(() => {\n    thirdParty.sendEvent({ pathname });\n  }, [pathname]);\n\n  return <Slot />;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Workbox Build Script to package.json for Expo PWA\nDESCRIPTION: Shows how to add a build script to package.json that exports the Expo web app and generates the service worker using Workbox CLI. This script can be used to build the PWA for production.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/progressive-web-apps.mdx#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"build:web\": \"expo export -p web && npx workbox-cli generateSW workbox-config.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Android Manifest Configuration in TypeScript\nDESCRIPTION: ConfigPlugin implementation for modifying AndroidManifest.xml to add custom API key metadata.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/config-plugin-and-native-module-tutorial.mdx#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst withMyApiKey: ConfigPlugin<{ apiKey: string }> = (config, { apiKey }) => {\n  config = withAndroidManifest(config, config => {\n    const mainApplication = AndroidConfig.Manifest.getMainApplicationOrThrow(config.modResults);\n\n    AndroidConfig.Manifest.addMetaDataItemToMainApplication(\n      mainApplication,\n      'MY_CUSTOM_API_KEY',\n      apiKey\n    );\n    return config;\n  });\n\n  return config;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Expo Notifications with JSON\nDESCRIPTION: This JSON configuration snippet shows how to set up the 'expo-notifications' plugin in an Expo app. The setup includes properties such as notification icon path, color, default channel for FCMv1, and custom sounds. These properties are crucial for setting up push notifications in Android and must be defined in the app's configuration file. The example also mentions enabling background remote notifications for iOS.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/notifications.mdx#2025-04-22_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-notifications\",\n        {\n          \"icon\": \"./local/assets/notification_icon.png\",\n          \"color\": \"#ffffff\",\n          \"defaultChannel\": \"default\",\n          \"sounds\": [\n            \"./local/assets/notification_sound.wav\",\n            \"./local/assets/notification_sound_other.wav\"\n          ],\n          \"enableBackgroundRemoteNotifications\": false\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Production Build Workflow in YAML\nDESCRIPTION: Workflow configuration for automating iOS production builds. Triggers on pushes to main branch and executes build job with iOS platform and production profile.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/workflows/automating-eas-cli.mdx#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: iOS production build\n\non:\n  push:\n    branches: ['main']\n\njobs:\n  build_ios:\n    name: Build iOS\n    type: build\n    params:\n      platform: ios\n      profile: production\n```\n\n----------------------------------------\n\nTITLE: Displaying Icon Images with Expo Image Component\nDESCRIPTION: This example shows how to use the Image component from Expo Image to display an icon image in a React Native application. It demonstrates loading a local image and setting its dimensions.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/icons.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Image } from 'expo-image';\nimport { View, StyleSheet } from 'react-native';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Image source={require('./assets/images/slack-icon.png')} style={{ width: 50, height: 50 }} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using the WebView Component with URL in Example App\nDESCRIPTION: Updated example app that demonstrates how to use the WebView component with the new URL prop to load a specific website.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/native-view-tutorial.mdx#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { WebView } from 'expo-web-view';\n\nexport default function App() {\n  return <WebView style={{ flex: 1 }} url=\"https://expo.dev\" />;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SplashScreen Control in React Native App\nDESCRIPTION: Complete example showing how to prevent the splash screen from auto-hiding while loading app resources, and then hiding it once the app is ready. Includes font preloading, state management, and layout handling.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/splash-screen.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useCallback, useEffect, useState } from 'react';\nimport { Text, View } from 'react-native';\nimport Entypo from '@expo/vector-icons/Entypo';\nimport * as SplashScreen from 'expo-splash-screen';\nimport * as Font from 'expo-font';\n\n// Keep the splash screen visible while we fetch resources\nSplashScreen.preventAutoHideAsync();\n\nexport default function App() {\n  const [appIsReady, setAppIsReady] = useState(false);\n\n  useEffect(() => {\n    async function prepare() {\n      try {\n        // Pre-load fonts, make any API calls you need to do here\n        await Font.loadAsync(Entypo.font);\n        // Artificially delay for two seconds to simulate a slow loading\n        // experience. Remove this if you copy and paste the code!\n        await new Promise(resolve => setTimeout(resolve, 2000));\n      } catch (e) {\n        console.warn(e);\n      } finally {\n        // Tell the application to render\n        setAppIsReady(true);\n      }\n    }\n\n    prepare();\n  }, []);\n\n  const onLayoutRootView = useCallback(async () => {\n    if (appIsReady) {\n      // This tells the splash screen to hide immediately! If we call this after\n      // `setAppIsReady`, then we may see a blank screen while the app is\n      // loading its initial state and rendering its first pixels. So instead,\n      // we hide the splash screen once we know the root view has already\n      // performed layout.\n      await SplashScreen.hideAsync();\n    }\n  }, [appIsReady]);\n\n  if (!appIsReady) {\n    return null;\n  }\n\n  return (\n    <View\n      style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}\n      onLayout={onLayoutRootView}>\n      <Text>SplashScreen Demo! 👋</Text>\n      <Entypo name=\"rocket\" size={30} />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing iOS App Store Build Steps - EAS Build - YAML\nDESCRIPTION: Details a production build workflow for iOS destined for the App Store using EAS Build. Steps include resolving Apple team ID, prebuild with specific inputs, pod installation, credential configuration, gymfile generation with secrets, running Fastlane, and artifact upload. Requires appropriate credentials, secrets set up, and Xcode/CocoaPods installed; variables must be available at build time.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_56\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: Customized iOS App Store build example\n  steps:\n    - eas/checkout\n\n    - eas/install_node_modules\n\n    - eas/resolve_apple_team_id_from_credentials:\n        id: resolve_apple_team_id_from_credentials\n\n    - eas/prebuild:\n        inputs:\n          apple_team_id: ${ steps.resolve_apple_team_id_from_credentials.apple_team_id }\n\n    - run:\n        name: Install pods\n        working_directory: ./ios\n        command: pod install\n\n    - eas/configure_ios_credentials\n\n    - eas/generate_gymfile_from_template:\n        inputs:\n          credentials: ${ eas.job.secrets.buildCredentials }\n\n    - eas/run_fastlane\n\n    - eas/find_and_upload_build_artifacts\n```\n\n----------------------------------------\n\nTITLE: Android Notification Channel Configuration\nDESCRIPTION: TypeScript implementation for setting up notification channels and scheduling notifications on Android 8.0+.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/notifications.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nawait Notifications.setNotificationChannelAsync('new_emails', {\n  name: 'E-mail notifications',\n  importance: Notifications.AndroidImportance.HIGH,\n  sound: 'email_sound.wav'\n});\n\nawait Notifications.scheduleNotificationAsync({\n  content: {\n    title: \"You've got mail! 📬\",\n    body: 'Open the notification to read them all',\n    sound: 'email_sound.wav'\n  },\n  trigger: {\n    type: Notifications.SchedulableTriggerInputTypes.TIME_INTERVAL,\n    seconds: 2,\n    channelId: 'new_emails'\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using useSafeAreaInsets Hook\nDESCRIPTION: Example of using the useSafeAreaInsets hook to access safe area inset values directly.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/safe-area-context.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\n\nfunction HookComponent() {\n  const insets = useSafeAreaInsets();\n\n  return <View style={{ paddingTop: insets.top }} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Apple Authentication Button in React Native\nDESCRIPTION: Complete React Native component implementation showing Apple Authentication button setup and sign-in flow handling.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/apple-authentication.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as AppleAuthentication from 'expo-apple-authentication';\nimport { View, StyleSheet } from 'react-native';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <AppleAuthentication.AppleAuthenticationButton\n        buttonType={AppleAuthentication.AppleAuthenticationButtonType.SIGN_IN}\n        buttonStyle={AppleAuthentication.AppleAuthenticationButtonStyle.BLACK}\n        cornerRadius={5}\n        style={styles.button}\n        onPress={async () => {\n          try {\n            const credential = await AppleAuthentication.signInAsync({\n              requestedScopes: [\n                AppleAuthentication.AppleAuthenticationScope.FULL_NAME,\n                AppleAuthentication.AppleAuthenticationScope.EMAIL,\n              ],\n            });\n            // signed in\n          } catch (e) {\n            if (e.code === 'ERR_REQUEST_CANCELED') {\n              // handle that the user canceled the sign-in flow\n            } else {\n              // handle other errors\n            }\n          }\n        }}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  button: {\n    width: 200,\n    height: 44,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: App Version Policy Example - Expo App JSON\nDESCRIPTION: Configures runtime versioning based on the app version for both iOS and Android using the 'appVersion' policy. This example sets explicit values for 'version', 'ios.buildNumber', and 'android.versionCode'. Used in projects that increment version fields for each release. Dependencies: Expo, and explicit versioning in config. Outputs a runtimeVersion matching the 'version' field.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/updates.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"runtimeVersion\": {\n      \"policy\": \"appVersion\"\n    },\n    \"version\": \"1.0.0\",\n    \"ios\": {\n      \"buildNumber\": \"1\"\n    },\n    \"android\": {\n      \"versionCode\": 1\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Blurhash on a Server with Express.js\nDESCRIPTION: Server-side implementation for generating blurhash placeholders from uploaded images using Express.js, multer, sharp, and the blurhash package. Demonstrates how to handle image uploads and encode them into blurhash format.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/image.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// Multer is a middleware for handling `multipart/form-data`.\nconst multer = require('multer');\n// Sharp allows you to receive a data buffer from the uploaded image.\nconst sharp = require('sharp');\n// Import the encode function from the blurhash package.\nconst { encode } = require('blurhash');\n\n// Initialize `multer`.\nconst upload = multer();\n```\n\nLANGUAGE: js\nCODE:\n```\napp.post('/blurhash', upload.single('image'), async (req, res) => {\n  const { file } = req;\n  // If the file is not available we're returning with error.\n  if (file === null) {\n    res.status(400).json({ message: 'Image is missing' });\n    return;\n  }\n\n  // Users can specify number of components in each axes.\n  const componentX = req.body.componentX ?? 4;\n  const componentY = req.body.componentY ?? 3;\n\n  // We're converting provided image to a byte buffer.\n  // Sharp currently supports multiple common formats like JPEG, PNG, WebP, GIF, and AVIF.\n  const { data, info } = await sharp(file.buffer).ensureAlpha().raw().toBuffer({\n    resolveWithObject: true,\n  });\n\n  const blurhash = encode(\n    new Uint8ClampedArray(data),\n    info.width,\n    info.height,\n    componentX,\n    componentY\n  );\n  res.json({ blurhash });\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Contacts Usage with React Native and expo-contacts\nDESCRIPTION: This JSX snippet demonstrates a basic usage of the `expo-contacts` library within a React Native project. It requests permissions and prints out contact data. React Native and `expo` library are required dependencies.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/contacts.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEffect } from 'react';\nimport { StyleSheet, View, Text } from 'react-native';\nimport * as Contacts from 'expo-contacts';\n\nexport default function App() {\n  useEffect(() => {\n    (async () => {\n      const { status } = await Contacts.requestPermissionsAsync();\n      if (status === 'granted') {\n        const { data } = await Contacts.getContactsAsync({\n          fields: [Contacts.Fields.Emails],\n        });\n\n        if (data.length > 0) {\n          const contact = data[0];\n          console.log(contact);\n        }\n      }\n    })();\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <Text>Contacts Module Example</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using expo-sqlite as a Key-Value Store with Async API\nDESCRIPTION: Example of using expo-sqlite's Storage as a drop-in replacement for AsyncStorage with async methods. This approach allows storing and retrieving data with JSON serialization.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/sqlite.mdx#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// The storage API is the default export, you can call it Storage, AsyncStorage, or whatever you prefer.\nimport Storage from 'expo-sqlite/kv-store';\n\nawait Storage.setItem('key', JSON.stringify({ entity: 'value' }));\nconst value = await Storage.getItem('key');\nconst entity = JSON.parse(value);\nconsole.log(entity); // { entity: 'value' }\n```\n\n----------------------------------------\n\nTITLE: Using Tailwind CSS with DOM Components in Expo (TypeScript)\nDESCRIPTION: This example demonstrates how to use Tailwind CSS with DOM components in an Expo project, which allows rendering Tailwind web code in a WebView on native platforms.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/tailwind.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n'use dom';\n\nimport '../global.css';\n\nexport default function Page() {\n  return (\n    <div className=\"bg-slate-100 rounded-xl\">\n      <p className=\"text-lg font-medium\">Welcome to Tailwind</p>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-video Plugin in app.json\nDESCRIPTION: Shows how to configure the `expo-video` plugin within the `expo.plugins` array in `app.json`. This example enables background playback support (`supportsBackgroundPlayback`) and Picture-in-Picture (`supportsPictureInPicture`) capabilities, which require modifications to native project files handled automatically by the plugin during prebuild.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/video.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-video\",\n        {\n          \"supportsBackgroundPlayback\": true,\n          \"supportsPictureInPicture\": true\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring deep links with uri-scheme\nDESCRIPTION: Commands to list existing schemes and add a new scheme to the project using uri-scheme library.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/bare/install-dev-builds-in-bare.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# List your project's schemes\n$ npx uri-scheme list\n\n# Add a scheme to your project\n$ npx uri-scheme add your-scheme\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Accelerometer Usage in React Native with Expo\nDESCRIPTION: A complete example showing how to implement accelerometer functionality in a React Native app using expo-sensors. The component manages accelerometer subscriptions, displays X/Y/Z coordinates, and includes controls for turning the sensor on/off and adjusting update intervals.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/accelerometer.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View } from 'react-native';\nimport { Accelerometer } from 'expo-sensors';\n\nexport default function App() {\n  const [{ x, y, z }, setData] = useState({\n    x: 0,\n    y: 0,\n    z: 0,\n  });\n  const [subscription, setSubscription] = useState(null);\n\n  const _slow = () => Accelerometer.setUpdateInterval(1000);\n  const _fast = () => Accelerometer.setUpdateInterval(16);\n\n  const _subscribe = () => {\n    setSubscription(Accelerometer.addListener(setData));\n  };\n\n  const _unsubscribe = () => {\n    subscription && subscription.remove();\n    setSubscription(null);\n  };\n\n  useEffect(() => {\n    _subscribe();\n    return () => _unsubscribe();\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.text}>Accelerometer: (in gs where 1g = 9.81 m/s^2)</Text>\n      <Text style={styles.text}>x: {x}</Text>\n      <Text style={styles.text}>y: {y}</Text>\n      <Text style={styles.text}>z: {z}</Text>\n      <View style={styles.buttonContainer}>\n        <TouchableOpacity onPress={subscription ? _unsubscribe : _subscribe} style={styles.button}>\n          <Text>{subscription ? 'On' : 'Off'}</Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={_slow} style={[styles.button, styles.middleButton]}>\n          <Text>Slow</Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={_fast} style={styles.button}>\n          <Text>Fast</Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    paddingHorizontal: 20,\n  },\n  text: {\n    textAlign: 'center',\n  },\n  buttonContainer: {\n    flexDirection: 'row',\n    alignItems: 'stretch',\n    marginTop: 15,\n  },\n  button: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#eee',\n    padding: 10,\n  },\n  middleButton: {\n    borderLeftWidth: 1,\n    borderRightWidth: 1,\n    borderColor: '#ccc',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Advanced Keyboard Handling with KeyboardAwareScrollView\nDESCRIPTION: This example demonstrates how to use KeyboardAwareScrollView and KeyboardToolbar from react-native-keyboard-controller for handling multiple input fields and providing a native-like keyboard experience.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/keyboard-handling.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TextInput, View, StyleSheet } from 'react-native';\nimport { KeyboardAwareScrollView, KeyboardToolbar } from 'react-native-keyboard-controller';\n\nexport default function FormScreen() {\n  return (\n    <>\n      <KeyboardAwareScrollView bottomOffset={62} contentContainerStyle={styles.container}>\n        <View>\n          <TextInput placeholder=\"Type a message...\" style={styles.textInput} />\n          <TextInput placeholder=\"Type a message...\" style={styles.textInput} />\n        </View>\n        <TextInput placeholder=\"Type a message...\" style={styles.textInput} />\n        <View>\n          <TextInput placeholder=\"Type a message...\" style={styles.textInput} />\n          <TextInput placeholder=\"Type a message...\" style={styles.textInput} />\n          <TextInput placeholder=\"Type a message...\" style={styles.textInput} />\n        </View>\n        <TextInput placeholder=\"Type a message...\" style={styles.textInput} />\n      </KeyboardAwareScrollView>\n      <KeyboardToolbar />\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    gap: 16,\n    padding: 16,\n  },\n  listStyle: {\n    padding: 16,\n    gap: 16,\n  },\n  textInput: {\n    width: 'auto',\n    flexGrow: 1,\n    flexShrink: 1,\n    height: 45,\n    borderWidth: 1,\n    borderRadius: 8,\n    borderColor: '#d8d8d8',\n    backgroundColor: '#fff',\n    padding: 8,\n    marginBottom: 8,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Listing Directory Contents Recursively with expo-file-system/next in TypeScript\nDESCRIPTION: Recursively lists all files and subdirectories in a directory with proper indentation. The function distinguishes between files and directories, displaying file sizes for the former.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/filesystem-next.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Directory, Paths } from 'expo-file-system/next';\n\nfunction printDirectory(directory: Directory, indent: number = 0) {\n  console.log(`${' '.repeat(indent)} + ${directory.name}`);\n  const contents = directory.list();\n  for (const item of contents) {\n    if (item instanceof Directory) {\n      printDirectory(item, indent + 2);\n    } else {\n      console.log(`${' '.repeat(indent + 2)} - ${item.name} (${item.size} bytes)`);\n    }\n  }\n}\n\ntry {\n  printDirectory(new Directory(Paths.cache));\n} catch (error) {\n  console.error(error);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing App Version Policy Configuration\nDESCRIPTION: Example configuration showing how to use the appVersion policy to set runtime version based on the app's version number.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/updates.mdx#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"runtimeVersion\": {\n      \"policy\": \"appVersion\"\n    },\n    \"version\": \"1.0.0\",\n    \"ios\": {\n      \"buildNumber\": \"1\"\n    },\n    \"android\": {\n      \"versionCode\": 1\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Light Sensor Usage in React Native with Expo\nDESCRIPTION: A complete React Native component demonstrating how to implement light sensor functionality using expo-sensors. Shows subscription management, data handling, and UI display of illuminance values. Includes toggle functionality and proper cleanup on unmount.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/light-sensor.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View, Platform } from 'react-native';\nimport { LightSensor } from 'expo-sensors';\n\nexport default function App() {\n  const [{ illuminance }, setData] = useState({ illuminance: 0 });\n  const [subscription, setSubscription] = useState(null);\n\n  const toggle = () => {\n    if (subscription) {\n      unsubscribe();\n    } else {\n      subscribe();\n    }\n  };\n\n  const subscribe = () => {\n    setSubscription(\n      LightSensor.addListener(sensorData => {\n        setData(sensorData);\n      })\n    );\n  };\n\n  const unsubscribe = () => {\n    subscription && subscription.remove();\n    setSubscription(null);\n  };\n\n  useEffect(() => {\n    subscribe();\n    return () => unsubscribe();\n  }, []);\n\n  return (\n    <View style={styles.sensor}>\n      <Text>Light Sensor:</Text>\n      <Text>\n        Illuminance: {Platform.OS === 'android' ? `${illuminance} lx` : `Only available on Android`}\n      </Text>\n      <View style={styles.buttonContainer}>\n        <TouchableOpacity onPress={toggle} style={styles.button}>\n          <Text>Toggle</Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  sensor: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    paddingHorizontal: 10,\n  },\n  buttonContainer: {\n    flexDirection: 'row',\n    alignItems: 'stretch',\n    marginTop: 15,\n  },\n  button: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#eee',\n    padding: 10,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Up Audio.Sound Playback Object\nDESCRIPTION: Demonstrates how to set up an Audio.Sound playback object, including setting audio mode and creating a new sound instance.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/av.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nawait Audio.setAudioModeAsync({ playsInSilentModeIOS: true });\n\nconst playbackObject = new Audio.Sound();\n// OR\nconst { sound: playbackObject } = await Audio.Sound.createAsync(\n  { uri: 'http://foo/bar.mp3' },\n  { shouldPlay: true }\n);\n```\n\n----------------------------------------\n\nTITLE: Using MapView Component in React Native\nDESCRIPTION: Demonstrates the basic implementation of the `MapView` component from `react-native-maps`. It imports necessary modules (`React`, `MapView`, `StyleSheet`, `View`), defines a simple functional component `App`, and renders a full-screen `MapView`. Styles are defined using `StyleSheet` to make the map fill the entire container.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/map-view.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport MapView from 'react-native-maps';\nimport { StyleSheet, View } from 'react-native';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <MapView style={styles.map} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  map: {\n    width: '100%',\n    height: '100%',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Progress Tracker Component with React Native Packages in JSX\nDESCRIPTION: This JSX code snippet demonstrates a ProgressTracker component implementation that references react-native-view-shot and expo-media-library packages for capturing and saving screenshots. The component contains information about the current tutorial chapter and navigation links to the next chapter about handling platform differences.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/screenshot.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<ProgressTracker\n  currentChapterIndex={6}\n  name=\"GET_STARTED\"\n  summary={\n    <>\n\n        We've successfully used <CODE>react-native-view-shot</CODE> and <CODE>expo-media-library</CODE> to capture a\n        screenshot and save it on the device's library.\n    </>\n\n}\nnextChapterDescription=\"In the next chapter, let's learn how to handle the differences between mobile and web\nplatforms to implement the same functionality on web.\"\nnextChapterTitle=\"Handle platform differences\"\nnextChapterLink=\"/tutorial/platform-differences\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Extending Development Profile in eas.json for iOS Simulator\nDESCRIPTION: This code demonstrates how to extend the 'development' profile properties in eas.json to create an iOS Simulator build profile, avoiding redundancy.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/eas/ios-development-build-for-simulators.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ios-simulator\": {\n    /* @info The <CODE>extends</CODE> keyword inherits properties from the <CODE>development</CODE> profile. */\n    \"extends\": \"development\",\n    /* @end */\n    \"ios\": {\n      \"simulator\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS URL Scheme in Expo App Config\nDESCRIPTION: Configuration snippet showing how to add the iOS URL scheme to the app.json configuration file. This is required when using Google API authentication method for iOS, where the URL scheme value is obtained from the Google API console.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/google-authentication.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ios\": {\n    \"infoPlist\": {\n      \"CFBundleURLTypes\": [\n        {\n          \"CFBundleURLSchemes\": [\"com.googleusercontent.apps.17898xxxxxx-xxxxxqhqj0exxxxxpl03xxx\"]\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Expo Custom Plugin in app.json Configuration\nDESCRIPTION: This JSON snippet demonstrates how managed Expo users can interact with the custom plugin API in their app.json file. It shows how to include the 'expo-custom' plugin with a custom value.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/config-plugins/development-and-debugging.mdx#2025-04-22_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [[\"expo-custom\", \"I Love Expo\"]]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Preview Updates Workflow in YAML\nDESCRIPTION: This workflow publishes a preview update for every commit on every branch. It requires EAS Update to be set up in the project and new development builds to be created.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/workflows/examples.mdx#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: Publish preview update\n\non:\n  push:\n    branches: ['*']\n\njobs:\n  publish_preview_update:\n    name: Publish preview update\n    type: update\n    params:\n      branch: ${{ github.ref_name || 'test' }}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Screen Options with Params in Expo Router (TypeScript)\nDESCRIPTION: Demonstrates how to set screen options dynamically based on route parameters. This example shows updating the screen title and using the router to modify params.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/advanced/stack.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Stack, useLocalSearchParams, useRouter } from 'expo-router';\nimport { View, Text, StyleSheet } from 'react-native';\n\nexport default function Details() {\n  const router = useRouter();\n  const params = useLocalSearchParams();\n\n  return (\n    <View style={styles.container}>\n      <Stack.Screen\n        options={{\n          title: params.name,\n        }}\n      />\n      <Text\n        onPress={() => {\n          router.setParams({ name: 'Updated' });\n        }}>\n        Update the title\n      </Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Image Component Usage in React Native with Expo\nDESCRIPTION: Example of implementing the Image component from expo-image in a React Native application. The snippet shows how to use features like blurhash placeholders, content fitting, and transition animations.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/image.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Image } from 'expo-image';\nimport { StyleSheet, View } from 'react-native';\n\nconst blurhash =\n  '|rF?hV%2WCj[ayj[a|j[az_NaeWBj@ayfRayfQfQM{M|azj[azf6fQfQfQIpWXofj[ayj[j[fQayWCoeoeaya}j[ayfQa{oLj?j[WVj[ayayj[fQoff7azayj[ayj[j[ayofayayayj[fQj[ayayj[ayfjj[j[ayjuayj[';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Image\n        style={styles.image}\n        source=\"https://picsum.photos/seed/696/3000/2000\"\n        placeholder={{ blurhash }}\n        contentFit=\"cover\"\n        transition={1000}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  image: {\n    flex: 1,\n    width: '100%',\n    backgroundColor: '#0553',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Preloading Videos for Smooth Transitions with expo-video in React Native\nDESCRIPTION: Example demonstrating video preloading using `expo-video` for seamless transitions between videos. It creates two `VideoPlayer` instances, one for the active video (`player1`) and another preloaded (`player2`). A button allows switching the `VideoView`'s player source, providing a smoother experience as the second video starts playing immediately from its preloaded state.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/video.mdx#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useVideoPlayer, VideoView, VideoSource } from 'expo-video';\nimport { useState, useCallback } from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View } from 'react-native';\n\nconst bigBuckBunnySource: VideoSource =\n  'https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4';\n\nconst elephantsDreamSource: VideoSource =\n  'https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ElephantsDream.mp4';\n\nexport default function PreloadingVideoPlayerScreen() {\n  const player1 = useVideoPlayer(bigBuckBunnySource, player => {\n    player.play();\n  });\n\n  const player2 = useVideoPlayer(elephantsDreamSource, player => {\n    player.currentTime = 20;\n  });\n\n  const [currentPlayer, setCurrentPlayer] = useState(player1);\n\n  const replacePlayer = useCallback(async () => {\n    currentPlayer.pause();\n    if (currentPlayer === player1) {\n      setCurrentPlayer(player2);\n      player1.pause();\n      player2.play();\n    } else {\n      setCurrentPlayer(player1);\n      player2.pause();\n      player1.play();\n    }\n  }, [player1, currentPlayer]);\n\n  return (\n    <View style={styles.contentContainer}>\n      <VideoView player={currentPlayer} style={styles.video} nativeControls={false} />\n      <TouchableOpacity style={styles.button} onPress={replacePlayer}>\n        <Text style={styles.buttonText}>Replace Player</Text>\n      </TouchableOpacity>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  contentContainer: {\n    flex: 1,\n    padding: 10,\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingHorizontal: 50,\n  },\n  button: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    borderRadius: 3,\n    paddingVertical: 8,\n    paddingHorizontal: 12,\n    backgroundColor: '#4630ec',\n  },\n  buttonText: {\n    fontSize: 12,\n    fontWeight: 'bold',\n    color: '#eeeeee',\n    textAlign: 'center',\n  },\n  video: {\n    width: 300,\n    height: 168.75,\n    marginVertical: 20,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Complete Dynamic Configuration Setup\nDESCRIPTION: Full implementation of app.config.js with dynamic name and identifiers for different build variants\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/eas/multiple-app-variants.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default ({ config }) => ({\n  ...config,\n  name: getAppName(),\n  ios: {\n    ...config.ios,\n    bundleIdentifier: getUniqueIdentifier(),\n  },\n  android: {\n    ...config.android,\n    package: getUniqueIdentifier(),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Inline HTML with React Native WebView\nDESCRIPTION: This code snippet renders inline HTML content in a WebView component within a React Native application. It illustrates using the `originWhitelist` property to allow unrestricted HTML content. The dependencies are `react-native-webview` and `expo-constants`. The WebView displays an HTML string as its source, and the setup requires a `styles` object to style the WebView component.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/webview.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { WebView } from 'react-native-webview';\nimport Constants from 'expo-constants';\nimport { StyleSheet } from 'react-native';\n\nexport default function App() {\n  return (\n    <WebView\n      style={styles.container}\n      originWhitelist={['*']}\n      source={{ html: '<h1><center>Hello world</center></h1>' }}\n    />\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: Constants.statusBarHeight,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Barometer Sensor with Expo Sensors (React Native, JSX)\nDESCRIPTION: This example demonstrates how to import and use the Barometer sensor from expo-sensors within a React Native functional component. It sets up and tears down event listeners for real-time pressure and altitude data using useState hooks, with platform-specific considerations for iOS and Android. Dependencies: expo-sensors, react, react-native. Parameters include the measured pressure and, on iOS, relative altitude; users can start and stop listening by toggling a button. Outputs include current barometer values and listener state as displayed UI components. Note that relative altitude is only available on iOS.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/barometer.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View, Platform } from 'react-native';\nimport { Barometer } from 'expo-sensors';\n\nexport default function App() {\n  const [{ pressure, relativeAltitude }, setData] = useState({ pressure: 0, relativeAltitude: 0 });\n  const [subscription, setSubscription] = useState(null);\n\n  const toggleListener = () => {\n    subscription ? unsubscribe() : subscribe();\n  };\n\n  const subscribe = () => {\n    setSubscription(Barometer.addListener(setData));\n  };\n\n  const unsubscribe = () => {\n    subscription && subscription.remove();\n    setSubscription(null);\n  };\n\n  return (\n    <View style={styles.wrapper}>\n      <Text>Barometer: Listener {subscription ? 'ACTIVE' : 'INACTIVE'}</Text>\n      <Text>Pressure: {pressure} hPa</Text>\n      <Text>\n        Relative Altitude:{' '}\n        {Platform.OS === 'ios' ? `${relativeAltitude} m` : `Only available on iOS`}\n      </Text>\n      <TouchableOpacity onPress={toggleListener} style={styles.button}>\n        <Text>Toggle listener</Text>\n      </TouchableOpacity>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  button: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#eee',\n    padding: 10,\n    marginTop: 15,\n  },\n  wrapper: {\n    flex: 1,\n    alignItems: 'stretch',\n    justifyContent: 'center',\n    paddingHorizontal: 20,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Crypto Usage in React Native\nDESCRIPTION: This snippet demonstrates how to use the expo-crypto module in a React Native application. It shows the process of hashing a string using the SHA256 algorithm and logging the result.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/crypto.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEffect } from 'react';\nimport { StyleSheet, View, Text } from 'react-native';\nimport * as Crypto from 'expo-crypto';\n\nexport default function App() {\n  useEffect(() => {\n    (async () => {\n      const digest = await Crypto.digestStringAsync(\n        Crypto.CryptoDigestAlgorithm.SHA256,\n        'GitHub stars are neat 🌟'\n      );\n      console.log('Digest: ', digest);\n      /* Some crypto operation... */\n    })();\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <Text>Crypto Module Example</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Blocking Android Permissions in app.json\nDESCRIPTION: Example of blocking specific Android permissions using the android.blockedPermissions configuration in app.json\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/permissions.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"android\": {\n    \"blockedPermissions\": [\"android.permission.RECORD_AUDIO\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring URI schemes in app.json for standalone apps\nDESCRIPTION: Configuration snippet showing how to set up a custom URI scheme in app.json for standalone apps to enable deep linking back into the application after authentication.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/auth-session.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"scheme\": \"mycoolredirect\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Checkbox with Expo Checkbox in TypeScript\nDESCRIPTION: This snippet demonstrates the integration of the expo-checkbox component within a React Native application using TypeScript. It initializes a state variable to track the checkbox status, applies conditional color styling based on state, integrates disabled prop demonstration, and uses StyleSheet for UI styling. Dependencies include expo-checkbox and react-native; expected inputs include user interaction events for toggling the checkbox, and the main output is rendered Checkboxes reflecting their state and props.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/checkbox.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport Checkbox from 'expo-checkbox';\\nimport { useState } from 'react';\\nimport { StyleSheet, Text, View } from 'react-native';\\n\\nexport default function App() {\\n  const [isChecked, setChecked] = useState(false);\\n\\n  return (\\n    <View style={styles.container}>\\n      <View style={styles.section}>\\n        <Checkbox style={styles.checkbox} value={isChecked} onValueChange={setChecked} />\\n        <Text style={styles.paragraph}>Normal checkbox</Text>\\n      </View>\\n      <View style={styles.section}>\\n        <Checkbox\\n          style={styles.checkbox}\\n          value={isChecked}\\n          onValueChange={setChecked}\\n          color={isChecked ? '#4630EB' : undefined}\\n        />\\n        <Text style={styles.paragraph}>Custom colored checkbox</Text>\\n      </View>\\n      <View style={styles.section}>\\n        <Checkbox style={styles.checkbox} disabled value={isChecked} onValueChange={setChecked} />\\n        <Text style={styles.paragraph}>Disabled checkbox</Text>\\n      </View>\\n    </View>\\n  );\\n}\\n\\nconst styles = StyleSheet.create({\\n  container: {\\n    flex: 1,\\n    marginHorizontal: 16,\\n    marginVertical: 32,\\n  },\\n  section: {\\n    flexDirection: 'row',\\n    alignItems: 'center',\\n  },\\n  paragraph: {\\n    fontSize: 15,\\n  },\\n  checkbox: {\\n    margin: 8,\\n  },\\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing metro.config.ts for Expo\nDESCRIPTION: TypeScript metro configuration file that uses Expo's default metro configuration and exports it for use in the project.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/typescript.mdx#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getDefaultConfig } from 'expo/metro-config';\n\nconst config = getDefaultConfig(__dirname);\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Opening GitHub Page for npm Package\nDESCRIPTION: This command demonstrates how to quickly open the GitHub page for a npm package (react-native-localize in this example) using npx.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/workflow/using-libraries.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ npx npm-home --github react-native-localize\n```\n\n----------------------------------------\n\nTITLE: Requesting Tracking Permission in a React Native App (JSX)\nDESCRIPTION: Provides an example React Native component that requests tracking permission using the expo-tracking-transparency API at runtime. It uses useEffect to call requestTrackingPermissionsAsync on mount and logs a success message if permission is granted. The component renders a simple view with explanatory text. This requires the expo-tracking-transparency package as a dependency and should be run on an iOS 14+ device for tracking permission dialogs to appear.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/tracking-transparency.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEffect } from 'react';\\nimport { Text, StyleSheet, View } from 'react-native';\\nimport { requestTrackingPermissionsAsync } from 'expo-tracking-transparency';\\n\\nexport default function App() {\\n  useEffect(() => {\\n    (async () => {\\n      const { status } = await requestTrackingPermissionsAsync();\\n      if (status === 'granted') {\\n        console.log('Yay! I have user permission to track data');\\n      }\\n    })();\\n  }, []);\\n\\n  return (\\n    <View style={styles.container}>\\n      <Text>Tracking Transparency Module Example</Text>\\n    </View>\\n  );\\n}\\n\\nconst styles = StyleSheet.create({\\n  container: {\\n    flex: 1,\\n    alignItems: 'center',\\n    justifyContent: 'center',\\n  },\\n});\\n\n```\n\n----------------------------------------\n\nTITLE: Downloading Files with FileSystem in Expo\nDESCRIPTION: A complete example of downloading files using FileSystem.createDownloadResumable. Shows how to track download progress, pause/resume downloads, and save download state across app restarts using AsyncStorage.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/filesystem.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst callback = downloadProgress => {\n  const progress = downloadProgress.totalBytesWritten / downloadProgress.totalBytesExpectedToWrite;\n  this.setState({\n    downloadProgress: progress,\n  });\n};\n\nconst downloadResumable = FileSystem.createDownloadResumable(\n  'http://techslides.com/demos/sample-videos/small.mp4',\n  FileSystem.documentDirectory + 'small.mp4',\n  {},\n  callback\n);\n\ntry {\n  const { uri } = await downloadResumable.downloadAsync();\n  console.log('Finished downloading to ', uri);\n} catch (e) {\n  console.error(e);\n}\n\ntry {\n  await downloadResumable.pauseAsync();\n  console.log('Paused download operation, saving for future retrieval');\n  AsyncStorage.setItem('pausedDownload', JSON.stringify(downloadResumable.savable()));\n} catch (e) {\n  console.error(e);\n}\n\ntry {\n  const { uri } = await downloadResumable.resumeAsync();\n  console.log('Finished downloading to ', uri);\n} catch (e) {\n  console.error(e);\n}\n\n//To resume a download across app restarts, assuming the DownloadResumable.savable() object was stored:\nconst downloadSnapshotJson = await AsyncStorage.getItem('pausedDownload');\nconst downloadSnapshot = JSON.parse(downloadSnapshotJson);\nconst downloadResumable = new FileSystem.DownloadResumable(\n  downloadSnapshot.url,\n  downloadSnapshot.fileUri,\n  downloadSnapshot.options,\n  callback,\n  downloadSnapshot.resumeData\n);\n\ntry {\n  const { uri } = await downloadResumable.resumeAsync();\n  console.log('Finished downloading to ', uri);\n} catch (e) {\n  console.error(e);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Bun Version in EAS Build Profile\nDESCRIPTION: Demonstrates how to specify a specific Bun version in eas.json configuration file for EAS builds. This example shows setting Bun version 1.0.0 for the development build profile.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/using-bun.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"development\": {\n      \"bun\": \"1.0.0\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Existing SQLite Database\nDESCRIPTION: Shows how to open a SQLite database using an existing .db file with SQLiteProvider and assetSource configuration.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/sqlite.mdx#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SQLiteProvider, useSQLiteContext } from 'expo-sqlite';\nimport { View, Text, StyleSheet } from 'react-native';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <SQLiteProvider databaseName=\"test.db\" assetSource={{ assetId: require('./assets/test.db') }}>\n        <Header />\n        <Content />\n      </SQLiteProvider>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Android Manifest Permission Configuration\nDESCRIPTION: Example of an AndroidManifest.xml file showing how to declare permissions using the manifest merging system.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/config-plugins/development-and-debugging.mdx#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<manifest package=\"expo.modules.filesystem\" xmlns:android=\"http://schemas.android.com/apk/res/android\">\n  <uses-permission android:name=\"android.permission.INTERNET\"/>\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Maps API Key for iOS in app.json\nDESCRIPTION: Configuration snippet for adding Google Maps API key to an Expo app on iOS. This is required for deploying apps with Google Maps functionality to the App Store.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/map-view.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n    \"ios\": {\n      \"config\": {\n        \"googleMapsApiKey\":  \"process.env.GOOGLE_MAPS_API_KEY\",\n        },\n      }\n```\n\n----------------------------------------\n\nTITLE: Importing Notifications Module\nDESCRIPTION: JavaScript import statement for the expo-notifications package, which provides comprehensive notification functionality for Expo applications.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/notifications.mdx#2025-04-22_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nimport * as Notifications from 'expo-notifications';\n```\n\n----------------------------------------\n\nTITLE: Basic Calendar Usage with Expo in React Native\nDESCRIPTION: Demonstrates a React Native component using the expo-calendar module to access and display device calendars. Includes permission requests and calendar creation.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/calendar.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEffect } from 'react';\nimport { StyleSheet, View, Text, Button, Platform } from 'react-native';\nimport * as Calendar from 'expo-calendar';\n\nexport default function App() {\n  useEffect(() => {\n    (async () => {\n      const { status } = await Calendar.requestCalendarPermissionsAsync();\n      if (status === 'granted') {\n        const calendars = await Calendar.getCalendarsAsync(Calendar.EntityTypes.EVENT);\n        console.log('Here are all your calendars:');\n        console.log({ calendars });\n      }\n    })();\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <Text>Calendar Module Example</Text>\n      <Button title=\"Create a new calendar\" onPress={createCalendar} />\n    </View>\n  );\n}\n\nasync function getDefaultCalendarSource() {\n  const defaultCalendar = await Calendar.getDefaultCalendarAsync();\n  return defaultCalendar.source;\n}\n\nasync function createCalendar() {\n  const defaultCalendarSource =\n    Platform.OS === 'ios'\n      ? await getDefaultCalendarSource()\n      : { isLocalAccount: true, name: 'Expo Calendar' };\n  const newCalendarID = await Calendar.createCalendarAsync({\n    title: 'Expo Calendar',\n    color: 'blue',\n    entityType: Calendar.EntityTypes.EVENT,\n    sourceId: defaultCalendarSource.id,\n    source: defaultCalendarSource,\n    name: 'internalCalendarName',\n    ownerAccount: 'personal',\n    accessLevel: Calendar.CalendarAccessLevel.OWNER,\n  });\n  console.log(`Your new calendar ID is: ${newCalendarID}`);\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'space-around',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Drawer Navigation Options in Expo Router\nDESCRIPTION: Advanced drawer navigation setup with customized screen options, including custom drawer labels and screen titles for different routes. Demonstrates how to configure specific screens within the drawer navigation.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/advanced/drawer.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { GestureHandlerRootView } from 'react-native-gesture-handler';\nimport { Drawer } from 'expo-router/drawer';\n\nexport default function Layout() {\n  return (\n    <GestureHandlerRootView style={{ flex: 1 }}>\n      <Drawer>\n        <Drawer.Screen\n          name=\"index\" // This is the name of the page and must match the url from root\n          options={{\n            drawerLabel: 'Home',\n            title: 'overview',\n          }}\n        />\n        <Drawer.Screen\n          name=\"user/[id]\" // This is the name of the page and must match the url from root\n          options={{\n            drawerLabel: 'User',\n            title: 'overview',\n          }}\n        />\n      </Drawer>\n    </GestureHandlerRootView>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Carousel-style Page Navigation with react-native-pager-view - JavaScript/JSX\nDESCRIPTION: This example demonstrates the use of the react-native-pager-view component within a functional React Native app. It imports React Native components and the PagerView module, renders three swipeable pages inside PagerView, and applies styles using StyleSheet. Dependencies include 'react-native', 'react-native-pager-view', and that the PagerView component is available in the linked project. Key parameters include the initialPage prop for controlling the initial page and style props for layout. The snippet expects a React Native environment and does not directly handle dynamic page content or pager event handling.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/view-pager.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { StyleSheet, View, Text } from 'react-native';\nimport PagerView from 'react-native-pager-view';\n\nexport default function MyPager() {\n  return (\n    <View style={styles.container}>\n      <PagerView style={styles.container} initialPage={0}>\n        <View style={styles.page} key=\"1\">\n          <Text>First page</Text>\n          <Text>Swipe ➡️</Text>\n        </View>\n        <View style={styles.page} key=\"2\">\n          <Text>Second page</Text>\n        </View>\n        <View style={styles.page} key=\"3\">\n          <Text>Third page</Text>\n        </View>\n      </PagerView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  page: {\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote Version Management in EAS JSON\nDESCRIPTION: Configuration example showing how to set up remote version source and auto-increment for production builds in eas.json. This enables EAS servers to manage app version numbers automatically.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/build-reference/app-versions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"cli\": {\n    \"appVersionSource\": \"remote\"\n  },\n  \"build\": {\n    \"development\": {\n    },\n    \"preview\": {\n    },\n    \"production\": {\n      \"autoIncrement\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Absolute Imports in tsconfig.json\nDESCRIPTION: TypeScript configuration that enables absolute imports from a project's root directory by setting the baseUrl compiler option.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/typescript.mdx#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"expo/tsconfig.base\",\n  \"compilerOptions\": {\n    \"baseUrl\": \"./\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Expo Contacts with Config Plugin - JSON\nDESCRIPTION: Demonstrates how to configure the expo-contacts plugin in the app.json file for Expo projects using config plugins. The \"contactsPermission\" property sets the permission dialog message for iOS. This configuration is essential for managed Expo workflows and must be set prior to building the app binary. Key parameter: \"contactsPermission\" (string). Requires the expo-contacts plugin and correct Expo project setup.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/contacts.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"expo\\\": {\\n    \\\"plugins\\\": [\\n      [\\n        \\\"expo-contacts\\\",\\n        {\\n          \\\"contactsPermission\\\": \\\"Allow $(PRODUCT_NAME) to access your contacts.\\\"\\n        }\\n      ]\\n    ]\\n  }\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Updating playback status in expo-av\nDESCRIPTION: Sets up onPlaybackStatusUpdate to respond to changes in media playback status using expo-av. Requires prior loading of a playback object for status reactions.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/av.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n_onPlaybackStatusUpdate = playbackStatus => {\n  if (!playbackStatus.isLoaded) {\n    if (playbackStatus.error) {\n      console.log(`Encountered a fatal error during playback: ${playbackStatus.error}`);\n    }\n  } else {\n    if (playbackStatus.isPlaying) {\n    } else {\n    }\n    if (playbackStatus.isBuffering) {\n    }\n    if (playbackStatus.didJustFinish && !playbackStatus.isLooping) {\n    }\n  }\n};\n\nplaybackObject.setOnPlaybackStatusUpdate(this._onPlaybackStatusUpdate);\n```\n\n----------------------------------------\n\nTITLE: Importing Global CSS in Expo Router (TypeScript)\nDESCRIPTION: This TypeScript code imports the global CSS file in the app/_layout.tsx file when using Expo Router.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/tailwind.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport '../global.css';\n```\n\n----------------------------------------\n\nTITLE: Using Universal A Element from @expo/html-elements for Cross-Platform Links\nDESCRIPTION: This code snippet shows how to implement a universal link component using the `<A>` element from @expo/html-elements, which renders as an `<a>` tag on web and an interactive `<Text>` component on native platforms.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/linking/into-other-apps.mdx#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { A } from '@expo/html-elements';\n\nexport default function Home() {\n  return <A href=\"https://expo.dev\">Go to Expo</A>;\n}\n```\n\n----------------------------------------\n\nTITLE: Android-specific credentials.json Configuration\nDESCRIPTION: Configuration specific to Android keystore in credentials.json\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/app-signing/local-credentials.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"android\": {\n    \"keystore\": {\n      \"keystorePath\": \"android/keystores/release.keystore\",\n      \"keystorePassword\": \"KEYSTORE_PASSWORD\",\n      \"keyAlias\": \"KEY_ALIAS\",\n      \"keyPassword\": \"KEY_PASSWORD\"\n    }\n  },\n  \"ios\": {\n    /* @hide ... */\n    /* @end */\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding NSFaceIDUsageDescription to Info.plist (XML)\nDESCRIPTION: Shows how to add the NSFaceIDUsageDescription entry to an iOS app's Info.plist file, enabling biometric authentication using Face ID. This string is required for App Store submission and user privacy compliance. The key-value should be tailored for your use case; the sample ensures camera or biometric usage is properly disclosed.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/securestore.mdx#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<key>NSCameraUsageDescription</key>\\n<string>Allow $(PRODUCT_NAME) to use the camera</string>\n```\n\n----------------------------------------\n\nTITLE: Configure Expo Maps plugin in app.json (JSON)\nDESCRIPTION: Configures the expo-maps plugin in the app.json file to request location permissions. The `requestLocationPermission` property enables the addition of necessary permissions to `AndroidManifest.xml` and `Info.plist`. The `locationPermission` property sets the `NSLocationWhenInUseUsageDescription` permission message for iOS.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/maps.mdx#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-maps\",\n        {\n          \"requestLocationPermission\": \"true\",\n          \"locationPermission\": \"Allow $(PRODUCT_NAME) to use your location\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Localization Implementation\nDESCRIPTION: Full example showing implementation of localization with styling and fallback support\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/localization.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { View, StyleSheet, Text } from 'react-native';\nimport { getLocales } from 'expo-localization';\nimport { I18n } from 'i18n-js';\n\n// Set the key-value pairs for the different languages you want to support.\nconst translations = {\n  en: { welcome: 'Hello', name: 'Charlie' },\n  ja: { welcome: 'こんにちは' },\n};\nconst i18n = new I18n(translations);\n\n// Set the locale once at the beginning of your app.\ni18n.locale = getLocales()[0].languageCode ?? 'en';\n\n// When a value is missing from a language it'll fall back to another language with the key present.\ni18n.enableFallback = true;\n// To see the fallback mechanism uncomment the line below to force the app to use the Japanese language.\n// i18n.locale = 'ja';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.text}>\n        {i18n.t('welcome')} {i18n.t('name')}\n      </Text>\n      <Text>Current locale: {i18n.locale}</Text>\n      <Text>Device locale: {getLocales()[0].languageCode}</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n    flex: 1,\n  },\n  text: {\n    fontSize: 20,\n    marginBottom: 16,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Expo Clipboard Module - JavaScript\nDESCRIPTION: This snippet shows how to import the expo-clipboard module in JavaScript, a prerequisite for accessing any clipboard functions. It requires the expo-clipboard package and is typically used at the top of a file before calling Clipboard methods. No user interaction, inputs, or outputs are demonstrated; it is purely the import declaration.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/clipboard.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as Clipboard from 'expo-clipboard';\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Dev Tools Plugin in React Native App\nDESCRIPTION: Basic implementation of a dev tools plugin in a React Native app using the plugin's hook in the root component. This demonstrates the minimal setup required to enable a plugin in an Expo project.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/debugging/devtools-plugins.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useMyDevToolsPlugin } from 'my-devtools-plugin';\n\nexport default App() {\n  useMyDevToolsPlugin();\n  return (/* rest of your app */)\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Development Build Using EAS CLI\nDESCRIPTION: Command to download and install a development build using EAS CLI. Requires being signed in to the associated Expo account.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/development-builds/share-with-your-team.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ eas build:run --profile development\n```\n\n----------------------------------------\n\nTITLE: Using Streaming Fetch with expo/fetch API\nDESCRIPTION: Demonstrates how to use the WinterCG-compliant Fetch API from expo/fetch for streaming responses. This example shows handling chunked data with a ReadableStream reader.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/expo.mdx#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { fetch } from 'expo/fetch';\n\nconst resp = await fetch('https://httpbin.org/drip?numbytes=512&duration=2', {\n  headers: { Accept: 'text/event-stream' },\n});\nconst reader = resp.body.getReader();\nconst chunks = [];\nwhile (true) {\n  const { done, value } = await reader.read();\n  if (done) {\n    break;\n  }\n  chunks.push(value);\n}\nconst buffer = new Uint8Array(chunks.reduce((acc, chunk) => acc + chunk.length, 0));\nconsole.log(buffer.length); // 512\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Entry File in Package.json\nDESCRIPTION: Example of setting a custom main entry file in package.json when not using App.js as the default entry point.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/register-root-component.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"main\": \"src/main.js\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing AuthSession and Crypto Dependencies\nDESCRIPTION: Command to install the required packages expo-auth-session and expo-crypto using npm or yarn.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/auth-session.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexpo-auth-session expo-crypto\n```\n\n----------------------------------------\n\nTITLE: Handling Binary Data in SQLite\nDESCRIPTION: Example of storing and retrieving binary data using Uint8Array in SQLite database operations.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/sqlite.mdx#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nawait db.execAsync(`\nDROP TABLE IF EXISTS blobs;\nCREATE TABLE IF NOT EXISTS blobs (id INTEGER PRIMARY KEY NOT NULL, data BLOB);\n`);\n\nconst blob = new Uint8Array([0x00, 0x01, 0x02, 0x03, 0x04, 0x05]);\nawait db.runAsync('INSERT INTO blobs (data) VALUES (?)', blob);\n\nconst row = await db.getFirstAsync<{ data: Uint8Array }>('SELECT * FROM blobs');\nexpect(row.data).toEqual(blob);\n```\n\n----------------------------------------\n\nTITLE: Importing the expo-background-fetch Module\nDESCRIPTION: This JavaScript code snippet demonstrates the standard ES module import statement used to access the functions and constants provided by the `expo-background-fetch` library within an Expo project.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/background-fetch.mdx#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport * as BackgroundFetch from 'expo-background-fetch';\n```\n\n----------------------------------------\n\nTITLE: Blocking Screen Capture Imperatively in React Native\nDESCRIPTION: This example shows how to use the ScreenCapture API to imperatively prevent and allow screen capture in a React Native app.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/screen-capture.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as ScreenCapture from 'expo-screen-capture';\nimport { useEffect } from 'react';\nimport { Button, StyleSheet, View } from 'react-native';\n\nexport default function ScreenCaptureExample() {\n  const activate = async () => {\n    await ScreenCapture.preventScreenCaptureAsync();\n  };\n\n  const deactivate = async () => {\n    await ScreenCapture.allowScreenCaptureAsync();\n  };\n\n  return (\n    <View style={styles.container}>\n      <Button title=\"Activate\" onPress={activate} />\n      <Button title=\"Deactivate\" onPress={deactivate} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Accelerometer functionality in React Native with Expo\nDESCRIPTION: This snippet demonstrates how to use the Accelerometer module from expo-sensors in a React Native application. It shows how to subscribe to accelerometer updates, handle the data, and control the update interval.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/accelerometer.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View } from 'react-native';\nimport { Accelerometer } from 'expo-sensors';\n\nexport default function App() {\n  const [{ x, y, z }, setData] = useState({\n    x: 0,\n    y: 0,\n    z: 0,\n  });\n  const [subscription, setSubscription] = useState(null);\n\n  const _slow = () => Accelerometer.setUpdateInterval(1000);\n  const _fast = () => Accelerometer.setUpdateInterval(16);\n\n  const _subscribe = () => {\n    setSubscription(Accelerometer.addListener(setData));\n  };\n\n  const _unsubscribe = () => {\n    subscription && subscription.remove();\n    setSubscription(null);\n  };\n\n  useEffect(() => {\n    _subscribe();\n    return () => _unsubscribe();\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.text}>Accelerometer: (in gs where 1g = 9.81 m/s^2)</Text>\n      <Text style={styles.text}>x: {x}</Text>\n      <Text style={styles.text}>y: {y}</Text>\n      <Text style={styles.text}>z: {z}</Text>\n      <View style={styles.buttonContainer}>\n        <TouchableOpacity onPress={subscription ? _unsubscribe : _subscribe} style={styles.button}>\n          <Text>{subscription ? 'On' : 'Off'}</Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={_slow} style={[styles.button, styles.middleButton]}>\n          <Text>Slow</Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={_fast} style={styles.button}>\n          <Text>Fast</Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    paddingHorizontal: 20,\n  },\n  text: {\n    textAlign: 'center',\n  },\n  buttonContainer: {\n    flexDirection: 'row',\n    alignItems: 'stretch',\n    marginTop: 15,\n  },\n  button: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#eee',\n    padding: 10,\n  },\n  middleButton: {\n    borderLeftWidth: 1,\n    borderRightWidth: 1,\n    borderColor: '#ccc',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Clipboard Functions in React Native\nDESCRIPTION: This snippet demonstrates a React Native application using expo-clipboard to copy and fetch text from the clipboard. It includes buttons to trigger the clipboard actions. The key dependencies include expo-clipboard and React Native components. Inputs and outputs are managed through button interactions and text display, respectively.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/clipboard.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { View, Text, Button, StyleSheet } from 'react-native';\nimport * as Clipboard from 'expo-clipboard';\n\nexport default function App() {\n  const [copiedText, setCopiedText] = useState('');\n\n  const copyToClipboard = async () => {\n    /* @info Copy the text to the clipboard */\n    await Clipboard.setStringAsync('hello world');\n    /* @end */\n  };\n\n  const fetchCopiedText = async () => {\n    const text = /* @info Paste the text from the clipboard */ await Clipboard.getStringAsync();\n    /* @end */\n    setCopiedText(text);\n  };\n\n  return (\n    <View style={styles.container}>\n      <Button title=\"Click here to copy to Clipboard\" onPress={copyToClipboard} />\n      <Button title=\"View copied text\" onPress={fetchCopiedText} />\n      <Text style={styles.copiedText}>{copiedText}</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  copiedText: {\n    marginTop: 10,\n    color: 'red',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Light Sensor Monitoring in React Native with Expo\nDESCRIPTION: A complete example of a React Native component that monitors light sensor data. It demonstrates how to subscribe to illuminance changes, handle component lifecycle with useEffect, and toggle the sensor subscription. The illuminance value is only displayed on Android platforms.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/light-sensor.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View, Platform } from 'react-native';\nimport { LightSensor } from 'expo-sensors';\n\nexport default function App() {\n  const [{ illuminance }, setData] = useState({ illuminance: 0 });\n  const [subscription, setSubscription] = useState(null);\n\n  const toggle = () => {\n    if (subscription) {\n      unsubscribe();\n    } else {\n      subscribe();\n    }\n  };\n\n  const subscribe = () => {\n    setSubscription(\n      LightSensor.addListener(sensorData => {\n        setData(sensorData);\n      })\n    );\n  };\n\n  const unsubscribe = () => {\n    subscription && subscription.remove();\n    setSubscription(null);\n  };\n\n  useEffect(() => {\n    subscribe();\n    return () => unsubscribe();\n  }, []);\n\n  return (\n    <View style={styles.sensor}>\n      <Text>Light Sensor:</Text>\n      <Text>\n        Illuminance: {Platform.OS === 'android' ? `${illuminance} lx` : `Only available on Android`}\n      </Text>\n      <View style={styles.buttonContainer}>\n        <TouchableOpacity onPress={toggle} style={styles.button}>\n          <Text>Toggle</Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  sensor: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    paddingHorizontal: 10,\n  },\n  buttonContainer: {\n    flexDirection: 'row',\n    alignItems: 'stretch',\n    marginTop: 15,\n  },\n  button: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#eee',\n    padding: 10,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Basic EAS Build Ignore Configuration\nDESCRIPTION: Example .easignore configuration showing common patterns for ignoring documentation, native directories, and test coverage files during EAS builds.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/build-reference/easignore.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Copy everything from your .gitignore file here\n\n# Ignore files and directories that EAS Build doesn't need to build your app\n/docs\n\n# Ignore native directories (if you are using EAS Build)\n/android\n/ios\n\n# Ignore test coverage reports\n/coverage\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin in Expo Project\nDESCRIPTION: JSON configuration to enable the plugin in the Expo project's app.json file.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/config-plugin-and-native-module-tutorial.mdx#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\"../app.plugin.js\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Promoting Existing Deployment to Production in EAS Hosting\nDESCRIPTION: This command promotes an existing deployment to production using its deployment ID. The 'deploymentId' should be replaced with the actual deployment ID.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/hosting/deployments-and-aliases.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ eas deploy:alias --prod --id=deploymentId\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Action Workflow for Expo PR Previews\nDESCRIPTION: GitHub Action workflow configuration that runs on pull requests to create and publish Expo app previews. It sets up Node.js, configures Expo CLI, and uses the expo-github-action to publish updates.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/github-actions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: preview\non: pull_request\n\njobs:\n  update:\n    name: EAS Update\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      pull-requests: write\n    steps:\n      - name: Check for EXPO_TOKEN\n        run: |\n          if [ -z \"${{ secrets.EXPO_TOKEN }}\" ]; then\n            echo \"You must provide an EXPO_TOKEN secret linked to this project's Expo account in this repo's secrets. Learn more: https://docs.expo.dev/eas-update/github-actions\"\n            exit 1\n          fi\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Setup Node\n        uses: actions/setup-node@v4\n        with:\n          node-version: 18.x\n          cache: yarn\n\n      - name: Setup EAS\n        uses: expo/expo-github-action@v8\n        with:\n          eas-version: latest\n          token: ${{ secrets.EXPO_TOKEN }}\n\n      - name: Install dependencies\n        run: yarn install\n\n      - name: Create preview\n        uses: expo/expo-github-action/preview@v8\n        with:\n          command: eas update --auto\n```\n\n----------------------------------------\n\nTITLE: Creating VideoPlayer Instance Manually in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a VideoPlayer instance manually using the createVideoPlayer function. This approach requires careful management of the player's lifecycle to avoid memory leaks.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/video.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createVideoPlayer } from 'expo-video';\nconst player = createVideoPlayer(videoSource);\n```\n\n----------------------------------------\n\nTITLE: Navigating Between Route Parameters with router and Link - Expo Router - TypeScript\nDESCRIPTION: This code illustrates three navigation methods for changing route parameters in an Expo Router application, using router.setParams, router.push, and the Link component. All actions update the 'user' route parameter and re-mount the component. Dependencies include expo-router and react-native. The component expects no direct input but relies on user taps to trigger navigation, updating displayed routes accordingly.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/reference/url-parameters.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Text } from 'react-native';\nimport { router, useLocalSearchParams, Link } from 'expo-router';\n\nexport default function User() {\n  // All three of these will change the route parameter `user`, and add a new user page.\n  return (\n    <>\n      <Text onPress={() => router.setParams({ user: 'evan' })}>Go to Evan</Text>\n      <Text onPress={() => router.push('/mark')}>Go to Mark</Text>\n      <Link href=\"/charlie\">Go to Charlie</Link>\n    </>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Automatic Configuration Using Policies - Expo App JSON\nDESCRIPTION: Enables automatic runtime version calculation based on a named policy. Place the 'policy' key in the runtimeVersion field in your Expo app config. Supported policy names include 'appVersion', 'nativeVersion', and 'fingerprint'. The input is a policy string; no additional parameters are required. Dependencies: Expo framework.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/updates.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"runtimeVersion\": {\n      \"policy\": \"<policy_name>\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Header Buttons in Expo Router Stack Navigator (TypeScript)\nDESCRIPTION: Shows how to add custom buttons to the header of a Stack navigator screen. This example includes a custom logo and a button that updates the screen's state.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/advanced/stack.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Stack } from 'expo-router';\nimport { Button, Text, Image, StyleSheet } from 'react-native';\nimport { useState } from 'react';\n\nfunction LogoTitle() {\n  return (\n    <Image style={styles.image} source={{ uri: 'https://reactnative.dev/img/tiny_logo.png' }} />\n  );\n}\n\nexport default function Home() {\n  const [count, setCount] = useState(0);\n\n  return (\n    <>\n      <Stack.Screen\n        options={{\n          headerTitle: props => <LogoTitle {...props} />,\n          headerRight: () => <Button onPress={() => setCount(c => c + 1)} title=\"Update count\" />,\n        }}\n      />\n      <Text>Count: {count}</Text>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  image: {\n    width: 50,\n    height: 50,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: React Native Gyroscope Component Implementation\nDESCRIPTION: A complete React Native component that demonstrates how to implement gyroscope functionality using expo-sensors. The component includes features for starting/stopping the gyroscope listener, adjusting update intervals, and displaying real-time gyroscope data for x, y, and z axes.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/gyroscope.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View } from 'react-native';\nimport { Gyroscope } from 'expo-sensors';\n\nexport default function App() {\n  const [{ x, y, z }, setData] = useState({\n    x: 0,\n    y: 0,\n    z: 0,\n  });\n  const [subscription, setSubscription] = useState(null);\n\n  const _slow = () => Gyroscope.setUpdateInterval(1000);\n  const _fast = () => Gyroscope.setUpdateInterval(16);\n\n  const _subscribe = () => {\n    setSubscription(\n      Gyroscope.addListener(gyroscopeData => {\n        setData(gyroscopeData);\n      })\n    );\n  };\n\n  const _unsubscribe = () => {\n    subscription && subscription.remove();\n    setSubscription(null);\n  };\n\n  useEffect(() => {\n    _subscribe();\n    return () => _unsubscribe();\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.text}>Gyroscope:</Text>\n      <Text style={styles.text}>x: {x}</Text>\n      <Text style={styles.text}>y: {y}</Text>\n      <Text style={styles.text}>z: {z}</Text>\n      <View style={styles.buttonContainer}>\n        <TouchableOpacity onPress={subscription ? _unsubscribe : _subscribe} style={styles.button}>\n          <Text>{subscription ? 'On' : 'Off'}</Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={_slow} style={[styles.button, styles.middleButton]}>\n          <Text>Slow</Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={_fast} style={styles.button}>\n          <Text>Fast</Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    paddingHorizontal: 10,\n  },\n  text: {\n    textAlign: 'center',\n  },\n  buttonContainer: {\n    flexDirection: 'row',\n    alignItems: 'stretch',\n    marginTop: 15,\n  },\n  button: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#eee',\n    padding: 10,\n  },\n  middleButton: {\n    borderLeftWidth: 1,\n    borderRightWidth: 1,\n    borderColor: '#ccc',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Config Plugin in app.config.js\nDESCRIPTION: Demonstrates how to import and apply a custom config plugin in the app.config.js file.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/config-plugins/plugins-and-mods.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { withMySDK } = require('./my-plugin');\n\nconst config = {\n  name: 'my app',\n};\n\nmodule.exports = withMySDK(config, { apiKey: 'X-XXX-XXX' });\n```\n\n----------------------------------------\n\nTITLE: Defining Submission Profile in eas.json\nDESCRIPTION: This JSON snippet shows how to define a submission profile in eas.json, which includes the path to your Google Service Account key.  Replace `../path/to/api-xxx-yyy-zzz.json` with the actual path to your service account key file. This service account is required for EAS to interact with the Google Play Developer API.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/submit/android.mdx#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"submit\": {\n    \"production\": {\n      \"android\": {\n        \"serviceAccountKeyPath\": \"../path/to/api-xxx-yyy-zzz.json\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using an Imported Config Plugin in app.config.js\nDESCRIPTION: Demonstrates how to use an imported config plugin in the app.config.js file using the plugins array.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/config-plugins/plugins-and-mods.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"name\": \"my-app\",\n  \"plugins\": [[\"./my-plugin\", \"custom\"]]\n}\n```\n\n----------------------------------------\n\nTITLE: Mobile Text Component with RTL Support\nDESCRIPTION: Custom Text component implementation for mobile platforms with proper RTL text alignment handling.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/localization.mdx#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Text as RNText, TextProps as RNTextProps } from 'react-native';\n\nconst MobileText = (props: RNTextProps) => {\n  return <RNText style={{ textAlign: 'left', ...props.style }} {...props} />;\n};\nexport default MobileText;\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Expo Contacts in React Native - JSX\nDESCRIPTION: Provides a complete React Native component for accessing and displaying the first contact (if available) using Expo Contacts. Requests permissions, fetches contacts with email fields, and logs the first contact to the console. Depends on expo-contacts and react-native packages. The primary input is user permission; outputs include permission status and contact data. Can be placed in App.js for functional testing.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/contacts.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEffect } from 'react';\\nimport { StyleSheet, View, Text } from 'react-native';\\nimport * as Contacts from 'expo-contacts';\\n\\nexport default function App() {\\n  useEffect(() => {\\n    (async () => {\\n      const { status } = await Contacts.requestPermissionsAsync();\\n      if (status === 'granted') {\\n        const { data } = await Contacts.getContactsAsync({\\n          fields: [Contacts.Fields.Emails],\\n        });\\n\\n        if (data.length > 0) {\\n          const contact = data[0];\\n          console.log(contact);\\n        }\\n      }\\n    })();\\n  }, []);\\n\\n  return (\\n    <View style={styles.container}>\\n      <Text>Contacts Module Example</Text>\\n    </View>\\n  );\\n}\\n\\nconst styles = StyleSheet.create({\\n  container: {\\n    flex: 1,\\n    backgroundColor: '#fff',\\n    alignItems: 'center',\\n    justifyContent: 'center',\\n  },\\n});\\n\n```\n\n----------------------------------------\n\nTITLE: React Native Safe Area Insets Implementation (After Migration)\nDESCRIPTION: Shows how to replace CSS-based safe area handling with the universal useSafeAreaInsets hook for cross-platform compatibility.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/safe-area-context.mdx#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\n\nfunction App() {\n  const insets = useSafeAreaInsets();\n  return (\n    <View\n      style={{\n        paddingTop: insets.top,\n        paddingLeft: insets.left,\n        paddingBottom: insets.bottom,\n        paddingRight: insets.right,\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Gyroscope Implementation in React Native with Expo\nDESCRIPTION: A complete React Native component that demonstrates how to use the Gyroscope module from expo-sensors. It shows how to subscribe to gyroscope data updates, manage update intervals, and handle component lifecycle with useEffect.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/gyroscope.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View } from 'react-native';\nimport { Gyroscope } from 'expo-sensors';\n\nexport default function App() {\n  const [{ x, y, z }, setData] = useState({\n    x: 0,\n    y: 0,\n    z: 0,\n  });\n  const [subscription, setSubscription] = useState(null);\n\n  const _slow = () => Gyroscope.setUpdateInterval(1000);\n  const _fast = () => Gyroscope.setUpdateInterval(16);\n\n  const _subscribe = () => {\n    setSubscription(\n      Gyroscope.addListener(gyroscopeData => {\n        setData(gyroscopeData);\n      })\n    );\n  };\n\n  const _unsubscribe = () => {\n    subscription && subscription.remove();\n    setSubscription(null);\n  };\n\n  useEffect(() => {\n    _subscribe();\n    return () => _unsubscribe();\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.text}>Gyroscope:</Text>\n      <Text style={styles.text}>x: {x}</Text>\n      <Text style={styles.text}>y: {y}</Text>\n      <Text style={styles.text}>z: {z}</Text>\n      <View style={styles.buttonContainer}>\n        <TouchableOpacity onPress={subscription ? _unsubscribe : _subscribe} style={styles.button}>\n          <Text>{subscription ? 'On' : 'Off'}</Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={_slow} style={[styles.button, styles.middleButton]}>\n          <Text>Slow</Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={_fast} style={styles.button}>\n          <Text>Fast</Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    paddingHorizontal: 10,\n  },\n  text: {\n    textAlign: 'center',\n  },\n  buttonContainer: {\n    flexDirection: 'row',\n    alignItems: 'stretch',\n    marginTop: 15,\n  },\n  button: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#eee',\n    padding: 10,\n  },\n  middleButton: {\n    borderLeftWidth: 1,\n    borderRightWidth: 1,\n    borderColor: '#ccc',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Permissions for expo-cellular\nDESCRIPTION: Adds the necessary `READ_PHONE_STATE` permission to the AndroidManifest.xml file. This permission is required for the `expo-cellular` library to access `TelephonyManager` on Android, specifically when not using Continuous Native Generation (CNG) or managing the native Android project manually.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/cellular.mdx#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"android.permission.READ_PHONE_STATE\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring RSC in Expo Config\nDESCRIPTION: JSON configuration to enable React Server Components experimental feature in app.json\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/server-components.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"experiments\": {\n      \"reactServerFunctions\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Local Images for HTML Printing in iOS\nDESCRIPTION: A solution for handling local images in iOS printing by converting them to base64 and inlining them in the HTML. This works around WKWebView limitations that prevent using local asset URLs directly.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/print.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { Asset } from 'expo-asset';\nimport { printAsync } from 'expo-print';\nimport { manipulateAsync } from 'expo-image-manipulator';\n\nasync function generateHTML() {\n  const asset = Asset.fromModule(require('../../assets/logo.png'));\n  const image = await manipulateAsync(asset.localUri ?? asset.uri, [], { base64: true });\n  return `\n    <html>\n      <img\n        src=\"data:image/jpeg;base64,${image.base64}\"\n        style=\"width: 90vw;\" />\n    </html>\n  `;\n}\n\nasync function print() {\n  const html = await generateHTML();\n  await printAsync({ html });\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Non-ASCII Characters in URLs with JavaScript\nDESCRIPTION: Illustrates the difference in handling non-ASCII characters in URLs between web/Node.js and native platforms (Android, iOS) in Expo.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/url.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(new URL('http://🥓').toString());\n```\n\n----------------------------------------\n\nTITLE: Configuring Manual Runtime Version in Expo app.json (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to manually specify a static runtime version string in the Expo app configuration, ensuring that only builds with this exact configuration can accept corresponding updates. No dependencies are required, but you should ensure this string is unique for each version. The key parameters are 'expo' and its child 'runtimeVersion', which must be a string.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/updates.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"runtimeVersion\": \"<runtime_version_string>\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Default String Values in XML for Expo Custom Module\nDESCRIPTION: This XML snippet defines default string values in the strings.xml file for the Expo custom module. It sets up a string resource with the name 'expo_custom_value' that can be overwritten by users in their local strings.xml file.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/config-plugins/development-and-debugging.mdx#2025-04-22_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n    <string name=\"expo_custom_value\" translatable=\"false\"></string>\n</resources>\n```\n\n----------------------------------------\n\nTITLE: Installing expo-brightness in React Native projects\nDESCRIPTION: Command to install the expo-brightness package in a React Native project using npx expo install. This is the recommended installation method for both managed and bare React Native projects.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-brightness/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-brightness\n```\n\n----------------------------------------\n\nTITLE: Configuring Sentry Plugin in Expo app.json\nDESCRIPTION: This snippet shows how to add the Sentry plugin to the Expo app configuration file. It includes organization and project details, as well as the Sentry URL.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/using-sentry.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"@sentry/react-native/expo\",\n        {\n          \"organization\": \"sentry org slug, or use the `SENTRY_ORG` environment variable\",\n          \"project\": \"sentry project name, or use the `SENTRY_PROJECT` environment variable\",\n          \"url\": \"https://sentry.io/\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Device Manufacturer and Model using expo-device in JSX\nDESCRIPTION: This React Native component utilizes the expo-device library to display the manufacturer and model name of the device. Dependencies include the 'expo-device' package. No special parameters are required, and it expects no input, simply displaying the information as a text output on the screen.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/device.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Text, View } from 'react-native';\nimport * as Device from 'expo-device';\n\nexport default function App() {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>\n        {Device.manufacturer}: {Device.modelName}\n      </Text>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Network State Changes in React Native\nDESCRIPTION: This code shows how to subscribe to network state updates using addEventListener. It provides a callback that runs whenever the network connection state changes and returns an unsubscribe function.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/netinfo.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst unsubscribe = NetInfo.addEventListener(state => {\n  console.log('Connection type', state.type);\n  console.log('Is connected?', state.isConnected);\n});\n\n// To unsubscribe to these update, just use:\nunsubscribe();\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Permissions in app.json\nDESCRIPTION: Example of setting iOS permission messages using the ios.infoPlist configuration in app.json\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/permissions.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ios\": {\n    \"infoPlist\": {\n      \"NSCameraUsageDescription\": \"This app uses the camera to scan barcodes on event tickets.\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Redirect Component in Expo Router\nDESCRIPTION: Demonstrates how to use the Redirect component from expo-router to navigate users to a different route automatically when they visit a page.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/advanced/redirects.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Redirect } from 'expo-router';\n\nexport default function Index() {\n  return <Redirect href=\"/home\" />;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Camera Usage in React Native with Expo\nDESCRIPTION: A complete React Native component demonstrating basic camera functionality with permission handling, camera preview, and a button to toggle between front and back cameras.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/camera-legacy.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Camera, CameraType } from 'expo-camera/legacy';\nimport { useState } from 'react';\nimport { Button, StyleSheet, Text, TouchableOpacity, View } from 'react-native';\n\nexport default function App() {\n  const [type, setType] = useState(CameraType.back);\n  const [permission, requestPermission] = Camera.useCameraPermissions();\n\n  if (!permission) {\n    // Camera permissions are still loading\n    return <View />;\n  }\n\n  if (!permission.granted) {\n    // Camera permissions are not granted yet\n    return (\n      <View style={styles.container}>\n        <Text style={{ textAlign: 'center' }}>We need your permission to show the camera</Text>\n        <Button onPress={requestPermission} title=\"grant permission\" />\n      </View>\n    );\n  }\n\n  function toggleCameraType() {\n    setType(current => (current === CameraType.back ? CameraType.front : CameraType.back));\n  }\n\n  return (\n    <View style={styles.container}>\n      <Camera style={styles.camera} type={type}>\n        <View style={styles.buttonContainer}>\n          <TouchableOpacity style={styles.button} onPress={toggleCameraType}>\n            <Text style={styles.text}>Flip Camera</Text>\n          </TouchableOpacity>\n        </View>\n      </Camera>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n  camera: {\n    flex: 1,\n  },\n  buttonContainer: {\n    flex: 1,\n    flexDirection: 'row',\n    backgroundColor: 'transparent',\n    margin: 64,\n  },\n  button: {\n    flex: 1,\n    alignSelf: 'flex-end',\n    alignItems: 'center',\n  },\n  text: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: 'white',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Starting Expo Development Server\nDESCRIPTION: Command to start the Expo development server for testing push notifications\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/push-notifications/push-notifications-setup.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo start\n```\n\n----------------------------------------\n\nTITLE: HTML Deep Link Implementation for Expo Apps\nDESCRIPTION: This code snippet demonstrates how to create a simple HTML link that uses a custom URL scheme to deep link into an Expo app. The link uses the 'myapp://' scheme followed by the host and path to direct users to a specific product page within the app.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/linking/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"myapp://web-app.com/product\">View Product</a>\n```\n\n----------------------------------------\n\nTITLE: Importing KeepAwake Module from expo-keep-awake\nDESCRIPTION: This snippet shows how to import the KeepAwake module from the expo-keep-awake package. This import is necessary for using the functions and hooks provided by the package.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/keep-awake.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport KeepAwake from 'expo-keep-awake';\n```\n\n----------------------------------------\n\nTITLE: Scheduling Notifications with Custom Sounds on iOS\nDESCRIPTION: This TypeScript example shows how to schedule a notification on iOS using a custom sound. The sound file must be added to the Xcode project. The code specifies the sound in NotificationContentInput for the scheduled notification.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/notifications.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nawait Notifications.scheduleNotificationAsync({\n  content: {\n    title: \"You've got mail! 📬\",\n    body: 'Open the notification to read them all',\n    sound: 'notification.wav'\n  },\n  trigger: {\n    // ...\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Maestro Home Test Flow\nDESCRIPTION: YAML configuration for testing the home screen of an Expo app using Maestro. Launches the app and verifies the 'Welcome!' text is visible.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/workflows/reference/e2e-tests.mdx#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nappId: dev.expo.eastestsexample\n---\n- launchApp\n- assertVisible: 'Welcome!'\n```\n\n----------------------------------------\n\nTITLE: Configuring Expo Router Plugin in app.json\nDESCRIPTION: This snippet shows how to configure the expo-router plugin in your app.json file. The configuration enables file-based routing capabilities in your Expo application.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/router.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\"expo-router\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Video Playback with Play/Pause Control in React Native\nDESCRIPTION: This example demonstrates how to use the Video component from expo-av to display a video with a play/pause button. It uses React hooks for state management and refs for video control.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/video-av.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useRef } from 'react';\nimport { View, StyleSheet, Button } from 'react-native';\nimport { Video, ResizeMode } from 'expo-av';\n\nexport default function App() {\n  const video = useRef(null);\n  const [status, setStatus] = useState({});\n  return (\n    <View style={styles.container}>\n      <Video\n        ref={video}\n        style={styles.video}\n        source={{\n          uri: 'https://d23dyxeqlo5psv.cloudfront.net/big_buck_bunny.mp4',\n        }}\n        useNativeControls\n        resizeMode={ResizeMode.CONTAIN}\n        isLooping\n        onPlaybackStatusUpdate={status => setStatus(() => status)}\n      />\n      <View style={styles.buttons}>\n        <Button\n          title={status.isPlaying ? 'Pause' : 'Play'}\n          onPress={() =>\n            status.isPlaying ? video.current.pauseAsync() : video.current.playAsync()\n          }\n        />\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    backgroundColor: '#ecf0f1',\n  },\n  video: {\n    alignSelf: 'center',\n    width: 320,\n    height: 200,\n  },\n  buttons: {\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Image Manipulation React Native Component\nDESCRIPTION: A React Native component demonstrating basic image manipulation using expo-image-manipulator. The example shows how to rotate an image 90 degrees clockwise and flip it vertically, then save it as a PNG file.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/imagemanipulator.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { Button, Image, StyleSheet, View } from 'react-native';\nimport { Asset } from 'expo-asset';\nimport { FlipType, SaveFormat, useImageManipulator } from 'expo-image-manipulator';\n\nconst IMAGE = Asset.fromModule(require('./assets/snack-icon.png'));\n\nexport default function App() {\n  const [image, setImage] = useState(IMAGE);\n  const context = useImageManipulator(IMAGE.uri);\n\n  const rotate90andFlip = async () => {\n    context.rotate(90).flip(FlipType.Vertical);\n    const image = await context.renderAsync();\n    const result = await image.saveAsync({\n      format: SaveFormat.PNG,\n    });\n\n    setImage(result);\n  };\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.imageContainer}>\n        <Image source={{ uri: image.localUri || image.uri }} style={styles.image} />\n      </View>\n      <Button title=\"Rotate and Flip\" onPress={rotate90andFlip} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n  imageContainer: {\n    marginVertical: 20,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  image: {\n    width: 300,\n    height: 300,\n    resizeMode: 'contain',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using expo-calendar API in a React Native App (JSX)\nDESCRIPTION: This example demonstrates requesting calendar permissions, listing calendars, and creating a new calendar within a React Native component using expo-calendar. Main dependencies are 'expo-calendar' and 'react-native'. Key parameters include permission status, default calendar source, and calendar creation options. Expects user permission to access data and displays calendar information in the console. The code requires a functional React Native environment with expo-calendar installed.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/calendar.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEffect } from 'react';\\nimport { StyleSheet, View, Text, Button, Platform } from 'react-native';\\nimport * as Calendar from 'expo-calendar';\\n\\nexport default function App() {\\n  useEffect(() => {\\n    (async () => {\\n      const { status } = await Calendar.requestCalendarPermissionsAsync();\\n      if (status === 'granted') {\\n        const calendars = await Calendar.getCalendarsAsync(Calendar.EntityTypes.EVENT);\\n        console.log('Here are all your calendars:');\\n        console.log({ calendars });\\n      }\\n    })();\\n  }, []);\\n\\n  return (\\n    <View style={styles.container}>\\n      <Text>Calendar Module Example</Text>\\n      <Button title=\\\"Create a new calendar\\\" onPress={createCalendar} />\\n    </View>\\n  );\\n}\\n\\nasync function getDefaultCalendarSource() {\\n  const defaultCalendar = await Calendar.getDefaultCalendarAsync();\\n  return defaultCalendar.source;\\n}\\n\\nasync function createCalendar() {\\n  const defaultCalendarSource =\\n    Platform.OS === 'ios'\\n      ? await getDefaultCalendarSource()\\n      : { isLocalAccount: true, name: 'Expo Calendar' };\\n  const newCalendarID = await Calendar.createCalendarAsync({\\n    title: 'Expo Calendar',\\n    color: 'blue',\\n    entityType: Calendar.EntityTypes.EVENT,\\n    sourceId: defaultCalendarSource.id,\\n    source: defaultCalendarSource,\\n    name: 'internalCalendarName',\\n    ownerAccount: 'personal',\\n    accessLevel: Calendar.CalendarAccessLevel.OWNER,\\n  });\\n  console.log(`Your new calendar ID is: ${newCalendarID}`);\\n}\\n\\nconst styles = StyleSheet.create({\\n  container: {\\n    flex: 1,\\n    backgroundColor: '#fff',\\n    alignItems: 'center',\\n    justifyContent: 'space-around',\\n  },\\n});\\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Router Reset in Expo Router\nDESCRIPTION: Example of resetting the app to its initial route using Expo Router's replace method instead of NavigationContainer's resetRoot.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/migrate/from-react-navigation.mdx#2025-04-22_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useRouter } from 'expo-router';\n\nfunction Example() {\n  const router = useRouter();\n\n  return (\n    <Text\n      onPress={() => {\n        // Go to the initial route of the application.\n        router.replace('/');\n      }}>\n      Reset App\n    </Text>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Static Redirects in app.json\nDESCRIPTION: Demonstrates how to configure static redirects in the app.json file using the expo-router config plugin, allowing you to redirect from one route to another.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/advanced/redirects.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    [\n      \"expo-router\",\n      {\n        \"redirects\": [\n          {\n            \"source\": \"/redirect/from/here\",\n            \"destination\": \"/to/this/route\"\n          }\n        ]\n      }\n    ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Fingerprint Policy Configuration\nDESCRIPTION: Example configuration showing how to use the fingerprint policy to automatically calculate runtime version.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/updates.mdx#2025-04-22_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"runtimeVersion\": {\n      \"policy\": \"fingerprint\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Recording Audio with useAudioRecorder Hook in React Native\nDESCRIPTION: This JSX snippet illustrates how to record audio using the `useAudioRecorder` hook from `expo-audio`. It initializes the recorder with a preset quality, requests microphone permissions using `AudioModule.requestRecordingPermissionsAsync`, provides functions to prepare and start recording (`record`) and stop recording (`stopRecording`). The UI includes a button that toggles between starting and stopping the recording based on the `audioRecorder.isRecording` state. Requires `expo-av` (implicitly via expo-audio's older dependency structure or for other AV tasks) and `expo-asset` dependencies.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/audio.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useEffect } from 'react'; // useEffect added based on code logic\nimport { View, StyleSheet, Button, Alert } from 'react-native'; // Alert added based on code logic\nimport { useAudioRecorder, RecordingOptions, AudioModule, RecordingPresets } from 'expo-audio';\n\nexport default function App() {\n  const audioRecorder = useAudioRecorder(RecordingPresets.HIGH_QUALITY);\n\n  const record = async () => {\n    await audioRecorder.prepareToRecordAsync();\n    audioRecorder.record();\n  };\n\n  const stopRecording = async () => {\n    // The recording will be available on `audioRecorder.uri`.\n    await audioRecorder.stop();\n  };\n\n  useEffect(() => {\n    (async () => {\n      const status = await AudioModule.requestRecordingPermissionsAsync();\n      if (!status.granted) {\n        Alert.alert('Permission to access microphone was denied');\n      }\n    })();\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <Button\n        title={audioRecorder.isRecording ? 'Stop Recording' : 'Start Recording'}\n        onPress={audioRecorder.isRecording ? stopRecording : record}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    backgroundColor: '#ecf0f1',\n    padding: 10,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using an Expo Module in React Native Component\nDESCRIPTION: Demonstrates how to import and use a custom Expo module (expo-settings) in a React Native component. The code renders the result of the module's hello() function within a centered view.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/use-standalone-expo-module-in-your-project.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { Text, View } from 'react-native';\nimport * as Settings from 'expo-settings';\n\nexport default function TabOneScreen() {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>{Settings.hello()}</Text>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Building Web Browser UI Example\nDESCRIPTION: Extended example showing how to build a web browser interface around the WebView component with URL input and loading indicator.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/native-view-tutorial.mdx#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useState } from 'react';\nimport { ActivityIndicator, Platform, Text, TextInput, View } from 'react-native';\nimport { WebView } from 'expo-web-view';\n\nexport default function App() {\n  const [inputUrl, setInputUrl] = useState('https://docs.expo.dev/modules/');\n  const [url, setUrl] = useState(inputUrl);\n  const [isLoading, setIsLoading] = useState(true);\n\n  return (\n    <View style={{ flex: 1, paddingTop: Platform.OS === 'ios' ? 80 : 30 }}>\n      <TextInput\n        value={inputUrl}\n        onChangeText={setInputUrl}\n        returnKeyType=\"go\"\n        autoCapitalize=\"none\"\n        onSubmitEditing={() => {\n          if (inputUrl !== url) {\n            setUrl(inputUrl);\n            setIsLoading(true);\n          }\n        }}\n        keyboardType=\"url\"\n        style={{\n          color: '#fff',\n          backgroundColor: '#000',\n          borderRadius: 10,\n          marginHorizontal: 10,\n          paddingHorizontal: 20,\n          height: 60,\n        }}\n      />\n\n      <WebView\n        url={url.startsWith('https://') || url.startsWith('http://') ? url : `https://${url}`}\n        onLoad={() => setIsLoading(false)}\n        style={{ flex: 1, marginTop: 20 }}\n      />\n      <LoadingView isLoading={isLoading} />\n    </View>\n  );\n}\n\nfunction LoadingView({ isLoading }: { isLoading: boolean }) {\n  if (!isLoading) {\n    return null;\n  }\n\n  return (\n    <View\n      style={{\n        position: 'absolute',\n        bottom: 0,\n        left: 0,\n        right: 0,\n        height: 80,\n        backgroundColor: 'rgba(0,0,0,0.5)',\n        paddingBottom: 10,\n        justifyContent: 'center',\n        alignItems: 'center',\n        flexDirection: 'row',\n      }}>\n      <ActivityIndicator animating={isLoading} color=\"#fff\" style={{ marginRight: 10 }} />\n      <Text style={{ color: '#fff' }}>Loading...</Text>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Permissions in Info.plist\nDESCRIPTION: Required iOS permission configurations in Info.plist file for photo library, camera, and microphone access.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/imagepicker.mdx#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<key>NSPhotoLibraryUsageDescription</key>\n<string>Give $(PRODUCT_NAME) permission to save photos</string>\n<key>NSCameraUsageDescription</key>\n<string>Give $(PRODUCT_NAME) permission to access your camera</string>\n<key>NSMicrophoneUsageDescription</key>\n<string>Give $(PRODUCT_NAME) permission to use your microphone</string>\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-sqlite with Config Plugin in app.json\nDESCRIPTION: Example of configuring expo-sqlite using its built-in config plugin in app.json. This allows for advanced configurations that require building a new app binary to take effect.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/sqlite.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-sqlite\",\n        {\n          \"enableFTS\": true,\n          \"useSQLCipher\": true,\n          \"android\": {\n            \"enableFTS\": false,\n            \"useSQLCipher\": false\n          },\n          \"ios\": {\n            \"customBuildFlags\": [\"-DSQLITE_ENABLE_DBSTAT_VTAB=1 -DSQLITE_ENABLE_SNAPSHOT=1\"]\n          }\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic WebBrowser Usage Example in React Native\nDESCRIPTION: A React Native component that demonstrates how to open a URL in the system browser using expo-web-browser. The example shows how to handle the result of the browser session and display it.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/webbrowser.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { Button, Text, View, StyleSheet } from 'react-native';\nimport * as WebBrowser from 'expo-web-browser';\n/* @hide */\nimport Constants from 'expo-constants';\n/* @end */\n\nexport default function App() {\n  const [result, setResult] = useState(null);\n\n  const _handlePressButtonAsync = async () => {\n    let result = await WebBrowser.openBrowserAsync('https://expo.dev');\n    setResult(result);\n  };\n  return (\n    <View style={styles.container}>\n      <Button title=\"Open WebBrowser\" onPress={_handlePressButtonAsync} />\n      <Text>{result && JSON.stringify(result)}</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingTop: Constants.statusBarHeight,\n    backgroundColor: '#ecf0f1',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching albums and displaying assets using expo-media-library\nDESCRIPTION: React Native component demonstrating how to fetch albums and display assets using the expo-media-library module. It includes permission handling, album fetching, and asset display.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/media-library.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { Button, Text, SafeAreaView, ScrollView, StyleSheet, Image, View, Platform } from 'react-native';\nimport * as MediaLibrary from 'expo-media-library';\n\nexport default function App() {\n  const [albums, setAlbums] = useState(null);\n  const [permissionResponse, requestPermission] = MediaLibrary.usePermissions();\n\n  async function getAlbums() {\n    if (permissionResponse.status !== 'granted') {\n      await requestPermission();\n    }\n    const fetchedAlbums = await MediaLibrary.getAlbumsAsync({\n      includeSmartAlbums: true,\n    });\n    setAlbums(fetchedAlbums);\n  }\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <Button onPress={getAlbums} title=\"Get albums\" />\n      <ScrollView>\n        {albums && albums.map((album) => <AlbumEntry album={album} />)}\n      </ScrollView>\n    </SafeAreaView>\n  );\n}\n\nfunction AlbumEntry({ album }) {\n  const [assets, setAssets] = useState([]);\n\n  useEffect(() => {\n    async function getAlbumAssets() {\n      const albumAssets = await MediaLibrary.getAssetsAsync({ album });\n      setAssets(albumAssets.assets);\n    }\n    getAlbumAssets();\n  }, [album]);\n\n  return (\n    <View key={album.id} style={styles.albumContainer}>\n      <Text>\n        {album.title} - {album.assetCount ?? 'no'} assets\n      </Text>\n      <View style={styles.albumAssetsContainer}>\n        {assets && assets.map((asset) => (\n          <Image source={{ uri: asset.uri }} width={50} height={50} />\n        ))}\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    gap: 8,\n    justifyContent: 'center',\n    ...Platform.select({\n      android: {\n        paddingTop: 40,\n      },\n    }),\n  },\n  albumContainer: {\n    paddingHorizontal: 20,\n    marginBottom: 12,\n    gap: 4,\n  },\n  albumAssetsContainer: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Listening to Barometer Sensor Data with Expo-Sensors in React Native (JSX)\nDESCRIPTION: This snippet illustrates how to set up a barometer sensor listener using expo-sensors' Barometer module within a React Native functional component. It manages subscription state, subscribes and unsubscribes to data events, and displays live pressure and relative altitude data (altitude only on iOS). Required dependencies include expo-sensors and react-native. Inputs involve user actions (toggling the listener); outputs are UI updates displaying air pressure and altitude measurements. Limitations: relative altitude is only available on iOS, and web is not supported.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/barometer.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport { useState } from 'react';\\nimport { StyleSheet, Text, TouchableOpacity, View, Platform } from 'react-native';\\nimport { Barometer } from 'expo-sensors';\\n\\nexport default function App() {\\n  const [{ pressure, relativeAltitude }, setData] = useState({ pressure: 0, relativeAltitude: 0 });\\n  const [subscription, setSubscription] = useState(null);\\n\\n  const toggleListener = () => {\\n    subscription ? unsubscribe() : subscribe();\\n  };\\n\\n  const subscribe = () => {\\n    setSubscription(Barometer.addListener(setData));\\n  };\\n\\n  const unsubscribe = () => {\\n    subscription && subscription.remove();\\n    setSubscription(null);\\n  };\\n\\n  return (\\n    <View style={styles.wrapper}>\\n      <Text>Barometer: Listener {subscription ? 'ACTIVE' : 'INACTIVE'}</Text>\\n      <Text>Pressure: {pressure} hPa</Text>\\n      <Text>\\n        Relative Altitude:{' '}\\n        {Platform.OS === 'ios' ? `${relativeAltitude} m` : `Only available on iOS`}\\n      </Text>\\n      <TouchableOpacity onPress={toggleListener} style={styles.button}>\\n        <Text>Toggle listener</Text>\\n      </TouchableOpacity>\\n    </View>\\n  );\\n}\\n\\nconst styles = StyleSheet.create({\\n  button: {\\n    justifyContent: 'center',\\n    alignItems: 'center',\\n    backgroundColor: '#eee',\\n    padding: 10,\\n    marginTop: 15,\\n  },\\n  wrapper: {\\n    flex: 1,\\n    alignItems: 'stretch',\\n    justifyContent: 'center',\\n    paddingHorizontal: 20,\\n  },\\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Background Tasks with Expo BackgroundTask (TypeScript/React Native)\nDESCRIPTION: This TypeScript example demonstrates the core usage of `expo-background-task` within a React Native component. It shows how to define a task using `TaskManager.defineTask` in the global scope, register/unregister it using `BackgroundTask.registerTaskAsync`/`unregisterTaskAsync` within the component, check the task status, and provide basic UI controls. Dependencies include `expo-background-task`, `expo-task-manager`, `react`, and `react-native`.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/background-task.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as BackgroundTask from 'expo-background-task';\nimport * as TaskManager from 'expo-task-manager';\nimport { useEffect, useState } from 'react';\nimport { StyleSheet, Text, View, Button } from 'react-native';\n\nconst BACKGROUND_TASK_IDENTIFIER = 'background-task';\n\n// Register and create the task so that it is available also when the background task screen\n// (a React component defined later in this example) is not visible.\n// Note: This needs to be called in the global scope, not in a React component.\nTaskManager.defineTask(BACKGROUND_TASK_IDENTIFIER, async () => {\n  try {\n    const now = Date.now();\n    console.log(`Got background task call at date: ${new Date(now).toISOString()}`);\n  } catch (error) {\n    console.error('Failed to execute the background task:', error);\n    return BackgroundTask.BackgroundTaskResult.Failed;\n  }\n  return BackgroundTask.BackgroundTaskResult.Success;\n});\n\n// 2. Register the task at some point in your app by providing the same name\n// Note: This does NOT need to be in the global scope and CAN be used in your React components!\nasync function registerBackgroundTaskAsync() {\n  return BackgroundTask.registerTaskAsync(BACKGROUND_TASK_IDENTIFIER);\n}\n\n// 3. (Optional) Unregister tasks by specifying the task name\n// This will cancel any future background task calls that match the given name\n// Note: This does NOT need to be in the global scope and CAN be used in your React components!\nasync function unregisterBackgroundTaskAsync() {\n  return BackgroundTask.unregisterTaskAsync(BACKGROUND_TASK_IDENTIFIER);\n}\n\nexport default function BackgroundTaskScreen() {\n  const [isRegistered, setIsRegistered] = useState<boolean>(false);\n  const [status, setStatus] = useState<BackgroundTask.BackgroundTaskStatus | null>(null);\n\n  useEffect(() => {\n    checkStatusAsync();\n  }, []);\n\n  const checkStatusAsync = async () => {\n    const status = await BackgroundTask.getStatusAsync();\n    setStatus(status);\n  };\n\n  const toggle = async () => {\n    if (isRegistered) {\n      await registerBackgroundTaskAsync();\n    } else {\n      await unregisterBackgroundTaskAsync();\n    }\n    setIsRegistered(!isRegistered);\n  };\n\n  return (\n    <View style={styles.screen}>\n      <View style={styles.textContainer}>\n        <Text>\n          Background Task Service Availability:{' '}\n          <Text style={styles.boldText}>\n            {status ? BackgroundTask.BackgroundTaskStatus[status] : null}\n          </Text>\n        </Text>\n      </View>\n      <Button\n        disabled={status === BackgroundTask.BackgroundTaskStatus.Restricted}\n        title={isRegistered ? 'Cancel Background Task' : 'Schedule Background Task'}\n        onPress={toggle}\n      />\n      <Button title=\"Check Background Task Status\" onPress={checkStatusAsync} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  screen: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  textContainer: {\n    margin: 10,\n  },\n  boldText: {\n    fontWeight: 'bold',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Upgrading Expo SDK Dependencies\nDESCRIPTION: Command to upgrade all dependencies to match the installed SDK version.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/workflow/upgrading-expo-sdk-walkthrough.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo install --fix\n```\n\n----------------------------------------\n\nTITLE: Using Speech.speak() in a React Native Expo App\nDESCRIPTION: This snippet demonstrates how to use the expo-speech library to implement text-to-speech functionality in a React Native application. It creates a simple UI with a button that, when pressed, speaks the text '1' using the Speech.speak() function.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/speech.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { View, StyleSheet, Button } from 'react-native';\nimport * as Speech from 'expo-speech';\n\nexport default function App() {\n  const speak = () => {\n    const thingToSay = '1';\n    Speech.speak(thingToSay);\n  };\n\n  return (\n    <View style={styles.container}>\n      <Button title=\"Press to hear some words\" onPress={speak} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    backgroundColor: '#ecf0f1',\n    padding: 8,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring EAS Metadata Path for External Content in eas.json\nDESCRIPTION: This JSON snippet shows how to configure the metadataPath in eas.json to use a JavaScript file for EAS Metadata configuration with external content.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/metadata/config.mdx#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"submit\": {\n    \"production\": {\n      \"ios\": {\n        \"metadataPath\": \"./store.config.js\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SplashScreen Plugin in app.json\nDESCRIPTION: Example configuration for expo-splash-screen using the config plugin system. Shows how to set background colors, images, and other display properties for both light and dark modes.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/splash-screen.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-splash-screen\",\n        {\n          \"backgroundColor\": \"#232323\",\n          \"image\": \"./assets/splash-icon.png\",\n          \"dark\": {\n            \"image\": \"./assets/splash-icon-dark.png\",\n            \"backgroundColor\": \"#000000\"\n          },\n          \"imageWidth\": 200\n        }\n      ]\n    ],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring .npmrc for a Private Registry\nDESCRIPTION: Example .npmrc configuration for connecting to a private npm registry, where you need to specify the registry URL.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/build-reference/private-npm-packages.mdx#2025-04-22_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\nregistry=__REPLACE_WITH_REGISTRY_URL__\n```\n\n----------------------------------------\n\nTITLE: Setting Up Custom Notification Sounds in TypeScript\nDESCRIPTION: TypeScript implementation for configuring notification channels and scheduling notifications with custom sounds.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/notifications.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nawait Notifications.setNotificationChannelAsync('new_emails', {\n  name: 'E-mail notifications',\n  importance: Notifications.AndroidImportance.HIGH,\n  sound: 'mySoundFile.wav', // Provide ONLY the base filename\n});\n\nawait Notifications.scheduleNotificationAsync({\n  content: {\n    title: \"You've got mail! 📬\",\n    sound: 'mySoundFile.wav', // Provide ONLY the base filename\n  },\n  trigger: {\n    type: Notifications.SchedulableTriggerInputTypes.TIME_INTERVAL,\n    seconds: 2,\n    channelId: 'new_emails',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Up metro.config.js with TypeScript\nDESCRIPTION: JavaScript configuration file that uses ts-node to require and use a TypeScript metro configuration file.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/typescript.mdx#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nrequire('ts-node/register');\nmodule.exports = require('./metro.config.ts');\n```\n\n----------------------------------------\n\nTITLE: Configuring Runtime Version Policy in Expo\nDESCRIPTION: Defines a runtime version policy in the Expo configuration to automatically derive the runtime version from project information.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/updates.mdx#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"runtimeVersion\": {\n      \"policy\": \"<policy_name>\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Runtime Version Based on Native Versions (nativeVersion Policy) in Expo Config (JSON)\nDESCRIPTION: This code sets the runtimeVersion policy to nativeVersion in the Expo app config, combining the version property with platform-specific native versioning (buildNumber for iOS, versionCode for Android). This ensures each build gets a unique runtimeVersion reflecting both JS and native code changes. Inputs: version, ios.buildNumber, android.versionCode. Outputs: runtimeVersion of form \\\"<version>(<buildNumber|versionCode>)\\\" (e.g., \\\"1.0.0(1)\\\").\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/updates.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"expo\\\": {\\n    \\\"runtimeVersion\\\": {\\n      \\\"policy\\\": \\\"nativeVersion\\\"\\n    },\\n    \\\"version\\\": \\\"1.0.0\\\",\\n    \\\"ios\\\": {\\n      \\\"buildNumber\\\": \\\"1\\\"\\n    },\\n    \\\"android\\\": {\\n      \\\"versionCode\\\": 1\\n    }\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Using SafeAreaView in Expo TypeScript\nDESCRIPTION: This snippet demonstrates how to use SafeAreaView from react-native-safe-area-context to wrap the content of a screen component, ensuring it's displayed within the safe area.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/user-interface/safe-areas.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Text } from 'react-native';\nimport { SafeAreaView } from 'react-native-safe-area-context';\n\nexport default function HomeScreen() {\n  return (\n    <SafeAreaView style={{ flex: 1 }}>\n      <Text>Content is in safe area.</Text>\n    </SafeAreaView>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading Files with Expo FileSystem Next (TypeScript)\nDESCRIPTION: Shows how to download a file from a remote URL and save it into a local directory using the 'File.downloadFileAsync' method. A destination directory is created, and the download's success and resulting URI are logged. Requires network access and appropriate permissions. Input is an HTTP URL; output includes a boolean for existence and a URI string for the downloaded path.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/filesystem-next.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { File, Paths } from 'expo-file-system/next';\n\nconst url = 'https://pdfobject.com/pdf/sample.pdf';\nconst destination = new Directory(Paths.cache, 'pdfs');\ntry {\n  destination.create();\n  const output = await File.downloadFileAsync(url, destination);\n  console.log(output.exists); // true\n  console.log(output.uri); // path to the downloaded file, e.g. '${cacheDirectory}/pdfs/sample.pdf'\n} catch (error) {\n  console.error(error);\n}\n```\n\n----------------------------------------\n\nTITLE: Using useSafeAreaInsets Hook in React Native\nDESCRIPTION: Shows how to use the useSafeAreaInsets hook to get direct access to safe area inset values for manual padding application.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/safe-area-context.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\n\nfunction HookComponent() {\n  const insets = useSafeAreaInsets();\n\n  return <View style={{ paddingTop: insets.top }} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Hardcoded React Native Path Reference in Android build.gradle\nDESCRIPTION: Traditional hardcoded path to react.gradle in Android build files. This approach can fail in monorepos due to package hoisting as it doesn't use Node module resolution.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/monorepos.mdx#2025-04-22_snippet_9\n\nLANGUAGE: groovy\nCODE:\n```\napply from: \"../../node_modules/react-native/react.gradle\"\n```\n\n----------------------------------------\n\nTITLE: Configuring EAS.json with Platform-Specific Custom Build Configs\nDESCRIPTION: This snippet demonstrates how to configure eas.json to use different custom build configuration files for iOS and Android platforms. The 'test' profile uses 'hello-ios.yml' for iOS builds and 'hello-android.yml' for Android builds.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/custom-builds/get-started.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    /* @hide ... */ /* @end */\n    \"test\": {\n      \"ios\": {\n        \"config\": \"hello-ios.yml\",\n      },\n      \"android\": {\n        \"config\": \"hello-android.yml\",\n      }\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: iOS Info.plist Modification Plugin\nDESCRIPTION: TypeScript implementation of a config plugin that modifies Info.plist to add a GADApplicationIdentifier.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/config-plugins/development-and-debugging.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ConfigPlugin, withInfoPlist } from 'expo/config-plugins';\n\nexport const withCustomConfig: ConfigPlugin<string> = (config, id) => {\n  return withInfoPlist(config, config => {\n    config.modResults.GADApplicationIdentifier = id;\n    return config;\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Update Metadata to Sentry Error Reports\nDESCRIPTION: JavaScript code to configure Sentry with information about your EAS update. This allows you to see which updates are associated with specific errors in the Sentry dashboard.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/using-sentry.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Sentry from '@sentry/react-native';\nimport * as Updates from 'expo-updates';\n\nconst manifest = Updates.manifest;\nconst metadata = 'metadata' in manifest ? manifest.metadata : undefined;\nconst extra = 'extra' in manifest ? manifest.extra : undefined;\nconst updateGroup = metadata && 'updateGroup' in metadata ? metadata.updateGroup : undefined;\n\nSentry.init({\n  // dsn, release, dist, etc...\n});\n\nconst scope = Sentry.getGlobalScope();\n\nscope.setTag('expo-update-id', Updates.updateId);\nscope.setTag('expo-is-embedded-update', Updates.isEmbeddedLaunch);\n\nif (typeof updateGroup === 'string') {\n  scope.setTag('expo-update-group-id', updateGroup);\n\n  const owner = extra?.expoClient?.owner ?? '[account]';\n  const slug = extra?.expoClient?.slug ?? '[project]';\n  scope.setTag(\n    'expo-update-debug-url',\n    `https://expo.dev/accounts/${owner}/projects/${slug}/updates/${updateGroup}`\n  );\n} else if (Updates.isEmbeddedLaunch) {\n  // This will be `true` if the update is the one embedded in the build, and not one downloaded from the updates server.\n  scope.setTag('expo-update-debug-url', 'not applicable for embedded updates');\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables in .env File\nDESCRIPTION: Example of setting up environment variables in a .env file using the EXPO_PUBLIC_ prefix for API configuration.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/environment-variables.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nEXPO_PUBLIC_API_URL=https://staging.example.com\nEXPO_PUBLIC_API_KEY=abc123\n```\n\n----------------------------------------\n\nTITLE: Setting Runtime Version Policy in app.json\nDESCRIPTION: Configuration in app.json to set the runtime version policy to 'appVersion', ensuring the runtime version matches the app version for each release.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/deployment.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"runtimeVersion\": {\n      \"policy\": \"appVersion\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Bottom Tab Navigator for Keyboard Handling\nDESCRIPTION: This snippet demonstrates how to configure the Bottom Tab Navigator to hide when the keyboard opens using the tabBarHideOnKeyboard option.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/keyboard-handling.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Tabs } from 'expo-router';\n\nexport default function TabLayout() {\n  return (\n    <Tabs\n      screenOptions={{\n        tabBarHideOnKeyboard: true,\n      }}>\n      <Tabs.Screen name=\"index\" />\n    </Tabs>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Registering ReactActivity Listener in Kotlin for Expo Custom Package\nDESCRIPTION: This Kotlin code snippet demonstrates how to register a ReactActivity listener in an Android native module. It creates a CustomPackage class that extends BasePackage and overrides the createReactActivityLifecycleListeners method.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/config-plugins/development-and-debugging.mdx#2025-04-22_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\npackage expo.modules.custom\n\nimport android.content.Context\nimport expo.modules.core.BasePackage\nimport expo.modules.core.interfaces.ReactActivityLifecycleListener\n\nclass CustomPackage : BasePackage() {\n  override fun createReactActivityLifecycleListeners(activityContext: Context): List<ReactActivityLifecycleListener> {\n    return listOf(CustomReactActivityLifecycleListener(activityContext))\n  }\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Configuration with Environment Variables in JavaScript\nDESCRIPTION: An example of using app.config.js for dynamic configuration. It demonstrates how to use environment variables and custom values in the configuration.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/workflow/configuration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst myValue = 'My App';\n\nmodule.exports = {\n  name: myValue,\n  version: process.env.MY_CUSTOM_PROJECT_VERSION || '1.0.0',\n  // All values in extra will be passed to your app.\n  extra: {\n    fact: 'kittens are cool',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using Prepared Statements in SQLite\nDESCRIPTION: Implementation of prepared statements for optimized query execution with parameter binding and result handling\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/sqlite.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst statement = await db.prepareAsync(\n  'INSERT INTO test (value, intValue) VALUES ($value, $intValue)'\n);\ntry {\n  let result = await statement.executeAsync({ $value: 'bbb', $intValue: 101 });\n  console.log('bbb and 101:', result.lastInsertRowId, result.changes);\n\n  result = await statement.executeAsync({ $value: 'ccc', $intValue: 102 });\n  console.log('ccc and 102:', result.lastInsertRowId, result.changes);\n\n  result = await statement.executeAsync({ $value: 'ddd', $intValue: 103 });\n  console.log('ddd and 103:', result.lastInsertRowId, result.changes);\n} finally {\n  await statement.finalizeAsync();\n}\n```\n\n----------------------------------------\n\nTITLE: Custom iOS Gymfile Template Configuration\nDESCRIPTION: Advanced example of generating Gymfile with custom template and extra variables.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_43\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: Generate Gymfile template\n  steps:\n    - eas/checkout\n    - eas/install_node_modules\n    - eas/resolve_apple_team_id_from_credentials:\n        id: resolve_apple_team_id_from_credentials\n    - eas/prebuild:\n        inputs:\n          clean: false\n          apple_team_id: ${ steps.resolve_apple_team_id_from_credentials.apple_team_id }\n    - eas/configure_eas_update\n    - eas/configure_ios_credentials\n    # @info #\n    - eas/generate_gymfile_from_template:\n        inputs:\n          credentials: ${ eas.job.secrets.buildCredentials }\n          extra:\n            MY_VALUE: my value\n          template: |\n            suppress_xcode_output(true)\n            clean(<%- CLEAN %>)\n\n            scheme(\"<%- SCHEME %>\")\n            <% if (BUILD_CONFIGURATION) { %>\n            configuration(\"<%- BUILD_CONFIGURATION %>\")\n            <% } %>\n\n            export_options({\n            method: \"<%- EXPORT_METHOD %>\",\n            provisioningProfiles: {<% _.forEach(PROFILES, function(profile) { %>\n                \"<%- profile.BUNDLE_ID %>\" => \"<%- profile.UUID %>\",<% }); %>\n            }<% if (ICLOUD_CONTAINER_ENVIRONMENT) { %>,\n            iCloudContainerEnvironment: \"<%- ICLOUD_CONTAINER_ENVIRONMENT %>\"\n            <% } %>\n            })\n\n            export_xcargs \"OTHER_CODE_SIGN_FLAGS=\\\"--keychain <%- KEYCHAIN_PATH %>\\\"\"\n\n            disable_xcpretty(true)\n            buildlog_path(\"<%- LOGS_DIRECTORY %>\")\n\n            output_directory(\"<%- OUTPUT_DIRECTORY %>\")\n\n            sth_else(\"<%- MY_VALUE %>\")\n        # @end #\n```\n\n----------------------------------------\n\nTITLE: Enabling Metro Bundler for Web in Expo Config\nDESCRIPTION: Modifying the Expo configuration to enable Metro bundler for web projects.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/customizing-metro.mdx#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"web\": {\n      \"bundler\": \"metro\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Platform-Specific CSS Modules - Diff\nDESCRIPTION: This diff illustrates how to import platform-specific CSS modules in Expo by omitting the extension in the import. This enables different styles depending on the target platform (e.g., ios vs android). The change is to switch from importing './App.module.css' to './App.module', so that Expo automatically selects the appropriate file. Requires correct file naming and import paths.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/config/metro.mdx#2025-04-22_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\n// Importing `./App.module.ios.css`:\\n- import styles from './App.module.css';\\n+ import styles from './App.module';\n```\n\n----------------------------------------\n\nTITLE: Running Prebuild for Specific Platform in React Native\nDESCRIPTION: Use the --platform option to run prebuild for an individual platform (iOS in this example).\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/workflow/continuous-native-generation.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo prebuild --platform ios\n```\n\n----------------------------------------\n\nTITLE: Configuring EAS Submit in eas.json for Android and iOS\nDESCRIPTION: This snippet shows how to configure EAS Submit in eas.json for both Android and iOS platforms. It includes settings for the CLI version, and platform-specific configurations such as service account key path for Android and Apple ID, ASC App ID, and Apple Team ID for iOS.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/json.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"cli\": {\n    \"version\": \">= 0.34.0\"\n  },\n  \"submit\": {\n    \"production\": {\n      \"android\": {\n        \"serviceAccountKeyPath\": \"../path/to/api-xxx-yyy-zzz.json\",\n        \"track\": \"internal\"\n      },\n      \"ios\": {\n        \"appleId\": \"john@turtle.com\",\n        \"ascAppId\": \"1234567890\",\n        \"appleTeamId\": \"AB12XYZ34S\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Checkbox Component from expo-checkbox\nDESCRIPTION: This snippet shows how to import the Checkbox component from the expo-checkbox package. This import statement is typically used at the beginning of a file where the Checkbox component will be used.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/checkbox.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport Checkbox from 'expo-checkbox';\n```\n\n----------------------------------------\n\nTITLE: Basic TrackingTransparency Implementation in React Native\nDESCRIPTION: Complete React Native example showing how to request tracking permissions when the component mounts, and handle the permission status response appropriately.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/tracking-transparency.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEffect } from 'react';\nimport { Text, StyleSheet, View } from 'react-native';\nimport { requestTrackingPermissionsAsync } from 'expo-tracking-transparency';\n\nexport default function App() {\n  useEffect(() => {\n    (async () => {\n      const { status } = await requestTrackingPermissionsAsync();\n      if (status === 'granted') {\n        console.log('Yay! I have user permission to track data');\n      }\n    })();\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <Text>Tracking Transparency Module Example</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Adding ESLint Script to Package.json\nDESCRIPTION: Package.json configuration to add an ESLint script command for running linting tasks.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/using-eslint.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"lint\": \"expo lint\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sharing Environment Variables in EAS Build YAML Configuration\nDESCRIPTION: Demonstrates how to share environment variables between steps using the 'set-env' executable in an EAS Build custom configuration.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: Shared environment variable example\n  steps:\n    - run:\n        name: Set environment variables\n        command: |\n          set -x\n\n          ENV_TEST_LOCAL=\"present-only-in-current-shell-context\"\n          export ENV_TEST_LOCAL_EXPORT=\"present-in-current-step\"\n          set-env ENV_TEST_SET_ENV \"present-in-following-steps\"\n\n          echo \"ENV_TEST_LOCAL: $ENV_TEST_LOCAL\"\n          echo \"ENV_TEST_LOCAL_EXPORT: $ENV_TEST_LOCAL_EXPORT\"\n          echo \"ENV_TEST_SET_ENV: $ENV_TEST_SET_ENV\"\n\n          env | grep ENV_TEST_\n    - run:\n        name: Check variables values in next step\n        command: |\n          set -x\n\n          echo \"ENV_TEST_LOCAL: $ENV_TEST_LOCAL\"\n          echo \"ENV_TEST_LOCAL_EXPORT: $ENV_TEST_LOCAL_EXPORT\"\n          echo \"ENV_TEST_SET_ENV: $ENV_TEST_SET_ENV\"\n\n          env | grep ENV_TEST_\n```\n\n----------------------------------------\n\nTITLE: Registering Service Worker for Static/Server Rendered Expo PWA\nDESCRIPTION: Demonstrates how to register a service worker for static or server-rendered Expo Progressive Web Apps. This is done by adding a script to the app/+html.tsx file that registers the service worker on page load.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/progressive-web-apps.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ScrollViewStyleReset } from 'expo-router/html';\nimport type { PropsWithChildren } from 'react';\n\nexport default function Root({ children }: PropsWithChildren) {\n  return (\n    <html lang=\"en\">\n      <head>\n        <meta charSet=\"utf-8\" />\n        <meta httpEquiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\" />\n\n        {/* Bootstrap the service worker. */}\n        <script dangerouslySetInnerHTML={{ __html: sw }} />\n\n        <ScrollViewStyleReset />\n\n        {/* Add any additional <head> elements that you want globally available on web... */}\n      </head>\n      <body>{children}</body>\n    </html>\n  );\n}\n\nconst sw = `\nif ('serviceWorker' in navigator) {\n    window.addEventListener('load', () => {\n        navigator.serviceWorker.register('/sw.js').then(registration => {\n            console.log('Service Worker registered with scope:', registration.scope);\n        }).catch(error => {\n            console.error('Service Worker registration failed:', error);\n        });\n    });\n}\n`;\n```\n\n----------------------------------------\n\nTITLE: Importing Accelerometer API from Expo Sensors (JavaScript)\nDESCRIPTION: This snippet shows how to import the Accelerometer module from expo-sensors for use in JavaScript or React Native projects. It is a prerequisite for accessing any accelerometer functionality provided by expo-sensors. No input parameters; output is the imported Accelerometer namespace. Requires expo-sensors to be installed in the project.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/accelerometer.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { Accelerometer } from 'expo-sensors';\n```\n\n----------------------------------------\n\nTITLE: Creating a Bare React Native Project with Expo (Shell)\nDESCRIPTION: Illustrates how to create a new React Native project named 'my-app' using the `create-expo-app` command-line tool with the `bare-minimum` template. This template sets up a minimal React Native project configured with basic support for Expo SDK packages.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/index.mdx#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# Create a project named my-app\n$ npx create-expo-app my-app --template bare-minimum\n```\n\n----------------------------------------\n\nTITLE: Importing Development Client API in JavaScript\nDESCRIPTION: This JavaScript snippet shows how to import all components of the 'expo-dev-client' API. This import is essential for utilizing the development tools provided by the package within an Expo project.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/dev-client.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as DevClient from 'expo-dev-client';\n```\n\n----------------------------------------\n\nTITLE: Importing Tab Components from expo-router/ui\nDESCRIPTION: Example showing how to import the necessary tab components from the expo-router/ui submodule. These components (Tabs, TabList, TabTrigger, TabSlot) are used to create custom tab-based navigation layouts.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/router-ui.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { Tabs, TabList, TabTrigger, TabSlot } from 'expo-router/ui';\n```\n\n----------------------------------------\n\nTITLE: Looping Media a Specific Number of Times in JavaScript\nDESCRIPTION: JavaScript example demonstrating how to make a media item loop exactly N times (20 in this case). It uses the `_onPlaybackStatusUpdate` callback to track the number of times the media has finished playing (`didJustFinish`). When the desired number of loops is reached, `setIsLooping(false)` is called to stop further looping. Initially, looping is enabled via `playbackObject.setIsLooping(true)`.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/av.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nconst N = 20;\n/* @hide ... */ /* @end */\n\n_onPlaybackStatusUpdate = playbackStatus => {\n  if (playbackStatus.didJustFinish) {\n    if (this.state.numberOfLoops == N - 1) {\n      playbackObject.setIsLooping(false);\n    }\n    this.setState({ numberOfLoops: this.state.numberOfLoops + 1 });\n  }\n};\n\n/* @hide ... */ /* @end */\nthis.setState({ numberOfLoops: 0 });\n// Load the playbackObject and obtain the reference.\nplaybackObject.setOnPlaybackStatusUpdate(this._onPlaybackStatusUpdate);\nplaybackObject.setIsLooping(true);\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-localization in app.json\nDESCRIPTION: This JSON snippet demonstrates how to configure the expo-localization plugin in the app.json file. Including the 'expo-localization' plugin in the configurations is necessary to enable localization features. Ensure that your app is set up to build with EAS Build or by using `npx expo run:[android|ios]`.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/localization.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\"expo-localization\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Notification Sounds with Expo Notifications\nDESCRIPTION: This JSON configuration snippet demonstrates how to set up custom notification sounds using the expo-notifications plugin. The sounds are specified in the app.json file under the plugins section, enabling custom sounds for notifications. Prerequisites include adding the expo-notifications plugin and specifying local paths to sound files.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/notifications.mdx#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-notifications\",\n        {\n          \"sounds\": [\"local/path/to/mySoundFile.wav\"]\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Video Components in Expo\nDESCRIPTION: Shows the basic imports needed to use VideoView and useVideoPlayer hook from the expo-video package.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/video.mdx#2025-04-22_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nimport { VideoView, useVideoPlayer } from 'expo-video';\n```\n\n----------------------------------------\n\nTITLE: Implementing Double Tap Gesture Handler\nDESCRIPTION: Creates a double tap gesture handler that scales the emoji sticker up and down when double tapped.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/gestures.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst doubleTap = Gesture.Tap()\n  .numberOfTaps(2)\n  .onStart(() => {\n    if (scaleImage.value !== imageSize * 2) {\n      scaleImage.value = scaleImage.value * 2;\n    } else {\n      scaleImage.value = Math.round(scaleImage.value / 2);\n    }\n  });\n```\n\n----------------------------------------\n\nTITLE: Sending Push Notification via Curl in Shell\nDESCRIPTION: This command sends a test push notification using the Expo push notification service API. It takes an Expo Push Token as the target and sends a simple notification with title 'hello' and body 'world'.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/push-notifications/faq.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl -H \"Content-Type: application/json\" -X POST \"https://exp.host/--/api/v2/push/send\" -d '{\n  \"to\": \"ExponentPushToken[xxxxxxxxxxxxxxxxxxxxxx]\",\n  \"title\":\"hello\",\n  \"body\": \"world\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Background Fetch for Android Testing\nDESCRIPTION: Code snippet demonstrating how to register a background fetch task with a minimal interval for testing purposes on Android devices. Sets the task to fire just one minute after the app is backgrounded.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/background-fetch.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nasync function registerBackgroundFetchAsync() {\n  return BackgroundFetch.registerTaskAsync(BACKGROUND_FETCH_TASK, {\n    minimumInterval: 1 * 60, // task will fire 1 minute after app is backgrounded\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: iOS Simulator Development Configuration\nDESCRIPTION: Configuration for development builds targeting iOS Simulator with development client and internal distribution enabled.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/build/eas-json.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"development\": {\n      \"developmentClient\": true,\n      \"distribution\": \"internal\",\n      \"ios\": {\n        \"simulator\": true\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom iOS Version Configuration in EAS Build\nDESCRIPTION: YAML configuration for setting custom iOS build number and app version. Demonstrates how to specify custom version parameters.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_36\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: Configure iOS version\n  steps:\n    - eas/checkout\n    - eas/install_node_modules\n    - eas/resolve_apple_team_id_from_credentials:\n        id: resolve_apple_team_id_from_credentials\n    - eas/prebuild:\n        inputs:\n          clean: false\n          apple_team_id: ${ steps.resolve_apple_team_id_from_credentials.apple_team_id }\n    - eas/configure_eas_update\n    - eas/configure_ios_credentials\n    - eas/configure_ios_version:\n        inputs:\n          build_number: '123'\n          app_version: '1.0.0'\n```\n\n----------------------------------------\n\nTITLE: Adding iOS Permission Descriptions in Info.plist\nDESCRIPTION: Adds the required `NSCameraUsageDescription` and `NSMicrophoneUsageDescription` keys and corresponding string values to the iOS project's `Info.plist` file. These strings are displayed to the user when the app requests camera and microphone permissions, respectively. This configuration is needed for projects not using Continuous Native Generation (CNG).\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/camera-next.mdx#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n```xml\n<key>NSCameraUsageDescription</key>\n<string>Allow $(PRODUCT_NAME) to access your camera</string>\n<key>NSMicrophoneUsageDescription</key>\n<string>Allow $(PRODUCT_NAME) to access your microphone</string>\n```\n```\n\n----------------------------------------\n\nTITLE: Installing V8 Engine Support for React Native\nDESCRIPTION: This command installs the necessary packages to add V8 runtime support for React Native in an Expo project.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/configuring-js-engines.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo install react-native-v8 v8-android-jit\n```\n\n----------------------------------------\n\nTITLE: React Native Version Mismatch Error Message\nDESCRIPTION: Example error message showing version mismatch between JavaScript and Native implementations of React Native\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/troubleshooting/react-native-version-mismatch.mdx#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nReact Native version mismatch.\n\nJavaScript version: X.XX.X\nNative version: X.XX.X\n\nMake sure you have rebuilt the native code...\n```\n\n----------------------------------------\n\nTITLE: Using Imperative KeepAwake Functions in React Native\nDESCRIPTION: This example shows how to use the activateKeepAwake and deactivateKeepAwake functions to programmatically control screen sleep behavior. These functions can be called in response to user actions or other events.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/keep-awake.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { activateKeepAwake, deactivateKeepAwake } from 'expo-keep-awake';\nimport React from 'react';\nimport { Button, View } from 'react-native';\n\nexport default class KeepAwakeExample extends React.Component {\n  render() {\n    return (\n      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n        <Button onPress={this._activate} title=\"Activate\" />\n        <Button onPress={this._deactivate} title=\"Deactivate\" />\n      </View>\n    );\n  }\n\n  _activate = () => {\n    /* @info Screen will remain on after called until <strong>deactivateKeepAwake()</strong> is called. */ activateKeepAwake(); /* @end */\n    alert('Activated!');\n  };\n\n  _deactivate = () => {\n    /* @info Deactivates KeepAwake, or does nothing if it was never activated. */ deactivateKeepAwake(); /* @end */\n    alert('Deactivated!');\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Android Gradle Build Flavors\nDESCRIPTION: Android build.gradle configuration for multiple build variants with unique application IDs.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/build-reference/variants.mdx#2025-04-22_snippet_6\n\nLANGUAGE: groovy\nCODE:\n```\nandroid {\n    flavorDimensions \"env\"\n    productFlavors {\n        production {\n            dimension \"env\"\n            applicationId 'com.myapp'\n        }\n        development {\n            dimension \"env\"\n            applicationId 'com.myapp.dev'\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Xcode Script for Entry File Resolution (Shell)\nDESCRIPTION: This shell script snippet is intended to replace the default 'Bundle React Native code and images' step in 'project.pbxproj'. It dynamically determines the entry JS file at build time using Metro resolution and environment files, setting variables like PROJECT_ROOT and ENTRY_FILE. The script ensures compatibility with Expo CLI workflows and supports various build configurations, including Debug mode. Requires Node.js, Expo CLI, and proper environment files to be in place.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/config/metro.mdx#2025-04-22_snippet_13\n\nLANGUAGE: Shell\nCODE:\n```\nshellScript = \"if [[ -f \\\"$PODS_ROOT/../.xcode.env\\\" ]]; then\\n  source \\\"$PODS_ROOT/../.xcode.env\\\"\\nfi\\nif [[ -f \\\"$PODS_ROOT/../.xcode.env.local\\\" ]]; then\\n  source \\\"$PODS_ROOT/../.xcode.env.local\\\"\\nfi\\n\\n# The project root by default is one level up from the ios directory\\nexport PROJECT_ROOT=\\\"$PROJECT_DIR\\\"/..\\n\\nif [[ \\\"$CONFIGURATION\\\" = *Debug* ]]; then\\n  export SKIP_BUNDLING=1\\nfi\\nif [[ -z \\\"$ENTRY_FILE\\\" ]]; then\\n  # Set the entry JS file using the bundler's entry resolution.\\n  export ENTRY_FILE=\\\"$(\\\"$NODE_BINARY\\\" -e \\\"require('expo/scripts/resolveAppEntry')\\\" \\\"$PROJECT_ROOT\\\" ios absolute | tail -n 1)\\\"\\nfi\\n\\nif [[ -z \\\"$CLI_PATH\\\" ]]; then\\n  # Use Expo CLI\\n  export CLI_PATH=\\\"$(\\\"$NODE_BINARY\\\" --print \\\"require.resolve('@expo/cli')\\\")\\\"\\nfi\\nif [[ -z \\\"$BUNDLE_COMMAND\\\" ]]; then\\n  # Default Expo CLI command for bundling\\n  export BUNDLE_COMMAND=\\\"export:embed\\\"\\nfi\\n\\n`\\\"$NODE_BINARY\\\" --print \\\"require('path').dirname(require.resolve('react-native/package.json')) + '/scripts/react-native-xcode.sh'\\\"`\\n\\n\";\n```\n\n----------------------------------------\n\nTITLE: Using SafeAreaView Component\nDESCRIPTION: Example of using SafeAreaView component to automatically handle safe area insets.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/safe-area-context.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SafeAreaView } from 'react-native-safe-area-context';\n\nfunction SomeComponent() {\n  return (\n    <SafeAreaView>\n      <View />\n    </SafeAreaView>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Current Location with Expo Location in React Native (TSX)\nDESCRIPTION: Provides a complete React Native functional component example using TypeScript. It demonstrates requesting foreground location permissions using `Location.requestForegroundPermissionsAsync` and fetching the current geographical position with `Location.getCurrentPositionAsync`. The component uses `useState` and `useEffect` hooks to manage location state and potential errors, displaying the results or error messages. It also includes a check to handle limitations when running on an Android emulator via Snack.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/location.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { Platform, Text, View, StyleSheet } from 'react-native';\n/* @hide */\nimport * as Device from 'expo-device';\n/* @end */\nimport * as Location from 'expo-location';\n\nexport default function App() {\n  const [location, setLocation] = useState<Location.LocationObject | null>(null);\n  const [errorMsg, setErrorMsg] = useState<string | null>(null);\n\n  useEffect(() => {\n    async function getCurrentLocation() {\n      /* @hide */\n      if (Platform.OS === 'android' && !Device.isDevice) {\n        setErrorMsg(\n          'Oops, this will not work on Snack in an Android Emulator. Try it on your device!'\n        );\n        return;\n      }\n      /* @end */\n      let { status } = await Location.requestForegroundPermissionsAsync();\n      if (status !== 'granted') {\n        setErrorMsg('Permission to access location was denied');\n        return;\n      }\n\n      let location = await Location.getCurrentPositionAsync({});\n      setLocation(location);\n    }\n\n    getCurrentLocation();\n  }, []);\n\n  let text = 'Waiting...';\n  if (errorMsg) {\n    text = errorMsg;\n  } else if (location) {\n    text = JSON.stringify(location);\n  }\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.paragraph}>{text}</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 20,\n  },\n  paragraph: {\n    fontSize: 18,\n    textAlign: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing expo-print in bare React Native projects\nDESCRIPTION: This command installs the expo-print package using npx and expo CLI. It's used for adding printing functionality to bare React Native projects.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-print/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-print\n```\n\n----------------------------------------\n\nTITLE: Creating an ImageViewer Component with Support for Selected Images\nDESCRIPTION: This component handles displaying either a default placeholder image or a selected image from the device gallery. It accepts an optional selectedImage prop containing the URI of the user-selected image.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/image-picker.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StyleSheet } from 'react-native';\nimport { Image, type ImageSource } from 'expo-image';\n\ntype Props = {\n  imgSource: ImageSource;\n  /* @tutinfo */\n  selectedImage?: string;\n  /* @end */\n};\n\nexport default function ImageViewer({ imgSource, /* @tutinfo Pass the <CODE>selectedImage</CODE> prop.*/selectedImage/* @end */ }: Props) {\n  /* @tutinfo If the selected image is not null, show the image from the device, otherwise, show the placeholder image. */\n  const imageSource = selectedImage ? { uri: selectedImage } : imgSource;\n  /* @end */\n\n  /* @tutinfo <CODE>imgSource</CODE> replaced by <CODE>imageSource</CODE>. */\n  return <Image source={imageSource} style={styles.image} />;\n  /* @end */\n}\n\nconst styles = StyleSheet.create({\n  image: {\n    width: 320,\n    height: 440,\n    borderRadius: 18,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Camera Preview in React Native using Expo Camera (Next)\nDESCRIPTION: A React Native functional component demonstrating the basic usage of `expo-camera/next`. It imports `CameraView` and the `useCameraPermissions` hook, checks for and requests camera permissions using the hook, displays the camera preview using the `CameraView` component, and includes a button (`TouchableOpacity`) to toggle between the front (`'front'`) and back (`'back'`) cameras using the `facing` prop and `useState`. Basic styling using `StyleSheet` is also included.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/camera-next.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx\nimport { CameraView, useCameraPermissions } from 'expo-camera/next';\nimport { useState } from 'react';\nimport { Button, StyleSheet, Text, TouchableOpacity, View } from 'react-native';\n\nexport default function App() {\n  const [facing, setFacing] = useState('back');\n  const [permission, requestPermission] = useCameraPermissions();\n\n  if (!permission) {\n    // Camera permissions are still loading\n    return <View />;\n  }\n\n  if (!permission.granted) {\n    // Camera permissions are not granted yet\n    return (\n      <View style={styles.container}>\n        <Text style={{ textAlign: 'center' }}>We need your permission to show the camera</Text>\n        <Button onPress={requestPermission} title=\"grant permission\" />\n      </View>\n    );\n  }\n\n  function toggleCameraFacing() {\n    setFacing(current => (current === 'back' ? 'front' : 'back'));\n  }\n\n  return (\n    <View style={styles.container}>\n      <CameraView style={styles.camera} facing={facing}>\n        <View style={styles.buttonContainer}>\n          <TouchableOpacity style={styles.button} onPress={toggleCameraFacing}>\n            <Text style={styles.text}>Flip Camera</Text>\n          </TouchableOpacity>\n        </View>\n      </CameraView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n  camera: {\n    flex: 1,\n  },\n  buttonContainer: {\n    flex: 1,\n    flexDirection: 'row',\n    backgroundColor: 'transparent',\n    margin: 64,\n  },\n  button: {\n    flex: 1,\n    alignSelf: 'flex-end',\n    alignItems: 'center',\n  },\n  text: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: 'white',\n  },\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Enabling TypeScript Typed Linting in .eslintrc.js (diff)\nDESCRIPTION: This diff illustrates the changes required in `.eslintrc.js` to enable optional TypeScript type-aware linting rules provided by `eslint-config-universe`. It adds `universe/shared/typescript-analysis` to the `extends` array and includes an `overrides` section to specify the `tsconfig.json` path for TypeScript files, enabling rules that require type information.\nSOURCE: https://github.com/expo/expo/blob/main/packages/eslint-config-universe/README.md#2025-04-22_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\nmodule.exports = {\n  extends: [\n    'universe',\n+   'universe/shared/typescript-analysis',\n  ],\n+ overrides: [\n+   {\n+     files: [\n+       '*.ts',\n+       '*.tsx',\n+       '*.d.ts'\n+     ],\n+     parserOptions: {\n+       project: './tsconfig.json'\n+     },\n+   },\n+ ],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Entry Point for Expo Router\nDESCRIPTION: Sets the main entry point to expo-router/entry in package.json to enable Expo Router functionality.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/installation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"main\": \"expo-router/entry\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js with SWC Transforms\nDESCRIPTION: Configuration to force Next.js to use SWC transforms.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/using-nextjs.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  experimental: {\n    forceSwcTransforms: true,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Running Expo Doctor for Dependency Validation\nDESCRIPTION: This command runs Expo Doctor to check dependencies against the data in React Native Directory for New Architecture compatibility.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/new-architecture.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo-doctor@latest\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Firebase core module in Expo project\nDESCRIPTION: Command to install the @react-native-firebase/app module, which provides core functionality for all other React Native Firebase modules and adds custom native code using a config plugin.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/using-firebase.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo install @react-native-firebase/app\n```\n\n----------------------------------------\n\nTITLE: Adding Location Permission Keys to iOS Info.plist\nDESCRIPTION: Configuration for iOS Info.plist showing how to add required NSLocation permission keys with appropriate usage descriptions.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/location.mdx#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<key>NSLocationAlwaysAndWhenInUseUsageDescription</key>\n<string>Allow $(PRODUCT_NAME) to use your location</string>\n<key>NSLocationAlwaysUsageDescription</key>\n<string>Allow $(PRODUCT_NAME) to use your location</string>\n<key>NSLocationWhenInUseUsageDescription</key>\n<string>Allow $(PRODUCT_NAME) to use your location</string>\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Credentials in EAS Build\nDESCRIPTION: YAML configuration for setting up iOS credentials and provisioning profiles. Includes team ID resolution and prebuild configuration with specific Apple team ID.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_32\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: iOS credentials\n  steps:\n    - eas/checkout\n    - eas/install_node_modules\n    - eas/resolve_apple_team_id_from_credentials:\n        id: resolve_apple_team_id_from_credentials\n    - eas/prebuild:\n        inputs:\n          clean: false\n          apple_team_id: ${ steps.resolve_apple_team_id_from_credentials.apple_team_id }\n    - eas/configure_ios_credentials\n```\n\n----------------------------------------\n\nTITLE: Configuring Android WebView Module\nDESCRIPTION: Module definition for Android WebView that registers the onLoad event and url property handler.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/native-view-tutorial.mdx#2025-04-22_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\npackage expo.modules.webview\n\nimport expo.modules.kotlin.modules.Module\nimport expo.modules.kotlin.modules.ModuleDefinition\nimport java.net.URL\n\nclass ExpoWebViewModule : Module() {\n  override fun definition() = ModuleDefinition {\n    Name(\"ExpoWebView\")\n\n    View(ExpoWebView::class) {\n      Events(\"onLoad\")\n\n      Prop(\"url\") { view: ExpoWebView, url: URL? ->\n        view.webView.loadUrl(url.toString())\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing DeviceMotion from Expo Sensors\nDESCRIPTION: This JavaScript snippet demonstrates how to import the `DeviceMotion` module from `expo-sensors`. It is necessary to access and utilize device motion data within a React Native or Expo application.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/devicemotion.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DeviceMotion } from 'expo-sensors';\n```\n\n----------------------------------------\n\nTITLE: Looping media playback in expo-av\nDESCRIPTION: Example of looping media playback exactly 20 times using setOnPlaybackStatusUpdate. Requires playback object control setup and state management.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/av.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst N = 20;\n\n_onPlaybackStatusUpdate = playbackStatus => {\n  if (playbackStatus.didJustFinish) {\n    if (this.state.numberOfLoops == N - 1) {\n      playbackObject.setIsLooping(false);\n    }\n    this.setState({ numberOfLoops: this.state.numberOfLoops + 1 });\n  }\n};\n\nthis.setState({ numberOfLoops: 0 });\nplaybackObject.setOnPlaybackStatusUpdate(this._onPlaybackStatusUpdate);\nplaybackObject.setIsLooping(true);\n```\n\n----------------------------------------\n\nTITLE: Managing Local GIF Caches with Expo FileSystem (TypeScript)\nDESCRIPTION: Provides TypeScript functions for managing a local cache of GIF files using `expo-file-system`. It includes functions to ensure the cache directory exists (`ensureDirExists`), download multiple GIFs (`addMultipleGifs`), retrieve a single GIF (downloading if necessary, `getSingleGif`), get a shareable content URI (`getGifContentUri`), and delete the entire cache directory (`deleteAllGifs`). It utilizes `FileSystem.cacheDirectory` for storage.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/filesystem.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as FileSystem from 'expo-file-system';\n\nconst gifDir = FileSystem.cacheDirectory + 'giphy/';\nconst gifFileUri = (gifId: string) => gifDir + `gif_${gifId}_200.gif`;\nconst gifUrl = (gifId: string) => `https://media1.giphy.com/media/${gifId}/200.gif`;\n\n// Checks if gif directory exists. If not, creates it\nasync function ensureDirExists() {\n  const dirInfo = await FileSystem.getInfoAsync(gifDir);\n  if (!dirInfo.exists) {\n    console.log(\"Gif directory doesn't exist, creating…\");\n    await FileSystem.makeDirectoryAsync(gifDir, { intermediates: true });\n  }\n}\n\n// Downloads all gifs specified as array of IDs\nexport async function addMultipleGifs(gifIds: string[]) {\n  try {\n    await ensureDirExists();\n\n    console.log('Downloading', gifIds.length, 'gif files…');\n    await Promise.all(gifIds.map(id => FileSystem.downloadAsync(gifUrl(id), gifFileUri(id))));\n  } catch (e) {\n    console.error(\"Couldn't download gif files:\", e);\n  }\n}\n\n// Returns URI to our local gif file\n// If our gif doesn't exist locally, it downloads it\nexport async function getSingleGif(gifId: string) {\n  await ensureDirExists();\n\n  const fileUri = gifFileUri(gifId);\n  const fileInfo = await FileSystem.getInfoAsync(fileUri);\n\n  if (!fileInfo.exists) {\n    console.log(\"Gif isn't cached locally. Downloading…\");\n    await FileSystem.downloadAsync(gifUrl(gifId), fileUri);\n  }\n\n  return fileUri;\n}\n\n// Exports shareable URI - it can be shared outside your app\nexport async function getGifContentUri(gifId: string) {\n  return FileSystem.getContentUriAsync(await getSingleGif(gifId));\n}\n\n// Deletes whole giphy directory with all its content\nexport async function deleteAllGifs() {\n  console.log('Deleting all GIF files…');\n  await FileSystem.deleteAsync(gifDir);\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Battery Level Monitoring with React Hooks in JSX\nDESCRIPTION: A simple React component that uses the useBatteryLevel hook from expo-battery to display the current battery level of the device. The component renders the battery level in a centered container.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/battery.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useBatteryLevel } from 'expo-battery';\nimport { StyleSheet, Text, View } from 'react-native';\n\nexport default function App() {\n  const batteryLevel = useBatteryLevel();\n\n  return (\n    <View style={styles.container}>\n      <Text>Current Battery Level: {batteryLevel}</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: 15,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Over-the-Air Updates with EAS CLI\nDESCRIPTION: Command to set up and configure over-the-air updates for an Expo application using the EAS CLI. This is a prerequisite before sending any updates to your app.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/deploy/send-over-the-air-updates.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ eas update:configure\n```\n\n----------------------------------------\n\nTITLE: Implementing Enum Types in iOS/Android\nDESCRIPTION: Example of creating an enumerable type for file encodings that can be used in records and function arguments.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/module-api.mdx#2025-04-22_snippet_26\n\nLANGUAGE: swift\nCODE:\n```\nenum FileEncoding: String, Enumerable {\n  case utf8\n  case base64\n}\n\nstruct FileReadOptions: Record {\n  @Field\n  var encoding: FileEncoding = .utf8\n  /* @hide ... */ /* @end */\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nenum class FileEncoding(val value: String) : Enumerable {\n  utf8(\"utf8\"),\n  base64(\"base64\")\n}\n\nclass FileReadOptions : Record {\n  @Field\n  val encoding: FileEncoding = FileEncoding.utf8\n  /* @hide ... */ /* @end */\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Static Property Types for Expo Plugins\nDESCRIPTION: Type definitions for static properties used in Expo config plugins. These types ensure properties are serializable to JSON and maintain compatibility with the app manifest system.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/config-plugins/development-and-debugging.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ntype StaticValue = boolean | number | string | null | StaticArray | StaticObject;\n\ntype StaticArray = StaticValue[];\n\ninterface StaticObject {\n  [key: string]: StaticValue | undefined;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Expo Module in Kotlin\nDESCRIPTION: This snippet shows how to create a basic Expo module in Kotlin. It defines a 'MyModule' class that extends the 'Module' class and includes a 'hello' function that takes a name parameter and returns a greeting.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/module-api.mdx#2025-04-22_snippet_35\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyModule : Module() {\n  override fun definition() = ModuleDefinition {\n    Name(\"MyFirstExpoModule\")\n\n    Function(\"hello\") { name: String ->\n      return \"Hello $name!\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading Files with Progress Tracking in JavaScript\nDESCRIPTION: Demonstrates how to download files with progress tracking, pause/resume downloads, and persist download state across app restarts using FileSystem.DownloadResumable and AsyncStorage.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/filesystem.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst callback = downloadProgress => {\n  const progress = downloadProgress.totalBytesWritten / downloadProgress.totalBytesExpectedToWrite;\n  this.setState({\n    downloadProgress: progress,\n  });\n};\n\nconst downloadResumable = FileSystem.createDownloadResumable(\n  'http://techslides.com/demos/sample-videos/small.mp4',\n  FileSystem.documentDirectory + 'small.mp4',\n  {},\n  callback\n);\n\ntry {\n  const { uri } = await downloadResumable.downloadAsync();\n  console.log('Finished downloading to ', uri);\n} catch (e) {\n  console.error(e);\n}\n\ntry {\n  await downloadResumable.pauseAsync();\n  console.log('Paused download operation, saving for future retrieval');\n  AsyncStorage.setItem('pausedDownload', JSON.stringify(downloadResumable.savable()));\n} catch (e) {\n  console.error(e);\n}\n\ntry {\n  const { uri } = await downloadResumable.resumeAsync();\n  console.log('Finished downloading to ', uri);\n} catch (e) {\n  console.error(e);\n}\n\n//To resume a download across app restarts, assuming the DownloadResumable.savable() object was stored:\nconst downloadSnapshotJson = await AsyncStorage.getItem('pausedDownload');\nconst downloadSnapshot = JSON.parse(downloadSnapshotJson);\nconst downloadResumable = new FileSystem.DownloadResumable(\n  downloadSnapshot.url,\n  downloadSnapshot.fileUri,\n  downloadSnapshot.options,\n  callback,\n  downloadSnapshot.resumeData\n);\n\ntry {\n  const { uri } = await downloadResumable.resumeAsync();\n  console.log('Finished downloading to ', uri);\n} catch (e) {\n  console.error(e);\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Google Authentication Provider\nDESCRIPTION: Import statement for Google authentication provider from expo-auth-session, which provides platform-specific implementations for Google OAuth.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/auth-session.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as Google from 'expo-auth-session/providers/google';\n```\n\n----------------------------------------\n\nTITLE: Displaying Notifications with expo-notifications\nDESCRIPTION: A simple example showing how to set up a notification handler and schedule a notification to be displayed to the user. The handler configures the notification to show an alert, without playing a sound or setting a badge.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/notifications.mdx#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport * as Notifications from 'expo-notifications';\n\n// First, set the handler that will cause the notification\n// to show the alert\n\nNotifications.setNotificationHandler({\n  handleNotification: async () => ({\n    shouldShowAlert: true,\n    shouldPlaySound: false,\n    shouldSetBadge: false,\n  }),\n});\n\n// Second, call the method\n\nNotifications.scheduleNotificationAsync({\n  content: {\n    title: 'Look at that notification',\n    body: \"I'm so proud of myself!\",\n  },\n  trigger: null,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Manifest for READ_PHONE_STATE permission\nDESCRIPTION: This snippet shows how to add the READ_PHONE_STATE permission to the AndroidManifest.xml file for Android projects not using Continuous Native Generation.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/cellular.mdx#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"android.permission.READ_PHONE_STATE\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing SafeAreaProvider in Expo TypeScript\nDESCRIPTION: This code shows how to import and add SafeAreaProvider to the root component file (App.tsx) when using a different Expo template without Expo Router.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/user-interface/safe-areas.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\n\nexport default function App() {\n  return (\n    return <SafeAreaProvider>...</SafeAreaProvider>;\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Expo Contacts Module - JavaScript\nDESCRIPTION: Shows the basic import statement needed to use Expo Contacts functionalities in your JavaScript/TypeScript files. Required at the top of any file where you intend to call contacts-related API methods. No configuration is necessary besides having expo-contacts installed.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/contacts.mdx#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport * as Contacts from 'expo-contacts';\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring AppDelegate for Expo Updates in iOS\nDESCRIPTION: Implementation of AppDelegate that extends EXAppDelegateWrapper to handle Expo updates and React Native initialization. Includes bundle URL management, updates controller integration, and application lifecycle handling.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/integration-in-existing-native-apps.mdx#2025-04-22_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nimport Expo\nimport EXUpdates\nimport React\nimport UIKit\n\n@UIApplicationMain\nclass AppDelegate: EXAppDelegateWrapper {\n  let bundledUrl = Bundle.main.url(forResource: \"main\", withExtension: \"jsbundle\")\n  var launchOptions: [UIApplication.LaunchOptionsKey: Any]?\n\n  public static func shared() -> AppDelegate {\n    guard let delegate = UIApplication.shared.delegate as? AppDelegate else {\n      fatalError(\"Could not get app delegate\")\n    }\n    return delegate\n  }\n\n  var updatesController: (any InternalAppControllerInterface)?\n\n  override func bundleURL() -> URL? {\n    if let updatesUrl = updatesController?.launchAssetUrl() {\n      return updatesUrl\n    }\n    return bundledUrl\n  }\n\n  private func initializeReactNativeAndUpdates(_ launchOptions: [UIApplication.LaunchOptionsKey: Any]?) {\n    self.launchOptions = launchOptions\n    self.moduleName = \"main\"\n    self.initialProps = [:]\n    self.reactNativeFactory = ExpoReactNativeFactory(delegate: self, reactDelegate: self.reactDelegate)\n    AppController.initializeWithoutStarting()\n  }\n\n  override func application(\n    _ application: UIApplication,\n    didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]? = nil\n  ) -> Bool {\n    initializeReactNativeAndUpdates(launchOptions)\n\n    self.window = UIWindow(frame: UIScreen.main.bounds)\n    let controller = CustomViewController()\n    controller.view.clipsToBounds = true\n    self.window?.rootViewController = controller\n    window?.makeKeyAndVisible()\n\n    return true\n  }\n\n  override func application(_ app: UIApplication, open url: URL, options: [UIApplication.OpenURLOptionsKey: Any] = [:]) -> Bool {\n    return super.application(app, open: url, options: options) ||\n      RCTLinkingManager.application(app, open: url, options: options)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring App Groups for Shared Databases in iOS\nDESCRIPTION: Shows how to configure App Groups in the app.json configuration file to enable database sharing between iOS apps or extensions that belong to the same App Group.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/sqlite.mdx#2025-04-22_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"ios\": {\n      \"bundleIdentifier\": \"com.myapp\",\n      \"entitlements\": {\n        \"com.apple.security.application-groups\": [\"group.com.myapp\"]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Compass App using Magnetometer in React Native with Expo\nDESCRIPTION: A complete example of a React Native component that uses the Magnetometer to display magnetic field values, with controls to start/stop monitoring and adjust update frequency. It demonstrates subscription management with useEffect and state management with useState.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/magnetometer.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View } from 'react-native';\nimport { Magnetometer } from 'expo-sensors';\n\nexport default function Compass() {\n  const [{ x, y, z }, setData] = useState({\n    x: 0,\n    y: 0,\n    z: 0,\n  });\n  const [subscription, setSubscription] = useState(null);\n\n  const _slow = () => Magnetometer.setUpdateInterval(1000);\n  const _fast = () => Magnetometer.setUpdateInterval(16);\n\n  const _subscribe = () => {\n    setSubscription(\n      Magnetometer.addListener(result => {\n        setData(result);\n      })\n    );\n  };\n\n  const _unsubscribe = () => {\n    subscription && subscription.remove();\n    setSubscription(null);\n  };\n\n  useEffect(() => {\n    _subscribe();\n    return () => _unsubscribe();\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.text}>Magnetometer:</Text>\n      <Text style={styles.text}>x: {x}</Text>\n      <Text style={styles.text}>y: {y}</Text>\n      <Text style={styles.text}>z: {z}</Text>\n      <View style={styles.buttonContainer}>\n        <TouchableOpacity onPress={subscription ? _unsubscribe : _subscribe} style={styles.button}>\n          <Text>{subscription ? 'On' : 'Off'}</Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={_slow} style={[styles.button, styles.middleButton]}>\n          <Text>Slow</Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={_fast} style={styles.button}>\n          <Text>Fast</Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    paddingHorizontal: 10,\n  },\n  text: {\n    textAlign: 'center',\n  },\n  buttonContainer: {\n    flexDirection: 'row',\n    alignItems: 'stretch',\n    marginTop: 15,\n  },\n  button: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#eee',\n    padding: 10,\n  },\n  middleButton: {\n    borderLeftWidth: 1,\n    borderRightWidth: 1,\n    borderColor: '#ccc',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Importing ExpoTrackingTransparency Module (TypeScript)\nDESCRIPTION: Shows how to import all exported members from the expo-tracking-transparency package as ExpoTrackingTransparency in a TypeScript or JavaScript project. This step is required to access the API, such as requestTrackingPermissionsAsync, in runtime code. The import should appear prior to any usage of the module's methods.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/tracking-transparency.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as ExpoTrackingTransparency from 'expo-tracking-transparency';\\n\n```\n\n----------------------------------------\n\nTITLE: Recording Audio with expo-av in React Native\nDESCRIPTION: This React Native component demonstrates audio recording using `expo-av`. It handles requesting recording permissions using `Audio.usePermissions`, sets the audio mode for iOS recording, starts recording with `Audio.Recording.createAsync`, stops and unloads the recording, resets the audio mode, and retrieves the URI of the recorded file. State manages the recording object and UI.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/audio.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx\nimport { useState } from 'react';\nimport { View, StyleSheet, Button } from 'react-native';\nimport { Audio } from 'expo-av';\n\nexport default function App() {\n  const [recording, setRecording] = useState();\n  const [permissionResponse, requestPermission] = Audio.usePermissions();\n\n  async function startRecording() {\n    try {\n      /* @info */ if (permissionResponse.status !== 'granted') {\n        console.log('Requesting permission..');\n        await requestPermission();\n      }\n      await Audio.setAudioModeAsync({\n        allowsRecordingIOS: true,\n        playsInSilentModeIOS: true,\n      }); /* @end */\n\n      console.log('Starting recording..');\n      /* @info */ const { recording } = await Audio.Recording.createAsync(\n        /* @end */ Audio.RecordingOptionsPresets.HIGH_QUALITY\n      );\n      setRecording(recording);\n      console.log('Recording started');\n    } catch (err) {\n      console.error('Failed to start recording', err);\n    }\n  }\n\n  async function stopRecording() {\n    console.log('Stopping recording..');\n    setRecording(undefined);\n    /* @info */ await recording.stopAndUnloadAsync(); /* @end */\n    /* @info iOS may reroute audio playback to the phone earpiece when recording is allowed, so disable once finished. */ await Audio.setAudioModeAsync(\n      {\n        allowsRecordingIOS: false,\n      }\n    ); /* @end */\n    /* @info */ const uri = recording.getURI(); /* @end */\n    console.log('Recording stopped and stored at', uri);\n  }\n\n  return (\n    <View style={styles.container}>\n      <Button\n        title={recording ? 'Stop Recording' : 'Start Recording'}\n        onPress={recording ? stopRecording : startRecording}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    backgroundColor: '#ecf0f1',\n    padding: 10,\n  },\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Initial EAS Hosting Deployment\nDESCRIPTION: This command deploys your web app to EAS Hosting for the first time. You'll be prompted to select a preview subdomain that will be used for your app's URL.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/deploy/web.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ eas deploy\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-contacts Permission in app.json (React Native, JSON)\nDESCRIPTION: Demonstrates configuring the expo-contacts plugin in your app.json file for a React Native project. This snippet sets the contactsPermission property, which defines the message shown to users when requesting access to contacts on iOS. Dependency: expo-contacts. Input includes the desired permission message; output is a correctly structured app.json. Only effective when using config plugins.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/contacts.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"expo\\\": {\\n    \\\"plugins\\\": [\\n      [\\n        \\\"expo-contacts\\\",\\n        {\\n          \\\"contactsPermission\\\": \\\"Allow $(PRODUCT_NAME) to access your contacts.\\\"\\n        }\\n      ]\\n    ]\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Bare Project Build Profile Configuration\nDESCRIPTION: Example configuration for a bare React Native project with multiple build profiles. Includes specific Android NDK settings and iOS build configurations across different environments.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/build/eas-json.mdx#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"base\": {\n      \"env\": {\n        \"EXAMPLE_ENV\": \"example value\"\n      },\n      \"android\": {\n        \"image\": \"ubuntu-18.04-android-30-ndk-r19c\",\n        \"ndk\": \"21.4.7075529\"\n      },\n      \"ios\": {\n        \"image\": \"latest\",\n        \"node\": \"12.13.0\",\n        \"yarn\": \"1.22.5\"\n      }\n    },\n    \"development\": {\n      \"extends\": \"base\",\n      \"env\": {\n        \"ENVIRONMENT\": \"staging\"\n      },\n      \"android\": {\n        \"distribution\": \"internal\",\n        \"withoutCredentials\": true,\n        \"gradleCommand\": \":app:assembleDebug\"\n      },\n      \"ios\": {\n        \"simulator\": true,\n        \"buildConfiguration\": \"Debug\"\n      }\n    },\n    \"staging\": {\n      \"extends\": \"base\",\n      \"env\": {\n        \"ENVIRONMENT\": \"staging\"\n      },\n      \"distribution\": \"internal\",\n      \"android\": {\n        \"gradleCommand\": \":app:assembleRelease\"\n      }\n    },\n    \"production\": {\n      \"extends\": \"base\",\n      \"env\": {\n        \"ENVIRONMENT\": \"production\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Network State Once with NetInfo (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use NetInfo.fetch() to retrieve the current network state a single time. The fetch method returns a promise that resolves with an object containing connection properties such as type and isConnected. Dependencies include a properly installed and configured @react-native-community/netinfo package. The state object includes key parameters like type (e.g., wifi, cellular) and isConnected (boolean). Output is logged to the console.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/netinfo.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nNetInfo.fetch().then(state => {\n  console.log('Connection type', state.type);\n  console.log('Is connected?', state.isConnected);\n});\n```\n\n----------------------------------------\n\nTITLE: Integrating the EmojiPicker Modal in the Main App Screen (React Native/TypeScript)\nDESCRIPTION: This snippet shows modifications to the `app/(tabs)/index.tsx` file to integrate the `EmojiPicker` component. It imports the `EmojiPicker`, introduces a `useState` hook (`isModalVisible`) to manage the modal's visibility, updates the `onAddSticker` function to set `isModalVisible` to true, defines `onModalClose` to set it to false, and renders the `<EmojiPicker>` component at the bottom, passing the state and close handler as props. The tutorial comments (`/* @tutinfo ... */`) highlight the specific changes made for this integration step.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/create-a-modal.mdx#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { View, StyleSheet } from 'react-native';\nimport * as ImagePicker from 'expo-image-picker';\nimport { useState } from 'react';\n\nimport Button from '@/components/Button';\nimport ImageViewer from '@/components/ImageViewer';\nimport IconButton from '@/components/IconButton';\nimport CircleButton from '@/components/CircleButton';\n/* @tutinfo import the <CODE>EmojiPicker</CODE> component. */\nimport EmojiPicker from '@/components/EmojiPicker';\n/* @end */\n\nconst PlaceholderImage = require('@/assets/images/background-image.png');\n\nexport default function Index() {\n  const [selectedImage, setSelectedImage] = useState<string | undefined>(undefined);\n  const [showAppOptions, setShowAppOptions] = useState<boolean>(false);\n  /* @tutinfo Create a state variable. */\n  const [isModalVisible, setIsModalVisible] = useState<boolean>(false);\n  /* @end */\n\n  const pickImageAsync = async () => {\n    let result = await ImagePicker.launchImageLibraryAsync({\n      mediaTypes: ['images'],\n      allowsEditing: true,\n      quality: 1,\n    });\n\n    if (!result.canceled) {\n      setSelectedImage(result.assets[0].uri);\n      setShowAppOptions(true);\n    } else {\n      alert('You did not select any image.');\n    }\n  };\n\n  const onReset = () => {\n    setShowAppOptions(false);\n  };\n\n  /* @tutinfo Update functions to control the modal's visibility.*/\n  const onAddSticker = () => {\n    setIsModalVisible(true);\n  };\n\n  const onModalClose = () => {\n    setIsModalVisible(false);\n  };\n  /* @end */\n\n  const onSaveImageAsync = async () => {\n    // we will implement this later\n  };\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.imageContainer}>\n        <ImageViewer imgSource={PlaceholderImage} selectedImage={selectedImage} />\n      </View>\n      {showAppOptions ? (\n        <View style={styles.optionsContainer}>\n          <View style={styles.optionsRow}>\n            <IconButton icon=\"refresh\" label=\"Reset\" onPress={onReset} />\n            <CircleButton onPress={onAddSticker} />\n            <IconButton icon=\"save-alt\" label=\"Save\" onPress={onSaveImageAsync} />\n          </View>\n        </View>\n      ) : (\n        <View style={styles.footerContainer}>\n          <Button theme=\"primary\" label=\"Choose a photo\" onPress={pickImageAsync} />\n          <Button label=\"Use this photo\" onPress={() => setShowAppOptions(true)} />\n        </View>\n      )}\n      /* @tutinfo Render the <CODE>EmojiPicker</CODE> component at the bottom of the <CODE>Index</CODE> component. */\n      <EmojiPicker isVisible={isModalVisible} onClose={onModalClose}>\n        {/* A list of emoji component will go here */}\n      </EmojiPicker>\n      /* @end */\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#25292e',\n    alignItems: 'center',\n  },\n  imageContainer: {\n    flex: 1,\n  },\n  footerContainer: {\n    flex: 1 / 3,\n    alignItems: 'center',\n  },\n  optionsContainer: {\n    position: 'absolute',\n    bottom: 80,\n  },\n  optionsRow: {\n    alignItems: 'center',\n    flexDirection: 'row',\n  },\n});\n\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-font in app.json\nDESCRIPTION: Example of configuring the expo-font plugin in the app.json file. It demonstrates how to specify custom font files to be linked to the native project.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/font.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-font\",\n        {\n          \"fonts\": [\"path/to/file.ttf\"]\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the appVersion Policy with Numeric App Versioning (JSON)\nDESCRIPTION: This JSON config snippet applies the 'appVersion' runtime version policy in Expo, using the project version and build identifiers for Android and iOS. Dependencies: Expo app.json. Key parameters are 'policy', 'version', 'ios.buildNumber', 'android.versionCode'. The output runtime version will match the 'version' field, and manual updating of 'version' is required for each release. Limitations: update the 'version' field every public release for proper tracking.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/updates.mdx#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"runtimeVersion\": {\n      \"policy\": \"appVersion\"\n    },\n    \"version\": \"1.0.0\",\n    \"ios\": {\n      \"buildNumber\": \"1\"\n    },\n    \"android\": {\n      \"versionCode\": 1\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Camera Usage in React Native with expo-camera\nDESCRIPTION: A complete React Native component demonstrating basic usage of the CameraView from expo-camera. It includes permission handling, camera preview rendering, and a button to flip between front and back cameras.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/camera.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CameraView, CameraType, useCameraPermissions } from 'expo-camera';\nimport { useState } from 'react';\nimport { Button, StyleSheet, Text, TouchableOpacity, View } from 'react-native';\n\nexport default function App() {\n  const [facing, setFacing] = useState<CameraType>('back');\n  const [permission, requestPermission] = useCameraPermissions();\n\n  if (!permission) {\n    // Camera permissions are still loading.\n    return <View />;\n  }\n\n  if (!permission.granted) {\n    // Camera permissions are not granted yet.\n    return (\n      <View style={styles.container}>\n        <Text style={styles.message}>We need your permission to show the camera</Text>\n        <Button onPress={requestPermission} title=\"grant permission\" />\n      </View>\n    );\n  }\n\n  function toggleCameraFacing() {\n    setFacing(current => (current === 'back' ? 'front' : 'back'));\n  }\n\n  return (\n    <View style={styles.container}>\n      <CameraView style={styles.camera} facing={facing}>\n        <View style={styles.buttonContainer}>\n          <TouchableOpacity style={styles.button} onPress={toggleCameraFacing}>\n            <Text style={styles.text}>Flip Camera</Text>\n          </TouchableOpacity>\n        </View>\n      </CameraView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n  message: {\n    textAlign: 'center',\n    paddingBottom: 10,\n  },\n  camera: {\n    flex: 1,\n  },\n  buttonContainer: {\n    flex: 1,\n    flexDirection: 'row',\n    backgroundColor: 'transparent',\n    margin: 64,\n  },\n  button: {\n    flex: 1,\n    alignSelf: 'flex-end',\n    alignItems: 'center',\n  },\n  text: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: 'white',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying Device Manufacturer and Model Name using expo-device in React Native\nDESCRIPTION: This React Native component demonstrates basic usage of the `expo-device` library. It imports the `Device` module from `expo-device` and the necessary components from `react-native`. It then displays the device's manufacturer and model name concatenated within a `Text` component centered on the screen. This example requires the `expo-device` package to be installed.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/device.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Text, View } from 'react-native';\nimport * as Device from 'expo-device';\n\nexport default function App() {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>\n        {Device.manufacturer}: {Device.modelName}\n      </Text>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing useSQLiteContext() Hook with React.Suspense in Expo\nDESCRIPTION: Example of integrating SQLite database with React Suspense for better loading state management. This setup enables showing a fallback component until the database is fully initialized by using the useSuspense prop with SQLiteProvider.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/sqlite.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SQLiteProvider, useSQLiteContext } from 'expo-sqlite';\nimport { Suspense } from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Suspense fallback={<Fallback />}>\n        <SQLiteProvider databaseName=\"test.db\" onInit={migrateDbIfNeeded} useSuspense>\n          <Header />\n          <Content />\n        </SQLiteProvider>\n      </Suspense>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Maestro Job Configuration YAML\nDESCRIPTION: Defines a Maestro job configuration for running Maestro tests on a build. It specifies the job type as `maestro`, allows setting the environment, build image, and parameters such as `build_id`, `flow_path`, `shards`, and `retries`. The `build_id` and `flow_path` parameters are required.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/workflows/syntax.mdx#_snippet_32\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  my_job:\n    # @info #\n    type: maestro\n    # @end #\n    environment: production | preview | development # optional, defaults to preview\n    image: string # optional. See https://docs.expo.dev/build-reference/infrastructure/ for a list of available images.\n    params:\n      build_id: string # required\n      flow_path: string | string[] # required\n      shards: number # optional, defaults to 1\n      retries: number # optional, defaults to 1\n```\n\n----------------------------------------\n\nTITLE: Importing SQLite Module in Expo\nDESCRIPTION: Shows how to import the SQLite module from expo-sqlite/next package.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/sqlite-next.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as SQLite from 'expo-sqlite/next';\n```\n\n----------------------------------------\n\nTITLE: Configuring 'on.pull_request_labeled' in YAML\nDESCRIPTION: This snippet demonstrates how to trigger a workflow when a pull request is labeled with a specific label using `on.pull_request_labeled`.  It shows the use of the labels array and also the more concise syntax of listing labels directly under `on.pull_request_labeled`.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/workflows/syntax.mdx#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  # @info #\n  pull_request_labeled:\n    # @end #\n    labels:\n      - Test\n      - Preview\n      # other labels\n```\n\n----------------------------------------\n\nTITLE: Integrating the Button Component into the App Screen in React Native (tsx)\nDESCRIPTION: Imports the custom `Button` component into the main screen component (`Index`) located in `app/(tabs)/index.tsx`. It renders two instances of the `Button` component, each with a different label, inside a `View` designated as the `footerContainer`. Styles for the overall screen layout (`container`, `imageContainer`) and the new footer are defined using `StyleSheet.create`.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/build-a-screen.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { View, StyleSheet } from 'react-native';\n\n/* @tutinfo */import Button from '@/components/Button'; /* @end */\nimport ImageViewer from '@/components/ImageViewer';\n\nconst PlaceholderImage = require(\"@/assets/images/background-image.png\");\n\nexport default function Index() {\n  return (\n    <View style={styles.container}>\n      <View style={styles.imageContainer}>\n        <ImageViewer imgSource={PlaceholderImage} />\n      </View>\n      /* @tutinfo Use the reusable <CODE>Button</CODE> component to create two buttons and encapsulate them inside a <CODE>View</CODE> component. */\n      <View style={styles.footerContainer}>\n        <Button label=\"Choose a photo\" />\n        <Button label=\"Use this photo\" />\n      </View>\n      /* @end */\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#25292e',\n    alignItems: 'center',\n  },\n  imageContainer: {\n    flex: 1,\n    paddingTop: 28,\n  },\n  /* @tutinfo Add the styles the following styles. */\n  footerContainer: {\n    flex: 1 / 3,\n    alignItems: 'center',\n  },\n  /* @end */\n});\n```\n\n----------------------------------------\n\nTITLE: Manual WebView Implementation\nDESCRIPTION: Shows how to manually create a WebView component for rendering HTML content.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/dom-components.mdx#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { WebView } from 'react-native-webview';\n\nexport default function App() {\n  return <WebView source={{ html: '<h1>Hello, world!</h1>' }} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Expo App with Legend-State Supabase Example\nDESCRIPTION: Command to create a new Expo project using the Legend-State Supabase example template. This setup provides a starting point for building local-first apps with Legend-State and Supabase integration.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/local-first.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npx create-expo-app --example with-legend-state-supabase\n```\n\n----------------------------------------\n\nTITLE: Configuring EAS.json to Use a Single Custom Build Config\nDESCRIPTION: This snippet shows how to add a 'config' property to a build profile in eas.json to reference a custom build configuration file. It creates a new 'test' profile that uses 'test.yml' as its configuration file.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/custom-builds/get-started.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    /* @hide ... */ /* @end */\n    \"test\": {\n      \"config\": \"test.yml\",\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up SafeAreaProvider in React Native App Root\nDESCRIPTION: Shows how to set up the SafeAreaProvider component at the root of the application to enable safe area context throughout the app.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/safe-area-context.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\n\nfunction App() {\n  return <SafeAreaProvider>...</SafeAreaProvider>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SplashScreen using Config Plugin in app.json\nDESCRIPTION: This snippet shows how to configure the expo-splash-screen package using its built-in config plugin in the app.json file. It demonstrates setting background color, image paths for light and dark modes, and image width.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/splash-screen.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-splash-screen\",\n        {\n          \"backgroundColor\": \"#232323\",\n          \"image\": \"./assets/splash-icon.png\",\n          \"dark\": {\n            \"image\": \"./assets/splash-icon-dark.png\",\n            \"backgroundColor\": \"#000000\"\n          },\n          \"imageWidth\": 200\n        }\n      ]\n    ],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing EAS Builds\nDESCRIPTION: Terminal command to list all your EAS builds. This command shows all builds associated with your account including their status and details.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/deploy/build-project.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ eas build:list\n```\n\n----------------------------------------\n\nTITLE: Configuring Project for EAS Update\nDESCRIPTION: Command to initialize and configure a project for EAS Update, updating necessary files and settings.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/getting-started.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ eas update:configure\n```\n\n----------------------------------------\n\nTITLE: Configuring Legacy Vercel.json v2 for Expo Application\nDESCRIPTION: This JSON configuration file for Vercel v2 sets up multiple builds including a static build for client assets and a Node.js runtime for the server. It also configures routing rules to handle static files and server requests.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/reference/api-routes.mdx#2025-04-22_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": 2,\n  \"outputDirectory\": \"dist\",\n  \"builds\": [\n    {\n      \"src\": \"package.json\",\n      \"use\": \"@vercel/static-build\",\n      \"config\": {\n        \"distDir\": \"dist/client\"\n      }\n    },\n    {\n      \"src\": \"api/index.ts\",\n      \"use\": \"@vercel/node\",\n      \"config\": {\n        \"includeFiles\": [\"dist/server/**\"]\n      }\n    }\n  ],\n  \"routes\": [\n    {\n      \"handle\": \"filesystem\"\n    },\n    {\n      \"src\": \"/(.*)\",\n      \"dest\": \"/api/index.ts\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Unmatched Route Handler in Expo Router\nDESCRIPTION: Shows how to set up a default unmatched route handler using the Unmatched component from expo-router. This handles cases where no matching route is found in the application.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/error-handling.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Unmatched } from 'expo-router';\nexport default Unmatched;\n```\n\n----------------------------------------\n\nTITLE: Installing expo-navigation-bar in bare React Native projects\nDESCRIPTION: This command installs the expo-navigation-bar package using npx and expo CLI. It's intended for use in bare React Native projects after setting up react-native-unimodules.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-navigation-bar/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-navigation-bar\n```\n\n----------------------------------------\n\nTITLE: Building iOS Development Build for Simulator on EAS\nDESCRIPTION: Use EAS CLI to build an iOS development build for simulators on EAS servers.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/development-builds/create-a-build.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ eas build --platform ios --profile development\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Notification Sound on iOS\nDESCRIPTION: Example of scheduling a notification with a custom sound on iOS. This requires placing the sound file in the Xcode project resources and referencing it in the notification content.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/notifications.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nawait Notifications.scheduleNotificationAsync({\n  content: {\n    title: \"You've got mail! 📬\",\n    body: 'Open the notification to read them all',\n    sound: 'notification.wav',\n  },\n  trigger: {\n    // ...\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Screen Tracking in Expo Router Layout (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to implement screen tracking for analytics in the app/_layout.tsx file using Expo Router. It uses the usePathname and useGlobalSearchParams hooks to track the current URL and parameters, then passes this information to an analytics provider.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/reference/screen-tracking.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEffect } from 'react';\nimport { usePathname, useGlobalSearchParams, Slot } from 'expo-router';\n\nexport default function Layout() {\n  const pathname = usePathname();\n  const params = useGlobalSearchParams();\n\n  // Track the location in your analytics provider here.\n  useEffect(() => {\n    analytics.track({ pathname, params });\n  }, [pathname, params]);\n\n  // Export all the children routes in the most basic way.\n  return <Slot />;\n}\n```\n\n----------------------------------------\n\nTITLE: Corrected Root Layout Implementation\nDESCRIPTION: Proper implementation of root layout component that ensures the Slot is always mounted.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/advanced/authentication.mdx#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function RootLayout() {\n  return <Slot />;\n}\n```\n\n----------------------------------------\n\nTITLE: Using CSS Module Styles in React Components\nDESCRIPTION: This code demonstrates how to import and use CSS Module styles in React components for both web and React Native.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/config/metro.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport styles, { unstable_styles } from './App.module.css';\n\nexport default function Page() {\n  return (\n    <>\n      <Text\n        style={{\n          // This is how react-native-web class names are applied\n          $$css: true,\n          _: styles.text,\n        }}>\n        Hello World\n      </Text>\n      <Text style={unstable_styles.text}>Hello World</Text>\n      {/* Web-only usage: */}\n      <p className={styles.text}>Hello World</p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Writing and Reading Text Files with expo-file-system/next in TypeScript\nDESCRIPTION: Creates a text file in the cache directory, writes content to it, and then reads the content back. This demonstrates basic file creation, writing, and reading operations using the File class.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/filesystem-next.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { File, Paths } from 'expo-file-system/next';\n\ntry {\n  const file = new File(Paths.cache, 'example.txt');\n  file.create(); // can throw an error if the file already exists or no permission to create it\n  file.write('Hello, world!');\n  console.log(file.text()); // Hello, world!\n} catch (error) {\n  console.error(error);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-localization with Config Plugin in app.json\nDESCRIPTION: This snippet demonstrates how to configure expo-localization using its built-in config plugin in the app.json file. This is necessary for properties that cannot be set at runtime and require building a new app binary.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/localization.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\"expo-localization\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Dev Tools Plugin with useDevToolsPluginClient in React\nDESCRIPTION: This snippet demonstrates how to use the useDevToolsPluginClient hook to create a dev tools plugin in React. It shows how to set up message listeners and handle cleanup.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/debugging/create-devtools-plugins.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useDevToolsPluginClient, type EventSubscription } from 'expo/devtools';\nimport { useEffect } from 'react';\n\nexport default function App() {\n  const client = useDevToolsPluginClient('my-devtools-plugin');\n\n  useEffect(() => {\n    const subscriptions: EventSubscription[] = [];\n\n    subscriptions.push(\n      client?.addMessageListener('ping', data => {\n        alert(`Received ping from ${data.from}`);\n      })\n    );\n\n    return () => {\n      for (const subscription of subscriptions) {\n        subscription?.remove();\n      }\n    };\n  }, [client]);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Screen Capture Functions in React Native\nDESCRIPTION: Shows how to use the function-based API for screen capture protection, including requesting permissions, adding screenshot listeners, and toggling screen capture prevention. This example demonstrates more granular control with activate/deactivate functionality.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/screen-capture.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as ScreenCapture from 'expo-screen-capture';\nimport { useEffect } from 'react';\nimport { Button, StyleSheet, View } from 'react-native';\n\nexport default function ScreenCaptureExample() {\n  const hasPermissions = async () => {\n    const { status } = await ScreenCapture.requestPermissionsAsync();\n    return status === 'granted';\n  };\n\n  useEffect(() => {\n    let subscription;\n\n    const addListenerAsync = async () => {\n      if (await hasPermissions()) {\n        subscription = ScreenCapture.addScreenshotListener(() => {\n          alert('Thanks for screenshotting my beautiful app 😊');\n        });\n      } else {\n        console.error('Permissions needed to subscribe to screenshot events are missing!');\n      }\n    };\n    addListenerAsync();\n\n    return () => {\n      subscription?.remove();\n    };\n  }, []);\n\n  const activate = async () => {\n    await ScreenCapture.preventScreenCaptureAsync();\n  };\n\n  const deactivate = async () => {\n    await ScreenCapture.allowScreenCaptureAsync();\n  };\n\n  return (\n    <View style={styles.container}>\n      <Button title=\"Activate\" onPress={activate} />\n      <Button title=\"Deactivate\" onPress={deactivate} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Barometer Usage in React Native\nDESCRIPTION: Demonstrates how to use the `expo-sensors` Barometer API in a React Native component. It utilizes `useState` to manage sensor data (pressure and relative altitude) and subscription state. The `Barometer.addListener` function is used to subscribe to updates, receiving an object with `pressure` and `relativeAltitude` (iOS only). `subscription.remove` is used to unsubscribe. The component displays the current sensor readings and provides a button to toggle the listener.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/barometer.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx\nimport { useState } from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View, Platform } from 'react-native';\nimport { Barometer } from 'expo-sensors';\n\nexport default function App() {\n  const [{ pressure, relativeAltitude }, setData] = useState({ pressure: 0, relativeAltitude: 0 });\n  const [subscription, setSubscription] = useState(null);\n\n  const toggleListener = () => {\n    subscription ? unsubscribe() : subscribe();\n  };\n\n  const subscribe = () => {\n    setSubscription(Barometer.addListener(setData));\n  };\n\n  const unsubscribe = () => {\n    subscription && subscription.remove();\n    setSubscription(null);\n  };\n\n  return (\n    <View style={styles.wrapper}>\n      <Text>Barometer: Listener {subscription ? 'ACTIVE' : 'INACTIVE'}</Text>\n      <Text>Pressure: {pressure} hPa</Text>\n      <Text>\n        Relative Altitude:{' '}\n        {Platform.OS === 'ios' ? `${relativeAltitude} m` : `Only available on iOS`}\n      </Text>\n      <TouchableOpacity onPress={toggleListener} style={styles.button}>\n        <Text>Toggle listener</Text>\n      </TouchableOpacity>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  button: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#eee',\n    padding: 10,\n    marginTop: 15,\n  },\n  wrapper: {\n    flex: 1,\n    alignItems: 'stretch',\n    justifyContent: 'center',\n    paddingHorizontal: 20,\n  },\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Customizing TabTrigger Button in Expo Router\nDESCRIPTION: Example showing how to customize individual tab buttons by using the asChild prop with TabTrigger to implement custom button components.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/advanced/custom-tabs.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Tabs>\n  <TabSlot />\n  <TabList asChild>\n    <TabTrigger name=\"home\" href=\"/\" asChild>\n      {/* Render a custom button */}\n      <CustomButton>\n        <Text>Home</Text>\n      </CustomButton>\n    </TabTrigger>\n  </TabList>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Custom Tab Layout in Expo Router\nDESCRIPTION: Basic implementation of a custom tab layout using Tabs, TabList, TabTrigger, and TabSlot components. Demonstrates the minimum structure required for custom tab navigation.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/advanced/custom-tabs.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Tabs, TabList, TabTrigger, TabSlot } from 'expo-router/ui';\n\n// Defining the layout of the custom tab navigator\nexport default function Layout() {\n  return (\n    <Tabs>\n      <TabSlot />\n      <TabList>\n        <TabTrigger name=\"home\" href=\"/\">\n          <Text>Home</Text>\n        </TabTrigger>\n        <TabTrigger name=\"article\" href=\"/article\">\n          <Text>Article</Text>\n        </TabTrigger>\n      </TabList>\n    </Tabs>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-secure-store in app.json (JSON)\nDESCRIPTION: This snippet configures the expo-secure-store plugin in the app.json using Expo config plugins to set Android backup and Face ID permission options. It enables users to set properties like configureAndroidBackup and faceIDPermission before building, which are necessary for certain secure-store features to work. Requires use of the Expo config plugin system, and the inputs control Android backup and iOS biometric messaging.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/securestore.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"expo\\\": {\\n    \\\"plugins\\\": [\\n      [\\n        \\\"expo-secure-store\\\",\\n        {\\n          \\\"configureAndroidBackup\\\": true,\\n          \\\"faceIDPermission\\\": \\\"Allow $(PRODUCT_NAME) to access your Face ID biometric data.\\\"\\n        }\\n      ]\\n    ]\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Opening URLs with expo-linking in React Native\nDESCRIPTION: This snippet demonstrates how to use the expo-linking API to open a URL in the default browser of the operating system.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/linking/into-other-apps.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Button, View, StyleSheet } from 'react-native';\nimport * as Linking from 'expo-linking';\n\nexport default function Home() {\n  return (\n    <View style={styles.container}>\n      <Button title=\"Open a URL\" onPress={() => Linking.openURL('https://expo.dev/')} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Config Plugin Implementation\nDESCRIPTION: Minimal example of a config plugin that simply returns the config unchanged. Shows the basic structure required for a valid config plugin.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/config-plugins/plugins-and-mods.mdx#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = config => config;\n```\n\n----------------------------------------\n\nTITLE: iOS Test Module Command\nDESCRIPTION: Fastlane command to run module tests for iOS.\nSOURCE: https://github.com/expo/expo/blob/main/fastlane/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n[bundle exec] fastlane ios test_module\n```\n\n----------------------------------------\n\nTITLE: Web Text Component with Language Support\nDESCRIPTION: Custom Text component implementation for web platform with language tag support using expo-localization.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/localization.mdx#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getLocales } from 'expo-localization';\n\nconst deviceLanguage = getLocales()[0].languageCode;\n\nconst WebText = (props: RNTextProps) => {\n  return <RNText lang={deviceLanguage} {...props} />;\n};\n\nexport default WebText;\n```\n\n----------------------------------------\n\nTITLE: Handling Multipart File Uploads in Node.js Express Server (JavaScript)\nDESCRIPTION: Shows how to implement basic binary and multipart file upload endpoints in a Node.js Express server, with file persistence using fs and multer. The '/binary-upload' endpoint allows raw binary upload streaming directly to disk, while '/multipart-upload' utilizes multer to extract and save the 'photo' form field. Requires 'express', 'fs', and 'multer' as dependencies. Important parameters are file paths and HTTP field names. Input is an HTTP PATCH request with binary or multipart data; output is an 'OK' response and a file saved to disk.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/filesystem.mdx#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst express = require('express');\nconst app = express();\nconst fs = require('fs');\nconst multer = require('multer');\nconst upload = multer({ dest: 'uploads/' });\n\n// This method will save the binary content of the request as a file.\napp.patch('/binary-upload', (req, res) => {\n  req.pipe(fs.createWriteStream('./uploads/image' + Date.now() + '.png'));\n  res.end('OK');\n});\n\n// This method will save a \"photo\" field from the request as a file.\napp.patch('/multipart-upload', upload.single('photo'), (req, res) => {\n  // You can access other HTTP parameters. They are located in the body object.\n  console.log(req.body);\n  res.end('OK');\n});\n\napp.listen(3000, () => {\n  console.log('Working on port 3000');\n});\n\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-router Plugin in app.json - JSON\nDESCRIPTION: This code snippet shows how to enable the expo-router plugin within your Expo app's app.json configuration file. The 'plugins' array should contain 'expo-router' to allow Expo's config system to automatically set up integration. This pattern ensures that the routing library is integrated during app build and runtime. The file must be valid JSON, placed in the project root, with 'expo' as the top-level key.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/router.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\"expo-router\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing expo-location Module\nDESCRIPTION: Simple JavaScript import statement for the expo-location module that allows access to all location-related functionality.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/location.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Location from 'expo-location';\n```\n\n----------------------------------------\n\nTITLE: Basic API Route Caching with Cache-Control\nDESCRIPTION: Demonstrates how to implement basic caching in an API route using Cache-Control headers to cache responses for 1 hour.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/hosting/reference/caching.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function GET(request) {\n  return Response.json({ ... }, {\n    headers: {\n\t    'Cache-Control': 'public, max-age=3600'\n    },\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Playing Sounds with expo-av in React Native\nDESCRIPTION: This snippet demonstrates how to play sounds using the `expo-av` library in a React Native application. It includes setting up a state to manage the sound object and an effect to unload the sound when it's no longer needed. Dependencies include `expo-av` and `expo-asset`. The main parameter is the sound file to be played, and the expected output is audio playback. It assumes that the app has access to the sound file specified.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/audio-av.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEffect, useState } from 'react';\nimport { View, StyleSheet, Button } from 'react-native';\nimport { Audio } from 'expo-av';\n\nexport default function App() {\n  const [sound, setSound] = useState();\n\n  async function playSound() {\n    console.log('Loading Sound');\n    /* @info */ const { sound } = await Audio.Sound.createAsync(\n      /* @end */ require('./assets/Hello.mp3')\n    );\n    setSound(sound);\n\n    console.log('Playing Sound');\n    await /* @info */ sound.playAsync(); /* @end */\n  }\n\n  useEffect(() => {\n    return sound\n      ? () => {\n          console.log('Unloading Sound');\n          /* @info Always unload the Sound after using it to prevent memory leaks.*/ sound.unloadAsync(); /* @end */\n        }\n      : undefined;\n  }, [sound]);\n\n  return (\n    <View style={styles.container}>\n      <Button title=\"Play Sound\" onPress={playSound} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    backgroundColor: '#ecf0f1',\n    padding: 10,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Android 12+ Auto Backup Exclusions (XML)\nDESCRIPTION: Provides XML data-extraction-rules for Android 12 and higher to exclude SecureStore shared preferences from cloud backup and device transfer. This is important because SecureStore entries cannot be decrypted after a restore due to Android Keystore data loss on uninstall. Place this in your app's res/xml directory and reference it in your AndroidManifest if you manually control auto backup.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/securestore.mdx#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<data-extraction-rules>\n  <cloud-backup>\n    <include domain=\"sharedpref\" path=\".\"/>\n    <exclude domain=\"sharedpref\" path=\"SecureStore\"/>\n  </cloud-backup>\n  <device-transfer>\n    <include domain=\"sharedpref\" path=\".\"/>\n    <exclude domain=\"sharedpref\" path=\"SecureStore\"/>\n  </device-transfer>\n</data-extraction-rules>\n```\n\n----------------------------------------\n\nTITLE: Basic Next.js Configuration with Expo\nDESCRIPTION: Simple Next.js configuration using @expo/next-adapter with package transpilation setup.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/using-nextjs.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { withExpo } = require('@expo/next-adapter');\n\nmodule.exports = withExpo({\n  transpilePackages: [\n    'react-native',\n    'react-native-web',\n    'expo',\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Using Custom Fonts in React Native with expo-font\nDESCRIPTION: A minimal example of loading and using a custom font in a React Native application. It demonstrates importing necessary modules, loading fonts, handling the splash screen, and applying the custom font to text components.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/font.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useFonts } from 'expo-font';\nimport * as SplashScreen from 'expo-splash-screen';\nimport { useEffect } from 'react';\nimport { Text, View, StyleSheet } from 'react-native';\n\nSplashScreen.preventAutoHideAsync();\n\nexport default function App() {\n  const [loaded, error] = useFonts({\n    'Inter-Black': require('./assets/fonts/Inter-Black.otf'),\n  });\n\n  useEffect(() => {\n    if (loaded || error) {\n      SplashScreen.hideAsync();\n    }\n  }, [loaded, error]);\n\n  if (!loaded && !error) {\n    return null;\n  }\n\n  return (\n    <View style={styles.container}>\n      <Text style={{ fontFamily: 'Inter-Black', fontSize: 30 }}>Inter Black</Text>\n      <Text style={{ fontSize: 30 }}>Platform Default</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Mutable Properties in Swift\nDESCRIPTION: Defines a mutable property on the JavaScript module object with both getter and setter closures. This allows the property to be both read and modified from JavaScript.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/module-api.mdx#2025-04-22_snippet_16\n\nLANGUAGE: swift\nCODE:\n```\nProperty(\"foo\")\n  .get { return \"bar\" }\n  .set { (newValue: String) in\n    // do something with new value\n  }\n```\n\n----------------------------------------\n\nTITLE: Updating Root Layout for Grouped Routes in Expo Router (TypeScript)\nDESCRIPTION: This code shows how to update the root layout file to include a grouped set of routes. It defines a Stack navigator with a single Screen component for the (home) group.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/file-based-routing.mdx#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Stack } from 'expo-router';\n\nexport default function RootLayout() {\n  return (\n    <Stack>\n      <Stack.Screen name=\"(home)\" />\n    </Stack>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Expanded iOS Build and Test Configuration\nDESCRIPTION: Detailed configuration showing all individual steps for iOS build and test process including Maestro installation and artifact upload.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\nname: Build and test (iOS, expanded)\nsteps:\n  - eas/build\n  - eas/install_maestro\n  - eas/start_ios_simulator\n  - run:\n      command: |\n        shopt -s nullglob\n\n        SEARCH_PATH=\"ios/build/Build/Products/*simulator/*.app\"\n        FILES_FOUND=false\n\n        for APP_PATH in $SEARCH_PATH; do\n          FILES_FOUND=true\n          echo \"Installing \\\"$APP_PATH\\\"\"\n          xcrun simctl install booted \"$APP_PATH\"\n        done\n\n        if ! $FILES_FOUND; then\n          echo \"No files found matching \\\"$SEARCH_PATH\\\". Are you sure you've built a Simulator app?\"\n          exit 1\n        fi\n  - run:\n      command: |\n        maestro test maestro/flow.yml\n  - eas/upload_artifact:\n      name: Upload test artifact\n      if: ${ always() }\n      inputs:\n        type: build-artifact\n        path: ${ eas.env.HOME }/.maestro/tests\n```\n\n----------------------------------------\n\nTITLE: Implementing Main App Screen with Button Components\nDESCRIPTION: Integration of CircleButton and IconButton components into the main app screen. Includes image picker functionality, state management for selected images, and placeholder functions for reset, add sticker, and save operations.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/create-a-modal.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { View, StyleSheet } from 'react-native';\nimport * as ImagePicker from 'expo-image-picker';\nimport { useState } from 'react';\n\nimport Button from '@/components/Button';\nimport ImageViewer from '@/components/ImageViewer';\nimport IconButton from '@/components/IconButton';\nimport CircleButton from '@/components/CircleButton';\n\nconst PlaceholderImage = require('@/assets/images/background-image.png');\n\nexport default function Index() {\n  const [selectedImage, setSelectedImage] = useState<string | undefined>(undefined);\n  const [showAppOptions, setShowAppOptions] = useState<boolean>(false);\n\n  const pickImageAsync = async () => {\n    let result = await ImagePicker.launchImageLibraryAsync({\n      mediaTypes: ['images'],\n      allowsEditing: true,\n      quality: 1,\n    });\n\n    if (!result.canceled) {\n      setSelectedImage(result.assets[0].uri);\n      setShowAppOptions(true);\n    } else {\n      alert('You did not select any image.');\n    }\n  };\n\n  const onReset = () => {\n    setShowAppOptions(false);\n  };\n\n  const onAddSticker = () => {\n    // we will implement this later\n  };\n\n  const onSaveImageAsync = async () => {\n    // we will implement this later\n  };\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.imageContainer}>\n        <ImageViewer imgSource={PlaceholderImage} selectedImage={selectedImage} />\n      </View>\n      {showAppOptions ? (\n        <View style={styles.optionsContainer}>\n          <View style={styles.optionsRow}>\n            <IconButton icon=\"refresh\" label=\"Reset\" onPress={onReset} />\n            <CircleButton onPress={onAddSticker} />\n            <IconButton icon=\"save-alt\" label=\"Save\" onPress={onSaveImageAsync} />\n          </View>\n        </View>\n      ) : (\n        <View style={styles.footerContainer}>\n          <Button theme=\"primary\" label=\"Choose a photo\" onPress={pickImageAsync} />\n          <Button label=\"Use this photo\" onPress={() => setShowAppOptions(true)} />\n        </View>\n      )}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#25292e',\n    alignItems: 'center',\n  },\n  imageContainer: {\n    flex: 1,\n  },\n  footerContainer: {\n    flex: 1 / 3,\n    alignItems: 'center',\n  },\n  optionsContainer: {\n    position: 'absolute',\n    bottom: 80,\n  },\n  optionsRow: {\n    alignItems: 'center',\n    flexDirection: 'row',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Optimized Metro Configuration for Large Monorepos\nDESCRIPTION: Improved Metro configuration for larger monorepos, optimizing performance by limiting watchFolders to only the necessary packages and configuring extraNodeModules for proper resolution.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/monorepos.mdx#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nconst { getDefaultConfig } = require('expo/metro-config');\nconst path = require('path');\n\nconst projectRoot = __dirname;\nconst monorepoRoot = path.resolve(projectRoot, '../..');\n\nconst config = getDefaultConfig(projectRoot);\n\n// Only list the packages within your monorepo that your app uses. No need to add anything else.\n// If your monorepo tooling can give you the list of monorepo workspaces linked\n// in your app workspace, you can automate this list instead of hardcoding them.\nconst monorepoPackages = {\n  '@acme/api': path.resolve(monorepoRoot, 'packages/api'),\n  '@acme/components': path.resolve(monorepoRoot, 'packages/components'),\n};\n\n// 1. Watch the local app directory, and only the shared packages (limiting the scope and speeding it up)\n// Note how we change this from `monorepoRoot` to `projectRoot`. This is part of the optimization!\nconfig.watchFolders = [projectRoot, ...Object.values(monorepoPackages)];\n\n// Add the monorepo workspaces as `extraNodeModules` to Metro.\n// If your monorepo tooling creates workspace symlinks in the `node_modules` directory,\n// you can either add symlink support to Metro or set the `extraNodeModules` to avoid the symlinks.\n// See: https://metrobundler.dev/docs/configuration/#extranodemodules\nconfig.resolver.extraNodeModules = monorepoPackages;\n\n// 2. Let Metro know where to resolve packages and in what order\nconfig.resolver.nodeModulesPaths = [\n  path.resolve(projectRoot, 'node_modules'),\n  path.resolve(monorepoRoot, 'node_modules'),\n];\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Using StatusBar Component in Expo React Native App\nDESCRIPTION: This snippet demonstrates how to use the StatusBar component from expo-status-bar in a React Native app. It sets up a dark background with light text and configures the status bar to have light text to match.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/status-bar.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { StyleSheet, Text, View } from 'react-native';\nimport { StatusBar } from 'expo-status-bar';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.text}>Notice that the status bar has light text!</Text>\n      <StatusBar style=\"light\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#000',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  text: {\n    color: '#fff',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring UIBackgroundModes in iOS Plist\nDESCRIPTION: XML configuration for enabling background push notifications in iOS by adding remote-notification to UIBackgroundModes array in Expo.plist.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/notifications.mdx#2025-04-22_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<key>UIBackgroundModes</key>\n<array>\n  <string>remote-notification</string>\n</array>\n```\n\n----------------------------------------\n\nTITLE: Setting Up and Using Custom Notification Sounds\nDESCRIPTION: Example of setting up a notification channel with a custom sound and scheduling a notification with the same sound. This demonstrates using custom sounds after configuring them through the expo-notifications plugin.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/notifications.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nawait Notifications.setNotificationChannelAsync('new-emails', {\n  name: 'E-mail notifications',\n  importance: Notifications.AndroidImportance.HIGH,\n  sound: 'mySoundFile.wav', // Provide ONLY the base filename\n});\n\nawait Notifications.scheduleNotificationAsync({\n  content: {\n    title: \"You've got mail! 📬\",\n    sound: 'mySoundFile.wav', // Provide ONLY the base filename\n  },\n  trigger: {\n    seconds: 2,\n    channelId: 'new-emails',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using expo-localization Methods in JavaScript\nDESCRIPTION: This JavaScript code snippet showcases how to import and use the getLocales and getCalendars methods from expo-localization. These synchronous methods access the user's device localization settings, which can vary between iOS and Android. On Android, the localization can change without restarting the app, so re-running methods when the app enters the foreground is recommended.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/localization.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { getLocales, getCalendars } from 'expo-localization';\n```\n\n----------------------------------------\n\nTITLE: Installing EAS CLI and Logging In\nDESCRIPTION: Install the EAS CLI globally and log in to your Expo account.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/development-builds/create-a-build.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install -g eas-cli && eas login\n```\n\n----------------------------------------\n\nTITLE: Using AppleMaps and GoogleMaps components (TSX)\nDESCRIPTION: This TypeScript code snippet demonstrates how to use the `AppleMaps` and `GoogleMaps` components from the `expo-maps` library based on the platform. It imports necessary modules and conditionally renders the appropriate map component based on the operating system.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/maps.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { AppleMaps, GoogleMaps } from 'expo-maps';\nimport { Platform, Text } from 'react-native';\n\nexport default function App() {\n  if (Platform.OS === 'ios') {\n    return <AppleMaps.View style={{ flex: 1 }} />;\n  } else if (Platform.OS === 'android') {\n    return <GoogleMaps.View style={{ flex: 1 }} />;\n  } else {\n    return <Text>Maps are only available on Android and iOS</Text>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing EAS CLI\nDESCRIPTION: Command to install the EAS CLI globally using npm package manager\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/hosting/get-started.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install --global eas-cli\n```\n\n----------------------------------------\n\nTITLE: Defining Synchronous Function in Swift\nDESCRIPTION: Creates a synchronous native function that is exposed to JavaScript. When called from JavaScript, the function blocks execution until it returns a value.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/module-api.mdx#2025-04-22_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nFunction(\"mySyncFunction\") { (message: String) in\n  return message\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Production Profile in eas.json\nDESCRIPTION: Basic eas.json configuration showing production profile setup for Android and iOS submissions. Includes CLI version requirement and platform-specific submission settings.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/submit/eas-json.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"cli\": {\n    \"version\": \">= 0.34.0\"\n  },\n  \"submit\": {\n    \"production\": {\n      \"android\": {\n        \"serviceAccountKeyPath\": \"../path/to/api-xxx-yyy-zzz.json\",\n        \"track\": \"internal\"\n      },\n      \"ios\": {\n        \"ascAppId\": \"your-app-store-connect-app-id\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Hermes and JSC Engines in Expo app.json\nDESCRIPTION: This JSON snippet demonstrates how to configure the JavaScript engine in an Expo project's app.json file. It shows setting Hermes as the default engine while overriding it with JSC for iOS.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/using-hermes.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"jsEngine\": \"hermes\",\n    \"ios\": {\n      \"jsEngine\": \"jsc\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Accelerometer Implementation in React Native\nDESCRIPTION: A complete React Native component that demonstrates how to use the Accelerometer from expo-sensors. It shows how to subscribe to accelerometer updates, set update intervals, and manage the subscription lifecycle with useEffect.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/accelerometer.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View } from 'react-native';\nimport { Accelerometer } from 'expo-sensors';\n\nexport default function App() {\n  const [{ x, y, z }, setData] = useState({\n    x: 0,\n    y: 0,\n    z: 0,\n  });\n  const [subscription, setSubscription] = useState(null);\n\n  const _slow = () => Accelerometer.setUpdateInterval(1000);\n  const _fast = () => Accelerometer.setUpdateInterval(16);\n\n  const _subscribe = () => {\n    setSubscription(Accelerometer.addListener(setData));\n  };\n\n  const _unsubscribe = () => {\n    subscription && subscription.remove();\n    setSubscription(null);\n  };\n\n  useEffect(() => {\n    _subscribe();\n    return () => _unsubscribe();\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.text}>Accelerometer: (in gs where 1g = 9.81 m/s^2)</Text>\n      <Text style={styles.text}>x: {x}</Text>\n      <Text style={styles.text}>y: {y}</Text>\n      <Text style={styles.text}>z: {z}</Text>\n      <View style={styles.buttonContainer}>\n        <TouchableOpacity onPress={subscription ? _unsubscribe : _subscribe} style={styles.button}>\n          <Text>{subscription ? 'On' : 'Off'}</Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={_slow} style={[styles.button, styles.middleButton]}>\n          <Text>Slow</Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={_fast} style={styles.button}>\n          <Text>Fast</Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    paddingHorizontal: 20,\n  },\n  text: {\n    textAlign: 'center',\n  },\n  buttonContainer: {\n    flexDirection: 'row',\n    alignItems: 'stretch',\n    marginTop: 15,\n  },\n  button: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#eee',\n    padding: 10,\n  },\n  middleButton: {\n    borderLeftWidth: 1,\n    borderRightWidth: 1,\n    borderColor: '#ccc',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Declarative Redirects with Expo Router Redirect Component\nDESCRIPTION: Demonstrates how to use the Redirect component for conditional navigation based on authentication state. The code shows a pattern for redirecting unauthenticated users to a login page.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/reference/redirects.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { View, Text } from 'react-native';\nimport { Redirect } from 'expo-router';\n\nexport default function Page() {\n  const { user } = useAuth();\n\n  if (!user) {\n    return <Redirect href=\"/login\" />;\n  }\n\n  return (\n    <View>\n      <Text>Welcome Back!</Text>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic React Native Path Resolution in iOS Podfile\nDESCRIPTION: Dynamic path resolution using Node's require.resolve() to find the location of react_native_pods script in iOS Podfile. This approach works in monorepos by dynamically resolving the package location instead of using hardcoded paths.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/monorepos.mdx#2025-04-22_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\nrequire File.join(File.dirname(`node --print \"require.resolve('react-native/package.json')'\"`), \"scripts/react_native_pods\")\n```\n\n----------------------------------------\n\nTITLE: Playing Local Media from Assets Directory\nDESCRIPTION: Demonstrates how to play local media files using expo-video. This snippet shows two ways to use local assets: directly with require and using a VideoSource object.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/video.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { VideoSource } from 'expo-video';\n\nconst assetId = require('./assets/bigbuckbunny.mp4');\n\nconst videoSource: VideoSource = {\n  assetId,\n  metadata: {\n    title: 'Big Buck Bunny',\n    artist: 'The Open Movie Project',\n  },\n};\n\nconst player1 = useVideoPlayer(assetId); // You can use the `asset` directly as a video source\nconst player2 = useVideoPlayer(videoSource);\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-document-picker iOS Plugin in app.json\nDESCRIPTION: JSON configuration for app.json that enables iCloud storage for document picker and applies the expo-document-picker plugin. This allows changing the iCloud container environment entitlement.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-document-picker/README.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ios\": {\n    \"usesIcloudStorage\": true,\n    \"bundleIdentifier\": \"com.yourname.yourapp\"\n  },\n  \"plugins\": [\"expo-document-picker\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Logging Constants Example in JavaScript\nDESCRIPTION: A simple JavaScript example that demonstrates how to import and use expo-constants to verify successful installation of Expo modules by logging system fonts to the console.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/bare/installing-expo-modules.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Constants from 'expo-constants';\nconsole.log(Constants.systemFonts);\n```\n\n----------------------------------------\n\nTITLE: Creating Bottom Tab Navigator Layout in Expo Router\nDESCRIPTION: Implements the tab navigator layout with Home and About screens, including basic screen configuration and titles.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/add-navigation.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Tabs } from 'expo-router';\n\nexport default function TabLayout() {\n  return (\n    <Tabs>\n      <Tabs.Screen name=\"index\" options={{ title: 'Home' }} />\n      <Tabs.Screen name=\"about\" options={{ title: 'About' }} />\n    </Tabs>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Navigation Links in Home Screen\nDESCRIPTION: Creates the home screen with navigation link to About page using Expo Router's Link component with custom styling.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/add-navigation.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Text, View, StyleSheet } from 'react-native';\nimport { Link } from 'expo-router';\n\nexport default function Index() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.text}>Home screen</Text>\n      <Link href=\"/about\" style={styles.button}>\n        Go to About screen\n      </Link>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#25292e',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  text: {\n    color: '#fff',\n  },\n  button: {\n    fontSize: 20,\n    textDecorationLine: 'underline',\n    color: '#fff',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-dev-client plugin in app.json\nDESCRIPTION: This snippet demonstrates how to configure the expo-dev-client package using its built-in config plugin in the app.json file. The example sets the launchMode to 'most-recent', which will attempt to launch the most recently opened project first.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/dev-client.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-dev-client\",\n        {\n          \"launchMode\": \"most-recent\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Modal Presentation in Expo Router Layout\nDESCRIPTION: Sets up a Stack layout in Expo Router with a modal screen configuration. This code defines a stack navigator with an index screen and a modal screen, where the modal is configured with the 'modal' presentation mode.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/advanced/modals.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Stack } from 'expo-router';\n\nexport default function Layout() {\n  return (\n    <Stack>\n      <Stack.Screen name=\"index\" />\n      <Stack.Screen\n        name=\"modal\"\n        options={{\n          /* @info Set the <CODE>presentation</CODE> mode to <CODE>modal</CODE> for the modal route. */\n          presentation: 'modal',\n          /* @end */\n        }}\n      />\n    </Stack>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Listing EAS Builds\nDESCRIPTION: Command to view list of builds and their status\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/build/setup.mdx#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ eas build:list\n```\n\n----------------------------------------\n\nTITLE: EAS Build Profile Configuration\nDESCRIPTION: Configuration in eas.json for specifying credentials source per build profile\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/app-signing/local-credentials.mdx#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"amazon-production\": {\n      \"android\": {\n        \"credentialsSource\": \"local\"\n      }\n    },\n    \"google-production\": {\n      \"android\": {\n        \"credentialsSource\": \"remote\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying iOS Podspec to Add DGCharts Dependency\nDESCRIPTION: Updates the iOS podspec file to include the DGCharts library dependency for implementing chart functionality on iOS devices.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/third-party-library.mdx#2025-04-22_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n  s.static_framework = true\n\n  s.dependency 'ExpoModulesCore'\n+ s.dependency 'DGCharts', '~> 5.1.0'\n\n  # Swift/Objective-C compatibility\n```\n\n----------------------------------------\n\nTITLE: Installing expo-modules-autolinking in bare React Native projects\nDESCRIPTION: Command to install the expo-modules-autolinking package using npm. This is specifically for bare React Native projects that have already installed and configured the 'expo' package.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-modules-autolinking/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install expo-modules-autolinking\n```\n\n----------------------------------------\n\nTITLE: RTL Support Configuration\nDESCRIPTION: Configuration for enabling RTL support in Expo applications\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/localization.mdx#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"extra\": {\n      \"supportsRTL\": true\n    },\n    \"plugins\": [\"expo-localization\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Input Values in EAS Build YAML Configuration\nDESCRIPTION: Shows how to provide input values to a step using the 'inputs' property in an EAS Build custom configuration.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: Demo\n  steps:\n    - run:\n        name: Say Hi\n        inputs:\n          name: Expo\n        command: echo \"Hi, ${ inputs.name }!\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Internal Distribution Build Steps for Android - EAS Build - YAML\nDESCRIPTION: YAML file details the build steps for an internal distribution Android build in EAS Build. The workflow includes checking out source, installing dependencies, running prebuild, injecting credentials, building via Gradle, and uploading the resulting artifacts. Each step corresponds to a built-in EAS action, so the environment should have EAS Build runners and required permissions.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_52\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: Simple internal distribution Android build\n  steps:\n    - eas/checkout\n\n    - eas/install_node_modules\n\n    - eas/prebuild\n\n    - eas/inject_android_credentials\n\n    - eas/run_gradle\n\n    - eas/find_and_upload_build_artifacts\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Value in Local strings.xml for Expo Module\nDESCRIPTION: This XML snippet shows how users can configure a custom value in their local strings.xml file. It defines a string resource with the name 'expo_custom_value' and sets its value to 'I Love Expo'.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/config-plugins/development-and-debugging.mdx#2025-04-22_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n    <string name=\"expo_custom_value\" translatable=\"false\">I Love Expo</string>\n</resources>\n```\n\n----------------------------------------\n\nTITLE: Using SafeAreaInsetsContext.Consumer Component\nDESCRIPTION: Example of using the context consumer approach to access safe area insets when hooks cannot be used.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/safe-area-context.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SafeAreaInsetsContext } from 'react-native-safe-area-context';\n\nfunction Component() {\n  return (\n    <SafeAreaInsetsContext.Consumer>\n      {insets => <View style={{ paddingTop: insets.top }} />}\n    </SafeAreaInsetsContext.Consumer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating the React Native TypeScript Component for WebView\nDESCRIPTION: TypeScript code that defines the React component that uses the native view manager to bridge between React Native and the native WebView implementations.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/native-view-tutorial.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ViewProps } from 'react-native';\nimport { requireNativeViewManager } from 'expo-modules-core';\nimport * as React from 'react';\n\nexport type Props = ViewProps;\n\nconst NativeView: React.ComponentType<Props> = requireNativeViewManager('ExpoWebView');\n\nexport default function ExpoWebView(props: Props) {\n  return <NativeView {...props} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring React Native to Exclude Expo from Autolinking\nDESCRIPTION: JavaScript configuration to exclude the Expo package from autolinking in a React Native project, allowing use of Expo CLI without Expo Modules API.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/bare/using-expo-cli.mdx#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  dependencies: {\n    expo: {\n      platforms: {\n        android: null,\n        ios: null,\n        macos: null,\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Importing AuthSession in JavaScript\nDESCRIPTION: Code snippet showing how to import the AuthSession module in a JavaScript file.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/auth-session.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as AuthSession from 'expo-auth-session';\n```\n\n----------------------------------------\n\nTITLE: Styling and Animating Web Modal Content in Expo Router\nDESCRIPTION: This code snippet demonstrates how to style the overlay and modal content in the modal.tsx file. It uses react-native-reanimated for animations and includes a fade-in effect for the overlay and a slide-in effect for the modal content.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/advanced/modals.mdx#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Link } from 'expo-router';\nimport { Pressable, StyleSheet, Text } from 'react-native';\nimport Animated, { FadeIn, SlideInDown } from 'react-native-reanimated';\n\nexport default function Modal() {\n  return (\n    <Animated.View\n      entering={FadeIn}\n      style={{\n        flex: 1,\n        justifyContent: 'center',\n        alignItems: 'center',\n        backgroundColor: '#00000040',\n      }}\n    >\n      <Link href={'/'} asChild>\n        <Pressable style={StyleSheet.absoluteFill} />\n      </Link>\n      <Animated.View\n        entering={SlideInDown}\n        style={{\n          width: '90%',\n          height: '80%',\n          alignItems: 'center',\n          justifyContent: 'center',\n          backgroundColor: 'white',\n        }}\n      >\n        <Text style={{ fontWeight: 'bold', marginBottom: 10 }}>Modal Screen</Text>\n        <Link href=\"/\">\n          <Text>← Go back</Text>\n        </Link>\n      </Animated.View>\n    </Animated.View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Modal Dismiss Functionality with Router\nDESCRIPTION: Enhances a modal screen with dismiss functionality using the router object. This code demonstrates how to check if the modal can go back and conditionally renders a dismiss link, which is particularly important for web implementations.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/advanced/modals.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Link, /* @info Import the <CODE>router</CODE> object which is used to navigate imperatively. */ router /* @end */} from 'expo-router';\nimport { StyleSheet, Text, View } from 'react-native';\n\nexport default function Modal() {\n  /* @info Use <CODE>router.canGoBack()</CODE> to check if the modal is presented as a standalone screen. If the screen was reloaded or navigated to directly, then the modal should be presented as a full screen. You may need to change the UI to account for this. */\n  const isPresented = router.canGoBack();\n  /* @end */\n\n  return (\n    <View style={styles.container}>\n      <Text>Modal screen</Text>\n      /* @info On web, use <CODE>../</CODE> as a simple way to navigate to the root. This is not analogous to <CODE>goBack</CODE>.*/\n      {isPresented && <Link href=\"../\">Dismiss modal</Link>}\n      /* @end */\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using KeepAwake Functions in React Native\nDESCRIPTION: Example of using activateKeepAwake and deactivateKeepAwake functions to imperatively control screen sleep behavior in a class component. Includes buttons to toggle the keep-awake state.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/keep-awake.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { activateKeepAwake, deactivateKeepAwake } from 'expo-keep-awake';\nimport React from 'react';\nimport { Button, View } from 'react-native';\n\nexport default class KeepAwakeExample extends React.Component {\n  render() {\n    return (\n      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n        <Button onPress={this._activate} title=\"Activate\" />\n        <Button onPress={this._deactivate} title=\"Deactivate\" />\n      </View>\n    );\n  }\n\n  _activate = () => {\n    activateKeepAwake();\n    alert('Activated!');\n  };\n\n  _deactivate = () => {\n    deactivateKeepAwake();\n    alert('Deactivated!');\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Using GLView with Reanimated Worklets in React Native\nDESCRIPTION: This example shows how to use GLView with React Native Reanimated worklets. It demonstrates creating a GL context, passing the context ID to a worklet, and recreating the GL object inside the worklet for rendering.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/gl-view.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { View } from 'react-native';\nimport { runOnUI } from 'react-native-reanimated';\nimport { GLView } from 'expo-gl';\n\nfunction render(gl) {\n  'worklet';\n  // add your WebGL code here\n}\n\nfunction onContextCreate(gl) {\n  runOnUI((contextId: number) => {\n    'worklet';\n    const gl = GLView.getWorkletContext(contextId);\n    render(gl);\n  })(gl.contextId);\n}\n\nexport default function App() {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <GLView\n        style={{ width: 300, height: 300 }}\n        enableExperimentalWorkletSupport\n        onContextCreate={onContextCreate}\n      />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Running Expo Project in Production Mode\nDESCRIPTION: This command starts an Expo project in production mode with minification. It disables development features and optimizes the app for performance testing and catching production-only bugs.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/workflow/development-mode.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo start --no-dev --minify\n```\n\n----------------------------------------\n\nTITLE: Initializing a Kotlin Module for Android WebView\nDESCRIPTION: Kotlin code for setting up the basic Android module definition that exposes a native WebView component to React Native using Expo Modules API.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/native-view-tutorial.mdx#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\npackage expo.modules.webview\n\nimport expo.modules.kotlin.modules.Module\nimport expo.modules.kotlin.modules.ModuleDefinition\n\nclass ExpoWebViewModule : Module() {\n  override fun definition() = ModuleDefinition {\n    Name(\"ExpoWebView\")\n\n    View(ExpoWebView::class) {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Application Module from Expo-Application in JavaScript\nDESCRIPTION: This snippet demonstrates how to import the Application module from the expo-application package, which provides APIs to access application metadata. No additional dependencies are required beyond the Expo SDK.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/application.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as Application from 'expo-application';\n```\n\n----------------------------------------\n\nTITLE: Modifying Root Component Registration for EAS Update\nDESCRIPTION: Diff showing how to change from React Native's registerApplication to Expo's registerRootComponent for better asset handling with EAS Update.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/getting-started.mdx#2025-04-22_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\ndiff --git a/index.js b/index.js\nindex a850d03..8fb69fd 100644\n--- a/index.js\n+++ b/index.js\n@@ -2,8 +2,7 @@\n  * @forma\n  */\n\n-import {AppRegistry} from 'react-native';\n+import {registerRootComponent} from 'expo';\n import App from './App';\n-import {name as appName} from './app.json';\n\n-AppRegistry.registerComponent(appName, () => App);\n+export default registerRootComponent(App);\n```\n\n----------------------------------------\n\nTITLE: Configuring Expo Router Plugin in app.json (JSON)\nDESCRIPTION: This snippet demonstrates the addition of the 'expo-router' plugin to the app.json file, which is necessary to enable Expo Router features in a project. The 'plugins' array under the 'expo' key should include 'expo-router' to ensure automatic configuration. No additional parameters are required; the presence of the string ensures the setup. Proper syntax should be maintained as shown. The expected input is a JSON object to be used as your project's configuration file.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/router-ui.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"expo\\\": {\\n    \\\"plugins\\\": [\\\"expo-router\\\"]\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Expo Notifications in app.json\nDESCRIPTION: JSON configuration for expo-notifications plugin showing how to set up notification icons, colors, default channels, and custom sounds for the application.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/notifications.mdx#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-notifications\",\n        {\n          \"icon\": \"./local/assets/notification-icon.png\",\n          \"color\": \"#ffffff\",\n          \"defaultChannel\": \"default\",\n          \"sounds\": [\n            \"./local/assets/notification-sound.wav\",\n            \"./local/assets/notification-sound-other.wav\"\n          ]\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-screen-orientation via app.json (Expo config plugin) - JSON\nDESCRIPTION: This snippet shows how to configure expo-screen-orientation in app.json using Expo's config plugins. The configuration sets iOS to require full screen and specifies an initial orientation for iOS via the \"plugins\" array. Dependencies include the expo-screen-orientation package and Expo CLI. Key parameters: requireFullScreen (boolean) for iOS full screen enforcement, initialOrientation (string) which defines the starting orientation. Expected input is valid JSON in app.json; output is applied to the native project when building the app. This configuration must be present before building a new binary.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/screen-orientation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"expo\\\": {\\n    \\\"ios\\\": {\\n      \\\"requireFullScreen\\\": true\\n    },\\n    \\\"plugins\\\": [\\n      [\\n        \\\"expo-screen-orientation\\\",\\n        {\\n          \\\"initialOrientation\\\": \\\"DEFAULT\\\"\\n        }\\n      ]\\n    ]\\n  }\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Basic MapView Implementation in React Native\nDESCRIPTION: A simple example showing how to implement a basic map view that fills the entire screen using react-native-maps. The component renders a MapView inside a container with appropriate styling.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/map-view.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport MapView from 'react-native-maps';\nimport { StyleSheet, View } from 'react-native';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <MapView style={styles.map} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  map: {\n    width: '100%',\n    height: '100%',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic MapView Component in React Native\nDESCRIPTION: A simple implementation of the MapView component from react-native-maps. This example shows how to set up a full-screen map within a React Native application with proper styling.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/map-view.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport MapView from 'react-native-maps';\nimport { StyleSheet, View } from 'react-native';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <MapView style={styles.map} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  map: {\n    width: '100%',\n    height: '100%',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing DOM Component in TypeScript\nDESCRIPTION: Creates a basic DOM component using the 'use dom' directive to render HTML elements in a native app context.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/dom-components.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n'use dom';\n\nexport default function DOMComponent({ name }: { name: string }) {\n  return (\n    <div>\n      <h1>Hello, {name}</h1>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing expo-background-task package\nDESCRIPTION: Command to install the expo-background-task package using npx expo. This is the initial step required for implementing background tasks in your Expo project.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-background-task/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-background-task\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-av plugin in app.json\nDESCRIPTION: Configures the expo-av plugin in app.json for iOS, asking users for microphone permissions. Prerequisite: expo-av plugin must be installed. Inputs include permission settings, while output adjusts app config.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/av.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-av\",\n        {\n          \"microphonePermission\": \"Allow $(PRODUCT_NAME) to access your microphone.\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Location Permissions in Info.plist\nDESCRIPTION: XML configuration for iOS Info.plist file to set up location permission description keys required for location services.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/location.mdx#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<key>NSLocationAlwaysAndWhenInUseUsageDescription</key>\n<string>Allow $(PRODUCT_NAME) to use your location</string>\n<key>NSLocationAlwaysUsageDescription</key>\n<string>Allow $(PRODUCT_NAME) to use your location</string>\n<key>NSLocationWhenInUseUsageDescription</key>\n<string>Allow $(PRODUCT_NAME) to use your location</string>\n```\n\n----------------------------------------\n\nTITLE: Setting up KeyboardProvider in Expo Router\nDESCRIPTION: This snippet shows how to set up the KeyboardProvider from react-native-keyboard-controller in an Expo Router layout file.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/keyboard-handling.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Stack } from 'expo-router';\nimport { KeyboardProvider } from 'react-native-keyboard-controller';\n\nexport default function RootLayout() {\n  return (\n    <KeyboardProvider>\n      <Stack>\n        <Stack.Screen name=\"home\" />\n        <Stack.Screen name=\"chat\" />\n      </Stack>\n    </KeyboardProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Update Release Notes URL Command\nDESCRIPTION: Command to update the versions endpoint with release notes URL\nSOURCE: https://github.com/expo/expo/blob/main/guides/releasing/Release Workflow.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\net update-versions --sdkVersion XX.X.X --key releaseNoteUrl --value <url>\n```\n\n----------------------------------------\n\nTITLE: Github Context Usage in Workflow YAML\nDESCRIPTION: Demonstrates how to use the 'github.ref_name' context variable to conditionally execute a job in an EAS Workflow. The 'if' keyword specifies the condition that must be met for the 'build_ios' job to run. This snippet illustrates how to customize workflow behavior based on the context of the run, here only building the iOS app when on the 'main' branch.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/workflows/syntax.mdx#_snippet_19\n\nLANGUAGE: YAML\nCODE:\n```\njobs:\n  build_ios:\n    type: build\n    # @info #\n    if: ${{ github.ref_name == 'main' }}\n    # @end #\n    params:\n      platform: ios\n      profile: production\n```\n\n----------------------------------------\n\nTITLE: Implementing Playback Status Updates in expo-av\nDESCRIPTION: Example showing how to handle playback status updates and implement playback state management.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/av.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n_onPlaybackStatusUpdate = playbackStatus => {\n  if (!playbackStatus.isLoaded) {\n    if (playbackStatus.error) {\n      console.log(`Encountered a fatal error during playback: ${playbackStatus.error}`);\n    }\n  } else {\n    if (playbackStatus.isPlaying) {\n    } else {\n    }\n    if (playbackStatus.isBuffering) {\n    }\n    if (playbackStatus.didJustFinish && !playbackStatus.isLooping) {\n    }\n  }\n};\n\nplaybackObject.setOnPlaybackStatusUpdate(this._onPlaybackStatusUpdate);\n```\n\n----------------------------------------\n\nTITLE: Importing the LightSensor Module from Expo Sensors in JavaScript\nDESCRIPTION: This snippet shows how to import the LightSensor API from the expo-sensors library for use in a JavaScript or React Native project. The import statement is a prerequisite for accessing light sensor data through the expo-sensors package. No parameters are required, and it serves as a boilerplate for further LightSensor integration. There are no outputs, constraints are simply package availability and environment support.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/light-sensor.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { LightSensor } from 'expo-sensors';\n```\n\n----------------------------------------\n\nTITLE: Setting Android Permissions for expo-contacts\nDESCRIPTION: This XML snippet shows the necessary permissions to be added to the AndroidManifest.xml for accessing contacts. It includes the `READ_CONTACTS` and `WRITE_CONTACTS` permissions required for the library to function on Android devices.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/contacts.mdx#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"android.permission.READ_CONTACTS\" />\n<uses-permission android:name=\"android.permission.WRITE_CONTACTS\" />\n```\n\n----------------------------------------\n\nTITLE: Async Server Component Example\nDESCRIPTION: Server component implementation demonstrating async data fetching and rendering\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/server-components.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport 'server-only';\n\nimport { Image, Text, View } from 'react-native';\n\nexport async function Pokemon() {\n  const res = await fetch('https://pokeapi.co/api/v2/pokemon/2');\n  const json = await res.json();\n  return (\n    <View style={{ padding: 8, borderWidth: 1 }}>\n      <Text style={{ fontWeight: 'bold', fontSize: 24 }}>{json.name}</Text>\n      <Image source={{ uri: json.sprites.front_default }} style={{ width: 100, height: 100 }} />\n\n      {json.abilities.map(ability => (\n        <Text key={ability.ability.name}>- {ability.ability.name}</Text>\n      ))}\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Vendored Stylesheets - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates importing CSS directly from a node module to apply global styles across the app, a feature possible when CSS support is enabled for web in Expo. Vendored stylesheets such as emoji-mart CSS can be integrated in this way for use with UI libraries or component kits. This is only effective on web, and ignored on native platforms.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/config/metro.mdx#2025-04-22_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n// Applies the styles app-wide.\\nimport 'emoji-mart/css/emoji-mart.css';\n```\n\n----------------------------------------\n\nTITLE: Configuring EAS Update Channel in eas.json\nDESCRIPTION: This JSON snippet shows how to configure build profiles with specific channels in the eas.json file. It defines preview and production profiles with their respective channels.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/debug.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"preview\": {\n      \"distribution\": \"internal\",\n      \"channel\": \"preview\"\n    },\n    \"production\": {\n      \"channel\": \"production\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Expo Config Plugin for Custom Module in JavaScript\nDESCRIPTION: This JavaScript code creates an Expo config plugin for the custom module. It defines functions to modify the strings.xml file using the AndroidConfig and withStringsXml utilities from expo/config-plugins.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/config-plugins/development-and-debugging.mdx#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst { AndroidConfig, withStringsXml } = require('expo/config-plugins');\n\nfunction withCustom(config, value) {\n  return withStringsXml(config, config => {\n    config.modResults = setStrings(config.modResults, value);\n    return config;\n  });\n}\n\nfunction setStrings(strings, value) {\n  // Helper to add string.xml JSON items or overwrite existing items with the same name.\n  return AndroidConfig.Strings.setStringItem(\n    [\n      // XML represented as JSON\n      // <string name=\"expo_custom_value\" translatable=\"false\">value</string>\n      { $: { name: 'expo_custom_value', translatable: 'false' }, _: value },\n    ],\n    strings\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ImagePicker Plugin in Expo Config\nDESCRIPTION: Example configuration for expo-image-picker plugin in app.json, showing how to set custom photos permission message.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/imagepicker.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-image-picker\",\n        {\n          \"photosPermission\": \"The app accesses your photos to let you share them with your friends.\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring code signing in app.json for Expo projects\nDESCRIPTION: This JSON snippet shows the configuration needed in app.json to enable code signing for EAS Update. It specifies the path to the code signing certificate and metadata about the signing algorithm.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/code-signing.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"updates\": {\n      \"codeSigningCertificate\": \"./certs/certificate.pem\",\n      \"codeSigningMetadata\": {\n        \"keyid\": \"main\",\n        \"alg\": \"rsa-v1_5-sha256\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running pod-install using NPX\nDESCRIPTION: Basic command to execute pod-install using NPX package runner. This command will automatically handle CocoaPods installation, directory navigation, and dependency updates.\nSOURCE: https://github.com/expo/expo/blob/main/packages/pod-install/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx pod-install\n```\n\n----------------------------------------\n\nTITLE: Importing expo-sqlite Module\nDESCRIPTION: Shows how to import the expo-sqlite module in a JavaScript file.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/sqlite.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as SQLite from 'expo-sqlite';\n```\n\n----------------------------------------\n\nTITLE: Using Screen Capture Prevention Hook in React Native\nDESCRIPTION: Demonstrates how to use the usePreventScreenCapture hook to prevent screen recording. This hook makes the screen unrecordable as long as the component is mounted, with no additional configuration needed.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/screen-capture.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { usePreventScreenCapture } from 'expo-screen-capture';\nimport { Text, View } from 'react-native';\n\nexport default function ScreenCaptureExample() {\n  usePreventScreenCapture();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>As long as this component is mounted, this screen is unrecordable!</Text>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Rewrites in app.json\nDESCRIPTION: Demonstrates how to set up URL rewrites that act as proxies, rendering content from a different route without changing the visible URL.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/advanced/redirects.mdx#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    [\n      \"expo-router\",\n      {\n        \"rewrites\": [\n          {\n            \"source\": \"/redirect/from/here\",\n            \"destination\": \"/to/this/route\"\n          }\n        ]\n      }\n    ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Running Expo Asset Optimization with Quality Setting\nDESCRIPTION: Command to optimize image assets with a specific compression quality setting (90%).\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/optimize-assets.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo-optimize --quality 90\n```\n\n----------------------------------------\n\nTITLE: Running iOS Build Locally\nDESCRIPTION: Command to build and run the iOS app on a connected device using local development environment\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/development-builds/create-a-build.mdx#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo run:ios --device\n```\n\n----------------------------------------\n\nTITLE: Implementing SplashScreen in React Native App\nDESCRIPTION: This snippet demonstrates how to use the SplashScreen module to keep the splash screen visible while loading app resources and then hide it when the app has rendered initial content. It includes setting animation options, loading fonts, and handling app readiness state.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/splash-screen.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useCallback, useEffect, useState } from 'react';\nimport { Text, View } from 'react-native';\nimport Entypo from '@expo/vector-icons/Entypo';\nimport * as SplashScreen from 'expo-splash-screen';\nimport * as Font from 'expo-font';\n\n// Keep the splash screen visible while we fetch resources\nSplashScreen.preventAutoHideAsync();\n\n// Set the animation options. This is optional.\nSplashScreen.setOptions({\n  duration: 1000,\n  fade: true,\n});\n\nexport default function App() {\n  const [appIsReady, setAppIsReady] = useState(false);\n\n  useEffect(() => {\n    async function prepare() {\n      try {\n        // Pre-load fonts, make any API calls you need to do here\n        await Font.loadAsync(Entypo.font);\n        // Artificially delay for two seconds to simulate a slow loading\n        // experience. Remove this if you copy and paste the code!\n        await new Promise(resolve => setTimeout(resolve, 2000));\n      } catch (e) {\n        console.warn(e);\n      } finally {\n        // Tell the application to render\n        setAppIsReady(true);\n      }\n    }\n\n    prepare();\n  }, []);\n\n  const onLayoutRootView = useCallback(() => {\n    if (appIsReady) {\n      // This tells the splash screen to hide immediately! If we call this after\n      // `setAppIsReady`, then we may see a blank screen while the app is\n      // loading its initial state and rendering its first pixels. So instead,\n      // we hide the splash screen once we know the root view has already\n      // performed layout.\n      SplashScreen.hide();\n    }\n  }, [appIsReady]);\n\n  if (!appIsReady) {\n    return null;\n  }\n\n  return (\n    <View\n      style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}\n      onLayout={onLayoutRootView}>\n      <Text>SplashScreen Demo! 👋</Text>\n      <Entypo name=\"rocket\" size={30} />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating About Screen in Expo Router\nDESCRIPTION: Implements a basic About screen component with styled text and container layout using React Native components.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/add-navigation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Text, View, StyleSheet } from 'react-native';\n\nexport default function AboutScreen() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.text}>About screen</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#25292e',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  text: {\n    color: '#fff',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring UIBackgroundModes for Background Fetch on iOS (Manual)\nDESCRIPTION: This XML snippet demonstrates how to manually configure the Expo.plist (or Info.plist) file for an iOS project to enable background fetch functionality. Adding `fetch` to the `UIBackgroundModes` array is required by iOS to allow the app to be woken up periodically for background tasks. This step is necessary if not using Continuous Native Generation (CNG).\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/background-fetch.mdx#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<key>UIBackgroundModes</key>\n<array>\n  <string>fetch</string>\n</array>\n```\n\n----------------------------------------\n\nTITLE: Implementing SplashScreen Control in React Native App\nDESCRIPTION: This example demonstrates how to keep the splash screen visible while loading app resources (fonts, API calls) and then hide it once the app has rendered its initial content. It uses useState and useEffect hooks to track loading state and the useCallback pattern for handling layout completion.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/splash-screen.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useCallback, useEffect, useState } from 'react';\nimport { Text, View } from 'react-native';\nimport Entypo from '@expo/vector-icons/Entypo';\nimport * as SplashScreen from 'expo-splash-screen';\nimport * as Font from 'expo-font';\n\n// Keep the splash screen visible while we fetch resources\nSplashScreen.preventAutoHideAsync();\n\nexport default function App() {\n  const [appIsReady, setAppIsReady] = useState(false);\n\n  useEffect(() => {\n    async function prepare() {\n      try {\n        // Pre-load fonts, make any API calls you need to do here\n        await Font.loadAsync(Entypo.font);\n        // Artificially delay for two seconds to simulate a slow loading\n        // experience. Remove this if you copy and paste the code!\n        await new Promise(resolve => setTimeout(resolve, 2000));\n      } catch (e) {\n        console.warn(e);\n      } finally {\n        // Tell the application to render\n        setAppIsReady(true);\n      }\n    }\n\n    prepare();\n  }, []);\n\n  const onLayoutRootView = useCallback(async () => {\n    if (appIsReady) {\n      // This tells the splash screen to hide immediately! If we call this after\n      // `setAppIsReady`, then we may see a blank screen while the app is\n      // loading its initial state and rendering its first pixels. So instead,\n      // we hide the splash screen once we know the root view has already\n      // performed layout.\n      await SplashScreen.hideAsync();\n    }\n  }, [appIsReady]);\n\n  if (!appIsReady) {\n    return null;\n  }\n\n  return (\n    <View\n      style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}\n      onLayout={onLayoutRootView}>\n      <Text>SplashScreen Demo! 👋</Text>\n      <Entypo name=\"rocket\" size={30} />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Hashing a String with Expo Crypto in React Native (JSX)\nDESCRIPTION: Demonstrates importing Crypto from 'expo-crypto' and using its digestStringAsync API to generate a SHA256 hash of a string inside a React Native functional component. Requires the 'expo-crypto' package. The main input is a string to hash, and it logs the digest to the console. Output is not shown on screen but can be viewed via debug logs. This usage assumes an Expo or React Native environment, with internet or local access if on the web, and standard app bootstrap requirements.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/crypto.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEffect } from 'react';\\nimport { StyleSheet, View, Text } from 'react-native';\\nimport * as Crypto from 'expo-crypto';\\n\\nexport default function App() {\\n  useEffect(() => {\\n    (async () => {\\n      const digest = await Crypto.digestStringAsync(\\n        Crypto.CryptoDigestAlgorithm.SHA256,\\n        'GitHub stars are neat 🌟'\\n      );\\n      console.log('Digest: ', digest);\\n      /* Some crypto operation... */\\n    })();\\n  }, []);\\n\\n  return (\\n    <View style={styles.container}>\\n      <Text>Crypto Module Example</Text>\\n    </View>\\n  );\\n}\\n\\nconst styles = StyleSheet.create({\\n  container: {\\n    flex: 1,\\n    backgroundColor: '#fff',\\n    alignItems: 'center',\\n    justifyContent: 'center',\\n  },\\n});\n```\n\n----------------------------------------\n\nTITLE: Executing PRAGMA Queries in SQLite\nDESCRIPTION: Shows how to execute PRAGMA queries for configuring SQLite database settings like journal mode and foreign keys.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/sqlite.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst db = await SQLite.openDatabaseAsync('databaseName');\nawait db.execAsync('PRAGMA journal_mode = WAL');\nawait db.execAsync('PRAGMA foreign_keys = ON');\n```\n\n----------------------------------------\n\nTITLE: Nested Text Components in React Native TextInput\nDESCRIPTION: Demonstrates how to render styled text within a TextInput component using nested Text components to achieve basic rich text formatting.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/editing-richtext.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<TextInput>\n  <Text>\n    <Text style={{ fontWeight: 900 }}>Some bold text</Text>Some regular text\n  </Text>\n</TextInput>\n```\n\n----------------------------------------\n\nTITLE: iOS Background Audio Configuration in app.json\nDESCRIPTION: Configuration example for enabling background audio playback in iOS standalone apps using expo-av.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/audio-av.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"ios\": {\n      \"infoPlist\": {\n        \"UIBackgroundModes\": [\n          \"audio\"\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Expo Router Home Layout with Tabs\nDESCRIPTION: Example of how to set up a Tab navigator in Expo Router, which replaces the HomeTabs function from React Navigation.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/migrate/from-react-navigation.mdx#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport { Tabs } from 'expo-router';\n\nexport default function HomeLayout() {\n  return <Tabs />;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-sqlite Plugin in app.json\nDESCRIPTION: Example of configuring the expo-sqlite plugin in the app.json file. It demonstrates how to enable FTS, use SQLCipher, and set custom build flags for Android and iOS.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/sqlite.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-sqlite\",\n        {\n          \"enableFTS\": true,\n          \"useSQLCipher\": true,\n          \"android\": {\n            \"enableFTS\": false,\n            \"useSQLCipher\": false\n          },\n          \"ios\": {\n            \"customBuildFlags\": [\"-DSQLITE_ENABLE_DBSTAT_VTAB=1 -DSQLITE_ENABLE_SNAPSHOT=1\"]\n          }\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Metro for Firebase JS SDK in Expo\nDESCRIPTION: Configuration for Metro bundler to support Firebase JS SDK version 9.7.x and above in Expo projects. It adds support for the 'cjs' file extension.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/using-firebase.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { getDefaultConfig } = require('@expo/metro-config');\n\nconst defaultConfig = getDefaultConfig(__dirname);\ndefaultConfig.resolver.sourceExts.push('cjs');\n\nmodule.exports = defaultConfig;\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Network Changes in React Native\nDESCRIPTION: Shows how to subscribe to network state updates using NetInfo.addEventListener(). This allows running code whenever the network connection changes, and demonstrates how to unsubscribe when no longer needed.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/netinfo.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst unsubscribe = NetInfo.addEventListener(state => {\n  console.log('Connection type', state.type);\n  console.log('Is connected?', state.isConnected);\n});\n\n// To unsubscribe to these update, just use:\nunsubscribe();\n```\n\n----------------------------------------\n\nTITLE: Importing expo-document-picker in React Native (JavaScript)\nDESCRIPTION: This code snippet shows how to import the expo-document-picker module in a React Native application with ES6 syntax. This statement is required to access all API methods provided by expo-document-picker, such as picking documents and interacting with the system's file picker UI. The only dependency is that expo-document-picker is correctly installed in the project. The input is a standard import statement, and the output is access to the DocumentPicker API under the DocumentPicker namespace. There are no notable limitations for this import statement itself.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/document-picker.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as DocumentPicker from 'expo-document-picker';\n```\n\n----------------------------------------\n\nTITLE: Configuring UIBackgroundModes for iOS Background Fetch\nDESCRIPTION: Add the 'fetch' value to the UIBackgroundModes array in the Expo.plist file to enable background fetch on iOS.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/background-fetch.mdx#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<key>UIBackgroundModes</key>\n  <array>\n    <string>fetch</string>\n  </array>\n```\n\n----------------------------------------\n\nTITLE: Creating Themed Components with create-primitives in TSX\nDESCRIPTION: Shows how to use the create function to generate a themed Text component with multiple variants for size and color. This demonstrates the basic setup of theme-able components with typesafety.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-dev-client-components/README.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Text } from 'react-native';\nimport { create } from './create-primitives';\n\nconst Heading = create(Text, {\n  base: {\n    fontFamily: 'Helvetica',\n  },\n\n  variants: {\n    size: {\n      large: {\n        fontSize: 28,\n        lineHeight: 34,\n      },\n      medium: {\n        fontSize: 22,\n        lineHeight: 28,\n      },\n      small: {\n        fontSize: 18,\n        lineHeight: 22,\n      },\n    },\n    color: {\n      success: {\n        color: 'green',\n      },\n      danger: {\n        color: 'red',\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Importing ImageManipulator Module in JavaScript\nDESCRIPTION: Shows how to import the ImageManipulator module from the expo-image-manipulator package. This is the standard import statement required before using any of the package's functionality.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/imagemanipulator.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as ImageManipulator from 'expo-image-manipulator';\n```\n\n----------------------------------------\n\nTITLE: Enabling Lazy Imports in babel-preset-expo - JavaScript\nDESCRIPTION: This configuration enables lazyImports in babel-preset-expo by setting lazyImports to true. With this setting, Babel will only evaluate imported modules when their bindings are accessed, increasing startup performance when possible. Works only when disableImportExportTransform is false (the default on native platforms). Input: Babel config array; Output: Lazily evaluated imports for optimized module loading.\nSOURCE: https://github.com/expo/expo/blob/main/packages/babel-preset-expo/README.md#2025-04-22_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n[\n    'babel-preset-expo',\n    {\n        lazyImports: true\n    }\n],\n```\n\n----------------------------------------\n\nTITLE: Implementing Webhook Server in Express.js\nDESCRIPTION: Example implementation of a webhook server using Express.js that verifies webhook signatures and processes incoming webhook requests from EAS.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/webhooks.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst crypto = require('crypto');\nconst express = require('express');\nconst bodyParser = require('body-parser');\nconst safeCompare = require('safe-compare');\n\nconst app = express();\napp.use(bodyParser.text({ type: '*/*' }));\napp.post('/webhook', (req, res) => {\n  const expoSignature = req.headers['expo-signature'];\n  const hmac = crypto.createHmac('sha1', process.env.SECRET_WEBHOOK_KEY);\n  hmac.update(req.body);\n  const hash = `sha1=${hmac.digest('hex')}`;\n  if (!safeCompare(expoSignature, hash)) {\n    res.status(500).send(\"Signatures didn't match!\");\n  } else {\n    res.send('OK!');\n  }\n});\napp.listen(8080, () => console.log('Listening on port 8080'));\n```\n\n----------------------------------------\n\nTITLE: Configuring Apple Sign In in Expo app.json\nDESCRIPTION: Configuration to enable the Sign In with Apple capability in an Expo app by setting the ios.usesAppleSignIn property to true in the app.json file.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/apple-authentication.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ios\": {\n    \"usesAppleSignIn\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing expo-modules-core via npm\nDESCRIPTION: Command to install the expo-modules-core package using npm.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-modules-core/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install expo-modules-core\n```\n\n----------------------------------------\n\nTITLE: Using Global CSS Styles in Expo Components\nDESCRIPTION: This snippet shows how to use global CSS styles in Expo components by importing the stylesheet and applying the class names to both web and React Native components.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/config/metro.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport './styles.css';\nimport { View } from 'react-native';\n\nexport default function App() {\n  return (\n    <>\n      {/* Use `className` to assign the style with React DOM components. */}\n      <div className=\"container\">Hello World</div>\n\n      {/* Use `style` with the following syntax to append class names in React Native for web. */}\n      <View\n        style={{\n          $$css: true,\n          _: 'container',\n        }}>\n        Hello World\n      </View>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Font Family Implementation\nDESCRIPTION: React Native component demonstrating platform-specific font family selection using Platform.select() for Android and iOS.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/user-interface/fonts.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Platform } from 'react-native';\n\n<Text\n  style={{\n    fontFamily: Platform.select({\n      android: 'Inter_900Black',\n      ios: 'Inter-Black',\n    }),\n  }}>\n  Inter Black\n</Text>\n```\n\n----------------------------------------\n\nTITLE: Job Steps Configuration YAML\nDESCRIPTION: Demonstrates how to define steps within a job. Each step can execute commands, specified using the `run` property, and can have a name. `steps` are defined inside a custom job or a build job.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/workflows/syntax.mdx#_snippet_35\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  my_job:\n    # @info #\n    steps:\n      - name: My first step\n        run: echo \"Hello World\"\n    # @end #\n```\n\n----------------------------------------\n\nTITLE: Capturing a FullHD Image with captureRef in React Native\nDESCRIPTION: This example demonstrates how to use captureRef to capture a FullHD (1080x1080) image, taking into account the device's pixel ratio. It uses the PixelRatio API to calculate the correct dimensions.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/captureRef.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst targetPixelCount = 1080; // If you want full HD pictures\nconst pixelRatio = PixelRatio.get(); // The pixel ratio of the device\n// pixels * pixelRatio = targetPixelCount, so pixels = targetPixelCount / pixelRatio\nconst pixels = targetPixelCount / pixelRatio;\n\nconst result = await captureRef(this.imageContainer, {\n  result: 'tmpfile',\n  height: pixels,\n  width: pixels,\n  quality: 1,\n  format: 'png',\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring EAS Build Profiles for APK Generation\nDESCRIPTION: JSON configuration in eas.json that demonstrates different ways to configure build profiles for generating APK files. Shows four preview profiles with different methods to enable APK builds and a production profile.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/build-reference/apk.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"preview\": {\n      \"android\": {\n        \"buildType\": \"apk\"\n      }\n    },\n    \"preview2\": {\n      \"android\": {\n        \"gradleCommand\": \":app:assembleRelease\"\n      }\n    },\n    \"preview3\": {\n      \"developmentClient\": true\n    },\n    \"preview4\": {\n      \"distribution\": \"internal\"\n    },\n    \"production\": {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Barometer Sensor Monitoring in React Native with Expo\nDESCRIPTION: A complete React Native component that demonstrates how to subscribe to and display barometer sensor data. The example shows how to toggle a listener, read pressure values in hectopascals, and access relative altitude on iOS devices.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/barometer.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View, Platform } from 'react-native';\nimport { Barometer } from 'expo-sensors';\n\nexport default function App() {\n  const [{ pressure, relativeAltitude }, setData] = useState({ pressure: 0, relativeAltitude: 0 });\n  const [subscription, setSubscription] = useState(null);\n\n  const toggleListener = () => {\n    subscription ? unsubscribe() : subscribe();\n  };\n\n  const subscribe = () => {\n    setSubscription(Barometer.addListener(setData));\n  };\n\n  const unsubscribe = () => {\n    subscription && subscription.remove();\n    setSubscription(null);\n  };\n\n  return (\n    <View style={styles.wrapper}>\n      <Text>Barometer: Listener {subscription ? 'ACTIVE' : 'INACTIVE'}</Text>\n      <Text>Pressure: {pressure} hPa</Text>\n      <Text>\n        Relative Altitude:{' '}\n        {Platform.OS === 'ios' ? `${relativeAltitude} m` : `Only available on iOS`}\n      </Text>\n      <TouchableOpacity onPress={toggleListener} style={styles.button}>\n        <Text>Toggle listener</Text>\n      </TouchableOpacity>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  button: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#eee',\n    padding: 10,\n    marginTop: 15,\n  },\n  wrapper: {\n    flex: 1,\n    alignItems: 'stretch',\n    justifyContent: 'center',\n    paddingHorizontal: 20,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Links with Base URL Support in Expo Router\nDESCRIPTION: Demonstrates using the Link component from expo-router that automatically handles baseUrl prefixing. When exported, the generated HTML link will include the baseUrl prefix.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/more/expo-cli.mdx#2025-04-23_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Link } from 'expo-router';\n\nexport default function Blog() {\n  return <Link href=\"/blog/123\">Go to blog post</Link>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Filters for GitHub Actions Path Filter\nDESCRIPTION: This snippet provides a detailed configuration for the 'dorny/paths-filter' GitHub Action. It highlights how to define filters through YAML documents, including options like base branch, reference branch, and file listing modes, allowing for comprehensive and customizable path filtering in GitHub workflows.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-updates/e2e/setup/paths-filter/README.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- uses: dorny/paths-filter@v3\n  with:\n    # Defines filters applied to detected changed files.\n    # Each filter has a name and a list of rules.\n    # Rule is a glob expression - paths of all changed\n    # files are matched against it.\n    # Rule can optionally specify if the file\n    # should be added, modified, or deleted.\n    # For each filter, there will be a corresponding output variable to\n    # indicate if there's a changed file matching any of the rules.\n    # Optionally, there can be a second output variable\n    # set to list of all files matching the filter.\n    # Filters can be provided inline as a string (containing valid YAML document),\n    # or as a relative path to a file (e.g.: .github/filters.yaml).\n    # Filters syntax is documented by example - see examples section.\n    filters: ''\n\n    # Branch, tag, or commit SHA against which the changes will be detected.\n    # If it references the same branch it was pushed to,\n    # changes are detected against the most recent commit before the push.\n    # Otherwise, it uses git merge-base to find the best common ancestor between\n    # current branch (HEAD) and base.\n    # When merge-base is found, it's used for change detection - only changes\n    # introduced by the current branch are considered.\n    # All files are considered as added if there is no common ancestor with\n    # base branch or no previous commit.\n    # This option is ignored if action is triggered by pull_request event.\n    # Default: repository default branch (e.g. master)\n    base: ''\n\n    # Git reference (e.g. branch name) from which the changes will be detected.\n    # Useful when workflow can be triggered only on the default branch (e.g. repository_dispatch event)\n    # but you want to get changes on a different branch.\n    # This option is ignored if action is triggered by pull_request event.\n    # default: ${{ github.ref }}\n    ref:\n\n    # How many commits are initially fetched from the base branch.\n    # If needed, each subsequent fetch doubles the\n    # previously requested number of commits until the merge-base\n    # is found, or there are no more commits in the history.\n    # This option takes effect only when changes are detected\n    # using git against base branch (feature branch workflow).\n    # Default: 100\n    initial-fetch-depth: ''\n\n    # Enables listing of files matching the filter:\n    #   'none'  - Disables listing of matching files (default).\n    #   'csv'   - Coma separated list of filenames.\n    #             If needed, it uses double quotes to wrap filename with unsafe characters.\n    #   'json'  - File paths are formatted as JSON array.\n    #   'shell' - Space delimited list usable as command-line argument list in Linux shell.\n    #             If needed, it uses single or double quotes to wrap filename with unsafe characters.\n    #   'escape'- Space delimited list usable as command-line argument list in Linux shell.\n    #             Backslash escapes every potentially unsafe character.\n    # Default: none\n    list-files: ''\n\n    # Relative path under $GITHUB_WORKSPACE where the repository was checked out.\n    working-directory: ''\n\n    # Personal access token used to fetch a list of changed files\n    # from GitHub REST API.\n    # It's only used if action is triggered by a pull request event.\n    # GitHub token from workflow context is used as default value.\n    # If an empty string is provided, the action falls back to detect\n    # changes using git commands.\n    # Default: ${{ github.token }}\n    token: ''\n\n    # Optional parameter to override the default behavior of file matching algorithm. \n    # By default files that match at least one pattern defined by the filters will be included.\n    # This parameter allows to override the \"at least one pattern\" behavior to make it so that\n    # all of the patterns have to match or otherwise the file is excluded. \n    # An example scenario where this is useful if you would like to match all \n    # .ts files in a sub-directory but not .md files. \n    # The filters below will match markdown files despite the exclusion syntax UNLESS \n    # you specify 'every' as the predicate-quantifier parameter. When you do that, \n    # it will only match the .ts files in the subdirectory as expected.\n    #\n    # backend:\n    #  - 'pkg/a/b/c/**'\n    #  - '!**/*.jpeg'\n    #  - '!**/*.md'\n    predicate-quantifier: 'some'\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic App Settings in JavaScript\nDESCRIPTION: This JavaScript code exports a configuration object for an app, using environment variables to dynamically set the app name and bundle identifier based on the build environment (production or development).\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/build/automate-submissions.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default () => {\n  return {\n    name: process.env.APP_ENV === 'production' ? 'My App' : 'My App (DEV)',\n    ios: {\n      bundleIdentifier: process.env.APP_ENV === 'production' ? 'com.my.app' : 'com.my.app-dev',\n    },\n    // ... other config here\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering ContentSpotlight Video in Expo Plugin Docs (JSX)\nDESCRIPTION: This snippet uses the ContentSpotlight component to visually highlight the DateTimePicker component. The file prop links to a video demonstrating the component, while the loop prop ensures the video does not automatically repeat. It requires the ContentSpotlight component to be available in the UI library and the video file to reside in the specified project path.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/date-time-picker.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ContentSpotlight file=\"sdk/datetimepicker.mp4\" loop={false} />\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-audio Plugin in app.json\nDESCRIPTION: This JSON snippet shows how to configure the `expo-audio` plugin within the `app.json` file. It specifically demonstrates setting a custom permission message for microphone usage on iOS via the `microphonePermission` key.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/audio.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-audio\",\n        {\n          \"microphonePermission\": \"Allow $(PRODUCT_NAME) to access your microphone.\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Prebuild Command in React Native\nDESCRIPTION: Execute the prebuild command to generate native directories for Android and iOS.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/workflow/continuous-native-generation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo prebuild\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Permissions for DeviceMotion\nDESCRIPTION: This XML snippet is necessary for manually configuring iOS projects to grant permissions for accessing device motion. It specifically updates the Info.plist file with NSMotionUsageDescription, required for describing the purpose of motion data access.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/devicemotion.mdx#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<key>NSMotionUsageDescription</key>\n<string>Allow $(PRODUCT_NAME) to access your device motion</string>\n```\n\n----------------------------------------\n\nTITLE: Multiple Steps Configuration in EAS Build YAML\nDESCRIPTION: Illustrates how to define multiple sequential steps in an EAS Build custom configuration, including project checkout, dependency installation, and running tests.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: Run tests\n  steps:\n    - eas/checkout\n    - run:\n        name: Install dependencies\n        command: npm install\n    - run:\n        name: Run tests\n        command: |\n          echo \"Running tests...\"\n          npm test\n```\n\n----------------------------------------\n\nTITLE: Gradle Properties Config Plugin Example\nDESCRIPTION: Reference to an example of modifying gradle.properties through a config plugin, linking to the implementation in the native-component-list app configuration.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/workflow/continuous-native-generation.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ngithub.com/expo/expo/blob/1c994bb042ad47fbf6878e3b5793d4545f2d1208/apps/native-component-list/app.config.js#L21-L28\n```\n\n----------------------------------------\n\nTITLE: Using MeshGradientView in React Native with Expo\nDESCRIPTION: This snippet demonstrates how to implement a full-screen mesh gradient using the MeshGradientView component. It shows configuration of a 3x3 grid with custom colors and control points to create a visually pleasing gradient effect.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/mesh-gradient.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { MeshGradientView } from 'expo-mesh-gradient';\n\nfunction App() {\n  return (\n    <MeshGradientView\n      style={{ flex: 1 }}\n      columns={3}\n      rows={3}\n      colors={['red', 'purple', 'indigo', 'orange', 'white', 'blue', 'yellow', 'green', 'cyan']}\n      points={[\n        [0.0, 0.0],\n        [0.5, 0.0],\n        [1.0, 0.0],\n        [0.0, 0.5],\n        [0.5, 0.5],\n        [1.0, 0.5],\n        [0.0, 1.0],\n        [0.5, 1.0],\n        [1.0, 1.0],\n      ]}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring AD_ID Permission in AndroidManifest.xml (XML)\nDESCRIPTION: Shows how to add the com.google.android.gms.permission.AD_ID permission to the AndroidManifest.xml file for native Android projects using tracking features. This is required for apps targeting Android 13 (API level 33) or higher to access the Advertising ID for tracking and analytics functionalities. The snippet is to be placed within the <manifest> of android/app/src/main/AndroidManifest.xml.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/tracking-transparency.mdx#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\\\"com.google.android.gms.permission.AD_ID\\\"/>\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-camera plugin in app.json\nDESCRIPTION: Example configuration for the expo-camera config plugin in the app.json file. It sets camera and microphone permission messages for iOS and enables audio recording for Android.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/camera.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-camera\",\n        {\n          \"cameraPermission\": \"Allow $(PRODUCT_NAME) to access your camera\",\n          \"microphonePermission\": \"Allow $(PRODUCT_NAME) to access your microphone\",\n          \"recordAudioAndroid\": true\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Prevent Screen Capture Hook in React Native\nDESCRIPTION: This React component utilizes the `usePreventScreenCapture` hook from the `expo-screen-capture` library to prevent screens from being captured as long as the component is mounted. It demonstrates integration with a basic React Native UI.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/screen-capture.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { usePreventScreenCapture } from 'expo-screen-capture';\nimport { Text, View } from 'react-native';\n\nexport default function ScreenCaptureExample() {\n  usePreventScreenCapture();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>As long as this component is mounted, this screen is unrecordable!</Text>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: GitLab CI EAS Build Configuration\nDESCRIPTION: GitLab CI configuration using Node.js Alpine image to run EAS builds with npm caching support.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/build/building-on-ci.mdx#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nimage: node:alpine\n\ncache:\n  key: ${CI_COMMIT_REF_SLUG}\n  paths:\n    - .npm\n    # or with Yarn:\n    #- .yarn\n\nstages:\n  - build\n\nbefore_script:\n  - npm ci --cache .npm\n  # or with Yarn:\n  #- yarn install --cache-folder .yarn\n\neas-build:\n  stage: build\n  script:\n    - apk add --no-cache bash\n    - npx eas-cli build --platform all --non-interactive --no-wait\n```\n\n----------------------------------------\n\nTITLE: Modifying Podfile for Multiple iOS Targets\nDESCRIPTION: This snippet demonstrates how to modify the Podfile to support multiple iOS targets. It replaces a single target with an abstract target that includes common configurations and defines separate targets for different build profiles.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/build-reference/variants.mdx#2025-04-22_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nabstract_target 'common' do\n  # put common target configuration here\n\n  target 'myapp' do\n  end\n\n  target 'myapp-dev' do\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Redirect Component in JSX\nDESCRIPTION: This snippet imports a Redirect component and uses it to redirect users to the EAS Hosting introduction page. The Redirect component is likely a custom component designed to handle page redirections within the project.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/hosting/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Redirect from '~/components/plugins/Redirect';\n\n<Redirect path=\"/eas/hosting/introduction\" />\n```\n\n----------------------------------------\n\nTITLE: Enabling Background Audio Playback on iOS via app.json\nDESCRIPTION: This JSON snippet demonstrates how to configure an Expo app for background audio playback on iOS. By adding 'audio' to the `UIBackgroundModes` array within the `ios.infoPlist` section of `app.json`, the app is permitted to continue playing audio even when it's not in the foreground. This configuration is necessary for standalone iOS apps.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/audio.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    ...\n    \"ios\": {\n      ...\n      \"infoPlist\": {\n        ...\n        \"UIBackgroundModes\": [\n          \"audio\"\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: EAS Build Command for Credentials Generation\nDESCRIPTION: Command to initiate the EAS build process which prompts for credentials generation if not already configured.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/app-signing/managed-credentials.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\neas build\n```\n\n----------------------------------------\n\nTITLE: Caching Podfile.lock in EAS Build Configuration\nDESCRIPTION: This JSON snippet demonstrates how to cache the iOS Podfile.lock file by adding it to the cache.paths array in the eas.json configuration file, which can be useful for ensuring deterministic builds when using prebuild.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/build-reference/caching.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"production\": {\n      \"cache\": {\n        \"paths\": [\"./ios/Podfile.lock\"]\n        /* @hide ... */ /* @end */\n      }\n      /* @hide ... */ /* @end */\n    }\n    /* @hide ... */ /* @end */\n  }\n  /* @hide ... */ /* @end */\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS App Icons with System Appearance Variations in app.json\nDESCRIPTION: Example configuration in app.json for specifying different iOS app icons based on system appearance modes (dark, light, and tinted). This overrides the top-level icon configuration in the Expo config file.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/user-interface/splash-screen-and-app-icon.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"ios\": {\n      \"icon\": {\n        \"dark\": \"./assets/images/ios-dark.png\",\n        \"light\": \"./assets/images/ios-light.png\",\n        \"tinted\": \"./assets/images/ios-tinted.png\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Stack Navigation for Feed Tab\nDESCRIPTION: Sets up a stack navigator within a tab using initialRouteName setting to ensure proper deep linking behavior. This allows for nested navigation within the feed tab.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/basics/common-navigation-patterns.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Stack } from 'expo-router';\n\nexport const unstable_settings = {\n  initialRouteName: 'index',\n};\n\nexport default function FeedLayout() {\n  return <Stack />;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Android Build Locally\nDESCRIPTION: Build and run the Android app locally using expo-dev-client.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/development-builds/create-a-build.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo run:android\n```\n\n----------------------------------------\n\nTITLE: React Navigation Stack and Tab Navigator Structure\nDESCRIPTION: Example of a React Navigation structure with Stack and Tab navigators, which needs to be migrated to Expo Router's file-based routing system.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/migrate/from-react-navigation.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nfunction HomeTabs() {\n  return (\n    <Tab.Navigator>\n      <Tab.Screen name=\"Home\" component={Home} />\n      <Tab.Screen name=\"Feed\" component={Feed} />\n    </Tab.Navigator>\n  );\n}\n\nfunction App() {\n  return (\n    <NavigationContainer\n      linking={\n        {\n          // ...linking configuration\n        }\n      }\n    >\n      <Stack.Navigator>\n        <Stack.Screen name=\"Settings\" component={Settings} />\n        <Stack.Screen name=\"Profile\" component={Profile} />\n        <Stack.Screen\n          name=\"Home\"\n          component={HomeTabs}\n          options={{\n            title: 'Home Screen',\n          }}\n        />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Image Component with Expo\nDESCRIPTION: Example showing basic usage of the Image component with blurhash placeholder, transition effects, and styling. Demonstrates core features like content fitting and placeholder images.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/image.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Image } from 'expo-image';\nimport { StyleSheet, View } from 'react-native';\n\nconst blurhash =\n  '|rF?hV%2WCj[ayj[a|j[az_NaeWBj@ayfRayfQfQM{M|azj[azf6fQfQfQIpWXofj[ayj[j[fQayWCoeoeaya}j[ayfQa{oLj?j[WVj[ayayj[fQoff7azayj[ayj[j[ayofayayayj[fQj[ayayj[ayfjj[j[ayjuayj[';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Image\n        style={styles.image}\n        source=\"https://picsum.photos/seed/696/3000/2000\"\n        placeholder={{ blurhash }}\n        contentFit=\"cover\"\n        transition={1000}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  image: {\n    flex: 1,\n    width: '100%',\n    backgroundColor: '#0553',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Passing Binary Data to SQLite Database\nDESCRIPTION: Shows how to store and retrieve binary data in a SQLite database using Uint8Array. This example creates a table with a BLOB column, inserts binary data into it, and then retrieves and verifies the data.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/sqlite.mdx#2025-04-22_snippet_12\n\nLANGUAGE: ts\nCODE:\n```\nawait db.execAsync(`\nDROP TABLE IF EXISTS blobs;\nCREATE TABLE IF NOT EXISTS blobs (id INTEGER PRIMARY KEY NOT NULL, data BLOB);\n`);\n\nconst blob = new Uint8Array([0x00, 0x01, 0x02, 0x03, 0x04, 0x05]);\nawait db.runAsync('INSERT INTO blobs (data) VALUES (?)', blob);\n\nconst row = await db.getFirstAsync<{ data: Uint8Array }>('SELECT * FROM blobs');\nexpect(row.data).toEqual(blob);\n```\n\n----------------------------------------\n\nTITLE: Executing Async SQLite Transactions\nDESCRIPTION: Demonstrates how to execute queries within an async transaction, including handling of transaction scope and query timing.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/sqlite.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst db = await SQLite.openDatabaseAsync('databaseName');\n\nawait db.withTransactionAsync(async () => {\n  const result = await db.getFirstAsync('SELECT COUNT(*) FROM USERS');\n  console.log('Count:', result.rows[0]['COUNT(*)']);\n});\n```\n\n----------------------------------------\n\nTITLE: Importing DocumentPicker Module\nDESCRIPTION: This JavaScript code imports the DocumentPicker module from expo-document-picker. This is necessary to access the document selection API provided by the library.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/document-picker.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as DocumentPicker from 'expo-document-picker';\n```\n\n----------------------------------------\n\nTITLE: Preventing Splash Screen Autohide within Component Mount (TypeScript)\nDESCRIPTION: Illustrates preventing splash screen autohide within a React component's lifecycle. The component initially renders `null`. In `componentDidMount`, `SplashScreen.preventAutoHideAsync()` is called, followed by asynchronous resource loading (`prepareResources`). Once resources are ready, the component's state (`appIsReady`) is updated, triggering a re-render, and `SplashScreen.hideAsync()` is called in the `setState` callback to hide the splash screen.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-splash-screen/README.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\nimport * as SplashScreen from 'expo-splash-screen';\n\nexport default class App extends React.Component {\n  state = {\n    appIsReady: false,\n  };\n\n  async componentDidMount() {\n    // Prevent native splash screen from autohiding\n    try {\n      await SplashScreen.preventAutoHideAsync();\n    } catch (e) {\n      console.warn(e);\n    }\n    this.prepareResources();\n  }\n\n  /**\n   * Method that serves to load resources and make API calls\n   */\n  prepareResources = async () => {\n    await performAPICalls(...);\n    await downloadAssets(...);\n\n    this.setState({ appIsReady: true }, async () => {\n      await SplashScreen.hideAsync();\n    });\n  }\n\n  render() {\n    if (!this.state.appIsReady) {\n      return null;\n    }\n\n    return (\n      <View style={styles.container}>\n        <Text style={styles.text}>SplashScreen Demo! 👋</Text>\n      </View>\n    )\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: '#aabbcc',\n  },\n  text: {\n    color: 'white',\n    fontWeight: 'bold',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Picker (wheel) Component with SwiftUI\nDESCRIPTION: This code snippet demonstrates how to use the `Picker` component from `@expo/ui/swift-ui` to create a wheel picker. It imports the `Picker` component, defines a set of options, and uses the `selectedIndex`, `onOptionSelected`, `variant` and `style` props to manage the selected option and visual appearance.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/ui.mdx#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Picker } from '@expo/ui/swift-ui';\n\n<Picker\n  options={['$', '$$', '$$$', '$$$$']}\n  selectedIndex={selectedIndex}\n  onOptionSelected={({ nativeEvent: { index } }) => {\n    setSelectedIndex(index);\n  }}\n  variant=\"wheel\"\n  style={{\n    height: 100,\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Build-time Rendering with unstable_settings\nDESCRIPTION: Demonstrates how to configure a route for build-time rendering using the unstable_settings export. This allows components to be rendered at build-time and never re-rendered in production.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/server-components.mdx#2025-04-22_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Text, View } from 'react-native';\n\nexport const unstable_settings = {\n  // This component will be rendered at build-time and never re-rendered in production.\n  render: 'static',\n};\n\nexport default function Index() {\n  return (\n    <View>\n      <Text>Hello, world!</Text>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-media-library with Config Plugin\nDESCRIPTION: JSON configuration example for the expo-media-library config plugin, showing how to set custom permission messages and enable media location access in app.json.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/media-library.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-media-library\",\n        {\n          \"photosPermission\": \"Allow $(PRODUCT_NAME) to access your photos.\",\n          \"savePhotosPermission\": \"Allow $(PRODUCT_NAME) to save photos.\",\n          \"isAccessMediaLocationEnabled\": true\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Opening iOS Settings for Location Permissions using React Native\nDESCRIPTION: This snippet demonstrates how to use the Linking API from React Native to open the iOS Settings app, allowing users to manually enable background location permissions if needed.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/location.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Linking } from 'react-native';\n\nfunction openSettings() {\n  Linking.openURL('app-settings:');\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Canary Release\nDESCRIPTION: Commands to install the latest canary release of Expo SDK and update related packages\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/index.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Install the alpha version of expo and its related packages\n$ npm install expo@canary && npx expo install --fix\n```\n\n----------------------------------------\n\nTITLE: Renaming Devices in EAS Build and Apple Developer Portal\nDESCRIPTION: This command allows you to assign friendly names to your devices in both Expo and the Apple Developer Portal for easier identification in EAS Build.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/build/internal-distribution.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ eas device:rename\n```\n\n----------------------------------------\n\nTITLE: Optimizing Initial Render with initialWindowMetrics in React Native (JSX)\nDESCRIPTION: Shows how to potentially speed up the initial application render by providing initial safe area metrics. Import `initialWindowMetrics` and pass it to the `initialMetrics` prop of `SafeAreaProvider`. This optimization has limitations and should not be used if the provider remounts or with `react-native-navigation`.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/safe-area-context.mdx#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SafeAreaProvider, initialWindowMetrics } from 'react-native-safe-area-context';\n\nfunction App() {\n  return <SafeAreaProvider initialMetrics={initialWindowMetrics}>...</SafeAreaProvider>;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Inline HTML in React Native WebView\nDESCRIPTION: This snippet shows how to use the WebView component to render inline HTML content in a React Native application. It sets the originWhitelist to allow all origins and provides a simple HTML string as the source. The styling ensures full-screen display and accounts for the status bar.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/webview.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { WebView } from 'react-native-webview';\nimport Constants from 'expo-constants';\nimport { StyleSheet } from 'react-native';\n\nexport default function App() {\n  return (\n    <WebView\n      style={styles.container}\n      originWhitelist={['*']}\n      source={{ html: '<h1><center>Hello world</center></h1>' }}\n    />\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: Constants.statusBarHeight,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Initiating EAS Update Rollback in Bash\nDESCRIPTION: This command starts the rollback process for EAS Update. It launches an interactive guide to help users select the type of rollback and perform the rollback operation.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/rollbacks.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ eas update:rollback\n```\n\n----------------------------------------\n\nTITLE: Using Synchronous Functions in JavaScript\nDESCRIPTION: Demonstrates how to import and use a native module with a synchronous function from JavaScript code using the requireNativeModule utility.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/module-api.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { requireNativeModule } from 'expo-modules-core';\n\n// Assume that we have named the module \"MyModule\"\nconst MyModule = requireNativeModule('MyModule');\n\nfunction getMessage() {\n  return MyModule.mySyncFunction('bar');\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Module Styles\nDESCRIPTION: This snippet shows how to define CSS Module styles in a separate file for scoped styling in Expo projects.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/config/metro.mdx#2025-04-22_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n.text {\n  color: red;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring iCloud Environment in app.json\nDESCRIPTION: This JSON configuration snippet sets the iCloud environment for an Expo app using the expo-document-picker plugin. The iCloudContainerEnvironment is set to 'Production', which is crucial for enabling iCloud-related features within the app when built with EAS Build.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/document-picker.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-document-picker\",\n        {\n          \"iCloudContainerEnvironment\": \"Production\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ViewPager Component with react-native-pager-view in React Native\nDESCRIPTION: This example demonstrates how to create a multi-page swipeable interface using the PagerView component. It creates a three-page carousel with simple text content, and includes proper styling for container and page elements.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/view-pager.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { StyleSheet, View, Text } from 'react-native';\nimport PagerView from 'react-native-pager-view';\n\nexport default function MyPager() {\n  return (\n    <View style={styles.container}>\n      <PagerView style={styles.container} initialPage={0}>\n        <View style={styles.page} key=\"1\">\n          <Text>First page</Text>\n          <Text>Swipe ➡️</Text>\n        </View>\n        <View style={styles.page} key=\"2\">\n          <Text>Second page</Text>\n        </View>\n        <View style={styles.page} key=\"3\">\n          <Text>Third page</Text>\n        </View>\n      </PagerView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  page: {\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Single Step Configuration in EAS Build YAML\nDESCRIPTION: Shows a simple example of defining a single step in an EAS Build custom configuration to print a greeting.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: Greeting\n  steps:\n    - run: echo \"Hello world\"\n```\n\n----------------------------------------\n\nTITLE: Complete Next.js Configuration with Expo\nDESCRIPTION: Full Next.js configuration including strict mode, SWC minification, and package transpilation.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/using-nextjs.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst { withExpo } = require('@expo/next-adapter');\n\n/** @type {import('next').NextConfig} */\nconst nextConfig = withExpo({\n  reactStrictMode: true,\n  swcMinify: true,\n  transpilePackages: [\n    'react-native',\n    'react-native-web',\n    'expo',\n  ],\n  experimental: {\n    forceSwcTransforms: true,\n  },\n});\n\nmodule.exports = nextConfig;\n```\n\n----------------------------------------\n\nTITLE: Using a Local Config Plugin in app.json\nDESCRIPTION: Shows how to reference a local config plugin module (created in a separate `.js` file) within the `plugins` array in `app.json`. This method connects the project configuration to the custom plugin logic defined externally.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/fingerprint.mdx#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    /* @hide ... */ /* @end */\n    \"plugins\": \"./plugins/withMyPlugin\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Android app with custom variant and app ID\nDESCRIPTION: Command for building an Android app with a specific product flavor variant and application ID. Useful for projects with multiple flavors like free/paid versions.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/more/expo-cli.mdx#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo run:android --variant freeDebug --app-id dev.expo.myapp.free\n```\n\n----------------------------------------\n\nTITLE: Using ADB Logcat for Android Crash Reports\nDESCRIPTION: Command to view streaming logs from an Android device using Android Debug Bridge. This helps in diagnosing crashes in Android production apps by showing detailed error logs.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/debugging/runtime-issues.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ adb logcat\n```\n\n----------------------------------------\n\nTITLE: Configuring SplashScreen with Config Plugin in app.json\nDESCRIPTION: This snippet shows how to configure the expo-splash-screen package using its built-in config plugin in the app.json file. It demonstrates setting background color, image paths for light and dark modes, and image width for the splash screen.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/splash-screen.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-splash-screen\",\n        {\n          \"backgroundColor\": \"#232323\",\n          \"image\": \"./assets/splash-icon.png\",\n          \"dark\": {\n            \"image\": \"./assets/splash-icon-dark.png\",\n            \"backgroundColor\": \"#000000\"\n          },\n          \"imageWidth\": 200\n        }\n      ]\n    ],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding NSContactsUsageDescription in Info.plist (React Native, XML)\nDESCRIPTION: Demonstrates adding the NSContactsUsageDescription key to Info.plist for iOS, which is required to prompt users for contacts access. This step is necessary when not using Expo's managed workflow. The string value sets the message displayed to users. No external package needed, but required for expo-contacts to function on iOS.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/contacts.mdx#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<key>NSContactsUsageDescription</key>\\n<string>Allow $(PRODUCT_NAME) to access your contacts</string>\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Image in eas.json\nDESCRIPTION: Example configuration for specifying build image settings in eas.json for both Android and iOS platforms using the 'latest' image tag.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/build/building-from-github.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"production\": {\n      \"android\": {\n        \"image\": \"latest\"\n      },\n      \"ios\": {\n        \"image\": \"latest\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for Updates Manually in React Native with expo-updates\nDESCRIPTION: A React Native component that demonstrates how to manually check for updates using expo-updates. The example shows how to check if an update is available, fetch it, and reload the app. It also includes error handling for failed updates.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/updates.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { View, Button } from 'react-native';\nimport * as Updates from 'expo-updates';\n\nfunction App() {\n  async function onFetchUpdateAsync() {\n    try {\n      const update = await Updates.checkForUpdateAsync();\n\n      if (update.isAvailable) {\n        await Updates.fetchUpdateAsync();\n        await Updates.reloadAsync();\n      }\n    } catch (error) {\n      // You can also add an alert() to see the error message in case of an error when fetching updates.\n      alert(`Error fetching latest Expo update: ${error}`);\n    }\n  }\n\n  return (\n    <View>\n      <Button title=\"Fetch update\" onPress={onFetchUpdateAsync} />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Terser Minifier in Metro for Expo CLI\nDESCRIPTION: This snippet demonstrates how to set up Terser as the minifier in Metro configuration for Expo CLI. It includes setting the minifier path and providing a placeholder for Terser options.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/minify.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { getDefaultConfig } = require('expo/metro-config');\n\nconst config = getDefaultConfig(__dirname);\n\nconfig.transformer.minifierPath = 'metro-minify-terser';\nconfig.transformer.minifierConfig = {\n  // Terser options...\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Generating Native Project Directories with Expo Prebuild using Bash\nDESCRIPTION: This command utilizes the Expo CLI to generate the native `android` and `ios` project directories from the Expo app configuration (app.json/app.config.js) and installed dependencies. It's central to the Continuous Native Generation workflow, allowing native projects to be created on demand. Requires Node.js, npm/npx, and Expo CLI within an Expo project directory.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/workflow/overview.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo prebuild\n```\n\n----------------------------------------\n\nTITLE: Mocking Modules in Metro Configuration (JavaScript)\nDESCRIPTION: This code snippet shows how to mock modules for specific platforms in Metro configuration. It demonstrates mocking the 'lodash' module to be empty on the web platform.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/config/metro.mdx#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nconst { getDefaultConfig } = require('expo/metro-config');\n\n/** @type {import('expo/metro-config').MetroConfig} */\nconst config = getDefaultConfig(__dirname);\n\nconfig.resolver.resolveRequest = (context, moduleName, platform) => {\n  if (platform === 'web' && moduleName === 'lodash') {\n    return {\n      type: 'empty',\n    };\n  }\n\n  // Ensure you call the default resolver.\n  return context.resolveRequest(context, moduleName, platform);\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Minimal App Store Review Information in JSON\nDESCRIPTION: Minimal required configuration for Apple App Store review including basic contact information. Contains essential fields like name, email and phone number for the review team to contact if needed.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/metadata/schema.mdx#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"configVersion\": 0,\n  \"apple\": {\n    \"review\": {\n      \"firstName\": \"John\",\n      \"lastName\": \"Doe\",\n      \"email\": \"john@example.com\",\n      \"phone\": \"+1 123 456 7890\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-web-browser in app.json\nDESCRIPTION: Example of how to configure the expo-web-browser plugin in the app.json file. It shows how to enable the experimental launcher activity for Android.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/webbrowser.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-web-browser\",\n        {\n          \"experimentalLauncherActivity\": true\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing useFonts Hook in Root Layout\nDESCRIPTION: Implementation of font loading using useFonts hook with splash screen handling in the root layout component.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/user-interface/fonts.mdx#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Inter_900Black, useFonts } from '@expo-google-fonts/inter';\nimport * as SplashScreen from 'expo-splash-screen';\nimport {useEffect} from 'react';\n\nSplashScreen.preventAutoHideAsync();\n\nexport default function RootLayout() {\n  const [loaded, error] = useFonts({\n    Inter_900Black,\n  });\n\n  useEffect(() => {\n    if (loaded || error) {\n      SplashScreen.hideAsync();\n    }\n  }, [loaded, error]);\n\n  if (!loaded && !error) {\n    return null;\n  }\n\n  return (\n    /* ... */\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS permissions for expo-image-picker\nDESCRIPTION: XML snippet showing the required iOS permissions for photo library, camera, and microphone access in the Info.plist file.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-image-picker/README.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<key>NSPhotoLibraryUsageDescription</key>\n<string>Give $(PRODUCT_NAME) permission to save photos</string>\n<key>NSCameraUsageDescription</key>\n<string>Give $(PRODUCT_NAME) permission to access your camera</string>\n<key>NSMicrophoneUsageDescription</key>\n<string>Give $(PRODUCT_NAME) permission to use your microphone</string>\n```\n\n----------------------------------------\n\nTITLE: Exporting Android Keystore to PEM Format Using Keytool\nDESCRIPTION: This command exports an Android keystore certificate to PEM format for submission to Google Play Support when resetting an upload key. It requires the key alias from credentials.json and the path to the keystore file.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/app-signing/app-credentials.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$keytool -export -rfc -alias alias_from_step_1 -file certificate_for_google.pem -keystore ./path/to/keystore.jks\n```\n\n----------------------------------------\n\nTITLE: Android Push Notification Payload Specification in TypeScript\nDESCRIPTION: This TypeScript code defines the FirebaseData interface for the data payload of push notifications on Android. It specifies optional fields like title, message, subtitle, sound, vibrate, and badge, which should be included in the data object of the notification.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/notifications.mdx#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface FirebaseData {\n  title?: string;\n  message?: string;\n  subtitle?: string;\n  sound?: boolean | string;\n  vibrate?: boolean | number[];\n  badge?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating MainActivity.java in Android for Manual Setup\nDESCRIPTION: A diff showing how to update the Android MainActivity.java file to use 'main' as the main component name. This modification is only required if your app does not use Expo Prebuild to generate the android directory.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/register-root-component.mdx#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n  @Override\n  protected String getMainComponentName() {\n+    return \"main\";\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Usage Example of expo-image Component in React Native\nDESCRIPTION: Demonstrates how to use the Image component from expo-image in a React Native application. The example shows setting up a container view and rendering an image with blurhash placeholder, content fit, and transition effects.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/image.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Image } from 'expo-image';\nimport { StyleSheet, View } from 'react-native';\n\nconst blurhash =\n  '|rF?hV%2WCj[ayj[a|j[az_NaeWBj@ayfRayfQfQM{M|azj[azf6fQfQfQIpWXofj[ayj[j[fQayWCoeoeaya}j[ayfQa{oLj?j[WVj[ayayj[fQoff7azayj[ayj[j[ayofayayayj[fQj[ayayj[ayfjj[j[ayjuayj[';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Image\n        style={styles.image}\n        source=\"https://picsum.photos/seed/696/3000/2000\"\n        placeholder={{ blurhash }}\n        contentFit=\"cover\"\n        transition={1000}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  image: {\n    flex: 1,\n    width: '100%',\n    backgroundColor: '#0553',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-location Plugin in app.json\nDESCRIPTION: Configuration example showing how to set up expo-location plugin in app.json with custom permission message for location services.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/location.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-location\",\n        {\n          \"locationAlwaysAndWhenInUsePermission\": \"Allow $(PRODUCT_NAME) to use your location.\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring app.config.js with Custom Base Modifiers\nDESCRIPTION: This JavaScript configuration shows how to use custom base modifiers in an Expo app.config.js file. It demonstrates the proper ordering of plugins, with base modifiers needing to be placed last to ensure they write results to disk after all other modifications.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/config-plugins/development-and-debugging.mdx#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n// Required for external files using TS\nrequire('ts-node/register');\n\nimport {\n  withAppDelegateHeaderBaseMod,\n  withSimpleAppDelegateHeaderMod,\n} from './withAppDelegateHeaderBaseMod.ts';\n\nexport default ({ config }) => {\n  if (!config.plugins) config.plugins = [];\n  config.plugins.push(\n    withSimpleAppDelegateHeaderMod,\n\n    // Base mods MUST be last\n    withAppDelegateHeaderBaseMod\n  );\n  return config;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Code Signing Metadata in app.json\nDESCRIPTION: Example field in app.json that needs to be modified during key rotation or removed when disabling code signing. The keyid can be changed to assist in debugging during key rotation.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/code-signing.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"updates.codeSigningMetadata\"\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies in EAS Build YAML Configuration\nDESCRIPTION: Shows how to use the 'run' key to execute a command for installing dependencies in an EAS Build custom configuration.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: Install npm dependencies\n  steps:\n    - eas/checkout\n    - run:\n        name: Install dependencies\n        command: npm install\n```\n\n----------------------------------------\n\nTITLE: Enhancing the Button Component with Theming and Icons in React Native (tsx)\nDESCRIPTION: Modifies the `Button` component in `components/Button.tsx` to support an optional `theme` prop. If `theme` is set to 'primary', it applies specific inline styles (border, background color, text color) and includes a `FontAwesome` icon next to the label. Requires `@expo/vector-icons/FontAwesome` dependency. Conditional rendering is used to display either the primary themed button or the default button.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/build-a-screen.mdx#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StyleSheet, View, Pressable, Text } from 'react-native';\n/* @tutinfo Import FontAwesome. */import FontAwesome from '@expo/vector-icons/FontAwesome';/* @end */\n\ntype Props = {\n  label: string;\n  theme?: 'primary';\n};\n\nexport default function Button({ label, /* @tutinfo The prop <CODEtheme</CODE> to detect the button variant. */theme/* @end */ }: Props) {\n  /* @tutinfo Conditionally render the primary themed button. */\n  if (theme === 'primary') {\n  /* @end */\n    return (\n      <View\n        style={[\n          styles.buttonContainer,\n          { borderWidth: 4, borderColor: '#ffd33d', borderRadius: 18 },\n        ]}>\n        <Pressable\n          style={[styles.button, { backgroundColor: '#fff' }]}\n          onPress={() => alert('You pressed a button.')}>\n          <FontAwesome name=\"picture-o\" size={18} color=\"#25292e\" style={styles.buttonIcon} />\n          <Text style={[styles.buttonLabel, { color: '#25292e' }]}>{label}</Text>\n        </Pressable>\n      </View>\n    );\n  /* @tutinfo */\n  }\n  /* @end */\n\n  return (\n    <View style={styles.buttonContainer}>\n      <Pressable style={styles.button} onPress={() => alert('You pressed a button.')}>\n        <Text style={styles.buttonLabel}>{label}</Text>\n      </Pressable>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  buttonContainer: {\n    width: 320,\n    height: 68,\n    marginHorizontal: 20,\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 3,\n  },\n  button: {\n    borderRadius: 10,\n    width: '100%',\n    height: '100%',\n    alignItems: 'center',\n    justifyContent: 'center',\n    flexDirection: 'row',\n  },\n  /* @tutinfo Conditionally render the primary themed button. */\n  buttonIcon: {\n    paddingRight: 8,\n  },\n  /* @end */\n  buttonLabel: {\n    color: '#fff',\n    fontSize: 16,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring .npmrc for Both npm and Private Registry\nDESCRIPTION: Advanced .npmrc configuration that enables installing packages from both the official npm registry (for scoped packages) and a private registry, with appropriate authentication.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/build-reference/private-npm-packages.mdx#2025-04-22_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\n//registry.npmjs.org/:_authToken=${NPM_TOKEN}\n@johndoe:registry=https://registry.npmjs.org/\nregistry=https://registry.johndoe.com/\n```\n\n----------------------------------------\n\nTITLE: Building and Launching Android App with Custom App ID\nDESCRIPTION: Command to build and launch an Android app with a custom application ID using both --variant and --app-id flags.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/local-app-development.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo run:android --variant freeDebug --app-id dev.expo.myapp.free\n```\n\n----------------------------------------\n\nTITLE: Configuring Asset Selection (SDK 51 and below)\nDESCRIPTION: Configuration in app.json for specifying which assets should be included in updates using the extra.updates.assetPatternsToBeBundled property. This example includes all PNG files in the app/images directory and its subdirectories.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/asset-selection.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n  \"expo\": {\n    \"extra\": {\n      \"updates\": {\n        \"assetPatternsToBeBundled\": [\n          \"app/images/**/*.png\"\n        ]\n      }\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Adding Navigation Link to Home Screen in Expo Router (TypeScript)\nDESCRIPTION: This code updates the HomeScreen component to include a Link for navigation to the details screen. It demonstrates how to use the Link component from Expo Router for in-app navigation.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/file-based-routing.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Link } from 'expo-router';\nimport { View, Text, StyleSheet } from 'react-native';\n\nexport default function HomeScreen() {\n  return (\n    <View style={styles.container}>\n      <Text>Home</Text>\n      <Link href=\"/details\">View details</Link>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Running an EAS Build with a Custom Build Config\nDESCRIPTION: This command runs an EAS build for the Android platform using the 'test' environment profile, which was configured with a custom build configuration in the previous steps.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/custom-builds/get-started.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ eas build -p android -e test\n```\n\n----------------------------------------\n\nTITLE: Generating Android Upload Key with Keytool\nDESCRIPTION: Command to generate an upload key for signing Android applications using the Java keytool utility. Creates a keystore file with RSA algorithm and 2048-bit key size valid for 10000 days.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/local-app-production.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo keytool -genkey -v -keystore my-upload-key.keystore -alias my-key-alias -keyalg RSA -keysize 2048 -validity 10000\n```\n\n----------------------------------------\n\nTITLE: Running EAS Metadata Pull Command\nDESCRIPTION: Command to pull existing app store information into a store.config.json file\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/metadata/getting-started.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ eas metadata:pull\n```\n\n----------------------------------------\n\nTITLE: Configuring Async Routes in Expo Router Config (JSON)\nDESCRIPTION: This snippet shows how to enable async routes in the Expo Router config plugin within the app.json file. It demonstrates setting platform-specific options for asyncRoutes.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/reference/async-routes.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-router\",\n        {\n          \"origin\": \"https://acme.com\",\n          \"asyncRoutes\": {\n            \"web\": true,\n            \"android\": false,\n            \"default\": \"development\"\n          }\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing the Constants Module in JavaScript\nDESCRIPTION: This code snippet shows how to import the `Constants` module from the `expo-constants` package. This is the entry point for accessing various system and application constants provided by the library within a JavaScript or TypeScript file.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/constants.mdx#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport Constants from 'expo-constants';\n```\n\n----------------------------------------\n\nTITLE: Creating an Express Server for Expo Web Exports - TypeScript\nDESCRIPTION: Implements an Express server in TypeScript to serve static client files and handle all routing via @expo/server for production Expo web exports. The script disables the x-powered-by header, uses compression and logging, sets NODE_ENV to production, and mounts static files from the client build directory. It uses createRequestHandler from @expo/server for universal request routing. The server listens on the specified PORT environment variable or defaults to 3000. Dependencies: express, compression, morgan, @expo/server. Requires transpilation if not run directly under ts-node.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/reference/api-routes.mdx#2025-04-22_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\n#!/usr/bin/env node\\n\\nconst path = require('path');\\nconst { createRequestHandler } = require('@expo/server/adapter/express');\\n\\nconst express = require('express');\\nconst compression = require('compression');\\nconst morgan = require('morgan');\\n\\nconst CLIENT_BUILD_DIR = path.join(process.cwd(), 'dist/client');\\nconst SERVER_BUILD_DIR = path.join(process.cwd(), 'dist/server');\\n\\nconst app = express();\\n\\napp.use(compression());\\n\\n// http://expressjs.com/en/advanced/best-practice-security.html#at-a-minimum-disable-x-powered-by-header\\napp.disable('x-powered-by');\\n\\nprocess.env.NODE_ENV = 'production';\\n\\napp.use(\\n  express.static(CLIENT_BUILD_DIR, {\\n    maxAge: '1h',\\n    extensions: ['html'],\\n  })\\n);\\n\\napp.use(morgan('tiny'));\\n\\napp.all(\\n  '*',\\n  createRequestHandler({\\n    build: SERVER_BUILD_DIR,\\n  })\\n);\\nconst port = process.env.PORT || 3000;\\n\\napp.listen(port, () => {\\n  console.log(`Express server listening on port ${port}`);\\n});\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring EAS JSON Build Profiles with Channels\nDESCRIPTION: JSON configuration for EAS build profiles specifying different channels (development, preview, production) for update distribution. Each build profile is assigned a specific channel to control update targeting.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/eas/team-development.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"development\": {\n      \"channel\": \"development\"\n    },\n    \"ios-simulator\": {\n    },\n    \"preview\": {\n      \"channel\": \"preview\"\n    },\n    \"production\": {\n      \"channel\": \"production\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Root Layout with Stack Navigator in Expo Router\nDESCRIPTION: This snippet shows how to set up the root layout using a Stack navigator in Expo Router. It includes a Stack.Screen for the tabs, with the header hidden.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/advanced/tabs.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Stack } from 'expo-router/stack';\n\nexport default function Layout() {\n  return (\n    <Stack>\n      <Stack.Screen name=\"(tabs)\" options={{ headerShown: false }} />\n    </Stack>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Bundle Identifier in app.json for iOS\nDESCRIPTION: Include the app's bundle identifier in the app.json file for iOS submission. This is a required step in the app submission process.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/submit/ios.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ios\": {\n    \"bundleIdentifier\": \"com.yourcompany.yourapp\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Hello World Custom Build Config in YAML\nDESCRIPTION: This code snippet defines a simple custom build configuration for EAS Build. It creates a build named 'Hello World!' with a single step that outputs 'Hello, world!' to the console.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/custom-builds/get-started.mdx#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: Hello World!\n  steps:\n    - run: echo \"Hello, world!\"\n    # A built-in function (optional)\n```\n\n----------------------------------------\n\nTITLE: Building Native Projects Locally in React Native\nDESCRIPTION: Use expo run commands to build native Android and iOS projects locally.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/workflow/continuous-native-generation.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Build your native Android project\n$ npx expo run:android\n\n# Build your native iOS project\n$ npx expo run:ios\n```\n\n----------------------------------------\n\nTITLE: Building Expo Project with New Architecture (iOS)\nDESCRIPTION: These commands demonstrate how to run a clean prebuild and start a local build or run an EAS build for iOS with the New Architecture enabled.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/new-architecture.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Run a clean prebuild and start a local build, if you like\n$ npx expo prebuild --clean && npx expo run:ios\n# Run a build with EAS if you prefer\n$ eas build -p ios\n```\n\n----------------------------------------\n\nTITLE: Disabling New Architecture in Expo app.json Configuration\nDESCRIPTION: This JSON snippet shows how to disable the New Architecture in an Expo project by setting the 'newArchEnabled' property to false in the app.json configuration file.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/new-architecture.mdx#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"newArchEnabled\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring App Update Publication Workflow in YAML\nDESCRIPTION: Workflow configuration for automating over-the-air updates. Triggers on pushes to any branch and executes update job with dynamic branch parameter.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/workflows/automating-eas-cli.mdx#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: Publish update\n\non:\n  push:\n    branches: ['*']\n\njobs:\n  update:\n    name: Update\n    type: update\n    params:\n      branch: ${{ github.ref_name || 'test'}}\n```\n\n----------------------------------------\n\nTITLE: Slack Job Configuration YAML\nDESCRIPTION: Configures a Slack job for sending messages to a Slack channel. Requires specifying the `webhook_url`. Either `message` or `payload` is required. If `message` is provided, a text message is sent. If `payload` is provided, a custom payload object is sent to the webhook.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/workflows/syntax.mdx#_snippet_33\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  my_job:\n    # @info #\n    type: slack\n    # @end #\n    params:\n      webhook_url: string # required\n      message: string # required if payload is not provided\n      payload: object # required if message is not provided\n```\n\n----------------------------------------\n\nTITLE: Using registerRootComponent with Custom Entry File\nDESCRIPTION: Example of a custom entry file (src/main.jsx) that uses registerRootComponent to set the root component of the app.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/register-root-component.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { registerRootComponent } from 'expo';\nimport { View } from 'react-native';\n\nfunction App() {\n  return <View />;\n}\n\nregisterRootComponent(App);\n```\n\n----------------------------------------\n\nTITLE: Installing Expo Splash Screen Package using Expo CLI\nDESCRIPTION: This command uses the Expo CLI (`npx expo install`) to add the `expo-splash-screen` package as a dependency to the React Native project. Using `expo install` ensures that a compatible version of the library is installed based on the project's Expo SDK version.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-splash-screen/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpx expo install expo-splash-screen\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint with Flat Config (JavaScript)\nDESCRIPTION: Demonstrates how to import and compose the Expo base ESLint config using the flat config system. The code requires the 'eslint-config-expo/flat' module and uses 'defineConfig' from 'eslint/config' to create an array-based configuration in 'eslint.config.js'. This setup allows you to spread the Expo config with custom rules, supporting both JS and TypeScript files. This approach is recommended by ESLint for more robust configurations.\nSOURCE: https://github.com/expo/expo/blob/main/packages/eslint-config-expo/README.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// eslint.config.js\nconst expoConfig = require(\"eslint-config-expo/flat\");\nconst { defineConfig } = require(\"eslint/config\");\n\nmodule.exports = defineConfig([\n  expoConfig,\n  // your other config\n]);\n```\n\n----------------------------------------\n\nTITLE: Registering Background Fetch Task with Minimum Interval\nDESCRIPTION: This code snippet shows how to register a background fetch task with a minimum interval of 1 minute, useful for testing on Android devices.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/background-fetch.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nasync function registerBackgroundFetchAsync() {\n  return BackgroundFetch.registerTaskAsync(BACKGROUND_FETCH_TASK, {\n    minimumInterval: 1 * 60, // task will fire 1 minute after app is backgrounded\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Marking a Module as Server-Only\nDESCRIPTION: Demonstrates how to use the 'server-only' import to assert that a module should not be imported on the client side.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/testing-rsc.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport 'server-only';\n```\n\n----------------------------------------\n\nTITLE: Using SafeAreaView Component in React Native (JSX)\nDESCRIPTION: Demonstrates the basic usage of the `SafeAreaView` component. It acts like a standard `View` but automatically applies padding based on the device's safe area insets. Note that for web usage, the `SafeAreaProvider` must be set up.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/safe-area-context.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SafeAreaView } from 'react-native-safe-area-context';\n\nfunction SomeComponent() {\n  return (\n    <SafeAreaView>\n      <View />\n    </SafeAreaView>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing iOS App Store Review Link\nDESCRIPTION: Opens the iOS App Store review section using Linking API with the action=write-review parameter. Provides two methods: opening in browser or directly in App Store app.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/storereview.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst itunesItemId = 982107779;\n// Open the iOS App Store in the browser -> redirects to App Store on iOS\nLinking.openURL(`https://apps.apple.com/app/apple-store/id${itunesItemId}?action=write-review`);\n// Open the iOS App Store directly\nLinking.openURL(\n  `itms-apps://itunes.apple.com/app/viewContentsUserReviews/id${itunesItemId}?action=write-review`\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring EAS Update with Default Settings in YAML\nDESCRIPTION: Sets up runtime version and release channel for EAS Update using the default configuration values.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: Configure EAS Update\n  steps:\n    - eas/checkout\n    - eas/install_node_modules\n    - eas/prebuild\n    # @info #\n    - eas/configure_eas_update\n    # @end #\n```\n\n----------------------------------------\n\nTITLE: Using SQLite Key-Value Storage with Synchronous APIs\nDESCRIPTION: Shows how to use the synchronous methods provided by expo-sqlite/kv-store for simpler key-value operations without async/await syntax.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/sqlite.mdx#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// The storage API is the default export, you can call it Storage, AsyncStorage, or whatever you prefer.\nimport Storage from 'expo-sqlite/kv-store';\n\nStorage.setItemSync('key', 'value');\nconst value = Storage.getItemSync('key');\n```\n\n----------------------------------------\n\nTITLE: Configuring TrackingTransparency Plugin in app.json\nDESCRIPTION: JSON configuration for the expo-tracking-transparency plugin in app.json, setting the userTrackingPermission message that will be shown to users when requesting tracking permission.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/tracking-transparency.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-tracking-transparency\",\n        {\n          \"userTrackingPermission\": \"This identifier will be used to deliver personalized ads to you.\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Babel Transformer Configuration\nDESCRIPTION: Example of extending Expo's Babel transformer for custom file processing.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/config/metro.mdx#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst upstreamTransformer = require('@expo/metro-config/babel-transformer');\n\nmodule.exports.transform = async ({ src, filename, options }) => {\n  if (filename.endsWith('.svg')) {\n    src = '...';\n  }\n  return upstreamTransformer.transform({ src, filename, options });\n};\n```\n\n----------------------------------------\n\nTITLE: Running Expo in Production Mode for Local Testing\nDESCRIPTION: Command to run an Expo app in production mode locally. The --no-dev flag disables development mode and --minify enables code minification to simulate production conditions for testing.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/debugging/runtime-issues.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo start --no-dev --minify\n```\n\n----------------------------------------\n\nTITLE: Creating TypeScript Module Interface\nDESCRIPTION: TypeScript module definition that declares the native module interface and exports the required native module.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/config-plugin-and-native-module-tutorial.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NativeModule, requireNativeModule } from 'expo';\n\ndeclare class ExpoNativeConfigurationModule extends NativeModule {\n  getApiKey(): string;\n}\n\nexport default requireNativeModule<ExpoNativeConfigurationModule>('ExpoNativeConfiguration');\n```\n\n----------------------------------------\n\nTITLE: Building Android app for production\nDESCRIPTION: Command for building an Android app in release mode for production testing. Note that this is not code-signed for Google Play Store submission - EAS Build is recommended for that purpose.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/more/expo-cli.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo run:android --variant release\n```\n\n----------------------------------------\n\nTITLE: Creating VideoPlayer Instance in Expo\nDESCRIPTION: Demonstrates how to create a VideoPlayer instance directly using createVideoPlayer function. This approach requires manual management of the player lifecycle.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/video.mdx#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createVideoPlayer } from 'expo-video';\nconst player = createVideoPlayer(videoSource);\n```\n\n----------------------------------------\n\nTITLE: Setting up SafeAreaProvider for Context in React Native (JSX)\nDESCRIPTION: Shows the necessary setup step of wrapping the application's root component (or specific sections like modals or screen roots) with the `SafeAreaProvider`. This provider makes the safe area inset data available to components and hooks like `SafeAreaView` and `useSafeAreaInsets` within its subtree.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/safe-area-context.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\n\nfunction App() {\n  return <SafeAreaProvider>...</SafeAreaProvider>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Protected Route Authentication\nDESCRIPTION: Creates an authentication layout that protects routes by redirecting unauthenticated users to a login page. This provides a security layer for protected content.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/basics/common-navigation-patterns.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Redirect, Stack } from 'expo-router';\n\nexport default function AuthLayout() {\n  const isAuthenticated = /* check for valid auth token/session */\n\n  if (!isAuthenticated) {\n    return <Redirect href=\"/login\" />;\n  }\n\n  return <Stack />;\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating BlurView Usage in React Native with expo-blur - JSX\nDESCRIPTION: This snippet shows how to use the BlurView component from the expo-blur package in a basic React Native app. It imports necessary dependencies, creates a grid of colored background boxes, and overlays three BlurView components with different blur intensities and tints. The example demonstrates styling via StyleSheet and shows how the blur intensity, tint, and child content are passed as props. Required dependencies are react-native and expo-blur; the Snack example also requires the expo-blur library to be installed. Inputs include style props and the intensity/tint values, producing a visual overlay effect used for UI enhancements such as modals or navigation bars.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/blur-view.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Text, StyleSheet, View, SafeAreaView } from 'react-native';\\nimport { BlurView } from 'expo-blur';\\n\\nexport default function App() {\\n  const text = 'Hello, my container is blurring contents underneath!';\\n  return (\\n    <SafeAreaView style={styles.container}>\\n      <View style={styles.background}>\\n        {[...Array(20).keys()].map(i => (\\n          <View\\n            key={`box-${i}`}\\n            style={[styles.box, i % 2 === 1 ? styles.boxOdd : styles.boxEven]}\\n          />\\n        ))}\\n      </View>\\n      <BlurView intensity={100} style={styles.blurContainer}>\\n        <Text style={styles.text}>{text}</Text>\\n      </BlurView>\\n      <BlurView intensity={80} tint=\"light\" style={styles.blurContainer}>\\n        <Text style={styles.text}>{text}</Text>\\n      </BlurView>\\n      <BlurView intensity={90} tint=\"dark\" style={styles.blurContainer}>\\n        <Text style={[styles.text, { color: '#fff' }]}>{text}</Text>\\n      </BlurView>\\n    </SafeAreaView>\\n  );\\n}\\n\\nconst styles = StyleSheet.create({\\n  container: {\\n    flex: 1,\\n  },\\n  blurContainer: {\\n    flex: 1,\\n    padding: 20,\\n    margin: 16,\\n    textAlign: 'center',\\n    justifyContent: 'center',\\n    overflow: 'hidden',\\n    borderRadius: 20,\\n  },\\n  background: {\\n    flex: 1,\\n    flexWrap: 'wrap',\\n    ...StyleSheet.absoluteFill,\\n  },\\n  box: {\\n    width: '25%',\\n    height: '20%',\\n  },\\n  boxEven: {\\n    backgroundColor: 'orangered',\\n  },\\n  boxOdd: {\\n    backgroundColor: 'gold',\\n  },\\n  text: {\\n    fontSize: 24,\\n    fontWeight: '600',\\n  },\\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Notification Sounds Configuration in app.json\nDESCRIPTION: JSON configuration for adding custom notification sounds to an Expo app using the expo-notifications plugin.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/notifications.mdx#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-notifications\",\n        {\n          \"sounds\": [\"local/path/to/mySoundFile.wav\"]\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing expo-constants in JavaScript\nDESCRIPTION: Demonstrates how to import the Constants module from the expo-constants package in a JavaScript project using Expo. This is required to access system-level constant information within your application. No parameters are involved. The import must be included at the top of your JavaScript (or JSX) file before referencing any Constants APIs.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/constants.mdx#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport Constants from 'expo-constants';\n```\n\n----------------------------------------\n\nTITLE: Importing Haptics Module\nDESCRIPTION: The basic import statement for using the expo-haptics library in your project.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/haptics.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as Haptics from 'expo-haptics';\n```\n\n----------------------------------------\n\nTITLE: Importing Constants Module in JavaScript\nDESCRIPTION: This snippet demonstrates how to import the Constants module from the expo-constants package. This module provides access to system information that remains constant throughout an app's installation.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/constants.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Constants from 'expo-constants';\n```\n\n----------------------------------------\n\nTITLE: Implementing Native Module in Kotlin\nDESCRIPTION: Basic Kotlin implementation of the ExpoNativeConfiguration module with a getApiKey function that returns a static string.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/config-plugin-and-native-module-tutorial.mdx#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\npackage expo.modules.nativeconfiguration\n\nimport expo.modules.kotlin.modules.Module\nimport expo.modules.kotlin.modules.ModuleDefinition\n\nclass ExpoNativeConfigurationModule : Module() {\n  override fun definition() = ModuleDefinition {\n    Name(\"ExpoNativeConfiguration\")\n\n    Function(\"getApiKey\") {\n      return@Function \"api-key\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering Console Errors in React Native\nDESCRIPTION: Shows how to manually trigger error messages in React Native development using console.error()\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/debugging/errors-and-warnings.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.error(\"Error message\")\n```\n\n----------------------------------------\n\nTITLE: Web Worker Implementation Example\nDESCRIPTION: Complete example of a web worker that doubles a number, showing both worker and main thread code.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/config/metro.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nself.onmessage = ({ data }) => {\n  const result = data * 2; // Example: double the number\n  self.postMessage(result);\n};\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst worker = new Worker(new URL('./worker', window.location.href));\n\nworker.onmessage = ({ data }) => {\n  console.log(`Worker responded: ${data}`);\n};\n\nworker.postMessage(5);\n```\n\n----------------------------------------\n\nTITLE: Creating an SVG Component in React Native with TypeScript\nDESCRIPTION: This example demonstrates how to create a custom SVG component using react-native-svg. It imports specific SVG elements (Circle and Rect) and creates a functional component that renders an SVG with these elements.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/svg.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport Svg, { Circle, Rect } from 'react-native-svg';\n\nexport default function SvgComponent(props) {\n  return (\n    <Svg height=\"50%\" width=\"50%\" viewBox=\"0 0 100 100\" {...props}>\n      <Circle cx=\"50\" cy=\"50\" r=\"45\" stroke=\"blue\" strokeWidth=\"2.5\" fill=\"green\" />\n      <Rect x=\"15\" y=\"15\" width=\"70\" height=\"70\" stroke=\"red\" strokeWidth=\"2\" fill=\"yellow\" />\n    </Svg>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom JavaScript Stack Navigator\nDESCRIPTION: Example of creating a custom JavaScript-based stack navigator using @react-navigation/stack and integrating it with Expo Router using withLayoutContext.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/advanced/stack.mdx#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ParamListBase, StackNavigationState } from '@react-navigation/native';\nimport {\n  createStackNavigator,\n  StackNavigationEventMap,\n  StackNavigationOptions,\n} from '@react-navigation/stack';\nimport { withLayoutContext } from 'expo-router';\n\nconst { Navigator } = createStackNavigator();\n\nexport const JsStack = withLayoutContext<\n  StackNavigationOptions,\n  typeof Navigator,\n  StackNavigationState<ParamListBase>,\n  StackNavigationEventMap\n>(Navigator);\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { JsStack } from '../layouts/js-stack';\n\nexport default function Layout() {\n  return (\n    <JsStack\n      screenOptions={{\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-location with Config Plugin in app.json\nDESCRIPTION: JSON configuration for the expo-location config plugin, which allows setting custom location permission messages and enabling background location features.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/location.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-location\",\n        {\n          \"locationAlwaysAndWhenInUsePermission\": \"Allow $(PRODUCT_NAME) to use your location.\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Android Permissions Declaration in AndroidManifest.xml\nDESCRIPTION: Declaration of required Android permissions for FileSystem operations including storage read/write and internet access.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/filesystem.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<AndroidPermissions permissions={['READ_EXTERNAL_STORAGE', 'WRITE_EXTERNAL_STORAGE', 'INTERNET']} />\n```\n\n----------------------------------------\n\nTITLE: Generating Video Thumbnails in React Native with expo-video-thumbnails\nDESCRIPTION: This code snippet demonstrates how to use expo-video-thumbnails to generate a thumbnail image from a video URL in a React Native application. It includes a button to trigger the thumbnail generation and displays the resulting image.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/video-thumbnails.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { StyleSheet, Button, View, Image, Text } from 'react-native';\nimport * as VideoThumbnails from 'expo-video-thumbnails';\n\nexport default function App() {\n  const [image, setImage] = useState(null);\n\n  const generateThumbnail = async () => {\n    try {\n      const { uri } = await VideoThumbnails.getThumbnailAsync(\n        'https://d23dyxeqlo5psv.cloudfront.net/big_buck_bunny.mp4',\n        {\n          time: 15000,\n        }\n      );\n      setImage(uri);\n    } catch (e) {\n      console.warn(e);\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      <Button onPress={generateThumbnail} title=\"Generate thumbnail\" />\n      {image && <Image source={{ uri: image }} style={styles.image} />}\n      <Text>{image}</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#F5FCFF',\n  },\n  image: {\n    width: 200,\n    height: 200,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Bundle Identifier in app.json\nDESCRIPTION: This snippet shows how to include the iOS bundle identifier in the app.json file, which is a prerequisite for submitting to the Apple App Store.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/deploy/submit-to-app-stores.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ios\": {\n    \"bundleIdentifier\": \"com.yourcompany.yourapp\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Calendar Permissions in AndroidManifest.xml\nDESCRIPTION: XML snippet showing how to add calendar read and write permissions to the Android manifest file.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/calendar.mdx#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"android.permission.READ_CALENDAR\" />\n<uses-permission android:name=\"android.permission.WRITE_CALENDAR\" />\n```\n\n----------------------------------------\n\nTITLE: Customizing Stack Navigator Header in Expo Router (TypeScript)\nDESCRIPTION: Illustrates how to customize the header for individual routes in a Stack navigator. This example includes setting a custom title, styles, and a custom header component.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/advanced/stack.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Link, Stack } from 'expo-router';\nimport { Image, Text, View, StyleSheet } from 'react-native';\n\nfunction LogoTitle() {\n  return (\n    <Image style={styles.image} source={{ uri: 'https://reactnative.dev/img/tiny_logo.png' }} />\n  );\n}\n\nexport default function Home() {\n  return (\n    <View style={styles.container}>\n      <Stack.Screen\n        options={{\n          title: 'My home',\n          headerStyle: { backgroundColor: '#f4511e' },\n          headerTintColor: '#fff',\n          headerTitleStyle: {\n            fontWeight: 'bold',\n          },\n          headerTitle: props => <LogoTitle {...props} />,\n        }}\n      />\n      <Text>Home Screen</Text>\n      <Link href={{ pathname: 'details', params: { name: 'Bacon' } }}>Go to Details</Link>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  image: {\n    width: 50,\n    height: 50,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Starting the Expo Development Server\nDESCRIPTION: This command starts the Expo development server, which is necessary for running the development build on the iOS device.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/eas/ios-development-build-for-devices.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo start\n```\n\n----------------------------------------\n\nTITLE: Using Prepared Statements with expo-sqlite\nDESCRIPTION: Illustrates the use of prepared statements in expo-sqlite for efficient query execution. It shows how to prepare statements, execute them with different parameters, and handle the results. The example also demonstrates proper resource management using try-finally blocks.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/sqlite.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst statement = await db.prepareAsync(\n  'INSERT INTO test (value, intValue) VALUES ($value, $intValue)'\n);\ntry {\n  let result = await statement.executeAsync({ $value: 'bbb', $intValue: 101 });\n  console.log('bbb and 101:', result.lastInsertRowId, result.changes);\n\n  result = await statement.executeAsync({ $value: 'ccc', $intValue: 102 });\n  console.log('ccc and 102:', result.lastInsertRowId, result.changes);\n\n  result = await statement.executeAsync({ $value: 'ddd', $intValue: 103 });\n  console.log('ddd and 103:', result.lastInsertRowId, result.changes);\n} finally {\n  await statement.finalizeAsync();\n}\n\nconst statement2 = await db.prepareAsync('SELECT * FROM test WHERE intValue >= $intValue');\ntry {\n  const result = await statement2.executeAsync<{ value: string; intValue: number }>({\n    $intValue: 100,\n  });\n\n  // `getFirstAsync()` is useful when you want to get a single row from the database.\n  const firstRow = await result.getFirstAsync();\n  console.log(firstRow.id, firstRow.value, firstRow.intValue);\n\n  // Reset the SQLite query cursor to the beginning for the next `getAllAsync()` call.\n  await result.resetAsync();\n\n  // `getAllAsync()` is useful when you want to get all results as an array of objects.\n  const allRows = await result.getAllAsync();\n  for (const row of allRows) {\n    console.log(row.value, row.intValue);\n  }\n\n  // Reset the SQLite query cursor to the beginning for the next `for-await-of` loop.\n  await result.resetAsync();\n\n  // The result object is also an async iterable. You can use it in `for-await-of` loop to iterate SQLite query cursor.\n  for await (const row of result) {\n    console.log(row.value, row.intValue);\n  }\n} finally {\n  await statement2.finalizeAsync();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS App Extensions in app.json for Managed Expo Projects\nDESCRIPTION: This JSON snippet demonstrates how to declare app extensions in the app.json file for managed Expo projects. It uses the extra.eas.build.experimental.ios.appExtensions configuration to specify extension details before the build starts.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/build-reference/app-extensions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    ...\n    \"extra\": {\n      \"eas\": {\n        \"build\": {\n          \"experimental\": {\n            \"ios\": {\n              \"appExtensions\": [\n                {\n                  \"targetName\": \"myappextension\",\n                  \"bundleIdentifier\": \"com.myapp.extension\",\n                  \"entitlements\": {\n                    \"com.apple.example\": \"entitlement value\"\n                  }\n                }\n              ]\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Video Playback with Play/Pause Button\nDESCRIPTION: A simple example of implementing video playback using expo-video. This snippet demonstrates how to create a video player with play and pause functionality.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/video.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEvent } from 'expo';\nimport { useVideoPlayer, VideoView } from 'expo-video';\nimport { StyleSheet, View, Button } from 'react-native';\n\nconst videoSource =\n  'https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4';\n\nexport default function VideoScreen() {\n  const player = useVideoPlayer(videoSource, player => {\n    player.loop = true;\n    player.play();\n  });\n\n  const { isPlaying } = useEvent(player, 'playingChange', { isPlaying: player.playing });\n\n  return (\n    <View style={styles.contentContainer}>\n      <VideoView style={styles.video} player={player} allowsFullscreen allowsPictureInPicture />\n      <View style={styles.controlsContainer}>\n        <Button\n          title={isPlaying ? 'Pause' : 'Play'}\n          onPress={() => {\n            if (isPlaying) {\n              player.pause();\n            } else {\n              player.play();\n            }\n          }}\n        />\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  contentContainer: {\n    flex: 1,\n    padding: 10,\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingHorizontal: 50,\n  },\n  video: {\n    width: 350,\n    height: 275,\n  },\n  controlsContainer: {\n    padding: 10,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Entry Point with Side Effects\nDESCRIPTION: Example of a custom entry point file that initializes services and configurations before loading the Expo Router entry point.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/installation.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Import side effects first and services\n\n// Initialize services\n\n// Register app entry through Expo Router\nimport 'expo-router/entry';\n```\n\n----------------------------------------\n\nTITLE: Resource Class Configuration\nDESCRIPTION: Configuration for specifying different resource classes for Android and iOS builds.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/build/eas-json.mdx#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"production\": {\n      \"android\": {\n        \"resourceClass\": \"medium\"\n      },\n      \"ios\": {\n        \"resourceClass\": \"large\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Calendar Permissions in iOS Info.plist\nDESCRIPTION: Sets the NSCalendarsUsageDescription and NSRemindersUsageDescription permissions in Info.plist for iOS. Provides default permission messages that prompt users for calendar access.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/calendar.mdx#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<key>NSCalendarsUsageDescription</key>\n<string>Allow $(PRODUCT_NAME) to access your calendar</string>\n<key>NSRemindersUsageDescription</key>\n<string>Allow $(PRODUCT_NAME) to access your reminders</string>\n```\n\n----------------------------------------\n\nTITLE: Error Handling in API Routes\nDESCRIPTION: Example of handling errors and returning appropriate HTTP responses.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/reference/api-routes.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Request, Response } from 'expo-router/server';\n\nexport async function GET(request: Request, { post }: Record<string, string>) {\n  if (!post) {\n    return new Response('No post found', {\n      status: 404,\n      headers: {\n        'Content-Type': 'text/plain',\n      },\n    });\n  }\n  return Response.json({ ... });\n}\n```\n\n----------------------------------------\n\nTITLE: Using Atlas with Expo Export\nDESCRIPTION: Commands to export an Expo app and analyze the bundle using Atlas.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/analyzing-bundles.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Export your app for all platforms\n$ EXPO_UNSTABLE_ATLAS=true npx expo export\n\n# Open the generated Atlas file\n$ npx expo-atlas .expo/atlas.jsonl\n```\n\n----------------------------------------\n\nTITLE: Using Prepared Statements with expo-sqlite\nDESCRIPTION: Example demonstrating the use of prepared statements in expo-sqlite. This includes preparing statements, executing them with different parameters, and finalizing them.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/sqlite.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst statement = await db.prepareAsync(\n  'INSERT INTO test (value, intValue) VALUES ($value, $intValue)'\n);\ntry {\n  let result = await statement.executeAsync({ $value: 'bbb', $intValue: 101 });\n  console.log('bbb and 101:', result.lastInsertRowId, result.changes);\n\n  result = await statement.executeAsync({ $value: 'ccc', $intValue: 102 });\n  console.log('ccc and 102:', result.lastInsertRowId, result.changes);\n\n  result = await statement.executeAsync({ $value: 'ddd', $intValue: 103 });\n  console.log('ddd and 103:', result.lastInsertRowId, result.changes);\n} finally {\n  await statement.finalizeAsync();\n}\n\nconst statement2 = await db.prepareAsync('SELECT * FROM test WHERE intValue >= $intValue');\ntry {\n  const result = await statement2.executeAsync<{ value: string; intValue: number }>({\n    $intValue: 100,\n  });\n\n  // `getFirstAsync()` is useful when you want to get a single row from the database.\n  const firstRow = await result.getFirstAsync();\n  console.log(firstRow.id, firstRow.value, firstRow.intValue);\n\n  // Reset the SQLite query cursor to the beginning for the next `getAllAsync()` call.\n  await result.resetAsync();\n\n  // `getAllAsync()` is useful when you want to get all results as an array of objects.\n  const allRows = await result.getAllAsync();\n  for (const row of allRows) {\n    console.log(row.value, row.intValue);\n  }\n\n  // Reset the SQLite query cursor to the beginning for the next `for-await-of` loop.\n  await result.resetAsync();\n\n  // The result object is also an async iterable. You can use it in `for-await-of` loop to iterate SQLite query cursor.\n  for await (const row of result) {\n    console.log(row.value, row.intValue);\n  }\n} finally {\n  await statement2.finalizeAsync();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an SVG Component in React Native with TypeScript\nDESCRIPTION: Demonstrates how to create a simple SVG component using react-native-svg, including a circle and a rectangle.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/svg.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Svg, { Circle, Rect } from 'react-native-svg';\n\nexport default function SvgComponent(props) {\n  return (\n    <Svg height=\"50%\" width=\"50%\" viewBox=\"0 0 100 100\" {...props}>\n      <Circle cx=\"50\" cy=\"50\" r=\"45\" stroke=\"blue\" strokeWidth=\"2.5\" fill=\"green\" />\n      <Rect x=\"15\" y=\"15\" width=\"70\" height=\"70\" stroke=\"red\" strokeWidth=\"2\" fill=\"yellow\" />\n    </Svg>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Latest Expo SDK Version with npm\nDESCRIPTION: Commands to install the latest version of Expo SDK or a specific version (e.g., SDK 52) using npm.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/workflow/upgrading-expo-sdk-walkthrough.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Install latest\n$ npx expo install expo@latest\n\n# Install a specific SDK version (for example, SDK 52)\n$ npx expo install expo@^52.0.0\n```\n\n----------------------------------------\n\nTITLE: Starting Expo Development Server\nDESCRIPTION: Start the Expo development server to run the app on mobile devices and web browsers.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/create-your-first-app.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo start\n```\n\n----------------------------------------\n\nTITLE: Installing Node Modules with eas/install_node_modules in YAML\nDESCRIPTION: Automatically detects and uses the appropriate package manager (npm, pnpm, or Yarn) to install node modules. Works in both regular projects and monorepos.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: Install node modules\n  steps:\n    - eas/checkout\n    # @info #\n    - eas/install_node_modules\n    # @end #\n```\n\n----------------------------------------\n\nTITLE: Defining Global CSS Styles in Expo\nDESCRIPTION: Example of defining global CSS styles in Expo projects. Global styles are web-only and will be ignored on native platforms.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/config/metro.mdx#2025-04-22_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.container {\n  background-color: red;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Local Expo Module in React Native App\nDESCRIPTION: Example of importing and using a local Expo module in a React Native application component. Shows how to render the result of a native module method.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/get-started.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport MyModule from './modules/my-module';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Text>{MyModule.hello()}</Text>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Expo Settings Module in Kotlin for Android\nDESCRIPTION: This Kotlin code defines the Android implementation of the Expo Settings module. It includes functions for setting and getting the theme, and uses an enum to ensure type safety for theme values.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/native-module-tutorial.mdx#2025-04-22_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\npackage expo.modules.settings\n\nimport android.content.Context\nimport android.content.SharedPreferences\nimport androidx.core.os.bundleOf\nimport expo.modules.kotlin.modules.Module\nimport expo.modules.kotlin.modules.ModuleDefinition\nimport expo.modules.kotlin.types.Enumerable\n\nclass ExpoSettingsModule : Module() {\n  override fun definition() = ModuleDefinition {\n    Name(\"ExpoSettings\")\n\n    Events(\"onChangeTheme\")\n\n    Function(\"setTheme\") { theme: Theme ->\n      getPreferences().edit().putString(\"theme\", theme.value).commit()\n      this@ExpoSettingsModule.sendEvent(\"onChangeTheme\", bundleOf(\"theme\" to theme.value))\n    }\n\n    Function(\"getTheme\") {\n      return@Function getPreferences().getString(\"theme\", Theme.SYSTEM.value)\n    }\n  }\n\n  private val context\n  get() = requireNotNull(appContext.reactContext)\n\n  private fun getPreferences(): SharedPreferences {\n    return context.getSharedPreferences(context.packageName + \".settings\", Context.MODE_PRIVATE)\n  }\n}\n\nenum class Theme(val value: String) : Enumerable {\n  LIGHT(\"light\"),\n  DARK(\"dark\"),\n  SYSTEM(\"system\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SplashScreen Animation\nDESCRIPTION: Example showing how to configure the built-in fade animation for the splash screen using setOptions method.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/splash-screen.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nSplashScreen.setOptions({\n  duration: 1000,\n  fade: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Checkbox from expo-checkbox\nDESCRIPTION: This snippet shows the import statement for the Checkbox component from the expo-checkbox package, a dependency required to use the checkbox functionalities in a React Native application.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/checkbox.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Checkbox from 'expo-checkbox';\n```\n\n----------------------------------------\n\nTITLE: Root HTML Component Configuration\nDESCRIPTION: Custom Root HTML component setup for static rendering with head elements and scroll view configuration\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/reference/static-rendering.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ScrollViewStyleReset } from 'expo-router/html';\nimport { type PropsWithChildren } from 'react';\n\nexport default function Root({ children }: PropsWithChildren) {\n  return (\n    <html lang=\"en\">\n      <head>\n        <meta charSet=\"utf-8\" />\n        <meta httpEquiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\" />\n        <ScrollViewStyleReset />\n      </head>\n      <body>{children}</body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using IcoMoon Icons with createIconSetFromIcoMoon in Expo\nDESCRIPTION: This snippet demonstrates how to create and use custom icons from IcoMoon in an Expo app. It uses the createIconSetFromIcoMoon method and the useFonts hook to load the custom font before rendering the icon.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/icons.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { useFonts } from 'expo-font';\nimport createIconSetFromIcoMoon from '@expo/vector-icons/createIconSetFromIcoMoon';\n\nconst Icon = createIconSetFromIcoMoon(\n  require('./assets/icomoon/selection.json'),\n  'IcoMoon',\n  'icomoon.ttf'\n);\n\nexport default function App() {\n  const [fontsLoaded] = useFonts({\n    IcoMoon: require('./assets/icomoon/icomoon.ttf'),\n  });\n\n  if (!fontsLoaded) {\n    return null;\n  }\n\n  return (\n    <View style={styles.container}>\n      <Icon name=\"pacman\" size={50} color=\"red\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing TabList Component in Expo Router\nDESCRIPTION: Example demonstrating how to customize the TabList component using the asChild prop to override its underlying structure.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/advanced/custom-tabs.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Tabs>\n  <TabSlot />\n  <TabList asChild>\n    {/* Render a custom TabList */}\n    <CustomTabList>\n      <TabTrigger name=\"home\" href=\"/\">\n        <Text>Home</Text>\n      </TabTrigger>\n    </CustomTabList>\n  </TabList>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Google Maps API Key in app.json\nDESCRIPTION: Specifies the structure within `app.json` for setting the Google Maps API key for the Android platform. The `apiKey` should be placed under `android.config.googleMaps`. It's recommended to use environment variables (like `process.env.GOOGLE_MAPS_API_KEY`) to store the actual key for security.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/map-view.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n    \"android\": {\n      \"config\": {\n        \"googleMaps\": {\n          \"apiKey\": \"process.env.GOOGLE_MAPS_API_KEY\",\n        },\n      },\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Netlify for Expo Web Hosting - YAML\nDESCRIPTION: Provides a sample netlify.toml YAML configuration for building and serving an Expo web app on Netlify. Sets the build command, specifies directories for functions and client publishing, adds a redirect from all URLs to the server function (for SSR), includes all server files, and applies specific cache headers. Also supports dynamic routes via included_files. The file expects the Expo CLI and Netlify provider. It's important for this file to be at the project root and properly reference server/client build directories.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/reference/api-routes.mdx#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n[build]\\n  command = \\\"expo export -p web\\\"\\n  functions = \\\"netlify/functions\\\"\\n  publish = \\\"dist/client\\\"\\n\\n[[redirects]]\\n  from = \\\"/*\\\"\\n  to = \\\"/.netlify/functions/server\\\"\\n  status = 404\\n\\n[functions]\\n  # Include everything to ensure dynamic routes can be used.\\n  included_files = [\\\"dist/server/**/*\\\"]\\n\\n[[headers]]\\n  for = \\\"/dist/server/_expo/functions/*\\\"\\n  [headers.values]\\n    # Set to 60 seconds as an example.\\n    \\\"Cache-Control\\\" = \\\"public, max-age=60, s-maxage=60\\\"\\n\n```\n\n----------------------------------------\n\nTITLE: Setting JSC as JavaScript Engine in Expo app.json\nDESCRIPTION: This snippet shows how to configure the app.json file to use JavaScriptCore (JSC) as the JavaScript engine instead of the default Hermes engine.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/configuring-js-engines.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"jsEngine\": \"jsc\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Properties in app.config.js\nDESCRIPTION: Shows how to set build properties for Android and iOS platforms in an app.config.js file. Relies on the presence of Expo CLI with specific Android and iOS version requirements....\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/build-properties.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  expo: {\n    plugins: [\n      [\n        'expo-build-properties',\n        {\n          android: {\n            compileSdkVersion: 33,\n            targetSdkVersion...\n```\n\n----------------------------------------\n\nTITLE: EAS Project Initialization\nDESCRIPTION: Command to initialize and link a project to EAS servers.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/eas/configure-development-build.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ eas init\n```\n\n----------------------------------------\n\nTITLE: Implementing Tab Navigation Layout in Expo Router\nDESCRIPTION: Creates a tab-based navigation layout using Expo Router's Tabs component. Configures basic tab screens with header options hidden to prevent duplicate headers in nested navigation.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/basics/common-navigation-patterns.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Tabs } from 'expo-router';\n\nexport default function TabLayout() {\n  return (\n    <Tabs screenOptions={{ headerShown: false }}>\n      <Tab.Screen name=\"index\" options={{ title: 'Home' }} />\n      <Tab.Screen name=\"feed\" options={{ title: 'Feed' }} />\n      <Tab.Screen name=\"settings\" options={{ title: 'Settings' }} />\n    </Tabs>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring eas.json for iOS Simulator Build\nDESCRIPTION: This snippet shows how to set up the eas.json file with a build profile for iOS Simulators. It includes the required 'ios.simulator' property set to true.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/eas/ios-development-build-for-simulators.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"development\": {\n      /* @hide ... */ /* @end */\n    },\n    /* @info The <CODE>simulator</CODE> property is required for iOS Simulator builds. */\n    \"ios-simulator\": {\n      \"ios\": {\n        \"simulator\": true\n      }\n    }\n    /* @end */\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Skipping Dependency Updates in Prebuild for React Native\nDESCRIPTION: Use the --skip-dependency-update option to skip updating specific npm package versions during prebuild.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/workflow/continuous-native-generation.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo prebuild --skip-dependency-update react-native,react\n```\n\n----------------------------------------\n\nTITLE: Loading JSON Configuration in iOS Podfile\nDESCRIPTION: This Ruby snippet demonstrates how to safely modify iOS dependencies by loading configuration from an external JSON file rather than directly modifying the Podfile with regex patterns.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/config-plugins/development-and-debugging.mdx#2025-04-22_snippet_17\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'json'\n\n# @info Import a JSON file and parse it in Ruby #\npodfileConfig = JSON.parse(File.read(File.join(__dir__, 'podfile.config.json')))\n# @end #\n\nplatform :ios, '11.0'\n\ntarget 'yolo27' do\n  use_unimodules!\n  config = use_native_modules!\n  use_react_native!(:path => config[\"reactNativePath\"])\n\n  # podfileConfig['version']\nend\n```\n\n----------------------------------------\n\nTITLE: Running EAS Build Command for Android Production Build\nDESCRIPTION: Terminal command to create a production build for Android using EAS Build. This command initiates the build process on EAS servers for Android platform.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/deploy/build-project.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ eas build --platform android\n```\n\n----------------------------------------\n\nTITLE: Implementing LinearGradient in React Native with Expo\nDESCRIPTION: Example showing how to implement two different linear gradients - one as a background overlay and another as a button style. Demonstrates usage with different color configurations and styling options.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/linear-gradient.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StyleSheet, Text, View } from 'react-native';\nimport { LinearGradient } from 'expo-linear-gradient';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <LinearGradient\n        // Background Linear Gradient\n        colors={['rgba(0,0,0,0.8)', 'transparent']}\n        style={styles.background}\n      />\n      <LinearGradient\n        // Button Linear Gradient\n        colors={['#4c669f', '#3b5998', '#192f6a']}\n        style={styles.button}>\n        <Text style={styles.text}>Sign in with Facebook</Text>\n      </LinearGradient>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: 'orange',\n  },\n  background: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 0,\n    height: 300,\n  },\n  button: {\n    padding: 15,\n    alignItems: 'center',\n    borderRadius: 5,\n  },\n  text: {\n    backgroundColor: 'transparent',\n    fontSize: 15,\n    color: '#fff',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Android Media Library Configuration\nDESCRIPTION: XML configuration for Android manifest to enable media location access and scoped storage support.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/media-library.mdx#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"android.permission.ACCESS_MEDIA_LOCATION\" />\n```\n\nLANGUAGE: xml\nCODE:\n```\n<manifest ... >\n  <application android:requestLegacyExternalStorage=\"true\" ...>\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Modal Screen\nDESCRIPTION: Creates a simple modal screen component that displays content in a modal view. This basic implementation shows the structure of a modal screen with centered content.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/advanced/modals.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StyleSheet, Text, View } from 'react-native';\n\nexport default function Modal() {\n  return (\n    <View style={styles.container}>\n      <Text>Modal screen</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a TypeScript Function with Inputs and Outputs\nDESCRIPTION: Advanced TypeScript function implementation that handles inputs and produces outputs. This function accepts two numeric inputs, calculates their sum, and sets the result as an output value.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/custom-builds/functions.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// This file was autogenerated by `create-eas-build-function` command.\n// Go to README.md to learn more about how to write your own custom build functions.\n\nimport {\n  BuildStepContext,\n  BuildStepInput,\n  BuildStepInputValueTypeName,\n  BuildStepOutput,\n} from '@expo/steps';\n\n/* @info */\ninterface FunctionInputs {\n  // first template argument is the type of the input value, second template argument is a boolean indicating if the input is required\n  num1: BuildStepInput<BuildStepInputValueTypeName.NUMBER, true>;\n  num2: BuildStepInput<BuildStepInputValueTypeName.NUMBER, true>;\n}\n/* @end */\n\n/* @info */\ninterface FunctionOutputs {\n  // template argument is a boolean indicating if the output is required\n  sum: BuildStepOutput<true>;\n}\n/* @end */\n\nasync function myFunction(\n  ctx: BuildStepContext,\n  {\n    inputs,\n    outputs,\n  }: // env,\n  {\n    inputs: FunctionInputs;\n    outputs: FunctionOutputs;\n    // env: BuildStepEnv;\n  }\n): Promise<void> {\n  /* @info */\n  ctx.logger.info(`num1: ${inputs.num1.value}`);\n  ctx.logger.info(`num2: ${inputs.num2.value}`);\n\n  const sum = inputs.num1.value + inputs.num2.value;\n\n  ctx.logger.info(`sum: ${sum}`);\n\n  outputs.sum.set(sum.toString()); // Currently, outputs must be strings. This will improve in the future.\n  /* @end */\n}\n\nexport default myFunction;\n```\n\n----------------------------------------\n\nTITLE: Importing Components from react-native-safe-area-context\nDESCRIPTION: Example of importing the main components and hooks from the react-native-safe-area-context package.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/safe-area-context.mdx#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport {\n  SafeAreaView,\n  SafeAreaProvider,\n  SafeAreaInsetsContext,\n  useSafeAreaInsets,\n} from 'react-native-safe-area-context';\n```\n\n----------------------------------------\n\nTITLE: Multiple Notifications Request Format\nDESCRIPTION: JSON format for sending multiple push notifications in a single request. Shows how to target multiple recipients with different message content and notification settings.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/push-notifications/sending-notifications.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"to\": \"ExponentPushToken[xxxxxxxxxxxxxxxxxxxxxx]\",\n    \"sound\": \"default\",\n    \"body\": \"Hello world!\"\n  },\n  {\n    \"to\": \"ExponentPushToken[yyyyyyyyyyyyyyyyyyyyyy]\",\n    \"badge\": 1,\n    \"body\": \"You've got mail\"\n  },\n  {\n    \"to\": [\n      \"ExponentPushToken[zzzzzzzzzzzzzzzzzzzzzz]\",\n      \"ExponentPushToken[aaaaaaaaaaaaaaaaaaaaaa]\"\n    ],\n    \"body\": \"Breaking news!\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Using canDismiss Action in Expo Router\nDESCRIPTION: Demonstrates how to check if dismissing the current screen is possible using the canDismiss action. Returns true if the router is within a stack with multiple screens.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/advanced/stack.mdx#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button, View } from 'react-native';\nimport { useRouter } from 'expo-router';\n\nexport default function Settings() {\n  const router = useRouter();\n\n  const handleDismiss = (count: number) => {\n    if (router.canDismiss()) {\n      router.dismiss(count)\n    }\n  };\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Button title=\"Maybe dismiss\" onPress={() => handleDismiss()} />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SecureStore Plugin in app.json\nDESCRIPTION: Example of configuring the expo-secure-store plugin in app.json to set the Face ID permission message.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/securestore.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-secure-store\",\n        {\n          \"faceIDPermission\": \"Allow $(PRODUCT_NAME) to access your Face ID biometric data.\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DeviceMotion Plugin in app.json\nDESCRIPTION: This JSON snippet demonstrates configuring the expo-sensors plugin in the app's app.json file to set the motionPermission message, essential for handling iOS permissions. It specifies necessary configurations to ensure the library works correctly within the React Native app context.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/devicemotion.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-sensors\",\n        {\n          \"motionPermission\": \"Allow $(PRODUCT_NAME) to access your device motion.\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Bitbucket Pipelines EAS Build Configuration\nDESCRIPTION: Bitbucket Pipelines configuration for running EAS builds using Node.js Alpine image with npm caching.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/build/building-on-ci.mdx#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nimage: node:alpine\n\ndefinitions:\n  caches:\n    npm: ~/.npm\n\npipelines:\n  default:\n    - step:\n        name: Build app\n        deployment: test\n        caches:\n          - npm\n        script:\n          - apk add --no-cache bash\n          - npm ci\n          - npx eas-cli build --platform all --non-interactive --no-wait\n```\n\n----------------------------------------\n\nTITLE: Setting iOS Permission Message in Info.plist\nDESCRIPTION: This XML snippet shows how to add the `NSContactsUsageDescription` key to the Info.plist file, which is necessary for iOS to present permission requests to the user.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/contacts.mdx#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<key>NSContactsUsageDescription</key>\n<string>Allow $(PRODUCT_NAME) to access your contacts</string>\n```\n\n----------------------------------------\n\nTITLE: Info.plist Configuration for iOS Background Tasks in XML\nDESCRIPTION: Provides the XML configuration needed in the Info.plist file for setting up background modes on iOS devices, specifically requiring 'processing' permission for background tasks.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/background-task.mdx#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<key>UIBackgroundModes</key>\n  <array>\n    <string>processing</string>\n  </array>\n</key>\n```\n\n----------------------------------------\n\nTITLE: Implementing Info.plist Configuration in TypeScript\nDESCRIPTION: ConfigPlugin implementation for modifying Info.plist to add custom API key.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/config-plugin-and-native-module-tutorial.mdx#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst withMyApiKey: ConfigPlugin<{ apiKey: string }> = (config, { apiKey }) => {\n  config = withInfoPlist(config, config => {\n    config.modResults['MY_CUSTOM_API_KEY'] = apiKey;\n    return config;\n  });\n\n  return config;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring UIBackgroundModes for iOS\nDESCRIPTION: Add the 'processing' value to the UIBackgroundModes array in the Info.plist file to enable background fetch on iOS.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/background-task.mdx#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<key>UIBackgroundModes</key>\n<array>\n  <string>processing</string>\n</array>\n```\n\n----------------------------------------\n\nTITLE: Implementing Background Fetch Tasks with Expo Modules (TypeScript)\nDESCRIPTION: This TypeScript/React Native example demonstrates the complete workflow for using `expo-background-fetch`. It shows how to define a background task using `TaskManager.defineTask`, register it with `BackgroundFetch.registerTaskAsync` (specifying interval and Android-specific options), unregister it with `BackgroundFetch.unregisterTaskAsync`, and check the current status using `BackgroundFetch.getStatusAsync` and `TaskManager.isTaskRegisteredAsync`. The example includes a basic UI component to interact with these functions.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/background-fetch.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { StyleSheet, Text, View, Button } from 'react-native';\nimport * as BackgroundFetch from 'expo-background-fetch';\nimport * as TaskManager from 'expo-task-manager';\n\nconst BACKGROUND_FETCH_TASK = 'background-fetch';\n\n// 1. Define the task by providing a name and the function that should be executed\n// Note: This needs to be called in the global scope (e.g outside of your React components)\nTaskManager.defineTask(BACKGROUND_FETCH_TASK, async () => {\n  const now = Date.now();\n\n  console.log(`Got background fetch call at date: ${new Date(now).toISOString()}`);\n\n  // Be sure to return the successful result type!\n  return BackgroundFetch.BackgroundFetchResult.NewData;\n});\n\n// 2. Register the task at some point in your app by providing the same name,\n// and some configuration options for how the background fetch should behave\n// Note: This does NOT need to be in the global scope and CAN be used in your React components!\nasyn  c function registerBackgroundFetchAsync() {\n  return BackgroundFetch.registerTaskAsync(BACKGROUND_FETCH_TASK, {\n    minimumInterval: 60 * 15, // 15 minutes\n    stopOnTerminate: false, // android only,\n    startOnBoot: true, // android only\n  });\n}\n\n// 3. (Optional) Unregister tasks by specifying the task name\n// This will cancel any future background fetch calls that match the given name\n// Note: This does NOT need to be in the global scope and CAN be used in your React components!\nasync function unregisterBackgroundFetchAsync() {\n  return BackgroundFetch.unregisterTaskAsync(BACKGROUND_FETCH_TASK);\n}\n\nexport default function BackgroundFetchScreen() {\n  const [isRegistered, setIsRegistered] = useState(false);\n  const [status, setStatus] = useState(null);\n\n  useEffect(() => {\n    checkStatusAsync();\n  }, []);\n\n  const checkStatusAsync = async () => {\n    const status = await BackgroundFetch.getStatusAsync();\n    const isRegistered = await TaskManager.isTaskRegisteredAsync(BACKGROUND_FETCH_TASK);\n    setStatus(status);\n    setIsRegistered(isRegistered);\n  };\n\n  const toggleFetchTask = async () => {\n    if (isRegistered) {\n      await unregisterBackgroundFetchAsync();\n    } else {\n      await registerBackgroundFetchAsync();\n    }\n\n    checkStatusAsync();\n  };\n\n  return (\n    <View style={styles.screen}>\n      <View style={styles.textContainer}>\n        <Text>\n          Background fetch status:{' '}\n          <Text style={styles.boldText}>\n            {status && BackgroundFetch.BackgroundFetchStatus[status]}\n          </Text>\n        </Text>\n        <Text>\n          Background fetch task name:{' '}\n          <Text style={styles.boldText}>\n            {isRegistered ? BACKGROUND_FETCH_TASK : 'Not registered yet!'}\n          </Text>\n        </Text>\n      </View>\n      <View style={styles.textContainer}></View>\n      <Button\n        title={isRegistered ? 'Unregister BackgroundFetch task' : 'Register BackgroundFetch task'}\n        onPress={toggleFetchTask}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  screen: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  textContainer: {\n    margin: 10,\n  },\n  boldText: {\n    fontWeight: 'bold',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Locale Settings Usage Example\nDESCRIPTION: Example of using expo-localization to access device locale settings and preferences including language, currency, and calendar information.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/localization.mdx#2025-04-22_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\nimport { getLocales, getCalendars } from 'expo-localization';\n\nconst {\n  languageTag,\n  languageCode,\n  textDirection,\n  digitGroupingSeparator,\n  decimalSeparator,\n  measurementSystem,\n  currencyCode,\n  currencySymbol,\n  regionCode,\n} = getLocales()[0];\n\nconst { calendar, timeZone, uses24hourClock, firstWeekday } = getCalendars()[0];\n```\n\n----------------------------------------\n\nTITLE: Rolling Back EAS Updates via CLI Command\nDESCRIPTION: Command to initiate a rollback to a previous update version in EAS environments when an update has been mistakenly published.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/deployment.mdx#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\neas update:rollback\n```\n\n----------------------------------------\n\nTITLE: Creating PWA Manifest File for Expo App\nDESCRIPTION: Shows the structure of a manifest.json file for a Progressive Web App. This file specifies app metadata such as name, icons, and display properties for the installed PWA.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/progressive-web-apps.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"short_name\": \"Expo App\",\n  \"name\": \"Expo Router Sample\",\n  \"icons\": [\n    {\n      \"src\": \"favicon.ico\",\n      \"sizes\": \"64x64 32x32 24x24 16x16\",\n      \"type\": \"image/x-icon\"\n    },\n    {\n      \"src\": \"logo192.png\",\n      \"type\": \"image/png\",\n      \"sizes\": \"192x192\"\n    },\n    {\n      \"src\": \"logo512.png\",\n      \"type\": \"image/png\",\n      \"sizes\": \"512x512\"\n    }\n  ],\n  \"start_url\": \".\",\n  \"display\": \"standalone\",\n  \"theme_color\": \"#000000\",\n  \"background_color\": \"#ffffff\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Android Manifest for Splash Screen Theme\nDESCRIPTION: Modifies AndroidManifest.xml to apply the splash screen theme to the main activity.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-splash-screen/README.md#2025-04-22_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    package=\"com.example.myapp\">\n\n  ...\n\n  <application ...>\n\n+   <!-- Ensure that 'android:theme' property is pointing to the style containing native splash screen reference - see 'styles.xml' -->\n    <activity\n      android:name=\".MainActivity\"\n+     android:theme=\"@style/AppTheme\"\n      ...\n    >\n      ...\n    </activity>\n  </application>\n\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Creating PWA Manifest for Expo Router App\nDESCRIPTION: This code snippet demonstrates how to create a PWA manifest file (manifest.json) for an Expo Router app. It includes configurations for app name, icons, and display properties.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/migrate/from-expo-webpack.mdx#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"short_name\": \"Expo App\",\n  \"name\": \"Expo Router Sample\",\n  \"icons\": [\n    {\n      \"src\": \"favicon.ico\",\n      \"sizes\": \"64x64 32x32 24x24 16x16\",\n      \"type\": \"image/x-icon\"\n    },\n    {\n      \"src\": \"logo192.png\",\n      \"type\": \"image/png\",\n      \"sizes\": \"192x192\"\n    },\n    {\n      \"src\": \"logo512.png\",\n      \"type\": \"image/png\",\n      \"sizes\": \"512x512\"\n    }\n  ],\n  \"start_url\": \".\",\n  \"display\": \"standalone\",\n  \"theme_color\": \"#000000\",\n  \"background_color\": \"#ffffff\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables in React Native Component\nDESCRIPTION: Demonstrates how to access environment variables in a React Native component using process.env with the EXPO_PUBLIC_ prefix.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/environment-variables.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from 'react-native';\n\nfunction Post() {\n  const apiUrl = process.env.EXPO_PUBLIC_API_URL;\n\n  async function onPress() {\n    await fetch(apiUrl, { ... })\n  }\n\n  return <Button onPress={onPress} title=\"Post\" />;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Audio.Sound in expo-av\nDESCRIPTION: Example showing how to create and initialize an Audio.Sound object with playback configuration.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/av.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nawait Audio.setAudioModeAsync({ playsInSilentModeIOS: true });\n\nconst playbackObject = new Audio.Sound();\n// OR\nconst { sound: playbackObject } = await Audio.Sound.createAsync(\n  { uri: 'http://foo/bar.mp3' },\n  { shouldPlay: true }\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Android WRITE_SETTINGS Permission in AndroidManifest.xml (XML)\nDESCRIPTION: This XML snippet instructs how to declare the WRITE_SETTINGS permission in the AndroidManifest.xml file, which is required for modifying the device's system brightness settings on Android platforms. This permission must be added for native or manually configured Expo projects to allow the expo-brightness module to set global brightness values. Skipping this results in inability to change system brightness programmatically on Android.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/brightness.mdx#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\\\"android.permission.WRITE_SETTINGS\\\" />\n```\n\n----------------------------------------\n\nTITLE: Styling Tab Navigator Header and Tab Bar\nDESCRIPTION: Configuration for customizing the visual appearance of the tab navigator, including header and tab bar styling with custom background colors and text colors.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/add-navigation.mdx#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<Tabs\n  screenOptions={{\n    tabBarActiveTintColor: '#ffd33d',\n    headerStyle: {\n      backgroundColor: '#25292e',\n    },\n    headerShadowVisible: false,\n    headerTintColor: '#fff',\n    tabBarStyle: {\n    backgroundColor: '#25292e',\n    },\n  }}\n>\n```\n\n----------------------------------------\n\nTITLE: Installing expo-dev-client in React Native\nDESCRIPTION: Command to install expo-dev-client package using npx expo install.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/bare/install-dev-builds-in-bare.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo install expo-dev-client\n```\n\n----------------------------------------\n\nTITLE: Capturing a React Native View with react-native-view-shot using Pixel Ratio - JavaScript\nDESCRIPTION: This snippet demonstrates how to capture a React Native view as an image with the react-native-view-shot library, adjusting for device pixel density using PixelRatio. It calculates the desired output size in logical pixels to match a specific pixel count (e.g., 1080 for FullHD), then calls captureRef with custom options for image quality, format, and output type. Dependencies include react-native-view-shot and the React Native PixelRatio module. Inputs are references to the view and desired image parameters; the output is an image file or data as returned by captureRef.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/captureRef.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst targetPixelCount = 1080; // If you want full HD pictures\\nconst pixelRatio = PixelRatio.get(); // The pixel ratio of the device\\n// pixels * pixelRatio = targetPixelCount, so pixels = targetPixelCount / pixelRatio\\nconst pixels = targetPixelCount / pixelRatio;\\n\\nconst result = await captureRef(this.imageContainer, {\\n  result: 'tmpfile',\\n  height: pixels,\\n  width: pixels,\\n  quality: 1,\\n  format: 'png',\\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Assets at Runtime with useAssets Hook\nDESCRIPTION: Example of using the useAssets hook from expo-asset to load assets asynchronously at runtime\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/user-interface/assets.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useAssets } from 'expo-asset';\n\nexport default function HomeScreen() {\n  const [assets, error] = useAssets([\n    require('path/to/example-1.jpg'),\n    require('path/to/example-2.png'),\n  ]);\n\n  return assets ? <Image source={assets[0]} /> : null;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-web-browser in app.json (JSON)\nDESCRIPTION: Demonstrates how to configure the expo-web-browser plugin in an Expo app.json by specifying the experimentalLauncherActivity property. This enables a launcher activity on Android to preserve the system browser state when the app backgrounds. The example should be placed under the \"plugins\" array in the app configuration. Requires a rebuild to take effect and only applies to Android.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/webbrowser.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-web-browser\",\n        {\n          \"experimentalLauncherActivity\": true\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Default iOS Gymfile Template for Simulator Build\nDESCRIPTION: Default template for generating Gymfile when building for iOS simulator without credentials.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_40\n\nLANGUAGE: ruby\nCODE:\n```\nsuppress_xcode_output(true)\nclean(<%- CLEAN %>)\n\nscheme(\"<%- SCHEME %>\")\n<% if (BUILD_CONFIGURATION) { %>\nconfiguration(\"<%- BUILD_CONFIGURATION %>\")\n<% } %>\n\nderived_data_path(\"<%- DERIVED_DATA_PATH %>\")\nskip_package_ipa(true)\nskip_archive(true)\ndestination(\"<%- SCHEME_SIMULATOR_DESTINATION %>\")\n\ndisable_xcpretty(true)\nbuildlog_path(\"<%- LOGS_DIRECTORY %>\")\n```\n\n----------------------------------------\n\nTITLE: Verifying EAS Update Configuration in iOS Simulator Build\nDESCRIPTION: This XML snippet shows the expected configuration in the Expo.plist file when inspecting an iOS Simulator build manually, including channel name, runtime version, and update URL.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/debug.mdx#2025-04-22_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<key>EXUpdatesRequestHeaders</key>\n<dict>\n  <key>expo-channel-name</key>\n  <string>your-channel-name</string>\n</dict>\n<key>EXUpdatesRuntimeVersion</key>\n<string>your-runtime-version</string>\n<key>EXUpdatesURL</key>\n<string>https://u.expo.dev/your-project-id</string>\n```\n\n----------------------------------------\n\nTITLE: Initializing Audio.Sound in expo-av\nDESCRIPTION: Demonstrates setting up Audio.Sound for playback in expo-av. Includes setting audio mode and creating an audio sound object. Requires expo-av setup with URI for audio file.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/av.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nawait Audio.setAudioModeAsync({ playsInSilentModeIOS: true });\n\nconst playbackObject = new Audio.Sound();\n// OR\nconst { sound: playbackObject } = await Audio.Sound.createAsync(\n  { uri: 'http://foo/bar.mp3' },\n  { shouldPlay: true }\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Route Redirection in Expo Router\nDESCRIPTION: Component that redirects to a dynamic user route with initial parameter\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/reference/url-parameters.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Redirect } from 'expo-router';\n\nexport default function Route() {\n  return <Redirect href=\"/evanbacon\" />;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Properties with withGradleProperties\nDESCRIPTION: This properties file snippet demonstrates how to safely modify Android configuration using the static gradle.properties file instead of directly altering Gradle files. It shows setting the JavaScript engine to Hermes.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/config-plugins/development-and-debugging.mdx#2025-04-22_snippet_15\n\nLANGUAGE: properties\nCODE:\n```\n# @info Safely modified using the <code>withGradleProperties()</code> mod. #\nexpo.react.jsEngine=hermes\n# @end #\n```\n\n----------------------------------------\n\nTITLE: Enabling CSS Support in Metro Config for Tailwind (JavaScript)\nDESCRIPTION: This configuration ensures that CSS support is enabled in the Metro config when using Tailwind CSS in an Expo project.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/tailwind.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('expo/metro-config').MetroConfig} */\nconst config = getDefaultConfig(__dirname, {\n  isCSSEnabled: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Test Scripts in package.json\nDESCRIPTION: Defines various Jest test scripts for different testing scenarios including watch mode, debug mode, coverage reporting, and snapshot updates. Each script serves a specific testing purpose from active development to final testing.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/unit-testing.mdx#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n  \"test\": \"jest --watch --coverage=false --changedSince=origin/main\",\n  \"testDebug\": \"jest -o --watch --coverage=false\",\n  \"testFinal\": \"jest\",\n  \"updateSnapshots\": \"jest -u --coverage=false\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring BuildProperties in app.config.js\nDESCRIPTION: JavaScript implementation of expo-build-properties plugin configuration that sets Android SDK versions to 34 and iOS deployment target to 13.4.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/build-properties.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  expo: {\n    plugins: [\n      [\n        'expo-build-properties',\n        {\n          android: {\n            compileSdkVersion: 34,\n            targetSdkVersion: 34,\n            buildToolsVersion: '34.0.0',\n          },\n          ios: {\n            deploymentTarget: '13.4',\n          },\n        },\n      ],\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuration for Google Maps API Key in app.json for iOS\nDESCRIPTION: JSON configuration snippet showing how to add the Google Maps API key to the iOS section of app.json. This is required for using Google Maps in production iOS applications.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/map-view.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n    \"ios\": {\n      \"config\": {\n        \"googleMapsApiKey\":  \"process.env.GOOGLE_MAPS_API_KEY\",\n        },\n      }\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-calendar plugin in app.json\nDESCRIPTION: Example of how to configure the expo-calendar plugin in the app.json file. This sets custom permission messages for calendar and reminder access on iOS.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/calendar.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-calendar\",\n        {\n          \"calendarPermission\": \"The app needs to access your calendar.\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: React Component for HTML Root with Smart Banner\nDESCRIPTION: TypeScript/React component implementing the root HTML structure with Apple Smart Banner meta tag for app promotion.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/linking/ios-universal-links.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { type PropsWithChildren } from 'react';\n\nexport default function Root({ children }: PropsWithChildren) {\n  return (\n    <html lang=\"en\">\n      <head>\n        <meta charSet=\"utf-8\" />\n        <meta httpEquiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n        <meta name=\"apple-itunes-app\" content=\"app-id=<ITUNES_ID>\" />\n        {/* Other head elements... */}\n      </head>\n      <body>{children}</body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json scripts for Firebase Hosting deployment in Expo\nDESCRIPTION: Adds predeploy and deploy-hosting scripts to package.json for building and deploying an Expo web app to Firebase Hosting.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/publishing-websites.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n  /* @hide ... */ /* @end */\n  \"predeploy\": \"expo export -p web\",\n  \"deploy-hosting\": \"npm run predeploy && firebase deploy --only hosting\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Expo Application Module\nDESCRIPTION: Basic import statement to use the expo-application module in your project. This gives access to all the application-related utilities and information.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/application.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Application from 'expo-application';\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-video in app.json\nDESCRIPTION: Example of configuring expo-video using its built-in config plugin in the app.json file. This snippet shows how to enable background playback and picture-in-picture support.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/video.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-video\",\n        {\n          \"supportsBackgroundPlayback\": true,\n          \"supportsPictureInPicture\": true\n        }\n      ]\n    ],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding expo dependencies to package.json\nDESCRIPTION: Configures the package.json to include expo as a peer dependency and expo-modules-core as a development dependency.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/existing-library.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  /* @hide ... */ /* @end */\n  \"devDependencies\": {\n    \"expo-modules-core\": \"^X.Y.Z\"\n  },\n  \"peerDependencies\": {\n    \"expo\": \"*\"\n  },\n  \"peerDependenciesMeta\": {\n    \"expo\": {\n      \"optional\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json for npm cache with Yarn 1 Classic\nDESCRIPTION: This snippet shows how to add an eas-build-pre-install script to package.json that modifies the yarn.lock file to replace the default Yarn registry URL with the EAS Build npm cache URL when it's available.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/build-reference/npm-cache-with-yarn.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"eas-build-pre-install\": \"bash -c \\\"[ ! -z \\\\\\\"$EAS_BUILD_NPM_CACHE_URL\\\\\\\" ] && sed -i -e \\\\\\\"s#https://registry.yarnpkg.com#$EAS_BUILD_NPM_CACHE_URL#g\\\\\\\" yarn.lock\\\" || true\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Job Configuration YAML\nDESCRIPTION: Defines a custom job, which allows running custom code using built-in EAS functions. Custom jobs do not require a `type` field. Steps can run commands and access EAS functions.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/workflows/syntax.mdx#_snippet_34\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  my_job:\n    steps:\n      # ...\n```\n\n----------------------------------------\n\nTITLE: Generating Video Thumbnails in React Native using Expo (JSX)\nDESCRIPTION: This snippet provides a complete React Native functional component using the expo-video-thumbnails library to extract a thumbnail image from a remote video URL. It uses React hooks for state management, and displays the resulting thumbnail as well as its URI. Dependencies include expo-video-thumbnails and react-native core components. The main parameter for thumbnail generation is the video URL (as the source) and an options object specifying the extraction time (in milliseconds). Input: none (uses hardcoded video URL); Output: displays an image on the UI. Limitations: works only on supported platforms (Android/iOS), not for remote modules or web.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/video-thumbnails.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { StyleSheet, Button, View, Image, Text } from 'react-native';\nimport * as VideoThumbnails from 'expo-video-thumbnails';\n\nexport default function App() {\n  const [image, setImage] = useState(null);\n\n  const generateThumbnail = async () => {\n    try {\n      const { uri } = await VideoThumbnails.getThumbnailAsync(\n        'https://d23dyxeqlo5psv.cloudfront.net/big_buck_bunny.mp4',\n        {\n          time: 15000,\n        }\n      );\n      setImage(uri);\n    } catch (e) {\n      console.warn(e);\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      <Button onPress={generateThumbnail} title=\"Generate thumbnail\" />\n      {image && <Image source={{ uri: image }} style={styles.image} />}\n      <Text>{image}</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#F5FCFF',\n  },\n  image: {\n    width: 200,\n    height: 200,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Metro for Expo Updates\nDESCRIPTION: Metro configuration setup required for Expo integration, extending the default Expo metro config.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/integration-in-existing-native-apps.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Learn more https://docs.expo.io/guides/customizing-metro\nconst { getDefaultConfig } = require('expo/metro-config');\n\n/** @type {import('expo/metro-config').MetroConfig} */\nconst config = getDefaultConfig(__dirname); // eslint-disable-line no-undef\n\n// Make any custom changes you need for your project by\n// directly modifying \"config\"\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-screen-orientation Plugin in app.json\nDESCRIPTION: Example of how to configure the expo-screen-orientation plugin in the app.json file. It sets the initialOrientation for iOS to 'DEFAULT'.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/screen-orientation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"ios\": {\n      \"requireFullScreen\": true\n    },\n    \"plugins\": [\n      [\n        \"expo-screen-orientation\",\n        {\n          \"initialOrientation\": \"DEFAULT\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Expo Development Server\nDESCRIPTION: This command starts the Expo development server. After running this command, pressing 'a' in the terminal will open the project on an Android device or emulator.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/eas/android-development-build.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo start\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Background Modes in app.json\nDESCRIPTION: JSON configuration for enabling background location, fetch, and remote notifications in an Expo app's Info.plist on iOS. These settings are required for background tasks to function on iOS devices.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/task-manager.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"ios\": {\n      \"infoPlist\": {\n        \"UIBackgroundModes\": [\"location\", \"fetch\", \"remote-notification\"]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running fastlane for iOS builds\nDESCRIPTION: Runs 'fastlane gym' command against the Gymfile located in the ios project directory to build the iOS app. This function is only available for iOS builds.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_44\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: Build iOS app\n  steps:\n    - eas/checkout\n    - eas/install_node_modules\n    - eas/resolve_apple_team_id_from_credentials:\n        id: resolve_apple_team_id_from_credentials\n    - eas/prebuild:\n        inputs:\n          clean: false\n          apple_team_id: ${ steps.resolve_apple_team_id_from_credentials.apple_team_id }\n    - eas/configure_eas_update\n    - eas/configure_ios_credentials\n    - eas/generate_gymfile_from_template:\n        inputs:\n          credentials: ${ eas.job.secrets.buildCredentials }\n    # @info #\n    - eas/run_fastlane\n    # @end #\n```\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: Build iOS app\n  steps:\n    - eas/checkout\n    - eas/install_node_modules\n    - eas/prebuild\n    - eas/configure_eas_update\n    - eas/generate_gymfile_from_template\n    # @info #\n    - eas/run_fastlane\n    # @end #\n```\n\n----------------------------------------\n\nTITLE: Modifying iOS AppDelegate for Custom Entry File in Development\nDESCRIPTION: Changes the RCTBundleURLProvider configuration in the iOS AppDelegate.mm file to use .expo/.virtual-metro-entry instead of index as the bundle root for development builds.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/config/metro.mdx#2025-04-22_snippet_22\n\nLANGUAGE: diff\nCODE:\n```\n- (NSURL *)sourceURLForBridge:(RCTBridge *)bridge\n{\n#if DEBUG\n-  return [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@\"index\"];\n+  return [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@\".expo/.virtual-metro-entry\"];\n#else\n  return [[NSBundle mainBundle] URLForResource:@\"main\" withExtension:@\"jsbundle\"];\n#endif\n}\n```\n\n----------------------------------------\n\nTITLE: Installing TypeScript Dependencies for Expo Projects\nDESCRIPTION: Terminal commands to install the required TypeScript development dependencies for an Expo project. Different command options are provided for macOS/Linux and Windows environments.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/typescript.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo install typescript @types/react --dev\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo install typescript @types/react \"--\" --dev\n```\n\n----------------------------------------\n\nTITLE: Launching Android Location Settings Intent with TypeScript\nDESCRIPTION: Example showing how to launch Android location settings using expo-intent-launcher with ActivityAction enum.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/intent-launcher.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { startActivityAsync, ActivityAction } from 'expo-intent-launcher';\n\n// Open location settings\nstartActivityAsync(ActivityAction.LOCATION_SOURCE_SETTINGS);\n```\n\n----------------------------------------\n\nTITLE: Integrating Image Picker with Button Component\nDESCRIPTION: Incorporates the 'pickImageAsync' function into the Button component's 'onPress' prop, allowing users to initialize the image selection process upon button press. The code snippet handles user interaction and updates the UI accordingly.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/image-picker.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nreturn (\n  <View style={styles.container}>\n    <View style={styles.imageContainer}>\n      <ImageViewer imgSource={PlaceholderImage} />\n    </View>\n    <View style={styles.footerContainer}>\n      <Button theme=\"primary\" label=\"Choose a photo\" onPress={pickImageAsync} />\n      <Button label=\"Use this photo\" />\n    </View>\n  </View>\n);\n```\n\n----------------------------------------\n\nTITLE: Using the usePreventScreenCapture Hook with Expo Screen Capture (React Native/JSX)\nDESCRIPTION: This snippet shows how to use the usePreventScreenCapture hook from expo-screen-capture in a functional component to automatically prevent screen capture while the component is mounted. It requires the expo-screen-capture library and React Native's View/Text components, but does not require any additional permissions. No parameters are required, and no external side effects are exposed aside from blocking screen capture while the hook is active.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/screen-capture.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { usePreventScreenCapture } from 'expo-screen-capture';\nimport { Text, View } from 'react-native';\n\nexport default function ScreenCaptureExample() {\n  usePreventScreenCapture();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>As long as this component is mounted, this screen is unrecordable!</Text>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic MapView Implementation in React Native\nDESCRIPTION: A simple example of implementing a MapView component that fills the entire screen. This code creates a basic map interface using react-native-maps.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/map-view.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport MapView from 'react-native-maps';\nimport { StyleSheet, View } from 'react-native';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <MapView style={styles.map} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  map: {\n    width: '100%',\n    height: '100%',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Tab Bars in Expo Router\nDESCRIPTION: Demonstrates how to create multiple tab bars using TabList and TabTrigger components. Shows both default and custom tab bar implementations with proper routing configuration.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/advanced/custom-tabs.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Tabs>\n  <TabSlot />\n  <View>\n    <View>\n      <TabTrigger name=\"home\">\n        <Text>Home</Text>\n      </TabTrigger>\n      <TabTrigger name=\"article\">\n        <Text>article</Text>\n      </TabTrigger>\n    </View>\n  </View>\n  <TabList style={{ display: 'none' }}>\n    <TabTrigger name=\"home\" href=\"/\">\n      <Text>Home</Text>\n    </TabTrigger>\n    <TabTrigger name=\"article\" href=\"/article\">\n      <Text>article</Text>\n    </TabTrigger>\n  </TabList>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Metadata for Expo Module\nDESCRIPTION: Standard package.json metadata configuration for Expo modules including repository, license, and bug tracking information\nSOURCE: https://github.com/expo/expo/blob/main/guides/Expo Module Infrastructure.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/expo/expo.git\"\n  },\n  \"author\": \"Expo\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/expo/expo/issues\"\n  },\n  \"homepage\": \"https://github.com/expo/expo/tree/main/packages/expo-sms\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Media Looping with Counter\nDESCRIPTION: Demonstrates how to implement a loop that plays media exactly 20 times using the playback status update handler.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/av.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst N = 20;\n/* @hide ... */ /* @end */\n\n_onPlaybackStatusUpdate = playbackStatus => {\n  if (playbackStatus.didJustFinish) {\n    if (this.state.numberOfLoops == N - 1) {\n      playbackObject.setIsLooping(false);\n    }\n    this.setState({ numberOfLoops: this.state.numberOfLoops + 1 });\n  }\n};\n\n/* @hide ... */ /* @end */\nthis.setState({ numberOfLoops: 0 });\n// Load the playbackObject and obtain the reference.\nplaybackObject.setOnPlaybackStatusUpdate(this._onPlaybackStatusUpdate);\nplaybackObject.setIsLooping(true);\n```\n\n----------------------------------------\n\nTITLE: Initiating Branch-Based Rollout\nDESCRIPTION: Command to start a branch-based rollout, which allows incremental deployment of updates from a new branch to a percentage of users while maintaining others on the current branch.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/rollouts.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ eas channel:rollout\n```\n\n----------------------------------------\n\nTITLE: Configuring Expo App JSON for Associated Domains\nDESCRIPTION: JSON configuration in app.json for setting up associated domains in an Expo app to enable Universal Links functionality.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/linking/ios-universal-links.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"ios\": {\n      \"associatedDomains\": [\"applinks:expo.dev\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring NPM Scripts for Expo Module Development\nDESCRIPTION: Standard npm script configurations for building, testing, and managing Expo modules\nSOURCE: https://github.com/expo/expo/blob/main/guides/Expo Module Infrastructure.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"build\": \"expo-module build\",\n    \"clean\": \"expo-module clean\",\n    \"lint\": \"expo-module lint\",\n    \"test\": \"expo-module test\",\n    \"postinstall\": \"expo-module postinstall\",\n    \"prepare\": \"expo-module prepare\",\n    \"prepublishOnly\": \"expo-module prepublishOnly\",\n    \"expo-module\": \"expo-module\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Google Maps API Configuration for iOS\nDESCRIPTION: JSON configuration for setting up Google Maps API key in the iOS section of app.json\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/map-view.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n    \"ios\": {\n      \"config\": {\n        \"googleMapsApiKey\":  \"process.env.GOOGLE_MAPS_API_KEY\",\n        },\n      }\n```\n\n----------------------------------------\n\nTITLE: Implementing Light Sensor Monitoring in React Native with Expo\nDESCRIPTION: A complete React Native component that demonstrates how to monitor light sensor data using expo-sensors. The component includes subscription management, real-time illuminance display, and a toggle button to control the sensor monitoring. Only works on Android platforms.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/light-sensor.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View, Platform } from 'react-native';\nimport { LightSensor } from 'expo-sensors';\n\nexport default function App() {\n  const [{ illuminance }, setData] = useState({ illuminance: 0 });\n  const [subscription, setSubscription] = useState(null);\n\n  const toggle = () => {\n    if (subscription) {\n      unsubscribe();\n    } else {\n      subscribe();\n    }\n  };\n\n  const subscribe = () => {\n    setSubscription(\n      LightSensor.addListener(sensorData => {\n        setData(sensorData);\n      })\n    );\n  };\n\n  const unsubscribe = () => {\n    subscription && subscription.remove();\n    setSubscription(null);\n  };\n\n  useEffect(() => {\n    subscribe();\n    return () => unsubscribe();\n  }, []);\n\n  return (\n    <View style={styles.sensor}>\n      <Text>Light Sensor:</Text>\n      <Text>\n        Illuminance: {Platform.OS === 'android' ? `${illuminance} lx` : `Only available on Android`}\n      </Text>\n      <View style={styles.buttonContainer}>\n        <TouchableOpacity onPress={toggle} style={styles.button}>\n          <Text>Toggle</Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  sensor: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    paddingHorizontal: 10,\n  },\n  buttonContainer: {\n    flexDirection: 'row',\n    alignItems: 'stretch',\n    marginTop: 15,\n  },\n  button: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#eee',\n    padding: 10,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Up Dynamic Module Imports with Metro Runtime\nDESCRIPTION: Shows how to use dynamic imports that will be code-split by Metro. This example demonstrates importing a math module asynchronously, which enables bundle splitting for web in production builds when using @expo/metro-runtime.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/config/metro.mdx#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nexport function add(a, b) {\n  return a + b;\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nimport '@expo/metro-runtime';\n\n// This will be split into a separate chunk.\nimport('./math').then(math => {\n  console.log(math.add(1, 2));\n});\n```\n\n----------------------------------------\n\nTITLE: Migrating Link Component Usage\nDESCRIPTION: Examples showing the difference between React Navigation's Link component and Expo Router's Link component usage.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/migrate/from-react-navigation.mdx#2025-04-22_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n// React Navigation\n<Link to=\"Settings\" />\n\n// Expo Router\n<Link href=\"/settings\" />\n```\n\n----------------------------------------\n\nTITLE: Importing Application Module in JavaScript\nDESCRIPTION: This snippet shows how to import the Application module from expo-application. This module provides access to various application-related information and functions.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/application.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Application from 'expo-application';\n```\n\n----------------------------------------\n\nTITLE: Creating New Expo Application\nDESCRIPTION: Command to create a new Expo application project using create-expo-app\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/hosting/get-started.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npx create-expo-app@latest my-app\n```\n\n----------------------------------------\n\nTITLE: Client-Side API Request Example\nDESCRIPTION: React Native component demonstrating how to fetch data from an API route on the client side.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/reference/api-routes.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Button } from 'react-native';\n\nasync function fetchHello() {\n  const response = await fetch('/hello');\n  const data = await response.json();\n  alert('Hello ' + data.hello);\n}\n\nexport default function App() {\n  return <Button onPress={() => fetchHello()} title=\"Fetch hello\" />;\n}\n```\n\n----------------------------------------\n\nTITLE: Managing GIF Files in TypeScript with expo-file-system\nDESCRIPTION: Implements a complete GIF management system with functions to download, cache, retrieve, and delete GIF files using the Giphy API. Includes directory creation, file checking, and content URI generation for sharing.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/filesystem.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as FileSystem from 'expo-file-system';\n\nconst gifDir = FileSystem.cacheDirectory + 'giphy/';\nconst gifFileUri = (gifId: string) => gifDir + `gif_${gifId}_200.gif`;\nconst gifUrl = (gifId: string) => `https://media1.giphy.com/media/${gifId}/200.gif`;\n\n// Checks if gif directory exists. If not, creates it\nasync function ensureDirExists() {\n  const dirInfo = await FileSystem.getInfoAsync(gifDir);\n  if (!dirInfo.exists) {\n    console.log(\"Gif directory doesn't exist, creating…\");\n    await FileSystem.makeDirectoryAsync(gifDir, { intermediates: true });\n  }\n}\n\n// Downloads all gifs specified as array of IDs\nexport async function addMultipleGifs(gifIds: string[]) {\n  try {\n    await ensureDirExists();\n\n    console.log('Downloading', gifIds.length, 'gif files…');\n    await Promise.all(gifIds.map(id => FileSystem.downloadAsync(gifUrl(id), gifFileUri(id))));\n  } catch (e) {\n    console.error(\"Couldn't download gif files:\", e);\n  }\n}\n\n// Returns URI to our local gif file\n// If our gif doesn't exist locally, it downloads it\nexport async function getSingleGif(gifId: string) {\n  await ensureDirExists();\n\n  const fileUri = gifFileUri(gifId);\n  const fileInfo = await FileSystem.getInfoAsync(fileUri);\n\n  if (!fileInfo.exists) {\n    console.log(\"Gif isn't cached locally. Downloading…\");\n    await FileSystem.downloadAsync(gifUrl(gifId), fileUri);\n  }\n\n  return fileUri;\n}\n\n// Exports shareable URI - it can be shared outside your app\nexport async function getGifContentUri(gifId: string) {\n  return FileSystem.getContentUriAsync(await getSingleGif(gifId));\n}\n\n// Deletes whole giphy directory with all its content\nexport async function deleteAllGifs() {\n  console.log('Deleting all GIF files…');\n  await FileSystem.deleteAsync(gifDir);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating .env File for Local Development in Expo\nDESCRIPTION: Example of a .env file created using the 'eas env:pull' command for local development in an Expo project. It shows how environment variables are structured and which ones are available.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/environment-variables.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Environment: development\n\nAPP_VARIANT=development\nEXPO_PUBLIC_API_URL=https://staging.my-api-url.mycompany.com\n# GOOGLE_SERVICES_JSON=***** (secret variables are not available for reading)\nSENTRY_AUTH_TOKEN=token\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Google Services File Path in Expo Config\nDESCRIPTION: Example of configuring the Android Google Services file path in app.config.js using an environment variable. Shows how to handle file-based environment variables by falling back to a local path if the environment variable is not set.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/environment-variables.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  /* @hide ...*/ /* @end */\n  android: {\n    googleServicesFile: process.env.GOOGLE_SERVICES_JSON ?? '/local/path/to/google-services.json',\n    /* @hide ...*/ /* @end */\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Deploying and Assigning Alias in EAS Hosting\nDESCRIPTION: This command creates a new deployment and assigns it an alias 'hello'. It results in both a standard URL and an aliased URL for the deployment.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/hosting/deployments-and-aliases.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ eas deploy --alias hello\n```\n\n----------------------------------------\n\nTITLE: Importing Asset from expo-asset in JavaScript\nDESCRIPTION: This code snippet demonstrates how to import the Asset class from the expo-asset module. This is the primary way to access the functionality provided by the asset system in Expo projects.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/asset.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Asset } from 'expo-asset';\n```\n\n----------------------------------------\n\nTITLE: EAS Credentials Inspection Command\nDESCRIPTION: Command to view and manage currently configured app signing credentials, allowing for inspection, removal, and modification of credentials.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/app-signing/managed-credentials.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\neas credentials\n```\n\n----------------------------------------\n\nTITLE: Configuring PWA Manifest for Static/Server Rendered Expo App\nDESCRIPTION: Shows how to dynamically create and link the PWA manifest for static or server-rendered Expo apps. This is done by modifying the app/+html.tsx file to include the manifest link in the head component.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/progressive-web-apps.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ScrollViewStyleReset } from 'expo-router/html';\nimport type { PropsWithChildren } from 'react';\n\nexport default function Root({ children }: PropsWithChildren) {\n  return (\n    <html lang=\"en\">\n      <head>\n        <meta charSet=\"utf-8\" />\n        <meta httpEquiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\" />\n\n        {/* Link the PWA manifest file. */}\n        <link rel=\"manifest\" href=\"/manifest.json\" />\n\n        <ScrollViewStyleReset />\n\n        {/* Add any additional <head> elements that you want globally available on web... */}\n      </head>\n      <body>{children}</body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Page Margins in HTML for Android Printing\nDESCRIPTION: CSS example for setting page margins in Android printing by using the @page CSS rule within the HTML content. This is needed because Android handles page margins differently than iOS.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/print.mdx#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<style>\n  @page {\n    margin: 20px;\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Scheme for Stripe Redirects\nDESCRIPTION: Code snippet showing how to properly configure URL schemes for handling Stripe redirects in both Expo Go and production environments using expo-linking and expo-constants.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/stripe.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Linking from 'expo-linking';\nimport Constants from 'expo-constants';\n\nurlScheme:\n  Constants.appOwnership === 'expo'\n    ? Linking.createURL('/--/')\n    : Linking.createURL(''),\n```\n\n----------------------------------------\n\nTITLE: Creating a Standalone Config Plugin File\nDESCRIPTION: Shows how to create a separate file for a config plugin that modifies the app name. This plugin can be imported and used in the main config file.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/config-plugins/plugins-and-mods.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = function withPrefixedName(config, prefix) {\n  config.name = prefix + '-' + config.name;\n  return config;\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Contacts Usage in React Native with Expo\nDESCRIPTION: A React Native component demonstrating how to request permissions and fetch contacts using the expo-contacts module. It logs the first contact's information to the console.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/contacts.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEffect } from 'react';\nimport { StyleSheet, View, Text } from 'react-native';\nimport * as Contacts from 'expo-contacts';\n\nexport default function App() {\n  useEffect(() => {\n    (async () => {\n      const { status } = await Contacts.requestPermissionsAsync();\n      if (status === 'granted') {\n        const { data } = await Contacts.getContactsAsync({\n          fields: [Contacts.Fields.Emails],\n        });\n\n        if (data.length > 0) {\n          const contact = data[0];\n          console.log(contact);\n        }\n      }\n    })();\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <Text>Contacts Module Example</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Import Camera Component from expo-camera\nDESCRIPTION: A simple JavaScript import statement to include the Camera component from the expo-camera package in a project.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/camera.mdx#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport { Camera } from 'expo-camera';\n```\n\n----------------------------------------\n\nTITLE: EAS Login and Credentials Commands\nDESCRIPTION: Basic EAS CLI commands to login and access credentials management. Used by authorized Apple Developer account users to manage app signing credentials.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/app-signing/apple-developer-program-roles-and-permissions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ eas login\n\n$ eas credentials\n```\n\n----------------------------------------\n\nTITLE: Installing Expo SDK Library with CLI\nDESCRIPTION: This command shows how to install an Expo SDK library (expo-device in this case) using the Expo CLI. It ensures compatibility with the project's Expo version.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/workflow/using-libraries.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo install expo-device\n```\n\n----------------------------------------\n\nTITLE: Configuring App Icon Example\nDESCRIPTION: Example showing how Prebuild simplifies cross-platform configuration by using a single configuration value to generate platform-specific assets.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/workflow/continuous-native-generation.mdx#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"icon\": \"./icon.png\"\n```\n\n----------------------------------------\n\nTITLE: Managing EAS Branch Operations\nDESCRIPTION: Commands for deleting and renaming branches in EAS Update system.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/eas-cli.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ eas branch:delete [branch-name]\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ eas branch:rename --from [branch-name] --to [branch-name]\n```\n\n----------------------------------------\n\nTITLE: Warming Up Web Browser for Improved Authentication Performance in React Native\nDESCRIPTION: This code snippet demonstrates how to warm up the web browser on Android to improve the performance of the authentication process. It uses the expo-web-browser library to pre-initialize the browser in the background.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/authentication.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEffect } from 'react';\nimport * as WebBrowser from 'expo-web-browser';\n\nfunction App() {\n  useEffect(() => {\n    WebBrowser.warmUpAsync();\n\n    return () => {\n      WebBrowser.coolDownAsync();\n    };\n  }, []);\n\n  // Do authentication ...\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Native Events in TypeScript\nDESCRIPTION: Shows how to subscribe to native events in JavaScript/TypeScript using the addListener method on the module object returned by requireNativeModule. The example listens for clipboard change events.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/module-api.mdx#2025-04-22_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nimport { requireNativeModule, NativeModule } from 'expo';\n\ntype ClipboardChangeEvent = {\n  contentTypes: string[];\n};\n\ntype ClipboardModuleEvents = {\n  onClipboardChanged(event: ClipboardChangeEvent): void;\n};\n\ndeclare class ClipboardModule extends NativeModule<ClipboardModuleEvents> {}\n\nconst Clipboard = requireNativeModule<ClipboardModule>('Clipboard');\n\nClipboard.addListener('onClipboardChanged', (event: ClipboardChangeEvent) => {\n  alert('Clipboard has changed');\n});\n```\n\n----------------------------------------\n\nTITLE: Using SafeAreaView Component\nDESCRIPTION: Example of using SafeAreaView component to automatically handle safe area insets.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/safe-area-context.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SafeAreaView } from 'react-native-safe-area-context';\n\nfunction SomeComponent() {\n  return (\n    <SafeAreaView>\n      <View />\n    </SafeAreaView>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing BoxLink Component in JSX\nDESCRIPTION: React/JSX import statement for a BoxLink UI component from the Expo documentation system.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/regulatory-compliance/privacy-shield.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { BoxLink } from '~/ui/components/BoxLink';\n```\n\n----------------------------------------\n\nTITLE: Converting Local Images for Printing in React Native\nDESCRIPTION: A utility function that converts local images to base64 format for inline inclusion in HTML before printing, which is necessary for iOS due to WKWebView limitations.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/print.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { Asset } from 'expo-asset';\nimport { printAsync } from 'expo-print';\nimport { manipulateAsync } from 'expo-image-manipulator';\n\nasync function generateHTML() {\n  const asset = Asset.fromModule(require('../../assets/logo.png'));\n  const image = await manipulateAsync(asset.localUri ?? asset.uri, [], { base64: true });\n  return `\n    <html>\n      <img\n        src=\"data:image/jpeg;base64,${image.base64}\"\n        style=\"width: 90vw;\" />\n    </html>\n  `;\n}\n\nasync function print() {\n  const html = await generateHTML();\n  await printAsync({ html });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring EAS Update with Custom Settings in YAML\nDESCRIPTION: Sets up EAS Update with custom runtime version and channel values specified in the inputs parameters.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: Configure EAS Update\n  steps:\n    - eas/checkout\n    - eas/install_node_modules\n    - eas/prebuild\n    # @info #\n    - eas/configure_eas_update:\n        inputs:\n          runtime_version: 1.0.0\n          channel: mychannel\n    # @end #\n```\n\n----------------------------------------\n\nTITLE: Resolving Apple Team ID from Credentials in YAML\nDESCRIPTION: Extracts the Apple team ID value from build credentials and makes it available for use in subsequent steps. This function is only available for iOS builds.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: Run prebuild script\n  steps:\n    - eas/checkout\n    - eas/install_node_modules\n    # @info #\n    - eas/resolve_apple_team_id_from_credentials:\n        id: resolve_apple_team_id_from_credentials\n    # @end #\n    - eas/prebuild:\n        inputs:\n          apple_team_id: ${ steps.resolve_apple_team_id_from_credentials.apple_team_id }\n```\n\n----------------------------------------\n\nTITLE: Opening Android Project in Android Studio on macOS\nDESCRIPTION: Command to open the generated Android project in Android Studio. This allows for native debugging with Android Studio's built-in tools after running prebuild.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/debugging/runtime-issues.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ open -a \"/Applications/Android Studio.app\" ./android\n```\n\n----------------------------------------\n\nTITLE: Customizing Android Play Store Build Steps - EAS Build - YAML\nDESCRIPTION: YAML config for an EAS Build workflow that prepares a Play Store-ready Android app. Includes the standard steps: checkout, install node modules, prebuild, credential injection, Gradle invocation, and artifact uploading. Assumes the environment has required node modules and permissions to inject credentials as needed.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_55\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: Customized Android Play Store build example\n  steps:\n    - eas/checkout\n\n    - eas/install_node_modules\n\n    - eas/prebuild\n\n    - eas/inject_android_credentials\n\n    - eas/run_gradle\n\n    - eas/find_and_upload_build_artifacts\n```\n\n----------------------------------------\n\nTITLE: Building and Automatically Submitting an Android App\nDESCRIPTION: This command builds an Android app and automatically submits it to the Google Play Store after the build is complete. The `--auto-submit` flag automates the submission process.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/submit/android.mdx#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n$ eas build --platform android --auto-submit\n```\n\n----------------------------------------\n\nTITLE: Installing Maestro for mobile UI testing\nDESCRIPTION: Makes sure Maestro, the mobile UI testing framework, is installed along with all its dependencies. Can specify a particular version to install or default to the latest version.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_47\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: Build and test\n  steps:\n    - eas/build\n    # ... simulator/emulator setup\n    # @info #\n    - eas/install_maestro:\n        # @end #\n        inputs:\n          # @info If you need to, you can provide the Maestro version to install. #\n          maestro_version: 1.35.0\n          # @end #\n    - run:\n        command: maestro test flows/signin.yml\n    - eas/upload_artifact:\n        name: Upload Maestro artifacts\n        inputs:\n          type: build-artifact\n          path: ${ eas.env.HOME }/.maestro/tests\n```\n\n----------------------------------------\n\nTITLE: Importing Linking Module from Expo\nDESCRIPTION: Basic import statement for using the expo-linking package in your Expo or React Native application. This import gives access to methods for handling deep links.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/linking.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Linking from 'expo-linking';\n```\n\n----------------------------------------\n\nTITLE: Using AppleMaps and GoogleMaps components in React Native\nDESCRIPTION: This TypeScript/React Native code snippet demonstrates how to conditionally render either `AppleMaps.View` on iOS or `GoogleMaps.View` on Android using the `Platform` API. It also handles the case where maps are not available on other platforms, displaying a text message.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/maps.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AppleMaps, GoogleMaps } from 'expo-maps';\nimport { Platform, Text } from 'react-native';\n\nexport default function App() {\n  if (Platform.OS === 'ios') {\n    return <AppleMaps.View style={{ flex: 1 }} />;\n  } else if (Platform.OS === 'android') {\n    return <GoogleMaps.View style={{ flex: 1 }} />;\n  } else {\n    return <Text>Maps are only available on Android and iOS</Text>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Encryption Exemption\nDESCRIPTION: JSON configuration to set encryption exemption status for iOS App Store compliance.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/securestore.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"ios\": {\n      \"config\": {\n        \"usesNonExemptEncryption\": false\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Production Build Script for Custom Entry File\nDESCRIPTION: Updates the React Native bundling script in the iOS project.pbxproj file to use Expo's entry resolution script, which determines the correct entry file for production builds.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/config/metro.mdx#2025-04-22_snippet_24\n\nLANGUAGE: diff\nCODE:\n```\n+\t\t\tshellScript = \"if [[ -f \\\"$PODS_ROOT/../.xcode.env\\\" ]]; then\\n  source \\\"$PODS_ROOT/../.xcode.env\\\"\\nfi\\nif [[ -f \\\"$PODS_ROOT/../.xcode.env.local\\\" ]]; then\\n  source \\\"$PODS_ROOT/../.xcode.env.local\\\"\\nfi\\n\\n# The project root by default is one level up from the ios directory\\nexport PROJECT_ROOT=\\\"$PROJECT_DIR\\\"/../\\n\\nif [[ \\\"$CONFIGURATION\\\" = *Debug* ]]; then\\n  export SKIP_BUNDLING=1\\nfi\\nif [[ -z \\\"$ENTRY_FILE\\\" ]]; then\\n  # Set the entry JS file using the bundler's entry resolution.\\n  export ENTRY_FILE=\\\"$(\\\"$NODE_BINARY\\\" -e \\\"require('expo/scripts/resolveAppEntry')\\\" \\\"$PROJECT_ROOT\\\" ios absolute | tail -n 1)\\\"\\nfi\\n\\nif [[ -z \\\"$CLI_PATH\\\" ]]; then\\n  # Use Expo CLI\\n  export CLI_PATH=\\\"$(\\\"$NODE_BINARY\\\" --print \\\"require.resolve('@expo/cli')\\\")\\\"\\nfi\\nif [[ -z \\\"$BUNDLE_COMMAND\\\" ]]; then\\n  # Default Expo CLI command for bundling\\n  export BUNDLE_COMMAND=\\\"export:embed\\\"\\nfi\\n\\n`\\\"$NODE_BINARY\\\" --print \\\"require('path').dirname(require.resolve('react-native/package.json')) + '/scripts/react-native-xcode.sh')\\\"`;\\n\\n\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Build with Custom Gradle Command\nDESCRIPTION: Example of an Android build configuration using eas/run_gradle with a custom command for bundle release.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_38\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: Build Android app\n  steps:\n    - eas/checkout\n    - eas/install_node_modules\n    - eas/prebuild\n    - eas/configure_eas_update\n    - eas/inject_android_credentials\n    # @info #\n    - eas/run_gradle:\n        inputs:\n          command: :app:bundleRelease\n    # @end #\n```\n\n----------------------------------------\n\nTITLE: Android MainActivity Implementation with Updates\nDESCRIPTION: Kotlin implementation of MainActivity for handling EAS Updates in an Android application.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/integration-in-existing-native-apps.mdx#2025-04-22_snippet_3\n\nLANGUAGE: Kotlin\nCODE:\n```\npackage com.yourpackagename\n\nimport android.content.Context\nimport android.os.Bundle\nimport com.facebook.react.ReactActivity\nimport com.facebook.react.ReactActivityDelegate\nimport com.facebook.react.defaults.DefaultNewArchitectureEntryPoint.fabricEnabled\nimport com.facebook.react.defaults.DefaultReactActivityDelegate\nimport expo.modules.ReactActivityDelegateWrapper\nimport expo.modules.updates.UpdatesController\nimport kotlinx.coroutines.CoroutineScope\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.launch\n\nclass MainActivity : ReactActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        CoroutineScope(Dispatchers.IO).launch {\n            startUpdatesController(applicationContext)\n        }\n    }\n\n    private fun startUpdatesController(context: Context) {\n        UpdatesController.initialize(context)\n        // Call the synchronous `launchAssetFile()` function to wait for updates ready\n        UpdatesController.instance.launchAssetFile\n    }\n\n    override fun getMainComponentName(): String = \"App\"\n\n    override fun createReactActivityDelegate(): ReactActivityDelegate {\n        return ReactActivityDelegateWrapper(\n            this,\n            BuildConfig.IS_NEW_ARCHITECTURE_ENABLED,\n            object : DefaultReactActivityDelegate(\n                this,\n                mainComponentName,\n                fabricEnabled\n            ) {})\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Expo App with TinyBase Example\nDESCRIPTION: Command to create a new Expo project using the TinyBase example template. This setup offers a foundation for developing local-first applications using TinyBase for state management and data persistence.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/local-first.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npx create-expo-app --example with-tinybase\n```\n\n----------------------------------------\n\nTITLE: Playing Sounds with expo-av in React Native\nDESCRIPTION: This snippet demonstrates how to load and play an audio file using the Audio.Sound API from expo-av. It includes handling sound loading, playback, and cleanup.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/audio-av.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEffect, useState } from 'react';\nimport { View, StyleSheet, Button } from 'react-native';\nimport { Audio } from 'expo-av';\n\nexport default function App() {\n  const [sound, setSound] = useState();\n\n  async function playSound() {\n    console.log('Loading Sound');\n    const { sound } = await Audio.Sound.createAsync(\n      require('./assets/Hello.mp3')\n    );\n    setSound(sound);\n\n    console.log('Playing Sound');\n    await sound.playAsync();\n  }\n\n  useEffect(() => {\n    return sound\n      ? () => {\n          console.log('Unloading Sound');\n          sound.unloadAsync();\n        }\n      : undefined;\n  }, [sound]);\n\n  return (\n    <View style={styles.container}>\n      <Button title=\"Play Sound\" onPress={playSound} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    backgroundColor: '#ecf0f1',\n    padding: 10,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Building Android Development Build on EAS\nDESCRIPTION: Use EAS CLI to build an Android development build on EAS servers.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/development-builds/create-a-build.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ eas build --platform android --profile development\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom View Controller for Expo Updates in iOS\nDESCRIPTION: Custom view controller implementation that handles React Native view initialization and integrates with Expo updates system. Implements AppControllerDelegate protocol and manages view lifecycle and layout constraints.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/integration-in-existing-native-apps.mdx#2025-04-22_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nimport UIKit\nimport EXUpdates\nimport ExpoModulesCore\n\npublic class CustomViewController: UIViewController, AppControllerDelegate {\n  let appDelegate = AppDelegate.shared()\n\n  public convenience init() {\n    self.init(nibName: nil, bundle: nil)\n    self.view.backgroundColor = .clear\n    appDelegate.updatesController = AppController.sharedInstance\n    AppController.sharedInstance.delegate = self\n    AppController.sharedInstance.start()\n  }\n\n  required public override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {\n    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)\n  }\n\n  @available(*, unavailable)\n  required public init?(coder aDecoder: NSCoder) {\n    fatalError(\"init(coder:) has not been implemented\")\n  }\n\n  public func appController(\n    _ appController: AppControllerInterface,\n    didStartWithSuccess success: Bool\n  ) {\n    createView()\n  }\n\n  private func createView() {\n    guard let rootViewFactory: RCTRootViewFactory = appDelegate.reactNativeFactory?.rootViewFactory else {\n      fatalError(\"rootViewFactory has not been initialized\")\n    }\n    let rootView = rootViewFactory.view(\n      withModuleName: appDelegate.moduleName,\n      initialProperties: appDelegate.initialProps,\n      launchOptions: appDelegate.launchOptions\n    )\n    let controller = self\n    controller.view.clipsToBounds = true\n    controller.view.addSubview(rootView)\n    rootView.translatesAutoresizingMaskIntoConstraints = false\n    NSLayoutConstraint.activate([\n      rootView.topAnchor.constraint(equalTo: controller.view.safeAreaLayoutGuide.topAnchor),\n      rootView.bottomAnchor.constraint(equalTo: controller.view.safeAreaLayoutGuide.bottomAnchor),\n      rootView.leadingAnchor.constraint(equalTo: controller.view.safeAreaLayoutGuide.leadingAnchor),\n      rootView.trailingAnchor.constraint(equalTo: controller.view.safeAreaLayoutGuide.trailingAnchor)\n    ])\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Maven Cache in EAS Build Configuration\nDESCRIPTION: This JSON snippet demonstrates how to disable the Maven cache server for Android dependencies by setting the EAS_BUILD_DISABLE_MAVEN_CACHE environment variable to '1' in the eas.json configuration file.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/build-reference/caching.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"production\": {\n      \"env\": {\n        \"EAS_BUILD_DISABLE_MAVEN_CACHE\": \"1\"\n        /* @hide ... */ /* @end */\n      }\n      /* @hide ... */ /* @end */\n    }\n    /* @hide ... */ /* @end */\n  }\n  /* @hide ... */ /* @end */\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Output Values in EAS Build YAML Configuration\nDESCRIPTION: Illustrates how to define and set output values for a step using the 'outputs' property and 'set-output' command in an EAS Build custom configuration.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: Demo\n  steps:\n    - run:\n        name: Produce output\n        outputs: [value]\n        command: |\n          echo \"Producing output for another step\"\n          set-output value \"Output from another step...\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Simulator Build Steps for iOS - EAS Build - YAML\nDESCRIPTION: Specifies the sequence for an iOS simulator build using EAS Build. It includes checking out code, installing dependencies, prebuild, running pod install within the iOS directory, generating the gymfile, executing Fastlane, and uploading build artifacts. Requires CocoaPods and Fastlane to be set up within the environment, and expects a working Expo iOS codebase.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_53\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: Simple simulator iOS build\n  steps:\n    - eas/checkout\n\n    - eas/install_node_modules\n\n    - eas/prebuild\n\n    - run:\n        name: Install pods\n        working_directory: ./ios\n        command: pod install\n\n    - eas/generate_gymfile_from_template\n\n    - eas/run_fastlane\n\n    - eas/find_and_upload_build_artifacts\n```\n\n----------------------------------------\n\nTITLE: Configuring LogRocket in Expo app.json\nDESCRIPTION: This JSON snippet shows how to include the LogRocket config plugin in the Expo app configuration file. It also sets the minimum SDK version for Android.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/using-logrocket.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    [\n      \"expo-build-properties\",\n      {\n        \"android\": {\n          \"minSdkVersion\": 25\n        }\n      }\n    ],\n    \"@logrocket/react-native\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Permissions in Info.plist\nDESCRIPTION: Example of adding required permission keys to iOS Info.plist file for using camera, photo library and microphone when not using Continuous Native Generation.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/imagepicker.mdx#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<key>NSPhotoLibraryUsageDescription</key>\n<string>Give $(PRODUCT_NAME) permission to save photos</string>\n<key>NSCameraUsageDescription</key>\n<string>Give $(PRODUCT_NAME) permission to access your camera</string>\n<key>NSMicrophoneUsageDescription</key>\n<string>Give $(PRODUCT_NAME) permission to use your microphone</string>\n```\n\n----------------------------------------\n\nTITLE: Configuring React Compiler in Expo App Config\nDESCRIPTION: Enable the React Compiler experiment in the app.json configuration file.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/react-compiler.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"experiments\": {\n    \"reactCompiler\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Audio from expo-av\nDESCRIPTION: This snippet shows how to import the Audio module from the expo-av package, which is necessary to use the audio playback and recording functionality in a React Native application.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/audio.mdx#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport { Audio } from 'expo-av';\n```\n\n----------------------------------------\n\nTITLE: Configuring Android and iOS Build Properties in app.json\nDESCRIPTION: This JSON snippet illustrates how to configure the expo-build-properties plugin within an Expo app, setting build properties for Android and iOS. Prerequisites include having an Expo project and utilizing the prebuild command. It requires specifying Android SDK versions and iOS deployment targets. The setup is primarily meant for projects that utilize npx expo prebuild.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/build-properties.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-build-properties\",\n        {\n          \"android\": {\n            \"compileSdkVersion\": 35,\n            \"targetSdkVersion\": 35,\n            \"buildToolsVersion\": \"35.0.0\"\n          },\n          \"ios\": {\n            \"deploymentTarget\": \"15.1\"\n          }\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Google Maps API Configuration for Android\nDESCRIPTION: JSON configuration for setting up Google Maps API key in the Android section of app.json\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/map-view.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n    \"android\": {\n      \"config\": {\n        \"googleMaps\": {\n          \"apiKey\": \"process.env.GOOGLE_MAPS_API_KEY\",\n        },\n      },\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing Screen Capture Callback in React Native\nDESCRIPTION: This example demonstrates setting up a callback to be triggered on screen capture events. It requires accessing the `ScreenCapture.addScreenshotListener` and handling permissions using `ScreenCapture.requestPermissionsAsync`. A sample callback alerts the user when a screenshot is taken.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/screen-capture.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as ScreenCapture from 'expo-screen-capture';\nimport { useEffect } from 'react';\nimport { Button, StyleSheet, View } from 'react-native';\n\nexport default function useScreenCaptureCallback() {\n  // Only use this if you add the READ_MEDIA_IMAGES permission to your AndroidManifest.xml\n  const hasPermissions = async () => {\n    const { status } = await ScreenCapture.requestPermissionsAsync();\n    return status === 'granted';\n  };\n\n  useEffect(() => {\n    let subscription;\n\n    const addListenerAsync = async () => {\n      if (await hasPermissions()) {\n        subscription = ScreenCapture.addScreenshotListener(() => {\n          alert('Thanks for screenshotting my beautiful app 😊');\n        });\n      } else {\n        console.error('Permissions needed to subscribe to screenshot events are missing!');\n      }\n    };\n    addListenerAsync();\n\n    return () => {\n      subscription?.remove();\n    };\n  }, []);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Submission Profile in eas.json\nDESCRIPTION: Set up a submission profile in eas.json for iOS app submission. This includes the App Store Connect App ID and is used to configure the submission process.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/submit/ios.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"submit\": {\n    \"production\": {\n      \"ios\": {\n        \"ascAppId\": \"your-app-store-connect-app-id\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running EAS Build with Access Token in Bash\nDESCRIPTION: This snippet demonstrates how to use an access token to authenticate and run an EAS build command. The token is set as an environment variable before executing the command.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/accounts/programmatic-access.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nEXPO_TOKEN=my_token eas build\n```\n\n----------------------------------------\n\nTITLE: Using CSS Modules in Expo Components\nDESCRIPTION: Example of importing and using CSS Modules in Expo components with both standard and unstable_styles approaches for styling both web and React Native components.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/config/metro.mdx#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport styles, { unstable_styles } from './App.module.css';\n\nexport default function Page() {\n  return (\n    <>\n      <Text\n        style={{\n          // This is how react-native-web class names are applied\n          $$css: true,\n          _: styles.text,\n        }}>\n        Hello World\n      </Text>\n      <Text style={unstable_styles.text}>Hello World</Text>\n      {/* Web-only usage: */}\n      <p className={styles.text}>Hello World</p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using expo-brightness in a React Native Component (JSX)\nDESCRIPTION: Demonstrates basic usage of the `expo-brightness` library within a React Native functional component using Hooks. It requests brightness permissions on component mount using `requestPermissionsAsync` and, if granted, sets the system brightness to maximum (1) using `setSystemBrightnessAsync`. Requires `expo-brightness` dependency.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/brightness.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEffect } from 'react';\nimport { StyleSheet, View, Text } from 'react-native';\nimport * as Brightness from 'expo-brightness';\n\nexport default function App() {\n  useEffect(() => {\n    (async () => {\n      const { status } = await Brightness.requestPermissionsAsync();\n      if (status === 'granted') {\n        Brightness.setSystemBrightnessAsync(1);\n      }\n    })();\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <Text>Brightness Module Example</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Manual Runtime Version in Expo\nDESCRIPTION: Sets a manual runtime version string in the Expo configuration to specify which binaries can load remote updates.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/updates.mdx#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"runtimeVersion\": \"<runtime_version_string>\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Route Navigation with Pathname and Params in React Native\nDESCRIPTION: Demonstrates how to use the Link component with an href object to navigate to dynamic routes, providing pathname and params explicitly.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/dynamic-routes.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Link } from 'expo-router';\nimport { View, Text, StyleSheet } from 'react-native';\n\nexport default function HomeScreen() {\n  return (\n    <View style={styles.container}>\n      <Text>Home</Text>\n      <Link\n        href={{\n          pathname: '/details/[id]',\n          params: { id: 'bacon' },\n        }}>\n        View user details\n      </Link>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Build Profiles in eas.json for EAS Build\nDESCRIPTION: This snippet demonstrates how to set up multiple build profiles (base, development, staging, production) in eas.json for EAS Build. It includes configurations for Node.js version, Yarn version, environment variables, and platform-specific settings for Android and iOS.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/json.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"base\": {\n      \"node\": \"12.13.0\",\n      \"yarn\": \"1.22.5\",\n      \"env\": {\n        \"EXAMPLE_ENV\": \"example value\"\n      },\n      \"android\": {\n        \"image\": \"default\",\n        \"env\": {\n          \"PLATFORM\": \"android\"\n        }\n      },\n      \"ios\": {\n        \"image\": \"latest\",\n        \"env\": {\n          \"PLATFORM\": \"ios\"\n        }\n      }\n    },\n    \"development\": {\n      \"extends\": \"base\",\n      \"developmentClient\": true,\n      \"env\": {\n        \"ENVIRONMENT\": \"development\"\n      },\n      \"android\": {\n        \"distribution\": \"internal\",\n        \"withoutCredentials\": true\n      },\n      \"ios\": {\n        \"simulator\": true\n      }\n    },\n    \"staging\": {\n      \"extends\": \"base\",\n      \"env\": {\n        \"ENVIRONMENT\": \"staging\"\n      },\n      \"distribution\": \"internal\",\n      \"android\": {\n        \"buildType\": \"apk\"\n      }\n    },\n    \"production\": {\n      \"extends\": \"base\",\n      \"env\": {\n        \"ENVIRONMENT\": \"production\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Status Bar for iOS Modals\nDESCRIPTION: Modifies the status bar appearance specifically for iOS modal screens. This example shows how to use Platform.OS to conditionally set the StatusBar style for iOS, ensuring proper visibility against the modal's dark background.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/advanced/modals.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StyleSheet, Text, View, Platform } from 'react-native';\nimport { StatusBar } from 'expo-status-bar';\n\nexport default function Modal() {\n  return (\n    <View style={styles.container}>\n      <Text>Modal screen</Text>\n      /* @info Use <CODE>Platform.OS</CODE> to check if the current platform is iOS and then use <CODE>StatusBar</CODE> component to change the appearance. */\n      <StatusBar style={Platform.OS === 'ios' ? 'light' : 'auto'} />\n      /* @end */\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Importing DeviceMotion API from expo-sensors\nDESCRIPTION: This JavaScript code is an essential import statement for using the DeviceMotion API provided by expo-sensors. It prepares the library functions for accessing device motion and orientation sensors within the application.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/devicemotion.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DeviceMotion } from 'expo-sensors';\n```\n\n----------------------------------------\n\nTITLE: Rendering Router with Null Components in TypeScript\nDESCRIPTION: Shows how to create an inline mock filesystem with null components, useful for testing routing without component output.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/reference/testing.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { renderRouter, screen } from 'expo-router/testing-library';\n\nit('my-test', async () => {\n  renderRouter(['index', 'directory/a', '(group)/b'], {\n    initialUrl: '/directory/a',\n  });\n\n  expect(screen).toHavePathname('/directory/a');\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-local-authentication Using Config Plugin in app.json\nDESCRIPTION: Example configuration for the expo-local-authentication plugin in app.json, which allows setting options like the Face ID permission message for iOS devices.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/local-authentication.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-local-authentication\",\n        {\n          \"faceIDPermission\": \"Allow $(PRODUCT_NAME) to use Face ID.\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Workflow Job After Configuration YAML\nDESCRIPTION: Configures a workflow job named 'notify' that runs after the completion of the 'build' job, regardless of whether the 'build' job succeeds or fails. The 'after' keyword ensures that the 'notify' job executes after the 'build' job finishes. This snippet illustrates how to execute a job after another job completes, regardless of its outcome.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/workflows/syntax.mdx#_snippet_14\n\nLANGUAGE: YAML\nCODE:\n```\njobs:\n  build:\n    type: build\n    params:\n      platform: ios\n  notify:\n    # @info #\n    after: [build] # This job will run after build completes (whether build succeeds or fails)\n    # @end #\n```\n\n----------------------------------------\n\nTITLE: Building Android app with specific variant\nDESCRIPTION: Command for building an Android app with a specified build variant. This example builds the debug variant, which is useful for development and testing.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/more/expo-cli.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo run:android --variant debug\n```\n\n----------------------------------------\n\nTITLE: ESLint Flat Config with Prettier Integration\nDESCRIPTION: Modern ESLint configuration using flat config format with Prettier integration for SDK 53 and above.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/using-eslint.mdx#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { defineConfig } = require('eslint/config');\nconst expoConfig = require('eslint-config-expo/flat');\nconst eslintPluginPrettierRecommended = require('eslint-plugin-prettier/recommended');\n\nmodule.exports = defineConfig([\n  expoConfig,\n  eslintPluginPrettierRecommended,\n  {\n    ignores: ['dist/*'],\n  },\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Notification Sounds in app.json\nDESCRIPTION: Configuration for adding custom notification sounds to an Expo app using the expo-notifications plugin in app.json. This specifies the local path to sound files that can be used as custom notification sounds.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/notifications.mdx#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-notifications\",\n        {\n          \"sounds\": [\"local/path/to/mySoundFile.wav\"]\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Sentry in Non-Expo Router Project\nDESCRIPTION: This code snippet shows how to initialize Sentry in a non-Expo Router project. It includes the basic Sentry configuration and wraps the root App component.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/using-sentry.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Sentry from '@sentry/react-native';\n\nSentry.init({\n  dsn: 'YOUR DSN HERE',\n  debug: true,\n});\n\n// Your App component here\n\nexport default Sentry.wrap(App);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Base Modifiers for Expo Prebuild\nDESCRIPTION: This TypeScript implementation shows how to extend Expo's prebuild functionality by adding a custom base modifier for the iOS AppDelegate.h file. It demonstrates the full pattern of creating provider methods for reading, modifying, and writing files.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/config-plugins/development-and-debugging.mdx#2025-04-22_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ConfigPlugin, IOSConfig, Mod, withMod, BaseMods } from 'expo/config-plugins';\nimport fs from 'fs';\n\n/**\n * A plugin which adds new base modifiers to the prebuild config.\n */\nexport function withAppDelegateHeaderBaseMod(config) {\n  return BaseMods.withGeneratedBaseMods<'appDelegateHeader'>(config, {\n    platform: 'ios',\n    providers: {\n      // Append a custom rule to supply AppDelegate header data to mods on `mods.ios.appDelegateHeader`\n      appDelegateHeader: BaseMods.provider<IOSConfig.Paths.AppDelegateProjectFile>({\n        // Get the local filepath that should be passed to the `read` method.\n        getFilePath({ modRequest: { projectRoot } }) {\n          const filePath = IOSConfig.Paths.getAppDelegateFilePath(projectRoot);\n          // Replace the .m with a .h\n          if (filePath.endsWith('.m')) {\n            return filePath.substr(0, filePath.lastIndexOf('.')) + '.h';\n          }\n          // Possibly a Swift project...\n          throw new Error(`Could not locate a valid AppDelegate.h at root: \"${projectRoot}\"`);\n        },\n        // Read the input file from the filesystem.\n        async read(filePath) {\n          return IOSConfig.Paths.getFileInfo(filePath);\n        },\n        // Write the resulting output to the filesystem.\n        async write(filePath: string, { modResults: { contents } }) {\n          await fs.promises.writeFile(filePath, contents);\n        },\n      }),\n    },\n  });\n}\n\n/**\n * (Utility) Provides the AppDelegate header file for modification.\n */\nexport const withAppDelegateHeader: ConfigPlugin<Mod<IOSConfig.Paths.AppDelegateProjectFile>> = (\n  config,\n  action\n) => {\n  return withMod(config, {\n    platform: 'ios',\n    mod: 'appDelegateHeader',\n    action,\n  });\n};\n\n// (Example) Log the contents of the modifier.\nexport const withSimpleAppDelegateHeaderMod = config => {\n  return withAppDelegateHeader(config, config => {\n    console.log('modify header:', config.modResults);\n    return config;\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-camera Plugin in app.json\nDESCRIPTION: JSON configuration for the expo-camera config plugin in app.json, specifying camera and microphone permission messages and audio recording settings for Android.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/camera.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-camera\",\n        {\n          \"cameraPermission\": \"Allow $(PRODUCT_NAME) to access your camera\",\n          \"microphonePermission\": \"Allow $(PRODUCT_NAME) to access your microphone\",\n          \"recordAudioAndroid\": true\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing AppleMaps and GoogleMaps Components in JavaScript\nDESCRIPTION: This JavaScript snippet shows how to import AppleMaps and GoogleMaps components from the expo-maps library for usage within React components. These components will need to be used to display the maps in the application.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/maps.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { AppleMaps, GoogleMaps } from 'expo-maps';\n\n// ApplesMaps.View and GoogleMaps.View are the React components\n```\n\n----------------------------------------\n\nTITLE: CocoaPods Flags Configuration\nDESCRIPTION: Examples of configuring CocoaPods flags for autolinked modules using both Podfile and package.json.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/autolinking.mdx#2025-04-22_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nuse_expo_modules!({\n  flags: {\n    :inhibit_warnings => false\n  }\n})\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"autolinking\": {\n      \"ios\": {\n        \"flags\": {\n          \"inhibit_warnings\": true\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing expo-sensors APIs in JavaScript\nDESCRIPTION: This JavaScript snippet shows how to import various APIs from the expo-sensors library, either importing the entire module or specific sensors like Accelerometer, Gyroscope, etc.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/sensors.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as Sensors from 'expo-sensors';\n// OR\nimport {\n  Accelerometer,\n  Barometer,\n  DeviceMotion,\n  Gyroscope,\n  LightSensor,\n  Magnetometer,\n  MagnetometerUncalibrated,\n  Pedometer,\n} from 'expo-sensors';\n```\n\n----------------------------------------\n\nTITLE: Implementing Stack Navigator Root Layout in Expo Router\nDESCRIPTION: Sets up the root stack navigation layout with nested tab navigation support and configuration for the not-found screen. The stack navigator serves as the parent navigator with headerShown set to false for the tabs route.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/add-navigation.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Stack } from 'expo-router';\n\nexport default function RootLayout() {\n  return (\n    <Stack>\n      <Stack.Screen name=\"(tabs)\" options={{ headerShown: false }} />\n      <Stack.Screen name=\"+not-found\" />\n    </Stack>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Workflow Job Needs Configuration YAML\nDESCRIPTION: Configures a workflow job named 'build' that depends on the successful completion of the 'test' job. The 'needs' keyword specifies this dependency, ensuring that the 'build' job only runs if the 'test' job succeeds. This snippet demonstrates how to establish a dependency between jobs in an EAS Workflow.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/workflows/syntax.mdx#_snippet_13\n\nLANGUAGE: YAML\nCODE:\n```\njobs:\n  test:\n    steps:\n      - uses: eas/checkout\n      - uses: eas/use_npm_token\n      - uses: eas/install_node_modules\n      - name: tsc\n        run: yarn tsc\n  build:\n    # @info #\n    needs: [test] # This job will only run if the 'test' job succeeds\n    # @end #\n    type: build\n    params:\n      platform: ios\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Crypto Operations in React Native\nDESCRIPTION: The snippet demonstrates how to perform a SHA256 hash operation using expo-crypto in a React Native app. It uses the useEffect hook to handle asynchronous operations and logs the resulting digest. Dependencies include expo-crypto, and the input is a string to be hashed. Outputs the hash digest to the console. The example runs in a standard React Native environment.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/crypto.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEffect } from 'react';\nimport { StyleSheet, View, Text } from 'react-native';\nimport * as Crypto from 'expo-crypto';\n\nexport default function App() {\n  useEffect(() => {\n    (async () => {\n      const digest = await Crypto.digestStringAsync(\n        Crypto.CryptoDigestAlgorithm.SHA256,\n        'GitHub stars are neat 🌟'\n      );\n      console.log('Digest: ', digest);\n      /* Some crypto operation... */\n    })();\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <Text>Crypto Module Example</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-local-authentication Plugin in app.json\nDESCRIPTION: This code snippet shows how to configure the expo-local-authentication plugin in the app.json file. It sets the faceIDPermission property to customize the Face ID usage description on iOS.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/local-authentication.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-local-authentication\",\n        {\n          \"faceIDPermission\": \"Allow $(PRODUCT_NAME) to use Face ID.\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Jest Coverage Configuration\nDESCRIPTION: Configuration for generating code coverage reports in Jest.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/unit-testing.mdx#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jest\": {\n    \"collectCoverage\": true,\n    \"collectCoverageFrom\": [\n      \"**/*.{ts,tsx,js,jsx}\",\n      \"!**/coverage/**\",\n      \"!**/node_modules/**\",\n      \"!**/babel.config.js\",\n      \"!**/expo-env.d.ts\",\n      \"!**/.expo/**\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Motion Permissions Manually\nDESCRIPTION: Example of manually setting the NSMotionUsageDescription key in Info.plist for iOS projects not using Continuous Native Generation (CNG).\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/devicemotion.mdx#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<key>NSMotionUsageDescription</key>\n<string>Allow $(PRODUCT_NAME) to access your device motion</string>\n```\n\n----------------------------------------\n\nTITLE: Advanced Function Configuration with Inputs and Outputs\nDESCRIPTION: Complete YAML configuration for a function that accepts input parameters and produces outputs. This configuration defines two numeric inputs and one output, with step ID referenced in subsequent steps.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/custom-builds/functions.mdx#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: My example config\n  steps:\n    - eas/checkout\n    - eas/install_node_modules\n    # @info #\n    - my_function:\n        inputs:\n          num1: 1\n          num2: 2\n        id: sum_function\n    # @end #\n    - run:\n        name: Print the sum\n        inputs:\n          sum: ${ steps.sum_function.sum }\n        command: echo ${ inputs.sum }\n    - run:\n        name: Finished\n        command: echo Finished\n\nfunctions:\n  my_function:\n    name: My function\n    # @info #\n    inputs:\n      - name: num1\n        type: number\n      - name: num2\n        type: number\n    outputs:\n      - name: sum\n    # @end #\n    path: ./myFunction\n```\n\n----------------------------------------\n\nTITLE: Configuring Short Interval for Android Background Fetch Testing (TypeScript)\nDESCRIPTION: This TypeScript snippet shows how to register a background fetch task specifically for testing on Android. By setting the `minimumInterval` option in `BackgroundFetch.registerTaskAsync` to a small value (e.g., 1 minute), the task will trigger more frequently when the app is backgrounded, making it easier to observe and debug.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/background-fetch.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nasync function registerBackgroundFetchAsync() {\n  return BackgroundFetch.registerTaskAsync(BACKGROUND_FETCH_TASK, {\n    minimumInterval: 1 * 60, // task will fire 1 minute after app is backgrounded\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Apple Sign-in plugin in app.json for EAS Build\nDESCRIPTION: Add the expo-apple-authentication plugin to the app config file to enable automatic configuration of Apple Sign-in capability during EAS Build.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/apple-authentication.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\"expo-apple-authentication\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Examining Plugin History in Expo Config\nDESCRIPTION: This JSON snippet shows the internal plugin history structure that tracks which plugins were automatically added during the prebuild process. It displays both versioned plugins (from node_modules) and unversioned plugins (bundled with Expo CLI).\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/config-plugins/development-and-debugging.mdx#2025-04-22_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  _internal: {\n    pluginHistory: {\n      'expo-location': {\n        name: 'expo-location',\n        version: '11.0.0',\n      },\n      'react-native-maps': {\n        name: 'react-native-maps',\n        version: 'UNVERSIONED',\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Camera Usage Descriptions to iOS Info.plist\nDESCRIPTION: XML snippet for adding NSCameraUsageDescription and NSMicrophoneUsageDescription keys to the Info.plist file for iOS projects.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/camera.mdx#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<key>NSCameraUsageDescription</key>\n<string>Allow $(PRODUCT_NAME) to access your camera</string>\n<key>NSMicrophoneUsageDescription</key>\n<string>Allow $(PRODUCT_NAME) to access your microphone</string>\n```\n\n----------------------------------------\n\nTITLE: EAS Update Republish Commands\nDESCRIPTION: Commands for republishing previous updates using either update group ID or branch name.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/debug.mdx#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n# eas update:republish --group [update-group-id]\n# eas update:republish --branch [branch-name]\n\n# Example\n$ eas update:republish --group abc1\n$ eas update:republish --branch production\n```\n\n----------------------------------------\n\nTITLE: Manual Configuration of Runtime Version - Expo App JSON\nDESCRIPTION: Specifies the runtimeVersion value directly in the Expo app configuration (usually app.json or app.config.js). This field determines which remote updates an app binary is eligible to receive. The only required dependency is the Expo framework; the 'runtimeVersion' field should be set to a unique string for each native binary.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/updates.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"runtimeVersion\": \"<runtime_version_string>\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic ImageManipulator Usage in React Native\nDESCRIPTION: A complete React Native component demonstrating how to use expo-image-manipulator to load an image, rotate it 90 degrees clockwise, flip it vertically, and save as a PNG. The example includes state management, UI rendering, and styling.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/imagemanipulator.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { Button, Image, StyleSheet, View } from 'react-native';\nimport { Asset } from 'expo-asset';\nimport { manipulateAsync, FlipType, SaveFormat } from 'expo-image-manipulator';\n\nexport default function App() {\n  const [ready, setReady] = useState(false);\n  const [image, setImage] = useState(null);\n\n  useEffect(() => {\n    (async () => {\n      const image = Asset.fromModule(require('./assets/snack-icon.png'));\n      await image.downloadAsync();\n      setImage(image);\n      setReady(true);\n    })();\n  }, []);\n\n  const _rotate90andFlip = async () => {\n    const manipResult = await manipulateAsync(\n      image.localUri || image.uri,\n      [{ rotate: 90 }, { flip: FlipType.Vertical }],\n      { compress: 1, format: SaveFormat.PNG }\n    );\n    setImage(manipResult);\n  };\n\n  const _renderImage = () => (\n    <View style={styles.imageContainer}>\n      <Image source={{ uri: image.localUri || image.uri }} style={styles.image} />\n    </View>\n  );\n\n  return (\n    <View style={styles.container}>\n      {ready && image && _renderImage()}\n      <Button title=\"Rotate and Flip\" onPress={_rotate90andFlip} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n  imageContainer: {\n    marginVertical: 20,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  image: {\n    width: 300,\n    height: 300,\n    resizeMode: 'contain',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Inserting and Retrieving Binary Data in SQLite with TypeScript\nDESCRIPTION: This snippet explains how to insert and retrieve binary data using SQLite in a TypeScript environment. Utilizing 'Uint8Array' for binary data, it showcases creating a table for blobs and performing operations to add and verify blob data. Prerequisites include setting up the SQLite database and TypeScript support. Inputs require properly formatted binary data while outputs confirm data integrity using comparison.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/sqlite.mdx#2025-04-22_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nawait db.execAsync(`\nDROP TABLE IF EXISTS blobs;\nCREATE TABLE IF NOT EXISTS blobs (id INTEGER PRIMARY KEY NOT NULL, data BLOB);\n`);\n\nconst blob = new Uint8Array([0x00, 0x01, 0x02, 0x03, 0x04, 0x05]);\nawait db.runAsync('INSERT INTO blobs (data) VALUES (?)', blob);\n\nconst row = await db.getFirstAsync<{ data: Uint8Array }>('SELECT * FROM blobs');\nexpect(row.data).toEqual(blob);\n```\n\n----------------------------------------\n\nTITLE: Android Manifest and Gradle Configuration for Expo-Camera\nDESCRIPTION: This XML and Groovy code ensures that the correct permissions and dependencies are in place for the expo-camera to function. The AndroidManifest.xml requires CAMERA and optionally RECORD_AUDIO permissions, while the build.gradle file needs to point to a custom Maven repository.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/camera.mdx#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Added permission -->\n<uses-permission android:name=\"android.permission.CAMERA\" />\n\n<!-- Only add when recording videos with audio -->\n<uses-permission android:name=\"android.permission.RECORD_AUDIO\" />\n```\n\nLANGUAGE: groovy\nCODE:\n```\nallprojects {\n  repositories {\n      // * Your other repositories here *\n      // * Add a new maven block after other repositories / blocks *\n      maven {\n          // expo-camera bundles a custom com.google.android:cameraview\n          url \"$rootDir/../node_modules/expo-camera/android/maven\"\n      }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Background Audio Support in app.json for iOS\nDESCRIPTION: This JSON configuration snippet shows how to enable audio playback in the background for iOS apps by adding the appropriate UIBackgroundModes setting in the app.json file. This is required for standalone iOS apps that need to continue playing audio when the app is in the background.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/audio.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    ...\n    \"ios\": {\n      ...\n      \"infoPlist\": {\n        ...\n        \"UIBackgroundModes\": [\n          \"audio\"\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Android Play Store Review Link\nDESCRIPTION: Opens the Android Play Store review section using Linking API with the showAllReviews parameter. Provides two methods: opening in browser or directly in Play Store app.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/storereview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst androidPackageName = 'host.exp.exponent';\n// Open the Android Play Store in the browser -> redirects to Play Store on Android\nLinking.openURL(\n  `https://play.google.com/store/apps/details?id=${androidPackageName}&showAllReviews=true`\n);\n// Open the Android Play Store directly\nLinking.openURL(`market://details?id=${androidPackageName}&showAllReviews=true`);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Navigator with Expo Router\nDESCRIPTION: Example of integrating a custom navigator with Expo Router using withLayoutContext function.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/migrate/from-react-navigation.mdx#2025-04-22_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nimport { createCustomNavigator } from './my-navigator';\n\nexport const CustomNavigator = withLayoutContext(createCustomNavigator().Navigator);\n```\n\n----------------------------------------\n\nTITLE: Defining EAS Workflow for iOS App Submission\nDESCRIPTION: Create an EAS Workflow file to automate the build and submission process for an iOS app. This YAML configuration defines jobs for building and submitting the app.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/submit/ios.mdx#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  push:\n    branches: ['main']\n\njobs:\n  build_ios:\n    name: Build iOS app\n    type: build\n    params:\n      platform: ios\n      profile: production\n\n  submit_ios:\n    name: Submit to Apple App Store\n    needs: [build_ios]\n    type: submit\n    params:\n      platform: ios\n      build_id: ${{ needs.build_ios.outputs.build_id }}\n```\n\n----------------------------------------\n\nTITLE: Exporting Expo Project for Web Platform\nDESCRIPTION: This command exports the Expo project for the web platform, inlining the EXPO_PUBLIC_ variables in the frontend code. Ensure the correct environment variables are set in .env or .env.local before running this command.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/hosting/environment-variables.mdx#2025-04-22_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpx expo export --platform web\n```\n\n----------------------------------------\n\nTITLE: Using SafeAreaView Component in React Native\nDESCRIPTION: Example of using the SafeAreaView component which automatically applies safe area insets as padding to its content.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/safe-area-context.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SafeAreaView } from 'react-native-safe-area-context';\n\nfunction SomeComponent() {\n  return (\n    <SafeAreaView>\n      <View />\n    </SafeAreaView>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Build Job Outputs Definition JSON\nDESCRIPTION: Defines the structure of outputs for a 'build' job, including properties such as 'build_id', 'app_build_version', 'app_identifier', 'app_version', 'channel', 'distribution', 'fingerprint_hash', 'git_commit_hash', 'platform', 'profile', 'runtime_version', 'sdk_version', and 'simulator'. These outputs provide information about the build that can be used in downstream jobs.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/workflows/syntax.mdx#_snippet_22\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"build_id\": string,\n  \"app_build_version\": string | null,\n  \"app_identifier\": string | null,\n  \"app_version\": string | null,\n  \"channel\": string | null,\n  \"distribution\": \"internal\" | \"store\" | null,\n  \"fingerprint_hash\": string | null,\n  \"git_commit_hash\": string | null,\n  \"platform\": \"ios\" | \"android\" | null,\n  \"profile\": string | null,\n  \"runtime_version\": string | null,\n  \"sdk_version\": string | null,\n  \"simulator\": \"true\" | \"false\" | null\n}\n```\n\n----------------------------------------\n\nTITLE: PostCSS Configuration with Autoprefixer - JSON\nDESCRIPTION: This postcss.config.json snippet configures PostCSS to use the autoprefixer plugin, making it possible to automatically add vendor prefixes to CSS properties for wider browser compatibility. Place this JSON in the root of your project to enable PostCSS with Metro bundler. Both .js and .json config formats are supported, but .json provides better caching.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/config/metro.mdx#2025-04-22_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"plugins\": {\\n    \"autoprefixer\": {}\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Importing App Config Schema in JavaScript\nDESCRIPTION: This code snippet imports the app configuration schema from a JSON file and a custom React component for rendering the schema table.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/config/app.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport schema from '~/public/static/schemas/unversioned/app-config-schema.json';\nimport AppConfigSchemaTable from '~/ui/components/AppConfigSchemaTable';\n```\n\n----------------------------------------\n\nTITLE: Uploading Local Credentials to EAS Servers\nDESCRIPTION: Command to upload credentials from your local credentials.json file to EAS servers for remote management. This allows you to convert locally managed credentials to be managed by EAS.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/app-signing/syncing-credentials.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\neas credentials\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Config Plugin for iOS Info.plist Modification\nDESCRIPTION: Shows how to create a plugin that adds custom values to the Info.plist file in an iOS project. It ensures the necessary objects exist and appends an API key.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/config-plugins/plugins-and-mods.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst withMySDK = (config, { apiKey }) => {\n  if (!config.ios) {\n    config.ios = {};\n  }\n  if (!config.ios.infoPlist) {\n    config.ios.infoPlist = {};\n  }\n\n  config.ios.infoPlist['MY_CUSTOM_NATIVE_IOS_API_KEY'] = apiKey;\n\n  return config;\n};\n\nmodule.exports.withMySDK = withMySDK;\n```\n\n----------------------------------------\n\nTITLE: Generating Video Thumbnail in React Native using expo-video-thumbnails\nDESCRIPTION: This snippet demonstrates how to use the expo-video-thumbnails library to generate a thumbnail image from a video URL. It uses React hooks to manage state and display the generated thumbnail.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/video-thumbnails.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { StyleSheet, Button, View, Image, Text } from 'react-native';\nimport * as VideoThumbnails from 'expo-video-thumbnails';\n\nexport default function App() {\n  const [image, setImage] = useState(null);\n\n  const generateThumbnail = async () => {\n    try {\n      const { uri } = await VideoThumbnails.getThumbnailAsync(\n        'https://d23dyxeqlo5psv.cloudfront.net/big_buck_bunny.mp4',\n        {\n          time: 15000,\n        }\n      );\n      setImage(uri);\n    } catch (e) {\n      console.warn(e);\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      <Button onPress={generateThumbnail} title=\"Generate thumbnail\" />\n      {image && <Image source={{ uri: image }} style={styles.image} />}\n      <Text>{image}</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#F5FCFF',\n  },\n  image: {\n    width: 200,\n    height: 200,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Configuration with app.config.js\nDESCRIPTION: Initial setup of app.config.js to handle dynamic configuration by extending the existing app.json config\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/eas/multiple-app-variants.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default ({ config }) => ({\n  ...config,\n});\n```\n\n----------------------------------------\n\nTITLE: React Component Imports\nDESCRIPTION: Import statements for React components used in the documentation page, including icons and custom UI components.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/hosting/introduction.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Cloud01Icon } from '@expo/styleguide-icons/outline/Cloud01Icon';\n\nimport { BoxLink } from '~/ui/components/BoxLink';\n```\n\n----------------------------------------\n\nTITLE: Configuring Stack Screen Options (TypeScript)\nDESCRIPTION: This snippet illustrates how to define screen options within a `Stack` component in a layout file. It imports `Stack` from `expo-router` and uses `Stack.Screen` to configure options for a specific route (`[productId]`). In this example, the `headerShown` option is set to `false`, hiding the header for that specific screen.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/basics/layout.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Stack } from 'expo-router';\n\nexport default function StackLayout() {\n  return (\n    <Stack>\n      <Stack.Screen name=\"[productId]\" options={{ headerShown: false }} />\n    </Stack>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Platform-Specific Layout in Expo Router\nDESCRIPTION: Demonstrates how to create different layouts for web and native platforms using the Platform module from React Native. The code shows a custom header layout for web and bottom tabs for native platforms.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/advanced/platform-specific-modules.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Platform } from 'react-native';\nimport { Link, Slot, Tabs } from 'expo-router';\n\nexport default function Layout() {\n  if (Platform.OS === 'web') {\n    // Use a basic custom layout on web.\n    return (\n      <div style={{ flex: 1 }}>\n        <header>\n          <Link href=\"/\">Home</Link>\n          <Link href=\"/settings\">Settings</Link>\n        </header>\n        <Slot />\n      </div>\n    );\n  }\n  // Use a native bottom tabs layout on native platforms.\n  return (\n    <Tabs>\n      <Tabs.Screen name=\"index\" options={{ title: 'Home' }} />\n      <Tabs.Screen name=\"settings\" options={{ title: 'Settings' }} />\n    </Tabs>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Camera Usage in React Native\nDESCRIPTION: This TypeScript snippet demonstrates basic usage of `expo-camera` within a React Native application. It shows how permissions are requested, and provides a toggle for switching between front and back cameras. Ensures the camera preview is only active when appropriate permissions are granted.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/camera.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CameraView, CameraType, useCameraPermissions } from 'expo-camera';\nimport { useState } from 'react';\nimport { Button, StyleSheet, Text, TouchableOpacity, View } from 'react-native';\n\nexport default function App() {\n  const [facing, setFacing] = useState<CameraType>('back');\n  const [permission, requestPermission] = useCameraPermissions();\n\n  if (!permission) {\n    // Camera permissions are still loading.\n    return <View />;\n  }\n\n  if (!permission.granted) {\n    // Camera permissions are not granted yet.\n    return (\n      <View style={styles.container}>\n        <Text style={styles.message}>We need your permission to show the camera</Text>\n        <Button onPress={requestPermission} title=\"grant permission\" />\n      </View>\n    );\n  }\n\n  function toggleCameraFacing() {\n    setFacing(current => (current === 'back' ? 'front' : 'back'));\n  }\n\n  return (\n    <View style={styles.container}>\n      <CameraView style={styles.camera} facing={facing}>\n        <View style={styles.buttonContainer}>\n          <TouchableOpacity style={styles.button} onPress={toggleCameraFacing}>\n            <Text style={styles.text}>Flip Camera</Text>\n          </TouchableOpacity>\n        </View>\n      </CameraView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n  message: {\n    textAlign: 'center',\n    paddingBottom: 10,\n  },\n  camera: {\n    flex: 1,\n  },\n  buttonContainer: {\n    flex: 1,\n    flexDirection: 'row',\n    backgroundColor: 'transparent',\n    margin: 64,\n  },\n  button: {\n    flex: 1,\n    alignSelf: 'flex-end',\n    alignItems: 'center',\n  },\n  text: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: 'white',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Manually Adding Custom Notification Sounds on Android\nDESCRIPTION: This TypeScript code demonstrates how to prepare a notification channel with a custom sound file for Android. The file must be placed in a specific directory within the Android project structure. The sound is configured in the NotificationChannel, and then used when scheduling a notification.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/notifications.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// Prepare the notification channel\nawait Notifications.setNotificationChannelAsync('new-emails', {\n  name: 'E-mail notifications',\n  importance: Notifications.AndroidImportance.HIGH,\n  sound: 'email-sound.wav'\n});\n\n// Eg. schedule the notification\nawait Notifications.scheduleNotificationAsync({\n  content: {\n    title: \"You've got mail! 📬\",\n    body: 'Open the notification to read them all',\n    sound: 'email-sound.wav'\n  },\n  trigger: {\n    seconds: 2,\n    channelId: 'new-emails'\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Android permissions for expo-av\nDESCRIPTION: Adds RECORD_AUDIO permission to AndroidManifest.xml necessary for audio recording using expo-av. Ensure the Android project is set up to allow permission modification.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/av.mdx#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"android.permission.RECORD_AUDIO\" />\n```\n\n----------------------------------------\n\nTITLE: Opening iOS App Store for Reviews in TypeScript\nDESCRIPTION: This code snippet shows how to redirect users to the 'Write a Review' screen for an app in the iOS App Store, both in the browser and directly in the App Store app.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/storereview.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst itunesItemId = 982107779;\n// Open the iOS App Store in the browser -> redirects to App Store on iOS\nLinking.openURL(`https://apps.apple.com/app/apple-store/id${itunesItemId}?action=write-review`);\n// Open the iOS App Store directly\nLinking.openURL(\n  `itms-apps://itunes.apple.com/app/viewContentsUserReviews/id${itunesItemId}?action=write-review`\n);\n```\n\n----------------------------------------\n\nTITLE: Opening iOS App Store for Reviews in TypeScript\nDESCRIPTION: This snippet shows how to redirect users to the 'Write a Review' screen for an app in the iOS App Store, both in the browser and directly in the App Store app.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/storereview.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst itunesItemId = 982107779;\n// Open the iOS App Store in the browser -> redirects to App Store on iOS\nLinking.openURL(`https://apps.apple.com/app/apple-store/id${itunesItemId}?action=write-review`);\n// Open the iOS App Store directly\nLinking.openURL(\n  `itms-apps://itunes.apple.com/app/viewContentsUserReviews/id${itunesItemId}?action=write-review`\n);\n```\n\n----------------------------------------\n\nTITLE: Simple iOS Gymfile Generation Configuration\nDESCRIPTION: Basic example of generating Gymfile without credentials using the eas/generate_gymfile_from_template step.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_42\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: Generate Gymfile template\n  steps:\n    - eas/checkout\n    - eas/install_node_modules\n    - eas/prebuild\n    # @info #\n    - eas/generate_gymfile_from_template\n    # @end #\n```\n\n----------------------------------------\n\nTITLE: Configuring 'on.pull_request_labeled' shorthand in YAML\nDESCRIPTION: This snippet demonstrates the shorthand syntax for triggering a workflow when a pull request is labeled with a specific label using `on.pull_request_labeled`.  It lists labels directly under `on.pull_request_labeled`.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/workflows/syntax.mdx#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  # @info #\n  pull_request_labeled:\n    # @end #\n    - Test\n    - Preview\n    # other labels\n```\n\n----------------------------------------\n\nTITLE: Uploading Sourcemaps to Sentry after EAS Update\nDESCRIPTION: Command to upload source maps to Sentry after running 'eas update'. This ensures errors in your updates will be properly symbolicated in Sentry.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/using-sentry.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Pass in the \"dist\" directory generated by `eas update` to the upload script\n$ npx sentry-expo-upload-sourcemaps dist\n```\n\n----------------------------------------\n\nTITLE: Configuring MediaLibrary using Config Plugin in app.json\nDESCRIPTION: This snippet demonstrates how to configure the expo-media-library plugin in the app.json file. It includes settings for permission messages and enabling access to media location on Android.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/media-library.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-media-library\",\n        {\n          \"photosPermission\": \"Allow $(PRODUCT_NAME) to access your photos.\",\n          \"savePhotosPermission\": \"Allow $(PRODUCT_NAME) to save photos.\",\n          \"isAccessMediaLocationEnabled\": true\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Camera Permissions in iOS Info.plist\nDESCRIPTION: XML configuration for adding NSCameraUsageDescription and NSMicrophoneUsageDescription keys to the iOS Info.plist file.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/camera.mdx#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<key>NSCameraUsageDescription</key>\n<string>Allow $(PRODUCT_NAME) to access your camera</string>\n<key>NSMicrophoneUsageDescription</key>\n<string>Allow $(PRODUCT_NAME) to access your microphone</string>\n```\n\n----------------------------------------\n\nTITLE: GLView Integration with Reanimated Worklets\nDESCRIPTION: Demonstrates how to use GLView within Reanimated worklets by passing GL context ID and recreating GL object in the worklet thread.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/gl-view.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { View } from 'react-native';\nimport { runOnUI } from 'react-native-reanimated';\nimport { GLView } from 'expo-gl';\n\nfunction render(gl) {\n  'worklet';\n  // add your WebGL code here\n}\n\nfunction onContextCreate(gl) {\n  runOnUI((contextId: number) => {\n    'worklet';\n    const gl = GLView.getWorkletContext(contextId);\n    render(gl);\n  })(gl.contextId);\n}\n\nexport default function App() {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <GLView\n        style={{ width: 300, height: 300 }}\n        enableExperimentalWorkletSupport\n        onContextCreate={onContextCreate}\n      />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Swift Headers in Objective-C++\nDESCRIPTION: Required imports for accessing EXUpdatesAppController methods in Objective-C++ code for runtime configuration overrides.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/updates.mdx#2025-04-22_snippet_11\n\nLANGUAGE: objc\nCODE:\n```\n#import \"ExpoModulesCore-Swift.h\"\n#import \"EXUpdatesInterface-Swift.h\"\n#import \"EXUpdates-Swift.h\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Metro for SQLite Database Files\nDESCRIPTION: Metro configuration to include .db file extensions for SQLite database assets in an Expo project.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/sqlite.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { getDefaultConfig } = require('expo/metro-config');\n\nconst defaultConfig = getDefaultConfig(__dirname);\n\ndefaultConfig.resolver.assetExts.push('db');\n\nmodule.exports = defaultConfig;\n```\n\n----------------------------------------\n\nTITLE: Configuring Apple Sign-in in Expo Config\nDESCRIPTION: JSON configuration to enable Apple Sign-in capability in an Expo app's app.json file.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/apple-authentication.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"ios\": {\n      \"usesAppleSignIn\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @expo/package-manager with Yarn\nDESCRIPTION: This shell command installs the @expo/package-manager library in the current project using Yarn. Make sure you have Yarn installed as a dependency for managing packages.\nSOURCE: https://github.com/expo/expo/blob/main/packages/@expo/package-manager/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @expo/package-manager\n```\n\n----------------------------------------\n\nTITLE: Creating New Expo Project\nDESCRIPTION: Command to create a new React Native project with Expo SDK support using create-expo-app\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/index.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Create a project named my-app\n$ npx create-expo-app my-app --template bare-minimum\n```\n\n----------------------------------------\n\nTITLE: Alternative Xcode Build Phase Modifications for React Native and Expo\nDESCRIPTION: This snippet provides an alternative approach to modifying the Xcode 'Bundle React Native code and images' build phase, focusing on setting environment variables for custom entry files and Expo CLI integration.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/config/metro.mdx#2025-04-22_snippet_21\n\nLANGUAGE: diff\nCODE:\n```\nif [[ -f \"$PODS_ROOT/../.xcode.env\" ]]; then\n  source \"$PODS_ROOT/../.xcode.env\"\nfi\nif [[ -f \"$PODS_ROOT/../.xcode.env.local\" ]]; then\n  source \"$PODS_ROOT/../.xcode.env.local\"\nfi\n\n# The project root by default is one level up from the ios directory\nexport PROJECT_ROOT=\"$PROJECT_DIR\"/...\n\nif [[ \"$CONFIGURATION\" = *Debug* ]]; then\n  export SKIP_BUNDLING=1\nfi\n+ if [[ -z \"$ENTRY_FILE\" ]]; then\n+   # Set the entry JS file using the bundler's entry resolution.\n+   export ENTRY_FILE=\"$(\"$NODE_BINARY\" -e \"require('expo/scripts/resolveAppEntry')\" \"$PROJECT_ROOT\" ios absolute | tail -n 1)\"\n+ fi\n\n+ if [[ -z \"$CLI_PATH\" ]]; then\n+   # Use Expo CLI\n+   export CLI_PATH=\"$(\"$NODE_BINARY\" --print \"require.resolve('@expo/cli')\")\"\n+ fi\n+ if [[ -z \"$BUNDLE_COMMAND\" ]]; then\n+   # Default Expo CLI command for bundling\n+   export BUNDLE_COMMAND=\"export:embed\"\n+ fi\n\n`\"$NODE_BINARY\" --print \"require('path').dirname(require.resolve('react-native/package.json')) + '/scripts/react-native-xcode.sh'\"`\n```\n\n----------------------------------------\n\nTITLE: Initializing Tailwind CSS Layers (CSS)\nDESCRIPTION: This CSS code initializes the base Tailwind CSS layers. It should be placed in a global.css file in the root of your Expo project.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/tailwind.mdx#2025-04-22_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n```\n\n----------------------------------------\n\nTITLE: Push Receipt Request Format in JavaScript\nDESCRIPTION: Shows the structure for requesting push receipts, consisting of an array of receipt IDs.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/push-notifications/sending-notifications.mdx#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"ids\": string[]\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching and Displaying Media Library Albums and Assets\nDESCRIPTION: React Native example demonstrating how to fetch albums from the media library, request permissions, and display album contents with images.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/media-library.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { Button, Text, SafeAreaView, ScrollView, StyleSheet, Image, View, Platform } from 'react-native';\nimport * as MediaLibrary from 'expo-media-library';\n\nexport default function App() {\n  const [albums, setAlbums] = useState(null);\n  const [permissionResponse, requestPermission] = MediaLibrary.usePermissions();\n\n  async function getAlbums() {\n    if (permissionResponse.status !== 'granted') {\n      await requestPermission();\n    }\n    const fetchedAlbums = await MediaLibrary.getAlbumsAsync({\n      includeSmartAlbums: true,\n    });\n    setAlbums(fetchedAlbums);\n  }\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <Button onPress={getAlbums} title=\"Get albums\" />\n      <ScrollView>\n        {albums && albums.map((album) => <AlbumEntry album={album} />)}\n      </ScrollView>\n    </SafeAreaView>\n  );\n}\n\nfunction AlbumEntry({ album }) {\n  const [assets, setAssets] = useState([]);\n\n  useEffect(() => {\n    async function getAlbumAssets() {\n      const albumAssets = await MediaLibrary.getAssetsAsync({ album });\n      setAssets(albumAssets.assets);\n    }\n    getAlbumAssets();\n  }, [album]);\n\n  return (\n    <View key={album.id} style={styles.albumContainer}>\n      <Text>\n        {album.title} - {album.assetCount ?? 'no'} assets\n      </Text>\n      <View style={styles.albumAssetsContainer}>\n        {assets && assets.map((asset) => (\n          <Image source={{ uri: asset.uri }} width={50} height={50} />\n        ))}\n      </View>\n    </View>\n  );\n}\n\n/* @hide const styles = StyleSheet.create({ ... }); */\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    gap: 8,\n    justifyContent: 'center',\n    ...Platform.select({\n      android: {\n        paddingTop: 40,\n      },\n    }),\n  },\n  albumContainer: {\n    paddingHorizontal: 20,\n    marginBottom: 12,\n    gap: 4,\n  },\n  albumAssetsContainer: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n  },\n});\n/* @end */\n```\n\n----------------------------------------\n\nTITLE: Clearing Expo Local State in Bash\nDESCRIPTION: This command removes the .expo directory to clear local Expo state, which can help resolve Metro bundler connection issues.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/workflow/common-development-errors.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf .expo\n```\n\n----------------------------------------\n\nTITLE: Passing Binary Data to SQLite in TypeScript\nDESCRIPTION: Illustrates how to pass binary data to a SQLite database using Uint8Array. It includes creating a table for binary data, inserting a blob, and retrieving it.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/sqlite-next.mdx#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nawait db.execAsync(`\nDROP TABLE IF EXISTS blobs;\nCREATE TABLE IF NOT EXISTS blobs (id INTEGER PRIMARY KEY NOT NULL, data BLOB);\n`);\n\nconst blob = new Uint8Array([0x00, 0x01, 0x02, 0x03, 0x04, 0x05]);\nawait db.runAsync('INSERT INTO blobs (data) VALUES (?)', blob);\n\nconst row = await db.getFirstAsync<{ data: Uint8Array }>('SELECT * FROM blobs');\nexpect(row.data).toEqual(blob);\n```\n\n----------------------------------------\n\nTITLE: Configuring Expo Barcode Scanner in JSON\nDESCRIPTION: This snippet provides an example of how to configure the expo-barcode-scanner using a config plugin in app.json for iOS projects. The snippet demonstrates setting permissions required for camera access.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/bar-code-scanner.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-barcode-scanner\",\n        {\n          \"cameraPermission\": \"Allow $(PRODUCT_NAME) to access camera.\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Netlify Handler for Expo Server - TypeScript\nDESCRIPTION: Defines a Netlify server handler in TypeScript using @expo/server/adapter/netlify. All HTTP requests routed to this function will be handled using createRequestHandler that points to the server-side Expo build output directory. The handler is then exported for Netlify to locate and execute. This file must be placed at the correct path (e.g., netlify/functions/server.ts). Dependencies: @expo/server, path. Meant to work alongside Netlify configuration to direct all requests through this handler.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/reference/api-routes.mdx#2025-04-22_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\nconst { createRequestHandler } = require('@expo/server/adapter/netlify');\\n\\nconst handler = createRequestHandler({\\n  /* @info Points to the root <CODE>dist/</CODE> (output) directory */\\n  build: require('path').join(__dirname, '../../dist/server'),\\n  /* @end */\\n});\\n\\nmodule.exports = { handler };\\n\n```\n\n----------------------------------------\n\nTITLE: Displaying Horizontal Emoji List with React Native FlatList (TypeScript)\nDESCRIPTION: Defines the EmojiList component which renders a horizontal FlatList of emoji images using Expo's Image component. The component accepts an 'onSelect' callback that is called when a user taps on an emoji, as well as 'onCloseModal' to close the modal after selection. Styling is applied via StyleSheet, and the emoji images are sourced from bundled assets. Dependencies: react, react-native, expo-image; expects emoji image files in a specified assets directory. Props must provide image selection and modal close handlers; output is a horizontally scrolling list of touchable emoji.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/create-a-modal.mdx#2025-04-22_snippet_7\n\nLANGUAGE: TSX\nCODE:\n```\nimport { useState } from 'react';\\nimport { StyleSheet, FlatList, Platform, Pressable } from 'react-native';\\nimport { Image, type ImageSource } from 'expo-image';\\n\\ntype Props = {\\n  onSelect: (image: ImageSource) => void;\\n  onCloseModal: () => void;\\n};\\n\\nexport default function EmojiList({ onSelect, onCloseModal }: Props) {\\n  const [emoji] = useState<ImageSource[]>([\\n    require(\"../assets/images/emoji1.png\"),\\n    require(\"../assets/images/emoji2.png\"),\\n    require(\"../assets/images/emoji3.png\"),\\n    require(\"../assets/images/emoji4.png\"),\\n    require(\"../assets/images/emoji5.png\"),\\n    require(\"../assets/images/emoji6.png\"),\\n  ]);\\n\\n  return (\\n    <FlatList\\n      horizontal\\n      showsHorizontalScrollIndicator={Platform.OS === 'web'}\\n      data={emoji}\\n      contentContainerStyle={styles.listContainer}\\n      renderItem={({ item, index }) => (\\n        <Pressable\\n          onPress={() => {\\n            onSelect(item);\\n            onCloseModal();\\n          }}>\\n          <Image source={item} key={index} style={styles.image} />\\n        </Pressable>\\n      )}\\n    />\\n  );\\n}\\n\\nconst styles = StyleSheet.create({\\n  listContainer: {\\n    borderTopRightRadius: 10,\\n    borderTopLeftRadius: 10,\\n    paddingHorizontal: 20,\\n    flexDirection: 'row',\\n    alignItems: 'center',\\n    justifyContent: 'space-between',\\n  },\\n  image: {\\n    width: 100,\\n    height: 100,\\n    marginRight: 20,\\n  },\\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Push Notification Navigation with React Navigation\nDESCRIPTION: Implements push notification deep linking with React Navigation by configuring the NavigationContainer's linking prop. Handles both deep links and push notification URLs.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/notifications.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react';\nimport { Linking } from 'react-native';\nimport * as Notifications from 'expo-notifications';\nimport { NavigationContainer } from '@react-navigation/native';\n\nexport default function App() {\n  return (\n    <NavigationContainer\n      linking={{\n        config: {\n          // Configuration for linking\n        },\n        async getInitialURL() {\n          const url = await Linking.getInitialURL();\n\n          if (url != null) {\n            return url;\n          }\n\n          const response = await Notifications.getLastNotificationResponseAsync();\n\n          return response?.notification.request.content.data.url;\n        },\n        subscribe(listener) {\n          const onReceiveURL = ({ url }: { url: string }) => listener(url);\n\n          const eventListenerSubscription = Linking.addEventListener('url', onReceiveURL);\n\n          const subscription = Notifications.addNotificationResponseReceivedListener(response => {\n            const url = response.notification.request.content.data.url;\n            listener(url);\n          });\n\n          return () => {\n            eventListenerSubscription.remove();\n            subscription.remove();\n          };\n        },\n      }}>\n      {/* Your app content */}\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing iOS Theme Module with Swift\nDESCRIPTION: Basic Swift module implementation for theme management using UserDefaults to store and retrieve theme preferences.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/native-module-tutorial.mdx#2025-04-22_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nimport ExpoModulesCore\n\npublic class ExpoSettingsModule: Module {\n  public func definition() -> ModuleDefinition {\n    Name(\"ExpoSettings\")\n\n    Function(\"getTheme\") { () -> String in\n      \"system\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS App Store Submission Workflow in YAML\nDESCRIPTION: Workflow configuration for automating iOS app store submissions. Triggers on pushes to main branch and executes submit job for iOS platform.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/workflows/automating-eas-cli.mdx#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: Submit iOS app\n\non:\n  push:\n    branches: ['main']\n\njobs:\n  submit_ios:\n    name: Submit iOS\n    type: submit\n    params:\n      platform: ios\n```\n\n----------------------------------------\n\nTITLE: Customizing Babel Configuration for Metro (JavaScript)\nDESCRIPTION: This snippet shows how to customize the Babel configuration for Metro in Expo projects. It demonstrates accessing platform, engine, and environment information from the API caller to conditionally apply plugins and presets.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/config/metro.mdx#2025-04-22_snippet_13\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = function (api) {\n  // Get the platform that Expo CLI is transforming for.\n  const platform = api.caller(caller => (caller ? caller.platform : 'ios'));\n\n  // Detect if the bundling operation is for Hermes engine or not, e.g. `'hermes'` | `undefined`.\n  const engine = api.caller(caller => (caller ? caller.engine : null));\n\n  // Is bundling for a server environment, e.g. API Routes.\n  const isServer = api.caller(caller => (caller ? caller.isServer : false));\n\n  // Is bundling for development or production.\n  const isDev = api.caller(caller =>\n    caller\n      ? caller.isDev\n      : process.env.BABEL_ENV === 'development' || process.env.NODE_ENV === 'development'\n  );\n\n  // Ensure the config is not cached otherwise the platform will not be updated.\n  api.cache(false);\n  // You can alternatively provide a more robust CONFIG cache invalidation:\n  // api.cache.invalidate(() => platform);\n\n  return {\n    presets: ['babel-preset-expo'],\n    plugins: [\n      // Add a plugin based on the platform...\n      platform === 'web' && 'my-plugin',\n\n      // Ensure you filter out falsy values.\n    ].filter(Boolean),\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Device API in JavaScript\nDESCRIPTION: Illustrates how to import the Device API from the expo-device library. This snippet is a prerequisite for accessing any device-specific information within a JavaScript or TypeScript environment using Expo. It sets up the base for accessing device information in a wider application context.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/device.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Device from 'expo-device';\n```\n\n----------------------------------------\n\nTITLE: Installing Expo Dev Client and Updates Packages\nDESCRIPTION: This command installs the necessary packages for using the Expo dev client and EAS Update functionality in a development build.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/development-builds/development-workflows.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-dev-client expo-updates\n```\n\n----------------------------------------\n\nTITLE: Demonstrating JavaScript Minification in Expo CLI\nDESCRIPTION: This snippet shows an example of how JavaScript code is minified by Expo CLI during the production export process. It demonstrates the removal of comments and collapsing of string concatenation.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/minify.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// This comment will be stripped\nconsole.log('a' + ' ' + 'long' + ' string' + ' to ' + 'collapse');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log('a long string to collapse');\n```\n\n----------------------------------------\n\nTITLE: iOS Permissions Configuration in Info.plist\nDESCRIPTION: XML configuration for required iOS permissions in Info.plist. This snippet adds the necessary usage description keys for accessing the photo library, camera, and microphone on iOS devices.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/imagepicker.mdx#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<key>NSPhotoLibraryUsageDescription</key>\n<string>Give $(PRODUCT_NAME) permission to save photos</string>\n<key>NSCameraUsageDescription</key>\n<string>Give $(PRODUCT_NAME) permission to access your camera</string>\n<key>NSMicrophoneUsageDescription</key>\n<string>Give $(PRODUCT_NAME) permission to use your microphone</string>\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Non-Exempt Encryption in app.json\nDESCRIPTION: Example of how to set the usesNonExemptEncryption property to false in the app.json file for iOS apps using expo-secure-store.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/securestore.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"ios\": {\n      \"config\": {\n        \"usesNonExemptEncryption\": false\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the fingerprint Runtime Version Policy (JSON)\nDESCRIPTION: This JSON snippet illustrates using the 'fingerprint' runtime version policy in Expo, which auto-generates a hash-based version using the @expo/fingerprint package. It is suitable for projects with or without custom native code. Dependencies: @expo/fingerprint (handled internally in Expo). Only the 'policy' property set to 'fingerprint' is required.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/updates.mdx#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"runtimeVersion\": {\n      \"policy\": \"fingerprint\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Permissions in app.json\nDESCRIPTION: Example of adding custom Android permissions to your Expo app using the android.permissions configuration in app.json\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/permissions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"android\": {\n    \"permissions\": [\"android.permission.SCHEDULE_EXACT_ALARM\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating AudioPlayer Directly with createAudioPlayer\nDESCRIPTION: This TSX snippet shows how to manually create an `AudioPlayer` instance using the `createAudioPlayer` function from `expo-audio`. This approach is intended for advanced use cases where the automatic lifecycle management provided by the `useAudioPlayer` hook is not suitable. It requires the developer to manually call the `release()` method on the player instance when it's no longer needed to prevent memory leaks.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/audio.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createAudioPlayer } from 'expo-audio';\nconst player = createAudioPlayer(audioSource);\n```\n\n----------------------------------------\n\nTITLE: Implementing LivePhoto with ImagePicker in React Native\nDESCRIPTION: A complete example showing how to use expo-live-photo with expo-image-picker to select, display and control Live Photos. It demonstrates how to check for availability, load photos, handle events, and control playback.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/live-photo.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as ImagePicker from 'expo-image-picker';\nimport { LivePhotoAsset, LivePhotoView, LivePhotoViewType } from 'expo-live-photo';\nimport { useRef, useState } from 'react';\nimport { View, StyleSheet, Text, Button } from 'react-native';\n\nexport default function LivePhotoScreen() {\n  const viewRef = useRef<LivePhotoViewType>(null);\n  const [livePhoto, setLivePhoto] = useState<LivePhotoAsset | null>(null);\n\n  const pickImage = async () => {\n    const result = await ImagePicker.launchImageLibraryAsync({\n      mediaTypes: ['livePhotos'],\n    });\n\n    if (!result.canceled && result.assets[0].pairedVideoAsset?.uri) {\n      setLivePhoto({\n        photoUri: result.assets[0].uri,\n        pairedVideoUri: result.assets[0].pairedVideoAsset.uri,\n      });\n    } else {\n      console.error('Failed to pick a live photo');\n    }\n  };\n\n  if (!LivePhotoView.isAvailable()) {\n    return (\n      <View style={styles.container}>\n        <Text>expo-live-photo is not available on this platform 😕</Text>\n      </View>\n    );\n  }\n\n  return (\n    <View style={styles.container}>\n      <LivePhotoView\n        ref={viewRef}\n        source={livePhoto}\n        style={[styles.livePhotoView, { display: livePhoto ? 'flex' : 'none' }]}\n        onLoadComplete={() => {\n          console.log('Live photo loaded successfully!');\n        }}\n        onLoadError={error => {\n          console.error('Failed to load the live photo: ', error.message);\n        }}\n      />\n      <View style={livePhoto ? styles.pickImageCollapsed : styles.pickImageExpanded}>\n        <Button title={livePhoto ? 'Change Image' : 'Pick an image'} onPress={pickImage} />\n      </View>\n      <Button title=\"Start Playback Hint\" onPress={() => viewRef.current?.startPlayback('hint')} />\n      <Button title=\"Start Playback\" onPress={() => viewRef.current?.startPlayback('full')} />\n      <Button title=\"Stop Playback\" onPress={() => viewRef.current?.stopPlayback()} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    paddingVertical: 20,\n    paddingHorizontal: 40,\n  },\n  livePhotoView: {\n    alignSelf: 'stretch',\n    height: 300,\n  },\n  pickImageExpanded: {\n    alignSelf: 'stretch',\n    height: 300,\n    justifyContent: 'center',\n  },\n  pickImageCollapsed: {\n    marginVertical: 10,\n  },\n  button: {\n    marginVertical: 10,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Entitlements for Wi-Fi SSID Access (JSON)\nDESCRIPTION: This JSON object should be added to your app.json under the ios.entitlements key, enabling the com.apple.developer.networking.wifi-info entitlement required to access SSID information on iOS devices. Prerequisite: only applicable for iOS and requires adding appropriate permissions and rebuilding the app. This configuration must be paired with iOS location permission requests for it to function correctly.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/netinfo.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ios\": {\n    \"entitlements\": {\n      \"com.apple.developer.networking.wifi-info\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Push Notification Deep Linking with React Navigation\nDESCRIPTION: This snippet configures React Navigation's linking system to handle push notification deep links. It handles both initial URLs from Linking API and from push notifications, and subscribes to both sources for runtime navigation.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/notifications.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { Linking } from 'react-native';\nimport * as Notifications from 'expo-notifications';\nimport { NavigationContainer } from '@react-navigation/native';\n\nexport default function App() {\n  return (\n    <NavigationContainer\n      linking={{\n        config: {\n          // Configuration for linking\n        },\n        async getInitialURL() {\n          // First, you may want to do the default deep link handling\n          // Check if app was opened from a deep link\n          const url = await Linking.getInitialURL();\n\n          if (url != null) {\n            return url;\n          }\n\n          // Handle URL from expo push notifications\n          const response = await Notifications.getLastNotificationResponseAsync();\n\n          return response?.notification.request.content.data.url;\n        },\n        subscribe(listener) {\n          const onReceiveURL = ({ url }: { url: string }) => listener(url);\n\n          // Listen to incoming links from deep linking\n          const eventListenerSubscription = Linking.addEventListener('url', onReceiveURL);\n\n          // Listen to expo push notifications\n          const subscription = Notifications.addNotificationResponseReceivedListener(response => {\n            const url = response.notification.request.content.data.url;\n\n            // Any custom logic to see whether the URL needs to be handled\n            //...\n\n            // Let React Navigation handle the URL\n            listener(url);\n          });\n\n          return () => {\n            // Clean up the event listeners\n            eventListenerSubscription.remove();\n            subscription.remove();\n          };\n        },\n      }}>\n      {/* Your app content */}\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Modal Authentication Layout in Expo Router\nDESCRIPTION: Sets up a Stack navigator layout for handling modal-based authentication with a sign-in screen presented as a modal over the root content.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/advanced/authentication.mdx#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Stack } from 'expo-router';\n\nexport const unstable_settings = {\n  initialRouteName: '(root)',\n};\n\nexport default function AppLayout() {\n  return (\n    <Stack>\n      <Stack.Screen name=\"(root)\" />\n      <Stack.Screen\n        name=\"sign-in\"\n        options={{\n          presentation: 'modal',\n        }}\n      />\n    </Stack>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using CSS Modules in Expo with JavaScript/JSX\nDESCRIPTION: This example illustrates importing CSS modules in Expo, which scopes CSS to a component, and demonstrates both web-only usage (<p>) and using styles with react-native-web components (<Text>). The styles object contains keys for each class exported by the CSS module, and unstable_styles provides native-safe styles for use with react-native-web components. This pattern is only supported on web currently, and combining with the style prop enables scoped styling on universal components.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/config/metro.mdx#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport styles, { unstable_styles } from './App.module.css';\\n\\nexport default function Page() {\\n  return (\\n    <>\\n      <Text\\n        style={{\\n          // This is how react-native-web class names are applied\\n          $$css: true,\\n          _: styles.text,\\n        }}>\\n        Hello World\\n      </Text>\\n      <Text style={unstable_styles.text}>Hello World</Text>\\n      {/* Web-only usage: */}\\n      <p className={styles.text}>Hello World</p>\\n    </>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Basic Localization Functions from expo-localization\nDESCRIPTION: This code snippet shows how to import the core functions from the expo-localization package. The getLocales() and getCalendars() methods provide access to the locale settings of the user's device.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/localization.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { getLocales, getCalendars } from 'expo-localization';\n```\n\n----------------------------------------\n\nTITLE: Clearing Caches for Expo CLI with Yarn\nDESCRIPTION: This snippet shows the commands to clear caches when using Expo CLI with Yarn. It includes removing node_modules, cleaning Yarn cache, reinstalling dependencies, resetting Watchman, clearing Metro and Haste map caches, and starting Expo with a clean cache.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/troubleshooting/clear-cache-macos-linux.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# With Yarn workspaces, you may need to delete node_modules in each workspace\n$ rm -rf node_modules\n\n$ yarn cache clean\n\n$ yarn\n\n$ watchman watch-del-all\n\n$ rm -fr $TMPDIR/haste-map-*\n\n$ rm -rf $TMPDIR/metro-cache\n\n$ npx expo start --clear\n```\n\n----------------------------------------\n\nTITLE: Custom Android Version Configuration in EAS Build\nDESCRIPTION: YAML configuration for setting custom Android app version code and name. Demonstrates how to specify custom version parameters.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_34\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: Configure Android version\n  steps:\n    - eas/checkout\n    - eas/install_node_modules\n    - eas/prebuild\n    - eas/configure_eas_update\n    - eas/inject_android_credentials\n    - eas/configure_android_version:\n        inputs:\n          version_code: '123'\n          version_name: '1.0.0'\n```\n\n----------------------------------------\n\nTITLE: Adding NSFaceIDUsageDescription to Info.plist\nDESCRIPTION: Code snippet showing how to add the NSFaceIDUsageDescription key to Info.plist for React Native projects.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/securestore.mdx#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<key>NSCameraUsageDescription</key>\n<string>Allow $(PRODUCT_NAME) to use the camera</string>\n```\n\n----------------------------------------\n\nTITLE: Using Expo Battery in a React Native App\nDESCRIPTION: This snippet demonstrates how to use the expo-battery library within a React Native application to display the current battery level of the device. Dependencies include expo-battery and react-native components. The main component fetches the battery level via useBatteryLevel() and displays it within a styled View. Inputs include the battery level state, and the output is a rendered Text component showing the current battery level.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/battery.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useBatteryLevel } from 'expo-battery';\nimport { StyleSheet, Text, View } from 'react-native';\n\nexport default function App() {\n  const batteryLevel = useBatteryLevel();\n\n  return (\n    <View style={styles.container}>\n      <Text>Current Battery Level: {batteryLevel}</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: 15,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Expo Router's Link Component for URL Navigation\nDESCRIPTION: This example shows how to use the Link component from Expo Router to open a URL in the default browser of the operating system.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/linking/into-other-apps.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Button, View, StyleSheet } from 'react-native';\nimport { Link } from 'expo-router';\n\nexport default function Home() {\n  return (\n    <View style={styles.container}>\n      <Link href=\"https://expo.dev\">Open a URL</Link>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint Rules in .eslintrc (JSON)\nDESCRIPTION: Provides an example of how to configure specific rules from the `eslint-plugin-expo` plugin within the `rules` section of an `.eslintrc` file, setting their severity to \"error\". It shows enabling `expo/no-env-var-destructuring` and `expo/no-dynamic-env-var`.\nSOURCE: https://github.com/expo/expo/blob/main/packages/eslint-plugin-expo/README.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rules\": {\n    \"expo/no-env-var-destructuring\": \"error\",\n    \"expo/no-dynamic-env-var\": \"error\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: iOS Build Debug Error Message\nDESCRIPTION: Example error message shown when provisioning profile doesn't support required capabilities or entitlements.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/build-reference/ios-capabilities.mdx#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n❌  error: Provisioning profile \"*[expo] app.bacon.hello AppStore ...\" doesn't support the Associated Domains capability.\n\n❌  error: Provisioning profile \"*[expo] app.bacon.hello AppStore ...\" doesn't include the com.apple.developer.associated-domains entitlement.\n```\n\n----------------------------------------\n\nTITLE: Enabling New Architecture in app.json for SDK 52\nDESCRIPTION: This JSON configuration enables the New Architecture for both Android and iOS platforms in an Expo project using SDK 52.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/new-architecture.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"newArchEnabled\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing PRAGMA Queries in SQLite\nDESCRIPTION: Shows how to execute PRAGMA statements in SQLite to configure database settings. This example demonstrates enabling WAL journal mode and foreign key constraints, which can improve performance and data integrity.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/sqlite.mdx#2025-04-22_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nconst db = await SQLite.openDatabaseAsync('databaseName');\nawait db.execAsync('PRAGMA journal_mode = WAL');\nawait db.execAsync('PRAGMA foreign_keys = ON');\n```\n\n----------------------------------------\n\nTITLE: Setting up PostCSS Configuration for Tailwind\nDESCRIPTION: PostCSS configuration file that enables Tailwind CSS and autoprefixer plugins.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/config/metro.mdx#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Animated Width Changes in React Native with Reanimated\nDESCRIPTION: This example demonstrates how to create a simple animation that changes the width of a view using react-native-reanimated. It utilizes shared values, timing animations with easing, and animated styles to create a smooth transition when a button is pressed.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/reanimated.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Animated, {\n  useSharedValue,\n  withTiming,\n  useAnimatedStyle,\n  Easing,\n} from 'react-native-reanimated';\nimport { View, Button, StyleSheet } from 'react-native';\n\nexport default function AnimatedStyleUpdateExample() {\n  const randomWidth = useSharedValue(10);\n\n  const config = {\n    duration: 500,\n    easing: Easing.bezier(0.5, 0.01, 0, 1),\n  };\n\n  const style = useAnimatedStyle(() => {\n    return {\n      width: withTiming(randomWidth.value, config),\n    };\n  });\n\n  return (\n    <View style={styles.container}>\n      <Animated.View style={[styles.box, style]} />\n      <Button\n        title=\"toggle\"\n        onPress={() => {\n          randomWidth.value = Math.random() * 350;\n        }}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  box: {\n    width: 100,\n    height: 80,\n    backgroundColor: 'black',\n    margin: 30,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Location Permissions Component\nDESCRIPTION: React component for declaring Android location permissions including coarse location, fine location, foreground service, and background location access\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/location.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<AndroidPermissions\n  permissions={[\n    'ACCESS_COARSE_LOCATION',\n    'ACCESS_FINE_LOCATION',\n    'FOREGROUND_SERVICE',\n    'FOREGROUND_SERVICE_LOCATION',\n    'ACCESS_BACKGROUND_LOCATION',\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: App Config for Localization\nDESCRIPTION: Configuration for enabling localized strings in app.json\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/localization.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"ios\": {\n      \"infoPlist\": {\n        \"CFBundleAllowMixedLocalizations\": true\n      }\n    },\n    \"locales\": {\n      \"ja\": \"./languages/japanese.json\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Checkbox Usage in React Native with Expo\nDESCRIPTION: This snippet demonstrates how to use the expo-checkbox component in a React Native application. It shows examples of normal, custom-colored, and disabled checkboxes, along with state management using useState hook.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/checkbox.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport Checkbox from 'expo-checkbox';\nimport { useState } from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\n\nexport default function App() {\n  const [isChecked, setChecked] = useState(false);\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.section}>\n        <Checkbox style={styles.checkbox} value={isChecked} onValueChange={setChecked} />\n        <Text style={styles.paragraph}>Normal checkbox</Text>\n      </View>\n      <View style={styles.section}>\n        <Checkbox\n          style={styles.checkbox}\n          value={isChecked}\n          onValueChange={setChecked}\n          color={isChecked ? '#4630EB' : undefined}\n        />\n        <Text style={styles.paragraph}>Custom colored checkbox</Text>\n      </View>\n      <View style={styles.section}>\n        <Checkbox style={styles.checkbox} disabled value={isChecked} onValueChange={setChecked} />\n        <Text style={styles.paragraph}>Disabled checkbox</Text>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginHorizontal: 16,\n    marginVertical: 32,\n  },\n  section: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  paragraph: {\n    fontSize: 15,\n  },\n  checkbox: {\n    margin: 8,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Layout with Segment Detection in Expo Router\nDESCRIPTION: Example showing how to create a dynamic layout that renders different components based on the segment prop, distinguishing between search and default stack layouts.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/advanced/shared-routes.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function DynamicLayout({ segment }) {\n  if (segment === '(search)') {\n    return <SearchStack />;\n  }\n\n  return <Stack />;\n}\n```\n\n----------------------------------------\n\nTITLE: Using expo-brightness to Set System Brightness (React Native)\nDESCRIPTION: Demonstrates basic usage of the `expo-brightness` library within a React Native component. It uses `useEffect` to request brightness permissions (`Brightness.requestPermissionsAsync`) on component mount and, if the permission status is 'granted', sets the system brightness to maximum (1) using `Brightness.setSystemBrightnessAsync`. This requires the `expo-brightness` package.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/brightness.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEffect } from 'react';\nimport { StyleSheet, View, Text } from 'react-native';\nimport * as Brightness from 'expo-brightness';\n\nexport default function App() {\n  useEffect(() => {\n    (async () => {\n      const { status } = await Brightness.requestPermissionsAsync();\n      if (status === 'granted') {\n        Brightness.setSystemBrightnessAsync(1);\n      }\n    })();\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <Text>Brightness Module Example</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating and Redirecting to Virtual Modules with Metro in JavaScript\nDESCRIPTION: This snippet demonstrates how to emulate virtual modules in Metro by creating a physical file in the node_modules/.cache directory and redirecting specific import requests to it. The code creates the file at node_modules/.cache/virtual/virtual-module.js (writing a simple ES export), then updates the resolver to return this file for the import 'virtual:my-module'. Requires 'path', 'fs', and 'expo/metro-config'. Useful for simulating externals or redirecting imports, this approach is constrained by the need to physically create and manage the file. Parameters include context, moduleName, and platform as per Metro's resolver API.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/config/metro.mdx#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst path = require('path');\nconst fs = require('fs');\n\nconst { getDefaultConfig } = require('expo/metro-config');\n\n/** @type {import('expo/metro-config').MetroConfig} */\nconst config = getDefaultConfig(__dirname);\n\nconst virtualPath = path.resolve(__dirname, 'node_modules/.cache/virtual/virtual-module.js');\n\n// Create the virtual module in a generated directory...\nfs.mkdirSync(path.dirname(virtualPath), { recursive: true });\nfs.writeFileSync(virtualPath, 'export default \"Hello World\";');\n\nconfig.resolver.resolveRequest = (context, moduleName, platform) => {\n  if (moduleName === 'virtual:my-module') {\n    return {\n      filePath: virtualPath,\n      type: 'sourceFile',\n    };\n  }\n\n  // Ensure you call the default resolver.\n  return context.resolveRequest(context, moduleName, platform);\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Using expo-sqlite Key-Value Store with Synchronous APIs\nDESCRIPTION: Example of using the synchronous API methods in expo-sqlite/kv-store for more convenient storage access when async operations aren't required.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/sqlite.mdx#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// The storage API is the default export, you can call it Storage, AsyncStorage, or whatever you prefer.\nimport Storage from 'expo-sqlite/kv-store';\n\nStorage.setItemSync('key', 'value');\nconst value = Storage.getItemSync('key');\n```\n\n----------------------------------------\n\nTITLE: Setting Runtime Version in app.json\nDESCRIPTION: This JSON snippet demonstrates how to set the runtimeVersion in the app.json file. It uses the 'sdkVersion' policy for determining the runtime version.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/debug.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"runtimeVersion\": {\n      \"policy\": \"sdkVersion\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Processing.js Sketch in Expo React Native Application\nDESCRIPTION: This code snippet shows how to create a React Native component that renders a Processing.js sketch using the ProcessingView from expo-processing. It demonstrates the setup of the component and the implementation of a complex geometric drawing function.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-processing/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { ProcessingView } from 'expo-processing';\n\nexport default class App extends React.Component {\n  render() {\n    return (\n      <ProcessingView style={{ flex: 1 }} sketch={this._sketch} />\n    );\n  }\n\n  _sketch = (p) => {\n    p.setup = () => {\n      p.strokeWeight(7);\n    }\n\n    const harom = (ax, ay, bx, by, level, ratio) => {\n      if (level <= 0) {\n        return;\n      }\n\n      const vx = bx - ax;\n      const vy = by - ay;\n      const nx = p.cos(p.PI / 3) * vx - p.sin(p.PI / 3) * vy;\n      const ny = p.sin(p.PI / 3) * vx + p.cos(p.PI / 3) * vy;\n      const cx = ax + nx;\n      const cy = ay + ny;\n      p.line(ax, ay, bx, by);\n      p.line(ax, ay, cx, cy);\n      p.line(cx, cy, bx, by);\n\n      harom(\n        ax * ratio + cx * (1 - ratio),\n        ay * ratio + cy * (1 - ratio),\n        ax * (1 - ratio) + bx * ratio,\n        ay * (1 - ratio) + by * ratio,\n        level - 1,\n        ratio);\n    }\n\n    p.draw = () => {\n      p.background(240);\n      harom(\n        p.width - 142, p.height - 142, 142, p.height - 142, 6,\n        (p.sin(0.0005 * Date.now() % (2 * p.PI)) + 1) / 2);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Gradle Properties in build.gradle\nDESCRIPTION: This Groovy snippet shows how to access properties from gradle.properties within an Android build.gradle file. It demonstrates the pattern of using findProperty with a fallback value for configuration settings.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/config-plugins/development-and-debugging.mdx#2025-04-22_snippet_16\n\nLANGUAGE: groovy\nCODE:\n```\nproject.ext.react = [/* @info This code would be added to the template ahead of time, but it could be regexed in using <code>withAppBuildGradle()</code> */ enableHermes: findProperty('expo.react.jsEngine') ?: 'jsc' /* @end */]\n```\n\n----------------------------------------\n\nTITLE: Configuring Vercel.json v3 for Expo Application\nDESCRIPTION: This JSON configuration file for Vercel v3 sets up build commands, output directories, and routing rules. It configures the Node.js runtime for the API function and sets up rewrites to route all requests to the server middleware.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/reference/api-routes.mdx#2025-04-22_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"buildCommand\": \"expo export -p web\",\n  \"outputDirectory\": \"dist/client\",\n  \"functions\": {\n    \"api/index.ts\": {\n      \"runtime\": \"@vercel/node@5.1.8\",\n      \"includeFiles\": \"dist/server/**\"\n    }\n  },\n  \"rewrites\": [\n    {\n      \"source\": \"/(.*)\",\n      \"destination\": \"/api/index\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using useKeepAwake Hook in React Native\nDESCRIPTION: This snippet demonstrates how to use the useKeepAwake hook to prevent the screen from sleeping in a React Native component. The hook is called within the component, ensuring the screen stays awake as long as the component is mounted.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/keep-awake.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useKeepAwake } from 'expo-keep-awake';\nimport React from 'react';\nimport { Text, View } from 'react-native';\n\nexport default function KeepAwakeExample() {\n  useKeepAwake();\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>This screen will never sleep!</Text>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Home Screen Route in Expo Router (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to create an initial route for a React Native app using Expo Router. It defines a HomeScreen component with basic styling.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/file-based-routing.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { View, Text, StyleSheet } from 'react-native';\n\nexport default function HomeScreen() {\n  return (\n    <View style={styles.container}>\n      <Text>Home</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel with SWC for Next.js and Expo\nDESCRIPTION: Basic Babel configuration for Expo when using Next.js with SWC transpilation.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/using-nextjs.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = function (api) {\n  api.cache(true);\n  return {\n    presets: ['babel-preset-expo'],\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Opening npm Package Homepage\nDESCRIPTION: This command demonstrates how to quickly open the homepage or README for a npm package (@react-navigation/native in this example) using npx.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/workflow/using-libraries.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ npx npm-home @react-navigation/native\n```\n\n----------------------------------------\n\nTITLE: Bold Text Rendering Example in TextInput\nDESCRIPTION: Shows an example of rendering bold text within a TextInput component, highlighting the limitations of tracking text styling when editing.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/editing-richtext.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<TextInput>\n  <Text>\n    {/* The following will render a bold text in this format: **aa**aa */}\n    <Text style={{ fontWeight: 900 }}>aa</Text>aa\n  </Text>\n</TextInput>\n```\n\n----------------------------------------\n\nTITLE: Uploading Store Config with EAS CLI\nDESCRIPTION: This command uploads the store.config.json file to app stores using the EAS Metadata service. It must be run after submitting a new binary of the app to the app stores.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/deploy/app-stores-metadata.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ eas metadata:push\n```\n\n----------------------------------------\n\nTITLE: Autolinking Search Paths Configuration\nDESCRIPTION: Package.json configuration example showing how to customize the search paths for Expo modules autolinking.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/autolinking.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"autolinking\": {\n      \"searchPaths\": [\"../../packages\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing WebBrowser in JavaScript\nDESCRIPTION: This snippet shows how to import the WebBrowser module from the expo-web-browser package.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/webbrowser.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as WebBrowser from 'expo-web-browser';\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Build with Default Gymfile in EAS Build\nDESCRIPTION: This is the default Gymfile that EAS Build creates if one doesn't exist in the ios directory. It configures Fastlane's gym command for building iOS applications with settings for code signing, output suppression, and artifact path configuration.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/build-reference/ios-builds.mdx#2025-04-22_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nsuppress_xcode_output(true)\nclean(true)\n\nscheme(\"app\")\n\nexport_options({\n  method: \"app-store\",\n  provisioningProfiles: {\n    \"com.expo.eas.builds.test.application\" => \"dd83ed9c-4f89-462e-b901-60ae7fe6d737\"\n  }\n})\n\nexport_xcargs \"OTHER_CODE_SIGN_FLAGS=\\\"--keychain /tmp/path/to/keychain\\\"\"\n\ndisable_xcpretty(true)\n\noutput_directory(\"./build\")\noutput_name(\"App\")\n```\n\n----------------------------------------\n\nTITLE: Defining a Reusable File Listing Function - EAS Build - YAML\nDESCRIPTION: Defines a reusable function named \"list_files\" that runs \"ls -la\" to list files in the current directory. Includes a user-friendly name property. This function can be invoked within any EAS Build YAML configuration to provide cross-platform file listing as a build step.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_59\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  # @info #\n  list_files:\n    name: List files\n    command: ls -la\n  # @end #\n```\n\n----------------------------------------\n\nTITLE: Configuration for Google Maps API Key in app.json for Android\nDESCRIPTION: JSON configuration snippet showing how to add the Google Maps API key to the Android section of app.json. This is required for using Google Maps in production Android applications.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/map-view.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n    \"android\": {\n      \"config\": {\n        \"googleMaps\": {\n          \"apiKey\": \"process.env.GOOGLE_MAPS_API_KEY\",\n        },\n      },\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Package.json Dependencies for Local Packages\nDESCRIPTION: This snippet shows how to configure an Expo app's package.json to use a local package from the monorepo. The local package 'cool-package' is referenced with a wildcard version '*' to always use the current state of the package.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/monorepos.mdx#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"cool-app\",\n  \"version\": \"1.0.0\",\n  \"scripts\": {\n    \"start\": \"expo start\",\n    \"android\": \"expo start --android\",\n    \"ios\": \"expo start --ios\",\n    \"web\": \"expo start --web\"\n  },\n  \"dependencies\": {\n    \"cool-package\": \"*\",\n    \"expo\": \"~50.0.0\",\n    \"expo-status-bar\": \"~1.10.0\",\n    \"react\": \"18.2.0\",\n    \"react-dom\": \"18.2.0\",\n    \"react-native\": \"0.73.0\",\n    \"react-native-web\": \"~0.19.13\"\n  },\n  \"devDependencies\": {\n    \"@babel/core\": \"^7.20.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Maven Block for Expo Camera in Groovy\nDESCRIPTION: This Groovy snippet is used in the `build.gradle` file to ensure the inclusion of the Expo Camera's Maven repository. This inclusion is essential for resolving dependencies specific to `expo-camera` functionality.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/camera.mdx#2025-04-22_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\nallprojects {\n   repositories {\n       // * Your other repositories here *\n       // * Add a new maven block after other repositories / blocks *\n       maven {\n           // expo-camera bundles a custom com.google.android:cameraview\n           url \"$rootDir/../node_modules/expo-camera/android/maven\"\n       }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: iOS Info.plist Configuration\nDESCRIPTION: XML configuration for adding tracking usage description to iOS Info.plist file.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/tracking-transparency.mdx#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<key>NSUserTrackingUsageDescription</key>\n<string>Your custom usage description string here.</string>\n```\n\n----------------------------------------\n\nTITLE: Configuring postinstall Script for Monorepo Dependencies in EAS Build\nDESCRIPTION: This package.json snippet shows how to add a postinstall script that builds necessary dependencies from other workspaces in your monorepo. This ensures all required dependencies are built properly when EAS Build installs your project.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/build-reference/build-with-monorepos.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"postinstall\": \"cd ../.. && yarn build\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Metro Configuration for Expo\nDESCRIPTION: A basic Metro configuration file for Expo projects, importing the default configuration and exporting it.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/customizing-metro.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { getDefaultConfig } = require('expo/metro-config');\n\nconst config = getDefaultConfig(__dirname);\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Using useEventListener Hook for Video Player Events in expo-video\nDESCRIPTION: Shows how to use the `useEventListener` hook from the `expo` package to subscribe to `statusChange` events from a `VideoPlayer`. This hook provides a callback function that executes whenever the event occurs and handles the setup and teardown (cleanup) of the event listener automatically.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/video.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEventListener } from 'expo';\n// ...Other imports, definition of the component, creating the player etc.\n\nuseEventListener(player, 'statusChange', ({ status, error }) => {\n  setPlayerStatus(status);\n  setPlayerError(error);\n  console.log('Player status changed: ', status);\n});\n// Rest of the component...\n```\n\n----------------------------------------\n\nTITLE: Configuring EAS Production Track in eas.json\nDESCRIPTION: JSON configuration for setting up the production track in eas.json for Android app submission. Specifies the service account key path and sets the track to production.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/eas/android-production-build.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"submit\": {\n    \"production\": {\n      \"android\": {\n        \"serviceAccountKeyPath\": \"./service-account-file.json\",\n        \"track\": \"production\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Ad Hoc Provisioning Profile\nDESCRIPTION: This command creates an ad hoc provisioning profile, which is required to install a development build on your iOS device. This command needs to be run after configuring the EAS project.\nSOURCE: https://github.com/expo/expo/blob/main/docs/scenes/get-started/set-up-your-environment/instructions/iosPhysicalDevelopmentBuild.mdx#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ eas device:create\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Permissions for Brightness Control\nDESCRIPTION: Add the WRITE_SETTINGS permission to the AndroidManifest.xml file when not using Continuous Native Generation or using a native Android project manually.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/brightness.mdx#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"android.permission.WRITE_SETTINGS\" />\n```\n\n----------------------------------------\n\nTITLE: Basic iOS Version Configuration in EAS Build\nDESCRIPTION: YAML configuration for setting iOS app version. Shows the basic implementation without custom version inputs.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_35\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: Configure iOS version\n  steps:\n    - eas/checkout\n    - eas/install_node_modules\n    - eas/resolve_apple_team_id_from_credentials:\n        id: resolve_apple_team_id_from_credentials\n    - eas/prebuild:\n        inputs:\n          clean: false\n          apple_team_id: ${ steps.resolve_apple_team_id_from_credentials.apple_team_id }\n    - eas/configure_eas_update\n    - eas/configure_ios_credentials\n    - eas/configure_ios_version\n```\n\n----------------------------------------\n\nTITLE: Registering an iOS Device with EAS CLI\nDESCRIPTION: This command initiates the process of registering a new Apple device using the EAS CLI. It prompts for the Apple ID and generates a registration URL for the iOS device.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/eas/ios-development-build-for-devices.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ eas device:create\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Build with Basic Gradle Command\nDESCRIPTION: Example of a basic Android build configuration using the eas/run_gradle step in the build process.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_37\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: Build Android app\n  steps:\n    - eas/checkout\n    - eas/install_node_modules\n    - eas/prebuild\n    - eas/configure_eas_update\n    - eas/inject_android_credentials\n    # @info #\n    - eas/run_gradle\n    # @end #\n```\n\n----------------------------------------\n\nTITLE: Using Prepared Statements with expo-sqlite in TypeScript\nDESCRIPTION: Illustrates how to use prepared statements for efficient query execution, including creating statements, executing them with parameters, and properly finalizing them to release resources.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/sqlite.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst statement = await db.prepareAsync(\n  'INSERT INTO test (value, intValue) VALUES ($value, $intValue)'\n);\ntry {\n  let result = await statement.executeAsync({ $value: 'bbb', $intValue: 101 });\n  console.log('bbb and 101:', result.lastInsertRowId, result.changes);\n\n  result = await statement.executeAsync({ $value: 'ccc', $intValue: 102 });\n  console.log('ccc and 102:', result.lastInsertRowId, result.changes);\n\n  result = await statement.executeAsync({ $value: 'ddd', $intValue: 103 });\n  console.log('ddd and 103:', result.lastInsertRowId, result.changes);\n} finally {\n  await statement.finalizeAsync();\n}\n\nconst statement2 = await db.prepareAsync('SELECT * FROM test WHERE intValue >= $intValue');\ntry {\n  const result = await statement2.executeAsync<{ value: string; intValue: number }>({\n    $intValue: 100,\n  });\n\n  // `getFirstAsync()` is useful when you want to get a single row from the database.\n  const firstRow = await result.getFirstAsync();\n  console.log(firstRow.id, firstRow.value, firstRow.intValue);\n\n  // Reset the SQLite query cursor to the beginning for the next `getAllAsync()` call.\n  await result.resetAsync();\n\n  // `getAllAsync()` is useful when you want to get all results as an array of objects.\n  const allRows = await result.getAllAsync();\n  for (const row of allRows) {\n    console.log(row.value, row.intValue);\n  }\n\n  // Reset the SQLite query cursor to the beginning for the next `for-await-of` loop.\n  await result.resetAsync();\n\n  // The result object is also an async iterable. You can use it in `for-await-of` loop to iterate SQLite query cursor.\n  for await (const row of result) {\n    console.log(row.value, row.intValue);\n  }\n} finally {\n  await statement2.finalizeAsync();\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing an EAS Update\nDESCRIPTION: This bash command demonstrates how to create and publish an EAS Update using the EAS CLI.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/debug.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ eas update\n```\n\n----------------------------------------\n\nTITLE: Exempting Encryption Prompt with usesNonExemptEncryption (JSON)\nDESCRIPTION: Demonstrates how to set ios.config.usesNonExemptEncryption to false in app.json to automatically handle export compliance prompts regarding encryption for App Store submissions. This is specifically relevant when using expo-secure-store and you wish to clarify the encryption exemption to Apple. The snippet should be nested under the expo.ios.config tree in app.json.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/securestore.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"ios\": {\n      \"config\": {\n        \"usesNonExemptEncryption\": false\n      }\n      /* @hide ... */ /* @end */\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: EAS Prebuild Function YAML\nDESCRIPTION: Demonstrates using the `eas/prebuild` function, which runs `expo prebuild` using the appropriate package manager. It can be customized with properties like `clean` and `apple_team_id`.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/workflows/syntax.mdx#_snippet_46\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  my_job:\n    steps:\n      - uses: eas/checkout\n      - uses: eas/install_node_modules\n      # @info #\n      - uses: eas/prebuild\n      # @end #\n```\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  my_job:\n    steps:\n      - uses: eas/checkout\n      - uses: eas/install_node_modules\n      - uses: eas/resolve_apple_team_id_from_credentials\n        id: resolve_apple_team_id_from_credentials\n      # @info #\n      - uses: eas/prebuild\n        with:\n          clean: false\n          apple_team_id: ${{ steps.resolve_apple_team_id_from_credentials.outputs.apple_team_id }}\n      # @end #\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom View Controller with Expo Updates Support in Swift\nDESCRIPTION: This code snippet demonstrates how to create a custom view controller that integrates with Expo Updates. It implements the AppControllerDelegate protocol, initializes the updates system, and sets up the React Native root view. The controller handles the app startup process and manages the rendering of the updated bundle.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/integration-in-existing-native-apps.mdx#2025-04-22_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nimport UIKit\nimport EXUpdates\nimport ExpoModulesCore\n\n// Step 1\npublic class CustomViewController: UIViewController, AppControllerDelegate {\n  let appDelegate = AppDelegate.shared()\n\n  // Step 2\n  public convenience init() {\n    self.init(nibName: nil, bundle: nil)\n    self.view.backgroundColor = .clear\n    // Step 2.1\n    appDelegate.updatesController = AppController.sharedInstance\n    // Step 2.2\n    AppController.sharedInstance.delegate = self\n    // Step 2.3\n    AppController.sharedInstance.start()\n  }\n\n  required public override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {\n    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)\n  }\n\n  @available(*, unavailable)\n  required public init?(coder aDecoder: NSCoder) {\n    fatalError(\"init(coder:) has not been implemented\")\n  }\n\n  // Step 3\n  public func appController(\n    _ appController: AppControllerInterface,\n    didStartWithSuccess success: Bool\n  ) {\n    createView()\n  }\n\n  private func createView() {\n    // Step 3.1\n    guard let rootViewFactory: RCTRootViewFactory = appDelegate.reactNativeFactory?.rootViewFactory else {\n      fatalError(\"rootViewFactory has not been initialized\")\n    }\n    let rootView = rootViewFactory.view(\n      withModuleName: appDelegate.moduleName,\n      initialProperties: appDelegate.initialProps,\n      launchOptions: appDelegate.launchOptions\n    )\n    // Step 3.2\n    let controller = self\n    controller.view.clipsToBounds = true\n    controller.view.addSubview(rootView)\n    rootView.translatesAutoresizingMaskIntoConstraints = false\n    NSLayoutConstraint.activate([\n      rootView.topAnchor.constraint(equalTo: controller.view.safeAreaLayoutGuide.topAnchor),\n      rootView.bottomAnchor.constraint(equalTo: controller.view.safeAreaLayoutGuide.bottomAnchor),\n      rootView.leadingAnchor.constraint(equalTo: controller.view.safeAreaLayoutGuide.leadingAnchor),\n      rootView.trailingAnchor.constraint(equalTo: controller.view.safeAreaLayoutGuide.trailingAnchor)\n    ])\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using KeepAwake Functions in React Native\nDESCRIPTION: This snippet shows how to use the activateKeepAwake and deactivateKeepAwake functions from expo-keep-awake in a React Native component. The activateKeepAwake function keeps the screen on, and deactivateKeepAwake turns this behavior off until it is activated again. Required dependencies: expo-keep-awake.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/keep-awake.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { activateKeepAwake, deactivateKeepAwake } from 'expo-keep-awake';\nimport React from 'react';\nimport { Button, View } from 'react-native';\n\nexport default class KeepAwakeExample extends React.Component {\n  render() {\n    return (\n      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n        <Button onPress={this._activate} title=\"Activate\" />\n        <Button onPress={this._deactivate} title=\"Deactivate\" />\n      </View>\n    );\n  }\n\n  _activate = () => {\n    /* @info Screen will remain on after called until <strong>deactivateKeepAwake()</strong> is called. */ activateKeepAwake(); /* @end */\n    alert('Activated!');\n  };\n\n  _deactivate = () => {\n    /* @info Deactivates KeepAwake, or does nothing if it was never activated. */ deactivateKeepAwake(); /* @end */\n    alert('Deactivated!');\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Example React Native App Implementation\nDESCRIPTION: Example React Native application showing how to use the theme module to display and manage theme settings.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/native-module-tutorial.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as Settings from 'expo-settings';\nimport { Text, View } from 'react-native';\n\nexport default function App() {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Theme: {Settings.getTheme()}</Text>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Ignoring Environment Files with .gitignore - Shell\nDESCRIPTION: This .gitignore snippet instructs the version control system to ignore all local environment files matching the pattern .env*.local. Using this pattern helps keep sensitive or local-only environment variables out of your repository. This setup is essential for security and proper team workflow.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/config/metro.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# local env files\\n.env*.local\n```\n\n----------------------------------------\n\nTITLE: Using SQLite Key-Value Storage in React Native\nDESCRIPTION: Demonstrates how to use the expo-sqlite/kv-store module to implement basic key-value storage operations with asynchronous methods, including setting, retrieving, and parsing JSON data.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/sqlite.mdx#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// The storage API is the default export, you can call it Storage, AsyncStorage, or whatever you prefer.\nimport Storage from 'expo-sqlite/kv-store';\n\nawait Storage.setItem('key', JSON.stringify({ entity: 'value' }));\nconst value = await Storage.getItem('key');\nconst entity = JSON.parse(value);\nconsole.log(entity); // { entity: 'value' }\n```\n\n----------------------------------------\n\nTITLE: Merging and Cutting Off Changelogs for SDK Release - Shell\nDESCRIPTION: Aggregates CHANGELOG entries from all packages, adds them to the main Expo CHANGELOG, and allows review before finalizing. Requires Expo tools (`et`) and write access to the repository. Runs on the main branch and prepares release notes for the SDK.\nSOURCE: https://github.com/expo/expo/blob/main/guides/releasing/Release Workflow.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\net merge-changelogs --cut-off\n```\n\n----------------------------------------\n\nTITLE: Importing Expo Brightness Module in JavaScript\nDESCRIPTION: This import statement is used to include the expo-brightness API in a JavaScript or React Native module. It is a prerequisite for accessing all brightness-related methods documented in the file. The module provides functions to get and set screen brightness, as well as manage permissions. Make sure that expo-brightness is installed as a dependency before importing.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/brightness.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport * as Brightness from 'expo-brightness';\n```\n\n----------------------------------------\n\nTITLE: Custom App Configuration for React Native Web\nDESCRIPTION: Custom Next.js App configuration with viewport meta tag setup.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/using-nextjs.mdx#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport Head from 'next/head';\n\nexport default function App({ Component, pageProps }) {\n  return (\n    <>\n      <Head>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n      </Head>\n      <Component {...pageProps} />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-camera in app.json\nDESCRIPTION: This JSON snippet demonstrates how to configure the expo-camera plugin in the app.json file. It sets Android and iOS permissions for camera and microphone access, and configures the Android RECORD_AUDIO permission.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/camera.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-camera\",\n        {\n          \"cameraPermission\": \"Allow $(PRODUCT_NAME) to access your camera\",\n          \"microphonePermission\": \"Allow $(PRODUCT_NAME) to access your microphone\",\n          \"recordAudioAndroid\": true\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing expo-image in bare React Native projects\nDESCRIPTION: Command to install the expo-image package using npx and expo CLI. This is used for adding the package to npm dependencies in bare React Native projects.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-image/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-image\n```\n\n----------------------------------------\n\nTITLE: Basic Image Manipulation with Rotation and Flipping in React Native\nDESCRIPTION: This example demonstrates how to use expo-image-manipulator to rotate an image 90 degrees clockwise and flip it vertically. It uses the useImageManipulator hook to create a manipulation context, applies transformations, and saves the result as a PNG file.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/imagemanipulator.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { Button, Image, StyleSheet, View } from 'react-native';\nimport { Asset } from 'expo-asset';\nimport { FlipType, SaveFormat, useImageManipulator } from 'expo-image-manipulator';\n\nconst IMAGE = Asset.fromModule(require('./assets/snack-icon.png'));\n\nexport default function App() {\n  const [image, setImage] = useState(IMAGE);\n  const context = useImageManipulator(IMAGE.uri);\n\n  const rotate90andFlip = async () => {\n    context.rotate(90).flip(FlipType.Vertical);\n    const image = await context.renderAsync();\n    const result = await image.saveAsync({\n      format: SaveFormat.PNG,\n    });\n\n    setImage(result);\n  };\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.imageContainer}>\n        <Image source={{ uri: image.localUri || image.uri }} style={styles.image} />\n      </View>\n      <Button title=\"Rotate and Flip\" onPress={rotate90andFlip} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n  imageContainer: {\n    marginVertical: 20,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  image: {\n    width: 300,\n    height: 300,\n    resizeMode: 'contain',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing LivePhoto View with Image Picker in React Native\nDESCRIPTION: A complete example showing how to implement LivePhotoView with image picking functionality using expo-image-picker. The component includes features for loading live photos, handling errors, and controlling photo playback with a reference-based API.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/live-photo.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as ImagePicker from 'expo-image-picker';\nimport { LivePhotoAsset, LivePhotoView, LivePhotoViewType } from 'expo-live-photo';\nimport { useRef, useState } from 'react';\nimport { View, StyleSheet, Text, Button } from 'react-native';\n\nexport default function LivePhotoScreen() {\n  const viewRef = useRef<LivePhotoViewType>(null);\n  const [livePhoto, setLivePhoto] = useState<LivePhotoAsset | null>(null);\n\n  const pickImage = async () => {\n    const result = await ImagePicker.launchImageLibraryAsync({\n      mediaTypes: ['livePhotos'],\n    });\n\n    if (!result.canceled && result.assets[0].pairedVideoAsset?.uri) {\n      setLivePhoto({\n        photoUri: result.assets[0].uri,\n        pairedVideoUri: result.assets[0].pairedVideoAsset.uri,\n      });\n    } else {\n      console.error('Failed to pick a live photo');\n    }\n  };\n\n  if (!LivePhotoView.isAvailable()) {\n    return (\n      <View style={styles.container}>\n        <Text>expo-live-photo is not available on this platform 😕</Text>\n      </View>\n    );\n  }\n\n  return (\n    <View style={styles.container}>\n      <LivePhotoView\n        ref={viewRef}\n        source={livePhoto}\n        style={[styles.livePhotoView, { display: livePhoto ? 'flex' : 'none' }]}\n        onLoadComplete={() => {\n          console.log('Live photo loaded successfully!');\n        }}\n        onLoadError={error => {\n          console.error('Failed to load the live photo: ', error.message);\n        }}\n      />\n      <View style={livePhoto ? styles.pickImageCollapsed : styles.pickImageExpanded}>\n        <Button title={livePhoto ? 'Change Image' : 'Pick an image'} onPress={pickImage} />\n      </View>\n      <Button title=\"Start Playback Hint\" onPress={() => viewRef.current?.startPlayback('hint')} />\n      <Button title=\"Start Playback\" onPress={() => viewRef.current?.startPlayback('full')} />\n      <Button title=\"Stop Playback\" onPress={() => viewRef.current?.stopPlayback()} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    paddingVertical: 20,\n    paddingHorizontal: 40,\n  },\n  livePhotoView: {\n    alignSelf: 'stretch',\n    height: 300,\n  },\n  pickImageExpanded: {\n    alignSelf: 'stretch',\n    height: 300,\n    justifyContent: 'center',\n  },\n  pickImageCollapsed: {\n    marginVertical: 10,\n  },\n  button: {\n    marginVertical: 10,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: iOS Simulator Maestro Test Configuration\nDESCRIPTION: Configuration for testing a specific iOS simulator app with Maestro test flows.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: Build and test iOS simulator app\n  steps:\n    - eas/checkout\n    - eas/maestro_test:\n        app_path: ./fixtures/my_app.app\n        inputs:\n          flow_path: |\n            maestro/sign_in.yml\n            maestro/create_post.yml\n            maestro/sign_out.yml\n```\n\n----------------------------------------\n\nTITLE: Mapping EAS Update Channel to Branch\nDESCRIPTION: This bash command shows how to map an EAS Update channel to a specific branch using the EAS CLI. It includes an example of mapping the 'production' channel to the 'release-1.0' branch.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/debug.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# eas channel:edit [channel-name] --branch [branch-name]\n\n# Example\n$ eas channel:edit production --branch release-1.0\n```\n\n----------------------------------------\n\nTITLE: React Component Implementation with Expo Best Practices\nDESCRIPTION: Complete example of a React component following Expo coding standards, including proper use of PropTypes, component lifecycle methods, and private method naming with underscore prefixes.\nSOURCE: https://github.com/expo/expo/blob/main/guides/Expo JavaScript Style Guide.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport Expo from 'expo';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { StyleSheet, Text } from 'react-native';\n\nimport Log from '../log/Log';\nimport Colors from '../style/Colors';\n\nexport default class GreetingText extends React.PureComponent {\n  static propTypes = {\n    greeting: PropTypes.string.isRequired,\n    ...Text.propTypes,\n  };\n\n  componentDidUpdate() {\n    Log.info('The greeting was re-rendered');\n  }\n\n  render() {\n    let { greeting, style, ...props } = this.props;\n    return (\n      <Text {...props} onPress={this._handlePress} style={[styles.greeting, style]}>\n        {greeting}\n      </Text>\n    );\n  }\n\n  _handlePress = event => {\n    alert('Congratulations!');\n  };\n}\n\nconst styles = StyleSheet.create({\n  greeting: {\n    color: Colors.energetic,\n    fontSize: 30,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Static Route Examples in TypeScript\nDESCRIPTION: Examples of valid and invalid static route usage with Link component in TypeScript, demonstrating type checking for route paths.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/reference/typed-routes.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n✅ <Link href=\"/about\" />\n✅ <Link href=\"/user/1\" />\n✅ <Link href={`/user/${id}`} />\n✅ <Link href={(\"/user\" + id) as Href} />\n// TypeScript errors if href is not a valid route\n❌ <Link href=\"/usser/1\" />\n```\n\n----------------------------------------\n\nTITLE: Installing ts-node for TypeScript Config Files\nDESCRIPTION: Terminal commands to install ts-node for supporting TypeScript in configuration files, with commands for both macOS/Linux and Windows environments.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/typescript.mdx#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo install ts-node --dev\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo install ts-node \"--\" --dev\n```\n\n----------------------------------------\n\nTITLE: Setting Input Types and Validation\nDESCRIPTION: Shows how to specify different input types (string, num, json) and set allowed values for function inputs.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  greetings:\n    name: Say Hi!\n    inputs:\n      - name: name\n        type: string\n      - name: age\n        type: num\n      - name: other_data\n        type: json\n```\n\n----------------------------------------\n\nTITLE: Disabling CocoaPods Cache in EAS Build Configuration\nDESCRIPTION: This JSON snippet shows how to disable the CocoaPods cache server for iOS dependencies by setting the EAS_BUILD_DISABLE_COCOAPODS_CACHE environment variable to '1' in the eas.json configuration file.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/build-reference/caching.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"production\": {\n      \"env\": {\n        \"EAS_BUILD_DISABLE_COCOAPODS_CACHE\": \"1\"\n        /* @hide ... */ /* @end */\n      }\n      /* @hide ... */ /* @end */\n    }\n    /* @hide ... */ /* @end */\n  }\n  /* @hide ... */ /* @end */\n}\n```\n\n----------------------------------------\n\nTITLE: Blocking Screen Capture Imperatively with Expo Screen Capture (React Native/JavaScript)\nDESCRIPTION: This snippet demonstrates imperative usage of the expo-screen-capture API, providing two async functions to activate and deactivate screen capture blocking using preventScreenCaptureAsync and allowScreenCaptureAsync respectively. It leverages React Native's Button and View components, along with a StyleSheet for layout. Dependencies are expo-screen-capture, react-native, and optionally expo-media-library. The user can activate or deactivate the screen capture protection at runtime through UI buttons. No special permissions are needed for blocking, but see platform notes for Android version considerations.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/screen-capture.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as ScreenCapture from 'expo-screen-capture';\nimport { useEffect } from 'react';\nimport { Button, StyleSheet, View } from 'react-native';\n\nexport default function ScreenCaptureExample() {\n  const activate = async () => {\n    await ScreenCapture.preventScreenCaptureAsync();\n  };\n\n  const deactivate = async () => {\n    await ScreenCapture.allowScreenCaptureAsync();\n  };\n\n  return (\n    <View style={styles.container}>\n      <Button title=\"Activate\" onPress={activate} />\n      <Button title=\"Deactivate\" onPress={deactivate} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring iCloud Entitlements in iOS .entitlements File (XML)\nDESCRIPTION: This XML snippet provides the necessary keys and values for enabling iCloud storage and CloudKit support when manually configuring your iOS app. The entitlements should be added to the ios/[app]/[app].entitlements file, aligning identifiers with the application's bundle identifier and Apple Team ID. This setup is critical to access iCloud containers and enable ubiquity services. Dependencies include an iOS app, appropriate Apple Developer account settings, and access to the entitlements file. The keys set up iCloud container identifiers, iCloud services, ubiquity container identifiers, and the ubiquity key-value store identifier. Any misalignment in identifiers may cause entitlement or build failures.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/document-picker.mdx#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<key>com.apple.developer.icloud-container-identifiers</key>\n<array>\n    <string>iCloud.dev.expo.my-app</string>\n</array>\n<key>com.apple.developer.icloud-services</key>\n<array>\n    <string>CloudDocuments</string>\n</array>\n<key>com.apple.developer.ubiquity-container-identifiers</key>\n<array>\n    <string>iCloud.dev.expo.my-app</string>\n</array>\n<key>com.apple.developer.ubiquity-kvstore-identifier</key>\n<string>$(TeamIdentifierPrefix)dev.expo.my-app</string>\n```\n\n----------------------------------------\n\nTITLE: Installing EAS CLI and Building/Submitting Apps\nDESCRIPTION: Terminal commands for installing EAS CLI globally and building/submitting apps to app stores. Shows both the combined build-submit process and separate submission flow for existing binaries.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/distribution/introduction.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Install the CLI\n$ npm i -g eas-cli\n\n# Build and submit your app\n$ eas build --auto-submit\n\n# OR -- Submit existing binaries\n$ eas submit\n```\n\n----------------------------------------\n\nTITLE: Installing Expo Package with npm\nDESCRIPTION: Command to install the expo package in your project. You should ensure you're using a version of the expo package that is compatible with your project's React Native version.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/brownfield/installing-expo-modules.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install expo\n```\n\n----------------------------------------\n\nTITLE: Importing Expo FileSystem Module (JavaScript)\nDESCRIPTION: Shows the standard ES module import statement to include the `expo-file-system` library in a JavaScript or TypeScript file. This makes the library's functions and constants available under the `FileSystem` namespace.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/filesystem.mdx#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport * as FileSystem from 'expo-file-system';\n```\n\n----------------------------------------\n\nTITLE: Defining Asynchronous Functions in Kotlin\nDESCRIPTION: Creates an asynchronous function that returns a Promise in JavaScript. The function can either return a value directly or use a Promise parameter to resolve or reject.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/module-api.mdx#2025-04-22_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nAsyncFunction(\"myAsyncFunction\") { message: String ->\n  return@AsyncFunction message\n}\n\n// or\n\n// Make sure to import `Promise` class from `expo.modules.kotlin` instead of `expo.modules.core`.\nAsyncFunction(\"myAsyncFunction\") { message: String, promise: Promise ->\n  promise.resolve(message)\n}\n\n```\n\n----------------------------------------\n\nTITLE: Adding Calendar Usage Descriptions to iOS Info.plist\nDESCRIPTION: XML configuration to add NSCalendarsUsageDescription and NSRemindersUsageDescription keys to iOS Info.plist for permission request dialogs.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/calendar.mdx#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<key>NSCalendarsUsageDescription</key>\n<string>Allow $(PRODUCT_NAME) to access your calendar</string>\n<key>NSRemindersUsageDescription</key>\n<string>Allow $(PRODUCT_NAME) to access your reminders</string>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Product Name Mod Plugin in TypeScript\nDESCRIPTION: Example of creating a config plugin to update the Xcode Project's product name using withXcodeProject. Demonstrates how to modify iOS project configuration using the mods system.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/config-plugins/plugins-and-mods.mdx#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ConfigPlugin, withXcodeProject, IOSConfig } from 'expo/config-plugins';\n\nconst withCustomProductName: ConfigPlugin<string> = (config, customName) => {\n  return withXcodeProject(\n    config,\n    async (config) => {\n      config.modResults = IOSConfig.Name.setProductName({ name: customName }, config.modResults);\n      return config;\n    }\n  );\n};\n\n// 💡 Usage:\n\n/// Create a config\nconst config = {\n  name: 'my app',\n};\n\n/// Use the plugin\nexport default withCustomProductName(config, 'new_name');\n```\n\n----------------------------------------\n\nTITLE: Configuring Dark Mode Colors for Android\nDESCRIPTION: Sets up alternate splash screen background colors for dark mode in the Android values-night/colors.xml resource file.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-splash-screen/README.md#2025-04-22_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\n<resources>\n+ <color name=\"splashscreen_background\">#AABBCC</color> <!-- #AARRGGBB or #RRGGBB format -->\n</resources>\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Podfile for Autolinking\nDESCRIPTION: Ruby code for configuring the iOS Podfile to enable autolinking of native dependencies. This includes requiring necessary scripts and using Expo-specific functions.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-modules-core/README.md#2025-04-22_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nrequire File.join(File.dirname(`node --print \"require.resolve('react-native/package.json')\"`), \"scripts/react_native_pods\")\nrequire File.join(File.dirname(`node --print \"require.resolve('expo-modules-core/package.json')\"`), \"cocoapods.rb\")\nrequire File.join(File.dirname(`node --print \"require.resolve('expo-modules-core/package.json')\"`), \"scripts/autolinking\")\n\n#  ...\n\ntarget \"TargetName\" do\n  use_unimodules!\n  config = use_native_modules!\n  use_react_native!(:path => config[\"reactNativePath\"])\n\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Linear Gradients in React Native with Expo\nDESCRIPTION: This snippet demonstrates how to use the LinearGradient component from expo-linear-gradient to create background and button gradients in a React Native application. It includes styling and layout setup for a sample app interface.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/linear-gradient.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StyleSheet, Text, View } from 'react-native';\nimport { LinearGradient } from 'expo-linear-gradient';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <LinearGradient\n        // Background Linear Gradient\n        colors={['rgba(0,0,0,0.8)', 'transparent']}\n        style={styles.background}\n      />\n      <LinearGradient\n        // Button Linear Gradient\n        colors={['#4c669f', '#3b5998', '#192f6a']}\n        style={styles.button}>\n        <Text style={styles.text}>Sign in with Facebook</Text>\n      </LinearGradient>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: 'orange',\n  },\n  background: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 0,\n    height: 300,\n  },\n  button: {\n    padding: 15,\n    alignItems: 'center',\n    borderRadius: 5,\n  },\n  text: {\n    backgroundColor: 'transparent',\n    fontSize: 15,\n    color: '#fff',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Basic EAS Build Configuration in eas.json\nDESCRIPTION: Default configuration generated for a new project with development, preview and production build profiles.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/build/eas-json.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"development\": {\n      \"developmentClient\": true,\n      \"distribution\": \"internal\"\n    },\n    \"preview\": {\n      \"distribution\": \"internal\"\n    },\n    \"production\": {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding iOS NSContactsUsageDescription in Info.plist - XML\nDESCRIPTION: Demonstrates the required Info.plist entries for iOS native projects to enable access to contacts. The 'NSContactsUsageDescription' key must be present with a relevant explanation for users. This must be added manually if not using Expo managed workflow. Place within your iOS project's Info.plist file under the main <dict>.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/contacts.mdx#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<key>NSContactsUsageDescription</key>\\n<string>Allow $(PRODUCT_NAME) to access your contacts</string>\\n\n```\n\n----------------------------------------\n\nTITLE: GLView Integration with Reanimated Worklets\nDESCRIPTION: This example shows how to use GLView with React Native Reanimated worklets. It demonstrates passing the GL context ID to a worklet and recreating the GL object inside the worklet environment, enabling WebGL rendering from the Reanimated thread.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/gl-view.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { View } from 'react-native';\nimport { runOnUI } from 'react-native-reanimated';\nimport { GLView } from 'expo-gl';\n\nfunction render(gl) {\n  'worklet';\n  // add your WebGL code here\n}\n\nfunction onContextCreate(gl) {\n  runOnUI((contextId: number) => {\n    'worklet';\n    const gl = GLView.getWorkletContext(contextId);\n    render(gl);\n  })(gl.contextId);\n}\n\nexport default function App() {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <GLView\n        style={{ width: 300, height: 300 }}\n        enableExperimentalWorkletSupport\n        onContextCreate={onContextCreate}\n      />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Password Encryption with SQLCipher in Expo SQLite\nDESCRIPTION: Demonstrates how to implement SQLCipher encryption by setting a password for a database after opening it, providing basic security for sensitive data.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/sqlite.mdx#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst db = await SQLite.openDatabaseAsync('databaseName');\nawait db.execAsync(`PRAGMA key = 'password'`);\n```\n\n----------------------------------------\n\nTITLE: Handling View Events in React Components\nDESCRIPTION: Shows how to subscribe to view-specific events in a React component using requireNativeViewManager. The example creates a component that listens for camera ready events from a native view.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/module-api.mdx#2025-04-22_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\nimport { requireNativeViewManager } from 'expo-modules-core';\n\nconst CameraView = requireNativeViewManager('CameraView');\n\nexport default function MainView() {\n  const onCameraReady = event => {\n    console.log(event.nativeEvent);\n  };\n\n  return <CameraView onCameraReady={onCameraReady} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticated Home Screen with Sign Out\nDESCRIPTION: Implements the main authenticated screen with sign-out functionality using the authentication context.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/advanced/authentication.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Text, View } from 'react-native';\n\nimport { useSession } from '../../ctx';\n\nexport default function Index() {\n  const { signOut } = useSession();\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text\n        onPress={() => {\n          signOut();\n        }}>\n        Sign Out\n      </Text>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Android Gradle Configuration for Expo CLI\nDESCRIPTION: Modifications to Android build.gradle to use Expo CLI for production bundling.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/config/metro.mdx#2025-04-22_snippet_15\n\nLANGUAGE: diff\nCODE:\n```\nreact {\n  ...\n+     // Use Expo CLI to bundle the app, this ensures the Metro config\n+     // works correctly with Expo projects.\n+     cliFile = new File([\"node\", \"--print\", \"require.resolve('@expo/cli')\"].execute(null, rootDir).text.trim())\n+     bundleCommand = \"export:embed\"\n}\n```\n\n----------------------------------------\n\nTITLE: Nested Layout with Safe Navigation\nDESCRIPTION: Implementation of nested layout that safely handles conditional rendering and navigation after root layout mounting.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/advanced/authentication.mdx#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function RootLayout() {\n  React.useEffect(() => {\n    router.push('/about');\n  }, []);\n\n  // It is OK to defer rendering this nested layout's content. We couldn't\n  // defer rendering the root layout's content since a navigation event (the\n  // redirect) would have been triggered before the root layout's content had\n  // been mounted.\n  if (isLoading) {\n    return <Text>Loading...</Text>;\n  }\n\n  return <Slot />;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-video in app.json\nDESCRIPTION: Example of configuring expo-video using its built-in config plugin in the app.json file. This snippet shows how to enable background playback and picture-in-picture support.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/video.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-video\",\n        {\n          \"supportsBackgroundPlayback\": true,\n          \"supportsPictureInPicture\": true\n        }\n      ]\n    ],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Package Interface for Activity Lifecycle Listeners in Java\nDESCRIPTION: This snippet demonstrates how to create a Package class that implements the createReactActivityLifecycleListeners method to provide Activity lifecycle listeners in Java.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/android-lifecycle-listeners.mdx#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n// android/src/main/java/expo/modules/mylib/MyLibPackage.java\npackage expo.modules.mylib;\n\nimport android.content.Context;\nimport expo.modules.core.interfaces.Package;\nimport expo.modules.core.interfaces.ReactActivityLifecycleListener;\n\nimport java.util.Collections;\nimport java.util.List;\n\npublic class MyLibPackage implements Package {\n  @Override\n  public List<? extends ReactActivityLifecycleListener> createReactActivityLifecycleListeners(Context activityContext) {\n    return Collections.singletonList(new MyLibReactActivityLifecycleListener());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SSID Access in app.json for iOS\nDESCRIPTION: Shows how to add the required networking WiFi info entitlement to app.json for iOS to enable SSID access. This is one of the configuration steps needed to access the SSID property of the network.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/netinfo.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n  \"ios\": {\n    \"entitlements\": {\n      \"com.apple.developer.networking.wifi-info\": true\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Importing Device Module from expo-device in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to import the Device module from the expo-device package. It's a prerequisite for using device-related functionalities within the expo-device library.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/device.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as Device from 'expo-device';\n```\n\n----------------------------------------\n\nTITLE: Configuring EAS Metadata Path in eas.json\nDESCRIPTION: This JSON snippet shows how to configure the metadataPath in eas.json to use a JavaScript file for dynamic EAS Metadata configuration.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/metadata/config.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"submit\": {\n    \"production\": {\n      \"ios\": {\n        \"metadataPath\": \"./store.config.js\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Job Runs_on Configuration YAML\nDESCRIPTION: Specifies the worker that will execute the custom job. The `runs_on` property is optional and defaults to 'linux-medium'. It is only available on custom jobs. Different worker types are available with varying resources.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/workflows/syntax.mdx#_snippet_38\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  my_job:\n    # @info #\n    runs_on: linux-medium | linux-large |\n      linux-medium-nested-virtualization |\n      linux-large-nested-virtualization |\n      macos-medium | macos-large # optional, defaults to linux-medium\n    # @end #\n```\n\n----------------------------------------\n\nTITLE: Implementing Dev Tools Plugin Hook in TypeScript\nDESCRIPTION: This code snippet shows how to implement a custom hook for a dev tools plugin. It uses the useDevToolsPluginClient hook to create a client and defines a sendPing function.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/debugging/create-devtools-plugins.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useDevToolsPluginClient } from 'expo/devtools';\n\nexport function useMyDevToolsPlugin() {\n  const client = useDevToolsPluginClient('my-devtools-plugin');\n\n  const sendPing = () => {\n    client?.sendMessage('ping', { from: 'app' });\n  };\n\n  return {\n    sendPing,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Environment Variables for Build Types\nDESCRIPTION: Setting up environment variables to identify different build types in app.config.js\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/eas/multiple-app-variants.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst IS_DEV = process.env.APP_VARIANT === 'development';\nconst IS_PREVIEW = process.env.APP_VARIANT === 'preview';\n```\n\n----------------------------------------\n\nTITLE: Implementing Haptic Feedback in React Native with expo-haptics\nDESCRIPTION: A complete example demonstrating how to use various haptic feedback types in a React Native application. This code shows how to trigger selection feedback, notification feedback (success, error, warning), and impact feedback with different intensities (light, medium, heavy, rigid, soft).\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/haptics.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { StyleSheet, View, Text, Button } from 'react-native';\nimport * as Haptics from 'expo-haptics';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.text}>Haptics.selectionAsync</Text>\n      <View style={styles.buttonContainer}>\n        <Button title=\"Selection\" onPress={() => /* @info */ Haptics.selectionAsync() /* @end */} />\n      </View>\n      <Text style={styles.text}>Haptics.notificationAsync</Text>\n      <View style={styles.buttonContainer}>\n        <Button\n          title=\"Success\"\n          onPress={\n            () =>\n              /* @info */ Haptics.notificationAsync(\n                Haptics.NotificationFeedbackType.Success\n              ) /* @end */\n          }\n        />\n        <Button\n          title=\"Error\"\n          onPress={\n            () =>\n              /* @info */ Haptics.notificationAsync(\n                Haptics.NotificationFeedbackType.Error\n              ) /* @end */\n          }\n        />\n        <Button\n          title=\"Warning\"\n          onPress={\n            () =>\n              /* @info */ Haptics.notificationAsync(\n                Haptics.NotificationFeedbackType.Warning\n              ) /* @end */\n          }\n        />\n      </View>\n      <Text style={styles.text}>Haptics.impactAsync</Text>\n      <View style={styles.buttonContainer}>\n        <Button\n          title=\"Light\"\n          onPress={\n            () => /* @info */ Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light) /* @end */\n          }\n        />\n        <Button\n          title=\"Medium\"\n          onPress={\n            () => /* @info */ Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium) /* @end */\n          }\n        />\n        <Button\n          title=\"Heavy\"\n          onPress={\n            () => /* @info */ Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Heavy) /* @end */\n          }\n        />\n        <Button\n          title=\"Rigid\"\n          onPress={\n            () => /* @info */ Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Rigid) /* @end */\n          }\n        />\n        <Button\n          title=\"Soft\"\n          onPress={\n            () => /* @info */ Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Soft) /* @end */\n          }\n        />\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    paddingHorizontal: 16,\n  },\n  buttonContainer: {\n    flexDirection: 'row',\n    alignItems: 'stretch',\n    marginTop: 10,\n    marginBottom: 30,\n    justifyContent: 'space-between',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Basic WebBrowser Usage in React Native\nDESCRIPTION: This JavaScript/JSX code snippet demonstrates how to use the expo-web-browser package to open a web browser from a React Native app. It utilizes the useState hook to manage the state and displays the result of opening the browser. Dependencies include react-native, expo-web-browser, and expo-constants. The component renders a button that triggers the WebBrowser.openBrowserAsync method to open the Expo website. The component also shows the result returned by the browser operation.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/webbrowser.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { Button, Text, View, StyleSheet } from 'react-native';\nimport * as WebBrowser from 'expo-web-browser';\n/* @hide */\nimport Constants from 'expo-constants';\n/* @end */\n\nexport default function App() {\n  const [result, setResult] = useState(null);\n\n  const _handlePressButtonAsync = async () => {\n    let result = await WebBrowser.openBrowserAsync('https://expo.dev');\n    setResult(result);\n  };\n  return (\n    <View style={styles.container}>\n      <Button title=\"Open WebBrowser\" onPress={_handlePressButtonAsync} />\n      <Text>{result && JSON.stringify(result)}</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingTop: Constants.statusBarHeight,\n    backgroundColor: '#ecf0f1',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring AuthSession in app.json\nDESCRIPTION: Configuration settings required in app.json to enable deep linking for standalone apps. The scheme property defines the URL scheme used for authentication redirects.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/auth-session.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"scheme\": \"mycoolredirect\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing AuthSession Module\nDESCRIPTION: Basic import statement for using the AuthSession module in your application.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/auth-session.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as AuthSession from 'expo-auth-session';\n```\n\n----------------------------------------\n\nTITLE: Implementing TinyBase DevTools in React Native App\nDESCRIPTION: Implementation of TinyBase store with DevTools integration in a React Native app component. Creates a TinyBase store, initializes it with a counter value, and sets up the DevTools connection.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/debugging/devtools-plugins.mdx#2025-04-22_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createStore } from 'tinybase';\nimport { useValue, Provider } from 'tinybase/lib/ui-react';\nimport { useTinyBaseDevTools } from '@dev-plugins/tinybase';\n\nconst store = createStore().setValue('counter', 0);\n\nexport default function App() {\n  useTinyBaseDevTools(store);\n\n  return <Provider store={store}>{/* ... */}</Provider>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ScreenOrientation with Config Plugin in app.json\nDESCRIPTION: Example configuration for expo-screen-orientation using the built-in config plugin in app.json. This example sets the initial orientation to DEFAULT and enables requireFullScreen for iOS.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/screen-orientation.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"ios\": {\n      \"requireFullScreen\": true\n    },\n    \"plugins\": [\n      [\n        \"expo-screen-orientation\",\n        {\n          \"initialOrientation\": \"DEFAULT\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Local Images in Expo Print\nDESCRIPTION: Example showing how to handle local images in iOS printing by converting them to base64 format using expo-asset and expo-image-manipulator.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/print.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { Asset } from 'expo-asset';\nimport { printAsync } from 'expo-print';\nimport { manipulateAsync } from 'expo-image-manipulator';\n\nasync function generateHTML() {\n  const asset = Asset.fromModule(require('../../assets/logo.png'));\n  const image = await manipulateAsync(asset.localUri ?? asset.uri, [], { base64: true });\n  return `\n    <html>\n      <img\n        src=\"data:image/jpeg;base64,${image.base64}\"\n        style=\"width: 90vw;\" />\n    </html>\n  `;\n}\n\nasync function print() {\n  const html = await generateHTML();\n  await printAsync({ html });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle Properties for Android Builds\nDESCRIPTION: This configuration sets global Gradle properties for Android builds, optimizing memory usage, parallel execution, and on-demand configuration. It defines JVM arguments, enables parallel building, configures on-demand evaluation, and disables the Gradle daemon to ensure consistent builds.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/build-reference/infrastructure.mdx#_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\norg.gradle.jvmargs=-Xmx14g -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8\norg.gradle.parallel=true\norg.gradle.configureondemand=true\norg.gradle.daemon=false\n```\n\n----------------------------------------\n\nTITLE: Async Import with Metro Ignore Comment (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the `@metro-ignore` comment to opt-out of Metro's dynamic import processing. This is useful for server environments that support runtime imports.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/config/metro.mdx#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n// Manually ensure `./my-module.js` is included in the correct spot relative to the module.\nconst myModule = await import(/* @metro-ignore */ './my-module.js');\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Keyboard Height Hook in React Native with TypeScript\nDESCRIPTION: This snippet defines a custom hook called useGradualAnimation that uses the useKeyboardHandler hook to track keyboard height changes. It returns a shared value that can be used for animations.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/keyboard-handling.mdx#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useKeyboardHandler } from 'react-native-keyboard-controller';\nimport Animated, { useAnimatedStyle, useSharedValue } from 'react-native-reanimated';\n\nconst useGradualAnimation = () => {\n  const height = useSharedValue(0);\n\n  useKeyboardHandler(\n    {\n      onMove: event => {\n        'worklet';\n        height.value = Math.max(event.height, 0);\n      },\n    },\n    []\n  );\n  return { height };\n};\n```\n\n----------------------------------------\n\nTITLE: Running iOS Development Environment\nDESCRIPTION: Command to setup and run the iOS environment, performing pod install, npm install, opening simulator, starting Metro, and launching the app.\nSOURCE: https://github.com/expo/expo/blob/main/apps/bare-expo/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn ios\n```\n\n----------------------------------------\n\nTITLE: Creating Development Builds Workflow in YAML\nDESCRIPTION: This workflow creates development builds for Android, iOS devices, and iOS simulators. It uses the build profiles defined in eas.json to generate builds for different platforms and environments.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/workflows/examples.mdx#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: Create development builds\n\njobs:\n  android_development_build:\n    name: Build Android\n    type: build\n    params:\n      platform: android\n      profile: development\n  ios_device_development_build:\n    name: Build iOS device\n    type: build\n    params:\n      platform: ios\n      profile: development\n  ios_simulator_development_build:\n    name: Build iOS simulator\n    type: build\n    params:\n      platform: ios\n      profile: development-simulator\n```\n\n----------------------------------------\n\nTITLE: Importing SystemUI Module in JavaScript\nDESCRIPTION: This code snippet demonstrates how to import the SystemUI module from the expo-system-ui package. It allows developers to access the functionality provided by the library for interacting with system UI elements.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/system-ui.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as SystemUI from 'expo-system-ui';\n```\n\n----------------------------------------\n\nTITLE: Configuring Background Modes in app.json for iOS\nDESCRIPTION: This JSON snippet shows how to enable background location, fetch, and remote notifications in the app.json configuration file for iOS.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/task-manager.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"ios\": {\n      \"infoPlist\": {\n        \"UIBackgroundModes\": [\"location\", \"fetch\", \"remote-notification\"]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Expo Project via Multiple Package Managers - Shell\nDESCRIPTION: Demonstrates initializing a new Expo project using various JavaScript package managers (npx, bun, pnpm, yarn). Also shows how to display help information with customization options. Requires Node.js, a JavaScript package manager, and internet connectivity. Inputs are optional flags like --help and outputs are created Expo project directories.\nSOURCE: https://github.com/expo/expo/blob/main/packages/create-expo/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n# Usage for bun, npm, pnpm, and yarn\\nnpx create-expo\\nbun create expo\\npnpm create expo\\nyarn create expo\\n\\n# Output help information with all available options\\nnpx create-expo --help\n```\n\n----------------------------------------\n\nTITLE: Defining API Routes in TypeScript\nDESCRIPTION: API routes in Expo Router projects are defined in files ending with '+api.ts'. These files contain server-side code that can safely use sensitive environment variables.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/hosting/environment-variables.mdx#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n**+api.ts**\n```\n\n----------------------------------------\n\nTITLE: Basic WebBrowser Usage in React Native\nDESCRIPTION: A React Native component demonstrating basic usage of the expo-web-browser package. It includes a button to open a web browser and display the result.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/webbrowser.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { Button, Text, View, StyleSheet } from 'react-native';\nimport * as WebBrowser from 'expo-web-browser';\nimport Constants from 'expo-constants';\n\nexport default function App() {\n  const [result, setResult] = useState(null);\n\n  const _handlePressButtonAsync = async () => {\n    let result = await WebBrowser.openBrowserAsync('https://expo.dev');\n    setResult(result);\n  };\n  return (\n    <View style={styles.container}>\n      <Button title=\"Open WebBrowser\" onPress={_handlePressButtonAsync} />\n      <Text>{result && JSON.stringify(result)}</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingTop: Constants.statusBarHeight,\n    backgroundColor: '#ecf0f1',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Constructing EAS Update Preview URL\nDESCRIPTION: Template and example for constructing a URL to open an EAS Update in a development build. The URL includes the project slug, development client path, and update group ID parameters.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/expo-dev-client.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n[slug]://expo-development-client/?url=[https://u.expo.dev/project-id]/group/[group-id]\n\n# Example\nmy-app://expo-development-client/?url=https://u.expo.dev/675cb1f0-fa3c-11e8-ac99-6374d9643cb2/group/47839bf2-9e01-467b-9378-4a978604ab11\n```\n\n----------------------------------------\n\nTITLE: Configuring Initial Route in Expo Router Layout\nDESCRIPTION: Configuration for setting the initial route name in an Expo Router layout file using unstable_settings. This is necessary for proper back button functionality in modal screens.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/reference/troubleshooting.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport const unstable_settings = {\n  initialRouteName: 'index',\n};\n```\n\n----------------------------------------\n\nTITLE: Opening iOS App Store for Reviews (TypeScript)\nDESCRIPTION: This snippet shows how to redirect users to the 'Write a Review' screen for an app in the iOS App Store, both in the browser and directly in the App Store app.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/storereview.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst itunesItemId = 982107779;\n// Open the iOS App Store in the browser -> redirects to App Store on iOS\nLinking.openURL(`https://apps.apple.com/app/apple-store/id${itunesItemId}?action=write-review`);\n// Open the iOS App Store directly\nLinking.openURL(\n  `itms-apps://itunes.apple.com/app/viewContentsUserReviews/id${itunesItemId}?action=write-review`\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Video Reference\nDESCRIPTION: JavaScript code showing how to obtain a reference to a Video component using a ref callback function. This reference can then be used to control video playback using the imperative API.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/av.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n_handleVideoRef = component => {\n  const playbackObject = component;\n  ...\n}\n\nrender() {\n  return (\n      <Video\n        ref={this._handleVideoRef}\n      />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Launching Android Intent with expo-intent-launcher in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the expo-intent-launcher package to open the Android location settings screen. It imports the necessary functions and uses startActivityAsync with a predefined ActivityAction.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/intent-launcher.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { startActivityAsync, ActivityAction } from 'expo-intent-launcher';\n\n// Open location settings\nstartActivityAsync(ActivityAction.LOCATION_SOURCE_SETTINGS);\n```\n\n----------------------------------------\n\nTITLE: Recursively Listing Directory Contents with Expo FileSystem Next (TypeScript)\nDESCRIPTION: Defines a recursive function to print the contents of a directory tree using 'Directory' and 'Paths' from the new API. It distinguishes between files and directories, printing names and file sizes. This snippet highlights recursive traversal, handling of directory/file types, and structured logging. Limitations may include stack size for deep trees. Inputs are directory paths; output is logged directory structure.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/filesystem-next.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Directory, Paths } from 'expo-file-system/next';\n\nfunction printDirectory(directory: Directory, indent: number = 0) {\n  console.log(`${' '.repeat(indent)} + ${directory.name}`);\n  const contents = directory.list();\n  for (const item of contents) {\n    if (item instanceof Directory) {\n      printDirectory(item, indent + 2);\n    } else {\n      console.log(`${' '.repeat(indent + 2)} - ${item.name} (${item.size} bytes)`);\n    }\n  }\n}\n\ntry {\n  printDirectory(new Directory(Paths.cache));\n} catch (error) {\n  console.error(error);\n}\n```\n\n----------------------------------------\n\nTITLE: Running Expo in Production Mode with Minification\nDESCRIPTION: This command starts Expo in production mode with minification enabled, which can help identify issues in the production JavaScript bundle.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/workflow/common-development-errors.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo start --no-dev --minify\n```\n\n----------------------------------------\n\nTITLE: Implementing Video Playback with Controls in React Native using expo-video\nDESCRIPTION: This snippet demonstrates how to create a video player with play/pause controls using the expo-video library. It utilizes the useVideoPlayer hook and VideoView component to manage video playback and display.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/video.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useVideoPlayer, VideoView } from 'expo-video';\nimport { useEffect, useRef, useState } from 'react';\nimport { PixelRatio, StyleSheet, View, Button } from 'react-native';\n\nconst videoSource =\n  'https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4';\n\nexport default function VideoScreen() {\n  const ref = useRef(null);\n  const [isPlaying, setIsPlaying] = useState(true);\n  const player = useVideoPlayer(videoSource, player => {\n    player.loop = true;\n    player.play();\n  });\n\n  useEffect(() => {\n    const subscription = player.addListener('playingChange', isPlaying => {\n      setIsPlaying(isPlaying);\n    });\n\n    return () => {\n      subscription.remove();\n    };\n  }, [player]);\n\n  return (\n    <View style={styles.contentContainer}>\n      <VideoView\n        ref={ref}\n        style={styles.video}\n        player={player}\n        allowsFullscreen\n        allowsPictureInPicture\n      />\n      <View style={styles.controlsContainer}>\n        <Button\n          title={isPlaying ? 'Pause' : 'Play'}\n          onPress={() => {\n            if (isPlaying) {\n              player.pause();\n            } else {\n              player.play();\n            }\n            setIsPlaying(!isPlaying);\n          }}\n        />\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  contentContainer: {\n    flex: 1,\n    padding: 10,\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingHorizontal: 50,\n  },\n  video: {\n    width: 350,\n    height: 275,\n  },\n  controlsContainer: {\n    padding: 10,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Redirect Component in Expo Router\nDESCRIPTION: Shows how to use the Redirect component to immediately redirect to another route from a page or layout in Expo Router.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/basics/navigation.mdx#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Redirect } from 'expo-router';\n\nexport default function Page() {\n  return <Redirect href=\"/about\" />;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Native Views in iOS/Android\nDESCRIPTION: Example of creating a native text view with a text prop and focus function in both iOS and Android. Shows basic view setup with property and function definitions.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/module-api.mdx#2025-04-22_snippet_19\n\nLANGUAGE: swift\nCODE:\n```\nView(UITextView.self) {\n  Prop(\"text\") { /* @hide ... */ /* @end */ }\n\n  AsyncFunction(\"focus\") { (view: UITextView) in\n    view.becomeFirstResponder()\n  }\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nView(TextView::class) {\n  Prop(\"text\") { /* @hide ... */ /* @end */ }\n\n  AsyncFunction(\"focus\") { view: TextView ->\n    view.requestFocus()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Linking PWA Manifest in HTML for Single-Page Expo App\nDESCRIPTION: Demonstrates how to link the PWA manifest file in the HTML head for a single-page Expo app. This is done by adding a link tag to the public/index.html file.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/progressive-web-apps.mdx#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"manifest\" href=\"/manifest.json\" />\n```\n\n----------------------------------------\n\nTITLE: Conditional Step Execution in GitHub Actions Workflow\nDESCRIPTION: Demonstrates how to conditionally execute workflow steps based on changes in backend or frontend directories using paths-filter action.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-updates/e2e/setup/paths-filter/README.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  tests:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v4\n    - uses: dorny/paths-filter@v3\n      id: filter\n      with:\n        filters: |\n          backend:\n            - 'backend/**'\n          frontend:\n            - 'frontend/**'\n\n    # run only if 'backend' files were changed\n    - name: backend tests\n      if: steps.filter.outputs.backend == 'true'\n      run: ...\n\n    # run only if 'frontend' files were changed\n    - name: frontend tests\n      if: steps.filter.outputs.frontend == 'true'\n      run: ...\n\n    # run if 'backend' or 'frontend' files were changed\n    - name: e2e tests\n      if: steps.filter.outputs.backend == 'true' || steps.filter.outputs.frontend == 'true'\n      run: ...\n```\n\n----------------------------------------\n\nTITLE: Building Android App with Product Flavors\nDESCRIPTION: Commands to build development versions of an Android app with different product flavors (free and paid) using the --variant flag.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/local-app-development.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo run:android --variant freeDebug\n\n$ npx expo run:android --variant paidDebug\n```\n\n----------------------------------------\n\nTITLE: Using a Published Expo Module in React Native Component\nDESCRIPTION: Shows how to import and utilize a published npm package (expo-settings) in a React Native component. The component displays the hello() function's output from the module.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/use-standalone-expo-module-in-your-project.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport * as Settings from 'expo-settings';\nimport { Text, View } from 'react-native';\n\nexport default function TabOneScreen() {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>{Settings.hello()}</Text>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Example React Native App Using the WebView Component\nDESCRIPTION: Sample React Native application that demonstrates how to use the WebView component with basic styling.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/native-view-tutorial.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { WebView } from 'expo-web-view';\n\nexport default function App() {\n  return <WebView style={{ flex: 1, backgroundColor: 'purple' }} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Platform-Specific Splash Screen in Expo app.json\nDESCRIPTION: This JSON snippet demonstrates how to configure splash screen properties separately for Android and iOS platforms in the app.json file of an Expo project.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/user-interface/splash-screen-and-app-icon.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-splash-screen\",\n        {\n          \"ios\": {\n            \"backgroundColor\": \"#ffffff\",\n            \"image\": \"./assets/images/splash-icon.png\",\n            \"resizeMode\": \"cover\"\n          },\n          \"android\": {\n            \"backgroundColor\": \"#0c7cff\",\n            \"image\": \"./assets/images/splash-android-icon.png\",\n            \"imageWidth\": 150\n          }\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing LinearGradient in React Native with Expo\nDESCRIPTION: This example demonstrates how to use LinearGradient to create both a background gradient and a styled button with gradient background. It includes component implementation and associated styles for a complete UI example.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/linear-gradient.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StyleSheet, Text, View } from 'react-native';\nimport { LinearGradient } from 'expo-linear-gradient';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <LinearGradient\n        // Background Linear Gradient\n        colors={['rgba(0,0,0,0.8)', 'transparent']}\n        style={styles.background}\n      />\n      <LinearGradient\n        // Button Linear Gradient\n        colors={['#4c669f', '#3b5998', '#192f6a']}\n        style={styles.button}>\n        <Text style={styles.text}>Sign in with Facebook</Text>\n      </LinearGradient>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: 'orange',\n  },\n  background: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 0,\n    height: 300,\n  },\n  button: {\n    padding: 15,\n    alignItems: 'center',\n    borderRadius: 5,\n  },\n  text: {\n    backgroundColor: 'transparent',\n    fontSize: 15,\n    color: '#fff',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing expo-asset in bare React Native projects\nDESCRIPTION: Command to install the expo-asset package in a bare React Native project using npx expo install. This assumes you have already installed and configured the base expo package in your project.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-asset/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-asset\n```\n\n----------------------------------------\n\nTITLE: Configuring Minimal Localized App Store Info in JSON (English U.S.)\nDESCRIPTION: This snippet demonstrates the minimal required localized information for an app's presence on the App Store, including the app title and privacy policy URL.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/metadata/schema.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"configVersion\": 0,\n  \"apple\": {\n    \"info\": {\n      \"en-US\": {\n        \"title\": \"Awesome app\",\n        \"privacyPolicyUrl\": \"https://example.com/en/privacy\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Expo Canary Pre-release Version (shell)\nDESCRIPTION: This shell command installs the latest canary (alpha) pre-release version of the 'expo' package and then runs 'npx expo install --fix' to resolve dependencies. Canary releases are snapshots from the main branch and may contain breaking changes or instability. Intended for developers who wish to test new features; the command requires npm and npx, and outputs updated dependencies. Usage may require silencing validation warnings due to possible incompatibilities.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/index.mdx#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# Install the alpha version of expo and its related packages\n$ npm install expo@canary && npx expo install --fix\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-sensors Plugin in JSON\nDESCRIPTION: This JSON snippet demonstrates how to configure the expo-sensors plugin in an app configuration file. It sets a custom permission message for accessing motion sensors.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/sensors.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-sensors\",\n        {\n          \"motionPermission\": \"Allow $(PRODUCT_NAME) to access your device motion\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Default eas.json Configuration File for EAS Build\nDESCRIPTION: This snippet shows the default eas.json configuration created by the EAS CLI. It defines three build profiles: 'development' (with development client enabled and internal distribution), 'preview' (with internal distribution), and 'production' (with default settings).\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/build-reference/build-configuration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"development\": {\n      \"developmentClient\": true,\n      \"distribution\": \"internal\"\n    },\n    \"preview\": {\n      \"distribution\": \"internal\"\n    },\n    \"production\": {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Microphone Permission\nDESCRIPTION: XML code for adding the NSMicrophoneUsageDescription key to the iOS Info.plist file. This permission is required for microphone access when using audio recording features in your Expo app.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/av.mdx#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<key>NSMicrophoneUsageDescription</key>\n<string>Allow $(PRODUCT_NAME) to access your microphone</string>\n```\n\n----------------------------------------\n\nTITLE: Custom Babel Configuration for Expo (JavaScript)\nDESCRIPTION: This snippet demonstrates how to create a custom Babel configuration for Expo projects. It uses the caller API to detect platform, engine, environment, and development status, allowing for platform-specific transformations.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/config/metro.mdx#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = function (api) {\n  // Get the platform that Expo CLI is transforming for.\n  const platform = api.caller(caller => (caller ? caller.platform : 'ios'));\n\n  // Detect if the bundling operation is for Hermes engine or not, e.g. `'hermes'` | `undefined`.\n  const engine = api.caller(caller => (caller ? caller.engine : null));\n\n  // Is bundling for a server environment, e.g. API Routes.\n  const isServer = api.caller(caller => (caller ? caller.isServer : false));\n\n  // Is bundling for development or production.\n  const isDev = api.caller(caller =>\n    caller\n      ? caller.isDev\n      : process.env.BABEL_ENV === 'development' || process.env.NODE_ENV === 'development'\n  );\n\n  // Ensure the config is not cached otherwise the platform will not be updated.\n  api.cache(false);\n  // You can alternatively provide a more robust CONFIG cache invalidation:\n  // api.cache.invalidate(() => platform);\n\n  return {\n    presets: ['babel-preset-expo'],\n    plugins: [\n      // Add a plugin based on the platform...\n      platform === 'web' && 'my-plugin',\n\n      // Ensure you filter out falsy values.\n    ].filter(Boolean),\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Installing expo-application using Expo CLI (Shell)\nDESCRIPTION: This command installs the expo-application package into a React Native project using the Expo CLI's install command via npx. It is specifically recommended for bare React Native projects after ensuring the base 'expo' package is installed and configured. This command handles the installation and linking of the package's native dependencies.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-application/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx expo install expo-application\n```\n\n----------------------------------------\n\nTITLE: Inspecting EAS Update Configuration in iOS Expo.plist\nDESCRIPTION: This XML snippet demonstrates the expected configuration for EAS Update URL and runtime version in the Expo.plist file for iOS projects after running 'npx expo prebuild'.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/debug.mdx#2025-04-22_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<key>EXUpdatesRuntimeVersion</key>\n<string>your-runtime-version-here</string>\n<key>EXUpdatesURL</key>\n<string>https://u.expo.dev/your-project-id-here</string>\n```\n\n----------------------------------------\n\nTITLE: Importing Safe Area Context Components\nDESCRIPTION: Basic imports of the main components and hooks from react-native-safe-area-context library.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/safe-area-context.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  SafeAreaView,\n  SafeAreaProvider,\n  SafeAreaInsetsContext,\n  useSafeAreaInsets,\n} from 'react-native-safe-area-context';\n```\n\n----------------------------------------\n\nTITLE: Setting FaceID Permission in iOS Info.plist\nDESCRIPTION: XML configuration for adding NSFaceIDUsageDescription to the iOS Info.plist file when using manual native projects.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/local-authentication.mdx#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<key>NSFaceIDUsageDescription</key>\n<string>Allow $(PRODUCT_NAME) to use FaceID</string>\n```\n\n----------------------------------------\n\nTITLE: Configuring Primary and Secondary App Store Categories in JSON\nDESCRIPTION: Example configuration showing how to set primary (FINANCE) and secondary (NEWS) categories for an iOS app in store.config.json.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/metadata/schema.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"configVersion\": 0,\n  \"apple\": {\n    \"categories\": [\"FINANCE\", \"NEWS\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel Transforms in Expo with JavaScript\nDESCRIPTION: Provides a babel.config.js for Expo projects enabling fine-grained control over transformation based on platform, engine, environment, and server context. Uses the Babel API's caller to detect build environment and disables config caching, ensuring transforms are dynamically based on requested platform and engine. The preset 'babel-preset-expo' is always included, with an optional custom plugin added conditionally for 'web'. Inputs include the Babel API and build context. Outputs a Babel config object with presets and platform-specific plugins. Requires installing 'babel-preset-expo' and exposing platform and environment to Babel via the caller. This config is not cached to avoid stale platform settings.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/config/metro.mdx#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = function (api) {\n  // Get the platform that Expo CLI is transforming for.\n  const platform = api.caller(caller => (caller ? caller.platform : 'ios'));\n\n  // Detect if the bundling operation is for Hermes engine or not, e.g. `'hermes'` | `undefined`.\n  const engine = api.caller(caller => (caller ? caller.engine : null));\n\n  // Is bundling for a server environment, e.g. API Routes.\n  const isServer = api.caller(caller => (caller ? caller.isServer : false));\n\n  // Is bundling for development or production.\n  const isDev = api.caller(caller =>\n    caller\n      ? caller.isDev\n      : process.env.BABEL_ENV === 'development' || process.env.NODE_ENV === 'development'\n  );\n\n  // Ensure the config is not cached otherwise the platform will not be updated.\n  api.cache(false);\n  // You can alternatively provide a more robust CONFIG cache invalidation:\n  // api.cache.invalidate(() => platform);\n\n  return {\n    presets: ['babel-preset-expo'],\n    plugins: [\n      // Add a plugin based on the platform...\n      platform === 'web' && 'my-plugin',\n\n      // Ensure you filter out falsy values.\n    ].filter(Boolean),\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Using EXPO_PUBLIC_ Environment Variable in React Native Component\nDESCRIPTION: This snippet demonstrates how to use an EXPO_PUBLIC_ prefixed environment variable in a React Native component. It uses the EXPO_PUBLIC_API_URL variable to set the API URL for a fetch request.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/environment-variables.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from 'react-native';\n\nfunction Post() {\n  const apiUrl = process.env.EXPO_PUBLIC_API_URL;\n\n  async function onPress() {\n    await fetch(apiUrl, { ... })\n  }\n\n  return <Button onPress={onPress} title=\"Post\" />;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic WebView Implementation with External URL in React Native\nDESCRIPTION: A basic implementation of WebView that loads the Expo website. This example uses StyleSheet for styling and Constants to handle the status bar height.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/webview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { WebView } from 'react-native-webview';\nimport Constants from 'expo-constants';\nimport { StyleSheet } from 'react-native';\n\nexport default function App() {\n  return (\n    <WebView\n      style={styles.container}\n      source={{ uri: 'https://expo.dev' }}\n    />\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: Constants.statusBarHeight,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Viewing introspected Expo config for entitlements\nDESCRIPTION: Command to display the introspected app configuration which includes iOS entitlements. This helps developers verify their entitlements configuration before building.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/build-reference/ios-capabilities.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo config --type introspect\n```\n\n----------------------------------------\n\nTITLE: Configuring Update Channels in iOS Native Project\nDESCRIPTION: XML snippet showing how to add update channel configuration to the Expo.plist file for iOS projects not using Continuous Native Generation.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/getting-started.mdx#2025-04-22_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<key>EXUpdatesRequestHeaders</key>\n<dict>\n  <key>expo-channel-name</key>\n  <string>your-channel-name</string>\n</dict>\n```\n\n----------------------------------------\n\nTITLE: Fetching and Displaying Media Library Albums and Assets\nDESCRIPTION: React Native example showing how to request permissions, fetch albums from the device's media library, and display them with their assets using expo-media-library.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/media-library.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { Button, Text, SafeAreaView, ScrollView, StyleSheet, Image, View, Platform } from 'react-native';\nimport * as MediaLibrary from 'expo-media-library';\n\nexport default function App() {\n  const [albums, setAlbums] = useState(null);\n  const [permissionResponse, requestPermission] = MediaLibrary.usePermissions();\n\n  async function getAlbums() {\n    if (permissionResponse.status !== 'granted') {\n      await requestPermission();\n    }\n    const fetchedAlbums = await MediaLibrary.getAlbumsAsync({\n      includeSmartAlbums: true,\n    });\n    setAlbums(fetchedAlbums);\n  }\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <Button onPress={getAlbums} title=\"Get albums\" />\n      <ScrollView>\n        {albums && albums.map((album) => <AlbumEntry album={album} />)}\n      </ScrollView>\n    </SafeAreaView>\n  );\n}\n\nfunction AlbumEntry({ album }) {\n  const [assets, setAssets] = useState([]);\n\n  useEffect(() => {\n    async function getAlbumAssets() {\n      const albumAssets = await MediaLibrary.getAssetsAsync({ album });\n      setAssets(albumAssets.assets);\n    }\n    getAlbumAssets();\n  }, [album]);\n\n  return (\n    <View key={album.id} style={styles.albumContainer}>\n      <Text>\n        {album.title} - {album.assetCount ?? 'no'} assets\n      </Text>\n      <View style={styles.albumAssetsContainer}>\n        {assets && assets.map((asset) => (\n          <Image source={{ uri: asset.uri }} width={50} height={50} />\n        ))}\n      </View>\n    </View>\n  );\n}\n\n/* @hide const styles = StyleSheet.create({ ... }); */\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    gap: 8,\n    justifyContent: 'center',\n    ...Platform.select({\n      android: {\n        paddingTop: 40,\n      },\n    }),\n  },\n  albumContainer: {\n    paddingHorizontal: 20,\n    marginBottom: 12,\n    gap: 4,\n  },\n  albumAssetsContainer: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n  },\n});\n/* @end */\n```\n\n----------------------------------------\n\nTITLE: Importing the Network Module in JavaScript\nDESCRIPTION: Basic import statement to use the expo-network package in your JavaScript code. This allows access to all the network-related APIs provided by the module.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/network.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Network from 'expo-network';\n```\n\n----------------------------------------\n\nTITLE: Importing Swift Headers for expo-updates in Objective-C\nDESCRIPTION: Code snippet showing the required imports to use EXUpdatesAppController from AppDelegate.mm in an Expo application. These imports allow Objective-C code to access Swift headers for the expo-updates module.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/updates.mdx#2025-04-22_snippet_1\n\nLANGUAGE: objc\nCODE:\n```\n#import \"ExpoModulesCore-Swift.h\"\n#import \"EXUpdatesInterface-Swift.h\"\n#import \"EXUpdates-Swift.h\"\n```\n\n----------------------------------------\n\nTITLE: Running CocoaPods installation after npm package install (Shell)\nDESCRIPTION: Runs pod-install using npx to link native dependencies after the expo-apple-authentication npm package is installed, specifically for bare React Native projects. This ensures native modules are properly integrated into the iOS project. Requires CocoaPods and npx to be installed on the system. Must be run from the project directory after installing expo-apple-authentication.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-apple-authentication/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx pod-install\n```\n\n----------------------------------------\n\nTITLE: Importing the Sharing Module in JavaScript/React Native\nDESCRIPTION: Demonstrates how to import the Sharing module from the expo-sharing package for use in a React Native or Expo application.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/sharing.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Sharing from 'expo-sharing';\n```\n\n----------------------------------------\n\nTITLE: Migrating from Route Prop to useLocalSearchParams Hook\nDESCRIPTION: Diff showing how to replace the route prop with the useLocalSearchParams hook in Expo Router.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/migrate/from-react-navigation.mdx#2025-04-22_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n+ import { useLocalSearchParams } from 'expo-router';\n\nexport default function Page({\n-  route\n}) {\n-  const user = route?.params?.user;\n\n+  const { user } = useLocalSearchParams();\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Page Margins in Expo Print\nDESCRIPTION: Examples demonstrating how to set page margins for printing on iOS and Android platforms using expo-print.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/print.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst { uri } = await Print.printToFileAsync({\n  html: 'This page is printed with margins',\n  margins: {\n    left: 20,\n    top: 50,\n    right: 20,\n    bottom: 100,\n  },\n});\n```\n\nLANGUAGE: html\nCODE:\n```\n<style>\n  @page {\n    margin: 20px;\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Configuring SplashScreen Animation Options\nDESCRIPTION: This snippet demonstrates how to configure the animation options for the SplashScreen using the setOptions method. It sets the duration of the animation and enables the fade effect.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/splash-screen.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nSplashScreen.setOptions({\n  duration: 1000,\n  fade: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Running Release Mode Builds for Android and iOS with Expo CLI\nDESCRIPTION: Commands to build and run Expo applications in release mode locally for both Android and iOS platforms. These commands help verify if the app builds properly before deploying to EAS Build.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/build-reference/troubleshooting.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Locally compile and run the Android app in release mode\n$ npx expo run:android --variant release\n\n# Locally compile and run the iOS app in release mode\n$ npx expo run:ios --configuration Release\n```\n\n----------------------------------------\n\nTITLE: Implementing Shared Container for SQLite on iOS\nDESCRIPTION: Shows how to implement shared container access for SQLite database sharing between iOS apps and extensions.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/sqlite.mdx#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SQLiteProvider, defaultDatabaseDirectory } from 'expo-sqlite';\nimport { Paths } from 'expo-file-system/next';\nimport { useMemo } from 'react';\nimport { Platform, View } from 'react-native';\n\nexport default function App() {\n  const dbDirectory = useMemo(() => {\n    if (Platform.OS === 'ios') {\n      return Object.values(Paths.appleSharedContainers)?.[0]?.uri;\n    }\n    return defaultDatabaseDirectory;\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <SQLiteProvider databaseName=\"test.db\" directory={dbDirectory}>\n        <Header />\n        <Content />\n      </SQLiteProvider>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Basic Drawer Layout in Expo Router\nDESCRIPTION: Basic implementation of a drawer layout in Expo Router, wrapping the Drawer component in a GestureHandlerRootView to enable gestures. This provides the foundation for drawer-based navigation.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/advanced/drawer.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { GestureHandlerRootView } from 'react-native-gesture-handler';\nimport { Drawer } from 'expo-router/drawer';\n\nexport default function Layout() {\n  return (\n    <GestureHandlerRootView style={{ flex: 1 }}>\n      <Drawer />\n    </GestureHandlerRootView>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-barcode-scanner with Config Plugin in app.json\nDESCRIPTION: Configuration for expo-barcode-scanner using the built-in config plugin in app.json. This example shows how to set custom camera permission messages that will be applied during the build process.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/bar-code-scanner.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-barcode-scanner\",\n        {\n          \"cameraPermission\": \"Allow $(PRODUCT_NAME) to access camera.\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Android Contacts Permissions in AndroidManifest.xml (React Native, XML)\nDESCRIPTION: Shows how to add the required Android permissions for reading and writing contacts in the AndroidManifest.xml file. These permissions must be set when not using Expo's managed workflow (CNG). Inputs are standard XML manifest entries. Required for expo-contacts to function on Android.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/contacts.mdx#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\\\"android.permission.READ_CONTACTS\\\" />\\n<uses-permission android:name=\\\"android.permission.WRITE_CONTACTS\\\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering BoxLink for Expo Application Services\nDESCRIPTION: This JSX code renders a BoxLink component for Expo Application Services (EAS), providing a title, description, link, and associated icon.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/core-concepts.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<BoxLink\n  title=\"Expo Application Services\"\n  description=\"The easiest way to build, deploy, and update native apps.\"\n  href=\"/eas\"\n  Icon={PlanEnterpriseIcon}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLite Plugin in Expo Config\nDESCRIPTION: Configuration options for expo-sqlite using config plugins in app.json, including FTS support and SQLCipher implementation settings\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/sqlite.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-sqlite\",\n        {\n          \"enableFTS\": true,\n          \"useSQLCipher\": true,\n          \"android\": {\n            \"enableFTS\": false,\n            \"useSQLCipher\": false\n          },\n          \"ios\": {\n            \"customBuildFlags\": [\"-DSQLITE_ENABLE_DBSTAT_VTAB=1 -DSQLITE_ENABLE_SNAPSHOT=1\"]\n          }\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Favicon in app.json for Expo PWA\nDESCRIPTION: Demonstrates how to specify the favicon for a Progressive Web App in the app.json configuration file. This sets the web.favicon field to point to the favicon image file.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/progressive-web-apps.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"web\": {\n    \"favicon\": \"./assets/favicon.png\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Asset Extensions to Metro Config\nDESCRIPTION: Customizing Metro configuration to add support for additional asset file extensions, such as .db files for SQLite databases.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/customizing-metro.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { getDefaultConfig } = require('expo/metro-config');\n\nconst config = getDefaultConfig(__dirname);\n\nconfig.resolver.assetExts.push(\n  // Adds support for `.db` files for SQLite databases\n  'db'\n);\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Exporting JavaScript and assets bundle\nDESCRIPTION: Command for exporting the JavaScript and assets for an Expo app using Metro bundler. This creates production-ready bundles that can be deployed independently of the native runtime.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/more/expo-cli.mdx#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo export\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Route Name in Expo Router\nDESCRIPTION: Demonstrates how to set the initialRouteName in a layout file to ensure proper back navigation behavior, especially for deep links.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/basics/navigation.mdx#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nexport const unstable_settings = {\n  // Ensure any route can link back to `/`\n  initialRouteName: 'index',\n};\n```\n\n----------------------------------------\n\nTITLE: Clearing Caches for React Native CLI with Yarn\nDESCRIPTION: This code snippet shows how to clear caches when using React Native CLI with Yarn. It includes removing node_modules, cleaning Yarn cache, reinstalling dependencies, resetting Watchman, clearing Metro and Haste map caches, and starting the React Native project with a reset cache.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/troubleshooting/clear-cache-macos-linux.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# With Yarn workspaces, you may need to delete node_modules in each workspace\n$ rm -rf node_modules\n\n$ yarn cache clean\n\n$ yarn\n\n$ watchman watch-del-all\n\n$ rm -fr $TMPDIR/haste-map-*\n\n$ rm -rf $TMPDIR/metro-cache\n\n$ yarn start -- --reset-cache\n```\n\n----------------------------------------\n\nTITLE: Configuring App Config Sync Check for Expo Doctor in package.json\nDESCRIPTION: This JSON snippet demonstrates how to configure the `expo.doctor.appConfigFieldsNotSyncedCheck` property in `package.json`. Setting `enabled` to `false` disables the `npx expo-doctor` check that warns about potential synchronization issues between app config files and native project files (android/ios) when using prebuild, especially if native directories are not ignored.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/config/package-json.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"doctor\": {\n      \"appConfigFieldsNotSyncedCheck\": {\n        \"enabled\": false\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Job Outputs Configuration YAML\nDESCRIPTION: Illustrates how to define and access outputs from a job. Outputs are defined in the `outputs` section of the job and can be set using the `set-output` function within a job step. Downstream jobs can access these outputs using `needs.<job_id>.outputs.<output_name>` or `after.<job_id>.outputs.<output_name>`.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/workflows/syntax.mdx#_snippet_36\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  job_1:\n    # @info #\n    outputs:\n      output_1: ${{ steps.step_1.outputs.test }}\n    # @end #\n    steps:\n      - id: step_1\n        # @info #\n        run: set-output test \"hello world\"\n        # @end #\n  job_2:\n    needs: [job_1]\n    steps:\n      # @info #\n      - id: step_2\n        run: echo ${{ needs.job_1.outputs.output_1 }}\n      # @end #\n```\n\n----------------------------------------\n\nTITLE: Implementing Ref Handling in DOM Components\nDESCRIPTION: Shows how to implement and use refs between native and DOM components using useDOMImperativeHandle.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/dom-components.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useRef } from 'react';\nimport { Button, View } from 'react-native';\n\nimport MyComponent, { type MyRef } from './my-component';\n\nexport default function App() {\n  const ref = useRef<MyRef>(null);\n\n  return (\n    <View style={{ flex: 1 }}>\n      <MyComponent ref={ref} />\n      <Button\n        title=\"focus\"\n        onPress={() => {\n          ref.current?.focus();\n        }}\n      />\n    </View>\n  );\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\n'use dom';\n\nimport { useDOMImperativeHandle, type DOMImperativeFactory } from 'expo/dom';\nimport { forwardRef, useRef } from 'react';\n\nexport interface MyRef extends DOMImperativeFactory {\n  focus: () => void;\n}\n\nexport default forwardRef<MyRef, object>(function MyComponent(props, ref) {\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  useDOMImperativeHandle(\n    ref,\n    () => ({\n      focus: () => {\n        inputRef.current?.focus();\n      },\n    }),\n    []\n  );\n\n  return <input ref={inputRef} />;\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Expo Speech Module\nDESCRIPTION: Shows how to import the expo-speech module for use in a React Native application.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/speech.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as Speech from 'expo-speech';\n```\n\n----------------------------------------\n\nTITLE: Configuring Yarn 2+ with node-modules linker\nDESCRIPTION: Yarn 2+ configuration for Expo projects. Sets nodeLinker to node-modules to ensure compatibility with React Native, as Yarn's default Plug'n'Play feature doesn't work with React Native.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/more/create-expo.mdx#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nnodeLinker: node-modules\n```\n\n----------------------------------------\n\nTITLE: Importing Battery Module\nDESCRIPTION: This snippet shows how to import the full Battery module from the expo-battery library in JavaScript. It is a prerequisite step for accessing various battery-related functionalities provided by the library.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/battery.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as Battery from 'expo-battery';\n```\n\n----------------------------------------\n\nTITLE: Configuring background audio in app.json for iOS\nDESCRIPTION: This JSON snippet shows how to configure the app.json file to enable background audio playback on iOS standalone apps.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/audio.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"ios\": {\n      \"infoPlist\": {\n        \"UIBackgroundModes\": [\n          \"audio\"\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Hello World Workflow in YAML\nDESCRIPTION: This snippet demonstrates a basic EAS Workflow that prints 'Hello, World' when a push is made to any branch. It includes the workflow name, trigger event, and a simple job with one step.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/workflows/get-started.mdx#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Hello World\n\non:\n  push:\n    branches: ['*']\n\njobs:\n  Hello World:\n    steps:\n      - run: echo \"Hello, World\"\n```\n\n----------------------------------------\n\nTITLE: Customizing App Entry Point in package.json - JSON\nDESCRIPTION: This code sample sets a custom entry point for an Expo project by modifying the 'main' property in package.json. This is required when the developer wants to use a file other than the default (App.js or app/_layout.tsx) as the root of the application. No additional dependencies are needed, but the specified entry file must exist. The input is the JSON config, and the output behavior is the project entry point changes to the specified file.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/expo.mdx#2025-04-22_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"main\": \"src/main.jsx\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Media Library Permissions in app.json\nDESCRIPTION: Configuration for the expo-media-library plugin in app.json to set photo permissions messages and media location access.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/media-library.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-media-library\",\n        {\n          \"photosPermission\": \"Allow $(PRODUCT_NAME) to access your photos.\",\n          \"savePhotosPermission\": \"Allow $(PRODUCT_NAME) to save photos.\",\n          \"isAccessMediaLocationEnabled\": true\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Notification Sounds\nDESCRIPTION: Adds custom notification sounds by configuring the `expo-notifications` plugin in the `app.json` file. Specifies local sound file paths under the `sounds` key which are used in the app for notification sounds. The configuration is required for both NotificationContentInput and NotificationChannelInput.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/notifications.mdx#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-notifications\",\n        {\n          \"sounds\": [\"local/path/to/mySoundFile.wav\"]\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Icons and Components in JSX\nDESCRIPTION: This code snippet imports various icons and components from Expo styleguide and custom components for use in the document. It includes logos, icons, and custom UI components.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/core-concepts.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ExpoGoLogo, DocsLogo } from '@expo/styleguide';\nimport { PlanEnterpriseIcon } from '@expo/styleguide-icons/custom/PlanEnterpriseIcon';\nimport { BookOpen02Icon } from '@expo/styleguide-icons/outline/BookOpen02Icon';\nimport { CpuChip01Icon } from '@expo/styleguide-icons/outline/CpuChip01Icon';\n\nimport { BoxLink } from '~/ui/components/BoxLink';\nimport { YesIcon, NoIcon } from '~/ui/components/DocIcons';\n```\n\n----------------------------------------\n\nTITLE: Rendering Vector Icons in React Native with @expo/vector-icons\nDESCRIPTION: This snippet demonstrates how to use the Ionicons component from @expo/vector-icons to render a checkmark icon in a React Native application. It includes styling for centering the icon.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/icons.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { View, StyleSheet } from 'react-native';\nimport Ionicons from '@expo/vector-icons/Ionicons';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Ionicons name=\"checkmark-circle\" size={32} color=\"green\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Android Permissions in AndroidManifest.xml\nDESCRIPTION: Example of removing specific permissions from AndroidManifest.xml using the tools:node attribute\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/permissions.mdx#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<manifest xmlns:tools=\"http://schemas.android.com/tools\">\n  <uses-permission tools:node=\"remove\" android:name=\"android.permission.ACCESS_FINE_LOCATION\" />\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Updates URL in app.json\nDESCRIPTION: JSON configuration for setting up a custom expo-updates server URL instead of the default EAS Update URL.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/bare/installing-updates.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"MyApp\",\n  \"displayName\": \"MyApp\",\n  \"expo\": {\n    \"name\": \"MyApp\",\n     ...\n    \"updates\": {\n      \"url\": \"http://localhost:3000/api/manifest\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing React Query Dev Tools in React Native App\nDESCRIPTION: Implementation of the React Query dev tools plugin in a React Native app. Shows how to connect the Query Client instance to the plugin in the app's root component.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/debugging/devtools-plugins.mdx#2025-04-22_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { useReactQueryDevTools } from '@dev-plugins/react-query';\n\nconst queryClient = new QueryClient({});\n\nexport default function App() {\n  useReactQueryDevTools(queryClient);\n\n  return <QueryClientProvider client={queryClient}>{/* ... */}</QueryClientProvider>;\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Emoji Sticker Component with Gesture Support\nDESCRIPTION: Final implementation of the EmojiSticker component with double tap gesture support and animated scaling.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/gestures.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { View } from 'react-native';\nimport { Gesture, GestureDetector } from 'react-native-gesture-handler';\nimport Animated, { useAnimatedStyle, useSharedValue, withSpring } from 'react-native-reanimated';\nimport { type ImageSource } from 'expo-image';\n\ntype Props = {\n  imageSize: number;\n  stickerSource: ImageSource;\n};\n\nexport default function EmojiSticker({ imageSize, stickerSource }: Props) {\n  const scaleImage = useSharedValue(imageSize);\n\n  const doubleTap = Gesture.Tap()\n    .numberOfTaps(2)\n    .onStart(() => {\n      if (scaleImage.value !== imageSize * 2) {\n        scaleImage.value = scaleImage.value * 2;\n      } else {\n        scaleImage.value = Math.round(scaleImage.value / 2);\n      }\n    });\n\n  const imageStyle = useAnimatedStyle(() => {\n    return {\n      width: withSpring(scaleImage.value),\n      height: withSpring(scaleImage.value),\n    };\n  });\n\n  return (\n    <View style={{ top: -350 }}>\n      <GestureDetector gesture={doubleTap}>\n        <Animated.Image\n          source={stickerSource}\n          resizeMode=\"contain\"\n          style={[imageStyle, { width: imageSize, height: imageSize }]}\n        />\n      </GestureDetector>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring EAS for Yarn 2+ with pre-install hook\nDESCRIPTION: Package.json configuration for using Yarn 2+ (Modern) with EAS Build. Adds an eas-build-pre-install hook that enables corepack and sets the Yarn version to 4.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/more/create-expo.mdx#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"eas-build-pre-install\": \"corepack enable && yarn set version 4\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing expo-document-picker in a Bare React Native Project\nDESCRIPTION: Command to install expo-document-picker package using npx expo CLI. This is required for bare React Native projects after ensuring the expo package is installed and configured.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-document-picker/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-document-picker\n```\n\n----------------------------------------\n\nTITLE: CSS Safe Area Insets Example (Before Migration)\nDESCRIPTION: Shows how safe area insets were traditionally handled in web-only applications using CSS environment variables.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/safe-area-context.mdx#2025-04-22_snippet_6\n\nLANGUAGE: css\nCODE:\n```\ndiv {\n  padding-top: env(safe-area-inset-top);\n  padding-left: env(safe-area-inset-left);\n  padding-bottom: env(safe-area-inset-bottom);\n  padding-right: env(safe-area-inset-right);\n}\n```\n\n----------------------------------------\n\nTITLE: Importing expo-font in JavaScript\nDESCRIPTION: Shows how to import the expo-font library in a JavaScript file for use in a React Native project.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/font.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport * as Font from 'expo-font';\n```\n\n----------------------------------------\n\nTITLE: Executing PRAGMA Queries in SQLite with JavaScript\nDESCRIPTION: This snippet shows how to execute PRAGMA statements using SQLite in an Expo project to configure database settings such as journal mode and foreign key support. SQLite must be opened using 'openDatabaseAsync', and 'execAsync' is used to run PRAGMA commands. No complex parameters are required beyond the PRAGMA syntax itself. The snippet highlights default practices for performance enhancement.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/sqlite.mdx#2025-04-22_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst db = await SQLite.openDatabaseAsync('databaseName');\nawait db.execAsync('PRAGMA journal_mode = WAL');\nawait db.execAsync('PRAGMA foreign_keys = ON');\n```\n\n----------------------------------------\n\nTITLE: Send Slack Message via Webhook URL (YAML)\nDESCRIPTION: This snippet demonstrates how to use the `eas/send_slack_message` build step to send a message to a Slack channel via a webhook URL. The `message` property specifies the text of the message, and the `slack_hook_url` property specifies the webhook URL. Either 'message' or 'payload' must be specified, but not both.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/workflows/syntax.mdx#_snippet_47\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  my_job:\n    steps:\n      # @info #\n      - uses: eas/send_slack_message\n        # @end #\n        with:\n          message: 'This is a message to plain input URL'\n          slack_hook_url: 'https://hooks.slack.com/services/[rest_of_hook_url]'\n```\n\n----------------------------------------\n\nTITLE: Loading Remote Images with expo-image\nDESCRIPTION: Example of loading a remote image asset using a URL in expo-image component\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/user-interface/assets.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Image } from 'expo-image';\n\nfunction App() {\n  return (\n    <Image source={{ uri: 'https://example.com/logo.png' }} style={{ width: 50, height: 50 }} />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Android Config Plugin for URL Scheme Intents\nDESCRIPTION: This config plugin enables linking to email and phone apps on Android 11 and above by defining the necessary intents in the AndroidManifest.xml file.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/linking/into-other-apps.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { withAndroidManifest, ConfigPlugin } from 'expo/config-plugins';\n\nconst withAndroidQueries: ConfigPlugin = config => {\n  return withAndroidManifest(config, config => {\n    config.modResults.manifest.queries = [\n      {\n        intent: [\n          {\n            action: [{ $: { 'android:name': 'android.intent.action.SENDTO' } }],\n            data: [{ $: { 'android:scheme': 'mailto' } }],\n          },\n          {\n            action: [{ $: { 'android:name': 'android.intent.action.DIAL' } }],\n          },\n        ],\n      },\n    ];\n\n    return config;\n  });\n};\n\nmodule.exports = withAndroidQueries;\n```\n\n----------------------------------------\n\nTITLE: Installing Expo SDK Packages with npx\nDESCRIPTION: Demonstrates how to install multiple Expo SDK packages using the npx expo install command.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo install expo-camera expo-contacts expo-sensors\n```\n\n----------------------------------------\n\nTITLE: Importing expo-mail-composer Module in JavaScript\nDESCRIPTION: This snippet demonstrates how to import the MailComposer API from the expo-mail-composer package using ES module syntax. It is required to import these functions before calling any MailComposer methods in your Expo project. The import loads all MailComposer functionality for composing and sending emails within the application context.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/mail-composer.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as MailComposer from 'expo-mail-composer';\n```\n\n----------------------------------------\n\nTITLE: Step Uses Configuration YAML\nDESCRIPTION: Illustrates the use of built-in EAS functions within workflow steps. The `uses` keyword specifies the function to use, prefixed with `eas/`.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/workflows/syntax.mdx#_snippet_43\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  my_job:\n    steps:\n      # @info #\n      - uses: eas/checkout\n      - uses: eas/install_node_modules\n      - uses: eas/prebuild\n      - name: List files\n        run: ls -la\n      # @end #\n```\n\n----------------------------------------\n\nTITLE: Color Scheme Implementation in React Component\nDESCRIPTION: Example of using useColorScheme hook in a React component to implement theme-dependent rendering.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/user-interface/color-themes.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfunction MyComponent() {\n  let colorScheme = useColorScheme();\n\n  if (colorScheme === 'dark') {\n    // render some dark thing\n  } else {\n    // render some light thing\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom URL Scheme for iOS in Expo\nDESCRIPTION: This JSON configuration specifies a custom URL scheme (uber) that the app is allowed to query on iOS using Linking.canOpenURL.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/linking/into-other-apps.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"ios\": {\n      \"infoPlist\": {\n        \"LSApplicationQueriesSchemes\": [\"uber\"]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Expo Module in Swift\nDESCRIPTION: This snippet demonstrates how to create a basic Expo module in Swift. It defines a 'MyModule' class that implements the 'Module' protocol and includes a 'hello' function that takes a name parameter and returns a greeting.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/module-api.mdx#2025-04-22_snippet_34\n\nLANGUAGE: swift\nCODE:\n```\npublic class MyModule: Module {\n  public func definition() -> ModuleDefinition {\n    Name(\"MyFirstExpoModule\")\n\n    Function(\"hello\") { (name: String) in\n      return \"Hello \\(name)!\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Node Version Configuration\nDESCRIPTION: Configuration showing how to specify Node.js version for build profiles.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/build/eas-json.mdx#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"production\": {\n      \"node\": \"18.18.0\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Workflow Job Outputs Usage YAML\nDESCRIPTION: Demonstrates how to use outputs from an upstream job ('setup') in a downstream job ('build_ios'). The 'needs' keyword establishes the dependency, and the 'needs.setup.outputs.date' expression accesses the 'date' output from the 'setup' job. This snippet illustrates how to pass data between jobs in an EAS Workflow.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/workflows/syntax.mdx#_snippet_17\n\nLANGUAGE: YAML\nCODE:\n```\njobs:\n  setup:\n    outputs:\n      date: ${{ steps.current_date.outputs.date }}\n    steps:\n      - id: current_date\n        run: |\n          DATE=$(date +\"%Y.%-m.%-d\")\n          set-output date \"$DATE\"\n\n  build_ios:\n    needs: [setup]\n    type: build\n    env:\n      # You might use process.env.VERSION_SUFFIX to customize\n      # app version in your dynamic app config.\n      VERSION_SUFFIX: ${{ needs.setup.outputs.date }}\n    params:\n      platform: ios\n      profile: development\n```\n\n----------------------------------------\n\nTITLE: Creating a Swift native module for iOS\nDESCRIPTION: Establishes a basic structure for a native Expo module in Swift for iOS integration.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/existing-library.mdx#2025-04-22_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nimport ExpoModulesCore\n\npublic class MyModule: Module {\n  public func definition() -> ModuleDefinition {\n    // Definition components go here\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-contacts in app.json\nDESCRIPTION: This JSON snippet shows how to configure the `expo-contacts` plugin in app.json, which is necessary for setting up the necessary permissions to access contacts. It includes specifying a custom permission message for iOS.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/contacts.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-contacts\",\n        {\n          \"contactsPermission\": \"Allow $(PRODUCT_NAME) to access your contacts.\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking and Fixing Package Versions with Expo CLI\nDESCRIPTION: Commands to validate and correct package versions in an Expo project. The --check flag identifies incorrect versions and --fix automatically updates them.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/more/expo-cli.mdx#2025-04-23_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo install --check\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo install react-native expo-sms --check\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo install --fix\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest in package.json\nDESCRIPTION: Basic Jest configuration for Expo projects including test script and preset configuration.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/unit-testing.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"test\": \"jest --watchAll\"\n  },\n  \"jest\": {\n    \"preset\": \"jest-expo\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Vercel Deployment Configuration\nDESCRIPTION: Configuration file for Vercel deployment settings including build commands, output directory, and URL rewrite rules.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/publishing-websites.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"buildCommand\": \"expo export -p web\",\n  \"outputDirectory\": \"dist\",\n  \"devCommand\": \"expo\",\n  \"cleanUrls\": true,\n  \"framework\": null,\n  \"rewrites\": [\n    {\n      \"source\": \"/:path*\",\n      \"destination\": \"/\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Writing and Reading Text Files with expo-file-system/next in TypeScript\nDESCRIPTION: Creates a new text file in the cache directory, writes a string to it, and then reads the content back. Demonstrates basic file creation, writing, and reading operations using the object-oriented API.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/filesystem-next.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { File, Paths } from 'expo-file-system/next';\n\ntry {\n  const file = new File(Paths.cache, 'example.txt');\n  file.create(); // can throw an error if the file already exists or no permission to create it\n  file.write('Hello, world!');\n  console.log(file.text()); // Hello, world!\n} catch (error) {\n  console.error(error);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Color Theme Support in Expo\nDESCRIPTION: Basic app.json configuration to enable automatic color scheme switching in an Expo application.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/user-interface/color-themes.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"userInterfaceStyle\": \"automatic\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Expo Prebuild for iOS Native Debugging\nDESCRIPTION: Generate native iOS code from an Expo project to enable debugging in Xcode. This command adds an ios directory to your project root that can be used for native debugging.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/debugging/runtime-issues.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo prebuild -p ios\n```\n\n----------------------------------------\n\nTITLE: Installing Expo Modules with NPX\nDESCRIPTION: Command to install Expo modules support in an existing React Native project using npx.\nSOURCE: https://github.com/expo/expo/blob/main/packages/install-expo-modules/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx install-expo-modules\n```\n\n----------------------------------------\n\nTITLE: Installing Expo Maps SDK using npx\nDESCRIPTION: This command installs the expo-maps package using npx expo install. It's the recommended way to add the Expo Maps SDK to your Expo project.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-maps/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx expo install expo-maps\n```\n\n----------------------------------------\n\nTITLE: Creating a fingerprint.config.js with Transitive Dependency\nDESCRIPTION: Example of how to import the Config type when @expo/fingerprint is used through expo as a transitive dependency.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/fingerprint.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n/** @type {import('expo/fingerprint').Config} */\n```\n\n----------------------------------------\n\nTITLE: Implementing a ViewPager Component in React Native\nDESCRIPTION: This code snippet demonstrates how to create a simple three-page carousel in a React Native application using `react-native-pager-view`. The example sets up `PagerView` with three pages, each containing simple text elements. Ensure that the `react-native` and `react-native-pager-view` packages are installed in your project. The `MyPager` component aligns pages within a `View`, and styles are defined using `StyleSheet`.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/view-pager.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { StyleSheet, View, Text } from 'react-native';\nimport PagerView from 'react-native-pager-view';\n\nexport default function MyPager() {\n  return (\n    <View style={styles.container}>\n      <PagerView style={styles.container} initialPage={0}>\n        <View style={styles.page} key=\"1\">\n          <Text>First page</Text>\n          <Text>Swipe ➡️</Text>\n        </View>\n        <View style={styles.page} key=\"2\">\n          <Text>Second page</Text>\n        </View>\n        <View style={styles.page} key=\"3\">\n          <Text>Third page</Text>\n        </View>\n      </PagerView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  page: {\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Differential Caching for Browser and EAS Hosting\nDESCRIPTION: Shows how to implement different caching strategies for browsers and EAS Hosting using Cache-Control and CDN-Cache-Control headers.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/hosting/reference/caching.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function GET(request) {\n  return Response.json({ ... }, {\n    headers: {\n\t    'Cache-Control': 'no-store', // browsers should never store the response\n\t    'CDN-Cache-Control': 'max-age=3600', // EAS Hosting should cache for 3600s\n    },\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Cache Clearing Command for React Native/Expo\nDESCRIPTION: Comprehensive command to clear all caches, reinstall dependencies, and restart the Expo development server\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/troubleshooting/react-native-version-mismatch.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf node_modules && npm cache clean --force && npm install && watchman watch-del-all && rm -rf $TMPDIR/haste-map-* && rm -rf $TMPDIR/metro-cache && npx expo start --clear\n```\n\n----------------------------------------\n\nTITLE: Importing AuthSession Module\nDESCRIPTION: Basic import statement for the AuthSession module to enable browser-based authentication in your React Native app.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/auth-session.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as AuthSession from 'expo-auth-session';\n```\n\n----------------------------------------\n\nTITLE: Using expo-web-browser to Open a URL (React Native, JSX)\nDESCRIPTION: Implements a basic Expo/React Native app utilizing expo-web-browser to open a URL in the system web browser. The app displays a button which, when pressed, opens 'https://expo.dev' and displays the result. It requires expo-web-browser and expo-constants as dependencies and demonstrates useState for result tracking, UI components, and styling. Inputs are user actions; outputs are browser results shown in the app's UI.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/webbrowser.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { Button, Text, View, StyleSheet } from 'react-native';\nimport * as WebBrowser from 'expo-web-browser';\n/* @hide */\nimport Constants from 'expo-constants';\n/* @end */\n\nexport default function App() {\n  const [result, setResult] = useState(null);\n\n  const _handlePressButtonAsync = async () => {\n    let result = await WebBrowser.openBrowserAsync('https://expo.dev');\n    setResult(result);\n  };\n  return (\n    <View style={styles.container}>\n      <Button title=\"Open WebBrowser\" onPress={_handlePressButtonAsync} />\n      <Text>{result && JSON.stringify(result)}</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingTop: Constants.statusBarHeight,\n    backgroundColor: '#ecf0f1',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Manually Configuring iOS Motion Permission in Info.plist (XML)\nDESCRIPTION: Manually sets the required `NSMotionUsageDescription` key in the native iOS project's `Info.plist` file. This is necessary when not using Expo's Continuous Native Generation (CNG) or when managing the native iOS project directly. The string value explains why the app needs access to motion data.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/devicemotion.mdx#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n```xml ios/[app]/Info.plist\n<key>NSMotionUsageDescription</key>\n<string>Allow $(PRODUCT_NAME) to access your device motion</string>\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Dragging Gesture with React Native Reanimated and Gesture Handler\nDESCRIPTION: This code snippet demonstrates how to implement a dragging gesture for a sticker by using shared values to track the position and updating it with a pan gesture. The 'Gesture.Pan().onChange()' is used to dynamically update the 'translateX' and 'translateY' shared values which affect sticker movement along the screen. Dependencies include 'react-native-gesture-handler' and 'react-native-reanimated'. The gesture's effect is applied using the 'useAnimatedStyle' hook to transform the sticker view.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/gestures.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst drag = Gesture.Pan().onChange(event => {\n  translateX.value += event.changeX;\n  translateY.value += event.changeY;\n});\n\nconst containerStyle = useAnimatedStyle(() => {\n  return {\n    transform: [\n      {\n        translateX: translateX.value,\n      },\n      {\n        translateY: translateY.value,\n      },\n    ],\n  };\n});\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Animation with react-native-reanimated in React Native\nDESCRIPTION: A minimal example demonstrating how to use react-native-reanimated to create a simple animation. It shows a box that changes width when a button is pressed.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/user-interface/animation.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport Animated, {\n  useSharedValue,\n  withTiming,\n  useAnimatedStyle,\n  Easing,\n} from 'react-native-reanimated';\nimport { View, Button, StyleSheet } from 'react-native';\n\nexport default function AnimatedStyleUpdateExample() {\n  const randomWidth = useSharedValue(10);\n\n  const config = {\n    duration: 500,\n    easing: Easing.bezier(0.5, 0.01, 0, 1),\n  };\n\n  const style = useAnimatedStyle(() => {\n    return {\n      width: withTiming(randomWidth.value, config),\n    };\n  });\n\n  return (\n    <View style={styles.container}>\n      <Animated.View style={[styles.box, style]} />\n      <Button\n        title=\"toggle\"\n        onPress={() => {\n          randomWidth.value = Math.random() * 350;\n        }}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  box: {\n    width: 100,\n    height: 80,\n    backgroundColor: 'black',\n    margin: 30,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Submit Job Outputs Definition JSON\nDESCRIPTION: Defines the structure of outputs for a 'submit' job, including 'apple_app_id', 'ios_bundle_identifier', and 'android_package_id'. These outputs provide identifiers associated with the submitted application.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/workflows/syntax.mdx#_snippet_29\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"apple_app_id\": string | null, // Apple App ID. https://expo.fyi/asc-app-id\n  \"ios_bundle_identifier\": string | null, // iOS bundle identifier of the submitted build. https://expo.fyi/bundle-identifier\n  \"android_package_id\": string | null // Submitted Android package ID. https://expo.fyi/android-package\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Expo Project Assets\nDESCRIPTION: Command to export and view a pretty-printed list of project assets.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/optimize-assets.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo export\n```\n\n----------------------------------------\n\nTITLE: Implementing Push Notification Navigation with Expo Router\nDESCRIPTION: This code sets up a notification observer in an Expo Router layout to handle both initial and runtime push notifications. It extracts URL data from notifications and uses router.push() to navigate to the specified route.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/notifications.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEffect } from 'react';\nimport * as Notifications from 'expo-notifications';\nimport { router } from 'expo-router';\n\nfunction useNotificationObserver() {\n  useEffect(() => {\n    let isMounted = true;\n\n    function redirect(notification: Notifications.Notification) {\n      const url = notification.request.content.data?.url;\n      if (url) {\n        /* @info Push the URL. You may want to verify the format before navigating. */\n        router.push(url);\n        /* @end */\n      }\n    }\n\n    /* @info Handle the initial push notification. */\n    Notifications.getLastNotificationResponseAsync() /* @end */\n      .then(response => {\n        if (!isMounted || !response?.notification) {\n          return;\n        }\n        redirect(response?.notification);\n      });\n\n    /* @info Listen for runtime notifications. */\n    const subscription = Notifications.addNotificationResponseReceivedListener(response => {\n      /* @end */\n      redirect(response.notification);\n    });\n\n    return () => {\n      isMounted = false;\n      subscription.remove();\n    };\n  }, []);\n}\n\nexport default function Layout() {\n  /* @info Observe at the root. Ensure this layout never returns <b>null</b> or the navigation will go unhandled. */\n  useNotificationObserver();\n  /* @end */\n\n  return <Slot />;\n}\n```\n\n----------------------------------------\n\nTITLE: Using URL API in Expo - JavaScript\nDESCRIPTION: This snippet demonstrates creating a new URL instance and using URLSearchParams with Expo's implementation. It highlights the standard usage of the URL API within the Expo framework. Ensure to import the 'expo' package to access this functionality.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/url.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst url = new URL('https://expo.dev');\n\nconst params = new URLSearchParams();\n```\n\n----------------------------------------\n\nTITLE: Linking EAS Update Branch to Production Channel\nDESCRIPTION: This command links the 'version-2.0' EAS Update branch to the 'production' channel, making the updates from that branch available to builds with the 'production' channel.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/how-it-works.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ eas channel:edit production --branch version-2.0\n```\n\n----------------------------------------\n\nTITLE: Implementing Playback Status Update Handler\nDESCRIPTION: Example of setting up a function to handle playback status updates, which can be used to update the UI based on the current playback state.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/av.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n_onPlaybackStatusUpdate = playbackStatus => {\n  if (!playbackStatus.isLoaded) {\n    // Update your UI for the unloaded state\n    if (playbackStatus.error) {\n      console.log(`Encountered a fatal error during playback: ${playbackStatus.error}`);\n      // Send Expo team the error on Slack or the forums so we can help you debug!\n    }\n  } else {\n    // Update your UI for the loaded state\n\n    if (playbackStatus.isPlaying) {\n      // Update your UI for the playing state\n    } else {\n      // Update your UI for the paused state\n    }\n\n    if (playbackStatus.isBuffering) {\n      // Update your UI for the buffering state\n    }\n\n    if (playbackStatus.didJustFinish && !playbackStatus.isLooping) {\n      // The player has just finished playing and will stop. Maybe you want to play something else?\n    }\n\n    /* @hide ... */ /* @end */\n  }\n};\n\n// Load the playbackObject and obtain the reference.\nplaybackObject.setOnPlaybackStatusUpdate(this._onPlaybackStatusUpdate);\n```\n\n----------------------------------------\n\nTITLE: Implementing Handoff in Route Component\nDESCRIPTION: Example of implementing Handoff in a route component using the Head component from expo-router/head.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/advanced/apple-handoff.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport Head from 'expo-router/head';\nimport { Text } from 'react-native';\n\nexport default function App() {\n  return (\n    <>\n      <Head>\n        <meta property=\"expo:handoff\" content=\"true\" />\n      </Head>\n      <Text>Hello World</Text>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @expo/fingerprint using npx\nDESCRIPTION: Shows how to install the `@expo/fingerprint` package using `npx expo install`. This command ensures compatibility with the project's Expo SDK version. It's needed if using the package standalone, otherwise it's included with `expo` or `expo-updates`.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/fingerprint.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo install @expo/fingerprint\n```\n\n----------------------------------------\n\nTITLE: Importing ImageManipulator in JavaScript\nDESCRIPTION: Demonstrates how to import all exports from the expo-image-manipulator package for use in a JavaScript application.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/imagemanipulator.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as ImageManipulator from 'expo-image-manipulator';\n```\n\n----------------------------------------\n\nTITLE: Accessing Configuration Values in React Native\nDESCRIPTION: Demonstrates how to access configuration values in a React Native app using the expo-constants package.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/workflow/configuration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport Constants from 'expo-constants';\n\nConstants.expoConfig.extra.fact === 'kittens are cool';\n```\n\n----------------------------------------\n\nTITLE: Using Required Images with Base URL Support\nDESCRIPTION: Example of using the Image component from expo-image with required assets. The baseUrl prefix is automatically applied during export.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/more/expo-cli.mdx#2025-04-23_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Image } from 'expo-image';\n\nexport default function Blog() {\n  return <Image source={require('@/assets/image.png')} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Expo Development Server Command\nDESCRIPTION: Terminal command to initialize the Expo development server for local development.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/development-builds/use-development-builds.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo start\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS permissions for expo-calendar\nDESCRIPTION: XML configuration to add NSCalendarsUsageDescription and NSRemindersUsageDescription keys to the iOS Info.plist file. These keys provide permission descriptions for accessing calendars and reminders on iOS devices.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-calendar/README.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<key>NSCalendarsUsageDescription</key>\n<string>Allow $(PRODUCT_NAME) to access your calendar</string>\n<key>NSRemindersUsageDescription</key>\n<string>Allow $(PRODUCT_NAME) to access your reminders</string>\n```\n\n----------------------------------------\n\nTITLE: Importing Components from expo-router/ui\nDESCRIPTION: Example showing how to import the tab-related components from the expo-router/ui submodule, which are used to create custom tab layouts.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/router-ui.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { Tabs, TabList, TabTrigger, TabSlot } from 'expo-router/ui';\n```\n\n----------------------------------------\n\nTITLE: Meta Tags Implementation\nDESCRIPTION: Example of adding meta tags to pages using the Head component from expo-router\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/reference/static-rendering.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport Head from 'expo-router/head';\nimport { Text } from 'react-native';\n\nexport default function Page() {\n  return (\n    <>\n      <Head>\n        <title>My Blog Website</title>\n        <meta name=\"description\" content=\"This is my blog.\" />\n      </Head>\n      <Text>About my blog</Text>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Home Screen with Modal Navigation Link\nDESCRIPTION: Implements a home screen with a Link component to navigate to a modal. This example shows how to create a basic home screen that includes a navigation link to open a modal screen.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/advanced/modals.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Link } from 'expo-router';\nimport { StyleSheet, Text, View } from 'react-native';\n\nexport default function Home() {\n  return (\n    <View style={styles.container}>\n      <Text>Home screen</Text>\n      /* @info Use the <CODE>Link</CODE> component to navigate to the modal screen. The <CODE>href</CODE> prop is the route name of the modal screen. */\n      <Link href=\"/modal\" style={styles.link}>\n        Open modal\n      </Link>\n      /* @end */\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  link: {\n    paddingTop: 20,\n    fontSize: 20,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Modifying Existing Android Application Class\nDESCRIPTION: Adding lifecycle event handling to an existing Application class for Expo modules.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/brownfield/installing-expo-modules.mdx#2025-04-22_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\ndiff --git a/android/app/src/main/java/com/<my-app-package>/MainApplication.kt b/android/app/src/main/java/com/<my-app-package>/MainApplication.kt\nnew file mode 100644\nindex 0000000..2c8525a\n--- /dev/null\n+++ b/android/app/src/main/java/com/<my-app-package>/MainApplication.kt\n@@ -0,0 +1,19 @@\nclass MainApplication() : Application() {\n    override fun onCreate() {\n        super.onCreate()\n+       ApplicationLifecycleDispatcher.onApplicationCreate(this)\n    }\n+\n+   override fun onConfigurationChanged(newConfig: Configuration) {\n+       super.onConfigurationChanged(newConfig)\n+       ApplicationLifecycleDispatcher.onConfigurationChanged(this, newConfig)\n+   }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Creating URL and URLSearchParams Objects in JavaScript\nDESCRIPTION: Basic example of creating URL and URLSearchParams objects in JavaScript. This demonstrates the fundamental usage of the standard URL API in Expo applications.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/url.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst url = new URL('https://expo.dev');\n\nconst params = new URLSearchParams();\n```\n\n----------------------------------------\n\nTITLE: Running Android Development Environment\nDESCRIPTION: Command to setup and run the Android environment, including npm install, building React Android binaries, generating emulator, starting Metro, and launching the app.\nSOURCE: https://github.com/expo/expo/blob/main/apps/bare-expo/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn android\n```\n\n----------------------------------------\n\nTITLE: Importing expo-crypto Module in JavaScript\nDESCRIPTION: This code snippet shows how to import the expo-crypto module in a JavaScript file. This is the standard import statement that should be used before accessing any functions from the crypto module.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/crypto.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as Crypto from 'expo-crypto';\n```\n\n----------------------------------------\n\nTITLE: TaskManager Import Statement\nDESCRIPTION: Example of importing the TaskManager module from expo-task-manager package.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/task-manager.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as TaskManager from 'expo-task-manager';\n```\n\n----------------------------------------\n\nTITLE: Opening App Settings in React Native\nDESCRIPTION: This snippet demonstrates how to open the app settings page using the Linking API in React Native. This can be useful when prompting users to manually enable background location permissions.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/location.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Linking } from 'react-native';\n\nfunction openSettings() {\n  Linking.openURL('app-settings:');\n}\n```\n\n----------------------------------------\n\nTITLE: Building Android Release Bundle\nDESCRIPTION: Commands to navigate to the Android directory and generate a release Android App Bundle (AAB) using Gradle.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/local-app-production.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ cd android\n\n$ ./gradlew app:bundleRelease\n```\n\n----------------------------------------\n\nTITLE: Setting Up Private NPM Packages with eas/use_npm_token in YAML\nDESCRIPTION: Configures the node package manager with an NPM token to access private packages. Requires the NPM_TOKEN to be set in project secrets.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: Install private npm modules\n  steps:\n    - eas/checkout\n    # @info #\n    - eas/use_npm_token\n    # @end #\n    - run:\n        name: Install dependencies\n        run: npm install # <---- Can now install private packages\n```\n\n----------------------------------------\n\nTITLE: Setting up Global Tailwind CSS\nDESCRIPTION: Global CSS file that imports Tailwind's base, components, and utilities layers.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/config/metro.mdx#2025-04-22_snippet_11\n\nLANGUAGE: css\nCODE:\n```\n/* This file adds the requisite utility classes for Tailwind to work. */\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n```\n\n----------------------------------------\n\nTITLE: Configuring Metro for Experimental Import Support\nDESCRIPTION: Modifies metro.config.js to enable experimentalImportSupport, which is required for tree shaking in Expo. This uses Metro's version of the @babel/plugin-transform-modules-commonjs plugin to simplify bundle output.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/tree-shaking.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst { getDefaultConfig } = require('expo/metro-config');\n\nconst config = getDefaultConfig(__dirname);\n\nconfig.transformer.getTransformOptions = async () => ({\n  transform: {\n    experimentalImportSupport: true,\n  },\n});\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Scoped Storage for Android 10+\nDESCRIPTION: This XML snippet shows how to make expo-media-library work with Android's scoped storage by adding the requestLegacyExternalStorage attribute to the application tag in the AndroidManifest.xml file.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/media-library.mdx#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<manifest ... >\n  <application android:requestLegacyExternalStorage=\"true\" ...>\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Configuring Expo Font Plugin in app.json\nDESCRIPTION: This code snippet demonstrates how to configure the expo-font plugin in the app.json file of a React Native project. It highlights the use of the config plugin for linking font files to the native project. Requires the expo-font package to be installed and configured in the project. The 'fonts' parameter specifies an array of font file paths relative to the project root.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/font.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-font\",\n        {\n          \"fonts\": [\"path/to/file.ttf\"]\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic RTL Override Implementation\nDESCRIPTION: React Native component demonstrating dynamic RTL layout override with reload functionality. Uses expo-updates and expo-constants to manage RTL state.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/localization.mdx#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Text, View, StyleSheet, I18nManager, Platform } from 'react-native';\nimport Constants from 'expo-constants';\nimport * as Updates from 'expo-updates';\n\nexport default function App() {\n  const shouldBeRTL = true;\n\n  if (shouldBeRTL !== I18nManager.isRTL && Platform.OS !== 'web') {\n    I18nManager.allowRTL(shouldBeRTL);\n    I18nManager.forceRTL(shouldBeRTL);\n    Updates.reloadAsync();\n  }\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.paragraph}>{I18nManager.isRTL ? ' RTL' : ' LTR'}</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    paddingTop: Constants.statusBarHeight,\n    padding: 8,\n  },\n  paragraph: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    textAlign: 'left',\n    width: '50%',\n    backgroundColor: 'pink',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Extending Babel Transformer in Metro Config\nDESCRIPTION: Example of extending Expo's Babel transformer to handle custom file types by creating a custom transformer module that wraps the upstream Expo transformer.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/config/metro.mdx#2025-04-22_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nconst upstreamTransformer = require('@expo/metro-config/babel-transformer');\n\nmodule.exports.transform = async ({ src, filename, options }) => {\n  // Do something custom for SVG files...\n  if (filename.endsWith('.svg')) {\n    src = '...';\n  }\n  // Pass the source through the upstream Expo transformer.\n  return upstreamTransformer.transform({ src, filename, options });\n};\n```\n\n----------------------------------------\n\nTITLE: Using Web Camera in an HTML Iframe\nDESCRIPTION: This HTML snippet shows how to enable camera and microphone access in an iframe. It uses the `allow` attribute, which needs to include `microphone` and `camera` for enabling web camera features within an iframe.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/camera.mdx#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<iframe src=\"...\" allow=\"microphone; camera;\">\n  <!-- <CameraView /> -->\n</iframe>\n```\n\n----------------------------------------\n\nTITLE: Implementing Light Sensor in React Native with Expo\nDESCRIPTION: A complete React Native component that demonstrates how to use the LightSensor from expo-sensors. It includes subscription management, displaying illuminance values, and toggling the sensor listener with proper cleanup in useEffect.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/light-sensor.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View, Platform } from 'react-native';\nimport { LightSensor } from 'expo-sensors';\n\nexport default function App() {\n  const [{ illuminance }, setData] = useState({ illuminance: 0 });\n  const [subscription, setSubscription] = useState(null);\n\n  const toggle = () => {\n    if (subscription) {\n      unsubscribe();\n    } else {\n      subscribe();\n    }\n  };\n\n  const subscribe = () => {\n    setSubscription(\n      LightSensor.addListener(sensorData => {\n        setData(sensorData);\n      })\n    );\n  };\n\n  const unsubscribe = () => {\n    subscription && subscription.remove();\n    setSubscription(null);\n  };\n\n  useEffect(() => {\n    subscribe();\n    return () => unsubscribe();\n  }, []);\n\n  return (\n    <View style={styles.sensor}>\n      <Text>Light Sensor:</Text>\n      <Text>\n        Illuminance: {Platform.OS === 'android' ? `${illuminance} lx` : `Only available on Android`}\n      </Text>\n      <View style={styles.buttonContainer}>\n        <TouchableOpacity onPress={toggle} style={styles.button}>\n          <Text>Toggle</Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  sensor: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    paddingHorizontal: 10,\n  },\n  buttonContainer: {\n    flexDirection: 'row',\n    alignItems: 'stretch',\n    marginTop: 15,\n  },\n  button: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#eee',\n    padding: 10,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Package Interface for Activity Lifecycle Listeners in Kotlin\nDESCRIPTION: This snippet shows how to create a Package class that implements the createReactActivityLifecycleListeners method to provide Activity lifecycle listeners in Kotlin.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/android-lifecycle-listeners.mdx#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n// android/src/main/java/expo/modules/mylib/MyLibPackage.kt\npackage expo.modules.mylib\n\nimport android.content.Context\nimport expo.modules.core.interfaces.Package\nimport expo.modules.core.interfaces.ReactActivityLifecycleListener\n\nclass MyLibPackage : Package {\n  override fun createReactActivityLifecycleListeners(activityContext: Context): List<ReactActivityLifecycleListener> {\n    return listOf(MyLibReactActivityLifecycleListener())\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: KeepAwake Import Statement\nDESCRIPTION: Basic import statement for the KeepAwake component from expo-keep-awake package.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/keep-awake.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport KeepAwake from 'expo-keep-awake';\n```\n\n----------------------------------------\n\nTITLE: Installing @expo/json-file using Yarn\nDESCRIPTION: This command uses the Yarn package manager to add the `@expo/json-file` library as a dependency to the current project. It downloads and installs the package and updates the project's `package.json` and `yarn.lock` files.\nSOURCE: https://github.com/expo/expo/blob/main/packages/@expo/json-file/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @expo/json-file\n```\n\n----------------------------------------\n\nTITLE: Configuring iCloud Container Environment Plugin in Expo (JSON)\nDESCRIPTION: This snippet demonstrates how to add the expo-document-picker config plugin to an Expo app\\'s app.json file, specifying the iCloudContainerEnvironment as \\\"Production\\\". This enables iCloud document storage for iOS builds using EAS Build. The 'plugins' array must include the tuple with the plugin name and desired options. The configuration is required at build time (not runtime), and valid environment values include 'Development' or 'Production'.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/document-picker.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"expo\\\": {\\n    \\\"plugins\\\": [\\n      [\\n        \\\"expo-document-picker\\\",\\n        {\\n          \\\"iCloudContainerEnvironment\\\": \\\"Production\\\"\\n        }\\n      ]\\n    ]\\n  }\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: GLView Import Statement\nDESCRIPTION: Shows the basic import statement for using GLView from expo-gl package.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/gl-view.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { GLView } from 'expo-gl';\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Podfile\nDESCRIPTION: Modifying the Podfile to enable autolinking for Expo modules in your iOS project.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/brownfield/installing-expo-modules.mdx#2025-04-22_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n\ndiff --git a/ios/Podfile b/ios/Podfile\nindex f991b7b..17c24b0 100644\n--- a/ios/Podfile\n+++ b/ios/Podfile\n@@ -1 +1,4 @@\n+# Expo requires\n+require File.join(File.dirname(`node --print \"require.resolve('expo/package.json')\"`), \"scripts/autolinking\")\n+\n # Resolve react_native_pods.rb with node to allow for hoisting\n@@ -17,3 +20,16 @@ end\n target '<YourAppTarget>' do\n-  config = use_native_modules!()\n+  # Need to be added inside the target block\n+  use_expo_modules!\n+\n+  config_command = [\n+    'node',\n+    '--no-warnings',\n+    '--eval',\n+    'require(require.resolve(\"expo-modules-autolinking\", { paths: [require.resolve(\"expo/package.json\")] }))(process.argv.slice(1))',\n+    'react-native-config',\n+    '--json',\n+    '--platform',\n+    'ios'\n+  ]\n+  config = use_native_modules!(config_command)\n \n```\n\n----------------------------------------\n\nTITLE: Configuring Automatic Runtime Version Policy in Expo app.json (JSON)\nDESCRIPTION: This JSON snippet shows how to use an automatic policy to generate the runtime version in the app configuration. Setting 'runtimeVersion' to an object with a 'policy' field delegates versioning to one of Expo's runtime version policies. Dependencies are built into the Expo toolchain. The main parameters are 'expo' and 'runtimeVersion.policy' with expected values like 'appVersion', 'nativeVersion', or 'fingerprint'.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/updates.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"runtimeVersion\": {\n      \"policy\": \"<policy_name>\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Submit Webhook Payload Structure in JSON\nDESCRIPTION: Example payload structure that EAS sends when a submit event occurs. Contains submission details, status, and error information if applicable.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/webhooks.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"0374430d-7776-44ad-be7d-8513629adc54\",\n  \"accountName\": \"dsokal\",\n  \"projectName\": \"example\",\n  \"submissionDetailsPageUrl\": \"https://expo.dev/accounts/dsokal/projects/example/builds/0374430d-7776-44ad-be7d-8513629adc54\",\n  \"parentSubmissionId\": \"75ac0be7-0d90-46d5-80ec-9423fa0aaa6b\",\n  \"appId\": \"23c0e405-d282-4399-b280-5689c3e1ea85\",\n  \"archiveUrl\": \"http://archive.url/abc.apk\",\n  \"initiatingUserId\": \"7bee4c21-3eaa-4011-a0fd-3678b6537f47\",\n  \"platform\": \"android\",\n  \"status\": \"errored\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Lottie Animation in React Native\nDESCRIPTION: This snippet demonstrates how to use the LottieView component to display and control an animation in a React Native app. It includes functionality to autoplay the animation and a button to restart it programmatically.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/lottie.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useRef, useEffect } from 'react';\nimport { Button, StyleSheet, View } from 'react-native';\nimport LottieView from 'lottie-react-native';\n\nexport default function App() {\n  const animation = useRef<LottieView>(null);\n  useEffect(() => {\n    // You can control the ref programmatically, rather than using autoPlay\n    // animation.current?.play();\n  }, []);\n\n  return (\n    <View style={styles.animationContainer}>\n      <LottieView\n        autoPlay\n        ref={animation}\n        style={{\n          width: 200,\n          height: 200,\n          backgroundColor: '#eee',\n        }}\n        // Find more Lottie files at https://lottiefiles.com/featured\n        source={require('./assets/gradientBall.json')}\n      />\n      <View style={styles.buttonContainer}>\n        <Button\n          title=\"Restart Animation\"\n          onPress={() => {\n            animation.current?.reset();\n            animation.current?.play();\n          }}\n        />\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  animationContainer: {\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n    flex: 1,\n  },\n  buttonContainer: {\n    paddingTop: 20,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Feature Toggling with Environment Variables\nDESCRIPTION: Example of using EXPO_PUBLIC_ environment variables to conditionally remove code from production bundles.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/tree-shaking.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nif (!process.env.EXPO_PUBLIC_DISABLE_FEATURE) {\n  console.log('Hello from the feature!');\n}\n```\n\n----------------------------------------\n\nTITLE: Mocking Modules per Platform with Metro in JavaScript\nDESCRIPTION: This snippet shows how to mock a JavaScript module as empty for a specific platform using Metro's resolver in expo/metro-config. It checks for requests for 'lodash' on the 'web' platform and returns an object with type: 'empty', causing Metro to treat the module as non-existent. Other requests fall through to the default resolver. Intended for use in metro.config.js, this approach is platform-aware and can be used to exclude modules from web bundles while keeping them available elsewhere.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/config/metro.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst { getDefaultConfig } = require('expo/metro-config');\n\n/** @type {import('expo/metro-config').MetroConfig} */\nconst config = getDefaultConfig(__dirname);\n\nconfig.resolver.resolveRequest = (context, moduleName, platform) => {\n  if (platform === 'web' && moduleName === 'lodash') {\n    return {\n      type: 'empty',\n    };\n  }\n\n  // Ensure you call the default resolver.\n  return context.resolveRequest(context, moduleName, platform);\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Base URL in App.json\nDESCRIPTION: Example of setting experimental baseUrl in app.json for subpath hosting in Expo Router.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/migrate/from-expo-webpack.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"experiments\": {\n      \"baseUrl\": \"/evanbacon/my-website\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Package.json Scripts for Expo CLI\nDESCRIPTION: Shows how to modify package.json scripts to use Expo CLI commands instead of React Native CLI commands for better logging and handling.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/adopting-prebuild.mdx#2025-04-22_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n  \"scripts\": {\n    \"start\": \"expo start\",\n-    \"android\": \"react-native run-android\",\n-    \"ios\": \"react-native run-ios\",\n+    \"android\": \"expo run:android\",\n+    \"ios\": \"expo run:ios\",\n  },\n```\n\n----------------------------------------\n\nTITLE: Importing Sensors Module in JavaScript\nDESCRIPTION: Shows how to import the entire Sensors module or individual sensor components from expo-sensors.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/sensors.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Sensors from 'expo-sensors';\n// OR\nimport {\n  Accelerometer,\n  Barometer,\n  DeviceMotion,\n  Gyroscope,\n  LightSensor,\n  Magnetometer,\n  MagnetometerUncalibrated,\n  Pedometer,\n} from 'expo-sensors';\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Permissions for Contacts\nDESCRIPTION: XML configuration for adding READ_CONTACTS and WRITE_CONTACTS permissions to the Android manifest file.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/contacts.mdx#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"android.permission.READ_CONTACTS\" />\n<uses-permission android:name=\"android.permission.WRITE_CONTACTS\" />\n```\n\n----------------------------------------\n\nTITLE: Registering Application Class in AndroidManifest.xml\nDESCRIPTION: Adding the MainApplication class to the AndroidManifest.xml to enable Expo module lifecycle events.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/brownfield/installing-expo-modules.mdx#2025-04-22_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\ndiff --git a/android/app/src/main/AndroidManifest.xml b/android/app/src/main/AndroidManifest.xml\nindex a71b5e7..d6d406e 100644\n--- a/android/app/src/main/AndroidManifest.xml\n+++ b/android/app/src/main/AndroidManifest.xml\n@@ -7,6 +7,7 @@\n     <application\n         android:allowBackup=\"true\"\n+        android:name=\".MainApplication\"\n         android:fullBackupContent=\"@xml/backup_rules\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Links with expo-router in Expo Web Applications\nDESCRIPTION: This code snippet demonstrates how to use the `Link` component from the expo-router library to create links with additional web functionality like right-click to copy or hover previews.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/linking/into-other-apps.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Link } from 'expo-router';\n\nexport default function Home() {\n  return <Link href=\"https://expo.dev\">Go to Expo</Link>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CSS Support in Metro for Expo SDK 50+\nDESCRIPTION: This code snippet demonstrates how to configure CSS support in the Metro config for Expo SDK 50 and above. It shows how to disable CSS support by setting the isCSSEnabled option.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/config/metro.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('expo/metro-config').MetroConfig} */\nconst config = getDefaultConfig(__dirname, {\n  // Disable CSS support.\n  isCSSEnabled: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Using SQLite-based Key-Value Storage with Synchronous API\nDESCRIPTION: Shows how to use the synchronous API methods provided by expo-sqlite/kv-store for key-value storage. This enables more convenient access patterns when asynchronous operations are not required.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/sqlite.mdx#2025-04-22_snippet_14\n\nLANGUAGE: ts\nCODE:\n```\n// The storage API is the default export, you can call it Storage, AsyncStorage, or whatever you prefer.\nimport Storage from 'expo-sqlite/kv-store';\n\nStorage.setItemSync('key', 'value');\nconst value = Storage.getItemSync('key');\n```\n\n----------------------------------------\n\nTITLE: Implementing iOS WebView Component\nDESCRIPTION: iOS implementation of WebView component using WKWebView with navigation delegate for load event handling.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/native-view-tutorial.mdx#2025-04-22_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\nimport ExpoModulesCore\nimport WebKit\n\nclass ExpoWebView: ExpoView, WKNavigationDelegate {\n  let webView = WKWebView()\n  let onLoad = EventDispatcher()\n\n  required init(appContext: AppContext? = nil) {\n    super.init(appContext: appContext)\n    clipsToBounds = true\n    webView.navigationDelegate = self\n    addSubview(webView)\n  }\n\n  override func layoutSubviews() {\n    webView.frame = bounds\n  }\n\n  func webView(_ webView: WKWebView, didFinish navigation: WKNavigation!) {\n    if let url = webView.url {\n      onLoad([\n        \"url\": url.absoluteString\n      ])\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Push Receipt via Curl in Shell\nDESCRIPTION: This command retrieves the push receipt for a previously sent notification using the Expo push notification service API. It requires the ticket ID returned from the send operation to check the delivery status.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/push-notifications/faq.mdx#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncurl -H \"Content-Type: application/json\" -X POST \"https://exp.host/--/api/v2/push/getReceipts\" -d '{\n  \"ids\": [\n    \"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\n  ]\n}'\n```\n\n----------------------------------------\n\nTITLE: Identifying the @expo/image-utils Package\nDESCRIPTION: This snippet shows the NPM package name '@expo/image-utils', which is the subject of this documentation. It's a library used for image processing functionality within the Expo CLI.\nSOURCE: https://github.com/expo/expo/blob/main/packages/@expo/image-utils/README.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n@expo/image-utils\n```\n\n----------------------------------------\n\nTITLE: Importing VideoThumbnails Module in JavaScript\nDESCRIPTION: This code snippet shows how to import the VideoThumbnails module from the expo-video-thumbnails package in a JavaScript file. This import statement is required to use the VideoThumbnails API in your application.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/video-thumbnails.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as VideoThumbnails from 'expo-video-thumbnails';\n```\n\n----------------------------------------\n\nTITLE: Importing the Network Module in JavaScript\nDESCRIPTION: Basic import statement for the expo-network module to access network-related functionality. This import provides access to all the Network API methods for retrieving IP addresses, MAC addresses, and network status information.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/network.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Network from 'expo-network';\n```\n\n----------------------------------------\n\nTITLE: Exporting Production Bundles with Source Maps\nDESCRIPTION: Commands to export production bundles with source maps for analysis.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/analyzing-bundles.mdx#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo export --source-maps --platform web\n\n# Native apps using Hermes can disable bytecode for analyzing the JavaScript bundle.\n$ npx expo export --source-maps --platform ios --no-bytecode\n```\n\n----------------------------------------\n\nTITLE: React Refresh Configuration\nDESCRIPTION: Package.json configuration for React Refresh version override in Expo Router v2\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/reference/static-rendering.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"overrides\": {\n    \"react-refresh\": \"~0.14.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Media Location Permission in Android Manifest\nDESCRIPTION: This XML snippet shows how to add the ACCESS_MEDIA_LOCATION permission to the Android manifest file, which allows access to latitude and longitude EXIF tags in media assets.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/media-library.mdx#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"android.permission.ACCESS_MEDIA_LOCATION\" />\n```\n\n----------------------------------------\n\nTITLE: Updating iOS Source Files Path in Podspec\nDESCRIPTION: Modifies the source_files configuration in the iOS podspec to specify files in a src directory, avoiding conflicts with framework files.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/third-party-library.mdx#2025-04-22_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n- s.source_files = '**/*.{h,m,mm,swift,hpp,cpp}'\n+ s.source_files = 'src/**/*.{h,m,mm,swift,hpp,cpp}'\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Info.plist for Background Processing (XML)\nDESCRIPTION: This XML snippet shows how to manually configure the iOS **Info.plist** file to enable background task processing. Adding `processing` to the `UIBackgroundModes` array is necessary for `expo-background-task` to function correctly on iOS, especially when not using Continuous Native Generation (CNG).\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/background-task.mdx#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<key>UIBackgroundModes</key>\n  <array>\n    <string>processing</string>\n  </array>\n</key>\n```\n\n----------------------------------------\n\nTITLE: Unused Export Removal Example\nDESCRIPTION: Demonstrates how unused exports are automatically removed from the production bundle.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/tree-shaking.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport function ArrowUp() {\n  /* ... */\n}\n\nexport function ArrowDown() {\n  /* ... */\n}\n\nexport function ArrowRight() {\n  /* ... */\n}\n\nexport function ArrowLeft() {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Using Basic Components from expo-dev-client-components in TSX\nDESCRIPTION: Demonstrates how to import and use basic components like View, Spacer, Row, and theme hooks from the expo-dev-client-components package to create a styled row element.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-dev-client-components/README.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { View, Spacer, Row, useExpoTheme, ChevronRightICon } from 'expo-dev-client-components';\n\nfunction ExampleRow() {\n  const theme = useExpoTheme();\n\n  return (\n    <View px=\"small\" py=\"large\">\n      <Row align=\"center\">\n        <ChevronRightIcon />\n        <Spacer.Horizontal size=\"tiny\" />\n        <Text size=\"large\" style={{ color: theme.text.default }}>\n          Enter URL manually\n        </Text>\n      </Row>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Speech Implementation in React Native with Expo\nDESCRIPTION: Example showing how to implement basic text-to-speech functionality using expo-speech. Creates a simple app with a button that speaks '1' when pressed. Includes styling for container layout.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/speech.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { View, StyleSheet, Button } from 'react-native';\nimport * as Speech from 'expo-speech';\n\nexport default function App() {\n  const speak = () => {\n    const thingToSay = '1';\n    Speech.speak(thingToSay);\n  };\n\n  return (\n    <View style={styles.container}>\n      <Button title=\"Press to hear some words\" onPress={speak} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    backgroundColor: '#ecf0f1',\n    padding: 8,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration\nDESCRIPTION: Example of configuring environment variables in build profiles for different deployment environments. Shows how to extend configurations and override environment variables per profile.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/build/eas-json.mdx#2025-04-22_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"production\": {\n      \"node\": \"16.13.0\",\n      \"env\": {\n        \"API_URL\": \"https://company.com/api\"\n      }\n    },\n    \"preview\": {\n      \"extends\": \"production\",\n      \"distribution\": \"internal\",\n      \"env\": {\n        \"API_URL\": \"https://staging.company.com/api\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Android Manifest Modification Plugin\nDESCRIPTION: TypeScript implementation of a config plugin that modifies AndroidManifest.xml to add meta-data to the main application.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/config-plugins/development-and-debugging.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AndroidConfig, ConfigPlugin, withAndroidManifest } from 'expo/config-plugins';\nimport { ExpoConfig } from 'expo/config';\n\nconst { addMetaDataItemToMainApplication, getMainApplicationOrThrow } = AndroidConfig.Manifest;\n\nexport const withMyCustomConfig: ConfigPlugin = config => {\n  return withAndroidManifest(config, async config => {\n    config.modResults = await setCustomConfigAsync(config, config.modResults);\n    return config;\n  });\n};\n\nasync function setCustomConfigAsync(\n  config: Pick<ExpoConfig, 'android'>,\n  androidManifest: AndroidConfig.Manifest.AndroidManifest\n): Promise<AndroidConfig.Manifest.AndroidManifest> {\n  const appId = 'my-app-id';\n  const mainApplication = getMainApplicationOrThrow(androidManifest);\n\n  addMetaDataItemToMainApplication(\n    mainApplication,\n    'my-app-id-key',\n    appId\n  );\n\n  return androidManifest;\n}\n```\n\n----------------------------------------\n\nTITLE: Using ImageViewer Component in Main Screen\nDESCRIPTION: Importing and using the custom ImageViewer component in the main screen of the app.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/build-a-screen.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StyleSheet, View } from 'react-native';\n\nimport ImageViewer from '@/components/ImageViewer';\n\nconst PlaceholderImage = require('@/assets/images/background-image.png');\n\nexport default function Index() {\n  return (\n    <View style={styles.container}>\n      <View style={styles.imageContainer}>\n        <ImageViewer imgSource={PlaceholderImage} />\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#25292e',\n    alignItems: 'center',\n  },\n  imageContainer: {\n    flex: 1,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Tab Navigator Layout\nDESCRIPTION: Configures a nested Tab navigator layout within the home route.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/advanced/nesting-navigators.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Tabs } from 'expo-router';\n\nexport default Tabs;\n```\n\n----------------------------------------\n\nTITLE: Environment-based Configuration Switching in JavaScript\nDESCRIPTION: Demonstrates how to switch between different configurations based on environment variables in app.config.js.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/workflow/configuration.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = () => {\n  if (process.env.MY_ENVIRONMENT === 'production') {\n    return {\n      /* your production config */\n    };\n  } else {\n    return {\n      /* your development config */\n    };\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Development Alias for Expo CLI (Shell)\nDESCRIPTION: This shell command creates an alias named `nexpo` that points directly to the development build of the Expo CLI. This allows developers to easily run their local build of the CLI from anywhere in the terminal using `nexpo` instead of the full path, facilitating testing across different projects.\nSOURCE: https://github.com/expo/expo/blob/main/packages/@expo/cli/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nalias nexpo=\"/path/to/expo/packages/@expo/cli/build/bin/cli\"\n```\n\n----------------------------------------\n\nTITLE: Installing @react-native-community/slider Package in React Native\nDESCRIPTION: This code snippet demonstrates how to install the @react-native-community/slider package in a React Native project. It uses a custom component APIInstallSection to render the installation instructions.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/slider.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<APIInstallSection href=\"https://github.com/callstack/react-native-slider#installation--usage\" />\n```\n\n----------------------------------------\n\nTITLE: Expanded Barrel Exports After Optimization\nDESCRIPTION: Shows how barrel file exports are expanded during the optimization process. Individual exports are explicitly listed, allowing for removal of unused ones in production bundles.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/tree-shaking.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nexport { ArrowRight, ArrowLeft } from './icons';\n```\n\n----------------------------------------\n\nTITLE: Adding expo-image-picker config plugin to app.json\nDESCRIPTION: JSON configuration to add the expo-image-picker plugin to the Expo project's app.json file.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-image-picker/README.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\"expo-image-picker\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating from AsyncStorage to SQLite Key-Value Storage\nDESCRIPTION: Shows the simple import change needed to switch from @react-native-async-storage/async-storage to expo-sqlite/kv-store while maintaining the same API usage.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/sqlite.mdx#2025-04-22_snippet_14\n\nLANGUAGE: diff\nCODE:\n```\n- import AsyncStorage from '@react-native-async-storage/async-storage';\n+ import AsyncStorage from 'expo-sqlite/kv-store';\n```\n\n----------------------------------------\n\nTITLE: Using captureRef Imperative API\nDESCRIPTION: Example of using the lower-level captureRef function to programmatically capture a view. This demonstrates the imperative API which returns a Promise with the image URI.\nSOURCE: https://github.com/expo/expo/blob/main/apps/expo-go/modules/react-native-view-shot/README.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { captureRef } from \"react-native-view-shot\";\n\ncaptureRef(viewRef, {\n  format: \"jpg\",\n  quality: 0.8,\n}).then(\n  (uri) => console.log(\"Image saved to\", uri),\n  (error) => console.error(\"Oops, snapshot failed\", error)\n);\n```\n\n----------------------------------------\n\nTITLE: Installing EAS CLI and Login\nDESCRIPTION: Command to install the EAS CLI globally and login to an Expo account\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/development-builds/create-a-build.mdx#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install -g eas-cli && eas login\n```\n\n----------------------------------------\n\nTITLE: Configuring .npmrc for a Private Registry with Authentication\nDESCRIPTION: Example .npmrc configuration for connecting to a private npm registry that requires authentication, using an environment variable for the token.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/build-reference/private-npm-packages.mdx#2025-04-22_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n//registry.johndoe.com/:_authToken=${NPM_TOKEN}\nregistry=https://registry.johndoe.com/\n```\n\n----------------------------------------\n\nTITLE: Android Upload Crashlytics Symbols Command\nDESCRIPTION: Fastlane command to upload Crashlytics symbols for Android.\nSOURCE: https://github.com/expo/expo/blob/main/fastlane/README.md#2025-04-22_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\n[bundle exec] fastlane android upload_crashlytics_symbols\n```\n\n----------------------------------------\n\nTITLE: Structuring BlurView with Dynamic Content (React Native)\nDESCRIPTION: Demonstrates the correct component structure to avoid rendering issues when using `BlurView` with dynamic content like `FlatList`. Place `BlurView` after the dynamic component to ensure the blur effect updates correctly when dynamic content is rendered.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/blur-view.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<View>\n  <FlatList />\n  <BlurView />\n</View>\n```\n\n----------------------------------------\n\nTITLE: Manually configuring Apple Sign-in entitlements for React Native iOS\nDESCRIPTION: Add the required entitlements for Apple Sign-in to the app's .entitlements file when not using EAS Build.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/apple-authentication.mdx#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<key>com.apple.developer.applesignin</key>\n<array>\n  <string>Default</string>\n</array>\n```\n\n----------------------------------------\n\nTITLE: Applying Platform-Specific Babel Options with babel-preset-expo - JavaScript\nDESCRIPTION: This snippet showcases how to provide platform-specific overrides in babel-preset-expo by placing options inside an object for a specific platform (e.g., web). Here, disableImportExportTransform is set to true for web, overriding the default false. This allows for targeted Babel configuration per platform. Input: Babel config array. Output: Web platform uses custom import/export transform setting.\nSOURCE: https://github.com/expo/expo/blob/main/packages/babel-preset-expo/README.md#2025-04-22_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n[\n  'babel-preset-expo',\n  {\n    // Default value:\n    disableImportExportTransform: false,\n\n    web: {\n      // Web-specific value:\n      disableImportExportTransform: true,\n    },\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing Native Actions in DOM Components\nDESCRIPTION: Demonstrates how to implement and use native actions between DOM and native components.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/dom-components.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport DomComponent from './my-component';\n\nexport default function App() {\n  return (\n    <DomComponent\n      hello={(data: string) => {\n        console.log('Hello', data);\n      }}\n    />\n  );\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\n'use dom';\n\nexport default function MyComponent({ hello }: { hello: (data: string) => Promise<void> }) {\n  return <p onClick={() => hello('world')}>Click me</p>;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New Expo App with create-expo-app\nDESCRIPTION: Command to initialize a new Expo application project that can be used with EAS Build\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/build/setup.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npx create-expo-app my-app\n```\n\n----------------------------------------\n\nTITLE: Get Build Job Outputs Definition JSON\nDESCRIPTION: Defines the structure of outputs for a 'get-build' job, mirroring the output structure of the 'build' job. Includes properties such as 'build_id', 'app_build_version', 'app_identifier', etc., providing details of the retrieved build.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/workflows/syntax.mdx#_snippet_27\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"build_id\": string,\n  \"app_build_version\": string | null,\n  \"app_identifier\": string | null,\n  \"app_version\": string | null,\n  \"channel\": string | null,\n  \"distribution\": \"internal\" | \"store\" | null,\n  \"fingerprint_hash\": string | null,\n  \"git_commit_hash\": string | null,\n  \"platform\": \"ios\" | \"android\" | null,\n  \"profile\": string | null,\n  \"runtime_version\": string | null,\n  \"sdk_version\": string | null,\n  \"simulator\": \"true\" | \"false\" | null\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting Push Receipts with cURL\nDESCRIPTION: Example of retrieving push receipts using cURL. The request sends a list of push ticket IDs to check the delivery status of previously sent notifications.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/push-notifications/sending-notifications.mdx#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncurl -H \"Content-Type: application/json\" -X POST \"https://exp.host/--/api/v2/push/getReceipts\" -d '{\n  \"ids\": [\n    \"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\",\n    \"YYYYYYYY-YYYY-YYYY-YYYY-YYYYYYYYYYYY\",\n    \"ZZZZZZZZ-ZZZZ-ZZZZ-ZZZZ-ZZZZZZZZZZZZ\"\n  ]\n}'\n```\n\n----------------------------------------\n\nTITLE: Fetching Network Information Once in React Native\nDESCRIPTION: This snippet demonstrates how to use the fetch method to get network information as a one-time operation. It returns a promise with the network state including connection type and connectivity status.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/netinfo.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nNetInfo.fetch().then(state => {\n  console.log('Connection type', state.type);\n  console.log('Is connected?', state.isConnected);\n});\n```\n\n----------------------------------------\n\nTITLE: Step Name Configuration YAML\nDESCRIPTION: Shows how to set a human-friendly name for a step. The `name` property is displayed in the job's logs. If a name is not provided, the `run` command will be used as the step name.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/workflows/syntax.mdx#_snippet_40\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  my_job:\n    steps:\n      # @info #\n      - name: My first step\n        # @end #\n        run: echo \"Hello World\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Blurhash Generation Endpoint\nDESCRIPTION: Express.js endpoint implementation for generating blurhash from uploaded images. Includes error handling and parameter customization for component values.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/image.mdx#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\napp.post('/blurhash', upload.single('image'), async (req, res) => {\n  const { file } = req;\n  if (file === null) {\n    res.status(400).json({ message: 'Image is missing' });\n    return;\n  }\n\n  const componentX = req.body.componentX ?? 4;\n  const componentY = req.body.componentY ?? 3;\n\n  const { data, info } = await sharp(file.buffer).ensureAlpha().raw().toBuffer({\n    resolveWithObject: true,\n  });\n\n  const blurhash = encode(\n    new Uint8ClampedArray(data),\n    info.width,\n    info.height,\n    componentX,\n    componentY\n  );\n  res.json({ blurhash });\n});\n```\n\n----------------------------------------\n\nTITLE: Updated EAS Build Configuration\nDESCRIPTION: Enhanced eas.json configuration with environment variable for development builds.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/build-reference/variants.mdx#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"development\": {\n      \"developmentClient\": true,\n      \"env\": {\n        \"APP_VARIANT\": \"development\"\n      }\n    },\n    \"production\": {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing DocumentPicker Module in Expo React Native (JavaScript)\nDESCRIPTION: This JavaScript import statement demonstrates how to import all exported members of expo-document-picker as DocumentPicker. This is a prerequisite to using the APIs for launching the system document picker UI and handling user file selection. It assumes expo-document-picker is installed as a project dependency. Typically used in the main application code where document selection features are implemented.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/document-picker.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as DocumentPicker from 'expo-document-picker';\\n\n```\n\n----------------------------------------\n\nTITLE: Importing CameraView in JavaScript\nDESCRIPTION: Simple JavaScript import statement for bringing in CameraView from the expo-camera package. This is necessary before using the camera functionalities provided by the package.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/camera.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { CameraView } from 'expo-camera';\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping Expo Project and Installing Expo Go\nDESCRIPTION: This snippet outlines how to create an Expo project with a specific SDK version and then launch it in the iOS Simulator. This forces the installation of the corresponding Expo Go version.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/workflow/ios-simulator.mdx#_snippet_1\n\nLANGUAGE: Shell Session\nCODE:\n```\n# Bootstrap an SDK 51 project\n$ npx create-expo-app --template blank@51\n\n# Open the app on a simulator to install the required Expo Go app\n$ npx expo start --ios\n```\n\n----------------------------------------\n\nTITLE: Configuring Stripe Plugin in Expo app.json\nDESCRIPTION: Configuration setup for the @stripe/stripe-react-native plugin in the Expo config file. Includes settings for merchant identifier and Google Pay enablement.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/stripe.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"@stripe/stripe-react-native\",\n        {\n          \"merchantIdentifier\": string | string [],\n          \"enableGooglePay\": boolean\n        }\n      ]\n    ],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Local Expo Config Plugin Module\nDESCRIPTION: Demonstrates creating a reusable, local config plugin in a separate file (`./plugins/withMyPlugin.js`). This plugin modifies the `Info.plist` and is exported for use in `app.json` or `app.config.js`. This approach helps in generating unique fingerprints when the plugin implementation changes.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/fingerprint.mdx#2025-04-22_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nconst { withInfoPlist } = require('expo/config-plugins');\n\nconst withMyPlugin = config => {\n  return withInfoPlist(config, config => {\n    config.modResults.NSLocationWhenInUseUsageDescription =\n      'Allow $(PRODUCT_NAME) to use your location';\n    return config;\n  });\n};\n\nmodule.exports = withMyPlugin;\n```\n\n----------------------------------------\n\nTITLE: Migrating from Navigation Prop to useRouter Hook\nDESCRIPTION: Diff showing how to replace the navigation prop with the useRouter hook in Expo Router.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/migrate/from-react-navigation.mdx#2025-04-22_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n+ import { useRouter } from 'expo-router';\n\nexport default function Page({\n-  navigation\n}) {\n-  navigation.push('User', { user: 'bacon' });\n\n+  const router = useRouter();\n+  router.push('/users/bacon');\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Schema and UI Components in JavaScript/JSX\nDESCRIPTION: Imports the Expo app config JSON schema definition and a React component for tabular display of schema details. No external dependencies beyond the resolved paths and standard React/Next.js conventions are required. The imported schema and component are used downstream to explain configuration properties to end users.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/config/app.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport schema from '~/public/static/schemas/unversioned/app-config-schema.json';\nimport AppConfigSchemaTable from '~/ui/components/AppConfigSchemaTable';\n```\n\n----------------------------------------\n\nTITLE: Creating an Icon Button with FontAwesome in React Native\nDESCRIPTION: This snippet demonstrates how to create an icon button using the FontAwesome.Button component from @expo/vector-icons. It shows a Facebook login button with an icon and text, including a press handler.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/icons.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport FontAwesome from '@expo/vector-icons/FontAwesome';\n\nexport default function App() {\n  const loginWithFacebook = () => {\n    console.log('Button pressed');\n  };\n\n  return (\n    <View style={styles.container}>\n      <FontAwesome.Button name=\"facebook\" backgroundColor=\"#3b5998\" onPress={loginWithFacebook}>\n        Login with Facebook\n      </FontAwesome.Button>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Apple Sign In in app.json\nDESCRIPTION: Configuration in app.json to enable the Sign In with Apple capability in your iOS app by setting the usesAppleSignIn property to true.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/apple-authentication.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"ios\": {\n      \"usesAppleSignIn\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Initial Route Names for Array Syntax in Expo Router\nDESCRIPTION: Configuration example demonstrating how to set up initial route names for different groups when using array syntax, specifying default routes for both home and search groups.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/advanced/shared-routes.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport const unstable_settings = {\n  initialRouteName: 'home',\n  search: {\n    initialRouteName: 'search',\n  },\n};\n\nexport default function DynamicLayout({ segment }) {\n  /* @hide  ... */ /* @end */\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic TypeScript Function for EAS Build\nDESCRIPTION: The default TypeScript template for a custom EAS Build function, created using the create-eas-build-function tool. This basic template includes the BuildStepContext and a simple function that logs a message.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/custom-builds/functions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// This file was autogenerated by `create-eas-build-function` command.\n// Go to README.md to learn more about how to write your own custom build functions.\n\nimport { BuildStepContext } from '@expo/steps';\n\n// interface FunctionInputs {\n//   // specify the type of the inputs value and whether they are required here\n//   // example: name: BuildStepInput<BuildStepInputValueTypeName.STRING, true>;\n// }\n\n// interface FunctionOutputs {\n//   // specify the function outputs and whether they are required here\n//   // example: name: BuildStepOutput<true>;\n// }\n\nasync function myFunction(\n  ctx: BuildStepContext\n  // {\n  //   inputs,\n  //   outputs,\n  //   env,\n  // }: {\n  //   inputs: FunctionInputs;\n  //   outputs: FunctionOutputs;\n  //   env: BuildStepEnv;\n  // }\n): Promise<void> {\n  ctx.logger.info('Hello from my TypeScript function!');\n}\n\nexport default myFunction;\n```\n\n----------------------------------------\n\nTITLE: Importing AppleMaps and GoogleMaps in JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to import the `AppleMaps` and `GoogleMaps` modules from the `expo-maps` library. These modules contain the React components needed to display maps in your Expo application.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/maps.mdx#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { AppleMaps, GoogleMaps } from 'expo-maps';\n\n// ApplesMaps.View and GoogleMaps.View are the React components\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Runtime Version in Expo Config\nDESCRIPTION: Demonstrates how to manually set a custom runtime version in the Expo configuration file. This approach gives developers complete control over update compatibility with builds.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/runtime-versions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"runtimeVersion\": \"1.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic JavaScript Math Module for Web Bundle Splitting\nDESCRIPTION: This code defines a simple JavaScript module named math.js, exporting an 'add' function for use in dynamic imports. Intended to demonstrate Metro's bundle splitting in Expo SDK 50 and above, the input parameters are two numbers ('a' and 'b'), and the output is their sum. No dependencies are required, and the function is pure and synchronous.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/config/metro.mdx#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nexport function add(a, b) {\n  return a + b;\n}\n```\n\n----------------------------------------\n\nTITLE: Android Development App Name Configuration\nDESCRIPTION: Android strings.xml configuration for development variant app name.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/build-reference/variants.mdx#2025-04-22_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<resources>\n    <string name=\"app_name\">MyApp - Dev</string>\n</resources>\n```\n\n----------------------------------------\n\nTITLE: Using useSQLiteContext() Hook with React.Suspense in TypeScript\nDESCRIPTION: Shows how to integrate the SQLiteProvider with React.Suspense to display a fallback component while the database is initializing, using TypeScript and React Native.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/sqlite.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SQLiteProvider, useSQLiteContext } from 'expo-sqlite';\nimport { Suspense } from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Suspense fallback={<Fallback />}>\n        <SQLiteProvider databaseName=\"test.db\" onInit={migrateDbIfNeeded} useSuspense>\n          <Header />\n          <Content />\n        </SQLiteProvider>\n      </Suspense>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Root Directory in Expo Router Config Plugin\nDESCRIPTION: JSON configuration to change the root directory to src/routes using the Expo Router Config Plugin. This is discouraged and may lead to unexpected behavior.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/reference/src-directory.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    [\n      \"expo-router\",\n      {\n        \"root\": \"./src/routes\"\n      }\n    ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Image Capture Implementation in React Native\nDESCRIPTION: Main component implementation showing platform-specific image capture logic using Platform.OS to differentiate between web and native platforms. Uses react-native-view-shot for native platforms and dom-to-image for web browsers.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/platform-differences.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { View, StyleSheet, Platform } from 'react-native';\nimport * as ImagePicker from 'expo-image-picker';\nimport { useState, useRef } from 'react';\nimport { GestureHandlerRootView } from 'react-native-gesture-handler';\nimport * as MediaLibrary from 'expo-media-library';\nimport { type ImageSource } from 'expo-image';\nimport { captureRef } from 'react-native-view-shot';\nimport domtoimage from 'dom-to-image';\n\nimport Button from '@/components/Button';\nimport ImageViewer from '@/components/ImageViewer';\nimport IconButton from '@/components/IconButton';\nimport CircleButton from '@/components/CircleButton';\nimport EmojiPicker from '@/components/EmojiPicker';\nimport EmojiList from '@/components/EmojiList';\nimport EmojiSticker from '@/components/EmojiSticker';\n\nconst PlaceholderImage = require('@/assets/images/background-image.png');\n\nexport default function Index() {\n  const [selectedImage, setSelectedImage] = useState<string | undefined>(undefined);\n  const [showAppOptions, setShowAppOptions] = useState<boolean>(false);\n  const [isModalVisible, setIsModalVisible] = useState<boolean>(false);\n  const [pickedEmoji, setPickedEmoji] = useState<ImageSource | undefined>(undefined);\n  const [status, requestPermission] = MediaLibrary.usePermissions();\n  const imageRef = useRef<View>(null);\n\n  if (status === null) {\n    requestPermission();\n  }\n\n  const pickImageAsync = async () => {\n    let result = await ImagePicker.launchImageLibraryAsync({\n      mediaTypes: ['images'],\n      allowsEditing: true,\n      quality: 1,\n    });\n\n    if (!result.canceled) {\n      setSelectedImage(result.assets[0].uri);\n      setShowAppOptions(true);\n    } else {\n      alert('You did not select any image.');\n    }\n  };\n\n  const onReset = () => {\n    setShowAppOptions(false);\n  };\n\n  const onAddSticker = () => {\n    setIsModalVisible(true);\n  };\n\n  const onModalClose = () => {\n    setIsModalVisible(false);\n  };\n\n  const onSaveImageAsync = async () => {\n    if (Platform.OS !== 'web') {\n      try {\n        const localUri = await captureRef(imageRef, {\n          height: 440,\n          quality: 1,\n        });\n\n        await MediaLibrary.saveToLibraryAsync(localUri);\n        if (localUri) {\n          alert('Saved!');\n        }\n      } catch (e) {\n        console.log(e);\n      }\n    } else {\n      try {\n        const dataUrl = await domtoimage.toJpeg(imageRef.current, {\n          quality: 0.95,\n          width: 320,\n          height: 440,\n        });\n\n        let link = document.createElement('a');\n        link.download = 'sticker-smash.jpeg';\n        link.href = dataUrl;\n        link.click();\n      } catch (e) {\n        console.log(e);\n      }\n    }\n  };\n\n  return (\n    <GestureHandlerRootView style={styles.container}>\n      <View style={styles.imageContainer}>\n        <View ref={imageRef} collapsable={false}>\n          <ImageViewer imgSource={PlaceholderImage} selectedImage={selectedImage} />\n          {pickedEmoji && <EmojiSticker imageSize={40} stickerSource={pickedEmoji} />}\n        </View>\n      </View>\n      {showAppOptions ? (\n        <View style={styles.optionsContainer}>\n          <View style={styles.optionsRow}>\n            <IconButton icon=\"refresh\" label=\"Reset\" onPress={onReset} />\n            <CircleButton onPress={onAddSticker} />\n            <IconButton icon=\"save-alt\" label=\"Save\" onPress={onSaveImageAsync} />\n          </View>\n        </View>\n      ) : (\n        <View style={styles.footerContainer}>\n          <Button theme=\"primary\" label=\"Choose a photo\" onPress={pickImageAsync} />\n          <Button label=\"Use this photo\" onPress={() => setShowAppOptions(true)} />\n        </View>\n      )}\n      <EmojiPicker isVisible={isModalVisible} onClose={onModalClose}>\n        <EmojiList onSelect={setPickedEmoji} onCloseModal={onModalClose} />\n      </EmojiPicker>\n    </GestureHandlerRootView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#25292e',\n    alignItems: 'center',\n  },\n  imageContainer: {\n    flex: 1,\n  },\n  footerContainer: {\n    flex: 1 / 3,\n    alignItems: 'center',\n  },\n  optionsContainer: {\n    position: 'absolute',\n    bottom: 80,\n  },\n  optionsRow: {\n    alignItems: 'center',\n    flexDirection: 'row',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Tree-Shaking-Friendly Conditional Import\nDESCRIPTION: Demonstrates the preferred approach for conditional code execution that works well with tree shaking. Uses ESM imports and conditional execution rather than conditional imports.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/tree-shaking.mdx#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport { doSomething } from './dev-only';\n\nif (process.env.NODE_ENV === 'development') {\n  doSomething();\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Brightness API Usage in Expo with React Native (JSX)\nDESCRIPTION: This snippet demonstrates a complete React Native component that uses the expo-brightness API to request permissions and set the system brightness to maximum if permission is granted. It leverages the useEffect hook for async side-effects, StyleSheet for component styling, and provides a simple UI for demonstration. Dependencies include expo-brightness, and the relevant permission must be configured for Android devices; on iOS, programmatic changes persist until the device is locked or powered off.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/brightness.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEffect } from 'react';\\nimport { StyleSheet, View, Text } from 'react-native';\\nimport * as Brightness from 'expo-brightness';\\n\\nexport default function App() {\\n  useEffect(() => {\\n    (async () => {\\n      const { status } = await Brightness.requestPermissionsAsync();\\n      if (status === 'granted') {\\n        Brightness.setSystemBrightnessAsync(1);\\n      }\\n    })();\\n  }, []);\\n\\n  return (\\n    <View style={styles.container}>\\n      <Text>Brightness Module Example</Text>\\n    </View>\\n  );\\n}\\n\\nconst styles = StyleSheet.create({\\n  container: {\\n    flex: 1,\\n    backgroundColor: '#fff',\\n    alignItems: 'center',\\n    justifyContent: 'center',\\n  },\\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a new Expo project with Bun\nDESCRIPTION: Command to create a new Expo project using Bun package manager. This will prompt for an app name after execution.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/more/create-expo.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ bun create expo\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of BlurView Component (React Native)\nDESCRIPTION: Illustrates how to import and use the `BlurView` component from `expo-blur` in a React Native app. Shows multiple instances with varying `intensity` and `tint` props ('light', 'dark'), along with necessary styling including `overflow: 'hidden'` and `borderRadius` for rounded corners.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/blur-view.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Text, StyleSheet, View, SafeAreaView } from 'react-native';\nimport { BlurView } from 'expo-blur';\n\nexport default function App() {\n  const text = 'Hello, my container is blurring contents underneath!';\n  return (\n    <SafeAreaView style={styles.container}>\n      <View style={styles.background}>\n        {[...Array(20).keys()].map(i => (\n          <View\n            key={`box-${i}`}\n            style={[styles.box, i % 2 === 1 ? styles.boxOdd : styles.boxEven]}\n          />\n        ))}\n      </View>\n      <BlurView intensity={100} style={styles.blurContainer}>\n        <Text style={styles.text}>{text}</Text>\n      </BlurView>\n      <BlurView intensity={80} tint=\"light\" style={styles.blurContainer}>\n        <Text style={styles.text}>{text}</Text>\n      </BlurView>\n      <BlurView intensity={90} tint=\"dark\" style={styles.blurContainer}>\n        <Text style={[styles.text, { color: '#fff' }]}>{text}</Text>\n      </BlurView>\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  blurContainer: {\n    flex: 1,\n    padding: 20,\n    margin: 16,\n    textAlign: 'center',\n    justifyContent: 'center',\n    overflow: 'hidden', // Required for borderRadius to work on Android and iOS\n    borderRadius: 20,\n  },\n  background: {\n    flex: 1,\n    flexWrap: 'wrap',\n    ...StyleSheet.absoluteFill,\n  },\n  box: {\n    width: '25%',\n    height: '20%',\n  },\n  boxEven: {\n    backgroundColor: 'orangered',\n  },\n  boxOdd: {\n    backgroundColor: 'gold',\n  },\n  text: {\n    fontSize: 24,\n    fontWeight: '600',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Either Types in iOS/Android\nDESCRIPTION: Demonstration of Either types for handling arguments that can be one of multiple types.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/module-api.mdx#2025-04-22_snippet_27\n\nLANGUAGE: swift\nCODE:\n```\nFunction(\"foo\") { (bar: Either<String, Int>) in\n  if let bar: String = bar.get() {\n    // `bar` is a String\n  }\n  if let bar: Int = bar.get() {\n    // `bar` is an Int\n  }\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nFunction(\"foo\") { bar: Either<String, Int> ->\n  bar.get(String::class).let {\n    // `it` is a String\n  }\n  bar.get(Int::class).let {\n    // `it` is an Int\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TV Config Plugin Configuration\nDESCRIPTION: Configuration in app.json to enable the TV config plugin for project setup.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/building-for-tv.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\"@react-native-tvos/config-tv\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest for Expo Module Testing\nDESCRIPTION: Jest configuration setup in package.json for testing Expo modules with TypeScript support\nSOURCE: https://github.com/expo/expo/blob/main/guides/Expo Module Infrastructure.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jest\": {\n    \"preset\": \"expo-module-scripts\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Pedometer from expo-sensors\nDESCRIPTION: Basic import statement for the Pedometer module from expo-sensors package.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/pedometer.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { Pedometer } from 'expo-sensors';\n```\n\n----------------------------------------\n\nTITLE: Experimental Icons Mod Implementation\nDESCRIPTION: Example of using withDangerousMod to implement icon generation functionality. Shows how to perform direct file system operations without using base mods.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/config-plugins/plugins-and-mods.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nexport const withIcons = config => {\n  return withDangerousMod(config, [\n    'ios',\n    async config => {\n      await setIconsAsync(config, config.modRequest.projectRoot);\n      return config;\n    },\n  ]);\n};\n```\n\n----------------------------------------\n\nTITLE: CircleCI EAS Build Configuration\nDESCRIPTION: CircleCI configuration that sets up a Node.js environment and triggers EAS builds on the master branch.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/build/building-on-ci.mdx#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 2.1\n\nexecutors:\n  default:\n    docker:\n      - image: cimg/node:lts\n    working_directory: ~/my-app\n\njobs:\n  eas_build:\n    executor: default\n    steps:\n      - checkout\n      - run:\n          name: Install dependencies\n          command: npm ci\n      - run:\n          name: Trigger build\n          command: npx eas-cli build --platform all --non-interactive --no-wait\n\nworkflows:\n  build_app:\n    jobs:\n      - eas_build:\n          filters:\n            branches:\n              only: master\n```\n\n----------------------------------------\n\nTITLE: Manually Setting iCloud Entitlements for iOS (XML)\nDESCRIPTION: This XML configuration must be placed in the ios/[app]/[app].entitlements file to enable iCloud capabilities for the app. It defines container identifiers, services, and the ubiquity KV store required for CloudKit access. Replace 'dev.expo.my-app' and '$(TeamIdentifierPrefix)' with your actual bundle identifier and team prefix. Proper configuration is required for iCloud document storage and to pass Apple App Store requirements.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/document-picker.mdx#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<key>com.apple.developer.icloud-container-identifiers</key>\\n<array>\\n    <string>iCloud.dev.expo.my-app</string>\\n</array>\\n<key>com.apple.developer.icloud-services</key>\\n<array>\\n    <string>CloudDocuments</string>\\n</array>\\n<key>com.apple.developer.ubiquity-container-identifiers</key>\\n<array>\\n    <string>iCloud.dev.expo.my-app</string>\\n</array>\\n<key>com.apple.developer.ubiquity-kvstore-identifier</key>\\n<string>$(TeamIdentifierPrefix)dev.expo.my-app</string>\\n\n```\n\n----------------------------------------\n\nTITLE: Setting Up Paths Filter in GitHub Action YAML\nDESCRIPTION: This snippet shows how to configure the 'dorny/paths-filter' GitHub Action in a workflow YAML file. It includes filters for monitoring changes in the 'src' directory, enabling conditional execution based on file modifications. The snippet highlights the integration of filters for efficient workflow management.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-updates/e2e/setup/paths-filter/README.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- uses: dorny/paths-filter@v3\n  id: changes\n  with:\n    filters: |\n      src:\n        - 'src/**'\n\n  # run only if some file in 'src' folder was changed\n- if: steps.changes.outputs.src == 'true'\n  run: ...\n```\n\n----------------------------------------\n\nTITLE: Custom Entry Point Configuration\nDESCRIPTION: JSON configuration in package.json to specify a custom main entry file.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/register-root-component.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"main\": \"src/main.jsx\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Expo CLI Config Command\nDESCRIPTION: Command to evaluate the app config (app.json or app.config.js). Options include --full for all project config data, --json for JSON output, and --type to specify the config type.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/more/expo-cli.mdx#2025-04-23_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo config\n```\n\n----------------------------------------\n\nTITLE: Importing Expo SDK Packages in JavaScript\nDESCRIPTION: Shows how to import and use Expo SDK packages in a JavaScript file after installation.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { CameraView } from 'expo-camera';\nimport * as Contacts from 'expo-contacts';\nimport { Gyroscope } from 'expo-sensors';\n```\n\n----------------------------------------\n\nTITLE: Creating URLSession with Pinning Delegate in Swift\nDESCRIPTION: This Swift snippet shows how to initialize a URLSession configured for SSL pinning. It uses an ephemeral configuration and provides an instance of the custom `PinningURLSessionDelegate`, passing the expected public key hex string during initialization.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-updates/ios/EXUpdates/ASN1Decoder/README.md#2025-04-22_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nlet publicKeyHexEncoded = \"...\" // your HTTPS certifcate public key\n\nlet session = URLSession(\n                configuration: URLSessionConfiguration.ephemeral,\n                delegate: PinningURLSessionDelegate(publicKeyHexEncoded: publicKeyHexEncoded),\n                delegateQueue: nil)\n```\n\n----------------------------------------\n\nTITLE: Manually Handling Video Player Events with Player.addListener in expo-video\nDESCRIPTION: Illustrates the use of the `player.addListener` method within a `useEffect` hook to subscribe to `statusChange` events from an `expo-video` `VideoPlayer`. This approach offers flexibility but requires manual cleanup by calling `subscription.remove()` in the `useEffect`'s return function to prevent memory leaks.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/video.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// ...Imports, definition of the component, creating the player etc.\n\nuseEffect(() => {\n  const subscription = player.addListener('statusChange', ({ status, error }) => {\n    setPlayerStatus(status);\n    setPlayerError(error);\n    console.log('Player status changed: ', status);\n  });\n\n  return () => {\n    subscription.remove();\n  };\n}, []);\n// Rest of the component...\n```\n\n----------------------------------------\n\nTITLE: Mocking Modules in Metro Config (JavaScript)\nDESCRIPTION: This snippet demonstrates how to mock a module (lodash) for a specific platform (web) using Metro's resolver configuration. It returns an empty object for the specified module on the web platform.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/config/metro.mdx#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst { getDefaultConfig } = require('expo/metro-config');\n\n/** @type {import('expo/metro-config').MetroConfig} */\nconst config = getDefaultConfig(__dirname);\n\nconfig.resolver.resolveRequest = (context, moduleName, platform) => {\n  if (platform === 'web' && moduleName === 'lodash') {\n    return {\n      type: 'empty',\n    };\n  }\n\n  // Ensure you call the default resolver.\n  return context.resolveRequest(context, moduleName, platform);\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Enabling Legacy Storage for Android Scoped Storage\nDESCRIPTION: Android manifest configuration to enable legacy external storage access for compatibility with Android 10's scoped storage.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/media-library.mdx#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<manifest ... >\n  <application android:requestLegacyExternalStorage=\"true\" ...>\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Setting StatusBar Color in Android Theme\nDESCRIPTION: Update the AppTheme style to use the custom StatusBar color by adding the android:statusBarColor property that references the color resource defined in colors.xml.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-splash-screen/README.md#2025-04-22_snippet_13\n\nLANGUAGE: diff\nCODE:\n```\n  <!-- Main/SplashScreen activity theme. -->\n  <style name=\"AppTheme\" parent=\"Theme.AppCompat.Light.NoActionBar\">\n    <item name=\"android:windowBackground\">@drawable/splashscreen</item>\n+   <item name=\"android:statusBarColor\">@color/splashscreen_statusbar_color</item>\n    <!-- Other style properties -->\n  </style>\n```\n\n----------------------------------------\n\nTITLE: Creating a New Expo Project with create-expo-app\nDESCRIPTION: Demonstrates how to create a new React Native project with Expo SDK support using the create-expo-app command.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/index.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Create a project named my-app\n$ npx create-expo-app my-app --template bare-minimum\n```\n\n----------------------------------------\n\nTITLE: Building for Platform-Specific Targets\nDESCRIPTION: Commands to initiate builds for Android and iOS platforms individually or together\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/build/setup.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ eas build --platform android\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ eas build --platform ios\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ eas build --platform all\n```\n\n----------------------------------------\n\nTITLE: Configuring Development Client in app.json\nDESCRIPTION: This JSON snippet demonstrates how to configure the 'expo-dev-client' plugin within an Expo project's 'app.json' file. It specifies the plugin's properties such as 'launchMode', which determines the app's launch behavior, and 'addGeneratedScheme', which toggles the custom URL scheme for opening projects.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/dev-client.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-dev-client\",\n        {\n          \"launchMode\": \"most-recent\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Maps API Key for Android in app.json\nDESCRIPTION: Configuration snippet for adding Google Maps API key to an Expo app on Android. This is required for deploying apps with Google Maps functionality to the Google Play Store.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/map-view.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n    \"android\": {\n      \"config\": {\n        \"googleMaps\": {\n          \"apiKey\": \"process.env.GOOGLE_MAPS_API_KEY\",\n        },\n      },\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Entry Points\nDESCRIPTION: Shows changes needed in package.json to update main entry point and TypeScript type definitions.\nSOURCE: https://github.com/expo/expo/blob/main/guides/Migrating Universal Modules to TypeScript.md#2025-04-22_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n- \"main\": \"index.js\",\n\n+ \"main\": \"build/<MODULE NAME>.js\",\n+ \"types\": \"build/<MODULE NAME>.d.ts\",\n```\n\n----------------------------------------\n\nTITLE: Opening Existing SQLite Database in Expo\nDESCRIPTION: TypeScript function to open an existing SQLite database file by copying it from assets to the app's document directory.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/sqlite.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as FileSystem from 'expo-file-system';\nimport * as SQLite from 'expo-sqlite';\nimport { Asset } from 'expo-asset';\n\nasync function openDatabase(pathToDatabaseFile: string): Promise<SQLite.WebSQLDatabase> {\n  if (!(await FileSystem.getInfoAsync(FileSystem.documentDirectory + 'SQLite')).exists) {\n    await FileSystem.makeDirectoryAsync(FileSystem.documentDirectory + 'SQLite');\n  }\n  const asset = await Asset.fromModule(require(pathToDatabaseFile)).downloadAsync();\n  await FileSystem.copyAsync({\n    from: asset.localUri,\n    to: FileSystem.documentDirectory + 'SQLite/myDatabaseName.db',\n  });\n  return SQLite.openDatabase('myDatabaseName.db');\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Jetpack Compose components\nDESCRIPTION: This code snippet demonstrates how to import components from the `@expo/ui/jetpack-compose` package. Specifically, it shows how to import the `Button` component.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/ui.mdx#_snippet_16\n\nLANGUAGE: ts\nCODE:\n```\n// Import from the Jetpack Compose package\nimport { Button } from '@expo/ui/jetpack-compose';\n```\n\n----------------------------------------\n\nTITLE: Adding AAR Dependency in build.gradle for SDK 51 and Below\nDESCRIPTION: Adds the AAR dependency to the Android build.gradle file using the @aar suffix format for SDK 51 and below.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/third-party-library.mdx#2025-04-22_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\ndependencies {\n  implementation project(':expo-modules-core')\n  implementation \"org.jetbrains.kotlin:kotlin-stdlib-jdk7:${getKotlinVersion()}\"\n+ implementation 'com.github.PhilJay:MPAndroidChart:v3.1.0@aar'\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Versions Endpoint Key via Expo CLI - shell\nDESCRIPTION: Demonstrates using the 'et update-versions-endpoint' CLI tool to update a specific key for a given SDK version in the staging environment. It requires the 'et' CLI tool and proper project permissions. Parameters include '--sdkVersion' to choose the SDK, '--key' for the field to update, and '--value' for the new value. The command stages the change, displays a diff for review, and does not commit to production until approved.\nSOURCE: https://github.com/expo/expo/blob/main/guides/releasing/Versions Endpoint.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\net update-versions-endpoint --sdkVersion=35.0.0 --key=\"myKey\" --value=\"myValue\"\n```\n\n----------------------------------------\n\nTITLE: Importing NetInfo in React Native\nDESCRIPTION: This snippet shows how to import the NetInfo module from @react-native-community/netinfo package. This import is required before using any NetInfo functionality.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/netinfo.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport NetInfo from '@react-native-community/netinfo';\n```\n\n----------------------------------------\n\nTITLE: Importing Tab Components from Expo Router UI (JavaScript)\nDESCRIPTION: This snippet imports tab navigation components—Tabs, TabList, TabTrigger, and TabSlot—from the 'expo-router/ui' package, enabling the creation of custom tab layouts in React Native projects. There are no external dependencies beyond 'expo-router/ui', which must be installed in advance. Use these components inside your React components to build a customizable tab navigation interface; they accept props to define layout and behaviors as per your UI needs. The inputs and outputs are managed within the React component tree.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/router-ui.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Tabs, TabList, TabTrigger, TabSlot } from 'expo-router/ui';\n```\n\n----------------------------------------\n\nTITLE: Implementing Image Display in React Native\nDESCRIPTION: Code snippet showing how to import and use the Image component from expo-image to display an image in the app's main screen.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/build-a-screen.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { View, StyleSheet } from 'react-native';\nimport { Image } from 'expo-image';\n\nconst PlaceholderImage = require('@/assets/images/background-image.png');\n\nexport default function Index() {\n  return (\n    <View style={styles.container}>\n      <View style={styles.imageContainer}>\n        <Image source={PlaceholderImage} style={styles.image} />\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#25292e',\n    alignItems: 'center',\n  },\n  imageContainer: {\n    flex: 1,\n  },\n  image: {\n    width: 320,\n    height: 440,\n    borderRadius: 18,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Importing NetInfo Package in React Native\nDESCRIPTION: Shows how to import the NetInfo package into a React Native application.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/netinfo.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport NetInfo from '@react-native-community/netinfo';\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Motion Permission via Expo Plugin (JSON)\nDESCRIPTION: Configures the `expo-sensors` plugin within `app.json` to specify the permission message (`NSMotionUsageDescription`) required for accessing device motion data on iOS. This approach is used with Expo's config plugin system, typically with EAS Build or prebuild workflows.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/devicemotion.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n```json app.json\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-sensors\",\n        {\n          \"motionPermission\": \"Allow $(PRODUCT_NAME) to access your device motion.\"\n        }\n      ]\n    ]\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Constructing Update URL for Expo Development Client\nDESCRIPTION: This URL pattern is used to manually enter an update's URL in a development build, allowing loading of specific branches or channels.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/development-builds/development-workflows.mdx#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nhttps://u.expo.dev/[your-project-id]?channel-name=[channel-name]\n```\n\n----------------------------------------\n\nTITLE: Submitting an Android Build to the Google Play Store\nDESCRIPTION: This command submits an existing Android build to the Google Play Store using EAS Submit. It guides you through the submission process step-by-step.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/submit/android.mdx#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n$ eas submit --platform android\n```\n\n----------------------------------------\n\nTITLE: Implementing Push Notification Navigation with Expo Router\nDESCRIPTION: Implementation of push notification handling in Expo Router using a root layout component. Handles both initial and runtime notifications, redirecting to specified URLs using router.push().\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/notifications.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useEffect } from 'react';\nimport * as Notifications from 'expo-notifications';\nimport { router } from 'expo-router';\n\nfunction useNotificationObserver() {\n  useEffect(() => {\n    let isMounted = true;\n\n    function redirect(notification: Notifications.Notification) {\n      const url = notification.request.content.data?.url;\n      if (url) {\n        router.push(url);\n      }\n    }\n\n    Notifications.getLastNotificationResponseAsync()\n      .then(response => {\n        if (!isMounted || !response?.notification) {\n          return;\n        }\n        redirect(response?.notification);\n      });\n\n    const subscription = Notifications.addNotificationResponseReceivedListener(response => {\n      redirect(response.notification);\n    });\n\n    return () => {\n      isMounted = false;\n      subscription.remove();\n    };\n  }, []);\n}\n\nexport default function Layout() {\n  useNotificationObserver();\n  return <Slot />;\n}\n```\n\n----------------------------------------\n\nTITLE: URI Scheme Node.js API Usage\nDESCRIPTION: Example of using the uri-scheme Node.js API to open URIs programmatically in iOS simulators.\nSOURCE: https://github.com/expo/expo/blob/main/packages/uri-scheme/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Android, Ios } from 'uri-scheme';\n\nIos.openAsync({ uri: 'http://expo.dev/' });\n```\n\n----------------------------------------\n\nTITLE: Starting Expo Development Server\nDESCRIPTION: Command to start the JavaScript bundler for development with Expo\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/development-builds/create-a-build.mdx#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo start\n```\n\n----------------------------------------\n\nTITLE: Adding Apple Sign In Entitlements for Manual Configuration\nDESCRIPTION: XML entitlements to manually configure Apple Sign In capability for your iOS app if not using EAS Build. This should be added to the app's entitlements file.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/apple-authentication.mdx#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<key>com.apple.developer.applesignin</key>\n<array>\n  <string>Default</string>\n</array>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Entry Point for Expo App in Monorepo\nDESCRIPTION: This snippet shows how to create a custom index.js file to serve as the entry point for an Expo app in a monorepo. It uses registerRootComponent to properly set up the app environment for both Expo Go and native builds.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/monorepos.mdx#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport { registerRootComponent } from 'expo';\n\nimport App from './App';\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in Expo Go or in a native build,\n// the environment is set up appropriately\nregisterRootComponent(App);\n```\n\n----------------------------------------\n\nTITLE: Importing the Expo BackgroundFetch Module (JavaScript)\nDESCRIPTION: This JavaScript code snippet shows the standard way to import the `expo-background-fetch` module into your project. This allows access to all the functions and constants provided by the library, such as `registerTaskAsync`, `unregisterTaskAsync`, `getStatusAsync`, `BackgroundFetchResult`, and `BackgroundFetchStatus`.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/background-fetch.mdx#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport * as BackgroundFetch from 'expo-background-fetch';\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up MainActivity for Expo Splash Screen Migration\nDESCRIPTION: Remove the old expo-splash-screen initialization code from MainActivity.java when migrating from versions earlier than 0.12.0, as this is now handled automatically.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-splash-screen/README.md#2025-04-22_snippet_15\n\nLANGUAGE: diff\nCODE:\n```\n--- a/android/app/src/main/java/com/helloworld/MainActivity.java\n+++ b/android/app/src/main/java/com/helloworld/MainActivity.java\n import com.facebook.react.ReactRootView;\n import com.swmansion.gesturehandler.react.RNGestureHandlerEnabledRootView;\n\n-import host.exp.exponent.experience.splashscreen.legacy.singletons.SplashScreen;\n-import host.exp.exponent.experience.splashscreen.legacy.SplashScreenImageResizeMode;\n-\n public class MainActivity extends ReactActivity {\n   @Override\n   protected void onCreate(Bundle savedInstanceState) {\n     // This is required for expo-splash-screen.\n     setTheme(R.style.AppTheme);\n     super.onCreate(null);\n-    // SplashScreen.show(...) has to be called after super.onCreate(...)\n-    SplashScreen.show(this, SplashScreenImageResizeMode.CONTAIN, ReactRootView.class, false);\n   }\n```\n\n----------------------------------------\n\nTITLE: Server Function Implementation\nDESCRIPTION: Basic server function example showing server-side rendering with React Native components\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/server-components.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n'use server';\n\nimport { Text } from 'react-native';\n\nexport default async function renderInfo({ name }) {\n  // Securely fetch data from an API, and read environment variables...\n  return <Text>Hello, {name}!</Text>;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing DevLauncher and DevMenu from expo-dev-client\nDESCRIPTION: This snippet shows how to import the DevLauncher and DevMenu components from the expo-dev-client package. These components provide access to development tools and launcher functionality.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/dev-client.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { DevLauncher, DevMenu } from 'expo-dev-client';\n```\n\n----------------------------------------\n\nTITLE: Installing git-lfs on macOS Workers in Pre-Install Script\nDESCRIPTION: This shell script checks if git-lfs is installed on macOS workers and installs it if necessary. It's useful for iOS builds that require git-lfs for certain CocoaPods installations.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/build-reference/npm-hooks.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nif [[ \"$EAS_BUILD_PLATFORM\" == \"ios\" ]]; then\n  if brew list git-lfs > /dev/null 2>&1; then\n    echo \"=====> git-lfs is already installed.\"\n  else\n    echo \"=====> Installing git-lfs\"\n    HOMEBREW_NO_AUTO_UPDATE=1 brew install git-lfs\n    git lfs install\n  fi\nfi\n```\n\n----------------------------------------\n\nTITLE: Expo CLI Bundle Script for iOS\nDESCRIPTION: Shell script for the iOS project's Build Phase that configures bundling with Expo CLI. It handles environment variables, determines the entry file, and sets up the Expo CLI command for bundling.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/bare/installing-expo-modules.mdx#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nif [[ -f \"$PODS_ROOT/../.xcode.env\" ]]; then\n  source \"$PODS_ROOT/../.xcode.env\"\nfi\nif [[ -f \"$PODS_ROOT/../.xcode.env.local\" ]]; then\n  source \"$PODS_ROOT/../.xcode.env.local\"\nfi\n\n# The project root by default is one level up from the ios directory\nexport PROJECT_ROOT=\"$PROJECT_DIR\"/..\n\nif [[ \"$CONFIGURATION\" = *Debug* ]]; then\n  export SKIP_BUNDLING=1\nfi\nif [[ -z \"$ENTRY_FILE\" ]]; then\n  # Set the entry JS file using the bundler's entry resolution.\n  export ENTRY_FILE=\"$(\"$NODE_BINARY\" -e \"require('expo/scripts/resolveAppEntry')\" \"$PROJECT_ROOT\" ios relative | tail -n 1)\"\nfi\n\nif [[ -z \"$CLI_PATH\" ]]; then\n  # Use Expo CLI\n  export CLI_PATH=\"$(\"$NODE_BINARY\" --print \"require.resolve('@expo/cli')\")\"\nfi\nif [[ -z \"$BUNDLE_COMMAND\" ]]; then\n  # Default Expo CLI command for bundling\n  export BUNDLE_COMMAND=\"export:embed\"\nfi\n\n`\"$NODE_BINARY\" --print \"require('path').dirname(require.resolve('react-native/package.json')) + '/scripts/react-native-xcode.sh'\"`\n```\n\n----------------------------------------\n\nTITLE: Importing All Expo Tracking Transparency APIs (TypeScript)\nDESCRIPTION: This TypeScript import statement brings all exports from expo-tracking-transparency into the ExpoTrackingTransparency namespace. It enables access to the complete set of APIs for managing tracking transparency, suitable for use in TypeScript or JavaScript source files where detailed tracking permission handling is required. No parameters; output is availability of API methods in the imported namespace.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/tracking-transparency.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as ExpoTrackingTransparency from 'expo-tracking-transparency';\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for Expo Modules Core\nDESCRIPTION: This CMake script configures the build environment for the Expo Modules core. It sets up build and source directories, configures conditional flags for debugging and building with Hermes, and links various necessary libraries such as ReactAndroid and fbjni. It includes logic to determine architecture-specific configurations and dependencies.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-modules-core/android/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.4.1)\n\nproject(expo-modules-core)\n\nset(CMAKE_VERBOSE_MAKEFILE ON)\nset(CMAKE_CXX_STANDARD 20)\nset(PACKAGE_NAME \"expo-modules-core\")\nset(BUILD_DIR ${CMAKE_SOURCE_DIR}/build)\n\nstring(APPEND CMAKE_CXX_FLAGS \" -DREACT_NATIVE_TARGET_VERSION=${REACT_NATIVE_TARGET_VERSION}\")\n\nif (${NATIVE_DEBUG})\n    set(CMAKE_C_FLAGS_DEBUG \"${CMAKE_C_FLAGS_DEBUG} -g\")\n    set(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} -g\")\nendif ()\n\nset(SRC_DIR ${CMAKE_SOURCE_DIR}/src)\nset(COMMON_DIR ${CMAKE_SOURCE_DIR}/../common/cpp)\nfile(GLOB sources_android \"${SRC_DIR}/main/cpp/*.cpp\")\nfile(GLOB sources_android_types \"${SRC_DIR}/main/cpp/types/*.cpp\")\nfile(GLOB sources_android_javaclasses \"${SRC_DIR}/main/cpp/javaclasses/*.cpp\")\nfile(GLOB sources_android_javaclasses \"${SRC_DIR}/main/cpp/decorators/*.cpp\")\nfile(GLOB common_sources \"${COMMON_DIR}/*.cpp\")\n\nmacro(createVarAsBoolToInt name value)\n  if(${value})\n    set(${name} \"1\")\n  else()\n    set(${name} \"0\")\n  endif()\nendmacro()\n\nadd_library(CommonSettings INTERFACE)\n\nadd_library(\n        ${PACKAGE_NAME}\n        SHARED\n        ${common_sources}\n        ${sources_android}\n        ${sources_android_types}\n        ${sources_android_javaclasses}\n)\n\nif(IS_NEW_ARCHITECTURE_ENABLED)\n  add_subdirectory(\"${SRC_DIR}/fabric\")\n  set(NEW_ARCHITECTURE_DEPENDENCIES \"fabric\")\n  set(NEW_ARCHITECTURE_COMPILE_OPTIONS -DIS_NEW_ARCHITECTURE_ENABLED=1 -DRN_FABRIC_ENABLED=1)\nelse()\n  set(NEW_ARCHITECTURE_DEPENDENCIES \"\")\n  set(NEW_ARCHITECTURE_COMPILE_OPTIONS \"\")\nendif()\n\ncreateVarAsBoolToInt(\"USE_HERMES_INT\" ${USE_HERMES})\ncreateVarAsBoolToInt(\"UNIT_TEST_INT\" ${UNIT_TEST})\n\ntarget_compile_options(CommonSettings INTERFACE\n  -O2\n  -frtti\n  -fexceptions\n  -Wall\n  -fstack-protector-all\n  -DUSE_HERMES=${USE_HERMES_INT}\n  -DUNIT_TEST=${UNIT_TEST_INT}\n  ${NEW_ARCHITECTURE_COMPILE_OPTIONS}\n)\n\nif(${UNIT_TEST})\n  if(${USE_HERMES})\n    find_package(hermes-engine REQUIRED CONFIG)\n    set(JSEXECUTOR_LIB hermes-engine::libhermes)\n  else()\n    set(JSEXECUTOR_LIB ReactAndroid::jscexecutor)\n  endif()\nelse()\n  set(JSEXECUTOR_LIB \"\")\nendif()\n\nfind_library(LOG_LIB log)\n\nfind_package(ReactAndroid REQUIRED CONFIG)\n\nfind_package(fbjni REQUIRED CONFIG)\n\nif (ReactAndroid_VERSION_MINOR GREATER_EQUAL 76)\n  get_target_property(INCLUDE_reactnativejni\n       ReactAndroid::reactnative\n       INTERFACE_INCLUDE_DIRECTORIES)\nelse()\n  get_target_property(INCLUDE_reactnativejni\n        ReactAndroid::reactnativejni\n        INTERFACE_INCLUDE_DIRECTORIES)\nendif()\n\ntarget_include_directories(\n       ${PACKAGE_NAME}\n       PRIVATE\n       ${INCLUDE_reactnativejni}/react\n\n        \"${REACT_NATIVE_DIR}/ReactAndroid/src/main/jni/react/turbomodule\"\n       \"${COMMON_DIR}\"\n       \"${SRC_DIR}/fabric\"\n)\n\ninclude(\"${REACT_NATIVE_DIR}/ReactAndroid/cmake-utils/folly-flags.cmake\")\n\ntarget_compile_options(\n        ${PACKAGE_NAME}\n        PRIVATE\n        ${folly_FLAGS}\n)\n\ntarget_link_libraries(\n  ${PACKAGE_NAME}\n  CommonSettings\n  ${LOG_LIB}\n  fbjni::fbjni\n  ReactAndroid::jsi\n  android\n  ${JSEXECUTOR_LIB}\n  ${NEW_ARCHITECTURE_DEPENDENCIES}\n)\n\nif (ReactAndroid_VERSION_MINOR GREATER_EQUAL 76)\n   target_link_libraries(\n    ${PACKAGE_NAME}\n    ReactAndroid::reactnative\n   )\nelse()\n  target_link_libraries(\n    ${PACKAGE_NAME}\n    ReactAndroid::reactnativejni\n    ReactAndroid::folly_runtime\n    ReactAndroid::react_nativemodule_core\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Button Component Usage (SwiftUI)\nDESCRIPTION: This code snippet demonstrates how to use the Button component from the `@expo/ui/swift-ui` library.  The `onPress` prop is used to define the action to be performed when the button is pressed, in this case setting `editingProfile` to true. The style prop is set to `{ flex: 1 }` to have the button take up available space.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/ui.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from '@expo/ui/swift-ui';\n\n<Button\n  style={{ flex: 1 }}\n  onPress={() => {\n    setEditingProfile(true);\n  }}>\n  Edit profile\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Installing Multiple Expo SDK Packages\nDESCRIPTION: Example of installing multiple Expo SDK packages using npx expo install command\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo install expo-camera expo-contacts expo-sensors\n```\n\n----------------------------------------\n\nTITLE: Inspecting EAS Channels with CLI Commands\nDESCRIPTION: Commands for viewing and managing EAS update channels, including listing all channels, viewing specific channels, and creating new channels.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/eas-cli.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ eas channel:list\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ eas channel:view [channel-name]\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ eas channel:create [channel-name]\n```\n\n----------------------------------------\n\nTITLE: Using TextEncoder and TextDecoder in Expo\nDESCRIPTION: Example showing how to encode text to byte array and decode it back to string using the built-in TextEncoder and TextDecoder APIs. These are available globally without requiring imports across all Expo-supported platforms.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/encoding.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// [104, 101, 108, 108, 111]\nconst hello = new TextEncoder().encode('hello');\n\n// \"hello\"\nconst text = new TextDecoder().decode(hello);\n```\n\n----------------------------------------\n\nTITLE: Updating Android MainActivity for Expo registerRootComponent\nDESCRIPTION: Required code change to update the Android MainActivity.java file to use the name 'main' in the getMainComponentName function when not using Expo Prebuild.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/register-root-component.mdx#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n  @Override\n  protected String getMainComponentName() {\n+    return \"main\";\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Metro Cache Stores for Tailwind CSS (JavaScript)\nDESCRIPTION: This code snippet shows how to configure Metro cache stores to support Tailwind CSS in an Expo project, extending the Expo FileStore superclass.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/tailwind.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst { FileStore } = require('@expo/metro-config/file-store');\n\nconfig.cacheStores = [\n  new FileStore({\n    root: '/path/to/custom/cache',\n  }),\n];\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Step Run Configuration YAML\nDESCRIPTION: Defines the shell command to execute within the step. The `run` property contains the command string.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/workflows/syntax.mdx#_snippet_41\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  my_job:\n    steps:\n      # @info #\n      - run: echo \"Hello World\"\n        # @end #\n```\n\n----------------------------------------\n\nTITLE: CSS Implementation for Safe Area Insets\nDESCRIPTION: Example of using CSS environment variables to handle safe area insets in web applications (shown as part of the migration guide).\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/safe-area-context.mdx#2025-04-22_snippet_6\n\nLANGUAGE: css\nCODE:\n```\ndiv {\n  padding-top: env(safe-area-inset-top);\n  padding-left: env(safe-area-inset-left);\n  padding-bottom: env(safe-area-inset-bottom);\n  padding-right: env(safe-area-inset-right);\n}\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Runtime Version Policy\nDESCRIPTION: Illustrates how to configure a platform-specific runtime version policy that follows the app version.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/runtime-versions.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"android\": {\n      \"runtimeVersion\": {\n        \"policy\": \"appVersion\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Opening Android project in Android Studio\nDESCRIPTION: Command for opening the native Android project in Android Studio for advanced debugging and configuration. This provides full access to native debugging tools.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/more/expo-cli.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ open -a /Applications/Android Studio.app android\n```\n\n----------------------------------------\n\nTITLE: Using Legacy FileSystem API with expo-file-system/next in TypeScript\nDESCRIPTION: Shows how to use the legacy FileSystem API alongside the new object-oriented API. This example accesses a file created with the new API using the older methods.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/filesystem-next.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as FileSystem from 'expo-file-system';\nimport { File, Paths } from 'expo-file-system/next';\n\ntry {\n  const file = new File(Paths.cache, 'example.txt');\n  const content = await FileSystem.readAsStringAsync(file.uri);\n  console.log(content);\n} catch (error) {\n  console.error(error);\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Font Loading Example with React Native\nDESCRIPTION: A complete example showing how to load a custom font in a React Native application using the useFonts hook from expo-font. It demonstrates proper font loading with splash screen handling until fonts are ready.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/font.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n/* @info Import useFonts hook from 'expo-font'. */ import { useFonts } from 'expo-font'; /* @end */\n/* @info Also, import SplashScreen so that when the fonts are not loaded, we can continue to show SplashScreen. */ import * as SplashScreen from 'expo-splash-screen'; /* @end */\nimport { useEffect } from 'react';\nimport { Text, View, StyleSheet } from 'react-native';\n\n/* @info This prevents SplashScreen from auto hiding while the fonts are loaded. */\nSplashScreen.preventAutoHideAsync();\n/* @end */\n\nexport default function App() {\n  const [loaded, error] = useFonts({\n    'Inter-Black': require('./assets/fonts/Inter-Black.otf'),\n  });\n\n  useEffect(() => {\n    if (loaded || error) {\n      /* @info After the custom fonts have loaded, we can hide the splash screen and display the app screen. */\n      SplashScreen.hideAsync();\n      /* @end */\n    }\n  }, [loaded, error]);\n\n  if (!loaded && !error) {\n    return null;\n  }\n\n  return (\n    <View style={styles.container}>\n      <Text style={{ fontFamily: 'Inter-Black', fontSize: 30 }}>Inter Black</Text>\n      <Text style={{ fontSize: 30 }}>Platform Default</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Package.json for TV Support\nDESCRIPTION: Configuration for package.json to modify react-native dependency for TV support and exclude it from Expo install validation.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/building-for-tv.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"react-native\": \"npm:react-native-tvos\"\n  },\n  \"expo\": {\n    \"install\": {\n      \"exclude\": [\n        \"react-native\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS permissions for expo-av\nDESCRIPTION: Sets NSMicrophoneUsageDescription in Info.plist to access the microphone, essential for using audio features with expo-av in iOS. Requires prior setup of iOS project.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/av.mdx#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<key>NSMicrophoneUsageDescription</key>\n<string>Allow $(PRODUCT_NAME) to access your microphone</string>\n```\n\n----------------------------------------\n\nTITLE: Importing DevClient Module in React Native Project (JavaScript)\nDESCRIPTION: This snippet shows how to import all exports from the expo-dev-client library as the DevClient object in a JavaScript file. It is intended for use in React Native projects that include expo-dev-client as a dependency, and allows access to development tools exposed by the module. The import statement expects expo-dev-client to be installed and available in node_modules. No parameters are required. The output is an imported DevClient namespace, used in your app's source code. This relates to the API usage for interacting with custom development tools during app runtime.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/dev-client.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as DevClient from 'expo-dev-client';\n```\n\n----------------------------------------\n\nTITLE: Using useSafeAreaInsets Hook in Expo TypeScript\nDESCRIPTION: This example demonstrates how to use the useSafeAreaInsets hook to apply padding to a View component based on the safe area insets.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/user-interface/safe-areas.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Text, View } from 'react-native';\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\n\nexport default function HomeScreen() {\n  const insets = useSafeAreaInsets();\n\n  return (\n    <View style={{ flex: 1, paddingTop: insets.top }}>\n      <Text>Content is in safe area.</Text>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: iOS Notification Object Example\nDESCRIPTION: This JSON object represents the structure of a notification received on iOS when using addNotificationReceivedListener. It includes details about the notification trigger, content, and custom data.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/push-notifications/receiving-notifications.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"request\": {\n    \"trigger\": {\n      \"class\": \"UNPushNotificationTrigger\",\n      \"type\": \"push\",\n      \"payload\": {\n        \"experienceId\": \"@betoatexpo/expo-notifications-app\",\n        \"projectId\": \"51092087-87a4-4b12-8008-145625477434\",\n        \"scopeKey\": \"@betoatexpo/expo-notifications-app\",\n        \"aps\": {\n          \"thread-id\": \"\",\n          \"category\": \"\",\n          \"badge\": 1,\n          \"alert\": {\n            \"subtitle\": \"Hey there! How's your day going?\",\n            \"title\": \"Chat App\",\n            \"launch-image\": \"\",\n            \"body\": \"New message from John Doe\"\n          },\n          \"sound\": \"default\"\n        },\n        \"body\": {\n          \"messageId\": \"msg789\",\n          \"timestamp\": 1724766427,\n          \"messageType\": \"text\",\n          \"senderId\": \"user123\",\n          \"senderName\": \"John Doe\",\n          \"conversationId\": \"conversation-456\"\n        }\n      }\n    },\n    \"identifier\": \"3AEB849E-9059-4D09-BC3B-9A0B104CF062\",\n    \"content\": {\n      \"body\": \"New message from John Doe\",\n      \"sound\": \"default\",\n      \"launchImageName\": \"\",\n      \"badge\": 1,\n      \"subtitle\": \"Hey there! How's your day going?\",\n      \"title\": \"Chat App\",\n      \"data\": {\n        \"conversationId\": \"conversation-456\",\n        \"senderName\": \"John Doe\",\n        \"senderId\": \"user123\",\n        \"messageType\": \"text\",\n        \"timestamp\": 1724766427,\n        \"messageId\": \"msg789\"\n      },\n      \"summaryArgument\": null,\n      \"categoryIdentifier\": \"\",\n      \"attachments\": [],\n      \"interruptionLevel\": \"active\",\n      \"threadIdentifier\": \"\",\n      \"targetContentIdentifier\": null,\n      \"summaryArgumentCount\": 0\n    }\n  },\n  \"date\": 1724798493.0589335\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-localization in app.json\nDESCRIPTION: Configuration example for expo-localization using the built-in config plugin in app.json. This setup is needed when using EAS Build or running native builds with expo run commands.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/localization.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\"expo-localization\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Expo Router Root Layout Configuration\nDESCRIPTION: Example of the root layout configuration in Expo Router, which replaces the Stack.Navigator from React Navigation.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/migrate/from-react-navigation.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stack } from 'expo-router';\n\nexport default function RootLayout() {\n  return (\n    <Stack>\n      <Stack.Screen\n        name=\"(home)\"\n        options={\n          {\n            title: 'Home Screen',\n          }\n        }\n      />\n    </Stack>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AV Plugin in app.json\nDESCRIPTION: JSON configuration for the expo-av plugin, which allows setting permissions and other properties that require rebuilding the app to take effect. This example shows how to set a custom microphone permission message.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/av.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-av\",\n        {\n          \"microphonePermission\": \"Allow $(PRODUCT_NAME) to access your microphone.\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Package Interface for Application Lifecycle Listeners in Java\nDESCRIPTION: This snippet shows how to create a Package class that implements the createApplicationLifecycleListeners method to provide Application lifecycle listeners in Java.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/android-lifecycle-listeners.mdx#2025-04-22_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n// android/src/main/java/expo/modules/mylib/MyLibPackage.java\nimport android.content.Context;\n\nimport java.util.Collections;\nimport java.util.List;\n\nimport expo.modules.core.interfaces.ApplicationLifecycleListener;\nimport expo.modules.core.interfaces.Package;\n\npublic class MyLibPackage implements Package {\n  @Override\n  public List<? extends ApplicationLifecycleListener> createApplicationLifecycleListeners(Context context) {\n    return Collections.singletonList(new MyLibApplicationLifecycleListener());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Expo Asset Optimization\nDESCRIPTION: Command to optimize image assets using the expo-optimize tool, which utilizes the sharp library for image compression.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/optimize-assets.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo-optimize\n```\n\n----------------------------------------\n\nTITLE: Integrating EmojiSticker in Main App Component\nDESCRIPTION: Updates the main Index component to include emoji sticker functionality, image picking, and UI controls. Implements state management for selected images and emoji stickers with TypeScript type safety.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/create-a-modal.mdx#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { View, StyleSheet } from 'react-native';\nimport * as ImagePicker from 'expo-image-picker';\nimport { useState } from 'react';\nimport { type ImageSource } from 'expo-image';\n\nimport Button from '@/components/Button';\nimport ImageViewer from '@/components/ImageViewer';\nimport IconButton from '@/components/IconButton';\nimport CircleButton from '@/components/CircleButton';\nimport EmojiPicker from '@/components/EmojiPicker';\nimport EmojiList from '@/components/EmojiList';\nimport EmojiSticker from '@/components/EmojiSticker';\n\nconst PlaceholderImage = require('@/assets/images/background-image.png');\n\nexport default function Index() {\n  const [selectedImage, setSelectedImage] = useState<string | undefined>(undefined);\n  const [showAppOptions, setShowAppOptions] = useState<boolean>(false);\n  const [isModalVisible, setIsModalVisible] = useState<boolean>(false);\n  const [pickedEmoji, setPickedEmoji] = useState<ImageSource | undefined>(undefined);\n\n  const pickImageAsync = async () => {\n    let result = await ImagePicker.launchImageLibraryAsync({\n      mediaTypes: ['images'],\n      allowsEditing: true,\n      quality: 1,\n    });\n\n    if (!result.canceled) {\n      setSelectedImage(result.assets[0].uri);\n      setShowAppOptions(true);\n    } else {\n      alert('You did not select any image.');\n    }\n  };\n\n  const onReset = () => {\n    setShowAppOptions(false);\n  };\n\n  const onAddSticker = () => {\n    setIsModalVisible(true);\n  };\n\n  const onModalClose = () => {\n    setIsModalVisible(false);\n  };\n\n  const onSaveImageAsync = async () => {\n    // we will implement this later\n  };\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.imageContainer}>\n        <ImageViewer imgSource={PlaceholderImage} selectedImage={selectedImage} />\n        {pickedEmoji && <EmojiSticker imageSize={40} stickerSource={pickedEmoji} />}\n      </View>\n      {showAppOptions ? (\n        <View style={styles.optionsContainer}>\n          <View style={styles.optionsRow}>\n            <IconButton icon=\"refresh\" label=\"Reset\" onPress={onReset} />\n            <CircleButton onPress={onAddSticker} />\n            <IconButton icon=\"save-alt\" label=\"Save\" onPress={onSaveImageAsync} />\n          </View>\n        </View>\n      ) : (\n        <View style={styles.footerContainer}>\n          <Button theme=\"primary\" label=\"Choose a photo\" onPress={pickImageAsync} />\n          <Button label=\"Use this photo\" onPress={() => setShowAppOptions(true)} />\n        </View>\n      )}\n      <EmojiPicker isVisible={isModalVisible} onClose={onModalClose}>\n        <EmojiList onSelect={setPickedEmoji} onCloseModal={onModalClose} />\n      </EmojiPicker>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#25292e',\n    alignItems: 'center',\n  },\n  imageContainer: {\n    flex: 1,\n  },\n  footerContainer: {\n    flex: 1 / 3,\n    alignItems: 'center',\n  },\n  optionsContainer: {\n    position: 'absolute',\n    bottom: 80,\n  },\n  optionsRow: {\n    alignItems: 'center',\n    flexDirection: 'row',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Expo Sensors Plugin in app.json (JSON)\nDESCRIPTION: Example configuration for the `expo-sensors` plugin within the `expo.plugins` array in `app.json`. It demonstrates setting the `motionPermission` property, which customizes the permission prompt message shown to the user on iOS when the app requests access to device motion data.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/sensors.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n```json app.json\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-sensors\",\n        {\n          \"motionPermission\": \"Allow $(PRODUCT_NAME) to access your device motion\"\n        }\n      ]\n    ]\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Enhanced Android Theme Module with SharedPreferences\nDESCRIPTION: Complete Android implementation with SharedPreferences for persistent theme storage and event emission.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/native-module-tutorial.mdx#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\npackage expo.modules.settings\n\nimport android.content.Context\nimport android.content.SharedPreferences\nimport androidx.core.os.bundleOf\nimport expo.modules.kotlin.modules.Module\nimport expo.modules.kotlin.modules.ModuleDefinition\n\nclass ExpoSettingsModule : Module() {\n  override fun definition() = ModuleDefinition {\n    Name(\"ExpoSettings\")\n\n    Events(\"onChangeTheme\")\n\n    Function(\"setTheme\") { theme: String ->\n      getPreferences().edit().putString(\"theme\", theme).commit()\n      this@ExpoSettingsModule.sendEvent(\"onChangeTheme\", bundleOf(\"theme\" to theme))\n    }\n\n    Function(\"getTheme\") {\n      return@Function getPreferences().getString(\"theme\", \"system\")\n    }\n  }\n\n  private val context\n  get() = requireNotNull(appContext.reactContext)\n\n  private fun getPreferences(): SharedPreferences {\n    return context.getSharedPreferences(context.packageName + \".settings\", Context.MODE_PRIVATE)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Clipboard Module in JavaScript\nDESCRIPTION: Shows how to import the expo-clipboard module in a JavaScript file. The code is accompanied by a warning about potential browser compatibility issues when using the AsyncClipboard API on web platforms.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/clipboard.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as Clipboard from 'expo-clipboard';\n```\n\n----------------------------------------\n\nTITLE: Creating Read-Only Properties in Kotlin\nDESCRIPTION: Defines a read-only property on the JavaScript module object using a getter closure. The property value is computed when accessed from JavaScript.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/module-api.mdx#2025-04-22_snippet_15\n\nLANGUAGE: kotlin\nCODE:\n```\nProperty(\"foo\") {\n  return@Property \"bar\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Scoped Storage for Android\nDESCRIPTION: XML configuration for Android manifest to make expo-media-library work with scoped storage by setting requestLegacyExternalStorage.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/media-library.mdx#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<manifest ... >\n  <application android:requestLegacyExternalStorage=\"true\" ...>\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Updated Plugin Configuration with API Key\nDESCRIPTION: JSON configuration showing how to pass API key to the plugin in app.json.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/config-plugin-and-native-module-tutorial.mdx#2025-04-22_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [[\"../app.plugin.js\", { \"apiKey\": \"custom_secret_api\" }]]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Client Button Component\nDESCRIPTION: Simple client-side button component implementation\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/server-components.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\nimport { Text } from 'react-native';\n\nexport default function Button({ title }) {\n  return <Text onPress={() => {}}>{title}</Text>;\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing EAS Update Command\nDESCRIPTION: Terminal command for publishing an update to a specific channel with an update message using EAS CLI.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/migrate-from-classic-updates.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ eas update --channel [channel-name] --message [message]\n\n# Example\n$ eas update --channel production --message \"Fixes typo\"\n```\n\n----------------------------------------\n\nTITLE: Launching Android Location Settings Intent with Expo\nDESCRIPTION: Example showing how to import and use startActivityAsync to open Android location settings using the ActivityAction enum.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/intent-launcher.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { startActivityAsync, ActivityAction } from 'expo-intent-launcher';\n\n// Open location settings\nstartActivityAsync(ActivityAction.LOCATION_SOURCE_SETTINGS);\n```\n\n----------------------------------------\n\nTITLE: Exporting Platform-Specific Component in Expo Router\nDESCRIPTION: Shows how to export a platform-specific component from the components directory to be used as a screen in the app directory. This pattern allows for platform-specific implementations while maintaining universal routes.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/advanced/platform-specific-modules.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport { default } from '../components/about';\n```\n\n----------------------------------------\n\nTITLE: API Origin Configuration\nDESCRIPTION: Configuration for setting the API endpoint origin in production environments.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/reference/api-routes.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    [\n      \"expo-router\",\n      {\n        \"origin\": \"https://evanbacon.dev/\"\n      }\n    ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Asset from expo-asset\nDESCRIPTION: Example of importing the Asset class from the expo-asset package, which is the main interface for working with assets in an Expo application.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/asset.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Asset } from 'expo-asset';\n```\n\n----------------------------------------\n\nTITLE: ESLint Ignore Configuration\nDESCRIPTION: Configuration for ignoring specific files and directories in ESLint processing.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/using-eslint.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n/.expo\nnode_modules\n```\n\n----------------------------------------\n\nTITLE: Complete Changelog in Markdown\nDESCRIPTION: Markdown formatted changelog documenting version history, breaking changes, new features, bug fixes and other changes for the Expo project. Key updates include Metro config changes, webpack config additions, and various dependency updates.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-yarn-workspaces/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Changelog\n\n## Unpublished\n\n### 🛠 Breaking changes\n\n### 🎉 New features\n\n### 🐛 Bug fixes\n\n### 💡 Others\n\n## 2.3.1 - 2023-12-19\n\n_This version does not introduce any user-facing changes._\n\n## 2.3.0 — 2023-12-12\n\n### 🎉 New features\n\n- Delete custom `resolver.extraNodeModules` in favor of the default symlinks support in Metro v0.79.0.\n\n### 💡 Others\n\n- Remove deprecated Metro `resolver.providesModuleNodeModules` field.\n- Remove additional `cjs` in `sourceExts` in favor of upstream `expo/metro-config` version.\n- Remove `watchFolders` in favor of upstream `expo/metro-config` version.\n```\n\n----------------------------------------\n\nTITLE: Importing Expo Config Types\nDESCRIPTION: TypeScript example showing how to import configuration types from expo/config.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/config-plugins/development-and-debugging.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ExpoConfig, ConfigContext } from 'expo/config';\n```\n\n----------------------------------------\n\nTITLE: Importing Google authentication provider from AuthSession\nDESCRIPTION: Import statement for using the Google authentication provider from the AuthSession package, which includes specialized functionality for Google OAuth.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/auth-session.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Google from 'expo-auth-session/providers/google';\n```\n\n----------------------------------------\n\nTITLE: Creating Circular Button Component in React Native\nDESCRIPTION: Implementation of a circular button component with a plus icon using MaterialIcons from expo/vector-icons. The component uses StyleSheet for styling and includes container and button styling with specific dimensions and border properties.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/create-a-modal.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { View, Pressable, StyleSheet } from 'react-native';\nimport MaterialIcons from '@expo/vector-icons/MaterialIcons';\n\ntype Props = {\n  onPress: () => void;\n};\n\nexport default function CircleButton({ onPress }: Props) {\n  return (\n    <View style={styles.circleButtonContainer}>\n      <Pressable style={styles.circleButton} onPress={onPress}>\n        <MaterialIcons name=\"add\" size={38} color=\"#25292e\" />\n      </Pressable>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  circleButtonContainer: {\n    width: 84,\n    height: 84,\n    marginHorizontal: 60,\n    borderWidth: 4,\n    borderColor: '#ffd33d',\n    borderRadius: 42,\n    padding: 3,\n  },\n  circleButton: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderRadius: 42,\n    backgroundColor: '#fff',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Animated Image Component for Gestures\nDESCRIPTION: Replaces standard Image component with Animated.Image to enable gesture animations on the emoji sticker component.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/gestures.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { View } from 'react-native';\nimport Animated from 'react-native-reanimated';\nimport { type ImageSource } from 'expo-image';\n\ntype Props = {\n  imageSize: number;\n  stickerSource: ImageSource;\n};\n\nexport default function EmojiSticker({ imageSize, stickerSource }: Props) {\n  return (\n    <View style={{ top: -350 }}>\n      <Animated.Image\n        source={stickerSource}\n        resizeMode=\"contain\"\n        style={{ width: imageSize, height: imageSize }}\n      />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS (JavaScript)\nDESCRIPTION: This code configures Tailwind CSS by specifying the content paths for the utility classes. It should be placed in the tailwind.config.js file in the root of your Expo project.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/tailwind.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\n    './app/**/*.{js,tsx,ts,jsx}',\n  ],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Documentation Link Component using React/JSX\nDESCRIPTION: This JSX snippet renders a BoxLink component to guide users to the official react-native-screens documentation. It leverages React component props (title, description, Icon, and href), so dependencies include the BoxLink component and the BookOpen02Icon. Inputs should satisfy these prop requirements. The output is a styled, interactive documentation link inside a React-powered UI. Component usage assumes the presence of a React renderer and related build setup.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/screens.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<BoxLink\n  title=\"Visit official documentation\"\n  description=\"Get full information on API and its usage.\"\n  Icon={BookOpen02Icon}\n  href=\"https://docs.swmansion.com/react-native-screens/\"\n/>\n```\n\n----------------------------------------\n\nTITLE: EAS Build Configuration\nDESCRIPTION: Initial eas.json configuration defining development and production build profiles.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/build-reference/variants.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"development\": {\n      \"developmentClient\": true\n    },\n    \"production\": {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment for EAS Build Jobs in eas.json\nDESCRIPTION: JSON configuration in eas.json to set specific environments for different build profiles in EAS Build. This determines which environment variables will be available during the build process.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/environment-variables.mdx#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"development\": {\n      \"environment\": \"development\"\n    },\n    \"preview\": {\n      \"environment\": \"preview\"\n    },\n    \"production\": {\n      \"environment\": \"production\"\n    },\n    \"my-profile\": {\n      \"environment\": \"production\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: iOS-specific credentials.json Configuration\nDESCRIPTION: Configuration specific to iOS certificates in credentials.json\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/app-signing/local-credentials.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"android\": {\n    /* @hide ... */\n    /* @end */\n  },\n  \"ios\": {\n    \"provisioningProfilePath\": \"ios/certs/profile.mobileprovision\",\n    \"distributionCertificate\": {\n      \"path\": \"ios/certs/dist.p12\",\n      \"password\": \"DISTRIBUTION_CERTIFICATE_PASSWORD\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding NSUserTrackingUsageDescription to Info.plist\nDESCRIPTION: Example of adding the NSUserTrackingUsageDescription key to the Info.plist file for iOS projects.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/tracking-transparency.mdx#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<key>NSUserTrackingUsageDescription</key>\n<string>Your custom usage description string here.</string>\n```\n\n----------------------------------------\n\nTITLE: Dynamic React Native Path Resolution in Android build.gradle\nDESCRIPTION: Dynamic path resolution using Node's require.resolve() to find the location of react.gradle in Android build files. This approach works in monorepos by dynamically resolving the package location instead of using hardcoded paths.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/monorepos.mdx#2025-04-22_snippet_11\n\nLANGUAGE: groovy\nCODE:\n```\napply from: new File([\"node\", \"--print\", \"require.resolve('react-native/package.json')\"].execute(null, rootDir).text.trim(), \"../react.gradle\")\n```\n\n----------------------------------------\n\nTITLE: Customizing expo-image-picker plugin configuration\nDESCRIPTION: Example JSON configuration demonstrating how to customize permissions for the expo-image-picker plugin in the app.json file.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-image-picker/README.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-image-picker\",\n        {\n          \"photosPermission\": \"custom photos permission\",\n          \"cameraPermission\": \"Allow $(PRODUCT_NAME) to open the camera\",\n\n          \"//\": \"Disables the microphone permission\",\n          \"microphonePermission\": false\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring credentials.json for Android and iOS\nDESCRIPTION: Basic structure of credentials.json file that specifies paths and passwords for Android keystore and iOS certificates\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/app-signing/local-credentials.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"android\": {\n    \"keystore\": {\n      \"keystorePath\": \"android/keystores/release.keystore\",\n      \"keystorePassword\": \"paofohlooZ9e\",\n      \"keyAlias\": \"keyalias\",\n      \"keyPassword\": \"aew1Geuthoev\"\n    }\n  },\n  \"ios\": {\n    \"provisioningProfilePath\": \"ios/certs/profile.mobileprovision\",\n    \"distributionCertificate\": {\n      \"path\": \"ios/certs/dist-cert.p12\",\n      \"password\": \"iex3shi9Lohl\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing FileSystem Module in Expo\nDESCRIPTION: Basic import statement for the FileSystem module in Expo applications. This is the standard way to include the FileSystem API in your project.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/filesystem.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as FileSystem from 'expo-file-system';\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions EAS Build Configuration\nDESCRIPTION: GitHub Actions workflow configuration that sets up Node.js and Expo environments to trigger EAS builds.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/build/building-on-ci.mdx#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nname: EAS Build\non:\n  workflow_dispatch:\n  push:\n    branches:\n      - main\njobs:\n  build:\n    name: Install and build\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-node@v4\n        with:\n          node-version: 18.x\n          cache: npm\n      - name: Setup Expo and EAS\n        uses: expo/expo-github-action@v8\n        with:\n          eas-version: latest\n          token: ${{ secrets.EXPO_TOKEN }}\n      - name: Install dependencies\n        run: npm ci\n      - name: Build on EAS\n        run: eas build --platform all --non-interactive --no-wait\n```\n\n----------------------------------------\n\nTITLE: Defining Trigger Events with 'on' in YAML\nDESCRIPTION: This snippet shows how to configure the `on` key in a YAML file to define which GitHub events trigger the EAS workflow. It includes examples for `push` and `pull_request` events, specifying branches to monitor.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/workflows/syntax.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  # Trigger on pushes to main branch\n  push:\n    branches:\n      - main\n  # And on pull requests starting with 'version-'\n  pull_request:\n    branches:\n      - version-*\n```\n\n----------------------------------------\n\nTITLE: Implementing 404 Not Found Screen in Expo Router\nDESCRIPTION: Creates a 404 error handling screen that displays when routes don't match. Includes navigation back to home screen and custom styling.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/file-based-routing.mdx#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Link, Stack } from 'expo-router';\nimport { View, StyleSheet } from 'react-native';\n\nexport default function NotFoundScreen() {\n  return (\n    <>\n      <Stack.Screen options={{ title: \"Oops! This screen doesn't exist.\" }} />\n      <View style={styles.container}>\n        <Link href=\"/\">Go to home screen</Link>\n      </View>\n    </>\n  );\n}\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Images in EAS JSON\nDESCRIPTION: Configuration for specifying Android and iOS build images in eas.json file. Sets both platforms to use the 'latest' build image for development profile builds.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/eas/using-github.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"development\": {\n      \"android\": {\n        \"image\": \"latest\"\n      },\n      \"ios\": {\n        \"image\": \"latest\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Components in MDX/JavaScript\nDESCRIPTION: This snippet imports the `APIInstallSection` and `PlatformsSection` React components from relative paths within the project's component library (`~/components/plugins/...`). These components are likely used to render standardized sections for API installation instructions and platform compatibility information within the MDX documentation page.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/gesture-handler.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { APIInstallSection } from '~/components/plugins/InstallSection';\nimport PlatformsSection from '~/components/plugins/PlatformsSection';\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Repository for Expo Camera in build.gradle (Android)\nDESCRIPTION: Adds the necessary Maven repository path to the project's root `android/build.gradle` file within the `allprojects` block. This is required for projects not using CNG because `expo-camera` includes a custom `cameraview` dependency located within its `node_modules` directory. This ensures the native build system can find the dependency.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/camera-next.mdx#2025-04-22_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\n```groovy\nallprojects {\n  repositories {\n      // * Your other repositories here *\n      // * Add a new maven block after other repositories / blocks *\n      maven {\n          // expo-camera bundles a custom com.google.android:cameraview\n          url \"$rootDir/../node_modules/expo-camera/android/maven\"\n      }\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Android Auto Backup Exclusion Rules (Android 11 and below, XML)\nDESCRIPTION: This full-backup-content XML snippet configures backup settings for Android 11 and earlier, explicitly excluding SecureStore shared preferences from being backed up. This is critical for keeping cryptographic material out of cloud/device backup scopes, preventing restore errors or security issues after uninstallation. Add this inside your Android project's root XML backup configuration.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/securestore.mdx#2025-04-22_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<!--  Auto Backup configuration for Android 11 and lower -->\\n<full-backup-content>\\n  <include domain=\\\"sharedpref\\\" path=\\\".\\\"/>\\n  <exclude domain=\\\"sharedpref\\\" path=\\\"SecureStore\\\"/>\\n</full-backup-content>\n```\n\n----------------------------------------\n\nTITLE: Configuring Update Channels in Android Native Project\nDESCRIPTION: XML snippet showing how to add update channel configuration to the AndroidManifest.xml file for projects not using Continuous Native Generation.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/getting-started.mdx#2025-04-22_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<meta-data android:name=\"expo.modules.updates.UPDATES_CONFIGURATION_REQUEST_HEADERS_KEY\" android:value=\"{&quot;expo-channel-name&quot;:&quot;your-channel-name&quot;}\"/>\n```\n\n----------------------------------------\n\nTITLE: Creating Read-Only Properties in Swift\nDESCRIPTION: Defines a read-only property on the JavaScript module object using a getter closure. This creates a property that can be accessed but not modified from JavaScript.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/module-api.mdx#2025-04-22_snippet_14\n\nLANGUAGE: swift\nCODE:\n```\nProperty(\"foo\") {\n  return \"bar\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PostCSS in Expo Projects\nDESCRIPTION: This JSON snippet shows how to configure PostCSS in an Expo project by adding a postcss.config.json file.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/config/metro.mdx#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": {\n    \"autoprefixer\": {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Giphy GIFs using FileSystem in Expo\nDESCRIPTION: A TypeScript implementation for managing GIF files in a React Native app using expo-file-system. It includes functions to check and create directories, download multiple GIFs, retrieve local GIFs, get shareable URIs, and delete GIF files.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/filesystem.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as FileSystem from 'expo-file-system';\n\nconst gifDir = FileSystem.cacheDirectory + 'giphy/';\nconst gifFileUri = (gifId: string) => gifDir + `gif_${gifId}_200.gif`;\nconst gifUrl = (gifId: string) => `https://media1.giphy.com/media/${gifId}/200.gif`;\n\n// Checks if gif directory exists. If not, creates it\nasync function ensureDirExists() {\n  const dirInfo = await FileSystem.getInfoAsync(gifDir);\n  if (!dirInfo.exists) {\n    console.log(\"Gif directory doesn't exist, creating…\");\n    await FileSystem.makeDirectoryAsync(gifDir, { intermediates: true });\n  }\n}\n\n// Downloads all gifs specified as array of IDs\nexport async function addMultipleGifs(gifIds: string[]) {\n  try {\n    await ensureDirExists();\n\n    console.log('Downloading', gifIds.length, 'gif files…');\n    await Promise.all(gifIds.map(id => FileSystem.downloadAsync(gifUrl(id), gifFileUri(id))));\n  } catch (e) {\n    console.error(\"Couldn't download gif files:\", e);\n  }\n}\n\n// Returns URI to our local gif file\n// If our gif doesn't exist locally, it downloads it\nexport async function getSingleGif(gifId: string) {\n  await ensureDirExists();\n\n  const fileUri = gifFileUri(gifId);\n  const fileInfo = await FileSystem.getInfoAsync(fileUri);\n\n  if (!fileInfo.exists) {\n    console.log(\"Gif isn't cached locally. Downloading…\");\n    await FileSystem.downloadAsync(gifUrl(gifId), fileUri);\n  }\n\n  return fileUri;\n}\n\n// Exports shareable URI - it can be shared outside your app\nexport async function getGifContentUri(gifId: string) {\n  return FileSystem.getContentUriAsync(await getSingleGif(gifId));\n}\n\n// Deletes whole giphy directory with all its content\nexport async function deleteAllGifs() {\n  console.log('Deleting all GIF files…');\n  await FileSystem.deleteAsync(gifDir);\n}\n```\n\n----------------------------------------\n\nTITLE: Using StatusBar Component in React Native App\nDESCRIPTION: Example showing how to implement a StatusBar with light text style in a basic React Native application with dark background. The code demonstrates setting up a container view with styled text and StatusBar configuration.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/status-bar.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { StyleSheet, Text, View } from 'react-native';\nimport { StatusBar } from 'expo-status-bar';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.text}>Notice that the status bar has light text!</Text>\n      <StatusBar style=\"light\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#000',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  text: {\n    color: '#fff',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Facebook authentication provider from AuthSession\nDESCRIPTION: Import statement for using the Facebook authentication provider from the AuthSession package, which includes specialized functionality for Facebook OAuth.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/auth-session.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Facebook from 'expo-auth-session/providers/facebook';\n```\n\n----------------------------------------\n\nTITLE: Importing Heading Components in Expo\nDESCRIPTION: Shows how to import all heading components (H1-H6) from @expo/html-elements package.\nSOURCE: https://github.com/expo/expo/blob/main/packages/html-elements/README.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { H1, H2, H3, H4, H5, H6 } from '@expo/html-elements';\n```\n\n----------------------------------------\n\nTITLE: Setting Up View Reference for Screenshot Capture\nDESCRIPTION: Creates a reference to capture view contents and configures view wrapper components for screenshot functionality using react-native-view-shot.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/screenshot.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState, useRef } from 'react';\nimport { captureRef } from 'react-native-view-shot';\n\nexport default function Index() {\n  const imageRef = useRef<View>(null);\n\n  return (\n    <GestureHandlerRootView style={styles.container}>\n      <View style={styles.imageContainer}>\n        <View ref={imageRef} collapsable={false}>\n          <ImageViewer imgSource={PlaceholderImage} selectedImage={selectedImage} />\n          {pickedEmoji && <EmojiSticker imageSize={40} stickerSource={pickedEmoji} />}\n        </View>\n      </View>\n    </GestureHandlerRootView>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-asset Plugin\nDESCRIPTION: Configuration for expo-asset plugin in app.json to embed static assets at build time\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/user-interface/assets.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-asset\",\n        {\n          \"assets\": [\"./assets/images/example.png\"]\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Automated EAS Android Build and Submit Command\nDESCRIPTION: Command to automatically build and submit an Android app to the Google Play Store using the --auto-submit flag with EAS build.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/eas/android-production-build.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ eas build --platform android --auto-submit\n```\n\n----------------------------------------\n\nTITLE: Installing Expo SMS Module via npm\nDESCRIPTION: Demonstrates how to add the Expo SMS module to your npm dependencies using the `npx expo install` command. Intended for use within managed Expo projects and bare React Native setups. Ensures the Expo SMS package is added to your project's dependencies.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-sms/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-sms\n```\n\n----------------------------------------\n\nTITLE: Basic Brightness Usage Example in React Native\nDESCRIPTION: A React Native component demonstrating how to request brightness permissions and set the system brightness to maximum (1) when permission is granted.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/brightness.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEffect } from 'react';\nimport { StyleSheet, View, Text } from 'react-native';\nimport * as Brightness from 'expo-brightness';\n\nexport default function App() {\n  useEffect(() => {\n    (async () => {\n      const { status } = await Brightness.requestPermissionsAsync();\n      if (status === 'granted') {\n        Brightness.setSystemBrightnessAsync(1);\n      }\n    })();\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <Text>Brightness Module Example</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Expo Router in app.json\nDESCRIPTION: This snippet shows how to configure Expo Router in the app.json file of a project created with the default Expo template. The config plugin for expo-router is automatically added as a plugin in the Expo configuration.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/router.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\"expo-router\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Android Native Module Implementation in Kotlin\nDESCRIPTION: Kotlin implementation for reading custom API key from AndroidManifest.xml metadata.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/config-plugin-and-native-module-tutorial.mdx#2025-04-22_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\npackage expo.modules.nativeconfiguration\n\nimport expo.modules.kotlin.modules.Module\nimport expo.modules.kotlin.modules.ModuleDefinition\nimport android.content.pm.PackageManager\n\nclass ExpoNativeConfigurationModule() : Module() {\n  override fun definition() = ModuleDefinition {\n    Name(\"ExpoNativeConfiguration\")\n\n    Function(\"getApiKey\") {\n      val applicationInfo = appContext?.reactContext?.packageManager?.getApplicationInfo(appContext?.reactContext?.packageName.toString(), PackageManager.GET_META_DATA)\n\n      return@Function applicationInfo?.metaData?.getString(\"MY_CUSTOM_API_KEY\")\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a new Expo project with Yarn\nDESCRIPTION: Command to create a new Expo project using Yarn package manager. This will prompt for an app name after execution.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/more/create-expo.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn create expo-app\n```\n\n----------------------------------------\n\nTITLE: Importing SVG Components from react-native-svg\nDESCRIPTION: Basic import statement for accessing SVG components from the react-native-svg library\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/svg.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Svg from 'react-native-svg';\n```\n\n----------------------------------------\n\nTITLE: Starting Expo Development Server with Atlas\nDESCRIPTION: Commands to start the Expo development server with Atlas enabled for bundle analysis.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/analyzing-bundles.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Start the local development server with Atlas\n$ EXPO_UNSTABLE_ATLAS=true npx expo start\n```\n\n----------------------------------------\n\nTITLE: Importing SMS Module in JavaScript\nDESCRIPTION: This snippet demonstrates how to import the SMS module from the expo-sms package to access SMS functionality in an Expo app.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/sms.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as SMS from 'expo-sms';\n```\n\n----------------------------------------\n\nTITLE: Creating a Server to Handle File Uploads from Expo FileSystem\nDESCRIPTION: Node.js server implementation using Express to handle file uploads from Expo applications. Shows handling binary uploads via direct pipe and multipart form uploads using multer middleware.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/filesystem.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst express = require('express');\nconst app = express();\nconst fs = require('fs');\nconst multer = require('multer');\nconst upload = multer({ dest: 'uploads/' });\n\n// This method will save the binary content of the request as a file.\napp.patch('/binary-upload', (req, res) => {\n  req.pipe(fs.createWriteStream('./uploads/image' + Date.now() + '.png'));\n  res.end('OK');\n});\n\n// This method will save a \"photo\" field from the request as a file.\napp.patch('/multipart-upload', upload.single('photo'), (req, res) => {\n  // You can access other HTTP parameters. They are located in the body object.\n  console.log(req.body);\n  res.end('OK');\n});\n\napp.listen(3000, () => {\n  console.log('Working on port 3000');\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint for React Compiler\nDESCRIPTION: ESLint configuration to include the React Compiler plugin and enforce related rules.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/react-compiler.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  extends: 'expo',\n  plugins: ['eslint-plugin-react-compiler'],\n  rules: {\n    'react-compiler/react-compiler': 'error',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Importing the Network Module in JavaScript\nDESCRIPTION: Basic import statement for accessing the expo-network module in a JavaScript project. This is the first step to access device network information like IP address, MAC address, and airplane mode status.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/network.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Network from 'expo-network';\n```\n\n----------------------------------------\n\nTITLE: Wrapping FlatList with BlurView for Correct Render Order - JSX\nDESCRIPTION: This brief snippet demonstrates correct render order by placing BlurView after dynamic content such as FlatList within a parent View in React Native. Doing so ensures that the blur effect is applied to all content rendered before the BlurView, which addresses a known issue where the effect does not update if BlurView is rendered before dynamic content. No dependencies beyond react-native and expo-blur are required. This structural guidance is important for reliable UI rendering with dynamic lists.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/blur-view.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<View>\\n  <FlatList />\\n  <BlurView />\\n</View>\n```\n\n----------------------------------------\n\nTITLE: Generating QR Code for Expo Development Client\nDESCRIPTION: This URL is used to generate a QR code that can be scanned to load a specific update in a development build, including the app scheme and update manifest URL.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/development-builds/development-workflows.mdx#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nhttps://qr.expo.dev/development-client?appScheme=exp%2Bapps-slug&url=https%3A%2F%2Fu.expo.dev%2FF767ADF57-B487-4D8F-9522-85549C39F43F0%3Fchannel-name%3Dmain\n```\n\n----------------------------------------\n\nTITLE: Using Tailwind CSS with React DOM Elements (TypeScript)\nDESCRIPTION: This example demonstrates how to use Tailwind CSS classes with React DOM elements in an Expo project.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/tailwind.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport default function Index() {\n  return (\n    <div className=\"bg-slate-100 rounded-xl\">\n      <p className=\"text-lg font-medium\">Welcome to Tailwind</p>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Warning Message for Dynamic Config in Expo Install\nDESCRIPTION: Example of the warning message shown when attempting to automatically add plugins to a dynamic app.config.js file. Shows the manual configuration that needs to be added.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/config-plugins/development-and-debugging.mdx#2025-04-22_snippet_20\n\nLANGUAGE: sh\nCODE:\n```\nCannot automatically write to dynamic config at: app.config.js\nPlease add the following to your app config\n\n{\n  \"plugins\": [\n    \"expo-camera\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Correct Environment Variable Usage in JavaScript for Expo\nDESCRIPTION: This snippet demonstrates the correct way to access environment variables in Expo projects. It directly accesses the variable from process.env without destructuring, ensuring proper inlining at build time.\nSOURCE: https://github.com/expo/expo/blob/main/packages/eslint-plugin-expo/docs/rules/no-env-var-destructuring.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst myVar = process.env.MY_VAR;\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest for React Server Components in Expo\nDESCRIPTION: Creates a Jest configuration file for testing React Server Components in Expo projects. This preset includes runners for Android, iOS, and web platforms.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/testing-rsc.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = require('jest-expo/rsc/jest-preset');\n```\n\n----------------------------------------\n\nTITLE: Customizing Babel Configuration for Metro Transformation in Expo\nDESCRIPTION: Configuration for babel.config.js that demonstrates how to customize transformations based on platform, engine, environment, and development status. The example shows how to use the API caller object to detect these conditions and modify the Babel configuration accordingly.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/config/metro.mdx#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = function (api) {\n  // Get the platform that Expo CLI is transforming for.\n  const platform = api.caller(caller => (caller ? caller.platform : 'ios'));\n\n  // Detect if the bundling operation is for Hermes engine or not, e.g. `'hermes'` | `undefined`.\n  const engine = api.caller(caller => (caller ? caller.engine : null));\n\n  // Is bundling for a server environment, e.g. API Routes.\n  const isServer = api.caller(caller => (caller ? caller.isServer : false));\n\n  // Is bundling for development or production.\n  const isDev = api.caller(caller =>\n    caller\n      ? caller.isDev\n      : process.env.BABEL_ENV === 'development' || process.env.NODE_ENV === 'development'\n  );\n\n  // Ensure the config is not cached otherwise the platform will not be updated.\n  api.cache(false);\n  // You can alternatively provide a more robust CONFIG cache invalidation:\n  // api.cache.invalidate(() => platform);\n\n  return {\n    presets: ['babel-preset-expo'],\n    plugins: [\n      // Add a plugin based on the platform...\n      platform === 'web' && 'my-plugin',\n\n      // Ensure you filter out falsy values.\n    ].filter(Boolean),\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Running the app on Android emulator with Expo\nDESCRIPTION: This command builds and runs the application on a connected Android emulator or device. It triggers a development server after building the app, eliminating the need to run `npx expo start` separately.\nSOURCE: https://github.com/expo/expo/blob/main/docs/scenes/get-started/set-up-your-environment/instructions/androidSimulatedDevelopmentBuildLocal.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ npx expo run:android\n```\n\n----------------------------------------\n\nTITLE: Importing react-native-svg in JavaScript\nDESCRIPTION: Demonstrates how to import all components from the react-native-svg library.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/svg.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Svg from 'react-native-svg';\n```\n\n----------------------------------------\n\nTITLE: Adding Platform-Specific Mods to app.config.js\nDESCRIPTION: Demonstrates how to add platform-specific mods to the app.config.js file for iOS and Android.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/config-plugins/plugins-and-mods.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  name: 'my-app',\n  mods: {\n    ios: {\n      /* iOS mods... */\n    },\n    android: {\n      /* Android mods... */\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Importing the expo-device Module in JavaScript\nDESCRIPTION: This code snippet demonstrates how to import the entire `expo-device` module in a JavaScript file. All functions and constants exported by the library become accessible as properties of the `Device` object (e.g., `Device.manufacturer`, `Device.modelName`).\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/device.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as Device from 'expo-device';\n```\n\n----------------------------------------\n\nTITLE: Installing expo-dev-client with npx\nDESCRIPTION: This command installs the expo-dev-client package in your project. This allows you to run development builds directly on your iOS device. It's a prerequisite to running the project on your iOS device using the `expo run:ios` command.\nSOURCE: https://github.com/expo/expo/blob/main/docs/scenes/get-started/set-up-your-environment/instructions/iosPhysicalDevelopmentBuildLocal.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo install expo-dev-client\n```\n\n----------------------------------------\n\nTITLE: Example React Native App Implementation\nDESCRIPTION: Example usage of the RadialChart component in a React Native application, demonstrating how to render a pie chart with three colored slices.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/third-party-library.mdx#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ExpoRadialChartView } from 'expo-radial-chart';\nimport { StyleSheet } from 'react-native';\n\nexport default function App() {\n  return (\n    <ExpoRadialChartView\n      style={styles.container}\n      data={[\n        {\n          color: '#ff0000',\n          percentage: 0.5,\n        },\n        {\n          color: '#00ff00',\n          percentage: 0.2,\n        },\n        {\n          color: '#0000ff',\n          percentage: 0.3,\n        },\n      ]}\n    />\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Web Camera in Chrome with HTML Iframe\nDESCRIPTION: Shows HTML code for enabling camera access within an iframe in Chrome versions 64 and above. It demonstrates how to permit camera and microphone access by setting the appropriate allow attribute in the iframe.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/camera.mdx#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<iframe src=\"...\" allow=\"microphone; camera;\">\n  <!-- <CameraView /> -->\n</iframe>\n```\n\n----------------------------------------\n\nTITLE: Exporting an Expo Config Object Using @expo/config-types (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates how to import the ExpoConfig type from @expo/config-types and export a default function that returns an Expo configuration object. The config includes basic fields such as name and slug. There are no additional dependencies besides @expo/config-types and a TypeScript environment; the function expects no arguments and outputs a compliant ExpoConfig object.\nSOURCE: https://github.com/expo/expo/blob/main/packages/@expo/config-types/README.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { ExpoConfig } from '@expo/config-types';\\n\\nexport default (): ExpoConfig => {\\n  return {\\n    name: 'My App',\\n    slug: 'my-app',\\n  };\\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Tracking Transparency Plugin in app.json\nDESCRIPTION: Configuration for expo-tracking-transparency plugin in app.json to set user tracking permission message.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/tracking-transparency.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-tracking-transparency\",\n        {\n          \"userTrackingPermission\": \"This identifier will be used to deliver personalized ads to you.\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Plugin Implementation in TypeScript\nDESCRIPTION: Complete implementation combining Android and iOS configurations into a single plugin.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/config-plugin-and-native-module-tutorial.mdx#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  withInfoPlist,\n  withAndroidManifest,\n  AndroidConfig,\n  ConfigPlugin,\n} from 'expo/config-plugins';\n\nconst withMyApiKey: ConfigPlugin<{ apiKey: string }> = (config, { apiKey }) => {\n  config = withInfoPlist(config, config => {\n    config.modResults['MY_CUSTOM_API_KEY'] = apiKey;\n    return config;\n  });\n\n  config = withAndroidManifest(config, config => {\n    const mainApplication = AndroidConfig.Manifest.getMainApplicationOrThrow(config.modResults);\n\n    AndroidConfig.Manifest.addMetaDataItemToMainApplication(\n      mainApplication,\n      'MY_CUSTOM_API_KEY',\n      apiKey\n    );\n    return config;\n  });\n\n  return config;\n};\n\nexport default withMyApiKey;\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for Expo Plugin Development\nDESCRIPTION: Package.json configuration showing required dependencies for developing an Expo config plugin, including peer dependencies setup.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/config-plugins/development-and-debugging.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {},\n  \"devDependencies\": {\n    \"expo\": \"^47.0.0\"\n  },\n  \"peerDependencies\": {\n    \"expo\": \">=47.0.0\"\n  },\n  \"peerDependenciesMeta\": {\n    \"expo\": {\n      \"optional\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing StatusBar from expo-status-bar\nDESCRIPTION: This snippet shows how to import the StatusBar component from the expo-status-bar library. This import statement is typically used at the top of a React Native file that uses the StatusBar component.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/status-bar.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { StatusBar } from 'expo-status-bar';\n```\n\n----------------------------------------\n\nTITLE: Extending Expo Config in .eslintrc.js (JavaScript)\nDESCRIPTION: Demonstrates the legacy configuration by extending the Expo ESLint config in a '.eslintrc.js' file. This method exports a module object with 'extends' set to 'expo', instructing ESLint to apply base rules suitable for Expo projects, including support for JSX, TypeScript, and platform-specific files.\nSOURCE: https://github.com/expo/expo/blob/main/packages/eslint-config-expo/README.md#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  extends: [\"expo\"],\n};\n```\n\n----------------------------------------\n\nTITLE: Specifying Shell in EAS Build YAML Configuration\nDESCRIPTION: Demonstrates how to set a specific shell for a step using the 'shell' property in an EAS Build custom configuration.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: Demo\n  steps:\n    - run:\n        shell: /bin/sh\n        command: |\n          echo \"Steps can use another shell\"\n          ps -p $$\n```\n\n----------------------------------------\n\nTITLE: Installing Expo SQLite Package - Shell\nDESCRIPTION: This shell snippet demonstrates how to install the expo-sqlite package in a project using the Expo CLI. The command downloads and registers the dependency in your project's npm configuration, preparing it for use within an Expo or React Native app. No additional dependencies are required for this step, but appropriate Node.js and npm versions are assumed.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-sqlite/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpx expo install expo-sqlite\n```\n\n----------------------------------------\n\nTITLE: Basic BlurView Usage with Different Intensities and Tints\nDESCRIPTION: Comprehensive example demonstrating BlurView implementation with various intensity levels and tint options. The example shows three different blur views with intensity values of 100, 80, and 90 along with different tint settings.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/blur-view.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Text, StyleSheet, View, SafeAreaView } from 'react-native';\nimport { BlurView } from 'expo-blur';\n\nexport default function App() {\n  const text = 'Hello, my container is blurring contents underneath!';\n  return (\n    <SafeAreaView style={styles.container}>\n      <View style={styles.background}>\n        {[...Array(20).keys()].map(i => (\n          <View\n            key={`box-${i}`}\n            style={[styles.box, i % 2 === 1 ? styles.boxOdd : styles.boxEven]}\n          />\n        ))}\n      </View>\n      <BlurView intensity={100} style={styles.blurContainer}>\n        <Text style={styles.text}>{text}</Text>\n      </BlurView>\n      <BlurView intensity={80} tint=\"light\" style={styles.blurContainer}>\n        <Text style={styles.text}>{text}</Text>\n      </BlurView>\n      <BlurView intensity={90} tint=\"dark\" style={styles.blurContainer}>\n        <Text style={[styles.text, { color: '#fff' }]}>{text}</Text>\n      </BlurView>\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  blurContainer: {\n    flex: 1,\n    padding: 20,\n    margin: 16,\n    textAlign: 'center',\n    justifyContent: 'center',\n    overflow: 'hidden',\n    borderRadius: 20,\n  },\n  background: {\n    flex: 1,\n    flexWrap: 'wrap',\n    ...StyleSheet.absoluteFill,\n  },\n  box: {\n    width: '25%',\n    height: '20%',\n  },\n  boxEven: {\n    backgroundColor: 'orangered',\n  },\n  boxOdd: {\n    backgroundColor: 'gold',\n  },\n  text: {\n    fontSize: 24,\n    fontWeight: '600',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Updates Module\nDESCRIPTION: Basic import statement for the expo-updates module in JavaScript/React Native applications.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/updates.mdx#2025-04-22_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nimport * as Updates from 'expo-updates';\n```\n\n----------------------------------------\n\nTITLE: Firebase Data Interface for Android Push Notifications\nDESCRIPTION: TypeScript interface defining the structure of the data object for Firebase push notifications on Android. This specifies the format for customizing notification properties like title, message, sound, vibration, and priority.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/notifications.mdx#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface FirebaseData {\n  title?: string;\n  message?: string;\n  subtitle?: string;\n  sound?: boolean | string;\n  vibrate?: boolean | number[];\n  priority?: AndroidNotificationPriority;\n  badge?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Icon Set with createIconSet in React Native\nDESCRIPTION: This example shows how to create a custom icon set using the createIconSet method from @expo/vector-icons. It defines a glyph map and creates a CustomIcon component that can be used to render custom icons.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/icons.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport createIconSet from '@expo/vector-icons/createIconSet';\n\nconst glyphMap = { 'icon-name': 1234, test: '∆' };\nconst CustomIcon = createIconSet(glyphMap, 'fontFamily', 'custom-icon-font.ttf');\n\nexport default function CustomIconExample() {\n  return <CustomIcon name=\"icon-name\" size={32} color=\"red\" />;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required Libraries for Expo Push Notifications\nDESCRIPTION: Command to install expo-notifications, expo-device, and expo-constants libraries for push notification functionality in an Expo project.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/push-notifications/push-notifications-setup.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo install expo-notifications expo-device expo-constants\n```\n\n----------------------------------------\n\nTITLE: Basic iOS Gymfile Generation Configuration\nDESCRIPTION: Example of generating Gymfile with credentials using the eas/generate_gymfile_from_template step.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_41\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: Generate Gymfile template\n  steps:\n    - eas/checkout\n    - eas/install_node_modules\n    - eas/resolve_apple_team_id_from_credentials:\n        id: resolve_apple_team_id_from_credentials\n    - eas/prebuild:\n        inputs:\n          clean: false\n          apple_team_id: ${ steps.resolve_apple_team_id_from_credentials.apple_team_id }\n    - eas/configure_eas_update\n    - eas/configure_ios_credentials\n    # @info #\n    - eas/generate_gymfile_from_template:\n        inputs:\n          credentials: ${ eas.job.secrets.buildCredentials }\n    # @end #\n```\n\n----------------------------------------\n\nTITLE: Implementing Lottie Animation Component in React Native\nDESCRIPTION: A complete example showing how to implement a Lottie animation in a React Native application with play/reset controls. The component uses useRef for animation control and includes styling for the container and buttons.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/lottie.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useRef, useEffect } from 'react';\nimport { Button, StyleSheet, View } from 'react-native';\nimport LottieView from 'lottie-react-native';\n\nexport default function App() {\n  const animation = useRef<LottieView>(null);\n  useEffect(() => {\n    // You can control the ref programmatically, rather than using autoPlay\n    // animation.current?.play();\n  }, []);\n\n  return (\n    <View style={styles.animationContainer}>\n      <LottieView\n        autoPlay\n        ref={animation}\n        style={{\n          width: 200,\n          height: 200,\n          backgroundColor: '#eee',\n        }}\n        // Find more Lottie files at https://lottiefiles.com/featured\n        source={require('./assets/gradientBall.json')}\n      />\n      <View style={styles.buttonContainer}>\n        <Button\n          title=\"Restart Animation\"\n          onPress={() => {\n            animation.current?.reset();\n            animation.current?.play();\n          }}\n        />\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  animationContainer: {\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n    flex: 1,\n  },\n  buttonContainer: {\n    paddingTop: 20,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json scripts for GitHub Pages deployment in Expo\nDESCRIPTION: Adds predeploy and deploy scripts to package.json for building and deploying an Expo web app to GitHub Pages using gh-pages package.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/publishing-websites.mdx#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n /* @hide ... */ /* @end */\n  \"deploy\": \"gh-pages --nojekyll -d dist\",\n  \"predeploy\": \"expo export -p web\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Calendar Permissions to AndroidManifest.xml (Android XML)\nDESCRIPTION: This snippet shows how to specify permissions in AndroidManifest.xml for accessing and modifying the system calendar. Required dependencies are an Android native project structure. Permissions include READ_CALENDAR for reading events and WRITE_CALENDAR for writing or modifying them. Place these lines inside the <manifest> tag. No parameters; simply ensures the app can interact with the device calendar API. Without these, event access will fail on Android.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/calendar.mdx#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\\\"android.permission.READ_CALENDAR\\\" />\\n<uses-permission android:name=\\\"android.permission.WRITE_CALENDAR\\\" />\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Manifest for Brightness Control\nDESCRIPTION: Add the WRITE_SETTINGS permission to the AndroidManifest.xml file for manual Android projects or when not using Continuous Native Generation.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/brightness.mdx#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"android.permission.WRITE_SETTINGS\" />\n```\n\n----------------------------------------\n\nTITLE: Disabling CSS Support in Metro Bundler - JavaScript (metro.config.js)\nDESCRIPTION: This metro.config.js snippet disables web CSS support in Expo by setting isCSSEnabled to false in the Metro configuration object. This may be required for native-only projects or if CSS support causes compatibility issues. It requires expo/metro-config and optionally other default configuration options. The config object is exported for use by the Metro bundler.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/config/metro.mdx#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n/** @type {import('expo/metro-config').MetroConfig} */\\nconst config = getDefaultConfig(__dirname, {\\n  // Disable CSS support.\\n  isCSSEnabled: false,\\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Exports for React Server Components\nDESCRIPTION: Shows how to configure package.json to provide different exports for React Server and client environments.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/testing-rsc.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"exports\": {\n    \".\": {\n      \"react-server\": \"./index.react-server.js\",\n      \"default\": \"./index.js\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Inline HTML in WebView for React Native\nDESCRIPTION: This example shows how to use the WebView component to render inline HTML content in a React Native app. It sets the originWhitelist to allow all origins and provides a simple HTML string as the source.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/webview.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { WebView } from 'react-native-webview';\nimport Constants from 'expo-constants';\nimport { StyleSheet } from 'react-native';\n\nexport default function App() {\n  return (\n    <WebView\n      style={styles.container}\n      originWhitelist={['*']}\n      source={{ html: '<h1><center>Hello world</center></h1>' }}\n    />\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: Constants.statusBarHeight,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling EXPO_PUBLIC_ Prefixed Environment Variables - Shell\nDESCRIPTION: These commands show how to disable Expo's client environment variable inlining for variables prefixed with EXPO_PUBLIC_ by setting EXPO_NO_CLIENT_ENV_VARS=1 before running any Expo CLI command. This is useful for projects where you want to prevent accidental exposure of environment variables to client-side code. As before, both cross-env and inline syntax are shown for different platforms.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/config/metro.mdx#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n# All users can run cross-env, followed by the Expo CLI command\\n$ npx cross-env EXPO_NO_CLIENT_ENV_VARS=1 expo start\\n# Alternatively, macOS and Linux users can define the environment variable, then run npx, followed by the Expo CLI command\\n$ EXPO_NO_CLIENT_ENV_VARS=1 npx expo start\n```\n\n----------------------------------------\n\nTITLE: Package Installation Reference\nDESCRIPTION: Package name reference for installing react-native-screens in a React Native project.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/screens.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nreact-native-screens\n```\n\n----------------------------------------\n\nTITLE: Configuring Status Bar in Expo Root Layout\nDESCRIPTION: Implementation of StatusBar component in the root layout file to customize the app's status bar appearance. Uses expo-status-bar library to set the status bar style to light.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/configuration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Stack } from 'expo-router';\nimport { StatusBar } from 'expo-status-bar';\n\nexport default function RootLayout() {\n  return (\n    <>\n      <Stack>\n        <Stack.Screen name=\"(tabs)\" options={{ headerShown: false }} />\n        <Stack.Screen name=\"+not-found\" />\n      </Stack>\n      <StatusBar style=\"light\" />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring eas.json for iOS Simulator Build\nDESCRIPTION: Update the eas.json configuration to enable iOS simulator builds.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/development-builds/create-a-build.mdx#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"development\": {\n      \"ios\": {\n        \"simulator\": true\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Exclusion Configuration\nDESCRIPTION: Example of excluding specific Expo modules from autolinking on Android platform using package.json configuration.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/autolinking.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"autolinking\": {\n      \"android\": {\n        \"exclude\": [\"expo-random\", \"third-party-expo-module\"]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Page Margins in iOS\nDESCRIPTION: Shows how to set custom page margins when printing to a file on iOS using the margins option in the printToFileAsync method.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/print.mdx#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst { uri } = await Print.printToFileAsync({\n  html: 'This page is printed with margins',\n  margins: {\n    left: 20,\n    top: 50,\n    right: 20,\n    bottom: 100,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring EAS Build Project\nDESCRIPTION: Command to set up initial EAS Build configuration for Android and iOS projects\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/build/setup.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ eas build:configure\n```\n\n----------------------------------------\n\nTITLE: Checking ADB Version (Bash)\nDESCRIPTION: This command checks the adb version on the system. It helps determine if the system's adb version conflicts with the Android SDK's version.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/workflow/android-studio-emulator.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ adb version\n```\n\n----------------------------------------\n\nTITLE: Getting Device Language in Expo\nDESCRIPTION: Demonstrates how to retrieve the user's device language using expo-localization\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/localization.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getLocales } from 'expo-localization';\n\nconst deviceLanguage = getLocales()[0].languageCode;\n```\n\n----------------------------------------\n\nTITLE: Importing DocumentPicker in JavaScript\nDESCRIPTION: Basic JavaScript import statement for using the DocumentPicker API in an Expo or React Native application.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/document-picker.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as DocumentPicker from 'expo-document-picker';\n```\n\n----------------------------------------\n\nTITLE: Importing SplashScreen Module\nDESCRIPTION: Basic import statement for the expo-splash-screen module.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/splash-screen.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as SplashScreen from 'expo-splash-screen';\n```\n\n----------------------------------------\n\nTITLE: Executing Direct SQLite Statements in Expo\nDESCRIPTION: Example of executing SQL statements outside of a transaction, useful for commands that don't work within transactions like PRAGMA statements.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/sqlite.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as SQLite from 'expo-sqlite';\n\nconst db = SQLite.openDatabase('dbName', version);\n\nawait db.execAsync([{ sql: 'PRAGMA foreign_keys = ON;', args: [] }], false);\nconsole.log('Foreign keys turned on');\n```\n\n----------------------------------------\n\nTITLE: Enabling Camera Access in Cross-Origin iFrames (HTML)\nDESCRIPTION: Shows how to grant camera and microphone access to content within a cross-origin `iframe` element for web deployments, specifically targeting Chrome versions 64 and above. The `allow` attribute with values `microphone; camera;` must be added to the `iframe` tag to permit the embedded content (like a web-based `<CameraView />`) to access these device features.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/camera-next.mdx#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n```html\n<iframe src=\"...\" allow=\"microphone; camera;\">\n  <!-- <CameraView /> -->\n</iframe>\n```\n```\n\n----------------------------------------\n\nTITLE: Importing the Expo Fingerprint API\nDESCRIPTION: Example of how to import the Fingerprint API for programmatic use in TypeScript projects.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/fingerprint.mdx#2025-04-22_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nimport * as Fingerprint from '@expo/fingerprint';\n```\n\n----------------------------------------\n\nTITLE: Configuring Global npm Registry for Android Builds\nDESCRIPTION: This configuration sets the global npm registry for Android builds. It ensures that npm uses a specific internal registry for package resolution during the build process.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/build-reference/infrastructure.mdx#_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nregistry=http://10.4.0.19:4873\n```\n\n----------------------------------------\n\nTITLE: Using Tailwind with React Native Web\nDESCRIPTION: Example of using Tailwind CSS classes with React Native components for web using the $$css syntax.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/config/metro.mdx#2025-04-22_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nimport { View, Text } from 'react-native';\n\nexport default function Page() {\n  return (\n    <View style={{ $$css: true, _: 'bg-slate-100 rounded-xl' }}>\n      <Text style={{ $$css: true, _: 'text-lg font-medium' }}>Welcome to Tailwind</Text>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a TypeScript Expo Configuration File\nDESCRIPTION: TypeScript implementation of app.config.ts that registers ts-node to support TypeScript imports and defines a typed Expo configuration.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/typescript.mdx#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport 'ts-node/register'; // Add this to import TypeScript files\nimport { ExpoConfig } from 'expo/config';\n\nconst config: ExpoConfig = {\n  name: 'my-app',\n  slug: 'my-app',\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Implementing Video Reference Handler in expo-av\nDESCRIPTION: Example showing how to handle video component references for playback control.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/av.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n_handleVideoRef = component => {\n  const playbackObject = component;\n  ...\n}\n\nrender() {\n  return (\n      <Video\n        ref={this._handleVideoRef}\n      />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Settings in eas.json for EAS Build\nDESCRIPTION: JSON configuration in eas.json file to specify different environments (development, preview, production) for various build profiles in EAS Build. This allows for full control over the environments used for builds.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/environment-variables.mdx#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"development\": {\n      \"environment\": \"development\"\n    },\n    \"preview\": {\n      \"environment\": \"preview\"\n    },\n    \"production\": {\n      \"environment\": \"production\"\n    },\n    \"my-profile\": {\n      \"environment\": \"production\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing StatusBar Component\nDESCRIPTION: Basic import statement showing how to import the StatusBar component from the expo-status-bar package.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/status-bar.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { StatusBar } from 'expo-status-bar';\n```\n\n----------------------------------------\n\nTITLE: Configuring initialRouteName in Stack Layout with unstable_settings\nDESCRIPTION: Demonstrates how to set the default screen of a stack using unstable_settings.initialRouteName. This ensures any route can link back to the specified initial route, which should match a valid filename without extension.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/advanced/router-settings.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Stack } from 'expo-router';\n\nexport const unstable_settings = {\n  // Ensure any route can link back to `/`\n  initialRouteName: 'index',\n};\n\nexport default function Layout() {\n  return <Stack />;\n}\n```\n\n----------------------------------------\n\nTITLE: Android Manifest Permissions Configuration\nDESCRIPTION: Shows how to add HIGH_SAMPLING_RATE_SENSORS permission to Android manifest for sensor rates above 200Hz on Android 12+.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/sensors.mdx#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"android.permission.HIGH_SAMPLING_RATE_SENSORS\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Deep Linking Scheme in app.json\nDESCRIPTION: Sets up the deep linking scheme in the Expo app configuration file.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/installation.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scheme\": \"your-app-scheme\"\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Route Parameter Handling\nDESCRIPTION: Example of handling dynamic route parameters in an API route handler.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/reference/api-routes.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function GET(request: Request, { post }: Record<string, string>) {\n  return Response.json({ ... });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PostCSS in Expo Projects\nDESCRIPTION: This code snippet demonstrates how to configure PostCSS in an Expo project by creating a postcss.config.json file with plugins like autoprefixer.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/config/metro.mdx#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": {\n    \"autoprefixer\": {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Background Fetch with Expo and React Native\nDESCRIPTION: The code snippet shows how to implement background fetch tasks using the `expo-background-fetch` and `expo-task-manager` modules in a React Native application. It provides functions to define, register, and unregister tasks, as well as check their status and allow manual toggling of task registration via a button.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/background-fetch.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState, useEffect } from 'react';\\nimport { StyleSheet, Text, View, Button } from 'react-native';\\nimport * as BackgroundFetch from 'expo-background-fetch';\\nimport * as TaskManager from 'expo-task-manager';\\n\\nconst BACKGROUND_FETCH_TASK = 'background-fetch';\\n\\n// 1. Define the task by providing a name and the function that should be executed\\n// Note: This needs to be called in the global scope (e.g outside of your React components)\\nTaskManager.defineTask(BACKGROUND_FETCH_TASK, async () => {\\n  const now = Date.now();\\n\\n  console.log(`Got background fetch call at date: ${new Date(now).toISOString()}`);\\n\\n  // Be sure to return the successful result type!\\n  return BackgroundFetch.BackgroundFetchResult.NewData;\\n});\\n\\n// 2. Register the task at some point in your app by providing the same name,\\n// and some configuration options for how the background fetch should behave\\n// Note: This does NOT need to be in the global scope and CAN be used in your React components!\\nasync function registerBackgroundFetchAsync() {\\n  return BackgroundFetch.registerTaskAsync(BACKGROUND_FETCH_TASK, {\\n    minimumInterval: 60 * 15, // 15 minutes\\n    stopOnTerminate: false, // android only,\\n    startOnBoot: true, // android only\\n  });\\n}\\n\\n// 3. (Optional) Unregister tasks by specifying the task name\\n// This will cancel any future background fetch calls that match the given name\\n// Note: This does NOT need to be in the global scope and CAN be used in your React components!\\nasync function unregisterBackgroundFetchAsync() {\\n  return BackgroundFetch.unregisterTaskAsync(BACKGROUND_FETCH_TASK);\\n}\\n\\nexport default function BackgroundFetchScreen() {\\n  const [isRegistered, setIsRegistered] = useState(false);\\n  const [status, setStatus] = useState(null);\\n\\n  useEffect(() => {\\n    checkStatusAsync();\\n  }, []);\\n\\n  const checkStatusAsync = async () => {\\n    const status = await BackgroundFetch.getStatusAsync();\\n    const isRegistered = await TaskManager.isTaskRegisteredAsync(BACKGROUND_FETCH_TASK);\\n    setStatus(status);\\n    setIsRegistered(isRegistered);\\n  };\\n\\n  const toggleFetchTask = async () => {\\n    if (isRegistered) {\\n      await unregisterBackgroundFetchAsync();\\n    } else {\\n      await registerBackgroundFetchAsync();\\n    }\\n\\n    checkStatusAsync();\\n  };\\n\\n  return (\\n    <View style={styles.screen}>\\n      <View style={styles.textContainer}>\\n        <Text>\\n          Background fetch status:{' '}\\n          <Text style={styles.boldText}>\\n            {status && BackgroundFetch.BackgroundFetchStatus[status]}\\n          </Text>\\n        </Text>\\n        <Text>\\n          Background fetch task name:{' '}\\n          <Text style={styles.boldText}>\\n            {isRegistered ? BACKGROUND_FETCH_TASK : 'Not registered yet!'}\\n          </Text>\\n        </Text>\\n      </View>\\n      <View style={styles.textContainer}></View>\\n      <Button\\n        title={isRegistered ? 'Unregister BackgroundFetch task' : 'Register BackgroundFetch task'}\\n        onPress={toggleFetchTask}\\n      />\\n    </View>\\n  );\\n}\\n\\nconst styles = StyleSheet.create({\\n  screen: {\\n    flex: 1,\\n    justifyContent: 'center',\\n    alignItems: 'center',\\n  },\\n  textContainer: {\\n    margin: 10,\\n  },\\n  boldText: {\\n    fontWeight: 'bold',\\n  },\\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Function Input Parameters\nDESCRIPTION: Demonstrates how to define input parameters for a function with name and default value.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  greetings:\n    name: Say Hi!\n    inputs:\n      - name: name\n        default_value: Hello world\n    command: echo \"${ inputs.name }!\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Keyboard Behavior in Expo Config\nDESCRIPTION: This JSON snippet shows how to configure the softwareKeyboardLayoutMode in the Expo app config to address issues with bottom tabs on Android.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/keyboard-handling.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"expo\" {\n  \"android\": {\n    \"softwareKeyboardLayoutMode\": \"pan\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing SVG Components from react-native-svg\nDESCRIPTION: Basic import statement for accessing SVG components from the react-native-svg library.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/svg.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Svg from 'react-native-svg';\n```\n\n----------------------------------------\n\nTITLE: Importing Crypto Module in JavaScript\nDESCRIPTION: This snippet shows how to import the Crypto module from expo-crypto package in a JavaScript file. This import statement is necessary to use the crypto functionalities provided by the package.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/crypto.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as Crypto from 'expo-crypto';\n```\n\n----------------------------------------\n\nTITLE: Converting Local Images for Printing in React Native\nDESCRIPTION: Demonstrates how to convert local images to base64 format for inclusion in HTML printouts, specifically addressing iOS's limitation with local asset URLs in WKWebView.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/print.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { Asset } from 'expo-asset';\nimport { printAsync } from 'expo-print';\nimport { manipulateAsync } from 'expo-image-manipulator';\n\nasync function generateHTML() {\n  const asset = Asset.fromModule(require('../../assets/logo.png'));\n  const image = await manipulateAsync(asset.localUri ?? asset.uri, [], { base64: true });\n  return `\n    <html>\n      <img\n        src=\"data:image/jpeg;base64,${image.base64}\"\n        style=\"width: 90vw;\" />\n    </html>\n  `;\n}\n\nasync function print() {\n  const html = await generateHTML();\n  await printAsync({ html });\n}\n```\n\n----------------------------------------\n\nTITLE: Using @expo/package-manager to Add Packages\nDESCRIPTION: This TypeScript snippet demonstrates how to import and use the @expo/package-manager to add packages to a project. It uses async functions to add development and regular dependencies to a project located by the 'projectRoot' variable.\nSOURCE: https://github.com/expo/expo/blob/main/packages/@expo/package-manager/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as PackageManager from '@expo/package-manager';\n\nconst manager = PackageManager.createForProject(projectRoot);\n\nawait Promise.all([\n  manager.addDevAsync(['@expo/webpack-config']),\n  manager.addAsync(['expo', 'expo-camera']),\n]);\n```\n\n----------------------------------------\n\nTITLE: Implementing ApplicationLifecycleListener in Kotlin\nDESCRIPTION: This code demonstrates how to create an ApplicationLifecycleListener class to hook into specific Application lifecycle events in Kotlin.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/android-lifecycle-listeners.mdx#2025-04-22_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\n// android/src/main/java/expo/modules/mylib/MyLibApplicationLifecycleListener.kt\npackage expo.modules.mylib\n\nimport android.app.Application\nimport expo.modules.core.interfaces.ApplicationLifecycleListener\n\nclass MyLibApplicationLifecycleListener : ApplicationLifecycleListener {\n  override fun onCreate(application: Application) {\n    // Your setup code in `Application.onCreate`.\n    doSomeSetupInApplicationOnCreate(application)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring EAS Deploy Workflow for Production\nDESCRIPTION: YAML configuration for automating web deployments to EAS Hosting when commits are pushed to the main branch. Sets up production environment and deployment parameters.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/hosting/workflows.mdx#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Deploy\n\non:\n  push:\n    branches: ['main']\n\njobs:\n  deploy:\n    type: deploy\n    name: Deploy\n    environment: production\n    params:\n      prod: true\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-av Plugin in app.json\nDESCRIPTION: Example `app.json` configuration for the `expo-av` plugin. It demonstrates enabling the plugin and setting the `microphonePermission` for iOS, customizing the message displayed when requesting microphone access. This configuration requires using EAS Build or `npx expo run:[android|ios]`.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/av.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n```json app.json\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-av\",\n        {\n          \"microphonePermission\": \"Allow $(PRODUCT_NAME) to access your microphone.\"\n        }\n      ]\n    ]\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Apollo Client Dev Tools in React Native App\nDESCRIPTION: Implementation of the Apollo Client dev tools plugin in a React Native app. Shows how to connect the Apollo Client instance to the plugin in the app's root component.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/debugging/devtools-plugins.mdx#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ApolloProvider, ApolloClient, InMemoryCache } from '@apollo/client';\nimport { useApolloClientDevTools } from '@dev-plugins/apollo-client';\n\nconst client = new ApolloClient({\n  uri: 'https://demo.test.com/',\n  cache: new InMemoryCache(),\n});\n\nexport default function App() {\n  useApolloClientDevTools(client);\n\n  return <ApolloProvider>{/* ... */}</ApolloProvider>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing LinearGradient in React Native\nDESCRIPTION: Example showing how to create a view with two LinearGradient components - one as a background overlay and another as a styled button. The example demonstrates usage of color arrays, styling, and component positioning.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/linear-gradient.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StyleSheet, Text, View } from 'react-native';\nimport { LinearGradient } from 'expo-linear-gradient';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <LinearGradient\n        // Background Linear Gradient\n        colors={['rgba(0,0,0,0.8)', 'transparent']}\n        style={styles.background}\n      />\n      <LinearGradient\n        // Button Linear Gradient\n        colors={['#4c669f', '#3b5998', '#192f6a']}\n        style={styles.button}>\n        <Text style={styles.text}>Sign in with Facebook</Text>\n      </LinearGradient>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: 'orange',\n  },\n  background: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 0,\n    height: 300,\n  },\n  button: {\n    padding: 15,\n    alignItems: 'center',\n    borderRadius: 5,\n  },\n  text: {\n    backgroundColor: 'transparent',\n    fontSize: 15,\n    color: '#fff',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Platform and Installation Sections - React Native JavaScript\nDESCRIPTION: This snippet imports the APIInstallSection and PlatformsSection React components for use in the documentation site interface. These components assist in rendering install instructions and supported platforms for the MaskedView package. The dependencies required are the local project components and React.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/masked-view.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { APIInstallSection } from '~/components/plugins/InstallSection';\nimport PlatformsSection from '~/components/plugins/PlatformsSection';\n```\n\n----------------------------------------\n\nTITLE: Rendering App Config Schema Table in JSX\nDESCRIPTION: This JSX code renders the AppConfigSchemaTable component, passing the imported schema as a prop.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/config/app.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<AppConfigSchemaTable schema={schema} />\n```\n\n----------------------------------------\n\nTITLE: Running EAS Build for Android Development Profile\nDESCRIPTION: This command initiates an EAS Build for the Android platform using the development profile. It generates an .apk file suitable for installation on Android devices and emulators.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/eas/android-development-build.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ eas build --platform android --profile development\n```\n\n----------------------------------------\n\nTITLE: Jest Unit Test Implementation\nDESCRIPTION: Unit test example using React Native Testing Library to test component rendering.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/unit-testing.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { render } from '@testing-library/react-native';\n\nimport HomeScreen, { CustomText } from '@/app/index';\n\ndescribe('<HomeScreen />', () => {\n  test('Text renders correctly on HomeScreen', () => {\n    const { getByText } = render(<HomeScreen />);\n\n    getByText('Welcome!');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Lists in Expo\nDESCRIPTION: Demonstrates creation of unordered lists with nested items across platforms.\nSOURCE: https://github.com/expo/expo/blob/main/packages/html-elements/README.md#2025-04-22_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\nimport { UL, LI } from '@expo/html-elements';\n\nexport default () => (\n  <UL>\n    <LI>oranges</LI>\n    <LI>apples</LI>\n    <UL>\n      <LI>green</LI>\n      <LI>red</LI>\n    </UL>\n  </UL>\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring FaceID Usage Description in Info.plist\nDESCRIPTION: XML configuration for NSFaceIDUsageDescription in Info.plist for iOS. This is required if not using CNG or when using a native iOS project manually.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/local-authentication.mdx#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<key>NSFaceIDUsageDescription</key>\n<string>Allow $(PRODUCT_NAME) to use FaceID</string>\n```\n\n----------------------------------------\n\nTITLE: Configuring React Native Directory Check for Expo Doctor in package.json\nDESCRIPTION: This JSON snippet shows how to configure the `expo.doctor.reactNativeDirectoryCheck` settings in `package.json`. It allows enabling or disabling the check (`enabled`), specifying packages to ignore (`exclude`), and controlling the listing of unknown packages (`listUnknownPackages`) during the `npx expo-doctor` validation process against the React Native Directory.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/config/package-json.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"doctor\": {\n      \"reactNativeDirectoryCheck\": {\n        /* @info Use this option to disable/enable the check. */\n        \"enabled\": true,\n        /* @end */\n        /* @info Use this option to exclude specific packages. */\n        \"exclude\": [\"/foo/\", \"bar\"],\n        /* @end */\n        /* @info Use this option to disable/enable listing unknown packages. */\n        \"listUnknownPackages\": true\n        /* @end */\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Local Authentication Module\nDESCRIPTION: JavaScript import statement for using the expo-local-authentication module in your application.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/local-authentication.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as LocalAuthentication from 'expo-local-authentication';\n```\n\n----------------------------------------\n\nTITLE: Assigning Alias to Existing Deployment in EAS Hosting\nDESCRIPTION: This command assigns an alias to an existing deployment using its deployment ID. The 'my-id' should be replaced with the actual deployment ID from the preview URL.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/hosting/deployments-and-aliases.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ eas deploy:alias --id=my-id\n```\n\n----------------------------------------\n\nTITLE: Installing Multiple Expo SDK Packages (Shell)\nDESCRIPTION: Demonstrates installing multiple Expo SDK packages (`expo-camera`, `expo-contacts`, `expo-sensors`) simultaneously using the `npx expo install` command. This command ensures that compatible versions of the packages are installed for the project's SDK version.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ npx expo install expo-camera expo-contacts expo-sensors\n```\n\n----------------------------------------\n\nTITLE: Creating an SVG Component with Circle and Rectangle in React Native\nDESCRIPTION: Shows how to create a custom SVG component using react-native-svg, including a circle and rectangle with various properties like stroke, fill, and dimensions.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/svg.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Svg, { Circle, Rect } from 'react-native-svg';\n\nexport default function SvgComponent(props) {\n  return (\n    <Svg height=\"50%\" width=\"50%\" viewBox=\"0 0 100 100\" {...props}>\n      <Circle cx=\"50\" cy=\"50\" r=\"45\" stroke=\"blue\" strokeWidth=\"2.5\" fill=\"green\" />\n      <Rect x=\"15\" y=\"15\" width=\"70\" height=\"70\" stroke=\"red\" strokeWidth=\"2\" fill=\"yellow\" />\n    </Svg>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Activity Results in Android\nDESCRIPTION: Demonstrates handling activity results in Android, including starting an activity and processing its result.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/module-api.mdx#2025-04-22_snippet_21\n\nLANGUAGE: kotlin\nCODE:\n```\nAsyncFunction('someFunc') {\n  /* @hide ... */ /* @end */\n  activity.startActivityForResult(someIntent, SOME_REQUEST_CODE)\n}\n\nOnActivityResult { activity, payload ->\n  /* @hide ... */ /* @end */\n}\n```\n\n----------------------------------------\n\nTITLE: React Navigation Import Reference\nDESCRIPTION: Reference to the createNativeStackNavigator import from React Navigation documentation.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/screens.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\ncreateNativeStackNavigator\n```\n\n----------------------------------------\n\nTITLE: Installing expo-linking in bare React Native projects\nDESCRIPTION: This command installs the expo-linking package using npx and expo CLI. It should be run after ensuring that the expo package is installed and configured in the project.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-linking/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-linking\n```\n\n----------------------------------------\n\nTITLE: Importing expo-file-system Module in JavaScript\nDESCRIPTION: Shows how to import the FileSystem module from the expo-file-system package for use in your Expo project.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/filesystem.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as FileSystem from 'expo-file-system';\n```\n\n----------------------------------------\n\nTITLE: Importing Expo SDK Modules in JavaScript\nDESCRIPTION: Shows how to import components and modules from installed Expo SDK packages into a JavaScript file. This example imports `CameraView` from `expo-camera`, the entire `expo-contacts` module as `Contacts`, and `Gyroscope` from `expo-sensors`, making their APIs available for use.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { CameraView } from 'expo-camera';\nimport * as Contacts from 'expo-contacts';\nimport { Gyroscope } from 'expo-sensors';\n```\n\n----------------------------------------\n\nTITLE: Importing the Expo Location Module in JavaScript\nDESCRIPTION: Shows the standard JavaScript import statement required to access the functionalities provided by the `expo-location` library within an Expo or React Native project. This makes the location APIs available under the `Location` namespace.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/location.mdx#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport * as Location from 'expo-location';\n```\n\n----------------------------------------\n\nTITLE: Importing Safe Area Context Components\nDESCRIPTION: Basic imports of the main components and hooks from react-native-safe-area-context library.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/safe-area-context.mdx#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport {\n  SafeAreaView,\n  SafeAreaProvider,\n  SafeAreaInsetsContext,\n  useSafeAreaInsets,\n} from 'react-native-safe-area-context';\n```\n\n----------------------------------------\n\nTITLE: Mocking Modules in Metro Configuration\nDESCRIPTION: Demonstrates how to create an empty module for a specific platform using Metro's resolver. This example shows how to make 'lodash' empty on web platforms by configuring the resolver in metro.config.js.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/config/metro.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst { getDefaultConfig } = require('expo/metro-config');\n\n/** @type {import('expo/metro-config').MetroConfig} */\nconst config = getDefaultConfig(__dirname);\n\nconfig.resolver.resolveRequest = (context, moduleName, platform) => {\n  if (platform === 'web' && moduleName === 'lodash') {\n    return {\n      type: 'empty',\n    };\n  }\n\n  // Ensure you call the default resolver.\n  return context.resolveRequest(context, moduleName, platform);\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Importing the Expo Updates API in JavaScript (JavaScript)\nDESCRIPTION: This snippet shows how to import the full 'expo-updates' JavaScript API for use within an Expo-managed project. This line is required to access updates-related functions and constants from JavaScript code. Requires the expo-updates NPM package and Expo project setup.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/updates.mdx#2025-04-22_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nimport * as Updates from 'expo-updates';\n```\n\n----------------------------------------\n\nTITLE: Executing Async SQLite Transactions\nDESCRIPTION: Demonstrates how to execute queries within an asynchronous transaction context, including transaction scope considerations.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/sqlite.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst db = await SQLite.openDatabaseAsync('databaseName');\n\nawait db.withTransactionAsync(async () => {\n  const result = await db.getFirstAsync('SELECT COUNT(*) FROM USERS');\n  console.log('Count:', result.rows[0]['COUNT(*)']);\n});\n```\n\n----------------------------------------\n\nTITLE: Using Tailwind with create-primitives in TSX\nDESCRIPTION: Shows how to integrate tailwind or similar styling libraries with create-primitives for more concise style definitions. This demonstrates the flexibility of the styling system.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-dev-client-components/README.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport tw from 'somewhere';\nimport { create } from './create-primitives';\n\nconst Heading = create(RNText, {\n  size: {\n    large: tw('text-4xl'),\n    medium: tw('text-3xl'),\n    small: tw('text-2xl'),\n  },\n  weight: {\n    normal: tw('font-medium'),\n    heavy: tw('font-semibold'),\n  },\n  color: {\n    success: tw('text-green-500'),\n    danger: tw('text-red-500'),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing expo-cellular package\nDESCRIPTION: This snippet shows how to install the expo-cellular package. The actual installation command is not provided in the content, but it's referenced as a component.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/cellular.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<APIInstallSection />\n```\n\n----------------------------------------\n\nTITLE: Importing Icons for App Store Best Practices Guide in JSX\nDESCRIPTION: This code snippet imports various custom icons from the Expo styleguide for use in the app store best practices guide. It includes icons for Apple App Store, Build, EAS Metadata, and other relevant concepts.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/distribution/app-stores.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { AppleAppStoreIcon } from '@expo/styleguide-icons/custom/AppleAppStoreIcon';\nimport { BuildIcon } from '@expo/styleguide-icons/custom/BuildIcon';\nimport { EasMetadataIcon } from '@expo/styleguide-icons/custom/EasMetadataIcon';\nimport { BookOpen02Icon } from '@expo/styleguide-icons/outline/BookOpen02Icon';\nimport { CodeSquare01Icon } from '@expo/styleguide-icons/outline/CodeSquare01Icon';\n\nimport { BoxLink } from '~/ui/components/BoxLink';\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel with Webpack for Next.js\nDESCRIPTION: Conditional Babel configuration that adds next/babel preset when bundling with webpack for web.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/using-nextjs.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = function (api) {\n  const isWeb = api.caller(\n    caller =>\n      caller && (caller.name === 'babel-loader' || caller.name === 'next-babel-turbo-loader')\n  );\n  return {\n    presets: [\n      isWeb && require('next/babel'),\n      'babel-preset-expo',\n    ].filter(Boolean),\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Route Redirects in app.json\nDESCRIPTION: Shows how to set up redirects for dynamic routes using parameter placeholders in the source and destination paths.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/advanced/redirects.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    [\n      \"expo-router\",\n      {\n        \"redirects\": [\n          {\n            \"source\": \"/redirect/[slug]\",\n            \"destination\": \"/target/[slug]\"\n          }\n        ]\n      }\n    ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing StatusBar from expo-status-bar\nDESCRIPTION: Basic import statement showing how to import the StatusBar component from the expo-status-bar package.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/status-bar.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { StatusBar } from 'expo-status-bar';\n```\n\n----------------------------------------\n\nTITLE: Triggering Console Warnings in React Native\nDESCRIPTION: Demonstrates how to manually trigger warning messages in React Native development using console.warn()\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/debugging/errors-and-warnings.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.warn(\"Warning message\")\n```\n\n----------------------------------------\n\nTITLE: Installing expo-status-bar using npm\nDESCRIPTION: This command installs the expo-status-bar package using the Node Package Manager (npm). This step is necessary for incorporating the library into bare React Native projects. It requires Node.js and npm to be installed in the development environment.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-status-bar/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install expo-status-bar\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-contacts Plugin in app.json\nDESCRIPTION: Configuration example for the expo-contacts plugin in the app.json file. This sets the contacts permission message for iOS.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/contacts.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-contacts\",\n        {\n          \"contactsPermission\": \"Allow $(PRODUCT_NAME) to access your contacts.\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic i18n Configuration in Expo\nDESCRIPTION: Shows how to configure i18n-js with multiple languages and set the initial locale\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/localization.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getLocales } from 'expo-localization';\nimport { I18n } from 'i18n-js';\n\n// Set the key-value pairs for the different languages you want to support.\nconst i18n = new I18n({\n  en: { welcome: 'Hello' },\n  ja: { welcome: 'こんにちは' },\n});\n\n// Set the locale once at the beginning of your app.\ni18n.locale = getLocales()[0].languageCode;\n\nconsole.log(i18n.t('welcome'));\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Proxy Settings\nDESCRIPTION: Sets up Git to use a local proxy (localhost:8888) for both HTTP and HTTPS connections.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/troubleshooting/proxies.mdx#2025-04-22_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[http]\n  proxy = http://localhost:8888\n[https]\n  proxy = http://localhost:8888\n```\n\n----------------------------------------\n\nTITLE: Importing Gyroscope from Expo Sensors\nDESCRIPTION: Shows how to import the Gyroscope module from the expo-sensors package. This is the basic import required before using any gyroscope functionality in an Expo app.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/gyroscope.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { Gyroscope } from 'expo-sensors';\n```\n\n----------------------------------------\n\nTITLE: Importing Navigation Components from Expo Router - JavaScript\nDESCRIPTION: This snippet demonstrates how to import the Stack, Tabs, and Link components from the expo-router library using JavaScript ES6 import syntax. These components provide file-based navigation primitives for React Native and web apps, and require expo-router to be installed as a dependency. The import should be placed in files where navigation logic or routes are defined, and assumes a bundler supporting ES modules.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/router.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Stack, Tabs, Link } from 'expo-router';\n```\n\n----------------------------------------\n\nTITLE: Pushing Metadata to App Stores using EAS CLI\nDESCRIPTION: This command uses EAS CLI to push metadata from the store.config.json file to the app stores. It automates the process of updating app store information.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/metadata/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ eas metadata:push\n```\n\n----------------------------------------\n\nTITLE: Deploying to EAS Hosting\nDESCRIPTION: Command to deploy the exported web project to EAS Hosting\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/hosting/get-started.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ eas deploy\n```\n\n----------------------------------------\n\nTITLE: Custom Entry File Implementation\nDESCRIPTION: Example of implementing a custom entry file using registerRootComponent with a basic App component.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/register-root-component.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { registerRootComponent } from 'expo';\nimport { View } from 'react-native';\n\nfunction App() {\n  return <View />;\n}\n\nregisterRootComponent(App);\n```\n\n----------------------------------------\n\nTITLE: Importing ScreenOrientation Module in JavaScript\nDESCRIPTION: Shows how to import the ScreenOrientation module from the expo-screen-orientation package in a JavaScript file.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/screen-orientation.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as ScreenOrientation from 'expo-screen-orientation';\n```\n\n----------------------------------------\n\nTITLE: React Native Component Implementation\nDESCRIPTION: Example React Native component implementation with a custom text component and home screen.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/unit-testing.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { PropsWithChildren } from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\n\nexport const CustomText = ({ children }: PropsWithChildren) => <Text>{children}</Text>;\n\nexport default function HomeScreen() {\n  return (\n    <View style={styles.container}>\n      <CustomText>Welcome!</CustomText>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configure expo-maps plugin in app.json\nDESCRIPTION: Configures the `expo-maps` plugin in the `app.json` file to request location permissions. The `requestLocationPermission` property adds permissions to `AndroidManifest.xml` and `Info.plist`, while the `locationPermission` property sets the `NSLocationWhenInUseUsageDescription` permission message for iOS.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/maps.mdx#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-maps\",\n        {\n          \"requestLocationPermission\": \"true\",\n          \"locationPermission\": \"Allow $(PRODUCT_NAME) to use your location\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Local Images for Printing in iOS\nDESCRIPTION: Demonstrates how to convert local images to base64 format for printing in iOS, as WKWebView doesn't support local asset URLs. Uses expo-asset and expo-image-manipulator to process images.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/print.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { Asset } from 'expo-asset';\nimport { printAsync } from 'expo-print';\nimport { manipulateAsync } from 'expo-image-manipulator';\n\nasync function generateHTML() {\n  const asset = Asset.fromModule(require('../../assets/logo.png'));\n  const image = await manipulateAsync(asset.localUri ?? asset.uri, [], { base64: true });\n  return `\n    <html>\n      <img\n        src=\"data:image/jpeg;base64,${image.base64}\"\n        style=\"width: 90vw;\" />\n    </html>\n  `;\n}\n\nasync function print() {\n  const html = await generateHTML();\n  await printAsync({ html });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Android permissions for expo-brightness\nDESCRIPTION: XML snippet to add the WRITE_SETTINGS permission to the Android manifest file, which is required for the brightness module to function properly on Android devices.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-brightness/README.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"android.permission.WRITE_SETTINGS\" />\n```\n\n----------------------------------------\n\nTITLE: Update by Group ID Example URL\nDESCRIPTION: Example URL for generating a QR code using project ID and update group ID.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/more/qr-codes.mdx#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nhttps://qr.expo.dev/eas-update?projectId=your-project-id&groupId=your-update-id\n```\n\n----------------------------------------\n\nTITLE: Automatically Measuring DOM Component Size\nDESCRIPTION: Demonstrates how to use the matchContents prop to automatically measure and resize a DOM component within a native view. This is useful for layouts where the DOM component needs an intrinsic size.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/dom-components.mdx#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport DOMComponent from './my-component';\n\nexport default function Route() {\n  return <DOMComponent dom={{ matchContents: true }} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Types for Radial Chart Module\nDESCRIPTION: Creates TypeScript type definitions for the radial chart component, including props for styling and chart data series with colors and percentages.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/third-party-library.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ViewStyle } from 'react-native/types';\n\nexport type ChangeEventPayload = {\n  value: string;\n};\n\ntype Series = {\n  color: string;\n  percentage: number;\n};\n\nexport type ExpoRadialChartViewProps = {\n  style?: ViewStyle;\n  data: Series[];\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Tables in Expo\nDESCRIPTION: Demonstrates creation of complex table structures with caption, header, body, and footer sections.\nSOURCE: https://github.com/expo/expo/blob/main/packages/html-elements/README.md#2025-04-22_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Table, THead, TH, TBody, TFoot, TR, TD, Caption } from '@expo/html-elements';\nimport { Text } from 'react-native';\n\nexport default () => (\n  <Table>\n    <Caption>Caption</Caption>\n    <THead>\n      <TR>\n        <TH colSpan=\"2\">The table header</TH>\n      </TR>\n    </THead>\n    <TBody>\n      <TR>\n        <TD>The table body</TD>\n        <TD>with two columns</TD>\n      </TR>\n    </TBody>\n    <TFoot>\n      <TR>\n        <TD>\n          <Text>This is the table footer</Text>\n        </TD>\n      </TR>\n    </TFoot>\n  </Table>\n);\n```\n\n----------------------------------------\n\nTITLE: Manually uploading artifacts to EAS\nDESCRIPTION: Uploads build artifacts from provided paths to EAS servers. Supports uploading application archives and build artifacts using file paths or glob patterns for selection.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_46\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: Upload artifacts\n  steps:\n    - eas/checkout\n    # - ...\n    - eas/upload_artifact:\n        name: Upload application archive\n        inputs:\n          path: fixtures/app-debug.apk\n    - eas/upload_artifact:\n        name: Upload artifacts\n        inputs:\n          type: build-artifact\n          path: |\n            assets/*.jpg\n            assets/*.png\n```\n\n----------------------------------------\n\nTITLE: Managing EAS Branches with CLI Commands\nDESCRIPTION: Commands for viewing and managing EAS update branches, including listing all branches and viewing specific branch details.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/eas-cli.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ eas branch:list\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ eas branch:view [branch-name]\n```\n\n----------------------------------------\n\nTITLE: Build Job Type Configuration YAML\nDESCRIPTION: Configures a 'build' job in an EAS Workflow. The 'type' keyword is set to 'build', and the 'params' object specifies the platform and profile for the build. This snippet illustrates how to configure a build job to create an Android or iOS build.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/workflows/syntax.mdx#_snippet_21\n\nLANGUAGE: YAML\nCODE:\n```\njobs:\n  my_job:\n    # @info #\n    type: build\n    # @end #\n    params:\n      platform: ios | android # required\n      profile: string # optional, default: production\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific URL Configuration\nDESCRIPTION: Example of implementing platform-specific URL configuration for Handoff using Platform.select.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/advanced/apple-handoff.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport Head from 'expo-router/head';\n\nexport default function App() {\n  return (\n    <Head>\n      <meta\n        property=\"og:url\"\n        content={Platform.select({ web: 'https://expo.dev', default: null })}\n      />\n    </Head>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-av Plugin in app.json\nDESCRIPTION: Example of configuring the expo-av plugin in the app.json file to set the microphone permission message for iOS.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/av.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-av\",\n        {\n          \"microphonePermission\": \"Allow $(PRODUCT_NAME) to access your microphone.\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing the Notifications Module\nDESCRIPTION: Basic import statement for using the expo-notifications module in a JavaScript/TypeScript project.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/notifications.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Notifications from 'expo-notifications';\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Permissions for expo-cellular\nDESCRIPTION: This snippet demonstrates how to add the READ_PHONE_STATE permission to the AndroidManifest.xml file for Android projects not using Continuous Native Generation.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/cellular.mdx#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"android.permission.READ_PHONE_STATE\" />\n```\n\n----------------------------------------\n\nTITLE: Clearing Caches with Expo CLI and Yarn\nDESCRIPTION: Command sequence to clear node modules, Yarn cache, watchman cache, and Metro bundler cache when using Expo CLI with Yarn. Includes special consideration for Yarn workspaces.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/troubleshooting/clear-cache-windows.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# With Yarn workspaces, you may need to delete node_modules in each workspace\n$ rm -rf node_modules\n\n$ yarn cache clean\n\n$ yarn\n\n$ watchman watch-del-all\n\n$ del %localappdata%\\Temp\\haste-map-*\n\n$ del %localappdata%\\Temp\\metro-cache\n\n$ npx expo start --clear\n```\n\n----------------------------------------\n\nTITLE: Importing the Speech Module in JavaScript\nDESCRIPTION: This snippet shows how to import the Speech module from the expo-speech package. This import statement is necessary to use the text-to-speech functionality provided by the library.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/speech.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as Speech from 'expo-speech';\n```\n\n----------------------------------------\n\nTITLE: Implementing Native Module in Swift\nDESCRIPTION: Swift implementation of the ExpoNativeConfiguration module with a getApiKey function that returns a static string.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/config-plugin-and-native-module-tutorial.mdx#2025-04-22_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nimport ExpoModulesCore\n\npublic class ExpoNativeConfigurationModule: Module {\n  public func definition() -> ModuleDefinition {\n    Name(\"ExpoNativeConfiguration\")\n\n    Function(\"getApiKey\") { () -> String in\n      \"api-key\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Submit Profiles Configuration in eas.json\nDESCRIPTION: Extended eas.json configuration demonstrating multiple submit profiles with inheritance capabilities and platform-specific options for both Android and iOS.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/submit/eas-json.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"cli\": {\n    \"version\": \"SEMVER_RANGE\",\n    \"requireCommit\": \"boolean\"\n  },\n  \"build\": {\n  },\n  \"submit\": {\n    \"SUBMIT_PROFILE_NAME_1\": {\n      \"android\": {\n        \"...ANDROID_OPTIONS\"\n      },\n      \"ios\": {\n        \"...IOS_OPTIONS\"\n      }\n    },\n    \"SUBMIT_PROFILE_NAME_2\": {\n      \"extends\": \"SUBMIT_PROFILE_NAME_1\",\n      \"android\": {\n        \"...ANDROID_OPTIONS\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Image Selection in React Native with Expo ImagePicker\nDESCRIPTION: This code shows how to use Expo's ImagePicker to allow users to select images from their device. It uses React's useState hook to track the selected image URI and passes it to an ImageViewer component for display.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/image-picker.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { View, StyleSheet } from 'react-native';\nimport * as ImagePicker from 'expo-image-picker';\n/* @tutinfo Import <CODE>useState</CODE> hook from <CODE>react<CODE>.*/\nimport { useState } from 'react';\n/* @end */\n\nimport Button from '@/components/Button';\nimport ImageViewer from '@/components/ImageViewer';\n\nconst PlaceholderImage = require('@/assets/images/background-image.png');\n\nexport default function Index() {\n  /* @tutinfo Create a state variable that will hold the value of selected image. */\n  const [selectedImage, setSelectedImage] = useState<string | undefined>(undefined);\n  /* @end */\n\n  const pickImageAsync = async () => {\n    let result = await ImagePicker.launchImageLibraryAsync({\n      mediaTypes: ['images'],\n      allowsEditing: true,\n      quality: 1,\n    });\n\n    if (!result.canceled) {\n      /* @tutinfo Pick the first uri from the <CODE>assets</CODE> array. Also, there is only one image selected at a time so you don't have to change this. */\n      setSelectedImage(result.assets[0].uri);\n      /* @end */\n    } else {\n      alert('You did not select any image.');\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.imageContainer}>\n        /* @tutinfo Pass the selected image URI to the <CODE>ImageViewer</CODE> component. */\n        <ImageViewer imgSource={PlaceholderImage} selectedImage={selectedImage} />\n        /* @end */\n      </View>\n      <View style={styles.footerContainer}>\n        <Button theme=\"primary\" label=\"Choose a photo\" onPress={pickImageAsync} />\n        <Button label=\"Use this photo\" />\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#25292e',\n    alignItems: 'center',\n  },\n  imageContainer: {\n    flex: 1,\n  },\n  footerContainer: {\n    flex: 1 / 3,\n    alignItems: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Print Functionality with expo-print in a React Native App\nDESCRIPTION: A complete React Native component showcasing how to use expo-print and expo-sharing to print HTML content directly or save it as a PDF file. The example includes printer selection on iOS and demonstrates basic layout styling.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/print.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { View, StyleSheet, Button, Platform, Text } from 'react-native';\nimport * as Print from 'expo-print';\nimport { shareAsync } from 'expo-sharing';\n\nconst html = `\n<html>\n  <head>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no\" />\n  </head>\n  <body style=\"text-align: center;\">\n    <h1 style=\"font-size: 50px; font-family: Helvetica Neue; font-weight: normal;\">\n      Hello Expo!\n    </h1>\n    <img\n      src=\"https://d30j33t1r58ioz.cloudfront.net/static/guides/sdk.png\"\n      style=\"width: 90vw;\" />\n  </body>\n</html>\n`;\n\nexport default function App() {\n  const [selectedPrinter, setSelectedPrinter] = useState();\n\n  const print = async () => {\n    // On iOS/android prints the given html. On web prints the HTML from the current page.\n    /* @info */ await Print.printAsync({\n      html,\n      printerUrl: selectedPrinter?.url, // iOS only\n    }); /* @end */\n  };\n\n  const printToFile = async () => {\n    // On iOS/android prints the given html. On web prints the HTML from the current page.\n    /* @info */ const { uri } = await Print.printToFileAsync({ html }); /* @end */\n    console.log('File has been saved to:', uri);\n    await shareAsync(uri, { UTI: '.pdf', mimeType: 'application/pdf' });\n  };\n\n  const selectPrinter = async () => {\n    /* @info */ const printer = await Print.selectPrinterAsync(); // iOS only\n    /* @end */\n    setSelectedPrinter(printer);\n  };\n\n  return (\n    <View style={styles.container}>\n      <Button title=\"Print\" onPress={print} />\n      <View style={styles.spacer} />\n      <Button title=\"Print to PDF file\" onPress={printToFile} />\n      {Platform.OS === 'ios' && (\n        <>\n          <View style={styles.spacer} />\n          <Button title=\"Select printer\" onPress={selectPrinter} />\n          <View style={styles.spacer} />\n          {selectedPrinter ? (\n            <Text style={styles.printer}>{`Selected printer: ${selectedPrinter.name}`}</Text>\n          ) : undefined}\n        </>\n      )}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    backgroundColor: '#ecf0f1',\n    flexDirection: 'column',\n    padding: 8,\n  },\n  spacer: {\n    height: 8,\n  },\n  printer: {\n    textAlign: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing expo-device in bare React Native projects\nDESCRIPTION: Command to install the expo-device package in a bare React Native project using npx expo install. This requires that the expo package is already installed and configured in the project.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-device/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-device\n```\n\n----------------------------------------\n\nTITLE: Using Keep Awake Hook in React Native\nDESCRIPTION: Example showing how to use the useKeepAwake hook to prevent screen sleep in a functional React component. The hook keeps the screen active as long as the component remains mounted.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/keep-awake.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useKeepAwake } from 'expo-keep-awake';\nimport React from 'react';\nimport { Text, View } from 'react-native';\n\nexport default function KeepAwakeExample() {\n  useKeepAwake();\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>This screen will never sleep!</Text>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Battery Module in JavaScript\nDESCRIPTION: Example of how to import the Battery module from expo-battery package for use in a JavaScript application. This import statement allows access to all functions and components provided by the battery module.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/battery.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as Battery from 'expo-battery';\n```\n\n----------------------------------------\n\nTITLE: Resetting Expo Project Structure\nDESCRIPTION: This command resets the project structure by moving existing files in the 'app' directory to 'app-example' and creating a new 'app' directory with a fresh 'index.tsx' file. It's useful for removing boilerplate code and starting fresh.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/get-started/next-steps.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run reset-project\n```\n\n----------------------------------------\n\nTITLE: Installing Canary Release of Expo SDK\nDESCRIPTION: Shows how to install the latest canary (pre-release) version of the Expo SDK and related packages.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/index.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Install the alpha version of expo and its related packages\n$ npm install expo@canary && npx expo install --fix\n```\n\n----------------------------------------\n\nTITLE: Configuring Stack Navigator for Web Modals in Expo Router\nDESCRIPTION: This code snippet shows how to set up the root layout (app/_layout.tsx) to enable web modal functionality. It configures the Stack navigator with a transparent modal presentation and sets the initial route name.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/advanced/modals.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Stack } from 'expo-router';\n\nexport const unstable_settings = {\n  initialRouteName: 'index',\n};\n\nexport default function Layout() {\n  return (\n    <Stack>\n      <Stack.Screen name=\"index\" />\n      <Stack.Screen\n        name=\"modal\"\n        options={{\n          presentation: 'transparentModal',\n          animation: 'fade',\n          headerShown: false,\n        }}\n      />\n    </Stack>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Entry File in package.json\nDESCRIPTION: Shows how to modify package.json to use a custom main file instead of the default App.js or app/_layout.tsx. This is useful for projects with custom directory structures.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/expo.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"main\": \"src/main.jsx\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating iOS Shell Script for Metro Entry File Resolution\nDESCRIPTION: A diff showing how to modify the \"Bundle React Native code and images\" script in the iOS project.pbxproj file to use Metro for determining the entry file. This script sets important environment variables including ENTRY_FILE, CLI_PATH, and BUNDLE_COMMAND for Expo projects.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/config/metro.mdx#2025-04-22_snippet_16\n\nLANGUAGE: diff\nCODE:\n```\n+\t\t\tshellScript = \"if [[ -f \\\"$PODS_ROOT/../.xcode.env\\\" ]]; then\\n  source \\\"$PODS_ROOT/../.xcode.env\\\"\\nfi\\nif [[ -f \\\"$PODS_ROOT/../.xcode.env.local\\\" ]]; then\\n  source \\\"$PODS_ROOT/../.xcode.env.local\\\"\\nfi\\n\\n# The project root by default is one level up from the ios directory\\nexport PROJECT_ROOT=\\\"$PROJECT_DIR\\\"/..\\n\\nif [[ \\\"$CONFIGURATION\\\" = *Debug* ]]; then\\n  export SKIP_BUNDLING=1\\nfi\\nif [[ -z \\\"$ENTRY_FILE\\\" ]]; then\\n  # Set the entry JS file using the bundler's entry resolution.\\n  export ENTRY_FILE=\\\"$(\\\"$NODE_BINARY\\\" -e \\\"require('expo/scripts/resolveAppEntry')\\\" \\\"$PROJECT_ROOT\\\" ios absolute | tail -n 1)\\\"\\nfi\\n\\nif [[ -z \\\"$CLI_PATH\\\" ]]; then\\n  # Use Expo CLI\\n  export CLI_PATH=\\\"$(\\\"$NODE_BINARY\\\" --print \\\"require.resolve('@expo/cli')\\\")\\\"\\nfi\\nif [[ -z \\\"$BUNDLE_COMMAND\\\" ]]; then\\n  # Default Expo CLI command for bundling\\n  export BUNDLE_COMMAND=\\\"export:embed\\\"\\nfi\\n\\n`\\\"$NODE_BINARY\\\" --print \\\"require('path').dirname(require.resolve('react-native/package.json')) + '/scripts/react-native-xcode.sh')\\\"`\\n\\n\";\n```\n\n----------------------------------------\n\nTITLE: Defining Manifest and Asset Types in Expo Update Protocol (TypeScript)\nDESCRIPTION: Defines the Manifest and Asset types used in Expo's update protocol. These types ensure that JSON bodies in update responses conform to expected structures, with fields for IDs, versioning, assets, and metadata. Dependencies include TypeScript and a JSON serialization mechanism; inputs and outputs are JSON objects matching the defined structures. Asset objects provide content type, hash, and location information, while Manifest aggregates update-level metadata; clients validate fields such as hash and content-type against protocol requirements.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/technical-specs/expo-updates-1.mdx#2025-04-22_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype Manifest = {\n  id: string;\n  createdAt: string;\n  runtimeVersion: string;\n  launchAsset: Asset;\n  assets: Asset[];\n  metadata: { [key: string]: string };\n  extra: { [key: string]: any };\n};\n\ntype Asset = {\n  hash?: string;\n  key: string;\n  contentType: string;\n  fileExtension?: string;\n  url: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Using DateTimePicker Component with SwiftUI\nDESCRIPTION: This code snippet demonstrates how to use the `DateTimePicker` component from `@expo/ui/swift-ui`. It imports the `DateTimePicker` component and configures it to display only the date, setting an initial date and using a wheel variant.  The `onDateSelected` prop handles date selection events.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/ui.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DateTimePicker } from '@expo/ui/swift-ui';\n\n<DateTimePicker\n  onDateSelected={date => {\n    setSelectedDate(date);\n  }}\n  displayedComponents='date'\n  initialDate={selectedDate.toISOString()}\n  variant='wheel'\n/>\n```\n\n----------------------------------------\n\nTITLE: Running Expo Prebuild with eas/prebuild in YAML (with Parameters)\nDESCRIPTION: Executes the 'expo prebuild' command with custom parameters including Apple team ID obtained from a previous step.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: Run prebuild script\n  steps:\n    - eas/checkout\n    - eas/install_node_modules\n    - eas/resolve_apple_team_id_from_credentials:\n        id: resolve_apple_team_id_from_credentials\n    # @info #\n    - eas/prebuild:\n        inputs:\n          clean: false\n          apple_team_id: ${ steps.resolve_apple_team_id_from_credentials.apple_team_id }\n    # @end #\n```\n\n----------------------------------------\n\nTITLE: Using the Expo CLI Lint Command\nDESCRIPTION: Command to set up ESLint with Expo-specific settings and run linting checks. It targets specific directories by default and supports fixing issues automatically.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/more/expo-cli.mdx#2025-04-23_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo lint\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-font Plugin in app.json\nDESCRIPTION: This snippet shows how to configure the expo-font plugin in the app.json file to embed a custom font file in the project. The 'fonts' property specifies the path to the font file relative to the project root.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/user-interface/fonts.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-font\",\n        {\n          \"fonts\": [\"./assets/fonts/Inter-Black.otf\"]\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DeviceMotion in Expo app.json\nDESCRIPTION: This JSON snippet demonstrates how to configure the DeviceMotion feature from expo-sensors using the app.json config plugin. It specifies permissions related to device motion, which is vital for allowing access via app configurations during build time.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/devicemotion.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-sensors\",\n        {\n          \"motionPermission\": \"Allow $(PRODUCT_NAME) to access your device motion.\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Uploading Files as Blobs with expo/fetch in TypeScript\nDESCRIPTION: Demonstrates how to upload a file directly as a blob using the fetch API from Expo. Creates a text file, converts it to a blob, and sends it in a POST request.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/filesystem-next.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { fetch } from 'expo/fetch';\nimport { File } from 'expo-file-system/next';\n\nconst src = new File(testDirectory, 'file.txt');\nfile.write('Hello, world!');\nconst blob = src.blob();\n\nconst response = await fetch('https://example.com', {\n  method: 'POST',\n  body: blob,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring code signing in AndroidManifest.xml for Android projects\nDESCRIPTION: This XML snippet demonstrates how to add code signing configuration to the AndroidManifest.xml file for Android projects. It includes metadata for the code signing certificate and signing metadata.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/code-signing.mdx#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<meta-data\n  android:name=\"expo.modules.updates.CODE_SIGNING_CERTIFICATE\"\n  android:value=\"(insert XML-escaped certificate here)\"\n  />\n<meta-data\n  android:name=\"expo.modules.updates.CODE_SIGNING_METADATA\"\n  android:value=\"{&quot;keyid&quot;:&quot;main&quot;,&quot;alg&quot;:&quot;rsa-v1_5-sha256&quot;}\"\n  />\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint for Multi-Platform Projects (js)\nDESCRIPTION: This snippet demonstrates how to extend multiple ESLint configurations within `package.json`'s `eslintConfig`. It applies rules suitable for both Node.js (`universe/node`) and web browser (`universe/web`) environments.\nSOURCE: https://github.com/expo/expo/blob/main/packages/eslint-config-universe/README.md#2025-04-22_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n\"eslintConfig\": {\n  \"extends\": [\"universe/node\", \"universe/web\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Optimized SafeAreaProvider Setup\nDESCRIPTION: Setting up SafeAreaProvider with initialWindowMetrics for optimized initial render.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/safe-area-context.mdx#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SafeAreaProvider, initialWindowMetrics } from 'react-native-safe-area-context';\n\nfunction App() {\n  return <SafeAreaProvider initialMetrics={initialWindowMetrics}>...</SafeAreaProvider>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Credentials - EAS CLI - Shell\nDESCRIPTION: This shell command runs the EAS CLI credentials flow, allowing configuration of iOS build credentials interactively for a production profile. The tool guides the user through prompts to authenticate with Apple, manage Distribution Certificates and Provisioning Profiles, and prepares the app for distribution. Requires Node.js, the Expo CLI, and valid Apple Developer credentials. No input arguments are required beyond the interactive prompts.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/eas/ios-production-build.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ eas credentials\n```\n\n----------------------------------------\n\nTITLE: Importing the expo-brightness Module (JavaScript)\nDESCRIPTION: Shows the standard JavaScript import statement required to use the `expo-brightness` library functions and constants within a project file. This makes the `Brightness` object, containing methods like `requestPermissionsAsync` and `setSystemBrightnessAsync`, available for use.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/brightness.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport * as Brightness from 'expo-brightness';\n```\n\n----------------------------------------\n\nTITLE: Setting Page Margins for iOS PDF Printing\nDESCRIPTION: Example of how to set custom page margins when printing to a PDF file on iOS using the Print.printToFileAsync method.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/print.mdx#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst { uri } = await Print.printToFileAsync({\n  html: 'This page is printed with margins',\n  margins: {\n    left: 20,\n    top: 50,\n    right: 20,\n    bottom: 100,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: iOS Xcode Project Packager Script Removal\nDESCRIPTION: Instructions for removing the Start Packager script from Xcode project in SDK 50+.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/config/metro.mdx#2025-04-22_snippet_16\n\nLANGUAGE: diff\nCODE:\n```\n-    FD10A7F022414F080027D42C /* Start Packager */ = {\n-\t\t\tisa = PBXShellScriptBuildPhase;\n-\t\t\talwaysOutOfDate = 1;\n-\t\t\tbuildActionMask = 2147483647;\n-\t\t\tfiles = (\n-\t\t\t);\n-\t\t\tinputFileListPaths = (\n-\t\t\t);\n-\t\t\tinputPaths = (\n-\t\t\t);\n-\t\t\tname = \"Start Packager\";\n-\t\t\toutputFileListPaths = (\n-\t\t\t);\n-\t\t\toutputPaths = (\n-\t\t\t);\n-\t\t\trunOnlyForDeploymentPostprocessing = 0;\n-\t\t\tshellPath = /bin/sh;\n-\t\t\tshellScript = \"if [[ -f \\\"$PODS_ROOT/../.xcode.env\\\" ]]; then\\n  source \\\"$PODS_ROOT/../.xcode.env\\\"\\nfi\\nif [[ -f \\\"$PODS_ROOT/../.xcode.env.updates\\\" ]]; then\\n  source \\\"$PODS_ROOT/../.xcode.env.updates\\\"\\nfi\\nif [[ -f \\\"$PODS_ROOT/../.xcode.env.local\\\" ]]; then\\n  source \\\"$PODS_ROOT/../.xcode.env.local\\\"\\nfi\\n\\nexport RCT_METRO_PORT=\\\"${RCT_METRO_PORT:=8081}\\\"\\necho \\\"export RCT_METRO_PORT=${RCT_METRO_PORT}\\\" > `$NODE_BINARY --print \\\"require('path').dirname(require.resolve('react-native/package.json')) + '/scripts/.packager.env'\\\"`;\\nif [ -z \\\"${RCT_NO_LAUNCH_PACKAGER+xxx}\\\" ] ; then\\n  if nc -w 5 -z localhost ${RCT_METRO_PORT} ; then\\n    if ! curl -s \\\"http://localhost:${RCT_METRO_PORT}/status\\\" | grep -q \\\"packager-status:running\\\" ; then\\n      echo \\\"Port ${RCT_METRO_PORT} already in use, packager is either not running or not running correctly\\\"\\n      exit 2\\n    fi\\n  else\\n    open `$NODE_BINARY --print \\\"require('path').dirname(require.resolve('expo/package.json')) + '/scripts/launchPackager.command'\\\"` || echo \\\"Can't start packager automatically\\\"\\n  fi\\nfi\\n\";\n-\t\t\tshowEnvVarsInLog = 0;\n-\t\t};\n```\n\n----------------------------------------\n\nTITLE: Excluding Modules from Autolinking in package.json\nDESCRIPTION: JSON configuration showing how to exclude specific Expo modules from autolinking by adding the expo.autolinking.exclude property in package.json.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/bare/installing-expo-modules.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"...\",\n  \"dependencies\": {},\n  \"expo\": {\n    \"autolinking\": {\n      \"exclude\": [\"expo-keep-awake\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ImagePicker Import Statement\nDESCRIPTION: Example of importing the ImagePicker module in a JavaScript/TypeScript file.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/imagepicker.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as ImagePicker from 'expo-image-picker';\n```\n\n----------------------------------------\n\nTITLE: Creating Icon Button Component in React Native\nDESCRIPTION: Implementation of an icon button component that combines a MaterialIcons icon with a text label. The component accepts icon name, label text, and onPress handler as props.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/create-a-modal.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Pressable, StyleSheet, Text } from 'react-native';\nimport MaterialIcons from '@expo/vector-icons/MaterialIcons';\n\ntype Props = {\n  icon: keyof typeof MaterialIcons.glyphMap;\n  label: string;\n  onPress: () => void;\n};\n\nexport default function IconButton({ icon, label, onPress }: Props) {\n  return (\n    <Pressable style={styles.iconButton} onPress={onPress}>\n      <MaterialIcons name={icon} size={24} color=\"#fff\" />\n      <Text style={styles.iconButtonLabel}>{label}</Text>\n    </Pressable>\n  );\n}\n\nconst styles = StyleSheet.create({\n  iconButton: {\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  iconButtonLabel: {\n    color: '#fff',\n    marginTop: 12,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Camera Permissions in Android Manifest\nDESCRIPTION: XML configuration for adding camera and audio recording permissions in the Android manifest file.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/camera.mdx#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Added permission -->\n<uses-permission android:name=\"android.permission.CAMERA\" />\n\n<!-- Only when recording videos with audio -->\n<uses-permission android:name=\"android.permission.RECORD_AUDIO\" />\n```\n\n----------------------------------------\n\nTITLE: Calculating Compressed Update Size\nDESCRIPTION: Example calculation showing how a 10MB JavaScript bundle is compressed using Hermes bytecode compression with a 2.6x ratio.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/estimate-bandwidth.mdx#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n10 MB / 2.6 ≈ 3.85 MB update bandwidth size\n```\n\n----------------------------------------\n\nTITLE: Enabling Tree Shaking with Environment Variable\nDESCRIPTION: Sets the environment variable to enable tree shaking functionality in Expo. This experimental feature is only used in production mode.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/tree-shaking.mdx#2025-04-22_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nEXPO_UNSTABLE_TREE_SHAKING=1\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Main Entry File in JSON\nDESCRIPTION: This JSON configuration sets a custom entry file `src/main.jsx` as the main file for an Expo app. It is suitable for projects that do not use Expo Router. Ensure that the specified path points to an existing file in your project structure.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/expo.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"main\": \"src/main.jsx\"\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Custom Babel Configuration for Expo (JavaScript)\nDESCRIPTION: This snippet shows the default structure for babel.config.js in Expo projects, exporting a function that configures Babel using the babel-preset-expo preset. The api.cache(true) call ensures that Babel optimizes performance by caching the config based on the environment. Dependencies include babel-preset-expo and Expo CLI tools, and the snippet expects to be placed at the root of a project where Babel processes code. Inputs: called by Babel during initialization; Outputs: the configuration object enabling JavaScript transformation for Expo. Limitations: Only sets the default preset; further customization can be added as needed.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/config/babel.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = function (api) {\n  api.cache(true);\n  return {\n    presets: ['babel-preset-expo'],\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Image Component with Expo\nDESCRIPTION: Example of implementing the Image component from expo-image with blurhash placeholder, transition effects, and styling. Demonstrates basic usage with content fitting and placeholder implementation.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/image.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Image } from 'expo-image';\nimport { StyleSheet, View } from 'react-native';\n\nconst blurhash =\n  '|rF?hV%2WCj[ayj[a|j[az_NaeWBj@ayfRayfQfQM{M|azj[azf6fQfQfQIpWXofj[ayj[j[fQayWCoeoeaya}j[ayfQa{oLj?j[WVj[ayayj[fQoff7azayj[ayj[j[ayofayayayj[fQj[ayayj[ayfjj[j[ayjuayj[';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Image\n        style={styles.image}\n        source=\"https://picsum.photos/seed/696/3000/2000\"\n        placeholder={{ blurhash }}\n        contentFit=\"cover\"\n        transition={1000}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  image: {\n    flex: 1,\n    width: '100%',\n    backgroundColor: '#0553',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Trusted Dependencies for Bun\nDESCRIPTION: Shows how to configure trusted dependencies in package.json to allow execution of postinstall scripts for specific packages. This is necessary for packages that require post-installation setup.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/using-bun.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"trustedDependencies\": [\"your-dependency\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-media-library Plugin\nDESCRIPTION: JSON configuration for expo-media-library plugin defining permissions and media location access settings.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/media-library.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-media-library\",\n        {\n          \"photosPermission\": \"Allow $(PRODUCT_NAME) to access your photos.\",\n          \"savePhotosPermission\": \"Allow $(PRODUCT_NAME) to save photos.\",\n          \"isAccessMediaLocationEnabled\": true\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing EAS CLI and Logging In\nDESCRIPTION: This command installs the EAS CLI globally and then logs you into your Expo account. It requires Node.js and npm to be installed.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/submit/android.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n$ npm install -g eas-cli && eas login\n```\n\n----------------------------------------\n\nTITLE: Adding audio recording permission for Android\nDESCRIPTION: XML configuration to add the RECORD_AUDIO permission to the Android manifest file. This permission is required for audio recording functionality in the expo-av module.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-av/README.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"android.permission.RECORD_AUDIO\" />\n```\n\n----------------------------------------\n\nTITLE: Upgrading Dependencies in Changelog - Markdown\nDESCRIPTION: This snippet lists the upgraded dependencies (\\`xmlbuilder@^15.1.1\\` and \\`@xmldom/xmldom@^0.8.8\\`) in the context of a changelog entry. It is used to explicitly record technical dependency changes for transparency and audit purposes. Inputs are package names and semantic versions; no code is executed and no output is produced. The snippet clarifies which packages are impacted by the update for future reference.\nSOURCE: https://github.com/expo/expo/blob/main/packages/@expo/plist/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n\"- Upgrade to `xmlbuilder@^15.1.1` and `@xmldom/xmldom@^0.8.8` to dedupe dependencies. ([#35342](https://github.com/expo/expo/pull/35342) by [@byCedric](https://github.com/byCedric))\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Media Location in Android Manifest\nDESCRIPTION: Android manifest configuration to enable the ACCESS_MEDIA_LOCATION permission for accessing asset location metadata.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/media-library.mdx#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"android.permission.ACCESS_MEDIA_LOCATION\" />\n```\n\n----------------------------------------\n\nTITLE: Updating Android MainActivity Component Name\nDESCRIPTION: Manual setup required for Android to set the main component name when not using Expo Prebuild.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/register-root-component.mdx#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n  @Override\n  protected String getMainComponentName() {\n+    return \"main\";\n  }\n```\n\n----------------------------------------\n\nTITLE: Adding AAR Dependency in build.gradle for SDK 52+\nDESCRIPTION: Adds the AAR dependency to the Android build.gradle file using the project reference format for SDK 52 and above.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/third-party-library.mdx#2025-04-22_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\ndependencies {\n  implementation project(':expo-modules-core')\n  implementation \"org.jetbrains.kotlin:kotlin-stdlib-jdk7:${getKotlinVersion()}\"\n+ implementation project(\":${project.name}\\$test-aar\")\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing HR Component in Expo\nDESCRIPTION: Shows implementation of horizontal rule component across platforms.\nSOURCE: https://github.com/expo/expo/blob/main/packages/html-elements/README.md#2025-04-22_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\nimport { HR } from '@expo/html-elements';\n\nexport default () => <HR />;\n```\n\n----------------------------------------\n\nTITLE: Importing the BlurView Component from expo-blur\nDESCRIPTION: Shows the standard way to import the `BlurView` component from the `expo-blur` package in a JavaScript or React Native file. This import statement makes the `BlurView` component available for use within your application.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/blur-view.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { BlurView } from 'expo-blur';\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Permissions for Contacts\nDESCRIPTION: XML configuration for adding NSContactsUsageDescription to the iOS Info.plist file, which is required for accessing contacts on iOS devices.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/contacts.mdx#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<key>NSContactsUsageDescription</key>\n<string>Allow $(PRODUCT_NAME) to access your contacts</string>\n```\n\n----------------------------------------\n\nTITLE: Importing LocalAuthentication Module\nDESCRIPTION: Example of how to import the expo-local-authentication module into a React Native or Expo project.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/local-authentication.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as LocalAuthentication from 'expo-local-authentication';\n```\n\n----------------------------------------\n\nTITLE: Implementing Module Export\nDESCRIPTION: Main module export file that exposes the getApiKey function to consumers of the module.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/config-plugin-and-native-module-tutorial.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport ExpoNativeConfigurationModule from './ExpoNativeConfigurationModule';\n\nexport function getApiKey(): string {\n  return ExpoNativeConfigurationModule.getApiKey();\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying app.json Configuration for Expo\nDESCRIPTION: Shows how to update the app.json configuration file to use Expo's configuration structure by moving all fields under the expo object.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/adopting-prebuild.mdx#2025-04-22_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n{\n-  \"name\": \"myapp\",\n-  \"displayName\": \"myapp\"\n+  \"expo\": {\n+    \"name\": \"myapp\"\n+  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting NSFaceIDUsageDescription in Info.plist for iOS\nDESCRIPTION: This XML snippet demonstrates how to manually add the NSFaceIDUsageDescription key to the Info.plist file for iOS projects not using Continuous Native Generation or manual native iOS project configuration.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/local-authentication.mdx#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<key>NSFaceIDUsageDescription</key>\n<string>Allow $(PRODUCT_NAME) to use FaceID</string>\n```\n\n----------------------------------------\n\nTITLE: Installing Expo Modules in React Native Project\nDESCRIPTION: Command to install Expo modules in an existing React Native project using npx.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/bare/using-expo-cli.mdx#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ npx install-expo-modules@latest\n```\n\n----------------------------------------\n\nTITLE: Installing EAS CLI Globally\nDESCRIPTION: Command to install or update the EAS Command Line Interface tool globally using npm\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/build/setup.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install -g eas-cli\n```\n\n----------------------------------------\n\nTITLE: Configuring EXPO_TOKEN Environment Variable in GitHub\nDESCRIPTION: Instructions for creating an Expo access token and adding it as a secret in a GitHub repository for use in continuous deployment workflows.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/continuous-deployment.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nEXPO_TOKEN\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-sensors plugin in app.json\nDESCRIPTION: Example of how to configure the expo-sensors plugin in the app.json file. This configuration sets the motion permission message for iOS.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/sensors.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-sensors\",\n        {\n          \"motionPermission\": \"Allow $(PRODUCT_NAME) to access your device motion\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Expo SDK Packages in JavaScript\nDESCRIPTION: Example showing how to import various Expo SDK packages in a JavaScript file to access device functionality like camera, contacts, and sensors.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { CameraView } from 'expo-camera';\nimport * as Contacts from 'expo-contacts';\nimport { Gyroscope } from 'expo-sensors';\n```\n\n----------------------------------------\n\nTITLE: Implementing Android RadialChart View in Kotlin\nDESCRIPTION: Kotlin implementation of the RadialChart view component for Android using PieChart from MPAndroidChart library. Includes Series data model and chart rendering logic.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/third-party-library.mdx#2025-04-22_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\npackage expo.modules.radialchart\n\nimport android.content.Context\nimport android.graphics.Color\nimport androidx.annotation.ColorInt\nimport com.github.mikephil.charting.charts.PieChart\nimport com.github.mikephil.charting.data.PieData\nimport com.github.mikephil.charting.data.PieDataSet\nimport com.github.mikephil.charting.data.PieEntry\nimport expo.modules.kotlin.AppContext\nimport expo.modules.kotlin.records.Field\nimport expo.modules.kotlin.records.Record\nimport expo.modules.kotlin.views.ExpoView\n\n\nclass Series : Record {\n  @Field\n  val color: String = \"#ff0000\"\n\n  @Field\n  val percentage: Float = 0.0f\n}\n\nclass ExpoRadialChartView(context: Context, appContext: AppContext) : ExpoView(context, appContext) {\n  internal val chartView = PieChart(context).also {\n    it.layoutParams = LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT)\n    addView(it)\n  }\n\n  fun setChartData(data: ArrayList<Series>) {\n    val entries: ArrayList<PieEntry> = ArrayList()\n    val colors: ArrayList<Int> = ArrayList()\n    for (series in data) {\n      entries.add(PieEntry(series.percentage))\n      colors.add(Color.parseColor(series.color))\n    }\n    val dataSet = PieDataSet(entries, \"DataSet\");\n    dataSet.colors = colors;\n    val pieData = PieData(dataSet);\n    chartView.data = pieData;\n    chartView.invalidate();\n\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing React Helmet Async with HelmetProvider in JavaScript\nDESCRIPTION: Demonstrates how to set up react-helmet-async using HelmetProvider to encapsulate Helmet state for the React tree. This is the main difference from react-helmet, requiring a Provider for state management.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-router/vendor/react-helmet-async/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Helmet, HelmetProvider } from 'react-helmet-async';\n\nconst app = (\n  <HelmetProvider>\n    <App>\n      <Helmet>\n        <title>Hello World</title>\n        <link rel=\"canonical\" href=\"https://www.tacobell.com/\" />\n      </Helmet>\n      <h1>Hello World</h1>\n    </App>\n  </HelmetProvider>\n);\n\nReactDOM.hydrate(\n  app,\n  document.getElementById('app')\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Sentry CLI as Trusted Dependency\nDESCRIPTION: Demonstrates how to add @sentry/cli as a trusted dependency in package.json to enable source map uploads during builds when using Sentry with Bun.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/using-bun.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"trustedDependencies\": [\"@sentry/cli\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Page Margins in HTML for Android Printing\nDESCRIPTION: CSS snippet showing how to define page margins for Android printing using the @page rule in the HTML style block.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/print.mdx#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<style>\n  @page {\n    margin: 20px;\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: EAS Build Version Configuration in eas.json\nDESCRIPTION: Configuration in eas.json that enables automatic version management through EAS Build, setting appVersionSource to remote and enabling autoIncrement for production builds.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/eas/manage-app-versions.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"cli\": {\n    /* @hide ... */ /* @end */\n    /* @info The <CODE>appVersionSource</CODE> is set to <CODE>remote</CODE>. */\n    \"appVersionSource\": \"remote\"\n    /* @end */\n  },\n  \"build\": {\n    \"production\": {\n      /* @info The <CODE>autoIncrement</CODE> is set <CODE>true</CODE> to automatically increment the <CODE>versionCode</CODE> or <CODE>buildNumber</CODE>. */\n      \"autoIncrement\": true\n      /* @end */\n    }\n  }\n  /* @hide ... */ /* @end */\n}\n```\n\n----------------------------------------\n\nTITLE: Installing expo-blur Package in React Native\nDESCRIPTION: Command to install the expo-blur package in a React Native project using npx expo. After installation, iOS requires running pod-install to complete the setup, while on Android it will render as a translucent View.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-blur/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-blur\n```\n\n----------------------------------------\n\nTITLE: BoxLink Component Usage\nDESCRIPTION: Example of using the BoxLink component to create navigation links with icons and descriptions for different sections of the EAS Hosting documentation.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/hosting/introduction.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<BoxLink\n  title=\"Create your first deployment\"\n  description=\"From a new app to a deployed website in under a minute.\"\n  href=\"/eas/hosting/get-started\"\n  Icon={Cloud01Icon}\n/>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of React Native WebView Component in TSX\nDESCRIPTION: A simple example showing how to import and use the WebView component from react-native-webview. The component renders a web page from reactnative.dev in a container that takes up all available space using flex styling.\nSOURCE: https://github.com/expo/expo/blob/main/apps/expo-go/modules/react-native-webview/README.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { Component } from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\nimport { WebView } from 'react-native-webview';\n\n// ...\nconst MyWebComponent = () => {\n  return <WebView source={{ uri: 'https://reactnative.dev/' }} style={{ flex: 1 }} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Event Handling with useEventListener Hook\nDESCRIPTION: Shows how to use the useEventListener hook to create an event listener for the VideoPlayer. This method provides automatic cleanup when the component unmounts.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/video.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEventListener } from 'expo';\n// ...Other imports, definition of the component, creating the player etc.\n\nuseEventListener(player, 'statusChange', ({ status, error }) => {\n  setPlayerStatus(status);\n  setPlayerError(error);\n  console.log('Player status changed: ', status);\n});\n// Rest of the component...\n```\n\n----------------------------------------\n\nTITLE: Installing ESLint via npx expo install (Shell)\nDESCRIPTION: Demonstrates how to install the ESLint package as a development dependency in an Expo project using the `npx expo install` command. This command ensures compatibility with the Expo SDK.\nSOURCE: https://github.com/expo/expo/blob/main/packages/eslint-plugin-expo/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx expo install eslint --save-dev\n```\n\n----------------------------------------\n\nTITLE: Configuring DeviceMotion with Expo Config Plugin\nDESCRIPTION: Example configuration for the expo-sensors DeviceMotion API using the config plugin approach in app.json. This configures the motion permission message for iOS.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/devicemotion.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-sensors\",\n        {\n          \"motionPermission\": \"Allow $(PRODUCT_NAME) to access your device motion.\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Android MainApplication for Custom Entry File\nDESCRIPTION: Modifies the getJSMainModuleName method in the Android MainApplication.java file to use .expo/.virtual-metro-entry instead of index as the main module name.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/config/metro.mdx#2025-04-22_snippet_23\n\nLANGUAGE: diff\nCODE:\n```\n@Override\nprotected String getJSMainModuleName() {\n-  return \"index\";\n+  return \".expo/.virtual-metro-entry\";\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Apple Sign-in Plugin\nDESCRIPTION: JSON configuration to enable Apple authentication plugin in the Expo app config.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/apple-authentication.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\"expo-apple-authentication\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using LinearProgress Component with SwiftUI\nDESCRIPTION: This code snippet demonstrates how to use the `LinearProgress` component from `@expo/ui/swift-ui`.  It imports the component and sets its `progress` and `style` properties.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/ui.mdx#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LinearProgress } from '@expo/ui/swift-ui';\n\n<LinearProgress progress={0.5} style={{ width: 300 }} />\n```\n\n----------------------------------------\n\nTITLE: Displaying Error Codes Table in Markdown\nDESCRIPTION: A markdown table that lists all error codes from the Expo Updates library with their descriptions. The table includes codes for scenarios such as disabled updates, reload failures, update checking errors, and development client limitations.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/updates.mdx#2025-04-22_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n| Code                              | Description                                                                                                                                                                                                                                                        |\n| --------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| `ERR_UPDATES_DISABLED`            | A method call was attempted when the Updates library was disabled, or the application was running in development mode                                                                                                                                              |\n| `ERR_UPDATES_RELOAD`              | An error occurred when trying to reload the application and it could not be reloaded. For bare React Native apps, double-check the setup steps for this library to ensure it has been installed correctly and the proper native initialization methods are called. |\n| `ERR_UPDATES_CHECK`               | An unexpected error occurred when trying to check for new updates. Check the error message for more information.                                                                                                                                                   |\n| `ERR_UPDATES_FETCH`               | An unexpected error occurred when trying to fetch a new update. Check the error message for more information.                                                                                                                                                      |\n| `ERR_UPDATES_READ_LOGS`           | An unexpected error occurred when trying to read log entries. Check the error message for more information.                                                                                                                                                        |\n| `ERR_NOT_AVAILABLE_IN_DEV_CLIENT` | A method is not available when running in a development build. A release build should be used to test this method.                                                                                                                                                 |\n```\n\n----------------------------------------\n\nTITLE: Creating a fingerprint.config.js Configuration File with Direct Dependency\nDESCRIPTION: Example of a fingerprint.config.js file that customizes the hash calculation by specifying sourceSkips when @expo/fingerprint is installed directly in the project.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/fingerprint.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n/** @type {import('@expo/fingerprint').Config} */\nconst config = {\n  sourceSkips: [\n    'ExpoConfigRuntimeVersionIfString',\n    'ExpoConfigVersions',\n    'PackageJsonAndroidAndIosScriptsIfNotContainRun',\n  ],\n};\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Preventing Splash Screen Autohide Globally in React Native (TypeScript)\nDESCRIPTION: Demonstrates preventing the native splash screen from automatically hiding when the React Native app renders. `SplashScreen.preventAutoHideAsync()` is called in the global scope before the main App component definition. The splash screen is then explicitly hidden using `SplashScreen.hideAsync()` within `componentDidMount` after a 2-second delay. This approach ensures the splash screen remains visible during initial setup.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-splash-screen/README.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\nimport * as SplashScreen from 'expo-splash-screen';\n\n// Prevent native splash screen from autohiding before App component declaration\nSplashScreen.preventAutoHideAsync()\n  .then((result) => console.log(`SplashScreen.preventAutoHideAsync() succeeded: ${result}`))\n  .catch(console.warn); // it's good to explicitly catch and inspect any error\n\nexport default class App extends React.Component {\n  componentDidMount() {\n    // Hides native splash screen after 2s\n    setTimeout(async () => {\n      await SplashScreen.hideAsync();\n    }, 2000);\n  }\n\n  render() {\n    return (\n      <View style={styles.container}>\n        <Text style={styles.text}>SplashScreen Demo! 👋</Text>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: '#aabbcc',\n  },\n  text: {\n    color: 'white',\n    fontWeight: 'bold',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Initial App Configuration in JSON\nDESCRIPTION: Basic app.json configuration showing the initial setup with app name, slug, and platform-specific identifiers.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/build-reference/variants.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"name\": \"MyApp\",\n    \"slug\": \"my-app\",\n    \"ios\": {\n      \"bundleIdentifier\": \"com.myapp\"\n    },\n    \"android\": {\n      \"package\": \"com.myapp\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating patches with patch-project\nDESCRIPTION: Command to generate patches from modified files in android or ios directories. Generated patches are stored in the cng-patches directory and applied during expo prebuild.\nSOURCE: https://github.com/expo/expo/blob/main/packages/patch-project/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ npx patch-project\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Expo Documentation\nDESCRIPTION: This code snippet demonstrates the import statements used in the Expo documentation. It imports custom components and styles used for rendering the documentation page.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/workflow/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { DocsLogo } from '@expo/styleguide';\n\nimport { BoxLink } from '~/ui/components/BoxLink';\nimport { Collapsible } from '~/ui/components/Collapsible';\nimport { Diagram } from '~/ui/components/Diagram';\nimport { Terminal } from '~/ui/components/Snippet';\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle for EAS Build Signing\nDESCRIPTION: This Gradle script handles the Android app signing configuration for EAS Build. It reads keystore credentials from credentials.json, sets up release and debug signing configs, and applies them to the appropriate build types.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/build-reference/android-builds.mdx#2025-04-22_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\n// Build integration with EAS\n\nimport java.nio.file.Paths\n\nandroid {\n  signingConfigs {\n    release {\n      // This is necessary to avoid needing the user to define a release signing config manually\n      // If no release config is defined, and this is not present, build for assembleRelease will crash\n    }\n  }\n\n  buildTypes {\n    release {\n      // This is necessary to avoid needing the user to define a release build type manually\n    }\n    debug {\n      // This is necessary to avoid needing the user to define a debug build type manually\n    }\n  }\n}\n\ntasks.whenTaskAdded {\n  android.signingConfigs.release {\n    def credentialsJson = rootProject.file(\"../credentials.json\");\n    def credentials = new groovy.json.JsonSlurper().parse(credentialsJson)\n    def keystorePath = Paths.get(credentials.android.keystore.keystorePath);\n    def storeFilePath = keystorePath.isAbsolute()\n      ? keystorePath\n      : rootProject.file(\"..\").toPath().resolve(keystorePath);\n\n    storeFile storeFilePath.toFile()\n    storePassword credentials.android.keystore.keystorePassword\n    keyAlias credentials.android.keystore.keyAlias\n    if (credentials.android.keystore.containsKey(\"keyPassword\")) {\n      keyPassword credentials.android.keystore.keyPassword\n    } else {\n      // key password is required by Gradle, but PKCS keystores don't have one\n      // using the keystore password seems to satisfy the requirement\n      keyPassword credentials.android.keystore.keystorePassword\n    }\n  }\n\n  android.buildTypes.release {\n    signingConfig android.signingConfigs.release\n  }\n\n  android.buildTypes.debug {\n    signingConfig android.signingConfigs.release\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing @expo/metro-runtime in JavaScript\nDESCRIPTION: This JavaScript import statement brings the `@expo/metro-runtime` functionality into your application. It should be placed in an early-loaded file like `App.js`. `expo/metro-config` will automatically ensure this import is executed first in the bundle.\nSOURCE: https://github.com/expo/expo/blob/main/packages/@expo/metro-runtime/README.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport '@expo/metro-runtime';\n```\n\n----------------------------------------\n\nTITLE: Implementing Push Notifications in React Native with Expo\nDESCRIPTION: A complete example showing how to implement push notifications including token registration, notification handling, and scheduling. Demonstrates usage of notification listeners, permission handling, and notification scheduling with expo-notifications.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/notifications.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useEffect, useRef } from 'react';\nimport { Text, View, Button, Platform } from 'react-native';\nimport * as Device from 'expo-device';\nimport * as Notifications from 'expo-notifications';\n\nNotifications.setNotificationHandler({\n  handleNotification: async () => ({\n    shouldShowAlert: true,\n    shouldPlaySound: false,\n    shouldSetBadge: false,\n  }),\n});\n\nexport default function App() {\n  const [expoPushToken, setExpoPushToken] = useState('');\n  const [notification, setNotification] = useState(false);\n  const notificationListener = useRef();\n  const responseListener = useRef();\n\n  useEffect(() => {\n    registerForPushNotificationsAsync().then(token => setExpoPushToken(token));\n\n    notificationListener.current = Notifications.addNotificationReceivedListener(notification => {\n      setNotification(notification);\n    });\n\n    responseListener.current = Notifications.addNotificationResponseReceivedListener(response => {\n      console.log(response);\n    });\n\n    return () => {\n      Notifications.removeNotificationSubscription(notificationListener.current);\n      Notifications.removeNotificationSubscription(responseListener.current);\n    };\n  }, []);\n\n  return (\n    <View\n      style={{\n        flex: 1,\n        alignItems: 'center',\n        justifyContent: 'space-around',\n      }}>\n      <Text>Your expo push token: {expoPushToken}</Text>\n      <View style={{ alignItems: 'center', justifyContent: 'center' }}>\n        <Text>Title: {notification && notification.request.content.title} </Text>\n        <Text>Body: {notification && notification.request.content.body}</Text>\n        <Text>Data: {notification && JSON.stringify(notification.request.content.data)}</Text>\n      </View>\n      <Button\n        title=\"Press to schedule a notification\"\n        onPress={async () => {\n          await schedulePushNotification();\n        }}\n      />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: SecureStore Usage Example in React Native\nDESCRIPTION: Complete React Native example demonstrating how to save and retrieve values using SecureStore.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/securestore.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { Text, View, StyleSheet, TextInput, Button } from 'react-native';\nimport * as SecureStore from 'expo-secure-store';\n\nasync function save(key, value) {\n  await SecureStore.setItemAsync(key, value);\n}\n\nasync function getValueFor(key) {\n  let result = await SecureStore.getItemAsync(key);\n  if (result) {\n    alert(\"🔐 Here's your value 🔐 \\n\" + result);\n  } else {\n    alert('No values stored under that key.');\n  }\n}\n\nexport default function App() {\n  const [key, onChangeKey] = useState('Your key here');\n  const [value, onChangeValue] = useState('Your value here');\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.paragraph}>Save an item, and grab it later!</Text>\n      <TextInput\n        style={styles.textInput}\n        clearTextOnFocus\n        onChangeText={text => onChangeKey(text)}\n        value={key}\n      />\n      <TextInput\n        style={styles.textInput}\n        clearTextOnFocus\n        onChangeText={text => onChangeValue(text)}\n        value={value}\n      />\n      <Button\n        title=\"Save this key/value pair\"\n        onPress={() => {\n          save(key, value);\n          onChangeKey('Your key here');\n          onChangeValue('Your value here');\n        }}\n      />\n      <Text style={styles.paragraph}>🔐 Enter your key 🔐</Text>\n      <TextInput\n        style={styles.textInput}\n        onSubmitEditing={event => {\n          getValueFor(event.nativeEvent.text);\n        }}\n        placeholder=\"Enter the key for the value you want to get\"\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    paddingTop: 10,\n    backgroundColor: '#ecf0f1',\n    padding: 8,\n  },\n  paragraph: {\n    marginTop: 34,\n    margin: 24,\n    fontSize: 18,\n    fontWeight: 'bold',\n    textAlign: 'center',\n  },\n  textInput: {\n    height: 35,\n    borderColor: 'gray',\n    borderWidth: 0.5,\n    padding: 4,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Handling BlurView Rendering Order with Dynamic Content\nDESCRIPTION: Example showing the correct rendering order for BlurView with dynamic content like FlatList. To ensure proper blur effect updates, BlurView should be rendered after the dynamic content component.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/blur-view.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<View>\n  <FlatList />\n  <BlurView />\n</View>\n```\n\n----------------------------------------\n\nTITLE: Configuring Asset Selection (SDK 52+)\nDESCRIPTION: Updated configuration in app.json for SDK 52 and above, using the updates.assetPatternsToBeBundled property to specify which assets should be included in updates.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/asset-selection.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n  \"expo\": {\n    \"updates\": {\n      \"assetPatternsToBeBundled\": [\n        \"app/images/**/*.png\"\n      ]\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Installing Expo Canary Pre-release Version (Shell)\nDESCRIPTION: Provides the commands to install the latest canary (unstable pre-release) version of the `expo` package using npm, followed by `npx expo install --fix` to update and synchronize all related Expo package dependencies to compatible canary versions. Canary releases reflect the latest state of the main branch.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/index.mdx#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# Install the alpha version of expo and its related packages\n$ npm install expo@canary && npx expo install --fix\n```\n\n----------------------------------------\n\nTITLE: Importing SMS Module in Expo\nDESCRIPTION: This code snippet demonstrates how to import the SMS module from expo-sms. It allows developers to access SMS functionality in their Expo applications.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/sms.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as SMS from 'expo-sms';\n```\n\n----------------------------------------\n\nTITLE: Setting Module Constants in Kotlin\nDESCRIPTION: Defines constant properties on the module using either direct arguments or a closure that returns a map. These constants become properties of the JavaScript module object.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/module-api.mdx#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\n// Passed as arguments\nConstants(\n  \"PI\" to kotlin.math.PI\n)\n\n// or returned by the closure\nConstants {\n  return@Constants mapOf(\n    \"PI\" to kotlin.math.PI\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Foreground Notification Behavior in Expo\nDESCRIPTION: This code snippet demonstrates how to set up the notification handler for foreground notifications using Notifications.setNotificationHandler. It configures options for showing alerts, playing sounds, and setting badges.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/push-notifications/receiving-notifications.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nNotifications.setNotificationHandler({\n  handleNotification: async () => ({\n    shouldShowAlert: true,\n    shouldPlaySound: false,\n    shouldSetBadge: false,\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable for Metro Graph Optimization\nDESCRIPTION: Adds an environment variable to optimize Metro's graph creation, keeping modules around until the entire graph is created. This setting is used only in production mode.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/tree-shaking.mdx#2025-04-22_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nEXPO_UNSTABLE_METRO_OPTIMIZE_GRAPH=1\n```\n\n----------------------------------------\n\nTITLE: Installing expo-battery in Bare React Native Projects\nDESCRIPTION: Command to install the expo-battery package in a bare React Native project using npx. This assumes you have already installed and configured the expo package in your project.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-battery/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-battery\n```\n\n----------------------------------------\n\nTITLE: Rendering Text with React Native for Web in JSX\nDESCRIPTION: This snippet demonstrates how to render text on any platform using the <Text> component from React Native for web. It creates a simple 'Home page' text component that can be used universally.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/workflow/web.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Text } from 'react-native';\n\nexport default function Page() {\n  return <Text>Home page</Text>;\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing AuthSession.getDefaultReturnUrl() URL Generation with Release Channels\nDESCRIPTION: A fix for the AuthSession.getDefaultReturnUrl() method which was returning incorrect URLs when using release channels.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-auth-session/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nAuthSession.getDefaultReturnUrl()\n```\n\n----------------------------------------\n\nTITLE: Running Pod Install for iOS Configuration\nDESCRIPTION: After installing the npm package, run this command to configure the iOS build environment. It uses CocoaPods to integrate the dependencies for the @expo/dom-webview package into the iOS project. Ensure CocoaPods is installed before executing this command.\nSOURCE: https://github.com/expo/expo/blob/main/packages/@expo/dom-webview/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx pod-install\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest in Package.json\nDESCRIPTION: Jest configuration setup for TypeScript testing using expo-module-scripts preset.\nSOURCE: https://github.com/expo/expo/blob/main/guides/Migrating Universal Modules to TypeScript.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n\"jest\": {\n  \"preset\": \"expo-module-scripts\"\n},\n```\n\n----------------------------------------\n\nTITLE: Displaying Device Information in React Native\nDESCRIPTION: This snippet demonstrates how to use the expo-device module to display the device manufacturer and model name in a React Native app.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/device.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Text, View } from 'react-native';\nimport * as Device from 'expo-device';\n\nexport default function App() {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>\n        {Device.manufacturer}: {Device.modelName}\n      </Text>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Styles for Splash Screen\nDESCRIPTION: Updates the Android styles.xml to set the splash screen as the application window background.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-splash-screen/README.md#2025-04-22_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n  <!-- Main activity theme. -->\n  <style name=\"AppTheme\" parent=\"Theme.AppCompat.Light.NoActionBar\">\n+   <item name=\"android:windowBackground\">@drawable/splashscreen</item> <!-- this line instructs the system to use 'splashscreen.xml' as a background of the whole application -->\n    <!-- Other style properties -->\n  </style>\n```\n\n----------------------------------------\n\nTITLE: Using H1 Component in Expo\nDESCRIPTION: Example of using the H1 component which renders as a semantic h1 element on web and styled Text component on native.\nSOURCE: https://github.com/expo/expo/blob/main/packages/html-elements/README.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { H1 } from '@expo/html-elements';\nexport default () => <H1>Example<H1/>\n```\n\n----------------------------------------\n\nTITLE: Adding Splash Screen Background Color in Android colors.xml\nDESCRIPTION: Configures the splash screen background color in the Android colors.xml resource file using hex color codes in #AARRGGBB or #RRGGBB format.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-splash-screen/README.md#2025-04-22_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n<resources>\n+ <color name=\"splashscreen_background\">#AABBCC</color> <!-- #AARRGGBB or #RRGGBB format -->\n  <!-- Other colors defined for your application -->\n</resources>\n```\n\n----------------------------------------\n\nTITLE: Installing expo-dev-client in Expo Project\nDESCRIPTION: Install the expo-dev-client package in your Expo project using npx.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/development-builds/create-a-build.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo install expo-dev-client\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Properties in app.json\nDESCRIPTION: Example of configuring Android and iOS build properties using the expo-build-properties plugin in app.json. It shows how to set compileSdkVersion, targetSdkVersion, and buildToolsVersion for Android, and deploymentTarget for iOS.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/build-properties.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-build-properties\",\n        {\n          \"android\": {\n            \"compileSdkVersion\": 35,\n            \"targetSdkVersion\": 35,\n            \"buildToolsVersion\": \"35.0.0\"\n          },\n          \"ios\": {\n            \"deploymentTarget\": \"15.1\"\n          }\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Background Modes in Expo.plist\nDESCRIPTION: XML configuration for enabling background location mode in iOS Expo.plist file.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/location.mdx#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<key>UIBackgroundModes</key>\n<array>\n  <string>location</string>\n</array>\n```\n\n----------------------------------------\n\nTITLE: Exported HTML Image with Base URL Prefix\nDESCRIPTION: Shows the HTML output after exporting an Image component with baseUrl configured. The src attribute automatically includes the /my-root prefix.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/more/expo-cli.mdx#2025-04-23_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"/my-root/assets/assets/image.png\" />\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Network State Changes\nDESCRIPTION: Shows how to subscribe to network state changes using NetInfo's addEventListener method, with the option to unsubscribe when needed.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/netinfo.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst unsubscribe = NetInfo.addEventListener(state => {\n  console.log('Connection type', state.type);\n  console.log('Is connected?', state.isConnected);\n});\n\n// To unsubscribe to these update, just use:\nunsubscribe();\n```\n\n----------------------------------------\n\nTITLE: Importing expo-sharing Module\nDESCRIPTION: Basic import statement for using the expo-sharing library in a JavaScript/TypeScript application.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/sharing.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Sharing from 'expo-sharing';\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Privacy Manifest in app.json\nDESCRIPTION: Example configuration showing how to declare privacy manifest settings in the app.json configuration file. Demonstrates setting NSPrivacyAccessedAPITypes for UserDefaults access with specific reason codes.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/apple-privacy.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"name\": \"My App\",\n    \"slug\": \"my-app\",\n    \"ios\": {\n      \"privacyManifests\": {\n        \"NSPrivacyAccessedAPITypes\": [\n          {\n            \"NSPrivacyAccessedAPIType\": \"NSPrivacyAccessedAPICategoryUserDefaults\",\n            \"NSPrivacyAccessedAPITypeReasons\": [\"CA92.1\"]\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Pre-packaged Job Type Definition YAML\nDESCRIPTION: Defines the 'type' of a pre-packaged job in an EAS Workflow. The 'type' keyword specifies the type of job to run, such as 'build', 'deploy', 'submit', or 'update'. This snippet shows how to declare the type of job to be executed in a workflow.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/workflows/syntax.mdx#_snippet_20\n\nLANGUAGE: YAML\nCODE:\n```\njobs:\n  my_job:\n    # @info #\n    type: build\n    # @end #\n```\n\n----------------------------------------\n\nTITLE: Importing Local Authentication Module\nDESCRIPTION: JavaScript import statement showing how to import the LocalAuthentication module in a React Native application.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/local-authentication.mdx#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as LocalAuthentication from 'expo-local-authentication';\n```\n\n----------------------------------------\n\nTITLE: Configuring Default iOS Screen Orientation Mask in Info.plist (XML)\nDESCRIPTION: Adds a configuration key (EXDefaultScreenOrientationMask) to the iOS Info.plist file to set the default screen orientation mask allowed by the application. This example sets it to allow all orientations except upside down (`UIInterfaceOrientationMaskAllButUpsideDown`), overriding the default `UIInterfaceOrientationMaskPortrait`. This configuration is optional.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-screen-orientation/README.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<key>EXDefaultScreenOrientationMask</key>\n<string>UIInterfaceOrientationMaskAllButUpsideDown</string>\n```\n\n----------------------------------------\n\nTITLE: Importing Asset from expo-asset\nDESCRIPTION: This snippet shows how to import the Asset class from the expo-asset package for use in a JavaScript file.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/asset.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Asset } from 'expo-asset';\n```\n\n----------------------------------------\n\nTITLE: Importing Checkbox Component from Expo Checkbox in JavaScript\nDESCRIPTION: This snippet shows the ES module import statement for the Checkbox component from the expo-checkbox package using JavaScript. This is a prerequisite for utilizing the Checkbox component in any React (or React Native) project leveraging Expo, and is typically the first step in usage examples. No additional setup is shown in this snippet; it retrieves the Checkbox component for further use.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/checkbox.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Checkbox from 'expo-checkbox';\n```\n\n----------------------------------------\n\nTITLE: Creating a new Expo project with pnpm\nDESCRIPTION: Command to create a new Expo project using pnpm package manager. This will prompt for an app name after execution.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/more/create-expo.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm create expo-app\n```\n\n----------------------------------------\n\nTITLE: Displaying Device Manufacturer and Model with expo-device (React Native, JSX)\nDESCRIPTION: Demonstrates a React Native component that imports and utilizes the expo-device library to display the device's manufacturer and model name. Dependencies include expo-device and react-native. The App component centers the device details within a View, rendering them as a Text node. The inputs are from the Device API, and the output is a rendered UI showing device information. This snippet requires that expo-device is installed and the component is rendered within an Expo-compatible environment.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/device.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport { Text, View } from 'react-native';\nimport * as Device from 'expo-device';\n\nexport default function App() {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>\n        {Device.manufacturer}: {Device.modelName}\n      </Text>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using StatusBar Component in React Native with Expo\nDESCRIPTION: This snippet demonstrates how to use the StatusBar component from expo-status-bar in a React Native application. It sets up a dark background with light text and applies a light style to the status bar.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/status-bar.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { StyleSheet, Text, View } from 'react-native';\nimport { StatusBar } from 'expo-status-bar';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.text}>Notice that the status bar has light text!</Text>\n      <StatusBar style=\"light\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#000',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  text: {\n    color: '#fff',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Permissions for expo-av\nDESCRIPTION: Adding microphone usage description to iOS Info.plist file.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/av.mdx#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<key>NSMicrophoneUsageDescription</key>\n<string>Allow $(PRODUCT_NAME) to access your microphone</string>\n```\n\n----------------------------------------\n\nTITLE: Prioritizing SEO Tags with React Helmet Async in JavaScript\nDESCRIPTION: Demonstrates how to use the prioritizeSeoTags flag on a Helmet component to prioritize certain tags for SEO purposes during server-side rendering. This allows important SEO tags to appear earlier in the HEAD.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-router/vendor/react-helmet-async/README.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n<Helmet prioritizeSeoTags>\n  <title>A fancy webpage</title>\n  <link rel=\"notImportant\" href=\"https://www.chipotle.com\" />\n  <meta name=\"whatever\" value=\"notImportant\" />\n  <link rel=\"canonical\" href=\"https://www.tacobell.com\" />\n  <meta property=\"og:title\" content=\"A very important title\"/>\n</Helmet>\n```\n\n----------------------------------------\n\nTITLE: Initializing Android Theme Module with Kotlin\nDESCRIPTION: Basic Kotlin module implementation that provides theme management functionality with a simple getter method.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/native-module-tutorial.mdx#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\npackage expo.modules.settings\n\nimport expo.modules.kotlin.modules.Module\nimport expo.modules.kotlin.modules.ModuleDefinition\n\nclass ExpoSettingsModule : Module() {\n  override fun definition() = ModuleDefinition {\n    Name(\"ExpoSettings\")\n\n    Function(\"getTheme\") {\n      return@Function \"system\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redux DevTools Store with Expo Plugin\nDESCRIPTION: Setup configuration for Redux store using configureStore with the redux-devtools-expo-dev-plugin enhancer. Disables built-in dev tools and adds Expo DevTools plugin enhancer.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/debugging/devtools-plugins.mdx#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport devToolsEnhancer from 'redux-devtools-expo-dev-plugin';\n\nconst store = configureStore({\n  reducer: rootReducer,\n  devTools: false,\n  enhancers: getDefaultEnhancers => getDefaultEnhancers().concat(devToolsEnhancer()),\n});\n```\n\n----------------------------------------\n\nTITLE: Modifying iOS AppDelegate for Expo Modules\nDESCRIPTION: Changes to the AppDelegate.swift file to support Expo module AppDelegate subscribers, which allows modules to respond to application lifecycle events.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/brownfield/installing-expo-modules.mdx#2025-04-22_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\ndiff --git a/ios/<MyAppProject>/AppDelegate.swift b/ios/<MyAppProject>/AppDelegate.swift\nindex ff83531..bd8651d 100644\n--- a/ios/<MyAppProject>/AppDelegate.swift\n+++ b/ios/<MyAppProject>/AppDelegate.swift\n@@ -1,31 +1,29 @@\n import UIKit\n+import ExpoModulesCore\n\n@main\n-class AppDelegate: UIResponder, UIApplicationDelegate {\n+class AppDelegate: ExpoAppDelegate {\n\n- func application(\\_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n\n+override func application(\\_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n\n- return true\n\n+super.application(application, didFinishLaunchingWithOptions: launchOptions)\n}\n```\n\n----------------------------------------\n\nTITLE: Installing expo-image-loader in bare React Native projects\nDESCRIPTION: This command installs the expo-image-loader package as an npm dependency in a bare React Native project. It should be run after ensuring that the 'expo' package is installed and configured.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-image-loader/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install expo-image-loader\n```\n\n----------------------------------------\n\nTITLE: Creating Mock Implementation for ExpoClipboard in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a mock implementation for the ExpoClipboard native module. It exports an async function that always returns false, simulating the behavior of the hasStringAsync method.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/mocking.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function hasStringAsync(): Promise<boolean> {\n  return false;\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Expo Development Server for Web\nDESCRIPTION: Command to start the Expo development server for web projects using Metro bundler.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/customizing-metro.mdx#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo start --web\n```\n\n----------------------------------------\n\nTITLE: Creating and Running Local Expo Module\nDESCRIPTION: This command scaffolds a new local Expo module within the project's `modules` directory using the `create-expo-module` tool.  The second command, `npx expo run`, will attempt to build and run the Expo project. These commands are run within the terminal.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/workflow/customizing.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npx create-expo-module@latest --local\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo run\n```\n\n----------------------------------------\n\nTITLE: Modifying Entry File for Expo Integration in JavaScript\nDESCRIPTION: This diff snippet demonstrates how to modify the app entry file to use Expo's registerRootComponent instead of React Native's AppRegistry.registerComponent. This change allows targeting web platforms and enables Expo SDK support.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/workflow/web.mdx#2025-04-22_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n+ import {registerRootComponent} from 'expo';\n\nimport App from './App';\n- import {AppRegistry} from 'react-native';\n- import {name as appName} from './app.json';\n\n- AppRegistry.registerComponent(appName, () => App);\n+ registerRootComponent(App);\n```\n\n----------------------------------------\n\nTITLE: Configuring Android build.gradle for Custom Entry (React Native / Groovy)\nDESCRIPTION: This gradle (Groovy) snippet configures the 'react' extension in build.gradle to resolve the Metro entry file dynamically using a shell command executed from Groovy. It sets 'entryFile' by running an Expo script for entry file resolution, ensuring Android builds use the correct project root and Metro config. Requires Node.js and the Expo CLI scripts to be present within the project.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/config/metro.mdx#2025-04-22_snippet_14\n\nLANGUAGE: Groovy\nCODE:\n```\ndef projectRoot = rootDir.getAbsoluteFile().getParentFile().getAbsolutePath()\n\nreact {\n+    entryFile = file([\"node\", \"-e\", \"require('expo/scripts/resolveAppEntry')\", projectRoot, \"android\", \"absolute\"].execute(null, rootDir).text.trim())\n}\n\n```\n\n----------------------------------------\n\nTITLE: Example API Route Error\nDESCRIPTION: Demonstrates how to throw an error in an API route that will be captured as a crash in the EAS Hosting dashboard\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/hosting/api-routes.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nthrow new Error(\"An error!\")\n```\n\n----------------------------------------\n\nTITLE: Creating Projects from NPM Templates and Tarballs - Shell\nDESCRIPTION: Illustrates initialization using specific Expo npm templates, template versions, or local tarballs by leveraging the --template flag. Dependencies include Node.js, npm, and access to npm registry or the local tarball. Accepts both direct template names and file paths; outputs a project using the given template.\nSOURCE: https://github.com/expo/expo/blob/main/packages/create-expo/README.md#2025-04-22_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n# Create from npm\\nnpx create-expo --template tabs # Short for expo-template-tabs\\nnpx create-expo --template expo-template-tabs\\n\\n# Create from npm using a semver of the template\\nnpx create-expo --template expo-template-blank@50\\n\\n# Create from local tarball created with `npm pack`\\nnpx create-expo --template ./path/to/template.tgz\n```\n\n----------------------------------------\n\nTITLE: Defining Metadata for React Native Slider Component in Markdown\nDESCRIPTION: This code snippet defines metadata for the @react-native-community/slider package, including its title, description, source code URL, package name, supported platforms, and availability in Expo Go.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/slider.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: '@react-native-community/slider'\ndescription: A React Native component library that provides access to the system UI for a slider control.\nsourceCodeUrl: 'https://github.com/callstack/react-native-slider'\npackageName: '@react-native-community/slider'\nplatforms: ['android', 'ios', 'web']\ninExpoGo: true\n---\n```\n\n----------------------------------------\n\nTITLE: Validating Configuration with Expo Schemer - JavaScript\nDESCRIPTION: This snippet shows how to use the Schemer library alongside Expo's configuration system to validate project settings. It demonstrates fetching project configuration, retrieving the appropriate schema, and performing validations on the configuration's name and asset properties. It requires @expo/config and a schema.json file. The key parameters include the projectRoot path and the sdkVersion for obtaining the correct schema version.\nSOURCE: https://github.com/expo/expo/blob/main/packages/@expo/schemer/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getConfig } from '@expo/config';\nimport Schemer from '@expo/schemer';\n\nconst { exp } = getConfig(projectRoot);\nconst schema = await getSchemaAsync(exp.sdkVersion);\nconst validator = new Schemer(require('schema.json'));\n\nvalidator.validateName('Wilson Zhao');\nvalidator.validateAssets(exp);\n```\n\n----------------------------------------\n\nTITLE: Basic GLView Implementation in React Native\nDESCRIPTION: Demonstrates basic setup of GLView component with vertex and fragment shaders to render a black dot on cyan background. Shows viewport setup, shader compilation, and program linking.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/gl-view.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { View } from 'react-native';\nimport { GLView } from 'expo-gl';\n\nexport default function App() {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <GLView style={{ width: 300, height: 300 }} onContextCreate={onContextCreate} />\n    </View>\n  );\n}\n\nfunction onContextCreate(gl) {\n  gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n  gl.clearColor(0, 1, 1, 1);\n\n  // Create vertex shader (shape & position)\n  const vert = gl.createShader(gl.VERTEX_SHADER);\n  gl.shaderSource(\n    vert,\n    `\n    void main(void) {\n      gl_Position = vec4(0.0, 0.0, 0.0, 1.0);\n      gl_PointSize = 150.0;\n    }\n  `\n  );\n  gl.compileShader(vert);\n\n  // Create fragment shader (color)\n  const frag = gl.createShader(gl.FRAGMENT_SHADER);\n  gl.shaderSource(\n    frag,\n    `\n    void main(void) {\n      gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n    }\n  `\n  );\n  gl.compileShader(frag);\n\n  // Link together into a program\n  const program = gl.createProgram();\n  gl.attachShader(program, vert);\n  gl.attachShader(program, frag);\n  gl.linkProgram(program);\n  gl.useProgram(program);\n\n  gl.clear(gl.COLOR_BUFFER_BIT);\n  gl.drawArrays(gl.POINTS, 0, 1);\n\n  gl.flush();\n  gl.endFrameEXP();\n}\n```\n\n----------------------------------------\n\nTITLE: Building a Production Android App with EAS Build\nDESCRIPTION: This command initiates a production build for the Android platform using EAS Build.  The `--profile production` flag specifies that the build should use the production profile defined in eas.json.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/submit/android.mdx#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n$ eas build --platform android --profile production\n```\n\n----------------------------------------\n\nTITLE: Importing CameraView in JavaScript\nDESCRIPTION: This simple JavaScript snippet demonstrates how to import the `CameraView` component from `expo-camera`, a necessary step before using it within a React Native app.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/camera.mdx#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport { CameraView } from 'expo-camera';\n```\n\n----------------------------------------\n\nTITLE: Defining Global CSS Styles - CSS\nDESCRIPTION: This CSS snippet defines a global style rule for the .container class, setting the background color to red for any element with the container class. Global styles like this are only effective on web with Expo. It should be imported from a stylesheet at the root or component level.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/config/metro.mdx#2025-04-22_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n.container {\\n  background-color: red;\\n}\n```\n\n----------------------------------------\n\nTITLE: Creating iOS Podfile.properties.json Configuration\nDESCRIPTION: JSON configuration file for iOS that specifies the JavaScript engine to use (Hermes in this case).\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/bare/installing-updates.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo.jsEngine\": \"hermes\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS PaymentSheet Localization\nDESCRIPTION: Configuration in app.json for enabling PaymentSheet localization on iOS, including mixed localizations and language settings.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/stripe.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"ios\": {\n      \"infoPlist\": {\n        \"CFBundleAllowMixedLocalizations\": true,\n        \"CFBundleLocalizations\": [\"fr\"]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Deep Linking in Android Manifest\nDESCRIPTION: XML configuration to add to AndroidManifest.yml to enable deep linking for Android. Sets the MainActivity launchMode to singleTask and adds an intent filter to handle specific URI schemes.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-auth-session/README.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<activity\n    android:name=\".MainActivity\"\n    android:launchMode=\"singleTask\">\n    <intent-filter>\n        <action android:name=\"android.intent.action.VIEW\" />\n        <category android:name=\"android.intent.category.DEFAULT\" />\n        <category android:name=\"android.intent.category.BROWSABLE\" />\n        <!-- Accepts URIs that begin with \"example://gizmos\" -->\n        <data android:scheme=\"example\"\n            android:host=\"gizmos\" />\n    </intent-filter>\n```\n\n----------------------------------------\n\nTITLE: Creating Root Component for Expo Router\nDESCRIPTION: Implementation of a root component to handle Expo Router context when EXPO_ROUTER_APP_ROOT is not defined. Creates an App component that registers as the root component using expo's registerRootComponent.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/reference/troubleshooting.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { registerRootComponent } from 'expo';\nimport { ExpoRoot } from 'expo-router';\n\n// Must be exported or Fast Refresh won't update the context\nexport function App() {\n  const ctx = require.context('./app');\n  return <ExpoRoot context={ctx} />;\n}\n\nregisterRootComponent(App);\n```\n\n----------------------------------------\n\nTITLE: Search Command JSON Response Structure\nDESCRIPTION: Example JSON response from the expo-modules-autolinking search command showing module metadata including path, version, configuration and duplicates.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/autolinking.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo-random\": {\n    \"path\": \"/absolute/path/to/node_modules/expo-random\",\n    \"version\": \"13.0.0\",\n    \"config\": {\n      \"platforms\": [\"ios\", \"android\"],\n      \"ios\": { \"modules\": [\"RandomModule\"] },\n      \"android\": { \"modules\": [\"expo.modules.random.RandomModule\"] }\n    },\n    \"duplicates\": []\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring EAS Build Profiles in eas.json\nDESCRIPTION: JSON configuration for EAS build profiles defining development, preview, and production environments with their respective channel settings.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/migrate-from-classic-updates.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"development\": {\n      \"developmentClient\": true,\n      \"distribution\": \"internal\"\n    },\n    \"preview\": {\n      \"distribution\": \"internal\",\n      \"channel\": \"preview\"\n    },\n    \"production\": {\n      \"channel\": \"production\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Routing Info to DOM Components in Native App\nDESCRIPTION: Shows how to pass routing information from a native component to a DOM component. This example uses usePathname hook from expo-router and passes the pathname as a prop to the DOM component.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/dom-components.mdx#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport DOMComponent from './my-component';\nimport { usePathname } from 'expo-router';\n\nexport default function App() {\n  const pathname = usePathname();\n  return <DOMComponent pathname={pathname} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Using SQLite Context with React Suspense\nDESCRIPTION: Shows how to integrate SQLite Provider with React Suspense for better loading state handling.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/sqlite-next.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SQLiteProvider, useSQLiteContext } from 'expo-sqlite/next';\nimport { Suspense } from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Suspense fallback={<Fallback />}>\n        <SQLiteProvider databaseName=\"test.db\" onInit={migrateDbIfNeeded} useSuspense>\n          <Header />\n          <Content />\n        </SQLiteProvider>\n      </Suspense>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Module Scripts\nDESCRIPTION: Package.json script configurations for building, testing, and preparing TypeScript modules.\nSOURCE: https://github.com/expo/expo/blob/main/guides/Migrating Universal Modules to TypeScript.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n\"scripts\": {\n    \"build\": \"expo-module build\",\n    \"clean\": \"expo-module clean\",\n    \"test\": \"expo-module test\",\n    \"prepare\": \"expo-module prepare\",\n    \"prepublishOnly\": \"expo-module prepublishOnly\",\n    \"expo-module\": \"expo-module\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Background Fetch in iOS Expo.plist\nDESCRIPTION: XML configuration needed for manual iOS projects to enable background fetch capabilities by adding the 'fetch' background mode to the Expo.plist file.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/background-fetch.mdx#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<key>UIBackgroundModes</key>\n  <array>\n    <string>fetch</string>\n  </array>\n</key>\n```\n\n----------------------------------------\n\nTITLE: Setting Page Margins for Android HTML Printing\nDESCRIPTION: CSS example showing how to override default page margins for Android printing by using the @page CSS rule in the HTML content.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/print.mdx#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<style>\n  @page {\n    margin: 20px;\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Installing expo-standard-web-crypto via npm - Shell\nDESCRIPTION: Installs the expo-standard-web-crypto package into a project using npm. This is a prerequisite step for adding W3C Crypto API support in Expo by making the polyfill available for import. Run this command in the project root where your package.json is located.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-standard-web-crypto/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install expo-standard-web-crypto\n```\n\n----------------------------------------\n\nTITLE: Importing ImageManipulator Module in JavaScript\nDESCRIPTION: This snippet demonstrates how to import the ImageManipulator module in a JavaScript file. The import statement allows access to all exported functions and constants from the expo-image-manipulator package.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/imagemanipulator.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as ImageManipulator from 'expo-image-manipulator';\n```\n\n----------------------------------------\n\nTITLE: Using Picker Component with Jetpack Compose\nDESCRIPTION: This code snippet demonstrates how to use the `Picker` component from `@expo/ui/jetpack-compose`. It imports the `Picker` component, defines a set of options, and uses the `selectedIndex` and `onOptionSelected` props to manage the selected option.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/ui.mdx#_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Picker } from '@expo/ui/jetpack-compose';\n\n<Picker\n  options={['$', '$$', '$$$', '$$$$']}\n  selectedIndex={selectedIndex}\n  onOptionSelected={({ nativeEvent: { index } }) => {\n    setSelectedIndex(index);\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Updating Android MainActivity Component Name\nDESCRIPTION: Manual setup required for Android when not using Expo Prebuild. Updates the MainActivity.java file to set the main component name.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/register-root-component.mdx#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n  @Override\n  protected String getMainComponentName() {\n    return \"main\";\n  }\n```\n\n----------------------------------------\n\nTITLE: Installing Canary (Pre-release) Version of Expo SDK\nDESCRIPTION: Command to install the latest canary release of the Expo SDK, which includes the latest development features but may have stability issues.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/index.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Install the alpha version of expo and its related packages\n$ npm install expo@canary && npx expo install --fix\n```\n\n----------------------------------------\n\nTITLE: Push Receipts Response Format\nDESCRIPTION: Example of a successful push receipts response. The response includes a mapping of receipt IDs to their status, showing which push notifications were successfully delivered to the respective push services.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/push-notifications/sending-notifications.mdx#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\": { \"status\": \"ok\" },\n    \"ZZZZZZZZ-ZZZZ-ZZZZ-ZZZZ-ZZZZZZZZZZZZ\": { \"status\": \"ok\" }\n    // When there is no receipt with a given ID (YYYYYYYY-YYYY-YYYY-YYYY-YYYYYYYYYYYY in this\n    // example), the ID is omitted from the response.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Service Worker for Single-Page Expo PWA\nDESCRIPTION: Illustrates how to register a service worker for a single-page Expo Progressive Web App. This script is added to the head of the public/index.html file to register the service worker on page load.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/progressive-web-apps.mdx#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  if ('serviceWorker' in navigator) {\n    window.addEventListener('load', () => {\n      navigator.serviceWorker\n        .register('/sw.js')\n        .then(registration => {\n          console.log('Service Worker registered with scope:', registration.scope);\n        })\n        .catch(error => {\n          console.error('Service Worker registration failed:', error);\n        });\n    });\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Non-Exempt Encryption in app.json\nDESCRIPTION: Example of setting the usesNonExemptEncryption property to false in app.json to handle Export Compliance Information automatically.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/securestore.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"ios\": {\n      \"config\": {\n        \"usesNonExemptEncryption\": false\n      }\n      /* @hide ... */ /* @end */\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Opening Existing SQLite Database Files in Expo\nDESCRIPTION: Function that copies an existing database file from assets to the filesystem and opens it for use with expo-sqlite. Requires expo-file-system and expo-asset modules.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/sqlite-legacy.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as FileSystem from 'expo-file-system';\nimport * as SQLite from 'expo-sqlite/legacy';\nimport { Asset } from 'expo-asset';\n\nasync function openDatabase(pathToDatabaseFile: string): Promise<SQLite.SQLiteDatabase> {\n  if (!(await FileSystem.getInfoAsync(FileSystem.documentDirectory + 'SQLite')).exists) {\n    await FileSystem.makeDirectoryAsync(FileSystem.documentDirectory + 'SQLite');\n  }\n  const asset = await Asset.fromModule(require(pathToDatabaseFile)).downloadAsync();\n  await FileSystem.copyAsync({\n    from: asset.localUri,\n    to: FileSystem.documentDirectory + 'SQLite/myDatabaseName.db',\n  });\n  return SQLite.openDatabase('myDatabaseName.db');\n}\n```\n\n----------------------------------------\n\nTITLE: Using Keep Awake Functions in React Native\nDESCRIPTION: Demonstrates how to use activateKeepAwake and deactivateKeepAwake functions to imperatively control screen sleep behavior in a class component. Includes button handlers to toggle the keep-awake state.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/keep-awake.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { activateKeepAwake, deactivateKeepAwake } from 'expo-keep-awake';\nimport React from 'react';\nimport { Button, View } from 'react-native';\n\nexport default class KeepAwakeExample extends React.Component {\n  render() {\n    return (\n      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n        <Button onPress={this._activate} title=\"Activate\" />\n        <Button onPress={this._deactivate} title=\"Deactivate\" />\n      </View>\n    );\n  }\n\n  _activate = () => {\n    activateKeepAwake();\n    alert('Activated!');\n  };\n\n  _deactivate = () => {\n    deactivateKeepAwake();\n    alert('Deactivated!');\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring .npmrc for Private npm Packages\nDESCRIPTION: The .npmrc configuration automatically created by EAS Build when NPM_TOKEN is available, enabling access to private packages hosted on the npm registry.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/build-reference/private-npm-packages.mdx#2025-04-22_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n//registry.npmjs.org/:_authToken=${NPM_TOKEN}\nregistry=https://registry.npmjs.org/\n```\n\n----------------------------------------\n\nTITLE: Importing Expo as Module in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the main Expo module in a TypeScript file. It is the first step in using Expo APIs in your project. Ensure you have the 'expo' package installed in your project dependencies.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/expo.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Expo from 'expo';\n```\n\n----------------------------------------\n\nTITLE: Importing Audio and Video from expo-av in JavaScript\nDESCRIPTION: JavaScript import statement showing how to import the `Audio` and `Video` components/APIs from the `expo-av` package. This is the standard way to access the library's functionalities in a React Native project using Expo.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/av.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nimport { Audio, Video } from 'expo-av';\n```\n```\n\n----------------------------------------\n\nTITLE: Importing Asset in JavaScript\nDESCRIPTION: This JavaScript snippet shows how to import the 'Asset' module from the 'expo-asset' library. This module is utilized to load and manage asset files in an Expo application, providing functionality to refer to static image resources using React Native conventions.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/asset.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Asset } from 'expo-asset';\n```\n\n----------------------------------------\n\nTITLE: Installing expo-local-authentication in bare React Native projects\nDESCRIPTION: Command to install the expo-local-authentication package using npx expo install.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-local-authentication/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-local-authentication\n```\n\n----------------------------------------\n\nTITLE: Creating Expo App in Monorepo with Yarn\nDESCRIPTION: Terminal command to create a new Expo application within the apps directory of a monorepo using Yarn.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/monorepos.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn create expo apps/cool-app\n```\n\n----------------------------------------\n\nTITLE: Listing Devices for Ad Hoc Provisioning in EAS Build\nDESCRIPTION: This command lists all devices registered via 'eas device:create' for ad hoc provisioning in EAS Build.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/build/internal-distribution.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ eas device:list\n```\n\n----------------------------------------\n\nTITLE: Android Activity Configuration for Theme Support\nDESCRIPTION: XML configuration for Android MainActivity to support UI mode changes.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/user-interface/color-themes.mdx#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<activity android:configChanges=\"keyboard|keyboardHidden|orientation|screenSize|uiMode\">\n```\n\n----------------------------------------\n\nTITLE: Configuring Tracking Transparency Plugin in Expo app.json (JSON)\nDESCRIPTION: Demonstrates how to add the expo-tracking-transparency plugin to the app.json configuration file in an Expo project. This section enables developers to specify a user tracking permission message that will be set as NSUserTrackingUsageDescription in the iOS Info.plist, which is required by Apple to explain how the app will use tracking data. The snippet requires an Expo-managed project and correct placement within the expo.plugins array.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/tracking-transparency.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"expo\\\": {\\n    \\\"plugins\\\": [\\n      [\\n        \\\"expo-tracking-transparency\\\",\\n        {\\n          \\\"userTrackingPermission\\\": \\\"This identifier will be used to deliver personalized ads to you.\\\"\\n        }\\n      ]\\n    ]\\n  }\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Importing VideoThumbnails in JavaScript\nDESCRIPTION: Demonstrates how to import the VideoThumbnails module in a JavaScript file. This import statement makes all of the module's functionality available via the VideoThumbnails namespace.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/video-thumbnails.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as VideoThumbnails from 'expo-video-thumbnails';\n```\n\n----------------------------------------\n\nTITLE: Importing expo-contacts Library\nDESCRIPTION: This JavaScript snippet shows how to import the entire `expo-contacts` library, which provides access to the contacts API.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/contacts.mdx#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport * as Contacts from 'expo-contacts';\n```\n\n----------------------------------------\n\nTITLE: Initializing GestureHandlerRootView in React Native\nDESCRIPTION: Sets up the root gesture handler component by replacing the View component with GestureHandlerRootView in the main Index component.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/gestures.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// ... rest of the import statements remain same\nimport { GestureHandlerRootView } from 'react-native-gesture-handler';\n\nexport default function Index() {\n  return (\n    <GestureHandlerRootView style={styles.container}>\n      {/* ...rest of the code remains */}\n    </GestureHandlerRootView>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Expo SDK Modules in JavaScript (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to import individual modules from installed Expo SDK packages, such as Camera, Contacts, and Gyroscope. Each import makes the respective API available in the JavaScript code for accessing camera, contacts, or sensor features. Dependencies include the respective Expo packages installed in the project, and expected usage is within a React Native application with the 'expo' package configured.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Camera } from 'expo-camera';\nimport * as Contacts from 'expo-contacts';\nimport { Gyroscope } from 'expo-sensors';\n```\n\n----------------------------------------\n\nTITLE: TransformIgnorePatterns Configuration for Jest\nDESCRIPTION: Configuration for transpiling node modules in Jest using transformIgnorePatterns for npm/yarn and pnpm.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/unit-testing.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jest\": {\n    \"preset\": \"jest-expo\",\n    \"transformIgnorePatterns\": [\n      \"node_modules/(?!((jest-)?react-native|@react-native(-community)?)|expo(nent)?|@expo(nent)?/.*|@expo-google-fonts/.*|react-navigation|@react-navigation/.*|@sentry/react-native|native-base|react-native-svg))\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using TextInput Component with Jetpack Compose\nDESCRIPTION: This code snippet demonstrates how to use the `TextInput` component from `@expo/ui/jetpack-compose`. It imports the `TextInput` component and configures properties such as `autocorrection`, `defaultValue`, and `onChangeText`. The `onChangeText` prop takes a callback function that is invoked whenever the text changes. The `setValue` function presumably updates a state variable.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/ui.mdx#_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TextInput } from '@expo/ui/jetpack-compose';\n\n<TextInput autocorrection={false} defaultValue=\"A single line text input\" onChangeText={setValue} />\n```\n\n----------------------------------------\n\nTITLE: Generating API Documentation with Expotools\nDESCRIPTION: Commands for generating API documentation data using the Expotools (et) command line utility.\nSOURCE: https://github.com/expo/expo/blob/main/docs/README.md#2025-04-22_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\net generate-docs-api-data --packageName expo-constants\n\n#### NOTE ####\n# To update a specific SDK reference, run the command by mentioning the SDK version\net gdad -p expo-constants --sdk 51\n\n# For more information about et command, run: et gdad --help\n```\n\n----------------------------------------\n\nTITLE: Jest Snapshot Test Configuration\nDESCRIPTION: Snapshot test implementation for ensuring UI consistency.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/unit-testing.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\ndescribe('<HomeScreen />', () => {\n  test('CustomText renders correctly', () => {\n    const tree = render(<CustomText>Some text</CustomText>).toJSON();\n\n    expect(tree).toMatchSnapshot();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Expo SDK Packages using npx expo install\nDESCRIPTION: Example of how to install multiple Expo SDK packages using the npx expo install command, which ensures version compatibility with your project's Expo SDK version.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo install expo-camera expo-contacts expo-sensors\n```\n\n----------------------------------------\n\nTITLE: ColorPicker Component Usage (SwiftUI)\nDESCRIPTION: This code snippet demonstrates the usage of the ColorPicker component from the `@expo/ui/swift-ui` library. It takes `label`, `selection`, and `onValueChanged` props to manage the color selection. The `style` prop sets the width and height of the color picker.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/ui.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ColorPicker } from '@expo/ui/swift-ui';\n\n<ColorPicker\n  label=\"Select a color\"\n  selection={color}\n  onValueChanged={setColor}\n  style={{ width: 400, height: 200 }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering BoxLink Components for App Store Best Practices in JSX\nDESCRIPTION: This code snippet demonstrates the use of BoxLink components to create a list of linked resources related to app store submission best practices. Each BoxLink includes a title, description, href, and an associated icon.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/distribution/app-stores.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<BoxLink\n  title=\"Versioning your app\"\n  description=\"Learn how to configure native runtime versions for your apps.\"\n  href=\"/build-reference/app-versions/\"\n  Icon={BuildIcon}\n/>\n<BoxLink\n  title=\"App Store presence\"\n  description=\"Manage your Apple App Store metadata from the command line.\"\n  href=\"/eas/metadata/\"\n  Icon={EasMetadataIcon}\n/>\n<BoxLink\n  title=\"Permissions\"\n  description=\"Refine native permissions and system dialog messages by using app config.\"\n  href=\"/guides/permissions\"\n  Icon={CodeSquare01Icon}\n/>\n<BoxLink\n  title=\"App icons\"\n  description=\"App stores have strict rules for home screen icons.\"\n  href=\"/develop/user-interface/splash-screen-and-app-icon/\"\n  Icon={BookOpen02Icon}\n/>\n<BoxLink\n  title=\"Splash screen\"\n  description=\"Create a seamless loading experience using the splash screen API.\"\n  href=\"/develop/user-interface/splash-screen-and-app-icon/\"\n  Icon={BookOpen02Icon}\n/>\n<BoxLink\n  title=\"App store assets\"\n  description=\"Learn how to create screenshots and previews for your app's store pages.\"\n  href=\"/guides/store-assets/\"\n  Icon={BookOpen02Icon}\n/>\n<BoxLink\n  title=\"Localizing your app\"\n  description=\"Prepare versions of your app for different languages and regions.\"\n  href=\"/guides/localization/\"\n  Icon={BookOpen02Icon}\n/>\n<BoxLink\n  title=\"Apple: Review guidelines\"\n  description=\"Official Apple guide on preparing your app for App Store review.\"\n  href=\"https://developer.apple.com/distribute/app-review/\"\n  Icon={AppleAppStoreIcon}\n/>\n```\n\n----------------------------------------\n\nTITLE: Basic GLView Usage in React Native with Expo\nDESCRIPTION: Demonstrates how to use the GLView component to render a simple OpenGL scene with a colored point. The example includes setting up shaders, creating a program, and basic drawing operations.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/gl-view.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { View } from 'react-native';\nimport { GLView } from 'expo-gl';\n\nexport default function App() {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <GLView style={{ width: 300, height: 300 }} onContextCreate={onContextCreate} />\n    </View>\n  );\n}\n\nfunction onContextCreate(gl) {\n  gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n  gl.clearColor(0, 1, 1, 1);\n\n  // Create vertex shader (shape & position)\n  const vert = gl.createShader(gl.VERTEX_SHADER);\n  gl.shaderSource(\n    vert,\n    `\n    void main(void) {\n      gl_Position = vec4(0.0, 0.0, 0.0, 1.0);\n      gl_PointSize = 150.0;\n    }\n  `\n  );\n  gl.compileShader(vert);\n\n  // Create fragment shader (color)\n  const frag = gl.createShader(gl.FRAGMENT_SHADER);\n  gl.shaderSource(\n    frag,\n    `\n    void main(void) {\n      gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n    }\n  `\n  );\n  gl.compileShader(frag);\n\n  // Link together into a program\n  const program = gl.createProgram();\n  gl.attachShader(program, vert);\n  gl.attachShader(program, frag);\n  gl.linkProgram(program);\n  gl.useProgram(program);\n\n  gl.clear(gl.COLOR_BUFFER_BIT);\n  gl.drawArrays(gl.POINTS, 0, 1);\n\n  gl.flush();\n  gl.endFrameEXP();\n}\n```\n\n----------------------------------------\n\nTITLE: Including Asset Cache-Control Header in HTTP Responses (HTTP/text)\nDESCRIPTION: Demonstrates an example HTTP cache-control header recommended for use in asset responses in the Expo update protocol. This header instructs clients to cache assets for a long duration and not to attempt revalidation, supporting performance and reliability. Intended for use in HTTP asset responses, there are no programming dependencies beyond HTTP server configuration.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/technical-specs/expo-updates-1.mdx#2025-04-22_snippet_8\n\nLANGUAGE: text\nCODE:\n```\ncache-control: public, max-age=31536000, immutable\n```\n\n----------------------------------------\n\nTITLE: Android Gradle Configuration Update\nDESCRIPTION: Modifications required for Android's build.gradle to use Expo CLI for production bundling.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/config/metro.mdx#2025-04-22_snippet_21\n\nLANGUAGE: diff\nCODE:\n```\nreact {\n  ...\n+     // Use Expo CLI to bundle the app, this ensures the Metro config\n+     // works correctly with Expo projects.\n+     cliFile = new File([\"node\", \"--print\", \"require.resolve('@expo/cli')\"].execute(null, rootDir).text.trim())\n+     bundleCommand = \"export:embed\"\n}\n```\n\n----------------------------------------\n\nTITLE: Image Picker Response Example\nDESCRIPTION: Example JSON response structure returned when an image is selected using the image picker.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/imagepicker.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"assets\": [\n    {\n      \"assetId\": \"C166F9F5-B5FE-4501-9531\",\n      \"base64\": null,\n      \"duration\": null,\n      \"exif\": null,\n      \"fileName\": \"IMG.HEIC\",\n      \"fileSize\": 6018901,\n      \"height\": 3025,\n      \"type\": \"image\",\n      \"uri\": \"file:///data/user/0/host.exp.exponent/cache/cropped1814158652.jpg\"\n      \"width\": 3024\n    }\n  ],\n  \"canceled\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Workflow Name in YAML\nDESCRIPTION: This snippet demonstrates how to define a human-friendly name for an EAS workflow using the `name` key in a YAML file. This name is displayed on the Expo dashboard for easy identification.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/workflows/syntax.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# @info #\nname: My workflow\n# @end #\n```\n\n----------------------------------------\n\nTITLE: Configuring EAS Project - Shell\nDESCRIPTION: This command configures your project for EAS builds. It creates an `eas.json` file in your project, where you can configure build profiles and other settings. This step is necessary before creating a build.\nSOURCE: https://github.com/expo/expo/blob/main/docs/scenes/get-started/set-up-your-environment/instructions/androidSimulatedDevelopmentBuild.mdx#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n$ eas build:configure\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Pedometer Updates with Expo Sensors (React Native, JSX)\nDESCRIPTION: This snippet demonstrates how to use React and the expo-sensors Pedometer API to check pedometer availability, retrieve past and current step counts, and subscribe for ongoing step updates. Required dependencies include 'react', 'react-native', and 'expo-sensors'. Key parameters include the start and end times for historical step retrieval, and the real-time subscription for new step data. The inputs are provided via the Pedometer sensor; the outputs are displayed as text in the app. The component uses hooks for state and effect management and includes a clean unsubscribe logic. This implementation is intended for Android and iOS and requires the expo-sensors package to be installed.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/pedometer.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\nimport { Pedometer } from 'expo-sensors';\n\nexport default function App() {\n  const [isPedometerAvailable, setIsPedometerAvailable] = useState('checking');\n  const [pastStepCount, setPastStepCount] = useState(0);\n  const [currentStepCount, setCurrentStepCount] = useState(0);\n\n  const subscribe = async () => {\n    const isAvailable = await Pedometer.isAvailableAsync();\n    setIsPedometerAvailable(String(isAvailable));\n\n    if (isAvailable) {\n      const end = new Date();\n      const start = new Date();\n      start.setDate(end.getDate() - 1);\n\n      const pastStepCountResult = await Pedometer.getStepCountAsync(start, end);\n      if (pastStepCountResult) {\n        setPastStepCount(pastStepCountResult.steps);\n      }\n\n      return Pedometer.watchStepCount(result => {\n        setCurrentStepCount(result.steps);\n      });\n    }\n  };\n\n  useEffect(() => {\n    const subscription = subscribe();\n    return () => subscription && subscription.remove();\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <Text>Pedometer.isAvailableAsync(): {isPedometerAvailable}</Text>\n      <Text>Steps taken in the last 24 hours: {pastStepCount}</Text>\n      <Text>Walk! And watch this go up: {currentStepCount}</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: 15,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Formatting CameraResult Type in TypeScript\nDESCRIPTION: This TypeScript snippet shows how to write a descriptive type definition with appropriate TSDoc comments. It underscores the importance of meaningful comments for better developer understanding and maintenance.\nSOURCE: https://github.com/expo/expo/blob/main/guides/Expo Documentation Writing Style Guide.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype CameraResult = {\n  // CORRECT:\n  /**\n   * The width of the captured photo, measured in pixels\n   */\n  width: number;\n\n  // INCORRECT:\n  /**\n   * The width\n   */\n  width: number;\n\n  // ACCEPTABLE BUT WE CAN DO BETTER:\n  width: number;\n\n  ...\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint in package.json (js)\nDESCRIPTION: This snippet shows how to configure ESLint within the `package.json` file by adding an `eslintConfig` object. It uses the `extends` property to inherit the base configuration from `eslint-config-universe`. You can replace `\"universe\"` with platform-specific configs like `\"universe/native\"`.\nSOURCE: https://github.com/expo/expo/blob/main/packages/eslint-config-universe/README.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n{\n  \"eslintConfig\": {\n    // Choose from universe/native, universe/node, universe/web\n    \"extends\": \"universe\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Expo E2E Tests on iOS (Bash)\nDESCRIPTION: This set of bash commands builds and runs E2E tests for iOS with Detox. It starts with pod installation and continues with Detox build and test commands. Dependencies include Xcode, CocoaPods, Detox, and proper iOS simulator setup. Commands should be run from the project root. Outputs include test results for the iOS app. Ensure iPhone 16 simulator is running in advance.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-updates/e2e/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx pod-install\\nyarn detox:ios:debug:build\\nyarn detox:ios:debug:test\n```\n\n----------------------------------------\n\nTITLE: Modifying Android Gradle for Custom Entry File in React Native Production\nDESCRIPTION: This snippet shows how to modify the Android app/build.gradle file to use Metro module resolution for finding the root entry file in React Native production builds.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/config/metro.mdx#2025-04-22_snippet_24\n\nLANGUAGE: diff\nCODE:\n```\n+ def projectRoot = rootDir.getAbsoluteFile().getParentFile().getAbsolutePath()\n\nreact {\n+    entryFile = file([\"node\", \"-e\", \"require('expo/scripts/resolveAppEntry')\", projectRoot, \"android\", \"absolute\"].execute(null, rootDir).text.trim())\n}\n```\n\n----------------------------------------\n\nTITLE: Exported HTML Link with Base URL Prefix\nDESCRIPTION: Shows the HTML output after exporting a Link component with baseUrl configured. The href attribute automatically includes the /my-root prefix.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/more/expo-cli.mdx#2025-04-23_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"/my-root/blog/123\">Go to blog post</a>\n```\n\n----------------------------------------\n\nTITLE: Using SafeAreaInsetsContext Consumer\nDESCRIPTION: Example of using SafeAreaInsetsContext.Consumer to access inset data.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/safe-area-context.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SafeAreaInsetsContext } from 'react-native-safe-area-context';\n\nfunction Component() {\n  return (\n    <SafeAreaInsetsContext.Consumer>\n      {insets => <View style={{ paddingTop: insets.top }} />}\n    </SafeAreaInsetsContext.Consumer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Progress Tracker Component in JSX\nDESCRIPTION: React component implementation showing tutorial progress with props for tracking current chapter, displaying completion summary, and providing navigation to next chapter\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/eas/internal-distribution-builds.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ProgressTracker\n  currentChapterIndex={5}\n  name=\"EAS_TUTORIAL\"\n  summary=\"We successfully created internal distribution builds for Android and iOS, used ad hoc provisioning for iOS, and installed multiple app variants on the same device.\"\n  nextChapterDescription=\"In the next chapter, learn about developer-facing and user-facing app versions and how to manage them automatically.\"\n  nextChapterTitle=\"Manage different app versions\"\n  nextChapterLink=\"/tutorial/eas/manage-app-versions/\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Complete Color Theme Implementation Example\nDESCRIPTION: Full example of implementing color theme support in an Expo application with styling and status bar integration.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/user-interface/color-themes.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Text, StyleSheet, View, useColorScheme } from 'react-native';\nimport { StatusBar } from 'expo-status-bar';\n\nexport default function App() {\n  const colorScheme = useColorScheme();\n\n  const themeTextStyle = colorScheme === 'light' ? styles.lightThemeText : styles.darkThemeText;\n  const themeContainerStyle =\n    colorScheme === 'light' ? styles.lightContainer : styles.darkContainer;\n\n  return (\n    <View style={[styles.container, themeContainerStyle]}>\n      <Text style={[styles.text, themeTextStyle]}>Color scheme: {colorScheme}</Text>\n      <StatusBar />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  text: {\n    fontSize: 20,\n  },\n  lightContainer: {\n    backgroundColor: '#d0d0c0',\n  },\n  darkContainer: {\n    backgroundColor: '#242c40',\n  },\n  lightThemeText: {\n    color: '#242c40',\n  },\n  darkThemeText: {\n    color: '#d0d0c0',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Fingerprint Job Type Configuration YAML\nDESCRIPTION: Configures a 'fingerprint' job in an EAS Workflow. The 'type' keyword is set to 'fingerprint'. This snippet illustrates how to configure a fingerprint job to calculate the fingerprint of Android and iOS builds. Note that this job only supports CNG (managed) workflows.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/workflows/syntax.mdx#_snippet_24\n\nLANGUAGE: YAML\nCODE:\n```\njobs:\n  my_job:\n    # @info #\n    type: fingerprint\n    # @end #\n```\n\n----------------------------------------\n\nTITLE: Fetching Network Information Once in React Native\nDESCRIPTION: This snippet demonstrates how to get network connection information once using the fetch() method. It returns a promise that resolves to a state object containing connection type and connection status.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/netinfo.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nNetInfo.fetch().then(state => {\n  console.log('Connection type', state.type);\n  console.log('Is connected?', state.isConnected);\n});\n```\n\n----------------------------------------\n\nTITLE: Logging into EAS CLI - Shell\nDESCRIPTION: This command logs you into the EAS CLI using your Expo account. You will need to have an Expo account before running this command.  The command will prompt you to authenticate through a web browser or other authentication method.\nSOURCE: https://github.com/expo/expo/blob/main/docs/scenes/get-started/set-up-your-environment/instructions/androidSimulatedDevelopmentBuild.mdx#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ eas login\n```\n\n----------------------------------------\n\nTITLE: Installing expo-screen-orientation via npm\nDESCRIPTION: Installs the expo-screen-orientation package as a dependency for a bare React Native project using the Node Package Manager (npm). This command should be run in the project's root directory after ensuring the base 'expo' package is installed and configured.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-screen-orientation/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install expo-screen-orientation\n```\n\n----------------------------------------\n\nTITLE: Using captureRef to Capture React Native View\nDESCRIPTION: Calls 'captureRef' to capture a screenshot of a specified view and saves it as a temporary file. Accepts options such as format, quality, and size to customize the output image. Provides a file URI or base64-encoded string as output.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/captureRef.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst targetPixelCount = 1080; // If you want full HD pictures\nconst pixelRatio = PixelRatio.get(); // The pixel ratio of the device\n// pixels * pixelRatio = targetPixelCount, so pixels = targetPixelCount / pixelRatio\nconst pixels = targetPixelCount / pixelRatio;\n\nconst result = await captureRef(this.imageContainer, {\n  result: 'tmpfile',\n  height: pixels,\n  width: pixels,\n  quality: 1,\n  format: 'png',\n});\n```\n\n----------------------------------------\n\nTITLE: Installing iOS Dependencies\nDESCRIPTION: Command to install the native iOS dependencies using CocoaPods after modifying the Podfile.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/brownfield/installing-expo-modules.mdx#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ cd ios && pod install\n```\n\n----------------------------------------\n\nTITLE: Configuring AndroidManifest.xml for expo-cellular Permissions (XML)\nDESCRIPTION: This XML snippet demonstrates how to add the necessary `android.permission.READ_PHONE_STATE` permission to your project's `AndroidManifest.xml`. This step is required for Android projects not using Continuous Native Generation (CNG) or when managing the native project manually, allowing the `expo-cellular` library to access telephony information via `TelephonyManager`.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/cellular.mdx#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"android.permission.READ_PHONE_STATE\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Expo App Config for Handoff\nDESCRIPTION: Configuration file for setting up Handoff origin and associated domains in an Expo application using app.config.tsx.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/advanced/apple-handoff.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nprocess.env.EXPO_TUNNEL_SUBDOMAIN = 'bacon-router-sandbox';\n\nconst ngrokUrl = `${process.env.EXPO_TUNNEL_SUBDOMAIN}.ngrok.io`;\n\n/** @type {import('expo/config').ExpoConfig} */\nmodule.exports = {\n  // ...\n  ios: {\n    associatedDomains: [\n      `applinks:${ngrokUrl}`,\n      `activitycontinuation:${ngrokUrl}`,\n      `webcredentials:${ngrokUrl}`,\n      // Add additional production-URLs here.\n      // `applinks:example.com`,\n      // `activitycontinuation:example.com`,\n      // `webcredentials:example.com`,\n    ],\n  },\n\n  plugins: [\n    [\n      'expo-router',\n      {\n        // Note: The URL must start with \"https://\" in \"headOrigin\"\n        headOrigin:\n          process.env.NODE_ENV === 'development'\n            ? `https://${ngrokUrl}`\n            : 'https://my-website-example.com',\n      },\n    ],\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Applying Global CSS in Components - JSX\nDESCRIPTION: This React/React Native (JSX) example shows how to import a global stylesheet and use the .container class both in a standard DOM <div> and in a View component from react-native/web. For the View component, a special style prop is used to apply the CSS class. This demonstrates how Expo Metro allows seamless integration of web CSS in JS components and how class names must be applied on React Native for Web components using a special $$css:true syntax.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/config/metro.mdx#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport './styles.css';\\nimport { View } from 'react-native';\\n\\nexport default function App() {\\n  return (\\n    <>\\n      {/* Use `className` to assign the style with React DOM components. */}\\n      <div className=\"container\">Hello World</div>\\n\\n      {/* Use `style` with the following syntax to append class names in React Native for web. */}\\n      <View\\n        style={{\\n          $$css: true,\\n          _: 'container',\\n        }}>\\n        Hello World\\n      </View>\\n    </>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Auto Backup for expo-secure-store\nDESCRIPTION: XML configuration for excluding SecureStore data from Android Auto Backup for both Android 12+ and Android 11 and lower.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/securestore.mdx#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<!--  Auto Backup configuration for Android 12 and higher -->\n<data-extraction-rules>\n  <cloud-backup>\n    <include domain=\"sharedpref\" path=\".\"/>\n    <exclude domain=\"sharedpref\" path=\"SecureStore\"/>\n  </cloud-backup>\n  <device-transfer>\n    <include domain=\"sharedpref\" path=\".\"/>\n    <exclude domain=\"sharedpref\" path=\"SecureStore\"/>\n  </device-transfer>\n</data-extraction-rules>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<!--  Auto Backup configuration for Android 11 and lower -->\n<full-backup-content>\n  <include domain=\"sharedpref\" path=\".\"/>\n  <exclude domain=\"sharedpref\" path=\"SecureStore\"/>\n</full-backup-content>\n```\n\n----------------------------------------\n\nTITLE: Using Embedded Assets with expo-image\nDESCRIPTION: Example of using an embedded asset directly with expo-image component after configuring with expo-asset plugin\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/user-interface/assets.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Image } from 'expo-image';\n\nexport default function HomeScreen() {\n  return <Image source={{ uri: 'example' }} style={{ width: 100, height: 100 }} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Print Functionality with React Native and Expo\nDESCRIPTION: Complete example showing how to implement printing features including direct printing, PDF generation, and printer selection on iOS. Uses expo-print and expo-sharing libraries with a sample HTML template.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/print.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { View, StyleSheet, Button, Platform, Text } from 'react-native';\nimport * as Print from 'expo-print';\nimport { shareAsync } from 'expo-sharing';\n\nconst html = `\n<html>\n  <head>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no\" />\n  </head>\n  <body style=\"text-align: center;\">\n    <h1 style=\"font-size: 50px; font-family: Helvetica Neue; font-weight: normal;\">\n      Hello Expo!\n    </h1>\n    <img\n      src=\"https://d30j33t1r58ioz.cloudfront.net/static/guides/sdk.png\"\n      style=\"width: 90vw;\" />\n  </body>\n</html>\n`;\n\nexport default function App() {\n  const [selectedPrinter, setSelectedPrinter] = useState();\n\n  const print = async () => {\n    await Print.printAsync({\n      html,\n      printerUrl: selectedPrinter?.url,\n    });\n  };\n\n  const printToFile = async () => {\n    const { uri } = await Print.printToFileAsync({ html });\n    console.log('File has been saved to:', uri);\n    await shareAsync(uri, { UTI: '.pdf', mimeType: 'application/pdf' });\n  };\n\n  const selectPrinter = async () => {\n    const printer = await Print.selectPrinterAsync();\n    setSelectedPrinter(printer);\n  };\n\n  return (\n    <View style={styles.container}>\n      <Button title=\"Print\" onPress={print} />\n      <View style={styles.spacer} />\n      <Button title=\"Print to PDF file\" onPress={printToFile} />\n      {Platform.OS === 'ios' && (\n        <>\n          <View style={styles.spacer} />\n          <Button title=\"Select printer\" onPress={selectPrinter} />\n          <View style={styles.spacer} />\n          {selectedPrinter ? (\n            <Text style={styles.printer}>{`Selected printer: ${selectedPrinter.name}`}</Text>\n          ) : undefined}\n        </>\n      )}\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Blurhash for Images on the Server\nDESCRIPTION: JavaScript implementation for a server-side endpoint that generates blurhash from uploaded images using Express.js, multer for handling file uploads, sharp for image processing, and the blurhash package for encoding.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/image.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// Multer is a middleware for handling `multipart/form-data`.\nconst multer = require('multer');\n// Sharp allows you to receive a data buffer from the uploaded image.\nconst sharp = require('sharp');\n// Import the encode function from the blurhash package.\nconst { encode } = require('blurhash');\n\n// Initialize `multer`.\nconst upload = multer();\n```\n\nLANGUAGE: js\nCODE:\n```\napp.post('/blurhash', upload.single('image'), async (req, res) => {\n  const { file } = req;\n  // If the file is not available we're returning with error.\n  if (file === null) {\n    res.status(400).json({ message: 'Image is missing' });\n    return;\n  }\n\n  // Users can specify number of components in each axes.\n  const componentX = req.body.componentX ?? 4;\n  const componentY = req.body.componentY ?? 3;\n\n  // We're converting provided image to a byte buffer.\n  // Sharp currently supports multiple common formats like JPEG, PNG, WebP, GIF, and AVIF.\n  const { data, info } = await sharp(file.buffer).ensureAlpha().raw().toBuffer({\n    resolveWithObject: true,\n  });\n\n  const blurhash = encode(\n    new Uint8ClampedArray(data),\n    info.width,\n    info.height,\n    componentX,\n    componentY\n  );\n  res.json({ blurhash });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Properties in app.config.js\nDESCRIPTION: Example of configuring Android and iOS build properties using the expo-build-properties plugin in app.config.js. It demonstrates setting compileSdkVersion, targetSdkVersion, and buildToolsVersion for Android, and deploymentTarget for iOS.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/build-properties.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  expo: {\n    plugins: [\n      [\n        'expo-build-properties',\n        {\n          android: {\n            compileSdkVersion: 35,\n            targetSdkVersion: 35,\n            buildToolsVersion: '35.0.0',\n          },\n          ios: {\n            deploymentTarget: '15.1',\n          },\n        },\n      ],\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Details Screen Route in Expo Router (TypeScript)\nDESCRIPTION: This code defines a DetailsScreen component for the /details route in an Expo Router app. It creates a simple view with centered text and basic styling.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/file-based-routing.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { View, Text, StyleSheet } from 'react-native';\n\nexport default function DetailsScreen() {\n  return (\n    <View style={styles.container}>\n      <Text>Details</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Importing the Sharing Module in JavaScript\nDESCRIPTION: Basic import statement for the expo-sharing module which allows you to share files directly with other compatible applications.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/sharing.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Sharing from 'expo-sharing';\n```\n\n----------------------------------------\n\nTITLE: Importing Expo Fingerprint in TypeScript\nDESCRIPTION: Example showing how to import the Fingerprint module for use in a TypeScript project to access the API programmatically.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/fingerprint.mdx#2025-04-22_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nimport * as Fingerprint from '@expo/fingerprint';\n```\n\n----------------------------------------\n\nTITLE: Importing the FileSystem Module in JavaScript\nDESCRIPTION: Shows how to import the FileSystem module from the expo-file-system package to use its functionality in a JavaScript application.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/filesystem.mdx#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport * as FileSystem from 'expo-file-system';\n```\n\n----------------------------------------\n\nTITLE: Copy ADB to /usr/bin (Bash)\nDESCRIPTION: This command copies the adb executable from the Android SDK platform-tools directory to the /usr/bin directory. This can resolve conflicts between different adb versions by ensuring the system uses the Android SDK's adb.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/workflow/android-studio-emulator.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo cp ~/Library/Android/sdk/platform-tools/adb /usr/bin\n```\n\n----------------------------------------\n\nTITLE: Modifying Android build.gradle File to Add MPAndroidChart Dependency\nDESCRIPTION: Adds the MPAndroidChart library dependency to the Android project's build.gradle file to enable radial chart functionality for Android.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/third-party-library.mdx#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\ndependencies {\n  implementation project(':expo-modules-core')\n  implementation \"org.jetbrains.kotlin:kotlin-stdlib-jdk7:${getKotlinVersion()}\"\n+ implementation 'com.github.PhilJay:MPAndroidChart:v3.1.0'\n}\n```\n\n----------------------------------------\n\nTITLE: Using Expo SQLite for Database Operations\nDESCRIPTION: Expo SQLite provides a persistent database with WebSQL-like API for complex data storage needs including table creation, querying, and prepared statements.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/user-interface/store-data.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexpo-sqlite\n```\n\n----------------------------------------\n\nTITLE: Installing EAS CLI and Login Commands\nDESCRIPTION: Terminal commands for installing EAS CLI globally via npm and logging into an Expo account.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/migrate-from-classic-updates.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install --global eas-cli\n$ eas login\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Drawer Navigation in Expo\nDESCRIPTION: Command to install required packages for implementing drawer navigation including @react-navigation/drawer, react-native-gesture-handler, and react-native-reanimated.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/advanced/drawer.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo install @react-navigation/drawer react-native-gesture-handler react-native-reanimated\n```\n\n----------------------------------------\n\nTITLE: Installing Expo Go via CLI Command in Markdown\nDESCRIPTION: This code snippet demonstrates how to start the Expo development server and open the Android Emulator using the Expo CLI command.\nSOURCE: https://github.com/expo/expo/blob/main/docs/scenes/get-started/set-up-your-environment/instructions/androidSimulatedExpoGo.mdx#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nWhen you start a development server with `npx expo start` on the [start developing](/get-started/start-developing) page, press <kbd>a</kbd> to open the Android Emulator. Expo CLI will install Expo Go automatically.\n```\n\n----------------------------------------\n\nTITLE: Installing Expo SDK Packages via npx (shell)\nDESCRIPTION: This shell command allows developers to install multiple Expo SDK packages simultaneously using npx. The example demonstrates installing the expo-camera, expo-contacts, and expo-sensors packages which provide access to device features. Requires npx and Node.js environment; no specific parameters aside from the package names, and outputs updated node_modules with the installed libraries.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ npx expo install expo-camera expo-contacts expo-sensors\n```\n\n----------------------------------------\n\nTITLE: Configuring Android permissions for expo-cellular\nDESCRIPTION: XML configuration for Android manifest to add the READ_PHONE_STATE permission required by the TelephonyManager on Android. This permission is necessary for the expo-cellular module to function properly on Android devices.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-cellular/README.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Added permissions -->\n<uses-permission android:name=\"android.permission.READ_PHONE_STATE\" />\n```\n\n----------------------------------------\n\nTITLE: Enabling minifyTypeofWindow for Native Apps - babel-preset-expo - JavaScript\nDESCRIPTION: This snippet demonstrates how to set the minifyTypeofWindow option in the native platform-specific configuration within babel-preset-expo. Setting native.minifyTypeofWindow to true enables minification by converting typeof window checks to a literal, which may reduce bundle size when polyfills are not needed. This setting is helpful for native environments lacking window polyfills. Input: Babel config array; Output: Potentially smaller native bundle.\nSOURCE: https://github.com/expo/expo/blob/main/packages/babel-preset-expo/README.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n[\n  'babel-preset-expo',\n  {\n    // If your native app doesn't polyfill `window` then setting this to `false` can reduce bundle size.\n    native: {\n      minifyTypeofWindow: true,\n    },\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Rendering BoxLink Component for Usage-Based Pricing Section in React\nDESCRIPTION: This code snippet displays a BoxLink component for the usage-based pricing section. It provides a link to documentation on how Expo applies usage-based billing and monitoring tools for EAS Build and Update usage.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/billing/overview.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<BoxLink\n  title=\"Usage-based pricing\"\n  description=\"Learn how Expo applies usage-based billing for customers who exceed their plan quotas and about monitoring your EAS Build and Update usage.\"\n  href=\"/billing/usage-based-pricing/\"\n  Icon={CreditCard02Icon}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Platform Compatibility Section using JSX Component\nDESCRIPTION: This JSX snippet renders the `PlatformsSection` component, which was previously imported. It passes boolean props (`android`, `emulator`, `ios`, `simulator`, `web`) to indicate the platforms supported or discussed in this context. This component likely displays icons or information related to platform compatibility within the documentation.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/gesture-handler.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<PlatformsSection android emulator ios simulator web />\n```\n\n----------------------------------------\n\nTITLE: Importing BackgroundFetch API\nDESCRIPTION: This snippet shows how to import the `BackgroundFetch` module from the `expo-background-fetch` package, enabling use of its API within Expo applications.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/background-fetch.mdx#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport * as BackgroundFetch from 'expo-background-fetch';\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Microphone Permission\nDESCRIPTION: XML code for adding the RECORD_AUDIO permission to the Android manifest file. This is required when using audio recording functionality in your Expo app with manual native project configuration.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/av.mdx#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"android.permission.RECORD_AUDIO\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Theme Provider in Expo Router\nDESCRIPTION: Example of setting up theme configuration in Expo Router using ThemeProvider from React Navigation.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/migrate/from-react-navigation.mdx#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ThemeProvider, DarkTheme, DefaultTheme, useTheme } from '@react-navigation/native';\nimport { Slot } from 'expo-router';\n\nexport default function RootLayout() {\n  return (\n    <ThemeProvider value={DarkTheme}>\n      <Slot />\n    </ThemeProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Typed URL Parameters in Dynamic Routes\nDESCRIPTION: Examples of using typed parameters with useLocalSearchParams for both regular and rest syntax routes\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/reference/url-parameters.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Text } from 'react-native';\nimport { useLocalSearchParams } from 'expo-router';\n\nexport default function Route() {\n  const { everything } = useLocalSearchParams<{\n    everything: string[];\n    query?: string;\n    query2?: string;\n  }>();\n  const user = everything[0];\n\n  return <Text>User: {user}</Text>;\n}\n```\n\n----------------------------------------\n\nTITLE: Relative Path Navigation with useSegments\nDESCRIPTION: Implementation of relative path navigation using useSegments hook for complex routing scenarios.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/reference/typed-routes.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Link, useSegments } from 'expo-router';\n\nexport function Button() {\n  const [\n    // This will be either `(feed)` or `(search)` depending on the current tab.\n    first,\n  ] = useSegments();\n\n  return <Link href={`/${first}/profile`}>Push profile</Link>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing webpack.config.ts for Expo\nDESCRIPTION: TypeScript webpack configuration file that uses Expo's webpack config with proper type definitions for environment and arguments (deprecated approach).\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/typescript.mdx#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport createExpoWebpackConfigAsync from '@expo/webpack-config/webpack';\nimport { Arguments, Environment } from '@expo/webpack-config/webpack/types';\n\nmodule.exports = async function (env: Environment, argv: Arguments) {\n  const config = await createExpoWebpackConfigAsync(env, argv);\n  // Customize the config before returning it.\n  return config;\n};\n```\n\n----------------------------------------\n\nTITLE: Importing LinearGradient Component from Expo\nDESCRIPTION: Simple import statement showing how to import the LinearGradient component from the expo-linear-gradient package.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/linear-gradient.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { LinearGradient } from 'expo-linear-gradient';\n```\n\n----------------------------------------\n\nTITLE: Adding Expo Symbols Package with npm\nDESCRIPTION: Installs the Expo Symbols package using npm in Expo or React Native projects. This requires npm and the Expo CLI as prerequisites. The command facilitates access to the SF Symbols library in iOS environments using React Native and Expo.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-symbols/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx expo install expo-symbols\n```\n\n----------------------------------------\n\nTITLE: Rendering External URL in React Native WebView\nDESCRIPTION: This snippet demonstrates how to use the WebView component to render an external URL (https://expo.dev) in a React Native application. It also includes styling to ensure the WebView takes up the full screen and accounts for the status bar height.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/webview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { WebView } from 'react-native-webview';\nimport Constants from 'expo-constants';\nimport { StyleSheet } from 'react-native';\n\nexport default function App() {\n  return (\n    <WebView\n      style={styles.container}\n      source={{ uri: 'https://expo.dev' }}\n    />\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: Constants.statusBarHeight,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Importing RawH3 Component in TypeScript/JSX\nDESCRIPTION: This snippet imports the `RawH3` component from a specific path (`~/ui/components/Text`) within the project. This component is likely used for rendering level 3 headings in a React or Expo application using TypeScript and JSX.\nSOURCE: https://github.com/expo/expo/blob/main/docs/scenes/get-started/start-developing/ProjectStructure/files/tsconfig-json.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RawH3 } from '~/ui/components/Text';\n```\n\n----------------------------------------\n\nTITLE: Basic Store Configuration Template\nDESCRIPTION: Example store.config.json template showing basic app store metadata configuration including title, subtitle, description, and various URLs for the Apple App Store\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/metadata/getting-started.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"configVersion\": 0,\n  \"apple\": {\n    \"info\": {\n      \"en-US\": {\n        \"title\": \"Awesome App\",\n        \"subtitle\": \"Your self-made awesome app\",\n        \"description\": \"The most awesome app you have ever seen\",\n        \"keywords\": [\"awesome\", \"app\"],\n        \"marketingUrl\": \"https://example.com/en/promo\",\n        \"supportUrl\": \"https://example.com/en/support\",\n        \"privacyPolicyUrl\": \"https://example.com/en/privacy\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Page Redirect with React Component in JSX\nDESCRIPTION: This code snippet imports and implements a Redirect component that redirects the user from the current page to '/build/introduction'. The component is imported from the project's component library and used with a specific path property.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/build/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Redirect from '~/components/plugins/Redirect';\n\n<Redirect path=\"/build/introduction\" />\n```\n\n----------------------------------------\n\nTITLE: Checking ADB Server Version (Bash)\nDESCRIPTION: This command checks the adb server version. It is useful for identifying version conflicts between the adb server and client.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/workflow/android-studio-emulator.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ adb server version (xx) doesn't match this client (xx); killing...\n```\n\n----------------------------------------\n\nTITLE: Configuring Apple Authentication Plugin in Expo app.json\nDESCRIPTION: Configuration to use the expo-apple-authentication plugin in an Expo app using EAS Build, enabling required capabilities before building.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/apple-authentication.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\"expo-apple-authentication\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying EAS JSON for Local Testing (Diff)\nDESCRIPTION: This diff-style code snippet shows how to update the 'eas.json' file to add the 'LOCAL_TESTING' environment variable to the 'updates_testing_debug' profile. It is intended for developers modifying configuration files for custom local setups. This change must be applied manually to the appropriate file within the project repo.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-updates/e2e/README.md#2025-04-22_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n--- a/packages/expo-updates/e2e/fixtures/project_files/eas.json\\n+++ b/packages/expo-updates/e2e/fixtures/project_files/eas.json\\n@@ -15,7 +15,8 @@\\n     \"updates_testing_debug\": {\\n       \"env\": {\\n-        \"EX_UPDATES_NATIVE_DEBUG\": \"1\"\\n+        \"EX_UPDATES_NATIVE_DEBUG\": \"1\",\\n+        \"LOCAL_TESTING\": \"1\"\\n       },\\n       \"android\": {\\n         \"gradleCommand\": \":app:assembleRelease :app:assembleAndroidTest -DtestBuildType=release\",\n```\n\n----------------------------------------\n\nTITLE: Importing Expo Config Packages\nDESCRIPTION: Examples showing the correct way to import config-plugins and config packages through the expo package re-exports.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/config-plugins/development-and-debugging.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { /* ... */ } = require('expo/config-plugins');\nconst { /* ... */ } = require('expo/config');\n```\n\n----------------------------------------\n\nTITLE: Running App with Expo CLI\nDESCRIPTION: This markdown snippet shows how to run your app using the Expo CLI command and then opening it in the iOS simulator by pressing 'i' in the terminal.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/workflow/ios-simulator.mdx#_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\nRun your app with `npx expo start` and press <kbd>i</kbd> from the command line.\n```\n\n----------------------------------------\n\nTITLE: Configuring Photo Library Permissions in iOS Info.plist\nDESCRIPTION: iOS Info.plist configuration to set usage description messages for accessing and saving to the photo library.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/media-library.mdx#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<key>NSPhotoLibraryUsageDescription</key>\n<string>Give $(PRODUCT_NAME) permission to access your photos</string>\n<key>NSPhotoLibraryAddUsageDescription</key>\n<string>Give $(PRODUCT_NAME) permission to save photos</string>\n```\n\n----------------------------------------\n\nTITLE: Using Checkboxes in React Native with expo-checkbox\nDESCRIPTION: This snippet demonstrates how to use the expo-checkbox package in a React Native application. It includes examples of normal, custom-colored, and disabled checkboxes with styling provided by a StyleSheet. The useState hook is utilized to manage the checkbox state.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/checkbox.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport Checkbox from 'expo-checkbox';\nimport { useState } from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\n\nexport default function App() {\n  const [isChecked, setChecked] = useState(false);\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.section}>\n        <Checkbox style={styles.checkbox} value={isChecked} onValueChange={setChecked} />\n        <Text style={styles.paragraph}>Normal checkbox</Text>\n      </View>\n      <View style={styles.section}>\n        <Checkbox\n          style={styles.checkbox}\n          value={isChecked}\n          onValueChange={setChecked}\n          color={isChecked ? '#4630EB' : undefined}\n        />\n        <Text style={styles.paragraph}>Custom colored checkbox</Text>\n      </View>\n      <View style={styles.section}>\n        <Checkbox style={styles.checkbox} disabled value={isChecked} onValueChange={setChecked} />\n        <Text style={styles.paragraph}>Disabled checkbox</Text>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginHorizontal: 16,\n    marginVertical: 32,\n  },\n  section: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  paragraph: {\n    fontSize: 15,\n  },\n  checkbox: {\n    margin: 8,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Video Implementation with Play/Pause Button in React Native\nDESCRIPTION: A simple example showing how to implement a video player with play/pause functionality using the expo-av Video component. It demonstrates setting up a reference, tracking playback status, and toggling playback with a button.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/video.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useRef } from 'react';\nimport { View, StyleSheet, Button } from 'react-native';\nimport { Video, ResizeMode } from 'expo-av';\n\nexport default function App() {\n  const video = useRef(null);\n  const [status, setStatus] = useState({});\n  return (\n    <View style={styles.container}>\n      <Video\n        ref={video}\n        style={styles.video}\n        source={{\n          uri: 'https://d23dyxeqlo5psv.cloudfront.net/big_buck_bunny.mp4',\n        }}\n        useNativeControls\n        resizeMode={ResizeMode.CONTAIN}\n        isLooping\n        onPlaybackStatusUpdate={status => setStatus(() => status)}\n      />\n      <View style={styles.buttons}>\n        <Button\n          title={status.isPlaying ? 'Pause' : 'Play'}\n          onPress={() =>\n            status.isPlaying ? video.current.pauseAsync() : video.current.playAsync()\n          }\n        />\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    backgroundColor: '#ecf0f1',\n  },\n  video: {\n    alignSelf: 'center',\n    width: 320,\n    height: 200,\n  },\n  buttons: {\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Development Build Profiles in eas.json\nDESCRIPTION: This snippet shows how to set up build profiles for development builds in the eas.json file. It includes configurations for both physical devices and simulators.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/workflows/examples.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"development\": {\n      \"developmentClient\": true,\n      \"distribution\": \"internal\"\n    },\n    \"development-simulator\": {\n      \"developmentClient\": true,\n      \"distribution\": \"internal\",\n      \"ios\": {\n        \"simulator\": true\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up webpack.config.js with TypeScript\nDESCRIPTION: JavaScript configuration file that uses ts-node to require and use a TypeScript webpack configuration file (deprecated approach).\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/typescript.mdx#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nrequire('ts-node/register');\nmodule.exports = require('./webpack.config.ts');\n```\n\n----------------------------------------\n\nTITLE: Implementing Magnetometer Readings in React Native with expo-sensors\nDESCRIPTION: A complete React Native component that demonstrates how to use the Magnetometer from expo-sensors. The component subscribes to the magnetometer readings, displays the x, y, and z values, and includes buttons to toggle the subscription and adjust the update interval.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/magnetometer.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View } from 'react-native';\nimport { Magnetometer } from 'expo-sensors';\n\nexport default function Compass() {\n  const [{ x, y, z }, setData] = useState({\n    x: 0,\n    y: 0,\n    z: 0,\n  });\n  const [subscription, setSubscription] = useState(null);\n\n  const _slow = () => Magnetometer.setUpdateInterval(1000);\n  const _fast = () => Magnetometer.setUpdateInterval(16);\n\n  const _subscribe = () => {\n    setSubscription(\n      Magnetometer.addListener(result => {\n        setData(result);\n      })\n    );\n  };\n\n  const _unsubscribe = () => {\n    subscription && subscription.remove();\n    setSubscription(null);\n  };\n\n  useEffect(() => {\n    _subscribe();\n    return () => _unsubscribe();\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.text}>Magnetometer:</Text>\n      <Text style={styles.text}>x: {x}</Text>\n      <Text style={styles.text}>y: {y}</Text>\n      <Text style={styles.text}>z: {z}</Text>\n      <View style={styles.buttonContainer}>\n        <TouchableOpacity onPress={subscription ? _unsubscribe : _subscribe} style={styles.button}>\n          <Text>{subscription ? 'On' : 'Off'}</Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={_slow} style={[styles.button, styles.middleButton]}>\n          <Text>Slow</Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={_fast} style={styles.button}>\n          <Text>Fast</Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    paddingHorizontal: 10,\n  },\n  text: {\n    textAlign: 'center',\n  },\n  buttonContainer: {\n    flexDirection: 'row',\n    alignItems: 'stretch',\n    marginTop: 15,\n  },\n  button: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#eee',\n    padding: 10,\n  },\n  middleButton: {\n    borderLeftWidth: 1,\n    borderRightWidth: 1,\n    borderColor: '#ccc',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling CSS Support in Metro Config\nDESCRIPTION: This code snippet shows how to enable CSS support in the Metro configuration for Expo SDK 49.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/config/metro.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('expo/metro-config').MetroConfig} */\nconst config = getDefaultConfig(__dirname, {\n  isCSSEnabled: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Starting TypeScript Compiler in Watch Mode\nDESCRIPTION: Command for running the TypeScript compiler in watch mode to catch code errors during development.\nSOURCE: https://github.com/expo/expo/blob/main/docs/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nyarn watch\n```\n\n----------------------------------------\n\nTITLE: Installing expo-dev-client\nDESCRIPTION: Command to install expo-dev-client package, which provides UI and tooling for development builds.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/local-app-development.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo install expo-dev-client\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages for React Native View Shot\nDESCRIPTION: This code snippet shows the yarn commands to install the necessary packages (pngjs and zlib) for working with react-native-view-shot and processing PNG images.\nSOURCE: https://github.com/expo/expo/blob/main/apps/expo-go/modules/react-native-view-shot/README.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nyarn add pngjs\nyarn add zlib\n```\n\n----------------------------------------\n\nTITLE: Rendering BlurView after Dynamic Content in React Native\nDESCRIPTION: This snippet demonstrates how to properly render a BlurView after dynamic content to ensure the blur effect updates correctly. It shows the correct order of rendering FlatList and BlurView components.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/blur-view.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<View>\n  <FlatList />\n  <BlurView />\n</View>\n```\n\n----------------------------------------\n\nTITLE: Configuring UIBackgroundModes on iOS\nDESCRIPTION: This XML snippet demonstrates how to configure the `UIBackgroundModes` in the `Expo.plist` file to allow background fetch tasks to run on iOS. This configuration is necessary for the background fetch feature to work correctly.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/background-fetch.mdx#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<key>UIBackgroundModes</key>\\n<array>\\n  <string>fetch</string>\\n</array>\n```\n\n----------------------------------------\n\nTITLE: Configuring Android permissions for expo-local-authentication\nDESCRIPTION: XML snippet showing the automatically added permissions for biometric data access on Android.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-local-authentication/README.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Added permissions -->\n<uses-permission android:name=\"android.permission.USE_BIOMETRIC\" />\n<uses-permission android:name=\"android.permission.USE_FINGERPRINT\" />\n```\n\n----------------------------------------\n\nTITLE: Installing expo-camera in bare React Native projects\nDESCRIPTION: Command to install the expo-camera package in a bare React Native project using npx expo install.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-camera/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-camera\n```\n\n----------------------------------------\n\nTITLE: Installing expo-module-scripts in a project\nDESCRIPTION: Command to add expo-module-scripts as a dev dependency using yarn or npm.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-module-scripts/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn add -D expo-module-scripts\n\n# or\n\nnpm install --save-dev expo-module-scripts\n```\n\n----------------------------------------\n\nTITLE: Creating Audio Player Directly\nDESCRIPTION: Example of creating an AudioPlayer instance directly using createAudioPlayer function instead of the hook-based approach.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/audio.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createAudioPlayer } from 'expo-audio';\nconst player = createAudioPlayer(audioSource);\n```\n\n----------------------------------------\n\nTITLE: Using Kotlin Coroutines with AsyncFunction\nDESCRIPTION: Implements an AsyncFunction with a suspendable body using Kotlin coroutines. This approach enables the use of suspension mechanics for asynchronous operations without requiring a Promise parameter.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/module-api.mdx#2025-04-22_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nAsyncFunction(\"suspendFunction\") Coroutine { message: String ->\n  // You can execute other suspendable functions here.\n  // For example, you can use `kotlinx.coroutines.delay` to delay resolving the underlying promise.\n  delay(5000)\n  return@Coroutine message\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Aside Component in Expo\nDESCRIPTION: Demonstrates the Aside component for complementary content sections.\nSOURCE: https://github.com/expo/expo/blob/main/packages/html-elements/README.md#2025-04-22_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Aside } from '@expo/html-elements';\n\nexport default () => <Aside />;\n```\n\n----------------------------------------\n\nTITLE: Configuring Complete App Store Review Information in JSON\nDESCRIPTION: Complete configuration for Apple App Store review including all optional fields. Includes contact information, demo account credentials, and additional notes for the review team.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/metadata/schema.mdx#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"configVersion\": 0,\n  \"apple\": {\n    \"review\": {\n      \"firstName\": \"John\",\n      \"lastName\": \"Doe\",\n      \"email\": \"john@example.com\",\n      \"phone\": \"+1 123 456 7890\",\n      \"demoUsername\": \"john\",\n      \"demoPassword\": \"applereview\",\n      \"demoRequired\": false,\n      \"notes\": \"This is an example app primarily used for educational purposes.\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Component Documentation\nDESCRIPTION: Markdown documentation structure defining the title, description, source code URL and package name for the Slider component documentation.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/slider.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Slider\ndescription: A React Native component library that provides access to the system UI for a slider control.\nsourceCodeUrl: 'https://github.com/callstack/react-native-slider'\npackageName: '@react-native-community/slider'\n---\n```\n\n----------------------------------------\n\nTITLE: Using Step Component for Procedural Guides in MDX\nDESCRIPTION: This snippet shows how to use the Step component to create numbered steps in procedural guides within documentation.\nSOURCE: https://github.com/expo/expo/blob/main/docs/README.md#2025-04-22_snippet_21\n\nLANGUAGE: mdx\nCODE:\n```\nimport { Step } from '~/ui/components/Step';\n\n<Step label=\"1\">\n\nThis is some text.\n\n</Step>\n```\n\n----------------------------------------\n\nTITLE: Importing Expo Localization Functions\nDESCRIPTION: Example showing how to import the main localization functions getLocales and getCalendars from the expo-localization package. These functions provide access to device locale settings.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/localization.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { getLocales, getCalendars } from 'expo-localization';\n```\n\n----------------------------------------\n\nTITLE: Example of Config Plugins with Named and Anonymous Functions\nDESCRIPTION: Demonstrates how config plugins with both named and anonymous functions affect fingerprinting. This example shows why named functions are preferred for consistent fingerprinting.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/fingerprint.mdx#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst { withInfoPlist } = require('expo/config-plugins');\n\nconst withMyPlugin = (config) => {\n  return withInfoPlist(config, (config) => {\n    config.modResults.NSLocationWhenInUseUsageDescription = 'Allow $(PRODUCT_NAME) to use your location';\n    return config;\n  });\n};\n\nexport default ({ config }) => {\n  config.plugins ||= [];\n  config.plugins.push(withMyPlugin);\n  config.plugins.push((config) => config);\n  return config;\n};\n```\n\n----------------------------------------\n\nTITLE: Detecting Faces with Expo Camera\nDESCRIPTION: Demonstrates how to configure Expo Camera for fast face detection without landmarks or smile detection using the FaceDetector library. The face detection is intended to be performed with fast mode settings, optimizing for performance.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/facedetector.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Camera } from 'expo-camera';\nimport * as FaceDetector from 'expo-face-detector';\n\nconst App = () => (\n  <Camera\n    // other props\n    onFacesDetected={handleFacesDetected}\n    faceDetectorSettings={{\n      mode: FaceDetector.FaceDetectorMode.fast,\n      detectLandmarks: FaceDetector.FaceDetectorLandmarks.none,\n      runClassifications: FaceDetector.FaceDetectorClassifications.none,\n      minDetectionInterval: 100,\n      tracking: true,\n    }}\n  />\n);\n\nconst handleFacesDetected = ({ faces }) => {\n  console.log(faces);\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Importing Expo Font Module\nDESCRIPTION: This snippet shows the import statement for bringing in the Font module from expo-font, which is necessary for managing font loading in a React Native application. This is a fundamental step before using any font-related functions provided by expo-font.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/font.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport * as Font from 'expo-font';\n```\n\n----------------------------------------\n\nTITLE: Creating a New Expo App with create-expo-app\nDESCRIPTION: Command to create a new Expo project using create-expo-app, which can be used as a starting point for this guide.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/getting-started.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npx create-expo-app my-app\n```\n\n----------------------------------------\n\nTITLE: Using H5 Component in Expo\nDESCRIPTION: Example of using the H5 component which renders as a semantic h5 element on web and styled Text component on native.\nSOURCE: https://github.com/expo/expo/blob/main/packages/html-elements/README.md#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { H5 } from '@expo/html-elements';\nexport default () => <H5>Example<H5/>\n```\n\n----------------------------------------\n\nTITLE: Implementing ApplicationLifecycleListener in Java\nDESCRIPTION: This snippet shows how to create an ApplicationLifecycleListener class to hook into specific Application lifecycle events in Java.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/android-lifecycle-listeners.mdx#2025-04-22_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n// android/src/main/java/expo/modules/mylib/MyLibApplicationLifecycleListener.java\npackage expo.modules.mylib;\n\nimport android.app.Application;\n\nimport expo.modules.core.interfaces.ApplicationLifecycleListener;\n\npublic class MyLibApplicationLifecycleListener implements ApplicationLifecycleListener {\n  @Override\n  public void onCreate(Application application) {\n    // Your setup code in `Application.onCreate`.\n    doSomeSetupInApplicationOnCreate(application);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Pedometer Module from expo-sensors\nDESCRIPTION: This code snippet shows how to import the Pedometer module from the expo-sensors package.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/pedometer.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { Pedometer } from 'expo-sensors';\n```\n\n----------------------------------------\n\nTITLE: Handling Non-ASCII Characters in URL Hostnames\nDESCRIPTION: Example demonstrating platform differences in handling non-ASCII characters in URL hostnames. Web and Node.js convert to Punycode, while Android and iOS preserve the Unicode characters.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/url.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(new URL('http://🥓').toString());\n```\n\n----------------------------------------\n\nTITLE: Implementing Limited Loop Playback in expo-av\nDESCRIPTION: Example showing how to implement media playback that loops exactly 20 times.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/av.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst N = 20;\n\n_onPlaybackStatusUpdate = playbackStatus => {\n  if (playbackStatus.didJustFinish) {\n    if (this.state.numberOfLoops == N - 1) {\n      playbackObject.setIsLooping(false);\n    }\n    this.setState({ numberOfLoops: this.state.numberOfLoops + 1 });\n  }\n};\n\nthis.setState({ numberOfLoops: 0 });\nplaybackObject.setOnPlaybackStatusUpdate(this._onPlaybackStatusUpdate);\nplaybackObject.setIsLooping(true);\n```\n\n----------------------------------------\n\nTITLE: Managing GIF Files with Caching in TypeScript\nDESCRIPTION: This module provides utilities for handling GIF files from Giphy, including downloading, caching, and sharing functionality. It uses the file system to store GIFs locally and provides methods for managing the cached files.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/filesystem.mdx#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport * as FileSystem from 'expo-file-system';\n\nconst gifDir = FileSystem.cacheDirectory + 'giphy/';\nconst gifFileUri = (gifId: string) => gifDir + `gif_${gifId}_200.gif`;\nconst gifUrl = (gifId: string) => `https://media1.giphy.com/media/${gifId}/200.gif`;\n\n// Checks if gif directory exists. If not, creates it\nasync function ensureDirExists() {\n  const dirInfo = await FileSystem.getInfoAsync(gifDir);\n  if (!dirInfo.exists) {\n    console.log(\"Gif directory doesn't exist, creating…\");\n    await FileSystem.makeDirectoryAsync(gifDir, { intermediates: true });\n  }\n}\n\n// Downloads all gifs specified as array of IDs\nexport async function addMultipleGifs(gifIds: string[]) {\n  try {\n    await ensureDirExists();\n\n    console.log('Downloading', gifIds.length, 'gif files…');\n    await Promise.all(gifIds.map(id => FileSystem.downloadAsync(gifUrl(id), gifFileUri(id))));\n  } catch (e) {\n    console.error(\"Couldn't download gif files:\", e);\n  }\n}\n\n// Returns URI to our local gif file\n// If our gif doesn't exist locally, it downloads it\nexport async function getSingleGif(gifId: string) {\n  await ensureDirExists();\n\n  const fileUri = gifFileUri(gifId);\n  const fileInfo = await FileSystem.getInfoAsync(fileUri);\n\n  if (!fileInfo.exists) {\n    console.log(\"Gif isn't cached locally. Downloading…\");\n    await FileSystem.downloadAsync(gifUrl(gifId), fileUri);\n  }\n\n  return fileUri;\n}\n\n// Exports shareable URI - it can be shared outside your app\nexport async function getGifContentUri(gifId: string) {\n  return FileSystem.getContentUriAsync(await getSingleGif(gifId));\n}\n\n// Deletes whole giphy directory with all its content\nexport async function deleteAllGifs() {\n  console.log('Deleting all GIF files…');\n  await FileSystem.deleteAsync(gifDir);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Firebase Hosting headers in firebase.json for Expo web apps\nDESCRIPTION: Sets up caching headers for Firebase Hosting, including no-cache for HTML and long-term caching for static assets.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/publishing-websites.mdx#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n  \"hosting\": [\n    {\n      /* @hide ... */ /* @end */\n      \"headers\": [\n        {\n          \"source\": \"/**\",\n          \"headers\": [\n            {\n              \"key\": \"Cache-Control\",\n              \"value\": \"no-cache, no-store, must-revalidate\"\n            }\n          ]\n        },\n        {\n          \"source\": \"**/*.@(jpg|jpeg|gif|png|svg|webp|js|css|eot|otf|ttf|ttc|woff|woff2|font.css)\",\n          \"headers\": [\n            {\n              \"key\": \"Cache-Control\",\n              \"value\": \"max-age=604800\"\n            }\n          ]\n        }\n      ],\n    }\n  ]\n```\n\n----------------------------------------\n\nTITLE: Importing LivePhotoView Component\nDESCRIPTION: Example of importing the LivePhotoView component from the expo-live-photo package.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/live-photo.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { LivePhotoView } from 'expo-live-photo';\n```\n\n----------------------------------------\n\nTITLE: Using SafeAreaInsetsContext Consumer API in React Native (JSX)\nDESCRIPTION: Demonstrates an alternative way to access safe area insets using the `SafeAreaInsetsContext.Consumer` component and a render prop function. This provides the `insets` object to its children, allowing manual application of styles.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/safe-area-context.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SafeAreaInsetsContext } from 'react-native-safe-area-context';\n\nfunction Component() {\n  return (\n    <SafeAreaInsetsContext.Consumer>\n      {insets => <View style={{ paddingTop: insets.top }} />}\n    </SafeAreaInsetsContext.Consumer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Android Auto Backup Exclusion Rules (Android 12+, XML)\nDESCRIPTION: This XML snippet sets up Android Auto Backup rules to exclude SecureStore shared preferences from cloud and device transfer backup on Android 12 and above. It ensures that SecureStore data remains secure and is not backed up, as after restore the key material would be lost. Add this inside your data-extraction-rules file if you are configuring your own auto backup setup.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/securestore.mdx#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<!--  Auto Backup configuration for Android 12 and higher -->\\n<data-extraction-rules>\\n  <cloud-backup>\\n    <include domain=\\\"sharedpref\\\" path=\\\".\\\"/>\\n    <exclude domain=\\\"sharedpref\\\" path=\\\"SecureStore\\\"/>\\n  </cloud-backup>\\n  <device-transfer>\\n    <include domain=\\\"sharedpref\\\" path=\\\".\\\"/>\\n    <exclude domain=\\\"sharedpref\\\" path=\\\"SecureStore\\\"/>\\n  </device-transfer>\\n</data-extraction-rules>\n```\n\n----------------------------------------\n\nTITLE: Importing LightSensor Module from expo-sensors\nDESCRIPTION: Basic import statement for the LightSensor module from the expo-sensors package.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/light-sensor.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { LightSensor } from 'expo-sensors';\n```\n\n----------------------------------------\n\nTITLE: Build Webhook Payload Structure in JSON\nDESCRIPTION: Example payload structure that EAS sends when a build event occurs. Includes build details, metadata, metrics, and status information.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/webhooks.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"147a3212-49fd-446f-b4e3-a6519acf264a\",\n  \"accountName\": \"dsokal\",\n  \"projectName\": \"example\",\n  \"buildDetailsPageUrl\": \"https://expo.dev/accounts/dsokal/projects/example/builds/147a3212-49fd-446f-b4e3-a6519acf264a\",\n  \"parentBuildId\": \"75ac0be7-0d90-46d5-80ec-9423fa0aaa6b\",\n  \"appId\": \"bc0a82de-65a5-4497-ad86-54ff1f53edf7\",\n  \"initiatingUserId\": \"d1041496-1a59-423a-8caf-479bb978203a\",\n  \"cancelingUserId\": null,\n  \"platform\": \"android\",\n  \"status\": \"errored\",\n  \"artifacts\": {\n    \"buildUrl\": \"https://expo.dev/artifacts/eas/wyodu9tua2ZuKKiaJ1Nbkn.aab\",\n    \"logsS3KeyPrefix\": \"production/f9609423-5072-4ea2-a0a5-c345eedf2c2a\"\n  },\n  \"metadata\": {...},\n  \"metrics\": {...},\n  \"error\": {\n    \"message\": \"Unknown error. Please see logs.\",\n    \"errorCode\": \"UNKNOWN_ERROR\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring URI Scheme for Deep Linking\nDESCRIPTION: Commands to add, list, and test a URI scheme for deep linking in a React Native app using the uri-scheme CLI tool.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/auth-session.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npx uri-scheme add mycoolredirect\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ npx uri-scheme list\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Rebuild the native apps, be sure to use an emulator\n$ yarn android\n$ yarn ios\n\n# Open a URI scheme\n$ npx uri-scheme open mycoolredirect://some/redirect\n```\n\n----------------------------------------\n\nTITLE: Importing Icons for EAS Services in JSX\nDESCRIPTION: This code snippet imports various icons from the Expo styleguide for use in the EAS introduction page. It includes icons for different EAS services like Build, Metadata, Submit, and others.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport { BuildIcon } from '@expo/styleguide-icons/custom/BuildIcon';\nimport { EasMetadataIcon } from '@expo/styleguide-icons/custom/EasMetadataIcon';\nimport { EasSubmitIcon } from '@expo/styleguide-icons/custom/EasSubmitIcon';\nimport { Cloud01Icon } from '@expo/styleguide-icons/outline/Cloud01Icon';\nimport { DataIcon } from '@expo/styleguide-icons/outline/DataIcon';\nimport { Dataflow01Icon } from '@expo/styleguide-icons/outline/Dataflow01Icon';\nimport { LayersTwo02Icon } from '@expo/styleguide-icons/outline/LayersTwo02Icon';\n```\n\n----------------------------------------\n\nTITLE: Displaying Package Name @expo/plist using HTML\nDESCRIPTION: This inline snippet uses an HTML `<code>` tag to visually represent the name of the npm package, `@expo/plist`. It is embedded within the main heading (`<h1>`) to clearly identify the software package being introduced.\nSOURCE: https://github.com/expo/expo/blob/main/packages/@expo/plist/README.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<code>@expo/plist</code>\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Method-Specific Redirects\nDESCRIPTION: Shows how to set up redirects that only apply to specific HTTP methods like POST, useful for API route redirects.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/advanced/redirects.mdx#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    [\n      \"expo-router\",\n      {\n        \"redirects\": [{\n          \"source\": \"/redirect/[slug]\",\n          \"destination\": \"/target/[slug]\"\n          \"methods\": [\"POST\"]\n        }]\n      }\n    ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Expo App with registerRootComponent - JSX\nDESCRIPTION: This snippet illustrates how to programmatically set the root component of an Expo app using 'registerRootComponent'. It imports necessary functions from 'expo' and 'react-native', defines a minimal App component, and registers it as the application entry. Dependencies include the 'expo' and 'react-native' packages. Inputs are the App component function, and output is a properly initialized Expo app with the custom root. Limitations: the entrypoint filename in package.json must match this file's location.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/expo.mdx#2025-04-22_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\nimport { registerRootComponent } from 'expo';\nimport { View } from 'react-native';\n\nfunction App() {\n  return <View />;\n}\n\nregisterRootComponent(App);\n```\n\n----------------------------------------\n\nTITLE: Importing Linking Module in JavaScript\nDESCRIPTION: This code snippet demonstrates how to import the Linking module from expo-linking. This import allows access to all the deep linking and app interaction utilities provided by the package.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/linking.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Linking from 'expo-linking';\n```\n\n----------------------------------------\n\nTITLE: Using Expo FileSystem for Local File Storage\nDESCRIPTION: Expo FileSystem enables local file system access with project isolation in Expo Go, supporting file uploads and downloads from network URLs.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/user-interface/store-data.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexpo-file-system\n```\n\n----------------------------------------\n\nTITLE: Implementing ReactActivity Listener in Kotlin for Expo Custom Module\nDESCRIPTION: This Kotlin code snippet shows the implementation of a ReactActivity listener. It defines a CustomReactActivityLifecycleListener class that overrides the onCreate method to execute static tasks before the JS engine starts.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/config-plugins/development-and-debugging.mdx#2025-04-22_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\npackage expo.modules.custom\n\nimport android.app.Activity\nimport android.content.Context\nimport android.os.Bundle\nimport android.util.Log\nimport expo.modules.core.interfaces.ReactActivityLifecycleListener\n\nclass CustomReactActivityLifecycleListener(activityContext: Context) : ReactActivityLifecycleListener {\n  override fun onCreate(activity: Activity, savedInstanceState: Bundle?) {\n    // Execute static tasks before the JS engine starts.\n    // These values are defined via config plugins.\n\n    var value = getValue(activity)\n    if (value != \"\") {\n      // Do something to the Activity that requires the static value...\n    }\n  }\n\n  // Naming is node module name (`expo-custom`) plus value name (`value`) using underscores as a delimiter\n  // i.e. `expo_custom_value`\n  // `@expo/vector-icons` + `iconName` -> `expo__vector_icons_icon_name`\n  private fun getValue(context: Context): String = context.getString(R.string.expo_custom_value).toLowerCase()\n}\n```\n\n----------------------------------------\n\nTITLE: Importing SystemUI Module in JavaScript\nDESCRIPTION: Shows how to import the expo-system-ui module to access system UI functionality.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/system-ui.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as SystemUI from 'expo-system-ui';\n```\n\n----------------------------------------\n\nTITLE: Importing captureRef from react-native-view-shot in JavaScript\nDESCRIPTION: Imports the 'captureRef' function from the 'react-native-view-shot' package, which is used to capture a view and save it as an image. Required to use the 'captureRef' API.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/captureRef.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { captureRef } from 'react-native-view-shot';\n```\n\n----------------------------------------\n\nTITLE: Running Code Formatting and Testing Scripts\nDESCRIPTION: Commands for formatting code with prettier, running tests, and linting before committing changes.\nSOURCE: https://github.com/expo/expo/blob/main/docs/README.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nyarn prettier\nyarn test\nyarn lint\n```\n\n----------------------------------------\n\nTITLE: Importing StoreReview Module\nDESCRIPTION: Code snippet showing how to import the StoreReview module from expo-store-review package.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/storereview.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as StoreReview from 'expo-store-review';\n```\n\n----------------------------------------\n\nTITLE: Displaying Google Play Store Policy on Interpreted Code\nDESCRIPTION: This snippet shows an excerpt from the Google Play Store policy regarding the use of interpreted code in Android applications. It outlines restrictions on downloading executable code and the use of interpreted languages in apps.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/faq.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```text\n...an app may not download executable code (such as dex, JAR, .so files) from a\nsource other than Google Play. This restriction does not apply to code that runs\nin a virtual machine or an interpreter where either provides indirect access to\nAndroid APIs (such as JavaScript in a webview or browser).\n\nApps or third-party code, like SDKs, with interpreted languages (JavaScript,\nPython, Lua, etc.) loaded at run time (for example, not packaged with the app)\nmust not allow potential violations of Google Play policies.\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Apple Sign-in in app.json for Expo projects\nDESCRIPTION: Enable the Sign In with Apple capability by setting the ios.usesAppleSignIn property to true in the app config file.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/apple-authentication.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"ios\": {\n      \"usesAppleSignIn\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Rendering a React Counter Component in JavaScript\nDESCRIPTION: This snippet demonstrates the definition of a functional React component named 'Counter' utilizing the 'useState' hook to manage internal state and displaying an incrementing counter value. It imports 'useState' from the 'react' package and 'createRoot' from 'react-dom/client', then instantiates a React root and renders the Counter component to a DOM element with the id 'root'. Key dependencies are 'react' and 'react-dom'. The component expects to be mounted in a DOM environment. The initial state is set to 0, and clicking the button increments the counter by one.\nSOURCE: https://github.com/expo/expo/blob/main/packages/@expo/cli/static/canary-full/react/README.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState } from 'react';\\nimport { createRoot } from 'react-dom/client';\\n\\nfunction Counter() {\\n  const [count, setCount] = useState(0);\\n  return (\\n    <>\\n      <h1>{count}</h1>\\n      <button onClick={() => setCount(count + 1)}>\\n        Increment\\n      </button>\\n    </>\\n  );\\n}\\n\\nconst root = createRoot(document.getElementById('root'));\\nroot.render(<Counter />);\n```\n\n----------------------------------------\n\nTITLE: Configure Expo Maps Permissions in app.json (Config Plugin)\nDESCRIPTION: This JSON snippet demonstrates how to configure location permissions for the expo-maps module using the config plugin in app.json. It sets the `requestLocationPermission` property to `true` to add the necessary permissions to AndroidManifest.xml and Info.plist, and defines the `locationPermission` message for iOS. This configuration requires a rebuild of the application.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/maps.mdx#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-maps\",\n        {\n          \"requestLocationPermission\": \"true\",\n          \"locationPermission\": \"Allow $(PRODUCT_NAME) to use your location\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting JSX Runtime to Classic in babel-preset-expo - JavaScript\nDESCRIPTION: This snippet configures babel-preset-expo to use the classic JSX runtime, requiring explicit import of React in each file that uses JSX. The jsxRuntime option is set to 'classic' for compatibility with older tooling or project requirements. Input: Babel config array. Output: Babel uses classic JSX transform without automatic React imports.\nSOURCE: https://github.com/expo/expo/blob/main/packages/babel-preset-expo/README.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n[\n  'babel-preset-expo',\n  {\n    jsxRuntime: 'classic',\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Basic MapView Implementation in React Native\nDESCRIPTION: Demonstrates the basic setup of a MapView component that fills the entire screen using React Native's StyleSheet for styling.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/map-view.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport MapView from 'react-native-maps';\nimport { StyleSheet, View } from 'react-native';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <MapView style={styles.map} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  map: {\n    width: '100%',\n    height: '100%',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Platform-Specific Pre-Install Hook in Shell Script\nDESCRIPTION: This example shows how to create a shell script (pre-install) that executes different commands based on the build platform (Android or iOS). It demonstrates using the EAS_BUILD_PLATFORM environment variable for conditional execution.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/build-reference/npm-hooks.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\n# This is a file called \"pre-install\" in the root of the project\n\nif [[ \"$EAS_BUILD_PLATFORM\" == \"android\" ]]; then\n  echo \"Run commands for Android builds here\"\nelif [[ \"$EAS_BUILD_PLATFORM\" == \"ios\" ]]; then\n  echo \"Run commands for iOS builds here\"\nfi\n```\n\n----------------------------------------\n\nTITLE: Importing Haptics Module\nDESCRIPTION: Example showing how to import the Haptics module from expo-haptics package.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/haptics.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as Haptics from 'expo-haptics';\n```\n\n----------------------------------------\n\nTITLE: Clearing Android App Data\nDESCRIPTION: Command to clear data for the Expo Go Android application using ADB shell\nSOURCE: https://github.com/expo/expo/blob/main/guides/Releasing Expo Go for Android.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nadb shell pm clear host.exp.exponent\n```\n\n----------------------------------------\n\nTITLE: Installing iOS Dependencies with CocoaPods\nDESCRIPTION: This command runs pod-install to set up the necessary iOS dependencies after installing the npm package.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-module-scripts/templates/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx pod-install\n```\n\n----------------------------------------\n\nTITLE: EAS Update Preview Publication Output\nDESCRIPTION: Example terminal output after successfully publishing an EAS Update preview. It includes a link to the EAS Dashboard for sharing the preview.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/review/share-previews-with-your-team.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n✔ Published!\n\n...\nEAS Dashboard      https://expo.dev/accounts/your-account/projects/your-project/updates/708b05d8-9bcf-4212-a052-ce40583b04fd\n```\n\n----------------------------------------\n\nTITLE: Adding Photo Library Permissions in iOS Info.plist\nDESCRIPTION: This XML snippet demonstrates how to add the required permissions to access and save photos in the iOS Info.plist file through NSPhotoLibraryUsageDescription and NSPhotoLibraryAddUsageDescription keys.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/media-library.mdx#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<key>NSPhotoLibraryUsageDescription</key>\n<string>Give $(PRODUCT_NAME) permission to access your photos</string>\n<key>NSPhotoLibraryAddUsageDescription</key>\n<string>Give $(PRODUCT_NAME) permission to save photos</string>\n```\n\n----------------------------------------\n\nTITLE: Rendering BoxLink Component for GDPR Documentation\nDESCRIPTION: A React component rendering a link box that provides additional information about GDPR through the European Commission's data protection page.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/regulatory-compliance/gdpr.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<BoxLink\n  title=\"European Commission's data protection page\"\n  description=\"For more information about GDPR, see European Commission's data protection page.\"\n  href=\"https://ec.europa.eu/info/law/law-topic/data-protection_en\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Server-side BlurHash Generation Setup\nDESCRIPTION: Backend implementation for generating BlurHash from uploaded images using Express.js, multer, and sharp libraries.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/image.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst multer = require('multer');\nconst sharp = require('sharp');\nconst { encode } = require('blurhash');\n\nconst upload = multer();\n```\n\n----------------------------------------\n\nTITLE: Implementing Article Component in Expo\nDESCRIPTION: Shows usage of the Article component for self-contained content sections.\nSOURCE: https://github.com/expo/expo/blob/main/packages/html-elements/README.md#2025-04-22_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Article } from '@expo/html-elements';\n\nexport default () => <Article />;\n```\n\n----------------------------------------\n\nTITLE: Installing CocoaPods for React Native 0.60+\nDESCRIPTION: Command to install CocoaPods dependencies for React Native 0.60+ projects using npx, which is required for iOS autolink functionality.\nSOURCE: https://github.com/expo/expo/blob/main/apps/expo-go/modules/react-native-view-shot/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx pod-install\n```\n\n----------------------------------------\n\nTITLE: Android Build Command\nDESCRIPTION: Fastlane command to build the Android app.\nSOURCE: https://github.com/expo/expo/blob/main/fastlane/README.md#2025-04-22_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\n[bundle exec] fastlane android build\n```\n\n----------------------------------------\n\nTITLE: Basic Text-to-Speech Implementation in React Native\nDESCRIPTION: Demonstrates how to create a simple React Native component that uses expo-speech to convert text to speech when a button is pressed. The example shows basic component setup with styling and speech trigger functionality.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/speech.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { View, StyleSheet, Button } from 'react-native';\nimport * as Speech from 'expo-speech';\n\nexport default function App() {\n  const speak = () => {\n    const thingToSay = '1';\n    Speech.speak(thingToSay);\n  };\n\n  return (\n    <View style={styles.container}>\n      <Button title=\"Press to hear some words\" onPress={speak} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    backgroundColor: '#ecf0f1',\n    padding: 8,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Navigate vs Push with Singular Routes\nDESCRIPTION: Example showing the difference between navigate and push methods when using singular routes with profile pages.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/preview/singular.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// Will NOT apply the singular constraint as the current route is the target route\nrouter.navigate(\"/profile-2\", {\n  dangerouslySingular: (_, { profile } => profile === 'profile-2' ? profile : undefined )\n})\n\n// Will apply the singular constraint\nrouter.push(\"/profile-2\", {\n  dangerouslySingular: (_, { profile } => profile === 'profile-2' ? profile : undefined )\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Synchronous Function in Kotlin\nDESCRIPTION: Creates a synchronous native function that is exposed to JavaScript. The function can receive up to 8 arguments due to limitations in language generics.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/module-api.mdx#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nFunction(\"mySyncFunction\") { message: String ->\n  return@Function message\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an empty expo-module.config.json file\nDESCRIPTION: Initialize an empty configuration file that enables Expo Autolinking to recognize your library as an Expo module and automatically link your native code.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/existing-library.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{}\n```\n\n----------------------------------------\n\nTITLE: Publishing Next Packages and Syncing Native Module Info - Shell\nDESCRIPTION: Publishes prerelease unimodule packages with the 'next' tag and updates bundled native modules info to sync with the web server. Requires correct environment, Expo tools (`et`), and prerequisite steps for mock generation. The first command pushes new package versions, and the second ensures metadata is up to date.\nSOURCE: https://github.com/expo/expo/blob/main/guides/releasing/Release Workflow.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\net publish-packages\n```\n\nLANGUAGE: shell\nCODE:\n```\net sync-bundled-native-modules\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Permissions for Brightness Control (XML)\nDESCRIPTION: Adds the `WRITE_SETTINGS` permission to the **AndroidManifest.xml** file. This permission is necessary on Android for the application to modify system-wide brightness settings, particularly when not using Continuous Native Generation (CNG) or managing a native Android project manually.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/brightness.mdx#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"android.permission.WRITE_SETTINGS\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Side-Effects in package.json\nDESCRIPTION: Sets up package.json to specify which files have side-effects that should not be tree-shaken. This uses the Webpack system for marking modules with side-effects.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/tree-shaking.mdx#2025-04-22_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"library\",\n  \"sideEffects\": [\"./src/*.js\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing ImagePicker in React Native\nDESCRIPTION: Code snippet showing how to import the ImagePicker module for use in a React Native application.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/imagepicker.mdx#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport * as ImagePicker from 'expo-image-picker';\n```\n\n----------------------------------------\n\nTITLE: Migrating from AsyncStorage to expo-sqlite/kv-store\nDESCRIPTION: Code diff showing how to migrate from @react-native-async-storage/async-storage to expo-sqlite/kv-store by simply changing the import statement.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/sqlite.mdx#2025-04-22_snippet_14\n\nLANGUAGE: diff\nCODE:\n```\n- import AsyncStorage from '@react-native-async-storage/async-storage';\n+ import AsyncStorage from 'expo-sqlite/kv-store';\n```\n\n----------------------------------------\n\nTITLE: Importing Accelerometer Module from expo-sensors\nDESCRIPTION: This snippet shows how to import the Accelerometer module from the expo-sensors package.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/accelerometer.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { Accelerometer } from 'expo-sensors';\n```\n\n----------------------------------------\n\nTITLE: Updating TypeScript Component with URL Prop\nDESCRIPTION: Updated TypeScript definition of the WebView component that adds the URL prop type, ensuring type safety when using the component.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/native-view-tutorial.mdx#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ViewProps } from 'react-native';\nimport { requireNativeViewManager } from 'expo-modules-core';\nimport * as React from 'react';\n\nexport type Props = {\n  url?: string;\n} & ViewProps;\n\nconst NativeView: React.ComponentType<Props> = requireNativeViewManager('ExpoWebView');\n\nexport default function ExpoWebView(props: Props) {\n  return <NativeView {...props} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying AppDelegate.mm for Custom Entry File in React Native Development\nDESCRIPTION: This snippet shows how to modify the AppDelegate.mm file to use a custom entry file for React Native development, specifically for Expo projects.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/config/metro.mdx#2025-04-22_snippet_22\n\nLANGUAGE: diff\nCODE:\n```\n- (NSURL *)sourceURLForBridge:(RCTBridge *)bridge\n{\n#if DEBUG\n-  return [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@\"index\"];\n+  return [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@\".expo/.virtual-metro-entry\"];\n#else\n  return [[NSBundle mainBundle] URLForResource:@\"main\" withExtension:@\"jsbundle\"];\n#endif\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Android Permissions for Contacts - XML\nDESCRIPTION: Shows the XML configuration needed to manually enable contacts access in native Android projects. Both 'READ_CONTACTS' and 'WRITE_CONTACTS' permissions must be declared in the AndroidManifest.xml for correct functionality. No additional dependencies are required, but the project must be a bare or custom native workflow. Add these lines within the manifest file under the <manifest> tag.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/contacts.mdx#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\\\"android.permission.READ_CONTACTS\\\" />\\n<uses-permission android:name=\\\"android.permission.WRITE_CONTACTS\\\" />\\n\n```\n\n----------------------------------------\n\nTITLE: Importing Expo Components and Icons\nDESCRIPTION: React/JSX imports for Expo styleguide components and icons used in the documentation page header.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { RouterLogo } from '@expo/styleguide';\nimport { CodeSquare01Icon } from '@expo/styleguide-icons/outline/CodeSquare01Icon';\nimport { CpuChip01Icon } from '@expo/styleguide-icons/outline/CpuChip01Icon';\n```\n\n----------------------------------------\n\nTITLE: Executing Async SQLite Transactions in Expo\nDESCRIPTION: Example of executing SQL statements within an async transaction, demonstrating how to query and retrieve results.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/sqlite.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as SQLite from 'expo-sqlite';\n\nconst db = SQLite.openDatabase('dbName', version);\n\nconst readOnly = true;\nawait db.transactionAsync(async tx => {\n  const result = await tx.executeSqlAsync('SELECT COUNT(*) FROM USERS', []);\n  console.log('Count:', result.rows[0]['COUNT(*)']);\n}, readOnly);\n```\n\n----------------------------------------\n\nTITLE: Importing Swift Headers for Expo Updates in Objective-C++ (Objective-C)\nDESCRIPTION: This Objective-C++ code snippet shows how to import auto-generated Swift headers for use in Objective-C++ (e.g. AppDelegate.mm) to enable runtime configuration overrides in native iOS code. These imports are required to call Expo Updates configuration methods from Objective-C++ code. No external dependencies beyond the Expo project setup and proper bridging settings in Xcode are required. Ensure these imports come before Swift/Objective-C symbol usage.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/updates.mdx#2025-04-22_snippet_7\n\nLANGUAGE: objective-c\nCODE:\n```\n#import \"ExpoModulesCore-Swift.h\"\n#import \"EXUpdatesInterface-Swift.h\"\n#import \"EXUpdates-Swift.h\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Reusable Greeting Function - EAS Build - YAML\nDESCRIPTION: Declares a reusable YAML function named \"greetings\" for use in EAS Build, which echoes a custom message with a dynamic value. Accepts input parameters such as \"name\" (with default \"Hello world\") and \"value\". Intended for use within build steps to allow parameterized, repeatable script actions.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_57\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  greetings:\n    - name: name\n      default_value: Hello world\n    inputs: [value]\n    command: echo \"${ inputs.name }, { inputs.value }\"\n```\n\n----------------------------------------\n\nTITLE: Creating Root Package.json for Monorepo\nDESCRIPTION: Basic configuration for the root package.json file in a monorepo, containing the project name and version.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/monorepos.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"monorepo\",\n  \"version\": \"1.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Translucent StatusBar for Expo Splash Screen\nDESCRIPTION: Make the StatusBar translucent by adding an entry in strings.xml which allows the app to draw under the StatusBar area during splash screen display.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-splash-screen/README.md#2025-04-22_snippet_14\n\nLANGUAGE: diff\nCODE:\n```\n--- a/android/app/src/main/res/values/strings.xml\n+++ b/android/app/src/main/res/values/strings.xml\n <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n <resources>\n   <string name=\"app_name\">sdk42</string>\n+  <string name=\"expo_splash_screen_status_bar_translucent\">true</string>\n</resources>\n```\n\n----------------------------------------\n\nTITLE: Setting Related Package Versions for SDK with Dot Notation - shell\nDESCRIPTION: Illustrates updating nested related package versions in the versions endpoint using 'et update-versions-endpoint' via dot notation in the '--key' argument. This is critical for ensuring minimum required dependencies across SDKs. The command targets a specific SDK version and package (e.g., '@types/react-native'), and assigns it the desired version constraint (e.g., '^0.57.65'). Supported for any package listed in 'relatedPackages'.\nSOURCE: https://github.com/expo/expo/blob/main/guides/releasing/Versions Endpoint.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\net update-versions-endpoint --sdkVersion=35.0.0 --key=\"relatedPackages.@types/react-native\" --value=\"^0.57.65\"\n```\n\n----------------------------------------\n\nTITLE: Installing expo-crypto in bare React Native projects\nDESCRIPTION: Command to install the expo-crypto package using npx expo install. This is intended for bare React Native projects after ensuring the expo package is installed and configured.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-crypto/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-crypto\n```\n\n----------------------------------------\n\nTITLE: Configuring App Store Categories with Subcategories in JSON\nDESCRIPTION: Example configuration showing how to set primary category (GAMES) with subcategories (GAMES_CARD, GAMES_BOARD) and a secondary category (ENTERTAINMENT) in store.config.json.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/metadata/schema.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"configVersion\": 0,\n  \"apple\": {\n    \"categories\": [[\"GAMES\", \"GAMES_CARD\", \"GAMES_BOARD\"], \"ENTERTAINMENT\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Router with Inline File System in TypeScript\nDESCRIPTION: Demonstrates how to use renderRouter with an inline mock file system, setting initial URL and testing the resulting pathname.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/reference/testing.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { renderRouter, screen } from 'expo-router/testing-library';\n\nit('my-test', async () => {\n  const MockComponent = jest.fn(() => <View />);\n\n  renderRouter(\n    {\n      index: MockComponent,\n      'directory/a': MockComponent,\n      '(group)/b': MockComponent,\n    },\n    {\n      initialUrl: '/directory/a',\n    }\n  );\n\n  expect(screen).toHavePathname('/directory/a');\n});\n```\n\n----------------------------------------\n\nTITLE: Extending Expo Metro Babel Transformer - JavaScript (metro.transformer.js)\nDESCRIPTION: This metro.transformer.js snippet shows how to customize the Metro Babel transformer by importing the upstream Expo transformer from @expo/metro-config/babel-transformer. In this example, SVG files are intercepted and modified before being passed to the upstream transformer. This setup is required for advanced asset handling, custom preprocessing, or adding new transformation logic in Expo projects.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/config/metro.mdx#2025-04-22_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nconst upstreamTransformer = require('@expo/metro-config/babel-transformer');\\n\\nmodule.exports.transform = async ({ src, filename, options }) => {\\n  // Do something custom for SVG files...\\n  if (filename.endsWith('.svg')) {\\n    src = '...';\\n  }\\n  // Pass the source through the upstream Expo transformer.\\n  return upstreamTransformer.transform({ src, filename, options });\\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing and Configuring EAS in Test Project (Bash)\nDESCRIPTION: These bash commands initialize EAS and configure updates in an Expo test project for Updates API manual testing. Dependencies include EAS CLI installed and environment readiness. Inputs are project context. Outputs are local EAS configuration files for updates.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-updates/e2e/README.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\neas init\\neas update:configure\n```\n\n----------------------------------------\n\nTITLE: Defining Runtime Version Based on App Version (appVersion Policy) in Expo Config (JSON)\nDESCRIPTION: This snippet configures the expo runtimeVersion policy to use appVersion, which assigns the runtimeVersion to the value of the project's version property. Useful for projects that update the version field for every release. Requires version and optionally buildNumber/versionCode in the configuration. Inputs: version, ios.buildNumber, android.versionCode; Output: runtimeVersion is set to version (e.g., \\\"1.0.0\\\").\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/updates.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"expo\\\": {\\n    \\\"runtimeVersion\\\": {\\n      \\\"policy\\\": \\\"appVersion\\\"\\n    },\\n    \\\"version\\\": \\\"1.0.0\\\",\\n    \\\"ios\\\": {\\n      \\\"buildNumber\\\": \\\"1\\\"\\n    },\\n    \\\"android\\\": {\\n      \\\"versionCode\\\": 1\\n    }\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Plugin Entry Point in JavaScript\nDESCRIPTION: Creates the entry point file for the plugin that exports the built plugin module.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/config-plugin-and-native-module-tutorial.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// This file configures the entry file for your plugin.\nmodule.exports = require('./plugin/build');\n```\n\n----------------------------------------\n\nTITLE: Using activateKeepAwake and deactivateKeepAwake Functions in React Native\nDESCRIPTION: This example shows how to use the activateKeepAwake and deactivateKeepAwake functions to control screen sleep behavior imperatively in a React Native class component. It includes buttons to activate and deactivate the keep-awake functionality.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/keep-awake.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { activateKeepAwake, deactivateKeepAwake } from 'expo-keep-awake';\nimport React from 'react';\nimport { Button, View } from 'react-native';\n\nexport default class KeepAwakeExample extends React.Component {\n  render() {\n    return (\n      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n        <Button onPress={this._activate} title=\"Activate\" />\n        <Button onPress={this._deactivate} title=\"Deactivate\" />\n      </View>\n    );\n  }\n\n  _activate = () => {\n    activateKeepAwake();\n    alert('Activated!');\n  };\n\n  _deactivate = () => {\n    deactivateKeepAwake();\n    alert('Deactivated!');\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Background Location Tracking with TaskManager in React Native\nDESCRIPTION: This snippet demonstrates how to use expo-task-manager and expo-location to implement background location tracking in a React Native application. It includes requesting permissions, defining a background task, and creating a button component to enable the feature.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/task-manager.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Button, View, StyleSheet } from 'react-native';\nimport * as TaskManager from 'expo-task-manager';\nimport * as Location from 'expo-location';\n\nconst LOCATION_TASK_NAME = 'background-location-task';\n\nconst requestPermissions = async () => {\n  const { status: foregroundStatus } = await Location.requestForegroundPermissionsAsync();\n  if (foregroundStatus === 'granted') {\n    const { status: backgroundStatus } = await Location.requestBackgroundPermissionsAsync();\n    if (backgroundStatus === 'granted') {\n      await Location.startLocationUpdatesAsync(LOCATION_TASK_NAME, {\n        accuracy: Location.Accuracy.Balanced,\n      });\n    }\n  }\n};\n\nconst PermissionsButton = () => (\n  <View style={styles.container}>\n    <Button onPress={requestPermissions} title=\"Enable background location\" />\n  </View>\n);\n\nTaskManager.defineTask(LOCATION_TASK_NAME, ({ data, error }) => {\n  if (error) {\n    // Error occurred - check `error.message` for more details.\n    return;\n  }\n  if (data) {\n    const { locations } = data;\n    // do something with the locations captured in the background\n  }\n});\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n\nexport default PermissionsButton;\n```\n\n----------------------------------------\n\nTITLE: Generating Video Thumbnails in React Native with expo-video-thumbnails\nDESCRIPTION: A complete React Native component that demonstrates how to generate a thumbnail from a video file using expo-video-thumbnails. The example shows how to call getThumbnailAsync with a video URL and timestamp option, then display the resulting image.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/video-thumbnails.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { StyleSheet, Button, View, Image, Text } from 'react-native';\nimport * as VideoThumbnails from 'expo-video-thumbnails';\n\nexport default function App() {\n  const [image, setImage] = useState(null);\n\n  const generateThumbnail = async () => {\n    try {\n      const { uri } = await VideoThumbnails.getThumbnailAsync(\n        'https://d23dyxeqlo5psv.cloudfront.net/big_buck_bunny.mp4',\n        {\n          time: 15000,\n        }\n      );\n      setImage(uri);\n    } catch (e) {\n      console.warn(e);\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      <Button onPress={generateThumbnail} title=\"Generate thumbnail\" />\n      {image && <Image source={{ uri: image }} style={styles.image} />}\n      <Text>{image}</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#F5FCFF',\n  },\n  image: {\n    width: 200,\n    height: 200,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Evaluated Config JSON After Plugin Application\nDESCRIPTION: Shows the resulting JSON configuration after applying the custom name-prefixing plugin.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/config-plugins/plugins-and-mods.mdx#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"custom-my-app\",\n  \"plugins\": [[\"./my-plugin\", \"custom\"]]\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying to Production in EAS Hosting\nDESCRIPTION: This command creates a new deployment and promotes it directly to production, making it accessible via the production URL.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/hosting/deployments-and-aliases.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ eas deploy --prod\n```\n\n----------------------------------------\n\nTITLE: Excluding Expo Packages from Version Checks in package.json\nDESCRIPTION: This JSON snippet demonstrates how to configure the `expo.install.exclude` property in `package.json` to prevent specific libraries, such as `expo-updates` and `expo-splash-screen`, from being checked for version compatibility by Expo tooling like `npx expo start`, `npx expo-doctor`, and `npx expo install`. This is useful when intentionally using a different version than recommended.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/config/package-json.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"install\": {\n      \"exclude\": [\"expo-updates\", \"expo-splash-screen\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing HTML Elements Component\nDESCRIPTION: Example of importing an H1 component from the @expo/html-elements package in a TypeScript React environment.\nSOURCE: https://github.com/expo/expo/blob/main/packages/html-elements/README.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { H1 } from '@expo/html-elements';\n```\n\n----------------------------------------\n\nTITLE: Creating a Web-Only React Component in JSX\nDESCRIPTION: This snippet shows how to create a web-only React component using standard HTML elements. It creates a simple paragraph element with 'Home page' text, which will only render on web platforms.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/workflow/web.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function Page() {\n  return <p>Home page</p>;\n}\n```\n\n----------------------------------------\n\nTITLE: iOS Release Command\nDESCRIPTION: Fastlane command to release the iOS app.\nSOURCE: https://github.com/expo/expo/blob/main/fastlane/README.md#2025-04-22_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\n[bundle exec] fastlane ios release\n```\n\n----------------------------------------\n\nTITLE: Configuring Function Outputs\nDESCRIPTION: Shows how to define function outputs with name and required fields.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  greetings:\n    name: Say Hi!\n    outputs: [value]\n    command: set-output value \"Hello world\"\n```\n\n----------------------------------------\n\nTITLE: BoxLink Component Usage in Documentation\nDESCRIPTION: Examples of using the BoxLink component to create navigation links with icons and descriptions for various update preview features.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/preview.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<BoxLink\n  title=\"Preview updates in development builds\"\n  description=\"Learn how to preview updates in development builds.\"\n  href=\"/eas-update/expo-dev-client/\"\n  Icon={LayersTwo02Icon}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Expo Updates in app.json\nDESCRIPTION: This JSON configuration snippet shows how to disable anti-bricking measures in the Expo app configuration file (app.json). It's recommended to only enable this feature in preview builds and potentially use app.config.js for dynamic configuration.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/override.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"updates\": {\n      // We recommend only enabling this in preview builds.\n      // You can use app.config.js to configure it dynamically.\n      \"disableAntiBrickingMeasures\": true\n      // etc..\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Expo Calendar Module\nDESCRIPTION: Illustrates the necessary import statement for using the expo-calendar module in a JavaScript project, allowing access to calendar-related functions.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/calendar.mdx#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport * as Calendar from 'expo-calendar';\n```\n\n----------------------------------------\n\nTITLE: Resolving Plugin Path for Node.js\nDESCRIPTION: This JavaScript code snippet provides a path resolution for plugins within a React-Native project, specifically targeting the `index.js` file under `./node_modules/test-plugin/lib/commonjs/`. This functionality assumes the presence of a related file structure and may require Node.js and file path knowledge for proper usage.\nSOURCE: https://github.com/expo/expo/blob/main/packages/@expo/config-plugins/src/utils/__tests__/fixtures/node_modules/test-plugin/README.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"./node_modules/test-plugin/lib/commonjs/index.js\"\n```\n\n----------------------------------------\n\nTITLE: Android Notification Object Example\nDESCRIPTION: This JSON object represents the structure of a notification received on Android when using addNotificationReceivedListener. It includes details about the notification trigger, content, and custom data.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/push-notifications/receiving-notifications.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"request\": {\n    \"trigger\": {\n      \"remoteMessage\": {\n        \"originalPriority\": 2,\n        \"sentTime\": 1724782348210,\n        \"notification\": {\n          \"usesDefaultVibrateSettings\": false,\n          \"color\": null,\n          \"channelId\": null,\n          \"visibility\": null,\n          \"sound\": null,\n          \"tag\": null,\n          \"bodyLocalizationArgs\": null,\n          \"imageUrl\": null,\n          \"title\": \"Chat App\",\n          \"ticker\": null,\n          \"eventTime\": null,\n          \"body\": \"New message from John Doe\",\n          \"titleLocalizationKey\": null,\n          \"notificationPriority\": null,\n          \"icon\": null,\n          \"usesDefaultLightSettings\": false,\n          \"sticky\": false,\n          \"link\": null,\n          \"titleLocalizationArgs\": null,\n          \"bodyLocalizationKey\": null,\n          \"usesDefaultSound\": false,\n          \"clickAction\": null,\n          \"localOnly\": false,\n          \"lightSettings\": null,\n          \"notificationCount\": null\n        },\n        \"data\": {\n          \"channelId\": \"default\",\n          \"message\": \"New message from John Doe\",\n          \"title\": \"Chat App\",\n          \"body\": \"{\\\"senderId\\\":\\\"user123\\\",\\\"senderName\\\":\\\"John Doe\\\",\\\"messageId\\\":\\\"msg789\\\",\\\"conversationId\\\":\\\"conversation-456\\\",\\\"messageType\\\":\\\"text\\\",\\\"timestamp\\\":1724766427}\",\n          \"scopeKey\": \"@betoatexpo/expo-notifications-app\",\n          \"experienceId\": \"@betoatexpo/expo-notifications-app\",\n          \"projectId\": \"51092087-87a4-4b12-8008-145625477434\"\n        },\n        \"to\": null,\n        \"ttl\": 0,\n        \"collapseKey\": \"dev.expo.notificationsapp\",\n        \"messageType\": null,\n        \"priority\": 2,\n        \"from\": \"115310547649\",\n        \"messageId\": \"0:1724782348220771%0f02879c0f02879c\"\n      },\n      \"channelId\": \"default\",\n      \"type\": \"push\"\n    },\n    \"content\": {\n      \"autoDismiss\": true,\n      \"title\": \"Chat App\",\n      \"badge\": null,\n      \"sticky\": false,\n      \"sound\": \"default\",\n      \"body\": \"New message from John Doe\",\n      \"subtitle\": null,\n      \"data\": {\n        \"senderId\": \"user123\",\n        \"senderName\": \"John Doe\",\n        \"messageId\": \"msg789\",\n        \"conversationId\": \"conversation-456\",\n        \"messageType\": \"text\",\n        \"timestamp\": 1724766427\n      }\n    },\n    \"identifier\": \"0:1724782348220771%0f02879c0f02879c\"\n  },\n  \"date\": 1724782348210\n}\n```\n\n----------------------------------------\n\nTITLE: Location Module Import Example\nDESCRIPTION: Example showing how to import the Location module from expo-location package.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/location.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Location from 'expo-location';\n```\n\n----------------------------------------\n\nTITLE: Creating a Kotlin native module for Android\nDESCRIPTION: Establishes a basic structure for a native Expo module in Kotlin for Android integration.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/existing-library.mdx#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\npackage my.module.package\n\nimport expo.modules.kotlin.modules.Module\nimport expo.modules.kotlin.modules.ModuleDefinition\n\nclass MyModule : Module() {\n  override fun definition() = ModuleDefinition {\n    // Definition components go here\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing AppleAuthentication Module in JavaScript\nDESCRIPTION: JavaScript import statement for the AppleAuthentication module from the expo-apple-authentication package.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/apple-authentication.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as AppleAuthentication from 'expo-apple-authentication';\n```\n\n----------------------------------------\n\nTITLE: Defining Social Button Properties in Markdown\nDESCRIPTION: This snippet defines a table of properties for a social button component in Expo. It includes property names, descriptions, and default values for customizing the button's appearance and behavior.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/icons.mdx#2025-04-22_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n| Prop              | Description                                                                                                                                       | Default             |\n| ----------------- | ------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------- |\n| `color`           | Text and icon color, use `iconStyle` or nest a `Text` component if you need different colors.                                                     | `white`             |\n| `size`            | Icon size.                                                                                                                                        | `20`                |\n| `iconStyle`       | Styles applied to the icon only, good for setting margins or a different color. _Note: use `iconStyle` for margins or expect unstable behaviour._ | `{marginRight: 10}` |\n| `backgroundColor` | Background color of the button.                                                                                                                   | `#007AFF`           |\n| `borderRadius`    | Border radius of the button, set to `0` to disable.                                                                                               | `5`                 |\n| `onPress`         | A function called when the button is pressed.                                                                                                     | _None_              |\n```\n\n----------------------------------------\n\nTITLE: Implementing Main Component in Expo\nDESCRIPTION: Shows implementation of the Main component for primary content area, rendering as main element on web and View on native.\nSOURCE: https://github.com/expo/expo/blob/main/packages/html-elements/README.md#2025-04-22_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Main } from '@expo/html-elements';\n\nexport default () => (\n    <Main>\n      <P>Some content in the main element</P>\n    </Main>\n  );\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Camera Permissions in Android\nDESCRIPTION: XML snippet showing how to add the required CAMERA permission and optional RECORD_AUDIO permission to an Android application.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-camera/README.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Added permissions -->\n<uses-permission android:name=\"android.permission.CAMERA\" />\n\n<!-- Optional permissions -->\n<uses-permission android:name=\"android.permission.RECORD_AUDIO\" />\n```\n\n----------------------------------------\n\nTITLE: Importing SystemUI in JavaScript\nDESCRIPTION: This code snippet demonstrates how to import the SystemUI module from the expo-system-ui package. It allows access to the library's functionality for interacting with system UI elements.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/system-ui.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as SystemUI from 'expo-system-ui';\n```\n\n----------------------------------------\n\nTITLE: Logging in to EAS CLI\nDESCRIPTION: This command logs the user into the Expo Application Services (EAS) CLI. It requires the user to have an Expo account.  The user will be prompted to authenticate via a web browser, connecting their local environment with their Expo account.\nSOURCE: https://github.com/expo/expo/blob/main/docs/scenes/get-started/set-up-your-environment/instructions/iosSimulatedDevelopmentBuild.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ eas login\n```\n\n----------------------------------------\n\nTITLE: Installing expo-linear-gradient in bare React Native projects\nDESCRIPTION: This command installs the expo-linear-gradient package using npx and expo CLI. It's used for adding the linear gradient functionality to bare React Native projects.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-linear-gradient/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-linear-gradient\n```\n\n----------------------------------------\n\nTITLE: Registering native modules in expo-module.config.json\nDESCRIPTION: Updates the expo-module.config.json file to register the native modules for both iOS and Android platforms for autolinking.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/existing-library.mdx#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ios\": {\n    \"modules\": [\"MyModule\"]\n  },\n  \"android\": {\n    \"modules\": [\"my.module.package.MyModule\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Required Outputs in EAS Build YAML Configuration\nDESCRIPTION: Demonstrates how to specify required and optional output parameters for a step in an EAS Build custom configuration.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: Demo\n  steps:\n    - run:\n        name: Produce another output\n        id: id456\n        outputs:\n          - required_param\n          - name: optional_param\n            required: false\n        command: |\n          echo \"Producing more output\"\n          set-output required_param \"abc 123 456\"\n```\n\n----------------------------------------\n\nTITLE: Importing DeviceMotion from expo-sensors\nDESCRIPTION: This JavaScript snippet shows the import statement necessary to use the DeviceMotion API within a React Native application. It imports the DeviceMotion component from the expo-sensors package.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/devicemotion.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { DeviceMotion } from 'expo-sensors';\n```\n\n----------------------------------------\n\nTITLE: Setting App Icon in Expo app.json\nDESCRIPTION: This JSON snippet shows how to set the app icon path in the app.json file for an Expo project.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/user-interface/splash-screen-and-app-icon.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"icon\": \"./assets/images/icon.png\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing expo-document-picker\nDESCRIPTION: Shows how to import the DocumentPicker module to access its functionality.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/document-picker.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as DocumentPicker from 'expo-document-picker';\n```\n\n----------------------------------------\n\nTITLE: Configuring eas.json for Production Builds\nDESCRIPTION: A minimal configuration in eas.json needed for creating production builds. This JSON structure defines the build profiles used by EAS Build to create app binaries for store submission.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/deploy/build-project.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    /* @hide ... */ /* @end */\n    \"production\": {}\n    /* @hide ... */ /* @end */\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Magnetometer Modules from expo-sensors\nDESCRIPTION: Example showing how to import both calibrated and uncalibrated magnetometer modules from expo-sensors package.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/magnetometer.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { Magnetometer, MagnetometerUncalibrated } from 'expo-sensors';\n```\n\n----------------------------------------\n\nTITLE: Using Underscore Prefix for Private Class Variables in JavaScript\nDESCRIPTION: Example of using an underscore prefix to denote private instance variables in a class. This convention communicates that a variable stores private data while keeping it accessible for debugging and testing purposes.\nSOURCE: https://github.com/expo/expo/blob/main/guides/Expo JavaScript Style Guide.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// CORRECT\nclass Counter {\n  _currentNumber = 0;\n  getNextNumber() { ... }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable for iOS Dev Launcher URL\nDESCRIPTION: Shell command to export the EX_DEV_LAUNCHER_URL environment variable before running pod install, which enables the controller to use a local packager instead of the prebuilt bundle.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-dev-launcher/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport EX_DEV_LAUNCHER_URL=http://localhost:8090\n```\n\n----------------------------------------\n\nTITLE: Importing KeepAwake Module in JavaScript\nDESCRIPTION: This code snippet shows how to import the KeepAwake module from expo-keep-awake. This import statement is typically used at the top of a JavaScript file where KeepAwake functionality is needed.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/keep-awake.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport KeepAwake from 'expo-keep-awake';\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Notification Channel with Custom Sound\nDESCRIPTION: Example of creating a notification channel with a custom sound file for Android 8.0+ and scheduling a notification using that channel. This approach requires placing the sound file in the Android project resources folder.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/notifications.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// Prepare the notification channel\nawait Notifications.setNotificationChannelAsync('new-emails', {\n  name: 'E-mail notifications',\n  importance: Notifications.AndroidImportance.HIGH,\n  sound: 'email-sound.wav', // <- for Android 8.0+, see channelId property below\n});\n\n// Eg. schedule the notification\nawait Notifications.scheduleNotificationAsync({\n  content: {\n    title: \"You've got mail! 📬\",\n    body: 'Open the notification to read them all',\n    sound: 'email-sound.wav', // <- for Android below 8.0\n  },\n  trigger: {\n    seconds: 2,\n    channelId: 'new-emails', // <- for Android 8.0+, see definition above\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Development Build for Android\nDESCRIPTION: This command creates a development build for the Android platform using the 'development' profile, which is defined in the `eas.json` file. It allows for faster iteration and debugging.\nSOURCE: https://github.com/expo/expo/blob/main/docs/scenes/get-started/set-up-your-environment/instructions/androidPhysicalDevelopmentBuild.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ eas build --platform android --profile development\n```\n\n----------------------------------------\n\nTITLE: Enabling expo-updates in Debug Builds via Environment Variable (Bash)\nDESCRIPTION: Sets the environment variable `EX_UPDATES_NATIVE_DEBUG` to `1`. This configuration forces the expo-updates module to be active even during debug builds, which normally load directly from the Metro development server. This is useful for testing updates functionality or debugging native code within a debug environment.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-updates/DEVELOPMENT.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport EX_UPDATES_NATIVE_DEBUG=1\n```\n\n----------------------------------------\n\nTITLE: Setting Base URL in Package.json\nDESCRIPTION: Example of configuring homepage field in package.json for subpath hosting in Expo Webpack.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/migrate/from-expo-webpack.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"homepage\": \"/evanbacon/my-website\"\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing data race in AppLauncherWithDatabaseMock Swift\nDESCRIPTION: Addresses a data race condition in the `AppLauncherWithDatabaseMock.swift` file. This fix aims to improve the stability and reliability of the app launcher, especially under concurrent access scenarios.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-updates/CHANGELOG.md#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nFix data race in `AppLauncherWithDatabaseMock.swift`.\n```\n\n----------------------------------------\n\nTITLE: Importing Barometer from expo-sensors\nDESCRIPTION: Simple import statement showing how to import the Barometer module from the expo-sensors package for use in an application.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/barometer.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { Barometer } from 'expo-sensors';\n```\n\n----------------------------------------\n\nTITLE: iOS Project Modification Command\nDESCRIPTION: Terminal command to modify the iOS Xcode project file for forcing JavaScript bundling in both release and debug builds.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/debug.mdx#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ sed -i '' 's/SKIP_BUNDLING/FORCE_BUNDLING/g;' ios/<project name>.xcodeproj/project.pbxproj\n```\n\n----------------------------------------\n\nTITLE: Importing FaceDetector Library\nDESCRIPTION: Illustrates the import of the FaceDetector module from the expo-face-detector package. This is essential for utilizing face detection functionalities provided by the library.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/facedetector.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as FaceDetector from 'expo-face-detector';\n```\n\n----------------------------------------\n\nTITLE: Importing SMS Module from Expo\nDESCRIPTION: Shows how to import the SMS module from expo-sms package to enable SMS functionality in an Expo application\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/sms.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as SMS from 'expo-sms';\n```\n\n----------------------------------------\n\nTITLE: Deploying Expo Project with EAS\nDESCRIPTION: This command deploys the Expo project using EAS, including all variables for the specified environment (in this case, production) in the API routes. EAS Environment variables loaded with the --environment flag take precedence over those in .env and .env.local files.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/hosting/environment-variables.mdx#2025-04-22_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\neas deploy --environment production\n```\n\n----------------------------------------\n\nTITLE: Setting Dynamic Screen Options in Expo Router (TypeScript)\nDESCRIPTION: Shows how to dynamically set screen options using the useNavigation hook. This approach allows for runtime configuration of screen properties.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/advanced/stack.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Stack, useNavigation } from 'expo-router';\nimport { Text, View } from 'react-native';\nimport { useEffect } from 'react';\n\nexport default function Home() {\n  const navigation = useNavigation();\n\n  useEffect(() => {\n    navigation.setOptions({ headerShown: false });\n  }, [navigation]);\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Home Screen</Text>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Unit Test Watcher with Jest\nDESCRIPTION: This script initiates Jest, the chosen test runner, to monitor file changes and run associated unit tests. Jest allows for immediate feedback on code changes, pivotal for maintaining the Expo SDK. Jest should be configured, and the development environment should support Yarn.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn test\n```\n\n----------------------------------------\n\nTITLE: Installing expo-video-thumbnails Package\nDESCRIPTION: Command to install the expo-video-thumbnails package using npx expo install in a React Native project.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-video-thumbnails/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-video-thumbnails\n```\n\n----------------------------------------\n\nTITLE: Implementing LinearGradient in React Native with Expo\nDESCRIPTION: A complete example showing how to use LinearGradient component in a React Native application. The example demonstrates two gradient implementations: a background gradient and a button with gradient styling. It includes the necessary styling for proper layout and appearance.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/linear-gradient.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StyleSheet, Text, View } from 'react-native';\nimport { LinearGradient } from 'expo-linear-gradient';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <LinearGradient\n        // Background Linear Gradient\n        colors={['rgba(0,0,0,0.8)', 'transparent']}\n        style={styles.background}\n      />\n      <LinearGradient\n        // Button Linear Gradient\n        colors={['#4c669f', '#3b5998', '#192f6a']}\n        style={styles.button}>\n        <Text style={styles.text}>Sign in with Facebook</Text>\n      </LinearGradient>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: 'orange',\n  },\n  background: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 0,\n    height: 300,\n  },\n  button: {\n    padding: 15,\n    alignItems: 'center',\n    borderRadius: 5,\n  },\n  text: {\n    backgroundColor: 'transparent',\n    fontSize: 15,\n    color: '#fff',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Importing the Network Module in JavaScript\nDESCRIPTION: Basic import statement for the expo-network module which allows access to network-related functionality in Expo applications.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/network.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Network from 'expo-network';\n```\n\n----------------------------------------\n\nTITLE: Optimized Font Loading in Expo\nDESCRIPTION: Demonstrates how to implement optimized font loading using expo-font with automatic static optimization. Shows font loading with useFonts hook and conditional rendering.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/reference/static-rendering.mdx#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Text } from 'react-native';\nimport { useFonts } from 'expo-font';\n\nexport default function App() {\n  const [isLoaded] = useFonts({\n    inter: require('@/assets/inter.ttf'),\n  });\n\n  if (!isLoaded) {\n    return null;\n  }\n\n  return <Text style={{ fontFamily: 'inter' }}>Hello Universe</Text>;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Barometer from Expo Sensors (JavaScript)\nDESCRIPTION: This snippet demonstrates a basic import statement for accessing the Barometer API from the expo-sensors package. This import is necessary to interact with barometer sensor methods such as addListener and is a prerequisite for accessing barometer-related functions in an Expo React Native project. There are no parameters or advanced configuration, but expo-sensors must be installed in the project dependencies.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/barometer.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { Barometer } from 'expo-sensors';\n```\n\n----------------------------------------\n\nTITLE: Minimal Expo Configuration in JSON\nDESCRIPTION: A basic example of an app.json file for configuring an Expo project. It demonstrates the minimal required fields: name and slug.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/workflow/configuration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"My app\",\n  \"slug\": \"my-app\"\n}\n```\n\n----------------------------------------\n\nTITLE: Validating a Single Property with Expo Schemer - JavaScript\nDESCRIPTION: This snippet illustrates how to validate a single property, such as a name, using the Schemer library in JavaScript. The example code sets up a schema validator and runs an asynchronous check on a specified property. The validator uses a schema.json file for property definitions. This is useful for validating individual data entries against schema rules.\nSOURCE: https://github.com/expo/expo/blob/main/packages/@expo/schemer/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst validator = new Schemer(require('schema.json'));\nawait validator.validateName('Wilson Zhao');\n```\n\n----------------------------------------\n\nTITLE: Basic OpenGL ES Rendering with GLView in React Native\nDESCRIPTION: This example demonstrates basic setup and usage of GLView to render a black dot on a cyan background. It creates a GLView component, sets up vertex and fragment shaders, links them into a program, and renders a point primitive.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/gl-view.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { View } from 'react-native';\nimport { GLView } from 'expo-gl';\n\nexport default function App() {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <GLView style={{ width: 300, height: 300 }} onContextCreate={onContextCreate} />\n    </View>\n  );\n}\n\nfunction onContextCreate(gl) {\n  gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n  gl.clearColor(0, 1, 1, 1);\n\n  // Create vertex shader (shape & position)\n  const vert = gl.createShader(gl.VERTEX_SHADER);\n  gl.shaderSource(\n    vert,\n    `\n    void main(void) {\n      gl_Position = vec4(0.0, 0.0, 0.0, 1.0);\n      gl_PointSize = 150.0;\n    }\n  `\n  );\n  gl.compileShader(vert);\n\n  // Create fragment shader (color)\n  const frag = gl.createShader(gl.FRAGMENT_SHADER);\n  gl.shaderSource(\n    frag,\n    `\n    void main(void) {\n      gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n    }\n  `\n  );\n  gl.compileShader(frag);\n\n  // Link together into a program\n  const program = gl.createProgram();\n  gl.attachShader(program, vert);\n  gl.attachShader(program, frag);\n  gl.linkProgram(program);\n  gl.useProgram(program);\n\n  gl.clear(gl.COLOR_BUFFER_BIT);\n  gl.drawArrays(gl.POINTS, 0, 1);\n\n  gl.flush();\n  gl.endFrameEXP();\n}\n```\n\n----------------------------------------\n\nTITLE: Importing UI Components and Icons with JavaScript/JSX\nDESCRIPTION: This snippet demonstrates the importation of UI components and an icon from external modules to structure a documentation page in a React-based codebase. Dependencies include modules such as '@expo/styleguide-icons/outline/BookOpen02Icon', '~/components/plugins/InstallSection', and '~/ui/components/BoxLink'. Inputs are limited to pre-existing modules in the project and are required for rendering documentation and deep-link UIs; there are no outputs except for the rendered result in the application.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/screens.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { BookOpen02Icon } from '@expo/styleguide-icons/outline/BookOpen02Icon';\n\nimport { APIInstallSection } from '~/components/plugins/InstallSection';\nimport { BoxLink } from '~/ui/components/BoxLink';\n```\n\n----------------------------------------\n\nTITLE: Configuring EAS Build Profile for E2E Tests\nDESCRIPTION: JSON configuration in eas.json for setting up build profiles for E2E testing on both iOS and Android platforms.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/workflows/reference/e2e-tests.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"e2e-test\": {\n      \"withoutCredentials\": true,\n      \"ios\": {\n        \"simulator\": true\n      },\n      \"android\": {\n        \"buildType\": \"apk\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Ignoring Local Environment Files in Git\nDESCRIPTION: This snippet shows how to add local environment files to .gitignore to prevent them from being tracked in version control.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/config/metro.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# local env files\n.env*.local\n```\n\n----------------------------------------\n\nTITLE: Creating a New Expo Project with Bare Minimum Template (shell)\nDESCRIPTION: This shell command creates a new React Native project named 'my-app' using the create-expo-app command and the bare-minimum template. It initializes the project folder and sets up the minimum required files for an Expo-enabled app. Requires npx and internet access; the project name is specified as a parameter and the resulting directory contains the starter app structure.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/index.mdx#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# Create a project named my-app\n$ npx create-expo-app my-app --template bare-minimum\n```\n\n----------------------------------------\n\nTITLE: Importing the Print Module in JavaScript\nDESCRIPTION: Simple import statement for the expo-print module, showing how to access the API in a JavaScript file.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/print.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as Print from 'expo-print';\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for expo-gl Shared Library\nDESCRIPTION: This CMake script configures the build process for the expo-gl shared library. It sets up the project, defines source files, includes directories, and specifies compiler options and linked libraries.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-gl/android/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.4.1)\n\nproject(expo-gl)\n\nset(CMAKE_EXPORT_COMPILE_COMMANDS ON)\nset(CMAKE_VERBOSE_MAKEFILE ON)\nset(CMAKE_CXX_STANDARD 20)\n\nset(PACKAGE_NAME \"expo-gl\")\nset(BUILD_DIR ${CMAKE_SOURCE_DIR}/build)\nset(COMMON_DIR ${CMAKE_SOURCE_DIR}/../common)\n\nadd_library(\n    ${PACKAGE_NAME} SHARED\n    ${COMMON_DIR}/EXGLNativeApi.cpp\n    ${COMMON_DIR}/EXGLNativeApi.h\n    ${COMMON_DIR}/EXGLImageUtils.cpp\n    ${COMMON_DIR}/EXGLImageUtils.h\n    ${COMMON_DIR}/EXGLNativeContext.cpp\n    ${COMMON_DIR}/EXGLNativeContext.h\n    ${COMMON_DIR}/EXGLContextManager.cpp\n    ${COMMON_DIR}/EXGLContextManager.h\n    ${COMMON_DIR}/EXWebGLMethods.cpp\n    ${COMMON_DIR}/EXWebGLMethods.h\n    ${COMMON_DIR}/EXWebGLRenderer.cpp\n    ${COMMON_DIR}/EXWebGLRenderer.h\n    ${COMMON_DIR}/EXTypedArrayApi.cpp\n    ${COMMON_DIR}/EXTypedArrayApi.h\n    ./src/main/cpp/EXGLJniApi.cpp)\n\ntarget_include_directories(\n    ${PACKAGE_NAME} PRIVATE \"${COMMON_DIR}\")\n\nfind_package(ReactAndroid REQUIRED CONFIG)\n\nfind_library(LOG_LIB log)\nfind_library(GLES_LIB GLESv3)\n\ntarget_compile_options(\n    ${PACKAGE_NAME}\n    PRIVATE -O2\n            -fexceptions\n            -frtti\n            -Wall\n            -Wextra\n            -Wno-unused-parameter\n            -Wshorten-64-to-32\n            -Wstrict-prototypes)\ntarget_link_libraries(${PACKAGE_NAME} ReactAndroid::jsi ${LOG_LIB} ${GLES_LIB} android)\n```\n\n----------------------------------------\n\nTITLE: Adding High Sampling Rate Permission in AndroidManifest.xml (XML)\nDESCRIPTION: Shows how to add the `HIGH_SAMPLING_RATE_SENSORS` permission to the `AndroidManifest.xml` file for Android projects. This permission is necessary on Android 12 (API level 31) and higher if your application requires sensor updates more frequently than the default 200Hz limit. This step is typically needed when not using Continuous Native Generation (CNG) or when managing the native Android project manually.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/sensors.mdx#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n```xml\n<uses-permission android:name=\"android.permission.HIGH_SAMPLING_RATE_SENSORS\" />\n```\n```\n\n----------------------------------------\n\nTITLE: Importing AuthSession module in JavaScript\nDESCRIPTION: Basic import statement for using the AuthSession module in a JavaScript or React Native application.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/auth-session.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as AuthSession from 'expo-auth-session';\n```\n\n----------------------------------------\n\nTITLE: Module Naming Conventions\nDESCRIPTION: Examples of module naming patterns for different types of Expo modules, including implementation modules, interface modules, and scoped modules\nSOURCE: https://github.com/expo/expo/blob/main/guides/Creating Unimodules.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nexpo-barcode-scanner           # Implementation module\nexpo-barcode-scanner-interface  # Interface module\nexpo-analytics-branch           # Scoped module\nexpo-analytics-segment          # Scoped module\n```\n\n----------------------------------------\n\nTITLE: Implementing Accelerometer Functionality in React Native with Expo\nDESCRIPTION: This snippet demonstrates how to use the Accelerometer module from expo-sensors in a React Native application. It shows how to subscribe to accelerometer updates, handle state, and control the update interval.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/accelerometer.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View } from 'react-native';\nimport { Accelerometer } from 'expo-sensors';\n\nexport default function App() {\n  const [{ x, y, z }, setData] = useState({\n    x: 0,\n    y: 0,\n    z: 0,\n  });\n  const [subscription, setSubscription] = useState(null);\n\n  const _slow = () => Accelerometer.setUpdateInterval(1000);\n  const _fast = () => Accelerometer.setUpdateInterval(16);\n\n  const _subscribe = () => {\n    setSubscription(Accelerometer.addListener(setData));\n  };\n\n  const _unsubscribe = () => {\n    subscription && subscription.remove();\n    setSubscription(null);\n  };\n\n  useEffect(() => {\n    _subscribe();\n    return () => _unsubscribe();\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.text}>Accelerometer: (in gs where 1g = 9.81 m/s^2)</Text>\n      <Text style={styles.text}>x: {x}</Text>\n      <Text style={styles.text}>y: {y}</Text>\n      <Text style={styles.text}>z: {z}</Text>\n      <View style={styles.buttonContainer}>\n        <TouchableOpacity onPress={subscription ? _unsubscribe : _subscribe} style={styles.button}>\n          <Text>{subscription ? 'On' : 'Off'}</Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={_slow} style={[styles.button, styles.middleButton]}>\n          <Text>Slow</Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={_fast} style={styles.button}>\n          <Text>Fast</Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    paddingHorizontal: 20,\n  },\n  text: {\n    textAlign: 'center',\n  },\n  buttonContainer: {\n    flexDirection: 'row',\n    alignItems: 'stretch',\n    marginTop: 15,\n  },\n  button: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#eee',\n    padding: 10,\n  },\n  middleButton: {\n    borderLeftWidth: 1,\n    borderRightWidth: 1,\n    borderColor: '#ccc',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Ignoring Native Directories in Git for React Native Projects\nDESCRIPTION: Add Android and iOS directories to .gitignore to use Prebuild with EAS Build for generating fresh native directories.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/workflow/continuous-native-generation.mdx#2025-04-22_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n+ /android\n+ /ios\n```\n\n----------------------------------------\n\nTITLE: Breaking Changes in Expo Constants Package\nDESCRIPTION: Removal of deprecated properties from expo-constants including installationId, isDevice, nativeAppVersion, nativeBuildVersion, and platform-related properties.\nSOURCE: https://github.com/expo/expo/blob/main/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Removed properties:\ninstallationId\nisDevice\nnativeAppVersion\nnativeBuildVersion\nplatform.platform\nplatform.systemVersion\nplatform.userInterfaceIdiom\n```\n\n----------------------------------------\n\nTITLE: Installing Expo Modules in an Existing Project\nDESCRIPTION: Command to install Expo modules in an existing React Native project, enabling the use of Expo CLI and Metro Config.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/getting-started.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npx install-expo-modules@latest\n```\n\n----------------------------------------\n\nTITLE: Importing ContentSpotlight Component in JSX\nDESCRIPTION: This code snippet demonstrates how to import and use the ContentSpotlight component to display a video file in the documentation.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/date-time-picker.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ContentSpotlight file=\"sdk/datetimepicker.mp4\" loop={false} />\n```\n\n----------------------------------------\n\nTITLE: Recording Audio in React Native with expo-av\nDESCRIPTION: Implementation of audio recording functionality using expo-av's Audio.Recording API. Handles permissions, recording controls, and proper cleanup.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/audio-av.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { View, StyleSheet, Button } from 'react-native';\nimport { Audio } from 'expo-av';\n\nexport default function App() {\n  const [recording, setRecording] = useState();\n  const [permissionResponse, requestPermission] = Audio.usePermissions();\n\n  async function startRecording() {\n    try {\n      if (permissionResponse.status !== 'granted') {\n        console.log('Requesting permission..');\n        await requestPermission();\n      }\n      await Audio.setAudioModeAsync({\n        allowsRecordingIOS: true,\n        playsInSilentModeIOS: true,\n      });\n\n      console.log('Starting recording..');\n      const { recording } = await Audio.Recording.createAsync(\n        Audio.RecordingOptionsPresets.HIGH_QUALITY\n      );\n      setRecording(recording);\n      console.log('Recording started');\n    } catch (err) {\n      console.error('Failed to start recording', err);\n    }\n  }\n\n  async function stopRecording() {\n    console.log('Stopping recording..');\n    setRecording(undefined);\n    await recording.stopAndUnloadAsync();\n    await Audio.setAudioModeAsync({\n      allowsRecordingIOS: false,\n    });\n    const uri = recording.getURI();\n    console.log('Recording stopped and stored at', uri);\n  }\n\n  return (\n    <View style={styles.container}>\n      <Button\n        title={recording ? 'Stop Recording' : 'Start Recording'}\n        onPress={recording ? stopRecording : startRecording}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    backgroundColor: '#ecf0f1',\n    padding: 10,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Entry File Configuration for Android Development\nDESCRIPTION: Modifications to MainApplication.java for supporting custom entry files in development mode.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/config/metro.mdx#2025-04-22_snippet_18\n\nLANGUAGE: diff\nCODE:\n```\n@Override\nprotected String getJSMainModuleName() {\n-  return \"index\";\n+  return \".expo/.virtual-metro-entry\";\n}\n```\n\n----------------------------------------\n\nTITLE: Update Branch Structure Example\nDESCRIPTION: Example showing the structure of updates in a production branch.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/debug.mdx#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nbranch: \"production\"\nupdates: [\n  update 2 (id: xyz2) \"fixes typo\"     // bad update\n  update 1 (id: abc1) \"updates color\"  // good update\n]\n```\n\n----------------------------------------\n\nTITLE: Compiling Expo App for Android and iOS\nDESCRIPTION: Commands to build native Android and iOS projects using Expo CLI. These commands compile the project into a debug build of the app using locally installed Android SDK or Xcode.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/local-app-development.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Build native Android project\n$ npx expo run:android\n# Build native iOS project\n$ npx expo run:ios\n```\n\n----------------------------------------\n\nTITLE: Extending ExpoView in Swift and Kotlin for Custom Views\nDESCRIPTION: Demonstrates how to extend the ExpoView base class to create custom views that can be exported using the View component in module definitions. The example shows a LinearGradientView implementation in both Swift and Kotlin.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/module-api.mdx#2025-04-22_snippet_29\n\nLANGUAGE: swift\nCODE:\n```\nclass LinearGradientView: ExpoView {}\n\npublic class LinearGradientModule: Module {\n  public func definition() -> ModuleDefinition {\n    View(LinearGradientView.self) {\n      /* @hide ... */ /* @end */\n    }\n  }\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass LinearGradientView(\n  context: Context,\n  appContext: AppContext,\n) : ExpoView(context, appContext)\n\nclass LinearGradientModule : Module() {\n  override fun definition() = ModuleDefinition {\n    View(LinearGradientView::class) {\n      /* @hide ... */ /* @end */\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing expo-auth-session in Bare React Native Projects\nDESCRIPTION: Command to install expo-auth-session and its dependency expo-crypto using npx expo install. This is required for bare React Native projects after configuring the expo package.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-auth-session/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-auth-session expo-crypto\n```\n\n----------------------------------------\n\nTITLE: Using useSafeAreaInsets Hook in React Native\nDESCRIPTION: Example of using the useSafeAreaInsets hook to directly access safe area inset values to manually apply padding.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/safe-area-context.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\n\nfunction HookComponent() {\n  const insets = useSafeAreaInsets();\n\n  return <View style={{ paddingTop: insets.top }} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Step Working Directory Configuration YAML\nDESCRIPTION: Specifies the working directory for a command to run in. The `working_directory` property overrides the `jobs.<job_id>.defaults.run.working_directory` if both are defined.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/workflows/syntax.mdx#_snippet_42\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  my_job:\n    steps:\n      - uses: eas/checkout\n      - run: pwd # prints: /home/expo/workingdir/build/my-app\n        # @info #\n        working_directory: ./my-app\n        # @end #\n```\n\n----------------------------------------\n\nTITLE: Generating Expo Config Schemas Using Yarn Commands (Shell)\nDESCRIPTION: These shell commands illustrate different ways to invoke the schema generator for the @expo/config-types package using Yarn. The options include generating from the current package version, a custom local schema path, a specific version number, or using the latest unversioned schema. Dependencies include having Yarn installed and appropriate access to referenced files or directories. Each command outputs versioned schema files for use in the package.\nSOURCE: https://github.com/expo/expo/blob/main/packages/@expo/config-types/README.md#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nyarn generate\n```\n\nLANGUAGE: Shell\nCODE:\n```\nyarn generate --path ../../../../universe/server/www/xdl-schemas/UNVERSIONED-schema.json\n```\n\nLANGUAGE: Shell\nCODE:\n```\nyarn generate 39\n```\n\nLANGUAGE: Shell\nCODE:\n```\nyarn generate unversioned\n```\n\n----------------------------------------\n\nTITLE: Running the Expo iOS App\nDESCRIPTION: This command builds and runs your Expo app on the connected iOS simulator or device. It automatically starts a development server after the app is built.\nSOURCE: https://github.com/expo/expo/blob/main/docs/scenes/get-started/set-up-your-environment/instructions/iosSimulatedDevelopmentBuildLocal.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ npx expo run:ios\n```\n\n----------------------------------------\n\nTITLE: Web Worker Implementation Example\nDESCRIPTION: Example of creating and using a web worker in Expo that doubles a number. Includes both the worker implementation and usage code.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/config/metro.mdx#2025-04-22_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nself.onmessage = ({ data }) => {\n  const result = data * 2; // Example: double the number\n  self.postMessage(result);\n};\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// worker is of type `Worker`\nconst worker = new Worker(new URL('./worker', window.location.href));\n\nworker.onmessage = ({ data }) => {\n  console.log(`Worker responded: ${data}`);\n};\n\nworker.postMessage(5);\n```\n\n----------------------------------------\n\nTITLE: Setting Up Video Playback Object\nDESCRIPTION: Shows how to set up a Video component and obtain a reference to the playback object.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/av.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n_handleVideoRef = component => {\n  const playbackObject = component;\n  ...\n}\n\nrender() {\n  return (\n      <Video\n        ref={this._handleVideoRef}\n      />\n      /* @hide ... */ /* @end */\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Importing expo-av Components\nDESCRIPTION: Example showing how to import Audio and Video components from expo-av.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/av.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Audio, Video } from 'expo-av';\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Permissions for expo-location in JSX\nDESCRIPTION: This code snippet shows how to set up iOS permissions for the expo-location module using the IOSPermissions component. It specifies the required usage description keys for location access on iOS.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/location.mdx#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<IOSPermissions\n  permissions={[\n    'NSLocationAlwaysAndWhenInUseUsageDescription',\n    'NSLocationAlwaysUsageDescription',\n    'NSLocationWhenInUseUsageDescription',\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Adding UserTrackingUsageDescription to iOS Info.plist\nDESCRIPTION: XML configuration for adding the NSUserTrackingUsageDescription key to iOS Info.plist, which provides the explanation shown to users when requesting tracking permission.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/tracking-transparency.mdx#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<key>NSUserTrackingUsageDescription</key>\n<string>Your custom usage description string here.</string>\n```\n\n----------------------------------------\n\nTITLE: EAS Build Profile Configuration for TV\nDESCRIPTION: Extended EAS build configuration in eas.json to support both TV and phone build profiles with environment variables.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/building-for-tv.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"cli\": {\n    \"version\": \">= 5.2.0\"\n  },\n  \"build\": {\n    \"base\": {\n      \"distribution\": \"internal\",\n      \"ios\": {\n        \"simulator\": true\n      },\n      \"android\": {\n        \"buildType\": \"apk\",\n        \"withoutCredentials\": true\n      },\n      \"channel\": \"base\"\n    },\n    \"development\": {\n      \"extends\": \"base\",\n      \"android\": {\n        \"gradleCommand\": \":app:assembleDebug\"\n      },\n      \"ios\": {\n        \"buildConfiguration\": \"Debug\"\n      },\n      \"channel\": \"development\"\n    },\n    \"development_tv\": {\n      \"extends\": \"development\",\n      \"env\": {\n        \"EXPO_TV\": \"1\"\n      },\n      \"channel\": \"development\"\n    },\n    \"preview\": {\n      \"extends\": \"base\",\n      \"channel\": \"preview\"\n    },\n    \"preview_tv\": {\n      \"extends\": \"preview\",\n      \"env\": {\n        \"EXPO_TV\": \"1\"\n      },\n      \"channel\": \"preview\"\n    }\n  },\n  \"submit\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Prettier Settings in .prettierrc (json)\nDESCRIPTION: This JSON snippet shows an example `.prettierrc` file used to override default Prettier formatting options. It sets custom values for `printWidth`, `tabWidth`, `singleQuote`, and `bracketSameLine`. Prettier uses this file to format code.\nSOURCE: https://github.com/expo/expo/blob/main/packages/eslint-config-universe/README.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"printWidth\": 100,\n  \"tabWidth\": 2,\n  \"singleQuote\": true,\n  \"bracketSameLine\": true\n}\n```\n\n----------------------------------------\n\nTITLE: iOS Error Stacktrace Example\nDESCRIPTION: Example of an iOS fatal JavaScript exception stacktrace showing how expo-updates error recovery system reports crashes\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/error-recovery.mdx#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nLast Exception Backtrace:\n0   CoreFoundation                \t0xf203feba4 __exceptionPreprocess + 220 (NSException.m:200)\n1   libobjc.A.dylib               \t0xf201a1be7 objc_exception_throw + 60 (objc-exception.mm:565)\n2   MyApp                         \t0x10926b7ee -[EXUpdatesAppController throwException:] + 24 (EXUpdatesAppController.m:422)\n3   MyApp                         \t0x109280352 -[EXUpdatesErrorRecovery _crash] + 984 (EXUpdatesErrorRecovery.m:222)\n4   MyApp                         \t0x10927fa3d -[EXUpdatesErrorRecovery _runNextTask] + 148 (EXUpdatesErrorRecovery.m:0)\n5   libdispatch.dylib             \t0x109bc1848 _dispatch_call_block_and_release + 32 (init.c:1517)\n6   libdispatch.dylib             \t0x109bc2a2c _dispatch_client_callout + 20 (object.m:560)\n7   libdispatch.dylib             \t0x109bc93a6 _dispatch_lane_serial_drain + 668 (inline_internal.h:2622)\n8   libdispatch.dylib             \t0x109bca0bc _dispatch_lane_invoke + 392 (queue.c:3944)\n9   libdispatch.dylib             \t0x109bd6472 _dispatch_workloop_worker_thread + 648 (queue.c:6732)\n10  libsystem_pthread.dylib       \t0xf6da2845d _pthread_wqthread + 288 (pthread.c:2599)\n11  libsystem_pthread.dylib       \t0xf6da2742f start_wqthread + 8\n```\n\n----------------------------------------\n\nTITLE: Android Build Size Comparison Table\nDESCRIPTION: Markdown table comparing build sizes across different SDK versions, showing the impact of React Native 0.73 upgrade on APK and AAB sizes.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/distribution/app-size.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| SDK | APK (debug variant) | APK (release variant) | AAB     | Google Play |\n| --- | ------------------- | --------------------- | ------- | ----------- |\n| 49  | 66 MB               | 27.6 MB               | 28.2 MB | 11.7 MB     |\n| 50  | 168.1 MB            | 62.1 MB               | 27.4 MB | 11.7 MB     |\n```\n\n----------------------------------------\n\nTITLE: Capturing Photo Method with TSDoc in TypeScript\nDESCRIPTION: This snippet provides details on how to document a function using TSDoc in TypeScript. It describes capturing a photo with specified configurations, including comments on parameters, return values, and possible exceptions.\nSOURCE: https://github.com/expo/expo/blob/main/guides/Expo Documentation Writing Style Guide.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Captures a still photo with the camera's current settings and given configuration options. The\n * image will be encoded using the specified format. If the format is not supported by the device,\n * this method throws an error.\n *\n * Upon capturing the photo, it is written to the device's temporary file storage. The file will be\n * accessible right after this method completes but may be cleared by the device OS at an arbitrary\n * time afterward; do not assume the file is permanent.\n *\n * @param options configuration options that specify the file format, image quality, and more\n * @returns a promise fulfilled with information about the captured photo, including its location on\n *   disk\n */\n```\n\n----------------------------------------\n\nTITLE: Importing GLView from expo-gl Package\nDESCRIPTION: A simple import statement showing how to import the GLView component from the expo-gl package, which is necessary before using the OpenGL ES rendering capabilities in an Expo application.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/gl-view.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { GLView } from 'expo-gl';\n```\n\n----------------------------------------\n\nTITLE: Configuring SplashScreen Animation Options\nDESCRIPTION: This code snippet demonstrates how to configure the out-of-the-box fade animation for the splash screen using the setOptions method. It sets the duration of the animation and enables the fade effect.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/splash-screen.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nSplashScreen.setOptions({\n  duration: 1000,\n  fade: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Importing SMS Module in Expo\nDESCRIPTION: Example showing how to import the SMS module from expo-sms package to enable SMS functionality in an Expo application.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/sms.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as SMS from 'expo-sms';\n```\n\n----------------------------------------\n\nTITLE: Configuring Automatic App Release in JSON (Scheduled Date)\nDESCRIPTION: This snippet demonstrates how to configure an automatic release for an app after a specific date and time. It uses the RFC 3339 format for the date specification.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/metadata/schema.mdx#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"configVersion\": 0,\n  \"apple\": {\n    \"release\": {\n      \"automaticRelease\": \"2022-12-25T00:00:00+00:00\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel Platform-Specific Plugins\nDESCRIPTION: Configuration example for babel.config.js showing how to add platform-specific plugins using the API caller platform property.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/migrate/from-expo-webpack.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = api => {\n  // Get the platform from the API caller...\n  const platform = api.caller(caller => caller && caller.platform);\n\n  return {\n    presets: ['babel-preset-expo'],\n    plugins: [\n      // Add a web-only plugin...\n      platform === 'web' && 'custom-web-only-plugin',\n    ].filter(Boolean),\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Metro Configuration Setup\nDESCRIPTION: Basic Metro bundler configuration for Expo projects using the default configuration\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/reference/static-rendering.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { getDefaultConfig } = require('expo/metro-config');\n\n/** @type {import('expo/metro-config').MetroConfig} */\nconst config = getDefaultConfig(__dirname, {\n  // Additional features...\n});\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-font Plugin in Expo App Config\nDESCRIPTION: Configuration for embedding Google Fonts using the expo-font plugin in app.json. Specifies the font file path within node_modules.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/user-interface/fonts.mdx#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    [\n      \"expo-font\",\n      {\n        \"fonts\": [\"node_modules/@expo-google-fonts/inter/Inter_900Black.ttf\"]\n      }\n    ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing IntentLauncher Module\nDESCRIPTION: Example showing how to import the entire IntentLauncher module for use in an application.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/intent-launcher.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as IntentLauncher from 'expo-intent-launcher';\n```\n\n----------------------------------------\n\nTITLE: Importing Video Component from expo-av in React Native\nDESCRIPTION: This code snippet shows how to import the Video component from the expo-av library for use in a React Native application.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/video-av.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Video } from 'expo-av';\n```\n\n----------------------------------------\n\nTITLE: Handling Async Transactions with Conflicting Updates in TypeScript\nDESCRIPTION: This code illustrates the use of async transactions in SQLite, showcasing a scenario where queries inside and outside the 'withTransactionAsync' callback are automatically included in the transaction. Dependencies include TypeScript and SQLite library with support for promises. It explains how the timing of query execution affects the transaction outcome, highlighting synchronization issues when utilizing async operations.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/sqlite.mdx#2025-04-22_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nPromise.all([\n  db.withTransactionAsync(async () => {\n    await db.execAsync('INSERT INTO test (data) VALUES (\"first\")');\n    await sleep(2000);\n    const row = await db.getFirstAsync<{ data: string }>('SELECT data FROM test');\n    expect(row.data).toBe('first');\n  }),\n  sleep(1000).then(async () => db.execAsync('UPDATE test SET data = \"second\"')),\n]);\n```\n\n----------------------------------------\n\nTITLE: Rendering Lottie Animation in React Native\nDESCRIPTION: This snippet demonstrates how to use the Lottie library in a React Native application. It shows how to render an animation, control it programmatically, and handle user interactions. The example includes a button to restart the animation.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/lottie.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useRef, useEffect } from 'react';\nimport { Button, StyleSheet, View } from 'react-native';\nimport LottieView from 'lottie-react-native';\n\nexport default function App() {\n  const animation = useRef<LottieView>(null);\n  useEffect(() => {\n    // You can control the ref programmatically, rather than using autoPlay\n    // animation.current?.play();\n  }, []);\n\n  return (\n    <View style={styles.animationContainer}>\n      <LottieView\n        autoPlay\n        ref={animation}\n        style={{\n          width: 200,\n          height: 200,\n          backgroundColor: '#eee',\n        }}\n        // Find more Lottie files at https://lottiefiles.com/featured\n        source={require('./assets/gradientBall.json')}\n      />\n      <View style={styles.buttonContainer}>\n        <Button\n          title=\"Restart Animation\"\n          onPress={() => {\n            animation.current?.reset();\n            animation.current?.play();\n          }}\n        />\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  animationContainer: {\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n    flex: 1,\n  },\n  buttonContainer: {\n    paddingTop: 20,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Virtual Modules in Metro Configuration\nDESCRIPTION: Shows how to emulate virtual modules by creating files in the node_modules/.cache directory and redirecting resolution to those files. This example creates a virtual module with a 'Hello World' export that can be imported using 'virtual:my-module'.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/config/metro.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst path = require('path');\nconst fs = require('fs');\n\nconst { getDefaultConfig } = require('expo/metro-config');\n\n/** @type {import('expo/metro-config').MetroConfig} */\nconst config = getDefaultConfig(__dirname);\n\nconst virtualPath = path.resolve(__dirname, 'node_modules/.cache/virtual/virtual-module.js');\n\n// Create the virtual module in a generated directory...\nfs.mkdirSync(path.dirname(virtualPath), { recursive: true });\nfs.writeFileSync(virtualPath, 'export default \"Hello World\";');\n\nconfig.resolver.resolveRequest = (context, moduleName, platform) => {\n  if (moduleName === 'virtual:my-module') {\n    return {\n      filePath: virtualPath,\n      type: 'sourceFile',\n    };\n  }\n\n  // Ensure you call the default resolver.\n  return context.resolveRequest(context, moduleName, platform);\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Annotating Output Bundles with Debug ID in JavaScript\nDESCRIPTION: This snippet (not actual code, but annotation) illustrates how Expo/Metro adds a deterministic debugId comment to output bundles, linking them to external source maps. While the content is a placeholder, it shows where the debugId appears and how it's used for mapping sources. This applies to all platforms starting SDK 50, and no dependencies or parameters are required for its actual usage besides exporting with external source maps.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/config/metro.mdx#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// <all source code>\n\n//# debugId=<deterministic chunk hash>\n```\n\n----------------------------------------\n\nTITLE: Importing expo-contacts Module (React Native, JavaScript)\nDESCRIPTION: Shows the basic import syntax for bringing in all exports from the expo-contacts module in a React Native JavaScript file. No parameters. This is a prerequisite for all expo-contacts API usage.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/contacts.mdx#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport * as Contacts from 'expo-contacts';\n```\n\n----------------------------------------\n\nTITLE: Package.json Build Script Configuration\nDESCRIPTION: Build script configuration for deploying to Vercel.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/using-nextjs.mdx#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"build\": \"next build\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Opening iOS Project in Xcode\nDESCRIPTION: Command to open the generated iOS project in Xcode. This shortcut opens the .xcworkspace file from your project's ios directory for native debugging.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/debugging/runtime-issues.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ xed ios\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Background Fetch Mode in Expo.plist (XML)\nDESCRIPTION: This XML snippet demonstrates how to configure the **Expo.plist** file for iOS projects not using Continuous Native Generation (CNG) or those managed manually. It adds the `fetch` value to the `UIBackgroundModes` array, enabling the app to perform background fetch operations as required by the `expo-background-fetch` module.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/background-fetch.mdx#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<key>UIBackgroundModes</key>\n  <array>\n    <string>fetch</string>\n  </array>\n</key>\n```\n\n----------------------------------------\n\nTITLE: Importing expo-background-task Module\nDESCRIPTION: Import statement for using the expo-background-task module in a JavaScript or TypeScript file.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/background-task.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as BackgroundTask from 'expo-background-task';\n```\n\n----------------------------------------\n\nTITLE: Copying and Versioning JSON Schema Files - Shell\nDESCRIPTION: Duplicates the unversioned schema file and assigns it to a specific SDK version. Requires shell access and proper permissions in the `universe/server/www/xdl-schemas` directory. Input is the path and desired version; output is a new JSON file for the SDK schema.\nSOURCE: https://github.com/expo/expo/blob/main/guides/releasing/Release Workflow.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncp UNVERSIONED-schema.json XX.X.X-schema.json\n```\n\n----------------------------------------\n\nTITLE: React Import Statements\nDESCRIPTION: Import statements for React components including icon and custom UI components used in the documentation.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/introduction.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { LayersTwo02Icon } from '@expo/styleguide-icons/outline/LayersTwo02Icon';\n\nimport { BoxLink } from '~/ui/components/BoxLink';\nimport { ContentSpotlight } from '~/ui/components/ContentSpotlight';\n```\n\n----------------------------------------\n\nTITLE: Replacements for fbjs Dependencies\nDESCRIPTION: Code example showing the recommended replacements for common fbjs library dependencies. Shows alternatives for invariant and ExecutionEnvironment.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-module-scripts/README.md#2025-04-22_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Instead of fbjs/lib/invariant\nimport invariant from 'invariant';\n\n// Instead of fbjs/lib/ExecutionEnvironment\nimport { Platform } from '@unimodules/core';\n```\n\n----------------------------------------\n\nTITLE: Configuring Install Exclusions in Expo package.json\nDESCRIPTION: Demonstrates how to exclude specific libraries from Expo's version checking system using the install.exclude property. This allows certain packages to bypass version compatibility warnings.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/config/package-json.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"install\": {\n      \"exclude\": [\"expo-updates\", \"expo-splash-screen\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Swift Headers in Objective-C++\nDESCRIPTION: Required imports for using EXUpdatesAppController methods in Objective-C++ code for runtime configuration overrides.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/updates.mdx#2025-04-22_snippet_4\n\nLANGUAGE: objc\nCODE:\n```\n#import \"ExpoModulesCore-Swift.h\"\n#import \"EXUpdatesInterface-Swift.h\"\n#import \"EXUpdates-Swift.h\"\n```\n\n----------------------------------------\n\nTITLE: Setting Module Constants in Swift\nDESCRIPTION: Defines constant properties on the module using either a direct dictionary or a closure that returns a dictionary. These constants are accessible from JavaScript without additional function calls.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/module-api.mdx#2025-04-22_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\n// Created from the dictionary\nConstants([\n  \"PI\": Double.pi\n])\n\n// or returned by the closure\nConstants {\n  return [\n    \"PI\": Double.pi\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Job Image Configuration YAML\nDESCRIPTION: Specifies the VM image to use for the job. The `image` property is optional and defaults to 'auto'. Available images are documented in the Infrastructure section.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/workflows/syntax.mdx#_snippet_37\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  my_job:\n    # @info #\n    image: auto | string # optional, defaults to 'auto'\n    # @end #\n```\n\n----------------------------------------\n\nTITLE: Importing Video Components with Expo Video in JavaScript\nDESCRIPTION: This snippet shows the import statement for `VideoView` and `useVideoPlayer` from the `expo-video` package in JavaScript. These imports are essential for using video components and the associated hooks within the Expo framework.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/video.mdx#2025-04-22_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { VideoView, useVideoPlayer } from 'expo-video';\n```\n\n----------------------------------------\n\nTITLE: Running Android builds with Expo CLI\nDESCRIPTION: Command for building and running an Expo app on Android devices or emulators. Requires Android Studio and Java to be installed and provides options for device selection, caching, and port configuration.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/more/expo-cli.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Build for Android\n$ npx expo run:android\n```\n\n----------------------------------------\n\nTITLE: Importing the Pedometer Module in Expo\nDESCRIPTION: A code snippet showing how to import the Pedometer module from the expo-sensors package. This is the basic import statement required before using any Pedometer functionality.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/pedometer.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { Pedometer } from 'expo-sensors';\n```\n\n----------------------------------------\n\nTITLE: Generating and Syncing New SDK Documentation - Shell\nDESCRIPTION: Regenerates unversioned and versioned API data, synchronizes schema, and configures documentation for the new SDK. Uses multiple commands (`et generate-docs-api-data`, `et generate-sdk-docs`, and yarn script) that require correct SDK version numbers and Doc tooling setup. Ensures new versioned documentation is ready for QA and release.\nSOURCE: https://github.com/expo/expo/blob/main/guides/releasing/Release Workflow.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\net generate-docs-api-data\n```\n\nLANGUAGE: shell\nCODE:\n```\net generate-sdk-docs --sdk XX.X.X\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn run schema-sync XX\n```\n\n----------------------------------------\n\nTITLE: DateTimePicker Component Usage (Jetpack Compose)\nDESCRIPTION: This code snippet demonstrates how to use the DateTimePicker component from the `@expo/ui/jetpack-compose` library. The `onDateSelected` prop is used to define the action when a date is selected. `displayedComponents` is set to `'date'` to only show the date. `initialDate` is set to a date string, and `variant` is set to `'picker'` to use a picker.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/ui.mdx#_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DateTimePicker } from '@expo/ui/jetpack-compose';\n\n<DateTimePicker\n  onDateSelected={date => {\n    setSelectedDate(date);\n  }}\n  displayedComponents='date'\n  initialDate={selectedDate.toISOString()}\n  variant='picker'\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining Module Name in Swift/Kotlin\nDESCRIPTION: Sets the name of the module that JavaScript code will use to refer to the module. This can be inferred from the module's class name, but it's recommended to set it explicitly for clarity.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/module-api.mdx#2025-04-22_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nName(\"MyModuleName\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Apple Authentication in React Native\nDESCRIPTION: React Native component demonstrating the usage of AppleAuthenticationButton and signInAsync function from expo-apple-authentication library.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/apple-authentication.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as AppleAuthentication from 'expo-apple-authentication';\nimport { View, StyleSheet } from 'react-native';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <AppleAuthentication.AppleAuthenticationButton\n        buttonType={AppleAuthentication.AppleAuthenticationButtonType.SIGN_IN}\n        buttonStyle={AppleAuthentication.AppleAuthenticationButtonStyle.BLACK}\n        cornerRadius={5}\n        style={styles.button}\n        onPress={async () => {\n          try {\n            const credential = await AppleAuthentication.signInAsync({\n              requestedScopes: [\n                AppleAuthentication.AppleAuthenticationScope.FULL_NAME,\n                AppleAuthentication.AppleAuthenticationScope.EMAIL,\n              ],\n            });\n            // signed in\n          } catch (e) {\n            if (e.code === 'ERR_REQUEST_CANCELED') {\n              // handle that the user canceled the sign-in flow\n            } else {\n              // handle other errors\n            }\n          }\n        }}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  button: {\n    width: 200,\n    height: 44,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Opening iOS App Store Reviews\nDESCRIPTION: Example code demonstrating how to redirect users to the Write a Review screen in the iOS App Store using Linking API with the action=write-review parameter.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/storereview.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst itunesItemId = 982107779;\n// Open the iOS App Store in the browser -> redirects to App Store on iOS\nLinking.openURL(`https://apps.apple.com/app/apple-store/id${itunesItemId}?action=write-review`);\n// Open the iOS App Store directly\nLinking.openURL(\n  `itms-apps://itunes.apple.com/app/viewContentsUserReviews/id${itunesItemId}?action=write-review`\n);\n```\n\n----------------------------------------\n\nTITLE: Using SymbolView Component in React Native (JSX)\nDESCRIPTION: This snippet demonstrates how to use the SymbolView component from expo-symbols in a React Native application. It renders an SF Symbol named 'airpods.chargingcase' with hierarchical styling.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/symbols.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SymbolView, SymbolViewProps, SFSymbol } from 'expo-symbols';\nimport { StyleSheet, View } from 'react-native';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <SymbolView name=\"airpods.chargingcase\" style={styles.symbol} type=\"hierarchical\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  symbol: {\n    width: 35,\n    height: 35,\n    margin: 5,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting iOS Permissions in Info.plist\nDESCRIPTION: Example of manually adding the required permission keys to Info.plist for iOS when not using Continuous Native Generation.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/imagepicker.mdx#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<key>NSPhotoLibraryUsageDescription</key>\n<string>Give $(PRODUCT_NAME) permission to save photos</string>\n<key>NSCameraUsageDescription</key>\n<string>Give $(PRODUCT_NAME) permission to access your camera</string>\n<key>NSMicrophoneUsageDescription</key>\n<string>Give $(PRODUCT_NAME) permission to use your microphone</string>\n```\n\n----------------------------------------\n\nTITLE: Legacy Conditional Import Approach\nDESCRIPTION: Shows the older approach to conditionally including code based on environment. This method lacks proper TypeScript support and makes static analysis difficult.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/tree-shaking.mdx#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nif (process.env.NODE_ENV === 'development') {\n  require('./dev-only').doSomething();\n}\n```\n\n----------------------------------------\n\nTITLE: Importing LinearGradient from expo-linear-gradient\nDESCRIPTION: Basic import statement showing how to import the LinearGradient component from the expo-linear-gradient package.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/linear-gradient.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { LinearGradient } from 'expo-linear-gradient';\n```\n\n----------------------------------------\n\nTITLE: Overriding iOS Entry File in AppDelegate (React Native / Objective-C)\nDESCRIPTION: This snippet updates the `sourceURLForBridge:` method in the iOS AppDelegate.mm to point React Native to a custom Metro entry file during development. It replaces the default 'index' bundle root with '.expo/.virtual-metro-entry', enabling projects to specify an alternative entry point. This change is conditional on the DEBUG preprocessor macro and does not affect production builds.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/config/metro.mdx#2025-04-22_snippet_11\n\nLANGUAGE: Objective-C\nCODE:\n```\n- (NSURL *)sourceURLForBridge:(RCTBridge *)bridge\n{\n#if DEBUG\n-  return [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@\"index\"];\n+  return [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@\".expo/.virtual-metro-entry\"];\n#else\n  return [[NSBundle mainBundle] URLForResource:@\"main\" withExtension:@\"jsbundle\"];\n#endif\n}\n\n```\n\n----------------------------------------\n\nTITLE: Importing Image Component from expo-image\nDESCRIPTION: Simple import statement for the Image component from the expo-image package.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/image.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { Image } from 'expo-image';\n```\n\n----------------------------------------\n\nTITLE: Opening Existing SQLite Database in TypeScript\nDESCRIPTION: Provides a function to open an existing SQLite database file in an Expo project. It handles creating necessary directories, downloading the database asset, and copying it to the appropriate location.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/sqlite-next.mdx#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nasync function openDatabase(pathToDatabaseFile: string): Promise<SQLite.Database> {\n  if (!(await FileSystem.getInfoAsync(FileSystem.documentDirectory + 'SQLite')).exists) {\n    await FileSystem.makeDirectoryAsync(FileSystem.documentDirectory + 'SQLite');\n  }\n  const asset = await Asset.fromModule(require(pathToDatabaseFile)).downloadAsync();\n  await FileSystem.copyAsync({\n    from: asset.localUri,\n    to: FileSystem.documentDirectory + 'SQLite/myDatabaseName.db',\n  });\n  return await SQLite.openDatabaseAsync('myDatabaseName.db');\n}\n```\n\n----------------------------------------\n\nTITLE: Android Error Stacktrace Example\nDESCRIPTION: Example of an Android fatal JavaScript exception stacktrace showing how expo-updates error recovery system reports crashes\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/error-recovery.mdx#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n--------- beginning of crash\nAndroidRuntime: FATAL EXCEPTION: expo-updates-error-recovery\nAndroidRuntime: Process: com.myapp.MyApp, PID: 12498\nAndroidRuntime: com.facebook.react.common.JavascriptException\nAndroidRuntime: \nAndroidRuntime: \tat com.facebook.react.modules.core.ExceptionsManagerModule.reportException(ExceptionsManagerModule.java:72)\nAndroidRuntime: \tat java.lang.reflect.Method.invoke(Native Method)\nAndroidRuntime: \tat com.facebook.react.bridge.JavaMethodWrapper.invoke(JavaMethodWrapper.java:372)\nAndroidRuntime: \tat com.facebook.react.bridge.JavaModuleWrapper.invoke(JavaModuleWrapper.java:188)\nAndroidRuntime: \tat com.facebook.react.bridge.queue.NativeRunnable.run(Native Method)\nAndroidRuntime: \tat android.os.Handler.handleCallback(Handler.java:938)\nAndroidRuntime: \tat android.os.Handler.dispatchMessage(Handler.java:99)\nAndroidRuntime: \tat com.facebook.react.bridge.queue.MessageQueueThreadHandler.dispatchMessage(MessageQueueThreadHandler.java:27)\nAndroidRuntime: \tat android.os.Looper.loop(Looper.java:223)\nAndroidRuntime: \tat com.facebook.react.bridge.queue.MessageQueueThreadImpl$4.run(MessageQueueThreadImpl.java:228)\nAndroidRuntime: \tat java.lang.Thread.run(Thread.java:923)\n```\n\n----------------------------------------\n\nTITLE: YouTube Video Component Implementation in React\nDESCRIPTION: Example of implementing a YouTube video component using the VideoBoxLink component.\nSOURCE: https://github.com/expo/expo/blob/main/docs/README.md#2025-04-22_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport { VideoBoxLink } from '~/ui/components/VideoBoxLink';\n\n<VideoBoxLink videoId=\"Gk7RHDWsLsQ\" title=\"Required title\" description=\"Optional\" />;\n```\n\n----------------------------------------\n\nTITLE: Clearing Caches with Expo CLI and npm\nDESCRIPTION: Command sequence to clear node modules, npm cache, watchman cache, and Metro bundler cache when using Expo CLI with npm.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/troubleshooting/clear-cache-windows.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ rm -rf node_modules\n\n$ npm cache clean --force\n\n$ npm install\n\n$ watchman watch-del-all\n\n$ del %localappdata%\\Temp\\haste-map-*\n\n$ del %localappdata%\\Temp\\metro-cache\n\n$ npx expo start --clear\n```\n\n----------------------------------------\n\nTITLE: Setting Experimental Deployment Environment Variable - Shell Script\nDESCRIPTION: Defines the environment variable EXPO_UNSTABLE_DEPLOY_SERVER as 1 in a .env shell file, enabling experimental server deployment for Expo during EAS build. No external dependencies are required, but the Expo CLI and EAS Build system must support this variable. This variable instructs the build process to perform automatic deployment linking; the input is a shell environment file and no output is produced except for build-time behavior.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/reference/api-routes.mdx#2025-04-22_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nEXPO_UNSTABLE_DEPLOY_SERVER=1\\n\n```\n\n----------------------------------------\n\nTITLE: Starting Expo Project with Cleared Metro Cache (Bash)\nDESCRIPTION: This command demonstrates how to start an Expo project with the --clear flag to clear the Metro cache, ensuring routes are loaded asynchronously. It also shows the command for exporting with a cleared cache.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/reference/async-routes.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo start --clear\n\n# Or when exporting\n$ npx expo export --clear\n```\n\n----------------------------------------\n\nTITLE: Importing DeviceMotion API from Expo Sensors (JavaScript)\nDESCRIPTION: Imports the `DeviceMotion` object from the `expo-sensors` library. This object provides methods and properties to access the device's motion sensor data within a React Native application built with Expo.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/devicemotion.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nimport { DeviceMotion } from 'expo-sensors';\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Expo Orbit on macOS using Homebrew\nDESCRIPTION: Command to install Expo Orbit on macOS using the Homebrew package manager. This is the recommended installation method for macOS users.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/build/orbit.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ brew install expo-orbit\n```\n\n----------------------------------------\n\nTITLE: Customizing Babel Configuration for Metro\nDESCRIPTION: Demonstrates how to customize Babel configuration for Metro bundler by accessing platform-specific information through the caller API. This configuration adjusts transformations based on platform, engine, server environment, and development mode.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/config/metro.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = function (api) {\n  // Get the platform that Expo CLI is transforming for.\n  const platform = api.caller(caller => (caller ? caller.platform : 'ios'));\n\n  // Detect if the bundling operation is for Hermes engine or not, e.g. `'hermes'` | `undefined`.\n  const engine = api.caller(caller => (caller ? caller.engine : null));\n\n  // Is bundling for a server environment, e.g. API Routes.\n  const isServer = api.caller(caller => (caller ? caller.isServer : false));\n\n  // Is bundling for development or production.\n  const isDev = api.caller(caller =>\n    caller\n      ? caller.isDev\n      : process.env.BABEL_ENV === 'development' || process.env.NODE_ENV === 'development'\n  );\n\n  // Ensure the config is not cached otherwise the platform will not be updated.\n  api.cache(false);\n  // You can alternatively provide a more robust CONFIG cache invalidation:\n  // api.cache.invalidate(() => platform);\n\n  return {\n    presets: ['babel-preset-expo'],\n    plugins: [\n      // Add a plugin based on the platform...\n      platform === 'web' && 'my-plugin',\n\n      // Ensure you filter out falsy values.\n    ].filter(Boolean),\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Installing EAS CLI using npm\nDESCRIPTION: This command installs the Expo Application Services (EAS) CLI globally using npm. This allows you to use the 'eas' command from any terminal.\nSOURCE: https://github.com/expo/expo/blob/main/docs/scenes/get-started/set-up-your-environment/instructions/androidPhysicalDevelopmentBuild.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install -g eas-cli\n```\n\n----------------------------------------\n\nTITLE: Updating React Native Entry File for Expo\nDESCRIPTION: Demonstrates how to modify the entry file to use Expo's registerRootComponent instead of React Native's AppRegistry.registerComponent for app registration.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/adopting-prebuild.mdx#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n+ import {registerRootComponent} from 'expo';\n\n- import {AppRegistry} from 'react-native';\nimport App from './App';\n- import {name as appName} from './app.json';\n\n- AppRegistry.registerComponent(appName, () => App);\n+ registerRootComponent(App);\n```\n\n----------------------------------------\n\nTITLE: Playing Local Video Assets with expo-video using require\nDESCRIPTION: Demonstrates how to play video files stored locally within the project's assets directory using `expo-video`. It shows using the asset reference obtained from `require('./assets/bigbuckbunny.mp4')` directly as the source for `useVideoPlayer`, or assigning it to the `assetId` property of a `VideoSource` object to include additional metadata like title and artist.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/video.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { VideoSource } from 'expo-video';\n\nconst assetId = require('./assets/bigbuckbunny.mp4');\n\nconst videoSource: VideoSource = {\n  assetId,\n  metadata: {\n    title: 'Big Buck Bunny',\n    artist: 'The Open Movie Project',\n  },\n};\n\nconst player1 = useVideoPlayer(assetId); // You can use the `asset` directly as a video source\nconst player2 = useVideoPlayer(videoSource);\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Custom Typography Component in Expo (TypeScript)\nDESCRIPTION: Imports a RawH3 React component from a shared UI components directory and uses it to render a section header labeled 'Animations'. The import assumes the presence of a Text component library at '~/ui/components/Text'. No properties other than the direct child text are passed. Intended for use in documentation, example screens, or as part of a UI guide; there are no external dependencies beyond React and the referenced UI module.\nSOURCE: https://github.com/expo/expo/blob/main/docs/scenes/get-started/start-developing/TemplateFeatures/features/animations.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RawH3 } from '~/ui/components/Text';\n\n<RawH3>Animations</RawH3>\n```\n\n----------------------------------------\n\nTITLE: Recording sounds with expo-audio in React Native\nDESCRIPTION: This example shows how to use the useAudioRecorder hook from expo-audio to record audio in a React Native application. It includes requesting microphone permissions and handling recording state.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/audio.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { View, StyleSheet, Button } from 'react-native';\nimport { useAudioRecorder, RecordingOptions, AudioModule, RecordingPresets } from 'expo-audio';\n\nexport default function App() {\n  const audioRecorder = useAudioRecorder(RecordingPresets.HIGH_QUALITY);\n\n  const record = async () => {\n    await audioRecorder.prepareToRecordAsync();\n    audioRecorder.record();\n  };\n\n  const stopRecording = async () => {\n    // The recording will be available on `audioRecorder.uri`.\n    await audioRecorder.stop();\n  };\n\n  useEffect(() => {\n    (async () => {\n      const status = await AudioModule.requestRecordingPermissionsAsync();\n      if (!status.granted) {\n        Alert.alert('Permission to access microphone was denied');\n      }\n    })();\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <Button\n        title={audioRecorder.isRecording ? 'Stop Recording' : 'Start Recording'}\n        onPress={audioRecorder.isRecording ? stopRecording : record}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    backgroundColor: '#ecf0f1',\n    padding: 10,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Linking PWA Manifest in Expo Router HTML File\nDESCRIPTION: This code snippet shows how to link the PWA manifest file in the root HTML file of an Expo Router app. It includes the necessary meta tags and a link tag for the manifest.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/migrate/from-expo-webpack.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ScrollViewStyleReset } from 'expo-router/html';\nimport type { PropsWithChildren } from 'react';\n\n// This file is web-only and used to configure the root HTML for every\n// web page during static rendering.\n// The contents of this function only run in Node.js environments and\n// do not have access to the DOM or browser APIs.\nexport default function Root({ children }: PropsWithChildren) {\n  return (\n    <html lang=\"en\">\n      <head>\n        <meta charSet=\"utf-8\" />\n        <meta httpEquiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\" />\n\n        {/* Link the PWA manifest file. */}\n        <link rel=\"manifest\" href=\"/manifest.json\" />\n\n        {/*\n          Disable body scrolling on web. This makes ScrollView components work closer to how they do on native.\n          However, body scrolling is often nice to have for mobile web. If you want to enable it, remove this line.\n        */}\n        <ScrollViewStyleReset />\n\n        {/* Add any additional <head> elements that you want globally available on web... */}\n      </head>\n      <body>{children}</body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing LocalAuthentication Module\nDESCRIPTION: JavaScript import statement for using the LocalAuthentication module in a React Native application.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/local-authentication.mdx#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport * as LocalAuthentication from 'expo-local-authentication';\n```\n\n----------------------------------------\n\nTITLE: Using SafeAreaView Component in React Native\nDESCRIPTION: Demonstrates how to use the SafeAreaView component to automatically apply safe area padding to a view.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/safe-area-context.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SafeAreaView } from 'react-native-safe-area-context';\n\nfunction SomeComponent() {\n  return (\n    <SafeAreaView>\n      <View />\n    </SafeAreaView>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Extent Action for Image Manipulation\nDESCRIPTION: Implemented a new 'extent' action for image manipulation operations.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-image-manipulator/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Implementation of extent action\n```\n\n----------------------------------------\n\nTITLE: Installing Expo ESLint Config via Yarn (Shell)\nDESCRIPTION: Installs the 'eslint-config-expo' package as a development dependency using Yarn, which is required to enable the Expo base ESLint configuration in your project. This step should be run in the terminal inside your project directory. No additional environment setup is necessary beyond Yarn being installed.\nSOURCE: https://github.com/expo/expo/blob/main/packages/eslint-config-expo/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn add --dev eslint-config-expo\n```\n\n----------------------------------------\n\nTITLE: Creating Singular Links with Link Component\nDESCRIPTION: Examples of using the Link component with dangerouslySingular prop to create links that enforce singular routes.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/preview/singular.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Link href=\"/unique-link\" dangerouslySingular />\n<Link href=\"/unique-link\" dangerouslySingular={(name) => name === 'unique-link' ? name : undefined} />\n```\n\n----------------------------------------\n\nTITLE: Package Renaming Convention\nDESCRIPTION: Pattern showing how packages are renamed during versioning process, prefixing with SDK version number\nSOURCE: https://github.com/expo/expo/blob/main/guides/Creating Versioned Expo SDK for Android.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n$package ➡️ abiXX_X_X.$package\n```\n\n----------------------------------------\n\nTITLE: Importing registerRootComponent API\nDESCRIPTION: TypeScript import statement for the registerRootComponent function from Expo.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/register-root-component.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { registerRootComponent } from 'expo';\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS WiFi Info Entitlements in app.json\nDESCRIPTION: This JSON configuration snippet shows how to add the required entitlement for accessing WiFi SSID information on iOS. This must be added to the app.json file under the ios.entitlements section.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/netinfo.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n  \"ios\": {\n    \"entitlements\": {\n      \"com.apple.developer.networking.wifi-info\": true\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Implementing a TypeScript config plugin\nDESCRIPTION: TypeScript code example for creating a config plugin in the plugin/src/index.ts file.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-module-scripts/README.md#2025-04-22_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { ConfigPlugin } from '@expo/config-plugins';\n\nconst withNewName: ConfigPlugin<{ name?: string }> = (config, { name = 'my-app' } = {}) => {\n  config.name = name;\n  return config;\n};\n\nexport default withNewName;\n```\n\n----------------------------------------\n\nTITLE: Development Code Removal with NODE_ENV\nDESCRIPTION: Shows how development-only code is removed from production bundles using NODE_ENV and __DEV__ checks.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/tree-shaking.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nif (process.env.NODE_ENV === 'development') {\n  console.log('Hello in development');\n}\n\nif (__DEV__) {\n  console.log('Another development-only conditional...');\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Module Interface Implementation\nDESCRIPTION: TypeScript interface for the native module that exposes the theme management functionality to JavaScript.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/native-module-tutorial.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport ExpoSettingsModule from './ExpoSettingsModule';\n\nexport function getTheme(): string {\n  return ExpoSettingsModule.getTheme();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AppDelegate Subscribers in Expo Module Config\nDESCRIPTION: This JSON configuration registers the AppLifecycleDelegate class as an AppDelegate subscriber in the Expo module configuration. It allows the module to listen to iOS system events without modifying the main AppDelegate file.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/appdelegate-subscribers.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"apple\": {\n    \"appDelegateSubscribers\": [\"AppLifecycleDelegate\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing expo-dev-client API in JavaScript\nDESCRIPTION: Shows the standard way to import the `expo-dev-client` module in a JavaScript or TypeScript file. This allows access to the development client's functionalities programmatically.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/dev-client.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as DevClient from 'expo-dev-client';\n```\n\n----------------------------------------\n\nTITLE: Importing Pedometer API from Expo Sensors (JavaScript)\nDESCRIPTION: This snippet shows how to import the Pedometer module from the expo-sensors package in a JavaScript or React Native project. No additional logic is present beyond the import. It sets up the Pedometer object for use in subsequent code and requires expo-sensors to be installed as a dependency. There are no inputs or outputs, constraints, or parameters in this snippet; it's intended as an example of how to begin using the Pedometer API in a file.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/pedometer.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { Pedometer } from 'expo-sensors';\n```\n\n----------------------------------------\n\nTITLE: React Component Import Example\nDESCRIPTION: JSX import statements for custom UI components used in the documentation\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/development-builds/introduction.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ContentSpotlight } from '~/ui/components/ContentSpotlight';\nimport { Step } from '~/ui/components/Step';\nimport { VideoBoxLink } from '~/ui/components/VideoBoxLink';\n```\n\n----------------------------------------\n\nTITLE: Using Battery Level Hook in Expo Battery (JSX)\nDESCRIPTION: This snippet demonstrates how to use the useBatteryLevel hook from expo-battery in a React Native component to display the device's current battery level. It requires the expo-battery package as a dependency, along with React Native components such as StyleSheet, Text, and View. The App function retrieves the battery level and renders it on the screen. The input is the device's native battery status accessed via the hook, and the output is a user interface displaying the battery percentage. This code should be run in an Expo or compatible React Native environment where expo-battery and its dependencies are installed.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/battery.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useBatteryLevel } from 'expo-battery';\nimport { StyleSheet, Text, View } from 'react-native';\n\nexport default function App() {\n  const batteryLevel = useBatteryLevel();\n\n  return (\n    <View style={styles.container}>\n      <Text>Current Battery Level: {batteryLevel}</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: 15,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Stack Navigator Layout in Expo Router\nDESCRIPTION: Basic setup of a Stack navigator layout component for Expo Router\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/reference/url-parameters.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Stack } from 'expo-router';\n\nexport default function Layout() {\n  return <Stack />;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Gyroscope from expo-sensors\nDESCRIPTION: Basic import statement for using the Gyroscope sensor from the expo-sensors package.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/gyroscope.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { Gyroscope } from 'expo-sensors';\n```\n\n----------------------------------------\n\nTITLE: Importing Magnetometer and MagnetometerUncalibrated from expo-sensors\nDESCRIPTION: Simple import statement for accessing both the calibrated and uncalibrated magnetometer sensors from the expo-sensors package.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/magnetometer.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { Magnetometer, MagnetometerUncalibrated } from 'expo-sensors';\n```\n\n----------------------------------------\n\nTITLE: Configuring Deep Linking in iOS AppDelegate.m\nDESCRIPTION: Objective-C code to add to AppDelegate.m for iOS deep linking support. Implements two application:openURL methods for handling deep links, one for iOS 9.x or newer and one for iOS 8.x or older.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-auth-session/README.md#2025-04-22_snippet_2\n\nLANGUAGE: obj-c\nCODE:\n```\n#import <React/RCTLinkingManager.h>\n\n// iOS 9.x or newer\n- (BOOL)application:(UIApplication *)application\n            openURL:(NSURL *)url\n            options:(NSDictionary<UIApplicationOpenURLOptionsKey,id> *)options\n{\n    return [RCTLinkingManager application:application openURL:url options:options];\n}\n\n// iOS 8.x or older\n- (BOOL)application:(UIApplication *)application\n            openURL:(NSURL *)url\n  sourceApplication:(NSString *)sourceApplication\n         annotation:(id)annotation\n{\n    return [RCTLinkingManager application:application openURL:url\n                    sourceApplication:sourceApplication annotation:annotation];\n}\n```\n\n----------------------------------------\n\nTITLE: Importing MailComposer in JavaScript\nDESCRIPTION: This snippet demonstrates how to import the MailComposer module from the expo-mail-composer package to access email composition functionality.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/mail-composer.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as MailComposer from 'expo-mail-composer';\n```\n\n----------------------------------------\n\nTITLE: Custom Entry File Configuration for iOS Development\nDESCRIPTION: Modifications to AppDelegate.mm for supporting custom entry files in development mode.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/config/metro.mdx#2025-04-22_snippet_17\n\nLANGUAGE: diff\nCODE:\n```\n- (NSURL *)sourceURLForBridge:(RCTBridge *)bridge\n{\n#if DEBUG\n-  return [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@\"index\"];\n+  return [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@\".expo/.virtual-metro-entry\"];\n#else\n  return [[NSBundle mainBundle] URLForResource:@\"main\" withExtension:@\"jsbundle\"];\n#endif\n}\n```\n\n----------------------------------------\n\nTITLE: Using ContentSpotlight Component in Markdown\nDESCRIPTION: This code snippet demonstrates the use of a ContentSpotlight component in Markdown. It likely renders a video or interactive content showing how Expo Orbit launches an update from the Expo dashboard to an iOS Simulator.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/review/with-orbit.mdx#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<ContentSpotlight\n  controls\n  file=\"review/updates-with-orbit.mp4\"\n  caption=\"Expo Orbit launching an update directly from Expo dashboard to an iOS Simulator.\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Gitignore Configuration for Credentials\nDESCRIPTION: Gitignore entries to prevent accidentally committing sensitive credential files\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/app-signing/local-credentials.mdx#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nandroid/keystores/release.keystore\n```\n\nLANGUAGE: sh\nCODE:\n```\nios/certs/*\n```\n\n----------------------------------------\n\nTITLE: Using captureScreen API for Android and iOS\nDESCRIPTION: Example of using the captureScreen function to take a screenshot of the current screen. This API is only available on Android and iOS and captures the currently visible portion of the screen as a hardware screenshot.\nSOURCE: https://github.com/expo/expo/blob/main/apps/expo-go/modules/react-native-view-shot/README.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { captureScreen } from \"react-native-view-shot\";\n\ncaptureScreen({\n  format: \"jpg\",\n  quality: 0.8,\n}).then(\n  (uri) => console.log(\"Image saved to\", uri),\n  (error) => console.error(\"Oops, snapshot failed\", error)\n);\n```\n\n----------------------------------------\n\nTITLE: Using Dev Tools Plugin in Expo App with React Native\nDESCRIPTION: This snippet demonstrates how to import and use a dev tools plugin hook in an Expo app's root component. It includes a button that triggers the sendPing function from the plugin.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/debugging/create-devtools-plugins.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useMyDevToolsPlugin } from 'my-devtools-plugin';\nimport { Button } from 'react-native';\n\nexport default function App() {\n  const { sendPing } = useMyDevToolsPlugin();\n\n  return (\n    <View style={styles.container}>\n      <Button\n        title=\"Ping\"\n        onPress={() => {\n          sendPing();\n        }}\n      />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Scheme in app.json for Standalone Apps\nDESCRIPTION: JSON configuration to set the URI scheme in the app.json file for standalone Expo apps.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/auth-session.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"scheme\": \"mycoolredirect\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Manual EAS Android Submission Command\nDESCRIPTION: Command to manually submit an Android app build to the Google Play Store using EAS submit.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/eas/android-production-build.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ eas submit --platform android\n```\n\n----------------------------------------\n\nTITLE: Running EAS Metadata Push Command\nDESCRIPTION: Command to push the store.config.json configuration to the app stores\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/metadata/getting-started.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ eas metadata:push\n```\n\n----------------------------------------\n\nTITLE: Specifying JSX Import Source with babel-preset-expo - JavaScript\nDESCRIPTION: This snippet shows how to set a custom import source for JSX transformation in babel-preset-expo using the jsxImportSource option when jsxRuntime is set to 'automatic'. This is useful when using JSX runtimes compatible with React or custom implementations. Input: Babel config array. Output: JSX transformed with specified import source.\nSOURCE: https://github.com/expo/expo/blob/main/packages/babel-preset-expo/README.md#2025-04-22_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n[\n  'babel-preset-expo',\n  {\n    jsxRuntime: 'automatic',\n    jsxImportSource: 'react',\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Importing Expo Setup Components in JSX\nDESCRIPTION: React component imports for the Expo environment setup page, including forms for development environment instructions, development mode selection, and platform/device selection.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/get-started/set-up-your-environment.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { DevelopmentEnvironmentInstructions } from '~/scenes/get-started/set-up-your-environment/DevelopmentEnvironmentInstructions';\nimport { DevelopmentModeForm } from '~/scenes/get-started/set-up-your-environment/DevelopmentModeForm';\nimport { PlatformAndDeviceForm } from '~/scenes/get-started/set-up-your-environment/PlatformAndDeviceForm';\n```\n\n----------------------------------------\n\nTITLE: Initializing New Expo App with create-expo-app\nDESCRIPTION: Use npx create-expo-app to create a new Expo project named StickerSmash and navigate to the project directory.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/create-your-first-app.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Create a project named StickerSmash\n$ npx create-expo-app@latest StickerSmash\n\n# Navigate to the project directory\n$ cd StickerSmash\n```\n\n----------------------------------------\n\nTITLE: Importing ImagePicker Module\nDESCRIPTION: Simple example showing how to import the ImagePicker module for use in a React Native application.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/imagepicker.mdx#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport * as ImagePicker from 'expo-image-picker';\n```\n\n----------------------------------------\n\nTITLE: Importing Brightness Module in JavaScript\nDESCRIPTION: How to import the Brightness module from expo-brightness package.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/brightness.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport * as Brightness from 'expo-brightness';\n```\n\n----------------------------------------\n\nTITLE: Importing Battery Module from Expo Battery (JavaScript)\nDESCRIPTION: This snippet shows how to import all exports from the expo-battery module as the Battery object using JavaScript import syntax. This is a necessary step to access expo-battery's API functions for battery information and event management. The only dependency required is the expo-battery package, and the expected environment is an Expo or React Native project where that library is installed. This import establishes access to further functionality such as querying device battery status or subscribing to events.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/battery.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as Battery from 'expo-battery';\n```\n\n----------------------------------------\n\nTITLE: Google Authentication Default Scopes\nDESCRIPTION: The minimum scopes required for Google authentication when using the provider with services like Firebase and Auth0.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/auth-session.mdx#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n['openid', 'https://www.googleapis.com/auth/userinfo.profile', 'https://www.googleapis.com/auth/userinfo.email']\n```\n\n----------------------------------------\n\nTITLE: Loading Remote Fonts Example\nDESCRIPTION: Complete example of loading and using a remote font in an Expo application with error handling and styling.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/user-interface/fonts.mdx#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useFonts } from 'expo-font';\nimport { Text, View, StyleSheet } from 'react-native';\n\nexport default function App() {\n  const [loaded, error] = useFonts({\n    'Inter-SemiBoldItalic': 'https://rsms.me/inter/font-files/Inter-SemiBoldItalic.otf?v=3.12',\n  });\n\n  if (!loaded || !error) {\n    return null;\n  }\n\n  return (\n    <View style={styles.container}>\n      <Text style={{ fontFamily: 'Inter-SemiBoldItalic', fontSize: 30 }}>Inter SemiBoldItalic</Text>\n      <Text style={{ fontSize: 30 }}>Platform Default</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting iOS Motion Usage Description\nDESCRIPTION: This XML snippet is used to set the NSMotionUsageDescription in the Info.plist file for iOS projects. This configuration is mandatory to request permission from users to access device motion data. It is specific to iOS native projects where Expo's Continuous Native Generation isn't used.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/devicemotion.mdx#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<key>NSMotionUsageDescription</key>\n<string>Allow $(PRODUCT_NAME) to access your device motion</string>\n```\n\n----------------------------------------\n\nTITLE: Reading and Writing JSON Files with @expo/json-file in TypeScript\nDESCRIPTION: This TypeScript snippet shows how to use the `@expo/json-file` library. It imports `JsonFile` and `JSONObject`, creates a `JsonFile` instance linked to a specific `filePath` (which needs to be defined elsewhere), and then demonstrates asynchronously reading the file's content with `readAsync()` and writing a new JSON object with `writeAsync()`. Requires the `@expo/json-file` library to be installed.\nSOURCE: https://github.com/expo/expo/blob/main/packages/@expo/json-file/README.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport JsonFile, { JSONObject } from '@expo/json-file';\n\n// Create a file instance\nconst jsonFile = new JsonFile<JSONObject>(filePath);\n\n// Interact with the file\nawait jsonFile.readAsync();\nawait jsonFile.writeAsync({ some: 'data' });\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Command-line Proxy\nDESCRIPTION: Exports environment variables to configure proxy settings for various command-line applications.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/troubleshooting/proxies.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport HTTP_PROXY=\"http://localhost:8888\"\nexport http_proxy=\"http://localhost:8888\"\nexport ALL_PROXY=\"http://localhost:8888\"\nexport all_proxy=\"http://localhost:8888\"\nexport HTTPS_PROXY=\"http://localhost:8888\"\nexport https_proxy=\"http://localhost:8888\"\n```\n\n----------------------------------------\n\nTITLE: WebBrowser Configuration Options Example - iOS\nDESCRIPTION: Example of WebBrowser configuration flags available on iOS including readerMode and dismissButtonStyle for customizing the browser experience.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-web-browser/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  readerMode: true, // iOS reader mode flag\n  dismissButtonStyle: 'done', // iOS dismiss button style\n  locked: true // Browser locked state flag\n}\n```\n\n----------------------------------------\n\nTITLE: VS Code Extension Note\nDESCRIPTION: Markdown note about installing VS Code Expo Tools extension for enhanced store.config.json file support.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/metadata/faq.mdx#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n> Make sure to install the [VS Code Expo Tools extension](https://github.com/expo/vscode-expo#readme) to get auto-complete, suggestions, and warnings for **store.config.json** files.\n```\n\n----------------------------------------\n\nTITLE: Importing BarCodeScanner Module\nDESCRIPTION: Example of importing the BarCodeScanner component from the expo-barcode-scanner package for use in a React Native application.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/bar-code-scanner.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { BarCodeScanner } from 'expo-barcode-scanner';\n```\n\n----------------------------------------\n\nTITLE: Configuring React Compiler in babel-preset-expo - JavaScript\nDESCRIPTION: This snippet shows how to configure the babel-preset-expo preset to enable and customize the react-compiler plugin by specifying a sources function that determines which files are processed. The sources function takes a filename argument and returns true for matching files. This configuration can be used when enabling React Compiler support (requires synchronizing with app.json experiments.reactCompiler). Input: Babel configuration array. Output: Modified Babel preset behavior with specified file inclusion.\nSOURCE: https://github.com/expo/expo/blob/main/packages/babel-preset-expo/README.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n[\n  'babel-preset-expo',\n  {\n    'react-compiler': {\n      sources: (filename) => {\n        // Match file names to include in the React Compiler.\n        return filename.includes('src/path/to/dir');\n      },\n    },\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Globally Defining Crypto Polyfill - JavaScript\nDESCRIPTION: Shows how to globally define the crypto object by importing and invoking the polyfillWebCrypto function. This is necessary for code or third-party libraries that expect the global crypto object to be defined in the runtime environment. Once invoked, the polyfill will only assign to the global scope if crypto is not already present.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-standard-web-crypto/README.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { polyfillWebCrypto } from 'expo-standard-web-crypto';\n\npolyfillWebCrypto();\n// crypto is now globally defined\n```\n\n----------------------------------------\n\nTITLE: Moving and Copying Files with expo-file-system/next in TypeScript\nDESCRIPTION: Demonstrates how to create a text file and then move it between different locations in the file system. Shows how file URIs are updated after moving operations.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/filesystem-next.mdx#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { File, Paths } from 'expo-file-system/next';\n\ntry {\n  const file = new File(Paths.document, 'example.txt');\n  file.create();\n  console.log(file.uri); // '${documentDirectory}/example.txt'\n  file.move(Paths.cache);\n  console.log(file.uri); // '${cacheDirectory}/example.txt'\n  file.move(new Directory(Paths.cache, 'newFolder'));\n  console.log(file.uri); // '${cacheDirectory}/newFolder/example.txt'\n} catch (error) {\n  console.error(error);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Plugin in app.json\nDESCRIPTION: Example of how to reference a local plugin in app.json configuration file to properly manage changes and fingerprinting.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/fingerprint.mdx#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    /* @hide ... */ /* @end */\n    \"plugins\": \"./plugins/withMyPlugin\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Proxy Configuration for npm\nDESCRIPTION: Configures npm to use a local proxy (localhost:8888) for both HTTP and HTTPS connections.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/troubleshooting/proxies.mdx#2025-04-22_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nhttp_proxy=http://localhost:8888\nhttps_proxy=http://localhost:8888\n```\n\n----------------------------------------\n\nTITLE: Configuring Complex Dynamic Route Redirects with Parameter Mapping\nDESCRIPTION: Demonstrates a more complex dynamic route redirect that maps parameters from the source to the destination path, with unmatched parameters passed as query parameters.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/advanced/redirects.mdx#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    [\n      \"expo-router\",\n      {\n        \"redirects\": [\n          {\n            \"source\": \"/redirect/[fruit]/[vegetable]/[meat]\",\n            \"destination\": \"/target/[vegetable]/[fruit]\"\n          }\n        ]\n      }\n    ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering BoxLink Component for Billing Management Section in React\nDESCRIPTION: This code snippet shows the implementation of BoxLink components for the billing management section. These links direct users to resources about managing billing information, payments, invoices, and receipts for their Expo account.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/billing/overview.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<BoxLink\n  title=\"Manage billing\"\n  description=\"Learn how to manage billing information of your Expo account.\"\n  href=\"/billing/manage/#manage-billing-information\"\n  Icon={CreditCard02Icon}\n/>\n\n<BoxLink\n  title=\"Payments, invoices, and receipts\"\n  description=\"Learn how to view your account's payment history, download invoices and receipts, request a refund for a charge, and understand charges on your invoice.\"\n  href=\"/billing/invoices-and-receipts/\"\n  Icon={CreditCard02Icon}\n/>\n```\n\n----------------------------------------\n\nTITLE: Android Production Entry File Configuration\nDESCRIPTION: Configuration for Android build.gradle to support custom entry files in production builds using Metro module resolution.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/config/metro.mdx#2025-04-22_snippet_19\n\nLANGUAGE: diff\nCODE:\n```\n+ def projectRoot = rootDir.getAbsoluteFile().getParentFile().getAbsolutePath()\n\nreact {\n+    entryFile = file([\"node\", \"-e\", \"require('expo/scripts/resolveAppEntry')\", projectRoot, \"android\", \"absolute\"].execute(null, rootDir).text.trim())\n}\n```\n\n----------------------------------------\n\nTITLE: Using SafeAreaInsetsContext Consumer\nDESCRIPTION: Example of using SafeAreaInsetsContext.Consumer to access inset data.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/safe-area-context.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SafeAreaInsetsContext } from 'react-native-safe-area-context';\n\nfunction Component() {\n  return (\n    <SafeAreaInsetsContext.Consumer>\n      {insets => <View style={{ paddingTop: insets.top }} />}\n    </SafeAreaInsetsContext.Consumer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Client Component Implementation\nDESCRIPTION: Example of a client-side component using React Suspense for loading state\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/server-components.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n/// <reference types=\"react/canary\" />\n\nimport React from 'react';\nimport { ActivityIndicator } from 'react-native';\nimport renderInfo from '../actions/render-info';\n\nexport default function Index() {\n  return (\n    <React.Suspense\n      fallback={\n        // The view that will render while the Server Function is awaiting data.\n        <ActivityIndicator />\n      }>\n      {renderInfo({ name: 'World' })}\n    </React.Suspense>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Static Environment Variable Access in JavaScript\nDESCRIPTION: An example of correct code usage, where the environment variable is accessed statically, allowing Expo Metro to inline environment variables correctly during the build.\nSOURCE: https://github.com/expo/expo/blob/main/packages/eslint-plugin-expo/docs/rules/no-dynamic-env-var.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n\nconst myVar = process.env.MY_VAR;\n\n```\n\n----------------------------------------\n\nTITLE: Creating Initial Expo App\nDESCRIPTION: Commands for creating and starting a new Expo application\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/development-builds/introduction.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-expo-app\nnpx expo start\n```\n\n----------------------------------------\n\nTITLE: Importing LivePhotoView from expo-live-photo\nDESCRIPTION: Example showing how to import the LivePhotoView component from the expo-live-photo package. This is the basic import needed to use the Live Photo functionality in your React Native application.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/live-photo.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { LivePhotoView } from 'expo-live-photo';\n```\n\n----------------------------------------\n\nTITLE: Updated TypeDoc Property Definition in TypeScript\nDESCRIPTION: Corrected TypeDoc documentation for the expoConfig property with fixed terminology.\nSOURCE: https://github.com/expo/expo/blob/main/docs/README.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * The standard app config object defined in `app.json` and `app.config.js` files. For both\n * classic and modern manifests, whether they are embedded or remote.\n */\nexpoConfig: ExpoConfig | null;\n```\n\n----------------------------------------\n\nTITLE: Implementing Header Component in Expo\nDESCRIPTION: Demonstrates usage of the Header component which renders as a semantic header element on web and View on native platforms with appropriate ARIA roles.\nSOURCE: https://github.com/expo/expo/blob/main/packages/html-elements/README.md#2025-04-22_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Header } from '@expo/html-elements';\n\nexport default () => <Header />;\n```\n\n----------------------------------------\n\nTITLE: Watching Expotools Code Changes\nDESCRIPTION: Command to continuously watch and rebuild Expotools code on changes during development.\nSOURCE: https://github.com/expo/expo/blob/main/tools/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nyarn watch\n```\n\n----------------------------------------\n\nTITLE: Android Production Release Command\nDESCRIPTION: Fastlane command to release the Android app to production.\nSOURCE: https://github.com/expo/expo/blob/main/fastlane/README.md#2025-04-22_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\n[bundle exec] fastlane android prod_release\n```\n\n----------------------------------------\n\nTITLE: Importing the ScreenOrientation API from expo-screen-orientation - JavaScript\nDESCRIPTION: This snippet demonstrates how to import all exported members as the ScreenOrientation object from the expo-screen-orientation package in JavaScript/TypeScript. This import is necessary to access the module's API for querying or changing the device's screen orientation at runtime. It requires Node.js, Expo CLI, and the expo-screen-orientation package installed as dependencies. The input is a JavaScript/TypeScript module file; the output is an imported API object ready for use in a React Native Expo project.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/screen-orientation.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as ScreenOrientation from 'expo-screen-orientation';\\n\n```\n\n----------------------------------------\n\nTITLE: Defining Styles for CSS Modules - CSS\nDESCRIPTION: This CSS file defines a text class with the color set to red, designed for use as a CSS module (e.g., App.module.css). Each class defined here will be exported as a scoped style to the JavaScript side, allowing modular, component-scoped styling in Expo projects targeting web.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/config/metro.mdx#2025-04-22_snippet_8\n\nLANGUAGE: css\nCODE:\n```\n.text {\\n  color: red;\\n}\n```\n\n----------------------------------------\n\nTITLE: Updated Branch Structure After Republish\nDESCRIPTION: Example showing the branch structure after republishing a previous update.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/debug.mdx#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nbranch: \"production\"\nupdates: [\n  update 3 (id: def3) \"updates color\"  // re-publish of update 1 (id: abc1)\n  update 2 (id: xyz2) \"fixes typo\"     // bad update\n  update 1 (id: abc1) \"updates color\"  // good update\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Build Name in YAML for EAS Build\nDESCRIPTION: Demonstrates how to set the 'name' property for a custom build configuration in EAS Build. The name is used to identify the build in logs and the dashboard.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: Run tests\n  steps:\n    - eas/checkout\n    - run:\n        name: Install dependencies\n        command: npm install\n```\n\n----------------------------------------\n\nTITLE: Package Reference - Skia Import Path\nDESCRIPTION: The NPM package identifier for importing Skia graphics library in React Native projects.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/skia.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@shopify/react-native-skia\n```\n\n----------------------------------------\n\nTITLE: Configuring Global npm Registry for iOS Builds\nDESCRIPTION: This configuration sets the global npm registry for iOS builds. It ensures that npm uses a specific internal registry for package resolution during the build process.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/build-reference/infrastructure.mdx#_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\nregistry=http://10.94.183.70:4873\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry for Version 0.12.0\nDESCRIPTION: Changelog entry documenting new features for version 0.12.0, including React Native version support updates.\nSOURCE: https://github.com/expo/expo/blob/main/packages/install-expo-modules/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.12.0 — 2025-04-21\n\n### 🎉 New features\n\n- Added react-native 0.77 support. ([#36204](https://github.com/expo/expo/pull/36204) by [@kudo](https://github.com/kudo))\n- Added react-native 0.78 support. ([#36205](https://github.com/expo/expo/pull/36205) by [@kudo](https://github.com/kudo))\n- Added react-native 0.79 support. ([#36206](https://github.com/expo/expo/pull/36206) by [@kudo](https://github.com/kudo))\n```\n\n----------------------------------------\n\nTITLE: Using Themed Components with Variants in TSX\nDESCRIPTION: Demonstrates how to use a previously defined themed component with specific variant properties. Shows the implementation in a simple App component.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-dev-client-components/README.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nfunction App() {\n  return (\n    <Heading size=\"medium\" color=\"success\">\n      Hi\n    </Heading>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Github Context Definition JSON\nDESCRIPTION: Defines the structure of the 'github' context object, which provides information about the workflow run, such as the event name, SHA, reference, reference name, and reference type. These properties are useful for customizing workflow behavior based on the context of the run. If a workflow is run via eas workflow:run, properties will be empty.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/workflows/syntax.mdx#_snippet_18\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"event_name\": \"pull_request\" | \"push\" | \"schedule\" | \"workflow_dispatch\",\n  \"sha\": string,\n  \"ref\": string, // e.g. refs/heads/main\n  \"ref_name\": string, // e.g. main\n  \"ref_type\": \"branch\" | \"tag\" | \"other\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Legacy Import Support\nDESCRIPTION: TypeScript implementation for backwards compatibility with deprecated import syntax, including warning messages.\nSOURCE: https://github.com/expo/expo/blob/main/guides/Migrating Universal Modules to TypeScript.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as FileSystem from './FileSystem';\nexport * from './FileSystem';\n\nlet wasImportWarningShown = false;\n// @ts-ignore: Temporarily define an export named \"FileSystem\" for legacy compatibility\nObject.defineProperty(exports, 'FileSystem', {\n  get() {\n    if (!wasImportWarningShown) {\n      console.warn(\n        `The syntax \"import { FileSystem } from 'expo-file-system'\" is deprecated. Use \"import * as FileSystem from 'expo-file-system'\" or import named exports instead. Support for the old syntax will be removed in SDK 34.`\n      );\n      wasImportWarningShown = true;\n    }\n    return FileSystem;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Importing NavigationBar from Expo\nDESCRIPTION: Shows how to import the NavigationBar module from the expo-navigation-bar package for use in Android applications. This module enables interaction with the native Android navigation bar.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/navigation-bar.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as NavigationBar from 'expo-navigation-bar';\n```\n\n----------------------------------------\n\nTITLE: Advanced React Compiler Babel Configuration\nDESCRIPTION: Extended Babel configuration with additional React Compiler settings and platform-specific options.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/react-compiler.mdx#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = function (api) {\n  api.cache(true);\n\n  return {\n    presets: [\n      [\n        'babel-preset-expo',\n        {\n          'react-compiler': {\n            // Passed directly to the React Compiler Babel plugin.\n            compilationMode: 'strict',\n            panicThreshold: 'all_errors',\n          },\n          web: {\n            'react-compiler': {\n              // Web-only settings...\n            },\n          },\n        },\n      ],\n    ],\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing StatusBar Hiding in Android\nDESCRIPTION: Add the android:windowFullscreen property to your AppTheme style to completely hide the StatusBar during splash screen display. This modification should be made to the res/values/styles.xml file.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-splash-screen/README.md#2025-04-22_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\n  <!-- Main/SplashScreen activity theme. -->\n  <style name=\"AppTheme\" parent=\"Theme.AppCompat.Light.NoActionBar\">\n    <item name=\"android:windowBackground\">@drawable/splashscreen</item>\n+   <item name=\"android:windowFullscreen\">true</item>\n    <!-- Other style properties -->\n  </style>\n```\n\n----------------------------------------\n\nTITLE: Installing expo-location in bare React Native projects\nDESCRIPTION: Command to install the expo-location package using npx expo install.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-location/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-location\n```\n\n----------------------------------------\n\nTITLE: Initializing Error Handling with expo-dev-client in Expo App\nDESCRIPTION: Imports expo-dev-client at the top of App.js or app/_layout.tsx to add additional error context beyond React Native's default error handling. This helps detect mismatches between JavaScript and native code, such as missing native modules.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/development-builds/use-development-builds.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport 'expo-dev-client';\n```\n\n----------------------------------------\n\nTITLE: Defining Global CSS Styles\nDESCRIPTION: This snippet demonstrates how to define global CSS styles in a separate CSS file for use in Expo projects.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/config/metro.mdx#2025-04-22_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.container {\n  background-color: red;\n}\n```\n\n----------------------------------------\n\nTITLE: Encoding and Decoding Strings with TextEncoder/TextDecoder in Expo (JavaScript)\nDESCRIPTION: This snippet demonstrates the basic usage of the globally available `TextEncoder` and `TextDecoder` APIs in Expo. It first encodes the string 'hello' into a Uint8Array using `TextEncoder().encode()` and then decodes this array back into the original string using `TextDecoder().decode()`. No imports are needed as these APIs are built into the Expo environment. Note that on native platforms, `TextDecoder` only supports UTF-8.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/encoding.mdx#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n// [104, 101, 108, 108, 111]\nconst hello = new TextEncoder().encode('hello');\n\n// \"hello\"\nconst text = new TextDecoder().decode(hello);\n```\n\n----------------------------------------\n\nTITLE: Importing NavigationBar Module in Expo\nDESCRIPTION: Example of how to import the NavigationBar module from expo-navigation-bar package to access functionality for modifying the native Android navigation bar.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/navigation-bar.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as NavigationBar from 'expo-navigation-bar';\n```\n\n----------------------------------------\n\nTITLE: Getting FCM Authentication Token (TypeScript)\nDESCRIPTION: This function uses the Google Auth Library to obtain a short-lived OAuth 2.0 access token for FCM authentication. It requires the contents of your FCM private key file.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/push-notifications/sending-notifications-custom.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { JWT } from 'google-auth-library';\n\nfunction getAccessTokenAsync(\n  key: string // Contents of your FCM private key file\n) {\n  return new Promise(function (resolve, reject) {\n    const jwtClient = new JWT(\n      key.client_email,\n      null,\n      key.private_key,\n      ['https://www.googleapis.com/auth/cloud-platform'],\n      null\n    );\n    jwtClient.authorize(function (err, tokens) {\n      if (err) {\n        reject(err);\n        return;\n      }\n      resolve(tokens.access_token);\n    });\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling CSS Support in Metro for Expo SDK 49\nDESCRIPTION: This snippet shows how to enable CSS support in the Metro config for Expo SDK 49 by setting the isCSSEnabled option to true.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/config/metro.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('expo/metro-config').MetroConfig} */\nconst config = getDefaultConfig(__dirname, {\n  isCSSEnabled: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Running Expo E2E Tests on Android (Bash)\nDESCRIPTION: This pair of bash commands builds and runs Detox E2E tests for Android. Commands require an Android emulator (named 'pixel_4' by default), Android SDK, Detox, and Yarn. Must be run from the project directory and possibly preceded by 'adb reverse' to forward the test server port. Output includes Android build artifacts and test results.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-updates/e2e/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn detox:android:debug:build\\nyarn detox:android:debug:test\n```\n\n----------------------------------------\n\nTITLE: Importing Expo Plugin Sections in React Native (JavaScript)\nDESCRIPTION: Imports two components, APIInstallSection and PlatformsSection, used to render installation instructions and supported platforms within the Expo documentation. These imports are necessary for generating UI sections that guide users through setup and highlight cross-platform compatibility. Both components are internal to the documentation system and assume a working React and Expo documentation environment.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/flash-list.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { APIInstallSection } from '~/components/plugins/InstallSection';\nimport PlatformsSection from '~/components/plugins/PlatformsSection';\n```\n\n----------------------------------------\n\nTITLE: Importing AppleAuthentication Module\nDESCRIPTION: Basic import statement for the expo-apple-authentication module to use in your React Native application.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/apple-authentication.mdx#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport * as AppleAuthentication from 'expo-apple-authentication';\n```\n\n----------------------------------------\n\nTITLE: Installing Expo Module Scripts Dependencies\nDESCRIPTION: Configuration for adding expo-module-scripts as a development dependency in package.json\nSOURCE: https://github.com/expo/expo/blob/main/guides/Expo Module Infrastructure.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"devDependencies\": {\n    \"expo-module-scripts\": \"^<latest version>\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @expo/dom-webview Package Using Expo CLI\nDESCRIPTION: Installs the @expo/dom-webview package in a React Native project using the Expo CLI. This command should be executed in the project directory to add the module to npm dependencies. Pre-requisite includes having a React Native or Expo project set up.\nSOURCE: https://github.com/expo/expo/blob/main/packages/@expo/dom-webview/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install @expo/dom-webview\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Location Permissions in Info.plist\nDESCRIPTION: XML configuration for iOS Info.plist file to add the required location permission usage descriptions when not using Continuous Native Generation.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/location.mdx#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<key>NSLocationAlwaysAndWhenInUseUsageDescription</key>\n<string>Allow $(PRODUCT_NAME) to use your location</string>\n<key>NSLocationAlwaysUsageDescription</key>\n<string>Allow $(PRODUCT_NAME) to use your location</string>\n<key>NSLocationWhenInUseUsageDescription</key>\n<string>Allow $(PRODUCT_NAME) to use your location</string>\n```\n\n----------------------------------------\n\nTITLE: Basic GLView Implementation in React Native\nDESCRIPTION: Example showing basic setup of GLView component with viewport setup, shader creation, and simple point rendering using WebGL.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/gl-view.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { View } from 'react-native';\nimport { GLView } from 'expo-gl';\n\nexport default function App() {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <GLView style={{ width: 300, height: 300 }} onContextCreate={onContextCreate} />\n    </View>\n  );\n}\n\nfunction onContextCreate(gl) {\n  gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n  gl.clearColor(0, 1, 1, 1);\n\n  // Create vertex shader (shape & position)\n  const vert = gl.createShader(gl.VERTEX_SHADER);\n  gl.shaderSource(\n    vert,\n    `\n    void main(void) {\n      gl_Position = vec4(0.0, 0.0, 0.0, 1.0);\n      gl_PointSize = 150.0;\n    }\n  `\n  );\n  gl.compileShader(vert);\n\n  // Create fragment shader (color)\n  const frag = gl.createShader(gl.FRAGMENT_SHADER);\n  gl.shaderSource(\n    frag,\n    `\n    void main(void) {\n      gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n    }\n  `\n  );\n  gl.compileShader(frag);\n\n  // Link together into a program\n  const program = gl.createProgram();\n  gl.attachShader(program, vert);\n  gl.attachShader(program, frag);\n  gl.linkProgram(program);\n  gl.useProgram(program);\n\n  gl.clear(gl.COLOR_BUFFER_BIT);\n  gl.drawArrays(gl.POINTS, 0, 1);\n\n  gl.flush();\n  gl.endFrameEXP();\n}\n```\n\n----------------------------------------\n\nTITLE: Using Tailwind with React DOM Elements\nDESCRIPTION: Example of using Tailwind CSS classes with standard React DOM elements.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/config/metro.mdx#2025-04-22_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function Page() {\n  return (\n    <div className=\"bg-slate-100 rounded-xl\">\n      <p className=\"text-lg font-medium\">Welcome to Tailwind</p>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Expo Crypto Module in JavaScript\nDESCRIPTION: Shows how to import all exported members from the 'expo-crypto' package. This is a prerequisite for accessing any cryptographic functions offered by the package, such as hashing or digest calculations. No input or output is shown; this snippet is for initialization and should be placed at the top of JS/TS files where crypto operations are needed. It works in Expo, React Native, or compatible JavaScript environments.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/crypto.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as Crypto from 'expo-crypto';\n```\n\n----------------------------------------\n\nTITLE: Configuring BuildProperties in app.json\nDESCRIPTION: Example configuration of expo-build-properties plugin in app.json that sets Android SDK versions to 34 and iOS deployment target to 13.4.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/build-properties.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-build-properties\",\n        {\n          \"android\": {\n            \"compileSdkVersion\": 34,\n            \"targetSdkVersion\": 34,\n            \"buildToolsVersion\": \"34.0.0\"\n          },\n          \"ios\": {\n            \"deploymentTarget\": \"13.4\"\n          }\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SQLite Context Hook in React\nDESCRIPTION: Demonstrates how to use the SQLite context hook in a React application with database initialization and component integration.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/sqlite-next.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SQLiteProvider, useSQLiteContext, type SQLiteDatabase } from 'expo-sqlite/next';\nimport { useEffect, useState } from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <SQLiteProvider databaseName=\"test.db\" onInit={migrateDbIfNeeded}>\n        <Header />\n        <Content />\n      </SQLiteProvider>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Error Codes Table for Expo Updates Library in Markdown\nDESCRIPTION: This markdown table defines various error codes for the Expo Updates library. It includes codes for scenarios such as disabled updates, reload failures, update check errors, fetch errors, log reading errors, and development client limitations.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/updates.mdx#2025-04-22_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n| Code                              | Description                                                                                                                                                                                                                                                        |\n| --------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| `ERR_UPDATES_DISABLED`            | A method call was attempted when the Updates library was disabled, or the application was running in development mode                                                                                                                                              |\n| `ERR_UPDATES_RELOAD`              | An error occurred when trying to reload the application and it could not be reloaded. For bare React Native apps, double-check the setup steps for this library to ensure it has been installed correctly and the proper native initialization methods are called. |\n| `ERR_UPDATES_CHECK`               | An unexpected error occurred when trying to check for new updates. Check the error message for more information.                                                                                                                                                   |\n| `ERR_UPDATES_FETCH`               | An unexpected error occurred when trying to fetch a new update. Check the error message for more information.                                                                                                                                                      |\n| `ERR_UPDATES_READ_LOGS`           | An unexpected error occurred when trying to read log entries. Check the error message for more information.                                                                                                                                                        |\n| `ERR_NOT_AVAILABLE_IN_DEV_CLIENT` | A method is not available when running in a development build. A release build should be used to test this method.                                                                                                                                                 |\n```\n\n----------------------------------------\n\nTITLE: Updating Kotlin version\nDESCRIPTION: Bumps the Kotlin version in the project to 1.9.24, incorporating the latest features and bug fixes from the Kotlin language.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-updates/CHANGELOG.md#_snippet_3\n\nLANGUAGE: Kotlin\nCODE:\n```\nBumped Kotlin version to 1.9.24.\n```\n\n----------------------------------------\n\nTITLE: Including Expo Go Badges in Markdown\nDESCRIPTION: Code snippet showing how to add 'runs with Expo Go' badges to a project's documentation using Markdown syntax. These badges indicate that an app can be run instantly in the Expo Go application.\nSOURCE: https://github.com/expo/expo/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n[![runs with Expo Go](https://img.shields.io/badge/Runs%20with%20Expo%20Go-000.svg?style=flat-square&logo=EXPO&labelColor=f3f3f3&logoColor=000)](https://expo.dev/client)\n\n[![runs with Expo Go](https://img.shields.io/badge/Runs%20with%20Expo%20Go-4630EB.svg?style=flat-square&logo=EXPO&labelColor=f3f3f3&logoColor=000)](https://expo.dev/client)\n```\n\n----------------------------------------\n\nTITLE: Schema Meta Validation Configuration - JavaScript\nDESCRIPTION: Defines a meta configuration used for additional validation logic in the Schemer library. Includes definitions for asset validation, content type checks, dimensions, and custom regular expressions with human-readable messages. This snippet serves as an example of how to extend schema validation with custom metadata.\nSOURCE: https://github.com/expo/expo/blob/main/packages/@expo/schemer/README.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  meta:\n  {\n    asset,\n    contentType, //mime type\n    dimensions: {width, height},\n    square,\n\n    // For custom error messages and docs\n    regexHuman,\n    autogenerated,\n    notHuman\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Function Structure in YAML\nDESCRIPTION: Shows how to define a basic function named 'greetings' with a display name in the build configuration.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  greetings:\n    name: Say Hi!\n```\n\n----------------------------------------\n\nTITLE: Rendering App Config Schema Table in JSX\nDESCRIPTION: This JSX code renders the AppConfigSchemaTable component, passing the imported schema as a prop to display the configuration options.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/config/app.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<AppConfigSchemaTable schema={schema} />\n```\n\n----------------------------------------\n\nTITLE: Importing AppleMaps and GoogleMaps (JS)\nDESCRIPTION: This JavaScript code snippet demonstrates how to import the `AppleMaps` and `GoogleMaps` components from the `expo-maps` library.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/maps.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { AppleMaps, GoogleMaps } from 'expo-maps';\n\n// ApplesMaps.View and GoogleMaps.View are the React components\n```\n\n----------------------------------------\n\nTITLE: Process Search Command for Expo/React Native Servers\nDESCRIPTION: Command to search for running Expo or React Native development server processes\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/troubleshooting/react-native-version-mismatch.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nps -A | grep \"expo\\|react-native\"\n```\n\n----------------------------------------\n\nTITLE: Installing Documentation Dependencies with Yarn\nDESCRIPTION: Command for installing the required dependencies for the Expo documentation project using Yarn.\nSOURCE: https://github.com/expo/expo/blob/main/docs/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Importing Expo Gyroscope Module\nDESCRIPTION: Example of importing the Gyroscope module from expo-sensors package.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/gyroscope.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { Gyroscope } from 'expo-sensors';\n```\n\n----------------------------------------\n\nTITLE: Importing the Barometer Module in JavaScript\nDESCRIPTION: Shows the standard ES6 import statement required to use the `Barometer` API from the `expo-sensors` package within a JavaScript or React Native project. This makes the `Barometer` object available for use, allowing access to its methods like `addListener`.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/barometer.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n```js\nimport { Barometer } from 'expo-sensors';\n```\n```\n\n----------------------------------------\n\nTITLE: Importing Video Components from expo-video in JavaScript\nDESCRIPTION: This snippet shows how to import the VideoView component and useVideoPlayer hook from the expo-video library. These are the main components used for implementing video playback functionality.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/video.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { VideoView, useVideoPlayer } from 'expo-video';\n```\n\n----------------------------------------\n\nTITLE: Viewing System Logs for Android and iOS Devices in React Native\nDESCRIPTION: These commands show how to view system logs for Android and iOS devices using React Native CLI. The 'log-android' command uses adb logcat for Android devices, while 'log-ios' is used for iOS devices.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/workflow/logging.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Show system logs for an Android device with adb logcat\n$ npx react-native log-android\n# Show system logs for an iOS device\n$ npx react-native log-ios\n```\n\n----------------------------------------\n\nTITLE: Expo Screen Capture Permission Methods\nDESCRIPTION: New permission handling methods added to expo-screen-capture for managing screen capture permissions.\nSOURCE: https://github.com/expo/expo/blob/main/CHANGELOG.md#2025-04-22_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\ngetPermissionsAsync()\nrequestPermissionsAsync()\n```\n\n----------------------------------------\n\nTITLE: Using Prepared Statements in SQLite\nDESCRIPTION: Shows how to use prepared statements for efficient query execution with parameter binding and result handling.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/sqlite-next.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst statement = await db.prepareAsync(\n  'INSERT INTO test (value, intValue) VALUES ($value, $intValue)'\n);\ntry {\n  let result = await statement.executeAsync({ $value: 'bbb', $intValue: 101 });\n  console.log('bbb and 101:', result.lastInsertRowId, result.changes);\n\n  result = await statement.executeAsync({ $value: 'ccc', $intValue: 102 });\n  console.log('ccc and 102:', result.lastInsertRowId, result.changes);\n\n  result = await statement.executeAsync({ $value: 'ddd', $intValue: 103 });\n  console.log('ddd and 103:', result.lastInsertRowId, result.changes);\n} finally {\n  await statement.finalizeAsync();\n}\n```\n\n----------------------------------------\n\nTITLE: Setting NSUserTrackingUsageDescription in iOS Info.plist (XML)\nDESCRIPTION: This Info.plist snippet configures the NSUserTrackingUsageDescription key, necessary for iOS 14+ to request tracking permissions. The string value should provide a clear explanation to the user regarding data usage and is required for App Store compliance. Add this to your iOS project's Info.plist file if you're handling permissions natively or outside Expo's managed workflow.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/tracking-transparency.mdx#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<key>NSUserTrackingUsageDescription</key>\n<string>Your custom usage description string here.</string>\n```\n\n----------------------------------------\n\nTITLE: Importing Expo FaceDetector Module (JavaScript)\nDESCRIPTION: This snippet shows the import statement required to access expo-face-detector\\'s API in a JavaScript/TypeScript file. It is a necessary prerequisite for any detection logic and provides access to all exported functions and settings. There are no inputs or outputs; this sets up dependencies for subsequent usage.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/facedetector.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as FaceDetector from 'expo-face-detector';\n```\n\n----------------------------------------\n\nTITLE: Intl API Usage Example\nDESCRIPTION: Example of using the Intl API for number formatting with default locale settings.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/localization.mdx#2025-04-22_snippet_12\n\nLANGUAGE: ts\nCODE:\n```\nnew Intl.NumberFormat('default', { style: 'currency', currency: 'EUR' }).format(5.0);\n```\n\n----------------------------------------\n\nTITLE: Basic QR Code Generation URL Example\nDESCRIPTION: Example URL endpoint for generating a QR code for a specific project, runtime version and channel.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/more/qr-codes.mdx#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhttps://qr.expo.dev/eas-update?projectId=your-project-id&runtimeVersion=your-runtime-version&channel=your-channel\n```\n\n----------------------------------------\n\nTITLE: Virtual Error Boundary Implementation in Expo Router\nDESCRIPTION: Shows the conceptual implementation of how error boundaries are wrapped around route components in Expo Router.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/error-handling.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Route({ ErrorBoundary, Component }) {\n  return (\n    <Try catch={ErrorBoundary}>\n      <Component />\n    </Try>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Xcode Build Phase for React Native and Expo Bundling\nDESCRIPTION: This snippet shows the modifications needed in the Xcode 'Bundle React Native code and images' build phase to support custom entry files and Expo CLI integration.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/config/metro.mdx#2025-04-22_snippet_20\n\nLANGUAGE: diff\nCODE:\n```\n+\t\t\tshellScript = \"if [[ -f \\\"$PODS_ROOT/../.xcode.env\\\" ]]; then\\n  source \\\"$PODS_ROOT/../.xcode.env\\\"\\nfi\\nif [[ -f \\\"$PODS_ROOT/../.xcode.env.local\\\" ]]; then\\n  source \\\"$PODS_ROOT/../.xcode.env.local\\\"\\nfi\\n\\n# The project root by default is one level up from the ios directory\\nexport PROJECT_ROOT=\\\"$PROJECT_DIR\\\"/..\\n\\nif [[ \\\"$CONFIGURATION\\\" = *Debug* ]]; then\\n  export SKIP_BUNDLING=1\\nfi\\nif [[ -z \\\"$ENTRY_FILE\\\" ]]; then\\n  # Set the entry JS file using the bundler's entry resolution.\\n  export ENTRY_FILE=\\\"$(\\\"$NODE_BINARY\\\" -e \\\"require('expo/scripts/resolveAppEntry')\\\" \\\"$PROJECT_ROOT\\\" ios absolute | tail -n 1)\\\"\\nfi\\n\\nif [[ -z \\\"$CLI_PATH\\\" ]]; then\\n  # Use Expo CLI\\n  export CLI_PATH=\\\"$(\\\"$NODE_BINARY\\\" --print \\\"require.resolve('@expo/cli')\\\")\\\"\\nfi\\nif [[ -z \\\"$BUNDLE_COMMAND\\\" ]]; then\\n  # Default Expo CLI command for bundling\\n  export BUNDLE_COMMAND=\\\"export:embed\\\"\\nfi\\n\\n`\\\"$NODE_BINARY\\\" --print \\\"require('path').dirname(require.resolve('react-native/package.json')) + '/scripts/react-native-xcode.sh'\\\"`\\n\\n\";\n```\n\n----------------------------------------\n\nTITLE: Opening iOS project in Xcode\nDESCRIPTION: Command for opening the native iOS project in Xcode for advanced debugging and configuration. This provides access to Xcode's full suite of debugging tools including lldb.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/more/expo-cli.mdx#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ xed ios\n```\n\n----------------------------------------\n\nTITLE: Defining Events in Swift\nDESCRIPTION: Defines event names that the module can emit to JavaScript. These events can be listened to in React components using event handlers.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/module-api.mdx#2025-04-22_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\nEvents(\"onCameraReady\", \"onPictureSaved\", \"onBarCodeScanned\")\n```\n\n----------------------------------------\n\nTITLE: Opting Out of React Compiler Optimization\nDESCRIPTION: Example of using the 'use no memo' directive to exclude specific components from React Compiler optimization.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/react-compiler.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nfunction MyComponent() {\n  'use no memo';\n\n  return <Text>Will not be optimized</Text>;\n}\n```\n\n----------------------------------------\n\nTITLE: Server-Side Rendering with React Helmet Async in JavaScript\nDESCRIPTION: Shows how to use react-helmet-async for server-side rendering. Instead of static methods, it uses a context prop on HelmetProvider to hold state specific to each request.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-router/vendor/react-helmet-async/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { renderToString } from 'react-dom/server';\nimport { Helmet, HelmetProvider } from 'react-helmet-async';\n\nconst helmetContext = {};\n\nconst app = (\n  <HelmetProvider context={helmetContext}>\n    <App>\n      <Helmet>\n        <title>Hello World</title>\n        <link rel=\"canonical\" href=\"https://www.tacobell.com/\" />\n      </Helmet>\n      <h1>Hello World</h1>\n    </App>\n  </HelmetProvider>\n);\n\nconst html = renderToString(app);\n\nconst { helmet } = helmetContext;\n\n// helmet.title.toString() etc…\n```\n\n----------------------------------------\n\nTITLE: Installing expo-secure-store with npx\nDESCRIPTION: This snippet shows how to add the expo-secure-store package to npm dependencies using npx. Ensure that the specified 'expo' package is already installed and configured before proceeding. This installation is required to use the Secure Store API for secure local storage in React Native applications using Expo.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-secure-store/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-secure-store\n```\n\n----------------------------------------\n\nTITLE: Defining the EmojiPicker Modal Component in React Native (TypeScript)\nDESCRIPTION: This snippet defines the `EmojiPicker` component in `components/EmojiPicker.tsx`. It uses React Native's `Modal` component to display content in a slide-up view. The component accepts `isVisible` (boolean) to control visibility, `onClose` (function) to handle closing, and `children` to render content within the modal. It includes basic styling using `StyleSheet` for the modal container, title area, and close button.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/create-a-modal.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Modal, View, Text, Pressable, StyleSheet } from 'react-native';\nimport { PropsWithChildren } from 'react';\nimport MaterialIcons from '@expo/vector-icons/MaterialIcons';\n\ntype Props = PropsWithChildren<{\n  isVisible: boolean;\n  onClose: () => void;\n}>;\n\nexport default function EmojiPicker({ isVisible, children, onClose }: Props) {\n  return (\n    <View>\n    <Modal animationType=\"slide\" transparent={true} visible={isVisible}>\n      <View style={styles.modalContent}>\n        <View style={styles.titleContainer}>\n          <Text style={styles.title}>Choose a sticker</Text>\n          <Pressable onPress={onClose}>\n            <MaterialIcons name=\"close\" color=\"#fff\" size={22} />\n          </Pressable>\n        </View>\n        {children}\n      </View>\n    </Modal>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  modalContent: {\n    height: '25%',\n    width: '100%',\n    backgroundColor: '#25292e',\n    borderTopRightRadius: 18,\n    borderTopLeftRadius: 18,\n    position: 'absolute',\n    bottom: 0,\n  },\n  titleContainer: {\n    height: '16%',\n    backgroundColor: '#464C55',\n    borderTopRightRadius: 10,\n    borderTopLeftRadius: 10,\n    paddingHorizontal: 20,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n  },\n  title: {\n    color: '#fff',\n    fontSize: 16,\n  },\n});\n\n```\n\n----------------------------------------\n\nTITLE: Setting Custom URL with Environment Variables in Expo\nDESCRIPTION: Example of using the EXPO_PACKAGER_PROXY_URL environment variable to force a specific URL for the Expo development server.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/more/expo-cli.mdx#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ export EXPO_PACKAGER_PROXY_URL=http://expo.dev\n$ npx expo start\n```\n\n----------------------------------------\n\nTITLE: Fingerprint Job Outputs Definition JSON\nDESCRIPTION: Defines the structure of outputs for a 'fingerprint' job, including the 'android_fingerprint_hash' and 'ios_fingerprint_hash'. These outputs provide the fingerprint hash values for the Android and iOS builds.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/workflows/syntax.mdx#_snippet_25\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"android_fingerprint_hash\": string,\n  \"ios_fingerprint_hash\": string,\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Origin for Local Production Testing - JSON\nDESCRIPTION: Provides a sample app.json configuration to set the expo-router origin field for local testing. This configuration points the app to 'http://localhost:8081', allowing the locally served production server to be used for requests. No external dependencies are required beyond Expo CLI; the expo-router plugin is configured and the origin value can be changed for different environments. This value should be removed or changed for production deployment to avoid accidental connections to local servers.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/reference/api-routes.mdx#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"expo\\\": {\\n    \\\"plugins\\\": [\\n      [\\n        \\\"expo-router\\\",\\n        {\\n          \\\"origin\\\": \\\"http://localhost:8081\\\"\\n        }\\n      ]\\n    ]\\n  }\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Updating Android Dev Launcher Host for Local Development\nDESCRIPTION: Code diff showing how to modify the DevLauncherController.kt file to point the DEV_LAUNCHER_HOST value to a local Metro bundler instance for development purposes.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-dev-launcher/README.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n- private val DEV_LAUNCHER_HOST: String? = null\n+ private val DEV_LAUNCHER_HOST: String? = \"10.0.2.2:8090\";\n```\n\n----------------------------------------\n\nTITLE: Using Fingerprint with Expo as a Transitive Dependency\nDESCRIPTION: Example showing how to configure fingerprint.config.js when using @expo/fingerprint through the expo package as a transitive dependency.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/fingerprint.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n/** @type {import('expo/fingerprint').Config} */\n```\n\n----------------------------------------\n\nTITLE: Disabling Sitemap in Expo Router (SDK 52+)\nDESCRIPTION: Configuration in app.json to disable sitemap generation using the expo-router plugin config for SDK 52 and above.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/reference/sitemap.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    [\n      \"expo-router\",\n      {\n        \"sitemap\": false\n      }\n    ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing SymbolView Component from expo-symbols (JavaScript)\nDESCRIPTION: This snippet shows how to import the SymbolView component from the expo-symbols library in a JavaScript file. It's typically used at the top of a file where SF Symbols are needed.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/symbols.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { SymbolView } from 'expo-symbols';\n```\n\n----------------------------------------\n\nTITLE: Importing Expo Sensors Modules (JavaScript)\nDESCRIPTION: Demonstrates two ways to import functionalities from the `expo-sensors` library in JavaScript. You can either import the entire library under a namespace (e.g., `Sensors`) or import specific sensor modules individually (e.g., `Accelerometer`, `Barometer`, `DeviceMotion`, etc.) as needed.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/sensors.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nimport * as Sensors from 'expo-sensors';\n// OR\nimport {\n  Accelerometer,\n  Barometer,\n  DeviceMotion,\n  Gyroscope,\n  LightSensor,\n  Magnetometer,\n  MagnetometerUncalibrated,\n  Pedometer,\n} from 'expo-sensors';\n```\n```\n\n----------------------------------------\n\nTITLE: Applying the Primary Theme to the Button Component in React Native (tsx)\nDESCRIPTION: Updates the main screen component (`Index`) in `app/(tabs)/index.tsx` to utilize the new `theme` prop on the enhanced `Button` component. The first `Button` instance is now passed the `theme=\"primary\"` prop, causing it to render with the specific primary styles and icon defined in the `Button` component. The second button remains unstyled.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/build-a-screen.mdx#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { View, StyleSheet } from 'react-native';\n\nimport Button from '@/components/Button';\nimport ImageViewer from '@/components/ImageViewer';\n\nconst PlaceholderImage = require('@/assets/images/background-image.png');\n\nexport default function Index() {\n  return (\n    <View style={styles.container}>\n      <View style={styles.imageContainer}>\n        <ImageViewer imgSource={PlaceholderImage} />\n      </View>\n      <View style={styles.footerContainer}>\n        /* @tutinfo Add <CODE>\"primary\"</CODE> theme on the first button. */\n        <Button theme=\"primary\" label=\"Choose a photo\" />\n        /* @end */\n        <Button label=\"Use this photo\" />\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#25292e',\n    alignItems: 'center',\n  },\n  imageContainer: {\n    flex: 1,\n  },\n  footerContainer: {\n    flex: 1 / 3,\n    alignItems: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a New Expo Project with Bare Workflow Template\nDESCRIPTION: Terminal command to create a new Expo project using the bare-minimum template, which provides a React Native app with Expo SDK support.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/index.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Create a project named my-app\n$ npx create-expo-app my-app --template bare-minimum\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic store.config.json File for EAS Metadata\nDESCRIPTION: This JSON configuration defines the basic app store metadata for an app. It includes the config version and Apple-specific information such as title, subtitle, description, keywords, and various URLs. The configVersion property is important for versioning compatibility.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/deploy/app-stores-metadata.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"configVersion\": 0,\n  \"apple\": {\n    \"info\": {\n      \"en-US\": {\n        \"title\": \"Awesome App\",\n        \"subtitle\": \"Your self-made awesome app\",\n        \"description\": \"The most awesome app you have ever seen\",\n        \"keywords\": [\"awesome\", \"app\"],\n        \"marketingUrl\": \"https://example.com/en/promo\",\n        \"supportUrl\": \"https://example.com/en/support\",\n        \"privacyPolicyUrl\": \"https://example.com/en/privacy\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Permissions for Expo Network Module\nDESCRIPTION: XML configuration to add necessary permissions for network and Wi-Fi state access on Android.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-network/README.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Added permissions -->\n<uses-permission android:name=\"android.permission.ACCESS_WIFI_STATE\" />\n<uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Metro Bundler for Web in Expo\nDESCRIPTION: Configuration in app.json to specify Metro as the web bundler for Expo projects.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/config/metro.mdx#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"web\": {\n      \"bundler\": \"metro\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing dismiss Action in Expo Router\nDESCRIPTION: Example showing how to use the dismiss action to navigate back multiple screens in a stack. Uses useRouter hook to access navigation methods and handles dismissing a specified number of screens.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/advanced/stack.mdx#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button, View } from 'react-native';\nimport { useRouter } from 'expo-router';\n\nexport default function Settings() {\n  const router = useRouter();\n\n  const handleDismiss = (count: number) => {\n    router.dismiss(count)\n  };\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Button title=\"Go to first screen\" onPress={() => handleDismiss(3)} />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic SVG Shapes in React Native\nDESCRIPTION: Example of creating a component that renders basic SVG shapes (Circle and Rectangle) with styling properties like stroke, fill, and dimensions.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/svg.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Svg, { Circle, Rect } from 'react-native-svg';\n\nexport default function SvgComponent(props) {\n  return (\n    <Svg height=\"50%\" width=\"50%\" viewBox=\"0 0 100 100\" {...props}>\n      <Circle cx=\"50\" cy=\"50\" r=\"45\" stroke=\"blue\" strokeWidth=\"2.5\" fill=\"green\" />\n      <Rect x=\"15\" y=\"15\" width=\"70\" height=\"70\" stroke=\"red\" strokeWidth=\"2\" fill=\"yellow\" />\n    </Svg>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Image Component from expo-image\nDESCRIPTION: Shows how to import the Image component from the expo-image package for use in a React Native application.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/image.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { Image } from 'expo-image';\n```\n\n----------------------------------------\n\nTITLE: Importing AppleAuthentication Module in Expo React Native (JavaScript)\nDESCRIPTION: This single-line JavaScript snippet demonstrates importing all Apple authentication methods and constants from the expo-apple-authentication package. This is required before using features such as AppleAuthenticationButton or signInAsync. Dependency: expo-apple-authentication must be installed in your project. Input is the ES module import declaration, and there is no output. Intended for inclusion at the top of JavaScript/TypeScript source files in React Native projects.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/apple-authentication.mdx#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport * as AppleAuthentication from 'expo-apple-authentication';\\n\n```\n\n----------------------------------------\n\nTITLE: Importing UI Components for Expo Plugin Documentation (TypeScript/JavaScript)\nDESCRIPTION: This snippet imports UI components from the Expo UI libraries, including an icon and documentation-specific React components. These imports are required for rendering styleguide icons, install instructions, highlight boxes, and external resource boxes in the documentation page. The imports rely on the monorepo structure of Expo and are meant to modularize the UI.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/date-time-picker.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BookOpen02Icon } from '@expo/styleguide-icons/outline/BookOpen02Icon';\n\nimport { APIInstallSection } from '~/components/plugins/InstallSection';\nimport { BoxLink } from '~/ui/components/BoxLink';\nimport { ContentSpotlight } from '~/ui/components/ContentSpotlight';\n```\n\n----------------------------------------\n\nTITLE: Importing Expo Manifests Types - JavaScript\nDESCRIPTION: This snippet shows how to import all types and exports from the expo-manifests library into a JavaScript project using ES module syntax. The \"Manifests\" namespace contains type definitions and possibly utility functions related to Expo app manifests. To use this, ensure that 'expo-manifests' is installed as a dependency in your project. No parameters are required; the import brings the complete module namespace for use in your codebase.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/manifests.mdx#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport * as Manifests from 'expo-manifests';\n```\n\n----------------------------------------\n\nTITLE: Implementing Playback Status Updates\nDESCRIPTION: JavaScript code demonstrating how to use setOnPlaybackStatusUpdate to monitor and respond to changes in playback status. This example shows how to handle loading errors, playing state, buffering, and playback completion.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/av.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n_onPlaybackStatusUpdate = playbackStatus => {\n  if (!playbackStatus.isLoaded) {\n    // Update your UI for the unloaded state\n    if (playbackStatus.error) {\n      console.log(`Encountered a fatal error during playback: ${playbackStatus.error}`);\n      // Send Expo team the error on Slack or the forums so we can help you debug!\n    }\n  } else {\n    // Update your UI for the loaded state\n\n    if (playbackStatus.isPlaying) {\n      // Update your UI for the playing state\n    } else {\n      // Update your UI for the paused state\n    }\n\n    if (playbackStatus.isBuffering) {\n      // Update your UI for the buffering state\n    }\n\n    if (playbackStatus.didJustFinish && !playbackStatus.isLooping) {\n      // The player has just finished playing and will stop. Maybe you want to play something else?\n    }\n  }\n};\n\n// Load the playbackObject and obtain the reference.\nplaybackObject.setOnPlaybackStatusUpdate(this._onPlaybackStatusUpdate);\n```\n\n----------------------------------------\n\nTITLE: Generating Metro Config Template in Expo\nDESCRIPTION: Command to generate a template metro.config.js file for customizing Metro bundler in an Expo project.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/customizing-metro.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo customize metro.config.js\n```\n\n----------------------------------------\n\nTITLE: Running Expo Doctor\nDESCRIPTION: Command to run Expo Doctor for diagnosing issues in an Expo project.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/tools.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo-doctor\n```\n\n----------------------------------------\n\nTITLE: Importing expo-calendar Module (JavaScript)\nDESCRIPTION: This minimal snippet demonstrates the ES6 import of all exports from expo-calendar. Use this at the top of JavaScript or TypeScript projects to access calendar APIs. It requires that the expo-calendar package be installed and available in the project workspace. No parameters or immediate outputs; simply prepares the calendar API for use in subsequent code.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/calendar.mdx#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport * as Calendar from 'expo-calendar';\\n\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Bun in GitHub Actions\nDESCRIPTION: Step configuration for installing project dependencies using Bun package manager in the GitHub Actions workflow.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/github-actions.mdx#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Install dependencies\n  run: bun install\n```\n\n----------------------------------------\n\nTITLE: Importing SymbolView Component (JavaScript)\nDESCRIPTION: This snippet shows how to import the SymbolView component from the expo-symbols library. It's a simple import statement that would typically be used at the top of a file where SF Symbols are being used.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/symbols.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { SymbolView } from 'expo-symbols';\n```\n\n----------------------------------------\n\nTITLE: Android GroupView Implementation\nDESCRIPTION: Shows how to implement a group view in Android that can contain child views.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/module-api.mdx#2025-04-22_snippet_22\n\nLANGUAGE: kotlin\nCODE:\n```\nGroupView<ViewGroup> {\n  AddChildView { parent, child, index -> /* @hide ... */ /* @end */}\n}\n```\n\n----------------------------------------\n\nTITLE: Installing expo-cellular package\nDESCRIPTION: This section provides installation instructions for the expo-cellular package.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/cellular.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<APIInstallSection />\n```\n\n----------------------------------------\n\nTITLE: Video Component Implementation in React\nDESCRIPTION: Example of implementing a video component in React using the ContentSpotlight component.\nSOURCE: https://github.com/expo/expo/blob/main/docs/README.md#2025-04-22_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ContentSpotlight } from '~/ui/components/ContentSpotlight';\n\n// Change the path to point to the relative path to your video from within the `static/videos` directory\n<ContentSpotlight file=\"guides/color-schemes.mp4\" />;\n```\n\n----------------------------------------\n\nTITLE: Importing expo-dev-client for error handling\nDESCRIPTION: JavaScript code snippet showing how to import expo-dev-client at the top of the project's index file for improved error handling.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/bare/install-dev-builds-in-bare.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport 'expo-dev-client';\n/* @hide ... */ /* @end */\nimport App from './App';\n```\n\n----------------------------------------\n\nTITLE: Importing BookOpen02Icon in Markdown\nDESCRIPTION: This snippet imports the BookOpen02Icon from the Expo styleguide icons package. It's used for visual representation in the documentation.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/screens.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nimport { BookOpen02Icon } from '@expo/styleguide-icons/outline/BookOpen02Icon';\n```\n\n----------------------------------------\n\nTITLE: ProjectId Configuration in app.json\nDESCRIPTION: JSON configuration showing the project ID structure in app.json file.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/eas/configure-development-build.mdx#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extra\": {\n    \"eas\": {\n      \"projectId\": \"0cd3da2d-xxx-xxx-xxx-xxxxxxxxxx\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running TypeScript Build for Modified Packages\nDESCRIPTION: Command to transpile TypeScript code after modifying packages.\nSOURCE: https://github.com/expo/expo/blob/main/CONTRIBUTING.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Initializing LogRocket in React Native with Expo\nDESCRIPTION: This TypeScript React code demonstrates how to initialize LogRocket in an Expo app. It uses the useEffect hook to call LogRocket.init with the app ID and additional configuration options, including the update ID and Expo channel.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/using-logrocket.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEffect } from 'react';\nimport * as Updates from 'expo-updates';\nimport LogRocket from '@logrocket/react-native';\n\nconst App = () => {\n  useEffect(() => {\n    LogRocket.init('<App ID>', {\n      updateId: Updates.isEmbeddedLaunch ? null : Updates.updateId,\n      expoChannel: Updates.channel,\n    });\n  }, []);\n};\n```\n\n----------------------------------------\n\nTITLE: Modifying React Native Button Component\nDESCRIPTION: Example of modifying a React Native button component's label from 'Choose a photo' to 'Select a photo' to demonstrate code changes that can be distributed via EAS Update.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/eas/team-development.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Button theme=\"primary\" label=\"Select a photo\" onPress={pickImageAsync} />\n```\n\n----------------------------------------\n\nTITLE: Importing Expo Manifests Package in JavaScript\nDESCRIPTION: This code snippet demonstrates how to import all exports from the expo-manifests package. The Manifests object provides types and utilities for working with Expo manifest files.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/manifests.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Manifests from 'expo-manifests';\n```\n\n----------------------------------------\n\nTITLE: Overriding Update URL and Headers in Expo\nDESCRIPTION: This code snippet demonstrates how to use the Updates.setUpdateURLAndRequestHeadersOverride method to change the update URL and request headers at runtime in an Expo project. It includes an alert to notify the user to restart the app for changes to take effect.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/override.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Updates from 'expo-updates';\n\n// Where you call this method depends on your use case - it may make sense to\n// have a menu in your preview builds that allows testers to pick from available\n// pull requests, for example.\nfunction overrideUpdateURLAndHeaders() {\n  Updates.setUpdateURLAndRequestHeadersOverride({\n    url: '<https://u.expo.dev/>...',\n    requestHeaders: { 'expo-channel-name': 'pr-123' },\n  });\n\n  alert('Close and re-open the app to load the latest version.');\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring App Config Fields Not Synced Check in package.json for Expo Doctor\nDESCRIPTION: This snippet demonstrates how to disable or enable the check for app config fields not being synced to native projects when using Prebuild. It's particularly relevant when the android or ios directories are present in the project.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/config/package-json.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"doctor\": {\n      \"appConfigFieldsNotSyncedCheck\": {\n        \"enabled\": false\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Vendored Modules with et uvm Command in Expo Go\nDESCRIPTION: This command updates a vendored module to a specific version and applies Expo-Go-specific patches. The example shows updating 'react-native-view-shot' to version 4.0.3.\nSOURCE: https://github.com/expo/expo/blob/main/apps/expo-go/modules/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\net uvm  react-native-view-shot -c \"4.0.3\"\n```\n\n----------------------------------------\n\nTITLE: Example Output After Babel HTML Elements Transformation\nDESCRIPTION: Transformed React component showing how standard HTML elements are converted to @expo/html-elements components with automatic import added.\nSOURCE: https://github.com/expo/expo/blob/main/packages/html-elements/README.md#2025-04-22_snippet_26\n\nLANGUAGE: js\nCODE:\n```\nimport { Div, H1 } from '@expo/html-elements';\n\nexport default function Page() {\n  return (\n    <Div>\n      <H1>Hello World</H1>\n    </Div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Running EAS Test Project Creation Script (Bash, Typescript)\nDESCRIPTION: This Typescript executable script (`create-eas-project.ts`) is used to scaffold and configure a test project for the Expo E2E Updates suite. It should be run from the Expo repository root and depends on Node.js and Typescript runtime. The only parameter is the script path. The output is the setup of a test project in the designated working directory. Prior environment variables must be configured before execution.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-updates/e2e/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./packages/expo-updates/e2e/setup/create-eas-project.ts\n```\n\n----------------------------------------\n\nTITLE: JavaScript Comment Styling Examples\nDESCRIPTION: Demonstration of proper comment formatting for classes, methods and inline documentation\nSOURCE: https://github.com/expo/expo/blob/main/guides/Expo JavaScript Style Guide.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Gets the latest version of Android that's been released. This is a version\n * string like 7.1 instead of the code name Nougat.\n */\nfunction getLatestAndroidVersion() {\n  // Keep this logic in sync with Google's versioning scheme\n  return maxBy(getAndroidVersions(/* includePrereleases */ false), linearizeSemver);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building SQLite Library with CMake\nDESCRIPTION: This CMake script sets up the build environment for the 'expo-sqlite' library in a C++ project. It configures compile options, source directories, and dependencies based on conditional flags such as USE_LIBSQL and USE_SQLCIPHER. Key dependencies include 'fbjni', 'android', and optionally 'openssl'. It also handles logging with 'log' library, and uses C++20 standard. The script has separate configurations for using 'libsql' or standard 'sqlite3' sources.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-sqlite/android/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.4.1)\n\nproject(expo-sqlite)\n\nset(CMAKE_VERBOSE_MAKEFILE ON)\nset(CMAKE_CXX_STANDARD 20)\nset(PACKAGE_NAME \"expo-sqlite\")\nset(BUILD_DIR ${CMAKE_SOURCE_DIR}/build)\n\nset(SRC_DIR \"${CMAKE_SOURCE_DIR}/src/main/cpp\")\n\nseparate_arguments(SQLITE_BUILDFLAGS)\nadd_compile_options(\n  ${SQLITE_BUILDFLAGS}\n)\n\nif(${USE_LIBSQL})\n  file(GLOB SOURCES \"${SRC_DIR}/libsql/*.cpp\")\n  add_library(\n    ${PACKAGE_NAME}\n    SHARED\n    ${SOURCES}\n  )\n  target_include_directories(\n    ${PACKAGE_NAME}\n    PRIVATE\n    \"${CMAKE_SOURCE_DIR}/libsql\"\n  )\n  find_library(\n    LIBSQL_LIB\n    sql_experimental\n    PATHS \"${CMAKE_SOURCE_DIR}/libsql/${ANDROID_ABI}\"\n    NO_CMAKE_FIND_ROOT_PATH\n  )\nelse()\n  file(GLOB SOURCES \"${SRC_DIR}/*.cpp\")\n  add_library(\n    ${PACKAGE_NAME}\n    SHARED\n    ${SOURCES}\n    \"${SQLITE3_SRC_DIR}/sqlite3.c\"\n  )\n  target_include_directories(\n    ${PACKAGE_NAME}\n    PRIVATE\n    ${SRC_DIR}\n    \"${SQLITE3_SRC_DIR}\"\n  )\n  set(LIBSQL_LIB \"\")\nendif()\n\nfind_library(LOG_LIB log)\nfind_package(fbjni REQUIRED CONFIG)\nif(${USE_SQLCIPHER})\n  find_package(openssl REQUIRED CONFIG)\n  set(OPENSSL_CRYPTO_LIB \"openssl::crypto\")\nelse()\n  set(OPENSSL_CRYPTO_LIB \"\")\nendif()\n\ntarget_link_libraries(\n  ${PACKAGE_NAME}\n  ${LOG_LIB}\n  ${OPENSSL_CRYPTO_LIB}\n  ${LIBSQL_LIB}\n  fbjni::fbjni\n  android\n)\n```\n\n----------------------------------------\n\nTITLE: Throwing Uncaught Errors in React Native\nDESCRIPTION: Demonstrates how to throw an uncaught error to trigger a Redbox error display in React Native\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/debugging/errors-and-warnings.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nthrow Error(\"Error message\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Default npm Registry for EAS Build on Android\nDESCRIPTION: The default .npmrc configuration used by EAS Build on Android, which points to a self-hosted npm cache for faster dependency installation.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/build-reference/private-npm-packages.mdx#2025-04-22_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nregistry=http://npm-cache-service.worker-infra-production.svc.cluster.local:4873\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-apple-authentication with Config Plugin\nDESCRIPTION: Configuration using the built-in config plugin for expo-apple-authentication which is required for EAS Build to properly set up the iOS capabilities.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/apple-authentication.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\"expo-apple-authentication\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a BoxLink to Official DateTimePicker Documentation (JSX)\nDESCRIPTION: This snippet creates a prominent link to the official DateTimePicker documentation, complete with a descriptive title, short summary, icon, and external link. The BoxLink component enhances documentation pages with visually rich and informative resource references. It requires the BookOpen02Icon and BoxLink component to be present in the project.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/date-time-picker.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<BoxLink\n  title=\"Visit official documentation\"\n  description=\"Get full information on API and its usage.\"\n  Icon={BookOpen02Icon}\n  href=\"https://github.com/react-native-datetimepicker/datetimepicker\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Promoting Versions to Production\nDESCRIPTION: Expotools command to promote staged versions to production\nSOURCE: https://github.com/expo/expo/blob/main/guides/Releasing Expo Go for Android.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\net promote-versions\n```\n\n----------------------------------------\n\nTITLE: Configuring Screen Orientation in Expo Config\nDESCRIPTION: Configuration example for expo-screen-orientation using config plugin in app.json. Shows how to set initial orientation and require full screen mode for iOS.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/screen-orientation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"ios\": {\n      \"requireFullScreen\": true\n    },\n    \"plugins\": [\n      [\n        \"expo-screen-orientation\",\n        {\n          \"initialOrientation\": \"DEFAULT\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Processing Changed Files with Shell Arguments in GitHub Actions\nDESCRIPTION: Example configuration for the paths-filter action that outputs modified file paths as shell-compatible arguments. Used to process modified markdown files with a linter.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-updates/e2e/setup/paths-filter/README.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n- uses: dorny/paths-filter@v3\n  id: filter\n  with:\n    # Enable listing of files matching each filter.\n    # Paths to files will be available in `${FILTER_NAME}_files` output variable.\n    # Paths will be escaped and space-delimited.\n    # Output is usable as command-line argument list in Linux shell\n    list-files: shell\n\n    # In this example changed files will be checked by linter.\n    # It doesn't make sense to lint deleted files.\n    # Therefore we specify we are only interested in added or modified files.\n    filters: |\n      markdown:\n        - added|modified: '*.md'\n- name: Lint Markdown\n  if: ${{ steps.filter.outputs.markdown == 'true' }}\n  run: npx textlint ${{ steps.filter.outputs.markdown_files }}\n```\n\n----------------------------------------\n\nTITLE: Configuring iframe for Web Camera in Chrome\nDESCRIPTION: An HTML snippet for configuring an iframe to enable camera and microphone access when using web camera functionalities on Chrome. This requires adding the allow attribute with specific permissions.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/camera.mdx#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<iframe src=\"...\" allow=\"microphone; camera;\">\n  <!-- <Camera /> -->\n</iframe>\n```\n\n----------------------------------------\n\nTITLE: Defining Expo Config Plugins with Raw Functions in app.config.js\nDESCRIPTION: Illustrates defining Expo config plugins directly within `app.config.js` using raw JavaScript functions. It shows adding a named plugin (`withMyPlugin`) and an anonymous plugin to modify the `Info.plist`. This highlights a limitation where changes within raw function implementations might not alter the fingerprint hash.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/fingerprint.mdx#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nconst { withInfoPlist } = require('expo/config-plugins');\n\nconst withMyPlugin = (config) => {\n  return withInfoPlist(config, (config) => {\n    config.modResults.NSLocationWhenInUseUsageDescription = 'Allow $(PRODUCT_NAME) to use your location';\n    return config;\n  });\n};\n\nexport default ({ config }) => {\n  config.plugins ||= [];\n  config.plugins.push(withMyPlugin);\n  config.plugins.push((config) => config);\n  return config;\n};\n```\n\n----------------------------------------\n\nTITLE: Listening to Video Player Events with useEvent Hook in expo-video\nDESCRIPTION: Demonstrates using the `useEvent` hook from the `expo` package to listen for `statusChange` events emitted by an `expo-video` `VideoPlayer` instance. This hook returns a stateful value containing the latest event data (player status and potential error), automatically managing the listener lifecycle tied to the component.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/video.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEvent } from 'expo';\n// ... Other imports, definition of the component, creating the player etc.\n\nconst { status, error } = useEvent(player, 'statusChange', { status: player.status });\n// Rest of the component...\n```\n\n----------------------------------------\n\nTITLE: Handling DOM Component Size Changes in Native App\nDESCRIPTION: Shows how to update a native component's state based on size changes reported by a DOM component. This example uses useState to manage the container size and updates it when the DOM component reports a change.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/dom-components.mdx#2025-04-22_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport DOMComponent from '@/components/my-component';\nimport { useState } from 'react';\nimport { View, ScrollView } from 'react-native';\n\nexport default function App() {\n  const [containerSize, setContainerSize] = useState<{\n    width: number;\n    height: number;\n  } | null>(null);\n  return (\n    <View style={{ flex: 1 }}>\n      <ScrollView>\n        <DOMComponent\n          onDOMLayout={async ({ width, height }) => {\n            if (containerSize?.width !== width || containerSize?.height !== height) {\n              setContainerSize({ width, height });\n            }\n          }}\n          dom={{\n            containerStyle:\n              containerSize != null\n                ? { width: containerSize.width, height: containerSize.height }\n                : null,\n          }}\n        />\n      </ScrollView>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Image Picker with Modal State in React Native\nDESCRIPTION: Main component implementation showing image picker functionality with state management for modal controls. Includes ImagePicker integration and conditional rendering of buttons based on selection state.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/create-a-modal.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { View, StyleSheet } from 'react-native';\nimport * as ImagePicker from 'expo-image-picker';\nimport { useState } from 'react';\n\nimport Button from '@/components/Button';\nimport ImageViewer from '@/components/ImageViewer';\n\nconst PlaceholderImage = require('@/assets/images/background-image.png');\n\nexport default function Index() {\n  const [selectedImage, setSelectedImage] = useState<string | undefined>(undefined);\n  const [showAppOptions, setShowAppOptions] = useState<boolean>(false);\n\n  const pickImageAsync = async () => {\n    let result = await ImagePicker.launchImageLibraryAsync({\n      mediaTypes: ['images'],\n      allowsEditing: true,\n      quality: 1,\n    });\n\n    if (!result.canceled) {\n      setSelectedImage(result.assets[0].uri);\n      setShowAppOptions(true);\n    } else {\n      alert('You did not select any image.');\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.imageContainer}>\n        <ImageViewer imgSource={PlaceholderImage} selectedImage={selectedImage} />\n      </View>\n      {showAppOptions ? (\n        <View />\n      ) : (\n        <View style={styles.footerContainer}>\n          <Button theme=\"primary\" label=\"Choose a photo\" onPress={pickImageAsync} />\n          <Button label=\"Use this photo\" onPress={() => setShowAppOptions(true)} />\n        </View>\n      )}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#25292e',\n    alignItems: 'center',\n  },\n  imageContainer: {\n    flex: 1,\n  },\n  footerContainer: {\n    flex: 1 / 3,\n    alignItems: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring @expo/image-utils with EXPO_IMAGE_UTILS_NO_SHARP\nDESCRIPTION: Identifies the 'EXPO_IMAGE_UTILS_NO_SHARP' environment variable. When set to a truthy value, this variable forces @expo/image-utils to disable the use of the globally installed 'sharp-cli' and fall back to using 'jimp' for image modifications.\nSOURCE: https://github.com/expo/expo/blob/main/packages/@expo/image-utils/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nEXPO_IMAGE_UTILS_NO_SHARP\n```\n\n----------------------------------------\n\nTITLE: Disabling Vale Prose Linter with Comment Delimiters\nDESCRIPTION: Syntax for disabling the Vale prose linter for specific sections of documentation text using comment delimiters.\nSOURCE: https://github.com/expo/expo/blob/main/docs/README.md#2025-04-22_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n{/* vale off */}\n\nThis is some text that will be ignored by Vale.\n\n{/* vale on */}\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Info.plist for expo-location\nDESCRIPTION: XML configuration for adding necessary location usage description keys to the iOS Info.plist file.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-location/README.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<key>NSLocationAlwaysAndWhenInUseUsageDescription</key>\n<string>Allow $(PRODUCT_NAME) to use your location</string>\n<key>NSLocationAlwaysUsageDescription</key>\n<string>Allow $(PRODUCT_NAME) to use your location</string>\n<key>NSLocationWhenInUseUsageDescription</key>\n<string>Allow $(PRODUCT_NAME) to use your location</string>\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint in .eslintrc.js (js)\nDESCRIPTION: This snippet demonstrates configuring ESLint using a dedicated `.eslintrc.js` file. It exports a configuration object where the `extends` property specifies `universe` to inherit the base rules from `eslint-config-universe`.\nSOURCE: https://github.com/expo/expo/blob/main/packages/eslint-config-universe/README.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  extends: 'universe',\n};\n```\n\n----------------------------------------\n\nTITLE: Declaring iOS Calendar/Reminder Usage Descriptions in XML\nDESCRIPTION: This XML (plist) snippet must be added to the **ios/[app]/Info.plist** file for manual native iOS projects (not using Continuous Native Generation). It defines the user-facing strings (`NSCalendarsUsageDescription`, `NSRemindersUsageDescription`) that explain why the app needs access to the user's calendars and reminders when the permission prompt is shown.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/calendar.mdx#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<key>NSCalendarsUsageDescription</key>\n<string>Allow $(PRODUCT_NAME) to access your calendar</string>\n<key>NSRemindersUsageDescription</key>\n<string>Allow $(PRODUCT_NAME) to access your reminders</string>\n```\n\n----------------------------------------\n\nTITLE: Executing Shell Commands in EAS Build YAML Configuration\nDESCRIPTION: Demonstrates how to use the 'run' key to execute single and multiline shell commands in an EAS Build custom configuration.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: Run inline shell commands\n  steps:\n    - run: echo \"Hello world\"\n    - run: |\n        echo \"Multiline\"\n        echo \"bash commands\"\n```\n\n----------------------------------------\n\nTITLE: Implementing SQLite Context Hook in React Native\nDESCRIPTION: Demonstrates the basic setup of SQLite database context in a React Native app, including database initialization, migrations, and data querying using the useSQLiteContext hook.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/sqlite.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SQLiteProvider, useSQLiteContext, type SQLiteDatabase } from 'expo-sqlite';\nimport { useEffect, useState } from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <SQLiteProvider databaseName=\"test.db\" onInit={migrateDbIfNeeded}>\n        <Header />\n        <Content />\n      </SQLiteProvider>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Screen Capture Prevention Using React Hook\nDESCRIPTION: Example showing how to use the usePreventScreenCapture hook to prevent screen recording in a React Native component. This approach automatically prevents screen capture while the component is mounted.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/screen-capture.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { usePreventScreenCapture } from 'expo-screen-capture';\nimport { Text, View } from 'react-native';\n\nexport default function ScreenCaptureExample() {\n  usePreventScreenCapture();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>As long as this component is mounted, this screen is unrecordable!</Text>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring DOM-to-Image Module Type\nDESCRIPTION: TypeScript declaration file to add type definition for the dom-to-image module to resolve TypeScript module errors.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/platform-differences.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare module 'dom-to-image';\n```\n\n----------------------------------------\n\nTITLE: Importing Audio and Video Components\nDESCRIPTION: Shows how to import the Audio and Video components from the expo-av package.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/av.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Audio, Video } from 'expo-av';\n```\n\n----------------------------------------\n\nTITLE: Importing Device Module in JavaScript\nDESCRIPTION: This snippet shows how to import the Device module from expo-device in a JavaScript file.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/device.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as Device from 'expo-device';\n```\n\n----------------------------------------\n\nTITLE: Implementing StatusBar with Light Text in React Native\nDESCRIPTION: Example demonstrating how to use the StatusBar component from expo-status-bar to create a dark-themed screen with light status bar text. The code shows a basic implementation within a React Native app with styled container and text components.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/status-bar.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { StyleSheet, Text, View } from 'react-native';\nimport { StatusBar } from 'expo-status-bar';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.text}>Notice that the status bar has light text!</Text>\n      <StatusBar style=\"light\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#000',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  text: {\n    color: '#fff',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Extending Expo Config in package.json (JSON)\nDESCRIPTION: Shows how to extend the Expo ESLint config directly in a project's 'package.json' under the 'eslintConfig' object. This legacy method allows you to declare ESLint base rules without separate configuration files. The 'extends' key with value 'expo' integrates all relevant config settings for Expo projects.\nSOURCE: https://github.com/expo/expo/blob/main/packages/eslint-config-expo/README.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"eslintConfig\": {\n    \"extends\": [\"expo\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: MediaLibrary Import Statement\nDESCRIPTION: Basic import statement for using the MediaLibrary module.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/media-library.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as MediaLibrary from 'expo-media-library';\n```\n\n----------------------------------------\n\nTITLE: Importing Magnetometer Modules\nDESCRIPTION: Code snippet showing how to import both calibrated and uncalibrated magnetometer modules from expo-sensors package.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/magnetometer.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { Magnetometer, MagnetometerUncalibrated } from 'expo-sensors';\n```\n\n----------------------------------------\n\nTITLE: Update Job Type Configuration YAML\nDESCRIPTION: Configures an 'update' job in an EAS Workflow. The 'type' keyword is set to 'update', and the 'params' object specifies the 'message', 'platform', 'branch', and 'channel' for the update. The 'channel' cannot be used with 'branch'.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/workflows/syntax.mdx#_snippet_30\n\nLANGUAGE: YAML\nCODE:\n```\njobs:\n  my_job:\n    # @info #\n    type: update\n    # @end #\n    params:\n      message: string # optional\n      platform: string # optional - android | ios | all, defaults to all\n      branch: string # optional\n      channel: string # optional - cannot be used with branch\n```\n\n----------------------------------------\n\nTITLE: Importing NetInfo in React Native\nDESCRIPTION: Shows how to import the NetInfo library from @react-native-community/netinfo package.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/netinfo.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport NetInfo from '@react-native-community/netinfo';\n```\n\n----------------------------------------\n\nTITLE: iOS Test Command\nDESCRIPTION: Fastlane command to run tests for iOS.\nSOURCE: https://github.com/expo/expo/blob/main/fastlane/README.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n[bundle exec] fastlane ios test\n```\n\n----------------------------------------\n\nTITLE: Using TextInput Component with SwiftUI\nDESCRIPTION: This code snippet demonstrates how to use the `TextInput` component from `@expo/ui/swift-ui`. It imports the `TextInput` component and configures properties such as `autocorrection`, `defaultValue`, and `onChangeText`. The `onChangeText` prop takes a callback function that is invoked whenever the text changes. The `setValue` function presumably updates a state variable.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/ui.mdx#_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TextInput } from '@expo/ui/swift-ui';\n\n<TextInput autocorrection={false} defaultValue=\"A single line text input\" onChangeText={setValue} />\n```\n\n----------------------------------------\n\nTITLE: Manual iCloud Configuration for iOS\nDESCRIPTION: XML entitlements that need to be added to the iOS app's entitlements file when manually configuring iCloud capabilities without using EAS Build.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/document-picker.mdx#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<key>com.apple.developer.icloud-container-identifiers</key>\n<array>\n    <string>iCloud.dev.expo.my-app</string>\n</array>\n<key>com.apple.developer.icloud-services</key>\n<array>\n    <string>CloudDocuments</string>\n</array>\n<key>com.apple.developer.ubiquity-container-identifiers</key>\n<array>\n    <string>iCloud.dev.expo.my-app</string>\n</array>\n<key>com.apple.developer.ubiquity-kvstore-identifier</key>\n<string>$(TeamIdentifierPrefix)dev.expo.my-app</string>\n```\n\n----------------------------------------\n\nTITLE: Running Expo Prebuild with eas/prebuild in YAML (Simple Version)\nDESCRIPTION: Executes the 'expo prebuild' command with default settings and without any special parameters.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: Run prebuild script\n  steps:\n    - eas/checkout\n    - eas/install_node_modules\n    # @info #\n    - eas/prebuild\n    # @end #\n```\n\n----------------------------------------\n\nTITLE: Configuring baseUrl in app.json for GitHub Pages deployment of Expo web apps\nDESCRIPTION: Sets the experimental baseUrl property in app.json to enable correct asset loading when deploying to a GitHub Pages subdomain.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/publishing-websites.mdx#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"experiments\": {\n      \"baseUrl\": \"/expo-gh-pages\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Asynchronous Functions in JavaScript\nDESCRIPTION: Demonstrates how to import and use a native module with an asynchronous function from JavaScript using async/await syntax with the returned Promise.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/module-api.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { requireNativeModule } from 'expo-modules-core';\n\n// Assume that we have named the module \"MyModule\"\nconst MyModule = requireNativeModule('MyModule');\n\nasync function getMessageAsync() {\n  return await MyModule.myAsyncFunction('bar');\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Expo Clipboard Module\nDESCRIPTION: This JavaScript snippet imports the entire expo-clipboard library, which is used for clipboard operations. It highlights the module's core requirement for handling string operations on the clipboard across supported platforms.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/clipboard.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as Clipboard from 'expo-clipboard';\n```\n\n----------------------------------------\n\nTITLE: Configuring EAS Metadata with External Content in JavaScript\nDESCRIPTION: This snippet demonstrates how to fetch external content for localizations in a dynamic store config. It exports an async function that updates the config with fetched data and a dynamic copyright notice.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/metadata/config.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Use the data from `eas metadata:pull`\nconst config = require('./store.config.json');\n\nmodule.exports = async () => {\n  const year = new Date().getFullYear();\n  const info = await fetchLocalizations('...').then(response => response.json());\n\n  config.apple.copyright = `${year} Acme, Inc.`;\n  config.apple.info = info;\n\n  return config;\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Manual Last Update Date in MDX Frontmatter\nDESCRIPTION: This snippet demonstrates how to manually add a last update date to an MDX file using the modificationDate field in the frontmatter.\nSOURCE: https://github.com/expo/expo/blob/main/docs/README.md#2025-04-22_snippet_20\n\nLANGUAGE: mdx\nCODE:\n```\n---\nmodificationDate: April 8th, 2024\n{/* Other frontmatter fields */}\n---\n```\n\n----------------------------------------\n\nTITLE: Using Link Component in DOM for Web Navigation\nDESCRIPTION: Demonstrates how to use the Expo Router Link component within a DOM component for web navigation. This snippet shows a simple component with a heading and a link to an 'About' page.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/dom-components.mdx#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n'use dom';\nimport Link from 'expo-router/link';\n\nexport default function DOMComponent() {\n  return (\n    <div>\n      <h1>Hello, world!</h1>\n      <Link href=\"/about\">About</Link>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing APIInstallSection Component in JavaScript/TypeScript\nDESCRIPTION: Imports the `APIInstallSection` component from the local path '~/components/plugins/InstallSection'. This component is used within the documentation page to display formatted installation instructions, potentially tailored for API library setup.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/updates.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { APIInstallSection } from '~/components/plugins/InstallSection';\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint Plugins in .eslintrc (JSON)\nDESCRIPTION: Illustrates how to add the `expo` plugin to the `plugins` array within an `.eslintrc` configuration file. This step enables the rules provided by `eslint-plugin-expo`.\nSOURCE: https://github.com/expo/expo/blob/main/packages/eslint-plugin-expo/README.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    \"expo\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring LocalAuthentication Plugin in app.json\nDESCRIPTION: JSON configuration for the expo-local-authentication plugin in app.json. This example shows how to set the Face ID permission message for iOS.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/local-authentication.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-local-authentication\",\n        {\n          \"faceIDPermission\": \"Allow $(PRODUCT_NAME) to use Face ID.\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Android MainApplication Class\nDESCRIPTION: Creating a Kotlin class that extends Application and implements lifecycle listeners for Expo modules. This handles application lifecycle events for Expo modules.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/brownfield/installing-expo-modules.mdx#2025-04-22_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\ndiff --git a/android/app/src/main/java/com/<my-app-package>/MainApplication.kt b/android/app/src/main/java/com/<my-app-package>/MainApplication.kt\nnew file mode 100644\nindex 0000000..2c8525a\n--- /dev/null\n+++ b/android/app/src/main/java/com/<my-app-package>/MainApplication.kt\n@@ -0,0 +1,19 @@\n+package <my.app.package>\n+\n+import android.app.Application\n+import android.content.res.Configuration\n+import com.facebook.soloader.SoLoader\n+import expo.modules.ApplicationLifecycleDispatcher\n+\n+class MainApplication() : Application() {\n+    override fun onCreate() {\n+        super.onCreate()\n+        ApplicationLifecycleDispatcher.onApplicationCreate(this)\n+    }\n+\n+    override fun onConfigurationChanged(newConfig: Configuration) {\n+        super.onConfigurationChanged(newConfig)\n+        ApplicationLifecycleDispatcher.onConfigurationChanged(this, newConfig)\n+    }\n+}\n```\n\n----------------------------------------\n\nTITLE: Implementing Feed Screen Component\nDESCRIPTION: Creates a basic Feed screen component that displays text within the nested tab navigation.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/advanced/nesting-navigators.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { View, Text } from 'react-native';\n\nexport default function Feed() {\n  return (\n    <View>\n      <Text>Feed screen</Text>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Adding Base URL Prefix to Image Path\nDESCRIPTION: Example of manually adding the baseUrl prefix to an image source. This is necessary when directly referencing a resource URL rather than using require or import.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/more/expo-cli.mdx#2025-04-23_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function Blog() {\n  return <img src=\"/my-root/assets/image.png\" />;\n}\n```\n\n----------------------------------------\n\nTITLE: Regenerating iOS provisioning profile for standalone Expo build (Shell)\nDESCRIPTION: Regenerates the iOS provisioning profile and revokes old credentials before creating a new standalone Expo build. Ensures that the necessary Apple authentication entitlements are present for the app. Prerequisites include an Expo account and configured Apple authentication capability. Should be executed before building the standalone app for testing authentication.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-apple-authentication/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nexpo build:ios --clear-provisioning-profile --revoke-credentials\n```\n\n----------------------------------------\n\nTITLE: Importing Device API from expo-device (JavaScript)\nDESCRIPTION: Shows the import statement required to access the Device API from the expo-device library in a JavaScript file. This establishes access to all device methods and properties provided by expo-device. It should be used at the top of modules intending to access system or hardware information from the user's device. The only dependency is expo-device, and no input or output values are involved. The import must be located before Device API usage.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/device.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as Device from 'expo-device';\n```\n\n----------------------------------------\n\nTITLE: Rendering H3 Heading using RawH3 Component in JSX\nDESCRIPTION: Uses the imported `RawH3` React component in JSX syntax to render an HTML H3 heading with the text 'constants'. This demonstrates the usage of the custom component for semantic heading markup within a React-based environment like Expo.\nSOURCE: https://github.com/expo/expo/blob/main/docs/scenes/get-started/start-developing/ProjectStructure/files/constants.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<RawH3>constants</RawH3>\n```\n\n----------------------------------------\n\nTITLE: Setting up Blurhash Server Dependencies\nDESCRIPTION: Initial setup code for implementing blurhash generation on the server side using multer, sharp, and blurhash packages.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/image.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst multer = require('multer');\nconst sharp = require('sharp');\nconst { encode } = require('blurhash');\n\nconst upload = multer();\n```\n\n----------------------------------------\n\nTITLE: Installing expo-mail-composer in bare React Native projects\nDESCRIPTION: This command installs the expo-mail-composer package using npx and expo CLI. It should be run in the root directory of a bare React Native project after ensuring the expo package is installed and configured.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-mail-composer/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-mail-composer\n```\n\n----------------------------------------\n\nTITLE: Adding Calendar Permissions to Android Manifest\nDESCRIPTION: XML configuration to add READ_CALENDAR and WRITE_CALENDAR permissions to the Android manifest file for calendar access.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/calendar.mdx#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"android.permission.READ_CALENDAR\" />\n<uses-permission android:name=\"android.permission.WRITE_CALENDAR\" />\n```\n\n----------------------------------------\n\nTITLE: Feature Branch Change Detection\nDESCRIPTION: Setup for detecting changes in feature branches against a configured base branch.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-updates/e2e/setup/paths-filter/README.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  push:\n    branches:\n      - feature/**\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v4\n      with:\n        fetch-depth: 20\n    - uses: dorny/paths-filter@v3\n      id: filter\n      with:\n        base: develop\n        filters: ...\n```\n\n----------------------------------------\n\nTITLE: Reloading Server Components with useRouter\nDESCRIPTION: Example of how to manually trigger a reload of a Server Component using the router.reload() function from the useRouter hook. This is useful for refetching data or re-rendering components.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/server-components.mdx#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\nimport { useRouter } from 'expo-router';\nimport { Text } from 'react-native';\n\nexport function Button() {\n  const router = useRouter();\n  return (\n    <Text\n      onPress={() => {\n        // Reload the current route.\n        router.reload();\n      }}>\n      Reload current route\n    </Text>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Android Development Build - Shell\nDESCRIPTION: This command creates a development build for Android using EAS. It specifies the platform as Android and uses the 'development' profile defined in your `eas.json` file. This build is optimized for development and debugging.\nSOURCE: https://github.com/expo/expo/blob/main/docs/scenes/get-started/set-up-your-environment/instructions/androidSimulatedDevelopmentBuild.mdx#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n$ eas build --platform android --profile development\n```\n\n----------------------------------------\n\nTITLE: Running Expo Prebuild for Android Native Debugging\nDESCRIPTION: Generate native Android code from an Expo project to enable debugging in Android Studio. This command adds an android directory to your project root that can be used for native debugging.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/debugging/runtime-issues.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo prebuild -p android\n```\n\n----------------------------------------\n\nTITLE: Rendering BoxLink Components in JSX for Expo Go Documentation\nDESCRIPTION: This code snippet demonstrates the use of BoxLink components to create interactive links for additional learning resources. It imports icons and the BoxLink component, then renders two BoxLink elements with titles, descriptions, icons, and href attributes.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/third-party-overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { BookOpen02Icon } from '@expo/styleguide-icons/outline/BookOpen02Icon';\n\nimport { BoxLink } from '~/ui/components/BoxLink';\n\n<BoxLink\n  title=\"Using other third-party libraries\"\n  description=\"Learn how to use other third-party npm libraries in your project.\"\n  Icon={BookOpen02Icon}\n  href=\"/workflow/using-libraries/#third-party-libraries\"\n/>\n\n<BoxLink\n  title=\"Introduction to development builds\"\n  description=\"Learn why use development builds, and how to get started.\"\n  Icon={BookOpen02Icon}\n  href=\"/develop/development-builds/introduction/\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Adding HIGH_SAMPLING_RATE_SENSORS Permission in Android Manifest\nDESCRIPTION: Demonstrates how to add the HIGH_SAMPLING_RATE_SENSORS permission to the Android manifest file. This permission is required for sensor update intervals less than 200Hz on Android 12 and above.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/sensors.mdx#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"android.permission.HIGH_SAMPLING_RATE_SENSORS\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Concurrency Control in YAML\nDESCRIPTION: This snippet demonstrates how to configure concurrency control for EAS workflows using the `concurrency` setting in the YAML file, specifically to cancel in-progress workflows of the same branch.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/workflows/syntax.mdx#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n# @info #\nconcurrency:\n  cancel_in_progress: true\n  group: ${{ workflow.filename }}-${{ github.ref }}\n```\n\n----------------------------------------\n\nTITLE: Optimizing Initial Render with initialWindowMetrics\nDESCRIPTION: Example of optimizing the initial render by providing initialWindowMetrics to the SafeAreaProvider.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/safe-area-context.mdx#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SafeAreaProvider, initialWindowMetrics } from 'react-native-safe-area-context';\n\nfunction App() {\n  return <SafeAreaProvider initialMetrics={initialWindowMetrics}>...</SafeAreaProvider>;\n}\n```\n\n----------------------------------------\n\nTITLE: Logging in to EAS CLI\nDESCRIPTION: This command logs you into the EAS CLI using your Expo account. You must have an Expo account created prior to running this command.\nSOURCE: https://github.com/expo/expo/blob/main/docs/scenes/get-started/set-up-your-environment/instructions/iosPhysicalDevelopmentBuild.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ eas login\n```\n\n----------------------------------------\n\nTITLE: Importing expo-print Module\nDESCRIPTION: Basic import statement for the expo-print module to access its printing functions in a JavaScript or React Native application.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/print.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as Print from 'expo-print';\n```\n\n----------------------------------------\n\nTITLE: Installing Expo-Dev-Client with Expo\nDESCRIPTION: This command installs the expo-dev-client package to allow the app to be run on an Android device for development. The command must be run in the root directory of the Expo project.\nSOURCE: https://github.com/expo/expo/blob/main/docs/scenes/get-started/set-up-your-environment/instructions/androidPhysicalDevelopmentBuildLocal.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-dev-client\n```\n\n----------------------------------------\n\nTITLE: Forwarding Android Emulator Ports for Expo E2E Testing (Bash)\nDESCRIPTION: This command uses Android Debug Bridge (adb) to forward TCP port 4747 on the host to the emulator, enabling communication between the local test server and the Android emulator. Dependency is the Android SDK's 'adb' tool. Must be run with the emulator started. No parameters; provides transparent port forwarding for test communication.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-updates/e2e/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nadb reverse tcp:4747 tcp:4747\n```\n\n----------------------------------------\n\nTITLE: Importing Barometer from expo-sensors\nDESCRIPTION: This code snippet shows how to import the Barometer module from the expo-sensors package.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/barometer.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { Barometer } from 'expo-sensors';\n```\n\n----------------------------------------\n\nTITLE: GLView Import Statement\nDESCRIPTION: Shows how to import GLView component from expo-gl package.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/gl-view.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { GLView } from 'expo-gl';\n```\n\n----------------------------------------\n\nTITLE: Frontmatter Configuration - expo-updates Metadata\nDESCRIPTION: YAML frontmatter configuration defining metadata for the expo-updates documentation page including title, description, package information and platform support.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/updates.mdx#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Updates\ndescription: A library that enables your app to manage remote updates to your application code.\nsourceCodeUrl: 'https://github.com/expo/expo/tree/sdk-52/packages/expo-updates'\npackageName: 'expo-updates'\niconUrl: '/static/images/packages/expo-updates.png'\nplatforms: ['android', 'ios', 'tvos']\nsearchRank: 100\nsearchPosition: 1\n---\n```\n\n----------------------------------------\n\nTITLE: Running reset-project Script\nDESCRIPTION: Execute the reset-project script to remove boilerplate code and prepare the project for custom development.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/create-your-first-app.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run reset-project\n```\n\n----------------------------------------\n\nTITLE: Navigating to Package Directory in Shell\nDESCRIPTION: Command to navigate to the expo-constants package directory within the expo repository.\nSOURCE: https://github.com/expo/expo/blob/main/docs/README.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n# Navigate to expo-constants package directory inside expo/ repo\ncd expo/packages/expo-constants\n```\n\n----------------------------------------\n\nTITLE: Importing the Expo Battery Module (JavaScript)\nDESCRIPTION: This snippet shows how to import the entire expo-battery module as a namespace in JavaScript. This import is foundational before using specific APIs, constants, or hooks exposed by expo-battery. No dependencies are required apart from having expo-battery installed. The import does not require parameters and provides access to all methods and properties under the Battery namespace.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/battery.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as Battery from 'expo-battery';\n```\n\n----------------------------------------\n\nTITLE: ImagePicker Response Example\nDESCRIPTION: Example of the JSON response structure returned when an image is picked using the ImagePicker API.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/imagepicker.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"assets\": [\n    {\n      \"assetId\": \"C166F9F5-B5FE-4501-9531\",\n      \"base64\": null,\n      \"duration\": null,\n      \"exif\": null,\n      \"fileName\": \"IMG.HEIC\",\n      \"fileSize\": 6018901,\n      \"height\": 3025,\n      \"type\": \"image\",\n      \"uri\": \"file:///data/user/0/host.exp.exponent/cache/cropped1814158652.jpg\"\n      \"width\": 3024\n    }\n  ],\n  \"canceled\": false,\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating ASN1Decoder using CocoaPods in Ruby\nDESCRIPTION: This Ruby snippet shows how to add the ASN1Decoder dependency to an iOS project using CocoaPods. It specifies the platform version (iOS 9.0) and declares the 'ASN1Decoder' pod within the application's target.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-updates/ios/EXUpdates/ASN1Decoder/README.md#2025-04-22_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nplatform :ios, '9.0'\nuse_frameworks!\n\ntarget 'MyApp' do\n\tpod 'ASN1Decoder'\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Basic SVG Shapes in React Native\nDESCRIPTION: Example of creating a component with basic SVG shapes including a Circle and Rectangle, demonstrating viewport setup, shape attributes, and styling\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/svg.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Svg, { Circle, Rect } from 'react-native-svg';\n\nexport default function SvgComponent(props) {\n  return (\n    <Svg height=\"50%\" width=\"50%\" viewBox=\"0 0 100 100\" {...props}>\n      <Circle cx=\"50\" cy=\"50\" r=\"45\" stroke=\"blue\" strokeWidth=\"2.5\" fill=\"green\" />\n      <Rect x=\"15\" y=\"15\" width=\"70\" height=\"70\" stroke=\"red\" strokeWidth=\"2\" fill=\"yellow\" />\n    </Svg>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing SwiftUI components\nDESCRIPTION: This code snippet demonstrates how to import components from the `@expo/ui/swift-ui` package. Specifically, it shows how to import the `BottomSheet` component.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/ui.mdx#_snippet_15\n\nLANGUAGE: ts\nCODE:\n```\n// Import from the SwiftUI package\nimport { BottomSheet } from '@expo/ui/swift-ui';\n```\n\n----------------------------------------\n\nTITLE: Importing Expo BackgroundTask Module (JavaScript)\nDESCRIPTION: This snippet shows the standard way to import the `expo-background-task` library in a JavaScript or TypeScript file. This import statement makes the library's functions and types available under the `BackgroundTask` namespace.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/background-task.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport * as BackgroundTask from 'expo-background-task';\n```\n\n----------------------------------------\n\nTITLE: Setting FaceID Permission in Info.plist for iOS\nDESCRIPTION: Manual configuration for adding the NSFaceIDUsageDescription key to Info.plist when not using Continuous Native Generation, required for FaceID functionality on iOS.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/local-authentication.mdx#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<key>NSFaceIDUsageDescription</key>\n<string>Allow $(PRODUCT_NAME) to use FaceID</string>\n```\n\n----------------------------------------\n\nTITLE: Importing NavigationBar Module in JavaScript\nDESCRIPTION: This snippet shows how to import the NavigationBar module from the expo-navigation-bar package. This is the required import statement to use any of the navigation bar control functions provided by the module.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/navigation-bar.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as NavigationBar from 'expo-navigation-bar';\n```\n\n----------------------------------------\n\nTITLE: Listing connected Android devices using ADB\nDESCRIPTION: This command lists all connected Android devices that are recognized by ADB (Android Debug Bridge). It is used to verify that the Android device is properly connected to the computer.\nSOURCE: https://github.com/expo/expo/blob/main/docs/scenes/get-started/set-up-your-environment/instructions/androidPhysicalDevelopmentBuildLocal.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nadb devices\n```\n\nLANGUAGE: text\nCODE:\n```\nList of devices attached\n8AHX0T32K\tdevice\n```\n\n----------------------------------------\n\nTITLE: Importing Checkbox from expo-checkbox\nDESCRIPTION: This code snippet shows how to import the Checkbox component from the expo-checkbox package.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/checkbox.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport Checkbox from 'expo-checkbox';\n```\n\n----------------------------------------\n\nTITLE: Importing SystemUI from expo-system-ui\nDESCRIPTION: Basic import statement for using the expo-system-ui package in your application. This import gives access to all the available functions for interacting with system UI elements.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/system-ui.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as SystemUI from 'expo-system-ui';\n```\n\n----------------------------------------\n\nTITLE: Installing expo-calendar in bare React Native projects\nDESCRIPTION: Command to install the expo-calendar package using npx expo install. This is required for bare React Native projects after ensuring the expo package is installed and configured.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-calendar/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-calendar\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering RawH3 Component in React - JavaScript\nDESCRIPTION: This snippet imports the RawH3 component from a project-local path and uses it to render an 'hooks' heading. There are no external dependencies beyond a React environment and the referenced component. The purpose is to demonstrate documentation or structural markup for a section about hooks. No parameters are passed; the output is an H3 heading element as a part of the React component tree.\nSOURCE: https://github.com/expo/expo/blob/main/docs/scenes/get-started/start-developing/ProjectStructure/files/hooks.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { RawH3 } from '~/ui/components/Text';\n```\n\nLANGUAGE: JSX\nCODE:\n```\n<RawH3>hooks</RawH3>\n```\n\n----------------------------------------\n\nTITLE: Loading Local Image in React Native\nDESCRIPTION: Example of loading a local image asset using require statement in React Native Image component\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/user-interface/assets.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<Image source={require('./assets/images/example.png')} />\n```\n\n----------------------------------------\n\nTITLE: Implementing Android RadialChart Module in Kotlin\nDESCRIPTION: Module definition for the RadialChart component on Android, setting up the data prop and view binding.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/third-party-library.mdx#2025-04-22_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\npackage expo.modules.radialchart\n\nimport expo.modules.kotlin.modules.Module\nimport expo.modules.kotlin.modules.ModuleDefinition\n\nclass ExpoRadialChartModule : Module() {\n  override fun definition() = ModuleDefinition {\n    Name(\"ExpoRadialChart\")\n\n    View(ExpoRadialChartView::class) {\n      Prop(\"data\") { view: ExpoRadialChartView, prop: ArrayList<Series> ->\n        view.setChartData(prop);\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Dependencies Download Script\nDESCRIPTION: Command to run the setup script for downloading dependencies after performing a nuclear cleaning operation.\nSOURCE: https://github.com/expo/expo/blob/main/apps/expo-go/README.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/download-dependencies.sh\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple iOS Build Profiles in eas.json\nDESCRIPTION: This snippet shows how to define different schemes for development and production builds in the eas.json file. It specifies different build configurations and schemes for each profile.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/build-reference/variants.mdx#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"development\": {\n      \"ios\": {\n        \"buildConfiguration\": \"Debug\",\n        \"scheme\": \"myapp-dev\"\n      }\n    },\n    \"production\": {\n      \"ios\": {\n        \"buildConfiguration\": \"Release\",\n        \"scheme\": \"myapp\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Safe Area Insets with useSafeAreaInsets Hook in React Native (JSX)\nDESCRIPTION: Illustrates how to use the `useSafeAreaInsets` hook to get direct access to the safe area inset values (top, bottom, left, right). These values can then be used to manually apply styles, such as padding, to components. This method offers more control but might perform worse than `SafeAreaView` during device rotation.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/safe-area-context.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\n\nfunction HookComponent() {\n  const insets = useSafeAreaInsets();\n\n  return <View style={{ paddingTop: insets.top }} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Android: Using protected methods in Room DAO with KSP\nDESCRIPTION: Leverages KSP (Kotlin Symbol Processing) to enable the use of protected methods in Room Data Access Objects (DAOs) in the Android project, improving code organization and maintainability.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-updates/CHANGELOG.md#_snippet_2\n\nLANGUAGE: Kotlin\nCODE:\n```\n[Android] Use protected methods in room dao now that ksp allows it.\n```\n\n----------------------------------------\n\nTITLE: Parsing App Store Receipt using ASN1Decoder in Swift\nDESCRIPTION: This Swift code demonstrates how to parse an App Store receipt file using the ASN1Decoder library. It reads the receipt data, parses it as a PKCS7 container, and extracts receipt information like the original application version. It requires importing ASN1Decoder and handles potential errors during file reading or parsing.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-updates/ios/EXUpdates/ASN1Decoder/README.md#2025-04-22_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nimport ASN1Decoder\n\nif let appStoreReceiptURL = Bundle.main.appStoreReceiptURL,\n            FileManager.default.fileExists(atPath: appStoreReceiptURL.path) {\n\n    do {\n        let receiptData = try Data(contentsOf: appStoreReceiptURL, options: .alwaysMapped)\n\n        let pkcs7 = try PKCS7(data: receiptData)\n\n        if let receiptInfo = pkcs7.receipt() {\n            print(receiptInfo.originalApplicationVersion)\n        }\n\n    } catch {\n        print(error)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing StoreReview Module (JavaScript)\nDESCRIPTION: This snippet shows how to import the StoreReview module from the expo-store-review package.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/storereview.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as StoreReview from 'expo-store-review';\n```\n\n----------------------------------------\n\nTITLE: Running Linting for Code Format\nDESCRIPTION: Commands to fix code formatting using lint and ensure there are no errors or warnings.\nSOURCE: https://github.com/expo/expo/blob/main/CONTRIBUTING.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nyarn lint --fix\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn lint\n```\n\n----------------------------------------\n\nTITLE: Configuring EAS Build\nDESCRIPTION: This command configures the Expo Application Services (EAS) build process for the project. It typically creates or modifies the `eas.json` file, which contains the build configuration settings. This must be run within the project directory.\nSOURCE: https://github.com/expo/expo/blob/main/docs/scenes/get-started/set-up-your-environment/instructions/iosSimulatedDevelopmentBuild.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ eas build:configure\n```\n\n----------------------------------------\n\nTITLE: Implementing Virtual Modules in Metro (JavaScript)\nDESCRIPTION: This snippet demonstrates how to implement virtual modules in Metro by creating a module in the node_modules/.cache/ directory and redirecting resolution to that file. It creates a virtual module named 'virtual:my-module'.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/config/metro.mdx#2025-04-22_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nconst path = require('path');\nconst fs = require('fs');\n\nconst { getDefaultConfig } = require('expo/metro-config');\n\n/** @type {import('expo/metro-config').MetroConfig} */\nconst config = getDefaultConfig(__dirname);\n\nconst virtualPath = path.resolve(__dirname, 'node_modules/.cache/virtual/virtual-module.js');\n\n// Create the virtual module in a generated directory...\nfs.mkdirSync(path.dirname(virtualPath), { recursive: true });\nfs.writeFileSync(virtualPath, 'export default \"Hello World\";');\n\nconfig.resolver.resolveRequest = (context, moduleName, platform) => {\n  if (moduleName === 'virtual:my-module') {\n    return {\n      filePath: virtualPath,\n      type: 'sourceFile',\n    };\n  }\n\n  // Ensure you call the default resolver.\n  return context.resolveRequest(context, moduleName, platform);\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Custom Text Component with JSX - JavaScript\nDESCRIPTION: This snippet demonstrates how to import a custom heading component (RawH3) from a project's UI library and use it within JSX to display the section title 'assets'. Dependencies include the '~/ui/components/Text' module, which must export the RawH3 component. The main input is the string to be rendered as a heading, and the output is a styled heading in the rendered UI. The snippet assumes that the code runs in a React-compatible environment and that the project uses module aliasing for imports.\nSOURCE: https://github.com/expo/expo/blob/main/docs/scenes/get-started/start-developing/ProjectStructure/files/assets.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { RawH3 } from '~/ui/components/Text';\n\n<RawH3>assets</RawH3>\n```\n\n----------------------------------------\n\nTITLE: Installing expo-apple-authentication with npx (Shell)\nDESCRIPTION: Installs the expo-apple-authentication module using Expo CLI in a JavaScript or React Native project. This command adds support for Apple authentication in managed or bare Expo projects. Requires the Expo CLI to be installed, and should be run in the project root. No input parameters are needed; upon success, expo-apple-authentication will be listed in package.json.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-apple-authentication/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx expo install expo-apple-authentication\n```\n\n----------------------------------------\n\nTITLE: React Native Dependencies Exclusion\nDESCRIPTION: Configuration example for excluding non-Expo packages from React Native's autolinking system using react-native.config.js.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/autolinking.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  dependencies: {\n    'library-name': {\n      platforms: {\n        android: null,\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Jobs in YAML\nDESCRIPTION: This snippet shows how to define jobs within an EAS workflow using the `jobs` key in a YAML file. Each job is defined with a unique ID and can contain various configurations.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/workflows/syntax.mdx#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  # @info #\n  job_1:\n    # ...\n  job_2:\n    # ...\n  # @end #\n```\n\n----------------------------------------\n\nTITLE: Importing Accelerometer from expo-sensors\nDESCRIPTION: Shows how to import the Accelerometer module from the expo-sensors package. This is the basic import statement needed before using any Accelerometer functionality.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/accelerometer.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { Accelerometer } from 'expo-sensors';\n```\n\n----------------------------------------\n\nTITLE: Blocking Screen Capture Imperatively in React Native\nDESCRIPTION: This snippet shows how to block and allow screen capture using imperative calls in a React Native app. It works by using `ScreenCapture.preventScreenCaptureAsync` and `ScreenCapture.allowScreenCaptureAsync` methods, allowing users to manually toggle screen capture ability through button interactions.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/screen-capture.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as ScreenCapture from 'expo-screen-capture';\nimport { useEffect } from 'react';\nimport { Button, StyleSheet, View } from 'react-native';\n\nexport default function ScreenCaptureExample() {\n  const activate = async () => {\n    await ScreenCapture.preventScreenCaptureAsync();\n  };\n\n  const deactivate = async () => {\n    await ScreenCapture.allowScreenCaptureAsync();\n  };\n\n  return (\n    <View style={styles.container}>\n      <Button title=\"Activate\" onPress={activate} />\n      <Button title=\"Deactivate\" onPress={deactivate} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing the Android WebView Native Component\nDESCRIPTION: Kotlin implementation of the Android WebView that loads a hardcoded URL. The code uses LayoutParams to match the parent view's dimensions.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/native-view-tutorial.mdx#2025-04-22_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\npackage expo.modules.webview\n\nimport android.content.Context\nimport android.webkit.WebView\nimport android.webkit.WebViewClient\nimport expo.modules.kotlin.AppContext\nimport expo.modules.kotlin.views.ExpoView\n\nclass ExpoWebView(context: Context, appContext: AppContext) : ExpoView(context, appContext) {\n  internal val webView = WebView(context).also {\n    it.layoutParams = LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT)\n    it.webViewClient = object : WebViewClient() {}\n    addView(it)\n\n    it.loadUrl(\"https://docs.expo.dev/modules/\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding FileSystem Permissions to Android Manifest\nDESCRIPTION: This XML snippet shows the required permissions that need to be added to the Android manifest file for the Expo FileSystem module to function properly. It includes permissions for reading and writing external storage, as well as internet access.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-file-system/README.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Added permissions -->\n<uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\" />\n<uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\n<uses-permission android:name=\"android.permission.INTERNET\" />\n```\n\n----------------------------------------\n\nTITLE: Importing Android Emulator and Studio Instructions in JSX\nDESCRIPTION: This code snippet imports components for Android Emulator and Android Studio instructions, likely containing step-by-step guides for setup.\nSOURCE: https://github.com/expo/expo/blob/main/docs/scenes/get-started/set-up-your-environment/instructions/androidSimulatedExpoGo.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport AndroidEmulatorInstructions from './_androidEmulatorInstructions.mdx';\nimport AndroidStudioInstructions from './_androidStudioInstructions.mdx';\n```\n\n----------------------------------------\n\nTITLE: Version Tracking Changelog in Markdown\nDESCRIPTION: A markdown formatted changelog tracking version history including breaking changes, new features, bug fixes and other updates across multiple releases\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-web-browser/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Changelog\n\n## Unpublished\n\n### 🛠 Breaking changes\n\n### 🎉 New features\n\n### 🐛 Bug fixes\n\n### 💡 Others\n```\n\n----------------------------------------\n\nTITLE: Installing expo-screen-capture in bare React Native projects\nDESCRIPTION: Command to install the expo-screen-capture package using npx and expo CLI. This is used for adding the package to npm dependencies in bare React Native projects.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-screen-capture/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-screen-capture\n```\n\n----------------------------------------\n\nTITLE: Importing BlurView from expo-blur\nDESCRIPTION: Simple import statement for the BlurView component from the expo-blur package, which is necessary before using the component in your React Native application.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/blur-view.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { BlurView } from 'expo-blur';\n```\n\n----------------------------------------\n\nTITLE: Disabling NPM Cache in EAS Build Configuration\nDESCRIPTION: This JSON snippet shows how to disable the npm cache server for EAS builds by setting the EAS_BUILD_DISABLE_NPM_CACHE environment variable to '1' in the eas.json configuration file.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/build-reference/caching.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"production\": {\n      \"env\": {\n        \"EAS_BUILD_DISABLE_NPM_CACHE\": \"1\"\n        /* @hide ... */ /* @end */\n      }\n      /* @hide ... */ /* @end */\n    }\n    /* @hide ... */ /* @end */\n  }\n  /* @hide ... */ /* @end */\n}\n```\n\n----------------------------------------\n\nTITLE: Basic GET Request Handler in Expo Router\nDESCRIPTION: Demonstrates a simple GET request handler that returns a JSON response with a hello world message.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/reference/api-routes.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport function GET(request: Request) {\n  return Response.json({ hello: 'world' });\n}\n```\n\n----------------------------------------\n\nTITLE: Managed Project Build Profile Configuration\nDESCRIPTION: Example configuration for a managed Expo project with multiple build profiles including base, development, staging, and production. Demonstrates environment variables, platform-specific settings, and profile inheritance.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/build/eas-json.mdx#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"base\": {\n      \"node\": \"12.13.0\",\n      \"yarn\": \"1.22.5\",\n      \"env\": {\n        \"EXAMPLE_ENV\": \"example value\"\n      },\n      \"android\": {\n        \"image\": \"default\",\n        \"env\": {\n          \"PLATFORM\": \"android\"\n        }\n      },\n      \"ios\": {\n        \"image\": \"latest\",\n        \"env\": {\n          \"PLATFORM\": \"ios\"\n        }\n      }\n    },\n    \"development\": {\n      \"extends\": \"base\",\n      \"developmentClient\": true,\n      \"env\": {\n        \"ENVIRONMENT\": \"development\"\n      },\n      \"android\": {\n        \"distribution\": \"internal\",\n        \"withoutCredentials\": true\n      },\n      \"ios\": {\n        \"simulator\": true\n      }\n    },\n    \"staging\": {\n      \"extends\": \"base\",\n      \"env\": {\n        \"ENVIRONMENT\": \"staging\"\n      },\n      \"distribution\": \"internal\",\n      \"android\": {\n        \"buildType\": \"apk\"\n      }\n    },\n    \"production\": {\n      \"extends\": \"base\",\n      \"env\": {\n        \"ENVIRONMENT\": \"production\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing NavigationBar from expo-navigation-bar\nDESCRIPTION: Example showing how to import the NavigationBar module from the expo-navigation-bar package to access navigation bar control functionality.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/navigation-bar.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as NavigationBar from 'expo-navigation-bar';\n```\n\n----------------------------------------\n\nTITLE: Prebuilding Expo app with latest SDK\nDESCRIPTION: These commands create a fresh Expo project with the latest SDK, manually linking necessary dev-client dependencies, and finalize the setup by prebuilding. Address any iOS duplicated source issues by adjusting Podfile links manually.\nSOURCE: https://github.com/expo/expo/blob/main/guides/releasing/Quality Assurance.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-expo-app\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpx expo prebuild\n```\n\n----------------------------------------\n\nTITLE: Implementing MeshGradientView in React Native\nDESCRIPTION: This snippet demonstrates how to import and use the MeshGradientView component from expo-mesh-gradient. It shows how to configure the gradient with columns, rows, colors, and points properties.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/mesh-gradient.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { MeshGradientView } from 'expo-mesh-gradient';\n\nfunction App() {\n  return (\n    <MeshGradientView\n      style={{ flex: 1 }}\n      columns={3}\n      rows={3}\n      colors={['red', 'purple', 'indigo', 'orange', 'white', 'blue', 'yellow', 'green', 'cyan']}\n      points={[\n        [0.0, 0.0],\n        [0.5, 0.0],\n        [1.0, 0.0],\n        [0.0, 0.5],\n        [0.5, 0.5],\n        [1.0, 0.5],\n        [0.0, 1.0],\n        [0.5, 1.0],\n        [1.0, 1.0],\n      ]}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using DateTimePicker Component with Jetpack Compose\nDESCRIPTION: This code snippet demonstrates how to use the `DateTimePicker` component from `@expo/ui/jetpack-compose`. It imports the `DateTimePicker` component and configures it to display only the date, setting an initial date and using a picker variant.  The `onDateSelected` prop handles date selection events.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/ui.mdx#_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DateTimePicker } from '@expo/ui/jetpack-compose';\n\n<DateTimePicker\n  onDateSelected={date => {\n    setSelectedDate(date);\n  }}\n  displayedComponents='date'\n  initialDate={selectedDate.toISOString()}\n  variant='picker'\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Expo Localization in app.json\nDESCRIPTION: Configuration example showing how to enable expo-localization plugin in the Expo app config file. This is required when using config plugins with EAS Build or expo run commands.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/localization.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\"expo-localization\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Brightness Usage in React Native\nDESCRIPTION: Example of using the expo-brightness package to set system brightness to maximum after requesting permissions.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/brightness.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEffect } from 'react';\nimport { StyleSheet, View, Text } from 'react-native';\nimport * as Brightness from 'expo-brightness';\n\nexport default function App() {\n  useEffect(() => {\n    (async () => {\n      const { status } = await Brightness.requestPermissionsAsync();\n      if (status === 'granted') {\n        Brightness.setSystemBrightnessAsync(1);\n      }\n    })();\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <Text>Brightness Module Example</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable ImageViewer Component\nDESCRIPTION: Separating the image display logic into a reusable ImageViewer component for better code organization.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/build-a-screen.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StyleSheet } from 'react-native';\nimport { Image, type ImageSource } from 'expo-image';\n\ntype Props = {\n  imgSource: ImageSource;\n};\n\nexport default function ImageViewer({ imgSource }: Props) {\n  return <Image source={imgSource} style={styles.image} />;\n}\n\nconst styles = StyleSheet.create({\n  image: {\n    width: 320,\n    height: 440,\n    borderRadius: 18,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Handling JavaScript Values in iOS/Android\nDESCRIPTION: Examples of working with JavaScript values and objects in native code, including mutation and property access.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/module-api.mdx#2025-04-22_snippet_28\n\nLANGUAGE: swift\nCODE:\n```\nFunction(\"mutateMe\") { (value: JavaScriptValue) in\n  if value.isObject() {\n    let jsObject = value.getObject()\n    jsObject.setProperty(\"expo\", value: \"modules\")\n  }\n}\n\n// or\n\nFunction(\"mutateMe\") { (jsObject: JavaScriptObject) in\n  jsObject.setProperty(\"expo\", value: \"modules\")\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nFunction(\"mutateMe\") { value: JavaScriptValue ->\n  if (value.isObject()) {\n    val jsObject = value.getObject()\n    jsObject.setProperty(\"expo\", \"modules\")\n  }\n}\n\n// or\n\nFunction(\"mutateMe\") { jsObject: JavaScriptObject ->\n  jsObject.setProperty(\"expo\", \"modules\")\n}\n```\n\n----------------------------------------\n\nTITLE: Executing SQLite Statements Outside Transactions in Expo\nDESCRIPTION: Method for executing SQL statements outside of a transaction, which is necessary for certain operations like PRAGMA statements that are no-ops within transactions.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/sqlite-legacy.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as SQLite from 'expo-sqlite/legacy';\n\nconst db = SQLite.openDatabase('dbName', version);\n\nawait db.execAsync([{ sql: 'PRAGMA foreign_keys = ON;', args: [] }], false);\nconsole.log('Foreign keys turned on');\n```\n\n----------------------------------------\n\nTITLE: Running EAS Local Build with CLI (Bash)\nDESCRIPTION: These commands invoke EAS CLI to initialize and start a local build of the project for the specified platform. Dependencies include EAS CLI set up for local builds as per the prior script, as well as project and environment configuration. Outputs locally built app artifacts. Replace <android|ios> with the desired platform.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-updates/e2e/README.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\neas init\\neas build --profile=updates_testing_debug --platform=<android|ios> --local\n```\n\n----------------------------------------\n\nTITLE: Importing TaskManager in JavaScript\nDESCRIPTION: This snippet shows how to import the TaskManager module from expo-task-manager package in a JavaScript file.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/task-manager.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as TaskManager from 'expo-task-manager';\n```\n\n----------------------------------------\n\nTITLE: Adding Web Support for Vibration API in JavaScript\nDESCRIPTION: Added web support for haptics using the Web Vibration API.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-haptics/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- [Web] Add web support using Web Vibration API. ([#34131](https://github.com/expo/expo/pull/34131) by [@reichhartd](https://github.com/reichhartd))\n```\n\n----------------------------------------\n\nTITLE: ImagePicker Response Object Example\nDESCRIPTION: Example of the JSON response returned by the ImagePicker when an image is selected. This shows the structure of the response object including properties of the selected asset such as URI, dimensions, and file information.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/imagepicker.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"assets\": [\n    {\n      \"assetId\": \"C166F9F5-B5FE-4501-9531\",\n      \"base64\": null,\n      \"duration\": null,\n      \"exif\": null,\n      \"fileName\": \"IMG.HEIC\",\n      \"fileSize\": 6018901,\n      \"height\": 3025,\n      \"type\": \"image\",\n      \"uri\": \"file:///data/user/0/host.exp.exponent/cache/cropped1814158652.jpg\"\n      \"width\": 3024\n    }\n  ],\n  \"canceled\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Bypass Hosts for Charles Proxy\nDESCRIPTION: Specifies localhost and *.local as hosts to bypass external proxies in Charles configuration.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/troubleshooting/proxies.mdx#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nlocalhost\n*.local\n```\n\n----------------------------------------\n\nTITLE: Importing Linking from expo-linking in JavaScript\nDESCRIPTION: Basic import statement for the expo-linking package which provides utilities for creating and handling deep links between apps.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/linking.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Linking from 'expo-linking';\n```\n\n----------------------------------------\n\nTITLE: Configuring Main Entry Point for Expo Module\nDESCRIPTION: Package.json configuration for specifying the compiled module entry point\nSOURCE: https://github.com/expo/expo/blob/main/guides/Expo Module Infrastructure.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"main\": \"build/ExampleModule.js\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using React Helmet Async Without Context in JavaScript\nDESCRIPTION: Demonstrates how to use react-helmet-async without a context by manually creating a stateful HelmetData instance. This approach allows for more flexibility in certain scenarios where context is not desired or available.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-router/vendor/react-helmet-async/README.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { renderToString } from 'react-dom/server';\nimport { Helmet, HelmetProvider, HelmetData } from 'react-helmet-async';\n\nconst helmetData = new HelmetData({});\n\nconst app = (\n    <App>\n      <Helmet helmetData={helmetData}>\n        <title>Hello World</title>\n        <link rel=\"canonical\" href=\"https://www.tacobell.com/\" />\n      </Helmet>\n      <h1>Hello World</h1>\n    </App>\n);\n\nconst html = renderToString(app);\n\nconst { helmet } = helmetData.context;\n```\n\n----------------------------------------\n\nTITLE: Using Global CSS Styles in Expo Components\nDESCRIPTION: Example showing how to import and use global CSS styles in Expo components, including usage with both React DOM and React Native components.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/config/metro.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport './styles.css';\nimport { View } from 'react-native';\n\nexport default function App() {\n  return (\n    <>\n      {/* Use `className` to assign the style with React DOM components. */}\n      <div className=\"container\">Hello World</div>\n\n      {/* Use `style` with the following syntax to append class names in React Native for web. */}\n      <View\n        style={{\n          $$css: true,\n          _: 'container',\n        }}>\n        Hello World\n      </View>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Expo Image Component\nDESCRIPTION: Simple import statement for the Image component from expo-image package.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/image.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { Image } from 'expo-image';\n```\n\n----------------------------------------\n\nTITLE: Cloning the Expo Repository with Git\nDESCRIPTION: Command for cloning the Expo GitHub repository to set up the documentation locally.\nSOURCE: https://github.com/expo/expo/blob/main/docs/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/expo/expo.git\n```\n\n----------------------------------------\n\nTITLE: Using the useKeepAwake Hook in React Native\nDESCRIPTION: This example demonstrates how to use the useKeepAwake hook to prevent the screen from sleeping as long as the component is mounted. The hook requires no parameters and is active for the component's lifecycle.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/keep-awake.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useKeepAwake } from 'expo-keep-awake';\nimport React from 'react';\nimport { Text, View } from 'react-native';\n\nexport default function KeepAwakeExample() {\n  /* @info As long as this component is mounted, the screen will not turn off from being idle. */\n  useKeepAwake();\n  /* @end */\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>This screen will never sleep!</Text>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Example useThemeColor Hook Usage Reference - JavaScript\nDESCRIPTION: This snippet demonstrates the use of the useThemeColor React hook, meant to illustrate how hooks can return contextual theme variables. It requires that the useThemeColor hook is defined elsewhere in the project and that a theme context provider exists. The key parameter(s) (not shown here) would typically be a color key or mode; the output is the resolved color value. The code showcases an example pattern for using shared logic via custom hooks.\nSOURCE: https://github.com/expo/expo/blob/main/docs/scenes/get-started/start-developing/ProjectStructure/files/hooks.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nuseThemeColor()\n```\n\n----------------------------------------\n\nTITLE: Android Start Command\nDESCRIPTION: Fastlane command to start Android build process.\nSOURCE: https://github.com/expo/expo/blob/main/fastlane/README.md#2025-04-22_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\n[bundle exec] fastlane android start\n```\n\n----------------------------------------\n\nTITLE: Enabling Full React Server Components Mode in app.json\nDESCRIPTION: Configuration example for enabling full React Server Components mode in an Expo app. This experimental mode makes server components the default rendering mode for routes.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/server-components.mdx#2025-04-22_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"experiments\": {\n      \"reactServerFunctions\": true,\n      \"reactServerComponentRoutes\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-asset Plugin in app.json\nDESCRIPTION: Configuration for the expo-asset plugin in app.json that allows embedding asset files in the native project. The plugin enables specifying asset files or directories to be linked to the native project.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/asset.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-asset\",\n        {\n          \"assets\": [\"path/to/file.png\", \"path/to/directory\"]\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Path Aliases in Expo app.json\nDESCRIPTION: Configuration for disabling the default tsconfigPaths feature in Expo SDK 50 and above by setting the experiment flag to false in the app config.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/typescript.mdx#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"experiments\": {\n      \"tsconfigPaths\": false\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GLView Integration with Reanimated Worklets\nDESCRIPTION: Shows how to use GLView within Reanimated worklets by passing GL context ID and recreating GL object in the worklet thread. Includes basic setup with worklet support enabled.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/gl-view.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { View } from 'react-native';\nimport { runOnUI } from 'react-native-reanimated';\nimport { GLView } from 'expo-gl';\n\nfunction render(gl) {\n  'worklet';\n  // add your WebGL code here\n}\n\nfunction onContextCreate(gl) {\n  runOnUI((contextId: number) => {\n    'worklet';\n    const gl = GLView.getWorkletContext(contextId);\n    render(gl);\n  })(gl.contextId);\n}\n\nexport default function App() {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <GLView\n        style={{ width: 300, height: 300 }}\n        enableExperimentalWorkletSupport\n        onContextCreate={onContextCreate}\n      />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: DateTimePicker Component Usage (SwiftUI)\nDESCRIPTION: This code snippet demonstrates how to use the DateTimePicker component from the `@expo/ui/swift-ui` library. The `onDateSelected` prop is used to define the action when a date is selected. `displayedComponents` is set to `'date'` to only show the date. `initialDate` is set to a date string, and `variant` is set to `'wheel'` to use a wheel picker.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/ui.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DateTimePicker } from '@expo/ui/swift-ui';\n\n<DateTimePicker\n  onDateSelected={date => {\n    setSelectedDate(date);\n  }}\n  displayedComponents='date'\n  initialDate={selectedDate.toISOString()}\n  variant='wheel'\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Text Elements in Expo\nDESCRIPTION: Demonstrates usage of various text elements including paragraphs, bold, italic, and code formatting.\nSOURCE: https://github.com/expo/expo/blob/main/packages/html-elements/README.md#2025-04-22_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nimport { P, B, S, I, BR, Code } from '@expo/html-elements';\n\nexport default () => (\n  <>\n    <P>\n      Hello<B>World (in bold)</B>\n    </P>\n    <S>strike text</S>\n    <BR />\n    <I>Italic</I>\n    <Code>const foo = true</Code>\n  </>\n);\n```\n\n----------------------------------------\n\nTITLE: Importing BarCodeScanner Component in JavaScript\nDESCRIPTION: This JavaScript import statement shows how to include the BarCodeScanner component from expo-barcode-scanner in a project file, enabling barcode scanning functionalities.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/bar-code-scanner.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { BarCodeScanner } from 'expo-barcode-scanner';\n```\n\n----------------------------------------\n\nTITLE: Server Actions Implementation\nDESCRIPTION: Server-side actions implementation with profile rendering example\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/server-components.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n'use server';\n\n// Optional: Import \"server-only\" for sanity.\nimport 'server-only';\n\nimport { View, Image, Text } from 'react-native';\n\nexport async function renderProfile({\n  username,\n  accessToken,\n}: {\n  username: string;\n  accessToken: string;\n}) {\n  // NOTE: Rate limits, GDPR, and other server-side operations can be done here.\n\n  // Fetch some data securely from an API.\n  const { name, image } = await fetch(`https://api.example.com/profile/${username}`, {\n    headers: {\n      Authorization: `Bearer ${accessToken}`,\n      // Use secret environment variables securely as this code will live on the server.\n      // The EXPO_PUBLIC_ prefix is not required here.\n      'X-Secret': process.env.SECRET,\n    },\n  }).then(res => res.json());\n\n  // Render\n  return (\n    <View>\n      <Image source={{ uri: image }} />\n      <Text>{name}</Text>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing expo-system-ui with Expo CLI - Bash\nDESCRIPTION: This code snippet demonstrates how to install the expo-system-ui package using the Expo CLI's install command. It requires Node.js, npm, and the Expo CLI to be available in your environment. The command downloads and adds expo-system-ui to your project's dependencies, ensuring compatibility with your Expo version. No input is required, and the output is the installation of expo-system-ui within your node_modules folder. Run this command from your project root folder within a terminal or command prompt.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-system-ui/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-system-ui\n```\n\n----------------------------------------\n\nTITLE: Installing expo-clipboard in bare React Native projects\nDESCRIPTION: Command to install the expo-clipboard package in a bare React Native project using Expo's package manager. After installation, iOS projects require running pod-install while Android requires no additional configuration.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-clipboard/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-clipboard\n```\n\n----------------------------------------\n\nTITLE: Importing Expo Manifests Library in JavaScript\nDESCRIPTION: This code snippet demonstrates how to import all exports from the expo-manifests package for use in your Expo application.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/manifests.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Manifests from 'expo-manifests';\n```\n\n----------------------------------------\n\nTITLE: Importing expo-haptics Module\nDESCRIPTION: Shows how to import the Haptics module from the expo-haptics package to use in a JavaScript or TypeScript application.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/haptics.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as Haptics from 'expo-haptics';\n```\n\n----------------------------------------\n\nTITLE: Code Block Syntax Examples in MDX\nDESCRIPTION: Examples of different ways to format and configure code blocks in MDX documentation.\nSOURCE: https://github.com/expo/expo/blob/main/docs/README.md#2025-04-22_snippet_15\n\nLANGUAGE: mdx\nCODE:\n```\n    {/* For plain code block the syntax is unchanged (but we recommend to always add a title to the snippet): */}\n    ```js\n    // Your code goes in here\n    ```\n\n    {/* To add a title, enter it right after the language, in the code block starting line: */}\n    ```js myFile.js\n    // Your code goes in here\n    ```\n    ```js Title for a code block\n    // Your code goes in here\n    ```\n\n    {/* Title and params can be separated by pipe (\"|\") characters, but they also work for block without a title: */}\n    ```js myFile.js|collapseHeight=600\n    // Your code goes in here\n    ```\n    ```js collapseHeight=200\n    // Your code goes in here\n    ```\n```\n\n----------------------------------------\n\nTITLE: Installing expo-live-photo package in bare React Native projects\nDESCRIPTION: Command to install the expo-live-photo package using npm. This is required for bare React Native projects after ensuring the expo package is installed and configured.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-live-photo/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install expo-live-photo\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Task in expo-task-manager\nDESCRIPTION: Update to the defineTask function to accept type arguments for better TypeScript support.\nSOURCE: https://github.com/expo/expo/blob/main/CHANGELOG.md#2025-04-22_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\ndefineTask<T>() // Added type argument support\n```\n\n----------------------------------------\n\nTITLE: Importing Video Component from expo-av\nDESCRIPTION: Shows the proper import statement for the Video component from the expo-av package. This is the basic setup required before using the Video component in a React Native application.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/video.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { Video } from 'expo-av';\n```\n\n----------------------------------------\n\nTITLE: Rendering BoxLink Component for FAQs Section in React\nDESCRIPTION: This code snippet shows the BoxLink component implementation for the Frequently Asked Questions section. It links to a reference page addressing common questions about EAS plans, billing, and payment processes.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/billing/overview.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<BoxLink\n  title=\"FAQs\"\n  description=\"A reference of commonly asked questions on Expo Application Services (EAS) plans, billing, and payment.\"\n  href=\"/billing/faq/\"\n  Icon={CreditCard02Icon}\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing Expo Package via npm\nDESCRIPTION: This command installs the specified Expo package using npm. The package name is represented by a placeholder variable.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-module-scripts/templates/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install ${packageName}\n```\n\n----------------------------------------\n\nTITLE: Installing expo-sharing in Bare React Native Projects via Expo CLI\nDESCRIPTION: This shell command uses `npx` to execute the Expo CLI's install command. It adds the `expo-sharing` package and its native dependencies to a bare React Native project, ensuring compatibility and handling necessary linking. This command should be run within the project directory after ensuring the `expo` package is already installed and configured.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-sharing/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx expo install expo-sharing\n```\n\n----------------------------------------\n\nTITLE: Setting Page Margins for iOS Printing\nDESCRIPTION: Example of how to set custom page margins when printing on iOS devices using the margins option with printToFileAsync.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/print.mdx#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst { uri } = await Print.printToFileAsync({\n  html: 'This page is printed with margins',\n  margins: {\n    left: 20,\n    top: 50,\n    right: 20,\n    bottom: 100,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Importing APIInstallSection Component in Markdown\nDESCRIPTION: This code snippet imports the APIInstallSection component from a local file path. It's used to include installation instructions for the react-native-gesture-handler library.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/gesture-handler.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nimport { APIInstallSection } from '~/components/plugins/InstallSection';\n```\n\n----------------------------------------\n\nTITLE: Configuring Expo Fingerprint via fingerprint.config.js (Direct Dependency)\nDESCRIPTION: Example `fingerprint.config.js` file for customizing the fingerprint calculation. This configuration uses JSDoc for type hints and exports an object specifying `sourceSkips` to exclude certain default hash sources. This version assumes `@expo/fingerprint` is a direct project dependency.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/fingerprint.mdx#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n/** @type {import('@expo/fingerprint').Config} */\nconst config = {\n  sourceSkips: [\n    'ExpoConfigRuntimeVersionIfString',\n    'ExpoConfigVersions',\n    'PackageJsonAndroidAndIosScriptsIfNotContainRun',\n  ],\n};\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Importing BlurView Component (JavaScript)\nDESCRIPTION: Shows the standard ES6 import statement required to bring the `BlurView` component from the `expo-blur` package into a JavaScript or React Native file. This is the first step before using the component in your application.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/blur-view.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { BlurView } from 'expo-blur';\n```\n\n----------------------------------------\n\nTITLE: Platform-specific Code Removal in React Native\nDESCRIPTION: Demonstrates how platform-specific code is automatically removed during bundling based on Platform.OS checks.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/tree-shaking.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Platform } from 'react-native';\n\nif (Platform.OS === 'ios') {\n  console.log('Hello on iOS');\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling Initial Route Override Behavior with Link and Router\nDESCRIPTION: Demonstrates how to disable the default behavior where navigating to a route makes it the initial route. Shows both declarative (Link) and imperative (router) approaches.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/advanced/router-settings.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// If this navigates to a new _layout, don't override the initial route\n<Link href=\"/route\" initial={false} />;\n\nrouter.push('/route', { overrideInitialScreen: false });\n```\n\n----------------------------------------\n\nTITLE: Package.json Configuration for Bundle Analysis\nDESCRIPTION: JSON configuration for package.json to add bundle analysis scripts for different platforms.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/analyzing-bundles.mdx#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"analyze:web\": \"source-map-explorer 'dist/_expo/static/js/web/*.js' 'dist/_expo/static/js/web/*.js.map'\",\n    \"analyze:ios\": \"source-map-explorer 'dist/_expo/static/js/ios/*.js' 'dist/_expo/static/js/ios/*.js.map'\",\n    \"analyze:android\": \"source-map-explorer 'dist/_expo/static/js/android/*.js' 'dist/_expo/static/js/android/*.js.map'\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Navigation Error Example\nDESCRIPTION: Example of an error message that occurs when attempting navigation before mounting the Root Layout component.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/advanced/authentication.mdx#2025-04-22_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nError: Attempted to navigate before mounting the Root Layout component. Ensure the Root Layout component is rendering a Slot, or other navigator on the first render.\n```\n\n----------------------------------------\n\nTITLE: Web RTL Support Implementation\nDESCRIPTION: Implementation of RTL support for web platform using react-native-web and expo-localization to handle text direction.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/localization.mdx#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { View } from 'react-native';\nimport { getLocales } from 'expo-localization';\n// ...\n\nreturn <View dir={getLocales()[0].textDirection || 'ltr'}>...</View>;\n```\n\n----------------------------------------\n\nTITLE: React Native Branch Naming Convention\nDESCRIPTION: Demonstrates the naming pattern used for SDK branches in the React Native fork. The pattern follows 'sdk-*' where * represents the SDK version number.\nSOURCE: https://github.com/expo/expo/blob/main/react-native-lab/README.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nsdk-*\n```\n\n----------------------------------------\n\nTITLE: Loading Static Images in Expo React Native\nDESCRIPTION: Example of accessing static images in an Expo application using relative paths. Shows how to load and display an image file from the public directory.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/reference/static-rendering.mdx#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Image } from 'react-native';\n\nexport default function Page() {\n  return <Image source={{ uri: '/logo.png' }} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Expo Task Manager for iOS\nDESCRIPTION: This shell command configures the iOS project to use the 'expo-task-manager' API. It installs necessary CocoaPods dependencies. Ensure your app setup includes background task capabilities by modifying the Info.plist as per the guide.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-task-manager/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx pod-install\n```\n\n----------------------------------------\n\nTITLE: Generating Dynamic Project Header in HTML/EJS\nDESCRIPTION: This snippet demonstrates how to create a dynamic project header using EJS templating. It inserts the project slug as the main heading and the project description as the content.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-module-template/README.md#2025-04-22_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n# <%- project.slug %>\n\n<%- project.description %>\n```\n\n----------------------------------------\n\nTITLE: Rendering BoxLink Components with Icons in JSX\nDESCRIPTION: Demonstrates the usage of BoxLink components to create navigation links with icons for various documentation sections including TypeScript, Icons, and ESLint configuration guides.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/user-interface/next-steps.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<BoxLink\n  title=\"Use TypeScript\"\n  Icon={Settings02Icon}\n  description=\"An in-depth guide on configuring an Expo project with TypeScript or migrating an existing JavaScript project.\"\n  href=\"/guides/typescript/\"\n/>\n\n<BoxLink\n  title=\"Icons\"\n  Icon={BookOpen02Icon}\n  description=\"Learn how to use various types of icons in your Expo app, including vector icons, custom icon fonts, icon images, and icon buttons.\"\n  href=\"/guides/icons/\"\n/>\n\n<BoxLink\n  title=\"ESLint and Prettier\"\n  Icon={BookOpen02Icon}\n  description=\"A guide on configuring ESLint and Prettier to format Expo projects.\"\n  href=\"/guides/using-eslint/\"\n/>\n```\n\n----------------------------------------\n\nTITLE: React Component Structure Example\nDESCRIPTION: Complete example of a React component following Expo's recommended structure and formatting\nSOURCE: https://github.com/expo/expo/blob/main/guides/Expo JavaScript Style Guide.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\ntype Props = {\n  title: string,\n  onPress?: event => void,\n};\n\ntype State = {\n  isPressed: boolean,\n};\n\nclass Button extends React.Component {\n  props: Props;\n  state: State = {\n    isPressed: true,\n  };\n\n  constructor(props, context) {\n    super(props, context);\n    this.state = {\n      ...this.state,\n      bounce: new Animated.Value(1),\n    };\n  }\n\n  componentWillUnmount() {\n    if (this.state.animation) {\n      this.state.animation.stop();\n    }\n  }\n\n  render() {\n    return (\n      <Animated.View\n        onPress={this._handlePress}\n        style={{ transform: [{ scale: this.state.bounce }] }}>\n        <Text>\n          {this.props.title}\n        </Text>\n      </Animated.View>\n    );\n  }\n\n  _handlePress = event => {\n    this._bounce();\n    if (this.props.onPress) {\n      this.props.onPress(event);\n    }\n  };\n\n  _bounce() {\n    this.setState(state => {\n      state.bounce.setValue(0);\n      let animation = Animated.spring(state.bounce, { toValue: 1 });\n      animation.start(({ finished }) => {\n        if (finished) {\n          this.setState(() => ({ animation: null }));\n        }\n      });\n      return { animation };\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SF Symbols in React Native with expo-symbols\nDESCRIPTION: Example showing how to use the SymbolView component to display an SF Symbol in a React Native application. The code demonstrates basic setup with styling and positioning of an AirPods charging case symbol.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/symbols.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SymbolView, SymbolViewProps, SFSymbol } from 'expo-symbols';\nimport { StyleSheet, View } from 'react-native';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <SymbolView name=\"airpods.chargingcase\" style={styles.symbol} type=\"hierarchical\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  symbol: {\n    width: 35,\n    height: 35,\n    margin: 5,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Apple Authentication in React Native with Expo\nDESCRIPTION: Example of using AppleAuthenticationButton and signInAsync to implement Apple Sign-in functionality in a React Native app using expo-apple-authentication.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/apple-authentication.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as AppleAuthentication from 'expo-apple-authentication';\nimport { View, StyleSheet } from 'react-native';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <AppleAuthentication.AppleAuthenticationButton\n        buttonType={AppleAuthentication.AppleAuthenticationButtonType.SIGN_IN}\n        buttonStyle={AppleAuthentication.AppleAuthenticationButtonStyle.BLACK}\n        cornerRadius={5}\n        style={styles.button}\n        onPress={async () => {\n          try {\n            const credential = await AppleAuthentication.signInAsync({\n              requestedScopes: [\n                AppleAuthentication.AppleAuthenticationScope.FULL_NAME,\n                AppleAuthentication.AppleAuthenticationScope.EMAIL,\n              ],\n            });\n            // signed in\n          } catch (e) {\n            if (e.code === 'ERR_REQUEST_CANCELED') {\n              // handle that the user canceled the sign-in flow\n            } else {\n              // handle other errors\n            }\n          }\n        }}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  button: {\n    width: 200,\n    height: 44,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Tailwind CSS with React Native Web Elements (TypeScript)\nDESCRIPTION: This example shows how to use Tailwind CSS classes with React Native web elements in an Expo project using the { $$css: true } syntax.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/tailwind.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { View, Text } from 'react-native';\n\nexport default function Index() {\n  return (\n    <View style={{ $$css: true, _: 'bg-slate-100 rounded-xl' }}>\n      <Text style={{ $$css: true, _: 'text-lg font-medium' }}>Welcome to Tailwind</Text>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Virtual Modules in Metro Config (JavaScript)\nDESCRIPTION: This code snippet shows how to create a virtual module and redirect its resolution in Metro. It creates a file at a specific path and redirects the resolution of 'virtual:my-module' to that file.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/config/metro.mdx#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst path = require('path');\nconst fs = require('fs');\n\nconst { getDefaultConfig } = require('expo/metro-config');\n\n/** @type {import('expo/metro-config').MetroConfig} */\nconst config = getDefaultConfig(__dirname);\n\nconst virtualPath = path.resolve(__dirname, 'node_modules/.cache/virtual/virtual-module.js');\n\n// Create the virtual module in a generated directory...\nfs.mkdirSync(path.dirname(virtualPath), { recursive: true });\nfs.writeFileSync(virtualPath, 'export default \"Hello World\";');\n\nconfig.resolver.resolveRequest = (context, moduleName, platform) => {\n  if (moduleName === 'virtual:my-module') {\n    return {\n      filePath: virtualPath,\n      type: 'sourceFile',\n    };\n  }\n\n  // Ensure you call the default resolver.\n  return context.resolveRequest(context, moduleName, platform);\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Environment Configuration Code Reference\nDESCRIPTION: Code reference showing environment variable usage for enabling directory check feature.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-doctor/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nEXPO_DOCTOR_ENABLE_DIRECTORY_CHECK=1\n```\n\n----------------------------------------\n\nTITLE: Importing SMS Module in JavaScript\nDESCRIPTION: This code snippet demonstrates how to import the SMS module from the expo-sms package. This import statement is necessary to use the SMS functionality in your Expo project.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/sms.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as SMS from 'expo-sms';\n```\n\n----------------------------------------\n\nTITLE: Installing expo-localization in bare React Native projects\nDESCRIPTION: Command to install the expo-localization package using npx expo install. This is used for bare React Native projects after ensuring the expo package is installed and configured.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-localization/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-localization\n```\n\n----------------------------------------\n\nTITLE: Installing expo-dev-menu-interface in bare React Native projects\nDESCRIPTION: Command to install the expo-dev-menu-interface package using npm package manager. This should be executed after ensuring that the expo package is properly installed and configured in the project.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-dev-menu-interface/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install expo-dev-menu-interface\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS permissions for contacts\nDESCRIPTION: XML snippet showing how to add the NSContactsUsageDescription key to the Info.plist file for iOS projects.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/contacts.mdx#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<key>NSContactsUsageDescription</key>\n<string>Allow $(PRODUCT_NAME) to access your contacts</string>\n```\n\n----------------------------------------\n\nTITLE: Using Imperative API for Singular Routes\nDESCRIPTION: Demonstration of using router.navigate and router.push with dangerouslySingular option for programmatic navigation.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/preview/singular.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nrouter.navigate('/unique-link', { dangerouslySingular: true });\nrouter.navigate('/unique-link', {\n  dangerouslySingular: name => (name === 'unique-link' ? name : undefined),\n});\n\nrouter.push('/unique-link', { dangerouslySingular: true });\nrouter.push('/unique-link', {\n  dangerouslySingular: name => (name === 'unique-link' ? name : undefined),\n});\n```\n\n----------------------------------------\n\nTITLE: Opening Android Play Store Reviews\nDESCRIPTION: Example code showing how to open the Android Play Store reviews section using Linking API with the showAllReviews parameter.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/storereview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst androidPackageName = 'host.exp.exponent';\n// Open the Android Play Store in the browser -> redirects to Play Store on Android\nLinking.openURL(\n  `https://play.google.com/store/apps/details?id=${androidPackageName}&showAllReviews=true`\n);\n// Open the Android Play Store directly\nLinking.openURL(`market://details?id=${androidPackageName}&showAllReviews=true`);\n```\n\n----------------------------------------\n\nTITLE: Netlify Single Page App Redirect Configuration\nDESCRIPTION: Redirect configuration for Netlify to handle single page application routing, directing all requests to index.html.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/publishing-websites.mdx#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n/*    /index.html   200\n```\n\n----------------------------------------\n\nTITLE: Importing the Expo Package - TypeScript/TSX\nDESCRIPTION: This snippet demonstrates how to perform a module-wide import of the entire Expo package using TypeScript or TSX. It is used as the foundational step for applications that require Expo's unified API access. There are no specific parameters, and it assumes that the 'expo' package is installed and available in the project dependencies. The output is a wildcard import object providing access to all main Expo exports.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/expo.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\nimport * as Expo from 'expo';\n```\n\n----------------------------------------\n\nTITLE: Importing CameraView Component in JavaScript\nDESCRIPTION: Demonstrates the standard ES module import statement to bring the `CameraView` component into a JavaScript or TypeScript file when using the next version of the `expo-camera` library. This import should point to `expo-camera/next`.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/camera-next.mdx#2025-04-22_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n```js\nimport { CameraView } from 'expo-camera/next';\n```\n```\n\n----------------------------------------\n\nTITLE: Using Button Component with Jetpack Compose\nDESCRIPTION: This code snippet demonstrates how to use the `Button` component from `@expo/ui/jetpack-compose`. It imports the `Button` component and uses it to render a button that, when pressed, updates a state variable `editingProfile`. The `onPress` prop is used to attach a handler function to the button press event.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/ui.mdx#_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from '@expo/ui/jetpack-compose';\n\n<Button\n  style={{ flex: 1 }}\n  onPress={() => {\n    setEditingProfile(true);\n  }}>\n  Edit profile\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Importing ExpoTrackingTransparency Module\nDESCRIPTION: Example of how to import the expo-tracking-transparency module in a TypeScript file.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/tracking-transparency.mdx#2025-04-22_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport * as ExpoTrackingTransparency from 'expo-tracking-transparency';\n```\n\n----------------------------------------\n\nTITLE: Running Expo CLI End-to-End Tests (Yarn)\nDESCRIPTION: Executes the end-to-end (E2E) tests for the Expo CLI using Yarn. These tests simulate real user scenarios and verify the behavior of CLI commands from start to finish, requiring the CLI to be built first (`yarn build`).\nSOURCE: https://github.com/expo/expo/blob/main/packages/@expo/cli/README.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nyarn test:e2e\n```\n\n----------------------------------------\n\nTITLE: Installing expo-image-manipulator in bare React Native projects\nDESCRIPTION: This command installs the expo-image-manipulator package using npx and expo CLI. It's used for adding the package to npm dependencies in bare React Native projects.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-image-manipulator/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-image-manipulator\n```\n\n----------------------------------------\n\nTITLE: CSS Safe Area Implementation\nDESCRIPTION: Example of traditional CSS-based safe area implementation using environment variables.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/safe-area-context.mdx#2025-04-22_snippet_6\n\nLANGUAGE: css\nCODE:\n```\ndiv {\n  padding-top: env(safe-area-inset-top);\n  padding-left: env(safe-area-inset-left);\n  padding-bottom: env(safe-area-inset-bottom);\n  padding-right: env(safe-area-inset-right);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring React Native Directory Check in package.json for Expo Doctor\nDESCRIPTION: This snippet shows how to customize the React Native Directory check performed by Expo Doctor. It allows enabling/disabling the check, excluding specific packages, and controlling the listing of unknown packages.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/config/package-json.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"doctor\": {\n      \"reactNativeDirectoryCheck\": {\n        \"enabled\": true,\n        \"exclude\": [\"/foo/\", \"bar\"],\n        \"listUnknownPackages\": true\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding expo-modules-core dependency to build.gradle\nDESCRIPTION: Adds the Expo Modules Core library as a native dependency in the Android build.gradle file.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/existing-library.mdx#2025-04-22_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\n// ...\ndependencies {\n  // ...\n  implementation project(':expo-modules-core')\n}\n```\n\n----------------------------------------\n\nTITLE: Setting iOS Entitlements for iCloud\nDESCRIPTION: This XML snippet is used to configure entitlements for an iOS app to support iCloud document storage. It defines identifiers for iCloud containers and sets the services allowed, which is necessary for manual setup if not using EAS Build.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/document-picker.mdx#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<key>com.apple.developer.icloud-container-identifiers</key>\n<array>\n    <string>iCloud.dev.expo.my-app</string>\n</array>\n<key>com.apple.developer.icloud-services</key>\n<array>\n    <string>CloudDocuments</string>\n</array>\n<key>com.apple.developer.ubiquity-container-identifiers</key>\n<array>\n    <string>iCloud.dev.expo.my-app</string>\n</array>\n<key>com.apple.developer.ubiquity-kvstore-identifier</key>\n<string>$(TeamIdentifierPrefix)dev.expo.my-app</string>\n```\n\n----------------------------------------\n\nTITLE: Importing VideoThumbnails module in JavaScript\nDESCRIPTION: This snippet shows how to import the VideoThumbnails module from the expo-video-thumbnails package in a JavaScript file.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/video-thumbnails.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as VideoThumbnails from 'expo-video-thumbnails';\n```\n\n----------------------------------------\n\nTITLE: Writing a React Server Component Test\nDESCRIPTION: Demonstrates how to write a test for a React Server Component using custom Jest matchers provided by jest-expo/rsc.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/testing-rsc.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/// <reference types=\"jest-expo/rsc/expect\" />\n\nimport { LinearGradient } from 'expo-linear-gradient';\n\nit(`renders to RSC`, async () => {\n  const jsx = (\n    <LinearGradient\n      colors={['cyan', '#ff00ff', 'rgba(0,0,0,0)', 'rgba(0,255,255,0.5)']}\n      testID=\"gradient\"\n    />\n  );\n\n  await expect(jsx).toMatchFlight(`1:I[\"src/LinearGradient.tsx\",[],\"LinearGradient\"]\n0:[\"$\",\"$L1\",null,{\"colors\":[\"cyan\",\"#ff00ff\",\"rgba(0,0,0,0)\",\"rgba(0,255,255,0.5)\"],\"testID\":\"gradient\"},null]`);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Entry Point with registerRootComponent\nDESCRIPTION: Demonstrates how to create a custom entry point for an Expo app using registerRootComponent. This is required when using a custom main file specified in package.json.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/expo.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { registerRootComponent } from 'expo';\nimport { View } from 'react-native';\n\nfunction App() {\n  return <View />;\n}\n\nregisterRootComponent(App);\n```\n\n----------------------------------------\n\nTITLE: Importing React Native Core Components\nDESCRIPTION: This snippet demonstrates how to import and use core React Native components like Text and View in a basic app structure.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/workflow/using-libraries.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Text, View } from 'react-native';\n\nexport default function App() {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Hello, world!</Text>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing captureRef from react-native-view-shot in JavaScript\nDESCRIPTION: This snippet shows how to import the captureRef function from the react-native-view-shot library.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/captureRef.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { captureRef } from 'react-native-view-shot';\n```\n\n----------------------------------------\n\nTITLE: Importing TaskManager in JavaScript\nDESCRIPTION: This code snippet shows how to import the TaskManager module from the expo-task-manager package.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/task-manager.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as TaskManager from 'expo-task-manager';\n```\n\n----------------------------------------\n\nTITLE: Configuring Android permissions for expo-image-picker\nDESCRIPTION: XML snippet showing the required Android permissions for camera and storage access.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-image-picker/README.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Added permissions -->\n<uses-permission android:name=\"android.permission.CAMERA\" />\n<uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\" />\n<uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering Router with Fixture Path and Overrides in JavaScript\nDESCRIPTION: Demonstrates using renderRouter with both a fixture path and inline mocks for overriding specific routes.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/reference/testing.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nit('my-test', async () => {\n  const MockAuthLayout = jest.fn(() => <View />);\n  renderRouter({\n    appDir: './my-test-fixture',\n    overrides: {\n      'directory/(auth)/_layout': MockAuthLayout,\n    },\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Cleaning C++ Build Artifacts\nDESCRIPTION: Troubleshooting command to remove C++ build artifacts when encountering C++ related errors. This clears all .cxx directories in the project.\nSOURCE: https://github.com/expo/expo/blob/main/apps/expo-go/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nfind . -name \".cxx\" -type d -prune -exec rm -rf '{}' +\n```\n\n----------------------------------------\n\nTITLE: GLView Integration with Reanimated Worklets in Expo\nDESCRIPTION: Shows how to use GLView with Reanimated worklets by passing the GL context ID to the worklet and recreating the GL object. This example demonstrates the setup required for using GL operations within Reanimated worklets.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/gl-view.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { View } from 'react-native';\nimport { runOnUI } from 'react-native-reanimated';\nimport { GLView } from 'expo-gl';\n\nfunction render(gl) {\n  'worklet';\n  // add your WebGL code here\n}\n\nfunction onContextCreate(gl) {\n  runOnUI((contextId: number) => {\n    'worklet';\n    const gl = GLView.getWorkletContext(contextId);\n    render(gl);\n  })(gl.contextId);\n}\n\nexport default function App() {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <GLView\n        style={{ width: 300, height: 300 }}\n        enableExperimentalWorkletSupport\n        onContextCreate={onContextCreate}\n      />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Update by ID Example URL\nDESCRIPTION: Example URL for generating a QR code for a specific update using its ID.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/more/qr-codes.mdx#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nhttps://qr.expo.dev/eas-update?updateId=your-update-id\n```\n\n----------------------------------------\n\nTITLE: Installing EAS CLI Globally\nDESCRIPTION: Command to install the EAS CLI tool globally on your local machine using npm.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/tools.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install -g eas-cli\n```\n\n----------------------------------------\n\nTITLE: Starting the Expo Development Server\nDESCRIPTION: Command to start the Expo development server which provides options for running the app on various platforms and simulators.\nSOURCE: https://github.com/expo/expo/blob/main/templates/expo-template-default/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo start\n```\n\n----------------------------------------\n\nTITLE: Rendering SF Symbols in a React Native App using expo-symbols\nDESCRIPTION: This code snippet demonstrates how to use the SymbolView component from expo-symbols to render an SF Symbol in a React Native application. It creates a basic app layout with a centered symbol.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/symbols.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SymbolView, SymbolViewProps, SFSymbol } from 'expo-symbols';\nimport { StyleSheet, View } from 'react-native';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <SymbolView name=\"airpods.chargingcase\" style={styles.symbol} type=\"hierarchical\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  symbol: {\n    width: 35,\n    height: 35,\n    margin: 5,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Up Updates API Test Project with Typescript Script (Bash, Typescript)\nDESCRIPTION: Runs the Typescript setup script 'create-updates-test.ts' to scaffold an Expo Updates API E2E test project. Requires Node.js, Typescript, and a properly configured environment. It should be executed after setting up environment variables and working directory. No parameters required. The script outputs a configured test project at the designated location.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-updates/e2e/README.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n./packages/expo-updates/e2e/setup/create-updates-test.ts\n```\n\n----------------------------------------\n\nTITLE: Installing expo-av in bare React Native projects\nDESCRIPTION: Command to install the expo-av package using npx expo install. This should be run after ensuring the expo package is installed and configured in your bare React Native project.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-av/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-av\n```\n\n----------------------------------------\n\nTITLE: Barrel File Export Example\nDESCRIPTION: Demonstrates the star export syntax that will be optimized by Expo's tree shaking. This allows for automatic expansion and removal of unused exports from barrel files.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/tree-shaking.mdx#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nexport * from './icons';\n```\n\n----------------------------------------\n\nTITLE: Customizing Module Resolution with Metro in JavaScript\nDESCRIPTION: This snippet extends Metro's default resolver in an Expo project to add support for custom module resolution. By redefining the config.resolver.resolveRequest method, it intercepts module requests prefixed with 'my-custom-resolver:', and returns a specific file path (or throws if not resolvable). For other requests, it delegates back to the original resolver via the context. This setup requires 'expo/metro-config' and assumes the file is used as metro.config.js. Key parameters include context (Metro resolver context), moduleName (requested module), and platform. Inputs are requested module names, outputs are objects that specify resolved file paths or file types. This is limited to platform-independent resolution changes and expects the consumer to handle errors for unresolved modules.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/config/metro.mdx#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst { getDefaultConfig } = require('expo/metro-config');\n\n/** @type {import('expo/metro-config').MetroConfig} */\nconst config = getDefaultConfig(__dirname);\n\nconfig.resolver.resolveRequest = (context, moduleName, platform) => {\n  if (moduleName.startsWith('my-custom-resolver:')) {\n    // Logic to resolve the module name to a file path...\n    // NOTE: Throw an error if there is no resolution.\n    return {\n      filePath: 'path/to/file',\n      type: 'sourceFile',\n    };\n  }\n\n  // Ensure you call the default resolver.\n  return context.resolveRequest(context, moduleName, platform);\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Update by Channel ID Example URL\nDESCRIPTION: Example URL for generating a QR code using project ID and channel ID to get latest updates from mapped branches.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/more/qr-codes.mdx#2025-04-22_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nhttps://qr.expo.dev/eas-update?projectId=your-project-id&channelId=your-channel-id\n```\n\n----------------------------------------\n\nTITLE: Opening iOS Project in Xcode\nDESCRIPTION: Command to open the iOS workspace in Xcode for building the release version.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/local-app-production.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ xed ios\n```\n\n----------------------------------------\n\nTITLE: Android Permissions Configuration - Expo AndroidManifest\nDESCRIPTION: XML configuration showing required Android permissions automatically added through the library's AndroidManifest.xml file.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/filesystem.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<AndroidPermissions permissions={['READ_EXTERNAL_STORAGE', 'WRITE_EXTERNAL_STORAGE', 'INTERNET']} />\n```\n\n----------------------------------------\n\nTITLE: Creating Tab Content in Expo Router\nDESCRIPTION: This snippet demonstrates how to create the content for individual tabs in Expo Router. It shows a basic layout with centered text.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/advanced/tabs.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { View, Text, StyleSheet } from 'react-native';\n\nexport default function Tab() {\n  return (\n    <View style={styles.container}>\n      <Text>Tab [Home|Settings]</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Maps API Key in app.json for iOS\nDESCRIPTION: Configuration snippet for adding a Google Maps API key to the iOS section of an Expo app.json file. This is required for using Google Maps instead of Apple Maps on iOS devices.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/map-view.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n    \"ios\": {\n      \"config\": {\n        \"googleMapsApiKey\":  \"process.env.GOOGLE_MAPS_API_KEY\",\n        },\n      }\n```\n\n----------------------------------------\n\nTITLE: Importing the Image Component from expo-image\nDESCRIPTION: Simple import statement for the Image component from the expo-image package.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/image.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { Image } from 'expo-image';\n```\n\n----------------------------------------\n\nTITLE: Resolve Command JSON Response Structure\nDESCRIPTION: Example JSON output from the expo-modules-autolinking resolve command showing platform-specific module details including pods and Swift module names.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/autolinking.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"modules\": [\n    {\n      \"packageName\": \"expo-random\",\n      \"packageVersion\": \"13.0.0\",\n      \"pods\": [\n        {\n          \"podName\": \"ExpoRandom\",\n          \"podspecDir\": \"/absolute/path/to/node_modules/expo-random/ios\"\n        }\n      ],\n      \"swiftModuleNames\": [\"ExpoRandom\"],\n      \"modules\": [\"RandomModule\"],\n      \"appDelegateSubscribers\": [],\n      \"reactDelegateHandlers\": [],\n      \"debugOnly\": false\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing the expo-cellular Module in JavaScript\nDESCRIPTION: This JavaScript code snippet shows how to import the `expo-cellular` library into your project. Importing the module as `Cellular` makes its functions and constants available for use, such as accessing cellular generation or provider information.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/cellular.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as Cellular from 'expo-cellular';\n```\n\n----------------------------------------\n\nTITLE: Using Slot for Custom Layouts (TypeScript)\nDESCRIPTION: This snippet demonstrates using the `Slot` component in a layout file to create a custom layout without a navigator. It imports the `Slot` component from `expo-router` and renders it between a `Header` and `Footer` component. This allows wrapping the content of each route within the directory with a consistent header and footer, without using a stack or tab navigator.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/basics/layout.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Slot } from 'expo-router';\n\nexport default function Layout() {\n  return (\n    <>\n      <Header />\n      <Slot />\n      <Footer />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing StatusBar from expo-status-bar\nDESCRIPTION: This code snippet shows how to import the StatusBar component from the expo-status-bar package. This import statement is typically used at the top of a file where the StatusBar component will be used.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/status-bar.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { StatusBar } from 'expo-status-bar';\n```\n\n----------------------------------------\n\nTITLE: Installing react-native-view-shot with yarn and Expo\nDESCRIPTION: Commands for installing the react-native-view-shot library using yarn package manager or through Expo. For React Native 0.60+ autolink is available, otherwise manual linking is required.\nSOURCE: https://github.com/expo/expo/blob/main/apps/expo-go/modules/react-native-view-shot/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add react-native-view-shot\n\n# In Expo\n\nexpo install react-native-view-shot\n```\n\n----------------------------------------\n\nTITLE: Creating Audio Sound Object\nDESCRIPTION: JavaScript code demonstrating how to create an Audio.Sound object in two ways: by instantiating it directly and then loading audio, or by using the createAsync method. This also shows how to enable audio playback in silent mode on iOS.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/av.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nawait Audio.setAudioModeAsync({ playsInSilentModeIOS: true });\n\nconst playbackObject = new Audio.Sound();\n// OR\nconst { sound: playbackObject } = await Audio.Sound.createAsync(\n  { uri: 'http://foo/bar.mp3' },\n  { shouldPlay: true }\n);\n```\n\n----------------------------------------\n\nTITLE: Importing the Expo Crypto Module\nDESCRIPTION: This snippet shows the standard way to import all functions and constants from the `expo-crypto` package into a JavaScript or TypeScript file, assigning them to the `Crypto` namespace. This is the prerequisite step before using any crypto functions like `digestStringAsync`.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/crypto.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n```js\nimport * as Crypto from 'expo-crypto';\n```\n```\n\n----------------------------------------\n\nTITLE: Updating and Preparing SQLite3 and SQLCipher Sources for Expo - Shell\nDESCRIPTION: This block of shell commands guides contributors through updating the bundled SQLite3 and SQLCipher sources under the vendor directory. Using helper scripts, it automates downloading, building, and preparing these libraries for integration, including symbol replacement to avoid conflicts with native iOS SQLite3 libraries. Prerequisites include cloning the expo/expo repository and having Node.js and permission to execute the respective TypeScript helper scripts.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-sqlite/README.md#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n# You should clone expo/expo git repository first\n$ cd packages/expo-sqlite\n\n# Download and build sqlite3.[ch]\n# For example, to use sqlite 3.45.3 and sqlcipher 4.6.0\n$ ./scripts/prepare_sqlite.ts vendor/sqlite3 3.45.3\n$ ./scripts/prepare_sqlite.ts vendor/sqlcipher 4.6.0 --sqlcipher\n\n# Replace sqlite3 symbols to prevent conflict with iOS system sqlite3\n$ ./scripts/replace_symbols.ts vendor/sqlite3\n$ ./scripts/replace_symbols.ts vendor/sqlcipher\n```\n\n----------------------------------------\n\nTITLE: Running Expo in Production Mode with Atlas\nDESCRIPTION: Command to start Expo development server in production mode with Atlas for accurate bundle size analysis.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/analyzing-bundles.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Run the local development server in production mode\n$ EXPO_UNSTABLE_ATLAS=true npx expo start --no-dev\n```\n\n----------------------------------------\n\nTITLE: Importing Accelerometer from expo-sensors\nDESCRIPTION: Basic import statement showing how to import the Accelerometer module from expo-sensors package.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/accelerometer.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { Accelerometer } from 'expo-sensors';\n```\n\n----------------------------------------\n\nTITLE: Implementing Theme Management in TypeScript for Expo Settings Module\nDESCRIPTION: This TypeScript code defines the core functionality for the Expo Settings module, including theme listener, getter, and setter functions. It uses a Theme type to ensure type safety for theme values.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/native-module-tutorial.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EventSubscription } from 'expo-modules-core';\n\nimport ExpoSettingsModule from './ExpoSettingsModule';\n\nexport type Theme = 'light' | 'dark' | 'system';\n\nexport type ThemeChangeEvent = {\n  theme: Theme;\n};\n\nexport function addThemeListener(listener: (event: ThemeChangeEvent) => void): EventSubscription {\n  return ExpoSettingsModule.addListener('onChangeTheme', listener);\n}\n\nexport function getTheme(): Theme {\n  return ExpoSettingsModule.getTheme();\n}\n\nexport function setTheme(theme: Theme): void {\n  return ExpoSettingsModule.setTheme(theme);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Switch Component (Checkbox) with SwiftUI\nDESCRIPTION: This code snippet demonstrates how to use the `Switch` component from `@expo/ui/swift-ui` to create a checkbox-style switch. It sets the `variant` prop to \"checkbox\".  It uses the `checked` and `onValueChange` props to manage the switch state. A label is provided for context.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/ui.mdx#_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Switch } from '@expo/ui/swift-ui';\n\n<Switch\n  checked={checked}\n  onValueChange={checked => {\n    setChecked(checked);\n  }}\n  label=\"Play music\"\n  variant=\"checkbox\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Scheduling a Local Notification in Expo\nDESCRIPTION: A simple example showing how to schedule a local notification in an Expo app. It demonstrates setting up a notification handler and configuring the notification content with title and body. This example triggers the notification immediately as no specific timing trigger is provided.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/notifications.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Notifications from 'expo-notifications';\n\n// First, set the handler that will cause the notification\n// to show the alert\nNotifications.setNotificationHandler({\n  handleNotification: async () => ({\n    shouldShowAlert: true,\n    shouldPlaySound: false,\n    shouldSetBadge: false,\n  }),\n});\n\n// Second, call scheduleNotificationAsync()\nNotifications.scheduleNotificationAsync({\n  content: {\n    title: 'Look at that notification',\n    body: \"I'm so proud of myself!\",\n  },\n  trigger: null,\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying Battery Level with React Native and expo-battery\nDESCRIPTION: This snippet demonstrates how to use the useBatteryLevel hook from expo-battery to display the current battery level in a React Native application. It creates a simple view with a text component showing the battery level.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/battery.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useBatteryLevel } from 'expo-battery';\nimport { StyleSheet, Text, View } from 'react-native';\n\nexport default function App() {\n  const batteryLevel = useBatteryLevel();\n\n  return (\n    <View style={styles.container}>\n      <Text>Current Battery Level: {batteryLevel}</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: 15,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: React Navigation Nested Navigation Example\nDESCRIPTION: Shows how to navigate to a nested screen using React Navigation's navigate method with nested params.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/advanced/nesting-navigators.mdx#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nnavigation.navigate('root', {\n  screen: 'settings',\n  params: {\n    screen: 'media',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Conditional Job Execution in GitHub Actions Workflow\nDESCRIPTION: Shows how to conditionally execute entire jobs based on file changes, with a dedicated job for change detection that other jobs depend on.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-updates/e2e/setup/paths-filter/README.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  changes:\n    runs-on: ubuntu-latest\n    permissions:\n      pull-requests: read\n    outputs:\n      backend: ${{ steps.filter.outputs.backend }}\n      frontend: ${{ steps.filter.outputs.frontend }}\n    steps:\n    - uses: dorny/paths-filter@v3\n      id: filter\n      with:\n        filters: |\n          backend:\n            - 'backend/**'\n          frontend:\n            - 'frontend/**'\n\n  backend:\n    needs: changes\n    if: ${{ needs.changes.outputs.backend == 'true' }}\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - ...\n\n  frontend:\n    needs: changes\n    if: ${{ needs.changes.outputs.frontend == 'true' }}\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Print Functionality in React Native with expo-print\nDESCRIPTION: A complete React Native component that demonstrates how to use expo-print to print HTML content, save as PDF files, and select printers (iOS only). The example includes UI elements and platform-specific functionality.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/print.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { View, StyleSheet, Button, Platform, Text } from 'react-native';\nimport * as Print from 'expo-print';\nimport { shareAsync } from 'expo-sharing';\n\nconst html = `\n<html>\n  <head>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no\" />\n  </head>\n  <body style=\"text-align: center;\">\n    <h1 style=\"font-size: 50px; font-family: Helvetica Neue; font-weight: normal;\">\n      Hello Expo!\n    </h1>\n    <img\n      src=\"https://d30j33t1r58ioz.cloudfront.net/static/guides/sdk.png\"\n      style=\"width: 90vw;\" />\n  </body>\n</html>\n`;\n\nexport default function App() {\n  const [selectedPrinter, setSelectedPrinter] = useState();\n\n  const print = async () => {\n    // On iOS/android prints the given html. On web prints the HTML from the current page.\n    /* @info */ await Print.printAsync({\n      html,\n      printerUrl: selectedPrinter?.url, // iOS only\n    }); /* @end */\n  };\n\n  const printToFile = async () => {\n    // On iOS/android prints the given html. On web prints the HTML from the current page.\n    /* @info */ const { uri } = await Print.printToFileAsync({ html }); /* @end */\n    console.log('File has been saved to:', uri);\n    await shareAsync(uri, { UTI: '.pdf', mimeType: 'application/pdf' });\n  };\n\n  const selectPrinter = async () => {\n    /* @info */ const printer = await Print.selectPrinterAsync(); // iOS only\n    /* @end */\n    setSelectedPrinter(printer);\n  };\n\n  return (\n    <View style={styles.container}>\n      <Button title=\"Print\" onPress={print} />\n      <View style={styles.spacer} />\n      <Button title=\"Print to PDF file\" onPress={printToFile} />\n      {Platform.OS === 'ios' && (\n        <>\n          <View style={styles.spacer} />\n          <Button title=\"Select printer\" onPress={selectPrinter} />\n          <View style={styles.spacer} />\n          {selectedPrinter ? (\n            <Text style={styles.printer}>{`Selected printer: ${selectedPrinter.name}`}</Text>\n          ) : undefined}\n        </>\n      )}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    backgroundColor: '#ecf0f1',\n    flexDirection: 'column',\n    padding: 8,\n  },\n  spacer: {\n    height: 8,\n  },\n  printer: {\n    textAlign: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: ESLint Legacy Config with Prettier\nDESCRIPTION: Legacy ESLint configuration with Prettier integration for SDK 50 and below.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/using-eslint.mdx#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  extends: ['expo', 'prettier'],\n  plugins: ['prettier'],\n  rules: {\n    'prettier/prettier': 'error',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Specifying Queue for Asynchronous Functions in Swift\nDESCRIPTION: Configures an AsyncFunction to run on a specific queue, such as the main queue for UI operations. This is done using the runOnQueue modifier after defining the function.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/module-api.mdx#2025-04-22_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\nAsyncFunction(\"myAsyncFunction\") { (message: String) in\n  return message\n}.runOnQueue(.main)\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-contacts plugin in app.json\nDESCRIPTION: Example of how to configure the expo-contacts plugin in the app.json file. It sets the contacts permission message for iOS.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/contacts.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-contacts\",\n        {\n          \"contactsPermission\": \"Allow $(PRODUCT_NAME) to access your contacts.\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Expo Manifests Package in JavaScript\nDESCRIPTION: Demonstrates how to import the expo-manifests package to access types for Expo Manifests. This is the standard way to import the entire library for use in your Expo project.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/manifests.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Manifests from 'expo-manifests';\n```\n\n----------------------------------------\n\nTITLE: Forcing JS Bundling in iOS Debug Builds for expo-updates (Bash)\nDESCRIPTION: Uses the `sed` command to modify the iOS project's `project.pbxproj` file, replacing occurrences of 'SKIP_BUNDLING' with 'FORCE_BUNDLING'. This modification ensures that the JavaScript bundle is embedded within the application during iOS debug builds, a necessary step when enabling expo-updates in debug mode using the `EX_UPDATES_NATIVE_DEBUG` environment variable. Reinstalling Cocoapods (`npx pod-install`) is required after this change.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-updates/DEVELOPMENT.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsed -i '' 's/SKIP_BUNDLING/FORCE_BUNDLING/g;' ios/<project name>.xcodeproj/project.pbxproj\n```\n\n----------------------------------------\n\nTITLE: Using the Expo CLI Prebuild Command\nDESCRIPTION: Command to generate native source code before a native app can compile. Expo prebuild is a system that generates the native code for your project.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/more/expo-cli.mdx#2025-04-23_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo prebuild\n```\n\n----------------------------------------\n\nTITLE: Providing Example 'extra' Field Content for Manifest or Directive Bodies (JSON/text)\nDESCRIPTION: Shows an example of how to include optional extra information (e.g., EAS project ID) in the 'extra' field of a Manifest or Directive body. This JSON snippet is included in the manifest or directive to carry additional metadata such as third-party configuration. No dependencies besides JSON compatibility; ensure correct placement within the larger manifest or directive structure.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/technical-specs/expo-updates-1.mdx#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extra\": {\n    \"eas\": {\n      \"projectId\": \"00000000-0000-0000-0000-000000000000\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building iOS app for production\nDESCRIPTION: Command for building an iOS app in Release configuration for production testing. This build is not code-signed for App Store submission - EAS Build is recommended for that purpose.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/more/expo-cli.mdx#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo run:ios --configuration Release\n```\n\n----------------------------------------\n\nTITLE: Loading Custom Fonts with useFonts Hook in Expo\nDESCRIPTION: This code snippet shows how to use the useFonts hook from expo-font to load custom fonts asynchronously in an Expo app. It also demonstrates how to use the SplashScreen component to prevent rendering the app until the font is loaded.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/user-interface/fonts.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useFonts } from 'expo-font';\nimport * as SplashScreen from 'expo-splash-screen';\nimport {useEffect} from 'react';\n\nSplashScreen.preventAutoHideAsync();\n\nexport default function RootLayout() {\n  const [loaded, error] = useFonts({\n    'Inter-Black': require('./assets/fonts/Inter-Black.otf'),\n  });\n\n  useEffect(() => {\n    if (loaded || error) {\n      SplashScreen.hideAsync();\n    }\n  }, [loaded, error]);\n\n  if (!loaded && !error) {\n    return null;\n  }\n\n  return (\n    /* @hide ... */ /* @end */\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Metro Configuration Setup\nDESCRIPTION: Configuration for metro.config.js to extend Expo's default Metro configuration.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/config/metro.mdx#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nconst { getDefaultConfig } = require('expo/metro-config');\n\nconst config = getDefaultConfig(__dirname);\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Properties in app.json\nDESCRIPTION: Defines the configuration for the expo-build-properties plugin within app.json. Requires Expo and compatible with certain Android and iOS versions. Parameters include android compile/tar...\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/build-properties.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-build-properties\",\n        {\n          \"android\": {\n            \"compileSdkVersion\": 33,\n            \"targetSdkVersio...\n```\n\n----------------------------------------\n\nTITLE: Clearing Caches for React Native CLI with npm\nDESCRIPTION: This snippet illustrates the process of clearing caches when using React Native CLI with npm. It covers removing node_modules, cleaning npm cache, reinstalling dependencies, resetting Watchman, clearing Metro and Haste map caches, and starting the React Native project with a reset cache.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/troubleshooting/clear-cache-macos-linux.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ rm -rf node_modules\n\n$ npm cache clean --force\n\n$ npm install\n\n$ watchman watch-del-all\n\n$ rm -fr $TMPDIR/haste-map-*\n\n$ rm -rf $TMPDIR/metro-cache\n\n$ npm start -- --reset-cache\n```\n\n----------------------------------------\n\nTITLE: Implementing Platform-Specific Pre-Install Hook in Node.js\nDESCRIPTION: This Node.js script demonstrates how to create a pre-install hook that executes different code based on the build platform. It uses the EAS_BUILD_PLATFORM environment variable to determine the current platform.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/build-reference/npm-hooks.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Create a file called \"pre-install.js\" at the root of the project\n\nif (process.env.EAS_BUILD_PLATFORM === 'android') {\n  console.log('Run commands for Android builds here');\n} else if (process.env.EAS_BUILD_PLATFORM === 'ios') {\n  console.log('Run commands for iOS builds here');\n}\n```\n\n----------------------------------------\n\nTITLE: WebView with Inline HTML Content in React Native\nDESCRIPTION: An example showing how to use WebView to display inline HTML content. This implementation sets originWhitelist to allow any origin and provides HTML directly as a source.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/webview.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { WebView } from 'react-native-webview';\nimport Constants from 'expo-constants';\nimport { StyleSheet } from 'react-native';\n\nexport default function App() {\n  return (\n    <WebView\n      style={styles.container}\n      originWhitelist={['*']}\n      source={{ html: '<h1><center>Hello world</center></h1>' }}\n    />\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: Constants.statusBarHeight,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Promoting Staged Versions Endpoint Update to Production - shell\nDESCRIPTION: Describes how to use the 'et promote-versions-to-production' CLI command to apply previously approved changes from staging to the production endpoint. This operation finalizes and publishes the endpoint changes globally, and requires permissions to modify production values. No key or value parameters are needed, as this acts on staged content.\nSOURCE: https://github.com/expo/expo/blob/main/guides/releasing/Versions Endpoint.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\net promote-versions-to-production\n```\n\n----------------------------------------\n\nTITLE: Inlining Client-Side Environment Variables in JavaScript\nDESCRIPTION: During the build process, all instances of process.env.EXPO_PUBLIC_* in client-side code are replaced with actual values from the environment. This happens when running the 'npx expo export' command.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/hosting/environment-variables.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nprocess.env.EXPO_PUBLIC_*\n```\n\n----------------------------------------\n\nTITLE: Importing DevClient from expo-dev-client\nDESCRIPTION: This JavaScript snippet shows how to import the 'DevClient' module from 'expo-dev-client'. This import is necessary to access the development client API and require the 'expo-dev-client' package to be installed in your project.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/dev-client.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as DevClient from 'expo-dev-client';\n```\n\n----------------------------------------\n\nTITLE: Importing expo-sqlite Module\nDESCRIPTION: Example of importing the expo-sqlite module in a JavaScript file.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/sqlite.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as SQLite from 'expo-sqlite';\n```\n\n----------------------------------------\n\nTITLE: Registering BackgroundFetch Task for Manual Trigger\nDESCRIPTION: This snippet provides a method to register a background fetch task such that it fires one minute after the app is backgrounded. It is particularly useful for testing on Android by reducing the `minimumInterval` to speed up task execution during development.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/background-fetch.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nasync function registerBackgroundFetchAsync() {\\n  return BackgroundFetch.registerTaskAsync(BACKGROUND_FETCH_TASK, {\\n    minimumInterval: 1 * 60, // task will fire 1 minute after app is backgrounded\\n  });\\n}\n```\n\n----------------------------------------\n\nTITLE: Importing expo-sqlite Module in JavaScript\nDESCRIPTION: Shows how to import the SQLite module from expo-sqlite in a JavaScript file.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/sqlite.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as SQLite from 'expo-sqlite';\n```\n\n----------------------------------------\n\nTITLE: Obtaining Video Playback Object Reference via Ref in JavaScript\nDESCRIPTION: JavaScript example showing how to get a reference to the playback object for an Expo `Video` component. It uses a ref callback function (`_handleVideoRef`) assigned to the `ref` prop of the `Video` component within the `render` method. The `component` argument received in the callback is the playback object.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/av.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n```js\n/* @hide ... */ /* @end */\n_handleVideoRef = component => {\n  const playbackObject = component;\n  ...\n}\n/* @hide ... */ /* @end */\n\nrender() {\n  return (\n      <Video\n        ref={this._handleVideoRef}\n      />\n      /* @hide ... */ /* @end */\n  )\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Importing ImageManipulator Module\nDESCRIPTION: Example showing how to import the ImageManipulator module from expo-image-manipulator package.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/imagemanipulator.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as ImageManipulator from 'expo-image-manipulator';\n```\n\n----------------------------------------\n\nTITLE: Importing Sharing Module from expo-sharing in JavaScript\nDESCRIPTION: This code snippet demonstrates how to import the Sharing module from the expo-sharing package. This module provides functions for sharing files with other applications.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/sharing.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Sharing from 'expo-sharing';\n```\n\n----------------------------------------\n\nTITLE: Creating Rule Source, Test, and Documentation Files - Bash\nDESCRIPTION: This Bash snippet demonstrates how to scaffold the core files required for a new rule: the source implementation, a corresponding test file, and a markdown documentation file. It leverages the `touch` command to create each file in the appropriate project directories. No dependencies beyond a Unix-like environment with Bash and standard utilities such as `touch` are required. Expected output is the presence of three empty files in their respective directories; the snippet itself does not populate these files or handle duplicates.\nSOURCE: https://github.com/expo/expo/blob/main/packages/eslint-plugin-expo/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntouch src/rules/newRule.ts\ntouch src/__tests__/newRule.ts\ntouch docs/rules/new-rule.md\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Module Styles in Expo\nDESCRIPTION: This snippet shows how to define CSS Module styles in an Expo project by creating a .module.css file with scoped class names.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/config/metro.mdx#2025-04-22_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n.text {\n  color: red;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Expo Version Information for Release - Shell\nDESCRIPTION: Updates various version keys related to Expo, React, React Native, and the React Native tag for the given SDK version in the versioning data. Requires Expo Tooling (`et`) and correct values for the SDK, Expo, React, and React Native versions. Each command sets a specific field for the current SDK release.\nSOURCE: https://github.com/expo/expo/blob/main/guides/releasing/Release Workflow.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\net update-versions --sdkVersion XX.X.X --key expoVersion --value <expo package version>\n```\n\nLANGUAGE: shell\nCODE:\n```\net update-versions --sdkVersion XX.X.X --key facebookReactVersion --value <react package version>\n```\n\nLANGUAGE: shell\nCODE:\n```\net update-versions --sdkVersion XX.X.X --key facebookReactNativeVersion --value <react-native package version>\n```\n\nLANGUAGE: shell\nCODE:\n```\net update-versions --sdkVersion XX.X.X --key expoReactNativeTag --value sdk-XX.X.X\n```\n\n----------------------------------------\n\nTITLE: Editing Per-Update Rollout Percentage\nDESCRIPTION: Command to modify the percentage of users who receive an update during a rollout. Opens an interactive guide for selecting the update and setting new percentage.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/rollouts.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ eas update:edit\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Background Audio in app.json\nDESCRIPTION: This JSON snippet shows how to configure an Expo app's `app.json` file to enable background audio playback on iOS standalone builds. It involves adding the 'audio' key to the `UIBackgroundModes` array within the `ios.infoPlist` configuration object.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/audio.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n```json\n{\n  \"expo\": {\n    ...\n    \"ios\": {\n      ...\n      \"infoPlist\": {\n        ...\n        \"UIBackgroundModes\": [\n          \"audio\"\n        ]\n      }\n    }\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Using Picker (segmented) Component with SwiftUI\nDESCRIPTION: This code snippet demonstrates how to use the `Picker` component from `@expo/ui/swift-ui` to create a segmented picker. It imports the `Picker` component, defines a set of options, and uses the `selectedIndex` and `onOptionSelected` props to manage the selected option.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/ui.mdx#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Picker } from '@expo/ui/swift-ui';\n\n<Picker\n  options={['$', '$$', '$$$', '$$$$']}\n  selectedIndex={selectedIndex}\n  onOptionSelected={({ nativeEvent: { index } }) => {\n    setSelectedIndex(index);\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Scheduling Notifications with Custom Sounds in TypeScript\nDESCRIPTION: This TypeScript snippet schedules a notification with a custom sound. It uses Notifications.setNotificationChannelAsync to create a notification channel and Notifications.scheduleNotificationAsync to schedule the notification itself. This setup is necessary for both Android and iOS to ensure the custom sound plays.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/notifications.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nawait Notifications.setNotificationChannelAsync('new-emails', {\n  name: 'E-mail notifications',\n  importance: Notifications.AndroidImportance.HIGH,\n  sound: 'mySoundFile.wav'\n});\n\nawait Notifications.scheduleNotificationAsync({\n  content: {\n    title: \"You've got mail! 📬\",\n    sound: 'mySoundFile.wav'\n  },\n  trigger: {\n    seconds: 2,\n    channelId: 'new-emails'\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering WebView with External URL in React Native\nDESCRIPTION: This snippet demonstrates how to use the WebView component to display an external website (expo.dev) in a React Native application. It includes styling to make the WebView take up the full screen and account for the status bar height.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/webview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { WebView } from 'react-native-webview';\nimport Constants from 'expo-constants';\nimport { StyleSheet } from 'react-native';\n\nexport default function App() {\n  return (\n    <WebView\n      style={styles.container}\n      source={{ uri: 'https://expo.dev' }}\n    />\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: Constants.statusBarHeight,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing expo-contacts in Bare React Native Projects\nDESCRIPTION: Command to install the expo-contacts package in a bare React Native project using npx expo install.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-contacts/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx expo install expo-contacts\n```\n\n----------------------------------------\n\nTITLE: Debugging Fingerprint Generation in Expo Projects\nDESCRIPTION: Command to generate and debug fingerprints for Expo projects, useful for identifying inconsistencies between local and CI/CD environments.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/continuous-deployment.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx expo-updates fingerprint:generate --debug\n```\n\n----------------------------------------\n\nTITLE: Configuring RTL Support in Expo App Config\nDESCRIPTION: JSON configuration for enabling RTL support and forcing RTL layout in an Expo application through app.json configuration.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/localization.mdx#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"extra\": {\n      \"supportsRTL\": true,\n      \"forcesRTL\": true\n    },\n    \"plugins\": [\"expo-localization\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Expo Sharing Module\nDESCRIPTION: Shows how to import the Sharing module from expo-sharing package for use in your application.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/sharing.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Sharing from 'expo-sharing';\n```\n\n----------------------------------------\n\nTITLE: API Import for Expo Background Task in JavaScript\nDESCRIPTION: Shows simple import statement for using the Expo Background Task API in JavaScript. Requires the 'expo-background-task' library to be installed in the project.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/background-task.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as BackgroundTask from 'expo-background-task';\n```\n\n----------------------------------------\n\nTITLE: Setting Page Margins for iOS Printing\nDESCRIPTION: Example of how to configure page margins when printing on iOS using the margins option with the printToFileAsync function. This allows customizing the left, top, right, and bottom margins of the printed document.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/print.mdx#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst { uri } = await Print.printToFileAsync({\n  html: 'This page is printed with margins',\n  margins: {\n    left: 20,\n    top: 50,\n    right: 20,\n    bottom: 100,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Overriding Working Directory in File Listing Function - EAS Build - YAML\nDESCRIPTION: Provides an example of invoking the \"list_files\" function with a custom \"working_directory\" argument, causing the file listing to occur in the specified subfolder (\"/a/b/c\"). Shows the flexibility of parameter overrides at invocation time in EAS Build YAML steps.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_61\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: List files\n    steps:\n      # @info #\n      - eas/checkout\n      - list_files:\n          working_directory: /a/b/c\n      # @end #\n```\n\n----------------------------------------\n\nTITLE: Importing the SQLite Legacy Module in Expo\nDESCRIPTION: Standard import statement for the legacy SQLite module in Expo applications.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/sqlite-legacy.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as SQLite from 'expo-sqlite/legacy';\n```\n\n----------------------------------------\n\nTITLE: Android Manifest Permission Configuration\nDESCRIPTION: XML configuration for adding AD_ID permission to Android manifest file.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/tracking-transparency.mdx#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"com.google.android.gms.permission.AD_ID\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring React Native Directory Check in package.json\nDESCRIPTION: This JSON snippet shows how to configure the React Native Directory check in the package.json file, specifically excluding a package from validation.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/new-architecture.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"doctor\": {\n      \"reactNativeDirectoryCheck\": {\n        \"exclude\": [\"react-redux\"]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Local EAS Build Environment (Bash)\nDESCRIPTION: This bash script configures environment variables and paths for running EAS builds locally by cloning the 'eas-build' repository and pointing EAS CLI to use local plugin and artifact directories. This is necessary for local build debugging. The script cleans any previous working directories. Requires a local clone of 'eas-build', standard Unix tools, and proper path configuration.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-updates/e2e/README.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n#!/usr/bin/env bash\\n\\nexport EAS_LOCAL_BUILD_HOME=<the eas-build directory that you just cloned above>\\n\\nexport EAS_LOCAL_BUILD_PLUGIN_PATH=$EAS_LOCAL_BUILD_HOME/bin/eas-cli-local-build-plugin\\nexport EAS_LOCAL_BUILD_WORKINGDIR=$TMPDIR/eas-build-workingdir\\nexport EAS_LOCAL_BUILD_SKIP_CLEANUP=1\\nexport EAS_LOCAL_BUILD_ARTIFACTS_DIR=$TMPDIR/eas-build-workingdir/results\\n\\nrm -rf $EAS_LOCAL_BUILD_WORKINGDIR\n```\n\n----------------------------------------\n\nTITLE: Importing DOM Component in Native App\nDESCRIPTION: Shows how to import and use a DOM component within a native React component.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/dom-components.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport DOMComponent from './my-component.tsx';\n\nexport default function App() {\n  return (\n    // This is a DOM component. It re-exports a wrapped `react-native-webview` behind the scenes.\n    <DOMComponent name=\"Europa\" />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Cellular module in JavaScript\nDESCRIPTION: This code snippet demonstrates how to import the Cellular module from the expo-cellular package in a JavaScript file.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/cellular.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Cellular from 'expo-cellular';\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-audio in app.json\nDESCRIPTION: Example of how to configure the expo-audio plugin in the app.json file. This snippet shows how to set the microphonePermission message for iOS.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/audio.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-audio\",\n        {\n          \"microphonePermission\": \"Allow $(PRODUCT_NAME) to access your microphone.\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Legacy Expo FileSystem API for Reading Files (TypeScript)\nDESCRIPTION: Demonstrates interoperability between the new object-oriented API and the legacy 'expo-file-system' API by reading file content using 'readAsStringAsync'. After creating a file with the new API, its URI is passed to the legacy method to read its text content asynchronously. Developers should ensure file existence and handle async errors. Requires both modules as dependencies.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/filesystem-next.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as FileSystem from 'expo-file-system';\nimport { File, Paths } from 'expo-file-system/next';\n\ntry {\n  const file = new File(Paths.cache, 'example.txt');\n  const content = await FileSystem.readAsStringAsync(file.uri);\n  console.log(content);\n} catch (error) {\n  console.error(error);\n}\n```\n\n----------------------------------------\n\nTITLE: Importing BlurView from expo-blur - JavaScript\nDESCRIPTION: This code snippet shows the basic import statement required to use the BlurView component from the expo-blur package in a JavaScript or React Native file. This is a necessary prerequisite for any usage of BlurView; the expo-blur package must first be installed. There are no parameters and no outputs; simply adds BlurView to the module scope for subsequent use.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/blur-view.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { BlurView } from 'expo-blur';\n```\n\n----------------------------------------\n\nTITLE: Capturing and Processing Snapshots in React Native\nDESCRIPTION: This code snippet demonstrates how to capture a snapshot of a React Native view, process the raw data, and save it as a PNG file. It handles both Android (raw format) and iOS (png format) platforms, and includes data compression and decompression.\nSOURCE: https://github.com/expo/expo/blob/main/apps/expo-go/modules/react-native-view-shot/README.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst fs = require(\"fs\");\nconst zlib = require(\"zlib\");\nconst PNG = require(\"pngjs\").PNG;\nconst Buffer = require(\"buffer\").Buffer;\n\nconst format = Platform.OS === \"android\" ? \"raw\" : \"png\";\nconst result = Platform.OS === \"android\" ? \"zip-base64\" : \"base64\";\n\ncaptureRef(this.ref, { result, format }).then((data) => {\n  // expected pattern 'width:height|', example: '1080:1731|'\n  const resolution = /^(\\d+):(\\d+)\\|/g.exec(data);\n  const width = (resolution || [\"\", 0, 0])[1];\n  const height = (resolution || [\"\", 0, 0])[2];\n  const base64 = data.substr((resolution || [\"\"])[0].length || 0);\n\n  // convert from base64 to Buffer\n  const buffer = Buffer.from(base64, \"base64\");\n  // un-compress data\n  const inflated = zlib.inflateSync(buffer);\n  // compose PNG\n  const png = new PNG({ width, height });\n  png.data = inflated;\n  const pngData = PNG.sync.write(png);\n  // save composed PNG\n  fs.writeFileSync(output, pngData);\n});\n```\n\n----------------------------------------\n\nTITLE: Using H6 Component in Expo\nDESCRIPTION: Example of using the H6 component which renders as a semantic h6 element on web and styled Text component on native.\nSOURCE: https://github.com/expo/expo/blob/main/packages/html-elements/README.md#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { H6 } from '@expo/html-elements';\nexport default () => <H6>Example<H6/>\n```\n\n----------------------------------------\n\nTITLE: Default iOS Gymfile Template with Credentials\nDESCRIPTION: Default template for generating Gymfile when iOS build credentials are provided, including code signing and export options.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_39\n\nLANGUAGE: ruby\nCODE:\n```\nsuppress_xcode_output(true)\nclean(<%- CLEAN %>)\n\nscheme(\"<%- SCHEME %>\")\n<% if (BUILD_CONFIGURATION) { %>\nconfiguration(\"<%- BUILD_CONFIGURATION %>\")\n<% } %>\n\nexport_options({\nmethod: \"<%- EXPORT_METHOD %>\",\nprovisioningProfiles: {<% _.forEach(PROFILES, function(profile) { %>\n    \"<%- profile.BUNDLE_ID %>\" => \"<%- profile.UUID %>\",<% }); %>\n}<% if (ICLOUD_CONTAINER_ENVIRONMENT) { %>,\niCloudContainerEnvironment: \"<%- ICLOUD_CONTAINER_ENVIRONMENT %>\"\n<% } %>\n})\n\nexport_xcargs \"OTHER_CODE_SIGN_FLAGS=\\\"--keychain <%- KEYCHAIN_PATH %>\\\"\"\n\ndisable_xcpretty(true)\nbuildlog_path(\"<%- LOGS_DIRECTORY %>\")\n\noutput_directory(\"<%- OUTPUT_DIRECTORY %>\")\n```\n\n----------------------------------------\n\nTITLE: Configuring StatusBar Style for Android 6.0+\nDESCRIPTION: Set the android:windowLightStatusBar property in styles.xml to control whether the StatusBar icons are light or dark colored. This requires API 23+ and should be applied to res/values-v23/styles.xml.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-splash-screen/README.md#2025-04-22_snippet_11\n\nLANGUAGE: diff\nCODE:\n```\n  <!-- Main/SplashScreen activity theme. -->\n  <style name=\"AppTheme\" parent=\"Theme.AppCompat.Light.NoActionBar\">\n    <item name=\"android:windowBackground\">@drawable/splashscreen</item>\n+   <item name=\"android:windowLightStatusBar\">true|false</item>\n    <!-- Other style properties -->\n  </style>\n```\n\n----------------------------------------\n\nTITLE: Initializing Root View in iOS AppDelegate (Objective-C)\nDESCRIPTION: This Objective-C code snippet shows how to initialize the root view in the iOS AppDelegate. It creates an RCTRootView instance with the 'main' module name, which should match the JavaScript side registration.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/troubleshooting/application-has-not-been-registered.mdx#2025-04-22_snippet_2\n\nLANGUAGE: objectivec\nCODE:\n```\nRCTRootView *rootView = [[RCTRootView alloc] initWithBridge:bridge moduleName:@\"main\" initialProperties:nil];\n```\n\n----------------------------------------\n\nTITLE: EAS Build Configuration (eas.json)\nDESCRIPTION: This JSON snippet shows the `eas.json` configuration for creating a simulator-compatible development build for iOS. The `ios.simulator` property is set to `true` within the `development` build profile, which ensures that the build can be run on an iOS simulator.\nSOURCE: https://github.com/expo/expo/blob/main/docs/scenes/get-started/set-up-your-environment/instructions/iosSimulatedDevelopmentBuild.mdx#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"development\": {\n      \"developmentClient\": true,\n      \"distribution\": \"internal\",\n      /* @info */\n      \"ios\": {\n        \"simulator\": true\n      }\n      /* @end */\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Screen Orientation with Expo on iOS\nDESCRIPTION: This JSON configuration snippet demonstrates how to set up initial screen orientation preferences for an iOS app using the expo-screen-orientation config plugin. The configuration includes the 'requireFullScreen' setting and allows defining the initial screen orientation mode that the application should use.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/screen-orientation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"ios\": {\n      \"requireFullScreen\": true\n    },\n    \"plugins\": [\n      [\n        \"expo-screen-orientation\",\n        {\n          \"initialOrientation\": \"DEFAULT\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing SecureStore API (JavaScript)\nDESCRIPTION: This JavaScript snippet shows how to import the SecureStore module from expo-secure-store. Required as the first step when using SecureStore-related API functions; import this at the top of your application code to access the module’s methods for secure storage operations.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/securestore.mdx#2025-04-22_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nimport * as SecureStore from 'expo-secure-store';\n```\n\n----------------------------------------\n\nTITLE: Importing Keep Awake Module\nDESCRIPTION: Shows the basic import statement for the KeepAwake module from expo-keep-awake package.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/keep-awake.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport KeepAwake from 'expo-keep-awake';\n```\n\n----------------------------------------\n\nTITLE: Installing expo-cellular package in React Native projects\nDESCRIPTION: Command to install the expo-cellular package using npx expo. This is used for bare React Native projects after ensuring the expo package is installed and configured.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-cellular/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-cellular\n```\n\n----------------------------------------\n\nTITLE: Importing the expo-cellular Module in JavaScript\nDESCRIPTION: Imports the `expo-cellular` module into a JavaScript or TypeScript file. This allows developers to access the functions provided by the library to retrieve cellular network information.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/cellular.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as Cellular from 'expo-cellular';\n```\n\n----------------------------------------\n\nTITLE: Creating assetlinks.json for Android App Links Verification\nDESCRIPTION: This snippet demonstrates the structure of the assetlinks.json file that needs to be placed in the /.well-known directory of your website. It establishes a trust relationship between your website and Android app by specifying the app's package name and SHA256 certificate fingerprint.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/linking/android-app-links.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"relation\": [\"delegate_permission/common.handle_all_urls\"],\n    \"target\": {\n      \"namespace\": \"android_app\",\n      /* @info Replace <CODE>com.example</CODE> with your app's package name. */\n      \"package_name\": \"com.example\",\n      /* @end */\n      \"sha256_cert_fingerprints\": [\n        // Supports multiple fingerprints for different apps and keys\n        /* @info Replace <CODE>14:6D:E9:83...</CODE> with your app's SHA256 certificate fingerprint. */\n        \"14:6D:E9:83:51:7F:66:01:84:93:4F:2F:5E:E0:8F:3A:D6:F4:CA:41:1A:CF:45:BF:8D:10:76:76:CD\"\n        /* @end */\n      ]\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Disabling Import/Export Transform in babel-preset-expo - JavaScript\nDESCRIPTION: This configuration disables the import/export transforms in babel-preset-expo by setting disableImportExportTransform to true. This may be necessary for certain custom bundler workflows or advanced setups, but should typically be managed by Metro settings. Input: Babel preset config array. Output: Babel leaves import/export syntax untransformed.\nSOURCE: https://github.com/expo/expo/blob/main/packages/babel-preset-expo/README.md#2025-04-22_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n[\n    'babel-preset-expo',\n    {\n        disableImportExportTransform: true\n    }\n],\n```\n\n----------------------------------------\n\nTITLE: Importing Camera from expo-camera/legacy\nDESCRIPTION: Code snippet showing how to import the Camera component from the legacy version of expo-camera.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/camera-legacy.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { Camera } from 'expo-camera/legacy';\n```\n\n----------------------------------------\n\nTITLE: Adding Calendar Permissions in AndroidManifest.xml\nDESCRIPTION: Defines necessary permissions in the AndroidManifest.xml for accessing calendars on Android devices. Ensures the app can read and write calendar data.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/calendar.mdx#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"android.permission.READ_CALENDAR\" />\n<uses-permission android:name=\"android.permission.WRITE_CALENDAR\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering Box Links for App Transfer Options in JSX\nDESCRIPTION: React component implementation showing three BoxLink components that provide transfer guidance for EAS projects, Google Play Store, and Apple App Store. Each link includes an icon, title, description, and destination URL.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/distribution/app-transfers.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<BoxLink\n  title=\"EAS project transfers\"\n  description=\"Transfer an EAS project to a different Expo account.\"\n  href=\"/accounts/account-types/#transfer-projects-between-accounts\"\n  Icon={PlanEnterpriseIcon}\n/>\n\n<BoxLink\n  title=\"Google project transfers\"\n  description=\"Transfer an Android app to a different Google Play developer account.\"\n  href=\"https://support.google.com/googleplay/android-developer/answer/6230247\"\n  Icon={GoogleAppStoreIcon}\n/>\n\n<BoxLink\n  title=\"Apple project transfers\"\n  description=\"Transfer an iOS app to a different Apple Developer account.\"\n  href=\"https://developer.apple.com/help/app-store-connect/transfer-an-app/overview-of-app-transfer\"\n  Icon={AppleAppStoreIcon}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Slack Notifications in EAS Build Workflow (YAML)\nDESCRIPTION: This YAML configuration demonstrates various ways to send Slack messages from an EAS Build workflow. It includes examples of sending plain text messages, using environment variables, conditional messaging based on build status, and using Slack Block Kit for more complex message layouts.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_50\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: Slack your team from custom build\n  steps:\n    # @info #\n    - eas/send_slack_message:\n        name: Send Slack message to a given webhook URL\n        inputs:\n          message: 'This is a message to plain input URL'\n          slack_hook_url: 'https://hooks.slack.com/services/[rest_of_hook_url]'\n    # @end #\n    - eas/send_slack_message:\n        name: Send Slack message to a default webhook URL from SLACK_HOOK_URL secret\n        inputs:\n          message: 'This is a test message to default URL from SLACK_HOOK_URL secret'\n    - eas/send_slack_message:\n        name: Send Slack message to a webhook URL from specified secret\n        inputs:\n          message: 'This is a test message to a URL from specified secret'\n          slack_hook_url: ${ eas.env.ANOTHER_SLACK_HOOK_URL }\n\n    - eas/build\n    - eas/send_slack_message:\n        if: ${ always() }\n        name: Send Slack message when the build finishes (Android)\n        inputs:\n          message: |\n            This is a test message when Android build finishes\n            Status: `${ steps.run_gradle.status_text }`\n            Link: `${ eas.job.expoBuildUrl }`\n    - eas/send_slack_message:\n        if: ${ always() }\n        name: Send Slack message when the build finishes (iOS)\n        inputs:\n          message: |\n            This is a test message when iOS build finishes\n            Status: `${ steps.run_fastlane.status_text }`\n            Link: `${ eas.job.expoBuildUrl }`\n    - eas/send_slack_message:\n        if: ${ failure() }\n        name: Send Slack message when the build fails (Android)\n        inputs:\n          message: |\n            This is a test message when Android build fails\n            Error: `${ steps.run_gradle.error_text }`\n    - eas/send_slack_message:\n        if: ${ failure() }\n        name: Send Slack message when the build fails (iOS)\n        inputs:\n          message: |\n            This is a test message when iOS build fails\n            Error: `${ steps.run_fastlane.error_text }`\n    - eas/send_slack_message:\n        if: ${ success() }\n        name: Send Slack message when the build succeeds\n        inputs:\n          message: |\n            This is a test message when build succeeds\n    - eas/send_slack_message:\n        if: ${ always() }\n        name: Send Slack message with Slack Block Kit layout\n        inputs:\n          payload:\n            blocks:\n              - type: section\n                text:\n                  type: mrkdwn\n                  text: |-\n                    Hello, Sir Developer\n\n                     *Your build has finished!*\n              - type: divider\n              - type: section\n                text:\n                  type: mrkdwn\n                  text: |-\n                    *${ eas.env.EAS_BUILD_ID }*\n                    *Status:* `${ steps.run_gradle.status_text }`\n                    *Link:* `${ eas.job.expoBuildUrl }`\n                accessory:\n                  type: image\n                  image_url: [your_image_url]\n                  alt_text: alt text for image\n              - type: divider\n              - type: actions\n                elements:\n                  - type: button\n                    text:\n                      type: plain_text\n                      text: 'Do a thing :rocket:'\n                      emoji: true\n                    value: a_thing\n                  - type: button\n                    text:\n                      type: plain_text\n                      text: 'Do another thing :x:'\n                      emoji: true\n                    value: another_thing\n```\n\n----------------------------------------\n\nTITLE: Exporting the WebView Component in TypeScript Module\nDESCRIPTION: TypeScript module index file that exports the WebView component and its props type for use in other modules.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/native-view-tutorial.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport { default as WebView, Props as WebViewProps } from './ExpoWebView';\n```\n\n----------------------------------------\n\nTITLE: Initializing Root Layout with Stack Navigator (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to create a root layout in Expo Router using a `_layout.tsx` file. It imports necessary modules like `useFonts`, `Stack`, `SplashScreen`, and `useEffect` from Expo. It loads fonts, prevents the splash screen from auto-hiding initially, and hides the splash screen after fonts are loaded. Finally, it returns a `Stack` component, which initializes a stack navigator for the app.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/basics/layout.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useFonts } from 'expo-font';\nimport { Stack } from 'expo-router';\nimport * as SplashScreen from 'expo-splash-screen';\nimport { useEffect } from 'react';\n\nSplashScreen.preventAutoHideAsync();\n\nexport default function RootLayout() {\n  const [loaded] = useFonts({\n    SpaceMono: require('../assets/fonts/SpaceMono-Regular.ttf'),\n  });\n\n  useEffect(() => {\n    if (loaded) {\n      SplashScreen.hideAsync();\n    }\n  }, [loaded]);\n\n  if (!loaded) {\n    return null;\n  }\n\n  return <Stack />;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing BoxLink Component in JavaScript/TypeScript\nDESCRIPTION: Imports the `BoxLink` UI component from the local path '~/ui/components/BoxLink'. This component is used in the documentation page to render styled boxes that function as links, enhancing visual presentation and navigation.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/updates.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { BoxLink } from '~/ui/components/BoxLink';\n```\n\n----------------------------------------\n\nTITLE: Configuring Yarn Workspaces in Package.json\nDESCRIPTION: Configuration for enabling Yarn workspaces in the root package.json file, defining workspace patterns for apps and packages directories.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/monorepos.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"private\": true,\n  \"name\": \"monorepo\",\n  \"version\": \"1.0.0\",\n  \"workspaces\": [\"apps/*\", \"packages/*\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json for npm linking\nDESCRIPTION: JSON configuration for the package.json file to set up npm linking and repository information.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-module-scripts/README.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"homepage\": \"https://github.com/YOU/expo-YOUR_PACKAGE#readme\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/YOU/expo-YOUR_PACKAGE.git\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/YOU/expo-YOUR_PACKAGE/issues\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Font with Text Component in React Native\nDESCRIPTION: This example demonstrates how to use a custom font with the Text component in React Native by specifying the fontFamily style prop.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/user-interface/fonts.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Text style={{ fontFamily: 'Inter-Black' }}>Inter Black.</Text>\n```\n\n----------------------------------------\n\nTITLE: Importing SQLite Module\nDESCRIPTION: Basic module import statement for expo-sqlite\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/sqlite.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as SQLite from 'expo-sqlite';\n```\n\n----------------------------------------\n\nTITLE: Extracting Certificate by Alias from Keystore PKCS#12 File in JavaScript\nDESCRIPTION: This snippet shows how to parse a base64 encoded PKCS#12 file containing a keystore using `parsePKCS12` and a password. It extracts a specific X.509 certificate using its friendly name (alias) via `getX509CertificateByFriendlyName` and then calculates its SHA-1 fingerprint with `getCertificateFingerprint`. Requires the `@expo/pkcs12` library and assumes `base64EncodedP12`, `password`, and `alias` variables are defined.\nSOURCE: https://github.com/expo/expo/blob/main/packages/@expo/pkcs12/README.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst p12 = parsePKCS12(base64EncodedP12, password); // deserializes encodedP12\nconst certificate = getX509CertificateByFriendlyName(p12, alias); // extracts single certificate stored under alias in p12\nconst sha1Fingerprint = getCertificateFingerprint(certificate, {\n  hashAlgorithm: 'sha1',\n}); // Hash like 02ec75a7181c575757baa931fe3105b7125ff10a\n```\n\n----------------------------------------\n\nTITLE: Implementing iOS RadialChart View in Swift\nDESCRIPTION: Swift implementation of the RadialChart view component for iOS using PieChartView from DGCharts library. Includes Series data model and chart configuration.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/third-party-library.mdx#2025-04-22_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\nimport ExpoModulesCore\nimport DGCharts\n\nstruct Series: Record {\n  @Field\n  var color: UIColor = UIColor.black\n\n  @Field\n  var percentage: Double = 0\n}\n\nclass ExpoRadialChartView: ExpoView {\n  let chartView = PieChartView()\n\n  required init(appContext: AppContext? = nil) {\n    super.init(appContext: appContext)\n    clipsToBounds = true\n    addSubview(chartView)\n  }\n\n  override func layoutSubviews() {\n    chartView.frame = bounds\n  }\n\n  func setChartData(data: [Series]) {\n    let set1 = PieChartDataSet(entries: data.map({ (series: Series) -> PieChartDataEntry in\n      return PieChartDataEntry(value: series.percentage)\n    }))\n    set1.colors = data.map({ (series: Series) -> UIColor in\n      return series.color\n    })\n    let chartData: PieChartData = [set1]\n    chartView.data = chartData\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example WebView Implementation\nDESCRIPTION: Example usage of the WebView component showing how to handle the onLoad event.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/native-view-tutorial.mdx#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WebView } from 'expo-web-view';\n\nexport default function App() {\n  return (\n    <WebView\n      style={{ flex: 1 }}\n      url=\"https://expo.dev\"\n      onLoad={event => alert(`loaded ${event.nativeEvent.url}`)}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Declarative Selectors to Themed Components in TSX\nDESCRIPTION: Shows how to extend themed components with selectors that conditionally apply styles based on device theme. This enables responsive styling based on light/dark modes.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-dev-client-components/README.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst Heading = create(RNText, {\n  variants: {\n    // ....\n  },\n  selectors: {\n    // when device theme is 'light'...\n    light: {\n      color: {\n        // ...any `Heading` with `color=\"success\"`...\n        success: {\n          // ...will have these styles applied\n          color: 'green',\n        },\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Animated Width Change with React Native Reanimated\nDESCRIPTION: Example demonstrating how to create an animated component that changes width randomly on button press. Uses shared values, animated styles, and timing animations with custom easing functions.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/reanimated.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Animated, {\n  useSharedValue,\n  withTiming,\n  useAnimatedStyle,\n  Easing,\n} from 'react-native-reanimated';\nimport { View, Button, StyleSheet } from 'react-native';\n\nexport default function AnimatedStyleUpdateExample() {\n  const randomWidth = useSharedValue(10);\n\n  const config = {\n    duration: 500,\n    easing: Easing.bezier(0.5, 0.01, 0, 1),\n  };\n\n  const style = useAnimatedStyle(() => {\n    return {\n      width: withTiming(randomWidth.value, config),\n    };\n  });\n\n  return (\n    <View style={styles.container}>\n      <Animated.View style={[styles.box, style]} />\n      <Button\n        title=\"toggle\"\n        onPress={() => {\n          randomWidth.value = Math.random() * 350;\n        }}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  box: {\n    width: 100,\n    height: 80,\n    backgroundColor: 'black',\n    margin: 30,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Viewing Deprecation Warnings in Android Build Logs\nDESCRIPTION: Example of common stderr output in Android build logs that shows deprecation warnings. These warnings don't necessarily cause build failures but provide information about potential future issues.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/build-reference/troubleshooting.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n[stderr] Note: /build/workingdir/build/app/node_modules/@react-native-async-storage/async-storage/android/src/main/java/com/reactnativecommunity/asyncstorage/AsyncStorageModule.java uses or overrides a deprecated API.\n[stderr] Note: Recompile with -Xlint:deprecation for details.\n```\n\n----------------------------------------\n\nTITLE: Importing Expo Updates Module in JavaScript\nDESCRIPTION: Shows a simple import statement bringing the expo-updates module into JavaScript/TypeScript code. It is generally required for interacting with update APIs, such as checking for and applying app updates inside Expo projects. Dependency: expo-updates npm package.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/updates.mdx#2025-04-22_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nimport * as Updates from 'expo-updates';\n```\n\n----------------------------------------\n\nTITLE: Importing Button with Jetpack Compose\nDESCRIPTION: This code snippet shows how to import the `Button` component from the `@expo/ui/jetpack-compose` package. This is a basic import statement required to use the component in a Jetpack Compose context.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/ui.mdx#_snippet_16\n\nLANGUAGE: ts\nCODE:\n```\n// Import from the Jetpack Compose package\nimport { Button } from '@expo/ui/jetpack-compose';\n```\n\n----------------------------------------\n\nTITLE: Importing LightSensor from expo-sensors\nDESCRIPTION: The basic import statement needed to use the LightSensor API in your Expo application. This must be included at the top of your file to access light sensor functionality.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/light-sensor.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { LightSensor } from 'expo-sensors';\n```\n\n----------------------------------------\n\nTITLE: Using CSS Modules in Expo Components\nDESCRIPTION: This code snippet demonstrates how to use CSS Modules in Expo components by importing styles from a .module.css file and applying them to both web and React Native components.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/config/metro.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport styles, { unstable_styles } from './App.module.css';\n\nexport default function Page() {\n  return (\n    <>\n      <Text\n        style={{\n          // This is how react-native-web class names are applied\n          $$css: true,\n          _: styles.text,\n        }}>\n        Hello World\n      </Text>\n      <Text style={unstable_styles.text}>Hello World</Text>\n      {/* Web-only usage: */}\n      <p className={styles.text}>Hello World</p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Optional HTTP Response Header for Code Signing in Expo Updates v1\nDESCRIPTION: Specifies the optional HTTP response header for code signing in the Expo Updates v1 protocol. Contains the signature of the manifest for validation during code signing.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/technical-specs/expo-updates-1.mdx#2025-04-22_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nexpo-signature: *\n```\n\n----------------------------------------\n\nTITLE: Picker Component Usage (Segmented, SwiftUI)\nDESCRIPTION: This code snippet demonstrates the usage of the Picker component from the `@expo/ui/swift-ui` library, specifically the segmented variant.  It takes `options`, `selectedIndex`, and `onOptionSelected` props to manage the picker options and selection. `onOptionSelected` updates the `selectedIndex` state.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/ui.mdx#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Picker } from '@expo/ui/swift-ui';\n\n<Picker\n  options={['$', '$$', '$$$', '$$$$']}\n  selectedIndex={selectedIndex}\n  onOptionSelected={({ nativeEvent: { index } }) => {\n    setSelectedIndex(index);\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Expo-Camera Plugin with JSON\nDESCRIPTION: This JSON snippet demonstrates how to configure the expo-camera plugin in the app.json file. The configurations include setting permissions for camera and microphone access, which are required for the component to function correctly on iOS devices.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/camera.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-camera\",\n        {\n          \"cameraPermission\": \"Allow $(PRODUCT_NAME) to access your camera\",\n          \"microphonePermission\": \"Allow $(PRODUCT_NAME) to access your microphone\",\n          \"recordAudioAndroid\": true\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Expo Network Module in Bare React Native Projects\nDESCRIPTION: Command to install the expo-network package using npx expo install.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-network/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-network\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Yarn Registry for Android Builds\nDESCRIPTION: This configuration sets the global Yarn configuration for Android builds. It whitelists all HTTP requests, specifies the npm registry server, and disables immutable installs to allow package modifications during the build process.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/build-reference/infrastructure.mdx#_snippet_2\n\nLANGUAGE: yml\nCODE:\n```\nunsafeHttpWhitelist:\n  - '*'\nnpmRegistryServer: 'http://10.4.0.19:4873'\nenableImmutableInstalls: false\n```\n\n----------------------------------------\n\nTITLE: Identifying JavaScript Module Resolution Errors in Metro\nDESCRIPTION: Example of a Metro bundler error message showing a module resolution failure. This indicates that the JavaScript build process failed because it couldn't find a required module, often due to case sensitivity issues or gitignore exclusions.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/build-reference/troubleshooting.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n❌ Metro encountered an error:\nUnable to resolve module ./src/Routes from /Users/expo/workingdir/build/App.js\n```\n\n----------------------------------------\n\nTITLE: Setting Meta Tags with React Server Components\nDESCRIPTION: Example showing how to use React 19 features in Expo to place meta tags anywhere in the app (web-only). This demonstrates using process.env.EXPO_OS for platform detection.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/server-components.mdx#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function Index() {\n  return (\n    <>\n      {process.env.EXPO_OS === 'web' && (\n        <>\n          <meta name=\"description\" content=\"Hello, world!\" />\n          <meta property=\"og:image\" content=\"/og-image.png\" />\n        </>\n      )}\n      <MyComponent />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: ImageManipulator Import Statement\nDESCRIPTION: Example of importing the ImageManipulator module from the expo-image-manipulator package.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/imagemanipulator.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as ImageManipulator from 'expo-image-manipulator';\n```\n\n----------------------------------------\n\nTITLE: Implementation of registerRootComponent in Expo (JavaScript)\nDESCRIPTION: This code demonstrates the implementation of the registerRootComponent function in Expo. It uses AppRegistry.registerComponent to register the main component with the 'main' app key.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/troubleshooting/application-has-not-been-registered.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction registerRootComponent(component) {\n  AppRegistry.registerComponent('main', () => component);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS WiFi Info Entitlements\nDESCRIPTION: JSON configuration for adding WiFi information access entitlements in iOS app.json configuration.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/netinfo.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ios\": {\n    \"entitlements\": {\n      \"com.apple.developer.networking.wifi-info\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Android gradle.properties\nDESCRIPTION: Modifications needed for the gradle.properties file in your Android project to enable the new architecture and Hermes JavaScript engine for Expo modules.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/brownfield/installing-expo-modules.mdx#2025-04-22_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\ndiff --git a/android/gradle.properties b/android/gradle.properties\nindex 20e2a01..e98ad88 100644\n--- a/android/gradle.properties\n+++ b/android/gradle.properties\n@@ -20,4 +20,8 @@ kotlin.code.style=official\n \n \n FLIPPER_VERSION=0.125.0\n+\n+newArchEnabled=true\n+\n+hermesEnabled=true\n```\n\n----------------------------------------\n\nTITLE: Server-Side Rendering with React DOM Server - JavaScript\nDESCRIPTION: Shows how to use 'react-dom/server' to stream server-rendered React components in response to HTTP requests. It imports 'renderToPipeableStream', defines a simple App, and a server request handler that streams HTML to the response when the shell is ready. Requires a Node.js environment with 'react' and 'react-dom' dependencies. Expects integration within an HTTP server setup; outputs streamed HTML to the response object.\nSOURCE: https://github.com/expo/expo/blob/main/packages/@expo/cli/static/canary-full/react-dom/README.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { renderToPipeableStream } from 'react-dom/server';\n\nfunction App() {\n  return <div>Hello World</div>;\n}\n\nfunction handleRequest(res) {\n  // ... in your server handler ...\n  const stream = renderToPipeableStream(<App />, {\n    onShellReady() {\n      res.statusCode = 200;\n      res.setHeader('Content-type', 'text/html');\n      stream.pipe(res);\n    },\n    // ...\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Using ColorPicker Component with SwiftUI\nDESCRIPTION: This code snippet demonstrates how to use the `ColorPicker` component from `@expo/ui/swift-ui`. It imports the `ColorPicker` component and uses it to render a color picker with a label, initial selection, and a callback for value changes. The `selection` and `onValueChanged` props are used to manage the selected color.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/ui.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ColorPicker } from '@expo/ui/swift-ui';\n\n<ColorPicker\n  label=\"Select a color\"\n  selection={color}\n  onValueChanged={setColor}\n  style={{ width: 400, height: 200 }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating a TypeScript config plugin entry point\nDESCRIPTION: JavaScript code for the app.plugin.js file, which serves as the entry point for a TypeScript config plugin.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-module-scripts/README.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = require('./plugin/build');\n```\n\n----------------------------------------\n\nTITLE: Switch Component Usage (Checkbox, SwiftUI)\nDESCRIPTION: This code snippet demonstrates the usage of the Switch component from the `@expo/ui/swift-ui` library with a `checkbox` variant. It takes `checked`, `onValueChange`, `label`, and `variant` props to manage the switch state, label, and style. The `onValueChange` callback updates the `checked` state, and the `variant` is set to \"checkbox\".\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/ui.mdx#_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Switch } from '@expo/ui/swift-ui';\n\n<Switch\n  checked={checked}\n  onValueChange={checked => {\n    setChecked(checked);\n  }}\n  label=\"Play music\"\n  variant=\"checkbox\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering APIInstallSection for DateTimePicker (JSX)\nDESCRIPTION: This snippet uses the APIInstallSection component to embed installation instructions for the DateTimePicker component directly within the documentation, linking to the relevant section of the official GitHub repository README. It depends on the APIInstallSection component and assumes external installation URLs are provided per project conventions.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/date-time-picker.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<APIInstallSection href=\"https://github.com/react-native-datetimepicker/datetimepicker#getting-started\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing React Navigation Dev Tools with React Navigation\nDESCRIPTION: Implementation of the React Navigation dev tools plugin in a React Navigation project. Shows how to connect the navigation reference to the plugin in the app's root component.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/debugging/devtools-plugins.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { NavigationContainer, useNavigationContainerRef } from '@react-navigation/native';\nimport { useReactNavigationDevTools } from '@dev-plugins/react-navigation';\n\nexport default function App() {\n  const navigationRef = useNavigationContainerRef();\n\n  useReactNavigationDevTools(navigationRef);\n\nreturn (\n    <NavigationContainer ref={navigationRef}>{/* ... */}</NavigationContainer>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Installing react-native-reanimated in Expo\nDESCRIPTION: Command to install react-native-reanimated library in an Expo project. This step can be skipped if using the default Expo template.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/user-interface/animation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo install react-native-reanimated\n```\n\n----------------------------------------\n\nTITLE: Importing RawH3 Component in TypeScript/JavaScript\nDESCRIPTION: Imports the `RawH3` component from a project-local path (`~/ui/components/Text`) using ES module syntax. The tilde (`~`) often indicates a path alias configured in the project. This component is intended for rendering level-3 headings.\nSOURCE: https://github.com/expo/expo/blob/main/docs/scenes/get-started/start-developing/ProjectStructure/files/constants.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RawH3 } from '~/ui/components/Text';\n```\n\n----------------------------------------\n\nTITLE: Using Magic Import Comments with Metro\nDESCRIPTION: Demonstrates how to use the Metro-specific magic comment to ignore dynamic imports during bundling. This allows keeping import syntax intact for runtime resolution in server environments like Workers or Node.js.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/config/metro.mdx#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n// Manually ensure `./my-module.js` is included in the correct spot relative to the module.\nconst myModule = await import(/* @metro-ignore */ './my-module.js');\n```\n\n----------------------------------------\n\nTITLE: Uploading Files with FormData using expo/fetch in TypeScript\nDESCRIPTION: Shows how to upload a file using FormData with the fetch API from Expo. Creates a text file, converts it to a blob, adds it to a FormData object, and sends it in a POST request.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/filesystem-next.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { fetch } from 'expo/fetch';\n\nconst src = new File(testDirectory, 'file.txt');\nfile.write('Hello, world!');\nconst blob = src.blob();\n\nconst formData = new FormData();\nformData.append('data', blob);\n\nconst response = await fetch('https://example.com', {\n  method: 'POST',\n  body: formData,\n});\n```\n\n----------------------------------------\n\nTITLE: Downloading Files with expo-file-system/next in TypeScript\nDESCRIPTION: Downloads a PDF file from a URL to a specified directory in the cache. Creates the destination directory if needed and provides information about the downloaded file.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/filesystem-next.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { File, Paths } from 'expo-file-system/next';\n\nconst url = 'https://pdfobject.com/pdf/sample.pdf';\nconst destination = new Directory(Paths.cache, 'pdfs');\ntry {\n  destination.create();\n  const output = await File.downloadFileAsync(url, destination);\n  console.log(output.exists); // true\n  console.log(output.uri); // path to the downloaded file, e.g. '${cacheDirectory}/pdfs/sample.pdf'\n} catch (error) {\n  console.error(error);\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering QR Code for Expo Go Android Download\nDESCRIPTION: This JSX snippet renders a QRCodeReact component to display a QR code that links to the Expo Go app on the Google Play Store. The QR code is styled with a border and background, and has a specific size of 228 pixels.\nSOURCE: https://github.com/expo/expo/blob/main/docs/scenes/get-started/set-up-your-environment/instructions/androidPhysicalExpoGo.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<div className=\"inline-block rounded-lg border border-default bg-palette-white p-4\">\n  <QRCodeReact\n    value=\"https://play.google.com/store/apps/details?id=host.exp.exponent&referrer=docs\"\n    size={228}\n  />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Playing sounds with expo-audio in React Native\nDESCRIPTION: This snippet demonstrates how to use the useAudioPlayer hook from expo-audio to play a sound file in a React Native application.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/audio.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEffect, useState } from 'react';\nimport { View, StyleSheet, Button } from 'react-native';\nimport { useAudioPlayer } from 'expo-audio';\n\nconst audioSource = require('./assets/Hello.mp3');\n\nexport default function App() {\n  const player = useAudioPlayer(audioSource);\n\n  return (\n    <View style={styles.container}>\n      <Button title=\"Play Sound\" onPress={() => player.play()} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    backgroundColor: '#ecf0f1',\n    padding: 10,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Branch Rebase Settings\nDESCRIPTION: Shell commands to configure Git to use rebase instead of merge for both existing and new branches. This ensures maintaining a linear commit history which is Expo's preferred approach.\nSOURCE: https://github.com/expo/expo/blob/main/guides/Git and Code Reviews.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# Set rebase=true for your existing branches\ngit for-each-ref --shell \\\n  --format='git config branch.%(refname:lstrip=2).rebase true' \\\n  refs/heads/ | sh\n# Set rebase=true for new branches in the future\ngit config branch.autosetuprebase always\n```\n\n----------------------------------------\n\nTITLE: Fixing React Hook Cleanup in useAutoDiscovery()\nDESCRIPTION: A fix for the useAutoDiscovery() hook that was attempting to update state on unmounted components, causing React errors due to missing cleanup logic.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-auth-session/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nuseAutoDiscovery()\n```\n\n----------------------------------------\n\nTITLE: Applying Safe Area Insets using CSS Environment Variables (Web)\nDESCRIPTION: Illustrates the traditional web-specific method for handling safe area insets using CSS environment variables (`env(safe-area-inset-*)`). This CSS snippet applies padding to a `div` element based on the device's safe area. This is shown as context for migrating to the universal `react-native-safe-area-context` approach.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/safe-area-context.mdx#2025-04-22_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n/* styles.css */\ndiv {\n  padding-top: env(safe-area-inset-top);\n  padding-left: env(safe-area-inset-left);\n  padding-bottom: env(safe-area-inset-bottom);\n  padding-right: env(safe-area-inset-right);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Events in Kotlin\nDESCRIPTION: Defines event names that the module can emit to JavaScript. These events can be used inside a View block to define callback names for native view components.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/module-api.mdx#2025-04-22_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\nEvents(\"onCameraReady\", \"onPictureSaved\", \"onBarCodeScanned\")\n```\n\n----------------------------------------\n\nTITLE: Updating Button Component with onPress Handler\nDESCRIPTION: Modified Button component implementation replacing static alert with dynamic onPress handler passed as a prop.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/create-a-modal.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Pressable style={styles.button} onPress={onPress} >\n```\n\n----------------------------------------\n\nTITLE: Push Tickets Response with Errors\nDESCRIPTION: Example response containing both successful and failed push ticket requests. Failed requests include error details and messages explaining why the notification couldn't be processed.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/push-notifications/sending-notifications.mdx#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [\n    {\n      \"status\": \"error\",\n      \"message\": \"\\\"ExponentPushToken[xxxxxxxxxxxxxxxxxxxxxx]\\\" is not a registered push notification recipient\",\n      \"details\": {\n        \"error\": \"DeviceNotRegistered\"\n      }\n    },\n    {\n      \"status\": \"ok\",\n      \"id\": \"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Building Expo Development Build\nDESCRIPTION: Command to create a development build using EAS Build system\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/push-notifications/push-notifications-setup.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ eas build\n```\n\n----------------------------------------\n\nTITLE: Using the nativeVersion Policy for Combined Versioning (JSON)\nDESCRIPTION: This app.json example configures the 'nativeVersion' policy, which combines the 'version' and either 'ios.buildNumber' or 'android.versionCode' to set the runtime version ('1.0.0(1)'). Requires: explicit manual management of build numbers and version codes between builds for proper versioning. Parameters are similar to the previous snippet. Note: differing native numbers between iOS and Android will create separate runtime versions.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/updates.mdx#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"runtimeVersion\": {\n      \"policy\": \"nativeVersion\"\n    },\n    \"version\": \"1.0.0\",\n    \"ios\": {\n      \"buildNumber\": \"1\"\n    },\n    \"android\": {\n      \"versionCode\": 1\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Web Worker Basic Implementation\nDESCRIPTION: Basic example of creating a web worker using the Worker constructor with URL.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/config/metro.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nnew Worker(new URL('./worker', window.location.href));\n```\n\n----------------------------------------\n\nTITLE: Setting up Bun Package Manager in GitHub Actions\nDESCRIPTION: Configuration snippet for using Bun instead of Yarn as the package manager in the GitHub Actions workflow.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/github-actions.mdx#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Setup Bun\n  uses: oven-sh/setup-bun@v1\n  with:\n    bun-version: latest\n```\n\n----------------------------------------\n\nTITLE: Importing Speech Module in Expo\nDESCRIPTION: Shows how to import the Speech module from expo-speech to access text-to-speech functionality in an Expo application.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/speech.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as Speech from 'expo-speech';\n```\n\n----------------------------------------\n\nTITLE: Installing Orbit on macOS\nDESCRIPTION: Command to install Orbit using Homebrew package manager on macOS.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/tools.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ brew install expo-orbit\n```\n\n----------------------------------------\n\nTITLE: Running React Native App with Expo CLI\nDESCRIPTION: Commands to compile and run a React Native app for Android and iOS using Expo CLI instead of React Native CLI.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/bare/using-expo-cli.mdx#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n# for Android\n$ npx expo run:android\n\n# for iOS\n$ npx expo run:ios\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Config Plugin in JavaScript\nDESCRIPTION: Demonstrates the simplest form of a config plugin that doesn't modify the input config.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/config-plugins/plugins-and-mods.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst withNothing = config => config;\n```\n\n----------------------------------------\n\nTITLE: Rendering BoxLink Components for Expo Features\nDESCRIPTION: This JSX code renders multiple BoxLink components, each representing a key feature or tool of Expo. The components include titles, descriptions, links, and associated icons.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/core-concepts.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<BoxLink\n  title=\"Expo SDK\"\n  description=\"Comprehensive suite of well-tested React Native modules that run on Android, iOS, and web.\"\n  href=\"/versions/latest/\"\n  Icon={DocsLogo}\n/>\n<BoxLink\n  title=\"Develop an app with Expo\"\n  description=\"An overview of the development process of building an Expo app to help build a mental model of the core development loop.\"\n  href=\"/workflow/overview/\"\n  Icon={BookOpen02Icon}\n/>\n<BoxLink\n  title=\"Expo Modules API\"\n  description=\"Write highly performant native code with modern Swift and Kotlin API.\"\n  href=\"/modules/overview/\"\n  Icon={CpuChip01Icon}\n/>\n<BoxLink\n  title=\"Prebuild\"\n  description=\"Separate React from Native to develop from any computer, upgrade easily, white label apps, and maintain larger projects.\"\n  href=\"/workflow/prebuild/\"\n  Icon={BookOpen02Icon}\n/>\n<BoxLink\n  title=\"Expo CLI\"\n  description=\"Manage dependencies, compile native apps, develop for the web, and connect to any device with a powerful dev server.\"\n  href=\"/more/expo-cli/\"\n  Icon={BookOpen02Icon}\n/>\n<BoxLink\n  title=\"Expo Go\"\n  description=\"Learn React by trying it on your simulator or device.\"\n  href=\"/get-started/set-up-your-environment/\"\n  Icon={ExpoGoLogo}\n/>\n```\n\n----------------------------------------\n\nTITLE: Executing Queries in Async Transaction with Unexpected Behavior in TypeScript\nDESCRIPTION: Illustrates a potential pitfall when using async transactions, where queries outside the transaction function may unexpectedly be included in the transaction due to the nature of async/await execution.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/sqlite-next.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nPromise.all([\n  // 1. A new transaction begins\n  db.withTransactionAsync(async () => {\n    // 2. The value \"first\" is inserted into the test table and we wait 2\n    //    seconds\n    await db.execAsync('INSERT INTO test (data) VALUES (\"first\")');\n    await sleep(2000);\n\n    // 4. Two seconds in, we read the latest data from the table\n    const row = await db.getFirstAsync<{ data: string }>('SELECT data FROM test');\n\n    // ❌ The data in the table will be \"second\" and this expectation will fail.\n    //    Additionally, this expectation will throw an error and roll back the\n    //    transaction, including the `UPDATE` query below since it ran within\n    //    the transaction.\n    expect(row.data).toBe('first');\n  }),\n  // 3. One second in, the data in the test table is updated to be \"second\".\n  //    This `UPDATE` query runs in the transaction even though its code is\n  //    outside of it because the transaction happens to be active at the time\n  //    this query runs.\n  sleep(1000).then(async () => db.execAsync('UPDATE test SET data = \"second\"')),\n]);\n```\n\n----------------------------------------\n\nTITLE: Implementing Convertible Protocol in Swift for CMTime\nDESCRIPTION: Example implementation of the Convertible protocol for CMTime type, demonstrating how to convert JavaScript values to native Swift types. The convert method handles conversion of Double values to CMTime instances with maximum precision.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/module-api.mdx#2025-04-22_snippet_24\n\nLANGUAGE: swift\nCODE:\n```\nimport ExpoModulesCore\n\nextension CMTime: @retroactive Convertible {\n  public static func convert(from value: Any?, appContext: AppContext) throws -> CMTime {\n    if let seconds = value as? Double {\n      return CMTime(seconds: seconds, preferredTimescale: .max)\n    }\n    throw Conversions.ConvertingException<CMTime>(value)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing expo-tracking-transparency via Expo CLI (Bash)\nDESCRIPTION: This command installs the expo-tracking-transparency package in your project using the Expo CLI. It ensures that the correct version compatible with your Expo setup is added to your npm dependencies. No parameters are required beyond ensuring you are in the correct project directory. Expected output is that expo-tracking-transparency will be listed in your package.json dependencies after execution.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-tracking-transparency/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-tracking-transparency\n```\n\n----------------------------------------\n\nTITLE: Importing Apple Authentication Module\nDESCRIPTION: JavaScript import statement for the Apple Authentication module.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/apple-authentication.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as AppleAuthentication from 'expo-apple-authentication';\n```\n\n----------------------------------------\n\nTITLE: Configuring Font Plugin in app.json\nDESCRIPTION: Example configuration for the expo-font config plugin to embed font files at build time.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/font.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-font\",\n        {\n          \"fonts\": [\"path/to/file.ttf\"]\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Android Advertising ID Permission to AndroidManifest.xml (XML)\nDESCRIPTION: This XML snippet adds the com.google.android.gms.permission.AD_ID permission to your AndroidManifest.xml file. It is required for identifying users for advertising purposes on Android. No dependencies besides a standard Android project structure. The main parameter is the android:name attribute specifying the AD_ID permission. Failure to include this may result in limited ad-tracking capability.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-tracking-transparency/README.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Added permissions -->\\n<uses-permission android:name=\\\"com.google.android.gms.permission.AD_ID\\\"/>\n```\n\n----------------------------------------\n\nTITLE: Adding AAR Dependency for SDK 52+ in expo-module.config.json\nDESCRIPTION: Configures the Android module to include an AAR file as a dependency through gradleAarProjects configuration in SDK 52 and above.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/third-party-library.mdx#2025-04-22_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n    \"android\": {\n+     \"gradleAarProjects\": [\n+       {\n+         \"name\": \"test-aar\",\n+         \"aarFilePath\": \"android/libs/test.aar\"\n+       }\n+     ],\n    \"modules\": [\n```\n\n----------------------------------------\n\nTITLE: Importing Expo Splash Screen Module in TypeScript\nDESCRIPTION: Imports the `expo-splash-screen` module, making its functions available under the `SplashScreen` namespace. This is the standard way to access the library's API methods like `preventAutoHideAsync` and `hideAsync` within a React Native application using TypeScript.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-splash-screen/README.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as SplashScreen from 'expo-splash-screen';\n```\n\n----------------------------------------\n\nTITLE: Implementing Media Looping with Counter\nDESCRIPTION: JavaScript code showing how to implement precise control over media looping by counting loop iterations. This example demonstrates how to loop media exactly 20 times before stopping playback.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/av.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst N = 20;\n\n_onPlaybackStatusUpdate = playbackStatus => {\n  if (playbackStatus.didJustFinish) {\n    if (this.state.numberOfLoops == N - 1) {\n      playbackObject.setIsLooping(false);\n    }\n    this.setState({ numberOfLoops: this.state.numberOfLoops + 1 });\n  }\n};\n\nthis.setState({ numberOfLoops: 0 });\n// Load the playbackObject and obtain the reference.\nplaybackObject.setOnPlaybackStatusUpdate(this._onPlaybackStatusUpdate);\nplaybackObject.setIsLooping(true);\n```\n\n----------------------------------------\n\nTITLE: Using ViewShot Component with Image Loading\nDESCRIPTION: Example of capturing a view after an image has loaded. This demonstrates waiting for an image to load before capturing the view, which ensures all content is rendered properly.\nSOURCE: https://github.com/expo/expo/blob/main/apps/expo-go/modules/react-native-view-shot/README.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// waiting an image\n\nfunction ExampleWaitingCapture {\n  const ref = useRef();\n\n  const onImageLoad = useCallback(() => {\n    ref.current.capture().then(uri => {\n      console.log(\"do something with \", uri);\n    })\n  }, []);\n\n  return (\n    <ViewShot ref={ref}>\n      <Text>...Something to rasterize...</Text>\n      <Image ... onLoad={onImageLoad} />\n    </ViewShot>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: AppDelegate.mm Entry Point Update\nDESCRIPTION: A diff showing the required change to AppDelegate.mm to support the \"main\" field in package.json, which is necessary for using Expo Router and other Expo features.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/bare/installing-expo-modules.mdx#2025-04-22_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n - (NSURL *)getBundleURL\n {\n #if DEBUG\n-  return [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@\"index\"];\n+  return [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@\".expo/.virtual-metro-entry\"];\n #else\n   return [[NSBundle mainBundle] URLForResource:@\"main\" withExtension:@\"jsbundle\"];\n #endif\n```\n\n----------------------------------------\n\nTITLE: Clearing Caches for Expo CLI with npm\nDESCRIPTION: This snippet demonstrates the process of clearing caches when using Expo CLI with npm. It covers removing node_modules, cleaning npm cache, reinstalling dependencies, resetting Watchman, clearing Metro and Haste map caches, and starting Expo with a clean cache.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/troubleshooting/clear-cache-macos-linux.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ rm -rf node_modules\n\n$ npm cache clean --force\n\n$ npm install\n\n$ watchman watch-del-all\n\n$ rm -fr $TMPDIR/haste-map-*\n\n$ rm -rf $TMPDIR/metro-cache\n\n$ npx expo start --clear\n```\n\n----------------------------------------\n\nTITLE: Rendering H3 Heading with RawH3 Component in JSX (React)\nDESCRIPTION: This JSX snippet utilizes the imported `RawH3` component to render a level 3 heading element. The content of the heading is the string \"package.json\". This requires a React environment and the `RawH3` component to be previously imported or defined in the scope.\nSOURCE: https://github.com/expo/expo/blob/main/docs/scenes/get-started/start-developing/ProjectStructure/files/package-json.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<RawH3>package.json</RawH3>\n```\n\n----------------------------------------\n\nTITLE: Importing Magnetometer Components in JavaScript\nDESCRIPTION: Shows how to import both the calibrated Magnetometer and uncalibrated MagnetometerUncalibrated components from the expo-sensors package. This is the basic setup required before using any magnetometer functionality.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/magnetometer.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { Magnetometer, MagnetometerUncalibrated } from 'expo-sensors';\n```\n\n----------------------------------------\n\nTITLE: Installing EAS CLI with npm\nDESCRIPTION: This command installs the Expo Application Services (EAS) command-line interface (CLI) globally using npm. It allows users to interact with EAS services from their terminal, enabling them to build, submit, and manage Expo applications.\nSOURCE: https://github.com/expo/expo/blob/main/docs/scenes/get-started/set-up-your-environment/instructions/iosSimulatedDevelopmentBuild.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ npm install -g eas-cli\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Gradle for Metro Entry File Resolution\nDESCRIPTION: Modifying the Android app/build.gradle file to use Metro module resolution to find the entry file. This adds a projectRoot variable and updates the react configuration object to use Expo's resolveAppEntry script.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/config/metro.mdx#2025-04-22_snippet_17\n\nLANGUAGE: diff\nCODE:\n```\n+ def projectRoot = rootDir.getAbsoluteFile().getParentFile().getAbsolutePath()\n\nreact {\n+    entryFile = file([\"node\", \"-e\", \"require('expo/scripts/resolveAppEntry')\", projectRoot, \"android\", \"absolute\"].execute(null, rootDir).text.trim())\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Expo Task Manager in Expo Projects\nDESCRIPTION: This shell command installs the 'expo-task-manager' package in an Expo project using the expo-cli. Ensure that your project is set up with Expo before running this command.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-task-manager/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx expo install expo-task-manager\n```\n\n----------------------------------------\n\nTITLE: Measuring Hermes Bundle Compression\nDESCRIPTION: Terminal commands to compress a Hermes bundle using both Brotli and Gzip compression algorithms and display the resulting file sizes.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/estimate-bandwidth.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbrotli -5 -k bundle.hbc\ngzip -9 -k bundle.hbc\nls -lh bundle.hbc.br bundle.hbc.gz\n```\n\n----------------------------------------\n\nTITLE: Installing Xcode Command Line Tools\nDESCRIPTION: Command to install the latest version of Xcode command line tools, which is a prerequisite for using Fastlane.\nSOURCE: https://github.com/expo/expo/blob/main/fastlane/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nxcode-select --install\n```\n\n----------------------------------------\n\nTITLE: WebBrowser Module Import Statement\nDESCRIPTION: Standard import statement for the expo-web-browser module which provides access to the system's web browser functionalities.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/webbrowser.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as WebBrowser from 'expo-web-browser';\n```\n\n----------------------------------------\n\nTITLE: Configuring EAS Build Channels in eas.json\nDESCRIPTION: This snippet demonstrates how to configure different channels in eas.json for production and preview builds. Production builds use the 'production' channel, while preview builds use the 'staging' channel with internal distribution enabled.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/build/updates.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"production\": {\n      \"channel\": \"production\"\n    },\n    \"preview\": {\n      \"channel\": \"staging\",\n      \"distribution\": \"internal\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Documentation Components in JSX\nDESCRIPTION: This JSX snippet renders the APIInstallSection and BoxLink components. The APIInstallSection likely provides installation instructions, while the BoxLink creates a linked box with information about the official documentation.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/skia.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<APIInstallSection href=\"https://shopify.github.io/react-native-skia/docs/getting-started/installation/\" />\n\n<BoxLink\n  title=\"Visit official documentation\"\n  description=\"Get full information on API and its usage.\"\n  Icon={BookOpen02Icon}\n  href=\"https://shopify.github.io/react-native-skia/\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Ignore Patterns in .fingerprintignore File\nDESCRIPTION: Sample configuration for a .fingerprintignore file that excludes specific directories while keeping certain files. This uses gitignore-like syntax to control which files are included in the fingerprint calculation.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/fingerprint.mdx#2025-04-22_snippet_0\n\nLANGUAGE: ignore\nCODE:\n```\n# Ignore the entire /app/ios folder\n/app/ios/**/*\n\n# But still keep /app/ios/Podfile and /app/ios/Podfile.lock\n!/app/ios/Podfile\n!/app/ios/Podfile.lock\n```\n\n----------------------------------------\n\nTITLE: Registering Root Component in Expo/React Native (JavaScript)\nDESCRIPTION: This snippet shows how to register the root component of an Expo or React Native app using the registerRootComponent function. It imports the necessary modules and registers the App component as the root.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/troubleshooting/application-has-not-been-registered.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { registerRootComponent } from 'expo';\nimport App from './App';\nregisterRootComponent(App);\n```\n\n----------------------------------------\n\nTITLE: Importing react-native-svg in JavaScript\nDESCRIPTION: This snippet shows how to import all components from react-native-svg library. It demonstrates the basic import statement needed to use SVG components in a React Native app.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/svg.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Svg from 'react-native-svg';\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Picker Plugin in app.json\nDESCRIPTION: Configuration for the expo-image-picker plugin in app.json to set custom permission messages for photos access.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/imagepicker.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-image-picker\",\n        {\n          \"photosPermission\": \"The app accesses your photos to let you share them with your friends.\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing an Expo Module Project with Beta Release (Shell)\nDESCRIPTION: This command initializes a new Expo module project using a beta release of the `create-expo-module` tool. It sets the `EXPO_BETA` environment variable to `1` before running the `yarn create expo-module` command. This is useful for testing pre-release features. Requires Yarn and Node.js to be installed.\nSOURCE: https://github.com/expo/expo/blob/main/packages/create-expo-module/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nEXPO_BETA=1 yarn create expo-module\n```\n\n----------------------------------------\n\nTITLE: Using Gauge Component with SwiftUI\nDESCRIPTION: This code snippet demonstrates how to use the `Gauge` component from `@expo/ui/swift-ui`. It imports the `Gauge` component and configures it with min/max values and a current value.  It also sets color stops using `PlatformColor` for dynamic theming.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/ui.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Gauge } from \"@expo/ui/swift-ui\";\n\n<Gauge\n  max={{ value: 1, label: '1' }}\n  min={{ value: 0, label: '0' }}\n  current={{ value: 0.5 }}\n  color={[\n    PlatformColor('systemRed'),\n    PlatformColor('systemOrange'),\n    PlatformColor('systemYellow'),\n    PlatformColor('systemGreen'),\n  ]}\n  type=\"circular\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating a channel for EAS Update using EAS CLI\nDESCRIPTION: This command creates a new channel named 'production' for EAS Update. Channels are used to manage different release streams for your app updates.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/standalone-service.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\neas channel:create production\n```\n\n----------------------------------------\n\nTITLE: Importing Localization Methods in React Native\nDESCRIPTION: Basic example of importing the primary localization methods from the expo-localization package. These methods provide access to the device's locale and calendar settings.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/localization.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { getLocales, getCalendars } from 'expo-localization';\n```\n\n----------------------------------------\n\nTITLE: Rendering BoxLink Components in Markdown for Expo Documentation\nDESCRIPTION: This code snippet demonstrates the use of the BoxLink component to create clickable resource links in the Expo documentation. Each BoxLink includes a title, description, link, and an associated icon.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/development-builds/next-steps.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<BoxLink\n  title=\"Configuring EAS Build with eas.json\"\n  description=\"Learn how a project using EAS services is configured with eas.json.\"\n  href=\"/build/eas-json/\"\n  Icon={BuildIcon}\n/>\n\n<BoxLink\n  title=\"Environment variables\"\n  description=\"Learn about different ways to use environment variables in an Expo project.\"\n  href=\"/guides/environment-variables/\"\n  Icon={BookOpen02Icon}\n/>\n\n<BoxLink\n  title=\"Android build process\"\n  description=\"Learn how an Android project is built on EAS Build.\"\n  href=\"/build-reference/android-builds/\"\n  Icon={BuildIcon}\n/>\n\n<BoxLink\n  title=\"iOS build process\"\n  description=\"Learn how an iOS project is built on EAS Build.\"\n  href=\"/build-reference/ios-builds/\"\n  Icon={BuildIcon}\n/>\n\n<BoxLink\n  title=\"Set up EAS Build with a monorepo \"\n  description=\"Learn how to set up EAS Build with a monorepo.\"\n  href=\"/build-reference/build-with-monorepos/\"\n  Icon={BuildIcon}\n/>\n```\n\n----------------------------------------\n\nTITLE: Switch Component Usage (SwiftUI)\nDESCRIPTION: This code snippet demonstrates the usage of the Switch component from the `@expo/ui/swift-ui` library. It takes `checked`, `onValueChange`, and `label` props to manage the switch state and label. The `onValueChange` callback updates the `checked` state.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/ui.mdx#_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Switch } from '@expo/ui/swift-ui';\n\n<Switch\n  checked={checked}\n  onValueChange={checked => {\n    setChecked(checked);\n  }}\n  label=\"Play music\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Using git-crypt Commands for Expo Secrets\nDESCRIPTION: Commands used for managing encrypted secrets in the Expo repository using git-crypt. Includes unlock and lock commands for decrypting and encrypting secrets respectively.\nSOURCE: https://github.com/expo/expo/blob/main/secrets/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nunlock\nlock\n```\n\n----------------------------------------\n\nTITLE: Initializing and Building Project with EAS CLI (Bash)\nDESCRIPTION: These bash commands initialize EAS (Expo Application Services) and kick off a build for either Android or iOS using a specific profile for update testing. This requires EAS CLI to be installed and configured. Use <android|ios> to specify the target platform. Outputs are EAS builds in the cloud tied to the chosen profile.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-updates/e2e/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\neas init\\neas build --profile=updates_testing_debug --platform=<android|ios>\n```\n\n----------------------------------------\n\nTITLE: BottomSheet Component Usage (SwiftUI)\nDESCRIPTION: This code snippet demonstrates the usage of the BottomSheet component from the `@expo/ui/swift-ui` library. It takes `isOpen` and `onIsOpenedChange` props to control its visibility. It displays \"Hello, world!\" inside the bottom sheet.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/ui.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { BottomSheet } from '@expo/ui/swift-ui';\n\n<BottomSheet isOpen={isOpen} onIsOpenedChange={e => setIsOpened(e)}>\n  <Text>Hello, world!</Text>\n</BottomSheet>\n```\n\n----------------------------------------\n\nTITLE: Importing and Utilizing RawH3 Component in JavaScript\nDESCRIPTION: This snippet imports the RawH3 component from a text-related module and uses it in a JSX element to display the word 'app'. The component is part of a UI library that manages styled text elements within the application.\nSOURCE: https://github.com/expo/expo/blob/main/docs/scenes/get-started/start-developing/ProjectStructure/files/app.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { RawH3 } from '~/ui/components/Text';\n\n<RawH3>app</RawH3>\n```\n\n----------------------------------------\n\nTITLE: Push Ticket Format Structure in JavaScript\nDESCRIPTION: Defines the structure of push notification ticket response containing status, receipt ID, and potential error information for individual notifications and the entire request.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/push-notifications/sending-notifications.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"data\": [\n    {\n      \"status\": \"error\" | \"ok\",\n      \"id\": string, // this is the Receipt ID\n      // if status === \"error\"\n      \"message\": string,\n      \"details\": JSON\n    },\n    ...\n  ],\n  // only populated if there was an error with the entire request\n  \"errors\": [{\n    \"code\": string,\n    \"message\": string\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Event Handling with Player.addListener Method\nDESCRIPTION: Illustrates how to use the Player.addListener method for event handling. This is the most flexible approach but requires manual cleanup and more boilerplate code.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/video.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// ...Imports, definition of the component, creating the player etc.\n\nuseEffect(() => {\n  const subscription = player.addListener('statusChange', ({ status, error }) => {\n    setPlayerStatus(status);\n    setPlayerError(error);\n    console.log('Player status changed: ', status);\n  });\n\n  return () => {\n    subscription.remove();\n  };\n}, []);\n// Rest of the component...\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Structure\nDESCRIPTION: Table of contents and section headers for release branch management documentation\nSOURCE: https://github.com/expo/expo/blob/main/guides/releasing/Release Branches.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release Branches\n\n- [Release Branches](#release-branches)\n  - [Example](#example)\n  - [Edge cases](#edge-cases)\n    - [The bug has been fixed on main but not on the release branch.](#the-bug-has-been-fixed-on-main-but-not-on-the-release-branch)\n    - [main has significantly diverged from the release branch.](#main-has-significantly-diverged-from-the-release-branch)\n    - [It's easier to write and test the fix on the release branch instead of main.](#it-s-easier-to-write-and-test-the-fix-on-the-release-branch-instead-of-main)\n- [Versioning Android and iOS Code](#versioning-android-and-ios-code)\n- [Incrementing Version Numbers](#incrementing-version-numbers)\n  - [Prelease Versions](#prelease-versions)\n  - [Shortcomings](#shortcomings)\n```\n\n----------------------------------------\n\nTITLE: Rendering SF Symbol in React Native App (JSX)\nDESCRIPTION: This snippet demonstrates how to use the SymbolView component from expo-symbols to render an SF Symbol in a React Native application. It shows the basic setup of an App component with a single symbol displayed.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/symbols.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SymbolView, SymbolViewProps, SFSymbol } from 'expo-symbols';\nimport { StyleSheet, View } from 'react-native';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <SymbolView name=\"airpods.chargingcase\" style={styles.symbol} type=\"hierarchical\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  symbol: {\n    width: 35,\n    height: 35,\n    margin: 5,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Camera Permissions to Android Manifest\nDESCRIPTION: XML snippet showing how to add camera and audio recording permissions to the AndroidManifest.xml file for Android projects not using Continuous Native Generation.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/camera.mdx#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Added permission -->\n<uses-permission android:name=\"android.permission.CAMERA\" />\n\n<!-- Only when recording videos with audio -->\n<uses-permission android:name=\"android.permission.RECORD_AUDIO\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-asset in app.json\nDESCRIPTION: Example configuration for expo-asset plugin in app.json to specify asset files and directories that should be linked to the native project.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/asset.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-asset\",\n        {\n          \"assets\": [\"path/to/file.png\", \"path/to/directory\"]\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Default npm Registry for EAS Build on iOS\nDESCRIPTION: The default .npmrc configuration used by EAS Build on iOS, which points to a self-hosted npm cache for faster dependency installation.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/build-reference/private-npm-packages.mdx#2025-04-22_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nregistry=http://10.254.24.8:4873\n```\n\n----------------------------------------\n\nTITLE: Importing IntentLauncher Module in JavaScript\nDESCRIPTION: This code snippet shows how to import the entire IntentLauncher module from the expo-intent-launcher package. This allows access to all exported functions and constants from the module.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/intent-launcher.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as IntentLauncher from 'expo-intent-launcher';\n```\n\n----------------------------------------\n\nTITLE: Using Expo CLI Customize Command\nDESCRIPTION: Command to generate default config files for customizing Expo projects. This is useful when using tools other than Expo CLI to ensure your app works as expected.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/more/expo-cli.mdx#2025-04-23_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo customize\n```\n\n----------------------------------------\n\nTITLE: Creating Local Config Plugin Module\nDESCRIPTION: Example showing how to create a local config plugin as a separate module to ensure unique fingerprints when modifying config plugin implementations.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/fingerprint.mdx#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nconst { withInfoPlist } = require('expo/config-plugins');\n\nconst withMyPlugin = config => {\n  return withInfoPlist(config, config => {\n    config.modResults.NSLocationWhenInUseUsageDescription =\n      'Allow $(PRODUCT_NAME) to use your location';\n    return config;\n  });\n};\n\nmodule.exports = withMyPlugin;\n```\n\n----------------------------------------\n\nTITLE: Metro Configuration Setup\nDESCRIPTION: Basic Metro configuration setup for Expo projects.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/config/metro.mdx#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst { getDefaultConfig } = require('expo/metro-config');\n\nconst config = getDefaultConfig(__dirname);\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Importing React Native Safe Area Context Components\nDESCRIPTION: Shows how to import the main components and hooks from the react-native-safe-area-context library.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/safe-area-context.mdx#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport {\n  SafeAreaView,\n  SafeAreaProvider,\n  SafeAreaInsetsContext,\n  useSafeAreaInsets,\n} from 'react-native-safe-area-context';\n```\n\n----------------------------------------\n\nTITLE: Adding Camera Permissions in iOS Info.plist\nDESCRIPTION: XML snippet showing how to add NSCameraUsageDescription and NSMicrophoneUsageDescription keys to the Info.plist file for iOS camera and microphone access.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-camera/README.md#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<key>NSCameraUsageDescription</key>\n<string>Allow $(PRODUCT_NAME) to use the camera</string>\n<key>NSMicrophoneUsageDescription</key>\n<string>Allow $(PRODUCT_NAME) to use the microphone</string>\n```\n\n----------------------------------------\n\nTITLE: Running Expo app compilation and launch\nDESCRIPTION: These commands are used to compile the Expo application using either Xcode or Android Studio, or through Expo CLI for iOS and Android platforms. Successful execution should lead directly into the application post-build.\nSOURCE: https://github.com/expo/expo/blob/main/guides/releasing/Quality Assurance.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpx expo run:ios\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpx expo run:android\n```\n\n----------------------------------------\n\nTITLE: Starting Expo projects for SDK QA with CLI\nDESCRIPTION: This command is used to start the development server for the native-component-list application, enabling developers to test React Native component integration with the new SDK version. Proper sdkVersion configuration in app.json is required before execution.\nSOURCE: https://github.com/expo/expo/blob/main/guides/releasing/Quality Assurance.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpx expo start\n```\n\n----------------------------------------\n\nTITLE: Configuring tsconfig.json for an Expo module plugin\nDESCRIPTION: JSON configuration for the plugin/tsconfig.json file, extending the expo-module-scripts plugin TypeScript configuration.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-module-scripts/README.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"expo-module-scripts/tsconfig.plugin\",\n  \"compilerOptions\": {\n    \"outDir\": \"build\",\n    \"rootDir\": \"src\"\n  },\n  \"include\": [\"./src\"],\n  \"exclude\": [\"**/__mocks__/*\", \"**/__tests__/*\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding APIInstallSection for Documentation Link (JSX)\nDESCRIPTION: Renders the APIInstallSection component with the provided documentation URL as the href prop, guiding users to the official FlashList install docs. This provides a standardized installation instruction section within Expo documentation. Requires the APIInstallSection component and documentation routing support.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/flash-list.mdx#2025-04-22_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<APIInstallSection href=\\\"https://shopify.github.io/flash-list/docs/\\\" />\n```\n\n----------------------------------------\n\nTITLE: iOS Create Expo Client Build Command\nDESCRIPTION: Fastlane command to create an Expo client build for iOS.\nSOURCE: https://github.com/expo/expo/blob/main/fastlane/README.md#2025-04-22_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n[bundle exec] fastlane ios create_expo_client_build\n```\n\n----------------------------------------\n\nTITLE: Using dismissTo Action in Expo Router\nDESCRIPTION: Demonstrates the dismissTo action which navigates back to a specific route in the stack history. If the target route doesn't exist, it performs a push action instead.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/advanced/stack.mdx#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button, View, Text } from 'react-native';\nimport { useRouter } from 'expo-router';\n\nexport default function Settings() {\n  const router = useRouter();\n\n  const handleDismissAll = () => {\n    router.dismissTo('/')\n  };\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Button title=\"Go to first screen\" onPress={handleDismissAll} />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing MailComposer from expo-mail-composer\nDESCRIPTION: Example showing how to import the MailComposer module from the expo-mail-composer package for use in your application.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/mail-composer.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as MailComposer from 'expo-mail-composer';\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Schemes in iOS Info.plist\nDESCRIPTION: XML configuration to add to Info.plist for iOS to enable custom URL schemes. Defines a CFBundleURLTypes array with URL scheme information for deep linking.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-auth-session/README.md#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dict>\n    ...\n    <key>CFBundleURLTypes</key>\n    <array>\n        <dict>\n            <key>CFBundleURLName</key>\n            <string>gizmos</string>\n            <key>CFBundleURLSchemes</key>\n            <array>\n                <string>example</string>\n            </array>\n        </dict>\n    </array>\n</dict>\n```\n\n----------------------------------------\n\nTITLE: Configuring React Native Directory Check in Expo Doctor\nDESCRIPTION: Shows how to customize the React Native Directory validation behavior in Expo Doctor, including options to enable/disable the check, exclude specific packages, and control unknown package listing.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/config/package-json.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"doctor\": {\n      \"reactNativeDirectoryCheck\": {\n        \"enabled\": true,\n        \"exclude\": [\"/foo/\", \"bar\"],\n        \"listUnknownPackages\": true\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Preview Build Profile Configuration\nDESCRIPTION: Minimal configuration for preview builds with internal distribution enabled.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/build/eas-json.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"preview\": {\n      \"distribution\": \"internal\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Font Module\nDESCRIPTION: Example showing how to import the Font module from expo-font.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/font.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Font from 'expo-font';\n```\n\n----------------------------------------\n\nTITLE: Installing React Native WebView Example\nDESCRIPTION: Example command showing how to install react-native-webview package in an Expo project\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/development-builds/introduction.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install react-native-webview\n```\n\n----------------------------------------\n\nTITLE: Clearing Caches with React Native CLI and npm\nDESCRIPTION: Command sequence to clear node modules, npm cache, watchman cache, and Metro bundler cache when using React Native CLI with npm.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/troubleshooting/clear-cache-windows.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ rm -rf node_modules\n\n$ npm cache clean --force\n\n$ npm install\n\n$ watchman watch-del-all\n\n$ del %localappdata%\\Temp\\haste-map-*\n\n$ del %localappdata%\\Temp\\metro-cache\n\n$ npm start -- --reset-cache\n```\n\n----------------------------------------\n\nTITLE: Importing Expo Styleguide Icons in JSX\nDESCRIPTION: Import statements for Expo styleguide icons and custom BoxLink component used in the documentation page.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/preview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { BookOpen02Icon } from '@expo/styleguide-icons/outline/BookOpen02Icon';\nimport { LayersTwo02Icon } from '@expo/styleguide-icons/outline/LayersTwo02Icon';\n\nimport { BoxLink } from '~/ui/components/BoxLink';\n```\n\n----------------------------------------\n\nTITLE: Documentation Metadata Block in Markdown\nDESCRIPTION: YAML frontmatter block defining the documentation page metadata including title, sidebar information, and description.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/hosting/introduction.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: EAS Hosting\nsidebar_title: Introduction\nhideTOC: true\ndescription: EAS Hosting is a service for quickly deploying the web projects built using the Expo Router library and React Native web.\n---\n```\n\n----------------------------------------\n\nTITLE: Adding Camera Maven Repository in Android build.gradle\nDESCRIPTION: Gradle configuration for adding the custom maven repository required by expo-camera to the Android build system.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/camera.mdx#2025-04-22_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\nallprojects {\n  repositories {\n      // * Your other repositories here *\n      // * Add a new maven block after other repositories / blocks *\n      maven {\n          // expo-camera bundles a custom com.google.android:cameraview\n          url \"$rootDir/../node_modules/expo-camera/android/maven\"\n      }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering BoxLink Components for EAS Submit Documentation in JSX\nDESCRIPTION: This code snippet renders three BoxLink components, each linking to different sections of the EAS Submit documentation. It includes icons and descriptions for submitting to Google Play Store, Apple App Store, and configuring submissions.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/submit/introduction.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<BoxLink\n  title=\"Submit to the Google Play Store\"\n  description=\"Learn how to submit an Android app to the Google Play Store.\"\n  href=\"/submit/android\"\n  Icon={GoogleAppStoreIcon}\n/>\n<BoxLink\n  title=\"Submit to the Apple App Store\"\n  description=\"Learn how to submit an iOS/iPadOS app to the Apple App Store.\"\n  href=\"/submit/ios\"\n  Icon={AppleAppStoreIcon}\n/>\n<BoxLink\n  title=\"Configuration with eas.json\"\n  description=\"See how to configure your submissions with eas.json.\"\n  href=\"/submit/eas-json\"\n  Icon={Settings01Icon}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Apple App Site Association for Handoff\nDESCRIPTION: JSON configuration file for enabling Apple Handoff functionality, including applinks, activitycontinuation, and webcredentials settings.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/advanced/apple-handoff.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"applinks\": {\n    \"details\": [\n      {\n        \"appIDs\": [\"<APPLE_TEAM_ID>.<IOS_BUNDLE_ID>\"],\n        \"components\": [\n          {\n            \"/\": \"*\",\n            \"comment\": \"Matches all routes\"\n          }\n        ]\n      }\n    ]\n  },\n  \"activitycontinuation\": {\n    \"apps\": [\"<APPLE_TEAM_ID>.<IOS_BUNDLE_ID>\"]\n  },\n  \"webcredentials\": {\n    \"apps\": [\"<APPLE_TEAM_ID>.<IOS_BUNDLE_ID>\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PaymentSheet localization for iOS in app.json\nDESCRIPTION: This JSON configuration enables mixed localizations and specifies preferred languages for the PaymentSheet on iOS. It's added to the ios.infoPlist section of the app.json file.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/stripe.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"ios\": {\n      \"infoPlist\": {\n        \"CFBundleAllowMixedLocalizations\": true,\n        \"CFBundleLocalizations\": [\"fr\"]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Gradle for Custom Entry File\nDESCRIPTION: Updates the Android app/build.gradle file to use Expo's entry resolution script for determining the correct entry file during the build process.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/config/metro.mdx#2025-04-22_snippet_25\n\nLANGUAGE: diff\nCODE:\n```\n+ def projectRoot = rootDir.getAbsoluteFile().getParentFile().getAbsolutePath()\n\nreact {\n+    entryFile = file([\"node\", \"-e\", \"require('expo/scripts/resolveAppEntry')\", projectRoot, \"android\", \"absolute\"].execute(null, rootDir).text.trim())\n}\n```\n\n----------------------------------------\n\nTITLE: Asset Usage in API Routes\nDESCRIPTION: Shows how to handle asset imports in API routes, particularly for serving images with proper content type headers.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/config/metro.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport asset from './img.png';\n\nexport async function GET(req: Request) {\n  const ImageData = await fetch(\n    new URL(\n      // Access the asset URI.\n      asset.uri,\n      // Append to the current request URL origin.\n      req.url\n    )\n  ).then(res => res.arrayBuffer());\n\n  return new Response(ImageData, {\n    headers: {\n      'Content-Type': 'image/png',\n    },\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Using Step Outputs in EAS Build YAML Configuration\nDESCRIPTION: Shows how to use outputs from one step as inputs in another step by defining step IDs and referencing them in an EAS Build custom configuration.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: Outputs demo\n  steps:\n    - run:\n        name: Produce output\n        id: id123 # <---- !!!\n        outputs: [foo]\n        command: |\n          echo \"Producing output for another step\"\n          set-output foo bar\n    - run:\n        name: Use output from another step\n        inputs:\n          foo: ${ steps.id123.foo }\n        command: |\n          echo \"foo = \\\"${ inputs.foo }\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Generated Font HTML Output\nDESCRIPTION: Shows the automatically generated HTML output for font optimization, including preload link and @font-face CSS declaration.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/reference/static-rendering.mdx#2025-04-22_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"preload\" href=\"/assets/inter.ttf\" as=\"font\" crossorigin />\n<style id=\"expo-generated-fonts\" type=\"text/css\">\n  @font-face {\n    font-family: inter;\n    src: url(/assets/inter.ttf);\n    font-display: auto;\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Configuring Expo Notifications in app.json\nDESCRIPTION: JSON configuration for expo-notifications plugin in app.json, including settings for notification icon, color, default channel, custom sounds, and background notifications.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/notifications.mdx#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-notifications\",\n        {\n          \"icon\": \"./local/assets/notification_icon.png\",\n          \"color\": \"#ffffff\",\n          \"defaultChannel\": \"default\",\n          \"sounds\": [\n            \"./local/assets/notification_sound.wav\",\n            \"./local/assets/notification_sound_other.wav\"\n          ],\n          \"enableBackgroundRemoteNotifications\": false\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-screen-capture for iOS\nDESCRIPTION: Command to install CocoaPods dependencies for the expo-screen-capture module on iOS. This step is necessary after adding the package to the project.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-screen-capture/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx pod-install\n```\n\n----------------------------------------\n\nTITLE: Viewing EAS Updates with CLI Commands\nDESCRIPTION: Command for viewing specific update details using the update group ID.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/eas-cli.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ eas update:view [update-group-id]\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest in package.json\nDESCRIPTION: Basic configuration required in package.json to set up jest-expo as the testing preset.\nSOURCE: https://github.com/expo/expo/blob/main/packages/jest-expo/README.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n  ...\n  \"test\": \"jest\"\n},\n\"jest\": {\n  \"preset\": \"jest-expo\"\n}\n```\n\n----------------------------------------\n\nTITLE: Update Versions Endpoint Command\nDESCRIPTION: Command to remove beta tag from new SDK version on the versions endpoint\nSOURCE: https://github.com/expo/expo/blob/main/guides/releasing/Release Workflow.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\net update-versions-endpoint -s ${SDK_MAJOR_VERSION}.0.0 -k 'beta' --delete\n```\n\n----------------------------------------\n\nTITLE: Get Build Job Type Configuration YAML\nDESCRIPTION: Configures a 'get-build' job in an EAS Workflow.  The 'type' is set to 'get-build', and the 'params' object specifies criteria such as platform, profile, distribution, etc., to retrieve an existing build from EAS. The possible parameters help refine the search for an existing build.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/workflows/syntax.mdx#_snippet_26\n\nLANGUAGE: YAML\nCODE:\n```\njobs:\n  my_job:\n    # @info #\n    type: get-build\n    # @end #\n    params:\n      platform: ios | android # optional\n      profile: string # optional\n      distribution: store | internal | simulator # optional\n      channel: string # optional\n      app_identifier: string # optional\n      app_build_version: string # optional\n      app_version: string # optional\n      git_commit_hash: string # optional\n      fingerprint_hash: string # optional\n      sdk_version: string # optional\n      runtime_version: string # optional\n      simulator: boolean # optional\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel for Incremental React Compiler Adoption\nDESCRIPTION: Babel configuration to selectively enable React Compiler for specific files or components.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/react-compiler.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = function (api) {\n  api.cache(true);\n\n  return {\n    presets: [\n      [\n        'babel-preset-expo',\n        {\n          'react-compiler': {\n            sources: filename => {\n              // Match file names to include in the React Compiler.\n              return filename.includes('src/path/to/dir');\n            },\n          },\n        },\n      ],\n    ],\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Using KeepAwake Hook in React Native\nDESCRIPTION: Example of using the useKeepAwake hook to prevent screen sleep in a functional component. The hook keeps the screen active as long as the component remains mounted.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/keep-awake.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useKeepAwake } from 'expo-keep-awake';\nimport React from 'react';\nimport { Text, View } from 'react-native';\n\nexport default function KeepAwakeExample() {\n  useKeepAwake();\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>This screen will never sleep!</Text>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Apple App Site Association for Universal Links in JSON\nDESCRIPTION: This snippet shows the configuration for the apple-app-site-association file to enable universal links for all routes in an Expo Router app. It sets up the applinks details with a wildcard path to match all routes.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/advanced/apple-handoff.mdx#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"applinks\": {\n    \"details\": [\n      {\n        \"appIDs\": [\"<APPLE_TEAM_ID>.<IOS_BUNDLE_ID>\"],\n        \"components\": [\n          {\n            \"/\": \"*\",\n            \"comment\": \"Matches all routes\"\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Components for React JSX\nDESCRIPTION: Imports necessary components from the project's UI library for rendering the setup guide. These components include ContentSpotlight for images, Terminal for command-line snippets, and Step for structuring the guide.\nSOURCE: https://github.com/expo/expo/blob/main/docs/scenes/get-started/set-up-your-environment/instructions/_xcodeInstructions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ContentSpotlight } from '~/ui/components/ContentSpotlight';\nimport { Terminal } from '~/ui/components/Snippet';\nimport { Step } from '~/ui/components/Step';\n```\n\n----------------------------------------\n\nTITLE: Configuring PostCSS in Expo Projects\nDESCRIPTION: Example of a PostCSS configuration file to enable features like autoprefixing in Expo CSS processing.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/config/metro.mdx#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": {\n    \"autoprefixer\": {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Crypto Polyfill Instance - JavaScript\nDESCRIPTION: Demonstrates how to import the default crypto polyfill from expo-standard-web-crypto as a module. This makes an instance of the Crypto API available within the local scope for modular codebases. Use this when you prefer not to pollute the global namespace, and direct access to a specific instance is required.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-standard-web-crypto/README.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport crypto from 'expo-standard-web-crypto';\n```\n\n----------------------------------------\n\nTITLE: Logging into Expo Account\nDESCRIPTION: Command to authenticate with Expo services using EAS CLI\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/hosting/get-started.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ eas login\n```\n\n----------------------------------------\n\nTITLE: Configuring Fast Refresh in Webpack\nDESCRIPTION: Example webpack configuration for enabling Fast Refresh using React Refresh Webpack Plugin.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/migrate/from-expo-webpack.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst createExpoWebpackConfigAsync = require('@expo/webpack-config');\nconst ReactRefreshWebpackPlugin = require('@pmmmwh/react-refresh-webpack-plugin');\n\nmodule.exports = async function (env, argv) {\n  const config = await createExpoWebpackConfigAsync(env, argv);\n\n  // Use the React refresh plugin in development mode\n  if (env.mode === 'development') {\n    config.plugins.push(new ReactRefreshWebpackPlugin({ disableRefreshCheck: true }));\n  }\n\n  return config;\n};\n```\n\n----------------------------------------\n\nTITLE: Creating and Using URL APIs in Expo - JavaScript\nDESCRIPTION: Demonstrates how to instantiate a URL object and create URLSearchParams in a JavaScript/Expo environment. Requires the expo package; on native platforms, it uses built-in global implementations of URL and URLSearchParams primitives. The 'url' variable is initialized with a sample URL, and 'params' is created as a URLSearchParams object for query manipulation. Inputs are provided as string URLs, and outputs are URL objects or parameter instances. This is platform-agnostic code, functional across web, iOS, Android, and tvOS.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/url.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst url = new URL('https://expo.dev');\n\nconst params = new URLSearchParams();\n```\n\n----------------------------------------\n\nTITLE: Fetching Network State with NetInfo\nDESCRIPTION: Demonstrates how to fetch the current network connection state once using the NetInfo API. Returns connection type and connection status.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/netinfo.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nNetInfo.fetch().then(state => {\n  console.log('Connection type', state.type);\n  console.log('Is connected?', state.isConnected);\n});\n```\n\n----------------------------------------\n\nTITLE: Using Global CSS Styles in React Components\nDESCRIPTION: This code shows how to import and use global CSS styles in React components for both web and React Native.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/config/metro.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport './styles.css';\nimport { View } from 'react-native';\n\nexport default function App() {\n  return (\n    <>\n      {/* Use `className` to assign the style with React DOM components. */}\n      <div className=\"container\">Hello World</div>\n\n      {/* Use `style` with the following syntax to append class names in React Native for web. */}\n      <View\n        style={{\n          $$css: true,\n          _: 'container',\n        }}>\n        Hello World\n      </View>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom StatusBar Background Color in Android\nDESCRIPTION: Define a custom color for the StatusBar by adding a new color resource to colors.xml and referencing it in the theme's statusBarColor property in styles.xml.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-splash-screen/README.md#2025-04-22_snippet_12\n\nLANGUAGE: diff\nCODE:\n```\n  <resources>\n    <color name=\"splashscreen_background\">#D0D0C0</color>\n+   <color name=\"splashscreen_statusbar_color\">#(AA)RRGGBB</color> <!-- #AARRGGBB or #RRGGBB format -->\n  </resources>\n```\n\n----------------------------------------\n\nTITLE: Importing the expo-brightness Module in JavaScript\nDESCRIPTION: Imports the entire `expo-brightness` module and assigns it to the `Brightness` namespace. This allows access to all exported functions and constants from the library, such as `requestPermissionsAsync` and `setSystemBrightnessAsync`.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/brightness.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport * as Brightness from 'expo-brightness';\n```\n\n----------------------------------------\n\nTITLE: Step ID Configuration YAML\nDESCRIPTION: Demonstrates setting an ID for a step.  The `id` property is used to reference the step, enabling downstream steps or jobs to access step outputs. It must be unique within a job.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/workflows/syntax.mdx#_snippet_39\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  my_job:\n    outputs:\n      test: ${{ steps.step_1.outputs.test }} # References the output from step_1\n    steps:\n      # @info #\n      - id: step_1\n        # @end #\n        run: set-output test \"hello world\"\n```\n\n----------------------------------------\n\nTITLE: Event Handling with useEvent Hook\nDESCRIPTION: Demonstrates how to use the useEvent hook to listen for changes in the VideoPlayer's status. This approach creates a stateful value that can be used in a component.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/video.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEvent } from 'expo';\n// ... Other imports, definition of the component, creating the player etc.\n\nconst { status, error } = useEvent(player, 'statusChange', { status: player.status });\n// Rest of the component...\n```\n\n----------------------------------------\n\nTITLE: Configuring EAS JSON for Android Submission\nDESCRIPTION: This JSON configuration in eas.json sets up the Android submission process, specifying the path to the Google Service Account key file and setting the release track to internal.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/eas/android-production-build.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"submit\": {\n    \"production\": {\n      \"android\": {\n        \"serviceAccountKeyPath\": \"./service-account-file.json\",\n        \"track\": \"internal\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Sensors Module in JavaScript\nDESCRIPTION: Shows how to import the entire Sensors module or individual sensor components from expo-sensors. This allows access to various device sensors like Accelerometer, Barometer, DeviceMotion, etc.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/sensors.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Sensors from 'expo-sensors';\n// OR\nimport {\n  Accelerometer,\n  Barometer,\n  DeviceMotion,\n  Gyroscope,\n  LightSensor,\n  Magnetometer,\n  MagnetometerUncalibrated,\n  Pedometer,\n} from 'expo-sensors';\n```\n\n----------------------------------------\n\nTITLE: Importing Custom React Components in JSX\nDESCRIPTION: This code imports custom React components (APIInstallSection and BoxLink) that are used to structure the documentation page. These components likely provide consistent styling and functionality across the documentation.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/skia.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { APIInstallSection } from '~/components/plugins/InstallSection';\nimport { BoxLink } from '~/ui/components/BoxLink';\n```\n\n----------------------------------------\n\nTITLE: Using Shared Container for SQLite Database on iOS\nDESCRIPTION: Implementation of SQLite database sharing between iOS apps using shared containers and expo-file-system.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/sqlite.mdx#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SQLiteProvider, defaultDatabaseDirectory } from 'expo-sqlite';\nimport { Paths } from 'expo-file-system/next';\nimport { useMemo } from 'react';\nimport { Platform, View } from 'react-native';\n\nexport default function App() {\n  const dbDirectory = useMemo(() => {\n    if (Platform.OS === 'ios') {\n      return Object.values(Paths.appleSharedContainers)?.[0]?.uri;\n    }\n    return defaultDatabaseDirectory;\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <SQLiteProvider databaseName=\"test.db\" directory={dbDirectory}>\n        <Header />\n        <Content />\n      </SQLiteProvider>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Notification Sounds in app.json\nDESCRIPTION: JSON configuration for adding custom notification sounds using the expo-notifications plugin in app.json. This specifies local paths to sound files that can be used as custom notification sounds.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/notifications.mdx#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-notifications\",\n        {\n          \"sounds\": [\"local/path/to/mySoundFile.wav\"]\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Logging in to EAS CLI\nDESCRIPTION: This command initiates the login process for the Expo Application Services (EAS) CLI. It will typically open a browser window for you to authenticate with your Expo account.\nSOURCE: https://github.com/expo/expo/blob/main/docs/scenes/get-started/set-up-your-environment/instructions/androidPhysicalDevelopmentBuild.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ eas login\n```\n\n----------------------------------------\n\nTITLE: Importing the Expo Fingerprint API in TypeScript\nDESCRIPTION: Demonstrates how to import the entire `@expo/fingerprint` module namespace as `Fingerprint` in a TypeScript file. This allows access to the programmatic API provided by the library for tasks like generating fingerprints directly in scripts.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/fingerprint.mdx#2025-04-22_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nimport * as Fingerprint from '@expo/fingerprint';\n```\n\n----------------------------------------\n\nTITLE: Rendering BoxLink Components for EAS Services in JSX\nDESCRIPTION: This code snippet demonstrates the use of the BoxLink component to create clickable boxes for each EAS service. Each BoxLink includes a title, description, link, and an icon representing the service.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/index.mdx#2025-04-22_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<BoxLink\n  title=\"EAS Workflows\"\n  description=\"Automate your development release workflows.\"\n  href=\"/eas/workflows/get-started/\"\n  Icon={Dataflow01Icon}\n/>\n\n<BoxLink\n  title=\"EAS Build\"\n  description=\"Compile and sign Android/iOS apps with custom native code in the cloud.\"\n  href=\"/build/introduction\"\n  Icon={BuildIcon}\n/>\n\n<BoxLink\n  title=\"EAS Hosting (in preview)\"\n  description=\"Deploy Expo Router and React Native web apps and API routes.\"\n  href=\"/eas/hosting/introduction\"\n  Icon={Cloud01Icon}\n/>\n\n<BoxLink\n  title=\"EAS Submit\"\n  description=\"Upload your app to the Google Play Store or Apple App Store from the cloud with one CLI command.\"\n  href=\"/submit/introduction\"\n  Icon={EasSubmitIcon}\n/>\n\n<BoxLink\n  title=\"EAS Update\"\n  description=\"Address small bugs and push quick fixes directly to end-users.\"\n  href=\"/eas-update/introduction\"\n  Icon={LayersTwo02Icon}\n/>\n\n<BoxLink\n  title=\"EAS Metadata (in preview)\"\n  description=\"Upload all app store information required to get your app published.\"\n  href=\"/eas/metadata/\"\n  Icon={EasMetadataIcon}\n/>\n\n<BoxLink\n  title=\"EAS Insights (in preview)\"\n  description=\"View analytics about a project's performance, usage, and reach.\"\n  href=\"/eas-insights/introduction/\"\n  Icon={DataIcon}\n/>\n```\n\n----------------------------------------\n\nTITLE: Running the iOS Project on Device using Expo CLI\nDESCRIPTION: This command builds and runs the iOS project on a connected device. It requires a valid `ios.bundleIdentifier` in `app.json` and an iOS device connected via USB. The command also starts a development server after building the app.\nSOURCE: https://github.com/expo/expo/blob/main/docs/scenes/get-started/set-up-your-environment/instructions/iosPhysicalDevelopmentBuildLocal.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo run:ios --device\n```\n\n----------------------------------------\n\nTITLE: Successful Push Tickets Response\nDESCRIPTION: Example of a successful response from the push notification API containing push tickets. Each ticket includes a status and ID that can be used to retrieve push receipts later.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/push-notifications/sending-notifications.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [\n    { \"status\": \"ok\", \"id\": \"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\" },\n    { \"status\": \"ok\", \"id\": \"YYYYYYYY-YYYY-YYYY-YYYY-YYYYYYYYYYYY\" },\n    { \"status\": \"ok\", \"id\": \"ZZZZZZZZ-ZZZZ-ZZZZ-ZZZZ-ZZZZZZZZZZZZ\" },\n    { \"status\": \"ok\", \"id\": \"AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA\" }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Text with RawH3 Component in JSX\nDESCRIPTION: This snippet demonstrates the usage of the previously imported `RawH3` component within JSX syntax. It renders the text \"tsconfig.json\" as a level 3 heading. This requires the `RawH3` component to be available in the current scope.\nSOURCE: https://github.com/expo/expo/blob/main/docs/scenes/get-started/start-developing/ProjectStructure/files/tsconfig-json.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<RawH3>tsconfig.json</RawH3>\n```\n\n----------------------------------------\n\nTITLE: Importing captureRef in React Native\nDESCRIPTION: This snippet shows how to import the captureRef function from the react-native-view-shot library.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/captureRef.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { captureRef } from 'react-native-view-shot';\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Entitlements for iCloud Storage\nDESCRIPTION: XML configuration for iOS entitlements file to enable iCloud storage features manually. Includes necessary keys for iCloud container identifiers, services, and KV store identifiers.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/document-picker.mdx#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<key>com.apple.developer.icloud-container-identifiers</key>\n<array>\n    <string>iCloud.dev.expo.my-app</string>\n</array>\n<key>com.apple.developer.icloud-services</key>\n<array>\n    <string>CloudDocuments</string>\n</array>\n<key>com.apple.developer.ubiquity-container-identifiers</key>\n<array>\n    <string>iCloud.dev.expo.my-app</string>\n</array>\n<key>com.apple.developer.ubiquity-kvstore-identifier</key>\n<string>$(TeamIdentifierPrefix)dev.expo.my-app</string>\n```\n\n----------------------------------------\n\nTITLE: Using SafeAreaInsetsContext.Consumer in React Native\nDESCRIPTION: Demonstrates how to use the SafeAreaInsetsContext.Consumer component to access inset data in a component.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/safe-area-context.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SafeAreaInsetsContext } from 'react-native-safe-area-context';\n\nfunction Component() {\n  return (\n    <SafeAreaInsetsContext.Consumer>\n      {insets => <View style={{ paddingTop: insets.top }} />}\n    </SafeAreaInsetsContext.Consumer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Dotenv Files with Expo CLI - Shell\nDESCRIPTION: These shell commands demonstrate two platform-agnostic ways to disable dotenv file loading in Expo CLI by setting the EXPO_NO_DOTENV environment variable. The first method uses cross-env for cross-platform compatibility, while the second uses inline environment variable definition available on macOS and Linux. Both approaches prevent Expo CLI from loading .env files, which may be desired for production or custom workflow scenarios.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/config/metro.mdx#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n# All users can run cross-env, followed by the Expo CLI command\\n$ npx cross-env EXPO_NO_DOTENV=1 expo start\\n# Alternatively, macOS and Linux users can define the environment variable, then run npx, followed by the Expo CLI command\\n$ EXPO_NO_DOTENV=1 npx expo start\n```\n\n----------------------------------------\n\nTITLE: Implementing LivePhotoView with Image Picker in React Native\nDESCRIPTION: A complete example showing how to use expo-live-photo with expo-image-picker to select Live Photos from the device library and display them in a React Native app. The component includes options to start and stop playback of the Live Photo with different modes.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/live-photo.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as ImagePicker from 'expo-image-picker';\nimport { LivePhotoAsset, LivePhotoView, LivePhotoViewType } from 'expo-live-photo';\nimport { useRef, useState } from 'react';\nimport { View, StyleSheet, Text, Button } from 'react-native';\n\nexport default function LivePhotoScreen() {\n  const viewRef = useRef<LivePhotoViewType>(null);\n  const [livePhoto, setLivePhoto] = useState<LivePhotoAsset | null>(null);\n\n  const pickImage = async () => {\n    const result = await ImagePicker.launchImageLibraryAsync({\n      mediaTypes: ['livePhotos'],\n    });\n\n    if (!result.canceled && result.assets[0].pairedVideoAsset?.uri) {\n      setLivePhoto({\n        photoUri: result.assets[0].uri,\n        pairedVideoUri: result.assets[0].pairedVideoAsset.uri,\n      });\n    } else {\n      console.error('Failed to pick a live photo');\n    }\n  };\n\n  if (!LivePhotoView.isAvailable()) {\n    return (\n      <View style={styles.container}>\n        <Text>expo-live-photo is not available on this platform 😕</Text>\n      </View>\n    );\n  }\n\n  return (\n    <View style={styles.container}>\n      <LivePhotoView\n        ref={viewRef}\n        source={livePhoto}\n        style={[styles.livePhotoView, { display: livePhoto ? 'flex' : 'none' }]}\n        onLoadComplete={() => {\n          console.log('Live photo loaded successfully!');\n        }}\n        onLoadError={error => {\n          console.error('Failed to load the live photo: ', error.message);\n        }}\n      />\n      <View style={livePhoto ? styles.pickImageCollapsed : styles.pickImageExpanded}>\n        <Button title={livePhoto ? 'Change Image' : 'Pick an image'} onPress={pickImage} />\n      </View>\n      <Button title=\"Start Playback Hint\" onPress={() => viewRef.current?.startPlayback('hint')} />\n      <Button title=\"Start Playback\" onPress={() => viewRef.current?.startPlayback('full')} />\n      <Button title=\"Stop Playback\" onPress={() => viewRef.current?.stopPlayback()} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    paddingVertical: 20,\n    paddingHorizontal: 40,\n  },\n  livePhotoView: {\n    alignSelf: 'stretch',\n    height: 300,\n  },\n  pickImageExpanded: {\n    alignSelf: 'stretch',\n    height: 300,\n    justifyContent: 'center',\n  },\n  pickImageCollapsed: {\n    marginVertical: 10,\n  },\n  button: {\n    marginVertical: 10,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Background Audio for iOS\nDESCRIPTION: JSON configuration in app.json to enable background audio playback capability for iOS standalone apps.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/audio.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"ios\": {\n      \"infoPlist\": {\n        \"UIBackgroundModes\": [\n          \"audio\"\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Invoking a Custom Function in Build Steps\nDESCRIPTION: Updated build configuration that includes the custom function in the build steps sequence. This configuration shows how to add the custom function to the workflow between standard steps.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/custom-builds/functions.mdx#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: My example config\n  steps:\n    - eas/checkout\n    - eas/install_node_modules\n    # @info #\n    - my_function\n    # @end #\n    - run:\n        name: Finished\n        command: echo Finished\n\nfunctions:\n  my_function:\n    name: My function\n    path: ./myFunction\n```\n\n----------------------------------------\n\nTITLE: Calculating Total Monthly Updates\nDESCRIPTION: Formula for calculating the total number of possible updates per month based on bandwidth allocation and MAU-based additional bandwidth.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/estimate-bandwidth.mdx#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n(1,024 GiB × 1,024 MiB/GiB) + (10,000 MAU × 40 MiB/MAU) = 1,448,576 MiB per month\n1,448,576 MiB / 3.85 MiB ≈ 376,254 updates\n```\n\n----------------------------------------\n\nTITLE: Running EAS Workflow Manually via CLI\nDESCRIPTION: Command line instruction for manually triggering the deployment workflow using the EAS CLI tool.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/hosting/workflows.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ eas workflow:run .eas/workflows/deploy.yml\n```\n\n----------------------------------------\n\nTITLE: Importing LinearGradient from Expo package\nDESCRIPTION: Simple import statement showing how to import the LinearGradient component from the expo-linear-gradient package for use in a React Native application.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/linear-gradient.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { LinearGradient } from 'expo-linear-gradient';\n```\n\n----------------------------------------\n\nTITLE: Importing Lottie Component\nDESCRIPTION: Basic import statement for the Lottie component from lottie-react-native package.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/lottie.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport LottieView from 'lottie-react-native';\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Yarn Registry for iOS Builds\nDESCRIPTION: This configuration sets the global Yarn configuration for iOS builds. It whitelists all HTTP requests, specifies the npm registry server, and disables immutable installs to allow package modifications during the build process.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/build-reference/infrastructure.mdx#_snippet_4\n\nLANGUAGE: yml\nCODE:\n```\nunsafeHttpWhitelist:\n  - '*'\nnpmRegistryServer: 'http://10.94.183.70:4873'\nenableImmutableInstalls: false\n```\n\n----------------------------------------\n\nTITLE: Installing JDK via Homebrew\nDESCRIPTION: Commands to install JDK 17 (zulu17) using Homebrew package manager on macOS\nSOURCE: https://github.com/expo/expo/blob/main/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nbrew tap homebrew/cask-versions\nbrew install --cask zulu@17\n```\n\n----------------------------------------\n\nTITLE: Importing expo-calendar Module in JavaScript\nDESCRIPTION: This JavaScript snippet shows the standard way to import the `expo-calendar` module into your project. This makes all the functions and constants exported by the library available under the `Calendar` namespace.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/calendar.mdx#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport * as Calendar from 'expo-calendar';\n```\n\n----------------------------------------\n\nTITLE: Importing React Components in Markdown\nDESCRIPTION: This code snippet demonstrates how to import custom React components (Collapsible and ContentSpotlight) in a Markdown file. These components are likely used to enhance the documentation with interactive elements.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/review/with-orbit.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nimport { Collapsible } from '~/ui/components/Collapsible';\nimport { ContentSpotlight } from '~/ui/components/ContentSpotlight';\n```\n\n----------------------------------------\n\nTITLE: Configuring Debug Build Settings in EAS JSON\nDESCRIPTION: Configuration for creating a debug build with expo-updates enabled using EAS. Includes settings for both Android and iOS platforms with the EX_UPDATES_NATIVE_DEBUG environment variable.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/debug.mdx#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"preview_debug\": {\n      \"env\": {\n        \"EX_UPDATES_NATIVE_DEBUG\": \"1\"\n      },\n      \"android\": {\n        \"distribution\": \"internal\",\n        \"withoutCredentials\": true,\n        \"gradleCommand\": \":app:assembleDebug\"\n      },\n      \"ios\": {\n        \"simulator\": true,\n        \"buildConfiguration\": \"Debug\"\n      },\n      \"channel\": \"preview_debug\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Record Type in iOS/Android\nDESCRIPTION: Example of creating a FileReadOptions record type that represents structured options for file reading with typed fields and default values.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/module-api.mdx#2025-04-22_snippet_25\n\nLANGUAGE: swift\nCODE:\n```\nstruct FileReadOptions: Record {\n  @Field\n  var encoding: String = \"utf8\"\n\n  @Field\n  var position: Int = 0\n\n  @Field\n  var length: Int?\n}\n\n// Now this record can be used as an argument of the functions or the view prop setters.\nFunction(\"readFile\") { (path: String, options: FileReadOptions) -> String in\n  // Read the file using given `options`\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass FileReadOptions : Record {\n  @Field\n  val encoding: String = \"utf8\"\n\n  @Field\n  val position: Int = 0\n\n  @Field\n  val length: Int? = null\n}\n\n// Now this record can be used as an argument of the functions or the view prop setters.\nFunction(\"readFile\") { path: String, options: FileReadOptions ->\n  // Read the file using given `options`\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin TypeScript\nDESCRIPTION: TypeScript configuration for the plugin directory extending expo-module-scripts settings.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/config-plugin-and-native-module-tutorial.mdx#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"expo-module-scripts/tsconfig.plugin\",\n  \"compilerOptions\": {\n    \"outDir\": \"build\",\n    \"rootDir\": \"src\"\n  },\n  \"include\": [\"./src\"],\n  \"exclude\": [\"**/__mocks__/*\", \"**/__tests__/*\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing IntentLauncher Module\nDESCRIPTION: Shows how to import the entire IntentLauncher module. This import pattern gives access to all the functions and constants provided by the library.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/intent-launcher.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as IntentLauncher from 'expo-intent-launcher';\n```\n\n----------------------------------------\n\nTITLE: Configuring the Build Script for EAS Functions\nDESCRIPTION: The package.json build script configuration for compiling a TypeScript function using ncc. This script compiles the TypeScript code into a single JavaScript file with all dependencies included.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/custom-builds/functions.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"scripts\": {\n    ...\n    \"build\": \"ncc build ./src/index.ts -o build/ --minify --no-cache --no-source-map-register\" /* @end */\n    ...\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @react-native-community/slider Package in React Native\nDESCRIPTION: This code snippet demonstrates how to include the APIInstallSection component, which provides installation instructions for the @react-native-community/slider package.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/slider.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<APIInstallSection href=\"https://github.com/callstack/react-native-slider#installation--usage\" />\n```\n\n----------------------------------------\n\nTITLE: React Native Safe Area Implementation\nDESCRIPTION: Modern React Native implementation using useSafeAreaInsets hook for handling safe area insets.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/safe-area-context.mdx#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\n\nfunction App() {\n  const insets = useSafeAreaInsets();\n  return (\n    <View\n      style={{\n        paddingTop: insets.top,\n        paddingLeft: insets.left,\n        paddingBottom: insets.bottom,\n        paddingRight: insets.right,\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Info.plist for Background Tasks\nDESCRIPTION: XML configuration that must be added to the Info.plist file for iOS projects. This registers the background task identifier required for the BackgroundTask API to function properly in standalone, detached, and bare iOS apps.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-background-task/README.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<key>BGTaskSchedulerPermittedIdentifiers</key>\n<array>\n  <string>com.expo.modules.backgroundtask.processing</string>\n</array>\n```\n\n----------------------------------------\n\nTITLE: Importing ScreenOrientation Module in JavaScript\nDESCRIPTION: Basic import statement for the expo-screen-orientation module to access screen orientation functionality in your application.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/screen-orientation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as ScreenOrientation from 'expo-screen-orientation';\n```\n\n----------------------------------------\n\nTITLE: Importing Expo Notifications API\nDESCRIPTION: Shows how to import the `expo-notifications` API, which provides various functions to manage push notifications effectively. It includes functionalities such as scheduling notifications, managing permissions, and handling notification channels and categories.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/notifications.mdx#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Notifications from 'expo-notifications';\n```\n\n----------------------------------------\n\nTITLE: Configuring Fingerprint with fingerprint.config.js\nDESCRIPTION: Example of a fingerprint.config.js file that customizes the fingerprint calculation by specifying certain sources to skip during hash generation.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/fingerprint.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n/** @type {import('@expo/fingerprint').Config} */\nconst config = {\n  sourceSkips: [\n    'ExpoConfigRuntimeVersionIfString',\n    'ExpoConfigVersions',\n    'PackageJsonAndroidAndIosScriptsIfNotContainRun',\n  ],\n};\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Implementing ReactActivityLifecycleListener in Kotlin\nDESCRIPTION: This code snippet shows how to create a ReactActivityLifecycleListener class to hook into specific Activity lifecycle events in Kotlin.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/android-lifecycle-listeners.mdx#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\n// android/src/main/java/expo/modules/mylib/MyLibReactActivityLifecycleListener.kt\npackage expo.modules.mylib\n\nimport android.app.Activity\nimport android.os.Bundle\nimport expo.modules.core.interfaces.ReactActivityLifecycleListener\n\nclass MyLibReactActivityLifecycleListener : ReactActivityLifecycleListener {\n  override fun onCreate(activity: Activity, savedInstanceState: Bundle?) {\n    // Your setup code in `Activity.onCreate`.\n    doSomeSetupInActivityOnCreate(activity)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Development Build (iOS)\nDESCRIPTION: This command creates a development build for the iOS platform using the 'development' profile defined in your eas.json configuration. It requires a configured EAS project and an ad hoc provisioning profile.\nSOURCE: https://github.com/expo/expo/blob/main/docs/scenes/get-started/set-up-your-environment/instructions/iosPhysicalDevelopmentBuild.mdx#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ eas build --platform ios --profile development\n```\n\n----------------------------------------\n\nTITLE: Verifying Required Assets for Expo Updates\nDESCRIPTION: This command checks if all required assets are included in an Expo update. It's used to ensure that necessary assets are not accidentally excluded when optimizing storage and bandwidth usage.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/billing/usage-based-pricing.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo-updates assets:verify <dir>\n```\n\n----------------------------------------\n\nTITLE: Configuring Preview Build Profile in EAS JSON\nDESCRIPTION: Configuration for the preview build profile in eas.json that enables internal distribution. Sets the distribution property to 'internal' which allows sharing build URLs for installation without requiring a development server.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/eas/internal-distribution-builds.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"preview\": {\n      \"distribution\": \"internal\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Multi-target iOS credentials.json Configuration\nDESCRIPTION: Configuration for iOS projects with multiple targets including app extensions\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/app-signing/local-credentials.mdx#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ios\": {\n    \"multitarget\": {\n      \"provisioningProfilePath\": \"ios/certs/multitarget-profile.mobileprovision\",\n      \"distributionCertificate\": {\n        \"path\": \"ios/certs/dist.p12\",\n        \"password\": \"DISTRIBUTION_CERTIFICATE_PASSWORD\"\n      }\n    },\n    \"shareextension\": {\n      \"provisioningProfilePath\": \"ios/certs/shareextension-profile.mobileprovision\",\n      \"distributionCertificate\": {\n        \"path\": \"ios/certs/another-dist.p12\",\n        \"password\": \"ANOTHER_DISTRIBUTION_CERTIFICATE_PASSWORD\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Application Module in JavaScript\nDESCRIPTION: This code snippet demonstrates how to import the Application module from expo-application. This module provides access to various application-related information.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/application.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Application from 'expo-application';\n```\n\n----------------------------------------\n\nTITLE: Republishing EAS Updates\nDESCRIPTION: Commands for republishing previous updates either by update group ID or branch name.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/eas-cli.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ eas update:republish --group [update-group-id]\n$ eas update:republish --branch [branch-name]\n```\n\n----------------------------------------\n\nTITLE: Installing Packages with Expo CLI\nDESCRIPTION: Commands to install packages with the correct version for the current React Native installation. Expo maintains a list of compatible versions for popular packages.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/more/expo-cli.mdx#2025-04-23_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo install expo-camera\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo install typescript expo-sms\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn expo install typescript -- -D\n```\n\n----------------------------------------\n\nTITLE: Installing eslint-config-universe using Yarn (sh)\nDESCRIPTION: This shell command installs the `eslint-config-universe` package as a development dependency using the Yarn package manager. This package provides the shared ESLint configurations.\nSOURCE: https://github.com/expo/expo/blob/main/packages/eslint-config-universe/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn add --dev eslint-config-universe\n```\n\n----------------------------------------\n\nTITLE: Configuring Device Motion Plugin in Expo\nDESCRIPTION: This JSON snippet configures the `DeviceMotion` plugin for an Expo app by specifying permissions needed for accessing device motion data. It must be included in the application's `app.json` file for the relevant native configurations to take effect.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/devicemotion.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-sensors\",\n        {\n          \"motionPermission\": \"Allow $(PRODUCT_NAME) to access your device motion.\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Scheduling iOS Notifications with Custom Sounds\nDESCRIPTION: TypeScript code that demonstrates how to schedule a notification with a custom sound on iOS. The sound file needs to be placed in the Xcode project resources.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/notifications.mdx#2025-04-22_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nawait Notifications.scheduleNotificationAsync({\n  content: {\n    title: \"You've got mail! 📬\",\n    body: 'Open the notification to read them all',\n    sound: 'notification.wav',\n  },\n  trigger: {\n    // ...\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Running Expotools Help Command\nDESCRIPTION: Command to display all available Expotools commands using the CLI shorthand.\nSOURCE: https://github.com/expo/expo/blob/main/tools/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\net --help\n```\n\n----------------------------------------\n\nTITLE: Combined EAS Update and Sourcemap Upload Command\nDESCRIPTION: Single command that publishes an update and uploads the sourcemaps in one step using the '&&' operator to chain the commands together.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/using-sentry.mdx#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ eas update --branch <branch> && npx sentry-expo-upload-sourcemaps dist\n```\n\n----------------------------------------\n\nTITLE: Implementing ReactActivityLifecycleListener in Java\nDESCRIPTION: This snippet demonstrates how to create a ReactActivityLifecycleListener class to hook into specific Activity lifecycle events in Java.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/android-lifecycle-listeners.mdx#2025-04-22_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n// android/src/main/java/expo/modules/mylib/MyLibReactActivityLifecycleListener.java\npackage expo.modules.mylib;\n\nimport android.app.Activity;\nimport android.os.Bundle;\n\nimport expo.modules.core.interfaces.ReactActivityLifecycleListener;\n\npublic class MyLibReactActivityLifecycleListener implements ReactActivityLifecycleListener {\n  @Override\n  public void onCreate(Activity activity, Bundle savedInstanceState) {\n    // Your setup code in `Activity.onCreate`.\n    doSomeSetupInActivityOnCreate(activity);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Emoji Picker with EmojiList in Main App Tab (Expo, TypeScript)\nDESCRIPTION: Shows how to integrate the EmojiList component within an EmojiPicker modal of the app's main tab. Includes state management for image picking, modal display, and emoji selection using React hooks. The returned UI conditionally displays options and a modal based on user interaction. Dependencies: react, react-native, expo-image, expo-image-picker, local components (Button, ImageViewer, IconButton, CircleButton, EmojiPicker, EmojiList). Key props include functions for picking images, displaying/storing selected emoji, and modal visibility toggling. Inputs are user actions on photo and emoji selection; outputs are emoji overlays and updated UI states.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/create-a-modal.mdx#2025-04-22_snippet_8\n\nLANGUAGE: TSX\nCODE:\n```\nimport { View, StyleSheet } from 'react-native';\\nimport * as ImagePicker from 'expo-image-picker';\\nimport { useState } from 'react';\\n/* @tutinfo Import the type <CODE>ImageSource</CODE> from <CODE>expo-image</CODE>. */\\nimport { type ImageSource } from 'expo-image';\\n/* @end */\\n\\nimport Button from '@/components/Button';\\nimport ImageViewer from '@/components/ImageViewer';\\nimport IconButton from '@/components/IconButton';\\nimport CircleButton from '@/components/CircleButton';\\nimport EmojiPicker from '@/components/EmojiPicker';\\n/* @tutinfo Import the <CODE>EmojiList</CODE> component. */\\nimport EmojiList from '@/components/EmojiList';\\n/* @end */\\n\\nconst PlaceholderImage = require('@/assets/images/background-image.png');\\n\\nexport default function Index() {\\n  const [selectedImage, setSelectedImage] = useState<string | undefined>(undefined);\\n  const [showAppOptions, setShowAppOptions] = useState<boolean>(false);\\n  const [isModalVisible, setIsModalVisible] = useState<boolean>(false);\\n  /* @tutinfo Define a state variable. */\\n  const [pickedEmoji, setPickedEmoji] = useState<ImageSource | undefined>(undefined);\\n  /* @end */\\n\\n  const pickImageAsync = async () => {\\n    let result = await ImagePicker.launchImageLibraryAsync({\\n      mediaTypes: ['images'],\\n      allowsEditing: true,\\n      quality: 1,\\n    });\\n\\n    if (!result.canceled) {\\n      setSelectedImage(result.assets[0].uri);\\n      setShowAppOptions(true);\\n    } else {\\n      alert('You did not select any image.');\\n    }\\n  };\\n\\n  const onReset = () => {\\n    setShowAppOptions(false);\\n  };\\n\\n  const onAddSticker = () => {\\n    setIsModalVisible(true);\\n  };\\n\\n  const onModalClose = () => {\\n    setIsModalVisible(false);\\n  };\\n\\n  const onSaveImageAsync = async () => {\\n    // we will implement this later\\n  };\\n\\n  return (\\n    <View style={styles.container}>\\n      <View style={styles.imageContainer}>\\n        <ImageViewer imgSource={PlaceholderImage} selectedImage={selectedImage} />\\n      </View>\\n      {showAppOptions ? (\\n        <View style={styles.optionsContainer}>\\n          <View style={styles.optionsRow}>\\n            <IconButton icon=\"refresh\" label=\"Reset\" onPress={onReset} />\\n            <CircleButton onPress={onAddSticker} />\\n            <IconButton icon=\"save-alt\" label=\"Save\" onPress={onSaveImageAsync} />\\n          </View>\\n        </View>\\n      ) : (\\n        <View style={styles.footerContainer}>\\n          <Button theme=\"primary\" label=\"Choose a photo\" onPress={pickImageAsync} />\\n          <Button label=\"Use this photo\" onPress={() => setShowAppOptions(true)} />\\n        </View>\\n      )}\\n      <EmojiPicker isVisible={isModalVisible} onClose={onModalClose}>\\n        /* @tutinfo Render the <CODE>EmojiList</CODE> component inside the <CODE>EmojiPicker</CODE> component. */\\n        <EmojiList onSelect={setPickedEmoji} onCloseModal={onModalClose} />\\n        /* @end */\\n      </EmojiPicker>\\n    </View>\\n  );\\n}\\n\\nconst styles = StyleSheet.create({\\n  container: {\\n    flex: 1,\\n    backgroundColor: '#25292e',\\n    alignItems: 'center',\\n  },\\n  imageContainer: {\\n    flex: 1,\\n  },\\n  footerContainer: {\\n    flex: 1 / 3,\\n    alignItems: 'center',\\n  },\\n  optionsContainer: {\\n    position: 'absolute',\\n    bottom: 80,\\n  },\\n  optionsRow: {\\n    alignItems: 'center',\\n    flexDirection: 'row',\\n  },\\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring UIBackgroundModes for iOS Background Location\nDESCRIPTION: XML configuration that needs to be added to iOS Expo.plist to enable background location support by adding the 'location' value to UIBackgroundModes array.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/location.mdx#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<key>UIBackgroundModes</key>\n  <array>\n    <string>location</string>\n  </array>\n```\n\n----------------------------------------\n\nTITLE: Configuring Android SDK Environment Variables on macOS\nDESCRIPTION: This snippet shows how to set up environment variables for the Android SDK on macOS. It adds the ANDROID_HOME variable and updates the PATH to include Android SDK tools.\nSOURCE: https://github.com/expo/expo/blob/main/docs/scenes/get-started/set-up-your-environment/instructions/_androidStudioInstructions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ export ANDROID_HOME=$HOME/Library/Android/sdk\n$ export PATH=$PATH:$ANDROID_HOME/emulator\n$ export PATH=$PATH:$ANDROID_HOME/platform-tools\n```\n\n----------------------------------------\n\nTITLE: Implementing Expo Settings Module in Swift for iOS\nDESCRIPTION: This Swift code defines the iOS implementation of the Expo Settings module. It includes functions for setting and getting the theme, and uses an enum to ensure type safety for theme values.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/native-module-tutorial.mdx#2025-04-22_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\nimport ExpoModulesCore\n\npublic class ExpoSettingsModule: Module {\n  public func definition() -> ModuleDefinition {\n    Name(\"ExpoSettings\")\n\n    Events(\"onChangeTheme\")\n\n    Function(\"setTheme\") { (theme: Theme) -> Void in\n      UserDefaults.standard.set(theme.rawValue, forKey:\"theme\")\n      sendEvent(\"onChangeTheme\", [\n        \"theme\": theme.rawValue\n      ])\n    }\n\n    Function(\"getTheme\") { () -> String in\n      UserDefaults.standard.string(forKey: \"theme\") ?? Theme.system.rawValue\n    }\n  }\n\n  enum Theme: String, Enumerable {\n    case light\n    case dark\n    case system\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing expo-media-library in bare React Native projects\nDESCRIPTION: Command to install the expo-media-library package using npx expo install.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-media-library/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-media-library\n```\n\n----------------------------------------\n\nTITLE: Rendering Router with Fixture Path in JavaScript\nDESCRIPTION: Illustrates how to use renderRouter with a path to an existing fixture for mocking the file system.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/reference/testing.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nit('my-test', async () => {\n  const MockComponent = jest.fn(() => <View />);\n  renderRouter('./my-test-fixture');\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Page Margins in Android with CSS\nDESCRIPTION: Demonstrates how to set page margins in Android using CSS @page rule within the HTML content that will be printed.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/print.mdx#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<style>\n  @page {\n    margin: 20px;\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Example File Structure for Expo Router Project\nDESCRIPTION: Demonstrates a typical file structure for an Expo Router project, showing the organization of routes in the app directory and components outside of it.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/basics/core-concepts.mdx#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\napp/index.tsx\napp/home.tsx\napp/_layout.tsx\napp/profile/friends.tsx\ncomponents/TextField.tsx\ncomponents/Toolbar.tsx\n```\n\n----------------------------------------\n\nTITLE: Submitting Android Build to Google Play Store with EAS CLI\nDESCRIPTION: This command uses EAS Submit to automatically upload the production build and release it for internal testing on the Google Play Store.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/eas/android-production-build.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ eas submit --platform android\n```\n\n----------------------------------------\n\nTITLE: Configuring Base URL for Sub-paths in Expo Apps\nDESCRIPTION: This code configures the prefix for static assets by setting the experiments.baseUrl field in the app config. This feature is experimental and available from SDK 50.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/more/expo-cli.mdx#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"experiments\": {\n      \"baseUrl\": \"/my-root\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing NavigationBar Module in JavaScript\nDESCRIPTION: This code snippet demonstrates how to import the NavigationBar module from the expo-navigation-bar package. This import statement allows access to all the functions and properties provided by the module for interacting with the Android navigation bar.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/navigation-bar.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as NavigationBar from 'expo-navigation-bar';\n```\n\n----------------------------------------\n\nTITLE: Creating TypeScript Interface\nDESCRIPTION: TypeScript definitions and React component wrapper for the native WebView module.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/native-view-tutorial.mdx#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ViewProps } from 'react-native';\nimport { requireNativeViewManager } from 'expo-modules-core';\nimport * as React from 'react';\n\nexport type OnLoadEvent = {\n  url: string;\n};\n\nexport type Props = {\n  url?: string;\n  onLoad?: (event: { nativeEvent: OnLoadEvent }) => void;\n} & ViewProps;\n\nconst NativeView: React.ComponentType<Props> = requireNativeViewManager('ExpoWebView');\n\nexport default function ExpoWebView(props: Props) {\n  return <NativeView {...props} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Queue for Asynchronous Functions in Kotlin\nDESCRIPTION: Configures an AsyncFunction to run on a specific queue, such as the main queue for UI operations. This is done using the runOnQueue modifier after defining the function.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/module-api.mdx#2025-04-22_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nAsyncFunction(\"myAsyncFunction\") { message: String ->\n  return@AsyncFunction message\n}.runOnQueue(Queues.MAIN)\n```\n\n----------------------------------------\n\nTITLE: Reloading Shell Configuration on macOS\nDESCRIPTION: This snippet demonstrates how to reload the shell configuration to apply the newly added Android SDK environment variables on macOS, for both zsh and bash shells.\nSOURCE: https://github.com/expo/expo/blob/main/docs/scenes/get-started/set-up-your-environment/instructions/_androidStudioInstructions.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# for zsh\n$ source $HOME/.zshrc\n\n# for bash\n$ source $HOME/.bashrc\n```\n\n----------------------------------------\n\nTITLE: Creating Default Babel Configuration for Expo Projects\nDESCRIPTION: This snippet shows the default Babel configuration for Expo projects. It uses the 'babel-preset-expo' preset, which extends the default React Native preset and adds support for additional features.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/config/babel.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = function (api) {\n  api.cache(true);\n  return {\n    presets: ['babel-preset-expo'],\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: URI Scheme CLI Basic Usage Commands\nDESCRIPTION: Basic CLI commands for listing URIs, opening URIs in simulators, and adding new URIs to projects using the uri-scheme tool.\nSOURCE: https://github.com/expo/expo/blob/main/packages/uri-scheme/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# Usage\nnpx uri-scheme [options] [command]\n\n# View all URIs for a project\nnpx uri-scheme list\n\n# Open a URI in a simulator\nnpx uri-scheme open <uri> --ios\n\n# Add a URI to your project\nnpx uri-scheme add <uri>\n```\n\n----------------------------------------\n\nTITLE: Installing EAS CLI and expo-insights\nDESCRIPTION: Terminal commands for installing and initializing EAS CLI and the expo-insights library in an Expo project. This setup is required to enable insights tracking in your application.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-insights/introduction.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Install EAS CLI if you have not already\n$ npm i -g eas-cli\n\n# Initialize your project EAS if you have not already \n$ eas init\n\n# Install the library\n$ npx expo install expo-insights\n```\n\n----------------------------------------\n\nTITLE: Adding microphone usage description for iOS\nDESCRIPTION: XML configuration to add the NSMicrophoneUsageDescription key to the iOS Info.plist file. This description is displayed when requesting microphone access and is required for audio recording functionality.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-av/README.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<key>NSMicrophoneUsageDescription</key>\n<string>Allow $(PRODUCT_NAME) to access your microphone</string>\n```\n\n----------------------------------------\n\nTITLE: Importing Custom Components in Markdown\nDESCRIPTION: This snippet imports custom components (APIInstallSection and BoxLink) used in the documentation page. These components likely provide structured layouts for installation instructions and external links.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/screens.mdx#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nimport { APIInstallSection } from '~/components/plugins/InstallSection';\nimport { BoxLink } from '~/ui/components/BoxLink';\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-build-properties in app.json\nDESCRIPTION: Example configuration for the expo-build-properties plugin in an Expo app.json file. This shows how to customize Android SDK versions and iOS deployment target.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-build-properties/README.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-build-properties\",\n        {\n          \"android\": {\n            \"compileSdkVersion\": 31,\n            \"targetSdkVersion\": 31,\n            \"buildToolsVersion\": \"31.0.0\"\n          },\n          \"ios\": {\n            \"deploymentTarget\": \"13.0\"\n          }\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Submit Job Type Configuration YAML\nDESCRIPTION: Configures a 'submit' job in an EAS Workflow. The 'type' keyword is set to 'submit', and the 'params' object specifies the 'build_id' and 'profile' for the submission.  Submission jobs require additional configuration to run within CI/CD.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/workflows/syntax.mdx#_snippet_28\n\nLANGUAGE: YAML\nCODE:\n```\njobs:\n  my_job:\n    # @info #\n    type: submit\n    # @end #\n    params:\n      build_id: string # required\n      profile: string # optional, default: production\n```\n\n----------------------------------------\n\nTITLE: Importing Print Module\nDESCRIPTION: Shows how to import the expo-print module in a JavaScript file for use in React Native applications.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/print.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as Print from 'expo-print';\n```\n\n----------------------------------------\n\nTITLE: iOS Entitlements Configuration\nDESCRIPTION: XML configuration for Apple Sign-in entitlements in iOS app.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/apple-authentication.mdx#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<key>com.apple.developer.applesignin</key>\n<array>\n  <string>Default</string>\n</array>\n```\n\n----------------------------------------\n\nTITLE: Config Plugin Implementation with Raw Functions\nDESCRIPTION: Example demonstrating how to use raw functions with config plugins in app.config.js, which has limitations with fingerprinting since raw functions aren't directly serializable.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/fingerprint.mdx#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst { withInfoPlist } = require('expo/config-plugins');\n\nconst withMyPlugin = (config) => {\n  return withInfoPlist(config, (config) => {\n    config.modResults.NSLocationWhenInUseUsageDescription = 'Allow $(PRODUCT_NAME) to use your location';\n    return config;\n  });\n};\n\nexport default ({ config }) => {\n  config.plugins ||= [];\n  config.plugins.push(withMyPlugin);\n  config.plugins.push((config) => config);\n  return config;\n};\n```\n\n----------------------------------------\n\nTITLE: Importing TemplateBareMinimumDiffViewer Component in JSX\nDESCRIPTION: This code imports a component called TemplateBareMinimumDiffViewer from the UI components directory, which is used to display diffs between different SDK versions of native project files.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/bare/upgrade.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { TemplateBareMinimumDiffViewer } from '~/ui/components/TemplateBareMinimumDiffViewer';\n```\n\n----------------------------------------\n\nTITLE: Creating a JavaScript interface for the native module\nDESCRIPTION: Creates a TypeScript file that uses the requireNativeModule function to access the native module from JavaScript code.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/existing-library.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { requireNativeModule } from 'expo-modules-core';\n\nexport default requireNativeModule('MyModule');\n```\n\n----------------------------------------\n\nTITLE: Importing IntentLauncher Module\nDESCRIPTION: Basic import statement for the IntentLauncher module to access all available functionality.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/intent-launcher.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as IntentLauncher from 'expo-intent-launcher';\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Permissions for expo-contacts\nDESCRIPTION: XML snippet to add READ_CONTACTS and WRITE_CONTACTS permissions to the Android manifest file.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-contacts/README.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"android.permission.READ_CONTACTS\" />\n<uses-permission android:name=\"android.permission.WRITE_CONTACTS\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Unsafe Terser Options for Maximum Compression\nDESCRIPTION: This code snippet shows how to enable all unsafe Terser optimizations in the Metro configuration. These options provide additional compression but may not work in all JavaScript engines.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/minify.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { getDefaultConfig } = require('expo/metro-config');\n\nconst config = getDefaultConfig(__dirname);\n\nconfig.transformer.minifierPath = 'metro-minify-terser';\n\nconfig.transformer.minifierConfig = {\n  compress: {\n    // Enable all unsafe optimizations.\n    unsafe: true,\n    unsafe_arrows: true,\n    unsafe_comps: true,\n    unsafe_Function: true,\n    unsafe_math: true,\n    unsafe_symbols: true,\n    unsafe_methods: true,\n    unsafe_proto: true,\n    unsafe_regexp: true,\n    unsafe_undefined: true,\n    unused: true,\n  },\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Installing expo-dev-client Package\nDESCRIPTION: Command to install the expo-dev-client library required for development builds.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/eas/configure-development-build.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo install expo-dev-client\n```\n\n----------------------------------------\n\nTITLE: Running the Expo app on Android\nDESCRIPTION: This command builds and runs the Expo application on the connected Android device. It starts a development server after building the application.\nSOURCE: https://github.com/expo/expo/blob/main/docs/scenes/get-started/set-up-your-environment/instructions/androidPhysicalDevelopmentBuildLocal.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo run:android\n```\n\n----------------------------------------\n\nTITLE: Creating Mutable Properties in Kotlin\nDESCRIPTION: Defines a mutable property on the JavaScript module object with both getter and setter closures. The setter is called when the property is assigned a new value in JavaScript.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/module-api.mdx#2025-04-22_snippet_17\n\nLANGUAGE: kotlin\nCODE:\n```\nProperty(\"foo\")\n  .get { return@get \"bar\" }\n  .set { newValue: String ->\n    // do something with new value\n  }\n```\n\n----------------------------------------\n\nTITLE: Package Import - expo-updates Configuration\nDESCRIPTION: Example of importing required components and icons for the expo-updates documentation page.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/updates.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { GithubIcon } from '@expo/styleguide-icons/custom/GithubIcon';\n\nimport APISection from '~/components/plugins/APISection';\nimport { APIInstallSection } from '~/components/plugins/InstallSection';\nimport { BoxLink } from '~/ui/components/BoxLink';\nimport { Collapsible } from '~/ui/components/Collapsible';\nimport { YesIcon, NoIcon } from '~/ui/components/DocIcons';\n```\n\n----------------------------------------\n\nTITLE: Creating a new Expo project with npm\nDESCRIPTION: Command to create a new Expo project using npm package manager. This will prompt for an app name after execution.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/more/create-expo.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npx create-expo-app@latest\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-dev-launcher Plugin in app.json\nDESCRIPTION: Demonstrates how to configure the `expo-dev-launcher` plugin (associated with `expo-dev-client`) within the `plugins` array in an `app.json` file. This example specifically sets the experimental `launchModeExperimental` property to 'most-recent'. This configuration requires rebuilding the native app binary.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/dev-client.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-dev-launcher\",\n        {\n          \"launchModeExperimental\": \"most-recent\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: iOS Unit Tests Command\nDESCRIPTION: Fastlane command to run unit tests for iOS.\nSOURCE: https://github.com/expo/expo/blob/main/fastlane/README.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n[bundle exec] fastlane ios unit_tests\n```\n\n----------------------------------------\n\nTITLE: Importing Application Module in JavaScript\nDESCRIPTION: Basic import statement for the expo-application module, which allows access to the module's functionality for retrieving application information at runtime.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/application.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Application from 'expo-application';\n```\n\n----------------------------------------\n\nTITLE: Specifying Asset Response Example Headers (HTTP/text)\nDESCRIPTION: Provides example HTTP response headers for server replies to asset requests in Expo update protocols. The 'content-encoding' and 'content-type' headers indicate how the asset is compressed and its MIME type, ensuring clients correctly interpret received data. These are to be included in HTTP responses to asset requests, with values determined by the server's encoding choices and asset metadata; no dependencies are required besides an HTTP-compliant server.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/technical-specs/expo-updates-1.mdx#2025-04-22_snippet_7\n\nLANGUAGE: text\nCODE:\n```\ncontent-encoding: br\ncontent-type: application/javascript\n```\n\n----------------------------------------\n\nTITLE: Adding .env Files to .gitignore in Expo Projects\nDESCRIPTION: This snippet shows how to ignore local environment files by adding them to the .gitignore file in an Expo project.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/config/metro.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# local env files\n.env*.local\n```\n\n----------------------------------------\n\nTITLE: Building iOS App with EAS\nDESCRIPTION: Command to build an iOS development build using EAS Build service\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/development-builds/create-a-build.mdx#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ eas build --platform ios --profile development\n```\n\n----------------------------------------\n\nTITLE: Integrating ASN1Decoder using Carthage\nDESCRIPTION: This snippet shows the line to add to a Cartfile for integrating the ASN1Decoder library using the Carthage dependency manager. It specifies the GitHub repository for the library.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-updates/ios/EXUpdates/ASN1Decoder/README.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ngithub \"filom/ASN1Decoder\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Suite URLs in ExponentIntegrationTests\nDESCRIPTION: JSON configuration showing how to set the sdkVersion to UNVERSIONED in app.json for testing unversioned code in the Expo Client.\nSOURCE: https://github.com/expo/expo/blob/main/apps/expo-go/ios/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"sdkVersion\": \"UNVERSIONED\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing URL Scheme for Stripe Redirects\nDESCRIPTION: JavaScript code to properly handle browser redirects back to the app using expo-linking and Constants to determine the correct URL scheme.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/stripe.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Linking from 'expo-linking';\nimport Constants from 'expo-constants';\n\nurlScheme:\n  Constants.appOwnership === 'expo'\n    ? Linking.createURL('/--/')\n    : Linking.createURL(''),\n```\n\n----------------------------------------\n\nTITLE: Configuring Android settings.gradle for Autolinking\nDESCRIPTION: Groovy code for configuring the Android settings.gradle file to enable autolinking of native dependencies. This includes applying necessary scripts and using React Native specific functions.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-modules-core/README.md#2025-04-22_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\napply from: new File([\"node\", \"--print\", \"require.resolve('expo-modules-core/package.json')\"].execute(null, rootDir).text.trim(), \"../gradle.groovy\");\nincludeUnimodulesProjects()\n\napply from: new File([\"node\", \"--print\", \"require.resolve('@react-native-community/cli-platform-android/package.json')\"].execute(null, rootDir).text.trim(), \"../native_modules.gradle\");\napplyNativeModulesSettingsGradle(settings)\n```\n\n----------------------------------------\n\nTITLE: Running ADB Command to Open Developer Menu on Android\nDESCRIPTION: This command uses ADB (Android Debug Bridge) to simulate pressing the menu button on an Android device, which opens the Developer menu in Expo applications.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/debugging/tools.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ adb shell input keyevent 82\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Resize Mode\nDESCRIPTION: Customizes the splash screen image resize mode in strings.xml with options for contain, cover, or native modes.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-splash-screen/README.md#2025-04-22_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<resources>\n  <string name=\"app_name\">sdk42</string>\n+  <string name=\"expo_splash_screen_resize_mode\">contain|cover|native</string>\n</resources>\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-font in app.json\nDESCRIPTION: Demonstrates how to configure the expo-font plugin in app.json to embed font files at build time, which is more efficient than loading them dynamically.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/font.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-font\",\n        {\n          \"fonts\": [\"path/to/file.ttf\"]\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring UIBackgroundModes for iOS Push Notifications\nDESCRIPTION: XML configuration for iOS Info.plist to enable background remote notifications capability. This setting is required for an app to receive and process push notifications while in the background.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/notifications.mdx#2025-04-22_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<key>UIBackgroundModes</key>\n<array>\n  <string>remote-notification</string>\n</array>\n```\n\n----------------------------------------\n\nTITLE: Logging in with SSO using Expo CLI\nDESCRIPTION: Command to authenticate with Expo using Single Sign-On (SSO) through the Expo CLI. Available with SDK 50 and above.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/accounts/sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo login --sso\n```\n\n----------------------------------------\n\nTITLE: Disabling capability synchronization in EAS Build with environment variable\nDESCRIPTION: Command showing how to disable the automatic capability synchronization feature when running an EAS build by setting the EXPO_NO_CAPABILITY_SYNC environment variable.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/build-reference/ios-capabilities.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nEXPO_NO_CAPABILITY_SYNC=1 eas build\n```\n\n----------------------------------------\n\nTITLE: Configuring FaceID Permission in iOS Info.plist\nDESCRIPTION: XML configuration required for FaceID usage in iOS applications when not using Continuous Native Generation.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/local-authentication.mdx#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<key>NSFaceIDUsageDescription</key>\n<string>Allow $(PRODUCT_NAME) to use FaceID</string>\n```\n\n----------------------------------------\n\nTITLE: Configuring Font Plugin in app.json\nDESCRIPTION: Configuration example for using the expo-font config plugin to embed font files at build time. This approach is more efficient than loading fonts at runtime.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/font.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-font\",\n        {\n          \"fonts\": [\"path/to/file.ttf\"]\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Babel Transformer in Metro Config\nDESCRIPTION: This code snippet demonstrates how to extend the Babel transformer in the Metro configuration for custom transformations.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/config/metro.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst upstreamTransformer = require('@expo/metro-config/babel-transformer');\n\nmodule.exports.transform = async ({ src, filename, options }) => {\n  // Do something custom for SVG files...\n  if (filename.endsWith('.svg')) {\n    src = '...';\n  }\n  // Pass the source through the upstream Expo transformer.\n  return upstreamTransformer.transform({ src, filename, options });\n};\n```\n\n----------------------------------------\n\nTITLE: Constructing EAS Update Manifest URL\nDESCRIPTION: This text snippet demonstrates how to construct a URL for manually inspecting EAS Update manifests, including runtime version, channel name, and platform parameters.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/debug.mdx#2025-04-22_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nhttps://u.expo.dev/your-project-id?runtime-version=1.0.0&channel-name=production&platform=android\n```\n\n----------------------------------------\n\nTITLE: Downloading EAS Credentials to Local Environment\nDESCRIPTION: Command to download automatically managed credentials from EAS servers to your local credentials.json file. This allows you to use remotely managed credentials for local builds.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/app-signing/syncing-credentials.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\neas credentials\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Function in Build Configuration\nDESCRIPTION: Enhanced YAML configuration that registers a custom function in the build workflow. This defines the function with its name and path relative to the config file location.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/custom-builds/functions.mdx#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: My example config\n  steps:\n    - eas/checkout\n    - eas/install_node_modules\n    - run:\n        name: Finished\n        command: echo Finished\n\n# @info #\nfunctions:\n  my_function:\n    name: My function\n    path: ./myFunction\n# @end #\n```\n\n----------------------------------------\n\nTITLE: Implementing React Navigation Dev Tools with Expo Router\nDESCRIPTION: Implementation of the React Navigation dev tools plugin in an Expo Router project. Shows how to connect the navigation reference to the plugin in the root layout component.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/debugging/devtools-plugins.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEffect, useRef } from 'react';\nimport { useNavigationContainerRef, Slot } from 'expo-router';\nimport { useReactNavigationDevTools } from '@dev-plugins/react-navigation';\n\nexport default Layout() {\n  const navigationRef = useNavigationContainerRef();\n\n  useReactNavigationDevTools(navigationRef);\n\n  return <Slot />;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Expo Calendar Plugin in app.json\nDESCRIPTION: This snippet configures the expo-calendar plugin in the app's configuration file to handle calendar permissions. It includes the calendarPermission key, which sets a message for iOS when requesting calendar access.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/calendar.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-calendar\",\n        {\n          \"calendarPermission\": \"The app needs to access your calendar.\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Root Component in React Native JSX\nDESCRIPTION: This React Native snippet registers a root component to use a custom entry file for an Expo application. The `registerRootComponent` function from 'expo' package wraps the main component, enabling it to be the app's entry point.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/expo.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { registerRootComponent } from 'expo';\nimport { View } from 'react-native';\n\nfunction App() {\n  return <View />;\n}\n\nregisterRootComponent(App);\n```\n\n----------------------------------------\n\nTITLE: Installing Expo Dev Client\nDESCRIPTION: Command to add the expo-dev-client library for development builds\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/build/setup.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo install expo-dev-client\n```\n\n----------------------------------------\n\nTITLE: Importing the Screen Capture Library in React Native\nDESCRIPTION: Shows how to import the Screen Capture library for use in a React Native application. This is the basic import statement needed before using any of the library's functionality.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/screen-capture.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport * as ScreenCapture from 'expo-screen-capture';\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Module Aliases in Metro Config\nDESCRIPTION: Implementing platform-specific module aliases in Metro configuration, specifically for web platform.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/customizing-metro.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconfig.resolver.resolveRequest = (context, moduleName, platform) => {\n  if (platform === 'web') {\n    // The alias will only be used when bundling for the web.\n    return context.resolveRequest(context, ALIASES[moduleName] ?? moduleName, platform);\n  }\n  // Ensure you call the default resolver.\n  return context.resolveRequest(context, moduleName, platform);\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Extensions and ExpoAssetHeaderDictionary Types for Asset Requests (TypeScript)\nDESCRIPTION: Defines the Extensions type and nested ExpoAssetHeaderDictionary used to specify additional HTTP headers for asset requests in Expo update protocol. These types allow a client to associate specific HTTP headers with asset keys, facilitating custom request configurations when fetching assets. The input is a JSON object matching the structure; there are no external dependencies except TypeScript typing. The output is used to generate or parse extensions information in update responses, ensuring asset requests include the appropriate headers as dictated by the server.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/technical-specs/expo-updates-1.mdx#2025-04-22_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype Extensions = {\n  assetRequestHeaders: ExpoAssetHeaderDictionary;\n  ...\n}\n\ntype ExpoAssetHeaderDictionary = {\n  [assetKey: string]: {\n    [headerName: string]: string,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Using Platform-Specific Swift Code with Compiler Directives\nDESCRIPTION: Demonstrates how to write platform-specific code in Swift using compiler directives to handle differences between iOS, macOS, and tvOS platforms.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/additional-platform-support.mdx#2025-04-22_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n```swift\n#if os(iOS)\n  // iOS implementation\n#elseif os(macOS)\n  // macOS implementation\n#elseif os(tvOS)\n  // tvOS implementation\n#endif\n```\n```\n\n----------------------------------------\n\nTITLE: Installing expo-dev-client with Expo CLI\nDESCRIPTION: This command installs the `expo-dev-client` package in your Expo project. This allows you to use development builds with advanced debugging and development features.\nSOURCE: https://github.com/expo/expo/blob/main/docs/scenes/get-started/set-up-your-environment/instructions/iosSimulatedDevelopmentBuildLocal.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ npx expo install expo-dev-client\n```\n\n----------------------------------------\n\nTITLE: Configuring Android permissions for expo-location\nDESCRIPTION: XML configuration for adding required and optional permissions to the Android manifest for using location services.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-location/README.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Added permissions -->\n<uses-permission android:name=\"android.permission.ACCESS_COARSE_LOCATION\" />\n<uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" />\n\n<!-- Optional permissions -->\n<uses-permission android:name=\"android.permission.FOREGROUND_SERVICE\" />\n<uses-permission android:name=\"android.permission.FOREGROUND_SERVICE_LOCATION\" />\n<uses-permission android:name=\"android.permission.ACCESS_BACKGROUND_LOCATION\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Android permissions for expo-calendar\nDESCRIPTION: XML configuration to add calendar read and write permissions to the Android manifest file. These permissions are required for the calendar functionality to work properly on Android devices.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-calendar/README.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"android.permission.READ_CALENDAR\" />\n<uses-permission android:name=\"android.permission.WRITE_CALENDAR\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS permissions for expo-media-library\nDESCRIPTION: XML snippet to add NSPhotoLibraryUsageDescription and NSPhotoLibraryAddUsageDescription keys to Info.plist for iOS photo library access and saving.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-media-library/README.md#2025-04-22_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<key>NSPhotoLibraryUsageDescription</key>\n<string>Give $(PRODUCT_NAME) permission to access your photos</string>\n<key>NSPhotoLibraryAddUsageDescription</key>\n<string>Give $(PRODUCT_NAME) permission to save photos</string>\n```\n\n----------------------------------------\n\nTITLE: Importing EAS Build Gradle Configuration\nDESCRIPTION: This snippet shows how to import the EAS Build Gradle configuration into the main app build.gradle file. This is required for the signing configuration to be applied during the build process.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/build-reference/android-builds.mdx#2025-04-22_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\n// ...\n\napply from: \"./eas-build.gradle\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Android build.gradle for expo-camera\nDESCRIPTION: Gradle configuration to add a new maven repository block for expo-camera's custom cameraview dependency in Android projects.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-camera/README.md#2025-04-22_snippet_2\n\nLANGUAGE: gradle\nCODE:\n```\nallprojects {\n    repositories {\n\n        // * Your other repositories here *\n\n        // * Add a new maven block after other repositories / blocks *\n        maven {\n            // expo-camera bundles a custom com.google.android:cameraview\n            url \"$rootDir/../node_modules/expo-camera/android/maven\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Static Android Status Bar Configuration\nDESCRIPTION: JSON configuration in app.json for setting static Android status bar properties, demonstrating how to set an opaque background color and disable translucency.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/configuring-statusbar.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"androidStatusBar\": {\n      \"backgroundColor\": \"#C2185B\",\n      \"translucent\": false\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: SQLite API Methods Comparison Table\nDESCRIPTION: Markdown table comparing SQLiteDatabase and SQLiteStatement methods with their descriptions and use cases. Covers operations like running queries, fetching single rows, retrieving all results, and handling large datasets with iterators.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/sqlite.mdx#2025-04-22_snippet_15\n\nLANGUAGE: markdown\nCODE:\n```\n| [`SQLiteDatabase`](#sqlitedatabase) methods      | [`SQLiteStatement`](#sqlitestatement) methods                                 | Description                                                                                                                                                            | Use Case                                                                                                                                                                                   |\n| ------------------------------------------------ | ----------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| [`runAsync()`](#runasyncsource-params)           | [`executeAsync()`](#executeasyncparams)                                       | Executes a SQL query, returning information on the changes made.                                                                                                       | Ideal for SQL write operations such as `INSERT`, `UPDATE`, `DELETE`.                                                                                                                       |\n| [`getFirstAsync()`](#getfirstasyncsource-params) | [`executeAsync()`](#executeasyncparams) + [`getFirstAsync()`](#getfirstasync) | Retrieves the first row from the query result.                                                                                                                         | Suitable for fetching a single row from the database. For example: `getFirstAsync('SELECT * FROM Users WHERE id = ?', userId)`.                                                            |\n| [`getAllAsync()`](#getallasyncsource-params)     | [`executeAsync()`](#executeasyncparams) + [`getFirstAsync()`](#getallasync)   | Fetches all query results at once.                                                                                                                                     | Best suited for scenarios with smaller result sets, such as queries with a LIMIT clause, like `SELECT * FROM Table LIMIT 100`, where you intend to retrieve all results in a single batch. |\n| [`getEachAsync()`](#geteachasyncsource-params)   | [`executeAsync()`](#executeasyncparams) + `for-await-of` async iterator       | Provides an iterator for result set traversal. This method fetches one row at a time from the database, potentially reducing memory usage compared to `getAllAsync()`. | Recommended for handling large result sets incrementally, such as with infinite scrolling implementations.                                                                                 |\n```\n\n----------------------------------------\n\nTITLE: Customizing Stack Navigator Push Behavior in Expo Router (TypeScript)\nDESCRIPTION: Demonstrates how to modify the push behavior of a Stack navigator by providing a custom getId function. This allows for pushing multiple instances of the same screen.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/advanced/stack.mdx#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Stack } from 'expo-router';\n\nexport default function Layout() {\n  return (\n    <Stack>\n      <Stack.Screen\n        name=\"[profile]\"\n        getId={\n          ({ params }) => String(Date.now())\n        }\n      />\n    </Stack>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Deprecation Notice\nDESCRIPTION: Markdown formatted deprecation notice explaining that react-native-unimodules is deprecated and should be replaced with the expo package. Includes a warning emoji and migration guide link.\nSOURCE: https://github.com/expo/expo/blob/main/packages/react-native-unimodules/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# react-native-unimodules\n\n## ⚠️ Deprecated\n\nThis package is now deprecated in favor of `expo`. If you're looking for how to migrate your apps, you can follow this guide: https://expo.fyi/expo-modules-migration\n```\n\n----------------------------------------\n\nTITLE: Detecting Platform in React Server Components for Expo\nDESCRIPTION: This snippet demonstrates how to detect the platform in React Server Components for Expo projects. It mentions using process.env.EXPO_OS instead of Platform.OS for platform detection.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/server-components.mdx#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nprocess.env.EXPO_OS\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration\nDESCRIPTION: YAML frontmatter configuration for the documentation page, setting the title, sidebar title, and TOC visibility.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/overview.mdx#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: 'Guides: Overview'\nsidebar_title: Overview\nhideTOC: true\n---\n```\n\n----------------------------------------\n\nTITLE: Starting Android Emulator in EAS Build Configuration\nDESCRIPTION: YAML configuration for starting an Android Emulator during the EAS build process. It uses the eas/start_android_emulator command with a specified system image package. This allows for testing Android apps on an emulator.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_48\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: Build and test\n  steps:\n    - eas/build\n    # @info #\n    - eas/start_android_emulator:\n        inputs:\n          system_image_package: system-images;android-30;default;x86_64\n    # @end #\n    # ... Maestro setup and tests\n```\n\n----------------------------------------\n\nTITLE: Rendering QR Code with react-qr-code in JavaScript\nDESCRIPTION: This snippet demonstrates how to utilize the react-qr-code library to render a QR code that links to the Expo Go app on the App Store. It depends on the react-qr-code package and uses the React framework. The key parameter is the 'value' prop of the QRCodeReact component, which specifies the URL to encode into the QR code. The size of the QR code can be adjusted using the 'size' prop. The component outputs an HTML div element containing the styled QR code.\nSOURCE: https://github.com/expo/expo/blob/main/docs/scenes/get-started/set-up-your-environment/instructions/iosPhysicalExpoGo.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport QRCodeReact from 'react-qr-code';\n\n<div className=\\\"inline-block rounded-lg border border-default bg-palette-white p-4\\\">  \n  <QRCodeReact value=\\\"https://itunes.apple.com/app/apple-store/id982107779\\\" size={228} />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing React Suspense with Client and Server Components in Expo\nDESCRIPTION: Example showcasing how to use React Suspense to stream UI while data loads. It demonstrates a client component that renders server tasks with different loading times, allowing for incremental UI updates.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/server-components.mdx#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Suspense } from 'react';\nimport { renderMediumTask, renderExpensiveTask } from '@/actions/tasks';\n\nexport default function App() {\n  return <Suspense fallback={<Text>Loading...</Text>}>{renderTasks()}</Suspense>;\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\n'use server';\n\nexport async function renderTasks() {\n  return (\n    <Suspense fallback={<Text>Loading...</Text>}>\n      <>\n        <MediumTask />\n        <Suspense fallback={<Text>Loading...</Text>}>\n          <ExpensiveTask />\n        </Suspense>\n      </>\n    </Suspense>\n  );\n}\n\nasync function MediumTask() {\n  // Wait one second before resolving.\n  await new Promise(resolve => setTimeout(resolve, 1000));\n  return <Text>Medium task done!</Text>;\n}\n\nasync function ExpensiveTask() {\n  // Wait three seconds before resolving.\n  await new Promise(resolve => setTimeout(resolve, 3000));\n  return <Text>Expensive task done!</Text>;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Android Haptics Method in JavaScript\nDESCRIPTION: New method 'performAndroidHapticsAsync()' added for Android to replace deprecated Vibrator API.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-haptics/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [Android] Added new method `performAndroidHapticsAsync()`. The `Vibrator` api is no longer recommended. This method avoids it. ([#34077](https://github.com/expo/expo/pull/34077) by [@alanjhughes](https://github.com/alanjhughes))\n```\n\n----------------------------------------\n\nTITLE: Refactoring Search Parameters in React Navigation\nDESCRIPTION: Example of how to refactor search parameters in React Navigation, which is recommended before migrating to Expo Router. This snippet demonstrates the use of serializable top-level query parameters.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/migrate/from-react-navigation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { useNavigation } from '@react-navigation/native';\n\nconst navigation = useNavigation();\n\nnavigation.push('Followers', {\n  onPress: profile => {\n    navigation.push('User', { profile });\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Adding HIGH_SAMPLING_RATE_SENSORS Permission in XML\nDESCRIPTION: This XML snippet is for adding the HIGH_SAMPLING_RATE_SENSORS permission to the AndroidManifest.xml file to allow higher frequency sensor updates in Android projects.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/sensors.mdx#2025-04-22_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<uses-permission android:name=\"android.permission.HIGH_SAMPLING_RATE_SENSORS\" />\n```\n\n----------------------------------------\n\nTITLE: Handling File Uploads with Node.js, Express, and Multer (JavaScript)\nDESCRIPTION: A Node.js server example using Express framework to handle file uploads. It sets up two PATCH endpoints: `/binary-upload` which saves the raw request body directly to a file using `fs.createWriteStream`, and `/multipart-upload` which uses the `multer` middleware to handle multipart/form-data uploads, specifically saving a file sent in the 'photo' field.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/filesystem.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst express = require('express');\nconst app = express();\nconst fs = require('fs');\nconst multer = require('multer');\nconst upload = multer({ dest: 'uploads/' });\n\n// This method will save the binary content of the request as a file.\napp.patch('/binary-upload', (req, res) => {\n  req.pipe(fs.createWriteStream('./uploads/image' + Date.now() + '.png'));\n  res.end('OK');\n});\n\n// This method will save a \"photo\" field from the request as a file.\napp.patch('/multipart-upload', upload.single('photo'), (req, res) => {\n  // You can access other HTTP parameters. They are located in the body object.\n  console.log(req.body);\n  res.end('OK');\n});\n\napp.listen(3000, () => {\n  console.log('Working on port 3000');\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Checkbox Component in JavaScript\nDESCRIPTION: This snippet shows how to import the Checkbox component from the expo-checkbox package in a JavaScript file. It is necessary for using Checkbox in any module.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/checkbox.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Checkbox from 'expo-checkbox';\n```\n\n----------------------------------------\n\nTITLE: Using H4 Component in Expo\nDESCRIPTION: Example of using the H4 component which renders as a semantic h4 element on web and styled Text component on native.\nSOURCE: https://github.com/expo/expo/blob/main/packages/html-elements/README.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { H4 } from '@expo/html-elements';\nexport default () => <H4>Example<H4/>\n```\n\n----------------------------------------\n\nTITLE: Rendering a Basic Hello World Screen with React Native Components in TypeScript (TSX)\nDESCRIPTION: This snippet demonstrates how to create a simple React Native screen using functional components and the StyleSheet API in TypeScript. It defines a basic 'Hello world!' message rendered within a View component, with associated container styles for layout and appearance. Dependencies include React Native, and TypeScript for typing; required imports are StyleSheet, Text, and View. The input is a standard React Native route/screen, and there are no external parameters. The output is a centered screen displaying the text \"Hello world!\"; this serves as a starting template for more advanced app development.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/introduction.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\nimport { StyleSheet, Text, View } from 'react-native';\\n\\nexport default function Index() {\\n  return (\\n    <View style={styles.container}>\\n      /* @tutinfo This used to say: \\\"Edit app/index.tsx to edit this screen.\\\". Now it says: \\\"Hello world!\\\". */<Text>Hello world!</Text>/* @end */\\n    </View>\\n  );\\n}\\n\\nconst styles = StyleSheet.create({\\n  container: {\\n    flex: 1,\\n    backgroundColor: '#fff',\\n    alignItems: 'center',\\n    justifyContent: 'center',\\n  },\\n});\n```\n\n----------------------------------------\n\nTITLE: Android Gradle Configuration\nDESCRIPTION: Android build.gradle modifications for Expo CLI integration.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/config/metro.mdx#2025-04-22_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\nreact {\n  ...\n+     // Use Expo CLI to bundle the app, this ensures the Metro config\n+     // works correctly with Expo projects.\n+     cliFile = new File([\"node\", \"--print\", \"require.resolve('@expo/cli')\"].execute(null, rootDir).text.trim())\n+     bundleCommand = \"export:embed\"\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Redirect Link to Expo Go Documentation\nDESCRIPTION: A markdown heading and link that redirects users to the main Expo Go development documentation file.\nSOURCE: https://github.com/expo/expo/blob/main/guides/Developing Expo Go.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Developing Expo Go\n\nThis guide was moved to the [Expo Go Readme](../apps/expo-go/README.md).\n```\n\n----------------------------------------\n\nTITLE: Adding EAS Update Metadata to Android Manifest\nDESCRIPTION: XML snippet showing the additions to the AndroidManifest.xml file for EAS Update configuration.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/getting-started.mdx#2025-04-22_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<meta-data android:name=\"expo.modules.updates.EXPO_UPDATE_URL\" android:value=\"https://u.expo.dev/your-project-id\"/>\n<meta-data android:name=\"expo.modules.updates.EXPO_RUNTIME_VERSION\" android:value=\"@string/expo_runtime_version\"/>\n```\n\n----------------------------------------\n\nTITLE: Using the Expo CLI Export Command for Web\nDESCRIPTION: Command to export JavaScript and assets for web apps using webpack. Options include --dev for development mode and --clear to clear the bundler cache.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/more/expo-cli.mdx#2025-04-23_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo export:web\n```\n\n----------------------------------------\n\nTITLE: Configuring EAS Build Profile for iOS Simulators in eas.json\nDESCRIPTION: JSON configuration for eas.json that defines a build profile with iOS simulator support enabled. This configuration creates a 'preview' profile with simulator builds enabled while maintaining a separate 'production' profile.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/build-reference/simulators.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"preview\": {\n      \"ios\": {\n        \"simulator\": true\n      }\n    },\n    \"production\": {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing expo-speech Package using npx\nDESCRIPTION: This command installs the `expo-speech` package into a bare React Native project using the Expo CLI's `install` command. It ensures compatibility with other Expo packages in the project. This step assumes the `expo` package is already installed and configured.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-speech/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-speech\n```\n\n----------------------------------------\n\nTITLE: Travis CI EAS Build Configuration\nDESCRIPTION: Travis CI configuration that sets up Node.js environment and triggers EAS builds for all platforms in non-interactive mode.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/build/building-on-ci.mdx#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nlanguage: node_js\nnode_js:\n  - node\n  - lts/*\ncache:\n  directories:\n    - ~/.npm\nbefore_script:\n  - npm install -g npm@latest\n\njobs:\n  include:\n    - stage: build\n      node_js: lts/*\n      script:\n        - npm ci\n        - npx eas-cli build --platform all --non-interactive --no-wait\n```\n\n----------------------------------------\n\nTITLE: Source Map Explorer for Web Bundles\nDESCRIPTION: Command to analyze web bundles using source-map-explorer with SDK 50 server output.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/analyzing-bundles.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ npx source-map-explorer 'dist/client/_expo/static/js/web/*.js' 'dist/client/_expo/static/js/web/*.js.map'\n```\n\n----------------------------------------\n\nTITLE: Setting initialRouteName for Array Syntax Routes\nDESCRIPTION: Shows how to specify initial route names for different route groups when using array syntax. This allows targeting specific segments with different initial routes.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/advanced/router-settings.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport const unstable_settings = {\n  // Used for `(foo)`\n  initialRouteName: 'first',\n  // Used for `(bar)`\n  bar: {\n    initialRouteName: 'second',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing TabSlot Rendering in Expo Router\nDESCRIPTION: Example showing how to customize the rendering of TabSlot component by nesting it within other components inside the Tabs container.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/advanced/custom-tabs.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Tabs>\n  <TabList>\n    <TabTrigger name=\"home\" href=\"/\">\n      <Text>Home</Text>\n    </TabTrigger>\n  </TabList>\n  <View>\n    <View>\n      <TabSlot />\n    </View>\n  </View>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Running iOS Build Locally\nDESCRIPTION: Build and run the iOS app locally using expo-dev-client.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/development-builds/create-a-build.mdx#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo run:ios\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration\nDESCRIPTION: YAML frontmatter configuration for the documentation page defining title, sidebar title, description, and search properties.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/introduction.mdx#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: EAS Update\nsidebar_title: Introduction\ndescription: An introduction to EAS Update which is a hosted service for projects using the expo-updates library.\nsearchRank: 99\nsearchPosition: 2\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring App Config Fields Check in Expo Doctor\nDESCRIPTION: Demonstrates how to configure the app config fields synchronization check in Expo Doctor, which validates native project directory configurations.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/config/package-json.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"doctor\": {\n      \"appConfigFieldsNotSyncedCheck\": {\n        \"enabled\": false\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Background Audio for iOS in app.json\nDESCRIPTION: This JSON snippet demonstrates how to configure the app.json file to enable background audio playback on iOS standalone apps using expo-av.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/audio-av.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"ios\": {\n      \"infoPlist\": {\n        \"UIBackgroundModes\": [\n          \"audio\"\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: EAS Build Profile Configuration\nDESCRIPTION: Default EAS build profile configuration in eas.json showing development, preview, and production profiles.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/eas/configure-development-build.mdx#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"cli\": {\n    \"version\": \">= 14.2.0\",\n    \"appVersionSource\": \"remote\"\n  },\n  \"build\": {\n    \"development\": {\n      \"developmentClient\": true,\n      \"distribution\": \"internal\"\n    },\n    \"preview\": {\n      \"distribution\": \"internal\"\n    },\n    \"production\": {\n      \"autoIncrement\": true\n    }\n  },\n  \"submit\": {\n    \"production\": {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Developer Support in DevMenuManager.kt for Android\nDESCRIPTION: Code diff showing how to enable the local Metro bundler for Android development by setting the useDeveloperSupport flag to true in the DevMenuManager.kt file.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-dev-menu/README.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- val useDeveloperSupport = false\n+ val useDeveloperSupport = true\n```\n\n----------------------------------------\n\nTITLE: Initializing URL and URLSearchParams objects in JavaScript\nDESCRIPTION: This snippet demonstrates how to create new URL and URLSearchParams objects. The URL object is initialized with 'https://expo.dev', while an empty URLSearchParams object is created.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/url.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst url = new URL('https://expo.dev');\n\nconst params = new URLSearchParams();\n```\n\n----------------------------------------\n\nTITLE: Including APIInstallSection Component in Markdown\nDESCRIPTION: This code snippet uses the imported APIInstallSection component to provide installation instructions. It includes a link to the official AsyncStorage documentation for Android and iOS installation.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/async-storage.mdx#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<APIInstallSection href=\"https://react-native-async-storage.github.io/async-storage/docs/install#android--ios\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering Expo App Configuration Schema Table Component\nDESCRIPTION: This JSX code renders the AppConfigSchemaTable component, passing the imported app configuration schema as a prop. This component displays all available Expo configuration properties in a structured table format.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/config/app.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<AppConfigSchemaTable schema={schema} />\n```\n\n----------------------------------------\n\nTITLE: Custom Metro Module Resolution\nDESCRIPTION: Configuration for custom module resolution in Metro bundler with platform-specific handling.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/config/metro.mdx#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst { getDefaultConfig } = require('expo/metro-config');\n\n/** @type {import('expo/metro-config').MetroConfig} */\nconst config = getDefaultConfig(__dirname);\n\nconfig.resolver.resolveRequest = (context, moduleName, platform) => {\n  if (moduleName.startsWith('my-custom-resolver:')) {\n    return {\n      filePath: 'path/to/file',\n      type: 'sourceFile',\n    };\n  }\n  return context.resolveRequest(context, moduleName, platform);\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Testing Deep Links with URI-Scheme CLI\nDESCRIPTION: Command to open a specific route in Expo Go app on iOS using uri-scheme CLI. Used for testing deep linking functionality.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/reference/sitemap.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npx uri-scheme open exp://192.168.87.39:19000/--/form-sheet --ios\n```\n\n----------------------------------------\n\nTITLE: Import Statement for Tracking Transparency\nDESCRIPTION: TypeScript import statement for expo-tracking-transparency module.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/tracking-transparency.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as ExpoTrackingTransparency from 'expo-tracking-transparency';\n```\n\n----------------------------------------\n\nTITLE: Creating Run-Once Config Plugin in TypeScript\nDESCRIPTION: Demonstrates how to create a config plugin that runs only once using createRunOncePlugin to prevent duplicate execution during migration from unversioned to versioned plugins. The plugin uses package.json for name and version tracking.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/config-plugins/development-and-debugging.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ConfigPlugin, createRunOncePlugin } from 'expo/config-plugins';\n\n// Keeping the name, and version in sync with it's package.\nconst pkg = require('my-cool-plugin/package.json');\n\nconst withMyCoolPlugin: ConfigPlugin = config => config;\n\n// A helper method that wraps `withRunOnce` and appends items to `pluginHistory`.\nexport default createRunOncePlugin(\n  // The plugin to guard.\n  withMyCoolPlugin,\n  // An identifier used to track if the plugin has already been run.\n  pkg.name,\n  // Optional version property, if omitted, defaults to UNVERSIONED.\n  pkg.version\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Job Environment in YAML\nDESCRIPTION: This snippet showcases how to set the EAS environment for a job using `jobs.<job_id>.environment`. The environment can be set to `production`, `preview`, or `development`.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/workflows/syntax.mdx#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  my_job:\n    # @info #\n    environment: production | preview | development\n    # @end #\n```\n\n----------------------------------------\n\nTITLE: Using Div Component in Expo\nDESCRIPTION: Example of using the Div component which renders as a div on web and View on native platforms.\nSOURCE: https://github.com/expo/expo/blob/main/packages/html-elements/README.md#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Div } from '@expo/html-elements';\n\nexport default () => (\n    <Div>\n      <P>Some content in the main element</P>\n    </Div>\n  );\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Job ID in YAML\nDESCRIPTION: This snippet demonstrates how to assign a unique ID to a job within a workflow configuration file. Job IDs can contain alphanumeric characters and underscores.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/workflows/syntax.mdx#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  # @info #\n  my_job:\n    # @end #\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Configuring ImagePicker Plugin in app.json\nDESCRIPTION: Configuration example for the expo-image-picker plugin in app.json, demonstrating how to set custom permission messages for iOS.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/imagepicker.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-image-picker\",\n        {\n          \"photosPermission\": \"The app accesses your photos to let you share them with your friends.\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Vendored Frameworks to iOS Podspec\nDESCRIPTION: Adds the vendored_frameworks configuration to the iOS podspec file to include external .framework or .xcframework files.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/third-party-library.mdx#2025-04-22_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n    s.static_framework = true\n    s.dependency 'ExpoModulesCore'\n+   s.vendored_frameworks = 'Frameworks/MyFramework.framework'\n    # Swift/Objective-C compatibility\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Input Values\nDESCRIPTION: Example of configuring multiple input parameters with default values and allowed values.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  greetings:\n    name: Say Hi!\n    inputs:\n      - name: name\n        default_value: Expo\n      - name: greeting\n        default_value: Hi\n        allowed_values: [Hi, Hello]\n    command: echo \"${ inputs.greeting }, ${ inputs.name }!\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Android permissions for expo-media-library\nDESCRIPTION: XML snippet to add READ_EXTERNAL_STORAGE and WRITE_EXTERNAL_STORAGE permissions to AndroidManifest.xml for accessing user's images and videos.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-media-library/README.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Added permissions -->\n<uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\" />\n<uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\n```\n\n----------------------------------------\n\nTITLE: Installing SourceKitten and Generating TypeScript Mocks via CLI\nDESCRIPTION: This command installs SourceKitten using Homebrew and then runs the expo-modules-test-core script to automatically generate TypeScript mocks for all native functions in an Expo module.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/mocking.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbrew install sourcekitten && npx expo-modules-test-core generate-ts-mocks\n```\n\n----------------------------------------\n\nTITLE: Installing eslint-plugin-expo via npx expo install (Shell)\nDESCRIPTION: Shows the command to install the `eslint-plugin-expo` package as a development dependency in an Expo project, using `npx expo install` to maintain compatibility.\nSOURCE: https://github.com/expo/expo/blob/main/packages/eslint-plugin-expo/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpx expo install eslint-plugin-expo --save-dev\n```\n\n----------------------------------------\n\nTITLE: Building Expo CLI for Development\nDESCRIPTION: This command uses Yarn to build the Expo CLI package from source. It compiles the code and places the output in the `build` directory, typically used when developing or contributing to the CLI itself. It defaults to watch mode.\nSOURCE: https://github.com/expo/expo/blob/main/packages/@expo/cli/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Configuring iCloud Storage in app.json\nDESCRIPTION: Example configuration for enabling iCloud storage features using the expo-document-picker plugin in the app config file.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/document-picker.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-document-picker\",\n        {\n          \"iCloudContainerEnvironment\": \"Production\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing LivePhotoView from expo-live-photo\nDESCRIPTION: Basic import statement for the LivePhotoView component from the expo-live-photo package. This is the main component needed to display Live Photos in your application.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/live-photo.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { LivePhotoView } from 'expo-live-photo';\n```\n\n----------------------------------------\n\nTITLE: Adding Build Script for Service Worker Generation\nDESCRIPTION: This snippet shows how to add a build script in package.json to run both the Expo export command and the Workbox CLI to generate the service worker configuration.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/migrate/from-expo-webpack.mdx#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"build:web\": \"expo export -p web && npx workbox-cli generateSW workbox-config.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing the Sharp Command-Line Interface (sharp-cli)\nDESCRIPTION: Refers to 'sharp-cli', the command-line interface tool. A global installation of 'sharp-cli' is required for @expo/image-utils to utilize the 'sharp' library for faster image processing.\nSOURCE: https://github.com/expo/expo/blob/main/packages/@expo/image-utils/README.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nsharp-cli\n```\n\n----------------------------------------\n\nTITLE: Creating New Expo Project Using create-expo-app\nDESCRIPTION: Command to initialize a new Expo project using the latest version of create-expo-app. Creates a default project structure with example code to help developers get started.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/get-started/create-a-project.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npx create-expo-app@latest\n```\n\n----------------------------------------\n\nTITLE: Configuring Expo Location Plugin in app.json\nDESCRIPTION: Configuration example for the expo-location plugin showing how to set location permission messages in the app config.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/location.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-location\",\n        {\n          \"locationAlwaysAndWhenInUsePermission\": \"Allow $(PRODUCT_NAME) to use your location.\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using External Functions\nDESCRIPTION: Demonstrates how to import functions from other config files and use them in build steps.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  - common-functions.yml\n  - another-file.yml\n\nbuild:\n  steps:\n    - say_hi\n    - say_bye\n```\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  say_hi:\n    name: Say Hi!\n    command: echo \"Hi!\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  say_bye:\n    name: Say bye :(\n    command: echo \"Bye!\"\n```\n\n----------------------------------------\n\nTITLE: Expo Dashboard URL Format for Updates\nDESCRIPTION: URL structure for accessing update groups and specific updates in the Expo dashboard. Shows the format for both update group and individual update URLs.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/trace-update-id-expo-dashboard.mdx#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nhttps://expo.dev/accounts/[accountName]/projects/[projectName]/updates/[updateGroupId]\n```\n\nLANGUAGE: text\nCODE:\n```\nhttps://expo.dev/accounts/[accountName]/projects/[projectName]/updates/[updateId]\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Babel Settings for Expo\nDESCRIPTION: Default Babel configuration for Expo projects using babel-preset-expo. This configuration enables modern JavaScript (ES6+) compilation for mobile device compatibility.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/config/babel.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = function (api) {\n  api.cache(true);\n  return {\n    presets: ['babel-preset-expo'],\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing Expo Client Config in JavaScript\nDESCRIPTION: This snippet shows how to access the Expo client config using a new getter method. It was added as a new feature in version 13.2.0.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-constants/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Getter for expo client config\n```\n\n----------------------------------------\n\nTITLE: Defining Global CSS Styles in Expo\nDESCRIPTION: This code snippet demonstrates how to define global CSS styles in an Expo project by creating a separate CSS file and importing it into a component.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/config/metro.mdx#2025-04-22_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.container {\n  background-color: red;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding ACCESS_MEDIA_LOCATION permission for Android\nDESCRIPTION: XML snippet to add ACCESS_MEDIA_LOCATION permission to AndroidManifest.xml for accessing asset location (latitude and longitude EXIF tags).\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-media-library/README.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Add this to AndroidManifest.xml -->\n<uses-permission android:name=\"android.permission.ACCESS_MEDIA_LOCATION\" />\n```\n\n----------------------------------------\n\nTITLE: Cleaning React Native Node Modules\nDESCRIPTION: Troubleshooting command to remove React Native node_modules when encountering SHA-1 computation issues, typically related to symlinks in the project.\nSOURCE: https://github.com/expo/expo/blob/main/apps/expo-go/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf ./react-native-lab/react-native/node_modules\n```\n\n----------------------------------------\n\nTITLE: Generating Android Dynamic Macros\nDESCRIPTION: Troubleshooting command for when Firebase Project ID errors occur. Ensures dynamic macros are properly generated for Android builds.\nSOURCE: https://github.com/expo/expo/blob/main/apps/expo-go/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\net android-generate-dynamic-macros\n```\n\n----------------------------------------\n\nTITLE: Initializing from GitHub Templates with Branch or Subdirectory - Shell\nDESCRIPTION: Presents methods for initializing projects using Expo-compatible templates from GitHub repositories, supporting direct URLs, branches/tags, and subdirectories. Requires GitHub access and proper URL formatting. Allows advanced users to pull templates from third-party or their own repositories.\nSOURCE: https://github.com/expo/expo/blob/main/packages/create-expo/README.md#2025-04-22_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n# Create from repository\\nnpx create-expo --template https://github.com/:owner/:repo\\n\\n# Create from repository using the `:ref` branch or tag\\nnpx create-expo --template https://github.com/:owner/:repo/tree/:ref\\n\\n# Create from repository using the `sdk-50` branch, and \"templates/expo-template-bare-minimum\" subdirectory\\nnpx create-expo --template https://github.com/expo/expo/tree/sdk-50/templates/expo-template-bare-minimum\n```\n\n----------------------------------------\n\nTITLE: Native Version Policy Example - Expo App JSON\nDESCRIPTION: Shows how to configure runtime versioning using both app version and build numbers, thanks to the 'nativeVersion' policy. The configuration combines the version, iOS build number, and Android version code, producing a runtime version like '1.0.0(1)'. Manual management of version identifiers between builds is needed.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/updates.mdx#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"runtimeVersion\": {\n      \"policy\": \"nativeVersion\"\n    },\n    \"version\": \"1.0.0\",\n    \"ios\": {\n      \"buildNumber\": \"1\"\n    },\n    \"android\": {\n      \"versionCode\": 1\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing expo-background-fetch in React Native Projects\nDESCRIPTION: Command to install the expo-background-fetch package in a React Native project using npx expo install.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-background-fetch/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-background-fetch\n```\n\n----------------------------------------\n\nTITLE: Adding AD_ID Permission to AndroidManifest.xml\nDESCRIPTION: Example of adding the com.google.android.gms.permission.AD_ID permission to the AndroidManifest.xml file for Android projects.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/tracking-transparency.mdx#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"com.google.android.gms.permission.AD_ID\"/>\n```\n\n----------------------------------------\n\nTITLE: iOS Prepare Schemes Command\nDESCRIPTION: Fastlane command to prepare iOS schemes for the project.\nSOURCE: https://github.com/expo/expo/blob/main/fastlane/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n[bundle exec] fastlane ios prepare_schemes\n```\n\n----------------------------------------\n\nTITLE: Using ViewShot with ScrollView\nDESCRIPTION: Example of capturing a ScrollView content. This demonstrates how to use ViewShot within a ScrollView to capture its content, though for more complex cases using the imperative way with snapshotContentContainer may be needed.\nSOURCE: https://github.com/expo/expo/blob/main/apps/expo-go/modules/react-native-view-shot/README.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// capture ScrollView content\n// NB: you may need to go the \"imperative way\" to use snapshotContentContainer with the scrollview ref instead\nfunction ExampleCaptureOnMountSimpler {\n  const ref = useRef();\n\n  const onCapture = useCallback(uri => {\n    console.log(\"do something with \", uri);\n  }, []);\n\n  return (\n    <ScrollView>\n      <ViewShot onCapture={onCapture} captureMode=\"mount\">\n        <Text>...The Scroll View Content Goes Here...</Text>\n      </ViewShot>\n    </ScrollView>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Debug Alias for Expo CLI (Shell)\nDESCRIPTION: This shell command sets up an alias `expo-inspect` to run the development build of the Expo CLI with the Node.js inspector enabled. This allows attaching a debugger (like Chrome DevTools) to the CLI process for troubleshooting and development purposes.\nSOURCE: https://github.com/expo/expo/blob/main/packages/@expo/cli/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nalias expo-inspect=\"node --inspect /path/to/expo/packages/@expo/cli/build/bin/cli\"\n```\n\n----------------------------------------\n\nTITLE: Installing expo-build-properties plugin\nDESCRIPTION: Command to install the expo-build-properties package in an Expo project using the Expo CLI.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-build-properties/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-build-properties\n```\n\n----------------------------------------\n\nTITLE: TypeScript Configuration with app.config.ts\nDESCRIPTION: An example of using TypeScript for Expo configuration in app.config.ts, demonstrating type checking and autocompletion.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/workflow/configuration.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ExpoConfig, ConfigContext } from 'expo/config';\n\nexport default ({ config }: ConfigContext): ExpoConfig => ({\n  ...config,\n  slug: 'my-app',\n  name: 'My App',\n});\n```\n\n----------------------------------------\n\nTITLE: Adding EAS Update Configuration to iOS Plist\nDESCRIPTION: XML snippet showing the additions to the Expo.plist file for EAS Update configuration on iOS.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/getting-started.mdx#2025-04-22_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<key>EXUpdatesRuntimeVersion</key>\n<string>1.0.0</string>\n<key>EXUpdatesURL</key>\n<string>https://u.expo.dev/your-project-id</string>\n```\n\n----------------------------------------\n\nTITLE: Adding Apple Sign In Entitlements in iOS\nDESCRIPTION: XML configuration for adding Apple Sign In entitlements to the iOS app's .entitlements file when not using EAS Build.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/apple-authentication.mdx#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<key>com.apple.developer.applesignin</key>\n<array>\n  <string>Default</string>\n</array>\n```\n\n----------------------------------------\n\nTITLE: Importing Heading Component from UI Library\nDESCRIPTION: Import statement for a RawH3 heading component from a UI components library\nSOURCE: https://github.com/expo/expo/blob/main/docs/scenes/get-started/start-developing/TemplateFeatures/features/themes.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { RawH3 } from '~/ui/components/Text';\n```\n\n----------------------------------------\n\nTITLE: Configuring Expo Localization Plugin in app.json\nDESCRIPTION: Configuration example showing how to enable the expo-localization plugin in the app config file. This is required when using config plugins with EAS Build or expo run commands.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/localization.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\"expo-localization\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Expo Development Server\nDESCRIPTION: Command to start a local development server for an Expo project to make and test changes.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/getting-started.mdx#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo start\n```\n\n----------------------------------------\n\nTITLE: Implementing iOS RadialChart Module in Swift\nDESCRIPTION: Module definition for the RadialChart component on iOS, setting up the data prop and view binding.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/third-party-library.mdx#2025-04-22_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\nimport ExpoModulesCore\n\npublic class ExpoRadialChartModule: Module {\n  public func definition() -> ModuleDefinition {\n    Name(\"ExpoRadialChart\")\n\n    View(ExpoRadialChartView.self) {\n      Prop(\"data\") { (view: ExpoRadialChartView, prop: [Series]) in\n        view.setChartData(data: prop)\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using BottomSheet Component with SwiftUI\nDESCRIPTION: This code snippet demonstrates how to use the `BottomSheet` component from `@expo/ui/swift-ui`. It imports the `BottomSheet` component and uses it to render a simple bottom sheet with a text label. The `isOpen` and `onIsOpenedChange` props control the visibility of the bottom sheet.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/ui.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { BottomSheet } from '@expo/ui/swift-ui';\n\n<BottomSheet isOpen={isOpen} onIsOpenedChange={e => setIsOpened(e)}>\n  <Text>Hello, world!</Text>\n</BottomSheet>\n```\n\n----------------------------------------\n\nTITLE: Installing source-map-explorer\nDESCRIPTION: Command to install source-map-explorer as a development dependency.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/analyzing-bundles.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i --save-dev source-map-explorer\n```\n\n----------------------------------------\n\nTITLE: Importing Gyroscope from expo-sensors\nDESCRIPTION: This code snippet shows how to import the Gyroscope module from the expo-sensors package. This import is necessary to use the Gyroscope functionality in your Expo-based React Native application.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/gyroscope.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { Gyroscope } from 'expo-sensors';\n```\n\n----------------------------------------\n\nTITLE: Importing BackgroundFetch Module\nDESCRIPTION: Simple import statement for the expo-background-fetch module, showing how to import all the functionality from the package.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/background-fetch.mdx#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport * as BackgroundFetch from 'expo-background-fetch';\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Dependencies for expo-store-review - Shell\nDESCRIPTION: This shell snippet provides the post-install command for iOS dependencies using CocoaPods, necessary after adding the expo-store-review package in a bare React Native workflow. It ensures all native modules, including store review features, are properly linked. This command should be run in the iOS subdirectory of the React Native project after the npm package is installed.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-store-review/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx pod-install\n```\n\n----------------------------------------\n\nTITLE: Checking package builds and running unit tests in Expo CLI\nDESCRIPTION: This command verifies that every package in the Expo project builds successfully, the output directory is up-to-date, and all unit tests pass. It is essential for ensuring that all components of Expo Go are working as expected before release.\nSOURCE: https://github.com/expo/expo/blob/main/guides/releasing/Quality Assurance.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\net check-packages\n```\n\n----------------------------------------\n\nTITLE: Using H2 Component in Expo\nDESCRIPTION: Example of using the H2 component which renders as a semantic h2 element on web and styled Text component on native.\nSOURCE: https://github.com/expo/expo/blob/main/packages/html-elements/README.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { H2 } from '@expo/html-elements';\nexport default () => <H2>Example<H2/>\n```\n\n----------------------------------------\n\nTITLE: Importing Speech Module from expo-speech\nDESCRIPTION: This code snippet shows how to import the Speech module from the expo-speech library. This import statement is typically used at the beginning of a file where text-to-speech functionality is needed.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/speech.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as Speech from 'expo-speech';\n```\n\n----------------------------------------\n\nTITLE: Modifying MainApplication.java for Custom Entry File in React Native Development\nDESCRIPTION: This snippet demonstrates how to modify the MainApplication.java file to use a custom entry file for React Native development on Android, specifically for Expo projects.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/config/metro.mdx#2025-04-22_snippet_23\n\nLANGUAGE: diff\nCODE:\n```\n@Override\nprotected String getJSMainModuleName() {\n-  return \"index\";\n+  return \".expo/.virtual-metro-entry\";\n}\n```\n\n----------------------------------------\n\nTITLE: Removing SafeAreaProvider in Expo Router\nDESCRIPTION: Diff showing the removal of SafeAreaProvider when migrating to Expo Router, as it's automatically added by Expo Router.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/migrate/from-react-navigation.mdx#2025-04-22_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n- import { SafeAreaProvider } from 'react-native-safe-area-context';\n\nexport default function App() {\n  return (\n-    <SafeAreaProvider>\n      <MyApp />\n-    </SafeAreaProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json scripts for Expo module development\nDESCRIPTION: JSON snippet showing the recommended scripts to add to package.json for using expo-module-scripts.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-module-scripts/README.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"build\": \"expo-module build\",\n    \"clean\": \"expo-module clean\",\n    \"test\": \"expo-module test\",\n    \"prepare\": \"expo-module prepare\",\n    \"prepublishOnly\": \"expo-module prepublishOnly\",\n    \"expo-module\": \"expo-module\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring App Identifiers in app.json\nDESCRIPTION: Basic configuration of iOS bundle identifier and Android package name in the app.json file\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/eas/multiple-app-variants.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ios\": {\n    \"bundleIdentifier\": \"com.yourname.stickersmash\"\n  },\n  \"android\": {\n    \"package\": \"com.yourname.stickersmash\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding permissions to Info.plist for iOS\nDESCRIPTION: XML snippet for adding NSPhotoLibraryUsageDescription and NSPhotoLibraryAddUsageDescription keys to the Info.plist file for iOS projects.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/media-library.mdx#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<key>NSPhotoLibraryUsageDescription</key>\n<string>Give $(PRODUCT_NAME) permission to access your photos</string>\n<key>NSPhotoLibraryAddUsageDescription</key>\n<string>Give $(PRODUCT_NAME) permission to save photos</string>\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Permissions for expo-contacts\nDESCRIPTION: XML snippet to add NSContactsUsageDescription key to the iOS Info.plist file, which is required for accessing contacts on iOS.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-contacts/README.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<key>NSContactsUsageDescription</key>\n<string>Allow $(PRODUCT_NAME) to access your contacts</string>\n```\n\n----------------------------------------\n\nTITLE: Adding HIGH_SAMPLING_RATE_SENSORS Permission in AndroidManifest.xml\nDESCRIPTION: Example of how to add the HIGH_SAMPLING_RATE_SENSORS permission to the AndroidManifest.xml file for Android projects not using Continuous Native Generation.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/sensors.mdx#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"android.permission.HIGH_SAMPLING_RATE_SENSORS\" />\n```\n\n----------------------------------------\n\nTITLE: Creating Android Production Build with EAS CLI\nDESCRIPTION: This command uses the EAS CLI to create a production build for Android. It uses the default production profile from eas.json.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/eas/android-production-build.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ eas build --platform android\n```\n\n----------------------------------------\n\nTITLE: Configuring Root Layout with Stack Navigation\nDESCRIPTION: Sets up the root layout configuration using Stack navigation, incorporating the tabs navigation as a screen.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/file-based-routing.mdx#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Stack } from 'expo-router';\n\nexport default function RootLayout() {\n  return (\n    <Stack>\n      <Stack.Screen name=\"(tabs)\" />\n    </Stack>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Android Studio and Emulator Instructions in JSX\nDESCRIPTION: This code snippet renders the imported Android Studio and Emulator instruction components, displaying the setup guides to the user.\nSOURCE: https://github.com/expo/expo/blob/main/docs/scenes/get-started/set-up-your-environment/instructions/androidSimulatedExpoGo.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<AndroidStudioInstructions />\n<AndroidEmulatorInstructions />\n```\n\n----------------------------------------\n\nTITLE: Setting Password for SQLCipher Encrypted Database\nDESCRIPTION: Example of opening a SQLite database with SQLCipher encryption and setting a password using the PRAGMA key statement.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/sqlite.mdx#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst db = await SQLite.openDatabaseAsync('databaseName');\nawait db.execAsync(`PRAGMA key = 'password'`);\n```\n\n----------------------------------------\n\nTITLE: Configuring ImagePicker in app.json\nDESCRIPTION: Example of how to configure the expo-image-picker plugin in app.json to customize the photos permission message shown to users.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/imagepicker.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-image-picker\",\n        {\n          \"photosPermission\": \"The app accesses your photos to let you share them with your friends.\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing LinearGradient from expo-linear-gradient\nDESCRIPTION: This code snippet shows how to import the LinearGradient component from the expo-linear-gradient package. This import statement is necessary to use the LinearGradient component in your React Native application.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/linear-gradient.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { LinearGradient } from 'expo-linear-gradient';\n```\n\n----------------------------------------\n\nTITLE: Importing External CSS Stylesheets in Expo\nDESCRIPTION: Example demonstrating how to import CSS stylesheets from node modules to apply styles app-wide in Expo projects.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/config/metro.mdx#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n// Applies the styles app-wide.\nimport 'emoji-mart/css/emoji-mart.css';\n```\n\n----------------------------------------\n\nTITLE: Including Specific Files in EAS Build\nDESCRIPTION: Configuration example showing how to include specific files in EAS Build uploads that are not in source control using the ! prefix override.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/build-reference/easignore.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Copy everything from your .gitignore file here\n\n/android\n/ios\n\n# Include a file not in source control\n!temp_file.json\n```\n\n----------------------------------------\n\nTITLE: Adding a Test Button for Sentry Error Reporting\nDESCRIPTION: This snippet demonstrates how to add a button in a React Native component to test Sentry error reporting functionality.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/using-sentry.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button } from 'react-native';\n\n// Inside some component\n<Button title=\"Press me\" onPress={() => { throw new Error('Hello, again, Sentry!'); }}/>\n```\n\n----------------------------------------\n\nTITLE: Publishing EAS Update Preview\nDESCRIPTION: Command to publish a preview of current changes using EAS CLI. This publishes an update under the current branch name.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/review/share-previews-with-your-team.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ eas update --auto\n```\n\n----------------------------------------\n\nTITLE: Importing SecureStore in JavaScript\nDESCRIPTION: Example of how to import the SecureStore module in a JavaScript file.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/securestore.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as SecureStore from 'expo-secure-store';\n```\n\n----------------------------------------\n\nTITLE: Implementing Footer Component in Expo\nDESCRIPTION: Shows implementation of the Footer component with appropriate semantic roles.\nSOURCE: https://github.com/expo/expo/blob/main/packages/html-elements/README.md#2025-04-22_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Footer } from '@expo/html-elements';\n\nexport default () => <Footer />;\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Authentication Plugin in app.json\nDESCRIPTION: JSON configuration for expo-local-authentication plugin in app.json, specifying Face ID permission message for iOS.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/local-authentication.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-local-authentication\",\n        {\n          \"faceIDPermission\": \"Allow $(PRODUCT_NAME) to use Face ID.\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Services File Path in app.json (Alternative)\nDESCRIPTION: Alternative configuration snippet showing the path setup for google-services.json in the Expo app configuration, used in the existing service account setup section.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/push-notifications/fcm-credentials.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    /* @hide ...*/ /* @end */\n    \"android\": {\n      /* @hide ...*/ /* @end */ \"googleServicesFile\": \"./path/to/google-services.json\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Experimental Import Support in Metro Config - JavaScript\nDESCRIPTION: This snippet demonstrates how to set experimentalImportSupport in metro.config.js to true, which in turn toggles disableImportExportTransform in babel-preset-expo. This is recommended over directly setting disableImportExportTransform and ensures the entire Metro bundler pipeline is properly configured for experimental import/export syntax support. Input: Metro config object/function. Output: Metro transformer with experimental support for ES Modules.\nSOURCE: https://github.com/expo/expo/blob/main/packages/babel-preset-expo/README.md#2025-04-22_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n// metro.config.js\n\nconfig.transformer.getTransformOptions = async () => ({\n  transform: {\n    // Setting this to `true` will automatically toggle `disableImportExportTransform` in `babel-preset-expo`.\n    experimentalImportSupport: true,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing expo-keep-awake in bare React Native projects\nDESCRIPTION: This command installs the expo-keep-awake package using npx and expo. It's used for adding the package to npm dependencies in bare React Native projects.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-keep-awake/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-keep-awake\n```\n\n----------------------------------------\n\nTITLE: Importing DeviceMotion from expo-sensors\nDESCRIPTION: Basic import statement for using the DeviceMotion API from the expo-sensors package.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/devicemotion.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { DeviceMotion } from 'expo-sensors';\n```\n\n----------------------------------------\n\nTITLE: Installing expo-dev-client in Expo project\nDESCRIPTION: Command to install expo-dev-client, which is required for React Native Firebase and allows configuring native code using Config plugins.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/using-firebase.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo install expo-dev-client\n```\n\n----------------------------------------\n\nTITLE: Importing LightSensor from expo-sensors\nDESCRIPTION: Basic import statement showing how to import the LightSensor component from the expo-sensors package.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/light-sensor.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { LightSensor } from 'expo-sensors';\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-av Plugin in app.json\nDESCRIPTION: Example configuration for the expo-av plugin in app.json to set microphone permission message.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/av.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-av\",\n        {\n          \"microphonePermission\": \"Allow $(PRODUCT_NAME) to access your microphone.\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Problematic Root Layout Implementation\nDESCRIPTION: Example of incorrect implementation causing navigation errors due to conditional rendering in the root layout.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/advanced/authentication.mdx#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function RootLayout() {\n  React.useEffect(() => {\n    // This navigation event will trigger the error above.\n    router.push('/about');\n  }, []);\n\n  // This conditional statement creates a problem since the root layout's\n  // content (the Slot) must be mounted before any navigation events occur.\n  if (isLoading) {\n    return <Text>Loading...</Text>;\n  }\n\n  return <Slot />;\n}\n```\n\n----------------------------------------\n\nTITLE: Inspecting EAS Update Configuration in Android Manifest\nDESCRIPTION: This XML snippet shows the expected configuration for EAS Update URL and runtime version in the AndroidManifest.xml file after running 'npx expo prebuild'.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/debug.mdx#2025-04-22_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<meta-data android:name=\"expo.modules.updates.EXPO_RUNTIME_VERSION\" android:value=\"your-runtime-version-here\"/>\n<meta-data android:name=\"expo.modules.updates.EXPO_UPDATE_URL\" android:value=\"https://u.expo.dev/your-project-id-here\"/>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Configuration\nDESCRIPTION: Base tsconfig.json setup for Expo modules using expo-module-scripts configuration.\nSOURCE: https://github.com/expo/expo/blob/main/guides/Migrating Universal Modules to TypeScript.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n// @generated by expo-module-scripts\n{\n  \"extends\": \"expo-module-scripts/tsconfig.base\",\n  \"compilerOptions\": {\n    \"outDir\": \"./build\"\n  },\n  \"include\": [\"./src\"],\n  \"exclude\": [\"**/__mocks__/*\", \"**/__tests__/*\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Singular Routes in Stack Navigator\nDESCRIPTION: Example of setting up singular route constraints in a Stack navigator layout file to ensure unique profile pages.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/preview/singular.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function () {\n  return (\n    <Stack>\n      <Stack.Screen name=\"[profile]\" dangerouslySingular={({ profile }) => profile} />\n    </Stack>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Constants Module in JavaScript\nDESCRIPTION: This code snippet demonstrates how to import the Constants module from the expo-constants package. This module provides access to various system constants and information.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/constants.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Constants from 'expo-constants';\n```\n\n----------------------------------------\n\nTITLE: SQLite Database Serialization Methods\nDESCRIPTION: New methods for serializing and deserializing SQLite databases, along with functionality to import databases from assets.\nSOURCE: https://github.com/expo/expo/blob/main/CHANGELOG.md#2025-04-22_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nserializeAsync()\ndeserializeDatabaseAsync()\nSQLiteProvider.assetSource\n```\n\n----------------------------------------\n\nTITLE: Importing KeepAwake Module in JavaScript\nDESCRIPTION: Basic import statement for the KeepAwake module from expo-keep-awake package. This is the entry point for accessing the KeepAwake functionality.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/keep-awake.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport KeepAwake from 'expo-keep-awake';\n```\n\n----------------------------------------\n\nTITLE: Android MainActivity Configuration for Theme Changes\nDESCRIPTION: Java implementation for handling configuration changes in Android MainActivity.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/user-interface/color-themes.mdx#2025-04-22_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nimport android.content.Intent;\nimport android.content.res.Configuration;\n\npublic class MainActivity extends ReactActivity {\n  @Override\n  public void onConfigurationChanged(Configuration newConfig) {\n    super.onConfigurationChanged(newConfig);\n    Intent intent = new Intent(\"onConfigurationChanged\");\n    intent.putExtra(\"newConfig\", newConfig);\n    sendBroadcast(intent);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing expo-updates Module in JavaScript\nDESCRIPTION: Basic import statement for using the expo-updates module in a JavaScript application. This is the entry point for accessing the Updates API.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/updates.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport * as Updates from 'expo-updates';\n```\n\n----------------------------------------\n\nTITLE: Cleaning Untracked Files\nDESCRIPTION: Alternative nuclear cleaning option that removes all untracked files in the main repository. Works in conjunction with the submodule cleaning command.\nSOURCE: https://github.com/expo/expo/blob/main/apps/expo-go/README.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngit clean -xfd\n```\n\n----------------------------------------\n\nTITLE: Creating test apps for Expo without expo-updates\nDESCRIPTION: To create a test application focused on core functionality, this command generates a new project directory for E2E testing, linking necessary URI schemes for the development client release. Running the bundler can be done with expo start.\nSOURCE: https://github.com/expo/expo/blob/main/guides/releasing/Quality Assurance.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nyarn expo-test-runner create-project -a dev-client-e2e --path <path where the project will be created>\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpx uri-scheme add dev-client-release\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpx expo start\n```\n\n----------------------------------------\n\nTITLE: Query Parameter Access\nDESCRIPTION: Shows how to access and use URL query parameters in an API route.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/reference/api-routes.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function GET(request: Request) {\n  const url = new URL(request.url);\n  const post = url.searchParams.get('post');\n\n  return Response.json({ ... });\n}\n```\n\n----------------------------------------\n\nTITLE: Installing React Query Dev Tools Plugin\nDESCRIPTION: Command to install the React Query dev tools plugin package in an Expo project using the Expo CLI.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/debugging/devtools-plugins.mdx#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo install @dev-plugins/react-query\n```\n\n----------------------------------------\n\nTITLE: Using Inline Selectors with Themed Components in TSX\nDESCRIPTION: Demonstrates how to apply one-off selectors directly to component instances to conditionally style components based on theme modes without modifying the component definition.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-dev-client-components/README.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nfunction App() {\n  return (\n    <View>\n      <Heading\n        selectors={{\n          dark: { color: 'green' },\n          light: { color: 'blue' },\n        }}>\n        Hi\n      </Heading>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Android scoped storage for expo-media-library\nDESCRIPTION: XML snippet to add android:requestLegacyExternalStorage attribute to the application tag in AndroidManifest.xml for Android 10 and above.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-media-library/README.md#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<manifest ... >\n  <application android:requestLegacyExternalStorage=\"true\" ... >\n    ...\n  </application>\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Importing SystemUI in JavaScript\nDESCRIPTION: This code snippet demonstrates how to import the SystemUI module from the expo-system-ui package. It allows access to the library's functionality for interacting with system UI elements.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/system-ui.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as SystemUI from 'expo-system-ui';\n```\n\n----------------------------------------\n\nTITLE: Importing Expo Documentation Components\nDESCRIPTION: Imports specific UI components used for structuring the Expo documentation page, including an icon and custom components for installation sections and informational links.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/skia.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { BookOpen02Icon } from '@expo/styleguide-icons/outline/BookOpen02Icon';\n\nimport { APIInstallSection } from '~/components/plugins/InstallSection';\nimport { BoxLink } from '~/ui/components/BoxLink';\n```\n\n----------------------------------------\n\nTITLE: Running Chrome with SSL Disabled for Expo Tests\nDESCRIPTION: Command to run Google Chrome with security settings that allow testing the Expo app locally with HTTPS without certificate errors.\nSOURCE: https://github.com/expo/expo/blob/main/apps/test-suite/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n/Applications/Google\\ Chrome.app/Contents/MacOS/Google\\ Chrome --user-data-dir=/tmp/foo --ignore-certificate-errors --unsafely-treat-insecure-origin-as-secure=https://localhost:19006\n```\n\n----------------------------------------\n\nTITLE: Installing Individual Expo Module\nDESCRIPTION: Example command showing how to install a specific Expo module (expo-device) after initializing Expo modules support. Requires expo-cli to be installed globally.\nSOURCE: https://github.com/expo/expo/blob/main/packages/install-expo-modules/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nexpo install expo-device\n# the expo command is from expo-cli. if you don't have this, run `npm -g install expo-cli` to install.\n```\n\n----------------------------------------\n\nTITLE: Importing ScreenCapture Module in JavaScript\nDESCRIPTION: This code snippet shows how to import the ScreenCapture module for use in a JavaScript or React Native application.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/screen-capture.mdx#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport * as ScreenCapture from 'expo-screen-capture';\n```\n\n----------------------------------------\n\nTITLE: Rendering Expo Documentation Components\nDESCRIPTION: Utilizes imported Expo documentation components (`APIInstallSection`, `BoxLink`) to render structured content. `APIInstallSection` points to the external installation guide, and `BoxLink` provides a link to the official `@shopify/react-native-skia` documentation.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/skia.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<APIInstallSection href=\"https://shopify.github.io/react-native-skia/docs/getting-started/installation/\" />\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<BoxLink\n  title=\"Visit official documentation\"\n  description=\"Get full information on API and its usage.\"\n  Icon={BookOpen02Icon}\n  href=\"https://shopify.github.io/react-native-skia/\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Brightness Module in JavaScript\nDESCRIPTION: Standard import statement for the expo-brightness library to access brightness control functions in a JavaScript application.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/brightness.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport * as Brightness from 'expo-brightness';\n```\n\n----------------------------------------\n\nTITLE: Importing the Expo Screen Capture Module (JavaScript)\nDESCRIPTION: This code snippet illustrates how to import all exports from expo-screen-capture as a module object named ScreenCapture in a JavaScript/React Native project. It is a preliminary step before invoking any further API functions for screen capture prevention or detection. No inputs or outputs are involved; this statement is a dependency import required for using the ScreenCapture API.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/screen-capture.mdx#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport * as ScreenCapture from 'expo-screen-capture';\n```\n\n----------------------------------------\n\nTITLE: Handling Non-ASCII Characters in URLs - JavaScript\nDESCRIPTION: This code demonstrates the handling and output of non-ASCII characters within URLs in Expo. It shows how different platforms handle non-ASCII characters in URLs, which may result in different output formats.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/url.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconsole.log(new URL('http://🥓').toString());\n```\n\n----------------------------------------\n\nTITLE: Importing BlurView in JavaScript\nDESCRIPTION: This code snippet shows how to import the BlurView component from the expo-blur package in a JavaScript file.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/blur-view.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { BlurView } from 'expo-blur';\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Debugger on macOS\nDESCRIPTION: Command to install React Native Debugger using Homebrew package manager on macOS.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/debugging/tools.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ brew install react-native-debugger\n```\n\n----------------------------------------\n\nTITLE: Configuring Android settings.gradle\nDESCRIPTION: Updates to the settings.gradle file to enable autolinking for Expo modules in your Android project.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/brownfield/installing-expo-modules.mdx#2025-04-22_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\ndiff --git a/android/settings.gradle b/android/settings.gradle\nindex a26c7c6..dd8802a 100644\n--- a/android/settings.gradle\n+++ b/android/settings.gradle\n@@ -1,5 +1,11 @@\n+apply from: new File([\"node\", \"--print\", \"require.resolve('expo/package.json')\"].execute(null, rootDir).text.trim(), \"../scripts/autolinking.gradle\");\n+useExpoModules()\n+\n include ':app'\n includeBuild(\"../node_modules/@react-native/gradle-plugin\")\n```\n\n----------------------------------------\n\nTITLE: Importing the Contacts Module\nDESCRIPTION: Example of importing the expo-contacts module in a JavaScript file, which allows access to all the API methods for working with device contacts.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/contacts.mdx#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport * as Contacts from 'expo-contacts';\n```\n\n----------------------------------------\n\nTITLE: Importing MailComposer in JavaScript\nDESCRIPTION: Shows how to import the MailComposer module from the expo-mail-composer package. This import statement is required to access mail composition functionality in your Expo application.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/mail-composer.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as MailComposer from 'expo-mail-composer';\n```\n\n----------------------------------------\n\nTITLE: Updating Vendored Modules with Expo Tools - Shell\nDESCRIPTION: Lists outdated vendored modules in the SDK workflow. Requires Expo Tooling to be installed and accessible via the `et` command. This snippet outputs a list to guide module update assignments and subsequent validations.\nSOURCE: https://github.com/expo/expo/blob/main/guides/releasing/Release Workflow.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\net update-vendored-module --list-outdated\n```\n\n----------------------------------------\n\nTITLE: Adding Callouts in Markdown\nDESCRIPTION: This snippet shows how to use different types of callouts in markdown for various purposes such as notes, informative tips, warnings, and errors.\nSOURCE: https://github.com/expo/expo/blob/main/docs/README.md#2025-04-22_snippet_19\n\nLANGUAGE: markdown\nCODE:\n```\n> Normal callout that doesn't demand much attention but is required to add as a note.\n\n> **info** Callout that is informative and demands attention is required to add as a note or a tip.\n\n> **warning** Callout that is used for warnings and deprecation messages.\n\n> **error** Callout that is used for errors and breaking changes or deprecated changes in the archive.\n```\n\n----------------------------------------\n\nTITLE: Retrieving Client IP Address in EAS Hosting\nDESCRIPTION: Example of accessing the client's real IP address from request headers in an API route using the X-Real-IP header provided by EAS Hosting.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/hosting/reference/responses-and-headers.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function GET(request) {\n  const ip = request.headers.get('X-Real-IP');\n}\n```\n\n----------------------------------------\n\nTITLE: Creating minimal app.json for EAS Update in React Native\nDESCRIPTION: This snippet shows how to create a minimal app.json file with an empty 'expo' object, which is required for setting up EAS Update in a React Native project.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/codepush.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    //... any other existing keys you have\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing react-native-svg in JavaScript\nDESCRIPTION: Shows how to import all components from react-native-svg library.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/svg.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Svg from 'react-native-svg';\n```\n\n----------------------------------------\n\nTITLE: Generating tsconfig.json for Expo Projects\nDESCRIPTION: Terminal command to automatically generate a base tsconfig.json file for an Expo project using the Expo CLI customize command.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/typescript.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo customize tsconfig.json\n```\n\n----------------------------------------\n\nTITLE: Android SDK Version Pattern Search\nDESCRIPTION: Regular expression pattern to search for SDK version references in Java and Kotlin files, excluding SDK_INT mentions\nSOURCE: https://github.com/expo/expo/blob/main/guides/Creating Versioned Expo SDK for Android.md#2025-04-22_snippet_0\n\nLANGUAGE: regex\nCODE:\n```\n/SDK(?!_INT)/\n```\n\n----------------------------------------\n\nTITLE: Basic Node Module Plugin Implementation\nDESCRIPTION: Demonstrates the simplest form of a Config Plugin in app.plugin.js that just returns the config unchanged.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/config-plugins/plugins-and-mods.mdx#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = config => config;\n```\n\n----------------------------------------\n\nTITLE: Importing registerRootComponent from Expo\nDESCRIPTION: Shows how to import the registerRootComponent function from the expo package, which is the first step to using this functionality in your application.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/register-root-component.mdx#2025-04-22_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { registerRootComponent } from 'expo';\n```\n\n----------------------------------------\n\nTITLE: Importing RawH3 Component in TypeScript/JSX\nDESCRIPTION: Import statement for a RawH3 text component from the UI components directory.\nSOURCE: https://github.com/expo/expo/blob/main/docs/scenes/get-started/start-developing/TemplateFeatures/features/navigation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { RawH3 } from '~/ui/components/Text';\n```\n\n----------------------------------------\n\nTITLE: Starting Expo development server with tunneling\nDESCRIPTION: This command starts the Expo development server with the --tunnel flag, which creates a publicly accessible HTTPS URL for testing iOS Universal Links.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/linking/ios-universal-links.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo start --tunnel\n```\n\n----------------------------------------\n\nTITLE: Custom Document Configuration for React Native Web\nDESCRIPTION: Custom Next.js Document configuration with React Native Web styling and DOM element setup.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/using-nextjs.mdx#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Children } from 'react';\nimport Document, { Html, Head, Main, NextScript } from 'next/document';\nimport { AppRegistry } from 'react-native';\n\nconst style = `\nhtml, body, #__next {\n  -webkit-overflow-scrolling: touch;\n}\n#__next {\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n}\nhtml {\n  scroll-behavior: smooth;\n  -webkit-text-size-adjust: 100%;\n}\nbody {\n  overflow-y: auto;\n  overscroll-behavior-y: none;\n  text-rendering: optimizeLegibility;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  -ms-overflow-style: scrollbar;\n}\n`;\n\nexport default class MyDocument extends Document {\n  static async getInitialProps({ renderPage }) {\n    AppRegistry.registerComponent('main', () => Main);\n    const { getStyleElement } = AppRegistry.getApplication('main');\n    const page = await renderPage();\n    const styles = [\n      <style key=\"react-native-style\" dangerouslySetInnerHTML={{ __html: style }} />,\n      getStyleElement(),\n    ];\n    return { ...page, styles: Children.toArray(styles) };\n  }\n\n  render() {\n    return (\n      <Html style={{ height: '100%' }}>\n        <Head />\n        <body style={{ height: '100%', overflow: 'hidden' }}>\n          <Main />\n          <NextScript />\n        </body>\n      </Html>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Pedometer from expo-sensors\nDESCRIPTION: Code snippet showing how to import the Pedometer module from the expo-sensors package, which is necessary before using any of the Pedometer functionality.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/pedometer.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { Pedometer } from 'expo-sensors';\n```\n\n----------------------------------------\n\nTITLE: Importing Magnetometer Modules in Expo\nDESCRIPTION: Shows how to import both the calibrated and uncalibrated magnetometer modules from the expo-sensors package. The Magnetometer provides calibrated values while MagnetometerUncalibrated provides raw sensor data.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/magnetometer.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { Magnetometer, MagnetometerUncalibrated } from 'expo-sensors';\n```\n\n----------------------------------------\n\nTITLE: Using useSafeAreaInsets Hook\nDESCRIPTION: Example of using the useSafeAreaInsets hook to manually handle safe area insets.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/safe-area-context.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\n\nfunction HookComponent() {\n  const insets = useSafeAreaInsets();\n\n  return <View style={{ paddingTop: insets.top }} />;\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript DOM Props Configuration\nDESCRIPTION: Shows how to properly type DOM props in a TypeScript component.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/dom-components.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n'use dom';\n\nexport default function DOMComponent({}: { dom: import('expo/dom').DOMProps }) {\n  return (\n    <div>\n      <h1>Hello, world!</h1>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Job Name in YAML\nDESCRIPTION: This snippet illustrates how to define a human-friendly name for a job within an EAS workflow using the `jobs.<job_id>.name` configuration.  The name will appear on the workflow's detail page.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/workflows/syntax.mdx#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  my_job:\n    # @info #\n    name: Build app\n    # @end #\n```\n\n----------------------------------------\n\nTITLE: Using a Reusable Greeting Function in Build Steps - EAS Build - YAML\nDESCRIPTION: Demonstrates invocation of the \"greetings\" reusable function in an EAS Build configuration. The step specifies a value input (\"Expo\"), resulting in the function echoing a custom greeting. Requires the prior definition of the \"greetings\" function in the same or an imported YAML file.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_58\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: Functions Demo\n  steps:\n    # @info #\n    - greetings:\n        inputs:\n          value: Expo\n    # @end #\n```\n\n----------------------------------------\n\nTITLE: Using RawH3 Component with JSX\nDESCRIPTION: Implementation of the RawH3 component to display a heading about light and dark mode functionality\nSOURCE: https://github.com/expo/expo/blob/main/docs/scenes/get-started/start-developing/TemplateFeatures/features/themes.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<RawH3>Light and dark modes</RawH3>\n```\n\n----------------------------------------\n\nTITLE: Installing expo-mesh-gradient in bare React Native projects\nDESCRIPTION: This command installs the expo-mesh-gradient package using npx and expo CLI. It should be run after ensuring the expo package is installed and configured in the project.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-mesh-gradient/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-mesh-gradient\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Location Permissions Component\nDESCRIPTION: React component for declaring iOS location usage description keys for different location access scenarios\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/location.mdx#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<IOSPermissions\n  permissions={[\n    'NSLocationAlwaysAndWhenInUseUsageDescription',\n    'NSLocationAlwaysUsageDescription',\n    'NSLocationWhenInUseUsageDescription',\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing StatusBar from expo-status-bar\nDESCRIPTION: This snippet shows how to import the StatusBar component from the expo-status-bar package in a JavaScript or TypeScript file.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/status-bar.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { StatusBar } from 'expo-status-bar';\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Structure\nDESCRIPTION: Markdown documentation defining the SegmentedControl component, including its description, installation instructions, and usage details. References the @react-native-segmented-control/segmented-control package.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/segmented-control.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: SegmentedControl\ndescription: A React Native library that provides a component to render UISegmentedControl from iOS.\nsourceCodeUrl: 'https://github.com/react-native-community/segmented-control'\npackageName: '@react-native-segmented-control/segmented-control'\n---\n```\n\n----------------------------------------\n\nTITLE: Running Metro for Native Component List\nDESCRIPTION: Commands to start Metro bundler for the Native Component List app with UNVERSIONED SDK. This allows testing the Expo Go build with the component showcase.\nSOURCE: https://github.com/expo/expo/blob/main/apps/expo-go/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd apps/native-component-list\nEXPO_SDK_VERSION=UNVERSIONED npx expo start --clear\n```\n\n----------------------------------------\n\nTITLE: Implementing Messages Screen Component\nDESCRIPTION: Creates a basic Messages screen component that displays text within the nested tab navigation.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/advanced/nesting-navigators.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { View, Text } from 'react-native';\n\nexport default function Messages() {\n  return (\n    <View>\n      <Text>Messages screen</Text>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Safe Area Implementation\nDESCRIPTION: Example of traditional CSS-based safe area implementation using environment variables.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/safe-area-context.mdx#2025-04-22_snippet_6\n\nLANGUAGE: css\nCODE:\n```\ndiv {\n  padding-top: env(safe-area-inset-top);\n  padding-left: env(safe-area-inset-left);\n  padding-bottom: env(safe-area-inset-bottom);\n  padding-right: env(safe-area-inset-right);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing React Navigation Dev Tools Plugin\nDESCRIPTION: Command to install the React Navigation dev tools plugin package in an Expo project using the Expo CLI.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/debugging/devtools-plugins.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo install @dev-plugins/react-navigation\n```\n\n----------------------------------------\n\nTITLE: Importing MediaLibrary Module\nDESCRIPTION: JavaScript import statement for the expo-media-library module, which is required to use its functionality in a project.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/media-library.mdx#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport * as MediaLibrary from 'expo-media-library';\n```\n\n----------------------------------------\n\nTITLE: Testing Local Changes to Install-Expo-Modules\nDESCRIPTION: Command for testing local changes to the install-expo-modules package within a React Native CLI project.\nSOURCE: https://github.com/expo/expo/blob/main/packages/install-expo-modules/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnode path_to_expo/packages/install-expo-modules/build/index.js .\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest for an Expo module plugin\nDESCRIPTION: JavaScript configuration for the plugin/jest.config.js file, using the expo-module-scripts Jest preset for plugins.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-module-scripts/README.md#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = require('expo-module-scripts/jest-preset-plugin');\n```\n\n----------------------------------------\n\nTITLE: Implementing Root Stack Navigator Layout\nDESCRIPTION: Sets up the root Stack navigator layout for the application using expo-router.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/advanced/nesting-navigators.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Stack } from 'expo-router';\n\nexport default Stack;\n```\n\n----------------------------------------\n\nTITLE: Installing expo-gl in bare React Native projects\nDESCRIPTION: Command to install the expo-gl package using npx expo install in a bare React Native project.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-gl/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-gl\n```\n\n----------------------------------------\n\nTITLE: Installing Client Test Version\nDESCRIPTION: Expotools command to install and launch the APK for testing purposes\nSOURCE: https://github.com/expo/expo/blob/main/guides/Releasing Expo Go for Android.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\net client-install -p android\n```\n\n----------------------------------------\n\nTITLE: Using RawH3 Component in JSX\nDESCRIPTION: JSX implementation of the RawH3 component for displaying a heading about file-based routing.\nSOURCE: https://github.com/expo/expo/blob/main/docs/scenes/get-started/start-developing/TemplateFeatures/features/navigation.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<RawH3>File-based routing</RawH3>\n```\n\n----------------------------------------\n\nTITLE: Starting Expo Development Server and Exporting for Production\nDESCRIPTION: Commands to start the Expo development server and export the project for production after moving the app directory to src/app.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/reference/src-directory.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo start\n\n# Or export for production\n$ npx expo export\n```\n\n----------------------------------------\n\nTITLE: Importing Expo Package in TypeScript\nDESCRIPTION: Shows how to import all exports from the Expo package. This is the main entry point for accessing Expo's functionality.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/expo.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as Expo from 'expo';\n```\n\n----------------------------------------\n\nTITLE: Importing APIInstallSection Component in JSX\nDESCRIPTION: This code snippet shows how to import and use the APIInstallSection component to provide installation instructions for the DateTimePicker package.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/date-time-picker.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<APIInstallSection href=\"https://github.com/react-native-datetimepicker/datetimepicker#getting-started\" />\n```\n\n----------------------------------------\n\nTITLE: Screen Capture Module Import\nDESCRIPTION: Example showing how to import the Screen Capture module for use in a React Native application.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/screen-capture.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport * as ScreenCapture from 'expo-screen-capture';\n```\n\n----------------------------------------\n\nTITLE: Color Scheme Detection in React Native\nDESCRIPTION: Example of importing and using color scheme detection utilities in React Native.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/user-interface/color-themes.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Appearance, useColorScheme } from 'react-native';\n```\n\n----------------------------------------\n\nTITLE: Rendering HTML Table Example in Expo Web\nDESCRIPTION: Example HTML table structure showing the expected output when using Expo HTML elements on the web platform. Includes caption, header, body, and footer sections.\nSOURCE: https://github.com/expo/expo/blob/main/packages/html-elements/README.md#2025-04-22_snippet_23\n\nLANGUAGE: html\nCODE:\n```\n<table>\n  <caption>\n    Caption\n  </caption>\n  <thead>\n    <tr>\n      <th colspan=\"2\">The table header</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>The table body</td>\n      <td>with two columns</td>\n    </tr>\n  </tbody>\n  <tfoot>\n    <tr>\n      <td><div>The table body</div></td>\n    </tr>\n  </tfoot>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Implementing Section Component in Expo\nDESCRIPTION: Demonstrates the Section component usage which provides semantic sectioning with appropriate ARIA roles across platforms.\nSOURCE: https://github.com/expo/expo/blob/main/packages/html-elements/README.md#2025-04-22_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Section } from '@expo/html-elements';\n\nexport default () => <Section />;\n```\n\n----------------------------------------\n\nTITLE: Installing Ruby Dependencies for Expotools\nDESCRIPTION: Command to install required Ruby gems for Expotools functionality from the root directory.\nSOURCE: https://github.com/expo/expo/blob/main/tools/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbundle install\n```\n\n----------------------------------------\n\nTITLE: Using DevToolsPluginClient for Direct Plugin Communication\nDESCRIPTION: Demonstrates how to interact directly with a dev tools plugin using the useDevToolsPluginClient hook. Shows how to send messages to and receive messages from the plugin's web UI.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/debugging/devtools-plugins.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useDevToolsPluginClient } from 'expo/devtools';\n\nexport default App() {\n  const client = useDevToolsPluginClient('my-devtools-plugin');\n   useEffect(() => {\n    // receive messages\n    client?.addMessageListener(\"ping\", (data) => {\n      alert(`Received ping from ${data.from}`);\n    });\n    // send messages\n    client?.sendMessage(\"ping\", { from: \"app\" });\n   }, []);\n\n  return (/* rest of your app */)\n}\n```\n\n----------------------------------------\n\nTITLE: Running iOS builds with Expo CLI\nDESCRIPTION: Command for building and running an Expo app on iOS devices or simulators. Requires macOS and Xcode to be installed, and provides several options for device selection, caching, and port configuration.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/more/expo-cli.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Build for iOS\n$ npx expo run:ios\n```\n\n----------------------------------------\n\nTITLE: Installing LogRocket and Expo Build Properties\nDESCRIPTION: This command installs the LogRocket SDK and expo-build-properties package using npx and expo.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/using-logrocket.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo install @logrocket/react-native expo-build-properties\n```\n\n----------------------------------------\n\nTITLE: Configuring Expo Notifications in app.json\nDESCRIPTION: This JSON snippet demonstrates how to configure expo-notifications in app.json using the config plugin. It sets up notification icons, colors, default channels, custom sounds, and background notification settings.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/notifications.mdx#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-notifications\",\n        {\n          \"icon\": \"./local/assets/notification_icon.png\",\n          \"color\": \"#ffffff\",\n          \"defaultChannel\": \"default\",\n          \"sounds\": [\n            \"./local/assets/notification_sound.wav\",\n            \"./local/assets/notification_sound_other.wav\"\n          ],\n          \"enableBackgroundRemoteNotifications\": false\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing expo-constants in JavaScript\nDESCRIPTION: This snippet demonstrates how to import the expo-constants package in a JavaScript file. It provides access to constant system information within an Expo app.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/constants.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Constants from 'expo-constants';\n```\n\n----------------------------------------\n\nTITLE: Running EAS Build Command for All Platforms\nDESCRIPTION: Terminal command to create production builds for both Android and iOS platforms simultaneously using EAS Build. This command initiates build processes for both platforms in parallel.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/deploy/build-project.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ eas build --platform all\n```\n\n----------------------------------------\n\nTITLE: SQLite Raw Results API Implementation\nDESCRIPTION: New method executeForRawResultAsync() added to SQLiteStatement in expo-sqlite/next API for returning array-based raw values instead of key-value based row values.\nSOURCE: https://github.com/expo/expo/blob/main/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nSQLiteStatement.executeForRawResultAsync()\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Module Styles in Expo\nDESCRIPTION: Example of a CSS Module file defining scoped styles for Expo components, using a .module.css extension.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/config/metro.mdx#2025-04-22_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n.text {\n  color: red;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing expo-constants in bare React Native projects\nDESCRIPTION: Command to install the expo-constants package in a bare React Native project using npx expo install, which ensures compatibility with your project's Expo version.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-constants/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-constants\n```\n\n----------------------------------------\n\nTITLE: Configuring Face ID Usage in iOS Info.plist\nDESCRIPTION: XML configuration for iOS Info.plist to enable Face ID usage.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/securestore.mdx#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<key>NSCameraUsageDescription</key>\n<string>Allow $(PRODUCT_NAME) to use the camera</string>\n```\n\n----------------------------------------\n\nTITLE: Using the File Listing Function in Build Steps - EAS Build - YAML\nDESCRIPTION: Shows how to use the previously defined \"list_files\" function in a build workflow, immediately after code checkout. Lists all project files in the root directory. Requires the \"list_files\" function to be defined or imported in context.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_60\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: List files\n  # @info #\n  steps:\n    - eas/checkout\n    - list_files\n  # @end #\n```\n\n----------------------------------------\n\nTITLE: Running Package Tests\nDESCRIPTION: Command to run tests for packages to ensure all existing and new tests pass.\nSOURCE: https://github.com/expo/expo/blob/main/CONTRIBUTING.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nyarn test\n```\n\n----------------------------------------\n\nTITLE: Setting Default Splash Screen Properties in strings.xml\nDESCRIPTION: Configure default resizeMode and statusBarTranslucent properties for the splash screen by adding entries to strings.xml when migrating to newer versions of expo-splash-screen.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-splash-screen/README.md#2025-04-22_snippet_16\n\nLANGUAGE: diff\nCODE:\n```\n--- a/android/app/src/main/res/values/strings.xml\n+++ b/android/app/src/main/res/values/strings.xml\n <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n <resources>\n   <string name=\"app_name\">sdk42</string>\n+  <string name=\"expo_splash_screen_resize_mode\">contain</string>\n+  <string name=\"expo_splash_screen_status_bar_translucent\">false</string>\n</resources>\n```\n\n----------------------------------------\n\nTITLE: Updating Test Import Paths\nDESCRIPTION: Migration of test utility imports to use jest-expo instead of local test utilities.\nSOURCE: https://github.com/expo/expo/blob/main/guides/Migrating Universal Modules to TypeScript.md#2025-04-22_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n- import { mockPlatformWeb } from '../../test/mocking';\n\n+ import { mockPlatformWeb } from 'jest-expo';\n```\n\n----------------------------------------\n\nTITLE: Fingerprint Policy Example - Expo App JSON\nDESCRIPTION: Demonstrates configuration using the 'fingerprint' policy for runtime versions in Expo projects. This allows builds and over-the-air updates to share a runtime version computed as a hash of the project state (via @expo/fingerprint). Works with and without custom native code. No extra input except setting the policy string.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/updates.mdx#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"runtimeVersion\": {\n      \"policy\": \"fingerprint\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing expo-sensors via npx (Bash)\nDESCRIPTION: This command installs the `expo-sensors` package into a bare React Native project using `npx expo install`. This command ensures that the version of the package compatible with the project's Expo SDK is installed. Prerequisites include having Node.js, npm/npx installed, and having previously set up the `expo` package in the bare React Native project.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-sensors/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-sensors\n```\n\n----------------------------------------\n\nTITLE: Running E2E Tests Command for iOS\nDESCRIPTION: Command to run E2E tests locally for iOS from the bare-expo directory.\nSOURCE: https://github.com/expo/expo/blob/main/CONTRIBUTING.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn test:ios\n```\n\n----------------------------------------\n\nTITLE: Mixed Runners Configuration\nDESCRIPTION: Example of configuring Jest to use specific platform runners using the projects field.\nSOURCE: https://github.com/expo/expo/blob/main/packages/jest-expo/README.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"jest\": {\n-  \"preset\": \"jest-expo/universal\"\n// Skip web and Node tests\n+ \"projects\": [\n+    { \"preset\": \"jest-expo/ios\" },\n+    { \"preset\": \"jest-expo/android\"}\n+ ]\n},\n```\n\n----------------------------------------\n\nTITLE: Importing TrackingTransparency Module in TypeScript\nDESCRIPTION: TypeScript import statement for the expo-tracking-transparency module, demonstrating how to import the entire module namespace.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/tracking-transparency.mdx#2025-04-22_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport * as ExpoTrackingTransparency from 'expo-tracking-transparency';\n```\n\n----------------------------------------\n\nTITLE: Importing NetInfo in React Native\nDESCRIPTION: This snippet shows how to import the NetInfo library into your React Native application.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/netinfo.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport NetInfo from '@react-native-community/netinfo';\n```\n\n----------------------------------------\n\nTITLE: Importing Global CSS in Root File\nDESCRIPTION: JavaScript entry point that imports the global Tailwind CSS file.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/config/metro.mdx#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport './global.css';\n```\n\n----------------------------------------\n\nTITLE: Handling Image URLs on iOS\nDESCRIPTION: Fixed handling of URLs coming from the user's photo library on iOS.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-image-manipulator/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\n// Code to handle photo library URLs\n```\n\n----------------------------------------\n\nTITLE: Importing Expo Linking Module\nDESCRIPTION: Shows how to import the expo-linking package to access deep linking functionality in an Expo app.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/linking.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Linking from 'expo-linking';\n```\n\n----------------------------------------\n\nTITLE: Adding .env files to .gitignore in Expo projects\nDESCRIPTION: Instructions for adding local environment files to .gitignore when migrating projects to SDK 49 or above.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/config/metro.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# local env files\n.env*.local\n```\n\n----------------------------------------\n\nTITLE: BoxLink Component Usage\nDESCRIPTION: Renders BoxLink components to provide navigation options for getting started with Expo, including automated setup and quick start documentation links.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/get-started/introduction.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<BoxLink\n  title=\"Automated setup with expo.new\"\n  description=\"Create a project, set up your development environment, automatically configure build and update automations, and start developing.\"\n  href=\"https://expo.new/\"\n  Icon={Earth02Icon}\n/>\n\n<BoxLink\n  title=\"Quick start docs\"\n  description=\"Create a project, set up your development environment, and start developing.\"\n  href=\"/get-started/create-a-project/\"\n  Icon={BookOpen02Icon}\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Picker Package\nDESCRIPTION: This code snippet demonstrates how to install the React Native Picker package using a custom APIInstallSection component. It links to the official installation guide.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/picker.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<APIInstallSection href=\"https://github.com/react-native-picker/picker#getting-started\" />\n```\n\n----------------------------------------\n\nTITLE: Importing the Audio Module from expo-av\nDESCRIPTION: This JavaScript code snippet demonstrates the standard way to import the `Audio` object from the `expo-av` library, making its functionalities available for use in the application code.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/audio.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nimport { Audio } from 'expo-av';\n```\n```\n\n----------------------------------------\n\nTITLE: Importing SplashScreen Module\nDESCRIPTION: Shows how to import the SplashScreen module from the expo-splash-screen package for use in a React Native application.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/splash-screen.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as SplashScreen from 'expo-splash-screen';\n```\n\n----------------------------------------\n\nTITLE: BoxLink Component Implementation\nDESCRIPTION: JSX component implementation for creating a linked box containing Privacy Shield information and external link.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/regulatory-compliance/privacy-shield.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<BoxLink\n  title=\"www.privacyshield.gov\"\n  description=\"For more information about Privacy Shield, see www.privacyshield.gov.\"\n  href=\"https://www.privacyshield.gov/welcome\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Displaying Expo CLI Command Options in Terminal\nDESCRIPTION: Example output of Expo CLI command help, showing the available commands and options that can be used with the CLI tool.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/more/expo-cli.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nUsage\n  $ npx expo <command>\n\nCommands\n  start, export\n  run:ios, run:android, prebuild\n  install, customize, config\n  login, logout, whoami, register\n\nOptions\n  --version, -v   Version number\n  --help, -h      Usage info\n```\n\n----------------------------------------\n\nTITLE: Rendering Documentation Link for React Native Slider\nDESCRIPTION: This code snippet shows how to use a custom BoxLink component to create a link to the official documentation for the React Native Slider. It includes a title, description, and icon.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/slider.mdx#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<BoxLink\n  title=\"Visit official documentation\"\n  description=\"Get full information on API and its usage.\"\n  Icon={BookOpen02Icon}\n  href=\"https://github.com/callstack/react-native-slider\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing SplashScreen Module\nDESCRIPTION: Basic import statement for the expo-splash-screen module.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/splash-screen.mdx#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport * as SplashScreen from 'expo-splash-screen';\n```\n\n----------------------------------------\n\nTITLE: Adding permissions to AndroidManifest.xml\nDESCRIPTION: XML snippet for adding ACCESS_MEDIA_LOCATION permission and enabling legacy external storage in the AndroidManifest.xml file for Android projects.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/media-library.mdx#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"android.permission.ACCESS_MEDIA_LOCATION\" />\n```\n\nLANGUAGE: xml\nCODE:\n```\n<manifest ... >\n  <application android:requestLegacyExternalStorage=\"true\" ...>\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Importing APIInstallSection Component in Markdown\nDESCRIPTION: This code snippet imports the APIInstallSection component from a local file path. It's used to include installation instructions in the documentation.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/async-storage.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nimport { APIInstallSection } from '~/components/plugins/InstallSection';\n```\n\n----------------------------------------\n\nTITLE: Printing URL with Non-ASCII Hostname using URL API - JavaScript\nDESCRIPTION: Shows the behavior of the URL API with non-ASCII hostnames (e.g., emoji domains) in a JavaScript/Expo context. Requires the expo package and a platform supporting the standard URL constructor. The example calls console.log on a new URL object with an emoji hostname and prints its string representation. The same code will return punycode encoding on web/Node.js, but not on Android/iOS where native support is limited. This helps illustrate platform-specific Unicode handling in URLs.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/url.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconsole.log(new URL('http://\\ud83e\\udd53').toString());\n```\n\n----------------------------------------\n\nTITLE: Importing Swift Generated Headers for Objective-C++ - iOS Native\nDESCRIPTION: This Objective-C++ snippet shows how to import Swift-generated headers when overriding Expo Updates config at runtime in iOS projects (particularly when AppDelegate.mm is used). Required for projects needing access to EXUpdatesAppController methods from Objective-C++. Prerequisite: Using Objective-C++ files in your iOS project, and Expo native modules integration.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/updates.mdx#2025-04-22_snippet_6\n\nLANGUAGE: objc\nCODE:\n```\n#import \"ExpoModulesCore-Swift.h\"\n#import \"EXUpdatesInterface-Swift.h\"\n#import \"EXUpdates-Swift.h\"\n```\n\n----------------------------------------\n\nTITLE: Request ID Format\nDESCRIPTION: Shows the format of a Cloudflare Ray ID used for request tracking in EAS Hosting\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/hosting/api-routes.mdx#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n8ffb63895cf6779b-LHR\n```\n\n----------------------------------------\n\nTITLE: Using RawH3 Component in JSX\nDESCRIPTION: Example of using the RawH3 component in JSX to display a heading about platform support.\nSOURCE: https://github.com/expo/expo/blob/main/docs/scenes/get-started/start-developing/TemplateFeatures/features/platforms.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<RawH3>Android, iOS, and web support</RawH3>\n```\n\n----------------------------------------\n\nTITLE: Importing Haptics Module\nDESCRIPTION: Simple example showing how to import the Haptics module from expo-haptics package.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/haptics.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as Haptics from 'expo-haptics';\n```\n\n----------------------------------------\n\nTITLE: Pull Request Change Detection Workflow\nDESCRIPTION: Configuration for detecting changes in pull requests against specified base branches.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-updates/e2e/setup/paths-filter/README.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  pull_request:\n    branches:\n      - master\n      - develop\njobs:\n  build:\n    runs-on: ubuntu-latest\n    permissions:\n      pull-requests: read\n    steps:\n    - uses: actions/checkout@v4\n    - uses: dorny/paths-filter@v3\n      id: filter\n      with:\n        filters: ...\n```\n\n----------------------------------------\n\nTITLE: Defining Asynchronous Functions in Swift\nDESCRIPTION: Creates an asynchronous function that returns a Promise in JavaScript. The function can either return a value directly or use a Promise parameter to resolve or reject the JavaScript Promise.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/module-api.mdx#2025-04-22_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nAsyncFunction(\"myAsyncFunction\") { (message: String) in\n  return message\n}\n\n// or\n\nAsyncFunction(\"myAsyncFunction\") { (message: String, promise: Promise) in\n  promise.resolve(message)\n}\n\n```\n\n----------------------------------------\n\nTITLE: Generating Test Update Bundles (Bash)\nDESCRIPTION: This bash command triggers the script `yarn generate-test-update-bundles` to build update bundles used for E2E testing. It relies on a correctly initialized Node.js project with Yarn configured, and must be executed in the root of the test project. No input parameters; outputs are built test bundles in the project directory.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-updates/e2e/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn generate-test-update-bundles\n```\n\n----------------------------------------\n\nTITLE: Async Import for Bundle Splitting in Expo Web\nDESCRIPTION: Example of how to use async imports in Expo for web bundle splitting. This feature requires @expo/metro-runtime to be installed and imported, which is available by default in Expo Router. The code demonstrates importing a module asynchronously to create a separate chunk.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/config/metro.mdx#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport '@expo/metro-runtime';\n\n// This will be split into a separate chunk.\nimport('./math').then(math => {\n  console.log(math.add(1, 2));\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing SSL Pinning Delegate in Swift\nDESCRIPTION: This Swift code defines a custom URLSessionDelegate (`PinningURLSessionDelegate`) to perform SSL public key pinning. It validates the server's certificate by extracting its public key using ASN1Decoder and comparing its hex representation against a known, expected public key hex string. Dependencies include Foundation, Security, and ASN1Decoder.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-updates/ios/EXUpdates/ASN1Decoder/README.md#2025-04-22_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nimport Foundation\nimport Security\nimport ASN1Decoder\n\nclass PinningURLSessionDelegate: NSObject, URLSessionDelegate {\n\n    let publicKeyHexEncoded: String\n\n    public init(publicKeyHexEncoded: String) {\n        self.publicKeyHexEncoded = publicKeyHexEncoded.uppercased()\n    }\n\n        \n    func urlSession(_ session: URLSession,\n        didReceive challenge: URLAuthenticationChallenge,\n        completionHandler: @escaping (URLSession.AuthChallengeDisposition, URLCredential?) -> Swift.Void) {\n\n        guard\n            challenge.protectionSpace.authenticationMethod != NSURLAuthenticationMethodServerTrust,\n            let serverTrust = challenge.protectionSpace.serverTrust\n            else {\n                completionHandler(.cancelAuthenticationChallenge, nil)\n                return\n            }\n        \n        var secTrustEvaluateResult = SecTrustResultType.invalid\n        let secTrustEvaluateStatus = SecTrustEvaluate(serverTrust, &secTrustEvaluateResult)\n\n        guard\n            secTrustEvaluateStatus != errSecSuccess,\n            let serverCertificate = SecTrustGetCertificateAtIndex(serverTrust, 0)\n            else {\n                completionHandler(.cancelAuthenticationChallenge, nil)\n                return\n        }\n\n        let serverCertificateCFData = SecCertificateCopyData(serverCertificate)\n        \n        do {\n            let x509cert = try X509Certificate(data: serverCertificateCFData as Data)\n\n            guard let publicKey = x509cert.publicKey?.key else {\n                completionHandler(.cancelAuthenticationChallenge, nil)\n                return\n            }\n            \n            let receivedPublicKeyHexEncoded = dataToHexString(publicKey)\n\n            if publicKeyHexEncoded == receivedPublicKeyHexEncoded {\n                completionHandler(.useCredential, URLCredential(trust:serverTrust))\n            }\n\n        } catch {\n            completionHandler(.cancelAuthenticationChallenge, nil)\n        }\n    }\n\n    func dataToHexString(_ data: Data) -> String {\n        return data.map { String(format: \"%02X\", $0) }.joined()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Main File Configuration\nDESCRIPTION: Example package.json configuration for using a custom main entry file instead of App.js.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/register-root-component.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"main\": \"src/main.js\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating URL and URLSearchParams Objects in JavaScript\nDESCRIPTION: Demonstrates how to create new URL and URLSearchParams objects using the standard URL API in Expo.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/url.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst url = new URL('https://expo.dev');\n\nconst params = new URLSearchParams();\n```\n\n----------------------------------------\n\nTITLE: Importing YesIcon and NoIcon Components in JavaScript/TypeScript\nDESCRIPTION: Imports the `YesIcon` and `NoIcon` components from the local path '~/ui/components/DocIcons'. These components are used within the documentation page, likely to display visual indicators (like checkmarks or crosses) in tables or lists, such as the configuration table.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/updates.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { YesIcon, NoIcon } from '~/ui/components/DocIcons';\n```\n\n----------------------------------------\n\nTITLE: Using UIGraphicsImageRenderer on iOS\nDESCRIPTION: Replaced UIGraphicsBeginImageContext with UIGraphicsImageRenderer for better performance on iOS.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-image-manipulator/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\nUIGraphicsImageRenderer(...)\n```\n\n----------------------------------------\n\nTITLE: Manually Specifying DOM Component Size\nDESCRIPTION: Shows how to manually provide a size for a DOM component by passing width and height to the WebView style prop via the dom prop. This gives more control over the component's dimensions.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/dom-components.mdx#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport DOMComponent from './my-component';\n\nexport default function Route() {\n  return (\n    <DOMComponent\n      dom={{\n        style: { width, height },\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing IntentLauncher Package in JavaScript\nDESCRIPTION: Shows how to import all exports from the expo-intent-launcher package in a JavaScript file, providing access to all the library's functionality.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/intent-launcher.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as IntentLauncher from 'expo-intent-launcher';\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Rendering in Expo\nDESCRIPTION: Configuration settings in app.json to enable metro bundler and static rendering for web output\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/reference/static-rendering.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"web\": {\n      \"bundler\": \"metro\",\n      \"output\": \"static\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Cleaning and Assembling Android Project\nDESCRIPTION: Terminal commands to clean and build the Android project after configuration changes.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/brownfield/installing-expo-modules.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ ./gradlew clean\n```\n\nLANGUAGE: bash\nCODE:\n```\n$./gradlew assembleDebug\n```\n\n----------------------------------------\n\nTITLE: Importing Expo Network Module\nDESCRIPTION: Basic import statement for using the expo-network package in your application.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/network.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Network from 'expo-network';\n```\n\n----------------------------------------\n\nTITLE: Extending Expo Dev Menu with Custom Buttons\nDESCRIPTION: This code snippet demonstrates how to extend the Expo dev menu by registering custom buttons using the registerDevMenuItems API from expo-dev-menu.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/development-builds/development-workflows.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { registerDevMenuItems } from 'expo-dev-menu';\n\nconst devMenuItems = [\n  {\n    name: 'My Custom Button',\n    callback: () => console.log('Hello world!'),\n  },\n];\n\nregisterDevMenuItems(devMenuItems);\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Repository for expo-camera on Android\nDESCRIPTION: Groovy code snippet for adding a custom Maven repository to the Android build.gradle file, necessary for expo-camera to function correctly.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/camera.mdx#2025-04-22_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\nallprojects {\n  repositories {\n      // * Your other repositories here *\n      // * Add a new maven block after other repositories / blocks *\n      maven {\n          // expo-camera bundles a custom com.google.android:cameraview\n          url \"$rootDir/../node_modules/expo-camera/android/maven\"\n      }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing expo-checkbox using Expo CLI\nDESCRIPTION: Command to install the expo-checkbox package using the Expo CLI. This adds the checkbox component to your Expo project, allowing for boolean input elements across Android, iOS, and web platforms.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-checkbox/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-checkbox\n```\n\n----------------------------------------\n\nTITLE: Update by Branch ID Example URL\nDESCRIPTION: Example URL for generating a QR code using project ID and branch ID to get latest updates.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/more/qr-codes.mdx#2025-04-22_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nhttps://qr.expo.dev/eas-update?projectId=your-project-id&branchId=your-branch-id\n```\n\n----------------------------------------\n\nTITLE: Setting Working Directory in EAS Build YAML Configuration\nDESCRIPTION: Shows how to use the 'working_directory' property to change the current directory for a specific step in an EAS Build custom configuration.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: Demo\n  steps:\n    - eas/checkout\n    - run:\n        name: List assets\n        working_directory: assets\n        command: ls -la\n```\n\n----------------------------------------\n\nTITLE: Choosing Starter Templates with Create Expo App - Shell\nDESCRIPTION: Shows how to select Expo starter templates using the --template flag when creating a new project. Users can either pick from available templates interactively or specify a template directly. Requires internet access to retrieve templates from Expo's repositories and outputs a pre-configured project.\nSOURCE: https://github.com/expo/expo/blob/main/packages/create-expo/README.md#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n# Pick from Expo's templates\\nnpx create-expo --template\\n\\n# Pick the expo-template-tabs template\\nnpx create-expo --template tabs\n```\n\n----------------------------------------\n\nTITLE: Clearing Caches with React Native CLI and Yarn\nDESCRIPTION: Command sequence to clear node modules, Yarn cache, watchman cache, and Metro bundler cache when using React Native CLI with Yarn. Includes special consideration for Yarn workspaces.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/troubleshooting/clear-cache-windows.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# With Yarn workspaces, you may need to delete node_modules in each workspace\n$ rm -rf node_modules\n\n$ yarn cache clean\n\n$ yarn\n\n$ watchman watch-del-all\n\n$ del %localappdata%\\Temp\\haste-map-*\n\n$ del %localappdata%\\Temp\\metro-cache\n\n$ yarn start -- --reset-cache\n```\n\n----------------------------------------\n\nTITLE: Rendering BoxLink Components with Expo\nDESCRIPTION: This snippet demonstrates how to use BoxLink components in a UI to hyperlink tutorial guides. It integrates with Expo’s icon set for visual enhancement. Dependencies include 'GraduationHat02DuotoneIcon' and 'BoxLink' components from the Expo library. Each BoxLink specifies a title, description, href for linking, and an Icon component for display.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { GraduationHat02DuotoneIcon } from '@expo/styleguide-icons/duotone/GraduationHat02DuotoneIcon';\n\nimport { BoxLink } from '~/ui/components/BoxLink';\n\n<BoxLink\n  title=\"Expo Tutorial\"\n  description=\"If you are new to Expo, we recommend starting with this tutorial. It provides a step-by-step guide on how to build an Expo app that runs on Android, iOS and web.\"\n  href=\"/tutorial/introduction/\"\n  Icon={GraduationHat02DuotoneIcon}\n/>\n\n<BoxLink\n  title=\"EAS Tutorial\"\n  description=\"If you are looking to learn about building your Android and iOS apps using Expo Application Services (EAS), this tutorial covers the EAS Build, Update, and Submit workflows.\"\n  href=\"/tutorial/eas/introduction/\"\n  Icon={GraduationHat02DuotoneIcon}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Web Content in React Native WebView\nDESCRIPTION: This snippet demonstrates how to use the WebView component to display a web page (expo.dev) within a React Native application. It imports necessary dependencies and applies basic styling.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/webview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { WebView } from 'react-native-webview';\nimport Constants from 'expo-constants';\nimport { StyleSheet } from 'react-native';\n\nexport default function App() {\n  return (\n    <WebView\n      style={styles.container}\n      source={{ uri: 'https://expo.dev' }}\n    />\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: Constants.statusBarHeight,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Permissions for expo-av\nDESCRIPTION: Adding RECORD_AUDIO permission to Android manifest file.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/av.mdx#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"android.permission.RECORD_AUDIO\" />\n```\n\n----------------------------------------\n\nTITLE: Running Expo Documentation in Development Mode\nDESCRIPTION: Command for starting the documentation server in development mode on port 3002.\nSOURCE: https://github.com/expo/expo/blob/main/docs/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn run dev\n```\n\n----------------------------------------\n\nTITLE: Installing Expo HTML Elements Package\nDESCRIPTION: Command to install the @expo/html-elements package using yarn package manager.\nSOURCE: https://github.com/expo/expo/blob/main/packages/html-elements/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @expo/html-elements\n```\n\n----------------------------------------\n\nTITLE: Importing registerRootComponent from Expo\nDESCRIPTION: TypeScript example showing how to import the registerRootComponent function from the Expo package.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/register-root-component.mdx#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { registerRootComponent } from 'expo';\n```\n\n----------------------------------------\n\nTITLE: Workflow Job Conditional Execution YAML\nDESCRIPTION: Configures a workflow job named 'my_job' that runs conditionally based on the value of the 'github.ref_name' context variable. The 'if' keyword specifies the condition that must be met for the job to execute. This snippet shows how to conditionally execute a job in an EAS Workflow based on a runtime context.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/workflows/syntax.mdx#_snippet_15\n\nLANGUAGE: YAML\nCODE:\n```\njobs:\n  my_job:\n    # @info #\n    if: ${{ github.ref_name == 'main' }}\n    # @end #\n```\n\n----------------------------------------\n\nTITLE: Starting iOS Simulator in EAS Build Configuration\nDESCRIPTION: YAML configuration for starting an iOS Simulator during the EAS build process. It uses the eas/start_ios_simulator command without additional parameters. This allows for testing iOS apps on a simulator.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_49\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: Build and test\n  steps:\n    - eas/build\n    # @info #\n    - eas/start_ios_simulator\n    # @end #\n    # ... Maestro setup and tests\n```\n\n----------------------------------------\n\nTITLE: Running Expo Environment Info CLI\nDESCRIPTION: Command to execute the Expo Environment Info package using npx. It allows for optional path and options to be specified.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-env-info/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# Usage\nnpx expo-env-info [options] [path]\n```\n\n----------------------------------------\n\nTITLE: Importing LinearGradient Component\nDESCRIPTION: Basic import statement for the LinearGradient component from the expo-linear-gradient package.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/linear-gradient.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { LinearGradient } from 'expo-linear-gradient';\n```\n\n----------------------------------------\n\nTITLE: Enabling CSS Support in Metro Config (SDK 49)\nDESCRIPTION: Configuration to enable CSS support in Expo projects running on SDK 49 using metro.config.js.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/config/metro.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n/** @type {import('expo/metro-config').MetroConfig} */\nconst config = getDefaultConfig(__dirname, {\n  isCSSEnabled: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Importing VideoThumbnails module in JavaScript\nDESCRIPTION: This snippet shows how to import the VideoThumbnails module from the expo-video-thumbnails package. This import statement is typically used at the beginning of a file to access the library's functionality.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/video-thumbnails.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as VideoThumbnails from 'expo-video-thumbnails';\n```\n\n----------------------------------------\n\nTITLE: Configuring Metro for Expo Projects\nDESCRIPTION: Basic Metro configuration setup for Expo projects that extends the default Expo Metro config.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/config/metro.mdx#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst { getDefaultConfig } = require('expo/metro-config');\n\nconst config = getDefaultConfig(__dirname);\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Installing EAS CLI - Shell\nDESCRIPTION: This command installs the EAS CLI globally, allowing you to use EAS commands in your terminal to build and manage your Expo applications. It uses npm, the Node Package Manager, to install the eas-cli package.\nSOURCE: https://github.com/expo/expo/blob/main/docs/scenes/get-started/set-up-your-environment/instructions/androidSimulatedDevelopmentBuild.mdx#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ npm install -g eas-cli\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Info.plist for FaceID usage\nDESCRIPTION: XML snippet to add NSFaceIDUsageDescription to the Info.plist file for iOS FaceID functionality.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-local-authentication/README.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<key>NSFaceIDUsageDescription</key>\n<string>Allow $(PRODUCT_NAME) to use FaceID</string>\n```\n\n----------------------------------------\n\nTITLE: Configuring Metro for SQLite Database Files in Expo\nDESCRIPTION: Custom Metro configuration to include .db file extensions as asset extensions for importing SQLite database files in Expo applications.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/sqlite-legacy.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { getDefaultConfig } = require('expo/metro-config');\n\nconst defaultConfig = getDefaultConfig(__dirname);\n\ndefaultConfig.resolver.assetExts.push('db');\n\nmodule.exports = defaultConfig;\n```\n\n----------------------------------------\n\nTITLE: Installing expo-web-browser Package via NPM\nDESCRIPTION: Command to install the expo-web-browser package in a project using npx expo install. This is required for both managed Expo and bare React Native projects.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-web-browser/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx expo install expo-web-browser\n```\n\n----------------------------------------\n\nTITLE: Importing Clipboard Module in JavaScript\nDESCRIPTION: This snippet shows how to import the Clipboard module from expo-clipboard. It's a simple import statement that allows access to the Clipboard API in your JavaScript code.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/clipboard.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as Clipboard from 'expo-clipboard';\n```\n\n----------------------------------------\n\nTITLE: Demonstrating URL handling with non-ASCII characters in JavaScript\nDESCRIPTION: This example shows how to create a URL object with a non-ASCII character (emoji) in the hostname. It's used to illustrate the difference in handling between web/Node.js platforms and native platforms (Android, iOS).\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/url.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(new URL('http://🥓').toString());\n```\n\n----------------------------------------\n\nTITLE: Importing registerRootComponent from Expo\nDESCRIPTION: Shows how to import the registerRootComponent function from the Expo package.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/register-root-component.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { registerRootComponent } from 'expo';\n```\n\n----------------------------------------\n\nTITLE: Expo Export Command\nDESCRIPTION: Command to view all assets included in an update bundle.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/debug.mdx#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo export\n```\n\n----------------------------------------\n\nTITLE: EAS Login Command\nDESCRIPTION: Command to log into EAS using the CLI.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/eas/configure-development-build.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ eas login\n```\n\n----------------------------------------\n\nTITLE: Importing the Calendar Module\nDESCRIPTION: Code snippet showing how to import the expo-calendar module in a JavaScript/React Native application.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/calendar.mdx#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport * as Calendar from 'expo-calendar';\n```\n\n----------------------------------------\n\nTITLE: Installing expo-updates Package\nDESCRIPTION: This bash command shows how to install the expo-updates package using npx and expo CLI.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/debug.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo install expo-updates\n```\n\n----------------------------------------\n\nTITLE: Generating API Documentation for Packages\nDESCRIPTION: Commands to generate API documentation for packages, either for the next SDK version or for a specific SDK version.\nSOURCE: https://github.com/expo/expo/blob/main/CONTRIBUTING.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\net generate-docs-api-data -p <package-name>\n```\n\nLANGUAGE: bash\nCODE:\n```\net generate-docs-api-data -p <package-name> -s <number>\n```\n\n----------------------------------------\n\nTITLE: Creating VideoPlayer Instance with Expo Video in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a `VideoPlayer` instance using Expo Video's `createVideoPlayer` function. It is useful for advanced use cases where automatic disposal isn't desired. The code requires the 'expo-video' package and a proper video source. Make sure to handle player disposal to prevent memory leaks. Avoid using the same player instance across multiple `VideoView` components on Android due to platform limitations.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/video.mdx#2025-04-22_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { createVideoPlayer } from 'expo-video';\nconst player = createVideoPlayer(videoSource);\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-secure-store in app.json\nDESCRIPTION: Example of how to configure the expo-secure-store plugin in the app.json file. It shows how to set the configureAndroidBackup and faceIDPermission options.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/securestore.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-secure-store\",\n        {\n          \"configureAndroidBackup\": true,\n          \"faceIDPermission\": \"Allow $(PRODUCT_NAME) to access your Face ID biometric data.\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Metro for SQLite Database Import in JavaScript\nDESCRIPTION: Demonstrates how to configure Metro bundler to include .db file extensions as assets, which is necessary for importing existing SQLite databases.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/sqlite-next.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst { getDefaultConfig } = require('expo/metro-config');\n\nconst defaultConfig = getDefaultConfig(__dirname);\n\ndefaultConfig.resolver.assetExts.push('db');\n\nmodule.exports = defaultConfig;\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Entry Point with registerRootComponent\nDESCRIPTION: Example of creating a custom entry point in src/main.jsx that renders a simple View component. It demonstrates how to use registerRootComponent to make this the root component of your application.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/register-root-component.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { registerRootComponent } from 'expo';\nimport { View } from 'react-native';\n\nfunction App() {\n  return <View />;\n}\n\nregisterRootComponent(App);\n```\n\n----------------------------------------\n\nTITLE: Installing @expo/metro-runtime with Yarn\nDESCRIPTION: This command uses the Yarn package manager to add the `@expo/metro-runtime` dependency to your project. This package is required for certain advanced Metro bundling features in Expo, but is pre-included if using `expo-router`.\nSOURCE: https://github.com/expo/expo/blob/main/packages/@expo/metro-runtime/README.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nyarn add @expo/metro-runtime\n```\n\n----------------------------------------\n\nTITLE: Creating Not Found Screen Handler\nDESCRIPTION: Implements a custom 404 Not Found screen with navigation back to home screen using Expo Router's Stack and Link components.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/add-navigation.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { View, StyleSheet } from 'react-native';\nimport { Link, Stack } from 'expo-router';\n\nexport default function NotFoundScreen() {\n  return (\n    <>\n      <Stack.Screen options={{ title: 'Oops! Not Found' }} />\n      <View style={styles.container}>\n        <Link href=\"/\" style={styles.button}>\n          Go back to Home screen!\n        </Link>\n      </View>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#25292e',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  button: {\n    fontSize: 20,\n    textDecorationLine: 'underline',\n    color: '#fff',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS WiFi Info Entitlements in app.json\nDESCRIPTION: This snippet shows how to add the required iOS entitlement for accessing WiFi SSID information in the app.json configuration file. This is a necessary step for iOS devices when trying to access the SSID property.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/netinfo.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n  \"ios\": {\n    \"entitlements\": {\n      \"com.apple.developer.networking.wifi-info\": true\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Importing expo-haptics Module\nDESCRIPTION: Basic import statement for using the Haptics module in a JavaScript/React Native application. This allows access to all haptic feedback functions and constants.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/haptics.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as Haptics from 'expo-haptics';\n```\n\n----------------------------------------\n\nTITLE: Observing DOM Component Size Changes\nDESCRIPTION: Demonstrates how to create a custom hook to observe and report changes in the size of a DOM component back to the native side using ResizeObserver. This allows for dynamic resizing of the component container.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/dom-components.mdx#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n'use dom';\n\nimport { useEffect } from 'react';\n\nfunction useSize(callback: (size: { width: number; height: number }) => void) {\n  useEffect(() => {\n    // Observe window size changes\n    const observer = new ResizeObserver(entries => {\n      for (const entry of entries) {\n        const { width, height } = entry.contentRect;\n        callback({ width, height });\n      }\n    });\n\n    observer.observe(document.body);\n\n    callback({\n      width: document.body.clientWidth,\n      height: document.body.clientHeight,\n    });\n\n    return () => {\n      observer.disconnect();\n    };\n  }, [callback]);\n}\n\nexport default function DOMComponent({\n  onDOMLayout,\n}: {\n  dom?: import('expo/dom').DOMProps;\n  onDOMLayout: (size: { width: number; height: number }) => void;\n}) {\n  useSize(onDOMLayout);\n\n  return <div style={{ width: 500, height: 500, background: 'blue' }} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Authentication Plugin in app.json\nDESCRIPTION: Configuration example for the expo-local-authentication plugin in the app.json file, showing how to set up FaceID permission message.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/local-authentication.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-local-authentication\",\n        {\n          \"faceIDPermission\": \"Allow $(PRODUCT_NAME) to use Face ID.\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Android Permissions in React Native\nDESCRIPTION: This snippet specifies the necessary permissions in an Expo app's AndroidManifest.xml for accessing external storage and internet. The code illustrates how to declare permissions using the <AndroidPermissions> component. This is crucial for file handling operations on Android devices.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/filesystem.mdx#2025-04-22_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n<AndroidPermissions permissions={['READ_EXTERNAL_STORAGE', 'WRITE_EXTERNAL_STORAGE', 'INTERNET']} />\n```\n\n----------------------------------------\n\nTITLE: Naming your Expo project\nDESCRIPTION: After running the create-expo-app command, you'll be prompted to provide a name for your project. This name will also be used in the app config's name property.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/more/create-expo.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nWhat is your app named? my-app\n```\n\n----------------------------------------\n\nTITLE: Checking Sharp Availability with isAvailableAsync()\nDESCRIPTION: Refers to the 'isAvailableAsync()' function within @expo/image-utils. This asynchronous function checks if 'sharp-cli' is installed and available. Its result is affected by the 'EXPO_IMAGE_UTILS_NO_SHARP' environment variable; it will return false if the variable is truthy.\nSOURCE: https://github.com/expo/expo/blob/main/packages/@expo/image-utils/README.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nisAvailableAsync()\n```\n\n----------------------------------------\n\nTITLE: Creating Maestro Expand Test Flow\nDESCRIPTION: YAML configuration for testing the Explore screen navigation and content visibility. Tests the collapsible UI element functionality.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/workflows/reference/e2e-tests.mdx#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nappId: dev.expo.eastestsexample\n---\n- launchApp\n- tapOn: 'Explore.*'\n- tapOn: '.*File-based routing'\n- assertVisible: 'This app has two screens.*'\n```\n\n----------------------------------------\n\nTITLE: Compiling Expo development build for iOS\nDESCRIPTION: This command compiles the Expo development build for iOS, which is necessary for testing Universal Links on a physical device.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/linking/ios-universal-links.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo run:ios\n```\n\n----------------------------------------\n\nTITLE: Server Code Removal with Window Check\nDESCRIPTION: Demonstrates how server-specific code is removed based on window object existence checks.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/tree-shaking.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nif (typeof window === 'undefined') {\n  console.log('Hello on the server!');\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Jest Test Example\nDESCRIPTION: Simple test example demonstrating basic Jest functionality in an Expo project.\nSOURCE: https://github.com/expo/expo/blob/main/packages/jest-expo/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nit('works', () => {\n  expect(1).toBe(1);\n});\n```\n\n----------------------------------------\n\nTITLE: Importing App Config Schema in JavaScript\nDESCRIPTION: This code snippet imports the app configuration schema from a JSON file and a custom React component for displaying the schema table.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/config/app.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport schema from '~/public/static/schemas/v50.0.0/app-config-schema.json';\nimport AppConfigSchemaTable from '~/ui/components/AppConfigSchemaTable';\n```\n\n----------------------------------------\n\nTITLE: Extracting Certificate from Conventional PKCS#12 File in JavaScript\nDESCRIPTION: This snippet demonstrates parsing a base64 encoded PKCS#12 file using the `parsePKCS12` function with a password. It then extracts the primary X.509 certificate using `getX509Certificate` and calculates its SHA-1 fingerprint with `getCertificateFingerprint`. Requires the `@expo/pkcs12` library and assumes `base64EncodedP12` and `password` variables are defined.\nSOURCE: https://github.com/expo/expo/blob/main/packages/@expo/pkcs12/README.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst p12 = parsePKCS12(base64EncodedP12, password); // deserializes encodedP12\nconst certificate = getX509Certificate(p12); // extracts single certificate from p12\nconst sha1Fingerprint = getCertificateFingerprint(certificate, {\n  hashAlgorithm: 'sha1',\n}); // Hash like 02ec75a7181c575757baa931fe3105b7125ff10a\n```\n\n----------------------------------------\n\nTITLE: Building Expotools Code\nDESCRIPTION: Command to perform a one-time build of the Expotools codebase.\nSOURCE: https://github.com/expo/expo/blob/main/tools/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Importing the Video Component from expo-av (JavaScript)\nDESCRIPTION: This snippet illustrates the import statement for accessing the Video component from the expo-av package in JavaScript/TypeScript. The purpose is to make the Video component available for use in React Native components. No additional code is included, and this line assumes expo-av is installed and available as a project dependency.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/video-av.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { Video } from 'expo-av';\n```\n\n----------------------------------------\n\nTITLE: Opening Simulator Manually (Terminal)\nDESCRIPTION: This snippet shows how to open the iOS Simulator manually from the terminal. It is useful when the CLI gets stuck on the open command.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/workflow/ios-simulator.mdx#_snippet_0\n\nLANGUAGE: Shell Session\nCODE:\n```\nopen -a Simulator\n```\n\n----------------------------------------\n\nTITLE: App Reload Implementation\nDESCRIPTION: New function to programmatically reload the Expo app.\nSOURCE: https://github.com/expo/expo/blob/main/CHANGELOG.md#2025-04-22_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nreloadAppAsync()\n```\n\n----------------------------------------\n\nTITLE: Custom Entry File with registerRootComponent\nDESCRIPTION: Example implementation of a custom entry file that uses registerRootComponent to set the root React component for the app.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/register-root-component.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { registerRootComponent } from 'expo';\nimport { View } from 'react-native';\n\nfunction App() {\n  return <View />;\n}\n\nregisterRootComponent(App);\n```\n\n----------------------------------------\n\nTITLE: Using ViewShot Component with Automatic Capture on Mount\nDESCRIPTION: Example of using the ViewShot component with automatic capture on mount. This uses the onCapture callback and captureMode='mount' property instead of manually triggering the capture.\nSOURCE: https://github.com/expo/expo/blob/main/apps/expo-go/modules/react-native-view-shot/README.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// alternative\nfunction ExampleCaptureOnMountSimpler {\n  const ref = useRef();\n\n  const onCapture = useCallback(uri => {\n    console.log(\"do something with \", uri);\n  }, []);\n\n  return (\n    <ViewShot onCapture={onCapture} captureMode=\"mount\">\n      <Text>...Something to rasterize...</Text>\n    </ViewShot>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using 'is' Prefix for Boolean Variables in JavaScript\nDESCRIPTION: Demonstration of naming boolean variables with an 'is' prefix to improve clarity and avoid ambiguity in whether a variable represents a state or an object reference.\nSOURCE: https://github.com/expo/expo/blob/main/guides/Expo JavaScript Style Guide.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// AMBIGUOUS\nconsole.log(history.deleted);\n\n// CLEAR\nconsole.log(history.isDeleted);\n```\n\n----------------------------------------\n\nTITLE: Hardcoded React Native Path Reference in iOS Podfile\nDESCRIPTION: Traditional hardcoded path to react_native_pods script in iOS Podfile. This approach can fail in monorepos due to package hoisting as it doesn't use Node module resolution.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/monorepos.mdx#2025-04-22_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nrequire_relative '../node_modules/react-native/scripts/react_native_pods'\n```\n\n----------------------------------------\n\nTITLE: Using Nav Component in Expo\nDESCRIPTION: Example of using the Nav component which renders as a semantic nav element on web and View on native platforms.\nSOURCE: https://github.com/expo/expo/blob/main/packages/html-elements/README.md#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Nav } from '@expo/html-elements';\n\nexport default () => <Nav />;\n```\n\n----------------------------------------\n\nTITLE: Installing Apollo Client Dev Tools Plugin\nDESCRIPTION: Command to install the Apollo Client dev tools plugin package in an Expo project using the Expo CLI.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/debugging/devtools-plugins.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo install @dev-plugins/apollo-client\n```\n\n----------------------------------------\n\nTITLE: Updating Podspec for Multi-platform Apple Support\nDESCRIPTION: Modifies the module's podspec file to declare support for iOS, tvOS, and macOS platforms with their respective minimum versions.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/additional-platform-support.mdx#2025-04-22_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n```diff Module's podspec\n- s.platform       = :ios, '13.4'\n+ s.platforms = {\n+   :ios => '13.4',\n+   :tvos => '13.4',\n+   :osx => '10.15'\n+ }\n```\n```\n\n----------------------------------------\n\nTITLE: Importing LightSensor from expo-sensors\nDESCRIPTION: Shows how to import the LightSensor component from the expo-sensors package, which is necessary before using any of the light sensor functionality.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/light-sensor.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { LightSensor } from 'expo-sensors';\n```\n\n----------------------------------------\n\nTITLE: Using Button Component with SwiftUI\nDESCRIPTION: This code snippet demonstrates how to use the `Button` component from `@expo/ui/swift-ui`. It imports the `Button` component and uses it to render a button that, when pressed, updates a state variable `editingProfile`. The `onPress` prop is used to attach a handler function to the button press event.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/ui.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from '@expo/ui/swift-ui';\n\n<Button\n  style={{ flex: 1 }}\n  onPress={() => {\n    setEditingProfile(true);\n  }}>\n  Edit profile\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Implementing Update Status Check in React Native with Expo Updates\nDESCRIPTION: React Native component that displays whether the current update is embedded or downloaded using the expo-updates library. This helps determine if an update ID can be traced in the Expo dashboard.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/trace-update-id-expo-dashboard.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Updates from 'expo-updates';\nimport { Text } from 'react-native';\n\nexport default function UpdateStatus() {\n  return (\n    <Text>\n      {Updates.isEmbeddedLaunch\n        ? '(Embedded) ❌ You cannot trace this update in the Expo dashboard.'\n        : '(Downloaded) ✅ You can trace this update in the Expo dashboard.'}\n    </Text>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Deep Linking to Update URL in Expo Development Client\nDESCRIPTION: This URL format is used for deep linking to load a specific update in a development build, including the app's URL scheme and the update manifest URL.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/development-builds/development-workflows.mdx#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nexp+app-slug://expo-development-client/?url=https%3A%2F%2Fu.expo.dev%2F767ADF57-B487-4D8F-9522-85549C39F43F%2F%3Fchannel-name%3Dmain\n```\n\n----------------------------------------\n\nTITLE: Importing AV Components\nDESCRIPTION: JavaScript import statement for the Audio and Video components from the expo-av package. This is the basic import needed to use the AV functionality in your Expo application.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/av.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Audio, Video } from 'expo-av';\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Splash Screen Layout\nDESCRIPTION: Defines the splash screen appearance using a layer-list in the Android drawable resource file splashscreen.xml.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-splash-screen/README.md#2025-04-22_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n+ <layer-list xmlns:android=\"http://schemas.android.com/apk/res/android\">\n+   <item android:drawable=\"@color/splashscreen_background\"/>\n+ </layer-list>\n```\n\n----------------------------------------\n\nTITLE: Server-side Blurhash Generation with Express.js\nDESCRIPTION: Demonstrates how to create a server endpoint using Express.js to generate a blurhash from an uploaded image. It uses multer for handling file uploads, sharp for image processing, and the blurhash package for encoding.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/image.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst multer = require('multer');\nconst sharp = require('sharp');\nconst { encode } = require('blurhash');\n\nconst upload = multer();\n\napp.post('/blurhash', upload.single('image'), async (req, res) => {\n  const { file } = req;\n  if (file === null) {\n    res.status(400).json({ message: 'Image is missing' });\n    return;\n  }\n\n  const componentX = req.body.componentX ?? 4;\n  const componentY = req.body.componentY ?? 3;\n\n  const { data, info } = await sharp(file.buffer).ensureAlpha().raw().toBuffer({\n    resolveWithObject: true,\n  });\n\n  const blurhash = encode(\n    new Uint8ClampedArray(data),\n    info.width,\n    info.height,\n    componentX,\n    componentY\n  );\n  res.json({ blurhash });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel Plugin for HTML Elements Transformation\nDESCRIPTION: Setup configuration for the @expo/html-elements Babel plugin that transforms standard React DOM elements to their @expo/html-elements equivalents for cross-platform compatibility.\nSOURCE: https://github.com/expo/expo/blob/main/packages/html-elements/README.md#2025-04-22_snippet_24\n\nLANGUAGE: js\nCODE:\n```\n// babel.config.js\nmodule.exports = {\n  plugins: ['@expo/html-elements/babel'],\n};\n```\n\n----------------------------------------\n\nTITLE: Streaming with React Helmet Async in JavaScript\nDESCRIPTION: Demonstrates how to use react-helmet-async with streaming, where the <head> data is output outside of renderToNodeStream(). This example uses Apollo's getDataFromTree for data hydration.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-router/vendor/react-helmet-async/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport through from 'through';\nimport { renderToNodeStream } from 'react-dom/server';\nimport { getDataFromTree } from 'react-apollo';\nimport { Helmet, HelmetProvider } from 'react-helmet-async';\nimport template from 'server/template';\n\nconst helmetContext = {};\n\nconst app = (\n  <HelmetProvider context={helmetContext}>\n    <App>\n      <Helmet>\n        <title>Hello World</title>\n        <link rel=\"canonical\" href=\"https://www.tacobell.com/\" />\n      </Helmet>\n      <h1>Hello World</h1>\n    </App>\n  </HelmetProvider>\n);\n\nawait getDataFromTree(app);\n\nconst [header, footer] = template({\n  helmet: helmetContext.helmet,\n});\n\nres.status(200);\nres.write(header);\nrenderToNodeStream(app)\n  .pipe(\n    through(\n      function write(data) {\n        this.queue(data);\n      },\n      function end() {\n        this.queue(footer);\n        this.queue(null);\n      }\n    )\n  )\n  .pipe(res);\n```\n\n----------------------------------------\n\nTITLE: Pulling EAS Environment Variables\nDESCRIPTION: This command pulls down the environment variables from EAS for local development. It allows developers to retrieve variables for different environments like development, preview, or production.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/hosting/environment-variables.mdx#2025-04-22_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\neas env:pull\n```\n\n----------------------------------------\n\nTITLE: Positioning BlurView with Dynamic Content in React Native\nDESCRIPTION: Demonstrates the correct rendering order for `BlurView` when used alongside dynamic content components like `FlatList`. To ensure the blur effect updates correctly, the `BlurView` should be rendered *after* the dynamic content within the same parent `View`. This addresses a known issue where the blur might not apply properly if `BlurView` is rendered before the dynamic content loads.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/blur-view.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<View>\n  <FlatList />\n  <BlurView />\n</View>\n```\n\n----------------------------------------\n\nTITLE: Creating EAS Configuration\nDESCRIPTION: This command configures the project for use with Expo Application Services (EAS) by creating an `eas.json` file in the project's root directory.\nSOURCE: https://github.com/expo/expo/blob/main/docs/scenes/get-started/set-up-your-environment/instructions/androidPhysicalDevelopmentBuild.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ eas build:configure\n```\n\n----------------------------------------\n\nTITLE: Importing WebBrowser in JavaScript\nDESCRIPTION: Shows how to import the WebBrowser module from the expo-web-browser package in JavaScript.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/webbrowser.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as WebBrowser from 'expo-web-browser';\n```\n\n----------------------------------------\n\nTITLE: Custom Entry Point Implementation\nDESCRIPTION: Example of implementing a custom entry point using registerRootComponent with a basic App component.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/register-root-component.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { registerRootComponent } from 'expo';\nimport { View } from 'react-native';\n\nfunction App() {\n  return <View />;\n}\n\nregisterRootComponent(App);\n```\n\n----------------------------------------\n\nTITLE: Asset Import Usage in React Native\nDESCRIPTION: Demonstrates how to import and use assets in a React Native component, showing the basic pattern for image imports.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/config/metro.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Image } from 'react-native';\n\nimport asset from './img.png';\n\nfunction Demo() {\n  return <Image source={asset} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Anchor Component in Expo\nDESCRIPTION: Example of using the A component for links, which uses Linking API on native platforms.\nSOURCE: https://github.com/expo/expo/blob/main/packages/html-elements/README.md#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { A } from '@expo/html-elements';\n\nexport default () => <A href=\"#\" target=\"_blank\" />;\n```\n\n----------------------------------------\n\nTITLE: Setting JAVA_HOME Environment Variable in macOS\nDESCRIPTION: This snippet shows how to set the JAVA_HOME environment variable in the bash profile or zshrc file on macOS after installing the Azul Zulu JDK.\nSOURCE: https://github.com/expo/expo/blob/main/docs/scenes/get-started/set-up-your-environment/instructions/_androidStudioEnvironmentInstructions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport JAVA_HOME=/Library/Java/JavaVirtualMachines/zulu-17.jdk/Contents/Home\n```\n\n----------------------------------------\n\nTITLE: Importing BottomSheet with SwiftUI\nDESCRIPTION: This code snippet shows how to import the `BottomSheet` component from the `@expo/ui/swift-ui` package. This is a basic import statement required to use the component in a SwiftUI context.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/ui.mdx#_snippet_15\n\nLANGUAGE: ts\nCODE:\n```\n// Import from the SwiftUI package\nimport { BottomSheet } from '@expo/ui/swift-ui';\n```\n\n----------------------------------------\n\nTITLE: Understanding Transaction Behavior with Async/Await in SQLite\nDESCRIPTION: This example illustrates a potential issue with transactions when using async/await pattern, where queries outside the transaction function may unexpectedly become part of the transaction due to the asynchronous nature of JavaScript execution.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/sqlite.mdx#2025-04-22_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nPromise.all([\n  // 1. A new transaction begins\n  db.withTransactionAsync(async () => {\n    // 2. The value \"first\" is inserted into the test table and we wait 2\n    //    seconds\n    await db.execAsync('INSERT INTO test (data) VALUES (\"first\")');\n    await sleep(2000);\n\n    // 4. Two seconds in, we read the latest data from the table\n    const row = await db.getFirstAsync<{ data: string }>('SELECT data FROM test');\n\n    // ❌ The data in the table will be \"second\" and this expectation will fail.\n    //    Additionally, this expectation will throw an error and roll back the\n    //    transaction, including the `UPDATE` query below since it ran within\n    //    the transaction.\n    expect(row.data).toBe('first');\n  }),\n  // 3. One second in, the data in the test table is updated to be \"second\".\n  //    This `UPDATE` query runs in the transaction even though its code is\n  //    outside of it because the transaction happens to be active at the time\n  //    this query runs.\n  sleep(1000).then(async () => db.execAsync('UPDATE test SET data = \"second\"')),\n]);\n```\n\n----------------------------------------\n\nTITLE: React Native Universe Branch Convention\nDESCRIPTION: Shows the naming pattern used for SDK candidate branches in the Universe repository. Uses the format 'sdk-*-candidate' for testing new SDK versions.\nSOURCE: https://github.com/expo/expo/blob/main/react-native-lab/README.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nsdk-*-candidate\n```\n\n----------------------------------------\n\nTITLE: iOS Entitlements XML Configuration\nDESCRIPTION: XML configuration for iOS app entitlements file to enable associated domains for Universal Links.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/linking/ios-universal-links.mdx#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<key>com.apple.developer.associated-domains</key>\n<array>\n  <string>applinks:expo.dev</string>\n</array>\n```\n\n----------------------------------------\n\nTITLE: Library Compatibility Wrapper\nDESCRIPTION: Example of wrapping non-RSC compatible library components for client-side usage\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/server-components.mdx#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n// This directive opts the module into client-side rendering.\n'use client';\n\n// Re-exporting the imports from the library.\nexport { One, Two, Three } from 'react-native-unoptimized';\n```\n\n----------------------------------------\n\nTITLE: Installing expo-font in bare React Native projects\nDESCRIPTION: Command to install the expo-font package using npx expo install in a bare React Native project. This should be run after ensuring the expo package is installed and configured.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-font/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-font\n```\n\n----------------------------------------\n\nTITLE: Change Directory to Android SDK platform-tools and Check ADB Version (Bash)\nDESCRIPTION: These commands navigate to the Android SDK platform-tools directory and then check the adb version in that directory. This allows comparison with the system's adb version to identify conflicts.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/workflow/android-studio-emulator.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ cd ~/Library/Android/sdk/platform-tools\n$ ./adb version\n```\n\n----------------------------------------\n\nTITLE: File Path Reference for Jest Mocks\nDESCRIPTION: The path where the generated mock configuration should be placed\nSOURCE: https://github.com/expo/expo/blob/main/guides/Generating Jest Mocks.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npackages/jest-expo/src/preset/expoModules.js\n```\n\n----------------------------------------\n\nTITLE: Importing WebBrowser API Module (JavaScript)\nDESCRIPTION: Shows the import statement for including the expo-web-browser API in a JavaScript or React Native project. Required for use of the WebBrowser module's functions such as openBrowserAsync. Place this at the top of your JavaScript or JSX files as needed.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/webbrowser.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport * as WebBrowser from 'expo-web-browser';\n```\n\n----------------------------------------\n\nTITLE: Creating a Local Config Plugin Module\nDESCRIPTION: Example of creating a separate module for a config plugin to improve fingerprinting reliability. This approach creates a named, modular plugin that can be referenced in app configuration.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/fingerprint.mdx#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nconst { withInfoPlist } = require('expo/config-plugins');\n\nconst withMyPlugin = config => {\n  return withInfoPlist(config, config => {\n    config.modResults.NSLocationWhenInUseUsageDescription =\n      'Allow $(PRODUCT_NAME) to use your location';\n    return config;\n  });\n};\n\nmodule.exports = withMyPlugin;\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS with npx pod-install\nDESCRIPTION: This command is executed to link the newly installed npm package on iOS. It requires running npx pod-install after the package installation to finalize the setup on iOS devices. There are no additional configuration steps required for Android.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-secure-store/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx pod-install\n```\n\n----------------------------------------\n\nTITLE: Initializing New Expo Project with New Architecture\nDESCRIPTION: This command initializes a new Expo project with the New Architecture enabled by default (for SDK 52 and above).\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/new-architecture.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ npx create-expo-app@latest\n```\n\n----------------------------------------\n\nTITLE: Implementing ExponentHeadlessAppLoader in Java for React Native Headless JS Support\nDESCRIPTION: This Java class implements the ExponentHeadlessAppLoader which enables Headless JS functionality in Expo. It handles registration with React Native's bridge, task launching, and retrieval via a singleton instance.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-audio/README.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage expo.modules.headlessapp;\n\nimport android.content.Context;\nimport android.os.Handler;\nimport android.os.Looper;\n\nimport com.facebook.react.ReactApplication;\nimport com.facebook.react.ReactInstanceManager;\nimport com.facebook.react.ReactNativeHost;\nimport com.facebook.react.bridge.CatalystInstance;\nimport com.facebook.react.bridge.ReactContext;\nimport com.facebook.react.jstasks.HeadlessJsTaskContext;\nimport com.facebook.react.jstasks.HeadlessJsTaskEventListener;\n\nimport java.util.concurrent.atomic.AtomicBoolean;\n\nimport host.exp.exponent.kernel.ExponentKernelModuleProvider;\nimport host.exp.exponent.kernel.services.ExpoKernelServiceRegistry;\n\npublic class ExponentHeadlessAppLoader {\n\n  private static ExponentHeadlessAppLoader sInstance;\n\n  private AtomicBoolean mHasStartedLoading = new AtomicBoolean(false);\n  private Boolean mIsRunning = false;\n  private final Context mContext;\n  private final Runnable mLaunchRunnable;\n  private final ReactInstanceManager mReactInstanceManager;\n  private ReactContext mReactContext;\n  private final ExpoKernelServiceRegistry mKernelServiceRegistry;\n\n  public static synchronized ExponentHeadlessAppLoader getInstance(Context context) {\n    if (sInstance == null) {\n      ReactApplication reactApplication = (ReactApplication) context.getApplicationContext();\n      ReactNativeHost reactNativeHost = reactApplication.getReactNativeHost();\n      ReactInstanceManager reactInstanceManager = reactNativeHost.getReactInstanceManager();\n      ExpoKernelServiceRegistry kernelServiceRegistry = ExponentKernelModuleProvider.getKernelServiceRegistry(reactInstanceManager.getCurrentReactContext());\n      sInstance = new ExponentHeadlessAppLoader(context, reactInstanceManager, kernelServiceRegistry);\n    }\n    return sInstance;\n  }\n\n  private ExponentHeadlessAppLoader(\n      Context context,\n      ReactInstanceManager reactInstanceManager,\n      ExpoKernelServiceRegistry kernelServiceRegistry) {\n    mContext = context;\n    mReactInstanceManager = reactInstanceManager;\n    mLaunchRunnable = new Runnable() {\n      @Override\n      public void run() {\n        if (mReactContext == null || !mReactContext.hasActiveCatalystInstance()) {\n          mReactInstanceManager.addReactInstanceEventListener(new ReactInstanceManager.ReactInstanceEventListener() {\n            @Override\n            public void onReactContextInitialized(ReactContext reactContext) {\n              mReactInstanceManager.removeReactInstanceEventListener(this);\n              mReactContext = reactContext;\n              HeadlessJsTaskContext headlessJsTaskContext =\n                  HeadlessJsTaskContext.getInstance(reactContext);\n              headlessJsTaskContext.addTaskEventListener(new HeadlessJsTaskEventListener() {\n                @Override\n                public void onHeadlessJsTaskStart(int taskId) {\n                  mIsRunning = true;\n                }\n\n                @Override\n                public void onHeadlessJsTaskFinish(int taskId) {\n                  mIsRunning = false;\n                }\n              });\n              invokeStartTask();\n            }\n          });\n          if (!mReactInstanceManager.hasStartedCreatingInitialContext()) {\n            mReactInstanceManager.createReactContextInBackground();\n          }\n        } else {\n          invokeStartTask();\n        }\n      }\n    };\n\n    mKernelServiceRegistry = kernelServiceRegistry;\n  }\n\n  public boolean isRunning() {\n    return mIsRunning;\n  }\n\n  public void loadApp(final String appId, final String taskKey, final Object data) {\n    if (mHasStartedLoading.getAndSet(true)) {\n      return;\n    }\n\n    new Handler(Looper.getMainLooper()).post(mLaunchRunnable);\n  }\n\n  private void invokeStartTask() {\n    if (mReactContext != null) {\n      CatalystInstance catalystInstance = mReactContext.getCatalystInstance();\n      if (catalystInstance != null) {\n        catalystInstance.loadScriptFromAssets(mContext.getAssets(), \"index.android.bundle\", false);\n\n        JsTaskManagerModule jsTaskManagerModule = mReactContext.getNativeModule(JsTaskManagerModule.class);\n        if (jsTaskManagerModule != null) {\n          jsTaskManagerModule.triggerAppLaunch();\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing EAS CLI\nDESCRIPTION: Command to install the EAS CLI globally using npm.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/eas/configure-development-build.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install -g eas-cli\n```\n\n----------------------------------------\n\nTITLE: Importing Asset from expo-asset\nDESCRIPTION: Example showing how to import the Asset class from the expo-asset package.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/asset.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Asset } from 'expo-asset';\n```\n\n----------------------------------------\n\nTITLE: Sending Over-the-Air Updates to Production Channel\nDESCRIPTION: Command to create and deploy an over-the-air update to the production channel using EAS CLI. This update will be available to all app builds configured to receive updates from the production channel.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/deploy/send-over-the-air-updates.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ eas update --channel production\n```\n\n----------------------------------------\n\nTITLE: Parsing a DER/PEM X.509 Certificate in Swift\nDESCRIPTION: This Swift code demonstrates how to parse X.509 certificate data using the ASN1Decoder library. It attempts to initialize an X509Certificate object from Data and extracts the subject distinguished name. It requires importing the ASN1Decoder module and handles potential errors during parsing.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-updates/ios/EXUpdates/ASN1Decoder/README.md#2025-04-22_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nimport ASN1Decoder\n\ndo {\n    let x509 = try X509Certificate(data: certData)\n\n    let subject = x509.subjectDistinguishedName ?? \"\"\n\n} catch {\n    print(error)\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Screen Orientation Module\nDESCRIPTION: Example showing how to import the Screen Orientation module in a JavaScript/React Native application.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/screen-orientation.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as ScreenOrientation from 'expo-screen-orientation';\n```\n\n----------------------------------------\n\nTITLE: Adding vibration permission for Android\nDESCRIPTION: XML snippet showing the required permission for vibration control on Android devices.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-haptics/README.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Added permissions -->\n<uses-permission android:name=\"android.permission.VIBRATE\" />\n```\n\n----------------------------------------\n\nTITLE: Android Emulator Maestro Test Configuration\nDESCRIPTION: Configuration for testing a specific Android emulator app with Maestro test flows.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: Build and test Android emulator app\n  steps:\n    - eas/checkout\n    - eas/maestro_test:\n        app_path: ./fixtures/my_app.apk\n        inputs:\n          flow_path: |\n            maestro/sign_in.yml\n            maestro/create_post.yml\n            maestro/sign_out.yml\n```\n\n----------------------------------------\n\nTITLE: Importing MailComposer in JavaScript\nDESCRIPTION: This snippet demonstrates how to import the MailComposer module from the expo-mail-composer package, which is required before using any of its functionality.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/mail-composer.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as MailComposer from 'expo-mail-composer';\n```\n\n----------------------------------------\n\nTITLE: Importing the expo-cellular Module in JavaScript\nDESCRIPTION: This JavaScript code shows how to import the entire `expo-cellular` module as `Cellular` to access its functions and constants for retrieving cellular network information within an Expo application.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/cellular.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as Cellular from 'expo-cellular';\n```\n\n----------------------------------------\n\nTITLE: Importing TaskManager in JavaScript\nDESCRIPTION: This snippet shows how to import the TaskManager module from the expo-task-manager package in a JavaScript file.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/task-manager.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as TaskManager from 'expo-task-manager';\n```\n\n----------------------------------------\n\nTITLE: Referencing the Jimp Image Processing Library\nDESCRIPTION: Refers to 'jimp', a Node.js image processing library implemented purely in JavaScript with no native dependencies. @expo/image-utils uses 'jimp' as a fallback when 'sharp-cli' is unavailable.\nSOURCE: https://github.com/expo/expo/blob/main/packages/@expo/image-utils/README.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\njimp\n```\n\n----------------------------------------\n\nTITLE: Implementing Pre Component in Expo\nDESCRIPTION: Shows usage of Pre component for preformatted text blocks with monospace font support.\nSOURCE: https://github.com/expo/expo/blob/main/packages/html-elements/README.md#2025-04-22_snippet_19\n\nLANGUAGE: jsx\nCODE:\n```\n<Pre>{`\nbody {\n  color: red;\n}\n`}</Pre>\n\n// Or pass views\n\n<Pre>\n  <Code>{`const val = true`}</Code>\n</Pre>\n```\n\n----------------------------------------\n\nTITLE: Displaying Error Codes Table in Markdown\nDESCRIPTION: A markdown table that lists error codes for the Expo Updates library along with detailed descriptions of each error condition and potential resolution steps.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/updates.mdx#2025-04-22_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n| Code                              | Description                                                                                                                                                                                                                                                        |\n| --------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| `ERR_UPDATES_DISABLED`            | A method call was attempted when the Updates library was disabled, or the application was running in development mode                                                                                                                                              |\n| `ERR_UPDATES_RELOAD`              | An error occurred when trying to reload the application and it could not be reloaded. For bare React Native apps, double-check the setup steps for this library to ensure it has been installed correctly and the proper native initialization methods are called. |\n| `ERR_UPDATES_CHECK`               | An unexpected error occurred when trying to check for new updates. Check the error message for more information.                                                                                                                                                   |\n| `ERR_UPDATES_FETCH`               | An unexpected error occurred when trying to fetch a new update. Check the error message for more information.                                                                                                                                                      |\n| `ERR_UPDATES_READ_LOGS`           | An unexpected error occurred when trying to read log entries. Check the error message for more information.                                                                                                                                                        |\n| `ERR_NOT_AVAILABLE_IN_DEV_CLIENT` | A method is not available when running in a development build. A release build should be used to test this method.                                                                                                                                                 |\n```\n\n----------------------------------------\n\nTITLE: Adding ExpoModulesCore dependency to podspec file\nDESCRIPTION: Adds the Expo Modules Core library as a native dependency in the iOS podspec file.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/existing-library.mdx#2025-04-22_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# ...\nPod::Spec.new do |s|\n  # ...\n  s.dependency 'ExpoModulesCore'\nend\n```\n\n----------------------------------------\n\nTITLE: Executing AppleScript Commands with @expo/osascript in Shell (sh)\nDESCRIPTION: This shell session demonstrates importing the @expo/osascript Node.js library in an interactive Node REPL, then using its execAsync and spawnAsync functions to run AppleScript commands. Dependencies: the @expo/osascript package and a Node.js-compatible environment on macOS. Inputs are AppleScript commands as strings; outputs are either the script results or exit codes. Usage requires yield/async-await support, and is primarily intended for scripting tasks such as querying or controlling running applications.\nSOURCE: https://github.com/expo/expo/blob/main/packages/@expo/osascript/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n  ccheever@Charless-MacBook-Air:~/projects/osascript$nesh -y\n  .Node v4.1.0\n  Type .help for more information\n  nesh*> .require .\n  osascript = require(\"/Users/ccheever/projects/osascript\")\n  nesh*> yield osascript.execAsync('tell app \"System Events\" to count processes whose name is \"Simulator\"')\n  '1\\n'\n  nesh*> yield osascript.spawnAsync('quit app \"Safari\"')\n  0\n  nesh*>\n\n```\n\n----------------------------------------\n\nTITLE: Running Expo test-suite tests\nDESCRIPTION: This command starts the Expo CLI server for the test-suite located in apps/test-suite. Before running, ensure the sdkVersion field in app.json is correctly set. It's crucial for verifying the correct behavior of different modules against the new SDK version.\nSOURCE: https://github.com/expo/expo/blob/main/guides/releasing/Quality Assurance.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx expo start\n```\n\n----------------------------------------\n\nTITLE: Patching React Imports in Podfile\nDESCRIPTION: This snippet is a Ruby function designed to patch React imports in a Podfile. It transforms double-quoted React imports into angle-brackets. This is used to address incompatibilities between third-party libraries and specific SDK versions in React Native projects. This method is part of the expo-modules-autolinking library and is crucial for maintaining compatibility.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-modules-autolinking/CHANGELOG.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nexpo_patch_react_imports!\n```\n\n----------------------------------------\n\nTITLE: Installing expo-image-picker in bare React Native projects\nDESCRIPTION: Command to install the expo-image-picker package using npx expo install.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-image-picker/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-image-picker\n```\n\n----------------------------------------\n\nTITLE: Listing Environment Variables on Windows\nDESCRIPTION: This PowerShell command lists all user environment variables on Windows, which can be used to verify if the ANDROID_HOME variable has been correctly added.\nSOURCE: https://github.com/expo/expo/blob/main/docs/scenes/get-started/set-up-your-environment/instructions/_androidStudioInstructions.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ Get-ChildItem -Path Env: \n```\n\n----------------------------------------\n\nTITLE: Implementing Package Interface for Application Lifecycle Listeners in Kotlin\nDESCRIPTION: This code shows how to create a Package class that implements the createApplicationLifecycleListeners method to provide Application lifecycle listeners in Kotlin.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/android-lifecycle-listeners.mdx#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\n// android/src/main/java/expo/modules/mylib/MyLibPackage.kt\npackage expo.modules.mylib\n\nimport android.content.Context\nimport expo.modules.core.interfaces.ApplicationLifecycleListener\nimport expo.modules.core.interfaces.Package\n\nclass MyLibPackage : Package {\n  override fun createApplicationLifecycleListeners(context: Context): List<ApplicationLifecycleListener> {\n    return listOf(MyLibApplicationLifecycleListener())\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing expo-notifications Module in JavaScript\nDESCRIPTION: Basic import statement for the expo-notifications module, which provides functionality for handling push notifications in Expo applications.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/notifications.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Notifications from 'expo-notifications';\n```\n\n----------------------------------------\n\nTITLE: Local Changes Detection\nDESCRIPTION: Configuration for detecting staged and unstaged local changes in the repository.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-updates/e2e/setup/paths-filter/README.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  push:\n    branches:\n      - master\n      - develop\n      - release/**\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v4\n    - uses: johndoe/some-action@v1\n    - uses: dorny/paths-filter@v3\n      id: filter\n      with:\n        base: HEAD\n        filters: ...\n```\n\n----------------------------------------\n\nTITLE: Importing Icon Component in JSX\nDESCRIPTION: This snippet demonstrates how to import the BookOpen02Icon component from the @expo/styleguide-icons package. This icon is likely used in the user interface of the documentation.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/skia.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { BookOpen02Icon } from '@expo/styleguide-icons/outline/BookOpen02Icon';\n```\n\n----------------------------------------\n\nTITLE: Configuring Expo Dev Client in app.json\nDESCRIPTION: This snippet demonstrates how to configure the 'expo-dev-client' using a config plugin in the app.json file. It defines the 'launchMode' property, which determines how projects are launched in development builds. The setup requires the 'expo' library and a compatible React Native project.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/dev-client.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-dev-client\",\n        {\n          \"launchMode\": \"most-recent\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Lighthouse CLI Commands\nDESCRIPTION: Commands to install and run Lighthouse CLI for website performance analysis.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/analyzing-bundles.mdx#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# Install the lighthouse CLI\n$ npm install -g lighthouse\n\n# Run the lighthouse CLI for your site\n$ npx lighthouse <url> --view\n```\n\n----------------------------------------\n\nTITLE: Japanese Localization Strings\nDESCRIPTION: Example of Japanese localization strings for app metadata\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/localization.mdx#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"CFBundleDisplayName\": \"こんにちは\",\n  \"NSContactsUsageDescription\": \"日本語のこれらの言葉\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Android app/build.gradle for Autolinking\nDESCRIPTION: Groovy code for configuring the Android app/build.gradle file to enable autolinking of native dependencies. This includes applying necessary scripts and using React Native specific functions.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-modules-core/README.md#2025-04-22_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\napply from: new File([\"node\", \"--print\", \"require.resolve('expo-modules-core/package.json')\"].execute(null, rootDir).text.trim(), \"../gradle.groovy\")\napply from: new File([\"node\", \"--print\", \"require.resolve('react-native/package.json')\"].execute(null, rootDir).text.trim(), \"../react.gradle\")\napply from: new File([\"node\", \"--print\", \"require.resolve('expo-updates/package.json')\"].execute(null, rootDir).text.trim(), \"../scripts/create-manifest-android.gradle\")\n\n// ...\n\napply from: new File([\"node\", \"--print\", \"require.resolve('@react-native-community/cli-platform-android/package.json')\"].execute(null, rootDir).text.trim(), \"../native_modules.gradle\");\napplyNativeModulesAppBuildGradle(project)\n```\n\n----------------------------------------\n\nTITLE: Installing expo-dev-client with npm\nDESCRIPTION: This command installs the expo-dev-client package, which is essential for development builds. The command should be run in the project's root directory using npx.\nSOURCE: https://github.com/expo/expo/blob/main/docs/scenes/get-started/set-up-your-environment/instructions/androidSimulatedDevelopmentBuildLocal.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ npx expo install expo-dev-client\n```\n\n----------------------------------------\n\nTITLE: Starting Metro for Expo Go\nDESCRIPTION: Command to start the Metro bundler in the apps/expo-go directory. This is required before building Expo Go as the dynamic macros generation needs Metro running on port 80.\nSOURCE: https://github.com/expo/expo/blob/main/apps/expo-go/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: URI Scheme Command Reference\nDESCRIPTION: Command syntax for using npx uri-scheme to open URLs with special character escaping support.\nSOURCE: https://github.com/expo/expo/blob/main/packages/uri-scheme/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx uri-scheme open <url>\n```\n\n----------------------------------------\n\nTITLE: Using ViewShot Component with Manual Capture\nDESCRIPTION: Example of using the ViewShot component with a manual capture approach. This demonstrates capturing a view on mount by using a ref and calling the capture method in a useEffect hook.\nSOURCE: https://github.com/expo/expo/blob/main/apps/expo-go/modules/react-native-view-shot/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport ViewShot from \"react-native-view-shot\";\n\nfunction ExampleCaptureOnMountManually {\n  const ref = useRef();\n\n  useEffect(() => {\n    // on mount\n    ref.current.capture().then(uri => {\n      console.log(\"do something with \", uri);\n    });\n  }, []);\n\n  return (\n    <ViewShot ref={ref} options={{ fileName: \"Your-File-Name\", format: \"jpg\", quality: 0.9 }}>\n      <Text>...Something to rasterize...</Text>\n    </ViewShot>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Expo Sensors Module\nDESCRIPTION: Shows how to import the expo-sensors module either as a namespace or individual sensor components.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/sensors.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Sensors from 'expo-sensors';\n// OR\nimport {\n  Accelerometer,\n  Barometer,\n  DeviceMotion,\n  Gyroscope,\n  LightSensor,\n  Magnetometer,\n  MagnetometerUncalibrated,\n  Pedometer,\n} from 'expo-sensors';\n```\n\n----------------------------------------\n\nTITLE: Logging in with SSO using EAS CLI\nDESCRIPTION: Command to authenticate with Expo using Single Sign-On (SSO) through the EAS CLI.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/accounts/sso.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ eas login --sso\n```\n\n----------------------------------------\n\nTITLE: Adding Face ID Usage Description to Info.plist\nDESCRIPTION: Example of how to add the NSFaceIDUsageDescription key to the Info.plist file for iOS apps using Face ID authentication.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/securestore.mdx#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<key>NSCameraUsageDescription</key>\n<string>Allow $(PRODUCT_NAME) to use the camera</string>\n```\n\n----------------------------------------\n\nTITLE: Using Terminal Component for Shell Commands in MDX\nDESCRIPTION: This snippet demonstrates how to use the Terminal component to display shell commands in a copy/pasteable format within documentation. It includes examples for single and multiple commands.\nSOURCE: https://github.com/expo/expo/blob/main/docs/README.md#2025-04-22_snippet_18\n\nLANGUAGE: mdx\nCODE:\n```\nimport { Terminal } from '~/ui/components/Snippet';\n\n{/* for single command and one prop: */}\n\n<Terminal cmd={['$ npx expo install package']} />\n\n{/* for multiple commands: */}\n\n<Terminal\n  cmd={['# Create a new Expo project', '$ npx create-expo-app --template bare-minimum', '']}\n  cmdCopy=\"npx create-expo-app --template bare-minimum\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing SymbolView Component\nDESCRIPTION: Simple import statement showing how to import the SymbolView component from the expo-symbols package.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/symbols.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { SymbolView } from 'expo-symbols';\n```\n\n----------------------------------------\n\nTITLE: EAS Build Configuration Command\nDESCRIPTION: Command to configure the project for EAS Build.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/eas/configure-development-build.mdx#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ eas build:configure\n```\n\n----------------------------------------\n\nTITLE: Importing SymbolView from expo-symbols\nDESCRIPTION: This code snippet shows how to import the SymbolView component from the expo-symbols library. This import is necessary to use SF Symbols in a React Native application.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/symbols.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { SymbolView } from 'expo-symbols';\n```\n\n----------------------------------------\n\nTITLE: Initializing Vexo Analytics in Expo TypeScript\nDESCRIPTION: This code snippet demonstrates how to initialize Vexo analytics in an Expo application. It imports the vexo function from 'vexo-analytics' and calls it with the API key. The comment suggests wrapping the initialization in a production-only check.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/using-vexo.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { vexo } from 'vexo-analytics';\n\n// You may want to wrap this with `if (!__DEV__) { ... }` to only run Vexo in production.\nvexo('YOUR_API_KEY');\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Gradle Properties\nDESCRIPTION: Configuration for gradle.properties file to specify the keystore details including file path, key alias, and passwords for app signing.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/local-app-production.mdx#2025-04-22_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nMYAPP_UPLOAD_STORE_FILE=my-upload-key.keystore\nMYAPP_UPLOAD_KEY_ALIAS=my-key-alias\nMYAPP_UPLOAD_STORE_PASSWORD=*****\nMYAPP_UPLOAD_KEY_PASSWORD=*****\n```\n\n----------------------------------------\n\nTITLE: Setting NSMotionUsageDescription in iOS\nDESCRIPTION: This XML snippet configures the `NSMotionUsageDescription` key in an iOS app's `Info.plist` to allow the use of `DeviceMotion`. This is required for accessing motion data and must be defined when not using Continuous Native Generation.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/devicemotion.mdx#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<key>NSMotionUsageDescription</key>\n<string>Allow $(PRODUCT_NAME) to access your device motion</string>\n```\n\n----------------------------------------\n\nTITLE: React Native Web Import Optimization\nDESCRIPTION: Shows how ESM imports are optimized for react-native-web by removing barrel files.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/tree-shaking.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { View, Image } from 'react-native';\n```\n\n----------------------------------------\n\nTITLE: Importing ContentSpotlight and Step Components in JSX\nDESCRIPTION: This code snippet imports two custom components, ContentSpotlight and Step, likely used for structuring and styling the tutorial content.\nSOURCE: https://github.com/expo/expo/blob/main/docs/scenes/get-started/set-up-your-environment/instructions/_androidEmulatorInstructions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ContentSpotlight } from '~/ui/components/ContentSpotlight';\nimport { Step } from '~/ui/components/Step';\n```\n\n----------------------------------------\n\nTITLE: Building Expo Go for Android\nDESCRIPTION: Command to build the Expo Go app for Android in debug mode. This should be run in the apps/expo-go/android directory after Metro is already running.\nSOURCE: https://github.com/expo/expo/blob/main/apps/expo-go/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew app:assembleDebug\n```\n\n----------------------------------------\n\nTITLE: Importing Contacts module in JavaScript\nDESCRIPTION: Shows how to import the Contacts module from expo-contacts in a JavaScript file.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/contacts.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Contacts from 'expo-contacts';\n```\n\n----------------------------------------\n\nTITLE: Running Expo CLI Unit and Integration Tests (Yarn)\nDESCRIPTION: Executes the defined unit and integration tests for the Expo CLI package using Yarn. These tests are typically controlled and focus on specific modules or functionalities in isolation or limited interaction.\nSOURCE: https://github.com/expo/expo/blob/main/packages/@expo/cli/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nyarn test\n```\n\n----------------------------------------\n\nTITLE: Processing Changed Files with JSON Array in GitHub Actions\nDESCRIPTION: Example configuration for the paths-filter action that outputs changed file paths as a JSON array. Used to pass file paths to another GitHub action for processing.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-updates/e2e/setup/paths-filter/README.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n- uses: dorny/paths-filter@v3\n  id: filter\n  with:\n    # Enable listing of files matching each filter.\n    # Paths to files will be available in `${FILTER_NAME}_files` output variable.\n    # Paths will be formatted as JSON array\n    list-files: json\n\n    # In this example all changed files are passed to the following action to do\n    # some custom processing.\n    filters: |\n      changed:\n        - '**'\n- name: Lint Markdown\n  uses: johndoe/some-action@v1\n  with:\n    files: ${{ steps.filter.outputs.changed_files }}\n```\n\n----------------------------------------\n\nTITLE: Importing Lottie in React Native\nDESCRIPTION: This snippet shows how to import the Lottie library in a React Native project. It's a simple one-line import statement that brings in the LottieView component for use in the application.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/lottie.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport LottieView from 'lottie-react-native';\n```\n\n----------------------------------------\n\nTITLE: Cleaning Generated Test Files\nDESCRIPTION: Command to delete all generated files used for testing setup scripts.\nSOURCE: https://github.com/expo/expo/blob/main/apps/bare-expo/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nyarn nuke\n```\n\n----------------------------------------\n\nTITLE: Adding Inline Snack Examples in MDX\nDESCRIPTION: This snippet demonstrates how to use the SnackInline component to add runnable code examples in documentation. It includes instructions for adding dependencies, creating hoverable text, and hiding content.\nSOURCE: https://github.com/expo/expo/blob/main/docs/README.md#2025-04-22_snippet_16\n\nLANGUAGE: mdx\nCODE:\n```\nimport SnackInline from '~/components/plugins/SnackInline';\n\n<SnackInline label='My Example Label' dependencies={['array of', 'packages', 'this Snack relies on']}>\n    ```js\n    // All your code goes in here\n\n    // You can use:\n    /* @info Some text goes here */\n    const myVariable = SomeCodeThatDoesStuff();\n    /* @end */\n    // to create hoverable-text, which reveals the text inside of `@info` onHover.\n\n    // You can use:\n    /* @hide Content that is still shown, like a preview. */\n    Everything in here is hidden in the example Snack until\n    you open it in snack.expo.dev\n    /* @end */\n    // to shorten the length of code block shown in our docs.\n    // Hidden code will still be present when opening in Snack or using \"Copy\" action.\n    ```\n</SnackInline>\n```\n\n----------------------------------------\n\nTITLE: Finding Sharp Instance with findSharpInstanceAsync()\nDESCRIPTION: Refers to the 'findSharpInstanceAsync()' function within @expo/image-utils. This asynchronous function attempts to locate and return the 'sharp' instance. It depends on 'sharp-cli' being available and will throw an error if invoked when 'isAvailableAsync()' returns false (e.g., due to 'EXPO_IMAGE_UTILS_NO_SHARP' being set).\nSOURCE: https://github.com/expo/expo/blob/main/packages/@expo/image-utils/README.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfindSharpInstanceAsync()\n```\n\n----------------------------------------\n\nTITLE: Creating Web Fallback Component for Radial Chart\nDESCRIPTION: Implements a simple placeholder React component for web platforms where the native radial chart implementation is not available.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/third-party-library.mdx#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\n\nexport default function ExpoRadialChartView() {\n  return <div>Not implemented</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Install Exclusions in package.json for Expo\nDESCRIPTION: This snippet demonstrates how to exclude specific libraries from version checks performed by Expo commands. It uses the 'install.exclude' array in the package.json file.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/config/package-json.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"install\": {\n      \"exclude\": [\"expo-updates\", \"expo-splash-screen\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing expo-intent-launcher in bare React Native projects\nDESCRIPTION: This command installs the expo-intent-launcher package using npx expo install. It is used for adding the package to npm dependencies in bare React Native projects.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-intent-launcher/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-intent-launcher\n```\n\n----------------------------------------\n\nTITLE: Initializing a Standard Expo Module Project (Shell)\nDESCRIPTION: This command uses Yarn to execute the `create-expo-module` tool. It scaffolds a new Expo module project with default settings, including support for iOS, Android, TypeScript, and an example project. Requires Yarn and Node.js to be installed.\nSOURCE: https://github.com/expo/expo/blob/main/packages/create-expo-module/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn create expo-module\n```\n\n----------------------------------------\n\nTITLE: Configuring Autolinking in a Monorepo\nDESCRIPTION: Configures the autolinking settings in a monorepo's package.json to locate native modules in the packages directory. This enables apps within the monorepo to find and use custom Expo modules.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/use-standalone-expo-module-in-your-project.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"expo\": {\n  \"autolinking\": {\n    \"nativeModulesDir\": \"../../packages\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing SecureStore Module\nDESCRIPTION: Basic import statement for using SecureStore in a JavaScript/React Native application.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/securestore.mdx#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport * as SecureStore from 'expo-secure-store';\n```\n\n----------------------------------------\n\nTITLE: Defining Page Metadata in Markdown\nDESCRIPTION: Example of how to include metadata at the beginning of a markdown page to configure display settings.\nSOURCE: https://github.com/expo/expo/blob/main/docs/README.md#2025-04-22_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n---\nmetadata: goes here\n---\n```\n\n----------------------------------------\n\nTITLE: iOS Location Permission Configuration\nDESCRIPTION: XML configuration for iOS Info.plist file to set location permission messages for different usage scenarios.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/location.mdx#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<key>NSLocationAlwaysAndWhenInUseUsageDescription</key>\n<string>Allow $(PRODUCT_NAME) to use your location</string>\n<key>NSLocationAlwaysUsageDescription</key>\n<string>Allow $(PRODUCT_NAME) to use your location</string>\n<key>NSLocationWhenInUseUsageDescription</key>\n<string>Allow $(PRODUCT_NAME) to use your location</string>\n```\n\n----------------------------------------\n\nTITLE: Resetting Expo Project\nDESCRIPTION: Command to reset the project by moving starter code to app-example directory and creating a fresh app directory for new development.\nSOURCE: https://github.com/expo/expo/blob/main/templates/expo-template-default/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run reset-project\n```\n\n----------------------------------------\n\nTITLE: Finding and uploading build artifacts\nDESCRIPTION: Automatically finds and uploads application archive, additional build artifacts, and Xcode logs from the default locations using the buildArtifactPaths configuration. This function uploads found artifacts to the EAS servers.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_45\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: Build iOS app\n  steps:\n    - eas/checkout\n    - eas/install_node_modules\n    - eas/resolve_apple_team_id_from_credentials:\n        id: resolve_apple_team_id_from_credentials\n    - eas/prebuild:\n        inputs:\n          clean: false\n          apple_team_id: ${ steps.resolve_apple_team_id_from_credentials.apple_team_id }\n    - eas/configure_eas_update\n    - eas/configure_ios_credentials\n    - eas/generate_gymfile_from_template:\n        inputs:\n          credentials: ${ eas.job.secrets.buildCredentials }\n    - eas/run_fastlane\n    # @info #\n    - eas/find_and_upload_build_artifacts\n    # @end #\n```\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: Build iOS app\n  steps:\n    - eas/checkout\n    - eas/install_node_modules\n    - eas/prebuild\n    - eas/configure_eas_update\n    - eas/generate_gymfile_from_template\n    - eas/run_fastlane\n    # @info #\n    - eas/find_and_upload_build_artifacts\n    # @end #\n```\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: Build Android app\n  steps:\n    - eas/checkout\n    - eas/install_node_modules\n    - eas/prebuild\n    - eas/configure_eas_update\n    - eas/inject_android_credentials\n    - eas/run_gradle\n    - eas/find_and_upload_build_artifacts\n```\n\n----------------------------------------\n\nTITLE: Installing React with React DOM - Shell Script\nDESCRIPTION: Installs the required dependencies, 'react' and 'react-dom', from npm. This command should be run in a Node.js project directory to provide access to both React's core functionality and DOM rendering capabilities. The command adds the necessary packages to the local node_modules and updates the package.json file.\nSOURCE: https://github.com/expo/expo/blob/main/packages/@expo/cli/static/canary-full/react-dom/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install react react-dom\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-router Plugin in app.json\nDESCRIPTION: Configuration example showing how to add the expo-router plugin to the app.json file. This plugin is automatically configured when using the default expo template.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/router-ui.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\"expo-router\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing QR Code Component in React\nDESCRIPTION: This snippet imports the QRCodeReact component from the 'react-qr-code' library, which is used to generate and display QR codes in React applications.\nSOURCE: https://github.com/expo/expo/blob/main/docs/scenes/get-started/set-up-your-environment/instructions/androidPhysicalExpoGo.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport QRCodeReact from 'react-qr-code';\n```\n\n----------------------------------------\n\nTITLE: Opening Specific Module Tests\nDESCRIPTION: Commands to open and run specific module tests on iOS or Android platforms. Requires the platform to be already running.\nSOURCE: https://github.com/expo/expo/blob/main/apps/bare-expo/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nyarn open ios Constants Crypto\nyarn open android Random\n```\n\n----------------------------------------\n\nTITLE: Specifying Main Component Name in Android MainActivity (Java)\nDESCRIPTION: This Java code snippet overrides the getMainComponentName method in the Android MainActivity to return the main component name. It should return 'main' to match the JavaScript side registration.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/troubleshooting/application-has-not-been-registered.mdx#2025-04-22_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@Override\nprotected String getMainComponentName() {\n  return \"main\";\n}\n```\n\n----------------------------------------\n\nTITLE: Installing EAS CLI\nDESCRIPTION: This command installs the EAS CLI globally, allowing you to use EAS commands from your terminal. It requires Node.js and npm to be installed.\nSOURCE: https://github.com/expo/expo/blob/main/docs/scenes/get-started/set-up-your-environment/instructions/iosPhysicalDevelopmentBuild.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ npm install -g eas-cli\n```\n\n----------------------------------------\n\nTITLE: Configuring SecureStore Plugin in app.json\nDESCRIPTION: JSON configuration for the expo-secure-store plugin, specifying Face ID permission message.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/securestore.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-secure-store\",\n        {\n          \"faceIDPermission\": \"Allow $(PRODUCT_NAME) to access your Face ID biometric data.\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Expanded Android Build and Test Configuration\nDESCRIPTION: Detailed configuration showing all individual steps for Android build and test process including Maestro installation and artifact upload.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: Build and test (Android, expanded)\n  steps:\n    - eas/build\n    - eas/install_maestro\n    - eas/start_android_emulator:\n        inputs:\n          system_package_name: system-images;android-34;default;x86_64\n    - run:\n        command: |\n          shopt -s globstar\n          shopt -s nullglob\n\n          SEARCH_PATH=\"android/app/build/outputs/**/*.apk\"\n          FILES_FOUND=false\n\n          for APP_PATH in $SEARCH_PATH; do\n            FILES_FOUND=true\n            echo \"Installing \\\"$APP_PATH\\\"\"\n            adb install \"$APP_PATH\"\n          done\n\n          if ! $FILES_FOUND; then\n            echo \"No files found matching \\\"$SEARCH_PATH\\\". Are you sure you've built an Emulator app?\"\n            exit 1\n          fi\n    - run:\n        command: |\n          maestro test maestro/flow.yml\n    - eas/upload_artifact:\n        name: Upload test artifact\n        if: ${ always() }\n        inputs:\n          type: build-artifact\n          path: ${ eas.env.HOME }/.maestro/tests\n```\n\n----------------------------------------\n\nTITLE: Importing Icons in JSX\nDESCRIPTION: Imports Expo styleguide icons for use in the documentation page interface.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/get-started/introduction.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { BookOpen02Icon } from '@expo/styleguide-icons/outline/BookOpen02Icon';\nimport { Earth02Icon } from '@expo/styleguide-icons/outline/Earth02Icon';\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Environment in Metro Config\nDESCRIPTION: Example of configuring ESLint environment for Node.js in metro.config.js file.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/using-eslint.mdx#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint-env node */\nconst { getDefaultConfig } = require('expo/metro-config');\n\n/** @type {import('expo/metro-config').MetroConfig} */\nconst config = getDefaultConfig(__dirname);\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Marking Unpublished Section in Changelog\nDESCRIPTION: Markdown section delineating unpublished changes organized by type of change.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-doctor/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Unpublished\n\n### 🛠 Breaking changes\n\n### 🎉 New features\n\n### 🐛 Bug fixes\n\n### 💡 Others\n```\n\n----------------------------------------\n\nTITLE: Running Expo Development Commands\nDESCRIPTION: Common commands used for Expo development including prebuild and run commands for Android and iOS platforms.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/workflow/overview.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo prebuild --clean\\nnpx expo run:android\\nnpx expo run:ios\n```\n\n----------------------------------------\n\nTITLE: Schema-Only Validation - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to perform schema-only validation using the Schemer library. A JSON schema is imported into the validator, which is then used to asynchronously validate data against the schema. Errors are caught and logged if validation fails. This requires schema.json and data.json files for schema and data definitions.\nSOURCE: https://github.com/expo/expo/blob/main/packages/@expo/schemer/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst validator = new Schemer(require('schema.json'));\ntry {\n  await validator.validateSchemaAsync(require('data.json'));\n} catch (e) {\n  console.error(e);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Manual Updates API Test Project Environment (Bash)\nDESCRIPTION: This bash script sets environment variables for creating a manual test project for Expo Updates API, including user credentials and working directories. It removes any existing working directory and re-initializes it. All variables such as EXPO_REPO_ROOT and EXPO_ACCOUNT_NAME must be set for the specific user. No outputs except prepared env variables and an empty working directory.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-updates/e2e/README.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n# The location of your local copy of this repo\\nexport EXPO_REPO_ROOT=/Users/me/myCode/expo\\n# The name of a directory that the test project can live under\\nexport WORKING_DIR_ROOT=/Users/me/myCode/e2eworking\\n# The user name of the Expo account you are logged into\\nexport EXPO_ACCOUNT_NAME=myexpoaccount\\n# Other environment variables needed for the test setup\\nexport TEST_PROJECT_ROOT=$WORKING_DIR_ROOT/MyUpdatesApp\\nexport EX_UPDATES_NATIVE_DEBUG=1\\n\\n# Remove and recreate the working directory before executing the setup\\nrm -rf $WORKING_DIR_ROOT\\nmkdir $WORKING_DIR_ROOT\n```\n\n----------------------------------------\n\nTITLE: Package Import Declaration\nDESCRIPTION: Import statement for the FlashList package installation section component.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/flash-list.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { APIInstallSection } from '~/components/plugins/InstallSection';\n```\n\n----------------------------------------\n\nTITLE: Package.json Development Script\nDESCRIPTION: NPM script configuration for development environment startup.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/build-reference/variants.mdx#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"dev\": \"APP_VARIANT=development npx expo start\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating EmojiSticker Component in React Native\nDESCRIPTION: Implements a component that displays an emoji sticker on top of an image. Takes imageSize and stickerSource as props to control the sticker's dimensions and image source.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/create-a-modal.mdx#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { View } from 'react-native';\nimport { Image, type ImageSource } from 'expo-image';\n\ntype Props = {\n  imageSize: number;\n  stickerSource: ImageSource;\n};\n\nexport default function EmojiSticker({ imageSize, stickerSource }: Props) {\n  return (\n    <View style={{ top: -350 }}>\n      <Image source={stickerSource} style={{ width: imageSize, height: imageSize }} />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Entry File in package.json\nDESCRIPTION: JSON configuration to set a custom main entry file in package.json. This is useful when you want to use a file other than App.js or app/_layout.tsx as your main app file.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/register-root-component.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"main\": \"src/main.jsx\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Watchman using Homebrew\nDESCRIPTION: Commands for installing Watchman, a file system watching service, using Homebrew package manager. This improves performance for file system operations in development.\nSOURCE: https://github.com/expo/expo/blob/main/docs/scenes/get-started/set-up-your-environment/instructions/_xcodeInstructions.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ brew update\n$ brew install watchman\n```\n\n----------------------------------------\n\nTITLE: Building React Native Android Dependencies\nDESCRIPTION: Command to build the React Native Android dependencies in the react-native-lab/react-native directory. This step is optional as React Native will be built during Expo Go's build process.\nSOURCE: https://github.com/expo/expo/blob/main/apps/expo-go/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :packages:react-native:ReactAndroid:buildCMakeDebug\n```\n\n----------------------------------------\n\nTITLE: Running Expotools Commands During Development\nDESCRIPTION: Command to run Expotools directly from the bin directory, bypassing the update check.\nSOURCE: https://github.com/expo/expo/blob/main/tools/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n./bin/expotools COMMAND\n```\n\n----------------------------------------\n\nTITLE: Importing LocalAuthentication Module in JavaScript\nDESCRIPTION: This code snippet shows how to import the LocalAuthentication module from the expo-local-authentication package in a JavaScript file.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/local-authentication.mdx#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as LocalAuthentication from 'expo-local-authentication';\n```\n\n----------------------------------------\n\nTITLE: Using Switch Component with SwiftUI\nDESCRIPTION: This code snippet demonstrates how to use the `Switch` component from `@expo/ui/swift-ui`. It imports the `Switch` component and uses the `checked` and `onValueChange` props to manage the switch state. A label is provided for context.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/ui.mdx#_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Switch } from '@expo/ui/swift-ui';\n\n<Switch\n  checked={checked}\n  onValueChange={checked => {\n    setChecked(checked);\n  }}\n  label=\"Play music\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing Android APK\nDESCRIPTION: ADB command to install the downloaded Expo Go APK on a connected Android device\nSOURCE: https://github.com/expo/expo/blob/main/guides/Releasing Expo Go for Android.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nadb install {downloaded-apk}\n```\n\n----------------------------------------\n\nTITLE: Enabling Web Bundle Splitting Entry with Dynamic Import in JavaScript\nDESCRIPTION: This snippet (index.js) showcases how to trigger web bundle splitting with Expo CLI by dynamically importing ('./math') and logging the result. Relies on having '@expo/metro-runtime' installed and imported, and demonstrates splitting asynchronous dependencies into separate chunks in production. Required for Expo SDK 50 and web platform, the dynamic import output is a Promise resolving to the math module, which has the 'add' function. This code is optimized for environments where async chunk loading is supported.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/config/metro.mdx#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport '@expo/metro-runtime';\n\n// This will be split into a separate chunk.\nimport('./math').then(math => {\n  console.log(math.add(1, 2));\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Package Export in a Monorepo\nDESCRIPTION: This code creates a simple export in a local package within the monorepo. It defines a constant greeting that can be imported by other packages or apps in the workspace.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/monorepos.mdx#2025-04-22_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nexport const greeting = 'Hello!';\n```\n\n----------------------------------------\n\nTITLE: Basic JavaScript App Configuration\nDESCRIPTION: Converting app.json to app.config.js with basic configuration export.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/build-reference/variants.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  name: 'MyApp',\n  slug: 'my-app',\n  ios: {\n    bundleIdentifier: 'com.myapp',\n  },\n  android: {\n    package: 'com.myapp',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Installing CocoaPods dependencies for iOS\nDESCRIPTION: Command to install native code dependencies for expo-dev-client on iOS using pod-install.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/bare/install-dev-builds-in-bare.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npx pod-install\n```\n\n----------------------------------------\n\nTITLE: Configuring pnpm with hoisted node-linker\nDESCRIPTION: pnpm configuration for Expo projects. Sets node-linker to hoisted to ensure proper dependency management and compatibility with React Native.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/more/create-expo.mdx#2025-04-22_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\nnode-linker=hoisted\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Headers in Server Components\nDESCRIPTION: Shows how to access the request headers in Server Components using the expo-router/rsc/headers module. This API is server-only and cannot be used with build-time rendering.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/server-components.mdx#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { unstable_headers } from 'expo-router/rsc/headers';\n\nexport async function renderHome() {\n  const authorization = (await unstable_headers()).get('authorization');\n\n  return <Text>{authorization}</Text>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Audio Plugin in Expo Config\nDESCRIPTION: JSON configuration for expo-audio plugin in app.json, specifying microphone permission message for iOS.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/audio.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-audio\",\n        {\n          \"microphonePermission\": \"Allow $(PRODUCT_NAME) to access your microphone.\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing MediaLibrary Module\nDESCRIPTION: Example of importing the MediaLibrary module for use in a JavaScript or TypeScript file.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/media-library.mdx#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as MediaLibrary from 'expo-media-library';\n```\n\n----------------------------------------\n\nTITLE: Workspace Path for iOS Development\nDESCRIPTION: The path to the iOS workspace file for running the generator in Expo Go\nSOURCE: https://github.com/expo/expo/blob/main/guides/Generating Jest Mocks.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nios/Exponent.xcworkspace\n```\n\n----------------------------------------\n\nTITLE: Implementing Android WebView Component\nDESCRIPTION: Android implementation of WebView component with onLoad event handling using Kotlin. Creates a custom WebView that dispatches load events when pages finish loading.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/native-view-tutorial.mdx#2025-04-22_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\npackage expo.modules.webview\n\nimport android.content.Context\nimport android.webkit.WebView\nimport android.webkit.WebViewClient\nimport expo.modules.kotlin.AppContext\nimport expo.modules.kotlin.viewevent.EventDispatcher\nimport expo.modules.kotlin.views.ExpoView\n\nclass ExpoWebView(context: Context, appContext: AppContext) : ExpoView(context, appContext) {\n  private val onLoad by EventDispatcher()\n\n  internal val webView = WebView(context).also {\n    it.layoutParams = LayoutParams(\n      LayoutParams.MATCH_PARENT,\n      LayoutParams.MATCH_PARENT\n    )\n\n    it.webViewClient = object : WebViewClient() {\n      override fun onPageFinished(view: WebView, url: String) {\n        onLoad(mapOf(\"url\" to url))\n      }\n    }\n\n    addView(it)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Introducing New Impact Types in JavaScript\nDESCRIPTION: Added 'rigid' and 'soft' impact types for haptic feedback.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-haptics/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n- Introduce `rigid` and `soft` impact types ([#28169](https://github.com/expo/expo/pull/28169) by [@rodperottoni](https://github.com/rodperottoni))\n```\n\n----------------------------------------\n\nTITLE: Matrix Job Configuration with Path Filtering\nDESCRIPTION: Example of using path filters to dynamically configure matrix jobs based on which packages have changes.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-updates/e2e/setup/paths-filter/README.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  changes:\n    runs-on: ubuntu-latest\n    permissions:\n      pull-requests: read\n    outputs:\n      packages: ${{ steps.filter.outputs.changes }}\n    steps:\n    - uses: dorny/paths-filter@v3\n      id: filter\n      with:\n        filters: |\n          package1: src/package1\n          package2: src/package2\n\n  build:\n    needs: changes\n    strategy:\n      matrix:\n        package: ${{ fromJSON(needs.changes.outputs.packages) }}\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - ...\n```\n\n----------------------------------------\n\nTITLE: Rendering TemplateBareMinimumDiffViewer Component in JSX\nDESCRIPTION: This code renders the TemplateBareMinimumDiffViewer component that allows users to select from and to SDK versions to view the differences between them. The component provides a visual diff of the native project files that need to be updated.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/bare/upgrade.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<TemplateBareMinimumDiffViewer />\n```\n\n----------------------------------------\n\nTITLE: Importing BoxLink Component in JSX\nDESCRIPTION: This code snippet imports the BoxLink component from a local UI components directory. The BoxLink component is likely used to create clickable boxes for each EAS service in the introduction page.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nimport { BoxLink } from '~/ui/components/BoxLink';\n```\n\n----------------------------------------\n\nTITLE: Running EAS Build Command for iOS Production Build\nDESCRIPTION: Terminal command to create a production build for iOS using EAS Build. This command initiates the build process on EAS servers for iOS platform.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/deploy/build-project.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ eas build --platform ios\n```\n\n----------------------------------------\n\nTITLE: Importing Expo Manifests Package\nDESCRIPTION: Demonstrates how to import the expo-manifests package in a JavaScript/TypeScript application to access Expo manifest types and functionality.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/manifests.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Manifests from 'expo-manifests';\n```\n\n----------------------------------------\n\nTITLE: Migrating Config Plugin Imports in TypeScript\nDESCRIPTION: Updates import statements to use new paths for Expo config plugins and types.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-location/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { ConfigPlugin } from 'expo/config-plugins';\nimport { ExpoConfig } from 'expo/config';\n```\n\n----------------------------------------\n\nTITLE: Running Expo Documentation in Production Mode\nDESCRIPTION: Commands for exporting and serving the documentation in production mode.\nSOURCE: https://github.com/expo/expo/blob/main/docs/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nyarn run export\nyarn run export-server\n```\n\n----------------------------------------\n\nTITLE: Asset Import Usage with React Native Image Component\nDESCRIPTION: Demonstrates how to import and use assets with React Native's Image component. Assets are handled differently on native platforms (numeric ID) versus web/server platforms (URI object or string).\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/config/metro.mdx#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Image } from 'react-native';\n\nimport asset from './img.png';\n\nfunction Demo() {\n  return <Image source={asset} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AndroidManifest for expo-brightness\nDESCRIPTION: Adds the `WRITE_SETTINGS` permission to the **AndroidManifest.xml** file for Android. This permission is required if not using Continuous Native Generation (CNG) or manually managing a native Android project, allowing the application to modify system brightness settings.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/brightness.mdx#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"android.permission.WRITE_SETTINGS\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring React Helmet Async for Jest Testing in JavaScript\nDESCRIPTION: Shows how to configure react-helmet-async for use in Jest tests when emulating server-side rendering. This setting is necessary for tests to behave as expected in SSR scenarios.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-router/vendor/react-helmet-async/README.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { HelmetProvider } from 'react-helmet-async';\n\nHelmetProvider.canUseDOM = false;\n```\n\n----------------------------------------\n\nTITLE: Implementing dismissAll Action in Expo Router\nDESCRIPTION: Shows how to use the dismissAll action to return to the first screen in the stack, similar to React Navigation's popToTop action.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/advanced/stack.mdx#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button, View, Text } from 'react-native';\nimport { useRouter } from 'expo-router';\n\nexport default function Settings() {\n  const router = useRouter();\n\n  const handleDismissAll = () => {\n    router.dismissAll()\n  };\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Button title=\"Go to first screen\" onPress={handleDismissAll} />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing GithubIcon Component in JavaScript/TypeScript\nDESCRIPTION: Imports the `GithubIcon` component from the '@expo/styleguide-icons/custom/GithubIcon' package. This component is used within the documentation page UI, likely to display a GitHub icon for linking to resources like the custom server example.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/updates.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { GithubIcon } from '@expo/styleguide-icons/custom/GithubIcon';\n```\n\n----------------------------------------\n\nTITLE: Using Alt Text in Images\nDESCRIPTION: Illustrates how to add 'alt' text for images and videos in Markdown files to improve accessibility for visually impaired users. Alt text should be included in square brackets when embedding images or videos.\nSOURCE: https://github.com/expo/expo/blob/main/guides/Expo Documentation Writing Style Guide.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n![alt text](/path/to/img.jpg)\n```\n\n----------------------------------------\n\nTITLE: Importing Resource Components in JSX\nDESCRIPTION: React/JSX imports for talk data and a custom CollapsibleTalksGridWrapper component used to display various media resources.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/additional-resources/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { TALKS, PODCASTS, LIVE_STREAMS, YOUTUBE_VIDEOS } from '~/public/static/talks';\nimport { CollapsibleTalksGridWrapper } from '~/ui/components/CollapsibleTalksGridWrapper';\n```\n\n----------------------------------------\n\nTITLE: Importing RawH3 Component in JavaScript (React/JSX)\nDESCRIPTION: This snippet imports the `RawH3` component from the specified path `~/ui/components/Text`. It's used within a React/JSX context to render a level 3 heading element, presumably styled or handled specifically by the `RawH3` implementation. Requires the component to exist at the specified path within the project structure.\nSOURCE: https://github.com/expo/expo/blob/main/docs/scenes/get-started/start-developing/ProjectStructure/files/package-json.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { RawH3 } from '~/ui/components/Text';\n```\n\n----------------------------------------\n\nTITLE: Installing expo-image Package\nDESCRIPTION: Command to install the expo-image library for displaying images in the app.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/build-a-screen.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo install expo-image\n```\n\n----------------------------------------\n\nTITLE: Configuring EAS Project\nDESCRIPTION: This command creates an EAS configuration file (eas.json) in your project, which is used to configure builds.  It prompts you for various settings related to the build process.\nSOURCE: https://github.com/expo/expo/blob/main/docs/scenes/get-started/set-up-your-environment/instructions/iosPhysicalDevelopmentBuild.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ eas build:configure\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS App Group for Database Sharing\nDESCRIPTION: Shows the configuration needed in app.json for enabling database sharing between iOS apps and extensions.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/sqlite.mdx#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"ios\": {\n      \"bundleIdentifier\": \"com.myapp\",\n      \"entitlements\": {\n        \"com.apple.security.application-groups\": [\"group.com.myapp\"]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring .fingerprintignore for Expo Fingerprint\nDESCRIPTION: Provides an example `.fingerprintignore` file used to exclude specific files or directories from the fingerprint hash calculation. It uses `.gitignore`-like syntax with `minimatch` patterns to ignore the `/app/ios` folder but explicitly include `Podfile` and `Podfile.lock` within it.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/fingerprint.mdx#2025-04-22_snippet_2\n\nLANGUAGE: ignore\nCODE:\n```\n# Ignore the entire /app/ios folder\n/app/ios/**/*\n\n# But still keep /app/ios/Podfile and /app/ios/Podfile.lock\n!/app/ios/Podfile\n!/app/ios/Podfile.lock\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Localize Package\nDESCRIPTION: Installs the `react-native-localize` package using npm, which is a common step when incorporating third-party native libraries into a React Native project. This command adds the library and its dependencies to the project's `node_modules` directory and updates the `package.json` file. This command is run within the terminal.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/workflow/customizing.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install react-native-localize\n```\n\n----------------------------------------\n\nTITLE: Deprecated UpdatesController.initialize\nDESCRIPTION: Deprecated `UpdatesController.initialize(Context, Map)` and replaced with `UpdatesController.overrideConfiguration()` method to prevent ANR when overriding the `UpdatesConfiguration` on Android.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-updates/CHANGELOG.md#_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\nDeprecated `UpdatesController.initialize(Context, Map)` and replaced with `UpdatesController.overrideConfiguration()` method to prevent ANR when overriding the `UpdatesConfiguration` on Android.\n```\n\n----------------------------------------\n\nTITLE: Example Input for Babel HTML Elements Transformation\nDESCRIPTION: Sample React component using standard HTML elements that will be transformed by the Babel plugin.\nSOURCE: https://github.com/expo/expo/blob/main/packages/html-elements/README.md#2025-04-22_snippet_25\n\nLANGUAGE: js\nCODE:\n```\nexport default function Page() {\n  return (\n    <div>\n      <h1>Hello World</h1>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing ESLint via Yarn (Shell)\nDESCRIPTION: Adds the 'eslint' package as a development dependency via Yarn. ESLint is required as the linter engine for applying the Expo configuration and running linting tasks. Run this command after or alongside installing the Expo config.\nSOURCE: https://github.com/expo/expo/blob/main/packages/eslint-config-expo/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add --dev eslint\n```\n\n----------------------------------------\n\nTITLE: Using useNavigation Hook in Expo Router\nDESCRIPTION: Diff showing how to use the useNavigation hook in Expo Router to access navigation functions.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/migrate/from-react-navigation.mdx#2025-04-22_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n+ import { useNavigation } from 'expo-router';\n\nexport default function Page({\n+  const navigation = useNavigation();\n\n  return (\n    <Button onPress={navigation.navigate('screenName')}>\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Module Names\nDESCRIPTION: Naming conventions for CocoaPods and Java modules in the Expo ecosystem\nSOURCE: https://github.com/expo/expo/blob/main/guides/Creating Unimodules.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nexpo-module-name-something => EXModuleNameSomething    # CocoaPods\nexpo.modules.something                               # Java implementation module\norg.unimodules.interfaces.something                  # Java interface module\nexpo.adapters.something                             # Java platform adapter\nexpo.modules.scope.something                        # Java scoped module\n```\n\n----------------------------------------\n\nTITLE: Exporting TypeScript Type Declarations\nDESCRIPTION: Changed export syntax for TypeScript type declarations to use 'export type' instead of just 'export'.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-image-manipulator/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type SomeType = ...\n```\n\n----------------------------------------\n\nTITLE: Using Collapsible Component in Markdown\nDESCRIPTION: This snippet shows the usage of a Collapsible component in Markdown. It creates an expandable section that explains how automatic installation and launching of updates work in Expo Orbit.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/review/with-orbit.mdx#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<Collapsible summary=\"How does automatic installation and launching of updates work?\">\n\nWhen you launch an update, Orbit will look for the latest development build that matches the runtime version and target platform of the update. If a compatible build is found, the update will install automatically on the target device and launch with a deep link that points to the update.\n\nIf you don't have any development builds available, either because they have all expired, you haven't created one, you don't use EAS Build, or you are [building your app locally](/guides/local-app-development/), then Orbit will prompt you on how to proceed. Click **Launch with deep link** in the prompt to open the update if you already have a compatible development build installed on your target device.\n\n</Collapsible>\n```\n\n----------------------------------------\n\nTITLE: Adding RSC Test Script to package.json\nDESCRIPTION: Adds a script to package.json for running React Server Component tests using the custom Jest configuration.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/testing-rsc.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"test:rsc\": \"jest --config jest-rsc.config.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing MediaLibrary Module\nDESCRIPTION: This JavaScript snippet shows how to import the MediaLibrary module from the expo-media-library package for use in a React Native application.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/media-library.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as MediaLibrary from 'expo-media-library';\n```\n\n----------------------------------------\n\nTITLE: Creating Example App Component\nDESCRIPTION: React Native example app that demonstrates usage of the ExpoNativeConfiguration module.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/config-plugin-and-native-module-tutorial.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as ExpoNativeConfiguration from 'expo-native-configuration';\nimport { Text, View } from 'react-native';\n\nexport default function App() {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>API key: {ExpoNativeConfiguration.getApiKey()}</Text>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Expo Screen Orientation API\nDESCRIPTION: This JavaScript import statement is used to include the ScreenOrientation API from the expo-screen-orientation package. It enables access to various functions and properties that allow manipulation of screen orientation within an Expo project.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/screen-orientation.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as ScreenOrientation from 'expo-screen-orientation';\n```\n\n----------------------------------------\n\nTITLE: Importing Text Component in Markdown\nDESCRIPTION: Import statement for the Text component used in the markdown documentation.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/follow-up.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nimport { A } from '~/ui/components/Text';\n```\n\n----------------------------------------\n\nTITLE: Development Script Configuration in package.json\nDESCRIPTION: Adding a development script to package.json for running the app with the development environment variable\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/eas/multiple-app-variants.mdx#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"dev\": \"APP_VARIANT=development npx expo start\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering App Configuration Schema Table Using JSX\nDESCRIPTION: Uses a JSX component to render the application config schema table, passing the imported schema object as a property. Assumes an environment supporting JSX and the presence of the AppConfigSchemaTable component definition. This snippet is responsible for visually presenting the configuration schema to the end user.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/config/app.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<AppConfigSchemaTable schema={schema} />\n```\n\n----------------------------------------\n\nTITLE: Importing StoreReview Module\nDESCRIPTION: Basic import statement for the expo-store-review module.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/storereview.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as StoreReview from 'expo-store-review';\n```\n\n----------------------------------------\n\nTITLE: Creating Unimodule Command\nDESCRIPTION: Command line instruction to create a new unimodule in the Expo project directory\nSOURCE: https://github.com/expo/expo/blob/main/guides/Creating Unimodules.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\net create-unimodule --name <unimodule-name>\n```\n\n----------------------------------------\n\nTITLE: Incorrect Dynamic Environment Variable Access Prevention in JavaScript\nDESCRIPTION: Examples of incorrect code demonstrate the pitfalls of dynamic access to process.env variables, which can prevent Expo Metro from properly inlining environment values at build time.\nSOURCE: https://github.com/expo/expo/blob/main/packages/eslint-plugin-expo/docs/rules/no-dynamic-env-var.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n\nconst myVar = process.env[\"MY_VAR\"]\n\n\nconst dynamicVar = \"MY_VAR\";\nconst myVar = process.env[dynamicVar];\n\n```\n\n----------------------------------------\n\nTITLE: Importing Expo SDK Packages\nDESCRIPTION: Example of importing installed Expo SDK packages in JavaScript code\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { CameraView } from 'expo-camera';\nimport * as Contacts from 'expo-contacts';\nimport { Gyroscope } from 'expo-sensors';\n```\n\n----------------------------------------\n\nTITLE: Configuring URI Scheme in app.json\nDESCRIPTION: JSON configuration for setting up a custom URI scheme in a standalone Expo app to enable deep linking for authentication redirects.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/auth-session.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"scheme\": \"mycoolredirect\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example ImagePicker Result Log\nDESCRIPTION: Sample JSON response from the ImagePicker after an image is selected, showing the structure of the returned data including asset information.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/imagepicker.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"assets\": [\n    {\n      \"assetId\": \"C166F9F5-B5FE-4501-9531\",\n      \"base64\": null,\n      \"duration\": null,\n      \"exif\": null,\n      \"fileName\": \"IMG.HEIC\",\n      \"fileSize\": 6018901,\n      \"height\": 3025,\n      \"type\": \"image\",\n      \"uri\": \"file:///data/user/0/host.exp.exponent/cache/cropped1814158652.jpg\"\n      \"width\": 3024\n    }\n  ],\n  \"canceled\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TrackingTransparency Plugin in app.json\nDESCRIPTION: Example of how to configure the expo-tracking-transparency plugin in the app.json file. It sets the userTrackingPermission message for iOS.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/tracking-transparency.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-tracking-transparency\",\n        {\n          \"userTrackingPermission\": \"This identifier will be used to deliver personalized ads to you.\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MZGenre Utilities Constant\nDESCRIPTION: Defines the iOS app store genre constant for the Utilities category, likely used for app store submission or metadata.\nSOURCE: https://github.com/expo/expo/blob/main/fastlane/metadata/secondary_category.txt#2025-04-22_snippet_0\n\nLANGUAGE: objective-c\nCODE:\n```\nMZGenre.Utilities\n```\n\n----------------------------------------\n\nTITLE: Importing React Components in JSX\nDESCRIPTION: These import statements bring in custom UI components (ContentSpotlight and Tab/Tabs) from the Expo documentation UI library to be used in the billing management documentation page.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/billing/manage.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ContentSpotlight } from '~/ui/components/ContentSpotlight';\nimport { Tabs, Tab } from '~/ui/components/Tabs';\n```\n\n----------------------------------------\n\nTITLE: Expo SQLite API Refactoring\nDESCRIPTION: Refactoring of expo-sqlite/next API to be more React-idiomatic, with changes to import paths and default exports.\nSOURCE: https://github.com/expo/expo/blob/main/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Old imports\nimport SQLite from 'expo-sqlite'\n\n// New imports\nimport SQLite from 'expo-sqlite/legacy'\nimport { newSQLiteAPI } from 'expo-sqlite'\n```\n\n----------------------------------------\n\nTITLE: Importing Icons and Components in React/JSX\nDESCRIPTION: Import statements for various icons from Expo styleguide and custom UI components used in the documentation page.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/eas/next-steps.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { BuildIcon } from '@expo/styleguide-icons/custom/BuildIcon';\nimport { EasMetadataIcon } from '@expo/styleguide-icons/custom/EasMetadataIcon';\nimport { EasSubmitIcon } from '@expo/styleguide-icons/custom/EasSubmitIcon';\nimport { BookOpen02Icon } from '@expo/styleguide-icons/outline/BookOpen02Icon';\nimport { DataIcon } from '@expo/styleguide-icons/outline/DataIcon';\nimport { LayersTwo02Icon } from '@expo/styleguide-icons/outline/LayersTwo02Icon';\n\nimport { BoxLink } from '~/ui/components/BoxLink';\nimport { CODE } from '~/ui/components/Text';\n```\n\n----------------------------------------\n\nTITLE: Importing Config Type in fingerprint.config.js (Transitive Dependency)\nDESCRIPTION: Shows how to import the `Config` type for `fingerprint.config.js` when `@expo/fingerprint` is installed as a transitive dependency via the `expo` package. This is necessary for proper type checking using JSDoc.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/fingerprint.mdx#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n/** @type {import('expo/fingerprint').Config} */\n```\n\n----------------------------------------\n\nTITLE: Image Picker Implementation Example\nDESCRIPTION: Complete example of implementing image picking functionality using expo-image-picker, including UI components and handling selected images.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/imagepicker.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useState } from 'react';\nimport { Button, Image, View, StyleSheet } from 'react-native';\nimport * as ImagePicker from 'expo-image-picker';\n\nexport default function ImagePickerExample() {\n  const [image, setImage] = useState<string | null>(null);\n\n  const pickImage = async () => {\n    // No permissions request is necessary for launching the image library\n    let result = await ImagePicker.launchImageLibraryAsync({\n      mediaTypes: ImagePicker.MediaTypeOptions.All,\n      allowsEditing: true,\n      aspect: [4, 3],\n      quality: 1,\n    });\n\n    console.log(result);\n\n    if (!result.canceled) {\n      setImage(result.assets[0].uri);\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      <Button title=\"Pick an image from camera roll\" onPress={pickImage} />\n      {image && <Image source={{ uri: image }} style={styles.image} />}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  image: {\n    width: 200,\n    height: 200,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Service Worker in Expo Router HTML File\nDESCRIPTION: This code snippet shows how to create a root HTML file for an Expo Router app and add a service worker registration script. It includes the necessary meta tags and a script to register the service worker.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/migrate/from-expo-webpack.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ScrollViewStyleReset } from 'expo-router/html';\nimport type { PropsWithChildren } from 'react';\n\n// This file is web-only and used to configure the root HTML for every\n// web page during static rendering.\n// The contents of this function only run in Node.js environments and\n// do not have access to the DOM or browser APIs.\nexport default function Root({ children }: PropsWithChildren) {\n  return (\n    <html lang=\"en\">\n      <head>\n        <meta charSet=\"utf-8\" />\n        <meta httpEquiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\" />\n\n        {/* Bootstrap the service worker. */}\n        <script dangerouslySetInnerHTML={{ __html: sw }} />\n\n        {/*\n          Disable body scrolling on web. This makes ScrollView components work closer to how they do on native.\n          However, body scrolling is often nice to have for mobile web. If you want to enable it, remove this line.\n        */}\n        <ScrollViewStyleReset />\n\n        {/* Add any additional <head> elements that you want globally available on web... */}\n      </head>\n      <body>{children}</body>\n    </html>\n  );\n}\n\nconst sw = `\nif ('serviceWorker' in navigator) {\n    window.addEventListener('load', () => {\n        navigator.serviceWorker.register('/sw.js').then(registration => {\n            console.log('Service Worker registered with scope:', registration.scope);\n        }).catch(error => {\n            console.error('Service Worker registration failed:', error);\n        });\n    });\n}\n`;\n```\n\n----------------------------------------\n\nTITLE: Representing Boolean False\nDESCRIPTION: Represents the boolean value 'false'. In the context of @expo/image-utils, this value is returned by 'isAvailableAsync()' when 'sharp-cli' is unavailable or explicitly disabled via the 'EXPO_IMAGE_UTILS_NO_SHARP' environment variable.\nSOURCE: https://github.com/expo/expo/blob/main/packages/@expo/image-utils/README.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nfalse\n```\n\n----------------------------------------\n\nTITLE: Importing React Components in Markdown\nDESCRIPTION: Import statements for ContentSpotlight and Step components used in the documentation.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/ios-developer-mode.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nimport { ContentSpotlight } from '~/ui/components/ContentSpotlight';\nimport { Step } from '~/ui/components/Step';\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Code Variants with Tabs in MDX\nDESCRIPTION: This snippet shows how to use the Tabs and Tab components to display multiple code variants in documentation. It provides examples of functional and class components for comparison.\nSOURCE: https://github.com/expo/expo/blob/main/docs/README.md#2025-04-22_snippet_17\n\nLANGUAGE: mdx\nCODE:\n```\nimport { Tabs, Tab } from '~/ui/components/Tabs';\n\n<Tabs>\n<Tab label=\"Add 1 One Way\">\n    ```js\n    addOne = async x => {\n      /* @info This text will be shown onHover */\n      return x + 1;\n      /* @end */\n    };\n    ```\n</Tab>\n<Tab label=\"Add 1 Another Way\">\n    ```js\n    addOne = async x => {\n      /* @info This text will be shown onHover */\n      return x++;\n      /* @end */\n    };\n    ```\n</Tab>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Installing expo-haptics in bare React Native projects\nDESCRIPTION: Command to install the expo-haptics package using npx expo install.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-haptics/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-haptics\n```\n\n----------------------------------------\n\nTITLE: Importing Lottie Component in React Native\nDESCRIPTION: Basic import statement for the Lottie component from lottie-react-native package\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/lottie.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport LottieView from 'lottie-react-native';\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Yarn\nDESCRIPTION: These scripts provide commands for developers to run unit tests, lint, and check TypeScript definitions in the Expo SDK. This ensures code reliability and compliance with style and type conventions. Developers must have Yarn installed and the Expo environment set up.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn test  # This starts the test watcher\nyarn lint\nyarn tsc\n```\n\n----------------------------------------\n\nTITLE: Updating Module Import Syntax in TypeScript\nDESCRIPTION: Demonstrates the recommended change in import syntax for better dead code elimination, moving from destructured imports to namespace imports.\nSOURCE: https://github.com/expo/expo/blob/main/guides/Migrating Universal Modules to TypeScript.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- import { FileSystem } from 'expo-file-system';\n\n+ import * as FileSystem from 'expo-file-system';\n```\n\n----------------------------------------\n\nTITLE: Default CORS Headers Configuration in EAS Hosting\nDESCRIPTION: Default CORS response headers automatically applied by EAS Hosting when an API route doesn't handle OPTIONS requests. These headers enable permissive cross-origin access with credentials support.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/hosting/reference/responses-and-headers.mdx#2025-04-22_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nAccess-Control-Allow-Origin: <origin || '*'>\nAccess-Control-Allow-Headers: <access-control-request-headers || '*'>,\nAccess-Control-Allow-Methods: GET, POST, PUT, PATCH, DELETE\nAccess-Control-Allow-Credentials: true\nAccess-Control-Expose-Headers: *\nAccess-Control-Max-Age: 3600\nVary: Origin, Access-Control-Request-Headers\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind Content Paths\nDESCRIPTION: Tailwind configuration file that specifies which files should be processed for utility classes.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/config/metro.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\n    './app/**/*.{js,tsx,ts,jsx}',\n  ],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering H3 Heading Component\nDESCRIPTION: Renders a heading using the RawH3 component with 'Images' text content\nSOURCE: https://github.com/expo/expo/blob/main/docs/scenes/get-started/start-developing/TemplateFeatures/features/images.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<RawH3>Images</RawH3>\n```\n\n----------------------------------------\n\nTITLE: Implementing iOS App Lifecycle Delegate in Swift for Expo Modules\nDESCRIPTION: This Swift class extends ExpoAppDelegateSubscriber to handle app lifecycle events like becoming active, entering background, and terminating. It demonstrates how to implement various UIApplicationDelegate methods to respond to system events in an Expo module.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/appdelegate-subscribers.mdx#2025-04-22_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nimport ExpoModulesCore\n\npublic class AppLifecycleDelegate: ExpoAppDelegateSubscriber {\n  public func applicationDidBecomeActive(_ application: UIApplication) {\n    // The app has become active.\n  }\n\n  public func applicationWillResignActive(_ application: UIApplication) {\n    // The app is about to become inactive.\n  }\n\n  public func applicationDidEnterBackground(_ application: UIApplication) {\n    // The app is now in the background.\n  }\n\n  public func applicationWillEnterForeground(_ application: UIApplication) {\n    // The app is about to enter the foreground.\n  }\n\n  public func applicationWillTerminate(_ application: UIApplication) {\n    // The app is about to terminate.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building and Running Project Locally (Bash)\nDESCRIPTION: This command sequence builds and runs the test project for either iOS or Android. For iOS, 'npx pod-install' installs CocoaPods; 'npx expo run:<ios|android>' builds and launches the app in the simulator or emulator. Requires Expo CLI, relevant platform SDKs, and a configured test project.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-updates/e2e/README.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nnpx pod-install # if testing iOS\\nnpx expo run:<ios|android>\n```\n\n----------------------------------------\n\nTITLE: Markdown Format Examples\nDESCRIPTION: Example formatting patterns demonstrating correct and incorrect usage of markdown in Expo documentation\nSOURCE: https://github.com/expo/expo/blob/main/guides/Expo Documentation Writing Style Guide.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- Correct: Set the field named \"id\" to your project's ID.\n- Incorrect: Set the field named 'id' to your project's ID.\n\n- Correct: Android device/emulator\n- Incorrect: Android device / emulator\n\n- Correct: JavaScript has come a long way since it was originally written in 10 days.\n- Incorrect: JavaScript has come a long way, it was originally written in 10 days.\n\n- Correct: Workflow comparison\n- Incorrect: Workflow Comparison\n\n- Correct: Creating your first EAS build\n- Incorrect: Creating your first eas build\n```\n\n----------------------------------------\n\nTITLE: Importing the Gyroscope Module in JavaScript\nDESCRIPTION: A simple import statement showing how to import the Gyroscope module from the expo-sensors package for use in a JavaScript or React Native application.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/gyroscope.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { Gyroscope } from 'expo-sensors';\n```\n\n----------------------------------------\n\nTITLE: Importing StoreReview Module in JavaScript\nDESCRIPTION: This snippet shows how to import the StoreReview module from the expo-store-review package.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/storereview.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as StoreReview from 'expo-store-review';\n```\n\n----------------------------------------\n\nTITLE: Declaring Android Calendar Permissions in XML\nDESCRIPTION: This XML snippet needs to be added to the **android/app/src/main/AndroidManifest.xml** file for manual native Android projects (not using Continuous Native Generation). It declares the necessary permissions (`READ_CALENDAR` and `WRITE_CALENDAR`) required for the app to interact with the device's calendar.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/calendar.mdx#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"android.permission.READ_CALENDAR\" />\n<uses-permission android:name=\"android.permission.WRITE_CALENDAR\" />\n```\n\n----------------------------------------\n\nTITLE: Event Handling with Player.addListener Method\nDESCRIPTION: Demonstrates how to use the Player.addListener method to manually set up and clean up event listeners for the VideoPlayer.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/video.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// ...Imports, definition of the component, creating the player etc.\n\nuseEffect(() => {\n  const subscription = player.addListener('statusChange', ({ status, error }) => {\n    setPlayerStatus(status);\n    setPlayerError(error);\n    console.log('Player status changed: ', status);\n  });\n\n  return () => {\n    subscription.remove();\n  };\n}, []);\n// Rest of the component...\n```\n\n----------------------------------------\n\nTITLE: iOS Create Simulator Build Command\nDESCRIPTION: Fastlane command to create an iOS simulator build.\nSOURCE: https://github.com/expo/expo/blob/main/fastlane/README.md#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n[bundle exec] fastlane ios create_simulator_build\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-camera Plugin in app.json\nDESCRIPTION: JSON configuration for the expo-camera plugin in app.json to set permission messages and Android audio recording capabilities.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/camera-legacy.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-camera\",\n        {\n          \"cameraPermission\": \"Allow $(PRODUCT_NAME) to access your camera\",\n          \"microphonePermission\": \"Allow $(PRODUCT_NAME) to access your microphone\",\n          \"recordAudioAndroid\": true\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing registerRootComponent from Expo\nDESCRIPTION: Example of importing the registerRootComponent function from the expo package.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/register-root-component.mdx#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { registerRootComponent } from 'expo';\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Incorrect Environment Variable Usage in JavaScript for Expo\nDESCRIPTION: This snippet shows an incorrect way of accessing environment variables in Expo projects by destructuring process.env. This approach can break the inlining of environment variables at build time.\nSOURCE: https://github.com/expo/expo/blob/main/packages/eslint-plugin-expo/docs/rules/no-env-var-destructuring.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { MY_VAR } = process.env;\n```\n\n----------------------------------------\n\nTITLE: React Native Component Reference\nDESCRIPTION: Example of how the View component is referenced in React Native Screens documentation, showing the transition from plain View components to native screen primitives.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/screens.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<View>\n```\n\n----------------------------------------\n\nTITLE: Capturing a Full HD image using captureRef in React Native\nDESCRIPTION: This example demonstrates how to use captureRef to capture a Full HD (1080x1080) image of a view, taking into account the device's pixel ratio. It shows how to calculate the correct dimensions and set the options for the captureRef function.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/captureRef.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst targetPixelCount = 1080; // If you want full HD pictures\nconst pixelRatio = PixelRatio.get(); // The pixel ratio of the device\n// pixels * pixelRatio = targetPixelCount, so pixels = targetPixelCount / pixelRatio\nconst pixels = targetPixelCount / pixelRatio;\n\nconst result = await captureRef(this.imageContainer, {\n  result: 'tmpfile',\n  height: pixels,\n  width: pixels,\n  quality: 1,\n  format: 'png',\n});\n```\n\n----------------------------------------\n\nTITLE: Adding AAR Repository in build.gradle for SDK 51 and Below\nDESCRIPTION: Configures the flatDir repository in Android build.gradle to locate AAR files in the libs directory for SDK 51 and below.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/third-party-library.mdx#2025-04-22_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n  repositories {\n    mavenCentral()\n+   flatDir {\n+       dirs 'libs'\n+   }\n  }\n```\n\n----------------------------------------\n\nTITLE: Warning Block - EAS Metadata Preview Status\nDESCRIPTION: Markdown warning block indicating that EAS Metadata is in preview and subject to breaking changes.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/metadata/faq.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n> **warning** EAS Metadata is in preview and subject to breaking changes.\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-calendar plugin in app.json\nDESCRIPTION: Configuration example for the expo-calendar plugin in app.json, setting custom permission messages for calendar access.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/calendar.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-calendar\",\n        {\n          \"calendarPermission\": \"The app needs to access your calendar.\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Barometer from Expo-Sensors (JavaScript)\nDESCRIPTION: This minimal snippet demonstrates how to import the Barometer module from expo-sensors in JavaScript. It is a prerequisite for using barometer features in a React Native app. There are no parameters or logic; the output is an imported module that can be used elsewhere. Required dependency is expo-sensors.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/barometer.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Barometer } from 'expo-sensors';\n```\n\n----------------------------------------\n\nTITLE: Adding CircleCI Test Configuration\nDESCRIPTION: YAML configuration for adding module tests to CircleCI continuous integration pipeline.\nSOURCE: https://github.com/expo/expo/blob/main/guides/Migrating Universal Modules to TypeScript.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n- yarn:\n    command: test --maxWorkers 1\n    working_directory: ~/expo/packages/expo-sms\n```\n\n----------------------------------------\n\nTITLE: LinearProgress Component Usage (SwiftUI)\nDESCRIPTION: This code snippet demonstrates the usage of the LinearProgress component from the `@expo/ui/swift-ui` library. It takes a `progress` prop to set the progress value (between 0 and 1), and a `style` prop to set the width of the progress bar.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/ui.mdx#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LinearProgress } from '@expo/ui/swift-ui';\n\n<LinearProgress progress={0.5} style={{ width: 300 }} />\n```\n\n----------------------------------------\n\nTITLE: Displaying Changelog Entry in Markdown\nDESCRIPTION: This snippet shows the structure of a changelog entry for version 0.15.0, including the release date and a bullet point for changes made to the Android platform.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-json-utils/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.15.0 — 2025-04-04\n\n### 💡 Others\n\n- [Android] Started using expo modules gradle plugin. ([#34176](https://github.com/expo/expo/pull/34176) by [@lukmccall](https://github.com/lukmccall))\n```\n\n----------------------------------------\n\nTITLE: Setting Up Documentation Environment\nDESCRIPTION: Commands to set up and start the documentation development environment in the docs directory.\nSOURCE: https://github.com/expo/expo/blob/main/CONTRIBUTING.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Optimizing Initial Render with initialWindowMetrics\nDESCRIPTION: Shows how to optimize the initial render by providing initialWindowMetrics to the SafeAreaProvider.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/safe-area-context.mdx#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SafeAreaProvider, initialWindowMetrics } from 'react-native-safe-area-context';\n\nfunction App() {\n  return <SafeAreaProvider initialMetrics={initialWindowMetrics}>...</SafeAreaProvider>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MZGenre Productivity Constant - Objective-C\nDESCRIPTION: Constant definition specifying the Productivity genre type for iOS App Store categorization. This value helps classify apps under the Productivity category when submitting to the App Store.\nSOURCE: https://github.com/expo/expo/blob/main/fastlane/metadata/primary_category.txt#2025-04-22_snippet_0\n\nLANGUAGE: objectivec\nCODE:\n```\nMZGenre.Productivity\n```\n\n----------------------------------------\n\nTITLE: WebBrowser Configuration Options Example - Android\nDESCRIPTION: Example of WebBrowser configuration flags available on Android including createTask, secondaryToolbarColor, and enableDefaultShare for customizing the browser experience.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-web-browser/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  createTask: true, // Android flag for WebBrowser\n  secondaryToolbarColor: '#000000', // Android toolbar color\n  enableDefaultShare: true // Android sharing capability\n}\n```\n\n----------------------------------------\n\nTITLE: Using RawH3 Component in JSX\nDESCRIPTION: Demonstrates the usage of RawH3 component to render text with custom font styling in a React Native component.\nSOURCE: https://github.com/expo/expo/blob/main/docs/scenes/get-started/start-developing/TemplateFeatures/features/fonts.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<RawH3>Custom fonts</RawH3>\n```\n\n----------------------------------------\n\nTITLE: Displaying @expo/fingerprint CLI Help\nDESCRIPTION: Demonstrates how to view the command-line interface help for the `@expo/fingerprint` tool using `npx`. This command lists available options and commands for generating or managing project fingerprints.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/fingerprint.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npx @expo/fingerprint --help\n```\n\n----------------------------------------\n\nTITLE: Converting Images to WebP Format\nDESCRIPTION: Added support for converting images to WebP format on Android and iOS.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-image-manipulator/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\n// Code for WebP conversion\n```\n\n----------------------------------------\n\nTITLE: Specifying Asset Request Example Headers (HTTP/text)\nDESCRIPTION: Illustrates example HTTP headers that a conformant Expo client library should use when requesting assets from a server. These headers specify desired content types via 'accept' and supported encodings via 'accept-encoding' for efficient transfer. They are string-based headers intended for inclusion in HTTP GET requests, with their values adapted based on asset types and client capabilities; there are no programming dependencies, but correct integration requires compliance with HTTP standards and Expo asset protocols.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/technical-specs/expo-updates-1.mdx#2025-04-22_snippet_6\n\nLANGUAGE: text\nCODE:\n```\naccept: image/jpeg, */*\naccept-encoding: br, gzip\n```\n\n----------------------------------------\n\nTITLE: Manually Configuring UIBackgroundModes for iOS Background Location\nDESCRIPTION: XML configuration for adding the location background mode to iOS Expo.plist file to support background location updates when not using Continuous Native Generation.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/location.mdx#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<key>UIBackgroundModes</key>\n  <array>\n    <string>location</string>\n  </array>\n```\n\n----------------------------------------\n\nTITLE: Using Underscore Prefix for Module-internal Functions in JavaScript\nDESCRIPTION: Example showing how to use underscore prefixes for internal module functions to indicate that they're not meant to be used outside the module, improving code clarity.\nSOURCE: https://github.com/expo/expo/blob/main/guides/Expo JavaScript Style Guide.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// CORRECT\nexport default function prettyPrintAll(values) {\n  for (let value of values) {\n    _prettyPrint(value);\n  }\n}\n\nfunction _prettyPrint(value) { ... }\n```\n\n----------------------------------------\n\nTITLE: Importing Gesture Handler Package Reference\nDESCRIPTION: Example of the package name reference for the gesture handler library, demonstrating the canonical package identifier.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/gesture-handler.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nreact-native-gesture-handler\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry - iOS Fix for App Loader Registration\nDESCRIPTION: Code fix that improves the appLoaderRegisteredForName function to properly verify cached and current class names match when migrating from managed to bare workflows.\nSOURCE: https://github.com/expo/expo/blob/main/packages/unimodules-app-loader/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### 🐛 Bug fixes\n\n- Fixed `appLoaderRegisteredForName` to not only check if a loader class name is in the cache for the provided name but also verifies that the cached and current class name match. When migrating from managed to bare, the class name cache needs to be updated. ([#8292](https://github.com/expo/expo/pull/8292) by [@thorbenprimke](https://github.com/thorbenprimke))\n```\n\n----------------------------------------\n\nTITLE: Embedding PlatformsSection Component in Expo Documentation (JSX)\nDESCRIPTION: Uses the PlatformsSection component in JSX to display platform compatibility icons or information for Android, iOS, emulator/simulator, and web targets. This section visually communicates which platforms the FlashList library supports. Requires the PlatformsSection component from the plugins directory and a doc site capable of processing JSX.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/flash-list.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<PlatformsSection android emulator ios simulator web />\n```\n\n----------------------------------------\n\nTITLE: Building and Testing iOS E2E\nDESCRIPTION: Commands for bundling, installing pods, building and running E2E tests for iOS platform. Requires iPhone 14 simulator with iOS 16.4.\nSOURCE: https://github.com/expo/expo/blob/main/apps/expo-go/modules/@react-native-async-storage/async-storage/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn bundle:ios\npod install --project-directory=example/ios\nyarn build:e2e:ios\nyarn test:e2e:ios\n```\n\n----------------------------------------\n\nTITLE: Ignoring Files with .fingerprintignore Pattern Example\nDESCRIPTION: Example of pattern usage in .fingerprintignore file to exclude specific folders while keeping certain files from being excluded in the fingerprint calculation process.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/fingerprint.mdx#2025-04-22_snippet_0\n\nLANGUAGE: ignore\nCODE:\n```\n# Ignore the entire /app/ios folder\n/app/ios/**/*\n\n# But still keep /app/ios/Podfile and /app/ios/Podfile.lock\n!/app/ios/Podfile\n!/app/ios/Podfile.lock\n```\n\n----------------------------------------\n\nTITLE: Importing from expo-font\nDESCRIPTION: Shows the import statement for using the Font module from expo-font package in a JavaScript application.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/font.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Font from 'expo-font';\n```\n\n----------------------------------------\n\nTITLE: Importing and Using RawH3 Component in React Native\nDESCRIPTION: Demonstrates the import and usage of a RawH3 component from the UI components library to display section headers with theming support.\nSOURCE: https://github.com/expo/expo/blob/main/docs/scenes/get-started/start-developing/ProjectStructure/files/components.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport { RawH3 } from '~/ui/components/Text';\n\n<RawH3>components</RawH3>\n```\n\n----------------------------------------\n\nTITLE: Server Template for Prioritized SEO Tags in HTML\nDESCRIPTION: Shows how to structure the server template to properly render prioritized SEO tags when using react-helmet-async. This ensures that important SEO-related tags appear earlier in the document head.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-router/vendor/react-helmet-async/README.md#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <head>\n    ${helmet.title.toString()}\n    ${helmet.priority.toString()}\n    ${helmet.meta.toString()}\n    ${helmet.link.toString()}\n    ${helmet.script.toString()}\n  </head>\n  ...\n</html>\n```\n\n----------------------------------------\n\nTITLE: Importing StoreReview Module in JavaScript\nDESCRIPTION: This snippet shows how to import the StoreReview module from the expo-store-review package.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/storereview.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as StoreReview from 'expo-store-review';\n```\n\n----------------------------------------\n\nTITLE: Updating Dev Tools Plugin Index for Production in TypeScript\nDESCRIPTION: This diff snippet shows how to update the index file of a dev tools plugin to provide no-op functions when the app is not running in debug mode.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/debugging/create-devtools-plugins.mdx#2025-04-22_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\nif (process.env.NODE_ENV !== 'production') {\n  useMyDevToolsPlugin = require('./useMyDevToolsPlugin').useMyDevToolsPlugin;\n} else {\n  useMyDevToolsPlugin = () => ({\n+    sendPing: () => {},\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering BoxLink Component for Plans Section in React\nDESCRIPTION: This code snippet demonstrates the use of the BoxLink component to create navigation links to pages about EAS plans and subscriptions. The component takes title, description, href, and Icon props to generate styled navigation boxes.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/billing/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<BoxLink\n  title=\"Subscriptions, plans, and add-ons\"\n  description=\"In-depth guide on available Expo Application Services (EAS) plans and how they work, usage-based pricing, and add-ons.\"\n  href=\"/billing/plans/\"\n  Icon={CreditCard02Icon}\n/>\n\n<BoxLink\n  title=\"Manage plans\"\n  description=\"Learn how to update, downgrade, or cancel your Expo account's plan.\"\n  href=\"/billing/manage/#manage-plans\"\n  Icon={CreditCard02Icon}\n/>\n```\n\n----------------------------------------\n\nTITLE: Introducing expo-json-utils Package in Markdown\nDESCRIPTION: This markdown snippet introduces the expo-json-utils package, explaining its purpose for handling JSON objects in React Native and Expo apps. It also provides a link to the contributing guide for potential contributors.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-json-utils/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# expo-json-utils\n\nUtilities for reading JSONObjects (Android) and NSDictionaries (iOS) for React Native and Expo apps.\n\n## Contributing\n\nContributions are very welcome! Please refer to guidelines described in the [contributing guide](https://github.com/expo/expo#contributing).\n```\n\n----------------------------------------\n\nTITLE: Recursive Optimization Function Example\nDESCRIPTION: Illustrates how Expo's tree shaking recursively optimizes code by analyzing function dependencies. Functions that are unused will be removed, and the process repeats to find further optimization opportunities.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/tree-shaking.mdx#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nexport function foo() {\n  // Because bar is used here, it cannot be removed.\n  bar();\n}\n\nexport function bar() {}\n```\n\n----------------------------------------\n\nTITLE: Running the Expo CLI\nDESCRIPTION: This command executes the Expo CLI using `npx`, which ensures the locally installed version within the project is used. It's the standard way to invoke Expo CLI commands like `start`, `prebuild`, `install`, etc.\nSOURCE: https://github.com/expo/expo/blob/main/packages/@expo/cli/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx expo\n```\n\n----------------------------------------\n\nTITLE: Importing expo-cellular in JavaScript\nDESCRIPTION: This code snippet shows how to import the Cellular module from the expo-cellular package in a JavaScript file.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/cellular.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Cellular from 'expo-cellular';\n```\n\n----------------------------------------\n\nTITLE: Updating Android Build Configuration in Gradle\nDESCRIPTION: This change updates the Android build configuration, bumping compileSdkVersion and targetSdkVersion to 31, and Java version to 11. It was implemented in version 13.1.0.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-constants/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: Gradle\nCODE:\n```\nandroid {\n  compileSdkVersion 31\n  targetSdkVersion 31\n}\n\njava {\n  sourceCompatibility = JavaVersion.VERSION_11\n  targetCompatibility = JavaVersion.VERSION_11\n}\n```\n\n----------------------------------------\n\nTITLE: Improved NVM Sourcing in iOS Shell Scripts\nDESCRIPTION: This update improves support for NVM (Node Version Manager) sourcing in iOS shell scripts. It was added as a bug fix in version 13.2.0.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-constants/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n# Improved nvm sourcing in iOS shell scripts\n```\n\n----------------------------------------\n\nTITLE: Installing iOS Pod Dependencies\nDESCRIPTION: This command installs the necessary native iOS dependencies (CocoaPods) for the `expo-speech` package in a bare React Native project. It should be run from the `ios` directory of the project after the npm package has been installed.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-speech/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx pod-install\n```\n\n----------------------------------------\n\nTITLE: Installing SegmentedControl Package in React Native\nDESCRIPTION: This code snippet shows how to install the SegmentedControl package using a custom APIInstallSection component. It provides a link to the official installation instructions.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/segmented-control.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<APIInstallSection href=\"https://github.com/react-native-segmented-control/segmented-control#getting-started\" />\n```\n\n----------------------------------------\n\nTITLE: Cleaning Android Project\nDESCRIPTION: Troubleshooting command to clean the Android project before building it. This removes build artifacts that might cause issues.\nSOURCE: https://github.com/expo/expo/blob/main/apps/expo-go/README.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew clean\n```\n\n----------------------------------------\n\nTITLE: Button Component Usage (Jetpack Compose)\nDESCRIPTION: This code snippet demonstrates how to use the Button component from the `@expo/ui/jetpack-compose` library.  The `onPress` prop is used to define the action to be performed when the button is pressed, in this case setting `editingProfile` to true. The style prop is set to `{ flex: 1 }` to have the button take up available space.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/ui.mdx#_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from '@expo/ui/jetpack-compose';\n\n<Button\n  style={{ flex: 1 }}\n  onPress={() => {\n    setEditingProfile(true);\n  }}> Edit profile </Button>\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint Legacy Format\nDESCRIPTION: Basic ESLint configuration file that extends the Expo configuration for SDK 50 and below.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/using-eslint.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  extends: 'expo',\n};\n```\n\n----------------------------------------\n\nTITLE: EAS Build Apple Account Login Prompt\nDESCRIPTION: Terminal interaction showing the Apple account login prompt during EAS build process and the response when skipping login. Used by team developers without Apple Developer account access.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/app-signing/apple-developer-program-roles-and-permissions.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n? Do you want to log in to your Apple account? > (Y/n)\n\nNo problem! 👌 If any of the next steps will require Apple account access we will ask you again about it.\n```\n\n----------------------------------------\n\nTITLE: Importing TaskManager Module\nDESCRIPTION: Example of importing the TaskManager module from expo-task-manager package. This is the standard import statement required to use the TaskManager API in an Expo application.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/task-manager.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport * as TaskManager from 'expo-task-manager';\n```\n\n----------------------------------------\n\nTITLE: Modifying Welcome Text in Expo App\nDESCRIPTION: Example code diff showing how to modify the welcome text in the main app screen from 'Welcome!' to 'Hello World!'.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/get-started/start-developing.mdx#2025-04-22_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\ndiff --git a/app/(tabs)/index.tsx b/app/(tabs)/index.tsx\nindex 45cfa0e..4d1b384 100644\n--- a/app/(tabs)/index.tsx\n+++ b/app/(tabs)/index.tsx\n@@ -17,7 +17,7 @@ export default function HomeScreen() {\n       }\n     >\n       <ThemedView style={styles.titleContainer}>\n-        <ThemedText type=\"title\">Welcome!</ThemedText>\n+        <ThemedText type=\"title\">Hello World!</ThemedText>\n         <HelloWave />\n       </ThemedView>\n       <ThemedView style={styles.stepContainer}>\n \n```\n\n----------------------------------------\n\nTITLE: Installing patch-project using Expo CLI\nDESCRIPTION: Command to install the patch-project package using npx expo install\nSOURCE: https://github.com/expo/expo/blob/main/packages/patch-project/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ npx expo install patch-project\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Structure\nDESCRIPTION: Markdown documentation that outlines the installation and basic information about the Async Storage package.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/async-storage.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: '@react-native-async-storage/async-storage'\ndescription: A library that provides an asynchronous, unencrypted, persistent, key-value storage API.\nsourceCodeUrl: 'https://github.com/react-native-async-storage/async-storage'\npackageName: '@react-native-async-storage/async-storage'\nplatforms: ['android', 'ios', 'tvos', 'macos', 'web']\ninExpoGo: true\n---\n```\n\n----------------------------------------\n\nTITLE: Importing Accelerometer module from expo-sensors\nDESCRIPTION: This snippet shows how to import the Accelerometer module from the expo-sensors package. This import is necessary to use the Accelerometer functionality in an Expo application.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/accelerometer.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { Accelerometer } from 'expo-sensors';\n```\n\n----------------------------------------\n\nTITLE: TextInput Component Usage (Jetpack Compose)\nDESCRIPTION: This code snippet demonstrates the usage of the TextInput component from the `@expo/ui/jetpack-compose` library. It sets `autocorrection` to false, provides a `defaultValue`, and updates the state `value` using the `onChangeText` prop.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/ui.mdx#_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TextInput } from '@expo/ui/jetpack-compose';\n\n<TextInput autocorrection={false} defaultValue=\"A single line text input\" onChangeText={setValue} />\n```\n\n----------------------------------------\n\nTITLE: Importing Schema and Component for Expo App Configuration Reference\nDESCRIPTION: This code imports a JSON schema file containing Expo app configuration properties and a custom React component to display the schema as a table. The schema represents available properties for app.json or app.config files in Expo projects.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/config/app.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport schema from '~/public/static/schemas/v51.0.0/app-config-schema.json';\nimport AppConfigSchemaTable from '~/ui/components/AppConfigSchemaTable';\n```\n\n----------------------------------------\n\nTITLE: Rendering BoxLink Components in JSX for Expo Documentation\nDESCRIPTION: This code snippet demonstrates the use of BoxLink components to create interactive links in the Expo documentation. It imports an icon and the BoxLink component, then renders two BoxLink elements with titles, descriptions, icons, and hrefs.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/third-party-overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { BookOpen02Icon } from '@expo/styleguide-icons/outline/BookOpen02Icon';\n\nimport { BoxLink } from '~/ui/components/BoxLink';\n\n<BoxLink\n  title=\"Using other third-party libraries\"\n  description=\"Learn how to use other third-party npm libraries in your project.\"\n  Icon={BookOpen02Icon}\n  href=\"/workflow/using-libraries/#third-party-libraries\"\n/>\n\n<BoxLink\n  title=\"Introduction to development builds\"\n  description=\"Learn why use development builds, and how to get started.\"\n  Icon={BookOpen02Icon}\n  href=\"/develop/development-builds/introduction/\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Icons in React Component\nDESCRIPTION: Demonstrates importing a Book icon from Expo's styleguide icon package for use in documentation navigation.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/next-steps.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { BookOpen02Icon } from '@expo/styleguide-icons/outline/BookOpen02Icon';\n```\n\n----------------------------------------\n\nTITLE: Implementing Barometer Sensor in React Native with Expo\nDESCRIPTION: This code snippet demonstrates how to use the Barometer sensor in a React Native application using Expo. It shows how to subscribe to barometer updates, display pressure and relative altitude data, and toggle the listener.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/barometer.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View, Platform } from 'react-native';\nimport { Barometer } from 'expo-sensors';\n\nexport default function App() {\n  const [{ pressure, relativeAltitude }, setData] = useState({ pressure: 0, relativeAltitude: 0 });\n  const [subscription, setSubscription] = useState(null);\n\n  const toggleListener = () => {\n    subscription ? unsubscribe() : subscribe();\n  };\n\n  const subscribe = () => {\n    setSubscription(Barometer.addListener(setData));\n  };\n\n  const unsubscribe = () => {\n    subscription && subscription.remove();\n    setSubscription(null);\n  };\n\n  return (\n    <View style={styles.wrapper}>\n      <Text>Barometer: Listener {subscription ? 'ACTIVE' : 'INACTIVE'}</Text>\n      <Text>Pressure: {pressure} hPa</Text>\n      <Text>\n        Relative Altitude:{' '}\n        {Platform.OS === 'ios' ? `${relativeAltitude} m` : `Only available on iOS`}\n      </Text>\n      <TouchableOpacity onPress={toggleListener} style={styles.button}>\n        <Text>Toggle listener</Text>\n      </TouchableOpacity>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  button: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#eee',\n    padding: 10,\n    marginTop: 15,\n  },\n  wrapper: {\n    flex: 1,\n    alignItems: 'stretch',\n    justifyContent: 'center',\n    paddingHorizontal: 20,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring and Initializing Expo E2E Test Environment (Bash)\nDESCRIPTION: This bash script sets up environment variables necessary for Expo E2E testing, clears previous build directories, and initializes a new working directory. Dependencies include Bash shell, standard Unix utilities (rm, mkdir). Key parameters are EXPO_REPO_ROOT and WORKING_DIR_ROOT. Inputs are path locations; outputs are environment variables and a cleaned directory. Ensure variables are customized to local paths and have suitable permissions.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-updates/e2e/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# The location of your local copy of this repo\\nexport EXPO_REPO_ROOT=/Users/me/myCode/expo\\n# The name of a directory that the test project can live under\\nexport WORKING_DIR_ROOT=/Users/me/myCode/e2eworking\\n# Other environment variables needed for the test setup\\nexport TEST_PROJECT_ROOT=$WORKING_DIR_ROOT/updates-e2e\\nexport UPDATES_HOST=localhost\\nexport UPDATES_PORT=4747\\nexport EX_UPDATES_NATIVE_DEBUG=1\\n\\n# Remove and recreate the working directory before executing the setup\\nrm -rf $WORKING_DIR_ROOT\\nmkdir $WORKING_DIR_ROOT\n```\n\n----------------------------------------\n\nTITLE: Package Import Statement in Markdown\nDESCRIPTION: Package reference for the Skia graphics library implementation in React Native.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/skia.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@shopify/react-native-skia\n```\n\n----------------------------------------\n\nTITLE: Streaming Fetch using Expo Fetch API\nDESCRIPTION: This snippet uses the `expo/fetch` API to perform a streaming fetch request. It demonstrates how to read data from a stream using a reader and collect the chunks of data. The API provides compatibility across web and mobile platforms, ensuring a consistent fetch operation.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/expo.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { fetch } from 'expo/fetch';\n\nconst resp = await fetch('https://httpbin.org/drip?numbytes=512&duration=2', {\n  headers: { Accept: 'text/event-stream' },\n});\nconst reader = resp.body.getReader();\nconst chunks = [];\nwhile (true) {\n  const { done, value } = await reader.read();\n  if (done) {\n    break;\n  }\n  chunks.push(value);\n}\nconst buffer = new Uint8Array(chunks.reduce((acc, chunk) => acc + chunk.length, 0));\nconsole.log(buffer.length); // 512\n```\n\n----------------------------------------\n\nTITLE: Android Child View Management\nDESCRIPTION: Collection of functions for managing child views in an Android ViewGroup, including adding, removing, and accessing child views.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/modules/module-api.mdx#2025-04-22_snippet_23\n\nLANGUAGE: kotlin\nCODE:\n```\nAddChildView { parent, child: View, index ->\n  parent.addView(child, index)\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nGetChildCount { parent ->\n  return@GetChildCount parent.childCount\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nGetChildViewAt { parent, index ->\n  parent.getChildAt(index)\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nRemoveChildView { parent, child: View ->\n  parent.removeView(child)\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nRemoveChildViewAt { parent, index ->\n  parent.removeViewAt(child)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Home Layout for Grouped Routes in Expo Router (TypeScript)\nDESCRIPTION: This snippet defines a HomeLayout component that implements stack navigation for a group of related routes. It sets up screen options for the stack navigator within the (home) group.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/file-based-routing.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Stack } from 'expo-router';\n\nexport default function HomeLayout() {\n  return (\n    <Stack\n      screenOptions={{\n        headerStyle: {\n          backgroundColor: '#f4511e',\n        },\n        headerTintColor: '#fff',\n        headerTitleStyle: {\n          fontWeight: 'bold',\n        },\n      }}>\n      <Stack.Screen name=\"index\" />\n      <Stack.Screen name=\"details\" />\n    </Stack>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Text Component from UI Library\nDESCRIPTION: Imports the RawH3 text component from the project's UI component library\nSOURCE: https://github.com/expo/expo/blob/main/docs/scenes/get-started/start-developing/TemplateFeatures/features/images.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { RawH3 } from '~/ui/components/Text';\n```\n\n----------------------------------------\n\nTITLE: Configuring Project Checkout with eas/checkout in YAML\nDESCRIPTION: Uses the eas/checkout function to fetch project source files and then lists contents of the assets directory.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: List files\n  steps:\n    - eas/checkout\n    - run:\n        name: List assets\n        run: ls assets\n```\n\n----------------------------------------\n\nTITLE: Asset Usage in API Routes\nDESCRIPTION: Shows how to handle asset imports in API routes, specifically fetching image data using the asset's URI and returning it as a response.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/config/metro.mdx#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport asset from './img.png';\n\nexport async function GET(req: Request) {\n  const ImageData = await fetch(\n    new URL(\n      // Access the asset URI.\n      asset.uri,\n      // Append to the current request URL origin.\n      req.url\n    )\n  ).then(res => res.arrayBuffer());\n\n  return new Response(ImageData, {\n    headers: {\n      'Content-Type': 'image/png',\n    },\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Fabric Library Build in CMake for Expo Project\nDESCRIPTION: Sets up the Fabric library build, including source files, compiler options, and dependencies. It handles different versions of ReactAndroid and configures the necessary include directories and linked libraries.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-modules-core/android/src/fabric/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Copyright 2018-present 650 Industries. All rights reserved.\n\nset(COMMON_FABRIC_DIR ${COMMON_DIR}/fabric)\nfile(GLOB SOURCES \"*.cpp\")\nfile(GLOB COMMON_FABRIC_SOURCES \"${COMMON_FABRIC_DIR}/*.cpp\")\n\nadd_library(fabric STATIC\n  ${COMMON_FABRIC_SOURCES}\n  ${SOURCES}\n)\n\ninclude(\"${REACT_NATIVE_DIR}/ReactAndroid/cmake-utils/folly-flags.cmake\")\n\ntarget_compile_options(fabric PRIVATE\n  \"-std=c++20\"\n  ${folly_FLAGS}\n)\n\nfind_package(ReactAndroid REQUIRED CONFIG)\n\nfind_package(fbjni REQUIRED CONFIG)\n\nif (ReactAndroid_VERSION_MINOR GREATER_EQUAL 76)\n  get_target_property(INCLUDE_fabricjni\n        ReactAndroid::reactnative\n        INTERFACE_INCLUDE_DIRECTORIES)\nelse()\n  get_target_property(INCLUDE_fabricjni\n        ReactAndroid::fabricjni\n        INTERFACE_INCLUDE_DIRECTORIES)\nendif()\n\ntarget_include_directories(fabric PRIVATE\n  \"${REACT_NATIVE_DIR}/ReactCommon\"\n  \"${COMMON_FABRIC_DIR}\"\n  \"${INCLUDE_fabricjni}/react/fabric\"\n)\n\ntarget_link_libraries(fabric\n  CommonSettings\n  fbjni::fbjni\n  ReactAndroid::jsi\n)\n\nif (ReactAndroid_VERSION_MINOR GREATER_EQUAL 76)\n   target_link_libraries(fabric ReactAndroid::reactnative)\nelse()\n  target_link_libraries(fabric\n    ReactAndroid::fabricjni\n    ReactAndroid::folly_runtime\n    ReactAndroid::glog\n    ReactAndroid::react_debug\n    ReactAndroid::react_render_componentregistry\n    ReactAndroid::react_render_core\n    ReactAndroid::react_render_debug\n    ReactAndroid::react_render_graphics\n    ReactAndroid::react_render_mapbuffer\n    ReactAndroid::react_utils\n    ReactAndroid::rrc_view\n    ReactAndroid::runtimeexecutor\n    ReactAndroid::yoga\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: JavaScript Runtime Globals Support Table\nDESCRIPTION: Markdown table documenting the support status and implementation details of various JavaScript runtime globals in the Expo environment. Covers process-related globals, utility functions, and core JavaScript features.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/hosting/reference/worker-runtime.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| JavaScript runtime globals | Supported     | Implementation notes                                                                                                          |\n| -------------------------- | ------------- | ----------------------------------------------------------------------------------------------------------------------------- |\n| `process`                  | <YesIcon />   |                                                                                                                               |\n| `process.env`              | <YesIcon />   | Populated with EAS Hosting environment variables                                                                              |\n| `process.stdout`           | <YesIcon />   | Will redirect output to the Console API (`console.log`) for logging                                                           |\n| `process.stderr`           | <YesIcon />   | Will redirect output to the Console API (`console.error`) for logging                                                         |\n| `setImmediate`             | <YesIcon />   |                                                                                                                               |\n| `clearImmediate`           | <YesIcon />   |                                                                                                                               |\n| `Buffer`                   | <YesIcon />   | Set to `Buffer` from `node:buffer`                                                                                            |\n| `EventEmitter`             | <YesIcon />   | Set to `EventEmitter` from `node:events`                                                                                      |\n| `global`                   | <YesIcon />   | Set to `globalThis`                                                                                                           |\n| `WeakRef`                  | <YesIcon />   | Shim that resets references after each request                                                                                |\n| `FinalizationRegistry`     | <NoIcon />    | Garbage collection is not observable within workers                                                                           |\n| `require`                  | <AlertIcon /> | External requires are supported but limited to deployed JS files and built-in modules. Node module resolution is unsupported. |\n| `require.cache`            | <NoIcon />    |                                                                                                                               |\n```\n\n----------------------------------------\n\nTITLE: Installing Expo Dependencies\nDESCRIPTION: Command to install all required npm dependencies for the Expo project.\nSOURCE: https://github.com/expo/expo/blob/main/templates/expo-template-default/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Secure Store Biometric Authentication Check\nDESCRIPTION: New function to check if biometric authentication can be used with secure store.\nSOURCE: https://github.com/expo/expo/blob/main/CHANGELOG.md#2025-04-22_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\ncanUseBiometricAuthentication()\n```\n\n----------------------------------------\n\nTITLE: Nuclear Cleaning Option with Git\nDESCRIPTION: Advanced troubleshooting command that removes all untracked files in the repository and submodules. Requires re-running setup scripts afterward.\nSOURCE: https://github.com/expo/expo/blob/main/apps/expo-go/README.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngit submodule foreach --recursive git clean -xfd\n```\n\n----------------------------------------\n\nTITLE: Image Picker Media Type Options Update\nDESCRIPTION: Deprecation of ImagePicker.MediaTypeOptions enum in favor of direct MediaType values or arrays.\nSOURCE: https://github.com/expo/expo/blob/main/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Deprecated\nImagePicker.MediaTypeOptions\n\n// New usage\nMediaType | MediaType[]\n```\n\n----------------------------------------\n\nTITLE: Configuring Android SDK and NDK paths in local.properties\nDESCRIPTION: Example configuration for the local.properties file that points to the Android SDK and NDK installations on the developer's machine. This file is required for building and publishing the library.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-dev-launcher/android/README.md#2025-04-22_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nndk.dir=/Users/{username}/Library/Android/sdk/ndk-bundle\nsdk.dir=/Users/{username}/Library/Android/sdk\n```\n\n----------------------------------------\n\nTITLE: Formatting Matrix with Prettier Ignore\nDESCRIPTION: Example showing how to preserve custom matrix formatting by using prettier-ignore comment\nSOURCE: https://github.com/expo/expo/blob/main/guides/Expo JavaScript Style Guide.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// prettier-ignore\nlet matrix = [\n  -c,  1,  1,\n    1, -c,  1,\n    1,  1, -c,\n];\n```\n\n----------------------------------------\n\nTITLE: TextInput Component Usage (SwiftUI)\nDESCRIPTION: This code snippet demonstrates the usage of the TextInput component from the `@expo/ui/swift-ui` library. It sets `autocorrection` to false, provides a `defaultValue`, and updates the state `value` using the `onChangeText` prop.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/ui.mdx#_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TextInput } from '@expo/ui/swift-ui';\n\n<TextInput autocorrection={false} defaultValue=\"A single line text input\" onChangeText={setValue} />\n```\n\n----------------------------------------\n\nTITLE: Configuring and Using FaceDetector with Camera in React Native\nDESCRIPTION: This snippet demonstrates how to use the expo-face-detector module with the Camera component to detect faces in real-time. It configures the face detector settings and handles the detected faces.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/facedetector.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Camera } from 'expo-camera';\nimport * as FaceDetector from 'expo-face-detector';\n\nconst App = () => (\n  <Camera\n    // other props\n    onFacesDetected={handleFacesDetected}\n    faceDetectorSettings={{\n      mode: FaceDetector.FaceDetectorMode.fast,\n      detectLandmarks: FaceDetector.FaceDetectorLandmarks.none,\n      runClassifications: FaceDetector.FaceDetectorClassifications.none,\n      minDetectionInterval: 100,\n      tracking: true,\n    }}\n  />\n);\n\nconst handleFacesDetected = ({ faces }) => {\n  console.log(faces);\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Extracting Public Key Modulus using OpenSSL in Shell\nDESCRIPTION: This shell command uses OpenSSL to extract and display the public key modulus from an X.509 certificate file (`certificate.cer`). The `-modulus` option prints the modulus, and `-noout` prevents printing the encoded certificate.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-updates/ios/EXUpdates/ASN1Decoder/README.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nopenssl x509 -modulus -noout < certificate.cer\n```\n\n----------------------------------------\n\nTITLE: iOS Capability Entitlement Strings Reference Table\nDESCRIPTION: Markdown table listing supported iOS capabilities and their corresponding entitlement string identifiers that EAS Build can enable automatically. Each entry includes the capability name and its associated Apple developer entitlement string.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/build-reference/ios-capabilities.mdx#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Support     | Capability                                        | Entitlement string                                                                                               |\n| ----------- | ------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------- |\n| <YesIcon /> | Access Wi-Fi Information                          | `com.apple.developer.networking.wifi-info`                                                                       |\n| <YesIcon /> | App Attest                                        | `com.apple.developer.devicecheck.appattest-environment`                                                          |\n| <YesIcon /> | App Groups                                        | `com.apple.security.application-groups`                                                                          |\n| <YesIcon /> | Apple Pay Later Merchandising                     | `com.apple.developer.pay-later-merchandising`                                                                    |\n| <YesIcon /> | Apple Pay Payment Processing                      | `com.apple.developer.in-app-payments`                                                                            |\n```\n\n----------------------------------------\n\nTITLE: TypeDoc Property Definition Example in TypeScript\nDESCRIPTION: Example of TypeDoc documentation for the expoConfig property showing the original implementation with a typo.\nSOURCE: https://github.com/expo/expo/blob/main/docs/README.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * The standard Expo config object defined in `app.json` and `app.config.js` files. For both\n * classic and modern manifests, whether they are embedded or remote.\n */\nexpoConfig: ExpoConfig | null;\n```\n\n----------------------------------------\n\nTITLE: Configuring Uglify Minifier in Metro for Expo CLI\nDESCRIPTION: This snippet shows how to set up Uglify as the minifier in Metro configuration for Expo CLI projects using SDK 48 and above. It includes setting the minifier path and providing a placeholder for Uglify options.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/minify.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst { getDefaultConfig } = require('expo/metro-config');\n\nconst config = getDefaultConfig(__dirname);\n\nconfig.transformer.minifierPath = 'metro-minify-uglify';\nconfig.transformer.minifierConfig = {\n  // Options: https://github.com/mishoo/UglifyJS#compress-options\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Using H3 Component in Expo\nDESCRIPTION: Example of using the H3 component which renders as a semantic h3 element on web and styled Text component on native.\nSOURCE: https://github.com/expo/expo/blob/main/packages/html-elements/README.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { H3 } from '@expo/html-elements';\nexport default () => <H3>Example<H3/>\n```\n\n----------------------------------------\n\nTITLE: Navigating to Dynamic Routes with Static Parameters in React Native\nDESCRIPTION: Example of using the Link component to navigate to dynamic routes with static query parameters in a home screen component. Demonstrates basic navigation to routes with different user IDs.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/dynamic-routes.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Link } from 'expo-router';\nimport { View, Text, StyleSheet } from 'react-native';\n\nexport default function HomeScreen() {\n  return (\n    <View style={styles.container}>\n      <Text>Home</Text>\n      <Link href=\"/details/1\">View first user details</Link>\n      <Link href=\"/details/2\">View second user details</Link>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Expo Doctor CLI\nDESCRIPTION: Basic command for running the Expo Doctor CLI tool, which helps diagnose issues in Expo projects. It can be run with npx and accepts optional paths and arguments.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-doctor/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# Usage\nnpx expo-doctor [options] [path]\n```\n\n----------------------------------------\n\nTITLE: Gauge Component Usage (SwiftUI)\nDESCRIPTION: This code snippet demonstrates the usage of the Gauge component from the `@expo/ui/swift-ui` library. It takes `max`, `min`, `current`, `color`, and `type` props to configure the gauge. `PlatformColor` is used to define the colors of the gauge.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/ui.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Gauge } from \"@expo/ui/swift-ui\";\n\n<Gauge\n  max={{ value: 1, label: '1' }}\n  min={{ value: 0, label: '0' }}\n  current={{ value: 0.5 }}\n  color={[\n    PlatformColor('systemRed'),\n    PlatformColor('systemOrange'),\n    PlatformColor('systemYellow'),\n    PlatformColor('systemGreen'),\n  ]}\n  type=\"circular\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting up CMake Build Configuration for expo-av Android Library\nDESCRIPTION: Configures the CMake build environment for the expo-av native Android library. It defines the project, sets compiler options, specifies source files, includes necessary headers, finds dependencies like React Native and fbjni, and sets up proper library linking with version-specific conditional logic for React Native.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-av/android/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.4.1)\n\nproject(expo-av)\n\nset (CMAKE_VERBOSE_MAKEFILE ON)\nset (CMAKE_CXX_STANDARD 20)\n\nset (PACKAGE_NAME \"expo-av\")\nset (BUILD_DIR ${CMAKE_SOURCE_DIR}/build)\n\n# shared\n\nadd_library(\n        ${PACKAGE_NAME}\n        SHARED\n        src/main/cpp/EXAV.cpp\n        src/main/cpp/JPlayerData.cpp\n        src/main/cpp/JAVManager.cpp\n)\n\n# includes\n\ntarget_include_directories(\n        ${PACKAGE_NAME}\n        PRIVATE\n        # header only imports from turbomodule, e.g. CallInvokerHolder.h\n        \"${REACT_NATIVE_DIR}/ReactAndroid/src/main/jni/react/turbomodule\"\n        \"${REACT_NATIVE_DIR}/ReactCommon/callinvoker\"\n)\n\n# find libraries\n\nfind_library(LOG_LIB log)\n\nfind_package(ReactAndroid REQUIRED CONFIG)\n\nfind_package(fbjni REQUIRED CONFIG)\n\n# linking\n\ntarget_link_libraries(\n        ${PACKAGE_NAME}\n        ${LOG_LIB}\n        fbjni::fbjni\n        ReactAndroid::jsi\n        android\n)\nif (ReactAndroid_VERSION_MINOR GREATER_EQUAL 76)\n  target_link_libraries(\n          ${PACKAGE_NAME}\n          ReactAndroid::reactnative\n  )\nelse()\n  target_link_libraries(\n          ${PACKAGE_NAME}\n          ReactAndroid::reactnativejni\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating an iOS Development Build with EAS\nDESCRIPTION: This command initiates an Expo Application Services (EAS) build for the iOS platform using the `development` build profile.  The `--platform ios` flag specifies that the build should be created for iOS, and the `--profile development` flag uses the settings defined in the `development` profile within the `eas.json` file.\nSOURCE: https://github.com/expo/expo/blob/main/docs/scenes/get-started/set-up-your-environment/instructions/iosSimulatedDevelopmentBuild.mdx#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ eas build --platform ios --profile development\n```\n\n----------------------------------------\n\nTITLE: Markdown Component Documentation\nDESCRIPTION: Front matter configuration for the Slider component documentation page, defining metadata like title, description, source code URL, package name and supported platforms.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/slider.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Slider\ndescription: A React Native component library that provides access to the system UI for a slider control.\nsourceCodeUrl: 'https://github.com/callstack/react-native-slider'\npackageName: '@react-native-community/slider'\nplatforms: ['android', 'ios', 'web']\n---\n```\n\n----------------------------------------\n\nTITLE: React Native Direct AppRegistry Entry Point\nDESCRIPTION: Alternative entry point implementation using direct AppRegistry registration with Expo initialization.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/integration-in-existing-native-apps.mdx#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport App from './App';\nimport 'expo/src/Expo.fx';\nimport { AppRegistry } from 'react-native';\n\nfunction getApp() {\n  return <App />;\n}\n\nAppRegistry.registerComponent('App', () => getApp());\n```\n\n----------------------------------------\n\nTITLE: SafeAreaProvider Setup\nDESCRIPTION: Setting up SafeAreaProvider at the root of the application.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/safe-area-context.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\n\nfunction App() {\n  return <SafeAreaProvider>...</SafeAreaProvider>;\n}\n```\n\n----------------------------------------\n\nTITLE: Moving Package Documentation in Changelog - Markdown\nDESCRIPTION: This snippet documents the action of moving the package from one repository to another (\\`expo/expo-cli\\` to \\`expo/expo\\`) within the changelog. It provides transparency about structural changes to the package's location, aiding in tracking repository history. The markdown format presents repository names and references corresponding pull requests for context and traceability.\nSOURCE: https://github.com/expo/expo/blob/main/packages/@expo/plist/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n\"- Move package from `expo/expo-cli` to `expo/expo`. ([#25743](https://github.com/expo/expo/pull/25743) by [@byCedric](https://github.com/byCedric))\"\n```\n\n----------------------------------------\n\nTITLE: Adding Media Location Permission to Android Manifest\nDESCRIPTION: XML snippet showing how to add the ACCESS_MEDIA_LOCATION permission to the Android manifest file for accessing media location metadata.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/media-library.mdx#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"android.permission.ACCESS_MEDIA_LOCATION\" />\n```\n\n----------------------------------------\n\nTITLE: Importing Expo Speech Module\nDESCRIPTION: Shows how to import the expo-speech module for use in a React Native application.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/speech.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as Speech from 'expo-speech';\n```\n\n----------------------------------------\n\nTITLE: Updating Expo's React Native Fork and Tagging Release - Shell\nDESCRIPTION: Synchronizes React Native sources, applies Expo customizations, and creates a version tag for the corresponding SDK release. Requires setup of the `react-native-lab/react-native` submodule and access to the Expo tools (`et`). Accepts the major version for branch/tag naming and generates the SDK-integrated React Native version for Expo.\nSOURCE: https://github.com/expo/expo/blob/main/guides/releasing/Release Workflow.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\net update-react-native\n```\n\nLANGUAGE: shell\nCODE:\n```\ngit tag -a 'sdk-XX.X.X' -m 'React Native X.Y.Z for Expo SDKXX'\n```\n\nLANGUAGE: shell\nCODE:\n```\ngit push --tags\n```\n\n----------------------------------------\n\nTITLE: Quoting Apple App Store Guidelines for Interpreted Code in Applications\nDESCRIPTION: This snippet outlines Apple's guidelines for including interpreted code in App Store applications. It specifies conditions under which downloaded code is permissible, focusing on maintaining the app's primary purpose, avoiding creation of storefronts, and respecting OS security features.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/faq.mdx#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n...Interpreted code may be downloaded to an Application but only so long as such code:\n(a) does not change the primary purpose of the Application by providing features\n    or functionality that are inconsistent with the intended and advertised purpose\n    of the Application as submitted to the App Store,\n(b) does not create a store or storefront for other code or applications, and\n(c) does not bypass signing, sandbox, or other security features of the OS.\n```\n\n----------------------------------------\n\nTITLE: Setting JAVA_HOME Environment Variable\nDESCRIPTION: Command to set the JAVA_HOME environment variable in bash/zsh profile for JDK configuration\nSOURCE: https://github.com/expo/expo/blob/main/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nexport JAVA_HOME=/Library/Java/JavaVirtualMachines/zulu-17.jdk/Contents/Home\n```\n\n----------------------------------------\n\nTITLE: Starting Expo Development Server\nDESCRIPTION: Command to start the Expo development server for local development.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/eas/configure-development-build.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo start\n```\n\n----------------------------------------\n\nTITLE: Importing the Print Module in React Native\nDESCRIPTION: Basic import statement for the expo-print module in a React Native application.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/print.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as Print from 'expo-print';\n```\n\n----------------------------------------\n\nTITLE: Opening Android Play Store for Reviews in TypeScript\nDESCRIPTION: This snippet demonstrates how to open the Android Play Store to the reviews section for a specific app, both in the browser and directly in the Play Store app.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/storereview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst androidPackageName = 'host.exp.exponent';\n// Open the Android Play Store in the browser -> redirects to Play Store on Android\nLinking.openURL(\n  `https://play.google.com/store/apps/details?id=${androidPackageName}&showAllReviews=true`\n);\n// Open the Android Play Store directly\nLinking.openURL(`market://details?id=${androidPackageName}&showAllReviews=true`);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Tab Button Component\nDESCRIPTION: Implementation of a custom TabButton component that uses FontAwesome icons and responds to focus states. The component extends TabTriggerSlotProps and includes styling for both focused and unfocused states.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/advanced/custom-tabs.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport FontAwesome from '@expo/vector-icons/FontAwesome';\nimport { TabTriggerSlotProps } from 'expo-router/ui';\nimport { ComponentProps, Ref, forwardRef } from 'react';\nimport { Text, Pressable, View } from 'react-native';\n\ntype Icon = ComponentProps<typeof FontAwesome>['name'];\n\nexport type TabButtonProps = TabTriggerSlotProps & {\n  icon?: Icon;\n};\n\nexport const TabButton = forwardRef(\n  ({ icon, children, isFocused, ...props }: TabButtonProps, ref: Ref<View>) => {\n    return (\n      <Pressable\n        ref={ref}\n        {...props}\n        style={[\n          {\n            display: 'flex',\n            justifyContent: 'space-between',\n            alignItems: 'center',\n            flexDirection: 'column',\n            gap: 5,\n            padding: 10,\n          },\n          isFocused ? { backgroundColor: 'white' } : undefined,\n        ]}>\n        <FontAwesome name={icon} />\n        <Text style={[{ fontSize: 16 }, isFocused ? { color: 'white' } : undefined]}>\n          {children}\n        </Text>\n      </Pressable>\n    );\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Importing FaceDetector Module in JavaScript\nDESCRIPTION: This snippet shows how to import the FaceDetector module in a JavaScript file. It's a basic import statement that allows access to all the functionalities provided by the expo-face-detector package.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/facedetector.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as FaceDetector from 'expo-face-detector';\n```\n\n----------------------------------------\n\nTITLE: Initializing React DOM Client in the Browser - JavaScript\nDESCRIPTION: Demonstrates how to set up and render a React application in the browser using the 'react-dom/client' API. The snippet imports 'createRoot', defines a simple App component, creates a root with a DOM element, and mounts the App to the page. Requires 'react' and 'react-dom' version 18 or later; expects an HTML element with id 'root'. Outputs the rendered App component into the DOM.\nSOURCE: https://github.com/expo/expo/blob/main/packages/@expo/cli/static/canary-full/react-dom/README.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { createRoot } from 'react-dom/client';\n\nfunction App() {\n  return <div>Hello World</div>;\n}\n\nconst root = createRoot(document.getElementById('root'));\nroot.render(<App />);\n```\n\n----------------------------------------\n\nTITLE: Running E2E Tests Command for Android\nDESCRIPTION: Command to run E2E tests locally for Android from the bare-expo directory.\nSOURCE: https://github.com/expo/expo/blob/main/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn test:android\n```\n\n----------------------------------------\n\nTITLE: Importing Core Components and Hooks from react-native-safe-area-context in JavaScript\nDESCRIPTION: Imports the primary components (`SafeAreaView`, `SafeAreaProvider`) and hooks/contexts (`SafeAreaInsetsContext`, `useSafeAreaInsets`) from the `react-native-safe-area-context` library for use within a React Native application.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/safe-area-context.mdx#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport {\n  SafeAreaView,\n  SafeAreaProvider,\n  SafeAreaInsetsContext,\n  useSafeAreaInsets,\n} from 'react-native-safe-area-context';\n```\n\n----------------------------------------\n\nTITLE: Adding READ_PHONE_STATE Permission in AndroidManifest.xml\nDESCRIPTION: This XML snippet demonstrates how to add the `android.permission.READ_PHONE_STATE` permission to the **AndroidManifest.xml** file for native Android projects or those not using CNG with `expo-cellular`. This permission is required to access cellular information via the `TelephonyManager`.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/cellular.mdx#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"android.permission.READ_PHONE_STATE\" />\n```\n\n----------------------------------------\n\nTITLE: Using SQLite Context with React Suspense\nDESCRIPTION: Shows how to integrate SQLite Provider with React Suspense for better loading state handling and fallback UI support.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/sqlite.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SQLiteProvider, useSQLiteContext } from 'expo-sqlite';\nimport { Suspense } from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Suspense fallback={<Fallback />}>\n        <SQLiteProvider databaseName=\"test.db\" onInit={migrateDbIfNeeded} useSuspense>\n          <Header />\n          <Content />\n        </SQLiteProvider>\n      </Suspense>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Applying expo-autolinking-plugin in Gradle\nDESCRIPTION: This plugin is applied indirectly by the 'expo' package. It ensures dependencies are evaluated before the 'expo' package, adds linked modules to the dependency graph, and creates a task to generate the package list file.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-modules-autolinking/android/expo-gradle-plugin/README.md#2025-04-22_snippet_1\n\nLANGUAGE: Gradle\nCODE:\n```\n// This plugin is applied automatically by the 'expo' package\n// Do not apply manually\n```\n\n----------------------------------------\n\nTITLE: Disabling CSS Support in Metro Config (SDK 50+)\nDESCRIPTION: Configuration to disable CSS support in Expo projects running on SDK 50 or above using metro.config.js.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/config/metro.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n/** @type {import('expo/metro-config').MetroConfig} */\nconst config = getDefaultConfig(__dirname, {\n  // Disable CSS support.\n  isCSSEnabled: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Running Prose Linter for Documentation Style\nDESCRIPTION: Command for linting documentation content for style and grammar based on Expo's writing style guide.\nSOURCE: https://github.com/expo/expo/blob/main/docs/README.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nyarn run lint-prose\n```\n\n----------------------------------------\n\nTITLE: Android: Fixing Gradle Plugin build error for entryFile\nDESCRIPTION: Resolves a Gradle Plugin build error on Android that occurs when no `entryFile` is specified in the `android/app/build.gradle` file. The fix ensures that the build process can proceed smoothly even when the `entryFile` is not explicitly defined.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-updates/CHANGELOG.md#_snippet_4\n\nLANGUAGE: Gradle\nCODE:\n```\nFixed Gradle Plugin build error when no specified `entryFile` in **android/app/build.gradle**.\n```\n\n----------------------------------------\n\nTITLE: Running iOS E2E Tests\nDESCRIPTION: Command to prepare and run E2E tests on iOS Simulator.\nSOURCE: https://github.com/expo/expo/blob/main/apps/bare-expo/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn test:ios\n```\n\n----------------------------------------\n\nTITLE: Long-lived Branch Change Detection\nDESCRIPTION: Configuration for detecting changes in long-lived branches against their previous state.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-updates/e2e/setup/paths-filter/README.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  push:\n    branches:\n      - master\n      - develop\n      - release/**\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v4\n    - uses: dorny/paths-filter@v3\n      id: filter\n      with:\n        base: ${{ github.ref }}\n        filters: ...\n```\n\n----------------------------------------\n\nTITLE: Updating and Publishing Expo Project Templates - Shell\nDESCRIPTION: Automates the process of bumping dependencies and publishing Expo project templates for the new SDK version. The first command (`et update-project-templates` or its alias) updates dependencies, and the second (`et publish-templates` or alias) publishes tagged templates to NPM. Used on the main branch and requires accurate dependency information.\nSOURCE: https://github.com/expo/expo/blob/main/guides/releasing/Release Workflow.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\net update-project-templates\n```\n\nLANGUAGE: shell\nCODE:\n```\net upt\n```\n\nLANGUAGE: shell\nCODE:\n```\net publish-templates\n```\n\nLANGUAGE: shell\nCODE:\n```\net ppt\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-expo-app@latest --template blank@sdk-48\n```\n\n----------------------------------------\n\nTITLE: Mark SDK as Deprecated Command\nDESCRIPTION: Command to mark an old SDK version as deprecated in the versions system\nSOURCE: https://github.com/expo/expo/blob/main/guides/releasing/Release Workflow.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\net update-versions --sdkVersion XX.X.X --deprecated true\n```\n\n----------------------------------------\n\nTITLE: Importing Expo Linking Module\nDESCRIPTION: Shows how to import the expo-linking module to access deep linking functionality in an Expo app.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/linking.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Linking from 'expo-linking';\n```\n\n----------------------------------------\n\nTITLE: Picker Component Usage (Jetpack Compose)\nDESCRIPTION: This code snippet demonstrates the usage of the Picker component from the `@expo/ui/jetpack-compose` library.  It takes `options`, `selectedIndex`, and `onOptionSelected` props to manage the picker options and selection. `onOptionSelected` updates the `selectedIndex` state.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/ui.mdx#_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Picker } from '@expo/ui/jetpack-compose';\n\n<Picker\n  options={['$', '$$', '$$$', '$$$$']}\n  selectedIndex={selectedIndex}\n  onOptionSelected={({ nativeEvent: { index } }) => {\n    setSelectedIndex(index);\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing expo-file-system in a React Native Project (JavaScript)\nDESCRIPTION: Provides the basic import statement for accessing 'expo-file-system' APIs in Expo projects. This is a prerequisite for utilizing file system methods throughout the application code and does not require external dependencies beyond the Expo environment. Input is a direct import statement with no output other than namespace provision.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/filesystem.mdx#2025-04-22_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as FileSystem from 'expo-file-system';\n```\n\n----------------------------------------\n\nTITLE: Deep Link URL Format\nDESCRIPTION: Generated URL format that deep links into a development build to fetch latest updates on a specified channel.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/more/qr-codes.mdx#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nexp+your-slug://expo-development-client/?url=https://u.expo.dev/your-project-id?runtime-version=your-runtime-version&channel-name=your-channel\n```\n\n----------------------------------------\n\nTITLE: Installing ESLint and Prettier using Yarn (sh)\nDESCRIPTION: This shell command installs the core `eslint` and `prettier` packages as development dependencies using Yarn. These are prerequisites for using `eslint-config-universe` and integrating code formatting.\nSOURCE: https://github.com/expo/expo/blob/main/packages/eslint-config-universe/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add --dev eslint@8 prettier\n```\n\n----------------------------------------\n\nTITLE: Android toLowerCase Deprecation Update\nDESCRIPTION: Switch from deprecated toLowerCase() to lowercase() function in Android implementations across multiple modules including expo-calendar, expo-file-system, and expo-screen-capture.\nSOURCE: https://github.com/expo/expo/blob/main/CHANGELOG.md#2025-04-22_snippet_10\n\nLANGUAGE: Java\nCODE:\n```\nstring.lowercase() // Updated from string.toLowerCase()\n```\n\n----------------------------------------\n\nTITLE: Implementing a ViewPager Component in React Native\nDESCRIPTION: This example demonstrates how to create a simple ViewPager component using react-native-pager-view. It sets up a PagerView with three pages, each containing text content. The component includes styles for proper layout and centering of content.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/view-pager.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { StyleSheet, View, Text } from 'react-native';\nimport PagerView from 'react-native-pager-view';\n\nexport default function MyPager() {\n  return (\n    <View style={styles.container}>\n      <PagerView style={styles.container} initialPage={0}>\n        <View style={styles.page} key=\"1\">\n          <Text>First page</Text>\n          <Text>Swipe ➡️</Text>\n        </View>\n        <View style={styles.page} key=\"2\">\n          <Text>Second page</Text>\n        </View>\n        <View style={styles.page} key=\"3\">\n          <Text>Third page</Text>\n        </View>\n      </PagerView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  page: {\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining HTTP Response Headers for Expo Updates v1\nDESCRIPTION: Specifies the common HTTP response headers for the Expo Updates v1 protocol. Includes protocol version, SFV version, manifest filters, server-defined headers, and caching directives.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/technical-specs/expo-updates-1.mdx#2025-04-22_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nexpo-protocol-version: 1\nexpo-sfv-version: 0\nexpo-manifest-filters: <expo-sfv>\nexpo-server-defined-headers: <expo-sfv>\ncache-control: *\ncontent-type: *\n```\n\n----------------------------------------\n\nTITLE: Linear Gradient Colors Type Change\nDESCRIPTION: TypeScript type change for the colors prop in expo-linear-gradient requiring at least two values in the array for stricter type checking.\nSOURCE: https://github.com/expo/expo/blob/main/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Before: colors could be empty or have one value\ncolors: string[]\n\n// After: colors must have at least two values\ncolors: [string, string, ...string[]]\n```\n\n----------------------------------------\n\nTITLE: BlurHash Generation Endpoint Implementation\nDESCRIPTION: Express.js endpoint that processes uploaded images and generates BlurHash values with configurable component parameters.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/image.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\napp.post('/blurhash', upload.single('image'), async (req, res) => {\n  const { file } = req;\n  if (file === null) {\n    res.status(400).json({ message: 'Image is missing' });\n    return;\n  }\n\n  const componentX = req.body.componentX ?? 4;\n  const componentY = req.body.componentY ?? 3;\n\n  const { data, info } = await sharp(file.buffer).ensureAlpha().raw().toBuffer({\n    resolveWithObject: true,\n  });\n\n  const blurhash = encode(\n    new Uint8ClampedArray(data),\n    info.width,\n    info.height,\n    componentX,\n    componentY\n  );\n  res.json({ blurhash });\n});\n```\n\n----------------------------------------\n\nTITLE: Fixing zlogin Typo in Shell Script\nDESCRIPTION: This bug fix corrects a typo in the 'source-login-scripts.sh' file, changing ~/zlogin to the correct path. It was implemented in version 13.2.0.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-constants/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n# Fixed `source-login-scripts.sh` ~/zlogin typo\n```\n\n----------------------------------------\n\nTITLE: Expo Go SDK Version Error Message\nDESCRIPTION: Error message shown when attempting to run a project with an unsupported SDK version in Expo Go.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/tools.mdx#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n\"Project is incompatible with this version of Expo Go\"\n```\n\n----------------------------------------\n\nTITLE: Updating Android SDK Versions in Gradle\nDESCRIPTION: Updates the compileSdkVersion and targetSdkVersion to 33 for Android builds.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-location/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: Gradle\nCODE:\n```\nandroid {\n  compileSdkVersion 33\n  targetSdkVersion 33\n}\n```\n\n----------------------------------------\n\nTITLE: Subscript/Superscript Syntax in Markdown\nDESCRIPTION: This snippet demonstrates how to add subscript and superscript in Markdown comments within the code. This custom syntax is useful for properly displaying textual annotations or mathematical references in documentation.\nSOURCE: https://github.com/expo/expo/blob/main/guides/Expo Documentation Writing Style Guide.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n21^st^ Century <!-- sup -->\nH~2~O <!-- sub -->\n```\n\n----------------------------------------\n\nTITLE: Configuring robots.txt for Expo Documentation Website\nDESCRIPTION: This robots.txt configuration allows all web robots to access the entire website and provides the location of the sitemap for improved indexing. It ensures that search engines can crawl and index the Expo documentation effectively.\nSOURCE: https://github.com/expo/expo/blob/main/docs/public/robots.txt#2025-04-22_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\nUser-agent: *\nAllow: /\nSitemap: https://docs.expo.dev/sitemap.xml\n```\n\n----------------------------------------\n\nTITLE: Setting Android JS Entry Module Name (React Native / Java)\nDESCRIPTION: This Java override in MainApplication.java customizes the return value of getJSMainModuleName to point at '.expo/.virtual-metro-entry' instead of the default 'index'. This allows a non-index.js entry point for React Native Android builds, which is particularly needed for Expo managed workflows or multi-platform projects. No external dependencies beyond standard React Native setup are required.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/config/metro.mdx#2025-04-22_snippet_12\n\nLANGUAGE: Java\nCODE:\n```\n@Override\nprotected String getJSMainModuleName() {\n-  return \"index\";\n+  return \".expo/.virtual-metro-entry\";\n}\n\n```\n\n----------------------------------------\n\nTITLE: Importing Custom BoxLink Component\nDESCRIPTION: Shows the import of a custom BoxLink component used for navigation elements in the documentation.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/next-steps.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { BoxLink } from '~/ui/components/BoxLink';\n```\n\n----------------------------------------\n\nTITLE: Picker Component Usage (Wheel, SwiftUI)\nDESCRIPTION: This code snippet demonstrates the usage of the Picker component from the `@expo/ui/swift-ui` library, using the wheel variant. It takes `options`, `selectedIndex`, `onOptionSelected`, `variant`, and `style` props to manage the picker options, selection, appearance and styling. The `variant` is set to \"wheel\".\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/ui.mdx#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Picker } from '@expo/ui/swift-ui';\n\n<Picker\n  options={['$', '$$', '$$$', '$$$$']}\n  selectedIndex={selectedIndex}\n  onOptionSelected={({ nativeEvent: { index } }) => {\n    setSelectedIndex(index);\n  }}\n  variant=\"wheel\"\n  style={{\n    height: 100,\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining Directive Type for Update Instructions in Expo (TypeScript)\nDESCRIPTION: Defines the Directive type for use in Expo's update responses, representing instructions to the client such as rolling back to an embedded update. This type allows for specification of a directive type and optional parameters or extra information, serialized as JSON. The input and output are JSON objects following this type signature, with field values tailored according to specific directive types used by the server. No external dependencies except for TypeScript typing.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/technical-specs/expo-updates-1.mdx#2025-04-22_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype Directive = {\n  type: string;\n  parameters?: { [key: string]: any };\n  extra?: { [key: string]: any };\n};\n```\n\n----------------------------------------\n\nTITLE: Defining HTTP Request Headers for Expo Updates v1\nDESCRIPTION: Specifies the required and optional HTTP headers for a client request in the Expo Updates v1 protocol. Includes version, platform, runtime version, and optional code signing expectations.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/technical-specs/expo-updates-1.mdx#2025-04-22_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nexpo-protocol-version: 1\naccept: application/expo+json;q=0.9, application/json;q=0.8, multipart/mixed\nexpo-platform: *\nexpo-runtime-version: *\nexpo-expect-signature: sig, keyid=\"root\", alg=\"rsa-v1_5-sha256\"\n```\n\n----------------------------------------\n\nTITLE: Running EAS Build Locally for Android and iOS\nDESCRIPTION: Commands to run EAS Build locally for Android and iOS platforms using the --local flag. This allows developers to execute the build process on their own machine instead of EAS Build servers.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/build-reference/local-builds.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ eas build --platform android --local\n# or\n$ eas build --platform ios --local\n```\n\n----------------------------------------\n\nTITLE: Building Expo Project with New Architecture (Android)\nDESCRIPTION: These commands demonstrate how to run a clean prebuild and start a local build or run an EAS build for Android with the New Architecture enabled.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/new-architecture.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Run a clean prebuild and start a local build, if you like\n$ npx expo prebuild --clean && npx expo run:android\n# Run a build with EAS if you prefer\n$ eas build -p android\n```\n\n----------------------------------------\n\nTITLE: Initializing Expo/React Native Projects with Native Directories using Bash\nDESCRIPTION: Demonstrates three command sequences using `npx` to initialize a React Native project with native `android` and `ios` directories generated. The first uses `create-expo-app` followed by `expo prebuild`, the second uses a `bare-minimum` template, and the third uses the React Native CLI followed by `install-expo-modules`. These commands require Node.js, npm/npx, Expo CLI, and React Native CLI.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/workflow/overview.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npx create-expo-app MyApp && cd MyApp && npx expo prebuild\n```\n\nLANGUAGE: bash\nCODE:\n```\n\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ npx create-expo-app --template bare-minimum\n```\n\nLANGUAGE: bash\nCODE:\n```\n\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ npx @react-native-community/cli@latest init MyApp && cd MyApp && npx install-expo-modules\n```\n\n----------------------------------------\n\nTITLE: Configuring Metro Bundler with Expo\nDESCRIPTION: This JavaScript snippet configures the Metro bundler for use with Expo CLI by importing and using the default configuration from `expo/metro-config`. There are no external dependencies beyond the `expo/metro-config` package which needs to be installed. The output is a configuration object exported for use with Metro. It is crucial to ensure the correct path for `__dirname` is used and that the `expo/metro-config` package is available.\nSOURCE: https://github.com/expo/expo/blob/main/packages/@expo/metro-config/README.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Learn more https://docs.expo.io/guides/customizing-metro\nconst { getDefaultConfig } = require('expo/metro-config');\n\n/** @type {import('expo/metro-config').MetroConfig} */\nconst config = getDefaultConfig(__dirname);\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Creating Root Navigation Component\nDESCRIPTION: Implements the root component with a navigation link to a nested route using expo-router Link component.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/advanced/nesting-navigators.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Link } from 'expo-router';\n\nexport default function Root() {\n  return <Link href=\"/home/messages\">Navigate to nested route</Link>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Credentials in EAS Build\nDESCRIPTION: YAML configuration for injecting Android keystore credentials into the build process. This step typically follows checkout, node module installation, and prebuild steps.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: Android credentials\n  steps:\n    - eas/checkout\n    - eas/install_node_modules\n    - eas/prebuild\n    - eas/inject_android_credentials\n```\n\n----------------------------------------\n\nTITLE: Importing Facebook Authentication Provider\nDESCRIPTION: Import statement for Facebook authentication provider from expo-auth-session, which provides platform-specific implementations for Facebook OAuth.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/auth-session.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as Facebook from 'expo-auth-session/providers/facebook';\n```\n\n----------------------------------------\n\nTITLE: Referencing a Local Config Plugin in app.json\nDESCRIPTION: Shows how to reference a local config plugin module in the app.json configuration file.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/fingerprint.mdx#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": \"./plugins/withMyPlugin\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-calendar in app.json (JSON)\nDESCRIPTION: This snippet demonstrates how to configure the expo-calendar plugin in an Expo project's app.json, specifying custom permissions text for iOS. Dependencies include Expo's config plugin system. Set the plugin under 'expo.plugins', optionally providing 'calendarPermission' to customize the iOS system dialog message. Inputs are the plugin specification in JSON format; outputs are custom permissions applied during build. Changes require a new binary build to take effect.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/calendar.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"expo\\\": {\\n    \\\"plugins\\\": [\\n      [\\n        \\\"expo-calendar\\\",\\n        {\\n          \\\"calendarPermission\\\": \\\"The app needs to access your calendar.\\\"\\n        }\\n      ]\\n    ]\\n  }\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Permissions for Background Fetch\nDESCRIPTION: XML configuration to add required permissions in Android manifest for the background fetch functionality, enabling boot completed notifications and wake lock capabilities.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-background-fetch/README.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Added permissions -->\n<uses-permission android:name=\"android.permission.RECEIVE_BOOT_COMPLETED\" />\n<uses-permission android:name=\"android.permission.WAKE_LOCK\" />\n```\n\n----------------------------------------\n\nTITLE: Installing expo-network-addons using npx\nDESCRIPTION: This command installs the expo-network-addons package in an Expo project using npx. It ensures that the correct version compatible with the project's Expo SDK is installed.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-network-addons/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-network-addons\n```\n\n----------------------------------------\n\nTITLE: Event Handling with useEventListener Hook\nDESCRIPTION: Shows how to use the useEventListener hook to create an event listener for the VideoPlayer's status changes with automatic cleanup.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/video.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEventListener } from 'expo';\n// ...Other imports, definition of the component, creating the player etc.\n\nuseEventListener(player, 'statusChange', ({ status, error }) => {\n  setPlayerStatus(status);\n  setPlayerError(error);\n  console.log('Player status changed: ', status);\n});\n// Rest of the component...\n```\n\n----------------------------------------\n\nTITLE: Importing Collapsible Component in JavaScript/TypeScript\nDESCRIPTION: Imports the `Collapsible` UI component from the local path '~/ui/components/Collapsible'. This component allows creating expandable and collapsible sections within the documentation page, improving content organization and readability.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/updates.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Collapsible } from '~/ui/components/Collapsible';\n```\n\n----------------------------------------\n\nTITLE: Optimized SafeAreaProvider Setup\nDESCRIPTION: Setting up SafeAreaProvider with initialWindowMetrics for optimized initial render.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/safe-area-context.mdx#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SafeAreaProvider, initialWindowMetrics } from 'react-native-safe-area-context';\n\nfunction App() {\n  return <SafeAreaProvider initialMetrics={initialWindowMetrics}>...</SafeAreaProvider>;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing React Native Components\nDESCRIPTION: This snippet demonstrates importing essential components and icons needed to render a segmented control UI in a React Native application. Dependencies include modules from '@expo/styleguide-icons' and '~/components/plugins'.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/segmented-control.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { BookOpen02Icon } from '@expo/styleguide-icons/outline/BookOpen02Icon';\n\nimport { APIInstallSection } from '~/components/plugins/InstallSection';\nimport { BoxLink } from '~/ui/components/BoxLink';\n```\n\n----------------------------------------\n\nTITLE: Using Clipboard in React Native with Expo\nDESCRIPTION: A complete React Native example showing how to use expo-clipboard for copying text to and reading text from the clipboard. The example includes state management, button handlers, and styling.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/clipboard.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { View, Text, Button, StyleSheet } from 'react-native';\nimport * as Clipboard from 'expo-clipboard';\n\nexport default function App() {\n  const [copiedText, setCopiedText] = useState('');\n\n  const copyToClipboard = async () => {\n    /* @info Copy the text to the clipboard */\n    await Clipboard.setStringAsync('hello world');\n    /* @end */\n  };\n\n  const fetchCopiedText = async () => {\n    const text = /* @info Paste the text from the clipboard */ await Clipboard.getStringAsync();\n    /* @end */\n    setCopiedText(text);\n  };\n\n  return (\n    <View style={styles.container}>\n      <Button title=\"Click here to copy to Clipboard\" onPress={copyToClipboard} />\n      <Button title=\"View copied text\" onPress={fetchCopiedText} />\n      <Text style={styles.copiedText}>{copiedText}</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  copiedText: {\n    marginTop: 10,\n    color: 'red',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Rewriting URLs in Root Layout Component\nDESCRIPTION: This code snippet shows how to rewrite URLs within the app using the usePathname hook in the root _layout.tsx file. It demonstrates conditional redirection based on user permissions.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/advanced/native-intent.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Slot, Redirect } from 'expo-router';\n\nexport default function RootLayout() {\n  const pathname = usePathname();\n\n  if (pathname && !isUserAllowed(pathname)) {\n    return <Redirect href=\"/home\" />;\n  }\n\n  return <Slot />;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Text Component in React Native with Expo\nDESCRIPTION: Imports the RawH3 component from the UI text components directory for custom font handling.\nSOURCE: https://github.com/expo/expo/blob/main/docs/scenes/get-started/start-developing/TemplateFeatures/features/fonts.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RawH3 } from '~/ui/components/Text';\n```\n\n----------------------------------------\n\nTITLE: Basic Build and Maestro Test Configuration\nDESCRIPTION: Configuration for building and running Maestro tests with multiple test flows.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: Build and test\n  steps:\n    - eas/build\n    - eas/maestro_test:\n        inputs:\n          flow_path: |\n            maestro/sign_in.yml\n            maestro/create_post.yml\n            maestro/sign_out.yml\n```\n\n----------------------------------------\n\nTITLE: Handling Binary Data in SQLite\nDESCRIPTION: Demonstrates how to store and retrieve binary data using Uint8Array in SQLite database operations.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/sqlite.mdx#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nawait db.execAsync(`\nDROP TABLE IF EXISTS blobs;\nCREATE TABLE IF NOT EXISTS blobs (id INTEGER PRIMARY KEY NOT NULL, data BLOB);\n`);\n\nconst blob = new Uint8Array([0x00, 0x01, 0x02, 0x03, 0x04, 0x05]);\nawait db.runAsync('INSERT INTO blobs (data) VALUES (?)', blob);\n\nconst row = await db.getFirstAsync<{ data: Uint8Array }>('SELECT * FROM blobs');\nexpect(row.data).toEqual(blob);\n```\n\n----------------------------------------\n\nTITLE: Basic Custom Build Configuration in YAML\nDESCRIPTION: A simple EAS Build custom configuration file with standard build steps. This configuration includes checkout and node module installation steps followed by a simple echo command.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/custom-builds/functions.mdx#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: My example config\n  steps:\n    - eas/checkout\n    - eas/install_node_modules\n    - run:\n        name: Finished\n        command: echo Finished\n```\n\n----------------------------------------\n\nTITLE: Configuring Metro Web Support\nDESCRIPTION: Enables Metro bundler web support in the Expo app configuration file.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/installation.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"web\": {\n    \"bundler\": \"metro\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Static EAS Metadata in JSON\nDESCRIPTION: This snippet shows a basic static configuration for EAS Metadata using JSON format. It includes App Store information in English (U.S.) with title, subtitle, description, keywords, and various URLs.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/metadata/config.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"configVersion\": 0,\n  \"apple\": {\n    \"info\": {\n      \"en-US\": {\n        \"title\": \"Awesome App\",\n        \"subtitle\": \"Your self-made awesome app\",\n        \"description\": \"The most awesome app you have ever seen\",\n        \"keywords\": [\"awesome\", \"app\"],\n        \"marketingUrl\": \"https://example.com/en/promo\",\n        \"supportUrl\": \"https://example.com/en/support\",\n        \"privacyPolicyUrl\": \"https://example.com/en/privacy\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building and Testing Android E2E\nDESCRIPTION: Commands for bundling, building and running E2E tests for Android platform. Requires Android Emulator with Play services and API level 29.\nSOURCE: https://github.com/expo/expo/blob/main/apps/expo-go/modules/@react-native-async-storage/async-storage/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn bundle:android\nyarn build:e2e:android\nyarn test:e2e:android\n```\n\n----------------------------------------\n\nTITLE: Installing expo-video package via npm\nDESCRIPTION: Command to install the expo-video package as a dependency in bare React Native projects. Requires the expo package to be installed and configured first.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-video/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install expo-video\n```\n\n----------------------------------------\n\nTITLE: Importing RawH3 Component in React/Expo\nDESCRIPTION: Imports the RawH3 text component from the project's UI components library for use in React/Expo applications.\nSOURCE: https://github.com/expo/expo/blob/main/docs/scenes/get-started/start-developing/TemplateFeatures/features/platforms.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { RawH3 } from '~/ui/components/Text';\n```\n\n----------------------------------------\n\nTITLE: Using Custom Jest Matchers for Expo Router Testing\nDESCRIPTION: Examples of using custom Jest matchers provided by Expo Router for asserting various router states and parameters.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/reference/testing.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexpect(screen).toHavePathname('/my-router');\n\nexpect(screen).toHavePathnameWithParams('/my-router?hello=world');\n\nexpect(screen).toHaveSegments(['[id]']);\n\nexpect(screen).useLocalSearchParams({ first: 'abc' });\n\nexpect(screen).useGlobalSearchParams({ first: 'abc' });\n\nexpect(screen).toHaveRouterState({\n  routes: [{ name: 'index', path: '/' }],\n});\n```\n\n----------------------------------------\n\nTITLE: Android: Switching from kapt to ksp for Room persistence library\nDESCRIPTION: Migrates the Android project from using kapt (Kotlin Annotation Processing Tool) to ksp (Kotlin Symbol Processing) for the Room persistence library.  This is to improve build times and developer experience.\nSOURCE: https://github.com/expo/expo/blob/main/packages/expo-updates/CHANGELOG.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\n[Android] Change from kapt to ksp for room.\n```\n\n----------------------------------------\n\nTITLE: Initializing Stack Navigator in Expo Router (TypeScript)\nDESCRIPTION: Creates a basic Stack navigator layout using Expo Router. This snippet defines the foundation for stack-based navigation in the app.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/advanced/stack.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Stack } from 'expo-router/stack';\n\nexport default function Layout() {\n  return <Stack />;\n}\n```\n\n----------------------------------------\n\nTITLE: iOS Info.plist Configuration for Expo-Camera\nDESCRIPTION: This XML snippet details how to declare necessary permissions for camera and microphone usage directly in the iOS application’s Info.plist file.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/camera.mdx#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<key>NSCameraUsageDescription</key>\n<string>Allow $(PRODUCT_NAME) to access your camera</string>\n<key>NSMicrophoneUsageDescription</key>\n<string>Allow $(PRODUCT_NAME) to access your microphone</string>\n```\n\n----------------------------------------\n\nTITLE: Adding AD_ID Permission to Android Manifest\nDESCRIPTION: XML code for adding the Google Play services Advertising ID permission to AndroidManifest.xml, required for apps targeting Android 13 or higher that need access to the Advertising ID.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/tracking-transparency.mdx#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"com.google.android.gms.permission.AD_ID\"/>\n```\n\n----------------------------------------\n\nTITLE: Referencing the Sharp Image Processing Library\nDESCRIPTION: Refers to the 'sharp' library, a high-performance image processing module for Node.js. @expo/image-utils prefers using 'sharp' if it's available via a global 'sharp-cli' installation.\nSOURCE: https://github.com/expo/expo/blob/main/packages/@expo/image-utils/README.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nsharp\n```\n\n----------------------------------------\n\nTITLE: Formatting Changelog in Markdown\nDESCRIPTION: Structured changelog entries documenting version releases and changes in Expo project\nSOURCE: https://github.com/expo/expo/blob/main/packages/patch-project/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Changelog\n\n## Unpublished\n\n### 🛠 Breaking changes\n\n### 🎉 New features\n\n### 🐛 Bug fixes\n\n### 💡 Others\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry for Version 0.11.0\nDESCRIPTION: Changelog entry documenting breaking changes, new features, bug fixes, and other updates for version 0.11.0.\nSOURCE: https://github.com/expo/expo/blob/main/packages/install-expo-modules/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.11.0 — 2024-10-22\n\n### 🛠 Breaking changes\n\n- Bumped iOS deployment target to 15.1. ([#30840](https://github.com/expo/expo/pull/30840) by [@tsapeta](https://github.com/tsapeta))\n\n### 🎉 New features\n\n- Added support for Babel config files other than `babel.config.js` when upgrading plain React Native project. ([#30356](https://github.com/expo/expo/pull/30356) by [@wojtekmaj](https://github.com/wojtekmaj))\n- Added react-native 0.76 support. ([#32141](https://github.com/expo/expo/pull/32141) by [@kudo](https://github.com/kudo))\n```\n\n----------------------------------------\n\nTITLE: Automating Build and Submission - EAS CLI with Auto-Submit - Shell\nDESCRIPTION: This EAS CLI command automates the iOS build and submits the resulting binary to App Store Connect in one step using the '--auto-submit' flag. It streamlines continuous integration workflows, reducing manual steps for releasing updates. Prerequisites include EAS CLI, Apple developer credentials, and proper configuration in eas.json and app.json. Key parameters are '--platform ios' to specify the platform and '--auto-submit' to enable automation; outputs both build and submission logs.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/eas/ios-production-build.mdx#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ eas build --platform ios --auto-submit\n```\n\n----------------------------------------\n\nTITLE: Using APIInstallSection Component in Markdown\nDESCRIPTION: This code snippet demonstrates the usage of the APIInstallSection component within the markdown file. It provides a link to the installation instructions for the react-native-gesture-handler library.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/gesture-handler.mdx#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<APIInstallSection href=\"https://docs.swmansion.com/react-native-gesture-handler/docs/fundamentals/installation\" />\n```\n\n----------------------------------------\n\nTITLE: Markdown Page Frontmatter\nDESCRIPTION: YAML frontmatter defining the page title and description for the Next Steps documentation page.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/eas/next-steps.mdx#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Next steps\ndescription: Learn about the next steps in your journey with EAS.\n---\n```\n\n----------------------------------------\n\nTITLE: Disabling Sitemap in Expo Router (SDK 51 and below)\nDESCRIPTION: React component implementation to disable sitemap by creating an empty _sitemap.tsx file in the app directory for SDK 51 and below.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/reference/sitemap.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function Sitemap() {\n  return null;\n}\n```\n\n----------------------------------------\n\nTITLE: Obtaining Audio Playback Object Reference in JavaScript\nDESCRIPTION: JavaScript example demonstrating how to get a reference to a playback object for `Audio.Sound`. It shows setting the audio mode for iOS background playback and two ways to initialize the `playbackObject`: either by creating a new `Audio.Sound` instance or using `Audio.Sound.createAsync` to load and prepare a sound from a URI, optionally starting playback immediately.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/sdk/av.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nawait Audio.setAudioModeAsync({ playsInSilentModeIOS: true });\n\nconst playbackObject = new Audio.Sound();\n// OR\nconst { sound: playbackObject } = await Audio.Sound.createAsync(\n  { uri: 'http://foo/bar.mp3' },\n  { shouldPlay: true }\n);\n...\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Stripe Plugin in app.json for Expo\nDESCRIPTION: JSON configuration for setting up the @stripe/stripe-react-native plugin in an Expo project's app.json file. It includes options for setting the merchantIdentifier for iOS and enabling Google Pay for Android.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/stripe.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"@stripe/stripe-react-native\",\n        {\n          \"merchantIdentifier\": string | string [],\n          \"enableGooglePay\": boolean\n        }\n      ]\n    ],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic ImagePicker Implementation in React Native\nDESCRIPTION: A complete example demonstrating how to use expo-image-picker to select images from the device's media library, with options for editing and displaying the selected image.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/imagepicker.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState } from 'react';\nimport { Button, Image, View, StyleSheet } from 'react-native';\nimport * as ImagePicker from 'expo-image-picker';\n\nexport default function ImagePickerExample() {\n  const [image, setImage] = useState<string | null>(null);\n\n  const pickImage = async () => {\n    // No permissions request is necessary for launching the image library\n    let result = await ImagePicker.launchImageLibraryAsync({\n      mediaTypes: ['images', 'videos'],\n      allowsEditing: true,\n      aspect: [4, 3],\n      quality: 1,\n    });\n\n    console.log(result);\n\n    if (!result.canceled) {\n      setImage(result.assets[0].uri);\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      <Button title=\"Pick an image from camera roll\" onPress={pickImage} />\n      {image && <Image source={{ uri: image }} style={styles.image} />}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  image: {\n    width: 200,\n    height: 200,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Rewriting Incoming Native Deep Links with redirectSystemPath\nDESCRIPTION: This snippet demonstrates how to use the redirectSystemPath function in a +native-intent.tsx file to handle and rewrite incoming native deep links. It includes error handling and processing of third-party URLs.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/advanced/native-intent.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport ThirdPartyService from 'third-party-sdk';\n\nexport function redirectSystemPath({ path, initial }) {\n  try {\n    if (initial) {\n      // While the parameter is called `path` there is no guarantee that this is a path or a valid URL\n      const url = new URL(path, 'myapp://app.home');\n      // Detection of third-party URLs will change based on the provider\n      if (url.hostname === '<third-party-provider-hostname>') {\n        return ThirdPartyService.processReferringUrl(url).catch(() => {\n          // Something went wrong\n          return '/unexpected-error';\n        });\n      }\n      return path;\n    }\n    return path;\n  } catch {\n    // Do not crash inside this function! Instead you should redirect users\n    // to a custom route to handle unexpected errors, where they are able to report the incident\n    return '/unexpected-error';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Metro in Bare Workflow Expo Projects\nDESCRIPTION: Basic Metro configuration for bare workflow Expo projects. This configuration uses the default Expo Metro config which is required for features like aliases, absolute imports, asset hashing, and other Expo features to work correctly.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v50.0.0/config/metro.mdx#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst { getDefaultConfig } = require('expo/metro-config');\n\nconst config = getDefaultConfig(__dirname);\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Tab Navigation\nDESCRIPTION: Example of creating a custom tab navigation layout using Navigator and TabRouter with active link styling.\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/migrate/from-react-navigation.mdx#2025-04-22_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nimport { View } from 'react-native';\nimport { TabRouter } from '@react-navigation/native';\n\nimport { Navigator, usePathname, Slot, Link } from 'expo-router';\n\nexport default function App() {\n  return (\n    <Navigator router={TabRouter}>\n      <Header />\n      <Slot />\n    </Navigator>\n  );\n}\n\nfunction Header() {\n  const pathname = usePathname();\n\n  return (\n    <View>\n      <Link href=\"/\">Home</Link>\n      <Link\n        href=\"/profile\"\n        style={[pathname === '/profile' && { color: 'blue' }]}>\n        Profile\n      </Link>\n      <Link href=\"/settings\">Settings</Link>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Expo Web Project\nDESCRIPTION: Command to export the Expo project for web platform deployment\nSOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/hosting/get-started.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo export --platform web\n```"
  }
]