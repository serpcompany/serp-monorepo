[
  {
    "owner": "boto",
    "repo": "boto3",
    "content": "TITLE: Multithreading with Boto3 Clients Example\nDESCRIPTION: A complete example showing how to properly use boto3 clients in a multithreading scenario with ThreadPoolExecutor. This demonstrates the thread-safe pattern for boto3 client usage.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/clients.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport boto3.session\nfrom concurrent.futures import ThreadPoolExecutor\n\ndef do_s3_task(client, task_definition):\n    # Put your thread-safe code here\n\ndef my_workflow():\n    # Create a session and use it to make our client\n    session = boto3.session.Session()\n    s3_client = session.client('s3')\n\n    # Define some work to be done, this can be anything\n    my_tasks = [ ... ]\n\n    # Dispatch work tasks with our s3_client\n    with ThreadPoolExecutor(max_workers=8) as executor:\n        futures = [executor.submit(do_s3_task, s3_client, task) for task in my_tasks]\n```\n\n----------------------------------------\n\nTITLE: AWS Credentials Configuration Files\nDESCRIPTION: Example AWS credentials and config file contents for authentication setup\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/quickstart.rst#2025-04-23_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[default]\naws_access_key_id = YOUR_ACCESS_KEY\naws_secret_access_key = YOUR_SECRET_KEY\n```\n\nLANGUAGE: ini\nCODE:\n```\n[default]\nregion=us-east-1\n```\n\n----------------------------------------\n\nTITLE: Retrieving Decrypted Secret Value from AWS Secrets Manager using Python\nDESCRIPTION: This code snippet demonstrates how to retrieve a secret value from AWS Secrets Manager using boto3. It initializes a Secrets Manager client, attempts to get the secret value, and handles various potential errors. The retrieved secret can be either a string or binary data.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/secrets-manager.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\nfrom botocore.exceptions import ClientError\n\n\ndef get_secret():\n    secret_name = \"MySecretName\"\n    region_name = \"us-west-2\"\n\n    session = boto3.session.Session()\n    client = session.client(\n        service_name='secretsmanager',\n        region_name=region_name,\n    )\n\n    try:\n        get_secret_value_response = client.get_secret_value(\n            SecretId=secret_name\n        )\n    except ClientError as e:\n        if e.response['Error']['Code'] == 'ResourceNotFoundException':\n            print(\"The requested secret \" + secret_name + \" was not found\")\n        elif e.response['Error']['Code'] == 'InvalidRequestException':\n            print(\"The request was invalid due to:\", e)\n        elif e.response['Error']['Code'] == 'InvalidParameterException':\n            print(\"The request had invalid params:\", e)\n        elif e.response['Error']['Code'] == 'DecryptionFailure':\n            print(\"The requested secret can't be decrypted using the provided KMS key:\", e)\n        elif e.response['Error']['Code'] == 'InternalServiceError':\n            print(\"An error occurred on service side:\", e)\n    else:\n        # Secrets Manager decrypts the secret value using the associated KMS CMK\n        # Depending on whether the secret was a string or binary, only one of these fields will be populated\n        if 'SecretString' in get_secret_value_response:\n            text_secret_data = get_secret_value_response['SecretString']\n        else:\n            binary_secret_data = get_secret_value_response['SecretBinary']\n            \n        # Your code goes here. \n```\n\n----------------------------------------\n\nTITLE: Basic Boto3 Usage Example\nDESCRIPTION: Demonstrates how to use Boto3 to interact with AWS services. This example lists all S3 buckets in the account.\nSOURCE: https://github.com/boto/boto3/blob/develop/README.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> import boto3\n>>> s3 = boto3.resource('s3')\n>>> for bucket in s3.buckets.all():\n        print(bucket.name)\n```\n\n----------------------------------------\n\nTITLE: Creating and Activating Python Virtual Environment\nDESCRIPTION: Commands to create and activate a Python virtual environment for isolated package installation\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/quickstart.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ python -m venv .venv\n...\n$ source .venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Creating Boto3 Low-Level Clients\nDESCRIPTION: Examples of creating low-level clients in boto3, either directly or from an existing resource. These clients provide 1:1 mapping with service APIs.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/clients.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\n# Create a low-level client with the service name\nsqs = boto3.client('sqs')\n```\n\n----------------------------------------\n\nTITLE: Python TLS Version Check Script\nDESCRIPTION: Basic Python command to run a TLS version check script that verifies SSL protocol support.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/security.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\npython check.py\n```\n\n----------------------------------------\n\nTITLE: Creating S3 Bucket with Boto3\nDESCRIPTION: Creates an Amazon S3 bucket in a specified region using Boto3. If no region is specified, the bucket is created in the default us-east-1 region. Includes error handling and region-specific configuration.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/s3-example-creating-buckets.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport logging\nimport boto3\nfrom botocore.exceptions import ClientError\n\n\ndef create_bucket(bucket_name, region=None):\n    \"\"\"Create an S3 bucket in a specified region\n\n    If a region is not specified, the bucket is created in the S3 default\n    region (us-east-1).\n\n    :param bucket_name: Bucket to create\n    :param region: String region to create bucket in, e.g., 'us-west-2'\n    :return: True if bucket created, else False\n    \"\"\"\n\n    # Create bucket\n    try:\n        if region is None:\n            s3_client = boto3.client('s3')\n            s3_client.create_bucket(Bucket=bucket_name)\n        else:\n            s3_client = boto3.client('s3', region_name=region)\n            location = {'LocationConstraint': region}\n            s3_client.create_bucket(Bucket=bucket_name,\n                                    CreateBucketConfiguration=location)\n    except ClientError as e:\n        logging.error(e)\n        return False\n    return True\n```\n\n----------------------------------------\n\nTITLE: Decrypting File with KMS and Fernet in Python\nDESCRIPTION: This function decrypts a file that was encrypted using a corresponding encrypt_file function. It reads the encrypted file, extracts and decrypts the data key using KMS, then uses the Fernet class from the cryptography package to decrypt the file contents. The decrypted contents are written to a new file with a '.decrypted' extension.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/kms-example-encrypt-decrypt-file.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef decrypt_file(filename):\n    \"\"\"Decrypt a file encrypted by encrypt_file()\n\n    The encrypted file is read from <filename>.encrypted\n    The decrypted file is written to <filename>.decrypted\n\n    :param filename: File to decrypt\n    :return: True if file was decrypted. Otherwise, False.\n    \"\"\"\n\n    # Read the encrypted file into memory\n    try:\n        with open(filename + '.encrypted', 'rb') as file:\n            file_contents = file.read()\n    except IOError as e:\n        logging.error(e)\n        return False\n\n    # The first NUM_BYTES_FOR_LEN bytes contain the integer length of the\n    # encrypted data key.\n    # Add NUM_BYTES_FOR_LEN to get index of end of encrypted data key/start\n    # of encrypted data.\n    data_key_encrypted_len = int.from_bytes(file_contents[:NUM_BYTES_FOR_LEN],\n                                            byteorder='big') \\\n                             + NUM_BYTES_FOR_LEN\n    data_key_encrypted = file_contents[NUM_BYTES_FOR_LEN:data_key_encrypted_len]\n\n    # Decrypt the data key before using it\n    data_key_plaintext = decrypt_data_key(data_key_encrypted)\n    if data_key_plaintext is None:\n        return False\n\n    # Decrypt the rest of the file\n    f = Fernet(data_key_plaintext)\n    file_contents_decrypted = f.decrypt(file_contents[data_key_encrypted_len:])\n\n    # Write the decrypted file contents\n    try:\n        with open(filename + '.decrypted', 'wb') as file_decrypted:\n            file_decrypted.write(file_contents_decrypted)\n    except IOError as e:\n        logging.error(e)\n        return False\n\n    # The same security issue described at the end of encrypt_file() exists\n    # here, too, i.e., the wish to wipe the data_key_plaintext value from\n    # memory.\n    return True\n```\n\n----------------------------------------\n\nTITLE: Executing Service Operations with Boto3 Client\nDESCRIPTION: Example of making a service API call using a boto3 low-level client. The method arguments map directly to the associated AWS API parameters.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/clients.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Make a call using the low-level client\nresponse = sqs.send_message(QueueUrl='...', MessageBody='...')\n```\n\n----------------------------------------\n\nTITLE: Creating Data Key for Encryption in Python\nDESCRIPTION: Function to generate a data key using AWS KMS for encrypting file contents. It returns both the encrypted and plaintext forms of the data key.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/kms-example-encrypt-decrypt-file.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef create_data_key(cmk_id, key_spec='AES_256'):\n    \"\"\"Generate a data key to use when encrypting and decrypting data\n\n    :param cmk_id: KMS CMK ID or ARN under which to generate and encrypt the\n    data key.\n    :param key_spec: Length of the data encryption key. Supported values:\n        'AES_128': Generate a 128-bit symmetric key\n        'AES_256': Generate a 256-bit symmetric key\n    :return Tuple(EncryptedDataKey, PlaintextDataKey) where:\n        EncryptedDataKey: Encrypted CiphertextBlob data key as binary string\n        PlaintextDataKey: Plaintext base64-encoded data key as binary string\n    :return Tuple(None, None) if error\n    \"\"\"\n\n    # Create data key\n    kms_client = boto3.client('kms')\n    try:\n        response = kms_client.generate_data_key(KeyId=cmk_id, KeySpec=key_spec)\n    except ClientError as e:\n        logging.error(e)\n        return None, None\n\n    # Return the encrypted and plaintext data key\n    return response['CiphertextBlob'], base64.b64encode(response['Plaintext'])\n```\n\n----------------------------------------\n\nTITLE: Receiving and Deleting Messages from Amazon SQS Queue using Boto3\nDESCRIPTION: Shows how to receive a message from an SQS queue with specific attributes and parameters, and then delete it using the receipt handle. The code retrieves one message at a time and includes options for visibility timeout and wait time.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/sqs-example-sending-receiving-msgs.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\n# Create SQS client\nsqs = boto3.client('sqs')\n\nqueue_url = 'SQS_QUEUE_URL'\n\n# Receive message from SQS queue\nresponse = sqs.receive_message(\n    QueueUrl=queue_url,\n    AttributeNames=[\n        'SentTimestamp'\n    ],\n    MaxNumberOfMessages=1,\n    MessageAttributeNames=[\n        'All'\n    ],\n    VisibilityTimeout=0,\n    WaitTimeSeconds=0\n)\n\nmessage = response['Messages'][0]\nreceipt_handle = message['ReceiptHandle']\n\n# Delete received message from queue\nsqs.delete_message(\n    QueueUrl=queue_url,\n    ReceiptHandle=receipt_handle\n)\nprint('Received and deleted message: %s' % message)\n```\n\n----------------------------------------\n\nTITLE: DynamoDB Item Operations\nDESCRIPTION: Demonstrates basic CRUD operations (Create, Read, Update, Delete) on DynamoDB items using the Table resource.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/dynamodb.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ntable.put_item(\n   Item={\n        'username': 'janedoe',\n        'first_name': 'Jane',\n        'last_name': 'Doe',\n        'age': 25,\n        'account_type': 'standard_user',\n    }\n)\n```\n\nLANGUAGE: python\nCODE:\n```\nresponse = table.get_item(\n    Key={\n        'username': 'janedoe',\n        'last_name': 'Doe'\n    }\n)\n```\n\nLANGUAGE: python\nCODE:\n```\ntable.update_item(\n    Key={\n        'username': 'janedoe',\n        'last_name': 'Doe'\n    },\n    UpdateExpression='SET age = :val1',\n    ExpressionAttributeValues={\n        ':val1': 26\n    }\n)\n```\n\nLANGUAGE: python\nCODE:\n```\ntable.delete_item(\n    Key={\n        'username': 'janedoe',\n        'last_name': 'Doe'\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Encrypting File Using KMS Data Key in Python\nDESCRIPTION: Function to encrypt a file using a data key generated with AWS KMS. It creates a data key, encrypts the file contents, and saves the encrypted data key with the encrypted file.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/kms-example-encrypt-decrypt-file.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef encrypt_file(filename, cmk_id):\n    \"\"\"Encrypt a file using an AWS KMS CMK\n\n    A data key is generated and associated with the CMK.\n    The encrypted data key is saved with the encrypted file. This enables the\n    file to be decrypted at any time in the future and by any program that\n    has the credentials to decrypt the data key.\n    The encrypted file is saved to <filename>.encrypted\n    Limitation: The contents of filename must fit in memory.\n\n    :param filename: File to encrypt\n    :param cmk_id: AWS KMS CMK ID or ARN\n    :return: True if file was encrypted. Otherwise, False.\n    \"\"\"\n\n    # Read the entire file into memory\n    try:\n        with open(filename, 'rb') as file:\n            file_contents = file.read()\n    except IOError as e:\n        logging.error(e)\n        return False\n\n    # Generate a data key associated with the CMK\n    # The data key is used to encrypt the file. Each file can use its own\n    # data key or data keys can be shared among files.\n    # Specify either the CMK ID or ARN\n    data_key_encrypted, data_key_plaintext = create_data_key(cmk_id)\n    if data_key_encrypted is None:\n        return False\n    logging.info('Created new AWS KMS data key')\n\n    # Encrypt the file\n    f = Fernet(data_key_plaintext)\n    file_contents_encrypted = f.encrypt(file_contents)\n\n    # Write the encrypted data key and encrypted file contents together\n    try:\n        with open(filename + '.encrypted', 'wb') as file_encrypted:\n            file_encrypted.write(len(data_key_encrypted).to_bytes(NUM_BYTES_FOR_LEN,\n                                                                  byteorder='big'))\n            file_encrypted.write(data_key_encrypted)\n            file_encrypted.write(file_contents_encrypted)\n    except IOError as e:\n        logging.error(e)\n        return False\n\n    # For the highest security, the data_key_plaintext value should be wiped\n    # from memory. Unfortunately, this is not possible in Python. However,\n    # storing the value in a local variable makes it available for garbage\n    # collection.\n    return True\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Credentials\nDESCRIPTION: Sets up AWS credentials in the ~/.aws/credentials file. This configuration is necessary for Boto3 to authenticate with AWS services.\nSOURCE: https://github.com/boto/boto3/blob/develop/README.rst#2025-04-23_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[default]\naws_access_key_id = YOUR_KEY\naws_secret_access_key = YOUR_SECRET\n```\n\n----------------------------------------\n\nTITLE: Adjusting Concurrent S3 Transfer Operations in Python using Boto3\nDESCRIPTION: This code snippet shows how to adjust the maximum number of concurrent S3 API transfer operations using boto3. It sets the max_concurrency attribute to 5 to reduce bandwidth usage during a file download.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/s3.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# To consume less downstream bandwidth, decrease the maximum concurrency \nconfig = TransferConfig(max_concurrency=5)\n\n# Download an S3 object\ns3 = boto3.client('s3')\ns3.download_file('amzn-s3-demo-bucket', 'OBJECT_NAME', 'FILE_NAME', Config=config)\n```\n\n----------------------------------------\n\nTITLE: Using Presigned URL with Python Requests\nDESCRIPTION: Demonstrates how to use a presigned URL to download an S3 object using the Python requests library.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/s3-presigned-urls.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport requests  # To install: pip install requests\n\nurl = create_presigned_url('amzn-s3-demo-bucket', 'OBJECT_NAME')\nif url is not None:\n    response = requests.get(url)\n```\n\n----------------------------------------\n\nTITLE: Creating a Config Object for Boto3 Client Configuration in Python\nDESCRIPTION: This snippet demonstrates how to create a Config object with custom options like region, signature version, and retry settings, then use it to initialize a Boto3 client.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/configuration.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\nfrom botocore.config import Config\n\nmy_config = Config(\n    region_name = 'us-west-2',\n    signature_version = 'v4',\n    retries = {\n        'max_attempts': 10,\n        'mode': 'standard'\n    }\n)\n\nclient = boto3.client('kinesis', config=my_config)\n```\n\n----------------------------------------\n\nTITLE: Initializing Resources in Boto3\nDESCRIPTION: Demonstrates how to get resource objects from the default session. Resources provide a higher-level abstraction for interacting with AWS services compared to the lower-level client interface.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/resources.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Get resources from the default session\nsqs = boto3.resource('sqs')\ns3 = boto3.resource('s3')\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Session in Boto3\nDESCRIPTION: Shows how to create and manage a custom session for more control over AWS credentials and configuration. Custom sessions allow for different credentials and settings per session instance.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/session.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\nimport boto3.session\n\n# Create your own session\nmy_session = boto3.session.Session()\n\n# Now we can create low-level clients or resource clients from our custom session\nsqs = my_session.client('sqs')\ns3 = my_session.resource('s3')\n```\n\n----------------------------------------\n\nTITLE: Progress Percentage Implementation for S3 Upload\nDESCRIPTION: Implementation of a progress tracking class that can be used as a callback during S3 file uploads.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/s3-uploading-files.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport sys\nimport threading\n\nclass ProgressPercentage(object):\n\n    def __init__(self, filename):\n        self._filename = filename\n        self._size = float(os.path.getsize(filename))\n        self._seen_so_far = 0\n        self._lock = threading.Lock()\n\n    def __call__(self, bytes_amount):\n        # To simplify, assume this is hooked up to a single filename\n        with self._lock:\n            self._seen_so_far += bytes_amount\n            percentage = (self._seen_so_far / self._size) * 100\n            sys.stdout.write(\n                \"\\r%s  %s / %s  (%.2f%%)\" % (\n                    self._filename, self._seen_so_far, self._size,\n                    percentage))\n            sys.stdout.flush()\n```\n\n----------------------------------------\n\nTITLE: Sending Messages to SQS Queue\nDESCRIPTION: Illustrates different ways to send messages to an SQS queue, including single messages, messages with attributes, and batch sending.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/sqs.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Get the service resource\nsqs = boto3.resource('sqs')\n\n# Get the queue\nqueue = sqs.get_queue_by_name(QueueName='test')\n\n# Create a new message\nresponse = queue.send_message(MessageBody='world')\n\n# Send message with attributes\nqueue.send_message(MessageBody='boto3', MessageAttributes={\n    'Author': {\n        'StringValue': 'Daniel',\n        'DataType': 'String'\n    }\n})\n\n# Send messages in batch\nresponse = queue.send_messages(Entries=[\n    {\n        'Id': '1',\n        'MessageBody': 'world'\n    },\n    {\n        'Id': '2',\n        'MessageBody': 'boto3',\n        'MessageAttributes': {\n            'Author': {\n                'StringValue': 'Daniel',\n                'DataType': 'String'\n            }\n        }\n    }\n])\n```\n\n----------------------------------------\n\nTITLE: Processing SQS Messages\nDESCRIPTION: Shows how to receive and process messages from an SQS queue, including handling message attributes and cleanup after processing.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/sqs.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Get the service resource\nsqs = boto3.resource('sqs')\n\n# Get the queue\nqueue = sqs.get_queue_by_name(QueueName='test')\n\n# Process messages by printing out body and optional author name\nfor message in queue.receive_messages(MessageAttributeNames=['Author']):\n    # Get the custom author message attribute if it was set\n    author_text = ''\n    if message.message_attributes is not None:\n        author_name = message.message_attributes.get('Author').get('StringValue')\n        if author_name:\n            author_text = ' ({0})'.format(author_name)\n\n    # Print out the body and author (if set)\n    print('Hello, {0}!{1}'.format(message.body, author_text))\n\n    # Let the queue know that the message is processed\n    message.delete()\n```\n\n----------------------------------------\n\nTITLE: Creating DynamoDB Table with Boto3\nDESCRIPTION: Creates a new DynamoDB table with specified hash and range keys, attribute definitions, and provisioned throughput settings.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/dynamodb.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\n# Get the service resource.\ndynamodb = boto3.resource('dynamodb')\n\n# Create the DynamoDB table.\ntable = dynamodb.create_table(\n    TableName='users',\n    KeySchema=[\n        {\n            'AttributeName': 'username',\n            'KeyType': 'HASH'\n        },\n        {\n            'AttributeName': 'last_name',\n            'KeyType': 'RANGE'\n        }\n    ],\n    AttributeDefinitions=[\n        {\n            'AttributeName': 'username',\n            'AttributeType': 'S'\n        },\n        {\n            'AttributeName': 'last_name',\n            'AttributeType': 'S'\n        },\n    ],\n    ProvisionedThroughput={\n        'ReadCapacityUnits': 5,\n        'WriteCapacityUnits': 5\n    }\n)\n\n# Wait until the table exists.\ntable.wait_until_exists()\n\n# Print out some data about the table.\nprint(table.item_count)\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Credentials and Account ID in INI File\nDESCRIPTION: Shows how to set AWS credentials and account ID in the shared credentials file (~/.aws/credentials) or config file (~/.aws/config), which Boto3 can use for account ID-based endpoints.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/configuration.rst#2025-04-21_snippet_10\n\nLANGUAGE: ini\nCODE:\n```\n[default]\naws_access_key_id=foo\naws_secret_access_key=bar\naws_account_id=baz\n```\n\n----------------------------------------\n\nTITLE: Retrieving Existing KMS Customer Master Key in Python\nDESCRIPTION: Function to retrieve an existing AWS KMS Customer Master Key (CMK) based on its description. It searches through existing CMKs and returns the key ID and ARN if found.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/kms-example-encrypt-decrypt-file.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef retrieve_cmk(desc):\n    \"\"\"Retrieve an existing KMS CMK based on its description\n\n    :param desc: Description of CMK specified when the CMK was created\n    :return Tuple(KeyId, KeyArn) where:\n        KeyId: CMK ID\n        KeyArn: Amazon Resource Name of CMK\n    :return Tuple(None, None) if a CMK with the specified description was\n    not found\n    \"\"\"\n\n    # Retrieve a list of existing CMKs\n    # If more than 100 keys exist, retrieve and process them in batches\n    kms_client = boto3.client('kms')\n    try:\n        response = kms_client.list_keys()\n    except ClientError as e:\n        logging.error(e)\n        return None, None\n\n    done = False\n    while not done:\n        for cmk in response['Keys']:\n            # Get info about the key, including its description\n            try:\n                key_info = kms_client.describe_key(KeyId=cmk['KeyArn'])\n            except ClientError as e:\n                logging.error(e)\n                return None, None\n\n            # Is this the key we're looking for?\n            if key_info['KeyMetadata']['Description'] == desc:\n                return cmk['KeyId'], cmk['KeyArn']\n\n        # Are there more keys to retrieve?\n        if not response['Truncated']:\n            # No, the CMK was not found\n            logging.debug('A CMK with the specified description was not found')\n            done = True\n        else:\n            # Yes, retrieve another batch\n            try:\n                response = kms_client.list_keys(Marker=response['NextMarker'])\n            except ClientError as e:\n                logging.error(e)\n                return None, None\n\n    # All existing CMKs were checked and the desired key was not found\n    return None, None\n```\n\n----------------------------------------\n\nTITLE: Creating CloudWatch Logs Subscription Filter\nDESCRIPTION: Python code to create or update a subscription filter and associate it with a specified log group, directing matched logs to a Lambda function.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/cw-example-subscription-filters.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\n# Create CloudWatchLogs client\ncloudwatch_logs = boto3.client('logs')\n\n# Create a subscription filter\ncloudwatch_logs.put_subscription_filter(\n    destinationArn='LAMBDA_FUNCTION_ARN',\n    filterName='FILTER_NAME',\n    filterPattern='ERROR',\n    logGroupName='LOG_GROUP',\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Retry Behavior with Config Object in Boto3\nDESCRIPTION: Example showing how to create a Config object to set retry behavior for AWS clients. This snippet demonstrates setting max_attempts to 10 and using the standard retry mode.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/retries.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nconfig = Config(\n   retries = {\n      'max_attempts': 10,\n      'mode': 'standard'\n   }\n)\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Boto3 Paginators in Python\nDESCRIPTION: This snippet demonstrates how to create a paginator for the S3 list_objects_v2 operation. It shows the complete process from client creation to iterating through paginated results.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/paginators.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\n# Create a client\nclient = boto3.client('s3', region_name='us-west-2')\n\n# Create a reusable Paginator\npaginator = client.get_paginator('list_objects_v2')\n\n# Create a PageIterator from the Paginator\npage_iterator = paginator.paginate(Bucket='amzn-s3-demo-bucket')\n\nfor page in page_iterator:\n    print(page['Contents'])\n```\n\n----------------------------------------\n\nTITLE: Using AWS CLI to Configure Credentials Interactively\nDESCRIPTION: Run the interactive AWS CLI command to set up credentials and default region, which will generate configuration files in the correct locations.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/credentials.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\naws configure\n```\n\n----------------------------------------\n\nTITLE: Deleting EC2 Security Group using Boto3\nDESCRIPTION: This snippet demonstrates how to delete an EC2 security group using the delete_security_group method. It handles potential errors that might occur if the security group is still in use by instances or referenced by other security groups.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/ec2-example-security-group.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\nfrom botocore.exceptions import ClientError\n\n# Create EC2 client\nec2 = boto3.client('ec2')\n\n# Delete security group\ntry:\n    response = ec2.delete_security_group(GroupId='SECURITY_GROUP_ID')\n    print('Security Group Deleted')\nexcept ClientError as e:\n    print(e)\n```\n\n----------------------------------------\n\nTITLE: Uploading File-like Object to S3 Using upload_fileobj\nDESCRIPTION: Example of uploading a file-like object to S3 using boto3's upload_fileobj method. The file must be opened in binary mode.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/s3-uploading-files.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ns3 = boto3.client('s3')\nwith open(\"FILE_NAME\", \"rb\") as f:\n    s3.upload_fileobj(f, \"amzn-s3-demo-bucket\", \"OBJECT_NAME\")\n```\n\n----------------------------------------\n\nTITLE: Setting an S3 Bucket Policy with Boto3\nDESCRIPTION: This snippet shows how to create and set a policy for an S3 bucket using the put_bucket_policy method. The example creates a policy that allows public read access to all objects in the bucket.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/s3-example-bucket-policies.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport json\n\n# Create a bucket policy\nbucket_name = 'amzn-s3-demo-bucket'\nbucket_policy = {\n    'Version': '2012-10-17',\n    'Statement': [{\n        'Sid': 'AddPerm',\n        'Effect': 'Allow',\n        'Principal': '*',\n        'Action': ['s3:GetObject'],\n        'Resource': f'arn:aws:s3:::{bucket_name}/*'\n    }]\n}\n\n# Convert the policy from JSON dict to string\nbucket_policy = json.dumps(bucket_policy)\n\n# Set the new policy\ns3 = boto3.client('s3')\ns3.put_bucket_policy(Bucket=bucket_name, Policy=bucket_policy)\n```\n\n----------------------------------------\n\nTITLE: Registering an Event Handler in Boto3 Python\nDESCRIPTION: This snippet demonstrates how to register a function to an event in Boto3's event system. It shows how to add a default bucket name to S3 ListObjectsV2 calls when no bucket is specified.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/events.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\ns3 = boto3.client('s3')\n\n# Access the event system on the S3 client\nevent_system = s3.meta.events\n\n# Create a function \ndef add_my_bucket(params, **kwargs):\n    # Add the name of the bucket you want to default to.\n    if 'Bucket' not in params:\n        params['Bucket'] = 'amzn-s3-demo-bucket'\n\n# Register the function to an event\nevent_system.register('provide-client-params.s3.ListObjectsV2', add_my_bucket)\n\nresponse = s3.list_objects_v2()\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Config File (INI)\nDESCRIPTION: Demonstrates the format for the AWS config file (~/.aws/config). It shows how to set up multiple profiles, noting the required 'profile' prefix for non-default profiles.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/credentials.rst#2025-04-21_snippet_9\n\nLANGUAGE: ini\nCODE:\n```\n[default]\naws_access_key_id=foo\naws_secret_access_key=bar\n\n[profile dev]\naws_access_key_id=foo2\naws_secret_access_key=bar2\n\n[profile prod]\naws_access_key_id=foo3\naws_secret_access_key=bar3\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Credentials as Client Parameters in Python\nDESCRIPTION: Initialize an AWS S3 client by passing AWS credentials directly as parameters. This approach is useful for retrieving temporary credentials or loading credentials from external locations.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/credentials.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\nclient = boto3.client(\n    's3',\n    aws_access_key_id=ACCESS_KEY,\n    aws_secret_access_key=SECRET_KEY,\n    aws_session_token=SESSION_TOKEN\n)\n```\n\n----------------------------------------\n\nTITLE: Publishing Custom Metrics to CloudWatch using Boto3\nDESCRIPTION: This snippet shows how to publish custom metric data points to Amazon CloudWatch using the put_metric_data method. It creates a custom metric named 'PAGES_VISITED' with a dimension 'UNIQUE_PAGES' in the 'SITE/TRAFFIC' namespace.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/cw-example-metrics.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\n# Create CloudWatch client\ncloudwatch = boto3.client('cloudwatch')\n\n# Put custom metrics\ncloudwatch.put_metric_data(\n    MetricData=[\n        {\n            'MetricName': 'PAGES_VISITED',\n            'Dimensions': [\n                {\n                    'Name': 'UNIQUE_PAGES',\n                    'Value': 'URLS'\n                },\n            ],\n            'Unit': 'None',\n            'Value': 1.0\n        },\n    ],\n    Namespace='SITE/TRAFFIC'\n)\n```\n\n----------------------------------------\n\nTITLE: S3 Upload with Progress Callback\nDESCRIPTION: Example of uploading a file to S3 with a progress callback to track upload status.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/s3-uploading-files.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ns3.upload_file(\n    'FILE_NAME', 'amzn-s3-demo-bucket', 'OBJECT_NAME',\n    Callback=ProgressPercentage('FILE_NAME')\n)\n```\n\n----------------------------------------\n\nTITLE: Sending Messages to Amazon SQS Queue using Boto3\nDESCRIPTION: Demonstrates how to send a message to an Amazon SQS queue with message attributes including Title, Author, and WeeksOn. The message includes a 10-second delay and custom attributes with different data types.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/sqs-example-sending-receiving-msgs.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\n# Create SQS client\nsqs = boto3.client('sqs')\n\nqueue_url = 'SQS_QUEUE_URL'\n\n# Send message to SQS queue\nresponse = sqs.send_message(\n    QueueUrl=queue_url,\n    DelaySeconds=10,\n    MessageAttributes={\n        'Title': {\n            'DataType': 'String',\n            'StringValue': 'The Whistler'\n        },\n        'Author': {\n            'DataType': 'String',\n            'StringValue': 'John Grisham'\n        },\n        'WeeksOn': {\n            'DataType': 'Number',\n            'StringValue': '6'\n        }\n    },\n    MessageBody=(\n        'Information about current NY Times fiction bestseller for '\n        'week of 12/11/2016.'\n    )\n)\n\nprint(response['MessageId'])\n```\n\n----------------------------------------\n\nTITLE: Comparing Low-level and High-level Connections in Boto2 vs Boto3\nDESCRIPTION: Demonstrates the difference between creating low-level connections and high-level resource objects in both Boto 2.x and Boto3. Shows examples for Elastic Transcoder and S3 services.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/migration.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport boto, boto3\n\n# Low-level connections\nconn = boto.connect_elastictranscoder()\nclient = boto3.client('elastictranscoder')\n\n# High-level connections & resource objects\nfrom boto.s3.bucket import Bucket\ns3_conn = boto.connect_s3()\nboto2_bucket = Bucket('amzn-s3-demo-bucket')\n\ns3 = boto3.resource('s3')\nboto3_bucket = s3.Bucket('amzn-s3-demo-bucket')\n```\n\n----------------------------------------\n\nTITLE: Hierarchical Event Structure in Boto3 Python\nDESCRIPTION: This example illustrates the hierarchical structure of Boto3's event system. It shows how more specific event handlers are called before less specific ones, and how different handlers can be applied to different methods.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/events.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\ns3 = boto3.client('s3')\n\n# Access the event system on the S3 client\nevent_system = s3.meta.events\n\ndef add_my_general_bucket(params, **kwargs):\n    if 'Bucket' not in params:\n        params['Bucket'] = 'amzn-s3-demo-bucket1'\n\ndef add_my_specific_bucket(params, **kwargs):\n    if 'Bucket' not in params:\n        params['Bucket'] = 'amzn-s3-demo-bucket2'\n\nevent_system.register('provide-client-params.s3', add_my_general_bucket)\nevent_system.register('provide-client-params.s3.ListObjectsV2', add_my_specific_bucket)\n\nlist_obj_response = s3.list_objects_v2()\nput_obj_response = s3.put_object(Key='mykey', Body=b'my body')\n```\n\n----------------------------------------\n\nTITLE: Bash Script for Enforcing TLS 1.3\nDESCRIPTION: Bash script that downloads and compiles OpenSSL and Python with TLS 1.3 as minimum version. Disables SSL3, TLS 1.0, TLS 1.1, and TLS 1.2 support.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/security.rst#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n#!/usr/bin/env bash\nset -e\n\nOPENSSL_VERSION=\"1.1.1m\"\nOPENSSL_PREFIX=\"/opt/openssl-with-min-tls1_3\"\nPYTHON_VERSION=\"3.9.10\"\nPYTHON_PREFIX=\"/opt/python-with-min-tls1_3\"\n\n\ncurl -O \"https://www.openssl.org/source/openssl-$OPENSSL_VERSION.tar.gz\"\ntar -xzf \"openssl-$OPENSSL_VERSION.tar.gz\"\ncd openssl-$OPENSSL_VERSION\n./config --prefix=$OPENSSL_PREFIX no-ssl3 no-tls1 no-tls1_1 no-tls1_2 no-shared\nmake > /dev/null\nsudo make install_sw > /dev/null\n\n\ncd /tmp\ncurl -O \"https://www.python.org/ftp/python/$PYTHON_VERSION/Python-$PYTHON_VERSION.tgz\"\ntar -xzf \"Python-$PYTHON_VERSION.tgz\"\ncd Python-$PYTHON_VERSION\n./configure --prefix=$PYTHON_PREFIX --with-openssl=$OPENSSL_PREFIX --disable-shared > /dev/null\nmake > /dev/null\nsudo make install > /dev/null\n```\n\n----------------------------------------\n\nTITLE: S3 Upload with Public Read ACL\nDESCRIPTION: Example of uploading a file to S3 with public read access using the ExtraArgs parameter.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/s3-uploading-files.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ns3.upload_file(\n    'FILE_NAME', 'amzn-s3-demo-bucket', 'OBJECT_NAME',\n    ExtraArgs={'ACL': 'public-read'}\n)\n```\n\n----------------------------------------\n\nTITLE: Starting and Stopping EC2 Instances using Boto3\nDESCRIPTION: Demonstrates starting and stopping EBS-backed EC2 instances with dry run permission checks. Uses start_instances and stop_instances API calls with error handling.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/ec2-example-managing-instances.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nimport boto3\nfrom botocore.exceptions import ClientError\n\ninstance_id = sys.argv[2]\naction = sys.argv[1].upper()\n\nec2 = boto3.client('ec2')\n\n\nif action == 'ON':\n    # Do a dryrun first to verify permissions\n    try:\n        ec2.start_instances(InstanceIds=[instance_id], DryRun=True)\n    except ClientError as e:\n        if 'DryRunOperation' not in str(e):\n            raise\n\n    # Dry run succeeded, run start_instances without dryrun\n    try:\n        response = ec2.start_instances(InstanceIds=[instance_id], DryRun=False)\n        print(response)\n    except ClientError as e:\n        print(e)\nelse:\n    # Do a dryrun first to verify permissions\n    try:\n        ec2.stop_instances(InstanceIds=[instance_id], DryRun=True)\n    except ClientError as e:\n        if 'DryRunOperation' not in str(e):\n            raise\n\n    # Dry run succeeded, call stop_instances without dryrun\n    try:\n        response = ec2.stop_instances(InstanceIds=[instance_id], DryRun=False)\n        print(response)\n    except ClientError as e:\n        print(e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving EC2 Regions and Availability Zones with Boto3\nDESCRIPTION: This code initializes an EC2 client and retrieves information about available regions and availability zones. It first uses describe_regions() to get all regions that work with EC2, then calls describe_availability_zones() to retrieve availability zones for the current region of the EC2 client.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/ec2-example-regions-avail-zones.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\nec2 = boto3.client('ec2')\n\n# Retrieves all regions/endpoints that work with EC2\nresponse = ec2.describe_regions()\nprint('Regions:', response['Regions'])\n\n# Retrieves availability zones only for region of the ec2 object\nresponse = ec2.describe_availability_zones()\nprint('Availability Zones:', response['AvailabilityZones'])\n```\n\n----------------------------------------\n\nTITLE: Event System Isolation in Boto3 Python\nDESCRIPTION: This example demonstrates the isolation of event systems between different client instances. It shows how different handlers can be registered to the same event for different clients.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/events.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\nclient1 = boto3.client('s3')\nclient2 = boto3.client('s3')\n\ndef add_my_bucket(params, **kwargs):\n    if 'Bucket' not in params:\n        params['Bucket'] = 'amzn-s3-demo-bucket1'\n\ndef add_my_other_bucket(params, **kwargs):\n    if 'Bucket' not in params:\n        params['Bucket'] = 'amzn-s3-demo-bucket2'\n\nclient1.meta.events.register(\n    'provide-client-params.s3.ListObjectsV2', add_my_bucket)\nclient2.meta.events.register(\n    'provide-client-params.s3.ListObjectsV2', add_my_other_bucket)\n\nclient1_response = client1.list_objects_v2()\nclient2_response = client2.list_objects_v2()\n```\n\n----------------------------------------\n\nTITLE: Setting AWS Credentials and Account ID via Environment Variables in Shell\nDESCRIPTION: Demonstrates how to set AWS credentials and account ID using environment variables, which Boto3 can use to automatically construct account ID-based endpoints.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/configuration.rst#2025-04-21_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nexport AWS_ACCESS_KEY_ID=<ACCESS_KEY>\nexport AWS_SECRET_ACCESS_KEY=<SECRET_KEY>\nexport AWS_ACCOUNT_ID=<ACCOUNT_ID>\n```\n\n----------------------------------------\n\nTITLE: S3 Upload/Download with Customer-Provided Encryption Keys\nDESCRIPTION: Demonstrates using SSE-C encryption with customer-provided keys for S3 operations. Shows key generation, upload, and download processes with the same encryption key.\nSOURCE: https://github.com/boto/boto3/blob/develop/boto3/examples/s3.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\nimport os\n\nBUCKET = 'amzn-s3-demo-bucket'\nKEY = os.urandom(32)\ns3 = boto3.client('s3')\n\nprint(\"Uploading S3 object with SSE-C\")\ns3.put_object(Bucket=BUCKET,\n              Key='encrypt-key',\n              Body=b'foobar',\n              SSECustomerKey=KEY,\n              SSECustomerAlgorithm='AES256')\nprint(\"Done\")\n\n# Getting the object:\nprint(\"Getting S3 object...\")\n# Note how we're using the same ``KEY`` we\n# created earlier.\nresponse = s3.get_object(Bucket=BUCKET,\n                         Key='encrypt-key',\n                         SSECustomerKey=KEY,\n                         SSECustomerAlgorithm='AES256')\nprint(\"Done, response body:\")\nprint(response['Body'].read())\n```\n\n----------------------------------------\n\nTITLE: Iterating Over SQS Queues Using Boto3 Collection in Python\nDESCRIPTION: This snippet demonstrates how to use a Boto3 collection to iterate over all SQS queues. It creates an SQS resource and uses the 'all()' method to retrieve and print the URL of each queue.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/collections.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# SQS list all queues\nsqs = boto3.resource('sqs')\nfor queue in sqs.queues.all():\n    print(queue.url)\n```\n\n----------------------------------------\n\nTITLE: Chaining EC2 Instance Filters Using Boto3 Collection in Python\nDESCRIPTION: This example demonstrates the chainability of collection methods in Boto3. It creates multiple filtered collections of EC2 instances based on different criteria such as tenancy and instance type.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/collections.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# EC2 find instances\nec2 = boto3.resource('ec2')\nbase = ec2.instances.filter(InstanceIds=['id1', 'id2', 'id3'])\n\nfilters = [{\n    'Name': 'tenancy',\n    'Values': ['dedicated']\n}]\nfiltered1 = base.filter(Filters=filters)\n\n# Note, this does NOT modify the filters in ``filtered1``!\nfilters.append({'name': 'instance-type', 'value': 't1.micro'})\nfiltered2 = base.filter(Filters=filters)\n\nprint('All instances:')\nfor instance in base:\n    print(instance.id)\n\nprint('Dedicated instances:')\nfor instance in filtered1:\n    print(instance.id)\n\nprint('Dedicated micro instances:')\nfor instance in filtered2:\n    print(instance.id)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Method to S3 Client\nDESCRIPTION: Example demonstrating how to add a custom method to the S3 client class using the creating-client-class event.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/events.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom boto3.session import Session\n\ndef custom_method(self):\n    print('This is my custom method')\n\ndef add_custom_method(class_attributes, **kwargs):\n    class_attributes['my_method'] = custom_method\n\nsession = Session()\nsession.events.register('creating-client-class.s3', add_custom_method)\n\nclient = session.client('s3')\nclient.my_method()\n```\n\n----------------------------------------\n\nTITLE: Downloading a file from S3 using download_file method\nDESCRIPTION: This snippet demonstrates how to download a file from an S3 bucket to a local file using the download_file method from the boto3 S3 client. It requires specifying the bucket name, object name in the bucket, and the local file name.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/s3-example-download-file.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\ns3 = boto3.client('s3')\ns3.download_file('amzn-s3-demo-bucket', 'OBJECT_NAME', 'FILE_NAME')\n```\n\n----------------------------------------\n\nTITLE: Getting SQS Queue URL with Boto3\nDESCRIPTION: Shows how to retrieve the URL for an existing SQS queue by its name using the get_queue_url API.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/sqs-example-using-queues.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\n# Create SQS client\nsqs = boto3.client('sqs')\n\n# Get URL for SQS queue\nresponse = sqs.get_queue_url(QueueName='SQS_QUEUE_NAME')\n\nprint(response['QueueUrl'])\n```\n\n----------------------------------------\n\nTITLE: Using Client Exceptions Property for Service Exceptions in Python\nDESCRIPTION: This code snippet shows an alternative way to catch service-specific exceptions using the client's built-in exceptions property, which provides direct access to service-specific exception classes.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/error-handling.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nexcept client.exceptions.LimitExceedException as error:\n    logger.warn('API call limit exceeded; backing off and retrying...')\n```\n\n----------------------------------------\n\nTITLE: Creating Boto3 Session with Profile (Python)\nDESCRIPTION: Shows how to create a Boto3 Session using a specific profile from the shared credentials file. This allows for easy switching between different sets of credentials.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/credentials.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\nsession = boto3.Session(profile_name='dev')\ndev_s3_client = session.client('s3')\n```\n\n----------------------------------------\n\nTITLE: Downloading a file from S3 using download_fileobj method with file-like object\nDESCRIPTION: This snippet shows how to download a file from an S3 bucket to a file-like object using the download_fileobj method. It requires opening a local file in binary mode ('wb') and passing the file object to the method along with the bucket and object names.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/s3-example-download-file.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ns3 = boto3.client('s3')\nwith open('FILE_NAME', 'wb') as f:\n    s3.download_fileobj('amzn-s3-demo-bucket', 'OBJECT_NAME', f)\n```\n\n----------------------------------------\n\nTITLE: Inspecting Prepared Request with Boto3 Event System\nDESCRIPTION: Demonstrates how to use the 'before-send' event to inspect the prepared request before it's sent. It creates a function that prints the prepared request and registers it to the event system for the S3 ListBuckets operation.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/events.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\ns3 = boto3.client('s3')\n\n# Access the event system on the S3 client\nevent_system = s3.meta.events\n\n# Create a function that inspects the prepared request.\ndef inspect_request_before_send(request, **kwargs):\n    print(f'request: {request}')\n\n# Register the function to an event\nevent_system.register('before-send.s3.ListBuckets', inspect_request_before_send)\n\ns3.list_buckets()\n```\n\n----------------------------------------\n\nTITLE: Creating Scheduled CloudWatch Events Rule\nDESCRIPTION: Creates a CloudWatch Events rule that runs every 5 minutes using the put_rule method with Boto3.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/cw-example-events.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\n\n# Create CloudWatchEvents client\ncloudwatch_events = boto3.client('events')\n\n# Put an event rule\nresponse = cloudwatch_events.put_rule(\n    Name='DEMO_EVENT',\n    RoleArn='IAM_ROLE_ARN',\n    ScheduleExpression='rate(5 minutes)',\n    State='ENABLED'\n)\nprint(response['RuleArn'])\n```\n\n----------------------------------------\n\nTITLE: Listing CloudWatch Logs Subscription Filters\nDESCRIPTION: Python code to list existing subscription filters for a specified log group using the CloudWatch Logs paginator interface.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/cw-example-subscription-filters.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\n# Create CloudWatchLogs client\ncloudwatch_logs = boto3.client('logs')\n\n# List subscription filters through the pagination interface\npaginator = cloudwatch_logs.get_paginator('describe_subscription_filters')\nfor response in paginator.paginate(logGroupName='GROUP_NAME'):\n    print(response['subscriptionFilters'])\n```\n\n----------------------------------------\n\nTITLE: Querying DynamoDB Table by Username\nDESCRIPTION: Demonstrates querying a DynamoDB table using KeyConditionExpression to find items by username.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/dynamodb.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nresponse = table.query(\n    KeyConditionExpression=Key('username').eq('johndoe')\n)\nitems = response['Items']\nprint(items)\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Credentials in a Boto3 Session Object\nDESCRIPTION: Initialize a Boto3 Session object with AWS credentials passed as parameters. This creates a session with specific credentials that can be used to create multiple client instances.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/credentials.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\nsession = boto3.Session(\n    aws_access_key_id=ACCESS_KEY,\n    aws_secret_access_key=SECRET_KEY,\n    aws_session_token=SESSION_TOKEN\n)\n```\n\n----------------------------------------\n\nTITLE: Scanning DynamoDB Table by Age Filter\nDESCRIPTION: Shows how to scan a DynamoDB table using FilterExpression to find users below a certain age.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/dynamodb.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nresponse = table.scan(\n    FilterExpression=Attr('age').lt(27)\n)\nitems = response['Items']\nprint(items)\n```\n\n----------------------------------------\n\nTITLE: Customizing Boto3 Pagination Configuration in Python\nDESCRIPTION: This snippet shows how to customize pagination behavior using the PaginationConfig parameter, which allows control over the maximum number of items, starting position, and page size.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/paginators.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npaginator = client.get_paginator('list_objects_v2')\npage_iterator = paginator.paginate(Bucket='amzn-s3-demo-bucket',\n                               PaginationConfig={'MaxItems': 10})\n```\n\n----------------------------------------\n\nTITLE: Using Waiters with Boto3 Resources\nDESCRIPTION: Shows how to use waiters to poll for resource state changes. Waiters suspend execution until a resource reaches the target state or a failure occurs during polling.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/resources.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# S3: Wait for a bucket to exist.\nbucket.wait_until_exists()\n\n# EC2: Wait for an instance to reach the running state.\ninstance.wait_until_running()\n```\n\n----------------------------------------\n\nTITLE: Performing Resource Actions in Boto3\nDESCRIPTION: Shows how to call actions (methods that make service calls) on resource instances. Actions may return low-level responses, new resource instances, or lists of resource instances.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/resources.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# SQS Queue\nmessages = queue.receive_messages()\n\n# SQS Message\nfor message in messages:\n    message.delete()\n\n# S3 Object\nobj = s3.Object(bucket_name='amzn-s3-demo-bucket', key='test.py')\nresponse = obj.get()\ndata = response['Body'].read()\n```\n\n----------------------------------------\n\nTITLE: S3 Upload with Metadata Using ExtraArgs\nDESCRIPTION: Example of uploading a file to S3 with custom metadata using the ExtraArgs parameter.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/s3-uploading-files.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ns3.upload_file(\n    'FILE_NAME', 'amzn-s3-demo-bucket', 'OBJECT_NAME',\n    ExtraArgs={'Metadata': {'mykey': 'myvalue'}}\n)\n```\n\n----------------------------------------\n\nTITLE: Listing S3 Buckets with Boto3\nDESCRIPTION: Retrieves and displays a list of all existing S3 buckets in the AWS account using the Boto3 client. The code demonstrates basic bucket listing and response handling.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/s3-example-creating-buckets.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Retrieve the list of existing buckets\ns3 = boto3.client('s3')\nresponse = s3.list_buckets()\n\n# Output the bucket names\nprint('Existing buckets:')\nfor bucket in response['Buckets']:\n    print(f'  {bucket[\"Name\"]}')\n```\n\n----------------------------------------\n\nTITLE: Filtering S3 Objects with Server-Side Parameters in Python\nDESCRIPTION: This snippet demonstrates how to apply server-side filtering to paginated results by passing operation parameters like 'Prefix' to the underlying API calls.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/paginators.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\nclient = boto3.client('s3', region_name='us-west-2')\npaginator = client.get_paginator('list_objects_v2')\noperation_parameters = {'Bucket': 'amzn-s3-demo-bucket',\n                        'Prefix': 'foo/baz'}\npage_iterator = paginator.paginate(**operation_parameters)\nfor page in page_iterator:\n    print(page['Contents'])\n```\n\n----------------------------------------\n\nTITLE: Working with Sub-resources in Boto3\nDESCRIPTION: Demonstrates how to work with sub-resources, which share identifiers with their parent in a strict parent-child relationship. Examples show SQS Queue-Message and S3 Bucket-Object relationships.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/resources.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# SQS\nqueue = sqs.Queue(url='...')\nmessage = queue.Message(receipt_handle='...')\nprint(queue.url == message.queue_url)\nprint(message.receipt_handle)\n\n# S3\nobj = bucket.Object(key='new_file.txt')\nprint(obj.bucket_name)\nprint(obj.key)\n```\n\n----------------------------------------\n\nTITLE: Bash Script for Enforcing TLS 1.2\nDESCRIPTION: Bash script that downloads and compiles OpenSSL and Python with TLS 1.2 as minimum version. Disables SSL3, TLS 1.0, and TLS 1.1 support.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/security.rst#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n#!/usr/bin/env bash\nset -e\n\nOPENSSL_VERSION=\"1.1.1m\"\nOPENSSL_PREFIX=\"/opt/openssl-with-min-tls1_2\"\nPYTHON_VERSION=\"3.9.10\"\nPYTHON_PREFIX=\"/opt/python-with-min-tls1_2\"\n\n\ncurl -O \"https://www.openssl.org/source/openssl-$OPENSSL_VERSION.tar.gz\"\ntar -xzf \"openssl-$OPENSSL_VERSION.tar.gz\"\ncd openssl-$OPENSSL_VERSION\n./config --prefix=$OPENSSL_PREFIX no-ssl3 no-tls1 no-tls1_1 no-shared\nmake > /dev/null\nsudo make install_sw > /dev/null\n\n\ncd /tmp\ncurl -O \"https://www.python.org/ftp/python/$PYTHON_VERSION/Python-$PYTHON_VERSION.tgz\"\ntar -xzf \"Python-$PYTHON_VERSION.tgz\"\ncd Python-$PYTHON_VERSION\n./configure --prefix=$PYTHON_PREFIX --with-openssl=$OPENSSL_PREFIX --disable-shared > /dev/null\nmake > /dev/null\nsudo make install > /dev/null\n```\n\n----------------------------------------\n\nTITLE: Configuring Boto3 Client with Custom Endpoint Routing in Python\nDESCRIPTION: Demonstrates how to configure a Boto3 client with a custom account ID endpoint mode using the Config object, allowing control over when account ID-based endpoints are used.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/configuration.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\nfrom botocore.config import Config\n\nmy_config = Config(\n    account_id_endpoint_mode = 'disabled'\n)\n\nclient = boto3.client('dynamodb', config=my_config)\n```\n\n----------------------------------------\n\nTITLE: S3 Upload/Download with SSE-KMS Encryption\nDESCRIPTION: Shows how to upload and download objects using server-side encryption with AWS KMS. Demonstrates using both default and custom KMS keys for encryption.\nSOURCE: https://github.com/boto/boto3/blob/develop/boto3/examples/s3.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\nimport os\n\nBUCKET = 'amzn-s3-demo-bucket'\ns3 = boto3.client('s3')\nkeyid = '<the key id>'\n\nprint(\"Uploading S3 object with SSE-KMS\")\ns3.put_object(Bucket=BUCKET,\n              Key='encrypt-key',\n              Body=b'foobar',\n              ServerSideEncryption='aws:kms',\n              # Optional: SSEKMSKeyId\n              SSEKMSKeyId=keyid)\nprint(\"Done\")\n\n# Getting the object:\nprint(\"Getting S3 object...\")\nresponse = s3.get_object(Bucket=BUCKET,\n                         Key='encrypt-key')\nprint(\"Done, response body:\")\nprint(response['Body'].read())\n```\n\n----------------------------------------\n\nTITLE: Creating SQS Queue with Boto3\nDESCRIPTION: Demonstrates creating a new SQS queue with specified attributes including delay seconds and message retention period. Returns the URL of the newly created queue.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/sqs-example-using-queues.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\n# Create SQS client\nsqs = boto3.client('sqs')\n\n# Create a SQS queue\nresponse = sqs.create_queue(\n    QueueName='SQS_QUEUE_NAME',\n    Attributes={\n        'DelaySeconds': '60',\n        'MessageRetentionPeriod': '86400'\n    }\n)\n\nprint(response['QueueUrl'])\n```\n\n----------------------------------------\n\nTITLE: Setting Client Context Parameters for Boto3 Clients in Python\nDESCRIPTION: This example shows how to set client-specific context parameters when creating a Boto3 client using a Config object.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/configuration.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\nfrom botocore.config import Config\n\nmy_config = Config(\n    region_name='us-east-2',\n    client_context_params={\n        'my_great_context_param': 'foo'\n    }\n)\n\nclient = boto3.client('kinesis', config=my_config)\n```\n\n----------------------------------------\n\nTITLE: Thread-safe Resource Usage with Boto3\nDESCRIPTION: Demonstrates how to safely use Boto3 resources in a multithreaded environment. Resource instances are not thread-safe and should be created separately for each thread or process.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/resources.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\nimport boto3.session\nimport threading\n\nclass MyTask(threading.Thread):\n    def run(self):\n        # Here we create a new session per thread\n        session = boto3.session.Session()\n\n        # Next, we create a resource client using our thread's session object\n        s3 = session.resource('s3')\n\n        # Put your thread-safe code here\n```\n\n----------------------------------------\n\nTITLE: Generating Pip Requirements Lockfile with pip-compile\nDESCRIPTION: The command used to generate the requirements lockfile using pip-compile. It enables the --allow-unsafe flag, generates package hashes, and specifies an output file.\nSOURCE: https://github.com/boto/boto3/blob/develop/requirements-dev-lock.txt#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip-compile --allow-unsafe --generate-hashes --output-file=requirements-dev-lock.txt requirements-dev.txt\n```\n\n----------------------------------------\n\nTITLE: Listing Email Templates with Amazon SES in Python\nDESCRIPTION: This snippet demonstrates how to list all email templates associated with your AWS account in the current region using the SES list_templates() method. It limits the results to 10 items.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/ses-template.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\n# Create SES client\nses = boto3.client('ses')\n\nresponse = ses.list_templates(\n  MaxItems=10\n)\n\nprint(response)\n```\n\n----------------------------------------\n\nTITLE: Creating CloudWatch Alarm with Actions Enabled using Boto3\nDESCRIPTION: This snippet demonstrates how to create a CloudWatch alarm with actions enabled using the put_metric_alarm method. It sets up an alarm that triggers when CPU utilization exceeds 70% and initiates a reboot action on an EC2 instance.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/cw-example-using-alarms.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\n# Create CloudWatch client\ncloudwatch = boto3.client('cloudwatch')\n\n# Create alarm with actions enabled\ncloudwatch.put_metric_alarm(\n    AlarmName='Web_Server_CPU_Utilization',\n    ComparisonOperator='GreaterThanThreshold',\n    EvaluationPeriods=1,\n    MetricName='CPUUtilization',\n    Namespace='AWS/EC2',\n    Period=60,\n    Statistic='Average',\n    Threshold=70.0,\n    ActionsEnabled=True,\n    AlarmActions=[\n      'arn:aws:swf:us-west-2:{CUSTOMER_ACCOUNT}:action/actions/AWS_EC2.InstanceId.Reboot/1.0'\n    ],\n    AlarmDescription='Alarm when server CPU exceeds 70%',\n    Dimensions=[\n        {\n          'Name': 'InstanceId',\n          'Value': 'INSTANCE_ID'\n        },\n    ],\n    Unit='Seconds'\n)\n```\n\n----------------------------------------\n\nTITLE: Listing SQS Queues with Boto3\nDESCRIPTION: Shows how to list all existing SQS queues in your AWS account using the Boto3 list_queues API. Returns a list of queue URLs.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/sqs-example-using-queues.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\n# Create SQS client\nsqs = boto3.client('sqs')\n\n# List SQS queues\nresponse = sqs.list_queues()\n\nprint(response['QueueUrls'])\n```\n\n----------------------------------------\n\nTITLE: Creating EC2 Security Group with Ingress Rules using Boto3\nDESCRIPTION: This snippet shows how to create a new EC2 security group within a VPC and configure it with HTTP and SSH ingress rules. It first retrieves the VPC ID, creates the security group, and then adds the ingress permissions for ports 80 and 22.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/ec2-example-security-group.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\nfrom botocore.exceptions import ClientError\n\nec2 = boto3.client('ec2')\n\nresponse = ec2.describe_vpcs()\nvpc_id = response.get('Vpcs', [{}])[0].get('VpcId', '')\n\ntry:\n    response = ec2.create_security_group(GroupName='SECURITY_GROUP_NAME',\n                                         Description='DESCRIPTION',\n                                         VpcId=vpc_id)\n    security_group_id = response['GroupId']\n    print('Security Group Created %s in vpc %s.' % (security_group_id, vpc_id))\n\n    data = ec2.authorize_security_group_ingress(\n        GroupId=security_group_id,\n        IpPermissions=[\n            {'IpProtocol': 'tcp',\n             'FromPort': 80,\n             'ToPort': 80,\n             'IpRanges': [{'CidrIp': '0.0.0.0/0'}]},\n            {'IpProtocol': 'tcp',\n             'FromPort': 22,\n             'ToPort': 22,\n             'IpRanges': [{'CidrIp': '0.0.0.0/0'}]}\n        ])\n    print('Ingress Successfully Set %s' % data)\nexcept ClientError as e:\n    print(e)\n```\n\n----------------------------------------\n\nTITLE: Filtering S3 Objects with Prefix Using Boto3 Collection in Python\nDESCRIPTION: This code snippet shows how to filter S3 objects using a prefix. It iterates over all buckets and then filters objects within each bucket that have the prefix 'photos/'.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/collections.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# S3 list all keys with the prefix 'photos/'\ns3 = boto3.resource('s3')\nfor bucket in s3.buckets.all():\n    for obj in bucket.objects.filter(Prefix='photos/'):\n        print('{0}:{1}'.format(bucket.name, obj.key))\n```\n\n----------------------------------------\n\nTITLE: Listing S3 Bucket Objects with Boto3\nDESCRIPTION: Demonstrates how to list all objects in an S3 bucket using the Boto3 resource interface. Uses the bucket.objects.all() method to iterate through bucket contents.\nSOURCE: https://github.com/boto/boto3/blob/develop/boto3/examples/s3.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\ns3 = boto3.resource('s3')\nbucket = s3.Bucket('amzn-s3-demo-bucket')\nfor obj in bucket.objects.all():\n    print(obj.key)\n```\n\n----------------------------------------\n\nTITLE: Retrieving an Email Template with Amazon SES in Python\nDESCRIPTION: This snippet shows how to retrieve an existing email template using the SES get_template() method. It requires only the template name as a parameter.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/ses-template.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\n# Create SES client\nses = boto3.client('ses')\n\nresponse = ses.get_template(\n  TemplateName = 'TEMPLATE_NAME'\n)\n\nprint(response)\n```\n\n----------------------------------------\n\nTITLE: Configuring Multipart Transfers for S3 Upload in Python using Boto3\nDESCRIPTION: This snippet demonstrates how to configure a multipart transfer for uploading a file to S3 using boto3. It sets a custom multipart threshold of 5GB using the TransferConfig object.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/s3.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\nfrom boto3.s3.transfer import TransferConfig\n\n# Set the desired multipart threshold value (5GB)\nGB = 1024 ** 3\nconfig = TransferConfig(multipart_threshold=5*GB)\n\n# Perform the transfer\ns3 = boto3.client('s3')\ns3.upload_file('FILE_NAME', 'amzn-s3-demo-bucket', 'OBJECT_NAME', Config=config)\n```\n\n----------------------------------------\n\nTITLE: Setting S3 Bucket Website Configuration using Boto3\nDESCRIPTION: Shows how to set a website configuration for an S3 bucket using put_bucket_website method. The configuration specifies the index document and error document for the static website.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/s3-example-static-web-host.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Define the website configuration\nwebsite_configuration = {\n    'ErrorDocument': {'Key': 'error.html'},\n    'IndexDocument': {'Suffix': 'index.html'},\n}\n\n# Set the website configuration\ns3 = boto3.client('s3')\ns3.put_bucket_website(Bucket='amzn-s3-demo-website-bucket',\n                      WebsiteConfiguration=website_configuration)\n```\n\n----------------------------------------\n\nTITLE: Iterating Through S3 Buckets and Keys in Boto 2.x vs Boto3\nDESCRIPTION: Shows how iteration differs between versions - Boto 2.x makes buckets and keys directly iterable, while Boto3 uses collection attributes that provide iterators.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/migrations3.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Boto 2.x\nfor bucket in s3_connection:\n    for key in bucket:\n        print(key.name)\n\n# Boto3\nfor bucket in s3.buckets.all():\n    for key in bucket.objects.all():\n        print(key.key)\n```\n\n----------------------------------------\n\nTITLE: Limiting S3 Bucket Results Using Boto3 Collection in Python\nDESCRIPTION: This snippet shows how to limit the number of items returned from a collection using the 'limit()' method. It iterates over the first ten S3 buckets.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/collections.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# S3 iterate over first ten buckets\nfor bucket in s3.buckets.limit(10):\n    print(bucket.name)\n```\n\n----------------------------------------\n\nTITLE: Documenting Boto3 Collections Module in ReStructuredText\nDESCRIPTION: ReStructuredText directive for auto-generating documentation from the boto3.resources.collection Python module. Includes both documented and undocumented members.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/reference/core/collections.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: boto3.resources.collection\n   :members:\n   :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Creating an EC2 Client with Custom Retry Configuration in Boto3\nDESCRIPTION: Complete example showing how to import the necessary modules, create a Config object with custom retry settings, and instantiate an EC2 client with those settings.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/retries.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\nfrom botocore.config import Config\n\nconfig = Config(\n   retries = {\n      'max_attempts': 10,\n      'mode': 'standard'\n   }\n)\n\nec2 = boto3.client('ec2', config=config)\n```\n\n----------------------------------------\n\nTITLE: Configuring Shared Credentials File (INI)\nDESCRIPTION: Examples of how to set up the shared credentials file (~/.aws/credentials). It shows both a minimal configuration and a multi-profile configuration.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/credentials.rst#2025-04-21_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\n[default]\naws_access_key_id=foo\naws_secret_access_key=bar\naws_session_token=baz\n```\n\nLANGUAGE: ini\nCODE:\n```\n[default]\naws_access_key_id=foo\naws_secret_access_key=bar\n\n[dev]\naws_access_key_id=foo2\naws_secret_access_key=bar2\n\n[prod]\naws_access_key_id=foo3\naws_secret_access_key=bar3\n```\n\n----------------------------------------\n\nTITLE: Creating a CloudWatch Metric Alarm using Boto3\nDESCRIPTION: Shows how to create or update a CloudWatch metric alarm with specific thresholds and conditions. This example creates an alarm that monitors CPU utilization for an EC2 instance, triggering when the average CPU exceeds 70% over a 60-second period.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/cw-example-creating-alarms.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\n# Create CloudWatch client\ncloudwatch = boto3.client('cloudwatch')\n\n# Create alarm\ncloudwatch.put_metric_alarm(\n    AlarmName='Web_Server_CPU_Utilization',\n    ComparisonOperator='GreaterThanThreshold',\n    EvaluationPeriods=1,\n    MetricName='CPUUtilization',\n    Namespace='AWS/EC2',\n    Period=60,\n    Statistic='Average',\n    Threshold=70.0,\n    ActionsEnabled=False,\n    AlarmDescription='Alarm when server CPU exceeds 70%',\n    Dimensions=[\n        {\n          'Name': 'InstanceId',\n          'Value': 'INSTANCE_ID'\n        },\n    ],\n    Unit='Seconds'\n)\n```\n\n----------------------------------------\n\nTITLE: DynamoDB Batch Writing\nDESCRIPTION: Demonstrates batch writing capabilities for efficiently adding multiple items to a DynamoDB table, including deduplication functionality.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/dynamodb.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nwith table.batch_writer() as batch:\n    batch.put_item(\n        Item={\n            'account_type': 'standard_user',\n            'username': 'johndoe',\n            'first_name': 'John',\n            'last_name': 'Doe',\n            'age': 25,\n            'address': {\n                'road': '1 Jefferson Street',\n                'city': 'Los Angeles',\n                'state': 'CA',\n                'zipcode': 90001\n            }\n        }\n    )\n    # ... additional batch operations ...\n```\n\n----------------------------------------\n\nTITLE: Creating Basic S3 Presigned URL with Python\nDESCRIPTION: Generates a presigned URL to share an S3 object with temporary access. Takes bucket name, object name, and expiration time as parameters, returning the presigned URL or None on error.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/s3-presigned-urls.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport logging\nimport boto3\nfrom botocore.exceptions import ClientError\n\n\ndef create_presigned_url(bucket_name, object_name, expiration=3600):\n    \"\"\"Generate a presigned URL to share an S3 object\n\n    :param bucket_name: string\n    :param object_name: string\n    :param expiration: Time in seconds for the presigned URL to remain valid\n    :return: Presigned URL as string. If error, returns None.\n    \"\"\"\n\n    # Generate a presigned URL for the S3 object\n    s3_client = boto3.client('s3')\n    try:\n        response = s3_client.generate_presigned_url(\n            'get_object',\n            Params={'Bucket': bucket_name, 'Key': object_name},\n            ExpiresIn=expiration,\n        )\n    except ClientError as e:\n        logging.error(e)\n        return None\n\n    # The response contains the presigned URL\n    return response\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Assume Role Profile in Config File\nDESCRIPTION: Configure an assume role profile in the AWS config file to allow Boto3 to automatically make AssumeRole calls to AWS STS. This example shows minimal configuration needed for cross-account access.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/credentials.rst#2025-04-21_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n# In ~/.aws/credentials:\n[development]\naws_access_key_id=foo\naws_access_key_id=bar\n\n# In ~/.aws/config\n[profile crossaccount]\nrole_arn=arn:aws:iam:...\nsource_profile=development\n```\n\n----------------------------------------\n\nTITLE: Enabling Long Polling on Message Receipt in SQS using Boto3\nDESCRIPTION: This snippet illustrates how to enable long polling when receiving messages from an Amazon SQS queue using the Boto3 receive_message method. It sets the WaitTimeSeconds parameter to 20 seconds for the message receipt operation.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/sqs-example-long-polling.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\n# Create SQS client\nsqs = boto3.client('sqs')\n\nqueue_url = 'SQS_QUEUE_URL'\n\n# Long poll for message on provided SQS queue\nresponse = sqs.receive_message(\n    QueueUrl=queue_url,\n    AttributeNames=[\n        'SentTimestamp'\n    ],\n    MaxNumberOfMessages=1,\n    MessageAttributeNames=[\n        'All'\n    ],\n    WaitTimeSeconds=20\n)\n\nprint(response)\n```\n\n----------------------------------------\n\nTITLE: Creating Default Session with Boto3\nDESCRIPTION: Demonstrates how to use the default session to create AWS service clients and resources. This is the simplest way to interact with AWS services using Boto3.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/session.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\n# Using the default session\nsqs = boto3.client('sqs')\ns3 = boto3.resource('s3')\n```\n\n----------------------------------------\n\nTITLE: S3 Presigned POST URL HTML Form\nDESCRIPTION: HTML form template for uploading files to S3 using a presigned POST URL. Includes hidden fields for required AWS authentication values.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/s3-presigned-urls.rst#2025-04-21_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n  </head>\n  <body>\n    <!-- Copy the 'url' value returned by S3Client.generate_presigned_post() -->\n    <form action=\"URL_VALUE\" method=\"post\" enctype=\"multipart/form-data\">\n      <!-- Copy the 'fields' key:values returned by S3Client.generate_presigned_post() -->\n      <input type=\"hidden\" name=\"key\" value=\"VALUE\" />\n      <input type=\"hidden\" name=\"AWSAccessKeyId\" value=\"VALUE\" />\n      <input type=\"hidden\" name=\"policy\" value=\"VALUE\" />\n      <input type=\"hidden\" name=\"signature\" value=\"VALUE\" />\n    File:\n      <input type=\"file\"   name=\"file\" /> <br />\n      <input type=\"submit\" name=\"submit\" value=\"Upload to Amazon S3\" />\n    </form>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Catching Botocore Exceptions with Low-Level Client in Python\nDESCRIPTION: This code example shows how to catch and handle botocore exceptions when using a low-level AWS client. It specifically handles ClientError and ParamValidationError exceptions.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/error-handling.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport botocore\nimport boto3\n\nclient = boto3.client('aws_service_name')\n\ntry:\n    client.some_api_call(SomeParam='some_param')\n\nexcept botocore.exceptions.ClientError as error:\n    # Put your error handling logic here\n    raise error\n\nexcept botocore.exceptions.ParamValidationError as error:\n    raise ValueError('The parameters you provided are incorrect: {}'.format(error))\n```\n\n----------------------------------------\n\nTITLE: Creating Expanded S3 Presigned URL with Python\nDESCRIPTION: Generates presigned URLs for various S3 operations beyond basic object access. Supports different client methods and custom parameters.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/s3-presigned-urls.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport logging\nimport boto3\nfrom botocore.exceptions import ClientError\n\n\ndef create_presigned_url_expanded(\n    client_method_name, method_parameters=None, expiration=3600, http_method=None\n):\n    \"\"\"Generate a presigned URL to invoke an S3.Client method\n\n    Not all the client methods provided in the AWS Python SDK are supported.\n\n    :param client_method_name: Name of the S3.Client method, e.g., 'list_buckets'\n    :param method_parameters: Dictionary of parameters to send to the method\n    :param expiration: Time in seconds for the presigned URL to remain valid\n    :param http_method: HTTP method to use (GET, etc.)\n    :return: Presigned URL as string. If error, returns None.\n    \"\"\"\n\n    # Generate a presigned URL for the S3 client method\n    s3_client = boto3.client('s3')\n    try:\n        response = s3_client.generate_presigned_url(\n            ClientMethod=client_method_name,\n            Params=method_parameters,\n            ExpiresIn=expiration,\n            HttpMethod=http_method,\n        )\n    except ClientError as e:\n        logging.error(e)\n        return None\n\n    # The response contains the presigned URL\n    return response\n```\n\n----------------------------------------\n\nTITLE: Attaching IAM Role Policy with Boto3\nDESCRIPTION: Attaches a managed policy to an IAM role using the attach_role_policy API. This adds the managed policy's permissions to the role's access policy.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/iam-example-policies.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\n# Create IAM client\niam = boto3.client('iam')\n\n# Attach a role policy\niam.attach_role_policy(\n    PolicyArn='arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess',\n    RoleName='AmazonDynamoDBFullAccess'\n)\n```\n\n----------------------------------------\n\nTITLE: Accessing Client from Resource in Boto3\nDESCRIPTION: Example showing how to access the low-level client from an existing boto3 resource object.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/clients.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Create the resource\nsqs_resource = boto3.resource('sqs')\n\n# Get the client from the resource\nsqs = sqs_resource.meta.client\n```\n\n----------------------------------------\n\nTITLE: Chaining Multiple Filter Conditions\nDESCRIPTION: Example of using multiple conditions in a FilterExpression with logical operators to find specific users.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/dynamodb.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nresponse = table.scan(\n    FilterExpression=Attr('first_name').begins_with('J') & Attr('account_type').eq('super_user')\n)\nitems = response['Items']\nprint(items)\n```\n\n----------------------------------------\n\nTITLE: Filtering S3 Objects by Last Modified Time\nDESCRIPTION: Demonstrates how to filter S3 objects based on their last modified timestamp using JMESPath expressions with the S3 paginator.\nSOURCE: https://github.com/boto/boto3/blob/develop/boto3/examples/s3.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\ns3 = boto3.client(\"s3\")\n\ns3_paginator = s3.get_paginator('list_objects_v2')\ns3_iterator = s3_paginator.paginate(Bucket='amzn-s3-demo-bucket')\n\nfiltered_iterator = s3_iterator.search(\n    \"Contents[?to_string(LastModified)>='\\\"2022-01-05 08:05:37+00:00\\\"'].Key\"\n)\n\nfor key_data in filtered_iterator:\n    print(key_data)\n```\n\n----------------------------------------\n\nTITLE: Wildcard Event Matching in Boto3 Python\nDESCRIPTION: This snippet shows how to use wildcard matching in Boto3's event system. It demonstrates registering a handler to all S3 client methods using the '*' notation.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/events.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\ns3 = boto3.client('s3')\n\n# Access the event system on the S3 client\nevent_system = s3.meta.events\n\ndef add_my_wildcard_bucket(params, **kwargs):\n    if 'Bucket' not in params:\n        params['Bucket'] = 'amzn-s3-demo-bucket'\n\nevent_system.register('provide-client-params.s3.*', add_my_wildcard_bucket)\nresponse = s3.list_objects_v2()\n```\n\n----------------------------------------\n\nTITLE: Creating S3 Presigned POST URL with Python\nDESCRIPTION: Generates a presigned POST URL for file uploads to S3. Returns both the URL and required form fields for the POST request.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/s3-presigned-urls.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport logging\nimport boto3\nfrom botocore.exceptions import ClientError\n\n\ndef create_presigned_post(\n    bucket_name, object_name, fields=None, conditions=None, expiration=3600\n):\n    \"\"\"Generate a presigned URL S3 POST request to upload a file\n\n    :param bucket_name: string\n    :param object_name: string\n    :param fields: Dictionary of prefilled form fields\n    :param conditions: List of conditions to include in the policy\n    :param expiration: Time in seconds for the presigned URL to remain valid\n    :return: Dictionary with the following keys:\n        url: URL to post to\n        fields: Dictionary of form fields and values to submit with the POST\n    :return: None if error.\n    \"\"\"\n\n    # Generate a presigned S3 POST URL\n    s3_client = boto3.client('s3')\n    try:\n        response = s3_client.generate_presigned_post(\n            bucket_name,\n            object_name,\n            Fields=fields,\n            Conditions=conditions,\n            ExpiresIn=expiration,\n        )\n    except ClientError as e:\n        logging.error(e)\n        return None\n\n    # The response contains the presigned URL and required fields\n    return response\n```\n\n----------------------------------------\n\nTITLE: Configuring Boto2 Credentials File (INI)\nDESCRIPTION: Shows the format for the Boto2 config file, which can be used for backwards compatibility. Only the [Credentials] section is used by Boto3.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/credentials.rst#2025-04-21_snippet_10\n\nLANGUAGE: ini\nCODE:\n```\n# Example ~/.boto file\n[Credentials]\naws_access_key_id = foo\naws_secret_access_key = bar\n```\n\n----------------------------------------\n\nTITLE: Performing Batch Delete on S3 Objects Using Boto3 Collection in Python\nDESCRIPTION: This snippet shows how to perform a batch action on S3 objects. It deletes all objects in a specified bucket using the 'delete()' method on the objects collection.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/collections.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# S3 delete everything in `amzn-s3-demo-bucket`\ns3 = boto3.resource('s3')\ns3.Bucket('amzn-s3-demo-bucket').objects.delete()\n```\n\n----------------------------------------\n\nTITLE: Decrypting Data Key with AWS KMS in Python\nDESCRIPTION: This function decrypts an encrypted data key using AWS KMS. It creates a KMS client using boto3, attempts to decrypt the key, and returns the plaintext key encoded in base64. If an error occurs during decryption, it logs the error and returns None.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/kms-example-encrypt-decrypt-file.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nkms_client = boto3.client('kms')\ntry:\n    response = kms_client.decrypt(CiphertextBlob=data_key_encrypted)\nexcept ClientError as e:\n    logging.error(e)\n    return None\n\n# Return plaintext base64-encoded binary data key\nreturn base64.b64encode((response['Plaintext']))\n```\n\n----------------------------------------\n\nTITLE: Restoring Glacier Objects with Boto3\nDESCRIPTION: Demonstrates how to restore objects from Glacier storage class, check restoration status, and handle ongoing restoration requests. Uses storage_class and restore attributes to manage the process.\nSOURCE: https://github.com/boto/boto3/blob/develop/boto3/examples/s3.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\ns3 = boto3.resource('s3')\nbucket = s3.Bucket('amzn-s3-demo-bucket')\nfor obj_sum in bucket.objects.all():\n    obj = s3.Object(obj_sum.bucket_name, obj_sum.key)\n    if obj.storage_class == 'GLACIER':\n        if obj.restore is None:\n            print('Submitting restoration request: %s' % obj.key)\n            obj.restore_object(RestoreRequest={'Days': 1})\n        elif 'ongoing-request=\"true\"' in obj.restore:\n            print('Restoration in-progress: %s' % obj.key)\n        elif 'ongoing-request=\"false\"' in obj.restore:\n            print('Restoration complete: %s' % obj.key)\n```\n\n----------------------------------------\n\nTITLE: Creating VPC Resources in Boto 2.x and Boto3\nDESCRIPTION: This snippet shows how to create VPC resources such as a VPC, subnet, and internet gateway. The process is similar in both Boto 2.x and Boto3, with Boto3 using resource objects for a more object-oriented approach.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/migrationec2.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Boto 2.x\nvpc = vpc_connection.create_vpc('10.0.0.0/24')\nsubnet = vpc_connection.create_subnet(vpc.id, '10.0.0.0/25')\ngateway = vpc_connection.create_internet_gateway()\n\n# Boto3\nvpc = ec2.create_vpc(CidrBlock='10.0.0.0/24')\nsubnet = vpc.create_subnet(CidrBlock='10.0.0.0/25')\ngateway = ec2.create_internet_gateway()\n```\n\n----------------------------------------\n\nTITLE: Using S3 Presigned POST URL with Python Requests\nDESCRIPTION: Demonstrates how to use a presigned POST URL to upload a file to S3 using the Python requests library.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/s3-presigned-urls.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport requests  # To install: pip install requests\n\n# Generate a presigned S3 POST URL\nobject_name = 'OBJECT_NAME'\nresponse = create_presigned_post('amzn-s3-demo-bucket', object_name)\nif response is None:\n    exit(1)\n\n# Demonstrate how another Python program can use the presigned URL to upload a file\nwith open(object_name, 'rb') as f:\n    files = {'file': (object_name, f)}\n    http_response = requests.post(response['url'], data=response['fields'], files=files)\n# If successful, returns HTTP status code 204\nlogging.info(f'File upload HTTP status code: {http_response.status_code}')\n```\n\n----------------------------------------\n\nTITLE: Custom Retry Behavior with Boto3 Event System\nDESCRIPTION: Shows how to use the 'needs-retry' event to define custom retry behavior. It creates a handler function that determines retry behavior based on custom logic and registers it to the event system.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/events.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\ns3 = boto3.client('s3')\n\n# Access the event system on the S3 client\nevent_system = s3.meta.events\n\n# Create a handler that determines retry behavior.\ndef needs_retry_handler(**kwargs):\n    # Implement custom retry logic\n    if some_condition:\n        return None\n    else:\n        return some_delay\n\n# Register the function to an event\nevent_system.register('needs-retry', needs_retry_handler)\n\ns3.list_buckets()\n```\n\n----------------------------------------\n\nTITLE: Accessing Existing SQS Queue\nDESCRIPTION: Shows how to look up and access an existing SQS queue by name, plus how to list all available queues.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/sqs.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Get the service resource\nsqs = boto3.resource('sqs')\n\n# Get the queue. This returns an SQS.Queue instance\nqueue = sqs.get_queue_by_name(QueueName='test')\n\n# You can now access identifiers and attributes\nprint(queue.url)\nprint(queue.attributes.get('DelaySeconds'))\n\n# Print out each queue name, which is part of its ARN\nfor queue in sqs.queues.all():\n    print(queue.url)\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy Servers for Boto3 Clients in Python\nDESCRIPTION: This example shows how to set up proxy servers for HTTP and HTTPS protocols when creating a Boto3 client using a Config object.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/configuration.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\nfrom botocore.config import Config\n\nproxy_definitions = {\n    'http': 'http://proxy.amazon.com:6502',\n    'https': 'https://proxy.amazon.org:2010'\n}\n\nmy_config = Config(\n    region_name='us-east-2',\n    signature_version='v4',\n    proxies=proxy_definitions\n)\n\nclient = boto3.client('kinesis', config=my_config)\n```\n\n----------------------------------------\n\nTITLE: Creating EC2 Key Pair with Boto3\nDESCRIPTION: Shows how to create a new 2048-bit RSA key pair in EC2. The method returns the private key which needs to be saved securely. Amazon EC2 stores only the public key.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/ec2-example-key-pairs.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\nec2 = boto3.client('ec2')\nresponse = ec2.create_key_pair(KeyName='KEY_PAIR_NAME')\nprint(response)\n```\n\n----------------------------------------\n\nTITLE: Disabling CloudWatch Alarm Actions using Boto3\nDESCRIPTION: This snippet shows how to disable actions for specified CloudWatch alarms using the disable_alarm_actions method. When an alarm's actions are disabled, they won't execute when the alarm state changes.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/cw-example-using-alarms.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\n# Create CloudWatch client\ncloudwatch = boto3.client('cloudwatch')\n\n# Disable alarm\ncloudwatch.disable_alarm_actions(\n  AlarmNames=['Web_Server_CPU_Utilization'],\n)\n```\n\n----------------------------------------\n\nTITLE: Creating an IAM User with Boto3 in Python\nDESCRIPTION: This snippet demonstrates how to create a new IAM user using the create_user method of the IAM client in Boto3. It requires the Boto3 library and valid AWS credentials.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/iam-example-managing-users.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\n# Create IAM client\niam = boto3.client('iam')\n\n# Create user\nresponse = iam.create_user(\n    UserName='IAM_USER_NAME'\n)\n\nprint(response)\n```\n\n----------------------------------------\n\nTITLE: Creating KMS Customer Master Key in Python\nDESCRIPTION: Function to create a new AWS KMS Customer Master Key (CMK) with a specified description. It returns the key ID and ARN of the created CMK.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/kms-example-encrypt-decrypt-file.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef create_cmk(desc='Customer Master Key'):\n    \"\"\"Create a KMS Customer Master Key\n\n    The created CMK is a Customer-managed key stored in AWS KMS.\n\n    :param desc: key description\n    :return Tuple(KeyId, KeyArn) where:\n        KeyId: AWS globally-unique string ID\n        KeyArn: Amazon Resource Name of the CMK\n    :return Tuple(None, None) if error\n    \"\"\"\n\n    # Create CMK\n    kms_client = boto3.client('kms')\n    try:\n        response = kms_client.create_key(Description=desc)\n    except ClientError as e:\n        logging.error(e)\n        return None, None\n\n    # Return the key ID and ARN\n    return response['KeyMetadata']['KeyId'], response['KeyMetadata']['Arn']\n```\n\n----------------------------------------\n\nTITLE: Passing Additional Parameters to Resource Actions\nDESCRIPTION: Demonstrates how to pass additional parameters to resource actions using keyword arguments. Resource identifiers are automatically included as parameters.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/resources.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# SQS Service\nqueue = sqs.get_queue_by_name(QueueName='test')\n\n# SQS Queue\nqueue.send_message(MessageBody='hello')\n```\n\n----------------------------------------\n\nTITLE: S3 Upload with Custom ACLs\nDESCRIPTION: Example of uploading a file to S3 with multiple custom access control lists using ExtraArgs.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/s3-uploading-files.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ns3.upload_file(\n    'FILE_NAME', 'amzn-s3-demo-bucket', 'OBJECT_NAME',\n    ExtraArgs={\n        'GrantRead': 'uri=\"http://acs.amazonaws.com/groups/global/AllUsers\"',\n        'GrantFullControl': 'id=\"01234567890abcdefg\"',\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Creating an Email Template with Amazon SES in Python\nDESCRIPTION: This snippet demonstrates how to create an email template using the SES create_template() method. It sets the template name, subject line, text content, and HTML content.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/ses-template.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\n# Create SES client\nses = boto3.client('ses')\n\nresponse = ses.create_template(\n  Template = {\n    'TemplateName' : 'TEMPLATE_NAME',\n    'SubjectPart'  : 'SUBJECT_LINE',\n    'TextPart'     : 'TEXT_CONTENT',\n    'HtmlPart'     : 'HTML_CONTENT'\n  }\n)\n\n\nprint(response)\n```\n\n----------------------------------------\n\nTITLE: Creating S3 Connection in Boto 2.x vs Boto3\nDESCRIPTION: Compares how to establish a connection to Amazon S3 in Boto 2.x using connect_s3() versus Boto3 using the resource interface.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/migrations3.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Boto 2.x\nimport boto\ns3_connection = boto.connect_s3()\n\n# Boto3\nimport boto3\ns3 = boto3.resource('s3')\n```\n\n----------------------------------------\n\nTITLE: Deleting an IAM User with Boto3 in Python\nDESCRIPTION: This snippet shows how to delete an IAM user using the delete_user method of the IAM client in Boto3. The user must not belong to any groups or have any access keys, signing certificates, or attached policies.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/iam-example-managing-users.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\n# Create IAM client\niam = boto3.client('iam')\n\n# Delete a user\niam.delete_user(\n    UserName='IAM_USER_NAME'\n)\n```\n\n----------------------------------------\n\nTITLE: Downloading Specific S3 Object Version\nDESCRIPTION: Shows how to download a specific version of an S3 object using the VersionId parameter with download_file method.\nSOURCE: https://github.com/boto/boto3/blob/develop/boto3/examples/s3.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\ns3 = boto3.client('s3')\n\ns3.download_file(\n    \"amzn-s3-demo-bucket\", \"key-name\", \"tmp.txt\",\n    ExtraArgs={\"VersionId\": \"my-version-id\"}\n)\n```\n\n----------------------------------------\n\nTITLE: Accessing References to Related Resources\nDESCRIPTION: Shows how to access references to related resource instances. References represent many-to-one or one-to-one relationships that don't share identifiers with the parent resource.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/resources.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# EC2 Instance\ninstance.subnet\ninstance.vpc\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Queue for Dead-Letter Queue in Amazon SQS using Boto3\nDESCRIPTION: This code snippet demonstrates how to configure a source queue to send unprocessed messages to a dead-letter queue in Amazon SQS. It uses the set_queue_attributes method of the AWS.SQS client class to set the RedrivePolicy attribute, specifying the dead-letter queue ARN and the maximum number of receives before a message is sent to the dead-letter queue.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/sqs-example-dead-letter-queue.rst#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport json\n\nimport boto3\n\n# Create SQS client\nsqs = boto3.client('sqs')\n\nqueue_url = 'SOURCE_QUEUE_URL'\ndead_letter_queue_arn = 'DEAD_LETTER_QUEUE_ARN'\n\nredrive_policy = {\n    'deadLetterTargetArn': dead_letter_queue_arn,\n    'maxReceiveCount': '10'\n}\n\n\n# Configure queue to send messages to dead letter queue\nsqs.set_queue_attributes(\n    QueueUrl=queue_url,\n    Attributes={\n        'RedrivePolicy': json.dumps(redrive_policy)\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Updating an Email Template with Amazon SES in Python\nDESCRIPTION: This snippet shows how to update an existing email template using the SES update_template() method. It allows changing the subject line, HTML body, and plain text content of the template.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/ses-template.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\n# Create SES client\nses = boto3.client('ses')\n\nresponse = ses.update_template(\n  Template={\n    'TemplateName': 'TEMPLATE_NAME',\n    'SubjectPart' : 'SUBJECT_LINE',\n    'TextPart'    : 'TEXT_CONTENT',\n    'HtmlPart'    : 'HTML_CONTENT'\n  }\n)\n\nprint(response)\n```\n\n----------------------------------------\n\nTITLE: Installing Boto3 with Package Constraints\nDESCRIPTION: Various pip commands showing how to install Boto3 with specific version constraints\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/quickstart.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install boto3\n\n# Install Boto3 version 1.0 specifically\npip install boto3==1.0.0\n\n# Make sure Boto3 is no older than version 1.15.0\npip install boto3>=1.15.0\n\n# Avoid versions of Boto3 newer than version 1.15.3\npip install boto3<=1.15.3\n```\n\n----------------------------------------\n\nTITLE: Creating IAM Managed Policy with Boto3\nDESCRIPTION: Creates a new managed IAM policy with DynamoDB and CloudWatch Logs permissions. Uses the create_policy API to establish a policy with version v1 as default.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/iam-example-policies.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport json\n\nimport boto3\n\n# Create IAM client\niam = boto3.client('iam')\n\n# Create a policy\nmy_managed_policy = {\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": \"logs:CreateLogGroup\",\n            \"Resource\": \"RESOURCE_ARN\"\n        },\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"dynamodb:DeleteItem\",\n                \"dynamodb:GetItem\",\n                \"dynamodb:PutItem\",\n                \"dynamodb:Scan\",\n                \"dynamodb:UpdateItem\"\n            ],\n            \"Resource\": \"RESOURCE_ARN\"\n        }\n    ]\n}\nresponse = iam.create_policy(\n  PolicyName='myDynamoDBPolicy',\n  PolicyDocument=json.dumps(my_managed_policy)\n)\nprint(response)\n```\n\n----------------------------------------\n\nTITLE: Listing CloudWatch Metrics using Boto3 Pagination\nDESCRIPTION: This snippet demonstrates how to list metric alarms of incoming log events using the paginate method of the CloudWatch client. It uses dimensions to filter for LogGroupName and specifies the MetricName and Namespace.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/cw-example-metrics.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\n# Create CloudWatch client\ncloudwatch = boto3.client('cloudwatch')\n\n# List metrics through the pagination interface\npaginator = cloudwatch.get_paginator('list_metrics')\nfor response in paginator.paginate(Dimensions=[{'Name': 'LogGroupName'}],\n                                   MetricName='IncomingLogEvents',\n                                   Namespace='AWS/Logs'):\n    print(response['Metrics'])\n```\n\n----------------------------------------\n\nTITLE: Adding Lambda Function Target to CloudWatch Events Rule\nDESCRIPTION: Configures a Lambda function as a target for the CloudWatch Events rule using the put_targets method.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/cw-example-events.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\n# Create CloudWatchEvents client\ncloudwatch_events = boto3.client('events')\n\n# Put target for rule\nresponse = cloudwatch_events.put_targets(\n    Rule='DEMO_EVENT',\n    Targets=[\n        {\n            'Arn': 'LAMBDA_FUNCTION_ARN',\n            'Id': 'myCloudWatchEventsTarget',\n        }\n    ]\n)\nprint(response)\n```\n\n----------------------------------------\n\nTITLE: Describing EC2 Instances using Boto3\nDESCRIPTION: Demonstrates how to retrieve information about EC2 instances using the describe_instances API call. Creates an EC2 client and fetches instance details.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/ec2-example-managing-instances.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\nec2 = boto3.client('ec2')\nresponse = ec2.describe_instances()\nprint(response)\n```\n\n----------------------------------------\n\nTITLE: Inspecting API Response with Boto3 Event System\nDESCRIPTION: Demonstrates how to use the 'after-call' event to inspect the API response. It creates a function that prints the http_response, parsed response, and operation model name, then registers it to the event system for the S3 ListObjectsV2 operation.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/events.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\ns3 = boto3.client('s3')\n\n# Access the event system on the S3 client\nevent_system = s3.meta.events\n\n# Create a function that prints the after-call event args.\ndef print_after_call_args(http_response, parsed, model, **kwargs):\n    print(f'http_response: {http_response}')\n    print(f'parsed: {parsed}')\n    print(f'model: {model.name}')\n\n# Register the function to an event\nevent_system.register('after-call.s3.ListObjectsV2', print_after_call_args)\n\ns3.list_objects_v2(Bucket='amzn-s3-demo-bucket')\n```\n\n----------------------------------------\n\nTITLE: Verifying Boto3 and Python Versions\nDESCRIPTION: Python command to verify the installed versions of Python and Boto3. This helps ensure that the SDK is using the correct Python version.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/migrationpy3.rst#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ python3 -c \"import boto3, sys; print(f'{sys.version} \\nboto3: {boto3.__version__}')\"\n```\n\n----------------------------------------\n\nTITLE: Updating IAM Access Key Status with Boto3\nDESCRIPTION: Changes the status of a specified access key between Active and Inactive states. Used as part of key rotation workflows.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/iam-example-managing-access-keys.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\n# Create IAM client\niam = boto3.client('iam')\n\n# Update access key to be active\niam.update_access_key(\n    AccessKeyId='ACCESS_KEY_ID',\n    Status='Active',\n    UserName='IAM_USER_NAME'\n)\n```\n\n----------------------------------------\n\nTITLE: Inspecting Request Creation with Boto3 Event System\nDESCRIPTION: Shows how to use the 'request-created' event to inspect the request once it's created. It defines a function that prints various request information and registers it to the event system for the S3 ListObjectsV2 operation.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/events.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\ns3 = boto3.client('s3')\n\n# Access the event system on the S3 client\nevent_system = s3.meta.events\n\n# Create a function that prints the request information.\ndef inspect_request_created(request, operation_name, **kwargs):\n    print('Request Info:')\n    print(f'method: {request.method}')\n    print(f'url: {request.url}')\n    print(f'data: {request.data}')\n    print(f'params: {request.params}')\n    print(f'auth_path: {request.auth_path}')\n    print(f'stream_output: {request.stream_output}')\n    print(f'headers: {request.headers}')\n    print(f'operation_name: {operation_name}')\n\n# Register the function to an event\nevent_system.register('request-created.s3.ListObjectsV2', inspect_request_created)\n\nresponse = s3.list_objects_v2(Bucket='amzn-s3-demo-bucket')\n```\n\n----------------------------------------\n\nTITLE: Getting IAM Policy Information with Boto3\nDESCRIPTION: Retrieves information about a specified managed policy including its default version and attachment counts using the get_policy API.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/iam-example-policies.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\n\n# Create IAM client\niam = boto3.client('iam')\n\n# Get a policy\nresponse = iam.get_policy(\n    PolicyArn='arn:aws:iam::aws:policy/AWSLambdaExecute'\n)\nprint(response['Policy'])\n```\n\n----------------------------------------\n\nTITLE: Describing EC2 Security Groups using Boto3\nDESCRIPTION: This snippet demonstrates how to retrieve information about an EC2 security group using the describe_security_groups method. It requires a security group ID and handles potential client errors with exception handling.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/ec2-example-security-group.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\nfrom botocore.exceptions import ClientError\n\nec2 = boto3.client('ec2')\n\ntry:\n    response = ec2.describe_security_groups(GroupIds=['SECURITY_GROUP_ID'])\n    print(response)\nexcept ClientError as e:\n    print(e)\n```\n\n----------------------------------------\n\nTITLE: Handling Response Data from Boto3 Client\nDESCRIPTION: Example of processing response data returned by a boto3 client operation. This demonstrates safely accessing data from the response dictionary.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/clients.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# List all your queues\nresponse = sqs.list_queues()\nfor url in response.get('QueueUrls', []):\n    print(url)\n```\n\n----------------------------------------\n\nTITLE: Basic Boto3 S3 Bucket Listing Example\nDESCRIPTION: Shows how to list all S3 buckets using Boto3's resource interface. Demonstrates the basic usage pattern after configuration.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/migration.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\nfor bucket in boto3.resource('s3').buckets.all():\n    print(bucket.name)\n```\n\n----------------------------------------\n\nTITLE: Listing IAM Account Aliases with Boto3\nDESCRIPTION: This snippet shows how to list AWS account aliases using the IAM client's get_paginator method for list_account_aliases. It uses pagination to handle potentially large result sets.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/iam-example-managing-account-aliases.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\n# Create IAM client\niam = boto3.client('iam')\n\n# List account aliases through the pagination interface\npaginator = iam.get_paginator('list_account_aliases')\nfor response in paginator.paginate():\n    print(response['AccountAliases'])\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Class Inheritance to S3 Resource\nDESCRIPTION: Example showing how to add a new base class for the S3 resource to inherit from using the creating-resource-class event.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/events.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom boto3.session import Session\n\nclass MyClass(object):\n    def __init__(self, *args, **kwargs):\n        super(MyClass, self).__init__(*args, **kwargs)\n        print('Resource instantiated!')\n\ndef add_custom_class(base_classes, **kwargs):\n    base_classes.insert(0, MyClass)\n\nsession = Session()\nsession.events.register('creating-resource-class.s3.ServiceResource',\n                        add_custom_class)\n\nresource = session.resource('s3')\n```\n\n----------------------------------------\n\nTITLE: Creating Boto3 Session with Account ID in Python\nDESCRIPTION: Shows how to create a Boto3 Session object with an AWS account ID, allowing account ID-based endpoints to be used across multiple clients created from this session.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/configuration.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\nsession = boto3.Session(\n    aws_access_key_id=ACCESS_KEY,\n    aws_secret_access_key=SECRET_KEY,\n    aws_account_id=ACCOUNT_ID\n)\n```\n\n----------------------------------------\n\nTITLE: Releasing EC2 Elastic IP Address using Boto3\nDESCRIPTION: Demonstrates how to release an Elastic IP address back to the AWS IP address pool. Includes error handling for cases where the address may have already been released.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/ec2-example-elastic-ip-addresses.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\nfrom botocore.exceptions import ClientError\n\n\nec2 = boto3.client('ec2')\n\ntry:\n    response = ec2.release_address(AllocationId='ALLOCATION_ID')\n    print('Address released')\nexcept ClientError as e:\n    print(e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving S3 Bucket ACL with Boto3\nDESCRIPTION: Demonstrates how to retrieve the current access control list (ACL) for an S3 bucket using the AWS Boto3 SDK. The code uses the S3 client's get_bucket_acl method to fetch ACL information for a specified bucket.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/s3-example-access-permissions.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\n# Retrieve a bucket's ACL\ns3 = boto3.client('s3')\nresult = s3.get_bucket_acl(Bucket='amzn-s3-demo-bucket')\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Installing Boto3 with CRT Support\nDESCRIPTION: Commands for installing and managing Boto3 with AWS Common Runtime (CRT) support\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/quickstart.rst#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install boto3[crt]\n\npip uninstall awscrt\n\npip install boto3[crt]\n```\n\n----------------------------------------\n\nTITLE: Getting IAM Server Certificate Details with Boto3\nDESCRIPTION: Retrieves detailed information about a specific server certificate stored in IAM by providing the certificate name.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/iam-example-server-certificates.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\n\n# Create IAM client\niam = boto3.client('iam')\n\n# Get the server certificate\nresponse = iam.get_server_certificate(ServerCertificateName='CERTIFICATE_NAME')\nprint(response['ServerCertificate'])\n```\n\n----------------------------------------\n\nTITLE: Uploading File to S3 Bucket Using upload_file Method\nDESCRIPTION: Function to upload a file to an S3 bucket using boto3's upload_file method. Handles error checking and allows custom object naming.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/s3-uploading-files.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport logging\nimport boto3\nfrom botocore.exceptions import ClientError\nimport os\n\n\ndef upload_file(file_name, bucket, object_name=None):\n    \"\"\"Upload a file to an S3 bucket\n\n    :param file_name: File to upload\n    :param bucket: Bucket to upload to\n    :param object_name: S3 object name. If not specified then file_name is used\n    :return: True if file was uploaded, else False\n    \"\"\"\n\n    # If S3 object_name was not specified, use file_name\n    if object_name is None:\n        object_name = os.path.basename(file_name)\n\n    # Upload the file\n    s3_client = boto3.client('s3')\n    try:\n        response = s3_client.upload_file(file_name, bucket, object_name)\n    except ClientError as e:\n        logging.error(e)\n        return False\n    return True\n```\n\n----------------------------------------\n\nTITLE: Implementing Thread-Safe Sessions in Boto3\nDESCRIPTION: Demonstrates the recommended approach for using sessions in a multithreaded environment. Creates a new session per thread to ensure thread safety.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/session.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\nimport boto3.session\nimport threading\n\nclass MyTask(threading.Thread):\n    def run(self):\n        # Here we create a new session per thread\n        session = boto3.session.Session()\n\n        # Next, we create a resource client using our thread's session object\n        s3 = session.resource('s3')\n\n        # Put your thread-safe code here\n```\n\n----------------------------------------\n\nTITLE: Controlling Page Size for S3 Objects Using Boto3 Collection in Python\nDESCRIPTION: This code demonstrates how to control the page size when iterating over S3 objects. It uses the 'page_size()' method to process objects in smaller batches of 100 items at a time.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/collections.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# S3 iterate over all objects 100 at a time\nfor obj in bucket.objects.page_size(100):\n    print(obj.key)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Method to S3 Resource\nDESCRIPTION: Example demonstrating how to add a custom method to the S3 resource class using the creating-resource-class event.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/events.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom boto3.session import Session\n\ndef custom_method(self):\n    print('This is my custom method')\n\ndef add_custom_method(class_attributes, **kwargs):\n    class_attributes['my_method'] = custom_method\n\nsession = Session()\nsession.events.register('creating-resource-class.s3.ServiceResource',\n                        add_custom_method)\n\nresource = session.resource('s3')\nresource.my_method()\n```\n\n----------------------------------------\n\nTITLE: Working with EBS Snapshots in Boto 2.x and Boto3\nDESCRIPTION: This code illustrates how to create an EBS snapshot, create a volume from the snapshot, attach it to an instance, and delete the snapshot. Boto3 uses resource objects for more intuitive operations.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/migrationec2.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Boto 2.x\nsnapshot = ec2_connection.create_snapshot('volume-id', 'Description')\nvolume = snapshot.create_volume('us-west-2')\nec2_connection.attach_volume(volume.id, 'instance-id', '/dev/sdy')\nec2_connection.delete_snapshot(snapshot.id)\n\n# Boto3\nsnapshot = ec2.create_snapshot(VolumeId='volume-id', Description='description')\nvolume = ec2.create_volume(SnapshotId=snapshot.id, AvailabilityZone='us-west-2a')\nec2.Instance('instance-id').attach_volume(VolumeId=volume.id, Device='/dev/sdy')\nsnapshot.delete()\n```\n\n----------------------------------------\n\nTITLE: Rebooting EC2 Instances using Boto3\nDESCRIPTION: Shows how to reboot EC2 instances with permission verification using dry run. Implements the reboot_instances API call with error handling.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/ec2-example-managing-instances.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\nfrom botocore.exceptions import ClientError\n\n\nec2 = boto3.client('ec2')\n\ntry:\n    ec2.reboot_instances(InstanceIds=['INSTANCE_ID'], DryRun=True)\nexcept ClientError as e:\n    if 'DryRunOperation' not in str(e):\n        print(\"You don't have permission to reboot instances.\")\n        raise\n\ntry:\n    response = ec2.reboot_instances(InstanceIds=['INSTANCE_ID'], DryRun=False)\n    print('Success', response)\nexcept ClientError as e:\n    print('Error', e)\n```\n\n----------------------------------------\n\nTITLE: Configuring SSO Profile in AWS Config File (INI)\nDESCRIPTION: Example of how to set up an SSO profile in the AWS config file (~/.aws/config). It includes settings for SSO start URL, region, account ID, and role name.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/credentials.rst#2025-04-21_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\n# In ~/.aws/config\n[profile my-sso-profile]\nsso_start_url = https://my-sso-portal.awsapps.com/start\nsso_region = us-east-1\nsso_account_id = 123456789011\nsso_role_name = readOnly\n```\n\n----------------------------------------\n\nTITLE: Configuring Boto3 S3 Control Client via VPC Endpoint\nDESCRIPTION: Creates an S3 Control client configured to use an interface VPC endpoint for S3 control plane operations.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/s3-example-privatelink.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\ncontrol_client = boto3.client(\n    service_name='s3control',\n    endpoint_url='https://control.vpce-abc123-abcdefgh.s3.us-east-1.vpce.amazonaws.com'\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Boto3 S3 Client for Access Points via VPC Endpoint\nDESCRIPTION: Creates an S3 client configured to access S3 access points through an interface VPC endpoint. This client configuration is specifically for access point operations and cannot be used for S3 buckets.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/s3-example-privatelink.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\ns3_client = boto3.client(\n    service_name='s3',\n    endpoint_url='https://accesspoint.vpce-abc123-abcdefgh.s3.us-east-1.vpce.amazonaws.com'\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving S3 Bucket CORS Configuration with Boto3\nDESCRIPTION: This function retrieves the CORS configuration rules of an Amazon S3 bucket. It handles the case where no CORS configuration exists by returning an empty list, and returns None if an error occurs.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/s3-example-configuring-buckets.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport logging\nimport boto3\nfrom botocore.exceptions import ClientError\n\n\ndef get_bucket_cors(bucket_name):\n    \"\"\"Retrieve the CORS configuration rules of an Amazon S3 bucket\n\n    :param bucket_name: string\n    :return: List of the bucket's CORS configuration rules. If no CORS\n    configuration exists, return empty list. If error, return None.\n    \"\"\"\n\n    # Retrieve the CORS configuration\n    s3 = boto3.client('s3')\n    try:\n        response = s3.get_bucket_cors(Bucket=bucket_name)\n    except ClientError as e:\n        if e.response['Error']['Code'] == 'NoSuchCORSConfiguration':\n            return []\n        else:\n            # AllAccessDisabled error == bucket not found\n            logging.error(e)\n            return None\n    return response['CORSRules']\n```\n\n----------------------------------------\n\nTITLE: Accessing Existing DynamoDB Table\nDESCRIPTION: Creates a reference to an existing DynamoDB table using lazy-loading to avoid unnecessary API calls.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/dynamodb.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\n# Get the service resource.\ndynamodb = boto3.resource('dynamodb')\n\n# Instantiate a table resource object without actually\n# creating a DynamoDB table. Note that the attributes of this table\n# are lazy-loaded: a request is not made nor are the attribute\n# values populated until the attributes\n# on the table resource are accessed or its load() method is called.\ntable = dynamodb.Table('users')\n\n# Print out some data about the table.\n# This will cause a request to be made to DynamoDB and its attribute\n# values will be set based on the response.\nprint(table.creation_date_time)\n```\n\n----------------------------------------\n\nTITLE: Allocating and Associating EC2 Elastic IP Address using Boto3\nDESCRIPTION: Shows how to allocate a new Elastic IP address and associate it with an EC2 instance. Includes error handling for potential failures during allocation or association.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/ec2-example-elastic-ip-addresses.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\nfrom botocore.exceptions import ClientError\n\nec2 = boto3.client('ec2')\n\ntry:\n    allocation = ec2.allocate_address(Domain='vpc')\n    response = ec2.associate_address(AllocationId=allocation['AllocationId'],\n                                     InstanceId='INSTANCE_ID')\n    print(response)\nexcept ClientError as e:\n    print(e)\n```\n\n----------------------------------------\n\nTITLE: Creating S3 Bucket with Error Handling in Python Boto3\nDESCRIPTION: Example showing how to create an S3 bucket and handle the BucketAlreadyExists exception. Uses boto3 resource client to attempt bucket creation and provides formatted error output.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/error-handling.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclient = boto3.resource('s3')\n\ntry:\n    client.create_bucket(BucketName='amzn-s3-demo-bucket')\n\nexcept client.meta.client.exceptions.BucketAlreadyExists as err:\n    print(\"Bucket {} already exists!\".format(err.response['Error']['BucketName']))\n    raise err\n```\n\n----------------------------------------\n\nTITLE: Verifying Email Address with Amazon SES using Boto3\nDESCRIPTION: Creates an SES client and verifies an email address by sending a verification email to the specified address. The address becomes verified when the recipient clicks the link in the email.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/ses-verify.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\n# Create SES client\nses = boto3.client('ses')\n\nresponse = ses.verify_email_identity(\n  EmailAddress = 'EMAIL_ADDRESS'\n)\n\nprint(response)\n```\n\n----------------------------------------\n\nTITLE: Retrieving S3 Bucket Website Configuration using Boto3\nDESCRIPTION: Demonstrates how to retrieve the website configuration from an S3 bucket using the get_bucket_website method. This code initializes an S3 client and fetches the website configuration for a specified bucket.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/s3-example-static-web-host.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\n# Retrieve the website configuration\ns3 = boto3.client('s3')\nresult = s3.get_bucket_website(Bucket='amzn-s3-demo-website-bucket')\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced Proxy Settings for Boto3 Clients in Python\nDESCRIPTION: This snippet demonstrates how to configure advanced proxy settings, including client certificates, when creating a Boto3 client using a Config object.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/configuration.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\nfrom botocore.config import Config\n\nproxy_definitions = {\n    'http': 'http://proxy.amazon.com:6502',\n    'https': 'https://proxy.amazon.org:2010'\n}\n\nmy_config = Config(\n    region_name='us-east-2',\n    signature_version='v4',\n    proxies=proxy_definitions,\n    proxies_config={\n        'proxy_client_cert': '/path/of/certificate'\n    }\n)\n\nclient = boto3.client('kinesis', config=my_config)\n```\n\n----------------------------------------\n\nTITLE: Deleting S3 Bucket Website Configuration using Boto3\nDESCRIPTION: Demonstrates how to remove the website configuration from an S3 bucket using the delete_bucket_website method. This operation completely removes the website hosting configuration from the specified bucket.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/s3-example-static-web-host.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Delete the website configuration\ns3 = boto3.client('s3')\ns3.delete_bucket_website(Bucket='amzn-s3-demo-website-bucket')\n```\n\n----------------------------------------\n\nTITLE: Detaching IAM Role Policy with Boto3\nDESCRIPTION: Detaches a managed policy from an IAM role using the detach_role_policy API. This removes the managed policy's permissions from the role.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/iam-example-policies.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\n# Create IAM client\niam = boto3.client('iam')\n\n# Detach a role policy\niam.detach_role_policy(\n    PolicyArn='arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess',\n    RoleName='AmazonDynamoDBFullAccess'\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Account ID Endpoint Mode via Environment Variable in Shell\nDESCRIPTION: Shows how to set the account ID endpoint mode using an environment variable, which affects how Boto3 constructs endpoints for AWS services.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/configuration.rst#2025-04-21_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nexport AWS_ACCOUNT_ID_ENDPOINT_MODE=disabled\n```\n\n----------------------------------------\n\nTITLE: Monitoring EC2 Instances using Boto3\nDESCRIPTION: Shows how to enable or disable detailed monitoring for EC2 instances. Takes a command line argument to toggle monitoring state using monitor_instances and unmonitor_instances API calls.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/ec2-example-managing-instances.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nimport boto3\n\n\nec2 = boto3.client('ec2')\nif sys.argv[1] == 'ON':\n    response = ec2.monitor_instances(InstanceIds=['INSTANCE_ID'])\nelse:\n    response = ec2.unmonitor_instances(InstanceIds=['INSTANCE_ID'])\nprint(response)\n```\n\n----------------------------------------\n\nTITLE: Listing S3 Common Prefixes with Boto3\nDESCRIPTION: Shows how to list top-level common prefixes in an S3 bucket using pagination. Uses the list_objects paginator with a delimiter to get folder-like hierarchy.\nSOURCE: https://github.com/boto/boto3/blob/develop/boto3/examples/s3.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\nclient = boto3.client('s3')\npaginator = client.get_paginator('list_objects')\nresult = paginator.paginate(Bucket='amzn-s3-demo-bucket', Delimiter='/')\nfor prefix in result.search('CommonPrefixes'):\n    print(prefix.get('Prefix'))\n```\n\n----------------------------------------\n\nTITLE: Retrieving S3 ACL Grant Information in Boto 2.x vs Boto3\nDESCRIPTION: Shows how to retrieve and iterate through ACL grant information in both Boto versions, highlighting the different data structures used.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/migrations3.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# Boto 2.x\nacp = bucket.get_acl()\nfor grant in acp.acl.grants:\n    print(grant.display_name, grant.permission)\n\n# Boto3\nacl = bucket.Acl()\nfor grant in acl.grants:\n    print(grant['Grantee']['DisplayName'], grant['Permission'])\n```\n\n----------------------------------------\n\nTITLE: Deleting an S3 Bucket Policy with Boto3\nDESCRIPTION: This snippet demonstrates how to delete a policy from an S3 bucket using the delete_bucket_policy method from the Boto3 S3 client.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/s3-example-bucket-policies.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Delete a bucket's policy\ns3 = boto3.client('s3')\ns3.delete_bucket_policy(Bucket='BUCKET_NAME')\n```\n\n----------------------------------------\n\nTITLE: Parsing AWS Service Exceptions with Kinesis Client in Python\nDESCRIPTION: This example demonstrates how to catch AWS service-specific exceptions by parsing the error response. It uses Amazon Kinesis and handles the LimitExceededException by implementing custom logging.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/error-handling.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport botocore\nimport boto3\nimport logging\n\n# Set up our logger\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger()\n\nclient = boto3.client('kinesis')\n\ntry:\n    logger.info('Calling DescribeStream API on myDataStream')\n    client.describe_stream(StreamName='myDataStream')\n\nexcept botocore.exceptions.ClientError as error:\n    if error.response['Error']['Code'] == 'LimitExceededException':\n        logger.warn('API call limit exceeded; backing off and retrying...')\n    else:\n        raise error\n```\n\n----------------------------------------\n\nTITLE: Configuring S3 Settings in AWS Config File (INI)\nDESCRIPTION: Example of how to specify Amazon S3-specific configuration data in the ~/.aws/config file. This includes settings for addressing style, signature version, and endpoint options.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/configuration.rst#2025-04-21_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\n[default]\nregion = us-east-1\ns3 =\n    addressing_style = path\n    signature_version = s3v4\n```\n\n----------------------------------------\n\nTITLE: Deleting CloudWatch Logs Subscription Filter\nDESCRIPTION: Python code to delete an existing subscription filter from a specified log group.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/cw-example-subscription-filters.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\n# Create CloudWatchLogs client\ncloudwatch_logs = boto3.client('logs')\n\n# Delete a subscription filter\ncloudwatch_logs.delete_subscription_filter(\n    filterName='FILTER_NAME',\n    logGroupName='LOG_GROUP',\n)\n```\n\n----------------------------------------\n\nTITLE: Creating SES Receipt Rule with Boto3\nDESCRIPTION: Creates a receipt rule that sends incoming emails to an Amazon S3 bucket. The rule is added to an existing rule set and can be configured with recipients, TLS policy, and various actions.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/ses-rules.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\n# Create SES client\nses = boto3.client('ses')\n\nresponse = ses.create_receipt_rule(\n  RuleSetName   = 'RULE_SET_NAME',\n  Rule          = {\n    'Name'      : 'RULE_NAME',\n    'Enabled'   : True,\n    'TlsPolicy' : 'Optional',\n    'Recipients': [\n      'EMAIL_ADDRESS',\n    ],\n    'Actions'   : [\n      {\n        'S3Action'         : {\n          'BucketName'     : 'amzn-s3-demo-bucket',\n          'ObjectKeyPrefix': 'SES_email'\n        }\n      }\n    ],\n  }\n)\n\nprint(response)\n```\n\n----------------------------------------\n\nTITLE: Filtering by Nested Attributes\nDESCRIPTION: Demonstrates scanning a DynamoDB table using nested attribute filtering to find users by state.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/dynamodb.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nresponse = table.scan(\n    FilterExpression=Attr('address.state').eq('CA')\n)\nitems = response['Items']\nprint(items)\n```\n\n----------------------------------------\n\nTITLE: Listing Email Addresses in Amazon SES using Boto3\nDESCRIPTION: Retrieves a list of email addresses submitted in the current AWS Region using the ListIdentities operation. Returns up to 10 email addresses regardless of verification status.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/ses-verify.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\n# Create SES client\nses = boto3.client('ses')\n\nresponse = ses.list_identities(\n  IdentityType = 'EmailAddress',\n  MaxItems=10\n)\n\nprint(response)\n```\n\n----------------------------------------\n\nTITLE: Extracting Error Metadata from SQS Client Exceptions in Python Boto3\nDESCRIPTION: Demonstrates how to extract useful metadata from AWS service exceptions including error messages, request IDs, and HTTP status codes. Uses SQS client to show handling of generic InternalError exceptions.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/error-handling.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport botocore\nimport boto3\n\nclient = boto3.client('sqs')\nqueue_url = 'SQS_QUEUE_URL'\n\ntry:\n    client.send_message(QueueUrl=queue_url, MessageBody=('some_message'))\n\nexcept botocore.exceptions.ClientError as err:\n    if err.response['Error']['Code'] == 'InternalError': # Generic error\n        # We grab the message, request ID, and HTTP code to give to customer support\n        print('Error Message: {}'.format(err.response['Error']['Message']))\n        print('Request ID: {}'.format(err.response['ResponseMetadata']['RequestId']))\n        print('Http code: {}'.format(err.response['ResponseMetadata']['HTTPStatusCode']))\n    else:\n        raise err\n```\n\n----------------------------------------\n\nTITLE: Deleting Domain Identity from Amazon SES using Boto3\nDESCRIPTION: Removes a verified domain from the list of verified identities in Amazon SES using the DeleteIdentity operation.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/ses-verify.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\n# Create SES client\nses = boto3.client('ses')\n\nresponse = ses.delete_identity(\n  Identity = 'DOMAIN_NAME'\n)\n\nprint(response)\n```\n\n----------------------------------------\n\nTITLE: Creating Boto3 Session with SSO Profile (Python)\nDESCRIPTION: Demonstrates how to create a Boto3 Session using an SSO profile. This allows clients created from the session to use the specified SSO credentials.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/credentials.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\nsession = boto3.Session(profile_name='my-sso-profile')\ns3_client = session.client('s3')\n```\n\n----------------------------------------\n\nTITLE: Creating SQS Queue with Long Polling Enabled using Boto3\nDESCRIPTION: This snippet demonstrates how to create an Amazon SQS queue with long polling enabled using the Boto3 create_queue method. It sets the ReceiveMessageWaitTimeSeconds attribute to 20 seconds.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/sqs-example-long-polling.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\n# Create SQS client\nsqs = boto3.client('sqs')\n\n# Create a SQS queue with long polling enabled\nresponse = sqs.create_queue(\n    QueueName='SQS_QUEUE_NAME',\n    Attributes={'ReceiveMessageWaitTimeSeconds': '20'}\n)\n\nprint(response['QueueUrl'])\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Using Specific Waiters in Boto3\nDESCRIPTION: Example demonstrating how to obtain and use a specific waiter from a boto3 client to wait for an AWS resource to reach a desired state.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/clients.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Retrieve waiter instance that will wait till a specified\n# S3 bucket exists\ns3_bucket_exists_waiter = s3.get_waiter('bucket_exists')\n\n# Begin waiting for the S3 bucket, amzn-s3-demo-bucket, to exist\ns3_bucket_exists_waiter.wait(Bucket='amzn-s3-demo-bucket')\n```\n\n----------------------------------------\n\nTITLE: Deleting Email Address Identity from Amazon SES using Boto3\nDESCRIPTION: Removes a verified email address from the list of verified identities in Amazon SES using the DeleteIdentity operation.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/ses-verify.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\n# Create SES client\nses = boto3.client('ses')\n\nresponse = ses.delete_identity(\n  Identity = 'EMAIL_ADDRESS'\n)\n\nprint(response)\n```\n\n----------------------------------------\n\nTITLE: Creating SQS Queue with Boto3\nDESCRIPTION: Demonstrates how to create a new SQS queue with specified attributes using Boto3. The example creates a queue named 'test' with a 5-second delay.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/sqs.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Get the service resource\nsqs = boto3.resource('sqs')\n\n# Create the queue. This returns an SQS.Queue instance\nqueue = sqs.create_queue(QueueName='test', Attributes={'DelaySeconds': '5'})\n\n# You can now access identifiers and attributes\nprint(queue.url)\nprint(queue.attributes.get('DelaySeconds'))\n```\n\n----------------------------------------\n\nTITLE: Deleting SES Receipt Rule Set with Boto3\nDESCRIPTION: Deletes an entire receipt rule set and all rules it contains. The rule set must not be currently disabled for the operation to succeed.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/ses-rules.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\n# Create SES client\nses = boto3.client('ses')\n\nresponse = ses.delete_receipt_rule_set(\n  RuleSetName = 'RULE_SET_NAME'\n)\n\nprint(response)\n```\n\n----------------------------------------\n\nTITLE: Storing Data to S3 in Boto 2.x vs Boto3\nDESCRIPTION: Demonstrates how to upload file content to S3 using the Key object in Boto 2.x compared to using the Object resource in Boto3.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/migrations3.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Boto 2.x\nfrom boto.s3.key import Key\nkey = Key('hello.txt')\nkey.set_contents_from_file('/tmp/hello.txt')\n\n# Boto3\ns3.Object('amzn-s3-demo-bucket', 'hello.txt').put(Body=open('/tmp/hello.txt', 'rb'))\n```\n\n----------------------------------------\n\nTITLE: Resource Instance Equality Comparison in Boto3\nDESCRIPTION: Shows how resource instance equality works in Boto3. Two instances of a resource are considered equal only if all of their identifiers are equal, regardless of region or other attributes.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/resources.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> bucket1 = s3.Bucket('amzn-s3-demo-bucket1')\n>>> bucket2 = s3.Bucket('amzn-s3-demo-bucket1')\n>>> bucket3 = s3.Bucket('amzn-s3-demo-bucket3')\n\n>>> bucket1 == bucket2\nTrue\n>>> bucket1 == bucket3\nFalse\n```\n\n----------------------------------------\n\nTITLE: Managing S3 Key Metadata in Boto 2.x vs Boto3\nDESCRIPTION: Shows how to set and retrieve custom metadata on S3 objects in both Boto versions.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/migrations3.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# Boto 2.x\nkey.set_metadata('meta1', 'This is my metadata value')\nprint(key.get_metadata('meta1'))\n\n# Boto3\nkey.put(Metadata={'meta1': 'This is my metadata value'})\nprint(key.metadata['meta1'])\n```\n\n----------------------------------------\n\nTITLE: Deleting Email Filter in Amazon SES using Boto3\nDESCRIPTION: Removes an existing IP address filter by specifying its unique filter name. This operation is useful when needing to modify the range of filtered IP addresses by deleting and recreating filters.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/ses-filters.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\n# Create SES client\nses = boto3.client('ses')\n\nresponse = ses.delete_receipt_filter(\n  FilterName = 'NAME'\n)\n\nprint(response)\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for AWS Interaction in Python\nDESCRIPTION: This code snippet shows the basic import statements needed to work with Boto3 and handle exceptions when interacting with AWS services.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/error-handling.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport botocore\nimport boto3\n```\n\n----------------------------------------\n\nTITLE: Getting Service Event Name in Python using Boto3\nDESCRIPTION: Code example showing how to programmatically retrieve the new service event name using the service model's hyphenized service ID. This is useful for updating event handlers after the 1.9.0 event system changes.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/upgrading.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\nclient = boto3.client('elbv2')\nservice_event_name = client.meta.service_model.service_id.hyphenize()\n```\n\n----------------------------------------\n\nTITLE: Basic Boto3 S3 Usage Examples\nDESCRIPTION: Python code demonstrating basic S3 operations using Boto3, including listing buckets and uploading files\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/quickstart.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\n# Let's use Amazon S3\ns3 = boto3.resource('s3')\n\n# Print out bucket names\nfor bucket in s3.buckets.all():\n    print(bucket.name)\n\n# Upload a new file\nwith open('test.jpg', 'rb') as data:\n    s3.Bucket('amzn-s3-demo-bucket').put_object(Key='test.jpg', Body=data)\n```\n\n----------------------------------------\n\nTITLE: Working with Resource Identifiers using Positional Parameters\nDESCRIPTION: Demonstrates how to initialize resources using positional arguments for identifiers instead of named parameters. All required identifiers must still be provided to avoid exceptions.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/resources.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# SQS Queue\nqueue = sqs.Queue('http://...')\n\n# S3 Object\nobj = s3.Object('boto3', 'test.py')\n\n# Raises exception, missing key!\nobj = s3.Object('boto3')\n```\n\n----------------------------------------\n\nTITLE: Managing Elastic IPs and Gateways in Boto 2.x and Boto3\nDESCRIPTION: This code demonstrates how to attach and detach an internet gateway to a VPC, and associate and disassociate an Elastic IP with an instance. Boto3 uses resource objects for these operations, providing a more intuitive interface.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/migrationec2.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# Boto 2.x\nec2_connection.attach_internet_gateway(gateway.id, vpc.id)\nec2_connection.detach_internet_gateway(gateway.id, vpc.id)\n\nfrom boto.ec2.address import Address\naddress = Address()\naddress.allocation_id = 'eipalloc-35cf685d'\naddress.associate('i-71b2f60b')\naddress.disassociate()\n\n# Boto3\ngateway.attach_to_vpc(VpcId=vpc.id)\ngateway.detach_from_vpc(VpcId=vpc.id)\n\naddress = ec2.VpcAddress('eipalloc-35cf685d')\naddress.associate('i-71b2f60b')\naddress.association.delete()\n```\n\n----------------------------------------\n\nTITLE: Sending a Templated Email with Amazon SES in Python\nDESCRIPTION: This snippet demonstrates how to send an email using a template with the SES send_templated_email() method. It specifies the source, destination, reply-to addresses, template name, and template data for personalization.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/ses-template.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\n# Create SES client\nses = boto3.client('ses')\n\nresponse = ses.send_templated_email(\n  Source='EMAIL_ADDRESS',\n  Destination={\n    'ToAddresses': [\n      'EMAIL_ADDRESS',\n    ],\n    'CcAddresses': [\n      'EMAIL_ADDRESS',\n    ]\n  },\n  ReplyToAddresses=[\n    'EMAIL_ADDRESS',\n  ],\n  Template='TEMPLATE_NAME',\n  TemplateData='{ \\\"REPLACEMENT_TAG_NAME\\\":\\\"REPLACEMENT_VALUE\\\" }'\n)\n\nprint(response)\n```\n\n----------------------------------------\n\nTITLE: Defining Sphinx Documentation Structure with reStructuredText\nDESCRIPTION: This snippet defines the structure of the Sphinx documentation for Boto3. It includes sections for quickstart guides, user guides, security information, and API references. The toctree directives are used to organize and link to other documentation files.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n\n   guide/quickstart\n   guide/sqs\n   guide/examples\n\nUser guides\n-----------\n\n.. toctree::\n   :maxdepth: 3\n\n   guide/index\n\nSecurity\n--------\n\n.. toctree::\n   :maxdepth: 2\n\n   guide/security\n\nAPI reference\n-------------\n\nServices\n~~~~~~~~\n\n.. toctree::\n   :maxdepth: 3\n\n   reference/services/index\n\nCore\n~~~~\n\n.. toctree::\n   :maxdepth: 3\n\n   reference/core/index\n\nCustomizations\n~~~~~~~~~~~~~~\n\n.. toctree::\n   :maxdepth: 3\n\n   reference/customizations/index\n```\n\n----------------------------------------\n\nTITLE: IAM Role Policy for CloudWatch Logs and Lambda\nDESCRIPTION: IAM policy document that grants permissions to create log groups/streams, put log events, and invoke Lambda functions.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/cw-example-subscription-filters.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n{\n   \"Version\": \"2012-10-17\",\n   \"Statement\": [\n      {\n         \"Effect\": \"Allow\",\n         \"Action\": [\n            \"logs:CreateLogGroup\",\n            \"logs:CreateLogStream\",\n            \"logs:PutLogEvents\"\n         ],\n         \"Resource\": \"arn:aws:logs:*:*:*\"\n      },\n      {\n         \"Effect\": \"Allow\",\n         \"Action\": [\n            \"lambda:InvokeFunction\"\n         ],\n         \"Resource\": [\n            \"*\"\n         ]\n      }\n   ]\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing S3 Buckets in Boto 2.x vs Boto3\nDESCRIPTION: Shows how to get a bucket in both versions and check if a bucket exists, noting that Boto3 requires explicit validation using exceptions and the head_bucket method.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/migrations3.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Boto 2.x\nbucket = s3_connection.get_bucket('amzn-s3-demo-bucket', validate=False)\nexists = s3_connection.lookup('amzn-s3-demo-bucket')\n\n# Boto3\nimport botocore\nbucket = s3.Bucket('amzn-s3-demo-bucket')\nexists = True\ntry:\n    s3.meta.client.head_bucket(Bucket='amzn-s3-demo-bucket')\nexcept botocore.exceptions.ClientError as e:\n    # If a client error is thrown, then check that it was a 404 error.\n    # If it was a 404 error, then the bucket does not exist.\n    error_code = e.response['Error']['Code']\n    if error_code == '404':\n        exists = False\n```\n\n----------------------------------------\n\nTITLE: Updating an IAM User's Name with Boto3 in Python\nDESCRIPTION: This snippet demonstrates how to update an IAM user's name using the update_user method of the IAM client in Boto3. It requires the current username and the new username.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/iam-example-managing-users.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\n# Create IAM client\niam = boto3.client('iam')\n\n# Update a user name\niam.update_user(\n    UserName='IAM_USER_NAME',\n    NewUserName='NEW_IAM_USER_NAME'\n)\n```\n\n----------------------------------------\n\nTITLE: Adding S3 ACL Grantees in Boto 2.x vs Boto3\nDESCRIPTION: Demonstrates how to add specific grantees to an S3 bucket's ACL, showing that Boto3 lacks shortcut methods but offers a simplified approach.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/migrations3.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# Boto 2.x\nbucket.add_email_grant('READ', 'user@domain.tld')\n\n# Boto3\nbucket.Acl.put(GrantRead='emailAddress=user@domain.tld')\n```\n\n----------------------------------------\n\nTITLE: Deleting SES Receipt Rule with Boto3\nDESCRIPTION: Removes a specific receipt rule from a rule set by providing the rule name and rule set name to the deletion operation.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/ses-rules.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\n# Create SES client\nses = boto3.client('ses')\n\nresponse = ses.delete_receipt_rule(\n  RuleName='RULE_NAME',\n  RuleSetName='RULE_SET_NAME'\n)\n\nprint(response)\n```\n\n----------------------------------------\n\nTITLE: Listing IAM Users with Boto3 in Python\nDESCRIPTION: This snippet shows how to list IAM users using the get_paginator method for 'list_users' from the IAM client in Boto3. It uses pagination to handle large numbers of users efficiently.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/iam-example-managing-users.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\n# Create IAM client\niam = boto3.client('iam')\n\n# List users with the pagination interface\npaginator = iam.get_paginator('list_users')\nfor response in paginator.paginate():\n    print(response)\n```\n\n----------------------------------------\n\nTITLE: Importing S3 Transfer Classes in Python\nDESCRIPTION: This snippet shows how to import the TransferConfig and S3Transfer classes from the boto3.s3.transfer module. These classes are used for customizing S3 transfer operations in boto3.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/reference/customizations/s3.rst#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom boto3.s3.transfer import TransferConfig, S3Transfer\n```\n\n----------------------------------------\n\nTITLE: Describing EC2 Elastic IP Addresses using Boto3\nDESCRIPTION: Demonstrates how to get descriptions of VPC Elastic IP addresses using the EC2 client's describe_addresses method. The code filters for addresses in the VPC domain.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/ec2-example-elastic-ip-addresses.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\n\nec2 = boto3.client('ec2')\nfilters = [\n    {'Name': 'domain', 'Values': ['vpc']}\n]\nresponse = ec2.describe_addresses(Filters=filters)\nprint(response)\n```\n\n----------------------------------------\n\nTITLE: Getting IAM Access Key Last Usage with Boto3\nDESCRIPTION: Retrieves information about when a specified access key was last used, including date, time, AWS service, and region of last use.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/iam-example-managing-access-keys.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\n\n# Create IAM client\niam = boto3.client('iam')\n\n# Get last use of access key\nresponse = iam.get_access_key_last_used(\n    AccessKeyId='ACCESS_KEY_ID'\n)\n\nprint(response['AccessKeyLastUsed'])\n```\n\n----------------------------------------\n\nTITLE: Creating EC2 Connection in Boto 2.x and Boto3\nDESCRIPTION: This snippet shows how to establish a connection to Amazon EC2 using both Boto 2.x and Boto3. In Boto3, the resource interface is used, which provides a higher-level abstraction similar to Boto 2.x's ec2 and vpc modules.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/migrationec2.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Boto 2.x\nimport boto\nec2_connection = boto.connect_ec2()\nvpc_connection = boto.connect_vpc()\n\n# Boto3\nimport boto3\nec2 = boto3.resource('ec2')\n```\n\n----------------------------------------\n\nTITLE: Deleting a CloudWatch Alarm using Boto3\nDESCRIPTION: Demonstrates how to delete a CloudWatch alarm by name. This example creates a CloudWatch client and uses the delete_alarms method to remove the specified alarm from CloudWatch.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/cw-example-creating-alarms.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\n# Create CloudWatch client\ncloudwatch = boto3.client('cloudwatch')\n\n# Delete alarm\ncloudwatch.delete_alarms(\n  AlarmNames=['Web_Server_CPU_Utilization'],\n)\n```\n\n----------------------------------------\n\nTITLE: Python Package Requirements with Hashes\nDESCRIPTION: Lists Python package dependencies with their versions and SHA256 hashes for package verification. Each package includes multiple hash values to ensure package authenticity.\nSOURCE: https://github.com/boto/boto3/blob/develop/requirements-docs-lock.txt#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n--hash=sha256:0e397ac966fdf721b2c528cf028494e86172b4feba51d65f81ffd65c63798f3f \\\n--hash=sha256:17b950fccb810b3293638215058e432159d2b71005c74371d784862b7e4683f3 \\\n--hash=sha256:1f3fbcb7ef1f16e48246f704ab79d79da8a46891e2da03f8783a5b6fa41a9532\n```\n\n----------------------------------------\n\nTITLE: Installing Boto3 from Source\nDESCRIPTION: Clones the Boto3 repository from GitHub and installs it along with its dependencies. This method is useful for developers who want to work with the latest source code.\nSOURCE: https://github.com/boto/boto3/blob/develop/README.rst#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ git clone https://github.com/boto/boto3.git\n$ cd boto3\n$ python -m pip install -r requirements.txt\n$ python -m pip install -e .\n```\n\n----------------------------------------\n\nTITLE: Creating Email Filter in Amazon SES using Boto3\nDESCRIPTION: Creates an IP address filter to allow or block emails from specific IP addresses. Requires specifying a unique filter name and IP address range (CIDR) along with the policy (Allow/Block).\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/ses-filters.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\n# Create SES client\nses = boto3.client('ses')\n\n# Create receipt filter\nresponse = ses.create_receipt_filter(\n  Filter = {\n    'NAME'     : 'NAME',\n    'IpFilter' : {\n      'Cidr'   : 'IP_ADDRESS_OR_RANGE',\n      'Policy' : 'Allow' \n    }\n  }\n)\n\nprint(response)\n```\n\n----------------------------------------\n\nTITLE: Listing CloudWatch Alarms with Insufficient Data State using Boto3 Pagination\nDESCRIPTION: Demonstrates how to list CloudWatch alarms that are in the 'INSUFFICIENT_DATA' state using the pagination interface. This code creates a CloudWatch client and uses a paginator to retrieve and print all metric alarms with insufficient data.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/cw-example-creating-alarms.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\n# Create CloudWatch client\ncloudwatch = boto3.client('cloudwatch')\n\n# List alarms of insufficient data through the pagination interface\npaginator = cloudwatch.get_paginator('describe_alarms')\nfor response in paginator.paginate(StateValue='INSUFFICIENT_DATA'):\n    print(response['MetricAlarms'])\n```\n\n----------------------------------------\n\nTITLE: Filtering Boto3 Paginator Results with JMESPath in Python\nDESCRIPTION: This snippet shows how to use JMESPath expressions for client-side filtering of paginated results, allowing for complex filtering logic like selecting only objects larger than 100 bytes.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/paginators.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\nclient = boto3.client('s3', region_name='us-west-2')\npaginator = client.get_paginator('list_objects_v2')\npage_iterator = paginator.paginate(Bucket='amzn-s3-demo-bucket')\nfiltered_iterator = page_iterator.search(\"Contents[?Size > `100`][]\")\nfor key_data in filtered_iterator:\n    print(key_data)\n```\n\n----------------------------------------\n\nTITLE: Enabling Long Polling on Existing SQS Queue using Boto3\nDESCRIPTION: This example shows how to enable long polling on an existing Amazon SQS queue using the Boto3 set_queue_attributes method. It sets the ReceiveMessageWaitTimeSeconds attribute to 20 seconds for the specified queue URL.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/sqs-example-long-polling.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\n# Create SQS client\nsqs = boto3.client('sqs')\n\nqueue_url = 'SQS_QUEUE_URL'\n\n# Enable long polling on an existing SQS queue\nsqs.set_queue_attributes(\n    QueueUrl=queue_url,\n    Attributes={'ReceiveMessageWaitTimeSeconds': '20'}\n)\n```\n\n----------------------------------------\n\nTITLE: Changing Message Visibility Timeout in Amazon SQS using Boto3\nDESCRIPTION: This snippet demonstrates how to receive a message from an SQS queue and change its visibility timeout. It uses the boto3 client to interact with SQS, receives a message, and then changes the visibility timeout of that message to 20 seconds.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/sqs-example-visibility-timeout.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\n# Create SQS client\nsqs = boto3.client('sqs')\n\nqueue_url = 'SQS_QUEUE_URL'\n\n# Receive message from SQS queue\nresponse = sqs.receive_message(\n    QueueUrl=queue_url,\n    AttributeNames=[\n        'SentTimestamp'\n    ],\n    MaxNumberOfMessages=1,\n    MessageAttributeNames=[\n        'All'\n    ],\n)\n\nmessage = response['Messages'][0]\nreceipt_handle = message['ReceiptHandle']\n\n# Change visibility timeout of message from queue\nsqs.change_message_visibility(\n    QueueUrl=queue_url,\n    ReceiptHandle=receipt_handle,\n    VisibilityTimeout=20\n)\nprint('Received and changed visibility timeout of message: %s' % message)\n```\n\n----------------------------------------\n\nTITLE: Installing Boto3 in AWS Cloud9 Environment\nDESCRIPTION: Command to install the latest version of Boto3 in an AWS Cloud9 environment using pip. This needs to be run in the AWS Cloud9 terminal to set up the Python SDK for AWS.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/cloud9.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo pip install boto3\n```\n\n----------------------------------------\n\nTITLE: Deleting DynamoDB Table\nDESCRIPTION: Shows how to delete a DynamoDB table using the Table.delete() method.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/dynamodb.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ntable.delete()\n```\n\n----------------------------------------\n\nTITLE: Listing IAM Server Certificates with Boto3\nDESCRIPTION: Uses the IAM client's paginator to list all server certificates stored in IAM. Returns an empty list if no certificates exist.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/iam-example-server-certificates.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\n# Create IAM client\niam = boto3.client('iam')\n\n# List server certificates through the pagination interface\npaginator = iam.get_paginator('list_server_certificates')\nfor response in paginator.paginate():\n    print(response['ServerCertificateMetadataList'])\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response Structure in Boto3\nDESCRIPTION: An example of the JSON response structure returned by the SQS list_queues operation in boto3.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/clients.rst#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"QueueUrls\": [\n        \"http://url1\",\n        \"http://url2\",\n        \"http://url3\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Signed CloudFront URLs with RSA Signing in Python\nDESCRIPTION: This code demonstrates the complete process of generating a signed URL for Amazon CloudFront. It uses the cryptography library to implement RSA signing, loads a private key from a PEM file, and creates a CloudFrontSigner to generate a presigned URL with an expiration date.\nSOURCE: https://github.com/boto/boto3/blob/develop/boto3/examples/cloudfront.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport datetime\n\nfrom cryptography.hazmat.backends import default_backend\nfrom cryptography.hazmat.primitives import hashes\nfrom cryptography.hazmat.primitives import serialization\nfrom cryptography.hazmat.primitives.asymmetric import padding\nfrom botocore.signers import CloudFrontSigner\n\n\ndef rsa_signer(message):\n    with open('path/to/key.pem', 'rb') as key_file:\n        private_key = serialization.load_pem_private_key(\n            key_file.read(),\n            password=None,\n            backend=default_backend()\n        )\n    return private_key.sign(message, padding.PKCS1v15(), hashes.SHA1())\n\nkey_id = 'AKIAIOSFODNN7EXAMPLE'\nurl = 'http://d2949o5mkkp72v.cloudfront.net/hello.txt'\nexpire_date = datetime.datetime(2017, 1, 1)\n\ncloudfront_signer = CloudFrontSigner(key_id, rsa_signer)\n\n# Create a signed url that will be valid until the specific expiry date\n# provided using a canned policy.\nsigned_url = cloudfront_signer.generate_presigned_url(\n    url, date_less_than=expire_date)\nprint(signed_url)\n```\n\n----------------------------------------\n\nTITLE: Creating IAM Access Keys with Boto3\nDESCRIPTION: Creates a new AWS secret access key and corresponding access key ID for a specified IAM user. The keys are created with Active status by default.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/iam-example-managing-access-keys.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\n# Create IAM client\niam = boto3.client('iam')\n\n# Create an access key\nresponse = iam.create_access_key(\n    UserName='IAM_USER_NAME'\n)\n\nprint(response['AccessKey'])\n```\n\n----------------------------------------\n\nTITLE: Verifying Domain Identity with Amazon SES using Boto3\nDESCRIPTION: Creates an SES client and verifies a domain identity by generating a verification token that must be added to the domain's DNS configuration.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/ses-verify.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\n# Create SES client\nses = boto3.client('ses')\n\nresponse = ses.verify_domain_identity(\n  Domain='DOMAIN_NAME'\n)\n\nprint(response)\n```\n\n----------------------------------------\n\nTITLE: Updating IAM Server Certificate with Boto3\nDESCRIPTION: Updates the name of an existing server certificate in IAM. Demonstrates how to modify certificate metadata.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/iam-example-server-certificates.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\n# Create IAM client\niam = boto3.client('iam')\n\n# Update the name of the server certificate\niam.update_server_certificate(\n    ServerCertificateName='CERTIFICATE_NAME',\n    NewServerCertificateName='NEW_CERTIFICATE_NAME'\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Account ID Endpoint Mode in INI File\nDESCRIPTION: Demonstrates how to set the account ID endpoint mode in the shared credentials or config file, which determines how Boto3 uses account IDs in endpoint construction.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/configuration.rst#2025-04-21_snippet_13\n\nLANGUAGE: ini\nCODE:\n```\n[default]\naccount_id_endpoint_mode=disabled\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Class Inheritance to S3 Client\nDESCRIPTION: Example showing how to add a new base class for the S3 client to inherit from using the creating-client-class event.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/events.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom boto3.session import Session\n\nclass MyClass(object):\n    def __init__(self, *args, **kwargs):\n        super(MyClass, self).__init__(*args, **kwargs)\n        print('Client instantiated!')\n\ndef add_custom_class(base_classes, **kwargs):\n    base_classes.insert(0, MyClass)\n\nsession = Session()\nsession.events.register('creating-client-class.s3', add_custom_class)\n\nclient = session.client('s3')\n```\n\n----------------------------------------\n\nTITLE: Accessing Resource Attributes in Boto3\nDESCRIPTION: Demonstrates how to access lazy-loaded attributes on resource instances. These attributes may trigger a service call when first accessed, potentially introducing latency.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/resources.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# SQS Message\nmessage.body\n\n# S3 Object\nobj.last_modified\nobj.e_tag\n```\n\n----------------------------------------\n\nTITLE: Describing EC2 Key Pairs with Boto3\nDESCRIPTION: Demonstrates how to retrieve information about existing EC2 key pairs using the describe_key_pairs method. Returns details about all key pairs associated with the AWS account.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/ec2-example-key-pairs.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\nec2 = boto3.client('ec2')\nresponse = ec2.describe_key_pairs()\nprint(response)\n```\n\n----------------------------------------\n\nTITLE: Deleting IAM Server Certificate with Boto3\nDESCRIPTION: Removes a specified server certificate from IAM by providing the certificate name.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/iam-example-server-certificates.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\n\n# Create IAM client\niam = boto3.client('iam')\n\n# Delete the server certificate\niam.delete_server_certificate(\n    ServerCertificateName='CERTIFICATE_NAME'\n)\n```\n\n----------------------------------------\n\nTITLE: Managing S3 Access Controls in Boto 2.x vs Boto3\nDESCRIPTION: Demonstrates setting canned ACLs and retrieving grant information, showing how Boto3 uses a dedicated ACL resource object.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/migrations3.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Boto 2.x\nbucket.set_acl('public-read')\nkey.set_acl('public-read')\n\n# Boto3\nbucket.Acl().put(ACL='public-read')\nobj.Acl().put(ACL='public-read')\n```\n\n----------------------------------------\n\nTITLE: Injecting Parameters into S3 ListObjectsV2 Request\nDESCRIPTION: Example demonstrating how to inject default parameters into an S3 operation using the provide-client-params event.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/events.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\ns3 = boto3.client('s3')\n\n# Access the event system on the S3 client\nevent_system = s3.meta.events\n\n# Create a function\ndef add_my_bucket(params, **kwargs):\n    # Add the name of the bucket you want to default to.\n    if 'Bucket' not in params:\n        params['Bucket'] = 'amzn-s3-demo-bucket'\n\n# Register the function to an event\nevent_system.register('provide-client-params.s3.ListObjectsV2', add_my_bucket)\n\nresponse = s3.list_objects_v2()\n```\n\n----------------------------------------\n\nTITLE: Retrieving an S3 Bucket Policy with Boto3\nDESCRIPTION: This snippet demonstrates how to retrieve the policy of an S3 bucket using the get_bucket_policy method from the Boto3 S3 client. It returns the policy in JSON format.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/s3-example-bucket-policies.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\n# Retrieve the policy of the specified bucket\ns3 = boto3.client('s3')\nresult = s3.get_bucket_policy(Bucket='amzn-s3-demo-bucket')\nprint(result['Policy'])\n```\n\n----------------------------------------\n\nTITLE: Creating Boto3 Client with Account ID in Python\nDESCRIPTION: Demonstrates how to create a Boto3 client with an AWS account ID, which enables the use of account ID-based endpoints for supported services.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/configuration.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\nclient = boto3.client(\n    'dynamodb',\n    aws_access_key_id=ACCESS_KEY,\n    aws_secret_access_key=SECRET_KEY,\n    aws_account_id=ACCOUNT_ID\n)\n```\n\n----------------------------------------\n\nTITLE: Creating an IAM Account Alias with Boto3\nDESCRIPTION: This snippet demonstrates how to create an AWS account alias using the IAM client's create_account_alias method. It requires the Boto3 library and proper AWS credentials configuration.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/iam-example-managing-account-aliases.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\n# Create IAM client\niam = boto3.client('iam')\n\n# Create an account alias\niam.create_account_alias(\n    AccountAlias='ALIAS'\n)\n```\n\n----------------------------------------\n\nTITLE: Defining IAM Role Policy for CloudWatch Events\nDESCRIPTION: IAM role policy configuration that grants necessary permissions for CloudWatch Events operations with full access to events and ability to pass roles.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/cw-example-events.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n{\n   \"Version\": \"2012-10-17\",\n   \"Statement\": [\n      {\n         \"Sid\": \"CloudWatchEventsFullAccess\",\n         \"Effect\": \"Allow\",\n         \"Action\": \"events:*\",\n         \"Resource\": \"*\"\n      },\n      {\n         \"Sid\": \"IAMPassRoleForCloudWatchEvents\",\n         \"Effect\": \"Allow\",\n         \"Action\": \"iam:PassRole\",\n         \"Resource\": \"arn:aws:iam::*:role/AWS_Events_Invoke_Targets\"\n      }      \n   ]\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Account ID-Based Endpoint Format in Shell\nDESCRIPTION: Shows the format of an account ID-based endpoint used by Boto3 for improved performance and scalability.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/configuration.rst#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nhttps://<account-id>.myservice.<region>.amazonaws.com\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Header with Boto3 Event System\nDESCRIPTION: Demonstrates how to use the 'before-call' event to add a custom header before making an API call to S3. It creates a function that adds a custom header and prints all headers, then registers this function to the event system.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/events.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\ns3 = boto3.client('s3')\n\n# Access the event system on the S3 client\nevent_system = s3.meta.events\n\n# Create a function that adds a custom header and prints all headers.\ndef add_custom_header_before_call(model, params, request_signer, **kwargs):\n    params['headers']['my-custom-header'] = 'header-info'\n    headers = params['headers']\n    print(f'param headers: {headers}')\n\n#  Register the function to an event.\nevent_system.register('before-call.s3.ListBuckets', add_custom_header_before_call)\n\ns3.list_buckets()\n```\n\n----------------------------------------\n\nTITLE: Installing Sphinx and Documentation Dependencies for Boto3\nDESCRIPTION: A requirements file that specifies the exact versions of Sphinx and related packages needed for building the Boto3 documentation. The file includes version pinning for better reproducibility and a compatibility constraint for urllib3 on older Python versions.\nSOURCE: https://github.com/boto/boto3/blob/develop/requirements-docs.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nsphinx==7.4.7\nfuro==2024.08.06\nsphinx_copybutton==0.5.1\nsphinx-remove-toctrees==0.0.3\n# Avoid urllib3 2.x below Python 3.10\nurllib3<2.0 ; python_version < \"3.10\"\n```\n\n----------------------------------------\n\nTITLE: Creating S3 Buckets in Boto 2.x vs Boto3\nDESCRIPTION: Shows how to create S3 buckets with both Boto versions, highlighting that Boto3 requires keyword arguments and explicit bucket configuration for locations.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/migrations3.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Boto 2.x\ns3_connection.create_bucket('amzn-s3-demo-bucket')\ns3_connection.create_bucket('amzn-s3-demo-bucket', location=Location.USWest)\n\n# Boto3\ns3.create_bucket(Bucket='amzn-s3-demo-bucket')\ns3.create_bucket(Bucket='amzn-s3-demo-bucket', CreateBucketConfiguration={\n    'LocationConstraint': 'us-west-1'})\n```\n\n----------------------------------------\n\nTITLE: Deleting an IAM Account Alias with Boto3\nDESCRIPTION: This snippet demonstrates how to delete an AWS account alias using the IAM client's delete_account_alias method. It requires the Boto3 library and proper AWS credentials configuration.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/iam-example-managing-account-aliases.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\n# Create IAM client\niam = boto3.client('iam')\n\n# Delete an account alias\niam.delete_account_alias(\n    AccountAlias='ALIAS'\n)\n```\n\n----------------------------------------\n\nTITLE: Running pre-commit for code style validation in Boto3\nDESCRIPTION: This command runs the pre-commit tool to automatically perform codestyle validation for the Boto3 project. It checks for simple updates like whitespace cleanup and provides a list of any failing checks.\nSOURCE: https://github.com/boto/boto3/blob/develop/CONTRIBUTING.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pre-commit run\n```\n\n----------------------------------------\n\nTITLE: Listing Botocore Exceptions in Python\nDESCRIPTION: This code snippet demonstrates how to generate a list of all statically defined exceptions in the botocore package. These exceptions relate to client-side behaviors, configurations, and validations.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/error-handling.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport botocore.exceptions\n\nfor key, value in sorted(botocore.exceptions.__dict__.items()):\n    if isinstance(value, type):\n        print(key)\n```\n\n----------------------------------------\n\nTITLE: Configuring Boto3 S3 Client for Bucket Access via VPC Endpoint\nDESCRIPTION: Creates an S3 client configured to access S3 buckets through an interface VPC endpoint. This client configuration is specifically for bucket operations and cannot be used for S3 access points.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/s3-example-privatelink.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\ns3_client = boto3.client(\n    service_name='s3',\n    endpoint_url='https://bucket.vpce-abc123-abcdefgh.s3.us-east-1.vpce.amazonaws.com'\n)\n```\n\n----------------------------------------\n\nTITLE: Accessing Exceptions through Resource Client in Python\nDESCRIPTION: This code snippet demonstrates how to access the exceptions property when using a resource client instead of a low-level client. Resource clients require accessing exceptions through the meta.client property.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/error-handling.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclient.meta.client.exceptions.SomeServiceException\n```\n\n----------------------------------------\n\nTITLE: Configuring Default AWS Region\nDESCRIPTION: Sets up the default AWS region in the ~/.aws/config file. This configuration determines which region Boto3 will use by default for AWS service calls.\nSOURCE: https://github.com/boto/boto3/blob/develop/README.rst#2025-04-23_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[default]\nregion=us-east-1\n```\n\n----------------------------------------\n\nTITLE: Creating SES Receipt Rule Set with Boto3\nDESCRIPTION: Creates a new receipt rule set in Amazon SES by specifying a unique rule set name. A receipt rule set is required before creating individual receipt rules.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/ses-rules.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\n# Create SES client\nses = boto3.client('ses')\n\nresponse = ses.create_receipt_rule_set(\n  RuleSetName = 'RULE_SET_NAME',\n)\n\nprint(response)\n```\n\n----------------------------------------\n\nTITLE: Generating Boto3 Documentation with Sphinx\nDESCRIPTION: Commands to install documentation dependencies and build HTML documentation for boto3 using Sphinx. Requires installing botocore's requirement-docs.txt file before executing these commands.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ pip install -r requirements-docs.txt\n$ cd docs\n$ make html\n```\n\n----------------------------------------\n\nTITLE: Setting S3 Bucket CORS Configuration with Boto3\nDESCRIPTION: This code demonstrates how to set a CORS configuration for an Amazon S3 bucket. It defines configuration rules specifying allowed headers, methods, origins, exposed headers, and cache duration before applying them to the bucket.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/s3-example-configuring-buckets.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Define the configuration rules\ncors_configuration = {\n    'CORSRules': [{\n        'AllowedHeaders': ['Authorization'],\n        'AllowedMethods': ['GET', 'PUT'],\n        'AllowedOrigins': ['*'],\n        'ExposeHeaders': ['ETag', 'x-amz-request-id'],\n        'MaxAgeSeconds': 3000\n    }]\n}\n\n# Set the CORS configuration\ns3 = boto3.client('s3')\ns3.put_bucket_cors(Bucket='amzn-s3-demo-bucket',\n                   CORSConfiguration=cors_configuration)\n```\n\n----------------------------------------\n\nTITLE: Starting OpenSSL Test Server for TLS Connection Testing\nDESCRIPTION: This command starts an OpenSSL test server using the generated certificate and key for TLS connection testing.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/security.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nopenssl s_server -key key.pem -cert cert.pem -www\n```\n\n----------------------------------------\n\nTITLE: Disabling Thread Usage for S3 Transfers in Python using Boto3\nDESCRIPTION: This example illustrates how to disable thread usage for S3 transfer operations using boto3. It sets the use_threads attribute to False in the TransferConfig object, which disables transfer concurrency.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/s3.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Disable thread use/transfer concurrency\nconfig = TransferConfig(use_threads=False)\n\ns3 = boto3.client('s3')\ns3.download_file('amzn-s3-demo-bucket', 'OBJECT_NAME', 'FILE_NAME', Config=config)\n```\n\n----------------------------------------\n\nTITLE: Running Individual Boto3 Tests\nDESCRIPTION: Demonstrates how to run individual Boto3 tests using pytest. This is useful for developers focusing on specific parts of the codebase.\nSOURCE: https://github.com/boto/boto3/blob/develop/README.rst#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n$ pytest tests/unit\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Boto3 Version in AWS Cloud9\nDESCRIPTION: Command to install a specific version of Boto3 (1.0.0) in an AWS Cloud9 environment. This allows developers to use a particular version of the SDK that may be required for compatibility reasons.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/cloud9.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo pip install boto3==1.0.0\n```\n\n----------------------------------------\n\nTITLE: Running Boto3 Tests with Tox\nDESCRIPTION: Shows how to run Boto3 tests using Tox, which allows testing across multiple Python versions. This is useful for contributors to ensure their changes work across supported Python versions.\nSOURCE: https://github.com/boto/boto3/blob/develop/README.rst#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n$ tox\n$ tox -- unit/test_session.py\n$ tox -e py26,py33 -- integration/\n```\n\n----------------------------------------\n\nTITLE: Deleting IAM Access Keys with Boto3\nDESCRIPTION: Deletes an access key pair associated with a specified IAM user. Can manage root credentials if no username is specified.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/iam-example-managing-access-keys.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\n# Create IAM client\niam = boto3.client('iam')\n\n# Delete access key\niam.delete_access_key(\n    AccessKeyId='ACCESS_KEY_ID',\n    UserName='IAM_USER_NAME'\n)\n```\n\n----------------------------------------\n\nTITLE: Listing Running EC2 Instances in Boto 2.x and Boto3\nDESCRIPTION: This code shows how to list all running EC2 instances. Boto3 uses the filter() method of the instances collection, which allows passing additional parameters to the underlying service API operation.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/migrationec2.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Boto 2.x\nreservations = ec2_connection.get_all_reservations(\n    filters={'instance-state-name': 'running'})\nfor reservation in reservations:\n    for instance in reservation.instances:\n        print(instance.instance_id, instance.instance_type)\n\n# Boto3\n# Use the filter() method of the instances collection to retrieve\n# all running EC2 instances.\ninstances = ec2.instances.filter(\n    Filters=[{'Name': 'instance-state-name', 'Values': ['running']}])\nfor instance in instances:\n    print(instance.id, instance.instance_type)\n```\n\n----------------------------------------\n\nTITLE: Configuring API Versions in AWS Config File (INI)\nDESCRIPTION: Example of how to specify API versions for AWS services in the ~/.aws/config file. This snippet shows the required formatting for nested configuration values.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/configuration.rst#2025-04-21_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n[default]\nregion = us-east-1\napi_versions =\n    ec2 = 2015-03-01\n    cloudfront = 2015-09-17\n```\n\n----------------------------------------\n\nTITLE: Using Waiters in Boto3 Clients\nDESCRIPTION: Example showing how to list available waiters for boto3 clients. Waiters are utility methods that poll the status of AWS resources until they reach a specific state.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/clients.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\ns3 = boto3.client('s3')\nsqs = boto3.client('sqs')\n\n# List all of the possible waiters for both clients\nprint(\"s3 waiters:\")\ns3.waiter_names\n\nprint(\"sqs waiters:\")\nsqs.waiter_names\n```\n\n----------------------------------------\n\nTITLE: Generating Pip Requirements Lockfile with Python 3.9\nDESCRIPTION: Command used to generate the locked requirements file with pip-compile. Includes options for allowing unsafe packages and generating package hashes.\nSOURCE: https://github.com/boto/boto3/blob/develop/requirements-docs-lock.txt#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip-compile --allow-unsafe --generate-hashes --output-file=requirements-docs-lock.txt requirements-docs.txt\n```\n\n----------------------------------------\n\nTITLE: Handling API Call Errors with Boto3 Event System\nDESCRIPTION: Shows how to use the 'after-call-error' event to handle errors after making an API call. It creates functions to mimic a bad response and print the detected exception, then registers them to the event system for the S3 ListBuckets operation.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/events.rst#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\ns3 = boto3.client('s3')\n\n# Access the event system on the S3 client\nevent_system = s3.meta.events\n\n# Prints the detected exception.\ndef print_after_call_error_args(exception, **kwargs):\n    if exception is not None:\n        print(f'Exception Detected: {exception}')\n\n# Mocks an exception raised when making an API call.\ndef list_objects_v2_bad_response(**kwargs):\n    raise Exception(\"This is a test exception.\")\n\nevent_system.register('before-send.s3.ListBuckets', list_objects_v2_bad_response)\nevent_system.register('after-call-error.s3.ListBuckets', print_after_call_error_args)\n\ns3.list_buckets()\n```\n\n----------------------------------------\n\nTITLE: Configuring Toctree for Boto3 Core References\nDESCRIPTION: This snippet configures a table of contents using Sphinx's toctree directive. It sets the maximum depth to 2, displays only titles, and includes all files in the current directory.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/reference/core/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n  :maxdepth: 2\n  :titlesonly:\n  :glob:\n\n  *\n```\n\n----------------------------------------\n\nTITLE: Deleting EC2 Key Pair with Boto3\nDESCRIPTION: Demonstrates how to delete an existing key pair from EC2 by removing the public key. This operation cannot be undone, and the private key file should be deleted as well.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/ec2-example-key-pairs.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\nec2 = boto3.client('ec2')\nresponse = ec2.delete_key_pair(KeyName='KEY_PAIR_NAME')\nprint(response)\n```\n\n----------------------------------------\n\nTITLE: Navigating to Python Example Code in AWS Cloud9\nDESCRIPTION: Code path reference showing where Python examples are stored in the cloned repository within an AWS Cloud9 environment. This path contains Python code examples for various AWS services using Boto3.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/cloud9.rst#2025-04-21_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nyour-environment-name/aws-doc-sdk-examples/python/example_code\n```\n\n----------------------------------------\n\nTITLE: Stopping and Terminating EC2 Instances in Boto 2.x and Boto3\nDESCRIPTION: This snippet illustrates how to stop and terminate multiple EC2 instances given a list of instance IDs. Boto3 uses collection filtering to achieve this, providing a more streamlined approach.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/migrationec2.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nids = ['instance-id-1', 'instance-id-2', ...]\n\n# Boto 2.x\nec2_connection.stop_instances(instance_ids=ids)\nec2_connection.terminate_instances(instance_ids=ids)\n\n# Boto3\nec2.instances.filter(InstanceIds=ids).stop()\nec2.instances.filter(InstanceIds=ids).terminate()\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies for boto3\nDESCRIPTION: Requirements file that specifies exact versions of Python packages needed for development and testing. Includes conditional dependencies for Python 3.12+ and Windows-specific requirements.\nSOURCE: https://github.com/boto/boto3/blob/develop/requirements-dev.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nwheel==0.43.0\ncoverage==7.2.7\nsetuptools==71.1.0;python_version>=\"3.12\"\npackaging==24.1;python_version>=\"3.12\"  # Requirement for setuptools>=71\n\n# Pytest specific deps\npytest==8.1.1\npytest-cov==5.0.0\natomicwrites>=1.0 # Windows requirement\ncolorama>0.3.0 # Windows requirement\n```\n\n----------------------------------------\n\nTITLE: Listing IAM Access Keys with Boto3\nDESCRIPTION: Lists all access key IDs associated with a specified IAM user using pagination. Returns an empty list if no keys exist.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/iam-example-managing-access-keys.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\n# Create IAM client\niam = boto3.client('iam')\n\n# List access keys through the pagination interface.\npaginator = iam.get_paginator('list_access_keys')\nfor response in paginator.paginate(UserName='IAM_USER_NAME'):\n    print(response)\n```\n\n----------------------------------------\n\nTITLE: Generating Table of Contents for Boto3 Services using Sphinx\nDESCRIPTION: This reStructuredText snippet uses a toctree directive to create a table of contents for Boto3 services. It sets the maximum depth to 2 and uses a glob pattern to include all files in the current directory.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/reference/services/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n  :maxdepth: 2\n  :glob:\n\n  *\n```\n\n----------------------------------------\n\nTITLE: Configuring Assume Role with Web Identity in Config File\nDESCRIPTION: Configure an assume role with web identity profile in the AWS config file. This allows Boto3 to automatically make AssumeRoleWithWebIdentity calls to AWS STS for authentication using OAuth 2.0 or OpenID Connect tokens.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/credentials.rst#2025-04-21_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n# In ~/.aws/config\n[profile web-identity]\nrole_arn=arn:aws:iam:...\nweb_identity_token_file=/path/to/a/token\n```\n\n----------------------------------------\n\nTITLE: Creating Self-Signed Certificate for TLS Testing with OpenSSL\nDESCRIPTION: This command generates a self-signed certificate and private key for testing TLS connections with Boto3.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/security.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nopenssl req -subj '/CN=localhost' -x509 -newkey rsa:4096 -nodes -keyout key.pem -out cert.pem -days 365\n```\n\n----------------------------------------\n\nTITLE: Deleting S3 Buckets in Boto 2.x vs Boto3\nDESCRIPTION: Demonstrates how to delete all objects in a bucket before deleting the bucket itself, which is required in both Boto versions.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/migrations3.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Boto 2.x\nfor key in bucket:\n    key.delete()\nbucket.delete()\n\n# Boto3\nfor key in bucket.objects.all():\n    key.delete()\nbucket.delete()\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Amazon S3 Examples in reStructuredText\nDESCRIPTION: This snippet defines a table of contents in reStructuredText format, listing various Amazon S3 operations that are covered in the examples. It includes links to separate files for each operation.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/s3-examples.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n\n   s3-example-creating-buckets\n   s3-uploading-files\n   s3-example-download-file\n   s3\n   s3-presigned-urls\n   s3-example-bucket-policies\n   s3-example-access-permissions\n   s3-example-static-web-host\n   s3-example-configuring-buckets\n   s3-example-mrap\n   s3-example-privatelink\n```\n\n----------------------------------------\n\nTITLE: Installing Boto3 in a Python Virtual Environment\nDESCRIPTION: Sets up a Python virtual environment and installs Boto3 from PyPI. This is the recommended way to install Boto3 for most users.\nSOURCE: https://github.com/boto/boto3/blob/develop/README.rst#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ python -m venv .venv\n...\n$ . .venv/bin/activate\n\n$ python -m pip install boto3\n```\n\n----------------------------------------\n\nTITLE: Session Reference RST Documentation\nDESCRIPTION: ReStructuredText documentation file that configures automatic documentation generation for the boto3.session module. Uses Sphinx automodule directive to expose both documented and undocumented members.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/reference/core/session.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _ref_core_session:\n\n=================\nSession reference\n=================\n\n.. automodule:: boto3.session\n   :members:\n   :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Launching EC2 Instances in Boto 2.x and Boto3\nDESCRIPTION: This code demonstrates how to launch new EC2 instances using both Boto 2.x and Boto3. Boto3 allows specifying the minimum and maximum number of instances to launch in a single call.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/migrationec2.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Boto 2.x\nec2_connection.run_instances('<ami-image-id>')\n\n# Boto3\nec2.create_instances(ImageId='<ami-image-id>', MinCount=1, MaxCount=5)\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents in reStructuredText for Boto3 Developer Guide\nDESCRIPTION: This RST code defines the structure of the Boto3 Developer Guide, including sections for SDK features, tools, and migrations. It uses toctree directives to organize the documentation into a hierarchical structure.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n\n   configuration\n   credentials\n   clients\n   resources\n   session\n   collections\n   paginators\n   error-handling\n   retries\n   events\n\n\nTools\n======\n\n.. toctree::\n   :maxdepth: 1\n\n   cloud9\n\n\nMigrations\n===========\n\n.. toctree::\n   :maxdepth: 1\n\n   new\n   migration\n   migrationpy3\n   upgrading\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Documentation for EC2 Examples\nDESCRIPTION: ReStructuredText markup defining the documentation structure for EC2 examples, including copyright notice, metadata, and navigation tree for various EC2 operations.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/ec2-examples.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. Copyright 2010-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n\n   This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0\n   International License (the \"License\"). You may not use this file except in compliance with the\n   License. A copy of the License is located at http://creativecommons.org/licenses/by-nc-sa/4.0/.\n\n   This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n   either express or implied. See the License for the specific language governing permissions and\n   limitations under the License.\n   \n.. _aws-boto-ec2-examples:\n\n###################\nAmazon EC2 examples\n###################\n\n.. meta::\n   :description:\n   :keywords: AWS EC2 code examples for the AWS SDK for Python\n   \n.. toctree::\n   :maxdepth: 1\n\n   ec2-example-managing-instances\n   ec2-example-key-pairs\n   ec2-example-regions-avail-zones\n   ec2-example-security-group\n   ec2-example-elastic-ip-addresses\n```\n\n----------------------------------------\n\nTITLE: Sending Custom Events to CloudWatch Events\nDESCRIPTION: Publishes a custom event to CloudWatch Events with specific detail, type, and source information using the put_events method.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/cw-example-events.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport json\n\nimport boto3\n\n\n# Create CloudWatchEvents client\ncloudwatch_events = boto3.client('events')\n\n# Put an event\nresponse = cloudwatch_events.put_events(\n    Entries=[\n        {\n            'Detail': json.dumps({'key1': 'value1', 'key2': 'value2'}),\n            'DetailType': 'appRequestSubmitted',\n            'Resources': [\n                'RESOURCE_ARN',\n            ],\n            'Source': 'com.company.myapp'\n        }\n    ]\n)\nprint(response['Entries'])\n```\n\n----------------------------------------\n\nTITLE: Listing Email Filters in Amazon SES using Boto3\nDESCRIPTION: Retrieves a list of all IP address filters associated with the AWS account in the current region using the ListReceiptFilters operation.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/ses-filters.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\n# Create SES client\nses = boto3.client('ses')\n\nresponse = ses.list_receipt_filters()\n\nprint(response)\n```\n\n----------------------------------------\n\nTITLE: Defining Toctree for Customization References in reStructuredText\nDESCRIPTION: This snippet sets up a table of contents (toctree) for customization references documentation. It specifies a maximum depth of 2, uses only titles, and includes all files in the current directory.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/reference/customizations/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n  :maxdepth: 2\n  :titlesonly:\n  :glob:\n\n  *\n```\n\n----------------------------------------\n\nTITLE: Setting Up Python Virtual Environment and Installing Boto3\nDESCRIPTION: These commands create a Python virtual environment and install the Boto3 library for testing TLS connections.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/security.rst#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m venv test-env\nsource test-env/bin/activate\npip install botocore\n```\n\n----------------------------------------\n\nTITLE: Working with Resource Identifiers using Named Parameters\nDESCRIPTION: Shows how to initialize resources with identifiers using named parameters. Identifiers are unique values required to call actions on specific resources. This example demonstrates initializing SQS Queue and S3 Object resources.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/resources.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# SQS Queue (url is an identifier)\nqueue = sqs.Queue(url='http://...')\nprint(queue.url)\n\n# S3 Object (bucket_name and key are identifiers)\nobj = s3.Object(bucket_name='amzn-s3-demo-bucket', key='test.py')\nprint(obj.bucket_name)\nprint(obj.key)\n\n# Raises exception, missing identifier: key!\nobj = s3.Object(bucket_name='amzn-s3-demo-bucket')\n```\n\n----------------------------------------\n\nTITLE: Creating IAM Role Policy for CloudWatch Alarms in Python\nDESCRIPTION: This snippet defines an IAM role policy that grants permissions to describe, reboot, stop, or terminate an Amazon EC2 instance. It's a prerequisite for using CloudWatch alarm actions.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/cw-example-using-alarms.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n{\n   \"Version\": \"2012-10-17\",\n   \"Statement\": [\n      {\n         \"Effect\": \"Allow\",\n         \"Action\": [\n            \"cloudwatch:Describe*\",\n            \"ec2:Describe*\",\n            \"ec2:RebootInstances\",\n            \"ec2:StopInstances*\",\n            \"ec2:TerminateInstances\"\n         ],\n         \"Resource\": [\n            \"*\"\n         ]\n      }\n   ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Development Dependencies for Boto3\nDESCRIPTION: Pip requirements file specifying Git-based development dependencies for Boto3. Uses the develop branches of botocore, jmespath, and s3transfer repositories.\nSOURCE: https://github.com/boto/boto3/blob/develop/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e git+https://github.com/boto/botocore.git@develop#egg=botocore\n-e git+https://github.com/boto/jmespath.git@develop#egg=jmespath\n-e git+https://github.com/boto/s3transfer.git@develop#egg=s3transfer\n```\n\n----------------------------------------\n\nTITLE: Starting OpenSSL Test Server with TLS 1.2 and 1.3 Disabled\nDESCRIPTION: This command starts an OpenSSL test server with TLS 1.2 and 1.3 disabled for testing TLS version negotiation.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/security.rst#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nopenssl s_server -key key.pem -cert cert.pem -no_tls1_3 -no_tls1_2 -www\n```\n\n----------------------------------------\n\nTITLE: Deleting SQS Queue with Boto3\nDESCRIPTION: Demonstrates how to delete an existing SQS queue using its URL with the delete_queue API.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/sqs-example-using-queues.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\n# Create SQS client\nsqs = boto3.client('sqs')\n\n# Delete SQS queue\nsqs.delete_queue(QueueUrl='SQS_QUEUE_URL')\n```\n\n----------------------------------------\n\nTITLE: Checking EC2 Instance Health Status in Boto 2.x and Boto3\nDESCRIPTION: This snippet demonstrates how to retrieve scheduled maintenance information for running EC2 instances. In Boto3, it uses the low-level client via ec2.meta.client as there is no status resource available.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/migrationec2.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Boto 2.x\nfor status in ec2_connection.get_all_instance_statuses():\n    print(status)\n\n# Boto3\nfor status in ec2.meta.client.describe_instance_status()['InstanceStatuses']:\n    print(status)\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Documentation Structure\nDESCRIPTION: Core documentation structure for Amazon SES examples using reStructuredText format. Includes copyright notice, license information, and table of contents for various SES operations.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/ses-examples.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. Copyright 2010-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n\n   This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0\n   International License (the \"License\"). You may not use this file except in compliance with the\n   License. A copy of the License is located at http://creativecommons.org/licenses/by-nc-sa/4.0/.\n\n   This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n   either express or implied. See the License for the specific language governing permissions and\n   limitations under the License.\n   \n.. _aws-boto3-ses-examples:   \n\n\n###################\nAmazon SES examples\n###################\n\n.. meta::\n   :description: Amazon SES code examples for the AWS SDK for Python.\n   :keywords: SES Python\n\n.. toctree::\n   :maxdepth: 1\n\n   Verifying email addresses <ses-verify>\n   Working with email templates <ses-template>\n   Managing email filters <ses-filters>\n   Using email rules <ses-rules>\n```\n\n----------------------------------------\n\nTITLE: Listing Domain Identities in Amazon SES using Boto3\nDESCRIPTION: Retrieves a list of email domains submitted in the current AWS Region using the ListIdentities operation. Returns up to 10 domains regardless of verification status.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/ses-verify.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\n# Create SES client\nses = boto3.client('ses')\n\nresponse = ses.list_identities(\n  IdentityType = 'Domain',\n  MaxItems=10\n)\n\nprint(response)\n```\n\n----------------------------------------\n\nTITLE: Mapping Python Types to DynamoDB Types in Boto3\nDESCRIPTION: This table shows the correspondence between Python types and DynamoDB types when using Boto3 Table Resource. It includes basic types like string and integer, as well as more complex types like Binary and sets.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/reference/customizations/dynamodb.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n+----------------------------------------------+-----------------------------+\n| Python Type                                  | DynamoDB Type               |\n+==============================================+=============================+\n| string                                       | String (S)                  |\n+----------------------------------------------+-----------------------------+\n| integer                                      | Number (N)                  |\n+----------------------------------------------+-----------------------------+\n| :py:class:`decimal.Decimal`                  | Number (N)                  |\n+----------------------------------------------+-----------------------------+\n| :py:class:`boto3.dynamodb.types.Binary`      | Binary (B)                  |\n+----------------------------------------------+-----------------------------+\n| boolean                                      | Boolean (BOOL)              |\n+----------------------------------------------+-----------------------------+\n| ``None``                                     | Null (NULL)                 |\n+----------------------------------------------+-----------------------------+\n| string set                                   | String Set (SS)             |\n+----------------------------------------------+-----------------------------+\n| integer set                                  | Number Set (NS)             |\n+----------------------------------------------+-----------------------------+\n| :py:class:`decimal.Decimal` set              | Number Set (NS)             |\n+----------------------------------------------+-----------------------------+\n| :py:class:`boto3.dynamodb.types.Binary` set  | Binary Set (BS)             |\n+----------------------------------------------+-----------------------------+\n| list                                         | List (L)                    |\n+----------------------------------------------+-----------------------------+\n| dict                                         | Map (M)                     |\n+----------------------------------------------+-----------------------------+\n```\n\n----------------------------------------\n\nTITLE: Managing CORS Configuration in Boto 2.x vs Boto3\nDESCRIPTION: Demonstrates how to get, set, and delete Cross-Origin Resource Sharing (CORS) configurations for S3 buckets in both Boto versions.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/migrations3.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# Boto 2.x\ncors = bucket.get_cors()\n\nconfig = CORSConfiguration()\nconfig.add_rule('GET', '*')\nbucket.set_cors(config)\n\nbucket.delete_cors()\n\n# Boto3\ncors = bucket.Cors()\n\nconfig = {\n    'CORSRules': [\n        {\n            'AllowedMethods': ['GET'],\n            'AllowedOrigins': ['*']\n        }\n    ]\n}\ncors.put(CORSConfiguration=config)\n\ncors.delete()\n```\n\n----------------------------------------\n\nTITLE: Testing TLS Connection with Boto3's Underlying HTTP Library\nDESCRIPTION: This Python script uses Boto3's underlying HTTP library to test TLS connections and print the server response.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/security.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport urllib3\nURL = 'https://localhost:4433/'\n\nhttp = urllib3.PoolManager(\n    ca_certs='cert.pem',\n    cert_reqs='CERT_REQUIRED',\n)\nr = http.request('GET', URL)\nprint(r.data.decode('utf-8'))\n```\n\n----------------------------------------\n\nTITLE: Configuring IAM Trust Relationship for CloudWatch Events\nDESCRIPTION: Trust relationship configuration for the IAM role that allows the events.amazonaws.com service to assume the role.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/cw-example-events.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n{\n   \"Version\": \"2012-10-17\",\n   \"Statement\": [\n      {\n         \"Effect\": \"Allow\",\n         \"Principal\": {\n            \"Service\": \"events.amazonaws.com\"\n         },\n         \"Action\": \"sts:AssumeRole\"\n      }      \n   ]\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning AWS SDK Example Code Repository in Cloud9\nDESCRIPTION: Command to clone the AWS SDK examples repository into an AWS Cloud9 environment. This provides developers with a collection of code examples that demonstrate how to use Boto3 with various AWS services.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/cloud9.rst#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/awsdocs/aws-doc-sdk-examples.git\n```\n\n----------------------------------------\n\nTITLE: Generating Boto3 Module Documentation with Sphinx\nDESCRIPTION: Sphinx documentation configuration using RST directives to automatically generate API documentation for the boto3 module. The directive includes all members and undocumented members of the module.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/reference/core/boto3.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: boto3\n   :members:\n   :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Boto3 and Botocore in Python\nDESCRIPTION: Command to uninstall the current versions of Boto3 and Botocore packages using pip.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/migrationpy3.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ python -m pip uninstall boto3 botocore\n```\n\n----------------------------------------\n\nTITLE: Installing Boto3 with Python 3\nDESCRIPTION: Command to install the new version of Boto3 using Python 3 and pip. This also installs the required Botocore package.\nSOURCE: https://github.com/boto/boto3/blob/develop/docs/source/guide/migrationpy3.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ python3 -m pip install boto3\n```"
  }
]