[
  {
    "owner": "bigcommerce",
    "repo": "bigcommerce-api-python",
    "content": "TITLE: Initializing Bigcommerce API Client in Python\nDESCRIPTION: Demonstrates how to create a BigcommerceApi object for both public (OAuth) and private (Basic Auth) apps. This is the entry point for interacting with the Bigcommerce API.\nSOURCE: https://github.com/bigcommerce/bigcommerce-api-python/blob/master/README.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport bigcommerce\n\n# Public apps (OAuth)\n# Access_token is optional, if you don't have one you can use oauth_fetch_token (see below)\napi = bigcommerce.api.BigcommerceApi(client_id='', store_hash='', access_token='')\n\n# Private apps (Basic Auth)\napi = bigcommerce.api.BigcommerceApi(host='store.mybigcommerce.com', basic_auth=('username', 'api token'))\n```\n\n----------------------------------------\n\nTITLE: Performing CRUD Operations on Bigcommerce Products in Python\nDESCRIPTION: Shows various CRUD (Create, Read, Update, Delete) operations on the Products resource using the Bigcommerce API client. Includes examples of listing, retrieving, creating, updating, and deleting products.\nSOURCE: https://github.com/bigcommerce/bigcommerce-api-python/blob/master/README.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\napi.Products.all()                         # GET /products (returns only a single page of products as a list)\napi.Products.iterall()                     # GET /products (autopaging generator that yields all\n                                           #                  products from all pages product by product.)\napi.Products.get(1)                        # GET /products/1\napi.Products.create(name='', type='', ...) # POST /products\napi.Products.get(1).update(price='199.90') # PUT /products/1\napi.Products.delete_all()                  # DELETE /products\napi.Products.get(1).delete()               # DELETE /products/1\napi.Products.count()                       # GET /products/count\n```\n\n----------------------------------------\n\nTITLE: Accessing V3 API Endpoints in Bigcommerce using Python\nDESCRIPTION: Demonstrates how to use the OAuthConnection object to access V3 API endpoints, which are not directly supported by the high-level API modeling.\nSOURCE: https://github.com/bigcommerce/bigcommerce-api-python/blob/master/README.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nv3client = bigcommerce.connection.OAuthConnection(client_id=client_id,\n                                                  store_hash=store_hash,\n                                                  access_token=access_token,\n                                                  api_path='/stores/{}/v3/{}')\nv3client.get('/catalog/products', include_fields='name,sku', limit=5, page=1)\n```\n\n----------------------------------------\n\nTITLE: Accessing GraphQL Admin API in Bigcommerce using Python\nDESCRIPTION: Shows how to use the GraphQLConnection object to submit GraphQL queries to the Bigcommerce GraphQL Admin API. Includes examples of making a basic query and fetching the schema.\nSOURCE: https://github.com/bigcommerce/bigcommerce-api-python/blob/master/README.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ngql = bigcommerce.connection.GraphQLConnection(\n    client_id=client_id,\n    store_hash=store_hash,\n    access_token=access_token\n)\n# Make a basic query\ntime_query_result = gql.query(\"\"\"\n    query {\n      system {\n        time\n      }\n    }\n\"\"\")\n# Fetch the schema\nschema = gql.introspection_query()\n```\n\n----------------------------------------\n\nTITLE: Managing Rate Limits in Bigcommerce API Requests with Python\nDESCRIPTION: Demonstrates how to use rate limiting management when initializing the BigcommerceApi or OAuthConnection objects. This helps in automatically handling API rate limits by waiting or executing callback functions.\nSOURCE: https://github.com/bigcommerce/bigcommerce-api-python/blob/master/README.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport bigcommerce\n\napi = bigcommerce.api.BigcommerceApi(client_id='', store_hash='', access_token=''\n                                     rate_limiting_management= {'min_requests_remaining':2,\n                                                                'wait':True,\n                                                                'callback_function':None})\n```\n\n----------------------------------------\n\nTITLE: Applying Filters to Bigcommerce API Queries in Python\nDESCRIPTION: Shows how to apply filters to API queries using keyword arguments in the 'all' method. This allows for more specific data retrieval based on certain criteria.\nSOURCE: https://github.com/bigcommerce/bigcommerce-api-python/blob/master/README.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ncustomer = api.Customers.all(first_name='John', last_name='Smith')[0]\norders = api.Orders.all(customer_id=customer.id)\n```\n\n----------------------------------------\n\nTITLE: Accessing Subresources in Bigcommerce API with Python\nDESCRIPTION: Demonstrates how to access subresources, such as product options, using both independent resource methods and helper methods on the parent resource.\nSOURCE: https://github.com/bigcommerce/bigcommerce-api-python/blob/master/README.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\napi.ProductOptions.get(1)                  # GET /products/1/options\napi.ProductOptions.get(1, 2)               # GET /products/1/options/2\n\napi.Products.get(1).options()              # GET /products/1/options\napi.Products.get(1).options(1)             # GET /products/1/options/1\n\napi.Products.get(1).options(1).delete()\n```\n\n----------------------------------------\n\nTITLE: Python Package Dependencies Configuration\nDESCRIPTION: Specifies the required Python packages and their versions for the BigCommerce API client. Includes dependencies for YAML processing, testing frameworks, HTTP requests, and JWT authentication.\nSOURCE: https://github.com/bigcommerce/bigcommerce-api-python/blob/master/requirements.txt#2025-04-16_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\nPyYAML==5.4.1\ncov-core==1.15.0\ncoverage==5.5\nmock==4.0.3\nnose==1.3.7\nnose-cov==1.6\nrequests==2.31.0\npyjwt==2.4.0\n```"
  }
]