[
  {
    "owner": "huntabyte",
    "repo": "shadcn-svelte",
    "content": "TITLE: Initializing shadcn-svelte Project Dependencies\nDESCRIPTION: Command to initialize a new project with shadcn-svelte dependencies. This installs required packages, adds the cn utility, configures tailwind.config.cjs, and sets up CSS variables.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/packages/cli/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-svelte init\n```\n\n----------------------------------------\n\nTITLE: Complete Settings Form Component in Svelte\nDESCRIPTION: A complete Svelte form component with client-side validation using superForm and zodClient. Includes form fields, labels, descriptions, and error handling for a user settings form.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/components/form.md#2025-04-23_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import * as Form from \"$lib/components/ui/form\";\n  import { Input } from \"$lib/components/ui/input\";\n  import { formSchema, type FormSchema } from \"./schema\";\n  import {\n    type SuperValidated,\n    type Infer,\n    superForm,\n  } from \"sveltekit-superforms\";\n  import { zodClient } from \"sveltekit-superforms/adapters\";\n\n  export let data: SuperValidated<Infer<FormSchema>>;\n\n  const form = superForm(data, {\n    validators: zodClient(formSchema),\n  });\n\n  const { form: formData, enhance } = form;\n</script>\n\n<form method=\"POST\" use:enhance>\n  <Form.Field {form} name=\"username\">\n    <Form.Control let:attrs>\n      <Form.Label>Username</Form.Label>\n      <Input {...attrs} bind:value={$formData.username} />\n    </Form.Control>\n    <Form.Description>This is your public display name.</Form.Description>\n    <Form.FieldErrors />\n  </Form.Field>\n  <Form.Button>Submit</Form.Button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Adding Filtering to Svelte Data Table\nDESCRIPTION: This snippet demonstrates how to add filtering functionality to a Svelte data table using the addTableFilter plugin. It includes the table configuration, column setup for filtering, and the search input UI implementation.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/components/data-table.md#2025-04-23_snippet_9\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import {\n    createTable,\n    Render,\n    Subscribe,\n    createRender,\n  } from \"svelte-headless-table\";\n  import {\n    addPagination,\n    addSortBy,\n    addTableFilter,\n  } from \"svelte-headless-table/plugins\";\n  import { readable } from \"svelte/store\";\n  import ArrowUpDown from \"lucide-svelte/icons/arrow-up-down\";\n  import * as Table from \"$lib/components/ui/table\";\n  import DataTableActions from \"./data-table-actions.svelte\";\n  import { Button } from \"$lib/components/ui/button\";\n  import { Input } from \"$lib/components/ui/input\";\n\n  type Payment = {\n    id: string;\n    amount: number;\n    status: \"pending\" | \"processing\" | \"success\" | \"failed\";\n    email: string;\n  };\n\n  const data: Payment[] = [\n    {\n      id: \"m5gr84i9\",\n      amount: 316,\n      status: \"success\",\n      email: \"ken99@yahoo.com\",\n    },\n    // ...\n  ];\n\n  const table = createTable(readable(data), {\n    page: addPagination(),\n    sort: addSortBy(),\n    filter: addTableFilter({\n      fn: ({ filterValue, value }) =>\n        value.toLowerCase().includes(filterValue.toLowerCase()),\n    }),\n  });\n\n  const columns = table.createColumns([\n    table.column({\n      accessor: \"id\",\n      header: \"ID\",\n      plugins: {\n        sort: {\n          disable: true,\n        },\n        filter: {\n          exclude: true,\n        },\n      },\n    }),\n    table.column({\n      accessor: \"status\",\n      header: \"Status\",\n      plugins: {\n        sort: {\n          disable: true,\n        },\n        filter: {\n          exclude: true,\n        },\n      },\n    }),\n    table.column({\n      accessor: \"email\",\n      header: \"Email\",\n    }),\n    table.column({\n      accessor: \"amount\",\n      header: \"Amount\",\n      cell: ({ value }) => {\n        const formatted = new Intl.NumberFormat(\"en-US\", {\n          style: \"currency\",\n          currency: \"USD\",\n        }).format(value);\n        return formatted;\n      },\n      plugins: {\n        sort: {\n          disable: true,\n        },\n        filter: {\n          exclude: true,\n        },\n      },\n    }),\n    table.column({\n      accessor: ({ id }) => id,\n      header: \"\",\n      cell: ({ value }) => {\n        return createRender(DataTableActions, { id: value });\n      },\n      plugins: {\n        sort: {\n          disable: true,\n        },\n        filter: {\n          exclude: true,\n        },\n      },\n    }),\n  ]);\n\n  const { headerRows, pageRows, tableAttrs, tableBodyAttrs, pluginStates } =\n    table.createViewModel(columns);\n\n  const { pageIndex, hasNextPage, hasPreviousPage } = pluginStates.page;\n  const { filterValue } = pluginStates.filter;\n</script>\n\n<div>\n  <div class=\"flex items-center py-4\">\n    <Input\n      class=\"max-w-sm\"\n      placeholder=\"Filter emails...\"\n      type=\"text\"\n      bind:value={$filterValue}\n    />\n  </div>\n  <div class=\"rounded-md border\">\n    <Table.Root>\n      <!-- ... -->\n    </Table.Root>\n  </div>\n  <div class=\"flex items-center justify-end space-x-4 py-4\">\n    <!-- ... -->\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Combobox Component with Popover and Command in Svelte\nDESCRIPTION: This code demonstrates how to create a framework selector combobox using Popover and Command components in Svelte. It includes functionality for displaying a dropdown of framework options, selecting a value, and handling keyboard navigation. The component manages its open state and refocuses the trigger button after selection.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/components/combobox.md#2025-04-23_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import Check from \"lucide-svelte/icons/check\";\n  import ChevronsUpDown from \"lucide-svelte/icons/chevrons-up-down\";\n  import * as Command from \"$lib/registry/default/ui/command/index.js\";\n  import * as Popover from \"$lib/registry/default/ui/popover/index.js\";\n  import { Button } from \"$lib/registry/default/ui/button/index.js\";\n  import { cn } from \"$lib/utils.js\";\n  import { tick } from \"svelte\";\n\n  const frameworks = [\n    {\n      value: \"sveltekit\",\n      label: \"SvelteKit\",\n    },\n    {\n      value: \"next.js\",\n      label: \"Next.js\",\n    },\n    {\n      value: \"nuxt.js\",\n      label: \"Nuxt.js\",\n    },\n    {\n      value: \"remix\",\n      label: \"Remix\",\n    },\n    {\n      value: \"astro\",\n      label: \"Astro\",\n    },\n  ];\n\n  let open = false;\n  let value = \"\";\n\n  $: selectedValue =\n    frameworks.find((f) => f.value === value)?.label ??\n    \"Select a framework...\";\n\n  // We want to refocus the trigger button when the user selects\n  // an item from the list so users can continue navigating the\n  // rest of the form with the keyboard.\n  function closeAndFocusTrigger(triggerId: string) {\n    open = false;\n    tick().then(() => {\n      document.getElementById(triggerId)?.focus();\n    });\n  }\n</script>\n\n<Popover.Root bind:open let:ids>\n  <Popover.Trigger asChild let:builder>\n    <Button\n      builders={[builder]}\n      variant=\"outline\"\n      role=\"combobox\"\n      aria-expanded={open}\n      class=\"w-[200px] justify-between\"\n    >\n      {selectedValue}\n      <ChevronsUpDown class=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n    </Button>\n  </Popover.Trigger>\n  <Popover.Content class=\"w-[200px] p-0\">\n    <Command.Root>\n      <Command.Input placeholder=\"Search framework...\" />\n      <Command.Empty>No framework found.</Command.Empty>\n      <Command.Group>\n        {#each frameworks as framework}\n          <Command.Item\n            value={framework.value}\n            onSelect={(currentValue) => {\n              value = currentValue;\n              closeAndFocusTrigger(ids.trigger);\n            }}\n          >\n            <Check\n              class={cn(\n                \"mr-2 h-4 w-4\",\n                value !== framework.value && \"text-transparent\"\n              )}\n            />\n            {framework.label}\n          </Command.Item>\n        {/each}\n      </Command.Group>\n    </Command.Root>\n  </Popover.Content>\n</Popover.Root>\n```\n\n----------------------------------------\n\nTITLE: Importing Accordion Components from shadcn-svelte\nDESCRIPTION: Shows how to import the Accordion component and its subcomponents from shadcn-svelte. The code demonstrates both the wildcard import syntax and the named import approach.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/installation/index.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Accordion from '$lib/components/ui/accordion\"\n// or\nimport {\n  Accordion,\n  AccordionContent,\n  AccordionItem,\n  AccordionTrigger\n} from \"$lib/components/ui/accordion\"\n```\n\n----------------------------------------\n\nTITLE: SvelteKit Form Action Handler\nDESCRIPTION: A complete SvelteKit server file with both load function and form action handler. The action validates submitted form data and returns appropriate responses based on validation results.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/components/form.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { PageServerLoad, Actions } from \"./$types.js\";\nimport { fail } from \"@sveltejs/kit\";\nimport { superValidate } from \"sveltekit-superforms\";\nimport { zod } from \"sveltekit-superforms/adapters\";\nimport { formSchema } from \"./schema\";\n\nexport const load: PageServerLoad = async () => {\n  return {\n    form: await superValidate(zod(formSchema)),\n  };\n};\n\nexport const actions: Actions = {\n  default: async (event) => {\n    const form = await superValidate(event, zod(formSchema));\n    if (!form.valid) {\n      return fail(400, {\n        form,\n      });\n    }\n    return {\n      form,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Alert Dialog Component in Svelte\nDESCRIPTION: Example of how to implement an Alert Dialog component in Svelte. The dialog includes a trigger button, content container with header and footer sections, title, description, and action buttons for user interaction.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/components/alert-dialog.md#2025-04-23_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import * as AlertDialog from \"$lib/components/ui/alert-dialog\";\n</script>\n\n<AlertDialog.Root>\n  <AlertDialog.Trigger>Open</AlertDialog.Trigger>\n  <AlertDialog.Content>\n    <AlertDialog.Header>\n      <AlertDialog.Title>Are you absolutely sure?</AlertDialog.Title>\n      <AlertDialog.Description>\n        This action cannot be undone. This will permanently delete your account\n        and remove your data from our servers.\n      </AlertDialog.Description>\n    </AlertDialog.Header>\n    <AlertDialog.Footer>\n      <AlertDialog.Cancel>Cancel</AlertDialog.Cancel>\n      <AlertDialog.Action>Continue</AlertDialog.Action>\n    </AlertDialog.Footer>\n  </AlertDialog.Content>\n</AlertDialog.Root>\n```\n\n----------------------------------------\n\nTITLE: Using Drawer Component in Svelte\nDESCRIPTION: Example of how to use the Drawer component in a Svelte file. It demonstrates the basic structure including the root, trigger, content, header, title, description, footer, and close elements.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/components/drawer.md#2025-04-23_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import * as Drawer from \"$lib/components/ui/drawer\";\n</script>\n\n<Drawer.Root>\n  <Drawer.Trigger>Open</Drawer.Trigger>\n  <Drawer.Content>\n    <Drawer.Header>\n      <Drawer.Title>Are you sure absolutely sure?</Drawer.Title>\n      <Drawer.Description>This action cannot be undone.</Drawer.Description>\n    </Drawer.Header>\n    <Drawer.Footer>\n      <Button>Submit</Button>\n      <Drawer.Close>Cancel</Drawer.Close>\n    </Drawer.Footer>\n  </Drawer.Content>\n</Drawer.Root>\n```\n\n----------------------------------------\n\nTITLE: Using buttonVariants Helper for Links in Svelte\nDESCRIPTION: Demonstrates how to use the buttonVariants helper function to apply button styling to an anchor element.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/components/button.md#2025-04-23_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { buttonVariants } from \"$lib/components/ui/button\";\n</script>\n\n<a href=\"/dashboard\" class={buttonVariants({ variant: \"outline\" })}>\n  Dashboard\n</a>\n```\n\n----------------------------------------\n\nTITLE: Rendering Data Table in Svelte Component\nDESCRIPTION: Demonstrates how to render the data table using Svelte Headless Table and shadcn-svelte Table components, including header and body rendering.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/components/data-table.md#2025-04-23_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { createTable, Render, Subscribe } from \"svelte-headless-table\";\n  import { readable } from \"svelte/store\";\n  import * as Table from \"$lib/components/ui/table\";\n\n  // ... (previous code for data and columns)\n\n  const { headerRows, pageRows, tableAttrs, tableBodyAttrs } =\n    table.createViewModel(columns);\n</script>\n\n<div class=\"rounded-md border\">\n  <Table.Root {...$tableAttrs}>\n    <Table.Header>\n      {#each $headerRows as headerRow}\n        <Subscribe rowAttrs={headerRow.attrs()}>\n          <Table.Row>\n            {#each headerRow.cells as cell (cell.id)}\n              <Subscribe attrs={cell.attrs()} let:attrs props={cell.props()}>\n                <Table.Head {...attrs}>\n                  <Render of={cell.render()} />\n                </Table.Head>\n              </Subscribe>\n            {/each}\n          </Table.Row>\n        </Subscribe>\n      {/each}\n    </Table.Header>\n    <Table.Body {...$tableBodyAttrs}>\n      {#each $pageRows as row (row.id)}\n        <Subscribe rowAttrs={row.attrs()} let:rowAttrs>\n          <Table.Row {...rowAttrs}>\n            {#each row.cells as cell (cell.id)}\n              <Subscribe attrs={cell.attrs()} let:attrs>\n                <Table.Cell {...attrs}>\n                  <Render of={cell.render()} />\n                </Table.Cell>\n              </Subscribe>\n            {/each}\n          </Table.Row>\n        </Subscribe>\n      {/each}\n    </Table.Body>\n  </Table.Root>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination Component in Svelte\nDESCRIPTION: This snippet demonstrates how to use the Pagination component in a Svelte application. It includes the root component, content wrapper, and various pagination items such as previous/next buttons, page links, and ellipsis. The component is configured with a total count of 100 items and 10 items per page.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/components/pagination.md#2025-04-23_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import * as Pagination from \"$lib/components/ui/pagination\";\n</script>\n\n<Pagination.Root count={100} perPage={10} let:pages let:currentPage>\n  <Pagination.Content>\n    <Pagination.Item>\n      <Pagination.PrevButton />\n    </Pagination.Item>\n    {#each pages as page (page.key)}\n      {#if page.type === \"ellipsis\"}\n        <Pagination.Item>\n          <Pagination.Ellipsis />\n        </Pagination.Item>\n      {:else}\n        <Pagination.Item isVisible={currentPage == page.value}>\n          <Pagination.Link {page} isActive={currentPage == page.value}>\n            {page.value}\n          </Pagination.Link>\n        </Pagination.Item>\n      {/if}\n    {/each}\n    <Pagination.Item>\n      <Pagination.NextButton />\n    </Pagination.Item>\n  </Pagination.Content>\n</Pagination.Root>\n```\n\n----------------------------------------\n\nTITLE: Basic Popover Implementation in Svelte\nDESCRIPTION: Demonstrates the basic usage of the Popover component using Svelte with TypeScript. Shows how to structure the Popover with Root, Trigger, and Content components to create a clickable element that reveals additional content.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/components/popover.md#2025-04-23_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import * as Popover from \"$lib/components/ui/popover\";\n</script>\n\n<Popover.Root>\n  <Popover.Trigger>Open</Popover.Trigger>\n  <Popover.Content>Place content for the popover here.</Popover.Content>\n</Popover.Root>\n```\n\n----------------------------------------\n\nTITLE: Enabling Sorting in Svelte Data Table\nDESCRIPTION: This snippet shows how to enable the addSortBy plugin and implement sorting functionality for the email column in a Svelte data table. It includes the table setup, column definitions, and the UI for the sortable header.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/components/data-table.md#2025-04-23_snippet_8\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import {\n    createTable,\n    Render,\n    Subscribe,\n    createRender,\n  } from \"svelte-headless-table\";\n  import { addPagination, addSortBy } from \"svelte-headless-table/plugins\";\n  import { readable } from \"svelte/store\";\n  import ArrowUpDown from \"lucide-svelte/icons/arrow-up-down\";\n  import * as Table from \"$lib/components/ui/table\";\n  import DataTableActions from \"./data-table-actions.svelte\";\n  import { Button } from \"$lib/components/ui/button\";\n\n  type Payment = {\n    id: string;\n    amount: number;\n    status: \"pending\" | \"processing\" | \"success\" | \"failed\";\n    email: string;\n  };\n\n  const data: Payment[] = [\n    {\n      id: \"m5gr84i9\",\n      amount: 316,\n      status: \"success\",\n      email: \"ken99@yahoo.com\",\n    },\n    //...\n  ];\n\n  const table = createTable(readable(data), {\n    page: addPagination(),\n    sort: addSortBy(),\n  });\n\n  const columns = table.createColumns([\n    table.column({\n      accessor: \"id\",\n      header: \"ID\",\n      plugins: {\n        sort: {\n          disable: true,\n        },\n      },\n    }),\n    table.column({\n      accessor: \"status\",\n      header: \"Status\",\n      plugins: {\n        sort: {\n          disable: true,\n        },\n      },\n    }),\n    table.column({\n      accessor: \"email\",\n      header: \"Email\",\n    }),\n    table.column({\n      accessor: \"amount\",\n      header: \"Amount\",\n      cell: ({ value }) => {\n        const formatted = new Intl.NumberFormat(\"en-US\", {\n          style: \"currency\",\n          currency: \"USD\",\n        }).format(value);\n        return formatted;\n      },\n      plugins: {\n        sort: {\n          disable: true,\n        },\n      },\n    }),\n    table.column({\n      accessor: ({ id }) => id,\n      header: \"\",\n      cell: ({ value }) => {\n        return createRender(DataTableActions, { id: value });\n      },\n      plugins: {\n        sort: {\n          disable: true,\n        },\n      },\n    }),\n  ]);\n\n  const { headerRows, pageRows, tableAttrs, tableBodyAttrs, pluginStates } =\n    table.createViewModel(columns);\n\n  const { hasNextPage, hasPreviousPage, pageIndex } = pluginStates.page;\n</script>\n\n<Table.Root {...$tableAttrs}>\n  <Table.Header>\n    {#each $headerRows as headerRow}\n      <Subscribe rowAttrs={headerRow.attrs()}>\n        <Table.Row>\n          {#each headerRow.cells as cell (cell.id)}\n            <Subscribe\n              attrs={cell.attrs()}\n              let:attrs\n              props={cell.props()}\n              let:props\n            >\n              <Table.Head {...attrs}>\n                {#if cell.id === \"amount\"}\n                  <div class=\"text-right\">\n                    <Render of={cell.render()} />\n                  </div>\n                {:else if cell.id === \"email\"}\n                  <Button variant=\"ghost\" on:click={props.sort.toggle}>\n                    <Render of={cell.render()} />\n                    <ArrowUpDown class={\"ml-2 h-4 w-4\"} />\n                  </Button>\n                {:else}\n                  <Render of={cell.render()} />\n                {/if}\n              </Table.Head>\n            </Subscribe>\n          {/each}\n        </Table.Row>\n      </Subscribe>\n    {/each}\n  </Table.Header>\n  <Table.Body {...$tableBodyAttrs}>\n    <!-- ... -->\n  </Table.Body>\n</Table.Root>\n```\n\n----------------------------------------\n\nTITLE: Table Configuration with Pagination\nDESCRIPTION: Implementation of table configuration including column definitions, pagination setup, and formatting for currency values. Includes type definitions and data structure.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/components/data-table.md#2025-04-23_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import {\n    createTable,\n    Render,\n    Subscribe,\n    createRender,\n  } from \"svelte-headless-table\";\n  import { addPagination } from \"svelte-headless-table/plugins\";\n  import { readable } from \"svelte/store\";\n  import * as Table from \"$lib/components/ui/table\";\n  import DataTableActions from \"./data-table-actions.svelte\";\n  import { Button } from \"$lib/components/ui/button\";\n\n  type Payment = {\n    id: string;\n    amount: number;\n    status: \"pending\" | \"processing\" | \"success\" | \"failed\";\n    email: string;\n  };\n\n  const data: Payment[] = [\n    {\n      id: \"m5gr84i9\",\n      amount: 316,\n      status: \"success\",\n      email: \"ken99@yahoo.com\",\n    },\n    //...\n  ];\n\n  const table = createTable(readable(data), {\n    page: addPagination(),\n  });\n\n  const columns = table.createColumns([\n    table.column({\n      accessor: \"id\",\n      header: \"ID\",\n    }),\n    table.column({\n      accessor: \"status\",\n      header: \"Status\",\n    }),\n    table.column({\n      accessor: \"email\",\n      header: \"Email\",\n    }),\n    table.column({\n      accessor: \"amount\",\n      header: \"Amount\",\n      cell: ({ value }) => {\n        const formatted = new Intl.NumberFormat(\"en-US\", {\n          style: \"currency\",\n          currency: \"USD\",\n        }).format(value);\n        return formatted;\n      },\n    }),\n    table.column({\n      accessor: ({ id }) => id,\n      header: \"\",\n      cell: ({ value }) => {\n        return createRender(DataTableActions, { id: value });\n      },\n    }),\n  ]);\n\n  const { headerRows, pageRows, tableAttrs, tableBodyAttrs, pluginStates } =\n    table.createViewModel(columns);\n\n  const { hasNextPage, hasPreviousPage, pageIndex } = pluginStates.page;\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Menubar Component in Svelte\nDESCRIPTION: This code demonstrates how to use the Menubar component to create a menu structure commonly found in desktop applications. It shows the proper nesting of Menubar components including Root, Menu, Trigger, Content, Item, Shortcut, and Separator to create a functional File menu with various options and keyboard shortcuts.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/components/menubar.md#2025-04-23_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import * as Menubar from \"$lib/components/ui/menubar\";\n</script>\n\n<Menubar.Root>\n  <Menubar.Menu>\n    <Menubar.Trigger>File</Menubar.Trigger>\n    <Menubar.Content>\n      <Menubar.Item>\n        New Tab\n        <Menubar.Shortcut>⌘T</Menubar.Shortcut>\n      </Menubar.Item>\n      <Menubar.Item>New Window</Menubar.Item>\n      <Menubar.Separator />\n      <Menubar.Item>Share</Menubar.Item>\n      <Menubar.Separator />\n      <Menubar.Item>Print</Menubar.Item>\n    </Menubar.Content>\n  </Menubar.Menu>\n</Menubar.Root>\n```\n\n----------------------------------------\n\nTITLE: Implementing Dialog Component in Svelte\nDESCRIPTION: Example showing how to implement a dialog component with header, title, and description. The dialog creates an overlay window that can be triggered to open and displays a confirmation message with account deletion warning.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/components/dialog.md#2025-04-23_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import * as Dialog from \"$lib/components/ui/dialog\";\n</script>\n\n<Dialog.Root>\n  <Dialog.Trigger>Open</Dialog.Trigger>\n  <Dialog.Content>\n    <Dialog.Header>\n      <Dialog.Title>Are you sure absolutely sure?</Dialog.Title>\n      <Dialog.Description>\n        This action cannot be undone. This will permanently delete your account\n        and remove your data from our servers.\n      </Dialog.Description>\n    </Dialog.Header>\n  </Dialog.Content>\n</Dialog.Root>\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Tabs Component in Svelte\nDESCRIPTION: This snippet demonstrates how to implement a basic tabs interface using the Tabs component from shadcn-svelte. It shows the structure with a root container, a list of tab triggers, and content panels that display when their corresponding trigger is selected.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/components/tabs.md#2025-04-23_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import * as Tabs from \"$lib/components/ui/tabs\";\n</script>\n\n<Tabs.Root value=\"account\" class=\"w-[400px]\">\n  <Tabs.List>\n    <Tabs.Trigger value=\"account\">Account</Tabs.Trigger>\n    <Tabs.Trigger value=\"password\">Password</Tabs.Trigger>\n  </Tabs.List>\n  <Tabs.Content value=\"account\">\n    Make changes to your account here.\n  </Tabs.Content>\n  <Tabs.Content value=\"password\">Change your password here.</Tabs.Content>\n</Tabs.Root>\n```\n\n----------------------------------------\n\nTITLE: Using Avatar Component in Svelte\nDESCRIPTION: Demonstrates how to implement the Avatar component with an image and fallback text. The component allows displaying a user image with a fallback option that shows when the image fails to load.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/components/avatar.md#2025-04-23_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import * as Avatar from \"$lib/components/ui/avatar\";\n</script>\n\n<Avatar.Root>\n  <Avatar.Image src=\"https://github.com/shadcn.png\" alt=\"@shadcn\" />\n  <Avatar.Fallback>CN</Avatar.Fallback>\n</Avatar.Root>\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Dropdown Menu in Svelte\nDESCRIPTION: This snippet demonstrates how to create a basic dropdown menu using the DropdownMenu component. It includes a trigger button and a content area with grouped menu items.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/components/dropdown-menu.md#2025-04-23_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import * as DropdownMenu from \"$lib/components/ui/dropdown-menu\";\n</script>\n\n<DropdownMenu.Root>\n  <DropdownMenu.Trigger>Open</DropdownMenu.Trigger>\n  <DropdownMenu.Content>\n    <DropdownMenu.Group>\n      <DropdownMenu.Label>My Account</DropdownMenu.Label>\n      <DropdownMenu.Separator />\n      <DropdownMenu.Item>Profile</DropdownMenu.Item>\n      <DropdownMenu.Item>Billing</DropdownMenu.Item>\n      <DropdownMenu.Item>Team</DropdownMenu.Item>\n      <DropdownMenu.Item>Subscription</DropdownMenu.Item>\n    </DropdownMenu.Group>\n  </DropdownMenu.Content>\n</DropdownMenu.Root>\n```\n\n----------------------------------------\n\nTITLE: Using Context Menu Component in Svelte\nDESCRIPTION: This snippet demonstrates how to implement a Context Menu in Svelte. It shows the basic structure with a trigger element that responds to right clicks and a content area containing menu items like Profile, Billing, Team, and Subscription.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/components/context-menu.md#2025-04-23_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import * as ContextMenu from \"$lib/components/ui/context-menu\";\n</script>\n\n<ContextMenu.Root>\n  <ContextMenu.Trigger>Right click</ContextMenu.Trigger>\n  <ContextMenu.Content>\n    <ContextMenu.Item>Profile</ContextMenu.Item>\n    <ContextMenu.Item>Billing</ContextMenu.Item>\n    <ContextMenu.Item>Team</ContextMenu.Item>\n    <ContextMenu.Item>Subscription</ContextMenu.Item>\n  </ContextMenu.Content>\n</ContextMenu.Root>\n```\n\n----------------------------------------\n\nTITLE: Basic Breadcrumb Usage in Svelte\nDESCRIPTION: Demonstrates the basic usage of the Breadcrumb component, including Root, List, Item, Link, Separator, and Page elements. This example shows how to create a simple breadcrumb navigation structure.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/components/breadcrumb.md#2025-04-23_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import * as Breadcrumb from \"$lib/components/ui/breadcrumb/index.js\";\n</script>\n\n<Breadcrumb.Root>\n  <Breadcrumb.List>\n    <Breadcrumb.Item>\n      <Breadcrumb.Link href=\"/\">Home</Breadcrumb.Link>\n    </Breadcrumb.Item>\n    <Breadcrumb.Separator />\n    <Breadcrumb.Item>\n      <Breadcrumb.Link href=\"/components\">Components</Breadcrumb.Link>\n    </Breadcrumb.Item>\n    <Breadcrumb.Separator />\n    <Breadcrumb.Item>\n      <Breadcrumb.Page>Breadcrumb</Breadcrumb.Page>\n    </Breadcrumb.Item>\n  </Breadcrumb.List>\n</Breadcrumb.Root>\n```\n\n----------------------------------------\n\nTITLE: Basic Card Component Implementation in Svelte\nDESCRIPTION: Demonstrates the basic structure and usage of the Card component with header, content, and footer sections. Shows how to import and use the Card component's subcomponents.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/components/card.md#2025-04-23_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import * as Card from \"$lib/components/ui/card\";\n</script>\n\n<Card.Root>\n  <Card.Header>\n    <Card.Title>Card Title</Card.Title>\n    <Card.Description>Card Description</Card.Description>\n  </Card.Header>\n  <Card.Content>\n    <p>Card Content</p>\n  </Card.Content>\n  <Card.Footer>\n    <p>Card Footer</p>\n  </Card.Footer>\n</Card.Root>\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS with Custom Theme in tailwind.config.js\nDESCRIPTION: This snippet provides a complete tailwind.config.js configuration with custom theme settings, including colors, border radius, and font family for the shadcn-svelte project.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/installation/manual.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { fontFamily } from \"tailwindcss/defaultTheme\";\n\n/** @type {import('tailwindcss').Config} */\nconst config = {\n  darkMode: [\"class\"],\n  content: [\"./src/**/*.{html,js,svelte,ts}\"],\n  safelist: [\"dark\"],\n  theme: {\n    container: {\n      center: true,\n      padding: \"2rem\",\n      screens: {\n        \"2xl\": \"1400px\",\n      },\n    },\n    extend: {\n      colors: {\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n        },\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n        },\n      },\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      fontFamily: {\n        sans: [\"Inter\", ...fontFamily.sans],\n      },\n    },\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Date Picker in Svelte\nDESCRIPTION: This snippet demonstrates how to create a basic date picker using Svelte components. It utilizes the Popover, Calendar, and Button components along with date formatting utilities.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/components/date-picker.md#2025-04-23_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import CalendarIcon from \"lucide-svelte/icons/calendar\";\n  import {\n    type DateValue,\n    DateFormatter,\n    getLocalTimeZone,\n  } from \"@internationalized/date\";\n  import { cn } from \"$lib/utils.js\";\n  import { Button } from \"$lib/components/ui/button\";\n  import { Calendar } from \"$lib/components/ui/calendar\";\n  import * as Popover from \"$lib/components/ui/popover\";\n\n  const df = new DateFormatter(\"en-US\", {\n    dateStyle: \"long\",\n  });\n\n  let value: DateValue | undefined = undefined;\n</script>\n\n<Popover.Root openFocus>\n  <Popover.Trigger asChild let:builder>\n    <Button\n      variant=\"outline\"\n      class={cn(\n        \"w-[280px] justify-start text-left font-normal\",\n        !value && \"text-muted-foreground\"\n      )}\n      builders={[builder]}\n    >\n      <CalendarIcon class=\"mr-2 h-4 w-4\" />\n      {value ? df.format(value.toDate(getLocalTimeZone())) : \"Select a date\"}\n    </Button>\n  </Popover.Trigger>\n  <Popover.Content class=\"w-auto p-0\">\n    <Calendar bind:value initialFocus />\n  </Popover.Content>\n</Popover.Root>\n```\n\n----------------------------------------\n\nTITLE: Using Select Component in Svelte\nDESCRIPTION: Demonstrates how to implement the Select component with theme options (light, dark, system). The example shows the composable nature of the component with Root, Trigger, Value, Content, and Item subcomponents.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/components/select.md#2025-04-23_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import * as Select from \"$lib/components/ui/select\";\n</script>\n\n<Select.Root>\n  <Select.Trigger class=\"w-[180px]\">\n    <Select.Value placeholder=\"Theme\" />\n  </Select.Trigger>\n  <Select.Content>\n    <Select.Item value=\"light\">Light</Select.Item>\n    <Select.Item value=\"dark\">Dark</Select.Item>\n    <Select.Item value=\"system\">System</Select.Item>\n  </Select.Content>\n</Select.Root>\n```\n\n----------------------------------------\n\nTITLE: Using the Accordion Component in Svelte\nDESCRIPTION: Demonstrates how to implement an accessible accordion component with trigger and content elements. The example shows a basic structure with a single accordion item asking about accessibility.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/components/accordion.md#2025-04-23_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import * as Accordion from \"$lib/components/ui/accordion\";\n</script>\n\n<Accordion.Root>\n  <Accordion.Item value=\"item-1\">\n    <Accordion.Trigger>Is it accessible?</Accordion.Trigger>\n    <Accordion.Content>\n      Yes. It adheres to the WAI-ARIA design pattern.\n    </Accordion.Content>\n  </Accordion.Item>\n</Accordion.Root>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Input Component in Svelte\nDESCRIPTION: This snippet demonstrates how to import and use the basic Input component in a Svelte file. It shows the minimal setup required to render an Input field.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/components/input.md#2025-04-23_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { Input } from \"$lib/components/ui/input\";\n</script>\n\n<Input />\n```\n\n----------------------------------------\n\nTITLE: Basic Command Component Usage in Svelte\nDESCRIPTION: Demonstrates the basic usage of the Command component, including the root, input, list, empty state, groups, items, and separator.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/components/command.md#2025-04-23_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import * as Command from \"$lib/components/ui/command\";\n</script>\n\n<Command.Root>\n  <Command.Input placeholder=\"Type a command or search...\" />\n  <Command.List>\n    <Command.Empty>No results found.</Command.Empty>\n    <Command.Group heading=\"Suggestions\">\n      <Command.Item>Calendar</Command.Item>\n      <Command.Item>Search Emoji</Command.Item>\n      <Command.Item>Calculator</Command.Item>\n    </Command.Group>\n    <Command.Separator />\n    <Command.Group heading=\"Settings\">\n      <Command.Item>Profile</Command.Item>\n      <Command.Item>Billing</Command.Item>\n      <Command.Item>Settings</Command.Item>\n    </Command.Group>\n  </Command.List>\n</Command.Root>\n```\n\n----------------------------------------\n\nTITLE: Pagination Controls Implementation\nDESCRIPTION: Implementation of pagination controls using buttons to navigate through table pages. Includes previous and next buttons with appropriate disable states.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/components/data-table.md#2025-04-23_snippet_7\n\nLANGUAGE: svelte\nCODE:\n```\n<div>\n  <div class=\"rounded-md border\">\n    <Table.Root {...$tableAttrs}>\n      <!-- .... -->\n    </Table.Root>\n  </div>\n  <div class=\"flex items-center justify-end space-x-4 py-4\">\n    <Button\n      variant=\"outline\"\n      size=\"sm\"\n      on:click={() => ($pageIndex = $pageIndex - 1)}\n      disabled={!$hasPreviousPage}>Previous</Button\n    >\n    <Button\n      variant=\"outline\"\n      size=\"sm\"\n      disabled={!$hasNextPage}\n      on:click={() => ($pageIndex = $pageIndex + 1)}>Next</Button\n    >\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using Sheet Component in Svelte\nDESCRIPTION: This example demonstrates how to use the Sheet component in a Svelte application. It shows the basic structure including the root, trigger, content, header, title, and description elements.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/components/sheet.md#2025-04-23_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import * as Sheet from \"$lib/components/ui/sheet\";\n</script>\n\n<Sheet.Root>\n  <Sheet.Trigger>Open</Sheet.Trigger>\n  <Sheet.Content>\n    <Sheet.Header>\n      <Sheet.Title>Are you sure absolutely sure?</Sheet.Title>\n      <Sheet.Description>\n        This action cannot be undone. This will permanently delete your account\n        and remove your data from our servers.\n      </Sheet.Description>\n    </Sheet.Header>\n  </Sheet.Content>\n</Sheet.Root>\n```\n\n----------------------------------------\n\nTITLE: Implementing Hover Card Component in SvelteKit\nDESCRIPTION: Example showing how to implement a basic hover card component that displays preview content when hovering over a trigger element. Uses the bits-ui library and requires HoverCard components to be imported from the project's components directory.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/components/hover-card.md#2025-04-23_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import * as HoverCard from \"$lib/components/ui/hover-card\";\n</script>\n\n<HoverCard.Root>\n  <HoverCard.Trigger>Hover</HoverCard.Trigger>\n  <HoverCard.Content>\n    SvelteKit - Web development, streamlined\n  </HoverCard.Content>\n</HoverCard.Root>\n```\n\n----------------------------------------\n\nTITLE: Creating a Zod Form Schema in TypeScript\nDESCRIPTION: Defines a form schema using Zod for validation. This schema specifies a username field with minimum and maximum length constraints.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/components/form.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { z } from \"zod\";\n\nexport const formSchema = z.object({\n  username: z.string().min(2).max(50),\n});\n\nexport type FormSchema = typeof formSchema;\n```\n\n----------------------------------------\n\nTITLE: Basic Form Example in Svelte\nDESCRIPTION: A simple example of a form with an email field, demonstrating how to use Form components with input binding and form enhancement.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/components/form.md#2025-04-23_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<form method=\"POST\" use:enhance>\n  <Form.Field {form} name=\"email\">\n    <Form.Control let:attrs>\n      <Form.Label>Email</Form.Label>\n      <Input {...attrs} bind:value={$formData.email} />\n    </Form.Control>\n    <Form.Description />\n    <Form.FieldErrors />\n  </Form.Field>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Button Component in Svelte\nDESCRIPTION: This snippet demonstrates how to import and use the Button component from shadcn-svelte in a Svelte file. It includes the script import statement and the component usage in the markup.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/installation/sveltekit.md#2025-04-23_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { Button } from \"$lib/components/ui/button\";\n</script>\n\n<Button>Click me</Button>\n```\n\n----------------------------------------\n\nTITLE: Carousel with API Integration\nDESCRIPTION: Implementation showing how to use the carousel API for advanced control and state management.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/components/carousel.md#2025-04-23_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { type CarouselAPI } from \"$lib/components/ui/carousel/context.js\";\n  import * as Carousel from \"$lib/components/ui/carousel/index.js\";\n\n  let api: CarouselAPI;\n  let count = 0;\n  let current = 0;\n\n  $: if (api) {\n    count = api.scrollSnapList().length;\n    current = api.selectedScrollSnap() + 1;\n    api.on(\"select\", () => {\n      current = api.selectedScrollSnap() + 1;\n    });\n  }\n</script>\n\n<Carousel.Root bind:api>\n  <Carousel.Content>\n    <Carousel.Item>...</Carousel.Item>\n    <Carousel.Item>...</Carousel.Item>\n    <Carousel.Item>...</Carousel.Item>\n  </Carousel.Content>\n</Carousel.Root>\n```\n\n----------------------------------------\n\nTITLE: Basic Scroll Area Component Implementation in Svelte\nDESCRIPTION: Example showing how to import and use the ScrollArea component with vertical scrolling in a Svelte file. Creates a bordered scroll container with sample text content.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/components/scroll-area.md#2025-04-23_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { ScrollArea } from \"$lib/components/ui/scroll-area/index.js\";\n</script>\n\n<ScrollArea class=\"h-[200px] w-[350px] rounded-md border p-4\">\n  Jokester began sneaking into the castle in the middle of the night and\n  leaving jokes all over the place: under the king's pillow, in his soup, even\n  in the royal toilet. The king was furious, but he couldn't seem to stop\n  Jokester. And then, one day, the people of the kingdom discovered that the\n  jokes left by Jokester were so funny that they couldn't help but laugh. And\n  once they started laughing, they couldn't stop.\n</ScrollArea>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Data Table with Row Selection in Svelte\nDESCRIPTION: This Svelte component implements a data table with row selection functionality. It includes features such as filtering, column visibility toggles, sorting, and pagination. The code highlights the styling changes needed to accommodate checkboxes and adds a summary display showing how many rows are currently selected.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/components/data-table.md#2025-04-23_snippet_14\n\nLANGUAGE: svelte\nCODE:\n```\n<div>\n  <div class=\"flex items-center py-4\">\n    <Input\n      class=\"max-w-sm\"\n      placeholder=\"Filter emails...\"\n      type=\"text\"\n      bind:value={$filterValue}\n    />\n    <DropdownMenu.Root>\n      <DropdownMenu.Trigger asChild let:builder>\n        <Button variant=\"outline\" class=\"ml-auto\" builders={[builder]}>\n          Columns <ChevronDown class=\"ml-2 h-4 w-4\" />\n        </Button>\n      </DropdownMenu.Trigger>\n      <DropdownMenu.Content>\n        {#each flatColumns as col}\n          {#if hidableCols.includes(col.id)}\n            <DropdownMenu.CheckboxItem bind:checked={hideForId[col.id]}>\n              {col.header}\n            </DropdownMenu.CheckboxItem>\n          {/if}\n        {/each}\n      </DropdownMenu.Content>\n    </DropdownMenu.Root>\n  </div>\n  <div class=\"rounded-md border\">\n    <Table.Root {...$tableAttrs}>\n      <Table.Header>\n        {#each $headerRows as headerRow}\n          <Subscribe rowAttrs={headerRow.attrs()}>\n            <Table.Row>\n              {#each headerRow.cells as cell (cell.id)}\n                <Subscribe\n                  attrs={cell.attrs()}\n                  let:attrs\n                  props={cell.props()}\n                  let:props\n                >\n                  <Table.Head {...attrs} class=\"[&:has([role=checkbox])]:pl-3\">\n                    {#if cell.id === \"amount\"}\n                      <div class=\"text-right\">\n                        <Render of={cell.render()} />\n                      </div>\n                    {:else if cell.id === \"email\"}\n                      <Button variant=\"ghost\" on:click={props.sort.toggle}>\n                        <Render of={cell.render()} />\n                        <ArrowUpDown class={\"ml-2 h-4 w-4\"} />\n                      </Button>\n                    {:else}\n                      <Render of={cell.render()} />\n                    {/if}\n                  </Table.Head>\n                </Subscribe>\n              {/each}\n            </Table.Row>\n          </Subscribe>\n        {/each}\n      </Table.Header>\n      <Table.Body {...$tableBodyAttrs}>\n        {#each $pageRows as row (row.id)}\n          <Subscribe rowAttrs={row.attrs()} let:rowAttrs>\n            <Table.Row\n              {...rowAttrs}\n              data-state={$selectedDataIds[row.id] && \"selected\"}\n            >\n              {#each row.cells as cell (cell.id)}\n                <Subscribe attrs={cell.attrs()} let:attrs>\n                  <Table.Cell {...attrs} class=\"[&:has([role=checkbox])]:pl-3\">\n                    {#if cell.id === \"amount\"}\n                      <div class=\"text-right font-medium\">\n                        <Render of={cell.render()} />\n                      </div>\n                    {:else if cell.id === \"status\"}\n                      <div class=\"capitalize\">\n                        <Render of={cell.render()} />\n                      </div>\n                    {:else}\n                      <Render of={cell.render()} />\n                    {/if}\n                  </Table.Cell>\n                </Subscribe>\n              {/each}\n            </Table.Row>\n          </Subscribe>\n        {/each}\n      </Table.Body>\n    </Table.Root>\n  </div>\n  <div class=\"flex items-center justify-end space-x-4 py-4\">\n    <div class=\"text-muted-foreground flex-1 text-sm\">\n      {Object.keys($selectedDataIds).length} of{\" \"}\n      {$rows.length} row(s) selected.\n    </div>\n    <Button\n      variant=\"outline\"\n      size=\"sm\"\n      on:click={() => ($pageIndex = $pageIndex - 1)}\n      disabled={!$hasPreviousPage}>Previous</Button\n    >\n    <Button\n      variant=\"outline\"\n      size=\"sm\"\n      disabled={!$hasNextPage}\n      on:click={() => ($pageIndex = $pageIndex + 1)}>Next</Button\n    >\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Command Dialog Implementation in Svelte\nDESCRIPTION: Shows how to implement the Command component as a dialog, including keyboard shortcut handling to toggle the dialog's visibility.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/components/command.md#2025-04-23_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import * as Command from \"$lib/components/ui/command\";\n  import { onMount } from \"svelte\";\n\n  let open = false;\n\n  onMount(() => {\n    function handleKeydown(e: KeyboardEvent) {\n      if (e.key === \"k\" && (e.metaKey || e.ctrlKey)) {\n        e.preventDefault();\n        open = !open;\n      }\n    }\n\n    document.addEventListener(\"keydown\", handleKeydown);\n\n    return () => {\n      document.removeEventListener(\"keydown\", handleKeydown);\n    };\n  });\n</script>\n\n<Command.Dialog bind:open>\n  <Command.Input placeholder=\"Type a command or search...\" />\n  <Command.List>\n    <Command.Empty>No results found.</Command.Empty>\n    <Command.Group heading=\"Suggestions\">\n      <Command.Item>Calendar</Command.Item>\n      <Command.Item>Search Emoji</Command.Item>\n      <Command.Item>Calculator</Command.Item>\n    </Command.Group>\n  </Command.List>\n</Command.Dialog>\n```\n\n----------------------------------------\n\nTITLE: Implementing an Accordion FAQ Section in Svelte\nDESCRIPTION: This code demonstrates how to implement an accordion component for an FAQ section. It uses the Accordion components imported above to create collapsible sections for frequently asked questions.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/index.md#2025-04-23_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<Accordion.Root multiple>\n\n<Accordion.Item value=\"faq-1\">\n\n<Accordion.Trigger>\nWhy not packaged as a dependency?\n</Accordion.Trigger>\n\n<Accordion.Content>\n\nThe idea behind this is to give you ownership and control over the code, allowing you to decide how the components are built and styled.\n\nStart with some sensible defaults, then customize the components to your needs.\n\nOne of the drawback of packaging the components in an npm package is that the style is coupled with the implementation. _The design of your components should be separate from their implementation._\n\n</Accordion.Content>\n</Accordion.Item>\n<Accordion.Item value=\"faq-2\">\n<Accordion.Trigger>\nWhich frameworks are supported?\n</Accordion.Trigger>\n<Accordion.Content>\nThis port is built to be used with Svelte/SvelteKit.\n</Accordion.Content>\n</Accordion.Item>\n<Accordion.Item value=\"faq-3\">\n<Accordion.Trigger>\nCan I use this in my project?\n</Accordion.Trigger>\n<Accordion.Content>\nYes. Free to use for personal and commercial projects. No attribution required.\nBut let us know if you do use it. We'd love to see what you build with it.\n</Accordion.Content>\n</Accordion.Item>\n</Accordion.Root>\n```\n\n----------------------------------------\n\nTITLE: Implementing Collapsible Component in Svelte/TypeScript\nDESCRIPTION: Example showing how to implement a basic collapsible component with trigger and content sections. The component allows for expandable/collapsible content panels with a trigger element to toggle visibility.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/components/collapsible.md#2025-04-23_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import * as Collapsible from \"$lib/components/ui/collapsible\";\n</script>\n\n<Collapsible.Root>\n  <Collapsible.Trigger>Can I use this in my project?</Collapsible.Trigger>\n  <Collapsible.Content>\n    Yes. Free to use for personal and commercial projects. No attribution\n    required.\n  </Collapsible.Content>\n</Collapsible.Root>\n```\n\n----------------------------------------\n\nTITLE: Enabling Column Visibility with addHiddenColumns Plugin in Svelte Data Table\nDESCRIPTION: This snippet shows how to implement column visibility functionality in a Svelte data table by enabling the addHiddenColumns plugin, setting up column configuration, and tracking hidden column state. It includes initialization of the table with necessary plugins and column definitions.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/components/data-table.md#2025-04-23_snippet_10\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import {\n    createTable,\n    Render,\n    Subscribe,\n    createRender,\n  } from \"svelte-headless-table\";\n  import {\n    addPagination,\n    addSortBy,\n    addTableFilter,\n    addHiddenColumns,\n  } from \"svelte-headless-table/plugins\";\n  import { readable } from \"svelte/store\";\n  import ArrowUpDown from \"lucide-svelte/icons/arrow-up-down\";\n  import ChevronDown from \"lucide-svelte/icons/chevron-down\";\n  import * as Table from \"$lib/components/ui/table\";\n  import DataTableActions from \"./data-table-actions.svelte\";\n  import { Button } from \"$lib/components/ui/button\";\n  import { Input } from \"$lib/components/ui/input\";\n  import * as DropdownMenu from \"$lib/components/ui/dropdown-menu\";\n\n  type Payment = {\n    id: string;\n    amount: number;\n    status: \"pending\" | \"processing\" | \"success\" | \"failed\";\n    email: string;\n  };\n  const data: Payment[] = [\n    {\n      id: \"m5gr84i9\",\n      amount: 316,\n      status: \"success\",\n      email: \"ken99@yahoo.com\",\n    },\n    // ...\n  ];\n\n  const table = createTable(readable(data), {\n    page: addPagination(),\n    sort: addSortBy({ disableMultiSort: true }),\n    filter: addTableFilter({\n      fn: ({ filterValue, value }) => value.includes(filterValue),\n    }),\n    hide: addHiddenColumns(),\n  });\n\n  const columns = table.createColumns([\n    table.column({\n      accessor: \"id\",\n      header: \"ID\",\n      plugins: {\n        sort: {\n          disable: true,\n        },\n        filter: {\n          exclude: true,\n        },\n      },\n    }),\n    table.column({\n      accessor: \"status\",\n      header: \"Status\",\n      plugins: {\n        sort: {\n          disable: true,\n        },\n        filter: {\n          exclude: true,\n        },\n      },\n    }),\n    table.column({\n      accessor: \"email\",\n      header: \"Email\",\n    }),\n    table.column({\n      accessor: \"amount\",\n      header: \"Amount\",\n      cell: ({ value }) => {\n        const formatted = new Intl.NumberFormat(\"en-US\", {\n          style: \"currency\",\n          currency: \"USD\",\n        }).format(value);\n        return formatted;\n      },\n      plugins: {\n        sort: {\n          disable: true,\n        },\n        filter: {\n          exclude: true,\n        },\n      },\n    }),\n    table.column({\n      accessor: ({ id }) => id,\n      header: \"\",\n      cell: ({ value }) => {\n        return createRender(DataTableActions, { id: value });\n      },\n      plugins: {\n        sort: {\n          disable: true,\n        },\n        filter: {\n          exclude: true,\n        },\n      },\n    }),\n  ]);\n\n  const {\n    headerRows,\n    pageRows,\n    tableAttrs,\n    tableBodyAttrs,\n    pluginStates,\n    flatColumns,\n  } = table.createViewModel(columns);\n\n  const { pageIndex, hasNextPage, hasPreviousPage } = pluginStates.page;\n  const { filterValue } = pluginStates.filter;\n  const { hiddenColumnIds } = pluginStates.hide;\n\n  const ids = flatColumns.map((col) => col.id);\n  let hideForId = Object.fromEntries(ids.map((id) => [id, true]));\n\n  $: $hiddenColumnIds = Object.entries(hideForId)\n    .filter(([, hide]) => !hide)\n    .map(([id]) => id);\n\n  const hidableCols = [\"status\", \"email\", \"amount\"];\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using Toggle Group Component in Svelte\nDESCRIPTION: Example of how to use the Toggle Group component in a Svelte file. It demonstrates importing the component and creating a single-selection toggle group with three items.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/components/toggle-group.md#2025-04-23_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import * as ToggleGroup from \"$lib/components/ui/toggle-group\";\n</script>\n\n<ToggleGroup.Root type=\"single\">\n  <ToggleGroup.Item value=\"a\">A</ToggleGroup.Item>\n  <ToggleGroup.Item value=\"b\">B</ToggleGroup.Item>\n  <ToggleGroup.Item value=\"c\">C</ToggleGroup.Item>\n</ToggleGroup.Root>\n```\n\n----------------------------------------\n\nTITLE: Form Component Anatomy in Svelte\nDESCRIPTION: The basic structure of a form component showing the hierarchy of Form.Field, Form.Control, Form.Label, Form.Description, and Form.FieldErrors components.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/components/form.md#2025-04-23_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<form>\n  <Form.Field>\n    <Form.Control>\n      <Form.Label />\n      <!-- Any Form input component -->\n    </Form.Control>\n    <Form.Description />\n    <Form.FieldErrors />\n  </Form.Field>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Implementing Radio Group Component in Svelte\nDESCRIPTION: Example of implementing a basic radio group component with two options using shadcn-svelte and bits-ui. The component includes labels and demonstrates proper value binding and item structure.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/components/radio-group.md#2025-04-23_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { Label } from \"$lib/components/ui/label\";\n  import * as RadioGroup from \"$lib/components/ui/radio-group\";\n</script>\n\n<RadioGroup.Root value=\"option-one\">\n  <div class=\"flex items-center space-x-2\">\n    <RadioGroup.Item value=\"option-one\" id=\"option-one\" />\n    <Label for=\"option-one\">Option One</Label>\n  </div>\n  <div class=\"flex items-center space-x-2\">\n    <RadioGroup.Item value=\"option-two\" id=\"option-two\" />\n    <Label for=\"option-two\">Option Two</Label>\n  </div>\n</RadioGroup.Root>\n```\n\n----------------------------------------\n\nTITLE: Using Tooltip Component in Svelte\nDESCRIPTION: Example of how to use the tooltip component in a Svelte file. Demonstrates importing the component and structuring it with Root, Trigger, and Content elements.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/components/tooltip.md#2025-04-23_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import * as Tooltip from \"$lib/components/ui/tooltip\";\n</script>\n\n<Tooltip.Root>\n  <Tooltip.Trigger>Hover</Tooltip.Trigger>\n  <Tooltip.Content>\n    <p>Add to library</p>\n  </Tooltip.Content>\n</Tooltip.Root>\n```\n\n----------------------------------------\n\nTITLE: Carousel with Plugin Integration\nDESCRIPTION: Example demonstrating how to integrate plugins like autoplay with the carousel component.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/components/carousel.md#2025-04-23_snippet_7\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import Autoplay from \"embla-carousel-autoplay\";\n  import * as Carousel from \"$lib/components/ui/carousel/index.js\";\n</script>\n\n<Carousel.Root\n  plugins={[\n    Autoplay({\n      delay: 2000,\n    }),\n  ]}\n>\n  <!-- ... -->\n</Carousel.Root>\n```\n\n----------------------------------------\n\nTITLE: Using Textarea Component in Svelte\nDESCRIPTION: This snippet demonstrates the basic usage of the Textarea component in a Svelte template.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/components/textarea.md#2025-04-23_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<Textarea />\n```\n\n----------------------------------------\n\nTITLE: Implementing Alert Component in Svelte\nDESCRIPTION: Shows how to import and use the Alert component in a Svelte file. The example demonstrates creating a basic alert with a title and description.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/components/alert.md#2025-04-23_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import * as Alert from \"$lib/components/ui/alert\";\n</script>\n\n<Alert.Root>\n  <Alert.Title>Heads up!</Alert.Title>\n  <Alert.Description>\n    You can add components to your app using the cli.\n  </Alert.Description>\n</Alert.Root>\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Data Table in Svelte\nDESCRIPTION: Sets up a basic data table using Svelte Headless Table, including data definition, table initialization, and column creation.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/components/data-table.md#2025-04-23_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { createTable } from \"svelte-headless-table\";\n  import { readable } from \"svelte/store\";\n\n  type Payment = {\n    id: string;\n    amount: number;\n    status: \"pending\" | \"processing\" | \"success\" | \"failed\";\n    email: string;\n  };\n\n  const data: Payment[] = [\n    {\n      id: \"m5gr84i9\",\n      amount: 316,\n      status: \"success\",\n      email: \"ken99@yahoo.com\",\n    },\n    // ...\n  ];\n\n  const table = createTable(readable(data));\n\n  const columns = table.createColumns([\n    table.column({\n      accessor: \"id\",\n      header: \"ID\",\n    }),\n    table.column({\n      accessor: \"status\",\n      header: \"Status\",\n    }),\n    table.column({\n      accessor: \"email\",\n      header: \"Email\",\n    }),\n    table.column({\n      accessor: \"amount\",\n      header: \"Amount\",\n    }),\n    table.column({\n      accessor: ({ id }) => id,\n      header: \"\",\n    }),\n  ]);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using Badge Component in Svelte\nDESCRIPTION: This example demonstrates how to use the Badge component with an 'outline' variant. The Badge component wraps the text 'Badge' and applies the outline style.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/components/badge.md#2025-04-23_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<Badge variant=\"outline\">Badge</Badge>\n```\n\n----------------------------------------\n\nTITLE: Basic Carousel Implementation in Svelte\nDESCRIPTION: Basic setup and structure of the carousel component showing the root element, content container, and item elements.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/components/carousel.md#2025-04-23_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import * as Carousel from \"$lib/components/ui/carousel/index.js\";\n</script>\n\n<Carousel.Root>\n  <Carousel.Content>\n    <Carousel.Item>...</Carousel.Item>\n    <Carousel.Item>...</Carousel.Item>\n    <Carousel.Item>...</Carousel.Item>\n  </Carousel.Content>\n  <Carousel.Previous />\n  <Carousel.Next />\n</Carousel.Root>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Table Structure in Svelte\nDESCRIPTION: Demonstrates how to structure a complete table with caption, header, rows, and cells. This example shows a simple invoice table with styling classes applied to specific elements.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/components/table.md#2025-04-23_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<Table.Root>\n  <Table.Caption>A list of your recent invoices.</Table.Caption>\n  <Table.Header>\n    <Table.Row>\n      <Table.Head class=\"w-[100px]\">Invoice</Table.Head>\n      <Table.Head>Status</Table.Head>\n      <Table.Head>Method</Table.Head>\n      <Table.Head class=\"text-right\">Amount</Table.Head>\n    </Table.Row>\n  </Table.Header>\n  <Table.Body>\n    <Table.Row>\n      <Table.Cell class=\"font-medium\">INV001</Table.Cell>\n      <Table.Cell>Paid</Table.Cell>\n      <Table.Cell>Credit Card</Table.Cell>\n      <Table.Cell class=\"text-right\">$250.00</Table.Cell>\n    </Table.Row>\n  </Table.Body>\n</Table.Root>\n```\n\n----------------------------------------\n\nTITLE: Installing Sheet Component in Svelte\nDESCRIPTION: This snippet shows how to install the Sheet component using a package manager. It also provides instructions for manual installation by copying source files and installing the bits-ui dependency.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/components/sheet.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i bits-ui\n```\n\n----------------------------------------\n\nTITLE: Basic Button Usage in Svelte\nDESCRIPTION: Demonstrates the basic usage of the Button component with an outline variant.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/components/button.md#2025-04-23_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<Button variant=\"outline\">Button</Button>\n```\n\n----------------------------------------\n\nTITLE: Initializing Resizable Component in Svelte\nDESCRIPTION: Basic usage of the Resizable component to create a horizontal pane group with two resizable panes.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/components/resizable.md#2025-04-23_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import * as Resizable from \"$lib/components/ui/resizable\";\n</script>\n\n<Resizable.PaneGroup direction=\"horizontal\">\n  <Resizable.Pane>One</Resizable.Pane>\n  <Resizable.Handle />\n  <Resizable.Pane>Two</Resizable.Pane>\n</Resizable.PaneGroup>\n```\n\n----------------------------------------\n\nTITLE: Basic Checkbox Usage in Svelte\nDESCRIPTION: Demonstrates the simplest implementation of the Checkbox component without any additional props or configuration.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/components/checkbox.md#2025-04-23_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<Checkbox />\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Slider Component in Svelte\nDESCRIPTION: Demonstrates how to implement a basic slider component with TypeScript support. The slider allows selecting a value between 0 and 100 with a step of 1, initialized with a default value of 33.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/components/slider.md#2025-04-23_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { Slider } from \"$lib/components/ui/slider\";\n</script>\n\n<Slider value={[33]} max={100} step={1} />\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Switch Component in Svelte\nDESCRIPTION: This snippet demonstrates how to import and use the Switch component in a Svelte file. The Switch component is imported from the UI components library and can be used as a standalone element.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/components/switch.md#2025-04-23_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { Switch } from \"$lib/components/ui/switch\";\n</script>\n\n<Switch />\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Progress Component in Svelte\nDESCRIPTION: Basic example of importing the Progress component and implementing it with a value property. The value determines the percentage of completion to be displayed in the progress bar.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/components/progress.md#2025-04-23_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { Progress } from \"$lib/components/ui/progress\";\n</script>\n\n<Progress value={33} />\n```\n\n----------------------------------------\n\nTITLE: Adding ModeWatcher Component to Astro Page\nDESCRIPTION: This snippet shows how to import and use the ModeWatcher component from the mode-watcher library with the client:load directive for client-side execution.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/dark-mode/astro.md#2025-04-23_snippet_1\n\nLANGUAGE: astro\nCODE:\n```\n---\nimport \"$lib/styles/app.css\";\nimport { ModeWatcher } from \"mode-watcher\";\n---\n\n<!-- inline-script -->\n<html lang=\"en\">\n\t<body>\n      <h1>Astro</h1>\n      <ModeWatcher client:load />\n\t</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Row Actions Component with Dropdown Menu\nDESCRIPTION: Component implementation for row actions using a dropdown menu. Provides options to copy payment ID, view customer details, and payment information.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/components/data-table.md#2025-04-23_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import Ellipsis from \"lucide-svelte/icons/ellipsis\";\n  import * as DropdownMenu from \"$lib/components/ui/dropdown-menu\";\n  import { Button } from \"$lib/components/ui/button\";\n\n  export let id: string;\n</script>\n\n<DropdownMenu.Root>\n  <DropdownMenu.Trigger asChild let:builder>\n    <Button\n      variant=\"ghost\"\n      builders={[builder]}\n      size=\"icon\"\n      class=\"relative h-8 w-8 p-0\"\n    >\n      <span class=\"sr-only\">Open menu</span>\n      <Ellipsis class=\"h-4 w-4\" />\n    </Button>\n  </DropdownMenu.Trigger>\n  <DropdownMenu.Content>\n    <DropdownMenu.Group>\n      <DropdownMenu.Label>Actions</DropdownMenu.Label>\n      <DropdownMenu.Item on:click={() => navigator.clipboard.writeText(id)}>\n        Copy payment ID\n      </DropdownMenu.Item>\n    </DropdownMenu.Group>\n    <DropdownMenu.Separator />\n    <DropdownMenu.Item>View customer</DropdownMenu.Item>\n    <DropdownMenu.Item>View payment details</DropdownMenu.Item>\n  </DropdownMenu.Content>\n</DropdownMenu.Root>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Toggle Component in Svelte\nDESCRIPTION: Basic usage example of the Toggle component in a Svelte application. It demonstrates how to import the component from your library and implement a simple toggle button.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/components/toggle.md#2025-04-23_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { Toggle } from \"$lib/components/ui/toggle\";\n</script>\n\n<Toggle>Toggle</Toggle>\n```\n\n----------------------------------------\n\nTITLE: Implementing Label Component in Svelte/TypeScript\nDESCRIPTION: Demonstrates how to import and use the Label component to create an accessible form label. The component requires bits-ui as a dependency and expects a 'for' attribute to associate it with a form control.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/components/label.md#2025-04-23_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { Label } from \"$lib/components/ui/label\";\n</script>\n\n<Label for=\"email\">Your email address</Label>\n```\n\n----------------------------------------\n\nTITLE: Creating Vertical Resizable Panes in Svelte\nDESCRIPTION: Example of using the Resizable component to create a vertical pane group with two resizable panes. The direction prop is set to 'vertical'.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/components/resizable.md#2025-04-23_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import * as Resizable from \"$lib/components/ui/resizable\";\n</script>\n\n<Resizable.PaneGroup direction=\"vertical\">\n  <Resizable.Pane>One</Resizable.Pane>\n  <Resizable.Handle />\n  <Resizable.Pane>Two</Resizable.Pane>\n</Resizable.PaneGroup>\n```\n\n----------------------------------------\n\nTITLE: Implementing Aspect Ratio Component in Svelte\nDESCRIPTION: Shows how to use the AspectRatio component to maintain a 16:9 aspect ratio for an image. The component wraps the content and enforces the specified ratio while preserving responsive behavior.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/components/aspect-ratio.md#2025-04-23_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { AspectRatio } from \"$lib/components/ui/aspect-ratio\";\n</script>\n\n<div class=\"w-[450px]\">\n  <AspectRatio ratio={16 / 9} class=\"bg-muted\">\n    <img src=\"...\" alt=\"...\" class=\"rounded-md object-cover\" />\n  </AspectRatio>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Styling Table Cells in Svelte\nDESCRIPTION: Implementation of a data table with custom styling for amount and status cells. The amount cells are right-aligned and status values are capitalized.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/components/data-table.md#2025-04-23_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<div class=\"rounded-md border\">\n  <Table.Root {...$tableAttrs}>\n    <Table.Header>\n      {#each $headerRows as headerRow}\n        <Subscribe rowAttrs={headerRow.attrs()}>\n          <Table.Row>\n            {#each headerRow.cells as cell (cell.id)}\n              <Subscribe attrs={cell.attrs()} let:attrs props={cell.props()}>\n                <Table.Head {...attrs}>\n                  {#if cell.id === \"amount\"}\n                    <div class=\"text-right\">\n                      <Render of={cell.render()} />\n                    </div>\n                  {:else}\n                    <Render of={cell.render()} />\n                  {/if}\n                </Table.Head>\n              </Subscribe>\n            {/each}\n          </Table.Row>\n        </Subscribe>\n      {/each}\n    </Table.Header>\n    <Table.Body {...$tableBodyAttrs}>\n      {#each $pageRows as row (row.id)}\n        <Subscribe rowAttrs={row.attrs()} let:rowAttrs>\n          <Table.Row {...rowAttrs}>\n            {#each row.cells as cell (cell.id)}\n              <Subscribe attrs={cell.attrs()} let:attrs>\n                <Table.Cell {...attrs}>\n                  {#if cell.id === \"amount\"}\n                    <div class=\"text-right font-medium\">\n                      <Render of={cell.render()} />\n                    </div>\n                  {:else if cell.id === \"status\"}\n                    <div class=\"capitalize\">\n                      <Render of={cell.render()} />\n                    </div>\n                  {:else}\n                    <Render of={cell.render()} />\n                  {/if}\n                </Table.Cell>\n              </Subscribe>\n            {/each}\n          </Table.Row>\n        </Subscribe>\n      {/each}\n    </Table.Body>\n  </Table.Root>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Formatting Amount Column in Svelte Data Table\nDESCRIPTION: Updates the amount column definition to format the value as a USD currency string using Intl.NumberFormat.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/components/data-table.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst columns = table.createColumns([\n  // ... (other columns)\n  table.column({\n    accessor: \"amount\",\n    header: \"Amount\",\n    cell: ({ value }) => {\n      const formatted = new Intl.NumberFormat(\"en-US\", {\n        style: \"currency\",\n        currency: \"USD\",\n      }).format(value);\n      return formatted;\n    },\n  }),\n  // ... (other columns)\n]);\n```\n\n----------------------------------------\n\nTITLE: Basic Toast Implementation in Svelte\nDESCRIPTION: Demonstrates basic usage of the toast functionality with a button trigger, showing how to import and use the toast function from svelte-sonner\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/components/sonner.md#2025-04-23_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { toast } from \"svelte-sonner\";\n  import { Button } from \"$lib/components/ui/button\";\n</script>\n\n<Button on:click={() => toast(\"Hello world\")}>Show toast</Button>\n```\n\n----------------------------------------\n\nTITLE: Implementing Row Selection in Svelte Data Table with addSelectedRows Plugin\nDESCRIPTION: This snippet shows how to add row selection functionality to a Svelte data table using the addSelectedRows plugin. It configures the table with a checkbox column for selecting individual rows and the header checkbox for selecting all rows on the current page.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/components/data-table.md#2025-04-23_snippet_13\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import {\n    createTable,\n    Render,\n    Subscribe,\n    createRender,\n  } from \"svelte-headless-table\";\n  import {\n    addPagination,\n    addSortBy,\n    addTableFilter,\n    addHiddenColumns,\n    addSelectedRows,\n  } from \"svelte-headless-table/plugins\";\n  import { readable } from \"svelte/store\";\n  import ArrowUpDown from \"lucide-svelte/icons/arrow-up-down\";\n  import ChevronDown from \"lucide-svelte/icons/chevron-down\";\n  import * as Table from \"$lib/components/ui/table\";\n  import DataTableActions from \"./data-table-actions.svelte\";\n  import { Button } from \"$lib/components/ui/button\";\n  import { Input } from \"$lib/components/ui/input\";\n  import * as DropdownMenu from \"$lib/components/ui/dropdown-menu\";\n  import DataTableCheckbox from \"./data-table-checkbox.svelte\";\n\n  type Payment = {\n    id: string;\n    amount: number;\n    status: \"pending\" | \"processing\" | \"success\" | \"failed\";\n    email: string;\n  };\n\n  const data: Payment[] = [\n    {\n      id: \"m5gr84i9\",\n      amount: 316,\n      status: \"success\",\n      email: \"ken99@yahoo.com\",\n    },\n    // ...\n  ];\n\n  const table = createTable(readable(data), {\n    page: addPagination(),\n    sort: addSortBy({ disableMultiSort: true }),\n    filter: addTableFilter({\n      includeHiddenColumns: true,\n      fn: ({ filterValue, value }) => value.includes(filterValue),\n    }),\n    hide: addHiddenColumns(),\n    select: addSelectedRows(),\n  });\n\n  const columns = table.createColumns([\n    table.column({\n      accessor: \"id\",\n      header: (_, { pluginStates }) => {\n        const { allPageRowsSelected } = pluginStates.select;\n        return createRender(DataTableCheckbox, {\n          checked: allPageRowsSelected,\n        });\n      },\n      cell: ({ row }, { pluginStates }) => {\n        const { getRowState } = pluginStates.select;\n        const { isSelected } = getRowState(row);\n\n        return createRender(DataTableCheckbox, {\n          checked: isSelected,\n        });\n      },\n      plugins: {\n        sort: {\n          disable: true,\n        },\n        filter: {\n          exclude: true,\n        },\n      },\n    }),\n    table.column({\n      accessor: \"status\",\n      header: \"Status\",\n      plugins: {\n        sort: {\n          disable: true,\n        },\n        filter: {\n          exclude: true,\n        },\n      },\n    }),\n    table.column({\n      accessor: \"email\",\n      header: \"Email\",\n    }),\n    table.column({\n      accessor: \"amount\",\n      header: \"Amount\",\n      cell: ({ value }) => {\n        const formatted = new Intl.NumberFormat(\"en-US\", {\n          style: \"currency\",\n          currency: \"USD\",\n        }).format(value);\n        return formatted;\n      },\n      plugins: {\n        sort: {\n          disable: true,\n        },\n        filter: {\n          exclude: true,\n        },\n      },\n    }),\n    table.column({\n      accessor: ({ id }) => id,\n      header: \"\",\n      cell: ({ value }) => {\n        return createRender(DataTableActions, { id: value });\n      },\n      plugins: {\n        sort: {\n          disable: true,\n        },\n        filter: {\n          exclude: true,\n        },\n      },\n    }),\n  ]);\n\n  const {\n    headerRows,\n    pageRows,\n    tableAttrs,\n    tableBodyAttrs,\n    pluginStates,\n    flatColumns,\n    rows,\n  } = table.createViewModel(columns);\n\n  const { pageIndex, hasNextPage, hasPreviousPage } = pluginStates.page;\n  const { filterValue } = pluginStates.filter;\n  const { hiddenColumnIds } = pluginStates.hide;\n  const { selectedDataIds } = pluginStates.select;\n\n  const ids = flatColumns.map((col) => col.id);\n  let hideForId = Object.fromEntries(ids.map((id) => [id, true]));\n\n  $: $hiddenColumnIds = Object.entries(hideForId)\n    .filter(([, hide]) => !hide)\n    .map(([id]) => id);\n\n  const hidableCols = [\"status\", \"email\", \"amount\"];\n</script>\n```\n\n----------------------------------------\n\nTITLE: Carousel with Custom Options\nDESCRIPTION: Example showing how to pass custom options to the carousel component using the opts prop.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/components/carousel.md#2025-04-23_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<Carousel.Root\n  opts={{\n    align: \"start\",\n    loop: true,\n  }}\n>\n  <Carousel.Content>\n    <Carousel.Item>...</Carousel.Item>\n    <Carousel.Item>...</Carousel.Item>\n    <Carousel.Item>...</Carousel.Item>\n  </Carousel.Content>\n</Carousel.Root>\n```\n\n----------------------------------------\n\nTITLE: Configuring Path Aliases in SvelteKit\nDESCRIPTION: This snippet shows how to update the svelte.config.js file to include custom path aliases. This is necessary if you're not using the default $lib alias in your SvelteKit project.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/installation/sveltekit.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  // ... other config\n  kit: {\n    // ... other config\n    alias: {\n      \"@/*\": \"./path/to/lib/*\",\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using Skeleton Component in Svelte\nDESCRIPTION: Demonstrates implementation of a Skeleton component with specific styling for height, width and border radius\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/components/skeleton.md#2025-04-23_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<Skeleton class=\"h-[20px] w-[100px] rounded-full\" />\n```\n\n----------------------------------------\n\nTITLE: Creating a Link with Badge Styling in Svelte\nDESCRIPTION: This snippet shows how to create a link that looks like a badge using the badgeVariants helper function. It imports the helper and applies the badge styling to an anchor tag.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/components/badge.md#2025-04-23_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { badgeVariants } from \"$lib/components/ui/badge\";\n</script>\n\n<a href=\"/dashboard\" class={badgeVariants({ variant: \"outline\" })}>Badge</a>\n```\n\n----------------------------------------\n\nTITLE: Customizing Resizable Handle in Svelte\nDESCRIPTION: Demonstration of customizing the resizable handle by using the withHandle prop on the ResizableHandle component.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/components/resizable.md#2025-04-23_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import * as Resizable from \"$lib/components/ui/resizable\";\n</script>\n\n<Resizable.PaneGroup direction=\"vertical\">\n  <Resizable.Pane>One</Resizable.Pane>\n  <Resizable.Handle withHandle />\n  <Resizable.Pane>Two</Resizable.Pane>\n</Resizable.PaneGroup>\n```\n\n----------------------------------------\n\nTITLE: Adding Toaster Component in Svelte Layout\nDESCRIPTION: Shows how to integrate the Toaster component into a Svelte layout file, which is necessary for displaying toasts throughout the application\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/components/sonner.md#2025-04-23_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { Toaster } from \"$lib/components/ui/sonner\";\n</script>\n\n<Toaster />\n\n<slot />\n```\n\n----------------------------------------\n\nTITLE: Carousel with Fixed Spacing\nDESCRIPTION: Example showing how to implement fixed spacing between carousel items using padding utilities.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/components/carousel.md#2025-04-23_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<Carousel.Root>\n  <Carousel.Content class=\"-ml-4\">\n    <Carousel.Item class=\"pl-4\">...</Carousel.Item>\n    <Carousel.Item class=\"pl-4\">...</Carousel.Item>\n    <Carousel.Item class=\"pl-4\">...</Carousel.Item>\n  </Carousel.Content>\n</Carousel.Root>\n```\n\n----------------------------------------\n\nTITLE: Configuring Path Aliases in Vite\nDESCRIPTION: Sets up path aliases in vite.config.ts to ensure Vite recognizes the $lib alias pattern that matches the TypeScript configuration.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/installation/vite.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport path from \"path\";\n\nexport default defineConfig({\n  // ... other options\n  resolve: {\n    alias: {\n      $lib: path.resolve(\"./src/lib\"),\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Responsive Carousel Items\nDESCRIPTION: Implementation of responsive carousel items that adjust size based on screen width using Tailwind breakpoint classes.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/components/carousel.md#2025-04-23_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<Carousel.Root>\n  <Carousel.Content>\n    <Carousel.Item class=\"md:basis-1/2 lg:basis-1/3\">...</Carousel.Item>\n    <Carousel.Item class=\"md:basis-1/2 lg:basis-1/3\">...</Carousel.Item>\n    <Carousel.Item class=\"md:basis-1/2 lg:basis-1/3\">...</Carousel.Item>\n  </Carousel.Content>\n</Carousel.Root>\n```\n\n----------------------------------------\n\nTITLE: Defining Payment Data Structure in TypeScript\nDESCRIPTION: Defines the structure of a Payment object and provides sample data for use in the data table example.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/components/data-table.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype Payment = {\n  id: string;\n  amount: number;\n  status: \"pending\" | \"processing\" | \"success\" | \"failed\";\n  email: string;\n};\n\nexport const data: Payment[] = [\n  {\n    id: \"728ed52f\",\n    amount: 100,\n    status: \"pending\",\n    email: \"m@example.com\",\n  },\n  {\n    id: \"489e1d42\",\n    amount: 125,\n    status: \"processing\",\n    email: \"example@gmail.com\",\n  },\n  // ...\n];\n```\n\n----------------------------------------\n\nTITLE: Fixed Size Carousel Items\nDESCRIPTION: Example showing how to set fixed widths for carousel items using the basis utility class.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/components/carousel.md#2025-04-23_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<Carousel.Root>\n  <Carousel.Content>\n    <Carousel.Item class=\"basis-1/3\">...</Carousel.Item>\n    <Carousel.Item class=\"basis-1/3\">...</Carousel.Item>\n    <Carousel.Item class=\"basis-1/3\">...</Carousel.Item>\n  </Carousel.Content>\n</Carousel.Root>\n```\n\n----------------------------------------\n\nTITLE: Carousel with Responsive Spacing\nDESCRIPTION: Implementation of responsive spacing between carousel items that adjusts based on screen size.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/components/carousel.md#2025-04-23_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<Carousel.Root>\n  <Carousel.Content class=\"-ml-2 md:-ml-4\">\n    <Carousel.Item class=\"pl-2 md:pl-4\">...</Carousel.Item>\n    <Carousel.Item class=\"pl-2 md:pl-4\">...</Carousel.Item>\n    <Carousel.Item class=\"pl-2 md:pl-4\">...</Carousel.Item>\n  </Carousel.Content>\n</Carousel.Root>\n```\n\n----------------------------------------\n\nTITLE: Importing Table Components in Svelte\nDESCRIPTION: Shows how to import the Table component and its subcomponents in a Svelte file. This is the basic setup required before using the table components in your project.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/components/table.md#2025-04-23_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import * as Table from \"$lib/components/ui/table\";\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Inline Theme Script for Dark Mode in Astro\nDESCRIPTION: This script maintains dark mode preference in localStorage and prevents Flash of Unstyled Content (FOUC). It initializes the theme based on user preference or system settings and sets up a MutationObserver to track changes.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/dark-mode/astro.md#2025-04-23_snippet_0\n\nLANGUAGE: astro\nCODE:\n```\n<script is:inline>\n  const isBrowser = typeof localStorage !== 'undefined';\n  const getThemePreference = () => {\n    if (isBrowser && localStorage.getItem('theme')) {\n      return localStorage.getItem('theme');\n    }\n    return window.matchMedia('(prefers-color-scheme: dark)').matches\n      ? 'dark' : 'light';\n  };\n  const isDark = getThemePreference() === 'dark';\n  document.documentElement.classList[isDark ? 'add' : 'remove']('dark');\n\n  if (isBrowser) {\n    const observer = new MutationObserver(() => {\n      const isDark = document.documentElement.classList.contains('dark');\n      localStorage.setItem('theme', isDark ? 'dark' : 'light');\n    });\n    observer.observe(document.documentElement, {\n      attributes: true,\n      attributeFilter: ['class']\n    });\n  }\n</script>\n\n<html lang=\"en\">\n\t<body>\n      <h1>Astro</h1>\n\t</body>\n</html>\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Separator Component in Svelte\nDESCRIPTION: Basic implementation example showing how to import and use the Separator component in a Svelte application. The component provides a visual or semantic separation between content elements.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/components/separator.md#2025-04-23_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { Separator } from \"$lib/components/ui/separator\";\n</script>\n\n<Separator />\n```\n\n----------------------------------------\n\nTITLE: Importing Textarea Component in Svelte\nDESCRIPTION: This snippet shows how to import the Textarea component from the ui components library in a Svelte file.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/components/textarea.md#2025-04-23_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { Textarea } from \"$lib/components/ui/textarea\";\n</script>\n```\n\n----------------------------------------\n\nTITLE: CLI Usage: Shadcn-Svelte Init Command Options\nDESCRIPTION: The available options for the init command, which initializes a new project by setting up dependencies, utilities, and configuration files.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/cli.md#2025-04-23_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: shadcn-svelte init [options]\n\ninitialize your project and install dependencies\n\nOptions:\n  -c, --cwd <cwd>            the working directory (default: the current directory)\n  --no-deps                  disable adding & installing dependencies\n  --style <name>             the style for the components (choices: \"default\", \"new-york\")\n  --base-color <name>        the base color for the components (choices: \"slate\", \"gray\", \"zinc\", \"neutral\", \"stone\")\n  --css <path>               path to the global CSS file\n  --tailwind-config <path>   path to the tailwind config file\n  --components-alias <path>  import alias for components\n  --utils-alias <path>       import alias for utils\n  -h, --help                 display help for command\n```\n\n----------------------------------------\n\nTITLE: Importing Badge Component in Svelte\nDESCRIPTION: This snippet shows how to import the Badge component in a Svelte file. It's typically used at the top of a Svelte component file to make the Badge component available for use.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/components/badge.md#2025-04-23_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { Badge } from \"$lib/components/ui/badge\";\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing ModeWatcher in Svelte Layout File\nDESCRIPTION: This code shows how to import and use the ModeWatcher component in a Svelte root layout file to enable dark mode functionality. The ModeWatcher component manages the addition of the 'dark' class to the HTML element based on user preferences.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/dark-mode/svelte.md#2025-04-23_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { ModeWatcher } from \"mode-watcher\";\n</script>\n\n<ModeWatcher />\n<slot />\n```\n\n----------------------------------------\n\nTITLE: shadcn-svelte CLI Configuration Options\nDESCRIPTION: Displays the configuration options for the components.json file when initializing shadcn-svelte, including TypeScript usage, style preferences, and import aliases.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/installation/vite.md#2025-04-23_snippet_2\n\nLANGUAGE: txt\nCODE:\n```\nWould you like to use TypeScript (recommended)? › Yes\nWhich style would you like to use? › Default\nWhich color would you like to use as base color? › Slate\nWhere is your global CSS file? › src/app.css\nWhere is your tailwind.config.[cjs|js|ts] located? › tailwind.config.js\nConfigure the import alias for components: › $lib/components\nConfigure the import alias for utils: › $lib/utils\n```\n\n----------------------------------------\n\nTITLE: Card Title Heading Level Customization\nDESCRIPTION: Shows how to modify the heading level of the Card.Title component using the tag prop, allowing for semantic heading hierarchy.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/components/card.md#2025-04-23_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<Card.Title tag=\"h1\">This will render an H1</Card.Title>\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<Card.Title tag=\"h6\">This will render an H6</Card.Title>\n```\n\n----------------------------------------\n\nTITLE: Creating Utility Functions in utils.ts\nDESCRIPTION: This TypeScript snippet defines utility functions used by shadcn-svelte components, including a 'cn' helper for conditionally adding Tailwind CSS classes and a custom transition function 'flyAndScale' for animations.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/installation/manual.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\nimport { cubicOut } from \"svelte/easing\";\nimport type { TransitionConfig } from \"svelte/transition\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\ntype FlyAndScaleParams = {\n  y?: number;\n  x?: number;\n  start?: number;\n  duration?: number;\n};\n\nexport const flyAndScale = (\n  node: Element,\n  params: FlyAndScaleParams = { y: -8, x: 0, start: 0.95, duration: 150 }\n): TransitionConfig => {\n  const style = getComputedStyle(node);\n  const transform = style.transform === \"none\" ? \"\" : style.transform;\n\n  const scaleConversion = (\n    valueA: number,\n    scaleA: [number, number],\n    scaleB: [number, number]\n  ) => {\n    const [minA, maxA] = scaleA;\n    const [minB, maxB] = scaleB;\n\n    const percentage = (valueA - minA) / (maxA - minA);\n    const valueB = percentage * (maxB - minB) + minB;\n\n    return valueB;\n  };\n\n  const styleToString = (\n    style: Record<string, number | string | undefined>\n  ): string => {\n    return Object.keys(style).reduce((str, key) => {\n      if (style[key] === undefined) return str;\n      return str + key + \":\" + style[key] + \";\";\n    }, \"\");\n  };\n\n  return {\n    duration: params.duration ?? 200,\n    delay: 0,\n    css: (t) => {\n      const y = scaleConversion(t, [0, 1], [params.y ?? 5, 0]);\n      const x = scaleConversion(t, [0, 1], [params.x ?? 0, 0]);\n      const scale = scaleConversion(t, [0, 1], [params.start ?? 0.95, 1]);\n\n      return styleToString({\n        transform:\n          transform +\n          \"translate3d(\" +\n          x +\n          \"px, \" +\n          y +\n          \"px, 0) scale(\" +\n          scale +\n          \")\",\n        opacity: t,\n      });\n    },\n    easing: cubicOut,\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Using Button as a Link in Svelte\nDESCRIPTION: Shows how to convert a Button component into an anchor element by passing an href prop.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/components/button.md#2025-04-23_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { Button } from \"$lib/components/ui/button\";\n</script>\n\n<Button href=\"/dashboard\">Dashboard</Button>\n```\n\n----------------------------------------\n\nTITLE: Adding Column Visibility Dropdown Menu in Svelte Data Table\nDESCRIPTION: This snippet demonstrates how to implement a column visibility dropdown menu using DropdownMenu components from shadcn-svelte. The menu displays checkboxes for toggling column visibility based on the configuration established with the addHiddenColumns plugin.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/components/data-table.md#2025-04-23_snippet_11\n\nLANGUAGE: svelte\nCODE:\n```\n<div>\n  <div class=\"flex items-center py-4\">\n    <Input\n      class=\"max-w-sm\"\n      placeholder=\"Filter emails...\"\n      type=\"text\"\n      bind:value={$filterValue}\n    />\n    <DropdownMenu.Root>\n      <DropdownMenu.Trigger asChild let:builder>\n        <Button variant=\"outline\" class=\"ml-auto\" builders={[builder]}>\n          Columns <ChevronDown class=\"ml-2 h-4 w-4\" />\n        </Button>\n      </DropdownMenu.Trigger>\n      <DropdownMenu.Content>\n        {#each flatColumns as col}\n          {#if hidableCols.includes(col.id)}\n            <DropdownMenu.CheckboxItem bind:checked={hideForId[col.id]}>\n              {col.header}\n            </DropdownMenu.CheckboxItem>\n          {/if}\n        {/each}\n      </DropdownMenu.Content>\n    </DropdownMenu.Root>\n  </div>\n  <div class=\"rounded-md border\">\n    <Table.Root>\n      <!-- ... -->\n    </Table.Root>\n  </div>\n  <div class=\"flex items-center justify-end space-x-4 py-4\">\n    <!-- .... -->\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing flyAndScale Transition in TypeScript\nDESCRIPTION: This code defines the flyAndScale transition function in the utils.ts file, which is used to replace the old tailwindcss-animate system. It creates a customizable transition that combines flying and scaling effects with configurable parameters for direction, scale, and duration.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/changelog.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\nimport { cubicOut } from \"svelte/easing\";\nimport type { TransitionConfig } from \"svelte/transition\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\ntype FlyAndScaleParams = {\n  y?: number;\n  x?: number;\n  start?: number;\n  duration?: number;\n};\n\nexport const flyAndScale = (\n  node: Element,\n  params: FlyAndScaleParams = { y: -8, x: 0, start: 0.95, duration: 150 }\n): TransitionConfig => {\n  const style = getComputedStyle(node);\n  const transform = style.transform === \"none\" ? \"\" : style.transform;\n\n  const scaleConversion = (\n    valueA: number,\n    scaleA: [number, number],\n    scaleB: [number, number]\n  ) => {\n    const [minA, maxA] = scaleA;\n    const [minB, maxB] = scaleB;\n\n    const percentage = (valueA - minA) / (maxA - minA);\n    const valueB = percentage * (maxB - minB) + minB;\n\n    return valueB;\n  };\n\n  const styleToString = (\n    style: Record<string, number | string | undefined>\n  ): string => {\n    return Object.keys(style).reduce((str, key) => {\n      if (style[key] === undefined) return str;\n      return str + key + \":\" + style[key] + \";\";\n    }, \"\");\n  };\n\n  return {\n    duration: params.duration ?? 200,\n    delay: 0,\n    css: (t) => {\n      const y = scaleConversion(t, [0, 1], [params.y ?? 5, 0]);\n      const x = scaleConversion(t, [0, 1], [params.x ?? 0, 0]);\n      const scale = scaleConversion(t, [0, 1], [params.start ?? 0.95, 1]);\n\n      return styleToString({\n        transform:\n          transform +\n          \"translate3d(\" +\n          x +\n          \"px, \" +\n          y +\n          \"px, 0) scale(\" +\n          scale +\n          \")\",\n        opacity: t,\n      });\n    },\n    easing: cubicOut,\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Alert Dialog Component Example\nDESCRIPTION: Example command showing how to add a specific component (alert-dialog) to your project using the shadcn-svelte CLI.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/packages/cli/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-svelte add alert-dialog\n```\n\n----------------------------------------\n\nTITLE: Creating a Checkbox Component for Svelte Data Table Row Selection\nDESCRIPTION: This snippet creates a reusable checkbox component for data table row selection in Svelte. It wraps the UI checkbox component and exposes a binding to a boolean Writable store that tracks the checked state.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/components/data-table.md#2025-04-23_snippet_12\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { Checkbox } from \"$lib/components/ui/checkbox\";\n  import type { Writable } from \"svelte/store\";\n\n  export let checked: Writable<boolean>;\n</script>\n\n<Checkbox bind:checked={$checked} />\n```\n\n----------------------------------------\n\nTITLE: ESLint Configuration for Component Directory\nDESCRIPTION: Creates a component-specific ESLint configuration to prevent false positives when using Svelte-specific patterns like $$Props. This configuration only affects files in the ui components directory.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/installation/index.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rules\": {\n    \"@typescript-eslint/no-unused-vars\": [\n      \"warn\",\n      {\n        \"argsIgnorePattern\": \"^_\",\n        \"varsIgnorePattern\": \"^\\\\$\\\\$(Props|Events|Slots|Generic)$\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating AlertDialog Component with flyAndScale Transition in Svelte\nDESCRIPTION: This example shows how to update a Svelte component to use the new flyAndScale transition. It removes the animation classes previously used with tailwindcss-animate and adds transition props that use the flyAndScale function from utils.js.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/changelog.md#2025-04-23_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { AlertDialog as AlertDialogPrimitive } from \"bits-ui\";\n  import * as AlertDialog from \"./index.js\";\n  import { cn, flyAndScale } from \"$lib/utils.js\";\n\n  type $$Props = AlertDialogPrimitive.ContentProps;\n\n  let className: $$Props[\"class\"] = undefined;\n  export let transition: $$Props[\"transition\"] = flyAndScale;\n  export let transitionConfig: $$Props[\"transitionConfig\"] = undefined;\n  export { className as class };\n</script>\n\n<AlertDialog.Portal>\n  <AlertDialog.Overlay />\n  <AlertDialogPrimitive.Content\n    {transition}\n    {transitionConfig}\n    class={cn(\n      \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg  sm:rounded-lg md:w-full\",\n      className\n    )}\n    {...$$restProps}\n  >\n    <slot />\n  </AlertDialogPrimitive.Content>\n</AlertDialog.Portal>\n```\n\n----------------------------------------\n\nTITLE: Listing Available Components\nDESCRIPTION: Command to view all available components that can be added using the shadcn-svelte CLI. Running the add command without arguments displays the component list.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/packages/cli/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-svelte add\n```\n\n----------------------------------------\n\nTITLE: SvelteKit Load Function for Form Initialization\nDESCRIPTION: Sets up a SvelteKit page load function that initializes a form using superValidate with a Zod schema adapter. This is used to prepare the form for rendering.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/components/form.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { PageServerLoad } from \"./$types.js\";\nimport { superValidate } from \"sveltekit-superforms\";\nimport { formSchema } from \"./schema\";\nimport { zod } from \"sveltekit-superforms/adapters\";\n\nexport const load: PageServerLoad = async () => {\n  return {\n    form: await superValidate(zod(formSchema)),\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Typography Preview Components\nDESCRIPTION: A series of ComponentPreview elements for displaying different typography styles including headings, paragraphs, blockquotes, tables, and text variations.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/typography.md#2025-04-23_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<ComponentPreview name=\"typography-demo\">\n\n<div/>\n\n</ComponentPreview>\n```\n\n----------------------------------------\n\nTITLE: Importing Icons in Svelte Components\nDESCRIPTION: Shows the updated method for importing icons in Svelte components to improve dev server performance. It demonstrates deep imports for both Lucide and Radix icons.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/changelog.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport Check from \"lucide-svelte/icons/check\";\n// or\nimport Check from \"svelte-radix/Check.svelte\";\n```\n\n----------------------------------------\n\nTITLE: Installing Scroll Area Component Using bits-ui Package\nDESCRIPTION: Instructions for installing the bits-ui package which is required for the Scroll Area component.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/components/scroll-area.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbits-ui\n```\n\n----------------------------------------\n\nTITLE: Default Theme CSS Variables\nDESCRIPTION: Complete set of CSS variables defining the default theme, including both light and dark mode color schemes. Includes variables for background, foreground, muted, popover, card, border, input, primary, secondary, accent, destructive, and ring styles.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/theming.md#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  :root {\n    --background: 0 0% 100%;\n    --foreground: 240 10% 3.9%;\n\n    --muted: 240 4.8% 95.9%;\n    --muted-foreground: 240 3.8% 46.1%;\n\n    --popover: 0 0% 100%;\n    --popover-foreground: 240 10% 3.9%;\n\n    --card: 0 0% 100%;\n    --card-foreground: 240 10% 3.9%;\n\n    --border: 240 5.9% 90%;\n    --input: 240 5.9% 90%;\n\n    --primary: 240 5.9% 10%;\n    --primary-foreground: 0 0% 98%;\n\n    --secondary: 240 4.8% 95.9%;\n    --secondary-foreground: 240 5.9% 10%;\n\n    --accent: 240 4.8% 95.9%;\n    --accent-foreground: 240 5.9% 10%;\n\n    --destructive: 0 84.2% 60.2%;\n    --destructive-foreground: 0 0% 98%;\n\n    --ring: 240 5% 64.9%;\n\n    --radius: 0.5rem;\n  }\n\n  .dark {\n    --background: 240 10% 3.9%;\n    --foreground: 0 0% 98%;\n\n    --muted: 240 3.7% 15.9%;\n    --muted-foreground: 240 5% 64.9%;\n\n    --popover: 240 10% 3.9%;\n    --popover-foreground: 0 0% 98%;\n\n    --card: 240 10% 3.9%;\n    --card-foreground: 0 0% 98%;\n\n    --border: 240 3.7% 15.9%;\n    --input: 240 3.7% 15.9%;\n\n    --primary: 0 0% 98%;\n    --primary-foreground: 240 5.9% 10%;\n\n    --secondary: 240 3.7% 15.9%;\n    --secondary-foreground: 0 0% 98%;\n\n    --accent: 240 3.7% 15.9%;\n    --accent-foreground: 0 0% 98%;\n\n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 0 85.7% 97.3%;\n\n    --ring: 240 3.7% 15.9%;\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-background text-foreground;\n    font-feature-settings:\n      \"rlig\" 1,\n      \"calt\" 1;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Component Styling Example in Svelte\nDESCRIPTION: Demonstrates the usage of primary background and foreground color variables in a Svelte component.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/theming.md#2025-04-23_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<div class=\"bg-primary text-primary-foreground\">Hello</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring shadcn-svelte CLI Options\nDESCRIPTION: Configuration options for the shadcn-svelte initialization command, including TypeScript usage, style preferences, base color, file locations, and import aliases.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/installation/astro.md#2025-04-23_snippet_4\n\nLANGUAGE: txt\nCODE:\n```\nWould you like to use TypeScript (recommended)? › Yes\nWhich style would you like to use? › Default\nWhich color would you like to use as base color? › Slate\nWhere is your global CSS file? › src/styles/app.css\nWhere is your tailwind.config.[cjs|mjs|js|ts] located? › tailwind.config.mjs\nConfigure the import alias for components: › $lib/components\nConfigure the import alias for utils: › $lib/utils\n```\n\n----------------------------------------\n\nTITLE: CLI Configuration Options for shadcn-svelte\nDESCRIPTION: This snippet shows the configuration prompts and example responses when running the shadcn-svelte init command. It includes options for TypeScript, styling, color themes, and file locations.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/installation/sveltekit.md#2025-04-23_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nWould you like to use TypeScript (recommended)? › Yes\nWhich style would you like to use? › Default\nWhich color would you like to use as base color? › Slate\nWhere is your global CSS file? › src/app.css\nWhere is your tailwind.config.[cjs|js|ts] located? › tailwind.config.js\nConfigure the import alias for components: › $lib/components\nConfigure the import alias for utils: › $lib/utils\n```\n\n----------------------------------------\n\nTITLE: Installing Toggle Group Component in Svelte\nDESCRIPTION: Instructions for installing the Toggle Group component using a package manager or manual installation. It includes steps to install the required 'bits-ui' dependency.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/components/toggle-group.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i bits-ui\n```\n\n----------------------------------------\n\nTITLE: Setting Up Layout with CSS Imports in Svelte\nDESCRIPTION: This Svelte snippet creates a layout component that imports the global CSS styles and provides a slot for page content. This is a key part of setting up the shadcn-svelte styling system.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/installation/manual.md#2025-04-23_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import \"../app.pcss\";\n</script>\n\n<slot />\n```\n\n----------------------------------------\n\nTITLE: Importing and Using shadcn-svelte Button Component in Astro\nDESCRIPTION: Example of importing and using the Button component from shadcn-svelte in an Astro page. The component is imported from the components directory and used within the HTML structure.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/installation/astro.md#2025-04-23_snippet_7\n\nLANGUAGE: astro\nCODE:\n```\n---\nimport { Button } from \"$lib/components/ui/button\";\n---\n\n<html lang=\"en\">\n\t<head>\n\t\t<title>Astro</title>\n\t</head>\n\t<body>\n\t\t<Button>Hello World</Button>\n\t</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Installing Tooltip Component in Svelte Project\nDESCRIPTION: Instructions for installing the tooltip component using a package manager or manual installation. Includes steps to install the 'bits-ui' dependency.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/components/tooltip.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i bits-ui\n```\n\n----------------------------------------\n\nTITLE: CLI Output: Component Selection for Shadcn-Svelte Add Command\nDESCRIPTION: The interactive component selection interface displayed when executing the add command, allowing users to choose which UI components to add to their project.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/cli.md#2025-04-23_snippet_2\n\nLANGUAGE: txt\nCODE:\n```\nWhich components would you like to add? › Space to select. Return to submit.\n\n◯  accordion\n◯  alert\n◯  alert-dialog\n◯  aspect-ratio\n◯  avatar\n◯  badge\n◯  button\n◯  card\n◯  checkbox\n◯  collapsible\n```\n\n----------------------------------------\n\nTITLE: Importing and Using shadcn-svelte Button Component\nDESCRIPTION: Shows how to import and use the Button component from shadcn-svelte in a Svelte file after adding it to your project.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/installation/vite.md#2025-04-23_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { Button } from \"$lib/components/ui/button\";\n</script>\n\n<Button>Click me</Button>\n```\n\n----------------------------------------\n\nTITLE: Configuring Path Aliases in svelte.config.js\nDESCRIPTION: This snippet shows how to update the svelte.config.js file to include custom path aliases if you're not using the default $lib alias in SvelteKit.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/installation/manual.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  // ... other config\n  kit: {\n    // ... other config\n    alias: {\n      \"@/*\": \"./path/to/lib/*\",\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: CLI Usage: Shadcn-Svelte Add Command Options\nDESCRIPTION: The available options for the add command, which is used to add components and their dependencies to an existing project.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/cli.md#2025-04-23_snippet_3\n\nLANGUAGE: txt\nCODE:\n```\nUsage: shadcn-svelte add [options] [components...]\n\nadd components to your project\n\nArguments:\n  components         name of components\n\nOptions:\n  -c, --cwd <cwd>    the working directory (default: the current directory)\n  --no-deps          skips adding & installing package dependencies\n  -a, --all          install all components to your project (default: false)\n  -y, --yes          skip confirmation prompt (default: false)\n  -o, --overwrite    overwrite existing files (default: false)\n  --proxy <proxy>    fetch components from registry using a proxy\n  -p, --path <path>  the path to add the component to\n  -h, --help         display help for command\n```\n\n----------------------------------------\n\nTITLE: Configuring Path Aliases in TypeScript\nDESCRIPTION: Sets up TypeScript path aliases in tsconfig.json to enable importing from $lib paths, which is necessary for shadcn-svelte component imports.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/installation/vite.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"$lib\": [\"./src/lib\"],\n      \"$lib/*\": [\"./src/lib/*\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Checkbox Component in Svelte\nDESCRIPTION: Shows how to import the Checkbox component from the UI library in a Svelte file. This is the first step required before using the component in your application.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/components/checkbox.md#2025-04-23_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { Checkbox } from \"$lib/components/ui/checkbox\";\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Complete Dark Mode with Toggle in Astro\nDESCRIPTION: This snippet demonstrates the complete implementation including the ModeWatcher and a custom ModeToggle component. Both components use the client:load directive to ensure they're executed on the client side.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/dark-mode/astro.md#2025-04-23_snippet_2\n\nLANGUAGE: astro\nCODE:\n```\n---\nimport \"$lib/styles/app.css\";\nimport { ModeWatcher } from \"mode-watcher\";\nimport ModeToggle from \"$lib/components/mode-toggle.svelte\";\n---\n\n<!-- inline-script -->\n<html lang=\"en\">\n\t<body>\n      <h1>Astro</h1>\n      <ModeWatcher client:load />\n      <ModeToggle client:load />\n\t</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Installing Range Calendar Component with Package Manager\nDESCRIPTION: Shows how to install the required dependencies (bits-ui and @internationalized/date) for the Range Calendar component using a package manager.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/components/range-calendar.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbits-ui @internationalized/date\n```\n\n----------------------------------------\n\nTITLE: Creating Global CSS for TailwindCSS in Astro\nDESCRIPTION: Global stylesheet with basic TailwindCSS directives to include the framework's base, components, and utilities styles in the application.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/installation/astro.md#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n```\n\n----------------------------------------\n\nTITLE: Updating Tailwind Content Configuration\nDESCRIPTION: Fixing the content configuration in tailwind.config.mjs to include Astro files, ensuring that Tailwind styles are applied to all relevant file types in the project.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/installation/astro.md#2025-04-23_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nconst config = {\n  content: [\"./src/**/*.{astro,html,js,jsx,md,mdx,svelte,ts,tsx,vue}\"],\n  // ...\n};\n// ...\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Setting Aliases in components.json for shadcn-svelte\nDESCRIPTION: This section defines import aliases for utility functions and components. These values are used by the CLI to place generated components in the correct location.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/components-json.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"aliases\": {\n    \"utils\": \"$lib/utils.js\",\n    \"components\": \"$lib/components\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Components with shadcn-svelte CLI\nDESCRIPTION: Command to add specific components to your project. This will install the component and all its required dependencies.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/packages/cli/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-svelte add [component]\n```\n\n----------------------------------------\n\nTITLE: Updating Astro's Tailwind Configuration\nDESCRIPTION: Modifying the Astro configuration file to prevent duplicate Tailwind base styles by setting applyBaseStyles to false, since the styles are already included in the app.css file.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/installation/astro.md#2025-04-23_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineConfig({\n  integrations: [\n    tailwind({\n      applyBaseStyles: false,\n    }),\n    // ...\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Up CSS Variables for Theming in app.pcss\nDESCRIPTION: This CSS snippet sets up the base styling with CSS variables for theming in both light and dark modes. It includes variables for colors, borders, and other design elements used by shadcn-svelte components.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/installation/manual.md#2025-04-23_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  :root {\n    --background: 0 0% 100%;\n    --foreground: 222.2 47.4% 11.2%;\n\n    --muted: 210 40% 96.1%;\n    --muted-foreground: 215.4 16.3% 46.9%;\n\n    --popover: 0 0% 100%;\n    --popover-foreground: 222.2 47.4% 11.2%;\n\n    --border: 214.3 31.8% 91.4%;\n    --input: 214.3 31.8% 91.4%;\n\n    --card: 0 0% 100%;\n    --card-foreground: 222.2 47.4% 11.2%;\n\n    --primary: 222.2 47.4% 11.2%;\n    --primary-foreground: 210 40% 98%;\n\n    --secondary: 210 40% 96.1%;\n    --secondary-foreground: 222.2 47.4% 11.2%;\n\n    --accent: 210 40% 96.1%;\n    --accent-foreground: 222.2 47.4% 11.2%;\n\n    --destructive: 0 92% 38%;\n    --destructive-foreground: 210 40% 98%;\n\n    --ring: 215 20.2% 65.1%;\n\n    --radius: 0.5rem;\n  }\n\n  .dark {\n    --background: 224 71% 4%;\n    --foreground: 213 31% 91%;\n\n    --muted: 223 47% 11%;\n    --muted-foreground: 215.4 16.3% 56.9%;\n\n    --accent: 216 34% 17%;\n    --accent-foreground: 210 40% 98%;\n\n    --popover: 224 71% 4%;\n    --popover-foreground: 215 20.2% 65.1%;\n\n    --border: 216 34% 17%;\n    --input: 216 34% 17%;\n\n    --card: 224 71% 4%;\n    --card-foreground: 213 31% 91%;\n\n    --primary: 210 40% 98%;\n    --primary-foreground: 222.2 47.4% 1.2%;\n\n    --secondary: 222.2 47.4% 11.2%;\n    --secondary-foreground: 210 40% 98%;\n\n    --destructive: 359 51% 48%;\n    --destructive-foreground: 210 40% 98%;\n\n    --ring: 216 34% 17%;\n\n    --radius: 0.5rem;\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-background text-foreground;\n    font-feature-settings:\n      \"rlig\" 1,\n      \"calt\" 1;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Path Aliases in tsconfig.json for Non-SvelteKit Projects\nDESCRIPTION: This snippet demonstrates how to update the tsconfig.json file to set up path aliases for non-SvelteKit projects.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/installation/manual.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    // ... other options\n    \"paths\": {\n      \"$lib\": [\"./src/lib\"],\n      \"$lib/*\": [\"./src/lib/*\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Global CSS in Astro Page\nDESCRIPTION: Importing the global CSS file in the main Astro page to apply TailwindCSS styles site-wide.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/installation/astro.md#2025-04-23_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\n---\nimport \"$lib/styles/app.css\";\n---\n```\n\n----------------------------------------\n\nTITLE: CLI Output: Configuration Questions for Shadcn-Svelte Initialization\nDESCRIPTION: The output displayed during the init command execution, showing the configuration questions that will be asked to set up the components.json file for a Shadcn-Svelte project.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/cli.md#2025-04-23_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nWhich style would you like to use? › Default\nWhich base color would you like to use? › Slate\nWhere is your global CSS file? (this file will be overwritten) › src/app.css\nWhere is your Tailwind config located? (this file will be overwritten) › tailwind.config.[cjs|js|ts]\nConfigure the import alias for components: › $lib/components\nConfigure the import alias for utils: › $lib/utils\n```\n\n----------------------------------------\n\nTITLE: ESLint Flat Config for shadcn-svelte Components\nDESCRIPTION: Configures ESLint using the flat config format to properly handle Svelte-specific patterns in shadcn-svelte components. This setup applies special rules only to components in the ui directory.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/installation/index.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('eslint').Linter.FlatConfig[]} */\nexport default [\n  /* ... */\n  {\n    files: [\"**/*.svelte\"],\n    languageOptions: {\n      parserOptions: {\n        parser: ts.parser,\n      },\n    },\n  },\n  {\n    /* location of your components where you would like to apply these rules  */\n    files: [\"**/components/ui/**/*.svelte\"],\n    rules: {\n      \"@typescript-eslint/no-unused-vars\": [\n        \"warn\",\n        {\n          argsIgnorePattern: \"^_\",\n          varsIgnorePattern: \"^\\\\$\\\\$(Props|Events|Slots|Generic)$\",\n        },\n      ],\n    },\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Embedding Figma Interface with AspectRatio\nDESCRIPTION: Implementation of a responsive Figma embed using the AspectRatio component with a 16:9 ratio and styled iframe.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/figma.md#2025-04-23_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<AspectRatio ratio={16 / 9} class=\"w-full mt-4\">\n\n  <iframe\n    title=\"Figma page for shadcn\"\n    src=\"https://embed.figma.com/file/1203061493325953101/hf_embed?community_viewer=true&embed_host=shadcn&hub_file_id=1203061493325953101&kind=&viewer=1\"\n    class=\"h-full w-full overflow-hidden rounded-lg border bg-muted\"\n  />\n</AspectRatio>\n```\n\n----------------------------------------\n\nTITLE: Defining Schema in components.json for shadcn-svelte\nDESCRIPTION: This snippet shows how to specify the JSON schema for the components.json file. The schema helps in validating the structure of the configuration file.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/components-json.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://shadcn-svelte.com/schema.json\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring components.json for JavaScript Usage\nDESCRIPTION: Shows how to opt out of TypeScript by setting the typescript flag to false in the components.json configuration file. This allows using the JavaScript version of the components.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/installation/index.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"style\": \"default\",\n  \"tailwind\": {\n    \"config\": \"tailwind.config.js\",\n    \"css\": \"src/app/globals.css\"\n  },\n  \"typescript\": false,\n  \"aliases\": {\n    \"utils\": \"$lib/utils\",\n    \"components\": \"$lib/components\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing AspectRatio Component in Svelte\nDESCRIPTION: Imports the AspectRatio component from the shadcn registry for use in the Svelte application.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/figma.md#2025-04-23_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { AspectRatio } from '$lib/registry/new-york/ui/aspect-ratio';\n</script>\n```\n\n----------------------------------------\n\nTITLE: SvelteKit Page Component Using Settings Form\nDESCRIPTION: A simple SvelteKit page component that imports and renders the SettingsForm component, passing the form data from the load function.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/components/form.md#2025-04-23_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import type { PageData } from \"./$types.js\";\n  import SettingsForm from \"./settings-form.svelte\";\n  export let data: PageData;\n</script>\n\n<SettingsForm data={data.form} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS in components.json for shadcn-svelte\nDESCRIPTION: These settings help the CLI understand the Tailwind CSS setup in the project. It includes paths to the Tailwind config file and CSS file, as well as the base color for generating the default color palette.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/components-json.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tailwind\": {\n    \"config\": \"tailwind.config.js\" | \"tailwind.config.ts\",\n    \"css\": \"src/app.{p,post}css\",\n    \"baseColor\": \"gray\" | \"neutral\" | \"slate\" | \"stone\" | \"zinc\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Skeleton Component in Svelte\nDESCRIPTION: Shows how to import the Skeleton component from the UI components library\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/components/skeleton.md#2025-04-23_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { Skeleton } from \"$lib/components/ui/skeleton\";\n</script>\n```\n\n----------------------------------------\n\nTITLE: Dark Mode Navigation Component Structure\nDESCRIPTION: Component template that creates a grid layout with linked cards for navigating between Svelte and Astro dark mode implementation guides. Uses responsive grid layout and custom LinkedCard component.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/dark-mode/index.md#2025-04-23_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\timport { LinkedCard } from '$lib/components/docs'\n</script>\n\n<div class=\"grid sm:grid-cols-2 gap-4 mt-8 sm:gap-6\">\n  <LinkedCard href=\"/docs/dark-mode/svelte\">\n    <p class=\"font-medium text-xl\">Svelte</p>\n  </LinkedCard>\n  <LinkedCard href=\"/docs/dark-mode/astro\">\n    <p class=\"font-medium text-xl\">Astro</p>\n  </LinkedCard>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting Style in components.json for shadcn-svelte\nDESCRIPTION: This configuration option defines the style for components. It's important to note that this setting cannot be changed after initialization.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/components-json.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"style\": \"default\" | \"new-york\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Shadcn-Svelte Playground Commands\nDESCRIPTION: Commands for operating the shadcn-svelte playground environment, including starting the dev server, executing playground commands, and resetting configurations.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/playgrounds/playground-js/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm scn <command_here>\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm reset\n```\n\n----------------------------------------\n\nTITLE: Configuring Path Aliases in TypeScript\nDESCRIPTION: Adding path aliases to the tsconfig.json file to resolve paths, specifically setting up the $lib alias to point to the src directory for easier imports.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/installation/astro.md#2025-04-23_snippet_1\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"compilerOptions\": {\n    // ...\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"$lib/*\": [\"./src/*\"],\n    },\n    // ...\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling TypeScript in components.json for shadcn-svelte\nDESCRIPTION: This configuration option specifies whether TypeScript is used in the project.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/components-json.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"typescript\": true | false\n}\n```\n\n----------------------------------------\n\nTITLE: Typography Component Import and Setup\nDESCRIPTION: Initial setup code that imports the ComponentPreview component from the docs library.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/typography.md#2025-04-23_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { ComponentPreview } from \"$lib/components/docs\"\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Path Aliases in vite.config.ts for Non-SvelteKit Projects\nDESCRIPTION: This snippet shows how to update the vite.config.ts file to set up path aliases for non-SvelteKit projects, which complements the tsconfig.json setup.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/installation/manual.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport path from \"path\";\n\nexport default defineConfig({\n  // ... other options\n  resolve: {\n    alias: {\n      $lib: path.resolve(\"./src/lib\"),\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Form Label Component in Svelte\nDESCRIPTION: Demonstrates the changes required in the Form.Label component due to internal updates in formsnap. The 'ids' returned from getFormField() is now a store and needs to be prefixed with '$'.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/changelog.md#2025-04-23_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<Label\n  for={$ids.input}\n  class={cn($errors && \"text-destructive\", className)}\n  {...$$restProps}\n>\n  <slot />\n</Label>\n```\n\n----------------------------------------\n\nTITLE: Exporting Form Control Component in TypeScript\nDESCRIPTION: Shows how to define and export the new Form.Control component in the form index file. This component is used to wrap non-traditional form elements for accessibility and consistency.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/changelog.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// ...rest\nconst Control = FormPrimitive.Control;\n\nexport {\n  // ...rest\n  Control,\n  Control as FormControl,\n};\n```\n\n----------------------------------------\n\nTITLE: CLI Usage: Shadcn-Svelte Update Command Options\nDESCRIPTION: The available options for the update command, which is used to update previously installed components to their latest versions.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/cli.md#2025-04-23_snippet_4\n\nLANGUAGE: txt\nCODE:\n```\nUsage: shadcn-svelte update [options] [components...]\n\nupdate components in your project\n\nArguments:\n  components       name of components\n\nOptions:\n  -c, --cwd <cwd>  the working directory (default: the current directory)\n  -a, --all        update all existing components (default: false)\n  -y, --yes        skip confirmation prompt (default: false)\n  --proxy <proxy>  fetch components from registry using a proxy\n  -h, --help       display help for command\n```\n\n----------------------------------------\n\nTITLE: Running the Development Server for Shadcn-Svelte Playground\nDESCRIPTION: Command to run the development server for the 'www' package on port 5173, which is required for the playground to function properly.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/playgrounds/playground-ts/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nRun the dev server of `www`, ensuring it's running on port 5173.\n```\n\n----------------------------------------\n\nTITLE: Documenting Version Update for playground-js in Markdown\nDESCRIPTION: This snippet documents the version 0.0.2 update for playground-js. It specifies a patch change and notes an update to the shadcn-svelte dependency to version 0.7.0.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/playgrounds/playground-js/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# playground-js\n\n## 0.0.2\n\n### Patch Changes\n\n- Updated dependencies [bfdc861]\n  - shadcn-svelte@0.7.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy for Shadcn-Svelte CLI\nDESCRIPTION: Example of how to use HTTP proxy settings with the Shadcn-Svelte CLI to fetch components from the registry through a proxy server.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/cli.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nHTTP_PROXY=\"<proxy-url>\" npx shadcn-svelte@latest init\n```\n\n----------------------------------------\n\nTITLE: Executing Commands in the Shadcn-Svelte Playground\nDESCRIPTION: Command syntax for running specific commands in the shadcn-svelte playground environment using the 'scn' command-line tool.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/playgrounds/playground-ts/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm scn <command_here>\n```\n\n----------------------------------------\n\nTITLE: Configuring jsconfig.json for Import Aliases\nDESCRIPTION: Sets up import aliases in a JavaScript project using jsconfig.json. This configuration maps $lib/* to ./src/lib/*, allowing for cleaner imports in a non-TypeScript environment.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/installation/index.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"paths\": {\n      \"$lib/*\": [\"./src/lib/*\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Resetting the Shadcn-Svelte Playground Configuration\nDESCRIPTION: Command to reset scn-specific configurations in the playground to their default state, useful when starting fresh tests or experiments.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/playgrounds/playground-ts/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm reset\n```\n\n----------------------------------------\n\nTITLE: Configuring Astro Project Options in Bash\nDESCRIPTION: Configuration options for creating a new Astro project, including project location, template selection, dependency installation, TypeScript configuration, and git repository initialization.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/installation/astro.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n- Where should we create your new project?\n./your-app-name\n- How would you like to start your new project?\nChoose a starter template (or Empty)\n- Install dependencies?\nYes\n- Do you plan to write TypeScript?\nYes\n- How strict should TypeScript be?\nStrict\n- Initialize a new git repository? (optional)\nYes/No\n```\n\n----------------------------------------\n\nTITLE: Importing Button Component in Svelte\nDESCRIPTION: Shows how to import the Button component from the UI library in a Svelte file.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/components/button.md#2025-04-23_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { Button } from \"$lib/components/ui/button\";\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing Accordion and Documentation Components in Svelte\nDESCRIPTION: This code imports the Accordion component from the registry, the Callout component from docs, and the CircleAlert icon from lucide-svelte. These imports are used to build the documentation page with interactive accordion elements.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/index.md#2025-04-23_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import * as Accordion from '$lib/registry/new-york/ui/accordion';\n  import { Callout } from '$lib/components/docs';\n  import CircleAlert from \"lucide-svelte/icons/circle-alert\";\n</script>\n```\n\n----------------------------------------\n\nTITLE: Installing Drawer Component in Svelte\nDESCRIPTION: Instructions for installing the drawer component and its dependency, vaul-svelte. It includes both package manager and manual installation methods.\nSOURCE: https://github.com/huntabyte/shadcn-svelte/blob/main/sites/docs/src/content/components/drawer.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nvaul-svelte\n```"
  }
]