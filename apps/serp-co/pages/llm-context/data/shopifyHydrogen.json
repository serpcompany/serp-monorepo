[
  {
    "owner": "shopify",
    "repo": "hydrogen",
    "content": "TITLE: ProductForm Component Implementation in TypeScript/React\nDESCRIPTION: A form component that handles product variant selection and subscription plans. It includes support for product options, variant selection, selling plans, and add to cart functionality. The component implements SEO-friendly navigation patterns and handles both direct product variants and combined listing child products.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/cookbook/recipes/subscriptions/README.md#2025-04-11_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function ProductForm({\n  productOptions,\n  selectedVariant,\n  sellingPlanGroups,\n  selectedSellingPlan,\n}: {\n  productOptions: MappedProductOptions[];\n  selectedVariant: ProductFragment['selectedOrFirstAvailableVariant'];\n  selectedSellingPlan: SellingPlanFragment | null;\n  sellingPlanGroups: ProductFragment['sellingPlanGroups'];\n}) {\n  const navigate = useNavigate();\n  const {open} = useAside();\n  return (\n    <div className=\"product-form\">\n      {sellingPlanGroups.nodes.length > 0 ? (\n        <>\n          <SellingPlanSelector\n            sellingPlanGroups={sellingPlanGroups}\n            selectedSellingPlan={selectedSellingPlan}\n          >\n            {({sellingPlanGroup}) => (\n              <SellingPlanGroup\n                key={sellingPlanGroup.name}\n                sellingPlanGroup={sellingPlanGroup}\n              />\n            )}\n          </SellingPlanSelector>\n          <br />\n          <AddToCartButton\n            disabled={!selectedSellingPlan}\n            onClick={() => {\n              open('cart');\n            }}\n            lines={\n              selectedSellingPlan && selectedVariant\n                ? [\n                    {\n                      quantity: 1,\n                      selectedVariant,\n                      sellingPlanId: selectedSellingPlan.id,\n                      merchandiseId: selectedVariant.id,\n                    },\n                  ]\n                : []\n            }\n          >\n            {selectedSellingPlan ? 'Subscribe' : 'Select Subscription'}\n          </AddToCartButton>\n        </>\n      ) : (\n        productOptions.map((option) => {\n          if (option.optionValues.length === 1) return null;\n\n          return (\n            <div className=\"product-options\" key={option.name}>\n              <h5>{option.name}</h5>\n              <div className=\"product-options-grid\">\n                {option.optionValues.map((value) => {\n                  const {\n                    name,\n                    handle,\n                    variantUriQuery,\n                    selected,\n                    available,\n                    exists,\n                    isDifferentProduct,\n                    swatch,\n                  } = value;\n\n                  if (isDifferentProduct) {\n                    return (\n                      <Link\n                        className=\"product-options-item\"\n                        key={option.name + name}\n                        prefetch=\"intent\"\n                        preventScrollReset\n                        replace\n                        to={`/products/${handle}?${variantUriQuery}`}\n                        style={{\n                          border: selected\n                            ? '1px solid black'\n                            : '1px solid transparent',\n                          opacity: available ? 1 : 0.3,\n                        }}\n                      >\n                        <ProductOptionSwatch swatch={swatch} name={name} />\n                      </Link>\n                    );\n                  } else {\n                    return (\n                      <button\n                        type=\"button\"\n                        className={`product-options-item${\n                          exists && !selected ? ' link' : ''\n                        }`}\n                        key={option.name + name}\n                        style={{\n                          border: selected\n                            ? '1px solid black'\n                            : '1px solid transparent',\n                          opacity: available ? 1 : 0.3,\n                        }}\n                        disabled={!exists}\n                        onClick={() => {\n                          if (!selected) {\n                            navigate(`?${variantUriQuery}`, {\n                              replace: true,\n                              preventScrollReset: true,\n                            });\n                          }\n                        }}\n                      >\n                        <ProductOptionSwatch swatch={swatch} name={name} />\n                      </button>\n                    );\n                  }\n                })}\n              </div>\n              <AddToCartButton\n                disabled={!selectedVariant || !selectedVariant.availableForSale}\n                onClick={() => {\n                  open('cart');\n                }}\n                lines={\n                  selectedVariant\n                    ? [\n                        {\n                          merchandiseId: selectedVariant.id,\n                          quantity: 1,\n                          selectedVariant,\n                        },\n                      ]\n                    : []\n                }\n              >\n                {selectedVariant?.availableForSale ? 'Add to cart' : 'Sold out'}\n              </AddToCartButton>\n\n              <br />\n            </div>\n          );\n        })\n      )}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Running Basic GraphQL Queries in Hydrogen\nDESCRIPTION: Demonstrates how to use a Remix loader to fetch product data from Shopify using GraphQL queries. Shows how to leverage the storefront client, pass variables, and handle caching.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/rfc/fetching-data.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {ProductType} from '@shopify/hydrogen/storefront-api-types';\nimport {json, useLoaderData, type LoaderArgs} from '@shopify/remix-oxygen';\n\nexport async function loader({params, context: {storefront}}: LoaderArgs) {\n  const productQuery = storefront.query<ProductType>(\n    `#graphql\n      query Product($handle: String!) {\n        product(handle: $handle) {\n          id\n          title\n        }\n      }\n    `,\n    {\n      /**\n       * Pass variables related to the query.\n       */\n      variables: {\n        handle: params.handle,\n      },\n      /**\n       * Cache your server-side query with a built-in best practice default (SWR).\n       */\n      cache: storefront.CacheShort(),\n    },\n  );\n\n  return json({\n    product: await productQuery,\n  });\n}\n\nexport default function Product() {\n  const {product} = useLoaderData<typeof loader>();\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Localization in server.ts\nDESCRIPTION: Shows how to set up the default language and country settings in the server configuration. Uses the i18n object to specify locale preferences following Shopify's LanguageCode and CountryCode enums.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/rfc/guide-internationalization.md#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nreturn await requestHandler(\n  request,\n  {\n    env,\n    context,\n    storefront: {\n      ...\n      storefrontApiVersion: '2022-10',\n      i18n: {\n        language: 'EN',\n        country: 'CA',\n      },\n    },\n  },\n  {\n    session,\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Complete Pagination Implementation with Navigation in React\nDESCRIPTION: Full implementation of the Pagination component with render props pattern. Includes product listing, previous/next navigation links with state-based caching, and loading states. This demonstrates how to build a complete pagination UI.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/rfc/pagination.md#2025-04-11_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function Products() {\n  const {products} = useLoaderData<typeof loader>();\n\n  return (\n    <>\n      <Pagination connection={products} autoLoadOnScroll>\n        {({\n          endCursor,\n          hasNextPage,\n          hasPreviousPage,\n          nextPageUrl,\n          nodes,\n          prevPageUrl,\n          startCursor,\n          nextLinkRef,\n          isLoading,\n        }) => {\n          const itemsMarkup = nodes.map((product, i) => (\n            <Link to={`/products/${product.handle}`} key={product.id}>\n              {product.title}\n            </Link>\n          ));\n\n          return (\n            <>\n              {hasPreviousPage && (\n                <Link\n                  preventScrollReset={true}\n                  to={prevPageUrl}\n                  prefetch=\"intent\"\n                  state={{\n                    pageInfo: {\n                      endCursor,\n                      hasNextPage,\n                      startCursor,\n                      hasPreviousPage: undefined,\n                    },\n                    nodes,\n                  }}\n                >\n                  {isLoading ? 'Loading...' : 'Previous'}\n                </Link>\n              )}\n              {itemsMarkup}\n              {hasNextPage && (\n                <Link\n                  preventScrollReset={true}\n                  ref={nextLinkRef}\n                  to={nextPageUrl}\n                  prefetch=\"intent\"\n                  state={{\n                    pageInfo: {\n                      endCursor,\n                      hasPreviousPage,\n                      hasNextPage: undefined,\n                      startCursor,\n                    },\n                    nodes,\n                  }}\n                >\n                  {isLoading ? 'Loading...' : 'Next'}\n                </Link>\n              )}\n            </>\n          );\n        }}\n      </Pagination>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ProductPrice Component with Subscription Pricing Support\nDESCRIPTION: A TypeScript component that conditionally renders different price displays based on whether a selling plan is selected. It includes specialized logic for calculating subscription pricing based on different adjustment types.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/examples/subscriptions/README.md#2025-04-11_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nfunction ProductPrice({\n  selectedVariant,\n  selectedSellingPlan,\n}: {\n  selectedVariant: ProductVariantFragment;\n  selectedSellingPlan: SellingPlanFragment | null;\n}) {\n  return (\n    <div className=\"product-price\">\n      {selectedSellingPlan ? (\n        <SellingPlanPrice\n          selectedSellingPlan={selectedSellingPlan}\n          selectedVariant={selectedVariant}\n        />\n      ) : (\n        <ProductVariantPrice selectedVariant={selectedVariant} />\n      )}\n    </div>\n  );\n}\n\ntype SellingPlanPrice = {\n  amount: number;\n  currencyCode: CurrencyCode;\n};\n\n/*\n  Render the selected selling plan price is available\n*/\nfunction SellingPlanPrice({\n  selectedSellingPlan,\n  selectedVariant,\n}: {\n  selectedSellingPlan: SellingPlanFragment;\n  selectedVariant: ProductVariantFragment;\n}) {\n  const sellingPlanPriceAdjustments = selectedSellingPlan?.priceAdjustments;\n\n  if (!sellingPlanPriceAdjustments?.length) {\n    return <Money data={selectedVariant.price} />;\n  }\n\n  const selectedVariantPrice: SellingPlanPrice = {\n    amount: parseFloat(selectedVariant.price.amount),\n    currencyCode: selectedVariant.price.currencyCode,\n  };\n\n  const sellingPlanPrice: SellingPlanPrice = sellingPlanPriceAdjustments.reduce(\n    (acc, adjustment) => {\n      switch (adjustment.adjustmentValue.__typename) {\n        case 'SellingPlanFixedAmountPriceAdjustment':\n          return {\n            amount:\n              acc.amount +\n              parseFloat(adjustment.adjustmentValue.adjustmentAmount.amount),\n            currencyCode: acc.currencyCode,\n          };\n        case 'SellingPlanFixedPriceAdjustment':\n          return {\n            amount: parseFloat(adjustment.adjustmentValue.price.amount),\n            currencyCode: acc.currencyCode,\n          };\n        case 'SellingPlanPercentagePriceAdjustment':\n          return {\n            amount:\n              acc.amount *\n              (1 - adjustment.adjustmentValue.adjustmentPercentage),\n            currencyCode: acc.currencyCode,\n          };\n        default:\n          return acc;\n      }\n    },\n    selectedVariantPrice,\n  );\n\n  return (\n    <div className=\"selling-plan-price\">\n      <Money\n        data={{\n          amount: `${sellingPlanPrice.amount}`,\n          currencyCode: sellingPlanPrice.currencyCode,\n        }}\n      />\n    </div>\n  );\n}\n\n/**\n  Render the price of a product that does not have selling plans\n**/\nfunction ProductVariantPrice({\n  selectedVariant,\n}: {\n  selectedVariant: ProductVariantFragment;\n}) {\n  return selectedVariant?.compareAtPrice ? (\n    <>\n      <p>Sale</p>\n      <br />\n      <div className=\"product-price-on-sale\">\n        {selectedVariant ? <Money data={selectedVariant.price} /> : null}\n        <s>\n          <Money data={selectedVariant.compareAtPrice} />\n        </s>\n      </div>\n    </>\n  ) : (\n    selectedVariant?.price && <Money data={selectedVariant?.price} />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Performing GraphQL Mutations in Hydrogen\nDESCRIPTION: Shows how to use the storefront.mutate function to update data in Shopify. This example demonstrates updating a cart line item within a Remix action function, highlighting that mutations are never cached by default.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/rfc/fetching-data.md#2025-04-11_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function action({request, context: {storefront}}) {\n  const formData = await request.formData();\n\n  const cartMutation = storefront.mutate(\n    `#graphql\n      mutation lineItemUpdate($lineId: ID!, $input: CartLineUpdateInput!) {\n          lineItemUpdate(lineId: $lineId, input: $input) {\n            quantity\n          }\n      }\n    `,\n    {\n      /**\n       * Pass variables related to the query.\n       */\n      variables: {\n        lineId: formData.get('lineId'),\n        input: formData.get('input'),\n      },\n      /**\n       * Mutations are NEVER cached by default.\n       */\n    },\n  );\n\n  return json({\n    status: 'ok',\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Updating ProductForm Component with Subscription Support in TypeScript\nDESCRIPTION: A TypeScript component that handles product subscription plan selection. It renders a SellingPlanSelector, SellingPlanGroup, and updates the AddToCartButton to handle subscription selection state.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/examples/subscriptions/README.md#2025-04-11_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfunction ProductForm({\n  selectedSellingPlan,\n  selectedVariant,\n  sellingPlanGroups,\n}: {\n  selectedSellingPlan: SellingPlanFragment | null;\n  selectedVariant: ProductVariantFragment;\n  sellingPlanGroups: ProductFragment['sellingPlanGroups'];\n}) {\n  return (\n    <div className=\"product-form\">\n      {/* 4. Add the SellingPlanSelector component inside the ProductForm */}\n      <SellingPlanSelector\n        sellingPlanGroups={sellingPlanGroups}\n        selectedSellingPlan={selectedSellingPlan}\n      >\n        {({sellingPlanGroup}) => (\n          /* 5. Render the SellingPlanGroup component inside the SellingPlanSelector */\n          <SellingPlanGroup\n            key={sellingPlanGroup.name}\n            sellingPlanGroup={sellingPlanGroup}\n          />\n        )}\n      </SellingPlanSelector>\n      <br />\n\n      {/* 6. Update the AddToCartButton text and pass in the sellingPlanId */}\n      <AddToCartButton\n        disabled={\n          !selectedVariant ||\n          !selectedVariant.availableForSale ||\n          !selectedSellingPlan\n        }\n        onClick={() => {\n          window.location.href = window.location.href + '#cart-aside';\n        }}\n        lines={\n          selectedVariant\n            ? [\n                {\n                  merchandiseId: selectedVariant?.id,\n                  sellingPlanId: selectedSellingPlan?.id,\n                  quantity: 1,\n                },\n              ]\n            : []\n        }\n      >\n        {sellingPlanGroups.nodes\n          ? selectedSellingPlan\n            ? 'Subscribe'\n            : 'Select a subscription'\n          : selectedVariant?.availableForSale\n          ? 'Add to cart'\n          : 'Sold out'}\n      </AddToCartButton>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Deferred Data Loading with Suspense in Hydrogen\nDESCRIPTION: Shows how to prioritize critical data while deferring less important data using Remix's defer function and React Suspense. Demonstrates loading product information immediately while deferring reviews.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/rfc/fetching-data.md#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {defer, useLoaderData, type LoaderArgs} from '@shopify/remix-oxygen';\n\nexport async function loader({params, context: {storefront}}: LoaderArgs) {\n  const productQuery = storefront.query(\n    `#graphql\n      query Product($handle: String!) {\n        product(handle: $handle) {\n          id\n          title\n        }\n      }\n    `,\n    {\n      variables: {\n        handle: params.handle,\n      },\n    },\n  );\n\n  const reviewsQuery = storefront.query(\n    `#graphql\n      query ProductReviews($handle: String!) {\n        productReviews(handle: $handle) {\n          nodes {\n            description\n          }\n        }\n      }\n    `,\n    {\n      variables: {\n        handle: params.handle,\n      },\n    },\n  );\n\n  return defer({\n    product: await productQuery,\n    reviews: reviewsQuery,\n  });\n}\n\nexport default PageComponent() {\n  const {product, reviews} = useLoaderData<typeof loader>();\n\n  return (\n    <div>\n      <Product value={product} />\n      <Suspense fallback={<Spinner />}>\n        <Await resolve={reviews}>\n          {({productReviews}) => <ProductReviews value={productReviews.nodes}>}\n        </Await>\n      </Suspense>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Type-Safe Root Loader Data Access in Hydrogen\nDESCRIPTION: Creates a custom hook to access root loader data with proper TypeScript typing. This pattern enhances type safety when accessing data returned by the root loader from different parts of the application.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/templates/skeleton/CHANGELOG.md#2025-04-11_snippet_51\n\nLANGUAGE: typescript\nCODE:\n```\n// root.tsx\n\nimport { useMatches } from \"@remix-run/react\";\nimport { type SerializeFrom } from \"@shopify/remix-oxygen\";\n\nexport const useRootLoaderData = () => {\n  const [root] = useMatches();\n  return root?.data as SerializeFrom<typeof loader>;\n};\n\nexport function loader(context) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Caching Strategies for GraphQL Queries\nDESCRIPTION: Demonstrates how to apply different caching strategies to optimize performance in Hydrogen. Shows the use of CacheLong for stable data and CacheShort for frequently changing data.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/rfc/fetching-data.md#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {defer, type LoaderArgs} from '@shopify/remix-oxygen';\n\nexport async function loader({params, context: {storefront}}: LoaderArgs) {\n  const productQuery = storefront.query(\n    `#graphql\n      query Product($handle: String!) {\n        product(handle: $handle) {\n          id\n          title\n        }\n      }\n    `,\n    {\n      variables: {\n        handle: params.handle,\n      },\n      cache: storefront.CacheLong(),\n    },\n  );\n\n  const reviewsQuery = storefront.query(\n    `#graphql\n      query ProductReviews($handle: String!) {\n        productReviews(handle: $handle) {\n          nodes {\n            description\n          }\n        }\n      }\n    `,\n    {\n      variables: {\n        handle: params.handle,\n      },\n      cache: storefront.CacheShort(),\n    },\n  );\n\n  return defer({\n    product: await productQuery,\n    reviews: reviewsQuery,\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Product Component to Support Selling Plans\nDESCRIPTION: Updates the Product component to destructure the selectedSellingPlan from the loader data and extract sellingPlanGroups from product. It also passes these values to child components like ProductPrice and ProductForm.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/cookbook/recipes/subscriptions/README.md#2025-04-11_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport default function Product() {\n  const {product, selectedSellingPlan} = useLoaderData<typeof loader>();\n\n  // Optimistically selects a variant with given available variant information\n  const selectedVariant = useOptimisticVariant(\n    true,\n    product?.selectedOrFirstAvailableVariant,\n    product?.variants.nodes,\n  );\n\n  if (!product || !selectedVariant) {\n    return <div className=\"product-not-found\">Product not found</div>;\n  }\n\n  const productOptions = flattenConnection(product.options);\n\n  const optimizedVariantUrl = buildProductOptionURLs({\n    pathname: window.location.pathname,\n    productOptions,\n    selectedOrFirstAvailableVariant: selectedVariant,\n  });\n\n  const {title, descriptionHtml, sellingPlanGroups} = product;\n\n  return (\n    <div className=\"product\">\n      <ProductImage image={selectedVariant?.image} />\n      <ProductMain>\n        <h1>{title}</h1>\n        <ProductPrice\n          price={selectedVariant?.price}\n          compareAtPrice={selectedVariant?.compareAtPrice}\n          selectedSellingPlan={selectedSellingPlan}\n          selectedVariant={selectedVariant}\n        />\n        <br />\n        <ProductForm\n          productOptions={productOptions}\n          selectedVariant={selectedVariant}\n          selectedSellingPlan={selectedSellingPlan}\n          sellingPlanGroups={sellingPlanGroups}\n        />\n        <br />\n        <br />\n        <p>\n          <strong>Description</strong>\n        </p>\n        <br />\n        <div dangerouslySetInnerHTML={{__html: descriptionHtml}} />\n        <br />\n      </ProductMain>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Add to Cart Form in Remix\nDESCRIPTION: This code demonstrates how to create a component that sends add-to-cart requests using Remix's useFetcher hook. It includes a ProductCard component with an embedded AddToCartButton that sends form data to the cart route.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/rfc/cart.md#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport {useFetcher} from '@remix-run/react';\nimport {flattenConnection} from '@shopify/hydrogen-react';\n\nexport function ProductCard({product}) {\n  const firstVariant = flattenConnection(product?.variants)[0];\n\n  return (\n    <div>\n      <h2>{product.title}</h2>\n      <AddToCartButton\n        lines={[\n          {\n            quantity: 1,\n            merchandiseId: firstVariant.id,\n          },\n        ]}\n      />\n    </div>\n  );\n}\n\nfunction AddToCartButton({lines}) {\n  const fetcher = useFetcher();\n\n  return (\n    <fetcher.Form action=\"/cart\" method=\"post\">\n      <input type=\"hidden\" name=\"cartAction\" value=\"ADD_TO_CART\" />\n      <input type=\"hidden\" name=\"lines\" value={JSON.stringify(lines)} />\n      <button type=\"submit\">Add to Bag</button>\n    </fetcher.Form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Injecting the Storefront Client in Remix\nDESCRIPTION: Sets up the Hydrogen storefront client in a Remix application by configuring createStorefrontClient inside the getLoadContext function. This connects the application to Shopify's Storefront API.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/rfc/fetching-data.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {createStorefrontClient} from '@shopify/hydrogen';\nimport {createRequestHandler} from '@shopify/remix-oxygen';\n\nexport default {\n  async fetch(request: Request, env: Env, executionContext: ExecutionContext) {\n    const cache = await caches.open('hydrogen');\n\n    const handleRequest = createRequestHandler({\n      build: remixBuild,\n      mode: process.env.NODE_ENV,\n      getLoadContext() {\n        const {storefront} = createStorefrontClient({\n          cache,\n          waitUntil: (p: Promise) => executionContext.waitUntil(p),\n          publicStorefrontToken: env.SHOPIFY_STOREFRONT_API_PUBLIC_TOKEN,\n          storefrontApiVersion: env.SHOPIFY_STOREFRONT_API_VERSION,\n          storeDomain: env.SHOPIFY_STORE_DOMAIN,\n        });\n\n        return {storefront};\n      },\n    });\n\n    return handleRequest(request);\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Locale-Aware Link Component\nDESCRIPTION: A wrapper for Remix's Link component that automatically adds the current locale prefix to URLs. This ensures consistent navigation within the localized site structure.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/rfc/i18n.md#2025-04-11_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nexport function Link(props: LinkProps) {\n  const {to, className, ...resOfProps} = props;\n  const matches = useMatches();\n  const rootData = matches.find((match) => match.pathname === '/');\n\n  const selectedLocale = rootData?.selectedLocale;\n\n  let toWithLocale = to;\n\n  if (typeof to === 'string') {\n    toWithLocale = selectedLocale ? `${selectedLocale.pathPrefix}${to}` : to;\n  }\n\n  if (typeof className === 'function') {\n    return (\n      <RemixNavLink\n        to={toWithLocale}\n        className={className}\n        {...resOfProps}\n      />\n    );\n  }\n\n  return (\n    <RemixLink to={toWithLocale} className={className} {...resOfProps} />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SellingPlanPrice Calculation for Subscription Pricing\nDESCRIPTION: Specialized component that calculates and displays the adjusted price for a selected subscription plan. It handles three types of price adjustments: fixed amount, fixed price, and percentage-based adjustments, applying them to the base variant price.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/cookbook/recipes/subscriptions/README.md#2025-04-11_snippet_4\n\nLANGUAGE: TSX\nCODE:\n```\ntype SellingPlanPrice = {\n  amount: number;\n  currencyCode: CurrencyCode;\n};\n\n/*\n  Render the selected selling plan price is available\n*/\nfunction SellingPlanPrice({\n  selectedSellingPlan,\n  selectedVariant,\n}: {\n  selectedSellingPlan: SellingPlanFragment;\n  selectedVariant: ProductFragment['selectedOrFirstAvailableVariant'];\n}) {\n  if (!selectedVariant) {\n    return null;\n  }\n\n  const sellingPlanPriceAdjustments = selectedSellingPlan?.priceAdjustments;\n\n  if (!sellingPlanPriceAdjustments?.length) {\n    return selectedVariant ? <Money data={selectedVariant.price} /> : null;\n  }\n\n  const selectedVariantPrice: SellingPlanPrice = {\n    amount: parseFloat(selectedVariant.price.amount),\n    currencyCode: selectedVariant.price.currencyCode,\n  };\n\n  const sellingPlanPrice: SellingPlanPrice = sellingPlanPriceAdjustments.reduce(\n    (acc, adjustment) => {\n      switch (adjustment.adjustmentValue.__typename) {\n        case 'SellingPlanFixedAmountPriceAdjustment':\n          return {\n            amount:\n              acc.amount +\n              parseFloat(adjustment.adjustmentValue.adjustmentAmount.amount),\n            currencyCode: acc.currencyCode,\n          };\n        case 'SellingPlanFixedPriceAdjustment':\n          return {\n            amount: parseFloat(adjustment.adjustmentValue.price.amount),\n            currencyCode: acc.currencyCode,\n          };\n        case 'SellingPlanPercentagePriceAdjustment':\n          return {\n            amount:\n              acc.amount *\n              (1 - adjustment.adjustmentValue.adjustmentPercentage / 100),\n            currencyCode: acc.currencyCode,\n          };\n        default:\n          return acc;\n      }\n    },\n    selectedVariantPrice,\n  );\n\n  return (\n    <div className=\"selling-plan-price\">\n      <Money\n        data={{\n          amount: `${sellingPlanPrice.amount}`,\n          currencyCode: sellingPlanPrice.currencyCode,\n        }}\n      />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Optimistic Cart Updates in React\nDESCRIPTION: Demonstrates how to use the new useOptimisticCart() hook to apply optimistic updates to the cart, improving perceived performance when adding or modifying items.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/hydrogen/CHANGELOG.md#2025-04-11_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nexport function Cart({cart}) {\n  const optimisticCart = useOptimisticCart(cart);\n\n  if (!optimisticCart?.lines?.nodes?.length) return <p>Nothing in cart</p>;\n\n  return optimisticCart.lines.nodes.map((line) => (\n    <div key={line.id}>\n      <Link to={`/products${line.merchandise.product.handle}`}>\n        {line.merchandise.product.title}\n      </Link>\n    </div>\n  ));\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Static Countries Configuration in Shopify Hydrogen\nDESCRIPTION: Creates a static JSON object defining available countries with their language, country code, label, host, and optional path prefix for internationalization.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/rfc/guide-internationalization.md#2025-04-11_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nexport const countries = {\n  default: {\n    language: 'EN',\n    country: 'US',\n    label: 'United States (USD $)',\n    host: 'hydrogen.shop',\n  },\n  'en-ca': {\n    language: 'EN',\n    country: 'CA',\n    label: 'Canada (CAD $)',\n    host: 'ca.hydrogen.shop',\n  },\n  'fr-ca': {\n    language: 'EN',\n    country: 'CA',\n    label: 'Canada (Français) (CAD $)',\n    host: 'ca.hydrogen.shop',\n    pathPrefix: '/fr',\n  },\n  'en-au': {\n    language: 'EN',\n    country: 'AU',\n    label: 'Australia (AUD $)',\n    host: 'hydrogen.au',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Cart Drawer Toggle on Add to Cart\nDESCRIPTION: This code shows how to implement a cart drawer that automatically opens when a user adds an item to the cart. It uses the useCartFetchers hook to detect add-to-cart actions and responds accordingly.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/rfc/cart.md#2025-04-11_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n// app/components/Layout.jsx\n\nfunction Header({title, menu}) {\n  const {\n    isOpen: isCartOpen,\n    openDrawer: openCart,\n    closeDrawer: closeCart,\n  } = useDrawer();\n\n  // Detect any add to cart form request\n  const addToCartFetchers = useCartFetchers('ADD_TO_CART');\n\n  // toggle cart drawer when adding to cart\n  useEffect(() => {\n    if (isCartOpen || !addToCartFetchers.length) return;\n    openCart();\n  }, [addToCartFetchers, isCartOpen, openCart]);\n```\n\n----------------------------------------\n\nTITLE: Using TypeScript with Storefront API in Hydrogen\nDESCRIPTION: Demonstrates how to properly use TypeScript with the Storefront API in Hydrogen, leveraging generated types and TypeScript utilities like Pick and Omit to format types into needed shapes.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/templates/TEMPLATE_GUIDELINES.md#2025-04-11_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport type {Product} from '@shopify/hydrogen/storefront-api-types';\ntype MyCustomProduct = Pick<Product, 'name' | 'description'>;\n```\n\n----------------------------------------\n\nTITLE: Generating Localized Routes with Remix Config in Hydrogen\nDESCRIPTION: Configuration for Remix that automatically duplicates route files for localization. It creates routes under a $lang directory that re-export the original route components, enabling path-based localization patterns.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/rfc/guide-internationalization.md#2025-04-11_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nconst fs = require('fs');\nconst path = require('path');\nconst esbuild = require('esbuild');\nconst recursive = require('recursive-readdir');\n\nmodule.exports = {\n  ignoredRouteFiles: ['**/.*'],\n  async routes() {\n    const appDir = path.resolve(__dirname, 'app');\n    const routesDir = path.resolve(appDir, 'routes');\n    const langDir = path.resolve(routesDir, '$lang');\n\n    const files = await recursive(routesDir, [\n      (file) => {\n        return file.replace(/\\\\/g, '/').match(/routes\\/\\$lang\\//);\n      },\n    ]);\n\n    // eslint-disable-next-line no-console\n    console.log(`Duplicating ${files.length} route(s) for translations`);\n\n    for (let file of files) {\n      let bundle = await esbuild.build({\n        entryPoints: {entry: file},\n        bundle: false,\n        metafile: true,\n        write: false,\n      });\n\n      const moduleExports = bundle.metafile.outputs['entry.js'].exports;\n\n      const moduleId =\n        '~/' +\n        path\n          .relative(appDir, file)\n          .replace(/\\\\/g, '/')\n          .slice(0, -path.extname(file).length);\n\n      const outFile = path.resolve(langDir, path.relative(routesDir, file));\n\n      fs.mkdirSync(path.dirname(outFile), {recursive: true});\n      fs.writeFileSync(\n        outFile,\n        `export {${moduleExports.join(', ')}} from ${JSON.stringify(\n          moduleId,\n        )};\\n`,\n      );\n    }\n\n    return {};\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Shopify Cart Routes in Remix\nDESCRIPTION: This snippet shows how to set up cart routes in a Remix application, including handling cart actions and defining GraphQL mutations for cart operations like creation and adding items.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/rfc/cart.md#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// app/routes/cart.jsx\nimport invariant from 'tiny-invariant';\nimport {json} from '@shopify/remix-oxygen';\n\nexport async function action({request, context}) {\n  const {session, storefront} = context;\n  const headers = new Headers();\n\n  const [formData, storedCartId] = await Promise.all([\n    request.formData(),\n    session.get('cartId'),\n  ]);\n\n  let cartId = storedCartId;\n\n  const cartAction = formData.get('cartAction');\n  invariant(cartAction, 'No cartAction defined');\n\n  let status = 200;\n  let result = {};\n\n  switch (cartAction) {\n    case 'ADD_TO_CART':\n      // Business logic for adding an item to cart\n\n      // Validate form data\n      const lines = formData.get('lines')\n        ? JSON.parse(String(formData.get('lines')))\n        : [];\n      invariant(lines.length, 'No lines to add');\n\n      // No previous cart, create and add line(s)\n      if (!cartId) {\n        result = await cartCreate({\n          input: {lines},\n          storefront,\n        });\n      } else {\n        // Add line(s) to existing cart\n        result = await cartAdd({\n          cartId,\n          lines,\n          storefront,\n        });\n      }\n\n      cartId = result.cart.id;\n\n      break;\n    default:\n      invariant(false, `${cartAction} cart action is not defined`);\n  }\n\n  const redirectTo = formData.get('redirectTo') ?? null;\n  if (typeof redirectTo === 'string' && isLocalPath(redirectTo)) {\n    status = 303;\n    headers.set('Location', redirectTo);\n  }\n\n  // The Cart ID may change after each mutation. We need to update it each time in the session.\n  session.set('cartId', cartId);\n\n  const {cart, errors} = result;\n  return data({cart, errors}, {status, headers});\n}\n\nconst USER_ERROR_FRAGMENT = `#graphql\n  fragment ErrorFragment on CartUserError {\n    message\n    field\n    code\n  }\n`;\n\nconst LINES_CART_FRAGMENT = `#graphql\n  fragment CartLinesFragment on Cart {\n    id\n    totalQuantity\n  }\n`;\n\nconst CREATE_CART_MUTATION = `#graphql\n  mutation ($input: CartInput!) {\n    cartCreate(input: $input) {\n      cart {\n        ...CartLinesFragment\n      }\n      errors: userErrors {\n        ...ErrorFragment\n      }\n    }\n  }\n  ${LINES_CART_FRAGMENT}\n  ${USER_ERROR_FRAGMENT}\n`;\n\nexport async function cartCreate({input, storefront}) {\n  const {cartCreate} = await storefront.mutate(CREATE_CART_MUTATION, {\n    variables: {input},\n  });\n\n  invariant(cartCreate, 'No data returned from cartCreate mutation');\n\n  return cartCreate;\n}\n\nconst ADD_LINES_MUTATION = `#graphql\n  mutation ($cartId: ID!, $lines: [CartLineInput!]!) {\n    cartLinesAdd(cartId: $cartId, lines: $lines) {\n      cart {\n        ...CartLinesFragment\n      }\n      errors: userErrors {\n        ...ErrorFragment\n      }\n    }\n  }\n  ${LINES_CART_FRAGMENT}\n  ${USER_ERROR_FRAGMENT}\n`;\n\nexport async function cartAdd({cartId, lines, storefront}) {\n  const {cartLinesAdd} = await storefront.mutate(ADD_LINES_MUTATION, {\n    variables: {cartId, lines},\n  });\n\n  invariant(cartLinesAdd, 'No data returned from cartLinesAdd mutation');\n\n  return cartLinesAdd;\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Old and New Image Component Implementation in Hydrogen\nDESCRIPTION: Example of migrating from the old Image component configuration to the new simplified implementation that's responsive by default and requires less configuration.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/hydrogen/CHANGELOG.md#2025-04-11_snippet_20\n\nLANGUAGE: jsx\nCODE:\n```\n<Image\n  data={image}\n  widths={[400, 800, 1200]}\n  width=\"100px\"\n  sizes=\"90vw\"\n  loaderOptions={{\n    scale: 2,\n    crop: 'left',\n  }}\n/>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Image data={image} sizes=\"90vw\" crop=\"left\" aspectRatio=\"3/2\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing the Updated ProductForm Component with MappedProductOptions\nDESCRIPTION: This TSX component shows the new implementation of ProductForm that uses the MappedProductOptions type from Hydrogen. It renders product options, handles variant selection, and supports features like combined listings and swatches.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/templates/skeleton/CHANGELOG.md#2025-04-11_snippet_24\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Link, useNavigate } from \"@remix-run/react\";\nimport { type MappedProductOptions } from \"@shopify/hydrogen\";\nimport type {\n  Maybe,\n  ProductOptionValueSwatch,\n} from \"@shopify/hydrogen/storefront-api-types\";\nimport { AddToCartButton } from \"./AddToCartButton\";\nimport { useAside } from \"./Aside\";\nimport type { ProductFragment } from \"storefrontapi.generated\";\n\nexport function ProductForm({\n  productOptions,\n  selectedVariant,\n}: {\n  productOptions: MappedProductOptions[];\n  selectedVariant: ProductFragment[\"selectedOrFirstAvailableVariant\"];\n}) {\n  const navigate = useNavigate();\n  const { open } = useAside();\n  return (\n    <div className=\"product-form\">\n      {productOptions.map((option) => (\n        <div className=\"product-options\" key={option.name}>\n          <h5>{option.name}</h5>\n          <div className=\"product-options-grid\">\n            {option.optionValues.map((value) => {\n              const {\n                name,\n                handle,\n                variantUriQuery,\n                selected,\n                available,\n                exists,\n                isDifferentProduct,\n                swatch,\n              } = value;\n\n              if (isDifferentProduct) {\n                // SEO\n                // When the variant is a combined listing child product\n                // that leads to a different url, we need to render it\n                // as an anchor tag\n                return (\n                  <Link\n                    className=\"product-options-item\"\n                    key={option.name + name}\n                    prefetch=\"intent\"\n                    preventScrollReset\n                    replace\n                    to={`/products/${handle}?${variantUriQuery}`}\n                    style={{\n                      border: selected\n                        ? \"1px solid black\"\n                        : \"1px solid transparent\",\n\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of the New Image Component in Hydrogen\nDESCRIPTION: Shows the simplest implementation of the new Image component, along with its equivalent exhaustively declared props and an alternative implementation without using the data prop.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/hydrogen/CHANGELOG.md#2025-04-11_snippet_21\n\nLANGUAGE: jsx\nCODE:\n```\n<Image data={data} />\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Image\n  data={data}\n  crop=\"center\"\n  decoding=\"async\"\n  loading=\"lazy\"\n  width=\"100%\"\n  sizes=\"100vw\"\n  srcSetOptions={{\n    interval: 15,\n    startingWidth: 200,\n    incrementSize: 200,\n    placeholderWidth: 100,\n  }}\n/>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Image\n  src={data.url}\n  alt={data.altText}\n  aspectRatio={`${data.width}/${data.height}`}\n/>\n```\n\n----------------------------------------\n\nTITLE: Updated GraphQL Query with Pagination Parameters\nDESCRIPTION: Enhanced GraphQL query that includes pagination variables, cursor parameters, and the pagination page info fragment. This supports fetching paginated product data from the Storefront API.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/rfc/pagination.md#2025-04-11_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst PRODUCTS_QUERY = `#graphql\n+ ${PAGINATION_PAGE_INFO_FRAGMENT}\n  query (\n    $country: CountryCode\n    $language: LanguageCode\n+   $first: Int\n+   $last: Int\n+   $startCursor: String\n+   $endCursor: String\n  ) @inContext(country: $country, language: $language) {\n    products(\n+     first: $first,\n+     last: $last,\n+     before: $startCursor,\n+     after: $endCursor\n    ) {\n      nodes {\n        id\n        title\n        publishedAt\n        handle\n        variants(first: 1) {\n          nodes {\n            id\n            image {\n              url\n              altText\n              width\n              height\n            }\n          }\n        }\n      }\n+     pageInfo {\n+       ...PaginationPageInfoFragment\n+     }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Implementing Loader Function for Search Route in TypeScript\nDESCRIPTION: This loader function handles GET requests for the search route. It checks if the request is for regular search and calls the search function accordingly.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/templates/skeleton/guides/search/search.md#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function loader({request, context}: LoaderFunctionArgs) {\n  const url = new URL(request.url);\n  const isRegular = !url.searchParams.has('predictive');\n\n  if (!isRegular) {\n    return {}\n  }\n\n  const searchPromise = regularSearch({request, context});\n\n  searchPromise.catch((error: Error) => {\n    console.error(error);\n    return {term: '', result: null, error: error.message};\n  });\n\n  return await searchPromise;\n}\n```\n\n----------------------------------------\n\nTITLE: Enhanced ProductPrice Component with Subscription Price Support\nDESCRIPTION: Updated ProductPrice component that handles both regular pricing and subscription-based pricing. It renders standard or comparative prices for regular purchases, and calculates adjusted prices for subscription plans based on different types of price adjustments.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/cookbook/recipes/subscriptions/README.md#2025-04-11_snippet_3\n\nLANGUAGE: TSX\nCODE:\n```\nexport function ProductPrice({\n  price,\n  compareAtPrice,\n  selectedSellingPlan,\n  selectedVariant,\n}: {\n  price?: MoneyV2;\n  compareAtPrice?: MoneyV2 | null;\n  selectedVariant?: ProductFragment['selectedOrFirstAvailableVariant'];\n  selectedSellingPlan?: SellingPlanFragment | null;\n}) {\n  if (selectedSellingPlan) {\n    return (\n      <SellingPlanPrice\n        selectedSellingPlan={selectedSellingPlan}\n        selectedVariant={selectedVariant}\n      />\n    );\n  }\n\n  return (\n    <div className=\"product-price\">\n      {compareAtPrice ? (\n        <div className=\"product-price-on-sale\">\n          {price && <Money data={price} />}\n          <s>\n            <Money data={compareAtPrice} />\n          </s>\n        </div>\n      ) : (\n        price && <Money data={price} />\n      )}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Analytics Events in Remix Loaders and Actions\nDESCRIPTION: This JSX snippet demonstrates how to implement analytics events in Remix loaders and actions. It shows the structure for attaching analytics data to both page loads and user actions.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/rfc/analytics.md#2025-04-11_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// routes/products/$productHandle.jsx\n\nexport const loader() {\n  return json({\n    analytics: [{  // type of AnalyticsEvents\n      eventName: 'PRODUCT_VIEW'\n    }]\n  })\n}\n\nexport const action() {\n  return json({\n    analytics: [{  // type of AnalyticsEvents\n      eventName: 'ADD_TO_CART',\n      payload: {\n        variantId: '123'\n      }\n    }]\n  })\n}\n\ntype AnalyticsEvent = {\n  eventName: string;\n  payload?: {\n    products?: string[],\n    [string]: any\n  }\n}\n\ntype AnalyticsEvents = AnalyticsEvent[];\n```\n\n----------------------------------------\n\nTITLE: Extending Cart Action with Additional Data\nDESCRIPTION: These code snippets show how to extend the cart action to accept additional form data such as cart notes. It includes both the server-side switch case modification and the client-side form update.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/rfc/cart.md#2025-04-11_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// app/routes/cart.jsx\nswitch (cartAction) {\n  case 'ADD_TO_CART':\n    ...\n\n    const note = formData.get('cartNote') || null;\n\n    if (!cartId) {\n      result = await cartCreate({\n        input: {lines, note},\n        storefront,\n      });\n```\n\nLANGUAGE: jsx\nCODE:\n```\n// Add to cart form\n<fetcher.Form action=\"/cart\" method=\"post\">\n  <input type=\"hidden\" name=\"cartAction\" value=\"ADD_TO_CART\" />\n  <input type=\"hidden\" name=\"lines\" value={JSON.stringify(lines)} />\n  <input type=\"hidden\" name=\"cartNote\" value={cartNotes} />\n  <button type=\"submit\">Add to Bag</button>\n</fetcher.Form>\n```\n\n----------------------------------------\n\nTITLE: Implementing Optimistic UI for Add to Cart\nDESCRIPTION: These snippets demonstrate how to implement optimistic UI for add-to-cart actions. It includes a modified AddToCartButton component with loading state and a custom hook to track form submissions by event ID.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/rfc/cart.md#2025-04-11_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nfunction AddToCartButton({lines}) {\n  const fetcher = useFetcher();\n\n  // Create an unique id for our form\n  const eventId = useId();\n  const eventIdFetchers = useEventIdFetchers(eventId);\n  const isAdding = !!eventIdFetchers.length;\n\n  return (\n    <fetcher.Form action=\"/cart\" method=\"post\">\n      <input type=\"hidden\" name=\"cartAction\" value=\"ADD_TO_CART\" />\n      <input type=\"hidden\" name=\"eventId\" value={eventId} />\n      <input type=\"hidden\" name=\"lines\" value={JSON.stringify(lines)} />\n      <button type=\"submit\" disabled={isAdding}>\n        {isAdding ? 'Adding ...' : 'Add to Bag'}\n      </button>\n    </fetcher.Form>\n  );\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nexport function useEventIdFetchers(eventId) {\n  const fetchers = useFetchers();\n  const cartFetchers = [];\n\n  for (const fetcher of fetchers) {\n    const formData = fetcher.submission?.formData;\n    if (formData && formData.get('eventId') === eventId) {\n      cartFetchers.push(fetcher);\n    }\n  }\n  return cartFetchers;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Search Form and Results in React\nDESCRIPTION: This React component renders the search page, including the search form and results. It uses the SearchForm and SearchResults components to display the search interface and results.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/templates/skeleton/guides/search/search.md#2025-04-11_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {SearchForm} from '~/components/SearchForm';\nimport {SearchResults} from '~/components/SearchResults';\n\nexport default function SearchPage() {\n  const {term, result} = useLoaderData<typeof loader>();\n\n  return (\n    <div className=\"search\">\n      <h1>Search</h1>\n      <SearchForm>\n        {({inputRef}) => (\n          <>\n            <input\n              defaultValue={term}\n              name=\"q\"\n              placeholder=\"Search…\"\n              ref={inputRef}\n              type=\"search\"\n            />\n            &nbsp;\n            <button type=\"submit\">Search</button>\n          </>\n        )}\n      </SearchForm>\n      {!term || !result?.total ? (\n        <SearchResults.Empty />\n      ) : (\n        <SearchResults result={result} term={term}>\n          {({articles, pages, products, term}) => (\n            <div>\n              <SearchResults.Products products={products} term={term} />\n              <SearchResults.Pages pages={pages} term={term} />\n              <SearchResults.Articles articles={articles} term={term} />\n            </div>\n          )}\n        </SearchResults>\n      )}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SEO Robots Meta Tag in Route Module (JavaScript)\nDESCRIPTION: This snippet shows how to set up the robots option in the SEO config for granular control over the robots meta tag. It can be configured on both a global and per-page basis using the handle.seo property.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/hydrogen/CHANGELOG.md#2025-04-11_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nexport handle = {\n  seo: {\n    robots: {\n      noIndex: false,\n      noFollow: false,\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Analytics Event Collection in Remix\nDESCRIPTION: This JSX snippet demonstrates how to implement an Analytics component that collects events from Remix loaders and fetchers. It gathers analytics data and sends it to both server-side and client-side analytics frameworks.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/rfc/analytics.md#2025-04-11_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nexport const Analytics() {\n  const dataLoaders = useMatches();\n  const fetchers = useFetchers();\n\n  // Gather all data that have a `analytics` payload\n  const events = [\n    // merge of events to fire\n    'PAGE_VIEW',\n    'PRODUCT_VIEW'\n  ];\n\n  // Fire to server endpoint - most likely put this in a convenient function\n  const data = fetch('/events', {\n    method: 'post',\n    body: JSON.stringify(events)\n  })\n\n  // Fire to client side analytics frameworks (or pass to a function callback)\n  window.dataLayer.push(data.gtm)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Fragments for Predictive Search in TypeScript\nDESCRIPTION: This snippet defines GraphQL fragments for different types of search results (articles, collections, pages, products, and queries) used in the predictive search query.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/templates/skeleton/guides/predictiveSearch/predictiveSearch.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst PREDICTIVE_SEARCH_ARTICLE_FRAGMENT = `#graphql\n  fragment PredictiveArticle on Article {\n    __typename\n    id\n    title\n    handle\n    blog {\n      handle\n    }\n    image {\n      url\n      altText\n      width\n      height\n    }\n    trackingParameters\n  }\n` as const;\n\nconst PREDICTIVE_SEARCH_COLLECTION_FRAGMENT = `#graphql\n  fragment PredictiveCollection on Collection {\n    __typename\n    id\n    title\n    handle\n    image {\n      url\n      altText\n      width\n      height\n    }\n    trackingParameters\n  }\n` as const;\n\nconst PREDICTIVE_SEARCH_PAGE_FRAGMENT = `#graphql\n  fragment PredictivePage on Page {\n    __typename\n    id\n    title\n    handle\n    trackingParameters\n  }\n` as const;\n\nconst PREDICTIVE_SEARCH_PRODUCT_FRAGMENT = `#graphql\n  fragment PredictiveProduct on Product {\n    __typename\n    id\n    title\n    handle\n    trackingParameters\n    selectedOrFirstAvailableVariant(\n      selectedOptions: []\n      ignoreUnknownOptions: true\n      caseInsensitiveMatch: true\n    ) {\n      id\n      image {\n        url\n        altText\n        width\n        height\n      }\n      price {\n        amount\n        currencyCode\n      }\n    }\n  }\n` as const;\n\nconst PREDICTIVE_SEARCH_QUERY_FRAGMENT = `#graphql\n  fragment PredictiveQuery on SearchQuerySuggestion {\n    __typename\n    text\n    styledText\n    trackingParameters\n  }\n` as const;\n```\n\n----------------------------------------\n\nTITLE: Detecting Locale from Request Headers and Cookies\nDESCRIPTION: A utility function that extracts locale information from request headers, cookies, and URL paths. This enables automatic locale detection while still allowing explicit selection.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/rfc/i18n.md#2025-04-11_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nimport {countries} from '~/data/countries';\n\nexport function getLocaleFromRequest(request: Request) {\n  const url = new URL(request.url);\n  const firstPathPart =\n    '/' + url.pathname.substring(1).split('/')[0].toLowerCase();\n\n  const acceptLang = request.headers.get('accept-language');\n  // do something with acceptLang\n\n  const cookies = request.headers.get('cookie');\n  // extract the cookie that contains user lang preference and do something with it\n\n  return countries[firstPathPart]\n    ? {\n        ...countries[firstPathPart],\n        pathPrefix: firstPathPart,\n      }\n    : {\n        ...countries[''],\n        pathPrefix: '',\n      };\n}\n```\n\n----------------------------------------\n\nTITLE: Creating GoogleTagManager Component\nDESCRIPTION: Implementation of a React component that subscribes to Hydrogen analytics events and pushes them to Google Tag Manager\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/examples/gtm/README.md#2025-04-11_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useAnalytics} from '@shopify/hydrogen';\nimport {useEffect} from 'react';\n\ndeclare global {\n  interface Window {\n    dataLayer: any[];\n  }\n}\n\nexport function GoogleTagManager() {\n  const {subscribe, register} = useAnalytics();\n  const {ready} = register('Google Tag Manager');\n\n  useEffect(() => {\n    subscribe('product_viewed', () => {\n      // Triggering a custom event in GTM when a product is viewed\n      window.dataLayer.push({event: 'viewed-product'});\n    });\n\n    ready();\n  }, []);\n\n  return null;\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating from <Seo /> Component to Remix Meta Exports in TypeScript\nDESCRIPTION: Step-by-step migration guide for replacing the deprecated <Seo /> component with Remix meta route exports. This includes removing the component from root.jsx, adding meta exports to routes, merging root route data, and customizing meta outputs.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/hydrogen/CHANGELOG.md#2025-04-11_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nexport default function App() {\n  const nonce = useNonce();\n  const data = useLoaderData<typeof loader>();\n\n  return (\n    <html lang=\"en\">\n      <head>\n        <meta charSet=\"utf-8\" />\n        <meta name=\"viewport\" content=\"width=device-width,initial-scale=1\" />\n-        <Seo />\n        <Meta />\n        <Links />\n      </head>\n      <body>\n        <Layout {...data}>\n          <Outlet />\n        </Layout>\n        <ScrollRestoration nonce={nonce} />\n        <Scripts nonce={nonce} />\n        <LiveReload nonce={nonce} />\n      </body>\n    </html>\n  );\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport {getSeoMeta} from '@shopify/hydrogen';\n\nexport async function loader({context}) {\n  const {shop} = await context.storefront.query(`\n    query layout {\n      shop {\n        name\n        description\n      }\n    }\n  `);\n\n  return {\n    seo: {\n      title: shop.title,\n      description: shop.description,\n    },\n  };\n}\n\nexport const meta = ({data}) => {\n  return getSeoMeta(data.seo);\n};\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport const meta = ({data, matches}) => {\n  return getSeoMeta(\n    matches[0].data.seo,\n    // the current route seo data overrides the root route data\n    data.seo,\n  );\n};\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport const meta = ({data, matches}) => {\n  return getSeoMeta(...matches.map((match) => match.data.seo));\n};\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport const meta = ({data, location}) => {\n  return getSeoMeta(data.seo).map((meta) => {\n    if (meta.rel === 'canonical') {\n      return {\n        ...meta,\n        href: meta.href + location.search,\n      };\n    }\n\n    return meta;\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Creating useCartFetchers Hook for Cart Operations\nDESCRIPTION: This snippet defines a custom hook that helps track cart-related form submissions using Remix's useFetchers. It filters fetchers based on the cartAction parameter, making it easy to respond to specific cart operations.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/rfc/cart.md#2025-04-11_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport {useFetchers} from '@remix-run/react';\n\nexport function useCartFetchers(actionName) {\n  const fetchers = useFetchers();\n  const cartFetchers = [];\n\n  for (const fetcher of fetchers) {\n    const formData = fetcher.submission?.formData;\n    if (formData && formData.get('cartAction') === actionName) {\n      cartFetchers.push(fetcher);\n    }\n  }\n  return cartFetchers;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Path Prefix Utility for Localized URLs\nDESCRIPTION: A utility hook that prefixes paths with the current locale path prefix. This function ensures that all internal navigation maintains the correct localization in the URL structure.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/rfc/guide-internationalization.md#2025-04-11_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nexport function usePrefixPathWithLocale(path: string) {\n  const [root] = useMatches();\n  const selectedLocale = root.data.selectedLocale;\n\n  return selectedLocale\n    ? `${selectedLocale.pathPrefix}${\n        path.startsWith('/') ? path : '/' + path\n      }`\n    : path;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-Side Analytics Processing in Remix\nDESCRIPTION: This JSX snippet shows how to implement server-side analytics processing in a Remix route. It demonstrates querying for analytics data, shaping it for different analytics frameworks, and returning it to the client.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/rfc/analytics.md#2025-04-11_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nexport const action = async ({request, context, params}) => {\n  // Most likely can determine the url template type with routing manifest as well\n\n  // Make query to SFAPI for the required data\n  // These data can be cache for a very long time (default to max-age: 12 hrs swr: 12 hrs)\n  //\n  // We can make intelligent data fetches like\n  // * Cache each product query results individually so it can be easily reused by other event requests\n  const data = queryForAnalyticsData(request, context, {...options})\n\n  // Send to Shopify analytics or any analytics frameworks that supports server side analytics\n  shapeForShopifyAnalytics(data);\n\n  return json({\n    gtm: shapeForGTMAnalytics(data),  // Format data to the analytics framework requirement\n    fb: shapeForFBAnalytics(data)\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Optimistic Cart Items with Visual Feedback\nDESCRIPTION: Demonstrates how to render cart items with visual feedback for optimistic updates, using the isOptimistic flag on line items.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/hydrogen/CHANGELOG.md#2025-04-11_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nexport function Cart({cart}) {\n  const optimisticCart = useOptimisticCart(cart);\n\n  if (!cart?.lines?.nodes?.length) return <p>Nothing in cart</p>;\n\n  return optimisticCart.lines.nodes.map((line) => (\n    <div key={line.id} style={{opacity: line.isOptimistic ? 0.8 : 1}}>\n      <Link to={`/products${line.merchandise.product.handle}`}>\n        {line.merchandise.product.title}\n      </Link>\n      <CartForm\n        route=\"/cart\"\n        action={CartForm.ACTIONS.LinesRemove}\n        inputs={{lineIds}}\n        disabled={line.isOptimistic}\n      >\n        <button type=\"submit\">Remove</button>\n      </CartForm>\n    </div>\n  ));\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Localized Link Components for Navigation\nDESCRIPTION: A wrapper component for Remix's Link and NavLink that automatically adds the current locale prefix to navigation paths. This ensures all internal navigation maintains the proper localization context.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/rfc/guide-internationalization.md#2025-04-11_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  Link as RemixLink,\n  NavLink as RemixNavLink,\n  useMatches,\n} from '@remix-run/react';\nimport {usePrefixPathWithLocale} from '~/lib/utils';\n\nexport function Link(props) {\n  const {to, className, ...resOfProps} = props;\n  const [root] = useMatches();\n  const selectedLocale = root.data.selectedLocale;\n\n  let toWithLocale = to;\n\n  if (typeof to === 'string') {\n    toWithLocale = selectedLocale ? `${selectedLocale.pathPrefix}${to}` : to;\n  }\n\n  if (typeof className === 'function') {\n    return (\n      <RemixNavLink\n        to={toWithLocale}\n        className={className}\n        {...resOfProps}\n      />\n    );\n  }\n\n  return (\n    <RemixLink to={toWithLocale} className={className} {...resOfProps} />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Enhanced Locale Detection Using Headers and Cookies\nDESCRIPTION: An extended getLocaleFromRequest function that considers additional factors like Accept-Language headers and cookies for locale detection. This provides a better user experience while still maintaining the URL-based approach as the primary localization method.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/rfc/guide-internationalization.md#2025-04-11_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nexport function getLocaleFromRequest(request: Request): Locale {\n  const url = new URL(request.url);\n  const acceptLang = request.headers.get('accept-language');\n  // do something with acceptLang\n\n  const cookies = request.headers.get('cookie');\n  // extract the cookie that contains user lang preference and do something with it\n\n  switch (url.host) {\n    case 'ca.hydrogen.shop':\n      if (/^\\/fr($|\\/)/.test(url.pathname)) {\n        return {\n          language: 'FR',\n          country: 'CA',\n        };\n      } else {\n        return {\n          language: 'EN',\n          country: 'CA',\n        };\n      }\n      break;\n    case 'hydrogen.au':\n      return {\n        language: 'EN',\n        country: 'AU',\n      };\n      break;\n    default:\n      return {\n        language: 'EN',\n        country: 'US',\n      };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Predictive Search Fetcher in TypeScript\nDESCRIPTION: This function handles the predictive search request, using the GraphQL query to fetch search results from the Shopify storefront API.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/templates/skeleton/guides/predictiveSearch/predictiveSearch.md#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nasync function predictiveSearch({\n  request,\n  context,\n}: Pick<ActionFunctionArgs, 'request' | 'context'>) {\n  const {storefront} = context;\n  const formData = await request.formData();\n  const term = String(formData.get('q') || '');\n\n  const limit = Number(formData.get('limit') || 10);\n\n  const {predictiveSearch: items, errors} = await storefront.query(\n    PREDICTIVE_SEARCH_QUERY,\n    {\n      variables: {\n        limit,\n        limitScope: 'EACH',\n        term,\n      },\n    },\n  );\n\n  if (errors) {\n    throw new Error(\n      `Shopify API errors: ${errors.map(({message}) => message).join(', ')}`,\n    );\n  }\n\n  if (!items) {\n    throw new Error('No predictive search data returned');\n  }\n\n  const total = Object.values(items).reduce((acc, {length}) => acc + length, 0);\n\n  return {term, result: {items, total}, error: null};\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Country Selector Component with Form Submission\nDESCRIPTION: A React component that renders a form for each available country/language combination. It submits to the locale action route and passes the necessary data to update the locale preference.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/rfc/i18n.md#2025-04-11_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nimport {Form, useMatches, useParams, useLocation} from '@remix-run/react';\n...\nexport function CountrySelector() {\n  const matches = useMatches();\n  const rootData = matches.find((match) => match.pathname === '/');\n\n  const countries = rootData?.countries;\n  const selectedLocale = rootData?.selectedLocale;\n\n  const {pathname, search} = useLocation();\n\n  if (!countries || !selectedLocale) return null;\n\n  const strippedPathname = pathname.replace(selectedLocale.pathPrefix, '');\n\n  return (\n    <div>\n      {Object.keys(countries).map((countryKey) => {\n        const locale = countries[countryKey];\n        return (\n          <Form method=\"post\" action=\"/locale\" key={hreflang}>\n            <input type=\"hidden\" name=\"language\" value={locale.language} />\n            <input type=\"hidden\" name=\"country\" value={locale.country} />\n            <input type=\"hidden\" name=\"path\" value={`${strippedPathname}${search}`} />\n            <Button\n              type=\"submit\"\n            >\n              {locale.label}\n            </Button>\n          </Form>\n        );\n      })}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Fragments for Search in TypeScript\nDESCRIPTION: This snippet defines GraphQL fragments for search results, including products, pages, and articles. These fragments are used in the main search query to structure the returned data.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/templates/skeleton/guides/search/search.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst SEARCH_PRODUCT_FRAGMENT = `#graphql\n  fragment SearchProduct on Product {\n    __typename\n    handle\n    id\n    publishedAt\n    title\n    trackingParameters\n    vendor\n    selectedOrFirstAvailableVariant(\n      selectedOptions: []\n      ignoreUnknownOptions: true\n      caseInsensitiveMatch: true\n    ) {\n      id\n      image {\n        url\n        altText\n        width\n        height\n      }\n      price {\n        amount\n        currencyCode\n      }\n      compareAtPrice {\n        amount\n        currencyCode\n      }\n      selectedOptions {\n        name\n        value\n      }\n      product {\n        handle\n        title\n      }\n    }\n  }\n` as const;\n\nconst SEARCH_PAGE_FRAGMENT = `#graphql\n  fragment SearchPage on Page {\n     __typename\n     handle\n    id\n    title\n    trackingParameters\n  }\n` as const;\n\nconst SEARCH_ARTICLE_FRAGMENT = `#graphql\n  fragment SearchArticle on Article {\n    __typename\n    handle\n    id\n    title\n    trackingParameters\n  }\n` as const;\n\nconst PAGE_INFO_FRAGMENT = `#graphql\n  fragment PageInfoFragment on PageInfo {\n    hasNextPage\n    hasPreviousPage\n    startCursor\n    endCursor\n  }\n` as const;\n```\n\n----------------------------------------\n\nTITLE: Rendering SEO Component in Root Layout with React and Remix\nDESCRIPTION: This code demonstrates how to integrate the SEO component into the app's root component, placing it before Meta and Links components in the document head.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/rfc/seo.md#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// app/root.tsx\nimport {Seo} from `@hydrogen/seo`; // hypothetical package name\n\nexport default function App() {\n  return (\n    <html lang=\"en\">\n      <head>\n        <Seo /> // <- Render inside the header before the Meta and Links components\n        <Meta />\n        <Links />\n      </head>\n      <body>\n        <Outlet />\n        <ScrollRestoration />\n        <Scripts />\n        <LiveReload />\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Supplying Selected Locale in Remix Root Loader\nDESCRIPTION: Updates the Remix root loader function to provide the selected locale data to the entire application by using the getLocaleFromRequest utility.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/rfc/guide-internationalization.md#2025-04-11_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\nimport {countries} from '~/data/countries';\n\nexport const loader: LoaderFunction = async function loader() {\n  ...\n  return defer({\n    ...,\n    selectedLocale: await getLocaleFromRequest(request),\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Structuring Remix Route APIs for Hydrogen\nDESCRIPTION: Shows the recommended order and structure for Remix-specific route API functions in Hydrogen templates. Functions are arranged in a top-down order of concerns, from HTTP header tweaks to UI components and error handling.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/templates/TEMPLATE_GUIDELINES.md#2025-04-11_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n/* module imports... */\nimport type {\n  LoaderFunctionArgs,\n  ActionFunctionArgs,\n} from '@shopify/remix-oxygen';\n\n/* local type defintions */\n\nexport async function handle() {}\n\nexport async function shouldRevalidate() {}\n\nexport async function headers() {}\n\nexport async function meta() {}\n\nexport async function links() {}\n\nexport async function loader({}: LoaderFunctionArgs) {}\n\nexport async function action({}: ActionFunctionArgs) {}\n\nexport default function Component() {}\n\nexport function ErrorBoundary() {}\n\n/* storefront Queries/Mutations, see more specific recommendations below  */\n```\n\n----------------------------------------\n\nTITLE: Adding Products to Cart with Optimistic Updates\nDESCRIPTION: Shows how to update the CartForm component to include the selectedVariant information, enabling optimistic updates when adding products to the cart.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/hydrogen/CHANGELOG.md#2025-04-11_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nexport function ProductCard({product}) {\n  return (\n    <div>\n      <h2>{product.title}</h2>\n      <CartForm\n        route=\"/cart\"\n        action={CartForm.ACTIONS.LinesAdd}\n        inputs={{\n          lines: [\n            {\n              merchandiseId: product.selectedVariant.id,\n              quantity: 1,\n              selectedVariant: product.selectedVariant,\n            },\n          ],\n        }}\n      >\n        <button type=\"submit\">Add to cart</button>\n      </CartForm>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Locale Change Handler in Shopify Hydrogen\nDESCRIPTION: Implements a Remix action function to handle locale changes, update cart buyer identity, and redirect to the appropriate localized domain with correct path.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/rfc/guide-internationalization.md#2025-04-11_snippet_19\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  CountryCode,\n  LanguageCode,\n} from '@shopify/hydrogen/storefront-api-types';\nimport {redirect, type AppLoadContext, type ActionFunction} from '@shopify/remix-oxygen';\nimport invariant from 'tiny-invariant';\nimport {updateCartBuyerIdentity} from '~/data';\nimport {countries} from '~/data/countries';\n\nexport const action: ActionFunction = async ({request, context}) => {\n  const {session} = context;\n  const formData = await request.formData();\n\n  // Make sure the form request is valid\n  const languageCode = formData.get('language') as LanguageCode;\n  invariant(languageCode, 'Missing language');\n\n  const countryCode = formData.get('country') as CountryCode;\n  invariant(countryCode, 'Missing country');\n\n  // determine where to redirect to relative to where user navigated from\n  // ie. hydrogen.shop/collections -> ca.hydrogen.shop/collections\n  const path = formData.get('path');\n  const toLocale = countries[`${languageCode}-${countryCode}`.toLowerCase()];\n\n  const cartId = await session.get('cartId');\n\n  // Update cart buyer's country code if we have a cart id\n  if (cartId) {\n    await updateCartBuyerIdentity(context, {\n      cartId,\n      buyerIdentity: {\n        countryCode,\n      },\n    });\n  }\n\n  return redirect(`https://${toLocale.host}${toLocale.pathPrefix || ''}${path}`, 302);\n};\n\nfunction updateCartBuyerIdentity(\n  {storefront}: AppLoadContext,\n  {\n    cartId,\n    buyerIdentity,\n  }: {\n    cartId: string;\n    buyerIdentity: CartBuyerIdentityInput;\n  },\n) {\n  const data = await storefront.mutate<{\n    cartBuyerIdentityUpdate: {cart: Cart};\n  }>(UPDATE_CART_BUYER_COUNTRY, {\n    variables: {\n      cartId,\n      buyerIdentity,\n    },\n  });\n\n  invariant(data, 'No data returned from Shopify API');\n\n  return data.cartBuyerIdentityUpdate.cart;\n}\n\nconst UPDATE_CART_BUYER_COUNTRY = `#graphql\n  mutation CartBuyerIdentityUpdate(\n    $cartId: ID!\n    $buyerIdentity: CartBuyerIdentityInput!\n    $country: CountryCode = ZZ\n  ) @inContext(country: $country) {\n    cartBuyerIdentityUpdate(cartId: $cartId, buyerIdentity: $buyerIdentity) {\n      cart {\n        id\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Creating Localized GraphQL Queries\nDESCRIPTION: Examples of GraphQL queries with and without localization context, showing how to use the inContext directive for internationalized content.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/rfc/guide-internationalization.md#2025-04-11_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nconst FEATURED_QUERY = `#graphql\n  query homepage {\n    collections(first: 3, sortKey: UPDATED_AT) {\n      nodes {\n        id\n        title\n        handle\n        image {\n          altText\n          width\n          height\n          url\n        }\n      }\n    }\n  }\n`;\n```\n\nLANGUAGE: graphql\nCODE:\n```\nconst FEATURED_COLLECTIONS_QUERY = `#graphql\n  query homepage($country: CountryCode, $language: LanguageCode)\n  @inContext(country: $country, language: $language) {\n    collections(first: 3, sortKey: UPDATED_AT) {\n      nodes {\n        id\n        title\n        handle\n        image {\n          altText\n          width\n          height\n          url\n        }\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Implementing Root-Level Analytics Component in Remix\nDESCRIPTION: This JSX snippet shows how to implement a root-level Analytics component in a Remix application. It demonstrates the basic structure for including the Analytics component in the app's layout.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/rfc/analytics.md#2025-04-11_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n// root.tsx\n\nexport default function App() {\n  return (\n    <html>\n      ...\n      <Analytics />\n      </body>\n    </html>\n  );\n }\n```\n\n----------------------------------------\n\nTITLE: Detecting Locale from Request URL in Hydrogen\nDESCRIPTION: A utility function that determines the locale (language and country) based on URL patterns. It examines the hostname and path to return appropriate locale settings for different domains and language paths.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/rfc/guide-internationalization.md#2025-04-11_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nexport function getLocaleFromRequest(request: Request): Locale {\n  const url = new URL(request.url);\n\n  switch (url.host) {\n    case 'ca.hydrogen.shop':\n      if (/^\\/fr($|\\/)/.test(url.pathname)) {\n        return {\n          language: 'FR',\n          country: 'CA',\n        };\n      } else {\n        return {\n          language: 'EN',\n          country: 'CA',\n        };\n      }\n      break;\n    case 'hydrogen.au':\n      return {\n        language: 'EN',\n        country: 'AU',\n      };\n      break;\n    default:\n      return {\n        language: 'EN',\n        country: 'US',\n      };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Search Function in TypeScript\nDESCRIPTION: This function performs the search operation using the storefront API. It parses the search term from the request URL and executes the GraphQL query with appropriate variables.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/templates/skeleton/guides/search/search.md#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nasync function search({\n  request,\n  context,\n}: Pick<LoaderFunctionArgs, 'request' | 'context'>) {\n  const {storefront} = context;\n  const url = new URL(request.url);\n  const searchParams = new URLSearchParams(url.search);\n  const variables = getPaginationVariables(request, {pageBy: 8});\n  const term = String(searchParams.get('q') || '');\n\n  // Search articles, pages, and products for the `q` term\n  const {errors, ...items} = await storefront.query(SEARCH_QUERY, {\n    variables: {...variables, term},\n  });\n\n  if (!items) {\n    throw new Error('No search data returned from Shopify API');\n  }\n\n  if (errors) {\n    throw new Error(errors[0].message);\n  }\n\n  const total = Object.values(items).reduce((acc, {nodes}) => {\n    return acc + nodes.length;\n  }, 0);\n\n  return {term, result: {total, items}};\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Countries API Endpoint in Shopify Hydrogen\nDESCRIPTION: Implements a cached API endpoint that returns the available countries configuration, using Hydrogen's cache control for performance optimization.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/rfc/guide-internationalization.md#2025-04-11_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\n// routes/api/countries\nimport {json} from '@remix-run/server-runtime';\nimport {CacheLong, generateCacheControlHeader} from '@shopify/hydrogen';\nimport {countries} from '~/data/countries';\n\nexport async function loader() {\n  return json(\n    {\n      ...countries,\n    },\n    {\n      headers: {\n        'cache-control': generateCacheControlHeader(CacheLong()),\n      },\n    },\n  );\n}\n\n// no-op\nexport default function CountriesApiRoute() {\n  return null;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Fragments for Selling Plans in Shopify Hydrogen\nDESCRIPTION: Adds GraphQL fragments for selling plans and selling plan groups. These fragments define the structure of data to be fetched from the Shopify Storefront API, including price adjustments, recurring delivery options, and checkout charges.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/cookbook/recipes/subscriptions/README.md#2025-04-11_snippet_9\n\nLANGUAGE: GraphQL\nCODE:\n```\nconst SELLING_PLAN_FRAGMENT = `#graphql\n  fragment SellingPlanMoney on MoneyV2 {\n    amount\n    currencyCode\n  }\n  fragment SellingPlan on SellingPlan {\n    id\n    options {\n      name\n      value\n    }\n    priceAdjustments {\n      adjustmentValue {\n        ... on SellingPlanFixedAmountPriceAdjustment {\n          __typename\n          adjustmentAmount {\n            ... on MoneyV2 {\n               ...SellingPlanMoney\n            }\n          }\n        }\n        ... on SellingPlanFixedPriceAdjustment {\n          __typename\n          price {\n            ... on MoneyV2 {\n              ...SellingPlanMoney\n            }\n          }\n        }\n        ... on SellingPlanPercentagePriceAdjustment {\n          __typename\n          adjustmentPercentage\n        }\n      }\n      orderCount\n    }\n    recurringDeliveries\n    checkoutCharge {\n      type\n      value {\n        ... on MoneyV2 {\n          ...SellingPlanMoney\n        }\n        ... on SellingPlanCheckoutChargePercentageValue {\n          percentage\n        }\n      }\n    }\n }\n` as const;\n```\n\n----------------------------------------\n\nTITLE: Implementing SellingPlanGroup Component in React for Shopify Hydrogen\nDESCRIPTION: This component displays a group of selling plans (subscriptions) and allows users to select different subscription options. It renders the group name and individual selling plans as clickable links, applying styling based on selection state.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/cookbook/recipes/subscriptions/README.md#2025-04-11_snippet_2\n\nLANGUAGE: TSX\nCODE:\n```\nfunction SellingPlanGroup({\n  sellingPlanGroup,\n}: {\n  sellingPlanGroup: SellingPlanGroup;\n}) {\n  return (\n    <div className=\"selling-plan-group\" key={sellingPlanGroup.name}>\n      <p className=\"selling-plan-group-title\">\n        <strong>{sellingPlanGroup.name}:</strong>\n      </p>\n      {sellingPlanGroup.sellingPlans.nodes.map((sellingPlan) => {\n        return (\n          <Link\n            key={sellingPlan.id}\n            prefetch=\"intent\"\n            to={sellingPlan.url}\n            className={`selling-plan ${\n              sellingPlan.isSelected ? 'selected' : 'unselected'\n            }`}\n            preventScrollReset\n            replace\n          >\n            <p>\n              {sellingPlan.options.map(\n                (option) => `${option.name} ${option.value}`,\n              )}\n            </p>\n          </Link>\n        );\n      })}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Locale Determination Utility Function in JSX\nDESCRIPTION: This function determines the language and country based on the request URL. It uses the static localization mapping to return the appropriate locale settings.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/rfc/i18n.md#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport {countries, type CountryData} from '~/data/countries';\nexport function getLocaleFromRequest(request: Request) {\n  const url = new URL(request.url);\n  const firstPathPart =\n    '/' + url.pathname.substring(1).split('/')[0].toLowerCase();\n\n  return countries[firstPathPart]\n    ? {\n        ...countries[firstPathPart],\n        pathPrefix: firstPathPart,\n      }\n    : {\n        ...countries[''],\n        pathPrefix: '',\n      };\n}\n```\n\n----------------------------------------\n\nTITLE: Using withCache.fetch for Caching Simple Fetch Requests\nDESCRIPTION: Example of using the new withCache.fetch method to cache simple fetch requests. This utility consumes and caches the response body, with configurable caching behavior.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/hydrogen/CHANGELOG.md#2025-04-11_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nconst withCache = createWithCache({cache, waitUntil, request});\n\nconst {data, response} = await withCache.fetch<{data: T; error: string}>(\n  'my-cms.com/api',\n  {\n    method: 'POST',\n    headers: {'Content-type': 'application/json'},\n    body,\n  },\n  {\n    cacheStrategy: CacheLong(),\n    // Cache if there are no data errors or a specific data that make this result not suited for caching\n    shouldCacheResponse: (result) => !result?.error,\n    cacheKey: ['my-cms', body],\n    displayName: 'My CMS query',\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Detecting Locale from Request in Shopify Hydrogen\nDESCRIPTION: Utility function to determine the user's locale based on the request URL, matching the host and path against the defined countries configuration.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/rfc/guide-internationalization.md#2025-04-11_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\nimport {countries} from '~/data/countries';\n\nexport function getLocaleFromRequest(request: Request): Locale {\n  const url = new URL(request.url);\n\n  switch (url.host) {\n    case 'ca.hydrogen.shop':\n      if (/^\\/fr($|\\/)/.test(url.pathname)) {\n        return countries['fr-ca'];\n      } else {\n        return countries['en-ca'];\n      }\n      break;\n    case 'hydrogen.au':\n      return countries['en-au'];\n      break;\n    default:\n      return countries['default'];\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Custom Analytics Events in React Components\nDESCRIPTION: This JSX snippet shows how to send custom analytics events by invoking a '/events' endpoint from within a React component. It demonstrates triggering an event on button click.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/rfc/analytics.md#2025-04-11_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nreturn (\n  <Button onClick={() => {\n    fetch('/events', {\n      method: 'post',\n      body: JSON.stringify([{  // type of AnalyticsEvents\n        eventName: 'PROMO_LIST_CLICK',\n        payload: {\n          products: ['abc'],  // List of product handles to fetch for\n          promoName: 'Recently Viewed',\n          index: '2',\n        }\n      }])\n    })\n  }}>\n    <p>Product Name</p>\n  </Button>\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Localized Data Loaders\nDESCRIPTION: Examples of data loader implementations with automatic and manual locale handling using storefront.query function.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/rfc/guide-internationalization.md#2025-04-11_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nexport async function loader({\n  context: {storefront},\n}: LoaderArgs) {\n  return json({\n    featureCollections: await storefront.query<{\n      collections: CollectionConnection;\n    }>(FEATURED_COLLECTIONS_QUERY),\n  });\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nexport async function loader({\n  context: {storefront},\n}: LoaderArgs) {\n  return json({\n    featureCollection: await storefront.query<{\n      collections: CollectionConnection;\n    }>(FEATURED_COLLECTIONS_QUERY, {\n      variables: {\n        country: 'CA',    // Always query back in CA currency\n        language: 'FR',   // Always query back in FR language\n      }\n    }),\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Localized Route Files in Remix Config\nDESCRIPTION: Configuration for automatically generating localized route files during build time. This script duplicates route files into the $lang directory and sets up proper exports from the main routes.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/rfc/i18n.md#2025-04-11_snippet_10\n\nLANGUAGE: js\nCODE:\n```\n/** @type {import('@remix-run/dev').AppConfig} */\n\nconst fs = require('fs');\nconst path = require('path');\nconst esbuild = require('esbuild');\nconst recursive = require('recursive-readdir');\n\nmodule.exports = {\n  ignoredRouteFiles: ['**/.*'],\n  async routes() {\n    /**\n     * Generates the re-export route files under $lang for url path localization\n     * Note: This is temporary until we can assign multiple routes to a single route\n     */\n    const appDir = path.resolve(__dirname, 'app');\n    const routesDir = path.resolve(appDir, 'routes');\n    const langDir = path.resolve(routesDir, '$lang');\n\n    const files = await recursive(routesDir, [\n      (file) => {\n        return file.replace(/\\\\/g, '/').match(/routes\\/\\$lang\\///);\n      },\n    ]);\n\n    // eslint-disable-next-line no-console\n    console.log(`Duplicating ${files.length} route(s) for translations`);\n\n    for (let file of files) {\n      let bundle = await esbuild.build({\n        entryPoints: {entry: file},\n        bundle: false,\n        metafile: true,\n        write: false,\n      });\n\n      const moduleExports = bundle.metafile.outputs['entry.js'].exports;\n\n      const moduleId =\n        '~/' +\n        path\n          .relative(appDir, file)\n          .replace(/\\\\/g, '/')\n          .slice(0, -path.extname(file).length);\n\n      const outFile = path.resolve(langDir, path.relative(routesDir, file));\n\n      fs.mkdirSync(path.dirname(outFile), {recursive: true});\n      fs.writeFileSync(\n        outFile,\n        `export {${moduleExports.join(', ')}} from ${JSON.stringify(\n          moduleId,\n        )};\\n`,\n      );\n    }\n\n    return {};\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Static Localization Mapping in JSX\nDESCRIPTION: This snippet demonstrates how to create a static JSON object for localization mapping. It defines country-specific settings including label, language, and country code.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/rfc/i18n.md#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nexport const countries = {\n  '': {\n    label: 'United States (USD $)',\n    language: 'EN',\n    country: 'US',\n  },\n  '/en-ca': {\n    label: 'Canada (CAD $)',\n    language: 'EN',\n    country: 'CA',\n  },\n  '/en-au': {\n    label: 'Australia (AUD $)',\n    language: 'EN',\n    country: 'AU',\n  },\n  ...\n};\n```\n\n----------------------------------------\n\nTITLE: Updating loader function in root.tsx\nDESCRIPTION: TypeScript code showing how to update the loader function to pass the GTM container ID to the client and enable Partytown's atomic mode.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/examples/partytown/README.md#2025-04-11_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function loader({context}: LoaderFunctionArgs) {\n  const layout = await context.storefront.query<{shop: Shop}>(LAYOUT_QUERY);\n  return data(\n    {\n      layout,\n      // 1. Pass the GTM container ID to the client\n      gtmContainerId: context.env.GTM_CONTAINER_ID,\n    },\n    {\n      // 2. Enable atomic mode\n      headers: partytownAtomicHeaders(),\n    },\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Locale Action Route for Handling Language Changes\nDESCRIPTION: Implementation of a Remix action route that handles locale changes. It processes form submissions to update language and country preferences, updates the cart if present, and redirects to the localized path.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/rfc/i18n.md#2025-04-11_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  CountryCode,\n  LanguageCode,\n} from '@shopify/hydrogen/storefront-api-types';\nimport {redirect, type ActionFunction} from '@shopify/remix-oxygen';\nimport invariant from 'tiny-invariant';\nimport {updateCartBuyerIdentity} from '~/data';\nimport {getSession} from '~/lib/session.server';\n\nexport const action: ActionFunction = async ({request, context}) => {\n  const [session, formData] = await Promise.all([\n    getSession(request, context),\n    new URLSearchParams(await request.text()),\n  ]);\n\n  const languageCode = formData.get('language') as LanguageCode;\n  invariant(languageCode, 'Missing language');\n\n  const countryCode = formData.get('country') as CountryCode;\n  invariant(countryCode, 'Missing country');\n\n  let newPrefixPath = '';\n  const path = formData.get('path');\n  const hreflang = `${languageCode}-${countryCode}`;\n\n  if (hreflang !== 'EN-US') newPrefixPath = `/${hreflang.toLowerCase()}`;\n\n  const cartId = await session.get('cartId');\n\n  // Update cart buyer's country code if we have a cart id\n  if (cartId) {\n    await updateCartBuyerIdentity(context, {\n      cartId,\n      buyerIdentity: {\n        countryCode,\n      },\n    });\n  }\n\n  return redirect(newPrefixPath + path, 302);\n};\n```\n\n----------------------------------------\n\nTITLE: Updated Loader with Pagination Variables in TypeScript/React\nDESCRIPTION: Modified loader function that incorporates pagination variables using the getPaginationVariables helper function. This extends the basic loader to support paginated data retrieval.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/rfc/pagination.md#2025-04-11_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n+  import {getPaginationVariables, PAGINATION_PAGE_INFO_FRAGMENT} from '~/components';\n\nexport async function loader({context, request}: LoaderArgs) {\n  const variables = getPaginationVariables(request, 4);\n  const {products} = await context.storefront.query<{\n    products: ProductConnection;\n  }>(PRODUCTS_QUERY, {\n    variables: {\n+     ...variables,\n      country: context.storefront.i18n?.country,\n      language: context.storefront.i18n?.language,\n    },\n  });\n\n  if (!products) {\n    throw new Response(null, {status: 404});\n  }\n\n  return {products};\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating CartLinePrice to Money Component in React\nDESCRIPTION: Shows how to update code from using CartLinePrice component to the new Money component in @shopify/hydrogen-react.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/hydrogen-react/CHANGELOG.md#2025-04-11_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n- import {CartLinePrice} from '@shopify/hydrogen-react';\n+ import {Money} from '@shopify/hydrogen-react';\n```\n\nLANGUAGE: diff\nCODE:\n```\n- <CartLinePrice line={line} />\n+ <Money data={line.priceV2} />\n```\n\n----------------------------------------\n\nTITLE: Basic Product Loader Implementation in TypeScript/React\nDESCRIPTION: A typical loader function for fetching products from the Storefront API without pagination applied. This represents the starting point before adding pagination functionality.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/rfc/pagination.md#2025-04-11_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport async function loader({context, request}: LoaderArgs) {\n  const {products} = await context.storefront.query<{\n    products: ProductConnection;\n  }>(PRODUCTS_QUERY, {\n    variables: {\n      country: context.storefront.i18n?.country,\n      language: context.storefront.i18n?.language,\n    },\n  });\n\n  if (!products) {\n    throw new Response(null, {status: 404});\n  }\n\n  return {products};\n}\n```\n\n----------------------------------------\n\nTITLE: Updating App component in root.tsx\nDESCRIPTION: TypeScript code showing how to set up Partytown and Google Tag Manager in the App component, including initializing the dataLayer and configuring Partytown.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/examples/partytown/README.md#2025-04-11_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport default function App() {\n  // 1. Retrieve the GTM container ID\n  const {gtmContainerId} = useLoaderData<typeof loader>();\n  const nonce = useNonce();\n\n  return (\n    <html lang=\"en\">\n      <head>\n        <Meta />\n        <Links />\n      </head>\n\n      <body>\n        <Outlet />\n        <ScrollRestoration nonce={nonce} />\n        <Scripts nonce={nonce} />\n\n        {/* 2. Initialize the GTM dataLayer container */}\n        <Script\n          type=\"text/partytown\"\n          dangerouslySetInnerHTML={{\n            __html: `\n              dataLayer = window.dataLayer || [];\n\n              window.gtag = function () {\n                dataLayer.push(arguments);\n              };\n\n              window.gtag('js', new Date());\n              window.gtag('config', \"${gtmContainerId}\");\n            `,\n          }}\n        />\n\n        {/* 3. Include the GTM component */}\n        <PartytownGoogleTagManager gtmContainerId={gtmContainerId} />\n\n        {/* 4. Initialize PartyTown */}\n        <Partytown\n          nonce={nonce}\n          forward={['dataLayer.push', 'gtag']}\n          resolveUrl={maybeProxyRequest}\n        />\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Product GraphQL Fragment to Include Selling Plan Groups\nDESCRIPTION: Extends the existing Product GraphQL fragment to include the sellingPlanGroups field. This allows the application to fetch selling plan data for products. The fragment now also includes the selling plan group fragment.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/cookbook/recipes/subscriptions/README.md#2025-04-11_snippet_11\n\nLANGUAGE: GraphQL\nCODE:\n```\nsellingPlanGroups(first:10) {\n  nodes {\n    ...SellingPlanGroup\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Query for Predictive Search in TypeScript\nDESCRIPTION: This snippet defines the main GraphQL query for predictive search, incorporating the previously defined fragments.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/templates/skeleton/guides/predictiveSearch/predictiveSearch.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst PREDICTIVE_SEARCH_QUERY = `#graphql\n  query predictiveSearch(\n    $country: CountryCode\n    $language: LanguageCode\n    $limit: Int!\n    $limitScope: PredictiveSearchLimitScope!\n    $term: String!\n    $types: [PredictiveSearchType!]\n  ) @inContext(country: $country, language: $language) {\n    predictiveSearch(\n      limit: $limit,\n      limitScope: $limitScope,\n      query: $term,\n      types: $types,\n    ) {\n      articles {\n        ...PredictiveArticle\n      }\n      collections {\n        ...PredictiveCollection\n      }\n      pages {\n        ...PredictivePage\n      }\n      products {\n        ...PredictiveProduct\n      }\n      queries {\n        ...PredictiveQuery\n      }\n    }\n  }\n  ${PREDICTIVE_SEARCH_ARTICLE_FRAGMENT}\n  ${PREDICTIVE_SEARCH_COLLECTION_FRAGMENT}\n  ${PREDICTIVE_SEARCH_PAGE_FRAGMENT}\n  ${PREDICTIVE_SEARCH_PRODUCT_FRAGMENT}\n  ${PREDICTIVE_SEARCH_QUERY_FRAGMENT}\n` as const;\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Handling in Remix Components for Hydrogen\nDESCRIPTION: Demonstrates recommended error handling patterns in Hydrogen/Remix templates, including proper usage of ErrorBoundary, Await components with errorElement prop, and strategic try/catch placement.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/templates/TEMPLATE_GUIDELINES.md#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport async function loader() {\n  /* failed Storefront API requests will throw to the ErrorBoundary */\n  const data = storefront.query()\n\n\n  /* If no page data is returned purposely throw to the CatchBoundary */\n  if (!data?.page) {\n    throw new Response('Page not found', { status: 404 })\n  }\n\n  //...\n  return data\n}\n\nexport function meta() {\n  try {\n    //\n  catch(error) {\n    //\n  }\n}\n\nexport function ErrorBoundary({error}) {\n  return (<div>{error.message}</div>)\n}\n\nexport default function TheUIComponents() {\n  return (\n    <Await resolve={} errorElement={<div>An error occurred</div>}>\n      //\n    </Await>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating from CartLinePrice to Money Component in Hydrogen React\nDESCRIPTION: Shows how to migrate from the deprecated CartLinePrice component to the Money component, which is the recommended approach in the 2023-04 release.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/hydrogen/CHANGELOG.md#2025-04-11_snippet_19\n\nLANGUAGE: diff\nCODE:\n```\n- import {CartLinePrice} from '@shopify/hydrogen-react';\n+ import {Money} from '@shopify/hydrogen-react';\n```\n\nLANGUAGE: diff\nCODE:\n```\n- <CartLinePrice line={line} />\n+ <Money data={line.priceV2} />\n```\n\n----------------------------------------\n\nTITLE: Fixed-size Image Component Implementation in Hydrogen\nDESCRIPTION: Example of using the Image component for fixed-size images, which generates images for different pixel densities rather than responsive screen sizes.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/hydrogen/CHANGELOG.md#2025-04-11_snippet_23\n\nLANGUAGE: jsx\nCODE:\n```\n<Image data={data} width={80} height={80} />\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Image data={data} width=\"5rem\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing and Configuring MiniOxygen Instance\nDESCRIPTION: JavaScript code to import, create, and configure a new instance of MiniOxygen with a sample worker that fetches content from a URL.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/mini-oxygen/README.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {createMiniOxygen} from '@shopify/mini-oxygen';\n\nconst miniOxygen = createMiniOxygen({\n  workers: [\n    {\n      name: 'main',\n      modules: true,\n      script: `export default {\n        async fetch() {\n          const response = await fetch(\"https://hydrogen.shopify.dev\");\n          return response;\n        }\n      }`,\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Main Search Query in GraphQL\nDESCRIPTION: This snippet defines the main GraphQL query for searching articles, pages, and products. It uses the previously defined fragments and includes pagination parameters.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/templates/skeleton/guides/search/search.md#2025-04-11_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nexport const SEARCH_QUERY = `#graphql\n  query Search(\n    $country: CountryCode\n    $endCursor: String\n    $first: Int\n    $language: LanguageCode\n    $last: Int\n    $term: String!\n    $startCursor: String\n  ) @inContext(country: $country, language: $language) {\n    articles: search(\n      query: $term,\n      types: [ARTICLE],\n      first: $first,\n    ) {\n      nodes {\n        ...on Article {\n          ...SearchArticle\n        }\n      }\n    }\n    pages: search(\n      query: $term,\n      types: [PAGE],\n      first: $first,\n    ) {\n      nodes {\n        ...on Page {\n          ...SearchPage\n        }\n      }\n    }\n    products: search(\n      after: $endCursor,\n      before: $startCursor,\n      first: $first,\n      last: $last,\n      query: $term,\n      sortKey: RELEVANCE,\n      types: [PRODUCT],\n      unavailableProducts: HIDE,\n    ) {\n      nodes {\n        ...on Product {\n          ...SearchProduct\n        }\n      }\n      pageInfo {\n        ...PageInfoFragment\n      }\n    }\n  }\n  ${SEARCH_PRODUCT_FRAGMENT}\n  ${SEARCH_PAGE_FRAGMENT}\n  ${SEARCH_ARTICLE_FRAGMENT}\n  ${PAGE_INFO_FRAGMENT}\n` as const;\n```\n\n----------------------------------------\n\nTITLE: Handling Invalid Locale Parameters in Route Loader\nDESCRIPTION: A loader function that validates the locale parameter in the URL. If the language parameter doesn't match the expected locale, it throws a 404 response, ensuring proper handling of invalid localization paths.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/rfc/guide-internationalization.md#2025-04-11_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nexport async function loader({\n  request,\n  params,\n  context: {storefront},\n}: LoaderArgs) {\n  const {language} = storefront.i18n;\n\n  if (\n    params.lang &&\n    params.lang.toLowerCase() !== language.toLowerCase()\n  ) {\n    // If the lang URL param is defined, and it didn't match a valid localization,\n    // then the lang param must be invalid, send to the 404 page\n    throw new Response('Not found', {status: 404});\n  }\n\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Updating SFAPI Product Query Fragment for Combined Listings\nDESCRIPTION: This diff shows the modifications needed to update the GraphQL fragment for products, adding support for encoded variant existence, availability, adjacent variants, and swatch information while removing the need to fetch all variants.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/templates/skeleton/CHANGELOG.md#2025-04-11_snippet_17\n\nLANGUAGE: diff\nCODE:\n```\nconst PRODUCT_FRAGMENT = `#graphql\n  fragment Product on Product {\n    id\n    title\n    vendor\n    handle\n    descriptionHtml\n    description\n+    encodedVariantExistence\n+    encodedVariantAvailability\n    options {\n      name\n      optionValues {\n        name\n+        firstSelectableVariant {\n+          ...ProductVariant\n+        }\n+        swatch {\n+          color\n+          image {\n+            previewImage {\n+              url\n+            }\n+          }\n+        }\n      }\n    }\n-    selectedVariant: selectedOrFirstAvailableVariant(selectedOptions: $selectedOptions, ignoreUnknownOptions: true, caseInsensitiveMatch: true) {\n+    selectedOrFirstAvailableVariant(selectedOptions: $selectedOptions, ignoreUnknownOptions: true, caseInsensitiveMatch: true) {\n+      ...ProductVariant\n+    }\n+    adjacentVariants (selectedOptions: $selectedOptions) {\n+      ...ProductVariant\n+    }\n-    variants(first: 1) {\n-      nodes {\n-        ...ProductVariant\n-      }\n-    }\n    seo {\n      description\n      title\n    }\n  }\n  ${PRODUCT_VARIANT_FRAGMENT}\n` as const;\n```\n\n----------------------------------------\n\nTITLE: Custom Loader Implementation for the Image Component in Hydrogen\nDESCRIPTION: Shows how to use a custom loader function with the Image component to support non-Shopify CDNs that use URL-based transformations.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/hydrogen/CHANGELOG.md#2025-04-11_snippet_24\n\nLANGUAGE: jsx\nCODE:\n```\nconst customLoader = ({src, width, height, crop}) => {\n  return `${src}?w=${width}&h=${height}&gravity=${crop}`;\n};\n\nexport default function CustomImage(props) {\n  <Image loader={customLoader} {...props} />;\n}\n\n// In Use:\n\n<CustomImage data={customCDNImageData} />;\n```\n\n----------------------------------------\n\nTITLE: Using Legacy Node.js Sandbox Runtime for MiniOxygen\nDESCRIPTION: JavaScript code showing how to use the legacy Node.js sandbox runtime for MiniOxygen, including import, configuration, request dispatch, and disposal.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/mini-oxygen/README.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {createMiniOxygen} from '@shopify/mini-oxygen/node';\n\nconst miniOxygen = createMiniOxygen({\n  script: `export default {\n  async fetch() {\n     const response = await fetch(\"https://hydrogen.shopify.dev\");\n     return response;\n  }\n }`,\n});\n\nconst response = await miniOxygen.dispatchFetch('http://placeholder');\n\nconsole.log(await response.text());\n\nawait miniOxygen.dispose();\n```\n\n----------------------------------------\n\nTITLE: Updating Product Component with Optimistic Variant Selection\nDESCRIPTION: This diff updates the Product component to use the new data structure and the getAdjacentAndFirstAvailableVariants utility function for optimistic variant selection instead of relying on all variants.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/templates/skeleton/CHANGELOG.md#2025-04-11_snippet_20\n\nLANGUAGE: diff\nCODE:\n```\nimport {\n  getSelectedProductOptions,\n  Analytics,\n  useOptimisticVariant,\n+  getAdjacentAndFirstAvailableVariants,\n} from '@shopify/hydrogen';\n\nexport default function Product() {\n+  const {product} = useLoaderData<typeof loader>();\n-  const {product, variants} = useLoaderData<typeof loader>();\n\n+  // Optimistically selects a variant with given available variant information\n+  const selectedVariant = useOptimisticVariant(\n+    product.selectedOrFirstAvailableVariant,\n+    getAdjacentAndFirstAvailableVariants(product),\n+  );\n-  const selectedVariant = useOptimisticVariant(\n-    product.selectedVariant,\n-    variants,\n-  );\n```\n\n----------------------------------------\n\nTITLE: Implementing Country Selector Component in Shopify Hydrogen\nDESCRIPTION: React component for country selection that displays a dropdown of available countries, fetches country data from the API, and renders forms for each country option.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/rfc/guide-internationalization.md#2025-04-11_snippet_18\n\nLANGUAGE: jsx\nCODE:\n```\nimport {Form, useMatches, useLocation} from '@remix-run/react';\n...\nexport function CountrySelector() {\n  const [root] = useMatches();\n  const selectedLocale = root.data.selectedLocale;\n  const {pathname, search} = useLocation();\n\n  const [countries, setCountries] = useState({});\n\n   // Get available countries list\n   const fetcher = useFetcher();\n   useEffect(() => {\n     if (!fetcher.data) {\n       fetcher.load('/api/countries');\n       return;\n     }\n     setCountries(fetcher.data);\n   }, [countries, fetcher.data]);\n\n  const strippedPathname = pathname.replace(selectedLocale.pathPrefix, '');\n\n  return (\n    <details>\n      <summary>\n        {selectedLocale.label}\n      </summary>\n      <div className=\"overflow-auto border-t py-2 bg-contrast w-full max-h-36\">\n        {countries && Object.keys(countries).map((countryKey) => {\n          const locale = countries[countryKey];\n          const hreflang = `${locale.language}-${locale.country}`;\n\n          return (\n            <Form method=\"post\" action=\"/locale\" key={hreflang}>\n              <input\n                type=\"hidden\"\n                name=\"language\"\n                value={locale.language}\n              />\n              <input type=\"hidden\" name=\"country\" value={locale.country} />\n              <input\n                type=\"hidden\"\n                name=\"path\"\n                value={`${strippedPathname}${search}`}\n              />\n              <Button\n                type=\"submit\"\n                variant=\"primary\"\n              >\n                {locale.label}\n              </Button>\n            </Form>\n          );\n        })}\n      </div>\n    </details>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Updating createStorefrontClient Configuration (JavaScript)\nDESCRIPTION: This snippet demonstrates how to update the createStorefrontClient configuration to use the new getStorefrontHeaders function instead of deprecated buyerIp and requestGroupId props.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/hydrogen/CHANGELOG.md#2025-04-11_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\n+ import {getStorefrontHeaders} from '@shopify/remix-oxygen';\nimport {createStorefrontClient, storefrontRedirect} from '@shopify/hydrogen';\n\nexport default {\n  async fetch(\n    request: Request,\n    env: Env,\n    executionContext: ExecutionContext,\n  ): Promise<Response> {\n\n    const {storefront} = createStorefrontClient({\n      cache,\n      waitUntil,\n-     buyerIp: getBuyerIp(request),\n      i18n: {language: 'EN', country: 'US'},\n      publicStorefrontToken: env.PUBLIC_STOREFRONT_API_TOKEN,\n      privateStorefrontToken: env.PRIVATE_STOREFRONT_API_TOKEN,\n      storeDomain: `https://${env.PUBLIC_STORE_DOMAIN}`,\n      storefrontApiVersion: env.PUBLIC_STOREFRONT_API_VERSION || '2023-01',\n      storefrontId: env.PUBLIC_STOREFRONT_ID,\n-     requestGroupId: request.headers.get('request-id'),\n+     storefrontHeaders: getStorefrontHeaders(request),\n    });\n```\n\n----------------------------------------\n\nTITLE: Installing Hydrogen React with npm\nDESCRIPTION: Command to install the Hydrogen React package using npm package manager.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/hydrogen-react/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i --save @shopify/hydrogen-react\n```\n\n----------------------------------------\n\nTITLE: Basic Image Component Usage Examples\nDESCRIPTION: Shows various ways to use the new Image component with different property configurations.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/hydrogen-react/CHANGELOG.md#2025-04-11_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Image data={data} />\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Image\n  data={data}\n  crop=\"center\"\n  decoding=\"async\"\n  loading=\"lazy\"\n  width=\"100%\"\n  sizes=\"100vw\"\n  srcSetOptions={{\n    interval: 15,\n    startingWidth: 200,\n    incrementSize: 200,\n    placeholderWidth: 100,\n  }}\n/>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Image\n  src={data.url}\n  alt={data.altText}\n  aspectRatio={`${data.width}/${data.height}`}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Product Option Swatches in React\nDESCRIPTION: This code snippet defines a React component for rendering product option swatches. It handles both image-based and color-based swatches, with SEO considerations for variant links.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/templates/skeleton/CHANGELOG.md#2025-04-11_snippet_25\n\nLANGUAGE: jsx\nCODE:\n```\nfunction ProductOptionSwatch({\n  swatch,\n  name,\n}: {\n  swatch?: Maybe<ProductOptionValueSwatch> | undefined;\n  name: string;\n}) {\n  const image = swatch?.image?.previewImage?.url;\n  const color = swatch?.color;\n\n  if (!image && !color) return name;\n\n  return (\n    <div\n      aria-label={name}\n      className=\"product-option-label-swatch\"\n      style={{\n        backgroundColor: color || \"transparent\",\n      }}\n    >\n      {!!image && <img src={image} alt={name} />}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using waitForNavigation Prop in VariantSelector Component\nDESCRIPTION: Example showing how to use the waitForNavigation prop on the VariantSelector component to wait for page navigation to complete before updating the selected variant.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/hydrogen/CHANGELOG.md#2025-04-11_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<VariantSelector\n  handle={product.handle}\n  options={product.options}\n  waitForNavigation\n>\n  ...\n</VariantSelector>\n```\n\n----------------------------------------\n\nTITLE: Updating Storefront Client Configuration in Hydrogen\nDESCRIPTION: Code diff showing migration from using individual buyer and request properties to using getStorefrontHeaders for Storefront API calls. Demonstrates removal of deprecated buyerIp and requestGroupId props.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/hydrogen-react/CHANGELOG.md#2025-04-11_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\n+ import {getStorefrontHeaders} from '@shopify/remix-oxygen';\nimport {createStorefrontClient, storefrontRedirect} from '@shopify/hydrogen';\n\nexport default {\n  async fetch(\n    request: Request,\n    env: Env,\n    executionContext: ExecutionContext,\n  ): Promise<Response> {\n\n    const {storefront} = createStorefrontClient({\n      cache,\n      waitUntil,\n-     buyerIp: getBuyerIp(request),\n      i18n: {language: 'EN', country: 'US'},\n      publicStorefrontToken: env.PUBLIC_STOREFRONT_API_TOKEN,\n      privateStorefrontToken: env.PRIVATE_STOREFRONT_API_TOKEN,\n      storeDomain: `https://${env.PUBLIC_STORE_DOMAIN}`,\n      storefrontApiVersion: env.PUBLIC_STOREFRONT_API_VERSION || '2023-01',\n      storefrontId: env.PUBLIC_STOREFRONT_ID,\n-     requestGroupId: request.headers.get('request-id'),\n+     storefrontHeaders: getStorefrontHeaders(request),\n    });\n```\n\n----------------------------------------\n\nTITLE: Updating Root Layout with GTM Scripts\nDESCRIPTION: Updates to the root.tsx file to add GTM script tags and component integration\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/examples/gtm/README.md#2025-04-11_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n+ import {GoogleTagManager} from '~/components/GoogleTagManager'\n\nexport function Layout({children}: {children?: React.ReactNode}) {\n  const nonce = useNonce();\n  const data = useLoaderData<typeof loader>();\n\n  return (\n    <html lang=\"en\">\n      <head>\n        <meta charSet=\"utf-8\" />\n        <meta name=\"viewport\" content=\"width=device-width,initial-scale=1\" />\n        <Meta />\n        <Links />\n      </head>\n      <body>\n        <Analytics.Provider\n          cart={data.cart}\n          shop={data.shop}\n          consent={data.consent}\n        >\n          <PageLayout {...data}>{children}</PageLayout>\n+         <GoogleTagManager />\n        </Analytics.Provider>\n        <ScrollRestoration nonce={nonce} />\n        <Scripts nonce={nonce} />\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating to New Image Component Implementation\nDESCRIPTION: Demonstrates the transition from the old Image component configuration to the new simplified responsive implementation.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/hydrogen-react/CHANGELOG.md#2025-04-11_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Image\n  data={image}\n  widths={[400, 800, 1200]}\n  width=\"100px\"\n  sizes=\"90vw\"\n  loaderOptions={{\n    scale: 2,\n    crop: 'left',\n  }}\n/>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Image data={image} sizes=\"90vw\" crop=\"left\" aspectRatio=\"3/2\" />\n```\n\n----------------------------------------\n\nTITLE: Updating Storefront API Variant Selection Parameters in GraphQL Query\nDESCRIPTION: Updates the variantBySelectedOptions parameters to include ignoreUnknownOptions and caseInsensitiveMatch flags, which fixes redirection to the product's default variant when there are unknown query params in the URL.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/templates/skeleton/CHANGELOG.md#2025-04-11_snippet_43\n\nLANGUAGE: diff\nCODE:\n```\n-   selectedVariant: variantBySelectedOptions(selectedOptions: $selectedOptions) {\n+   selectedVariant: variantBySelectedOptions(selectedOptions: $selectedOptions, ignoreUnknownOptions: true, caseInsensitiveMatch: true) {\n        ...ProductVariant\n      }\n```\n\n----------------------------------------\n\nTITLE: Updating Content Security Policy in entry.server.tsx\nDESCRIPTION: Diff showing how to update the Content Security Policy to allow scripts from the Google Tag Manager domain.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/examples/partytown/README.md#2025-04-11_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n//...other code\n\nexport default async function handleRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext,\n) {\n- const {nonce, header, NonceProvider} = createContentSecurityPolicy();\n+  const {nonce, header, NonceProvider} = createContentSecurityPolicy({\n+    scriptSrc: [\"'self'\", 'cdn.shopify.com', 'www.googletagmanager.com'],\n+ });\n\n  //...other code\n\n  responseHeaders.set('Content-Security-Policy', header);\n\n  return new Response(body, {\n    headers: responseHeaders,\n    status: responseStatusCode,\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Making GraphQL API Requests with useShop Hook\nDESCRIPTION: Example demonstrating how to use the getStorefrontApiUrl and getPublicTokenHeaders functions from the useShop hook to make fetch requests to the Storefront API.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/hydrogen-react/CHANGELOG.md#2025-04-11_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst {storefrontId, getPublicTokenHeaders, getStorefrontApiUrl} = useShop();\n\nfetch(getStorefrontApiUrl(), {\n  headers: getPublicTokenHeaders({contentType: 'json'})\n  body: {...}\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing MetaObject-Based Content in Homepage Route\nDESCRIPTION: TypeScript code showing how to query for route metaobject content and render it on the homepage. The code imports necessary components, sets up the loader function to fetch route data, and implements the component to display the content.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/examples/metaobjects/README.md#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {ROUTE_CONTENT_QUERY, RouteContent} from '~/sections/RouteContent';\n\nexport async function loader({context}: LoaderFunctionArgs) {\n  const {storefront} = context;\n\n  const {route} = await storefront.query(ROUTE_CONTENT_QUERY, {\n    variables: {handle: 'route-home'},\n    cache: storefront.CacheNone(),\n  });\n\n  return {route};\n}\n\nexport default function Homepage() {\n  const {route} = useLoaderData<typeof loader>();\n\n  return (\n    <div className=\"home\">\n      <RouteContent route={route} />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Scalars Import in TypeScript\nDESCRIPTION: Example of how to update the import of Scalars from @shopify/hydrogen-react or @shopify/hydrogen due to breaking changes in Storefront API types generation.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/hydrogen-react/CHANGELOG.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Scalars} from '@shopify/hydrogen/storefront-api-types';\n\ntype Props = {\n-  id: Scalars['ID']; // This was a string\n+  id: Scalars['ID']['input']; // Need to access 'input' or 'output' to get the string\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing SEO Debug Panel in React Root Component for Hydrogen\nDESCRIPTION: This code demonstrates how to properly implement the SEO Debugger component in a Hydrogen app's root.tsx file. The Debugger component should be placed just before the closing body tag to provide in-browser SEO diagnostics.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/rfc/seo.md#2025-04-11_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// app/root.tsx\nimport {Seo, Debugger} from `@hydrogen/seo`; // hypothetical package name\n\nexport default function App() {\n  return (\n    <html lang=\"en\">\n      <head>\n        <Seo />\n        <Meta />\n        <Links />\n      </head>\n      <body>\n        <Outlet />\n        <ScrollRestoration />\n        <Scripts />\n        <LiveReload />\n        <Debugger />  // <- Render before the closing `body` tag\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Updating FooterMenu Component for primaryDomainUrl in Hydrogen\nDESCRIPTION: Modifies the FooterMenu component to accept a primaryDomainUrl prop and include it in the internal URL check. This ensures correct routing for menu items from the Storefront API 2023-10.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/templates/skeleton/CHANGELOG.md#2025-04-11_snippet_48\n\nLANGUAGE: diff\nCODE:\n```\n// app/components/Footer.tsx\n\n- import type {FooterQuery} from 'storefrontapi.generated';\n+ import type {FooterQuery, HeaderQuery} from 'storefrontapi.generated';\n\nfunction FooterMenu({\n  menu,\n+  primaryDomainUrl,\n}: {\n  menu: FooterQuery['menu'];\n+  primaryDomainUrl: HeaderQuery['shop']['primaryDomain']['url'];\n}) {\n  // code...\n\n  // if the url is internal, we strip the domain\n  const url =\n    item.url.includes('myshopify.com') ||\n    item.url.includes(publicStoreDomain) ||\n+   item.url.includes(primaryDomainUrl)\n      ? new URL(item.url).pathname\n      : item.url;\n\n   // ...code\n\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Cart Handler with Get Method After Cart Creation in TypeScript\nDESCRIPTION: Example demonstrating how to call the cart .get() method immediately after creating a new cart with mutation methods such as addLines(). This addresses a fixed bug where cart could be null even though a new cart was created.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/hydrogen/CHANGELOG.md#2025-04-11_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  createCartHandler,\n  cartGetIdDefault,\n  cartSetIdDefault,\n} from '@shopify/hydrogen';\n\nconst cartHandler = createCartHandler({\n  storefront,\n  getCartId: cartGetIdDefault(request.headers),\n  setCartId: cartSetIdDefault(),\n  cartQueryFragment: CART_QUERY_FRAGMENT,\n  cartMutateFragment: CART_MUTATE_FRAGMENT,\n});\n\nawait cartHandler.addLines([{merchandiseId: '...'}]);\n// .get() now returns the cart as expected\nconst cart = await cartHandler.get();\n```\n\n----------------------------------------\n\nTITLE: Updating Content Security Policy for GTM\nDESCRIPTION: Updates to the entry.server.tsx file to add necessary content security policies for Google Tag Manager integration\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/examples/gtm/README.md#2025-04-11_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n//...other code\n\nexport default async function handleRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext,\n+  context: AppLoadContext,\n) {\n  const {nonce, header, NonceProvider} = createContentSecurityPolicy({\n    shop: {\n      checkoutDomain: context.env.PUBLIC_CHECKOUT_DOMAIN,\n      storeDomain: context.env.PUBLIC_STORE_DOMAIN,\n    }\n+    scriptSrc: [\n+      \"'self'\",\n+      'https://cdn.shopify.com',\n+      'https://*.googletagmanager.com'\n+    ],\n+    imgSrc: [\n+      \"'self'\",\n+      'https://cdn.shopify.com',\n+      'https://*.google-analytics.com',\n+      'https://*.googletagmanager.com'\n+    ],\n+    connectSrc: [\n+      \"'self'\",\n+      'https://*.google-analytics.com',\n+      'https://*.analytics.google.com',\n+      'https://*.googletagmanager.com',\n+    ],\n    shop: {\n      checkoutDomain: context.env.PUBLIC_CHECKOUT_DOMAIN,\n      storeDomain: context.env.PUBLIC_STORE_DOMAIN,\n    }\n  });\n\n  //...other code\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Query Cache Strategy in GraphQL\nDESCRIPTION: Shows how to override the default caching strategy to use the old CacheShort values for Storefront API queries.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/hydrogen/CHANGELOG.md#2025-04-11_snippet_15\n\nLANGUAGE: diff\nCODE:\n```\nconst {product} = await storefront.query(\n  `#graphql\n    query Product($handle: String!) {\n      product(handle: $handle) { id title }\n    }\n  `,\n  {\n    variables: {handle: params.productHandle},\n+    /**\n+     * Override the default caching strategy with the old caching values\n+     */\n+    cache: storefront.CacheShort(),\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Using ParsedMetafield Type with TypeScript\nDESCRIPTION: Example demonstrating how to use the ParsedMetafield TypeScript type to get proper type inference when working with parsed metafields of specific types.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/hydrogen-react/CHANGELOG.md#2025-04-11_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst metafield =\n  parseMetafield<ParsedMetafield['boolean']>(rawMetafield);\n\n// parsedValue is a boolean\nif (metafield.parsedValue === true) {\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Images to Predictive Search Results in React TypeScript\nDESCRIPTION: Demonstrates how to enhance the SearchResultsPredictive.Products component by adding product images and prices to each search result item. The modification includes displaying product variant images and prices using the Money component.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/templates/skeleton/guides/predictiveSearch/predictiveSearch.md#2025-04-11_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nSearchResultsPredictive.Products = function ({\n  products,\n  closeSearch,\n  term,\n}: SearchResultsPredictiveProductsProps) {\n  if (!products.length) return null;\n\n  return (\n    <div className=\"predictive-search-result\" key=\"products\">\n      <h5>Products</h5>\n      <ul>\n        {products.map((product) => {\n          const productUrl = urlWithTrackingParams({\n            baseUrl: `/products/${product.handle}`,\n            trackingParams: product.trackingParameters,\n            term: term.current,\n          });\n         const price = product?.selectedOrFirstAvailableVariant?.price;\n         const image = product?.selectedOrFirstAvailableVariant?.image;\n          return (\n            <li className=\"predictive-search-result-item\" key={product.id}>\n              <Link to={productUrl} onClick={closeSearch}>\n               {image && (\n                 <Image\n                   alt={image.altText ?? ''}\n                   src={image.url}\n                   width={50}\n                   height={50}\n                 />\n               )}\n                <div>\n                  <p>{product.title}</p>\n                  <small>\n                 {price && (\n                   <Money\n                     data={price}\n                   />\n                 )}\n                  </small>\n                </div>\n              </Link>\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  )\n};\n```\n\n----------------------------------------\n\nTITLE: Selling Plan Group Component Implementation\nDESCRIPTION: React component for rendering selling plan options with selection functionality\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/examples/subscriptions/README.md#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfunction SellingPlanGroup({\n  sellingPlanGroup,\n}: {\n  sellingPlanGroup: SellingPlanGroup;\n}) {\n  return (\n    <div key={sellingPlanGroup.name}>\n      <p className=\"mb-2\">\n        <strong>{sellingPlanGroup.name}:</strong>\n      </p>\n      {sellingPlanGroup.sellingPlans.nodes.map((sellingPlan) => {\n        return (\n          <Link\n            key={sellingPlan.id}\n            prefetch=\"intent\"\n            to={sellingPlan.url}\n            className={`border inline-block p-4 mr-2 leading-none py-1 border-b-[1.5px] hover:no-underline cursor-pointer transition-all duration-200\n                  ${sellingPlan.isSelected ? 'border-gray-500' : 'border-neutral-50'}`}\n            preventScrollReset\n            replace\n          >\n            <p>\n              {sellingPlan.options.map(\n                (option) => `${option.name} ${option.value}`,\n              )}\n            </p>\n          </Link>\n        );\n      })}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Pagination Component Implementation in React\nDESCRIPTION: Simple implementation of the Pagination component that takes the products connection data and enables infinite scrolling. This shows the minimum required props for the component.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/rfc/pagination.md#2025-04-11_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function Products() {\n  const {products} = useLoaderData<typeof loader>();\n\n  return (\n    <>\n      <Pagination connection={products} autoLoadOnScroll />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Cart Component with Multipass Checkout\nDESCRIPTION: Code modifications to the Cart component to implement Multipass checkout functionality by wrapping the standard Button component with MultipassCheckoutButton.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/examples/multipass/README.md#2025-04-11_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// app/components/Cart.tsx\n\nimport {MultipassCheckoutButton} from '~/components';\n\n// ...\n\nfunction CartCheckoutActions({checkoutUrl}: {checkoutUrl: string}) {\n  if (!checkoutUrl) return null;\n\n  return (\n    <div>\n      <MultipassCheckoutButton checkoutUrl={checkoutUrl}>\n        <Button>Continue to Checkout</Button>\n      </MultipassCheckoutButton>\n    </div>\n  );\n}\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Using getProductOptions for Product Option Array Generation\nDESCRIPTION: This diff adds the getProductOptions utility function to generate a properly formatted product options array from the product data and selected variant, providing a standardized way to access option information.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/templates/skeleton/CHANGELOG.md#2025-04-11_snippet_22\n\nLANGUAGE: diff\nCODE:\n```\nimport {\n  getSelectedProductOptions,\n  Analytics,\n  useOptimisticVariant,\n+  getProductOptions,\n  getAdjacentAndFirstAvailableVariants,\n  useSelectedOptionInUrlParam,\n} from '@shopify/hydrogen';\n\nexport default function Product() {\n  const {product} = useLoaderData<typeof loader>();\n\n  // Optimistically selects a variant with given available variant information\n  const selectedVariant = useOptimisticVariant(\n    product.selectedOrFirstAvailableVariant,\n    getAdjacentAndFirstAvailableVariants(product),\n  );\n\n  // Sets the search param to the selected variant without navigation\n  // only when no search params are set in the url\n  useSelectedOptionInUrlParam(selectedVariant.selectedOptions);\n\n+  // Get the product options array\n+  const productOptions = getProductOptions({\n+    ...product,\n+    selectedOrFirstAvailableVariant: selectedVariant,\n+  });\n```\n\n----------------------------------------\n\nTITLE: Accessing Parsed Metafield Value in TypeScript\nDESCRIPTION: Example showing how to access the parsed value from a metafield after using the parseMetafield function. The parsed metafield value is now accessible via the parsedValue property.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/hydrogen-react/CHANGELOG.md#2025-04-11_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst metafield = parseMetafield(rawMetafield);\n\nconsole.log(metafield.parsedValue);\n```\n\n----------------------------------------\n\nTITLE: Defining SEO Configuration in Route Handles for Hydrogen\nDESCRIPTION: This snippet shows how to define an SEO configuration object in a route's handle export, which will be consumed by the Seo component rendered in the root.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/rfc/seo.md#2025-04-11_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nexport const handle = {\n  seo: {\n    //... Add SEO information here\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a 404 Handler for Invalid Routes in Hydrogen\nDESCRIPTION: A splat route ($.tsx) that handles all non-matching routes in the application. It returns a 404 response for any route that doesn't match defined patterns, essential for the localization scheme.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/rfc/guide-internationalization.md#2025-04-11_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nexport async function loader() {\n  throw new Response('Not found', {status: 404});\n}\n\nexport default function Component() {\n  return null;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating HeaderMenu Component for primaryDomainUrl in Hydrogen\nDESCRIPTION: Modifies the HeaderMenu component to accept a primaryDomainUrl prop and include it in the internal URL check. This change is required to properly handle menu item URLs in the Storefront API 2023-10.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/templates/skeleton/CHANGELOG.md#2025-04-11_snippet_47\n\nLANGUAGE: diff\nCODE:\n```\n// app/components/Header.tsx\n\n+ import type {HeaderQuery} from 'storefrontapi.generated';\n\nexport function HeaderMenu({\n  menu,\n+  primaryDomainUrl,\n  viewport,\n}: {\n  menu: HeaderProps['header']['menu'];\n+  primaryDomainUrl: HeaderQuery['shop']['primaryDomain']['url'];\n  viewport: Viewport;\n}) {\n\n  // ...code\n\n  // if the url is internal, we strip the domain\n  const url =\n    item.url.includes('myshopify.com') ||\n    item.url.includes(publicStoreDomain) ||\n+   item.url.includes(primaryDomainUrl)\n      ? new URL(item.url).pathname\n      : item.url;\n\n   // ...code\n\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Multipass Account Login Route\nDESCRIPTION: Code modifications required for multipass login route, including exporting headers function and updating json responses to use remixData.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/templates/skeleton/CHANGELOG.md#2025-04-11_snippet_14\n\nLANGUAGE: diff\nCODE:\n```\n+ export const headers: HeadersFunction = ({actionHeaders}) => actionHeaders;\n\nimport {\n- json,\n+ data as remixData,\n} from '@shopify/remix-oxygen';\n\n-  return json(\n+  return remixData(\n    ...\n  );\n```\n\n----------------------------------------\n\nTITLE: Using Locale Utility Function in Loader Function in JSX\nDESCRIPTION: This snippet shows how to use the getLocaleFromRequest utility function within a loader function to obtain language and country information.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/rfc/i18n.md#2025-04-11_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nexport const loader: LoaderFunction = async function loader({\n  request,\n}) {\n  const {langrage, country} = getLocaleFromRequest(request);\n  ...\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Section Component in TypeScript for Shopify Hydrogen\nDESCRIPTION: Code snippet showing how to create a new section component, define its fragment for querying, and parse the metaobject fields using the parseSection function.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/examples/metaobjects/docs/METAOBJECTS.md#2025-04-11_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nexport function SectionExample(props: SectionExampleFragment) {}\n\nconst EXAMPLE_MEDIA_IMAGE_FRAGMENT = '#graphql\n  fragment MediaImage on MediaImage {\n    image {\n      altText\n      url\n      width\n      height\n    }\n  }\n';\n\nexport const SECTION_HERO_FRAGMENT = '#graphql\n  fragment SectionExample on Metaobject {\n    type\n    heading: field(key: \"heading\") {\n      key\n      value\n    }\n    subheading: field(key: \"subheading\") {\n      key\n      value\n    }\n    # other fields ...\n  }\n  ${EXAMPLE_MEDIA_IMAGE_FRAGMENT}\n';\n\nexport function SectionExample(props: SectionExampleFragment) {\n  const section = parseSection<\n    SectionHeroFragment,\n    {\n      heading?: ParsedMetafields['single_line_text_field'];\n      subheading?: ParsedMetafields['single_line_text_field'];\n    }\n  >(props);\n}\n```\n\n----------------------------------------\n\nTITLE: Updating GraphQL Query for Product Search\nDESCRIPTION: This GraphQL query update replaces the variants query with selectedOrFirstAvailableVariant. It optimizes the search functionality by fetching only the necessary variant data for product search results.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/templates/skeleton/CHANGELOG.md#2025-04-11_snippet_28\n\nLANGUAGE: graphql\nCODE:\n```\nfragment SearchProduct on Product {\n  __typename\n  handle\n  id\n  publishedAt\n  title\n  trackingParameters\n  vendor\n  selectedOrFirstAvailableVariant(\n    selectedOptions: []\n    ignoreUnknownOptions: true\n    caseInsensitiveMatch: true\n  ) {\n    id\n    image {\n      url\n      altText\n      width\n      height\n    }\n    price {\n      amount\n      currencyCode\n    }\n    compareAtPrice {\n      amount\n      currencyCode\n    }\n    selectedOptions {\n      name\n      value\n    }\n    product {\n      handle\n      title\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Codegen for Hydrogen\nDESCRIPTION: A configuration example for the GraphQL Codegen setup in a Hydrogen project. This shows how to generate type definitions for multiple GraphQL APIs including the Shopify Storefront API, Customer Account API, and a custom CMS.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/hydrogen-codegen/README.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// <root>/codegen.ts\n\nimport type {CodegenConfig} from '@graphql-codegen/cli';\nimport {pluckConfig, preset, getSchema} from '@shopify/hydrogen-codegen';\n\nexport default {\n  overwrite: true,\n  pluckConfig,\n  generates: {\n    'storefrontapi.generated.d.ts': {\n      preset,\n      schema: getSchema('storefront'),\n      documents: [\n        './*.{ts,tsx,js,jsx}',\n        './app/**/*.{ts,tsx,js,jsx}',\n        '!./app/graphql/customer-account/*.{ts,tsx,js,jsx}',\n        '!./app/graphql/my-cms/*.{ts,tsx,js,jsx}',\n      ],\n    },\n    'customeraccountapi.generated.d.ts': {\n      preset,\n      schema: getSchema('customer-account'),\n      documents: ['./app/graphql/customer-account/*.{ts,tsx,js,jsx}'],\n    },\n    'mycms.generated.d.ts': {\n      preset,\n      schema: './my-cms.json',\n      documents: ['./app/graphql/my-cms/*.{ts,tsx,js,jsx}'],\n    },\n  },\n} as CodegenConfig;\n```\n\n----------------------------------------\n\nTITLE: Updating Layout Component to Pass Shop Prop to Footer in Hydrogen\nDESCRIPTION: Modifies the Layout component to pass the shop prop from the header to the Footer component. This ensures the Footer has access to the primaryDomainUrl needed for proper internal link handling.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/templates/skeleton/CHANGELOG.md#2025-04-11_snippet_50\n\nLANGUAGE: diff\nCODE:\n```\nexport function Layout({\n  cart,\n  children = null,\n  footer,\n  header,\n  isLoggedIn,\n}: LayoutProps) {\n  return (\n    <>\n      <CartAside cart={cart} />\n      <SearchAside />\n      <MobileMenuAside menu={header.menu} shop={header.shop} />\n      <Header header={header} cart={cart} isLoggedIn={isLoggedIn} />\n      <main>{children}</main>\n      <Suspense>\n        <Await resolve={footer}>\n-          {(footer) => <Footer menu={footer.menu}  />}\n+          {(footer) => <Footer menu={footer.menu} shop={header.shop} />}\n        </Await>\n      </Suspense>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Codegen Configuration\nDESCRIPTION: Example configuration file for customizing GraphQL Codegen behavior in a Hydrogen project.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/cli/CHANGELOG.md#2025-04-11_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {CodegenConfig} from '@graphql-codegen/cli';\nimport {preset, pluckConfig, schema} from '@shopify/hydrogen-codegen';\n\nexport default <CodegenConfig>{\n  overwrite: true,\n  pluckConfig,\n  generates: {\n    ['storefrontapi.generated.d.ts']: {\n      preset,\n      schema,\n      documents: ['*.{ts,tsx}', 'app/**/*.{ts,tsx}'],\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Country Selector Component in JSX\nDESCRIPTION: This snippet shows how to create a CountrySelector component that renders available countries as links using the locale data provided by the root loader.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/rfc/i18n.md#2025-04-11_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport {Link, useMatches} from '@remix-run/react';\n...\nexport function CountrySelector() {\n  const matches = useMatches();\n  const rootData = matches.find((match) => match.pathname === '/');\n  if (!rootData) return null;\n  const countries = rootData?.countries;\n  if (!countries) return null;\n  return (\n    <div>\n      {Object.keys(countries).map((countryKey) => {\n        const locale = countries[countryKey];\n        return (\n          <a href={countryKey}>{locale.label}</a>\n        );\n      })}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding URL Parameter Handling for Selected Options\nDESCRIPTION: This diff adds useSelectedOptionInUrlParam to handle missing search query parameters in the URL when selecting a first variant, ensuring the URL reflects the currently selected variant options.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/templates/skeleton/CHANGELOG.md#2025-04-11_snippet_21\n\nLANGUAGE: diff\nCODE:\n```\nimport {\n  getSelectedProductOptions,\n  Analytics,\n  useOptimisticVariant,\n  getAdjacentAndFirstAvailableVariants,\n+  useSelectedOptionInUrlParam,\n} from '@shopify/hydrogen';\n\nexport default function Product() {\n  const {product} = useLoaderData<typeof loader>();\n\n  // Optimistically selects a variant with given available variant information\n  const selectedVariant = useOptimisticVariant(\n    product.selectedOrFirstAvailableVariant,\n    getAdjacentAndFirstAvailableVariants(product),\n  );\n\n+  // Sets the search param to the selected variant without navigation\n+  // only when no search params are set in the url\n+  useSelectedOptionInUrlParam(selectedVariant.selectedOptions);\n```\n\n----------------------------------------\n\nTITLE: Updating createWithCache Implementation with Required Request Parameter\nDESCRIPTION: Breaking change diff showing how to update the createWithCache implementation. The request parameter is now mandatory, and the API has been restructured to use withCache.run and withCache.fetch with explicit cache control.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/hydrogen/CHANGELOG.md#2025-04-11_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n// server.ts\nexport default {\n  async fetch(\n    request: Request,\n    env: Env,\n    executionContext: ExecutionContext,\n  ): Promise<Response> {\n    try {\n      // ...\n-     const withCache = createWithCache({cache, waitUntil});\n+     const withCache = createWithCache({cache, waitUntil, request});\n```\n\nLANGUAGE: diff\nCODE:\n```\n  const withCache = createWithCache({cache, waitUntil, request});\n\n  const fetchMyCMS = (query) => {\n-    return withCache(['my-cms', query], CacheLong(), async (params) => {\n+    return withCache.run({\n+      cacheKey: ['my-cms', query],\n+      cacheStrategy: CacheLong(),\n+      // Cache if there are no data errors or a specific data that make this result not suited for caching\n+      shouldCacheResult: (result) => !result?.errors,\n+    }, async(params) => {\n      const response = await fetch('my-cms.com/api', {\n        method: 'POST',\n        body: query,\n      });\n      if (!response.ok) throw new Error(response.statusText);\n      const {data, error} = await response.json();\n      if (error || !data) throw new Error(error ?? 'Missing data');\n      params.addDebugData({displayName: 'My CMS query', response});\n      return data;\n    });\n  };\n```\n\n----------------------------------------\n\nTITLE: Updating Footer Component to Accept Shop Prop in Hydrogen\nDESCRIPTION: Updates the Footer component to accept a shop prop, which contains the primaryDomain data needed for proper URL handling. This connects the domain URL information from the shop data to the FooterMenu component.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/templates/skeleton/CHANGELOG.md#2025-04-11_snippet_49\n\nLANGUAGE: diff\nCODE:\n```\nexport function Footer({\n  menu,\n+ shop,\n}: FooterQuery & {shop: HeaderQuery['shop']}) {\n  return (\n    <footer className=\"footer\">\n-      <FooterMenu menu={menu} />\n+      <FooterMenu menu={menu} primaryDomainUrl={shop.primaryDomain.url} />\n    </footer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Structuring Product Data for Google Analytics 4 in JSON\nDESCRIPTION: This JSON snippet shows how to structure product data for sending to Google Analytics 4. It includes various product attributes such as ID, name, brand, category, and price.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/rfc/analytics.md#2025-04-11_snippet_1\n\nLANGUAGE: json\nCODE:\n```\nitems: [\n  {\n    item_id: \"SKU_12345\",\n    item_name: \"Stan and Friends Tee\",\n    affiliation: \"Google Merchandise Store\",\n    currency: \"USD\",\n    item_brand: \"Google\",\n    item_category: \"Apparel\",\n    item_category2: \"Adult\",\n    item_category3: \"Shirts\",\n    item_category4: \"Crew\",\n    item_category5: \"Short sleeve\",\n    item_variant: \"green\",\n    price: 9.99,\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Using Locale Keys for React Rendering in Shopify Hydrogen\nDESCRIPTION: Demonstrates how to properly key components that change with localization to ensure React correctly re-renders when the locale changes.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/rfc/guide-internationalization.md#2025-04-11_snippet_20\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function App() {\n  const data = useLoaderData<typeof loader>();\n  const locale = data.selectedLocale;\n\n  return (\n    <html lang={locale.language}>\n      <head>\n        <Seo />\n        <Meta />\n        <Links />\n      </head>\n      <body>\n        <Layout\n          layout={data.layout as LayoutData}\n          key={`${locale.language}-${locale.country}`} . // key by hreflang\n        >\n          <Outlet />\n        </Layout>\n        <Debugger />\n        <ScrollRestoration />\n        <Scripts />\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Refactoring Root Layout in Remix\nDESCRIPTION: Changes to implement Remix's Layout Export pattern in the root component, eliminating useLoaderData usage\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/templates/skeleton/CHANGELOG.md#2025-04-11_snippet_32\n\nLANGUAGE: diff\nCODE:\n```\nimport {\n  Outlet,\n-  useLoaderData,\n+  useRouteLoaderData,\n} from '@remix-run/react';\n-import {Layout} from '~/components/Layout';\n+import {PageLayout} from '~/components/PageLayout';\n\n-export default function App() {\n+export function Layout({children}: {children?: React.ReactNode}) {\n  const nonce = useNonce();\n-  const data = useLoaderData<typeof loader>();\n+  const data = useRouteLoaderData<typeof loader>('root');\n\n  return (\n    <html>\n    ...\n      <body>\n-        <Layout {...data}>\n-          <Outlet />\n-        </Layout>\n+        {data? (\n+          <PageLayout {...data}>{children}</PageLayout>\n+         ) : (\n+          children\n+        )}\n      </body>\n    </html>\n  );\n}\n\n+export default function App() {\n+  return <Outlet />;\n+}\n\nexport function ErrorBoundary() {\n- const rootData = useLoaderData<typeof loader>();\n\n  return (\n-    <html>\n-    ...\n-      <body>\n-        <Layout {...rootData}>\n-          <div className=\"route-error\">\n-            <h1>Error</h1>\n-            ...\n-          </div>\n-        </Layout>\n-      </body>\n-    </html>\n+    <div className=\"route-error\">\n+      <h1>Error</h1>\n+      ...\n+    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Shopify's Cookie Banner in Customer Privacy Config\nDESCRIPTION: Code diff showing how to update the consent configuration to enable Shopify's privacy banner. The 'withPrivacyBanner' flag must be set to true to display Shopify's cookie consent banner.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/hydrogen/CHANGELOG.md#2025-04-11_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n  return defer({\n    ...\n    consent: {\n      checkoutDomain: env.PUBLIC_CHECKOUT_DOMAIN,\n      storefrontAccessToken: env.PUBLIC_STOREFRONT_API_TOKEN,\n+      withPrivacyBanner: true,\n      // localize the privacy banner\n      country: args.context.storefront.i18n.country,\n      language: args.context.storefront.i18n.language,\n    },\n  });\n```\n\n----------------------------------------\n\nTITLE: Updating Root Component Language Settings\nDESCRIPTION: Demonstrates how to set the HTML language attribute in the root component, including error boundaries. Ensures consistent language settings across different app states.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/rfc/guide-internationalization.md#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function App() {\n  return (\n    <html lang=\"EN\">\n      ...\n    </html>\n  );\n}\n\nexport function CatchBoundary() {\n  return (\n    <html lang=\"EN\">\n      ...\n    </html>\n  );\n}\n\nexport ErrorBoundary({error}: {error: Error}) {\n  return (\n    <html lang=\"EN\">\n      ...\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Updating cart.tsx for SingleFetch Compatibility\nDESCRIPTION: Changes to cart.tsx to add a headers export and update imports from json to data. This modification is necessary for enabling SingleFetch functionality.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/templates/skeleton/CHANGELOG.md#2025-04-11_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\n  import {\n-  json,\n+  data,\n    type LoaderFunctionArgs,\n    type ActionFunctionArgs,\n    type HeadersFunction\n  } from '@shopify/remix-oxygen';\n+ export const headers: HeadersFunction = ({actionHeaders}) => actionHeaders;\n\n  export async function action({request, context}: ActionFunctionArgs) {\n    ...\n-   return json(\n+   return data(\n      {\n        cart: cartResult,\n        errors,\n        warnings,\n        analytics: {\n          cartId,\n        },\n      },\n      {status, headers},\n    );\n  }\n\n  export async function loader({context}: LoaderFunctionArgs) {\n    const {cart} = context;\n-    return json(await cart.get());\n+    return await cart.get();\n  }\n```\n\n----------------------------------------\n\nTITLE: Integrating New Section in Sections Component for Shopify Hydrogen\nDESCRIPTION: Code snippet showing how to import and include a new section in the list of renderable sections within the Sections component, including the necessary fragment updates.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/examples/metaobjects/docs/METAOBJECTS.md#2025-04-11_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\n// other imported sections ...\nimport {SECTION_EXAMPLE_FRAGMENT, SectionExample} from '~/sections/SectionExample';\n\nimport type {SectionsFragment} from 'storefrontapi.generated';\n\nexport function Sections({sections}: {sections: SectionsFragment}) {\n  return (\n    <div className=\"sections\">\n      {sections?.references?.nodes.map((section) => {\n        switch (section.type) {\n          // other sections....\n          case 'section_example':\n             return <SectionExample />;\n          default:\n            // eslint-disable-next-line no-console\n            console.log(`Unsupported section type: ${section.type}`);\n            return null;\n        }\n      })}\n    </div>\n  );\n}\n\nexport const SECTIONS_FRAGMENT = `#graphql\n  fragment Sections on MetaobjectField {\n    ... on MetaobjectField {\n      references(first: 10) {\n        nodes {\n          ... on Metaobject {\n            id\n            type\n            ...SectionHero\n            ...SectionFeaturedProducts\n            ...SectionFeaturedCollections\n            ...SectionRichText\n            ...SectionStores\n            ...SectionStoreProfile\n          }\n        }\n      }\n    }\n  }\n  # All section fragments\n  # other section fragments ...\n  ${SECTION_EXAMPLE_FRAGMENT}\n`;\n```\n\n----------------------------------------\n\nTITLE: Updating TypeScript Types in remix.env.d.ts\nDESCRIPTION: Code diff showing how to update the TypeScript declaration file to include env and waitUntil in the AppLoadContext interface for proper type checking.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/remix-oxygen/CHANGELOG.md#2025-04-11_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n  declare module '@shopify/remix-oxygen' {\n    export interface AppLoadContext {\n+     env: Env;\n      cart: HydrogenCart;\n      storefront: Storefront;\n      session: HydrogenSession;\n+      waitUntil: ExecutionContext['waitUntil'];\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Updating Variant URL Handling in TypeScript\nDESCRIPTION: This TypeScript update modifies the useVariantUrl and getVariantUrl functions to make them more flexible by allowing an optional selectedOptions parameter. This change improves variant URL generation.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/templates/skeleton/CHANGELOG.md#2025-04-11_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nexport function useVariantUrl(\n  handle: string,\n  selectedOptions?: SelectedOption[],\n) {\n  const {pathname} = useLocation();\n\n  return useMemo(() => {\n    return getVariantUrl({\n      handle,\n      pathname,\n      searchParams: new URLSearchParams(),\n      selectedOptions,\n    });\n  }, [handle, selectedOptions, pathname]);\n}\n\nexport function getVariantUrl({\n  handle,\n  pathname,\n  searchParams,\n  selectedOptions,\n}: {\n  handle: string;\n  pathname: string;\n  searchParams: URLSearchParams;\n  selectedOptions?: SelectedOption[],\n}) {\n  const match = /(/[a-zA-Z]{2}-[a-zA-Z]{2}/)/g.exec(pathname);\n  const isLocalePathname = match && match.length > 0;\n  const path = isLocalePathname\n    ? `${match![0]}products/${handle}`\n    : `/products/${handle}`;\n\n  selectedOptions?.forEach((option) => {\n    searchParams.set(option.name, option.value);\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Using useOptimisticVariant Hook in React\nDESCRIPTION: Example demonstrating the usage of the new useOptimisticVariant hook for optimistically rendering product variant changes. This makes switching product variants instantaneous.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/hydrogen/CHANGELOG.md#2025-04-11_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Product() {\n  const {product, variants} = useLoaderData<typeof loader>();\n\n  // The selectedVariant optimistically changes during page\n  // transitions with one of the preloaded product variants\n  const selectedVariant = useOptimisticVariant(\n    product.selectedVariant,\n    variants,\n  );\n\n  return <ProductMain selectedVariant={selectedVariant} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Storefront Redirect in TypeScript\nDESCRIPTION: Shows how to configure storefrontRedirect to match query parameters when redirecting, which is now an opt-in behavior.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/hydrogen/CHANGELOG.md#2025-04-11_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\nstorefrontRedirect({\n  request,\n  response,\n  storefront,\n  matchQueryParams: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Supplying Locale Data in Root Loader Function in JSX\nDESCRIPTION: This code snippet demonstrates how to supply the selected locale and available countries data in the root loader function for use in country selector implementation.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/rfc/i18n.md#2025-04-11_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { countries } from '~/data/countries';\nexport const loader: LoaderFunction = async function loader() {\n  ...\n  return defer({\n    ...,\n    selectedLocale: await getLocaleFromRequest(request),\n    countries,\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Replacing json Import with Raw Object Returns\nDESCRIPTION: Example showing how to replace json() import with raw object returns. SingleFetch supports JSON objects and Promises out of the box, allowing direct return of data from loader/action functions.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/templates/skeleton/CHANGELOG.md#2025-04-11_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\n- import {json} from \"@shopify/remix-oxygen\";\n\n  export async function loader({}: LoaderFunctionArgs) {\n    let tasks = await fetchTasks();\n-   return json(tasks);\n+   return tasks;\n  }\n```\n\n----------------------------------------\n\nTITLE: Migrating from product.options.values to product.options.optionValues\nDESCRIPTION: Breaking change diff showing how to update GraphQL queries and component code to use optionValues instead of the deprecated values field on product options.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/hydrogen/CHANGELOG.md#2025-04-11_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n  const PRODUCT_FRAGMENT = `#graphql\n    fragment Product on Product {\n      id\n      title\n      options {\n        name\n-        values\n+        optionValues {\n+          name\n+        }\n      }\n```\n\nLANGUAGE: diff\nCODE:\n```\n  <VariantSelector\n    handle={product.handle}\n-    options={product.options.filter((option) => option.values.length > 1)}\n+    options={product.options.filter((option) => option.optionValues.length > 1)}\n    variants={variants}\n  >\n```\n\n----------------------------------------\n\nTITLE: Creating Route Structure for URL Path Localization in Hydrogen\nDESCRIPTION: Example of a routes folder structure showing how to organize files for localized paths. This demonstrates the convention of having main routes and their localized versions under a $lang directory.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/rfc/i18n.md#2025-04-11_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\nroutes/\n  index.tsx\n  products\n    $productHandle.tsx\n  $lang\n    index.tsx\n    products\n      $productHandle.tsx\n```\n\n----------------------------------------\n\nTITLE: Implementing Domain-based Locale Detection\nDESCRIPTION: Utility function that determines locale settings based on the request's domain. Maps different domains to specific country and language combinations.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/rfc/guide-internationalization.md#2025-04-11_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nexport function getLocaleFromRequest(request: Request): Locale {\n  const url = new URL(request.url);\n\n  switch (url.host) {\n    case 'ca.hydrogen.shop':\n      return {\n        language: 'EN',\n        country: 'CA',\n      };\n      break;\n    case 'hydrogen.au':\n      return {\n        language: 'EN',\n        country: 'AU',\n      };\n      break;\n    default:\n      return {\n        language: 'EN',\n        country: 'US',\n      };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Error Handling Example in TypeScript\nDESCRIPTION: Example showing proper usage of __HYDROGEN_DEV__ flag for error handling in development vs production modes. The flag must be first in compound conditions for proper production bundle optimization.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/hydrogen-react/CONTRIBUTING.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nif (__HYDROGEN_DEV__) {\n  throw new Error('Development error message');\n} else {\n  console.error('Production error message');\n}\n```\n\n----------------------------------------\n\nTITLE: Updating VariantSelector Component Filter in React\nDESCRIPTION: Example showing how to modify the VariantSelector component to handle option filtering differently, addressing changes in version 2024.7.1\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/templates/skeleton/CHANGELOG.md#2025-04-11_snippet_31\n\nLANGUAGE: diff\nCODE:\n```\n<VariantSelector\n  handle={product.handle}\n+  options={product.options.filter((option) => option.values.length > 1)}\n-  options={product.options}\n  variants={variants}>\n</VariantSelector>\n```\n\n----------------------------------------\n\nTITLE: Updating GraphQL Configuration Structure in .graphqlrc.yml\nDESCRIPTION: Modifies the GraphQL configuration file to use the more modern 'projects' structure, which allows for adding additional projects such as third party CMS schemas to the GraphQL config.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/templates/skeleton/CHANGELOG.md#2025-04-11_snippet_44\n\nLANGUAGE: diff\nCODE:\n```\n-schema: node_modules/@shopify/hydrogen/storefront.schema.json\n+projects:\n+ default:\n+    schema: 'node_modules/@shopify/hydrogen/storefront.schema.json'\n```\n\n----------------------------------------\n\nTITLE: Updating Vite Config for Remix v3_routeConfig Support\nDESCRIPTION: Configuration changes needed in vite.config.ts to support the Remix v3_routeConfig future flag, including switching from hydrogen.preset() to hydrogen.v3preset().\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/templates/skeleton/CHANGELOG.md#2025-04-11_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\nexport default defineConfig({\n  plugins: [\n    hydrogen(),\n    oxygen(),\n    remix({\n-      presets: [hydrogen.preset()],\n+      presets: [hydrogen.v3preset()],\n    future: {\n      v3_fetcherPersist: true,\n      v3_relativeSplatPath: true,\n      v3_throwAbortReason: true,\n      v3_lazyRouteDiscovery: true,\n      v3_singleFetch: true,\n+      v3_routeConfig: true,\n    },\n  }),\n  tsconfigPaths(),\n],\n```\n\n----------------------------------------\n\nTITLE: Accessing Language Parameter in Hydrogen Routes\nDESCRIPTION: Demonstrates how to access the language parameter from URL paths in Hydrogen routes using the useParams hook.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/rfc/i18n.md#2025-04-11_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nconst {lang} = useParams();\n```\n\n----------------------------------------\n\nTITLE: Filtering Variant Options Example in React\nDESCRIPTION: Example showing how to filter product options that only have one value when using the VariantSelector component. This demonstrates a breaking change where the automatic filtering was removed.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/hydrogen/CHANGELOG.md#2025-04-11_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<VariantSelector\n  handle={product.handle}\n+  options={product.options.filter((option) => option.values.length > 1)}\n-  options={product.options}\n  variants={variants}>\n</VariantSelector>\n```\n\n----------------------------------------\n\nTITLE: Removing Suspense from ProductForm Rendering\nDESCRIPTION: This diff removes the Suspense and Await components that were previously used to handle the asynchronous loading of variants. With the new implementation, all necessary data is available upfront, eliminating the need for deferred loading.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/templates/skeleton/CHANGELOG.md#2025-04-11_snippet_23\n\nLANGUAGE: diff\nCODE:\n```\nexport default function Product() {\n\n  ...\n\n  return (\n    ...\n+        <ProductForm\n+          productOptions={productOptions}\n+          selectedVariant={selectedVariant}\n+        />\n-        <Suspense\n-          fallback={\n-            <ProductForm\n-              product={product}\n-              selectedVariant={selectedVariant}\n-              variants={[]}\n-            />\n-          }\n-        >\n-          <Await\n-            errorElement=\"There was a problem loading product variants\"\n-            resolve={variants}\n-          >\n-            {(data) => (\n-              <ProductForm\n-                product={product}\n-                selectedVariant={selectedVariant}\n-                variants={data?.product?.variants.nodes || []}\n-              />\n-            )}\n-          </Await>\n-        </Suspense>\n```\n\n----------------------------------------\n\nTITLE: Updating ProductMain Component to Support Subscriptions\nDESCRIPTION: A diff showing how to modify the ProductMain component to accept and pass the selectedSellingPlan parameter to child components, enabling subscription functionality throughout the product interface.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/examples/subscriptions/README.md#2025-04-11_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\nfunction ProductMain({\n  selectedVariant,\n+ selectedSellingPlan,\n  product,\n}: {\n  product: ProductFragment;\n  selectedVariant: ProductFragment['variants']['nodes'][0];\n+ selectedSellingPlan: SellingPlanFragment | null;\n}) {\n  const {title, descriptionHtml, sellingPlanGroups} = product;\n\n  return (\n    <div className=\"product-main\">\n      <h1>{title}</h1>\n      <ProductPrice\n        selectedVariant={selectedVariant}\n+       selectedSellingPlan={selectedSellingPlan}\n      />\n      <br />\n      <ProductForm\n        selectedVariant={selectedVariant}\n+       selectedSellingPlan={selectedSellingPlan}\n        sellingPlanGroups={sellingPlanGroups}\n      />\n      <br />\n      <p>\n        <strong>Description</strong>\n      </p>\n      <br />\n      <div dangerouslySetInnerHTML={{__html: descriptionHtml}} />\n      <br />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding v3_singleFetch Future Flag to Vite Configuration\nDESCRIPTION: Code changes needed to add the v3_singleFetch future flag to the Vite configuration file. This includes declaring the interface Future with v3_singleFetch set to true and adding it to the remix configuration.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/templates/skeleton/CHANGELOG.md#2025-04-11_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n+  declare module \"@remix-run/server-runtime\" {\n+    interface Future {\n+     v3_singleFetch: true;\n+    }\n+  }\n\n  export default defineConfig({\n    plugins: [\n      hydrogen(),\n      oxygen(),\n      remix({\n        presets: [hydrogen.preset()],\n        future: {\n          v3_fetcherPersist: true,\n          v3_relativeSplatPath: true,\n          v3_throwAbortReason: true,\n          v3_lazyRouteDiscovery: true,\n+         v3_singleFetch: true,\n        },\n      }),\n      tsconfigPaths(),\n    ],\n```\n\n----------------------------------------\n\nTITLE: Migrating from getBuyerIp to getStorefrontHeaders\nDESCRIPTION: Code diff showing how to update createStorefrontClient implementation to use getStorefrontHeaders instead of the deprecated getBuyerIp function, introduced in version 1.0.4.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/remix-oxygen/CHANGELOG.md#2025-04-11_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n+ import {getStorefrontHeaders} from '@shopify/remix-oxygen';\nimport {createStorefrontClient, storefrontRedirect} from '@shopify/hydrogen';\n\nexport default {\n  async fetch(\n    request: Request,\n    env: Env,\n    executionContext: ExecutionContext,\n  ): Promise<Response> {\n\n    const {storefront} = createStorefrontClient({\n      cache,\n      waitUntil,\n-     buyerIp: getBuyerIp(request),\n      i18n: {language: 'EN', country: 'US'},\n      publicStorefrontToken: env.PUBLIC_STOREFRONT_API_TOKEN,\n      privateStorefrontToken: env.PRIVATE_STOREFRONT_API_TOKEN,\n      storeDomain: `https://${env.PUBLIC_STORE_DOMAIN}`,\n      storefrontApiVersion: env.PUBLIC_STOREFRONT_API_VERSION || '2023-01',\n      storefrontId: env.PUBLIC_STOREFRONT_ID,\n-     requestGroupId: request.headers.get('request-id'),\n+     storefrontHeaders: getStorefrontHeaders(request),\n    });\n```\n\n----------------------------------------\n\nTITLE: Updating Root Component with LiveReload\nDESCRIPTION: Code diff showing how to add Remix LiveReload component to root and error boundary components.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/cli/CHANGELOG.md#2025-04-11_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\nimport {\n  Outlet,\n  Scripts,\n+ LiveReload,\n  ScrollRestoration,\n} from '@remix-run/react';\n\n// ...\n\nexport default function App() {\n  // ...\n\n  return (\n    <html>\n      <head>\n       {/* ...  */}\n      </head>\n      <body>\n        <Outlet />\n        <ScrollRestoration />\n        <Scripts />\n+       <LiveReload />\n      </body>\n    </html>\n  );\n}\n\nexport function ErrorBoundary() {\n  // ...\n\n  return (\n    <html>\n      <head>\n        {/* ... */}\n      </head>\n      <body>\n        Error!\n        <Scripts />\n+       <LiveReload />\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Section Component Markup in TypeScript for Shopify Hydrogen\nDESCRIPTION: Code snippet demonstrating how to add markup to define a section component, including styling and rendering of parsed metaobject fields.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/examples/metaobjects/docs/METAOBJECTS.md#2025-04-11_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nexport function SectionExample(props: SectionExampleFragment) {\n  const section = parseSection<\n    SectionHeroFragment,\n    {\n      heading?: ParsedMetafields['single_line_text_field'];\n      subheading?: ParsedMetafields['single_line_text_field'];\n    }\n  >(props);\n\n  const {image, heading, subheading, link} = section;\n\n  const backgroundImage = image?.image?.url\n    ? `url(\"${image.image.url}\")`\n    : undefined;\n\n  return (\n    <section\n      className=\"section-hero\"\n      style={{\n        backgroundImage,\n        height: '50%',\n        backgroundPosition: 'center',\n        backgroundRepeat: 'no-repeat',\n        backgroundSize: 'cover',\n        position: 'relative',\n        minHeight: '500px',\n      }}\n    >\n      <div\n        style={{\n          display: 'flex',\n          flexDirection: 'column',\n          justifyContent: 'center',\n          paddingLeft: '2rem',\n          position: 'absolute',\n          top: 0,\n          right: 0,\n          left: 0,\n          bottom: 0,\n        }}\n      >\n        {heading && <h1 style={{marginBottom: 0}}>{heading.parsedValue}</h1>}\n        {subheading && <p>{subheading.value}</p>}\n      </div>\n    </section>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring createWithCache_unstable in server.ts (JavaScript)\nDESCRIPTION: This snippet demonstrates how to set up the experimental createWithCache_unstable utility in the server.ts file. It shows how to create a custom utility for querying third-party APIs with cache options.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/hydrogen/CHANGELOG.md#2025-04-11_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  createStorefrontClient,\n  createWithCache_unstable,\n  CacheLong,\n} from '@shopify/hydrogen';\n\n// ...\n\n  const cache = await caches.open('hydrogen');\n  const withCache = createWithCache_unstable({cache, waitUntil});\n\n  // Create custom utilities to query third-party APIs:\n  const fetchMyCMS = (query) => {\n    // Prefix the cache key and make it unique based on arguments.\n    return withCache(['my-cms', query], CacheLong(), () => {\n      const cmsData = await (await fetch('my-cms.com/api', {\n        method: 'POST',\n        body: query\n      })).json();\n\n      const nextPage = (await fetch('my-cms.com/api', {\n        method: 'POST',\n        body: cmsData1.nextPageQuery,\n      })).json();\n\n      return {...cmsData, nextPage}\n    });\n  };\n\n  const handleRequest = createRequestHandler({\n    build: remixBuild,\n    mode: process.env.NODE_ENV,\n    getLoadContext: () => ({\n      session,\n      waitUntil,\n      storefront,\n      env,\n      fetchMyCMS,\n    }),\n  });\n```\n\n----------------------------------------\n\nTITLE: Creating Remix Route Configuration File\nDESCRIPTION: Creating a routes.ts file to configure Remix routes using the new v3_routeConfig approach, implementing flatRoutes with a layout wrapper.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/templates/skeleton/CHANGELOG.md#2025-04-11_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { flatRoutes } from \"@remix-run/fs-routes\";\nimport { layout, type RouteConfig } from \"@remix-run/route-config\";\nimport { hydrogenRoutes } from \"@shopify/hydrogen\";\n\nexport default hydrogenRoutes([\n  // Your entire app reading from routes folder using Layout from layout.tsx\n  layout(\"./layout.tsx\", await flatRoutes()),\n]) satisfies RouteConfig;\n```\n\n----------------------------------------\n\nTITLE: Implementing Loader Function for Predictive Search in TypeScript\nDESCRIPTION: This loader function handles GET requests for predictive search, processing the 'predictive' search parameter and calling the predictiveSearch function.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/templates/skeleton/guides/predictiveSearch/predictiveSearch.md#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function loader({request, context}: LoaderFunctionArgs) {\n  const url = new URL(request.url);\n  const isPredictive = url.searchParams.has('predictive');\n\n  if (!isPredictive) {\n    return {}\n  }\n\n  const searchPromise = predictiveSearch({request, context})\n\n  searchPromise.catch((error: Error) => {\n    console.error(error);\n    return {term: '', result: null, error: error.message};\n  });\n\n  return await searchPromise;\n}\n```\n\n----------------------------------------\n\nTITLE: Converting json to data API with Headers Support\nDESCRIPTION: Example showing how to migrate from json() to data() API while maintaining headers functionality. This includes adding a HeadersFunction export to ensure headers are properly merged.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/templates/skeleton/CHANGELOG.md#2025-04-11_snippet_12\n\nLANGUAGE: diff\nCODE:\n```\n-  import {json} from \"@shopify/remix-oxygen\";\n+  import {data, type HeadersFunction} from \"@shopify/remix-oxygen\";\n\n+  /**\n+   * If your loader or action is returning a response with headers,\n+   * make sure to export a headers function that merges your headers\n+   * on your route. Otherwise, your headers may be lost.\n+   * Remix doc: https://remix.run/docs/en/main/route/headers\n+   **/\n+  export const headers: HeadersFunction = ({loaderHeaders}) => loaderHeaders;\n\n  export async function loader({}: LoaderFunctionArgs) {\n    let tasks = await fetchTasks();\n-    return json(tasks, {\n+    return data(tasks, {\n      headers: {\n        \"Cache-Control\": \"public, max-age=604800\"\n      }\n    });\n  }\n```\n\n----------------------------------------\n\nTITLE: Updating server.ts with waitUntil and env Context\nDESCRIPTION: Code diff showing how to update the server.ts file to pass waitUntil and env to the request handler, necessary for the debug-network utility introduced in version 1.1.4.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/remix-oxygen/CHANGELOG.md#2025-04-11_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n  const handleRequest = createRequestHandler({\n    build: remixBuild,\n    mode: process.env.NODE_ENV,\n+    getLoadContext: () => ({session, storefront, env, waitUntil}),\n  });\n```\n\n----------------------------------------\n\nTITLE: Storefront Client Query Update\nDESCRIPTION: Shows the difference in typing Storefront client queries before and after GraphQL Codegen integration.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/cli/CHANGELOG.md#2025-04-11_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n-import type {Shop} from '@shopify/hydrogen/storefront-api-types';\n// ...\n-const result = await storefront.query<{shop: Shop}>(UNIQUE_NAME_SHOP_QUERY);\n+const result = await storefront.query(UNIQUE_NAME_SHOP_QUERY);\n```\n\n----------------------------------------\n\nTITLE: Creating Separate Layout Component\nDESCRIPTION: Creating a separate layout.tsx file with the Layout component exported from root.tsx, including an Outlet component for Remix to inject route content.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/templates/skeleton/CHANGELOG.md#2025-04-11_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// /app/layout.tsx\nimport {Outlet} from '@remix-run/react';\n\nexport default function Layout() {\n  const nonce = useNonce();\n  const data = useRouteLoaderData<RootLoader>('root');\n\n  return (\n    <html lang=\"en\">\n      ...\n      <Outlet />\n      ...\n    </html>\n  );\n}\n\n// Remember to remove the Layout export from your root.tsx\n```\n\n----------------------------------------\n\nTITLE: Replacing defer Import with Raw Object Returns\nDESCRIPTION: Example showing how to replace defer() import with raw object returns. With SingleFetch, you can directly return objects with Promise properties instead of using defer().\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/templates/skeleton/CHANGELOG.md#2025-04-11_snippet_11\n\nLANGUAGE: diff\nCODE:\n```\n- import {defer} from \"@shopify/remix-oxygen\";\n\n  export async function loader({}: LoaderFunctionArgs) {\n    let lazyStuff = fetchLazyStuff();\n    let tasks = await fetchTasks();\n-   return defer({ tasks, lazyStuff });\n+   return { tasks, lazyStuff };\n  }\n```\n\n----------------------------------------\n\nTITLE: Adding Headers Export for Legacy Account Routes\nDESCRIPTION: Code sample showing how to add a headers export function to legacy customer account flow routes. This change is required when using v3_singleFetch with legacy customer accounts or multipass.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/templates/skeleton/CHANGELOG.md#2025-04-11_snippet_13\n\nLANGUAGE: diff\nCODE:\n```\n+ export const headers: HeadersFunction = ({loaderHeaders}) => loaderHeaders;\n```\n\n----------------------------------------\n\nTITLE: Updating Remix Dependencies\nDESCRIPTION: Code diff showing how to update Remix dependencies in package.json to match the version required by remix-oxygen 1.1.1.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/remix-oxygen/CHANGELOG.md#2025-04-11_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n-\"@remix-run/react\": \"1.15.0\",\n+\"@remix-run/react\": \"1.17.1\",\n\n-\"@remix-run/dev\": \"1.15.0\",\n-\"@remix-run/eslint-config\": \"1.15.0\",\n+\"@remix-run/dev\": \"1.17.1\",\n+\"@remix-run/eslint-config\": \"1.17.1\",\n```\n\n----------------------------------------\n\nTITLE: Fixing HMR bug by moving stylesheets from links() to Layout component in React\nDESCRIPTION: A workaround for the \"failed to execute 'insertBefore' on 'Node'\" error that occurs during development when editing and navigating to another page. This patch moves stylesheet links from the links() function to directly within the Layout component.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/templates/skeleton/CHANGELOG.md#2025-04-11_snippet_15\n\nLANGUAGE: diff\nCODE:\n```\n// root.tsx\n\n/**\n * The main and reset stylesheets are added in the Layout component\n * to prevent a bug in development HMR updates.\n *\n * This avoids the \"failed to execute 'insertBefore' on 'Node'\" error\n * that occurs after editing and navigating to another page.\n *\n * It's a temporary fix until the issue is resolved.\n * https://github.com/remix-run/remix/issues/9242\n */\nexport function links() {\n  return [\n-    {rel: 'stylesheet', href: resetStyles},\n-    {rel: 'stylesheet', href: appStyles},\n    {\n      rel: 'preconnect',\n      href: 'https://cdn.shopify.com',\n    },\n    {\n      rel: 'preconnect',\n      href: 'https://shop.app',\n    },\n    {rel: 'icon', type: 'image/svg+xml', href: favicon},\n  ];\n}\n\n...\n\nexport function Layout({children}: {children?: React.ReactNode}) {\n  const nonce = useNonce();\n  const data = useRouteLoaderData<RootLoader>('root');\n\n  return (\n    <html lang=\"en\">\n      <head>\n        <meta charSet=\"utf-8\" />\n        <meta name=\"viewport\" content=\"width=device-width,initial-scale=1\" />\n+        <link rel=\"stylesheet\" href={resetStyles}></link>\n+        <link rel=\"stylesheet\" href={appStyles}></link>\n```\n\n----------------------------------------\n\nTITLE: Querying GraphQL with TypeScript in Hydrogen\nDESCRIPTION: Example of using GraphQL queries within a TypeScript client in Hydrogen. This pattern allows for type inference from the generated definitions without adding runtime overhead.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/hydrogen-codegen/README.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst {shop} = await client.query(`#graphql\n  query {\n    shop {\n     name\n    }\n  }\n`);\n```\n\n----------------------------------------\n\nTITLE: Configuring Node TLS Environment Variables in Hydrogen\nDESCRIPTION: Examples of using Node environment variables NODE_TLS_REJECT_UNAUTHORIZED and NODE_EXTRA_CA_CERTS to manage certificate validation and CA certificates in the worker environment.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/cli/CHANGELOG.md#2025-04-11_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n# Disable certificate validation\nNODE_TLS_REJECT_UNAUTHORIZED=0 npm run dev\n\n# Provide additional CA certificates\nNODE_EXTRA_CA_CERTS=/usr/.../ca-certificates/my-file.crt npm run dev\n```\n\n----------------------------------------\n\nTITLE: Updating Vite Config for Remix v3 Preset\nDESCRIPTION: Shows how to update the Vite configuration file to use Hydrogen's v3preset instead of the standard preset when using Remix's v3_routeConfig.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/cli/CHANGELOG.md#2025-04-11_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  plugins: [\n    hydrogen(),\n    oxygen(),\n    remix({\n-      presets: [hydrogen.preset()],\n+      presets: [hydrogen.v3preset()],\n    })\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Updating HydrogenSession Type Implementation in TypeScript\nDESCRIPTION: Shows how to update the implementation of HydrogenSession by implementing the interface type rather than extending the class.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/hydrogen/CHANGELOG.md#2025-04-11_snippet_14\n\nLANGUAGE: diff\nCODE:\n```\nimport {\n+ type HydrogenSession,\n} from '@shopify/hydrogen';\n- class HydrogenSession {\n+ class AppSession implements HydrogenSession {\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Load Context Types in TypeScript\nDESCRIPTION: TypeScript interface updates for the Remix load context to include environment and waitUntil properties.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/cli/CHANGELOG.md#2025-04-11_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare module '@shopify/remix-oxygen' {\n  export interface AppLoadContext {\n    env: Env;\n    cart: HydrogenCart;\n    storefront: Storefront;\n    session: HydrogenSession;\n    waitUntil: ExecutionContext['waitUntil'];\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Server Request Handler in TypeScript\nDESCRIPTION: Updates the server.ts file to pass waitUntil and env to the request handler context. Also updates the type definitions in remix.env.d.ts.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/create-hydrogen/CHANGELOG.md#2025-04-11_snippet_14\n\nLANGUAGE: diff\nCODE:\n```\n  const handleRequest = createRequestHandler({\n    build: remixBuild,\n    mode: process.env.NODE_ENV,\n+    getLoadContext: () => ({session, storefront, env, waitUntil}),\n  });\n\n  declare module '@shopify/remix-oxygen' {\n    export interface AppLoadContext {\n+     env: Env;\n      cart: HydrogenCart;\n      storefront: Storefront;\n      session: HydrogenSession;\n+      waitUntil: ExecutionContext['waitUntil'];\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring Root Layout for Edit Button Support\nDESCRIPTION: TypeScript code for the root layout loader that exposes the store domain to enable the Edit Route button functionality. This allows for quick access to edit metaobjects in the admin dashboard.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/examples/metaobjects/README.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {data, type LoaderFunctionArgs} from '@shopify/remix-oxygen';\n\nexport async function loader({context}: LoaderFunctionArgs) {\n  // other code ...\n  const publicStoreDomain = context.env.PUBLIC_STORE_DOMAIN;\n\n  return data(\n    {\n      // other code ...\n      publicStoreSubdomain: context.env.PUBLIC_SHOPIFY_STORE_DOMAIN,\n    },\n    {headers},\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing Content Architecture with Metaobject Definitions\nDESCRIPTION: ASCII diagram showing the hierarchical structure of metaobject definitions, including Route and Sections (e.g., SectionHero, SectionFeaturedProducts).\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/examples/metaobjects/docs/METAOBJECTS.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nMetaobject Definitions\n┌─────────────────────────────────────────────────┐\n│                                                 │\n│   Route                                         │\n│                                                 │\n│   ┌─────────────────────────────────────────┐   │\n│   │                                         │   │\n│   │ Sections                                │   │\n│   │                                         │   │\n│   │ ┌─────────────────────────────────────┐ │   │\n│   │ │ SectionHero                         │ │   │\n│   │ ├─────────────────────────────────────┤ │   │\n│   │ │ SectionFeaturedProducts             │ │   │\n│   │ └─────────────────────────────────────┘ │   │\n│   │  ...                                    │   │\n│   │                                         │   │\n│   └─────────────────────────────────────────┘   │\n│                                                 │\n└─────────────────────────────────────────────────┘\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query with Fragment\nDESCRIPTION: Example of using string interpolation with GraphQL fragments in TypeScript, showing proper type inference with 'as const'.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/cli/CHANGELOG.md#2025-04-11_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst UNIQUE_NAME_SHOP_FRAGMENT = `#graphql\n  fragment unique_name_shop_fields on Shop { id name }\n`;\n\nconst UNIQUE_NAME_SHOP_QUERY = `#graphql\n  query unique_name_shop { shop { ...unique_name_shop_fields } }\n  ${UNIQUE_NAME_SHOP_FRAGMENT}\n` as const;\n```\n\n----------------------------------------\n\nTITLE: Example of Document Paths Configuration in GraphQL Config\nDESCRIPTION: Shows how to modify document paths used for Storefront API queries, which is useful for excluding certain files from being used for codegen or other GraphQL utilities in a large codebase.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/templates/skeleton/CHANGELOG.md#2025-04-11_snippet_45\n\nLANGUAGE: yaml\nCODE:\n```\nprojects:\n  default:\n    schema: \"node_modules/@shopify/hydrogen/storefront.schema.json\"\n    documents:\n      - \"!*.d.ts\"\n      - \"*.{ts,tsx,js,jsx}\"\n      - \"app/**/*.{ts,tsx,js,jsx}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Remix Routes with v3_routeConfig\nDESCRIPTION: Creates a routes.ts file that uses Remix's flatRoutes and route-config packages to define application routes. This implementation supports the v3_routeConfig future flag.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/cli/CHANGELOG.md#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {flatRoutes} from '@remix-run/fs-routes';\nimport {layout, type RouteConfig} from '@remix-run/route-config';\nimport {hydrogenRoutes} from '@shopify/hydrogen';\n\nexport default hydrogenRoutes([\n  // Your entire app reading from routes folder using Layout from layout.tsx\n  layout('./layout.tsx', await flatRoutes()),\n]) satisfies RouteConfig;\n```\n\n----------------------------------------\n\nTITLE: Integrating Locale Utility with RequestHandler in JSX\nDESCRIPTION: This code demonstrates how to add the locale utility function to the requestHandler's storefront object, ensuring every worker request has language and country definitions.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/rfc/i18n.md#2025-04-11_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n// server.ts\nexport default {\n  async fetch(\n    request: Request,\n    env: Env,\n    context: ExecutionContext,\n  ): Promise<Response> {\n    try {\n      return await requestHandler(request, {\n        env,\n        context,\n        storefront: {\n          publicStorefrontToken: '3b580e70970c4528da70c98e097c2fa0',\n          storeDomain: 'https://hydrogen-preview.myshopify.com',\n          storefrontApiVersion: '2022-10',\n          i18n: getLocaleFromRequest(request),\n        },\n      });\n```\n\n----------------------------------------\n\nTITLE: Updating Sitemap Imports in React Router Route Files\nDESCRIPTION: Code diff showing how to migrate from unstable/experimental sitemap functions to stable API in Hydrogen. Updates import statements in route files for sitemap.xml and dynamic sitemap pages.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/hydrogen/CHANGELOG.md#2025-04-11_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- import {unstable__getSitemapIndex as getSitemapIndex} from '@shopify/hydrogen';\n+ import {getSitemapIndex} from '@shopify/hydrogen';\n```\n\nLANGUAGE: diff\nCODE:\n```\n- import {unstable__getSitemap as getSitemap} from '@shopify/hydrogen';\n+ import {getSitemap} from '@shopify/hydrogen';\n```\n\n----------------------------------------\n\nTITLE: Removing Redirect Logic from loadCriticalData Function\nDESCRIPTION: This diff removes the redirect logic from the loadCriticalData function, which previously redirected to the first variant if no selected variant was returned. This logic is no longer needed with the new implementation.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/templates/skeleton/CHANGELOG.md#2025-04-11_snippet_19\n\nLANGUAGE: diff\nCODE:\n```\nasync function loadCriticalData({\n  context,\n  params,\n  request,\n}: LoaderFunctionArgs) {\n  const {handle} = params;\n  const {storefront} = context;\n  if (!handle) {\n    throw new Error('Expected product handle to be defined');\n  }\n  const [{product}] = await Promise.all([\n    storefront.query(PRODUCT_QUERY, {\n      variables: {handle, selectedOptions: getSelectedProductOptions(request)},\n    }),\n    // Add other queries here, so that they are loaded in parallel\n  ]);\n\n  if (!product?.id) {\n    throw new Response(null, {status: 404});\n  }\n\n-  const firstVariant = product.variants.nodes[0];\n-  const firstVariantIsDefault = Boolean(\n-    firstVariant.selectedOptions.find(\n-      (option: SelectedOption) =>\n-        option.name === 'Title' && option.value === 'Default Title',\n-    ),\n-  );\n\n-  if (firstVariantIsDefault) {\n-    product.selectedVariant = firstVariant;\n-  } else {\n-    // if no selected variant was returned from the selected options,\n-    // we redirect to the first variant's url with it's selected options applied\n-    if (!product.selectedVariant) {\n-      throw redirectToFirstVariant({product, request});\n-    }\n-  }\n\n  return {\n    product,\n  };\n}\n\n...\n\n-  function redirectToFirstVariant({\n-    product,\n-    request,\n-  }: {\n-    product: ProductFragment;\n-    request: Request;\n-  }) {\n-    ...\n-  }\n```\n\n----------------------------------------\n\nTITLE: Custom Image Loader Implementation\nDESCRIPTION: Example of implementing a custom image loader function with the Image component.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/hydrogen-react/CHANGELOG.md#2025-04-11_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nconst customLoader = ({src, width, height, crop}) => {\n  return `${src}?w=${width}&h=${height}&gravity=${crop}`;\n};\n\nexport default function CustomImage(props) {\n  <Image loader={customLoader} {...props} />;\n}\n\n// In Use:\n\n<CustomImage data={customCDNImageData} />;\n```\n\n----------------------------------------\n\nTITLE: Updating Package.json for Remix v3_routeConfig\nDESCRIPTION: Required updates to package.json to support the Remix v3_routeConfig feature, adding new dependencies @remix-run/fs-routes and @remix-run/route-config.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/templates/skeleton/CHANGELOG.md#2025-04-11_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n  \"devDependencies\": {\n    \"@remix-run/dev\": \"^2.16.1\",\n+    \"@remix-run/fs-routes\": \"^2.16.1\",\n+    \"@remix-run/route-config\": \"^2.16.1\",\n```\n\n----------------------------------------\n\nTITLE: Updating withCache Request Parameter in Worker Runtime\nDESCRIPTION: Example showing how to add the new request parameter to createWithCache configuration for Worker runtime debug-network tool integration.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/hydrogen/CHANGELOG.md#2025-04-11_snippet_17\n\nLANGUAGE: diff\nCODE:\n```\nexport default {\n  fetch(request, env, executionContext) {\n    // ...\n    const withCache = createWithCache({\n      cache,\n      waitUntil,\n+     request,\n    });\n    // ...\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Adding 404 Route Handler for i18n Projects\nDESCRIPTION: Implements a loader function for handling 404 routes in path-based i18n projects. Checks locale parameters and returns appropriate responses.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/templates/skeleton/CHANGELOG.md#2025-04-11_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function loader({ params, context }: LoaderFunctionArgs) {\n  const { language, country } = context.storefront.i18n;\n\n  if (\n    params.locale &&\n    params.locale.toLowerCase() !== `${language}-${country}`.toLowerCase()\n  ) {\n    // If the locale URL param is defined, yet we still are still at the default locale\n    // then the the locale param must be invalid, send to the 404 page\n    throw new Response(null, { status: 404 });\n  }\n\n  return null;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up HTTP Proxy Authentication in Hydrogen Development Environment\nDESCRIPTION: Example of configuring an HTTP proxy with authentication for Hydrogen development server. The environment variable format includes username, password, proxy server address, and port.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/mini-oxygen/CHANGELOG.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nSHOPIFY_HTTP_PROXY=http://user:pass@yourproxy.com:PORT\n```\n\n----------------------------------------\n\nTITLE: Custom Image Loader Type Definition\nDESCRIPTION: TypeScript interface definition for custom image loader parameters.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/hydrogen-react/CHANGELOG.md#2025-04-11_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\ntype LoaderParams = {\n  /** The base URL of the image */\n  src?: ImageType['url'];\n  /** The URL param that controls width */\n  width?: number;\n  /** The URL param that controls height */\n  height?: number;\n  /** The URL param that controls the cropping region */\n  crop?: Crop;\n};\n```\n\n----------------------------------------\n\nTITLE: Updating TypeScript Configuration in tsconfig.json\nDESCRIPTION: This diff shows a change to the tsconfig.json file to fix TypeScript compilation by updating the types import from @remix-run/node to @remix-run/server-runtime.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/create-hydrogen/CHANGELOG.md#2025-04-11_snippet_0\n\nLANGUAGE: Diff\nCODE:\n```\n     \"types\": [\n       \"@shopify/oxygen-workers-types\",\n-      \"@remix-run/node\",\n+      \"@remix-run/server-runtime\",\n       \"vite/client\"\n     ],\n```\n\n----------------------------------------\n\nTITLE: Selling Plan GraphQL Fragments\nDESCRIPTION: GraphQL fragments for querying selling plan data including pricing adjustments and delivery options\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/examples/subscriptions/README.md#2025-04-11_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nconst SELLING_PLAN_FRAGMENT = `#graphql\n  fragment SellingPlanMoney on MoneyV2 {\n    amount\n    currencyCode\n  }\n\n  fragment SellingPlan on SellingPlan {\n    id\n    options {\n      name\n      value\n    }\n    priceAdjustments {\n      adjustmentValue {\n        ... on SellingPlanFixedAmountPriceAdjustment {\n          __typename\n          adjustmentAmount {\n            ... on MoneyV2 {\n              ...SellingPlanMoney\n            }\n          }\n        }\n        ... on SellingPlanFixedPriceAdjustment {\n          __typename\n          price {\n            ... on MoneyV2 {\n              ...SellingPlanMoney\n            }\n          }\n        }\n        ... on SellingPlanPercentagePriceAdjustment {\n          __typename\n          adjustmentPercentage\n        }\n      }\n      orderCount\n    }\n    recurringDeliveries\n    checkoutCharge {\n      type\n      value {\n        ... on MoneyV2 {\n          ...SellingPlanMoney\n        }\n        ... on SellingPlanCheckoutChargePercentageValue {\n          percentage\n        }\n      }\n    }\n  }`\n```\n\n----------------------------------------\n\nTITLE: Hydrogen CLI Commands\nDESCRIPTION: CLI commands for running GraphQL Codegen with Hydrogen development server.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/cli/CHANGELOG.md#2025-04-11_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nnpx shopify hydrogen dev --codegen-unstable # Dev server + codegen watcher\nnpx shopify hydrogen codegen-unstable # One-off codegen\nnpx shopify hydrogen codegen-unstable --watch # Standalone codegen watcher\n```\n\n----------------------------------------\n\nTITLE: Updating CSS Styles for Product Options\nDESCRIPTION: This CSS update adds styles for non-anchor links, product option items, and product option swatches. It improves the visual appearance of product options and swatches.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/templates/skeleton/CHANGELOG.md#2025-04-11_snippet_26\n\nLANGUAGE: css\nCODE:\n```\n/*\n* --------------------------------------------------\n* Non anchor links\n* --------------------------------------------------\n*/\n.link:hover {\n  text-decoration: underline;\n  cursor: pointer;\n}\n\n.product-options-item,\n.product-options-item:disabled {\n  padding: 0.25rem 0.5rem;\n  background-color: transparent;\n  font-size: 1rem;\n  font-family: inherit;\n}\n\n.product-option-label-swatch {\n  width: 1.25rem;\n  height: 1.25rem;\n  margin: 0.25rem 0;\n}\n\n.product-option-label-swatch img {\n  width: 100%;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Partytown components in root.tsx\nDESCRIPTION: TypeScript code showing the imports required for using Partytown with Google Tag Manager in the root layout file.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/examples/partytown/README.md#2025-04-11_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Partytown} from '@builder.io/partytown/react';\nimport {PartytownGoogleTagManager} from '~/components/PartytownGoogleTagManager';\nimport {maybeProxyRequest} from '~/utils/partytown/maybeProxyRequest';\nimport {partytownAtomicHeaders} from '~/utils/partytown/partytownAtomicHeaders';\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Queries in Hydrogen Templates\nDESCRIPTION: Demonstrates best practices for naming and structuring GraphQL queries in Hydrogen templates, using SCREAMING_SNAKE_CASE for constants and ensuring globally-unique query names based on filename and content.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/templates/TEMPLATE_GUIDELINES.md#2025-04-11_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// in '/product.tsx'\nconst QUERY_SHOP = `#graphql\n  query product_shop {\n    shop {\n      ...\n    }\n  }\n`;\n```\n\nLANGUAGE: tsx\nCODE:\n```\n// in '/collection.tsx'\nconst MUTATION_ADD_TO_CART = `#graphql\n  mutation collection_add_to_cart {\n    ...\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Remix Loader Return Patterns for Hydrogen\nDESCRIPTION: Shows different patterns for returning data from Remix loaders and actions in Hydrogen, including raw JSON objects, redirects, and custom responses with headers.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/templates/TEMPLATE_GUIDELINES.md#2025-04-11_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nexport async function loader() {\n  return {foo: 'bar'};\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport {redirect} from ''@shopify/remix-oxygen';';\nexport async function loader() {\n  return redirect('/');\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nexport async function loader() {\n  return data(\n    {foo: 'bar'},\n    {\n      headers: {\n        'Cache-Control': 'none',\n      },\n    },\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Shopify Domain Utilities with useShop Hook\nDESCRIPTION: Example showing how to use the getShopifyDomain function from the useShop hook to get a fully-qualified domain URL for your Shopify backend.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/hydrogen-react/CHANGELOG.md#2025-04-11_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst {getShopifyDomain} = useShop();\nconsole.log(getShopifyDomain());\n// 'https://test.myshopify.com'\n```\n\n----------------------------------------\n\nTITLE: Updating shouldRevalidate Function in root.tsx\nDESCRIPTION: Changes to the shouldRevalidate function in root.tsx to improve performance by defaulting to no revalidation for root loader data. This optimization should be used with caution as it may cause UI to get out of sync with the server.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/templates/skeleton/CHANGELOG.md#2025-04-11_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\nexport const shouldRevalidate: ShouldRevalidateFunction = ({\n  formMethod,\n  currentUrl,\n  nextUrl,\n-  defaultShouldRevalidate,\n}) => {\n  // revalidate when a mutation is performed e.g add to cart, login...\n  if (formMethod && formMethod !== 'GET') return true;\n\n  // revalidate when manually revalidating via useRevalidator\n  if (currentUrl.toString() === nextUrl.toString()) return true;\n\n-  return defaultShouldRevalidate;\n+  return false;\n};\n```\n\n----------------------------------------\n\nTITLE: Updating build script in package.json\nDESCRIPTION: Diff showing how to modify the build script to run the Partytown script before building the Hydrogen app.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/examples/partytown/README.md#2025-04-11_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n  \"scripts\": {\n-    \"build\": \"shopify hydrogen build\",\n+    \"build\": \"npm run partytown && shopify hydrogen build\",\n  },\n```\n\n----------------------------------------\n\nTITLE: Updating Request Handler Configuration\nDESCRIPTION: Code diff showing how to update the request handler to pass waitUntil and env parameters.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/cli/CHANGELOG.md#2025-04-11_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\nconst handleRequest = createRequestHandler({\n  build: remixBuild,\n  mode: process.env.NODE_ENV,\n+ getLoadContext: () => ({session, storefront, env, waitUntil}),\n});\n```\n\n----------------------------------------\n\nTITLE: Codegen Dependencies Update\nDESCRIPTION: Adds explicit codegen dependencies required in package.json\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/templates/skeleton/CHANGELOG.md#2025-04-11_snippet_39\n\nLANGUAGE: diff\nCODE:\n```\n{\n  \"devDependencies\": {\n+   \"@graphql-codegen/cli\": \"5.0.2\",\n    \"@remix-run/dev\": \"^2.8.0\",\n    \"@remix-run/eslint-config\": \"^2.8.0\",\n+   \"@shopify/hydrogen-codegen\": \"^0.3.0\",\n    \"@shopify/mini-oxygen\": \"^2.2.5\",\n    \"@shopify/oxygen-workers-types\": \"^4.0.0\",\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Simplifying loadDeferredData Function for Product Page\nDESCRIPTION: This diff removes the variants query from the loadDeferredData function as it's no longer needed with the new implementation. The function now returns an empty object instead of loading all product variants.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/templates/skeleton/CHANGELOG.md#2025-04-11_snippet_18\n\nLANGUAGE: diff\nCODE:\n```\nfunction loadDeferredData({context, params}: LoaderFunctionArgs) {\n+  // Put any API calls that is not critical to be available on first page render\n+  // For example: product reviews, product recommendations, social feeds.\n-  // In order to show which variants are available in the UI, we need to query\n-  // all of them. But there might be a *lot*, so instead separate the variants\n-  // into it's own separate query that is deferred. So there's a brief moment\n-  // where variant options might show as available when they're not, but after\n-  // this deferred query resolves, the UI will update.\n-  const variants = context.storefront\n-    .query(VARIANTS_QUERY, {\n-      variables: {handle: params.handle!},\n-    })\n-    .catch((error) => {\n-      // Log query errors, but don't throw them so the page can still render\n-      console.error(error);\n-      return null;\n-    });\n\n+  return {}\n-  return {\n-    variants,\n-  };\n}\n```\n\n----------------------------------------\n\nTITLE: Importing RichText Component in React\nDESCRIPTION: Example of how to import and use the new RichText component to render rich_text_field metafields.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/hydrogen-react/CHANGELOG.md#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {RichText} from '@shopify/hydrogen-react';\n\nexport function MainRichText({metaFieldData}: {metaFieldData: string}) {\n  return (\n    <RichText\n      data={metaFieldData}\n      components={{\n        paragraph({node}) {\n          return <p className=\"customClass\">{node.children}</p>;\n        },\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Hydrogen using npm\nDESCRIPTION: Command to install the latest version of Hydrogen using npm. This is the first step in setting up a new Hydrogen project.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create @shopify/hydrogen@latest\n```\n\n----------------------------------------\n\nTITLE: Cart Query Fragment Update for Subscriptions\nDESCRIPTION: GraphQL fragment modification to include selling plan allocation data in cart queries\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/examples/subscriptions/README.md#2025-04-11_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nconst CART_QUERY_FRAGMENT = `#graphql\n  fragment CartLine on CartLine {\n    id\n    quantity\n    attributes {\n      key\n      value\n    }\n    cost {\n      totalAmount {\n        ...Money\n      }\n      amountPerQuantity {\n        ...Money\n      }\n      compareAtAmountPerQuantity {\n        ...Money\n      }\n    }\n    sellingPlanAllocation {\n      sellingPlan {\n        name\n      }\n    }\n  }`\n```\n\n----------------------------------------\n\nTITLE: Dispatching Requests to MiniOxygen\nDESCRIPTION: JavaScript code demonstrating how to dispatch fetch requests to MiniOxygen, either directly or via a network request, and how to dispose of the instance.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/mini-oxygen/README.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = await miniOxygen.dispatchFetch('http://placeholder');\n// Or with the following code via network request:\n// const {workerUrl} = await miniOxygen.ready;\n// const response = await fetch(workerUrl);\n\nconsole.log(await response.text());\n\nawait miniOxygen.dispose();\n```\n\n----------------------------------------\n\nTITLE: Starting Development Servers\nDESCRIPTION: Command to start both the Remix development asset server and Express server in development mode. This enables hot reloading when assets are rebuilt.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/examples/express/README.md#2025-04-11_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: srcSetOptions Configuration for Image Component in Hydrogen\nDESCRIPTION: Default configuration options for the srcSetOptions prop which controls how the image URLs in srcset are generated, including intervals, sizes, and placeholder dimensions.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/hydrogen/CHANGELOG.md#2025-04-11_snippet_26\n\nLANGUAGE: js\nCODE:\n```\nsrcSetOptions = {\n  intervals: 15, // The number of sizes to generate\n  startingWidth: 200, // The smalles image size\n  incrementSize: 200, // The increment by to increase for each size, in pixesl\n  placeholderWidth: 100, // The size used for placeholder fallback images\n};\n```\n\n----------------------------------------\n\nTITLE: Running Hydrogen local development server\nDESCRIPTION: Commands to install dependencies and start the local development server for a Hydrogen project. This is typically done after installation to begin working on the project.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/README.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing Custom Cart Method Example in Shopify Hydrogen\nDESCRIPTION: This command sets up a new Shopify Hydrogen project using the custom-cart-method template. It demonstrates how to initialize a project with this specific example implementation.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/examples/custom-cart-method/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create @shopify/hydrogen@latest -- --template custom-cart-method\n```\n\n----------------------------------------\n\nTITLE: Using the New metafieldParser Function\nDESCRIPTION: Example showing how to use the new metafieldParser function to parse metafield values and access the parsed result through the parsedValue property.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/hydrogen-react/CHANGELOG.md#2025-04-11_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nconst parsed = metafieldParser(metafield);\n\nconsole.log(parsed.parsedValue);\n```\n\n----------------------------------------\n\nTITLE: Building Production Assets\nDESCRIPTION: Command to build the application for production deployment.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/examples/express/README.md#2025-04-11_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Using ParsedMetafield Type with Collection List Metafields\nDESCRIPTION: Example demonstrating how to use the ParsedMetafield type with metafieldParser to get proper type inference for list.collection metafields, allowing for type-safe access to collection properties.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/hydrogen-react/CHANGELOG.md#2025-04-11_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nconst parsed = metafieldParser<ParsedMetafield['list.collection']>(\n  listCollectionMetafield,\n);\n\n// type of `parsedValue` is `Array<Collection> | null`\nparsed.parsedValue?.map((collection) => {\n  console.log(collection?.name);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Locale Type Interface\nDESCRIPTION: Type definition for locale configuration using Shopify's CountryCode and LanguageCode enums from the Hydrogen storefront API types.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/rfc/guide-internationalization.md#2025-04-11_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  CountryCode,\n  LanguageCode,\n} from '@shopify/hydrogen/storefront-api-types';\n\nexport type Locale = {\n  language: LanguageCode,\n  country: CountryCode,\n};\n```\n\n----------------------------------------\n\nTITLE: Adding JavaScript Codegen and JSDoc to generated projects\nDESCRIPTION: A changelog entry noting that JavaScript projects now use Codegen and JSDoc to enhance editor autocompletion, improving developer experience in non-TypeScript projects.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/create-hydrogen/CHANGELOG.md#2025-04-11_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n- Generated JavaScript projects now use Codegen and JSDoc to enhance editor autocompletion. ([#1334](https://github.com/Shopify/hydrogen/pull/1334)) by [@frandiox](https://github.com/frandiox)\n```\n\n----------------------------------------\n\nTITLE: Implementing Google Tag Manager Noscript Fallback in HTML\nDESCRIPTION: This snippet demonstrates how to implement a noscript fallback for Google Tag Manager using an iframe. This approach allows for basic analytics tracking even when JavaScript is disabled in the browser.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/rfc/analytics.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<noscript>\n  <iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-123456\" height=\"0\" width=\"0\" style=\"display:none;visibility:hidden\"></iframe>\n</noscript>\n```\n\n----------------------------------------\n\nTITLE: Sample Products GraphQL Query Without Pagination\nDESCRIPTION: A basic GraphQL query for fetching products from the Storefront API without pagination parameters.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/rfc/pagination.md#2025-04-11_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst PRODUCTS_QUERY = `#graphql\n  query (\n    $country: CountryCode\n    $language: LanguageCode\n  ) @inContext(country: $country, language: $language) {\n    products() {\n      nodes {\n        id\n        title\n        publishedAt\n        handle\n        variants(first: 1) {\n          nodes {\n            id\n            image {\n              url\n              altText\n              width\n              height\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Installing Hydrogen GTM Template\nDESCRIPTION: Command to create a new Hydrogen project with the Google Tag Manager template\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/examples/gtm/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create @shopify/hydrogen@latest -- --template gtm\n```\n\n----------------------------------------\n\nTITLE: Migrating CartLinePrice Component Usage\nDESCRIPTION: Example showing migration from deprecated CartLinePrice component to Money component, demonstrating how to handle different price types.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/hydrogen-react/CHANGELOG.md#2025-04-11_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n// before\n<CartLinePrice data={cartLine} priceType=\"regular\" />\n// after\n<Money data={cartLine.cost.totalAmount} />\n```\n\n----------------------------------------\n\nTITLE: Installing Hydrogen React with Yarn\nDESCRIPTION: Command to install the Hydrogen React package using Yarn package manager.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/hydrogen-react/README.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @shopify/hydrogen-react\n```\n\n----------------------------------------\n\nTITLE: Implementing Layout Component in Separate File\nDESCRIPTION: Creates a separate layout.tsx file with the Layout component exported as default. This pattern is needed when using Remix's v3_routeConfig future flag.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/cli/CHANGELOG.md#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// /app/layout.tsx\nexport default function Layout() {\n  const nonce = useNonce();\n  const data = useRouteLoaderData<RootLoader>('root');\n\n  return (\n    <html lang=\"en\">\n    ...\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Root Data Hook Implementation\nDESCRIPTION: Move useRootLoaderData hook to separate file to avoid circular imports and improve HMR in Vite\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/templates/skeleton/CHANGELOG.md#2025-04-11_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\n// app/lib/root-data.ts\nimport { useMatches } from \"@remix-run/react\";\nimport type { SerializeFrom } from \"@shopify/remix-oxygen\";\nimport type { loader } from \"~/root\";\n\n/**\n * Access the result of the root loader from a React component.\n */\nexport const useRootLoaderData = () => {\n  const [root] = useMatches();\n  return root?.data as SerializeFrom<typeof loader>;\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Multipass Dependencies\nDESCRIPTION: Commands to install required dependencies for Multipass implementation including crypto-js and snakecase-keys.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/examples/multipass/README.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# JavaScript\nnpm i @snakecase-keys crypto-js\n\n# TypeScript\nnpm i @snakecase-keys crypto-js\nnpm i --save-dev @types/crypto-js\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL CodeGen with Storefront API Custom Scalars\nDESCRIPTION: Example showing how to use the storefrontApiCustomScalars utility with GraphQL CodeGen to correctly map Storefront API's custom scalar types to their actual TypeScript types.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/hydrogen-react/CHANGELOG.md#2025-04-11_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport {storefrontApiCustomScalars} from '@shopify/hydrogen-react';\n\nconst config: CodegenConfig = {\n  // Use the schema that's bundled with @shopify/hydrogen-react\n  schema: './node_modules/@shopify/hydrogen-react/storefront.schema.json',\n  generates: {\n    './gql/': {\n      preset: 'client',\n      plugins: [],\n      config: {\n        // Use the custom scalar definitions that @shopify/hydrogen-react provides to improve the custom scalar types\n        scalars: storefrontApiCustomScalars,\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Server Context Type Definitions\nDESCRIPTION: TypeScript definitions update for server request handler to include env and waitUntil properties in the load context.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/hydrogen/CHANGELOG.md#2025-04-11_snippet_18\n\nLANGUAGE: diff\nCODE:\n```\ndeclare module '@shopify/remix-oxygen' {\n  export interface AppLoadContext {\n+   env: Env;\n    cart: HydrogenCart;\n    storefront: Storefront;\n    session: HydrogenSession;\n+   waitUntil: ExecutionContext['waitUntil'];\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Facebook click ID from URL params\nDESCRIPTION: A changelog entry noting the addition of a filter for the Facebook click ID (fbclid) parameter from the URL on the product detail page.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/create-hydrogen/CHANGELOG.md#2025-04-11_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n- Filter out `fbclid` from the URL params on the product detail page ([#1353](https://github.com/Shopify/hydrogen/pull/1353)) by [@blittle](https://github.com/blittle)\n```\n\n----------------------------------------\n\nTITLE: Installing Partytown dependency\nDESCRIPTION: Command to install the Partytown package which helps relocate resource-intensive scripts off the main thread into a web worker.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/examples/partytown/README.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @builder.io/partytown\n```\n\n----------------------------------------\n\nTITLE: Image Component Data Structure Example in Hydrogen\nDESCRIPTION: Example of the expected data structure for the Image component's data prop, showing the URL, alt text, width, and height properties.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/hydrogen/CHANGELOG.md#2025-04-11_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"url\": \"https://cdn.shopify.com/s/files/1/0551/4566/0472/products/Main.jpg\",\n  \"altText\": \"alt text\",\n  \"width\": \"4000\",\n  \"height\": \"4000\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Hydrogen Project with Metaobjects Template\nDESCRIPTION: Command to create a new Hydrogen project using the metaobjects template. This sets up the foundation for using metaobjects as a CMS.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/examples/metaobjects/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create @shopify/hydrogen@latest -- --template metaobjects\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query with TypeScript\nDESCRIPTION: Example of writing a GraphQL query in TypeScript using the #graphql comment tag and unique query naming.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/cli/CHANGELOG.md#2025-04-11_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst UNIQUE_NAME_SHOP_QUERY = `#graphql\n  query unique_name_shop { shop { id } }\n`;\n```\n\n----------------------------------------\n\nTITLE: Fixing Shopify login during initialization flow\nDESCRIPTION: A changelog entry noting a fix for the Shopify login process during the initialization flow, which previously would exit unexpectedly when awaiting for a keypress.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/create-hydrogen/CHANGELOG.md#2025-04-11_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n- Fix Shopify login during the init flow where the process would just exit when awaiting for a keypress. ([#1481](https://github.com/Shopify/hydrogen/pull/1481)) by [@frandiox](https://github.com/frandiox)\n```\n\n----------------------------------------\n\nTITLE: Dependency Version Update in package.json\nDESCRIPTION: Updates @shopify/cli dependency version to avoid React version mismatches\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/templates/skeleton/CHANGELOG.md#2025-04-11_snippet_35\n\nLANGUAGE: diff\nCODE:\n```\n\"dependencies\": {\n  ...\n-   \"@shopify/cli\": \"3.58.0\",\n+   \"@shopify/cli\": \"3.59.2\",\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Image Component Data Structure Example\nDESCRIPTION: Shows the expected data structure for the Image component.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/hydrogen-react/CHANGELOG.md#2025-04-11_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"url\": \"https://cdn.shopify.com/s/files/1/0551/4566/0472/products/Main.jpg\",\n  \"altText\": \"alt text\",\n  \"width\": \"4000\",\n  \"height\": \"4000\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Hydrogen Subscriptions Template\nDESCRIPTION: Command to create a new Hydrogen project using the subscriptions template\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/examples/subscriptions/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create @shopify/hydrogen@latest -- --template subscriptions\n```\n\n----------------------------------------\n\nTITLE: Adding nonce to RemixServer in entry.server.tsx\nDESCRIPTION: Modification to add the nonce parameter to the RemixServer component in entry.server.tsx file. This is required for the v3_singleFetch implementation.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/templates/skeleton/CHANGELOG.md#2025-04-11_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\nconst body = await renderToReadableStream(\n  <NonceProvider>\n    <RemixServer\n      context={remixContext}\n      url={request.url}\n+     nonce={nonce}\n    />\n  </NonceProvider>,\n```\n\n----------------------------------------\n\nTITLE: Loader Parameters Type Definition for Custom Image Loaders in Hydrogen\nDESCRIPTION: TypeScript definition for the parameters that are passed to the custom loader function, including source URL, width, height, and crop settings.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/hydrogen/CHANGELOG.md#2025-04-11_snippet_25\n\nLANGUAGE: ts\nCODE:\n```\ntype LoaderParams = {\n  /** The base URL of the image */\n  src?: ImageType['url'];\n  /** The URL param that controls width */\n  width?: number;\n  /** The URL param that controls height */\n  height?: number;\n  /** The URL param that controls the cropping region */\n  crop?: Crop;\n};\n```\n\n----------------------------------------\n\nTITLE: Fixing undefined menu error in Hydrogen\nDESCRIPTION: A changelog entry noting a bugfix for an undefined menu error in the Hydrogen framework.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/create-hydrogen/CHANGELOG.md#2025-04-11_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n- 🐛 fix undefined menu error ([#1533](https://github.com/Shopify/hydrogen/pull/1533)) by [@michenly](https://github.com/michenly)\n```\n\n----------------------------------------\n\nTITLE: Vite Configuration Update\nDESCRIPTION: Modifies Vite config to stop inlining favicon and avoid Content-Security-Policy issues\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/templates/skeleton/CHANGELOG.md#2025-04-11_snippet_36\n\nLANGUAGE: diff\nCODE:\n```\nexport default defineConfig({\n  plugins: [\n    ...\n  ],\n+ build: {\n+   assetsInlineLimit: 0,\n+ },\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Remix Dependencies in package.json\nDESCRIPTION: Updates Remix and associated packages from version 2.6.0 to 2.8.0 in both dependencies and devDependencies sections.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/templates/skeleton/CHANGELOG.md#2025-04-11_snippet_40\n\nLANGUAGE: diff\nCODE:\n```\n\"dependencies\": {\n-  \"@remix-run/react\": \"^2.6.0\",\n-  \"@remix-run/server-runtime\": \"^2.6.0\",\n+  \"@remix-run/react\": \"^2.8.0\",\n+  \"@remix-run/server-runtime\": \"^2.8.0\",\n    //...\n},\n\"devDependencies\": {\n-   \"@remix-run/dev\": \"^2.6.0\",\n-   \"@remix-run/eslint-config\": \"^2.6.0\",\n+  \"@remix-run/dev\": \"^2.8.0\",\n+  \"@remix-run/eslint-config\": \"^2.8.0\",\n    //...\n}\n```\n\n----------------------------------------\n\nTITLE: Building Hydrogen Project for Production\nDESCRIPTION: Command to build the Hydrogen project for production deployment.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/templates/skeleton/README.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Creating a New Hydrogen App with npm\nDESCRIPTION: Command to initialize a new Hydrogen project using npm. This creates a starter template for building Shopify headless commerce applications.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/hydrogen/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create @shopify/hydrogen@latest\n```\n\n----------------------------------------\n\nTITLE: Updating Scalars Type Usage in TypeScript\nDESCRIPTION: Shows the breaking change in how Scalars types from the Storefront API should be used, requiring .input or .output specification.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/hydrogen/CHANGELOG.md#2025-04-11_snippet_16\n\nLANGUAGE: diff\nCODE:\n```\nimport type {Scalars} from '@shopify/hydrogen/storefront-api-types';\n\ntype Props = {\n-  id: Scalars['ID']; // This was a string\n+  id: Scalars['ID']['input']; // Need to access 'input' or 'output' to get the string\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Shopify CLI Dependency in package.json\nDESCRIPTION: Updates the @shopify/cli dependency to the latest version in package.json.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/templates/skeleton/CHANGELOG.md#2025-04-11_snippet_46\n\nLANGUAGE: diff\nCODE:\n```\n-   \"@shopify/cli\": \"3.51.0\",\n+   \"@shopify/cli\": \"3.52.0\",\n```\n\n----------------------------------------\n\nTITLE: Starting Hydrogen Development Server\nDESCRIPTION: Command to start the local development server for Hydrogen project.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/templates/skeleton/README.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Adding Partytown script to package.json\nDESCRIPTION: Diff showing how to modify package.json to add a script for copying Partytown library files to the public directory.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/examples/partytown/README.md#2025-04-11_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n  \"scripts\": {\n+    \"partytown\": \"partytown copylib public/~partytown\"\n  },\n```\n\n----------------------------------------\n\nTITLE: Disabling Powered-By Header in createRequestHandler\nDESCRIPTION: Code example showing how to disable the default 'Powered-By: Shopify-Hydrogen' header when configuring the request handler, introduced in version 1.0.6.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/remix-oxygen/CHANGELOG.md#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {createRequestHandler} from '@shopify/remix-oxygen';\n\nexport default {\n  async fetch(request) {\n    // ...\n    const handleRequest = createRequestHandler({\n      // ... other properties included\n      poweredByHeader: false,\n    });\n    // ...\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Header Component to Fix Mobile Menu Links\nDESCRIPTION: This diff shows changes to the Header component to fix an issue where menu links in the side panel were not working on mobile devices. It replaces a custom closeAside function with the close function from useAside hook.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/create-hydrogen/CHANGELOG.md#2025-04-11_snippet_1\n\nLANGUAGE: Diff\nCODE:\n```\nexport function HeaderMenu({\n  menu,\n  primaryDomainUrl,\n  viewport,\n  publicStoreDomain,\n}: {\n  menu: HeaderProps['header']['menu'];\n  primaryDomainUrl: HeaderProps['header']['shop']['primaryDomain']['url'];\n  viewport: Viewport;\n  publicStoreDomain: HeaderProps['publicStoreDomain'];\n}) {\n  const className = `header-menu-${viewport}`;\n+  const {close} = useAside();\n\n-  function closeAside(event: React.MouseEvent<HTMLAnchorElement>) {\n-    if (viewport === 'mobile') {\n-      event.preventDefault();\n-      window.location.href = event.currentTarget.href;\n-    }\n-  }\n\n  return (\n    <nav className={className} role=\"navigation\">\n      {viewport === 'mobile' && (\n        <NavLink\n          end\n-          onClick={closeAside}\n+          onClick={close}\n          prefetch=\"intent\"\n          style={activeLinkStyle}\n          to=\"/\"\n        >\n          Home\n        </NavLink>\n      )}\n      {(menu || FALLBACK_HEADER_MENU).items.map((item) => {\n        if (!item.url) return null;\n\n        // if the url is internal, we strip the domain\n        const url =\n          item.url.includes('myshopify.com') ||\n          item.url.includes(publicStoreDomain) ||\n          item.url.includes(primaryDomainUrl)\n            ? new URL(item.url).pathname\n            : item.url;\n        return (\n          <NavLink\n            className=\"header-menu-item\"\n            end\n            key={item.id}\n-            onClick={closeAside}\n+            onClick={close}\n            prefetch=\"intent\"\n            style={activeLinkStyle}\n            to={url}\n          >\n            {item.title}\n          </NavLink>\n        );\n      })}\n    </nav>\n  );\n```\n\n----------------------------------------\n\nTITLE: Updating Session Management Implementation\nDESCRIPTION: Changes to implement isPending in session management and update response headers accordingly\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/templates/skeleton/CHANGELOG.md#2025-04-11_snippet_33\n\nLANGUAGE: diff\nCODE:\n```\n// in app/lib/session.ts\nexport class AppSession implements HydrogenSession {\n+  public isPending = false;\n\n  get unset() {\n+    this.isPending = true;\n    return this.#session.unset;\n  }\n\n  get set() {\n+    this.isPending = true;\n    return this.#session.set;\n  }\n\n  commit() {\n+    this.isPending = false;\n    return this.#sessionStorage.commitSession(this.#session);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Selling Plan Group GraphQL Fragment in Shopify Hydrogen\nDESCRIPTION: Creates a GraphQL fragment for selling plan groups, which includes the name, options, and a connection to the selling plans within the group. It also includes the previously defined selling plan fragment.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/cookbook/recipes/subscriptions/README.md#2025-04-11_snippet_10\n\nLANGUAGE: GraphQL\nCODE:\n```\nconst SELLING_PLAN_GROUP_FRAGMENT = `#graphql\n  fragment SellingPlanGroup on SellingPlanGroup {\n    name\n    options {\n      name\n      values\n    }\n    sellingPlans(first:10) {\n      nodes {\n        ...SellingPlan\n      }\n    }\n  }\n  ${SELLING_PLAN_FRAGMENT}\n` as const;\n```\n\n----------------------------------------\n\nTITLE: Moving Layout Component Back to root.tsx\nDESCRIPTION: Example of moving the Layout component back into root.tsx to avoid styled errors, as recommended in version 2025.1.6.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/templates/skeleton/CHANGELOG.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// /app/root.tsx\nexport function Layout({children}: {children?: React.ReactNode}) {\n  const nonce = useNonce();\n  const data = useRouteLoaderData<RootLoader>('root');\n\n  return (\n    <html lang=\"en\">\n    ...\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Running Documentation Preview Server\nDESCRIPTION: Command to start the documentation preview server from within Hydrogen package directories. Requires the presence of a generated_docs_data.json file in the docs/generated/ directory.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/docs/preview/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev --prefix ../../docs/preview\n```\n\n----------------------------------------\n\nTITLE: Running Shopify Hydrogen CLI Commands\nDESCRIPTION: Instructions for testing CLI changes locally, including building the package, running commands, and modifying generated files.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/cli/README.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- Run `npm run build` in this directory (`packages/cli` from the root of the repo).\n- Run `npx shopify hydrogen` anywhere else in the monorepo, for example `npx shopify hydrogen init`.\n- If you want to test a command inside of a template, run the command from within that template or use the `--path` flag to point to another template or any Hydrogen app.\n- If you want to make changes to a file that is generated when running `npx shopify hydrogen generate`, make changes to that file from inside of the `templates/skeleton` directory.\n```\n\n----------------------------------------\n\nTITLE: Generated HTML Output for Image Component\nDESCRIPTION: Shows the resulting HTML markup generated by the Image component.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/hydrogen-react/CHANGELOG.md#2025-04-11_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<img\n  srcset=\"https://cdn.shopify.com/s/files/1/0551/4566/0472/products/Main.jpg?width=300&height=300&crop=center 300w, … *13 additional sizes* … https://cdn.shopify.com/s/files/1/0551/4566/0472/products/Main.jpg?width=3000&height=3000&crop=center 3000w\"\n  src=\"https://cdn.shopify.com/s/files/1/0551/4566/0472/products/Main.jpg?width=100&height=100&crop=center\"\n  alt=\"alt text\"\n  sizes=\"100vw\"\n  loading=\"lazy\"\n  decoding=\"async\"\n  width=\"100px\"\n  height=\"100px\"\n  style=\"aspect-ratio: 4000 / 4000;\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating a new Hydrogen project with Partytown template\nDESCRIPTION: Command to create a new Hydrogen project using the Partytown template, which includes all the necessary configurations for using Partytown with Google Tag Manager.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/examples/partytown/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create @shopify/hydrogen@latest -- --template partytown\n```\n\n----------------------------------------\n\nTITLE: Fixing routes and markets flags in project creation\nDESCRIPTION: A changelog entry noting a fix for the --routes and --markets flags when creating new Hydrogen projects, ensuring they work as expected.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/create-hydrogen/CHANGELOG.md#2025-04-11_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n- Fix `--routes` and `--markets` flag when creating new projects. ([#1342](https://github.com/Shopify/hydrogen/pull/1342)) by [@frandiox](https://github.com/frandiox)\n```\n\n----------------------------------------\n\nTITLE: Apply Command Example Usage\nDESCRIPTION: Example showing how to use the apply command with npm run.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/cookbook/README.md#2025-04-11_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm run cookbook -- apply --recipe my-recipe\n```\n\n----------------------------------------\n\nTITLE: Moving Layout Component into root.tsx\nDESCRIPTION: Example of moving the Layout component into the root.tsx file to avoid issues with styled errors. This shows how to define the Layout function within the root file.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/cli/CHANGELOG.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// /app/root.tsx\nexport function Layout({children}: {children?: React.ReactNode}) {\n  const nonce = useNonce();\n  const data = useRouteLoaderData<RootLoader>('root');\n\n  return (\n    <html lang=\"en\">\n    ...\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Hydrogen Template with NPM\nDESCRIPTION: Command to create a new Hydrogen project using npm. Requires Node.js version 18.0.0 or higher.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/templates/skeleton/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create @shopify/hydrogen@latest\n```\n\n----------------------------------------\n\nTITLE: Starting Production Server\nDESCRIPTION: Command to run the application in production mode after building.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/examples/express/README.md#2025-04-11_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Proxy Authentication in Hydrogen\nDESCRIPTION: Sets up HTTP proxy authentication for Hydrogen development server by setting environment variables. The proxy can include user authentication in the standard URL format.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/cli/CHANGELOG.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nSHOPIFY_HTTP_PROXY=http://user:pass@yourproxy.com:PORT\n```\n\n----------------------------------------\n\nTITLE: Adding quickstart flag to init command in Hydrogen CLI\nDESCRIPTION: A changelog entry noting the addition of a --quickstart flag option to the init/create command in Hydrogen CLI. This allows for a faster project initialization experience.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/create-hydrogen/CHANGELOG.md#2025-04-11_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n- Add `--quickstart` flag option to init/create command. ([#1822](https://github.com/Shopify/hydrogen/pull/1822)) by [@gfscott](https://github.com/gfscott)\n```\n\n----------------------------------------\n\nTITLE: Validate Command Example Usage\nDESCRIPTION: Example showing how to use the validate command with npm run.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/cookbook/README.md#2025-04-11_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nnpm run cookbook -- validate --recipe my-recipe\n```\n\n----------------------------------------\n\nTITLE: Defining Locale Type in JSX\nDESCRIPTION: This snippet defines the expected shape of the i18n object, specifying the types for language and country codes.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/rfc/i18n.md#2025-04-11_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  CountryCode,\n  LanguageCode,\n} from '@shopify/hydrogen/storefront-api-types';\n\nexport type Locale = {\n  language: LanguageCode,\n  country: CountryCode,\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies in Package.json\nDESCRIPTION: Modification to package.json to remove @shopify/cli-hydrogen from dependencies\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/templates/skeleton/CHANGELOG.md#2025-04-11_snippet_34\n\nLANGUAGE: diff\nCODE:\n```\n    \"@shopify/cli\": \"3.64.0\",\n-   \"@shopify/cli-hydrogen\": \"^8.1.1\",\n    \"@shopify/hydrogen\": \"2024.7.0\",\n```\n\n----------------------------------------\n\nTITLE: Installing Hydrogen Classic Remix Template\nDESCRIPTION: Command to create a new Hydrogen project using the classic-remix template with npm.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/examples/classic-remix/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create @shopify/hydrogen@latest -- --template classic-remix\n```\n\n----------------------------------------\n\nTITLE: Updating TypeScript Version in Package.json\nDESCRIPTION: Shows how to update the TypeScript version dependency from v4 to v5 to maintain compatibility with Hydrogen.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/hydrogen-react/CHANGELOG.md#2025-04-11_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n\"devDependencies\": {\n    ...\n-   \"typescript\": \"^4.9.5\",\n+   \"typescript\": \"^5.2.2\",\n    },\n```\n\n----------------------------------------\n\nTITLE: Regenerate Command Syntax\nDESCRIPTION: Syntax definition for the regenerate command which refreshes recipe implementations.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/cookbook/README.md#2025-04-11_snippet_9\n\nLANGUAGE: plain\nCODE:\n```\ncookbook.ts regenerate\n\nRegenerate a recipe\n\nOptions:\n  --version          Show version number                               [boolean]\n  --help             Show help                                         [boolean]\n  --recipe           The name of the recipe to regenerate. If not provided, all\n                     recipes will be regenerated.                       [string]\n  --onlyFiles        Only generate the files for the recipe, not the recipe.yaml\n                     file.                                             [boolean]\n  --format           The format to render the recipe in\n                          [string] [required] [choices: \"github\", \"shopify.dev\"]\n  --referenceBranch  The reference branch to use for the recipe\n                                               [string] [default: \"origin/main\"]\n```\n\n----------------------------------------\n\nTITLE: Copying Partytown library files\nDESCRIPTION: Command to run the Partytown script which copies the library files to the public directory.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/examples/partytown/README.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run partytown\n```\n\n----------------------------------------\n\nTITLE: Adding environment variable type definition in remix.d.ts\nDESCRIPTION: Diff showing how to update the TypeScript type definition for environment variables to include the GTM container ID.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/examples/partytown/README.md#2025-04-11_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\n// ...other code\n\ndeclare global {\n  /**\n   * A global `process` object is only available during build to access NODE_ENV.\n   */\n  const process: {env: {NODE_ENV: 'production' | 'development'}};\n\n  /**\n   * Declare expected Env parameter in fetch handler.\n   */\n  interface Env extends HydrogenEnv {\n+   GTM_CONTAINER_ID: `GTM-${string}`;\n  }\n}\n\n// ...other code\n```\n\n----------------------------------------\n\nTITLE: Updating Price Display Component Logic\nDESCRIPTION: Updates the price display logic to use price from available variants rather than accessing nodes[0] directly.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/templates/skeleton/CHANGELOG.md#2025-04-11_snippet_29\n\nLANGUAGE: diff\nCODE:\n```\n-                      <Money data={product.variants.nodes[0].price} />\n+                      {price &&\n+                        <Money data={price} />\n+                      }\n```\n\n----------------------------------------\n\nTITLE: Creating Product Route File in Bash\nDESCRIPTION: Command to create a new route file for products if one doesn't already exist.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/rfc/pagination.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntouch routes/products.tsx\n```\n\n----------------------------------------\n\nTITLE: Integrating Dynamic Locale in Server Configuration\nDESCRIPTION: Shows how to use the locale detection utility in the server configuration to dynamically set i18n settings based on the request.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/rfc/guide-internationalization.md#2025-04-11_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nreturn await requestHandler(\n  request,\n  {\n    env,\n    context,\n    storefront: {\n      ...\n      storefrontApiVersion: '2022-10',\n      i18n: getLocaleFromRequest(request),\n    },\n  },\n  {\n    session,\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Story File Structure\nDESCRIPTION: Example demonstrating the standard structure for component stories using the .stories.tsx extension\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/hydrogen-react/CONTRIBUTING.md#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// ComponentName.stories.tsx\nexport const Default = () => <ComponentName prop=\"value\" />;\nexport const Variant = () => <ComponentName prop=\"different value\" />;\n```\n\n----------------------------------------\n\nTITLE: Regenerate Command Example Usage\nDESCRIPTION: Example showing how to use the regenerate command with npm run.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/cookbook/README.md#2025-04-11_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nnpm run cookbook -- regenerate --recipe my-recipe --format github\n```\n\n----------------------------------------\n\nTITLE: Enabling v3_lazyRouteDiscovery future flag in Remix configuration\nDESCRIPTION: Update to the Vite configuration to enable the v3_lazyRouteDiscovery future flag in Remix. This change is part of preparing for Remix v3 compatibility with improved route discovery performance.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/templates/skeleton/CHANGELOG.md#2025-04-11_snippet_16\n\nLANGUAGE: diff\nCODE:\n```\nexport default defineConfig({\n  plugins: [\n    hydrogen(),\n    oxygen(),\n    remix({\n      presets: [hydrogen.preset()],\n      future: {\n        v3_fetcherPersist: true,\n        v3_relativeSplatPath: true,\n        v3_throwAbortReason: true,\n+        v3_lazyRouteDiscovery: true,\n      },\n    }),\n    tsconfigPaths(),\n  ],\n```\n\n----------------------------------------\n\nTITLE: Adding tmate Session for GitHub Actions Debugging\nDESCRIPTION: YAML configuration step to add tmate debugging capabilities to GitHub Actions workflows. This allows developers to pause CI execution and SSH into the container to investigate test failures that only occur in CI environments.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/CONTRIBUTING.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Setup tmate session\n  uses: mxschmitt/action-tmate@v3\n```\n\n----------------------------------------\n\nTITLE: CLI Command Overview for Hydrogen Cookbook\nDESCRIPTION: Main command list showing available operations for the cookbook.ts script including generate, render, apply, validate, regenerate, and update commands.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/cookbook/README.md#2025-04-11_snippet_0\n\nLANGUAGE: plain\nCODE:\n```\ncookbook.ts <command>\n\nCommands:\n  cookbook.ts generate    Generate a recipe from the skeleton's changes\n  cookbook.ts render      Render a recipe to a given format\n  cookbook.ts apply       Apply a recipe to the current project\n  cookbook.ts validate    Validate a recipe\n  cookbook.ts regenerate  Regenerate a recipe\n  cookbook.ts update      Update a recipe\n\nOptions:\n  --version  Show version number                                       [boolean]\n  --help     Show help                                                 [boolean]\n```\n\n----------------------------------------\n\nTITLE: Test File Naming Convention\nDESCRIPTION: Example showing the correct file naming pattern for component tests, using ComponentName.test.tsx format\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/hydrogen-react/CONTRIBUTING.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// ComponentName.test.tsx\ndescribe('<ComponentName />', () => {\n  it('should render correctly', () => {\n    // test implementation\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Fixing TypeScript Configuration\nDESCRIPTION: Update to the tsconfig.json to fix TypeScript compilation issues by replacing @remix-run/node with @remix-run/server-runtime in the types array.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/templates/skeleton/CHANGELOG.md#2025-04-11_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n    \"types\": [\n      \"@shopify/oxygen-workers-types\",\n-      \"@remix-run/node\",\n+      \"@remix-run/server-runtime\",\n      \"vite/client\"\n    ],\n```\n\n----------------------------------------\n\nTITLE: Comment Style Guidelines for Hydrogen Templates\nDESCRIPTION: Shows recommended comment styles for Hydrogen templates, using // for single-line comments and /** */ for multi-line comments, with examples of header sections for extended context.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/templates/TEMPLATE_GUIDELINES.md#2025-04-11_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n// this is fine for single lines\nfunction test() {}\n\n/**\n * If you're providing substantial context, links, example code and other stuff,\n * then you should switch to something that really visually differentiates.\n */\nfunction thing() {}\n\n/**\n * myStuff\n * -----------------\n * Renders a login page for customer accounts.\n * And does other really cool stuff\n */\nfunction myStuff() {}\n```\n\n----------------------------------------\n\nTITLE: Update Command Syntax\nDESCRIPTION: Syntax definition for the update command which updates recipes to match main branch.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/cookbook/README.md#2025-04-11_snippet_11\n\nLANGUAGE: plain\nCODE:\n```\ncookbook.ts update\n\nUpdate a recipe\n\nOptions:\n  --version          Show version number                               [boolean]\n  --help             Show help                                         [boolean]\n  --recipe           The name of the recipe to update        [string] [required]\n  --referenceBranch  The branch to update the recipe from\n                                               [string] [default: \"origin/main\"]\n```\n\n----------------------------------------\n\nTITLE: Import Hydrogen Codegen Patch in JavaScript Codegen Configuration\nDESCRIPTION: Shows how to import and use the hydrogen-codegen patch in a codegen.ts configuration file. This allows proper integration with GraphQL code generation in a Hydrogen project.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/hydrogen-codegen/CHANGELOG.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport '@shopify/hydrogen-codegen/patch';\nimport {preset, schema, pluckConfig} from '@shopify/hydrogen-codegen';\n\nexport default {\n  overwrite: true,\n  pluckConfig,\n  generates: {\n    'storefrontapi.generated.d.ts': {\n      preset,\n      schema,\n      documents: ['...'],\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Updating SearchResultsPredictive Component\nDESCRIPTION: Updates SearchResultsPredictive.tsx to improve price and image handling from product variants.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/templates/skeleton/CHANGELOG.md#2025-04-11_snippet_30\n\nLANGUAGE: diff\nCODE:\n```\nfunction SearchResultsPredictiveProducts({\n  term,\n  products,\n  closeSearch,\n}: PartialPredictiveSearchResult<'products'>) {\n  if (!products.length) return null;\n\n  return (\n    <div className=\"predictive-search-result\" key=\"products\">\n      <h5>Products</h5>\n      <ul>\n        {products.map((product) => {\n          const productUrl = urlWithTrackingParams({\n            baseUrl: `/products/${product.handle}`,\n            trackingParams: product.trackingParameters,\n            term: term.current,\n          });\n\n+          const price = product?.selectedOrFirstAvailableVariant?.price;\n-          const image = product?.variants?.nodes?.[0].image;\n+          const image = product?.selectedOrFirstAvailableVariant?.image;\n          return (\n            <li className=\"predictive-search-result-item\" key={product.id}>\n              <Link to={productUrl} onClick={closeSearch}>\n                {image && (\n                  <Image\n                    alt={image.altText ?? ''}\n                    src={image.url}\n                    width={50}\n                    height={50}\n                  />\n                )}\n                <div>\n                  <p>{product.title}</p>\n                  <small>\n-                    {product?.variants?.nodes?.[0].price && (\n+                    {price && (\n-                      <Money data={product.variants.nodes[0].price} />\n+                      <Money data={price} />\n                    )}\n                  </small>\n                </div>\n              </Link>\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n```\n\n----------------------------------------\n\nTITLE: Session Types Declaration Update\nDESCRIPTION: Adds HydrogenSessionData interface to fix types returned by the session object\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/templates/skeleton/CHANGELOG.md#2025-04-11_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {\n  // ...\n  HydrogenCart,\n+ HydrogenSessionData,\n} from '@shopify/hydrogen';\n\n// ...\n\ndeclare module '@shopify/remix-oxygen' {\n  // ...\n\n+ interface SessionData extends HydrogenSessionData {}\n}\n```\n\n----------------------------------------\n\nTITLE: Adding collection image rendering check\nDESCRIPTION: A changelog entry noting an addition of a check to render collection images when they are available in the data.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/create-hydrogen/CHANGELOG.md#2025-04-11_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n- Add check to render collection images when available ([#1373](https://github.com/Shopify/hydrogen/pull/1373)) by [@juanpprieto](https://github.com/juanpprieto)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Markdown Syntax for README Structure\nDESCRIPTION: This snippet shows the recommended structure for a README file in a Hydrogen example project. It includes sections for introduction, requirements, key files, and instructions.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/docs/examples/README.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Introduction\n\n- Provide a few sentences that explain what the example illustrates.\n- Keep it short, descriptive, and factual.\n\n### Requirements\n\n- Provide a point-form list of anything you'll need before you start.\n  - Examples: account logins, third-party API tokens, feature access, beta flags, etc.\n- If the example integrates a third-party service, link to the relevant docs.\n  - The goal isn't to document that other platform; select links that focus on completing the task at hand.\n\n### Key files\n\nA table listing the relevant files makes it easier to quickly scan the example and understand its complexity.\n\n- Provide a table with the list of files the user will need to create or edit.\n  - Start with new files that you need to create, then files that require editing.\n  - Prefix newly created files with the 🆕 emoji.\n  - Link the file name to the actual file in the example codebase.\n  - Add a brief description of the file's purpose.\n- If the example requires environment variables, document them in a `.env.example` file.\n\n### Instructions\n\n- In general, use the file list above as the order of operations.\n  1. Handle creating new files first.\n  1. Then describe updates and edits to existing Hydrogen default files.\n- Ideally, structure the instructions so the user touches each file once, instead of returning to files multiple times across different steps. This way, the list of files serves as both a table of contents and a TODO list for the developer.\n```\n\n----------------------------------------\n\nTITLE: Adding magic cart and discount routes to skeleton template\nDESCRIPTION: A changelog entry noting the addition of magic cart and discount routes to the skeleton template, providing more functionality out of the box.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/create-hydrogen/CHANGELOG.md#2025-04-11_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n- Add magic cart and discount routes to skeleton template ([#1309](https://github.com/Shopify/hydrogen/pull/1309)) by [@juanpprieto](https://github.com/juanpprieto)\n```\n\n----------------------------------------\n\nTITLE: Fixing starter template blog route GraphQL query\nDESCRIPTION: A changelog entry noting a fix for the starter template blog route, adding a required startCursor parameter to the GraphQL query.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/create-hydrogen/CHANGELOG.md#2025-04-11_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n- Fix the starter template blog route to include a required `startCursor` in the GraphQL query. ([#1441](https://github.com/Shopify/hydrogen/pull/1441)) by [@blittle](https://github.com/blittle)\n```\n\n----------------------------------------\n\nTITLE: Updating Shopify CLI Dependency\nDESCRIPTION: Updates the @shopify/cli dependency from version 3.52.0 to 3.56.3.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/templates/skeleton/CHANGELOG.md#2025-04-11_snippet_41\n\nLANGUAGE: diff\nCODE:\n```\n- \"@shopify/cli\": \"3.52.0\",\n+ \"@shopify/cli\": \"3.56.3\",\n```\n\n----------------------------------------\n\nTITLE: HydrogenPresetConfig Type Definition\nDESCRIPTION: Defines the configuration options available for the Hydrogen preset in GraphQL codegen. It allows customization of import patterns, typenames, and interface extensions.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/hydrogen-codegen/CHANGELOG.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype HydrogenPresetConfig = {\n  namespacedImportName?: string;\n  importTypesFrom?: string;\n  importTypes?: boolean;\n  skipTypenameInOperations?: boolean;\n  interfaceExtension?: (options) => string;\n};\n```\n\n----------------------------------------\n\nTITLE: Apply Command Syntax for Hydrogen Cookbook\nDESCRIPTION: Syntax definition for the apply command which applies a recipe to the current project.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/cookbook/README.md#2025-04-11_snippet_1\n\nLANGUAGE: plain\nCODE:\n```\ncookbook.ts apply\n\nApply a recipe to the current project\n\nOptions:\n  --version  Show version number                                       [boolean]\n  --help     Show help                                                 [boolean]\n  --recipe   The name of the recipe to apply                 [string] [required]\n```\n\n----------------------------------------\n\nTITLE: Generate Command Syntax\nDESCRIPTION: Syntax definition for the generate command which creates a recipe from current skeleton changes.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/cookbook/README.md#2025-04-11_snippet_3\n\nLANGUAGE: plain\nCODE:\n```\ncookbook.ts generate\n\nGenerate a recipe from the skeleton's changes\n\nOptions:\n  --version          Show version number                   [boolean]\n  --help             Show help                             [boolean]\n  --recipe           The name of the recipe to generate\n                                                 [string] [required]\n  --onlyFiles        Only generate the files for the recipe, not the\n                     recipe.yaml file.                     [boolean]\n  --referenceBranch  The reference branch to use for the recipe\n                                   [string] [default: \"origin/main\"]\n```\n\n----------------------------------------\n\nTITLE: Generate Command Example Usage\nDESCRIPTION: Example showing how to use the generate command with npm run.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/cookbook/README.md#2025-04-11_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpm run cookbook -- generate --recipe my-recipe\n```\n\n----------------------------------------\n\nTITLE: Validate Command Syntax\nDESCRIPTION: Syntax definition for the validate command which verifies recipe validity.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/cookbook/README.md#2025-04-11_snippet_5\n\nLANGUAGE: plain\nCODE:\n```\ncookbook.ts validate\n\nValidate a recipe\n\nOptions:\n  --version  Show version number                           [boolean]\n  --help     Show help                                     [boolean]\n  --recipe   The name of the recipe to validate. If not provided,\n             all recipes will be validated.                 [string]\n```\n\n----------------------------------------\n\nTITLE: Render Command Syntax\nDESCRIPTION: Syntax definition for the render command which converts recipes to markdown format.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/cookbook/README.md#2025-04-11_snippet_7\n\nLANGUAGE: plain\nCODE:\n```\ncookbook.ts render\n\nRender a recipe to a given format\n\nOptions:\n  --version  Show version number                                       [boolean]\n  --help     Show help                                                 [boolean]\n  --recipe   The name of the recipe to render                [string] [required]\n  --format   The format to render the recipe in\n                        [string] [required] [choices: \"github\", \"shopify.dev\"]\n```\n\n----------------------------------------\n\nTITLE: Adding Hydration Check for Google Web Cache\nDESCRIPTION: This diff adds a hydration check to prevent infinite redirects when viewing the cached version of a Hydrogen site on Google. It wraps the hydrateRoot call in a condition that checks if the current URL is not from Google's web cache.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/create-hydrogen/CHANGELOG.md#2025-04-11_snippet_2\n\nLANGUAGE: Diff\nCODE:\n```\n+ if (!window.location.origin.includes(\"webcache.googleusercontent.com\")) {\n     startTransition(() => {\n       hydrateRoot(\n         document,\n         <StrictMode>\n           <RemixBrowser />\n         </StrictMode>\n       );\n     });\n+ }\n```\n\n----------------------------------------\n\nTITLE: Using Auto-Injected Locale Variables in GraphQL Query in JSX\nDESCRIPTION: This example shows how to use auto-injected country and language variables in a GraphQL query without explicitly passing them in the variables object.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/rfc/i18n.md#2025-04-11_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nconst {shop, hero} = await storefront.query<{\n  hero: CollectionHero;\n  shop: HomeSeoData;\n}>(HOMEPAGE_SEO_QUERY, {\n  variables: {\n    handle: 'freestyle',\n  },\n});\n\nconst HOMEPAGE_SEO_QUERY = `#graphql\n  ${COLLECTION_CONTENT_FRAGMENT}\n  query collectionContent(\n    $handle: String,\n    $country: CountryCode,\n    $language: LanguageCode\n  )\n  @inContext(country: $country, language: $language) {\n    hero: collection(handle: $handle) {\n      ...CollectionContent\n    }\n    shop {\n      name\n      description\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Render Command Example Usage\nDESCRIPTION: Example showing how to use the render command with npm run.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/cookbook/README.md#2025-04-11_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nnpm run cookbook -- render --recipe my-recipe --format github\n```\n\n----------------------------------------\n\nTITLE: Enabling Remix future flags in Hydrogen\nDESCRIPTION: A changelog entry noting the update of example and template Remix versions to ^2.5.1 and enabling two Remix future flags: v3_fetcherPersist and v3_relativeSplatpath.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/create-hydrogen/CHANGELOG.md#2025-04-11_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n- - Update example and template Remix versions to `^2.5.1` ([#1639](https://github.com/Shopify/hydrogen/pull/1639)) by [@wizardlyhel](https://github.com/wizardlyhel)\n\n  - Enable Remix future flags:\n    - [`v3_fetcherPersist`](https://remix.run/docs/en/main/hooks/use-fetchers#additional-resources)\n    - [`v3_relativeSplatpath`](https://remix.run/docs/en/main/hooks/use-resolved-path#splat-paths)\n```\n\n----------------------------------------\n\nTITLE: Schema Command Syntax\nDESCRIPTION: Syntax definition for the schema command which generates JSON schema from Zod definition.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/cookbook/README.md#2025-04-11_snippet_13\n\nLANGUAGE: plain\nCODE:\n```\ncookbook.ts schema\n\nRender the recipe JSON schema out of the Recipe type.\n\nOptions:\n  --version  Show version number                                       [boolean]\n  --help     Show help                                                 [boolean]\n```\n\n----------------------------------------\n\nTITLE: Schema Command Example Usage\nDESCRIPTION: Example showing how to use the schema command with npm run.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/cookbook/README.md#2025-04-11_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\nnpm run cookbook -- schema\n```\n\n----------------------------------------\n\nTITLE: Building Hydrogen Project for Production\nDESCRIPTION: Command to build the Hydrogen project for production deployment.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/examples/classic-remix/README.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Running Hydrogen Development Server\nDESCRIPTION: Command to start the local development server for Hydrogen project.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/examples/classic-remix/README.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Improving types for HydrogenSession\nDESCRIPTION: A changelog entry noting improvements to TypeScript types for HydrogenSession, specifically when accessing the customerAccessToken property.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/create-hydrogen/CHANGELOG.md#2025-04-11_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n- Improved types of `HydrogenSession` when accessing `session.get('customerAccessToken')`. ([#1341](https://github.com/Shopify/hydrogen/pull/1341)) by [@frandiox](https://github.com/frandiox)\n```\n\n----------------------------------------\n\nTITLE: Installing Hydrogen Examples using NPM\nDESCRIPTION: A bash command that demonstrates how to create a new Hydrogen project using a specific example template. This command uses npm create with the @shopify/hydrogen package and specifies the custom-cart-method example as a template.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/examples/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create @shopify/hydrogen@latest -- --template custom-cart-method\n```\n\n----------------------------------------\n\nTITLE: Installing Hydrogen Express Template\nDESCRIPTION: Command to create a new Hydrogen project using the Express template via npm.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/examples/express/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create @shopify/hydrogen@latest -- --template express\n```\n\n----------------------------------------\n\nTITLE: Installing Hydrogen B2B Template\nDESCRIPTION: Command to create a new Hydrogen project using the B2B template. This sets up the basic structure for a B2B storefront implementation.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/examples/b2b/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create @shopify/hydrogen@latest -- --template b2b\n```\n\n----------------------------------------\n\nTITLE: Installing Hydrogen Multipass Template\nDESCRIPTION: Command to create a new Hydrogen project with the Multipass template.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/examples/multipass/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create @shopify/hydrogen@latest -- --template multipass\n```\n\n----------------------------------------\n\nTITLE: Update Command Example Usage\nDESCRIPTION: Example showing how to use the update command with npm run.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/cookbook/README.md#2025-04-11_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\nnpm run cookbook -- update --recipe my-recipe\n```\n\n----------------------------------------\n\nTITLE: Installing MiniOxygen as a Dev Dependency\nDESCRIPTION: Command to install @shopify/mini-oxygen as a development dependency in a project using npm.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/mini-oxygen/README.md#2025-04-11_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @shopify/mini-oxygen\n```\n\n----------------------------------------\n\nTITLE: Updating CartLineItem Component to Display Subscription Details\nDESCRIPTION: Modifies the CartLineItem component to extract and display subscription details when a product has a selling plan allocation. The changes include extracting the sellingPlanAllocation from cart line data and displaying the plan name in the cart.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/cookbook/recipes/subscriptions/README.md#2025-04-11_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\nindex 26102b61..4ec8324b 100644\n--- a/templates/skeleton/app/components/CartLineItem.tsx\n+++ b/templates/skeleton/app/components/CartLineItem.tsx\n@@ -3,8 +3,8 @@ import type {CartLayout} from '~/components/CartMain';\n import {CartForm, Image, type OptimisticCartLine} from '@shopify/hydrogen';\n import {useVariantUrl} from '~/lib/variants';\n import {Link} from '@remix-run/react';\n-import {ProductPrice} from './ProductPrice';\n-import {useAside} from './Aside';\n+import {ProductPrice} from '~/components/ProductPrice';\n+import {useAside} from '~/components/Aside';\n import type {CartApiQueryFragment} from 'storefrontapi.generated';\n \n type CartLine = OptimisticCartLine<CartApiQueryFragment>;\n@@ -20,7 +20,9 @@ export function CartLineItem({\n   layout: CartLayout;\n   line: CartLine;\n }) {\n-  const {id, merchandise} = line;\n+  // Get the selling plan allocation\n+  const {id, merchandise, sellingPlanAllocation} = line;\n+\n   const {product, title, image, selectedOptions} = merchandise;\n   const lineItemUrl = useVariantUrl(product.handle, selectedOptions);\n   const {close} = useAside();\n@@ -54,6 +56,12 @@ export function CartLineItem({\n         </Link>\n         <ProductPrice price={line?.cost?.totalAmount} />\n         <ul>\n+          {/* Optionally render the selling plan name if available */}\n+          {sellingPlanAllocation && (\n+            <li key={sellingPlanAllocation.sellingPlan.name}>\n+              <small>{sellingPlanAllocation.sellingPlan.name}</small>\n+            </li>\n+          )}\n           {selectedOptions.map((option) => (\n             <li key={option.name}>\n               <small>\n```\n\n----------------------------------------\n\nTITLE: Adding Selling Plan Allocation to Cart Query Fragments\nDESCRIPTION: Updates to the GraphQL fragments for cart queries to include selling plan allocation information. This enables displaying subscription details in the shopping cart and ensures that the subscription information is preserved when adding products to cart.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/cookbook/recipes/subscriptions/README.md#2025-04-11_snippet_5\n\nLANGUAGE: GraphQL\nCODE:\n```\nsellingPlanAllocation {\n  sellingPlan {\n     name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Selling Plan Imports and Stylesheet in Hydrogen Product Route\nDESCRIPTION: Adds import statements for SellingPlanFragment type, LinksFunction, and a stylesheet for selling plans. The stylesheet is then linked using the LinksFunction export.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/cookbook/recipes/subscriptions/README.md#2025-04-11_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type {SellingPlanFragment} from 'storefrontapi.generated';\nimport type {LinksFunction} from '@remix-run/node';\n\nimport sellingPanStyle from '~/styles/selling-plan.css?url';\n\nexport const links: LinksFunction = () => [\n  {rel: 'stylesheet', href: sellingPanStyle},\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing Selling Plan Selection Logic in Hydrogen Product Loader\nDESCRIPTION: Enhances the loadCriticalData function to handle selling plan selection from URL parameters. It finds the selected selling plan based on the ID from the request URL and returns it along with the product data.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/cookbook/recipes/subscriptions/README.md#2025-04-11_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Initialize the selectedSellingPlan to null\nlet selectedSellingPlan = null;\n\n// Get the selected selling plan id from the request url\nconst selectedSellingPlanId =\n  new URL(request.url).searchParams.get('selling_plan') ?? null;\n\n// Get the selected selling plan bsed on the selectedSellingPlanId\nif (selectedSellingPlanId) {\n  const selectedSellingPlanGroup =\n    product.sellingPlanGroups.nodes?.find((sellingPlanGroup) => {\n      return sellingPlanGroup.sellingPlans.nodes?.find(\n        (sellingPlan: SellingPlanFragment) =>\n          sellingPlan.id === selectedSellingPlanId,\n      );\n    }) ?? null;\n\n  if (selectedSellingPlanGroup) {\n    selectedSellingPlan =\n      selectedSellingPlanGroup.sellingPlans.nodes.find((sellingPlan) => {\n        return sellingPlan.id === selectedSellingPlanId;\n      }) ?? null;\n  }\n}\n\nreturn {\n  product,\n  selectedSellingPlan,\n};\n```\n\n----------------------------------------\n\nTITLE: Using ParsedMetafield Type with Boolean Metafields\nDESCRIPTION: Example demonstrating how to use the ParsedMetafield type with metafieldParser to get proper type inference for boolean metafields.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/packages/hydrogen-react/CHANGELOG.md#2025-04-11_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nconst parsed = metafieldParser<ParsedMetafield['boolean']>(booleanMetafield)\n\n// type of `parsedValue` is `boolean | null`\nif(parsed.parsedValue) {\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Predictive Search Form and Results in TypeScript/React\nDESCRIPTION: This component renders the predictive search form and results, using the SearchFormPredictive and SearchResultsPredictive components.\nSOURCE: https://github.com/Shopify/hydrogen/blob/main/templates/skeleton/guides/predictiveSearch/predictiveSearch.md#2025-04-11_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfunction SearchAside() {\n  return (\n    <Aside type=\"search\" heading=\"SEARCH\">\n      <div className=\"predictive-search\">\n        <br />\n        <SearchFormPredictive>\n          {({ fetchResults, goToSearch, inputRef }) => (\n            <>\n              <input\n                name=\"q\"\n                onChange={fetchResults}\n                onFocus={fetchResults}\n                placeholder=\"Search\"\n                ref={inputRef}\n                type=\"search\"\n              />\n              &nbsp;\n              <button onClick={goToSearch}>\n                Search\n              </button>\n            </>\n          )}\n        </SearchFormPredictive>\n\n        <SearchResultsPredictive>\n          {({ items, total, term, state, inputRef, closeSearch }) => {\n            const { articles, collections, pages, products, queries } = items;\n\n            if (state === 'loading' && term.current) {\n              return <div>Loading...</div>;\n            }\n\n            if (!total) {\n              return <SearchResultsPredictive.Empty term={term} />;\n            }\n\n            return (\n              <>\n                <SearchResultsPredictive.Queries\n                   queries={queries}\n                   term={term}\n                   inputRef={inputRef}\n                />\n                <SearchResultsPredictive.Products\n                   products={products}\n                   closeSearch={closeSearch}\n                   term={term}\n                />\n                <SearchResultsPredictive.Collections\n                   collections={collections}\n                   closeSearch={closeSearch}\n                   term={term}\n                />\n                <SearchResultsPredictive.Pages\n                   pages={pages}\n                   closeSearch={closeSearch}\n                   term={term}\n                />\n                <SearchResultsPredictive.Articles\n                   articles={articles}\n                   closeSearch={closeSearch}\n                   term={term}\n                />\n                {term.current && total && (\n                  <Link onClick={closeSearch} to={`/search?q=${term.current}`}>\n                    <p>\n                      View all results for <q>{term.current}</q> →\n                    </p>\n                  </Link>\n                )}\n              </>\n            );\n          }}\n        </SearchResultsPredictive>\n      </div>\n    </Aside>\n  );\n}\n```"
  }
]