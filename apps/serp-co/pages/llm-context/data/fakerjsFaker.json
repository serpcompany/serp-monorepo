[
  {
    "owner": "faker-js",
    "repo": "faker",
    "content": "TITLE: Importing and Using Faker.js (ESM & CJS)\nDESCRIPTION: This code snippet demonstrates how to import and use the Faker.js library in both ECMAScript Modules (ESM) and CommonJS (CJS) environments. It includes an example of creating a random user object with various fake data fields like userId, username, email, avatar, password, birthdate, and registeredAt.\nSOURCE: https://github.com/faker-js/faker/blob/next/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// ESM\nimport { faker } from '@faker-js/faker';\n\n// CJS\nconst { faker } = require('@faker-js/faker');\n\nexport function createRandomUser() {\n  return {\n    userId: faker.string.uuid(),\n    username: faker.internet.username(), // before version 9.1.0, use userName()\n    email: faker.internet.email(),\n    avatar: faker.image.avatar(),\n    password: faker.internet.password(),\n    birthdate: faker.date.birthdate(),\n    registeredAt: faker.date.past(),\n  };\n}\n\nexport const users = faker.helpers.multiple(createRandomUser, {\n  count: 5,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Random User Factory (TS)\nDESCRIPTION: This TypeScript code defines a function `createRandomUser` to generate a random user object based on the `User` interface, using Faker.js to populate the properties.  This creates completely independent, randomly generated user objects.\nSOURCE: https://github.com/faker-js/faker/blob/next/docs/guide/usage.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { faker } from '@faker-js/faker';\n\ninterface User { ... }\n\nfunction createRandomUser(): User {\n  return {\n    _id: faker.string.uuid(),\n    avatar: faker.image.avatar(),\n    birthday: faker.date.birthdate(),\n    email: faker.internet.email(),\n    firstName: faker.person.firstName(),\n    lastName: faker.person.lastName(),\n    sex: faker.person.sexType(),\n    subscriptionTier: faker.helpers.arrayElement(['free', 'basic', 'business']),\n  };\n}\n\nconst user = createRandomUser();\n```\n\n----------------------------------------\n\nTITLE: Generating Unique Email Array - TypeScript\nDESCRIPTION: This code snippet demonstrates how to use `faker.helpers.uniqueArray()` to generate an array of unique email addresses. It specifies the `faker.internet.email` method to generate individual email addresses and requests 1000 unique values.\nSOURCE: https://github.com/faker-js/faker/blob/next/docs/guide/unique.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfaker.helpers.uniqueArray(faker.internet.email, 1000); // will generate 1000 unique email addresses\n```\n\n----------------------------------------\n\nTITLE: Adding Overwrites to the User Factory (TS)\nDESCRIPTION: This TypeScript code enhances the `createRandomUser` function to accept an `overwrites` parameter.  This enables specific user properties to be pre-defined while using Faker for the rest.  It utilizes default parameters.\nSOURCE: https://github.com/faker-js/faker/blob/next/docs/guide/usage.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { faker } from '@faker-js/faker';\n\nfunction createRandomUser(overwrites: Partial<User> = {}): User {\n  const {\n    _id = faker.string.uuid(),\n    avatar = faker.image.avatar(),\n    birthday = faker.date.birthdate(),\n    sex = faker.person.sexType(),\n    firstName = faker.person.firstName(sex),\n    lastName = faker.person.lastName(),\n    email = faker.internet.email({ firstName, lastName }),\n    subscriptionTier = faker.helpers.arrayElement([\n      'free',\n      'basic',\n      'business',\n    ]),\n  } = overwrites;\n\n  return {\n    _id,\n    avatar,\n    birthday,\n    email,\n    firstName,\n    lastName,\n    sex,\n    subscriptionTier,\n  };\n}\n\nconst user = createRandomUser();\nconst userToReject = createRandomUser({ birthday: new Date('2124-10-20') });\n```\n\n----------------------------------------\n\nTITLE: Faker.js with Cypress\nDESCRIPTION: This snippet demonstrates how to integrate Faker.js with Cypress for end-to-end testing. It generates a username, password, and email using Faker.js, then uses these values to fill out a registration form and login form on a hypothetical website. The test asserts that the login is successful by checking the URL.\nSOURCE: https://github.com/faker-js/faker/blob/next/docs/guide/frameworks.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { faker } from '@faker-js/faker/locale/en';\n\ndescribe('Testing the application', () => {\n  it('should create an account with username and password', () => {\n    let username = faker.internet.username(); // before version 9.1.0, use userName()\n    let password = faker.internet.password();\n    let email = faker.internet.exampleEmail();\n\n    // Visit the a webpage and create an account.\n    cy.visit('https://www.example.com/register');\n\n    cy.get('#email-input').type(email);\n    cy.get('#username-input').type(username);\n    cy.get('#password-input').type(password);\n    cy.get('#password-confirm-input').type(password);\n\n    cy.get('#register-submit-input').click();\n\n    // Now, we try to login with these credentials.\n    cy.visit('https://www.example.com/login');\n\n    cy.get('#email-input').type(email);\n    cy.get('#password-input').type(password);\n\n    cy.get('#login-submit-input').click();\n\n    // We should have logged in successfully to the dashboard page.\n    cy.url().should('include', '/dashboard');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Faker in Node.js (CJS)\nDESCRIPTION: This code snippet demonstrates how to import and use the Faker.js library in a Node.js environment using CommonJS (CJS) syntax. It includes an example of generating a random name and email.  It can optionally import a specific locale.\nSOURCE: https://github.com/faker-js/faker/blob/next/docs/guide/usage.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { faker } = require('@faker-js/faker');\n// or, if desiring a different locale\n// const { fakerDE: faker } = require('@faker-js/faker');\n\nconst randomName = faker.person.fullName(); // Rowan Nikolaus\nconst randomEmail = faker.internet.email(); // Kassandra.Haley@erich.biz\n```\n\n----------------------------------------\n\nTITLE: Setting Seed for Reproducible Results (TS)\nDESCRIPTION: This TypeScript code demonstrates how to set a seed in Faker.js to obtain reproducible random values. It shows that setting the same seed multiple times results in the same sequence of generated values.\nSOURCE: https://github.com/faker-js/faker/blob/next/docs/guide/usage.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nfaker.seed(123);\n\nconst firstRandom = faker.number.int();\n\n// Setting the seed again resets the sequence.\nfaker.seed(123);\n\nconst secondRandom = faker.number.int();\n\nconsole.log(firstRandom === secondRandom);\n```\n\n----------------------------------------\n\nTITLE: Setting a Randomness Seed in Faker.js\nDESCRIPTION: This code shows how to set a randomness seed in Faker.js to ensure consistent results across multiple runs. Setting the same seed will produce the same sequence of random values.\nSOURCE: https://github.com/faker-js/faker/blob/next/README.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nfaker.seed(123);\n\nconst firstRandom = faker.number.int();\n\n// Setting the seed again resets the sequence.\nfaker.seed(123);\n\nconst secondRandom = faker.number.int();\n\nconsole.log(firstRandom === secondRandom);\n```\n\n----------------------------------------\n\nTITLE: Importing Faker in Node.js (ESM)\nDESCRIPTION: This code snippet demonstrates how to import and use the Faker.js library in a Node.js environment using ES modules (ESM) syntax. It includes an example of generating a random name and email.  It can optionally import a specific locale.\nSOURCE: https://github.com/faker-js/faker/blob/next/docs/guide/usage.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { faker } from '@faker-js/faker';\n// or, if desiring a different locale\n// import { fakerDE as faker } from '@faker-js/faker';\n\nconst randomName = faker.person.fullName(); // Rowan Nikolaus\nconst randomEmail = faker.internet.email(); // Kassandra.Haley@erich.biz\n```\n\n----------------------------------------\n\nTITLE: Re-using Randomizer with Multiple Locales - TypeScript\nDESCRIPTION: Shows how to share a Randomizer instance between multiple Faker instances configured with different locales. This ensures reproducibility when seeding, especially when seeding happens at a different location than the data generation. The example uses english and traditional chinese locales.\nSOURCE: https://github.com/faker-js/faker/blob/next/docs/guide/randomizer.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { en, Faker, Randomizer, zh_TW } from '@faker-js/faker';\n\nconst randomizer: Randomizer = ...;\n\nconst customFakerEN = new Faker({\n  locale: en,\n  randomizer,\n});\n\nconst customFakerZH_TW = new Faker({\n  locale: [zh_TW, en],\n  randomizer,\n});\n\nrandomizer.seed(5);\n// customFakerEN.seed(5); // Redundant\n// customFakerZH_TW.seed(5); // Redundant\n\nconst firstName = fakerZH_TW.person.firstName(); // 炫明\nconst alias = fakerEN.person.firstName(); // John (different from before, because it is now the second call)\n```\n\n----------------------------------------\n\nTITLE: Faker.js with Seeded Vitest/Jest\nDESCRIPTION: This snippet demonstrates how to use Faker.js with Vitest or Jest to generate consistent, seeded test data. The `faker.seed()` method is used to ensure that Faker.js generates the same random values each time the test is run. An `afterEach` block resets the seed after each test.  Note: For Jest, remove the import statement for Vitest testing methods.\nSOURCE: https://github.com/faker-js/faker/blob/next/docs/guide/frameworks.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { faker } from '@faker-js/faker/locale/en';\nimport { afterEach, describe, expect, it } from 'vitest';\n\n// We might want other tests to *not* be seeded. This will re-seed our faker instance after each test.\nafterEach(() => {\n  faker.seed();\n});\n\ndescribe('reverse array', () => {\n  it('should reverse the array', () => {\n    // Seed our faker instance with some static number.\n    faker.seed(1234);\n    const title = faker.person.jobTitle();\n    const name = faker.person.fullName();\n    const animal = faker.animal.bear();\n\n    const array = [title, name, animal];\n\n    expect(array.reverse()).toStrictEqual([animal, name, title]);\n\n    // Expect our value to always match a generated snapshot.\n    expect(array.reverse()).toMatchSnapshot();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Built-In Randomizers - TypeScript\nDESCRIPTION: Imports the built-in Mersenne Twister random number generators from Faker.js.  `generateMersenne32Randomizer` was the default prior to v9, while `generateMersenne53Randomizer` is the default since v9. The 53bit randomizer generates better random values.\nSOURCE: https://github.com/faker-js/faker/blob/next/docs/guide/randomizer.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  generateMersenne32Randomizer, // Default prior to v9\n  generateMersenne53Randomizer, // Default since v9\n} from '@faker-js/faker';\n\nconst randomizer = generateMersenne53Randomizer();\n```\n\n----------------------------------------\n\nTITLE: Implementing Pure-Rand Randomizer - TypeScript\nDESCRIPTION: Implements a custom Randomizer using the pure-rand library. It defines a `generatePureRandRandomizer` function that creates a Randomizer instance wrapping a pure-rand RandomGenerator. The `next` method generates a random number between 0 and 1. The seed can be a number or an array of numbers.\nSOURCE: https://github.com/faker-js/faker/blob/next/docs/guide/randomizer.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Faker, Randomizer, SimpleFaker } from '@faker-js/faker';\nimport { RandomGenerator, xoroshiro128plus } from 'pure-rand';\n\nexport function generatePureRandRandomizer(\n  seed: number | number[] = Date.now() ^ (Math.random() * 0x100000000),\n  factory: (seed: number) => RandomGenerator = xoroshiro128plus\n): Randomizer {\n  const self = {\n    next: () => (self.generator.unsafeNext() >>> 0) / 0x100000000,\n    seed: (seed: number | number[]) => {\n      self.generator = factory(typeof seed === 'number' ? seed : seed[0]);\n    },\n  } as Randomizer & { generator: RandomGenerator };\n  self.seed(seed);\n  return self;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Faker.js with Localization (ESM & CJS)\nDESCRIPTION: This code snippet demonstrates how to import and use Faker.js with a specific locale, in this case, German (DE), in both ESM and CJS environments. It allows generating localized fake data.\nSOURCE: https://github.com/faker-js/faker/blob/next/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// ESM\nimport { fakerDE as faker } from '@faker-js/faker';\n\n// CJS\nconst { fakerDE: faker } = require('@faker-js/faker');\n```\n\n----------------------------------------\n\nTITLE: Localized Faker Import Example\nDESCRIPTION: This snippet shows how to import localized Faker instances.  Prior to v9, specific paths were required to import localized instances.  In v9, localized instances can be imported directly from the root.\nSOURCE: https://github.com/faker-js/faker/blob/next/docs/guide/upgrading.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { faker } from '@faker-js/faker/locale/de';\n\n```\n\n----------------------------------------\n\nTITLE: Create custom Faker.js locale with fallbacks\nDESCRIPTION: This snippet demonstrates how to create a custom Faker.js locale using `LocaleDefinition` and `Faker`. It also shows how to set up a fallback mechanism by providing an array of locales, where the first available data is used.\nSOURCE: https://github.com/faker-js/faker/blob/next/docs/guide/localization.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { LocaleDefinition } from '@faker-js/faker';\nimport { base, de, de_CH, en, Faker } from '@faker-js/faker';\n\nconst customLocale: LocaleDefinition = {\n  title: 'My custom locale',\n  internet: {\n    domainSuffix: ['test'],\n  },\n};\n\nexport const customFaker = new Faker({\n  locale: [customLocale, de_CH, de, en, base],\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Faker.js instance with Locale Fallback\nDESCRIPTION: This snippet demonstrates how to create a custom Faker.js instance with a specified locale and a fallback locale (in this case, German and Swiss German).  This ensures that if data isn't available for a specific locale, it falls back to another defined locale.\nSOURCE: https://github.com/faker-js/faker/blob/next/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { de, de_CH, Faker } from '@faker-js/faker';\n\nexport const faker = new Faker({\n  locale: [de_CH, de],\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing all prebuilt Faker instances and locales\nDESCRIPTION: This code demonstrates how to access all prebuilt Faker instances and locale definitions using the `allFakers` and `allLocales` objects from `@faker-js/faker`. The keys are the locale codes.\nSOURCE: https://github.com/faker-js/faker/blob/next/docs/guide/localization.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { allFakers, allLocales } from '@faker-js/faker';\n\nconsole.dir(allFakers['de_AT']); // the prebuilt Faker instance for de_AT\nconsole.dir(allLocales['de_AT']); // the raw locale definitions for de_AT\n```\n\n----------------------------------------\n\nTITLE: Setting a Reference Date (TS)\nDESCRIPTION: This TypeScript code demonstrates how to set a reference date for `faker.date` methods to have reproducible results when these methods are used. It shows that a fixed reference date can be used for specific calls, or set globally using `setDefaultRefDate`.\nSOURCE: https://github.com/faker-js/faker/blob/next/docs/guide/usage.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// creates a date soon after 2023-01-01\nfaker.date.soon({ refDate: '2023-01-01T00:00:00.000Z' });\n```\n\n----------------------------------------\n\nTITLE: Using faker.helpers.multiple with faker.date.past (correct)\nDESCRIPTION: This example shows the correct way to use `faker.helpers.multiple` with `faker.date.past` using a lambda function. This ensures that `faker.date.past` is called independently for each iteration, avoiding unintended modification of the `refDate`.\nSOURCE: https://github.com/faker-js/faker/blob/next/docs/guide/upgrading.md#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nfaker.helpers.multiple(() => faker.date.past(), { count: 2 });\n```\n\n----------------------------------------\n\nTITLE: Using Faker.js Templates\nDESCRIPTION: This snippet demonstrates how to use the `faker.helpers.fake` method to combine faker API methods using a mustache string format.  It allows creating dynamic strings with fake data interpolated into them.\nSOURCE: https://github.com/faker-js/faker/blob/next/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconsole.log(\n  faker.helpers.fake(\n    'Hello {{person.prefix}} {{person.lastName}}, how are you today?'\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Using Faker in a Browser Environment\nDESCRIPTION: This code snippet shows how to import and use Faker.js directly within a browser environment. It fetches the library from a CDN using `import()` and demonstrates generating random data. Requires a browser that supports ES Modules and the `await import` syntax.\nSOURCE: https://github.com/faker-js/faker/blob/next/docs/guide/usage.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { faker } = await import('https://esm.sh/@faker-js/faker');\n\nconst randomName = faker.person.fullName(); // Amber Keebler\nconst randomEmail = faker.internet.email(); // Norma13@hotmail.com\n```\n\n----------------------------------------\n\nTITLE: Replacing faker.helpers.unique (New)\nDESCRIPTION: Shows how to replace `faker.helpers.unique` using the `enforce-unique` library for ensuring unique values.  It requires creating an instance of `UniqueEnforcer` and calling its `enforce` method.\nSOURCE: https://github.com/faker-js/faker/blob/next/docs/guide/upgrading.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n// NEW\nimport { UniqueEnforcer } from 'enforce-unique';\n//const { UniqueEnforcer } = require(\"enforce-unique\") // CJS\n\nconst enforcerName = new UniqueEnforcer();\nconst name = enforcerName.enforce(faker.person.firstName);\n```\n\n----------------------------------------\n\nTITLE: Replacing regexpStyleStringParse (New)\nDESCRIPTION: Demonstrates the recommended replacement for `faker.helpers.regexpStyleStringParse` using `faker.helpers.fromRegExp`.  Note that `fromRegExp` cannot handle numeric ranges which requires additional logic.\nSOURCE: https://github.com/faker-js/faker/blob/next/docs/guide/upgrading.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nfaker.helpers.fromRegExp('a{3,6}'); // aaaaa\n```\n\n----------------------------------------\n\nTITLE: Replacing faker.helpers.unique with parameters (New)\nDESCRIPTION: Shows how to use `enforce-unique` to replace the `faker.helpers.unique` with parameters.\nSOURCE: https://github.com/faker-js/faker/blob/next/docs/guide/upgrading.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n// NEW\nimport { UniqueEnforcer } from 'enforce-unique';\n\nconst enforcerState = new UniqueEnforcer();\nconst stateCode = enforcerState.enforce(() =>\n  faker.location.state({\n    abbreviated: true,\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Faker Usage with Seeding - TypeScript\nDESCRIPTION: Demonstrates seeding two independent Faker instances with different locales to attempt reproducible random values. However, without sharing a randomizer there might be issues regarding reproducibility.\nSOURCE: https://github.com/faker-js/faker/blob/next/docs/guide/randomizer.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { fakerEN, fakerZH_TW } from '@faker-js/faker';\n\nfakerZH_TW.seed(5);\nfakerEN.seed(5);\n\nconst firstName = fakerZH_TW.person.firstName(); // 炫明\nconst alias = fakerEN.person.firstName(); // Arthur\n```\n\n----------------------------------------\n\nTITLE: Creating Faker Instance with Randomizer - TypeScript\nDESCRIPTION: Demonstrates how to instantiate a Faker instance with a custom Randomizer. The `randomizer` option in the constructor allows you to control the source of randomness used by the faker instance.  The `locale` option is also included as it is generally expected when creating a Faker instance.\nSOURCE: https://github.com/faker-js/faker/blob/next/docs/guide/randomizer.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Faker, Randomizer } from '@faker-js/faker';\n\nconst customFaker = new Faker({\n  locale: ...,\n  randomizer: ...,\n});\n```\n\n----------------------------------------\n\nTITLE: Demonstrating RNG Precision in FakerJS (v9 vs pre-v9)\nDESCRIPTION: This code demonstrates the difference in random number generation between FakerJS versions before v9 and v9. It initializes two SimpleFaker instances, one using the generateMersenne32Randomizer (pre-v9) and the other using generateMersenne53Randomizer (v9).  It then seeds both instances with the same value and generates a list of random integers using each instance. The `diff` function (not included) would then show the differences in the generated sequences due to the increased precision.\nSOURCE: https://github.com/faker-js/faker/blob/next/docs/about/announcements/2024-10-26.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  SimpleFaker,\n  generateMersenne32Randomizer,\n  generateMersenne53Randomizer,\n} from '@faker-js/faker';\n\n// < v9 default\nconst oldFaker = new SimpleFaker({\n  randomizer: generateMersenne32Randomizer(),\n});\noldFaker.seed(123);\nconst oldValue = oldFaker.helpers.multiple(() => oldFaker.number.int(10), {\n  count: 10,\n});\n\n// > v9 default\nconst newFaker = new SimpleFaker({\n  randomizer: generateMersenne53Randomizer(),\n});\nnewFaker.seed(123);\nconst newValue = newFaker.helpers.multiple(() => newFaker.number.int(10), {\n  count: 5,\n});\n\ndiff(oldValue, newValue);\n```\n\n----------------------------------------\n\nTITLE: Using faker.helpers.multiple with index\nDESCRIPTION: This demonstrates how to include the index as part of the generated data when using `faker.helpers.multiple`.  It shows how to create an array of objects with an `id` property derived from the loop index.\nSOURCE: https://github.com/faker-js/faker/blob/next/docs/guide/upgrading.md#_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nfaker.helpers.multiple((_, index) => ({ id: index, ...}), ...); // [{id: 0, ...}, ...]\n```\n\n----------------------------------------\n\nTITLE: JSDoc Example with Parameters and Deprecation - Typescript\nDESCRIPTION: This code snippet demonstrates a proper JSDoc block for a function with parameters, default values, examples, and deprecation notice. It showcases the required tags and their formatting according to Faker.js conventions.\nSOURCE: https://github.com/faker-js/faker/blob/next/CONTRIBUTING.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * This is a good JSDoc description for a method that generates foos.\n *\n * @param options The optional options to use.\n * @param options.test The parameter to configure test. Defaults to `'bar'`.\n *\n * @see faker.helper.fake\n *\n * @example\n * faker.bar.foo() // 'foo'\n * faker.bar.foo({ test: 'oof' }) // 'of'\n *\n * @since 7.5.0\n *\n * @deprecated Use `faker.cat.random()` instead.\n */\nfunction foo(options: { test: string } = {}): string {\n  // implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Using Locale Fallbacks in Faker.js\nDESCRIPTION: This code snippet demonstrates how to provide fallbacks for missing locale data in Faker.js. By specifying multiple locales in the `locale` option, the `Faker` instance will use the first locale that contains the requested data. It uses `el`, `en`, and `base` locales as fallbacks.\nSOURCE: https://github.com/faker-js/faker/blob/next/docs/guide/localization.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Faker, base, el, en } from '@faker-js/faker';\n\nconst faker = new Faker({\n  locale: [el, en, base],\n});\nconsole.log(faker.location.country()); // 'Belgium'\n```\n\n----------------------------------------\n\nTITLE: Replacing regexpStyleStringParse with range (New)\nDESCRIPTION: Illustrates the replacement of deprecated `faker.helpers.regexpStyleStringParse` with `faker.helpers.fromRegExp` including using number range with `faker.number.int`.\nSOURCE: https://github.com/faker-js/faker/blob/next/docs/guide/upgrading.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nfaker.helpers.fromRegExp('a{3,6}') + faker.number.int({ min: 1, max: 100 });\n```\n\n----------------------------------------\n\nTITLE: Seeding Faker Instance - TypeScript\nDESCRIPTION: This code snippet demonstrates how to seed a Faker instance and generate a sequence of animal types. It shows that without explicit uniqueness handling, Faker can produce duplicate values, especially when the underlying data set is small.\nSOURCE: https://github.com/faker-js/faker/blob/next/docs/guide/unique.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfaker.seed(55);\nfaker.animal.type(); //'cat'\nfaker.animal.type(); //'bird'\nfaker.animal.type(); //'horse'\nfaker.animal.type(); //'horse'\n```\n\n----------------------------------------\n\nTITLE: Using Simple Faker for Basic Data Generation (TS)\nDESCRIPTION: This TypeScript code demonstrates how to use `simpleFaker` to generate basic data like UUIDs without loading locale-specific data. It imports `simpleFaker` and uses its string method to generate a UUID.\nSOURCE: https://github.com/faker-js/faker/blob/next/docs/guide/usage.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { simpleFaker } from '@faker-js/faker';\n\nconst uuid = simpleFaker.string.uuid();\n```\n\n----------------------------------------\n\nTITLE: Using Faker in HTML with ES Modules\nDESCRIPTION: This HTML snippet demonstrates how to use Faker.js in a browser environment by importing it as an ES module within an HTML file.  It sets the generated values in input fields.\nSOURCE: https://github.com/faker-js/faker/blob/next/docs/guide/usage.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n  import { faker } from 'https://esm.sh/@faker-js/faker';\n\n  // Caitlyn Kerluke\n  const randomName = faker.person.fullName();\n\n  // Rusty@arne.info\n  const randomEmail = faker.internet.email();\n\n  document.getElementById('name').value = randomName;\n  document.getElementById('email').value = randomEmail;\n</script>\n\n<input id=\"name\" />\n<input id=\"email\" />\n```\n\n----------------------------------------\n\nTITLE: Custom Faker Instance with Locale Object\nDESCRIPTION: This snippet demonstrates how to create a custom Faker instance by passing a locale object. It illustrates creating an instance without fallbacks and with a base data fallback.\nSOURCE: https://github.com/faker-js/faker/blob/next/docs/guide/upgrading.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Faker, es, base } from '@faker-js/faker';\n\n// A custom faker instance that does not have any fallbacks\nconst customEsFakerWithoutFallback = new Faker({ locale: es });\n\n// A custom faker instance that has only base-data as fallback, but not english data\nconst customEsFakerWithFallback = new Faker({ locale: [es, base] });\n```\n\n----------------------------------------\n\nTITLE: Replacing faker.helpers.unique with options (New)\nDESCRIPTION: Illustrates replacing `faker.helpers.unique` when it's called with options. It uses the `enforce-unique` library, and the options are passed directly to the enforce method.\nSOURCE: https://github.com/faker-js/faker/blob/next/docs/guide/upgrading.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n// NEW\nimport { UniqueEnforcer } from 'enforce-unique';\n\nconst enforcer = new UniqueEnforcer();\nconst city = enforcer.enforce(faker.location.city, {\n  maxRetries: 100,\n  maxTime: 1000,\n});\n```\n\n----------------------------------------\n\nTITLE: Faker.js with Vitest/Jest\nDESCRIPTION: This snippet demonstrates how to use Faker.js with Vitest or Jest to generate test data. It generates a job title, full name, and animal, then reverses an array containing these values and asserts the result. Note: For Jest, remove the import statement for Vitest testing methods.\nSOURCE: https://github.com/faker-js/faker/blob/next/docs/guide/frameworks.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { faker } from '@faker-js/faker/locale/en';\nimport { describe, expect, it } from 'vitest';\n\ndescribe('reverse array', () => {\n  it('should reverse the array', () => {\n    const title = faker.person.jobTitle();\n    const name = faker.person.fullName();\n    const animal = faker.animal.bear();\n\n    const array = [title, name, animal];\n\n    expect(array.reverse()).toStrictEqual([animal, name, title]);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Fixed Seeded Test Example (TypeScript)\nDESCRIPTION: This snippet illustrates how to write fixed seeded tests for Faker.js using Vitest, ensuring deterministic results.  It imports the faker instance and a helper for seeded tests.\nSOURCE: https://github.com/faker-js/faker/blob/next/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { faker } from '../src';\nimport { seededTests } from './support/seededRuns';\n\nseededTests(faker, 'someModule', (t) => {\n  t.it('someMethod');\n  // Or if multiple similar methods exist:\n  t.itEach('someMethod1', 'someMethod2', 'someMethod3');\n});\n```\n\n----------------------------------------\n\nTITLE: Faker.js with Playwright\nDESCRIPTION: This snippet demonstrates integrating Faker.js with Playwright for end-to-end testing. It generates a username, password, and email using Faker.js to fill a registration form and login form on a website. The test asserts that the login is successful by checking the URL.\nSOURCE: https://github.com/faker-js/faker/blob/next/docs/guide/frameworks.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { faker } from '@faker-js/faker/locale/en';\nimport { expect, test } from '@playwright/test';\n\ntest.describe('Testing the application', () => {\n  test('should create an account with username and password', async ({\n    page,\n  }) => {\n    const username = faker.internet.username(); // before version 9.1.0, use userName()\n    const password = faker.internet.password();\n    const email = faker.internet.exampleEmail();\n\n    // Visit the webpage and create an account.\n    await page.goto('https://www.example.com/register');\n    await page.getByLabel('email').fill(email);\n    await page.getByLabel('username').fill(username);\n    await page.getByLabel('password', { exact: true }).fill(password);\n    await page.getByLabel('confirm password').fill(password);\n    await page.getByRole('button', { name: 'Register' }).click();\n\n    // Now, we try to login with these credentials.\n    await page.goto('https://www.example.com/login');\n    await page.getByLabel('email').fill(email);\n    await page.getByLabel('password').fill(password);\n    await page.getByRole('button', { name: 'Login' }).click();\n\n    // We should have logged in successfully to the dashboard page.\n    await expect(page).toHaveURL(/.*dashboard/);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Fixed Seeded Test with Arguments (TypeScript)\nDESCRIPTION: This snippet demonstrates how to write fixed seeded tests for methods with arguments in Faker.js. It uses `describe` and `it` to define test cases with different parameter combinations.\nSOURCE: https://github.com/faker-js/faker/blob/next/CONTRIBUTING.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { faker } from '../src';\nimport { seededTests } from './support/seededRuns';\n\nseededTests(faker, 'someModule', (t) => {\n  t.describe('someMethod', (t) => {\n    t.it('noArgs')\n      .it('with param1', true)\n      .it('with param1 and param2', false, 1337);\n  });\n  // Or if multiple similar methods exist:\n  t.describeEach(\n    'someMethod1',\n    'someMethod2',\n    'someMethod3'\n  )((t) => {\n    t.it('noArgs')\n      .it('with param1', true)\n      .it('with param1 and param2', false, 1337);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Random Seeded Test Example (TypeScript)\nDESCRIPTION: This snippet shows how to write random seeded tests for Faker.js, checking for edge cases and ensuring valid results. It imports necessary modules and defines tests within a loop for repeated execution.\nSOURCE: https://github.com/faker-js/faker/blob/next/CONTRIBUTING.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { describe, expect, it } from 'vitest';\nimport { faker } from '../src';\n\ndescribe('someModule', () => {\n  describe(`random seeded tests for seed ${faker.seed()}`, () => {\n    for (let i = 1; i <= NON_SEEDED_BASED_RUN; i++) {\n      describe('someMethod', () => {\n        it('Should return a valid result', () => {\n          const actual = faker.someModule.someMethod();\n\n          expect(actual).toBeTypeOf('string');\n          expect(actual).toSatisfy(validatorjs.isAlphanumeric);\n          // ...\n        });\n\n        // ...\n      });\n    }\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Correct usage of faker.helpers.multiple with faker.person.firstName\nDESCRIPTION: This snippet demonstrates the correct approach to use `faker.helpers.multiple` with `faker.person.firstName` by using a lambda function. The lambda function ensures correct type compatibility and prevents compile-time errors in Typescript.\nSOURCE: https://github.com/faker-js/faker/blob/next/docs/guide/upgrading.md#_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nfaker.helpers.multiple(() => faker.person.firstName(), ...); // ✔\n```\n\n----------------------------------------\n\nTITLE: TypeScript Array Element Example (v8 vs v9)\nDESCRIPTION: This snippet demonstrates the change in type inference for `faker.helpers.arrayElement` between v8 and v9. In v8, the type was `number`, whereas in v9, the type is `1 | 2 | 3`, providing more precise type information.\nSOURCE: https://github.com/faker-js/faker/blob/next/docs/guide/upgrading.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// v8\nfaker.helpers.arrayElement([1, 2, 3]); // number\nfaker.helpers.arrayElement([1, 2, 3] as const); // 1 | 2 | 3\n\n// v9\nfaker.helpers.arrayElement([1, 2, 3]); // 1 | 2 | 3\n```\n\n----------------------------------------\n\nTITLE: Testing Faker (pnpm)\nDESCRIPTION: This snippet shows how to run tests and generate code coverage reports after building the project using pnpm. It assumes that dependencies have been installed.\nSOURCE: https://github.com/faker-js/faker/blob/next/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npnpm install\npnpm run build\n\npnpm run test\n# or\npnpm run coverage\n```\n\n----------------------------------------\n\nTITLE: Overriding Locale Data with Custom Configurations\nDESCRIPTION: This snippet shows how to override specific locale data with custom configurations. It allows using data from other locales when the default locale does not provide suitable values, addressing scenarios where default values are set to `null`.\nSOURCE: https://github.com/faker-js/faker/blob/next/docs/guide/localization.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Faker, en, en_HK } from '@faker-js/faker';\n\nconst faker = new Faker({\n  locale: [{ location: { postcode: en.location.postcode } }, en_HK],\n});\nconsole.log(faker.location.zipCode()); // '17551-0348'\n```\n\n----------------------------------------\n\nTITLE: Installing Faker.js with npm\nDESCRIPTION: This snippet shows how to install the Faker.js library as a development dependency using npm. This allows for generating fake data during development and testing.\nSOURCE: https://github.com/faker-js/faker/blob/next/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @faker-js/faker\n```\n\n----------------------------------------\n\nTITLE: Building Faker.js - Shell\nDESCRIPTION: This shell command builds the Faker.js distribution, which is required before running or building the documentation.\nSOURCE: https://github.com/faker-js/faker/blob/next/CONTRIBUTING.md#_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\npnpm run build\n```\n\n----------------------------------------\n\nTITLE: Refactoring the User Factory (TS)\nDESCRIPTION: This TypeScript code refactors the `createRandomUser` function to ensure that the generated data is more consistent, such as matching the first name to the generated sex.  The email address is then based on the given first and last names.\nSOURCE: https://github.com/faker-js/faker/blob/next/docs/guide/usage.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { faker } from '@faker-js/faker';\n\nfunction createRandomUser(): User {\n  const sex = faker.person.sexType();\n  const firstName = faker.person.firstName(sex);\n  const lastName = faker.person.lastName();\n  const email = faker.internet.email({ firstName, lastName });\n\n  return {\n    _id: faker.string.uuid(),\n    avatar: faker.image.avatar(),\n    birthday: faker.date.birthdate(),\n    email,\n    firstName,\n    lastName,\n    sex,\n    subscriptionTier: faker.helpers.arrayElement(['free', 'basic', 'business']),\n  };\n}\n\nconst user = createRandomUser();\n```\n\n----------------------------------------\n\nTITLE: Incorrect Fallback Usage with Null Data\nDESCRIPTION: This example demonstrates an incorrect way to use fallbacks when the primary locale returns `null`. Because `null` is considered present data, the fallback is not used, resulting in an error. This highlights a limitation of Faker.js fallback mechanism.\nSOURCE: https://github.com/faker-js/faker/blob/next/docs/guide/localization.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Faker, en, en_HK } from '@faker-js/faker';\n\nconst faker = new Faker({\n  locale: [en_HK, { location: { postcode: en.location.postcode } }],\n});\nconsole.log(faker.location.zipCode()); // Error\n```\n\n----------------------------------------\n\nTITLE: Using faker.helpers.multiple with faker.date.past (incorrect)\nDESCRIPTION: This example demonstrates an incorrect way to use `faker.helpers.multiple` with `faker.date.past`, potentially leading to unexpected behavior due to the loop index being passed as the `refDate`.  It highlights a common pitfall and the need for using a lambda function instead.\nSOURCE: https://github.com/faker-js/faker/blob/next/docs/guide/upgrading.md#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nfaker.helpers.multiple(faker.date.past, { count: 2 });\n```\n\n----------------------------------------\n\nTITLE: Installing Faker.js with NPM\nDESCRIPTION: This command installs the Faker.js library as a development dependency using npm. It allows developers to use Faker.js for generating fake data during development without including it in production builds.\nSOURCE: https://github.com/faker-js/faker/blob/next/docs/guide/index.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install @faker-js/faker --save-dev\n```\n\n----------------------------------------\n\nTITLE: Commit Message Example 5 - Shell\nDESCRIPTION: Example of a valid commit message: deprecating 'streetPrefix' and 'streetSuffix' in the 'location' module with the 'refactor' type.\nSOURCE: https://github.com/faker-js/faker/blob/next/CONTRIBUTING.md#_snippet_23\n\nLANGUAGE: shell\nCODE:\n```\nrefactor(location): deprecate streetPrefix and streetSuffix\n```\n\n----------------------------------------\n\nTITLE: JSDoc with @throws Tag - Typescript\nDESCRIPTION: This code illustrates the usage of the `@throws` tag in JSDoc to document potential errors thrown by a function. The tag should include an explanation of the conditions under which the error might occur.\nSOURCE: https://github.com/faker-js/faker/blob/next/CONTRIBUTING.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * This is a good JSDoc description.\n *\n * @param bar this is a parameter description. Defaults to `0`.\n *\n * @throws If bar is negative.\n */\nfunction foo(bar: number = 0) {\n  // implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Faker.js with PNPM\nDESCRIPTION: This command installs the Faker.js library as a development dependency using pnpm. It enables the use of Faker.js for generating fake data during the development phase.\nSOURCE: https://github.com/faker-js/faker/blob/next/docs/guide/index.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\npnpm add @faker-js/faker --save-dev\n```\n\n----------------------------------------\n\nTITLE: Building Faker (pnpm)\nDESCRIPTION: This snippet demonstrates the commands required to install dependencies and build the Faker.js project using pnpm.\nSOURCE: https://github.com/faker-js/faker/blob/next/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm install\npnpm run build\n```\n\n----------------------------------------\n\nTITLE: Commit Message Example 3 - Shell\nDESCRIPTION: Example of a valid commit message: fixing a bug related to lowering the target to support Webpack 4 with the 'fix' type.\nSOURCE: https://github.com/faker-js/faker/blob/next/CONTRIBUTING.md#_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\nfix: lower target to support Webpack 4\n```\n\n----------------------------------------\n\nTITLE: TypeScript Configuration for Faker\nDESCRIPTION: This JSON snippet shows the recommended TypeScript compiler options for using Faker.js in a TypeScript project.  It is recommended to use strict mode.\nSOURCE: https://github.com/faker-js/faker/blob/next/docs/guide/usage.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"moduleResolution\": \"Bundler\", // \"Node10\", \"Node16\" or \"NodeNext\"\n    \"strict\": true // Optional, but recommended\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Commit Message Example 7 - Shell\nDESCRIPTION: Example of a valid commit message: validating the contents of `@see` tags with the 'test' type, indicating changes to tests.\nSOURCE: https://github.com/faker-js/faker/blob/next/CONTRIBUTING.md#_snippet_25\n\nLANGUAGE: shell\nCODE:\n```\ntest: validate @see contents\n```\n\n----------------------------------------\n\nTITLE: Commit Message Example 9 - Shell\nDESCRIPTION: Example of a valid commit message: adding Node.js v18 support with the 'build' type, indicating changes to build scripts.\nSOURCE: https://github.com/faker-js/faker/blob/next/CONTRIBUTING.md#_snippet_27\n\nLANGUAGE: shell\nCODE:\n```\nbuild: add node v18 support\n```\n\n----------------------------------------\n\nTITLE: Running Preflight Checks (pnpm)\nDESCRIPTION: This snippet shows how to run the preflight checks to ensure everything is working correctly before submitting a pull request.  It is a shorthand for running multiple scripts in order.\nSOURCE: https://github.com/faker-js/faker/blob/next/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm run preflight\n```\n\n----------------------------------------\n\nTITLE: Commit Message Example 11 - Shell\nDESCRIPTION: Example of a valid commit message: reverting adding more Arabic names dataset with the 'revert' type.  This indicates a revert was triggered via git.\nSOURCE: https://github.com/faker-js/faker/blob/next/CONTRIBUTING.md#_snippet_29\n\nLANGUAGE: shell\nCODE:\n```\nrevert: add more arabic names dataset (#362)\n```\n\n----------------------------------------\n\nTITLE: Commit Message Example 6 - Shell\nDESCRIPTION: Example of a valid commit message: removing an unused playground with the 'docs' type, indicating changes were made to the documentation.\nSOURCE: https://github.com/faker-js/faker/blob/next/CONTRIBUTING.md#_snippet_24\n\nLANGUAGE: shell\nCODE:\n```\ndocs: remove unused playground\n```\n\n----------------------------------------\n\nTITLE: Deprecation Example (TypeScript)\nDESCRIPTION: This snippet demonstrates how to deprecate a property using a getter in Faker.js. It includes calling the `deprecated` function, adding a `@deprecated` JSDoc tag, and a `@see` tag with a link to the replacement.\nSOURCE: https://github.com/faker-js/faker/blob/next/CONTRIBUTING.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @see faker.cat.random()\n *\n * @deprecated Use `faker.cat.random()` instead.\n */\nget cat() {\n  deprecated({\n    deprecated: 'faker.animal.cat',\n  });\n  return 'cat';\n}\n```\n\n----------------------------------------\n\nTITLE: Building Documentation for Static Serving - Shell\nDESCRIPTION: This shell command builds the documentation for static hosting, outputting the files to the `/dist` directory.\nSOURCE: https://github.com/faker-js/faker/blob/next/CONTRIBUTING.md#_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\npnpm run docs:build # Output docs to /dist\n```\n\n----------------------------------------\n\nTITLE: Installing Faker.js with Yarn\nDESCRIPTION: This command installs the Faker.js library as a development dependency using Yarn.  Faker.js will be available for generating fake data during development.\nSOURCE: https://github.com/faker-js/faker/blob/next/docs/guide/index.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nyarn add @faker-js/faker --dev\n```\n\n----------------------------------------\n\nTITLE: Serving Static Documentation - Shell\nDESCRIPTION: This command serves the statically built documentation from the `/dist` directory, allowing for testing of the built documentation.\nSOURCE: https://github.com/faker-js/faker/blob/next/CONTRIBUTING.md#_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\npnpm run docs:serve # Serve docs from /dist\n```\n\n----------------------------------------\n\nTITLE: Complete JSDoc Example with Line Breaks - Typescript\nDESCRIPTION: This snippet demonstrates a complete JSDoc block, adhering to Faker's best practices, including descriptions, parameter details, examples, and proper spacing between different tag sections.\nSOURCE: https://github.com/faker-js/faker/blob/next/CONTRIBUTING.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * This is a good JSDoc block, because it follows the Faker preferences.\n *\n * @param bar The first argument.\n * @param baz The second argument.\n *\n * @example foo(1, 1) // [1, 1]\n * @example foo(13, 56) // [13, 56]\n */\nfunction foo(bar: number, baz: number): [number, number] {\n  // implementation\n}\n```\n\n----------------------------------------\n\nTITLE: JSDoc Example without Line Breaks (Incorrect) - Typescript\nDESCRIPTION: This example illustrates a JSDoc block that violates Faker's guidelines by lacking line breaks between different tag sections. This reduces readability and is thus discouraged.\nSOURCE: https://github.com/faker-js/faker/blob/next/CONTRIBUTING.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * This is a bad JSDoc block, because it has no linebreaks between sections.\n * @param bar The first argument.\n * @param baz The second argument.\n * @example foo(1, 1) // [1, 1]\n * @example foo(13, 56) // [13, 56]\n */\nfunction foo(bar: number, baz: number): [number, number] {\n  // implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Single-line JSDoc Example (Discouraged) - Typescript\nDESCRIPTION: This example demonstrates a single-line JSDoc, which is discouraged in the Faker.js project. Multiline JSDocs are preferred for better code maintainability.\nSOURCE: https://github.com/faker-js/faker/blob/next/CONTRIBUTING.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n/** This is a bad JSDoc description. */\nfunction foo() {\n  // implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Using Faker with CDN/Deno\nDESCRIPTION: This code snippet shows how to import and use Faker.js via a CDN in environments like Deno. It imports the library from esm.sh and generates random data.\nSOURCE: https://github.com/faker-js/faker/blob/next/docs/guide/usage.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { faker } from 'https://esm.sh/@faker-js/faker';\n\nconst randomName = faker.person.fullName(); // Willie Bahringer\nconst randomEmail = faker.internet.email(); // Tomasa_Ferry14@hotmail.com\n```\n\n----------------------------------------\n\nTITLE: Commit Message Example 13 (Breaking Change) - Shell\nDESCRIPTION: Example of a valid commit message for a breaking change: removing Node.js v12 support with the 'build!' type (note the exclamation mark).\nSOURCE: https://github.com/faker-js/faker/blob/next/CONTRIBUTING.md#_snippet_31\n\nLANGUAGE: shell\nCODE:\n```\nbuild!: remove node v12 support\n```\n\n----------------------------------------\n\nTITLE: Custom Faker Instance with Mersenne32 Randomizer\nDESCRIPTION: This snippet shows how to create a custom Faker instance with the Mersenne32 randomizer to keep the old behavior of v8. This is useful for maintaining compatibility with seeded tests that rely on the previous random number generation.\nSOURCE: https://github.com/faker-js/faker/blob/next/docs/guide/upgrading.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Faker,\n  generateMersenne32Randomizer, // < v9 default\n  generateMersenne53Randomizer, // > v9 default\n} from '@faker-js/faker';\n\nconst faker = new Faker({\n  randomizer: generateMersenne32Randomizer(),\n  ...\n});\n```\n\n----------------------------------------\n\nTITLE: Multiline JSDoc Example - Typescript\nDESCRIPTION: This code snippet shows the preferred multiline JSDoc style.  Even for simple functions, multiline JSDocs are preferred for better readability and easier tracking of changes in Git.\nSOURCE: https://github.com/faker-js/faker/blob/next/CONTRIBUTING.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * This is a good JSDoc description.\n */\nfunction foo() {\n  // implementation\n}\n```\n\n----------------------------------------\n\nTITLE: JSDoc with Parameter Description and Default Value - Typescript\nDESCRIPTION: This snippet demonstrates how to document a function parameter with a default value in JSDoc. The default value should be explicitly mentioned at the end of the parameter description.\nSOURCE: https://github.com/faker-js/faker/blob/next/CONTRIBUTING.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * This is a good JSDoc description.\n *\n * @param bar this is a parameter description. Defaults to `0`.\n */\nfunction foo(bar: number = 0) {\n  // implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Iterating through all Faker.js locales\nDESCRIPTION: This snippet shows how to iterate through all available locales in Faker.js using `Object.keys(allFakers)` and attempt to generate a sample name for each locale.  It handles potential errors that may occur in some locales.\nSOURCE: https://github.com/faker-js/faker/blob/next/docs/guide/localization.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { allFakers } from '@faker-js/faker';\n\nfor (let key of Object.keys(allFakers)) {\n  try {\n    console.log(\n      `In locale ${key}, a sample name is ${allFakers[key].person.fullName()}`\n    );\n  } catch (e) {\n    console.log(`In locale ${key}, an error occurred: ${e}`);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: faker.color.rgb() with an unexpected format value\nDESCRIPTION: This example shows the change in behavior of the `faker.color.rgb()` method when an unexpected value is provided for the `format` property. In Faker v8, it would fallback to a default value, while in Faker v9, it now returns `undefined`.\nSOURCE: https://github.com/faker-js/faker/blob/next/docs/guide/upgrading.md#_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nfaker.color.rgb({ format: 'unexpectedvalue' });\n// in Faker v8, is [110, 82, 190] like { format: \"decimal\" }\n// in Faker v9, is undefined\n```\n\n----------------------------------------\n\nTITLE: Handling Not-Applicable Data Errors in Faker.js\nDESCRIPTION: This example demonstrates an error scenario where a locale does not have applicable data (e.g., zip codes in Hong Kong). It showcases how Faker.js explicitly sets such data to `null` and provides a method to override this behavior using custom locales.\nSOURCE: https://github.com/faker-js/faker/blob/next/docs/guide/localization.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { fakerEN_HK } from '@faker-js/faker';\n\nconsole.log(fakerEN_HK.location.zipCode()); // Error\n```\n\n----------------------------------------\n\nTITLE: Improper JSDoc Example - Typescript\nDESCRIPTION: This snippet illustrates an incorrect JSDoc format according to Faker.js guidelines.  It lacks a detailed description and uses the `@return` tag instead of a more descriptive explanation of the function's purpose.\nSOURCE: https://github.com/faker-js/faker/blob/next/CONTRIBUTING.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * This is a bad JSDoc description.\n *\n * @return foo\n */\nfunction foo(options: { test: string }) {\n  // implementation\n}\n```\n\n----------------------------------------\n\nTITLE: arrayElement with undefined arg (Old)\nDESCRIPTION: Demonstrates how `faker.helpers.arrayElement` used to behave when called with `undefined`.\nSOURCE: https://github.com/faker-js/faker/blob/next/docs/guide/upgrading.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nfaker.helpers.arrayElement(undefined); // FakerError: Calling `faker.helpers.arrayElement()` without arguments is no longer supported.\n```\n\n----------------------------------------\n\nTITLE: Replacing faker.helpers.unique (Old)\nDESCRIPTION: Demonstrates how `faker.helpers.unique` was used before v9 for generating unique values.\nSOURCE: https://github.com/faker-js/faker/blob/next/docs/guide/upgrading.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// OLD\nconst name = faker.helpers.unique(faker.person.firstName);\n```\n\n----------------------------------------\n\nTITLE: arrayElement with undefined arg (New)\nDESCRIPTION: Shows new behavior of `faker.helpers.arrayElement` when called with `undefined`.  It throws a JS native error instead of a FakerError.\nSOURCE: https://github.com/faker-js/faker/blob/next/docs/guide/upgrading.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nfaker.helpers.arrayElement(undefined); // TypeError: Cannot read properties of undefined (reading 'length')\n```\n\n----------------------------------------\n\nTITLE: Incorrect usage of faker.helpers.multiple with faker.person.firstName\nDESCRIPTION: This snippet illustrates an incorrect way of using `faker.helpers.multiple` with `faker.person.firstName`. Passing `faker.person.firstName` directly to `faker.helpers.multiple` results in a type error in Typescript because the function signature is incompatible.\nSOURCE: https://github.com/faker-js/faker/blob/next/docs/guide/upgrading.md#_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nfaker.helpers.multiple(faker.person.firstName, ...); // ❗\n// In Typescript, this is now a compile time error\n// Argument of type '(sex?: \"female\" | \"male\" | undefined) => string'\n// is not assignable to parameter of type '(v: unknown, index: number) => unknown'.\n```\n\n----------------------------------------\n\nTITLE: Replacing replaceSymbolWithNumber (Old)\nDESCRIPTION: Demonstrates the deprecated `faker.helpers.replaceSymbolWithNumber` method. This method was used to replace '#' symbols with digits and '!' symbols with digits greater than or equal to 2.\nSOURCE: https://github.com/faker-js/faker/blob/next/docs/guide/upgrading.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// old\nfaker.helpers.replaceSymbolWithNumber('#####-##'); // '04812-67'\n```\n\n----------------------------------------\n\nTITLE: Defining a User Interface (TS)\nDESCRIPTION: This TypeScript code defines an interface named `User` with various properties and types.  It also includes type definitions for `SexType` and `SubscriptionTier`.\nSOURCE: https://github.com/faker-js/faker/blob/next/docs/guide/usage.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { SexType } from '@faker-js/faker';\n\ntype SubscriptionTier = 'free' | 'basic' | 'business';\n\ninterface User {\n  _id: string;\n  avatar: string;\n  birthday: Date;\n  email: string;\n  firstName: string;\n  lastName: string;\n  sex: SexType;\n  subscriptionTier: SubscriptionTier;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting a Default Reference Date (TS)\nDESCRIPTION: This TypeScript code demonstrates how to set a default reference date to be used for all future calls of `faker.date.*`. This facilitates the creation of deterministic results when using date-related data generation.\nSOURCE: https://github.com/faker-js/faker/blob/next/docs/guide/usage.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// affects all future faker.date.* calls\nfaker.setDefaultRefDate('2023-01-01T00:00:00.000Z');\n```\n\n----------------------------------------\n\nTITLE: Replacing replaceSymbolWithNumber with '!' (Old)\nDESCRIPTION: Demonstrates the deprecated `faker.helpers.replaceSymbolWithNumber` method to replace '!#####' with digits, including using '!' symbol.\nSOURCE: https://github.com/faker-js/faker/blob/next/docs/guide/upgrading.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// old\nfaker.helpers.replaceSymbolWithNumber('!#####'); // '123152'\n```\n\n----------------------------------------\n\nTITLE: Localized Faker Import Example (v9)\nDESCRIPTION: This snippet shows how to import localized Faker instances from the root of the package in v9. This allows for better tree shaking, only including the specified locales in the bundle.\nSOURCE: https://github.com/faker-js/faker/blob/next/docs/guide/upgrading.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { fakerDE, fakerES, fakerFR } from '@faker-js/faker';\n```\n\n----------------------------------------\n\nTITLE: Replacing replaceSymbolWithNumber with '!' (New)\nDESCRIPTION: Shows how to replace the deprecated `faker.helpers.replaceSymbolWithNumber` using string.replace and faker.string.numeric, including replacing the '!' symbol with digits greater than or equal to 2.\nSOURCE: https://github.com/faker-js/faker/blob/next/docs/guide/upgrading.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// new\n'!#####'\n  .replace(/#+/g, (m) => faker.string.numeric(m.length))\n  .replace(/!+/g, (m) =>\n    faker.string.numeric({ length: m.length, exclude: ['0', '1'] })\n  );\n```\n\n----------------------------------------\n\nTITLE: Replacing regexpStyleStringParse (Old)\nDESCRIPTION: Illustrates the usage of the deprecated `faker.helpers.regexpStyleStringParse` method, which parses a regular expression-like string.\nSOURCE: https://github.com/faker-js/faker/blob/next/docs/guide/upgrading.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nfaker.helpers.regexpStyleStringParse('a{3,6}'); // aaaaa\n```\n\n----------------------------------------\n\nTITLE: Replacing regexpStyleStringParse with range (Old)\nDESCRIPTION: Shows usage of deprecated `faker.helpers.regexpStyleStringParse` with range.\nSOURCE: https://github.com/faker-js/faker/blob/next/docs/guide/upgrading.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nfaker.helpers.regexpStyleStringParse('a{3,6}[1-100]'); // \"aaaa53\", etc.\n```\n\n----------------------------------------\n\nTITLE: Replacing faker.helpers.unique with parameters (Old)\nDESCRIPTION: Illustrates usage of `faker.helpers.unique` with parameters.\nSOURCE: https://github.com/faker-js/faker/blob/next/docs/guide/upgrading.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n// OLD\nconst stateCode = faker.helpers.unique(faker.location.state, [\n  {\n    abbreviated: true,\n  },\n]);\n```\n\n----------------------------------------\n\nTITLE: Replacing faker.helpers.unique with options (Old)\nDESCRIPTION: Demonstrates usage of `faker.helpers.unique` with options such as `maxRetries` and `maxTime`.\nSOURCE: https://github.com/faker-js/faker/blob/next/docs/guide/upgrading.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n// OLD\nconst city = faker.helpers.unique(faker.location.city, [], {\n  maxRetries: 100,\n  maxTime: 1000,\n});\n```\n\n----------------------------------------\n\nTITLE: Import German locale in Faker.js\nDESCRIPTION: This snippet demonstrates how to import the pre-built German locale in Faker.js using the `fakerDE` import.\nSOURCE: https://github.com/faker-js/faker/blob/next/docs/guide/localization.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { fakerDE as faker } from '@faker-js/faker'\n```\n\n----------------------------------------\n\nTITLE: Replacing replaceSymbolWithNumber (New)\nDESCRIPTION: Shows the replacement for `faker.helpers.replaceSymbolWithNumber` using `string.replace` and `faker.string.numeric`. This approach uses regular expressions to find the '#' and '!' characters, and then generates a random number string of the specified length.\nSOURCE: https://github.com/faker-js/faker/blob/next/docs/guide/upgrading.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// new\n'#####-##'.replace(/#+/g, (m) => faker.string.numeric(m.length));\n```\n\n----------------------------------------\n\nTITLE: Commit Message Example 1 - Shell\nDESCRIPTION: Example of a valid commit message:  introducing a new 'casing' option with the 'feat' type.  Following the format `type(scope): subject`\nSOURCE: https://github.com/faker-js/faker/blob/next/CONTRIBUTING.md#_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\nfeat: add casing option\n```\n\n----------------------------------------\n\nTITLE: Commit Message Example 2 - Shell\nDESCRIPTION: Example of a valid commit message:  extending the Hebrew locale with the 'feat' type and 'locale' scope. Following the format `type(scope): subject`\nSOURCE: https://github.com/faker-js/faker/blob/next/CONTRIBUTING.md#_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\nfeat(locale): extend Hebrew (he)\n```\n\n----------------------------------------\n\nTITLE: Commit Message Example 4 - Shell\nDESCRIPTION: Example of a valid commit message: adding a naming convention rule with the 'chore' type. No user-affected code changes were made.\nSOURCE: https://github.com/faker-js/faker/blob/next/CONTRIBUTING.md#_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\nchore: add naming convention rule\n```\n\n----------------------------------------\n\nTITLE: Commit Message Example 8 - Shell\nDESCRIPTION: Example of a valid commit message: allowing breaking change commits with the 'ci' type, indicating changes to continuous integration.\nSOURCE: https://github.com/faker-js/faker/blob/next/CONTRIBUTING.md#_snippet_26\n\nLANGUAGE: shell\nCODE:\n```\nci: allow breaking change commits\n```\n\n----------------------------------------\n\nTITLE: Commit Message Example 10 - Shell\nDESCRIPTION: Example of a valid commit message: reworking the bug-report template with the 'infra' type, indicating changes to infrastructure-related things.\nSOURCE: https://github.com/faker-js/faker/blob/next/CONTRIBUTING.md#_snippet_28\n\nLANGUAGE: shell\nCODE:\n```\ninfra: rework bug-report template\n```\n\n----------------------------------------\n\nTITLE: Commit Message Example 12 (Breaking Change) - Shell\nDESCRIPTION: Example of a valid commit message for a breaking change: removing the faker default export with the 'refactor!' type (note the exclamation mark).\nSOURCE: https://github.com/faker-js/faker/blob/next/CONTRIBUTING.md#_snippet_30\n\nLANGUAGE: shell\nCODE:\n```\nrefactor!: remove faker default export\n```\n\n----------------------------------------\n\nTITLE: Commit Message Example 14 (Release) - Shell\nDESCRIPTION: Example of a valid commit message for a release: chore(release): 7.4.0. This indicates a release PR and the scope is 'release'.\nSOURCE: https://github.com/faker-js/faker/blob/next/CONTRIBUTING.md#_snippet_32\n\nLANGUAGE: shell\nCODE:\n```\nchore(release): 7.4.0\n```\n\n----------------------------------------\n\nTITLE: Vue Component Setup\nDESCRIPTION: This snippet sets up a Vue component using the `<script setup>` syntax. It imports the `TeamPage.vue` component for rendering.\nSOURCE: https://github.com/faker-js/faker/blob/next/docs/about/team.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport TeamPage from './team/TeamPage.vue'\n</script>\n\n<TeamPage />\n```\n\n----------------------------------------\n\nTITLE: Vue Component Setup\nDESCRIPTION: This code snippet sets up a Vue.js component. It imports the ApiIndex component from './ApiIndex.vue' to be used within the page. This setup allows for dynamic rendering of the API index within the page.\nSOURCE: https://github.com/faker-js/faker/blob/next/docs/api/index.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport ApiIndex from './ApiIndex.vue'\n</script>\n\n<ApiIndex />\n```\n\n----------------------------------------\n\nTITLE: Running Documentation Development Server - Shell\nDESCRIPTION: This command starts the documentation development server, allowing for interactive development and testing of documentation changes.\nSOURCE: https://github.com/faker-js/faker/blob/next/CONTRIBUTING.md#_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\npnpm run docs:dev\n```"
  }
]