[
  {
    "owner": "syslog-ng",
    "repo": "syslog-ng",
    "content": "TITLE: Creating an Asynchronous LogSource with asyncio in Python\nDESCRIPTION: This Python snippet demonstrates implementing a syslog-ng LogSource plugin using the asyncio library to concurrently generate and push log messages at different intervals. Dependencies include syslog-ng's Python API (LogSource, LogMessage) and the Python asyncio module. The MySource class manages two coroutine sequences for generating messages every second and every 1.5 seconds, respectively, and handles graceful cancellation. It expects to be used as a syslog-ng Python source, and illustrates advanced asynchronous integration patterns for plugin development.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/python-modules/README.md#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom syslogng import LogSource\nfrom syslogng import LogMessage\nimport asyncio\n\nclass MySource(LogSource):\n    cancelled = False\n\n    def run(self):\n        asyncio.run(self.main())\n\n    async def main(self):\n        await asyncio.gather(self.sequence1(), self.sequence2())\n\n    async def sequence1(self):\n        while not self.cancelled:\n            await asyncio.sleep(1)\n            self.post_message(LogMessage(\"message1\"))\n\n    async def sequence2(self):\n        while not self.cancelled:\n            await asyncio.sleep(1.5)\n            self.post_message(LogMessage(\"message2\"))\n\n    def request_exit(self):\n        self.cancelled = True\n\n```\n\n----------------------------------------\n\nTITLE: Calling Python Template Function from External Module in syslog-ng\nDESCRIPTION: Configures syslog-ng to use a Python function (`template_function`) defined in an external module (`mytemplate`). It calls this function from within a file destination's template using the dotted notation `$(python mytemplate.template_function)`. Syslog-ng automatically imports the `mytemplate` module when encountering this syntax.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/python-modules/README.md#_snippet_2\n\nLANGUAGE: syslog-ng-config\nCODE:\n```\n@version: 4.0\n\nlog {\n    source { tcp(port(2000)); };\n    destination { file(\"logfile\" template(\"$ISODATE $(python mytemplate.template_function)\")); };\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Local Logging - syslog-ng Config\nDESCRIPTION: Configures syslog-ng to receive local system logs from /dev/log (or systemd forwarding) and write all messages to /var/log/syslog. Requires the 'scl.conf' include file and compatible version of syslog-ng. No custom parameters except output file path; input source uses system() and output uses file(). Input: system log messages; Output: all system logs routed to /var/log/syslog. Limitation: routes all logs to a single file without parsing or filtering.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/README.md#_snippet_0\n\nLANGUAGE: config\nCODE:\n```\n@version: current\\n@include \\\"scl.conf\\\"\\n\\nlog {\\n\\tsource { system(); };\\n\\tdestination { file(\\\"/var/log/syslog\\\"); };\\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Elasticsearch Data Stream Destination in syslog-ng (config)\nDESCRIPTION: This snippet demonstrates how to configure an elasticsearch-datastream() destination in syslog-ng to send logs directly to an Elasticsearch data stream endpoint. The configuration requires specifying the Elasticsearch endpoint URL, as well as user authentication details (user and password). Input is log messages from syslog-ng, and output is their ingestion into the specified Elasticsearch data stream via the _bulk API. Ensure the destination URL, and credentials are correct and have the necessary privileges for data stream ingestion.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/NEWS.md#_snippet_0\n\nLANGUAGE: config\nCODE:\n```\nelasticsearch-datastream(\n  url(\"https://elastic-endpoint:9200/my-data-stream/_bulk\")\n  user(\"elastic\")\n  password(\"ba3DI8u5qX61We7EP748V8RZ\")\n);\n```\n\n----------------------------------------\n\nTITLE: Patching Log Priority Parsing in syslog-ng src/log.c (C/diff)\nDESCRIPTION: This patch addresses a remote DoS vulnerability (BB-2000/01) in syslog-ng's `src/log.c`. It modifies the log message parsing logic by adding a check (`if (left)`) to ensure the remaining length (`left`) is positive before processing the character immediately following the priority tag's closing '>'. This prevents `left` from becoming negative, mitigating a segmentation fault vulnerability when handling malformed log messages.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/doc/security/dos-2000-11-22.txt#_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\ndiff -urN syslog-ng-1.4.8/src/log.c syslog-ng-1.4.9/src/log.c\n--- syslog-ng-1.4.8/src/log.c   Tue Oct 10 15:05:52 2000\n+++ syslog-ng-1.4.9/src/log.c   Wed Nov 22 16:45:11 2000\n@@ -67,8 +67,10 @@\n                        left--;\n                }\n                lm->pri = pri;\n-               src++;\n-               left--;\n+               if (left) {\n+                       src++;\n+                       left--;\n+               }\n        }\n        else {\n                lm->pri = LOG_USER | LOG_NOTICE;\n```\n\n----------------------------------------\n\nTITLE: Configuring Templated Header Values for Loki Destination - Config\nDESCRIPTION: This configuration illustrates setting a header with a template in the loki() destination of syslog-ng. syslog-ng must support Loki destination and value templating in header arguments. The header() parameter can interpolate values, here using a macro for per-message attributes. Input is structured log messages; output is log events sent to Loki with custom headers generated from the template. Any macros or variables referenced must be available in the context of message processing.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/news/feature-5184.md#_snippet_1\n\nLANGUAGE: config\nCODE:\n```\ndestination d_loki {\n    loki(\n        url(\"https://loki.example:3100/loki/api/v1/push\")\n        header(\"X-Trace-Id\", \"${trace_id}\")\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling RFC6587 Auto-Detection in syslog-ng Source\nDESCRIPTION: This configuration snippet demonstrates how to enable automatic detection of RFC6587 octet-count based framing for a `syslog()` source in `syslog-ng`. Using `transport(auto)` within the source definition allows the server to adapt to senders using octet-counting, potentially resolving protocol mismatches.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/news/feature-5322.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ntransport(auto)\n```\n\n----------------------------------------\n\nTITLE: Configuring syslog-ng to Forward Apache Logs to Remote Host - syslog-ng\nDESCRIPTION: This syslog-ng configuration receives logs from an Apache server (by reading /var/log/apache2/access.log) and forwards them to a remote syslog server on IP 1.2.3.4, TCP port 514. The configuration defines a file source, a TCP destination, and sets up a log path connecting the two. Place this configuration in syslog-ng.conf for use with the relevant Docker container.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/docker/README.md#_snippet_3\n\nLANGUAGE: syslog-ng\nCODE:\n```\nsource s_apache {\n  file(\"/var/log/apache2/access.log\");\n};\n\ndestination d_remote {\n  tcp(\"1.2.3.4\" port(514));\n};\n\nlog {\n  source(s_apache);\n  destination(d_remote);\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring syslog-ng to Use Custom Python Destination Driver\nDESCRIPTION: Configures a syslog-ng destination named `whatever` to use a custom Python destination driver. The `python()` destination block specifies the class using the `class()` option with dotted notation (`mydestination.MyDestination`), instructing syslog-ng to load the `MyDestination` class from the `mydestination` module.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/python-modules/README.md#_snippet_5\n\nLANGUAGE: syslog-ng-config\nCODE:\n```\ndestination whatever {\n    python(class(mydestination.MyDestination));\n};\n```\n\n----------------------------------------\n\nTITLE: Adding CSV Parser Unit Tests using CMake `add_unit_test` Macro\nDESCRIPTION: These CMake commands define multiple unit tests for a `csvparser` component using the `add_unit_test` macro. Each line specifies the testing framework (CRITERION or LIBTEST), a unique test target name (e.g., `test_csvparser`, `test_csvparser_from_config`, `test_csvparser_perf`, `test_csvparser_statistics`), and declares a dependency on the `csvparser` target. This setup integrates the tests into the syslog-ng build process.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/csvparser/tests/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_unit_test(CRITERION TARGET test_csvparser DEPENDS csvparser)\nadd_unit_test(LIBTEST CRITERION TARGET test_csvparser_from_config DEPENDS csvparser)\nadd_unit_test(CRITERION TARGET test_csvparser_perf DEPENDS csvparser)\nadd_unit_test(CRITERION TARGET test_csvparser_statistics DEPENDS csvparser)\n```\n\n----------------------------------------\n\nTITLE: Configuring Syslog-ng Destination for Kafka (Syslog-ng Config)\nDESCRIPTION: This syslog-ng configuration defines a source `s_system` to capture system logs and a destination `d_kafka` to send them to a Kafka topic named \"test\". It includes rewrite rules to structure the log data into a format resembling Logstash's JSON event layout (`.eventv1.*`) before sending it using the `kafka-c` driver, configured to connect to `localhost:9092`. The message is formatted using `format-json`. Requires `librdkafka` to be installed and linked during syslog-ng compilation.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/kafka/README.md#_snippet_0\n\nLANGUAGE: syslog-ng\nCODE:\n```\n```\nsource s_system {\n  system();\n};\n\ndestination d_kafka {\n  channel {\n    rewrite {\n      set(\"${HOST}\"    value(\".eventv1.host\"));\n      set(\"1\"          value(\".eventv1.@version\"));\n      set(\"${ISODATE}\" value(\".eventv1.@timestamp\") condition(\"${.eventv1.@timestamp}\" eq \"\"));\n      set(\"${MESSAGE}\" value(\".eventv1.message\")    condition(\"${.eventv1.message}\" eq \"\"));\n      set(\"${MSG}\"     value(\".eventv1.message\")    condition(\"${.eventv1.message}\" eq \"\"));\n      set(\"generic\"    value(\".eventv1.type\")       condition(\"${.eventv1.type}\" eq \"\"));\n    };\n    destination {\n      kafka-c(config(metadata.broker.list(\"localhost:9092\")\n                       queue.buffering.max.ms(\"1000\"))\n            topic(\"test\")\n            message(\"$(format-json --key .eventv1.* --rekey .eventv1.* --shift 9)\"));\n    };\n  };\n};\n\nlog {\n  source(s_system);\n  destination(d_kafka);\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Example Threaded Diskq Source in syslog-ng\nDESCRIPTION: This configuration snippet demonstrates how to define and use the `example-diskq-source` plugin within a syslog-ng configuration. It sets up a source named `s_diskq` that utilizes the custom plugin to read from the disk-buffer file located at `/var/disk-buffers/syslog-ng-00000.rqf`. The `log` statement then routes messages collected by `s_diskq` to the standard output device (`/dev/stdout`) for inspection. This configuration is intended as a usage example for the sample plugin.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/examples/sources/threaded-diskq-source/README.md#_snippet_0\n\nLANGUAGE: syslog-ng\nCODE:\n```\nsource s_diskq {\n  example-diskq-source(file(\"/var/disk-buffers/syslog-ng-00000.rqf\"));\n};\n\nlog {\n  source(s_diskq);\n\n  destination {\n    file(\"/dev/stdout\");\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Authentication for BigQuery Destination in syslog-ng\nDESCRIPTION: This configuration snippet demonstrates how to use the `auth()` option within the `bigquery()` destination driver in `syslog-ng` to specify Transport Layer Security (TLS) authentication. It requires providing paths to the Certificate Authority file (`ca-file`), the client's private key file (`key-file`), and the client's certificate file (`cert-file`) to establish a secure connection to Google BigQuery.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/news/feature-5174-2.md#_snippet_0\n\nLANGUAGE: config\nCODE:\n```\n``` config\nbigquery (\n    ...\n    auth(\n        tls(\n            ca-file(\"/path/to/ca.pem\")\n            key-file(\"/path/to/key.pem\")\n            cert-file(\"/path/to/cert.pem\")\n        )\n    )\n);\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Keep-Alive Options for opentelemetry() in syslog-ng\nDESCRIPTION: This configuration snippet demonstrates setting keep-alive parameters for the `opentelemetry()` destination (and similarly for `syslog-ng-otlp()`). The `keep-alive()` block contains `time()` (keep-alive packet interval in milliseconds), `timeout()` (timeout for keep-alive pings in milliseconds), and `max-pings-without-data()` (maximum keep-alive pings without data before closing the connection, 0 means infinite).\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/news/feature-5174-1.md#_snippet_0\n\nLANGUAGE: config\nCODE:\n```\n``` config\nopentelemetry(\n    ...\n    keep-alive(time(20000) timeout(10000) max-pings-without-data(0))\n);\n```\n```\n\n----------------------------------------\n\nTITLE: Adding Unit Test for Transport Mapper (CMake)\nDESCRIPTION: This CMake snippet registers a unit test target named 'test-transport-mapper', sets its dependency on the 'afsocket' component, and includes the required source files 'test-transport-mapper.c' and 'transport-mapper-lib.c'. Requires the Criterion testing framework and that afsocket is available as a dependency in the build. This configuration enables automated execution of transport mapper tests through the CMake testing infrastructure.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/afsocket/tests/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_unit_test(CRITERION\n  TARGET test-transport-mapper\n  DEPENDS afsocket\n  SOURCES test-transport-mapper.c transport-mapper-lib.c)\n```\n\n----------------------------------------\n\nTITLE: Configuring and Using the example-msg-generator Source in syslog-ng\nDESCRIPTION: This syslog-ng configuration demonstrates the use of the `example-msg-generator` source. It sets the global option `use-uniqid` to `yes`, defines a source `s_generator` using `example-msg-generator` with a specific `template` (including timestamp, hostname, and unique ID) and a generation `freq`uency of 0.5 seconds. Finally, it defines a log path that takes messages from `s_generator` and sends them to the standard output file (`/dev/stdout`). Note that the `template` option is source-side, limiting available macros.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/examples/sources/msg-generator/README.md#_snippet_0\n\nLANGUAGE: syslog-ng\nCODE:\n```\noptions {\n  use-uniqid(yes);\n};\n\nsource s_generator {\n  example-msg-generator(\n    template(\"-- ${ISODATE} ${LOGHOST} ${UNIQID} Generated message. --\")\n    freq(0.5)\n  );\n};\n\nlog {\n  source(s_generator);\n\n  destination {\n    file(\"/dev/stdout\");\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling Program Name Validation in a syslog-ng Network Source\nDESCRIPTION: This configuration snippet shows how to enable program name validation (`check-program`) alongside hostname validation (`check-hostname`) for a network source in syslog-ng. When enabled, program names within incoming RFC3164 messages will be checked against specific character rules and the requirement of containing at least one alphabetical character.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/news/feature-5264.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nsource { network(flags(check-hostname, check-program)); };\n```\n\n----------------------------------------\n\nTITLE: Embedding Python Template Function in syslog-ng Configuration\nDESCRIPTION: Demonstrates embedding a Python function (`template_function`) directly within a syslog-ng configuration using the top-level `python {}` block. This function accepts a `LogMessage` object (`msg`), concatenates message header and content, and returns a byte string. It's subsequently invoked within a file destination's template using `$(python template_function)`.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/python-modules/README.md#_snippet_0\n\nLANGUAGE: syslog-ng-config\nCODE:\n```\n@version: 4.0\n\npython {\n\ndef template_function(msg):\n    return b\"Hello World from Python! Original message: \" + msg['MSGHDR'] + msg['MESSAGE']\n\n\n};\n\nlog {\n    source { tcp(port(2000)); };\n    destination { file(\"logfile\" template(\"$ISODATE $(python template_function)\")); };\n};\n```\n\n----------------------------------------\n\nTITLE: Parsing Apache Logs with csv-parser and date-parser - syslog-ng Configuration\nDESCRIPTION: This configuration snippet creates a parser named p_apache_parser, which first uses the csv-parser to split incoming log lines into specified columns corresponding to the Apache Common Log Format. It applies options to handle quoted fields and whitespace, and then applies a date-parser to extract timestamp fields using a custom strftime format and a template. Dependencies include syslog-ng with support for csv-parser and date-parser. Key parameters are the columns list, delimiters, quote pairs, format, and template. Input must match the expected Apache log line field order; the output is structured log fields and date macros for further use.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/timestamp/README.md#_snippet_1\n\nLANGUAGE: syslog-ng configuration\nCODE:\n```\nparser p_apache_parser {\n  csv-parser(columns(\"APACHE.CLIENT_IP\", \"APACHE.IDENT_NAME\", \"APACHE.USER_NAME\",\n                     \"APACHE.TIMESTAMP\", \"APACHE.REQUEST_URL\", \"APACHE.REQUEST_STATUS\",\n                     \"APACHE.CONTENT_LENGTH\", \"APACHE.REFERER\", \"APACHE.USER_AGENT\",\n                     \"APACHE.PROCESS_TIME\", \"APACHE.SERVER_NAME\")\n             flags(escape-double-char,strip-whitespace)\n             delimiters(\" \")\n             quote-pairs('\"\"[]'));\n\n  date-parser(\n       format(\"%d/%b/%Y:%H:%M:%S %Z\")\n       template(\"${APACHE.TIMESTAMP}\"));\n};\n```\n\n----------------------------------------\n\nTITLE: Adding a Criterion Unit Test Target in CMake\nDESCRIPTION: This CMake command adds a unit test named `test-debugger` to the build system. It specifies `CRITERION` as the testing framework type and `test-debugger` as the target executable that contains the tests. This command relies on a custom CMake function or macro named `add_unit_test` being defined elsewhere in the build system, likely tailored for integrating Criterion tests.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/debugger/tests/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_unit_test(CRITERION TARGET test-debugger)\n```\n\n----------------------------------------\n\nTITLE: Explicitly Reloading Python Module on syslog-ng Reload\nDESCRIPTION: Demonstrates using the `importlib.reload()` function within a `python {}` block to force a reload of an imported Python module (`mymodule`) every time the syslog-ng configuration is reloaded (e.g., via `syslog-ng-ctl reload`). This ensures changes within the module are applied without a full syslog-ng restart and resets the module's state.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/python-modules/README.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\npython {\n\nimport mymodule\nimport importlib\n\n# reload mymodule every time syslog-ng reloads\nimportlib.reload(mymodule)\n\n};\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies with Version Constraints - Python\nDESCRIPTION: This snippet defines a dependency specification file for Python projects, listing required packages and precise version constraints to guarantee environment consistency and Python 3.6/CentOS 7 compatibility. Inline comments clarify the reason for certain constraints. This file is typically used with package management tools such as pip (e.g., via 'pip install -r requirements.txt'). Each line specifies a package, with its version requirements and optional explanatory comment. Inputs are package names and version constraints; the output is a set of installed dependencies matching these constraints. The main limitation is compatibility with Python 3.6 and CentOS 7.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/requirements.txt#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nboto3<=1.28.33     # <= is used for python3.6 compatibility on centos-7\\nbotocore<=1.31.33  # <= is used for python3.6 compatibility on centos-7\\ncachetools==4.2.4\\ncertifi>=2023.7.22\\ncharset-normalizer==2.0.12\\ngoogle-auth==2.13.0\\nidna==3.7\\nkubernetes==25.3.0\\noauthlib==3.2.2\\npyasn1==0.4.8\\npyasn1-modules==0.2.8\\npython-dateutil==2.8.2\\nPyYAML==6.0.1\\nrequests>=2.27.1,<2.33\\nrequests-oauthlib==1.3.1\\nrsa==4.9\\nsix==1.16.0\\nurllib3==1.26.*\\nwebsocket-client==1.3.1\\nply==3.11\n```\n\n----------------------------------------\n\nTITLE: Declaring Unit Tests with Criterion Framework - CMake\nDESCRIPTION: This snippet demonstrates the declaration of multiple unit tests using the add_unit_test macro or function in CMake, integrating with the Criterion framework. Each call specifies a test target, optionally declares dependencies (e.g., LIBTEST), and occasionally sets additional dependencies needed for specific tests. Used in syslog-ng, these declarations ensure that distinct code units are automatically tested as part of the build process. Required: CMake, Criterion test framework, and the referenced targets must be defined elsewhere. Inputs include the test target and optional dependency tags; outputs are registered test cases discoverable by CTest or similar runners.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/tests/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_unit_test(CRITERION TARGET test_cfg_lexer_subst)\nadd_unit_test(CRITERION TARGET test_cfg_tree)\nadd_unit_test(CRITERION TARGET test_cfg_helpers)\nadd_unit_test(CRITERION TARGET test_parse_number)\nadd_unit_test(CRITERION TARGET test_reloc)\nadd_unit_test(CRITERION TARGET test_hostname)\nadd_unit_test(CRITERION LIBTEST TARGET test_rcptid)\nadd_unit_test(CRITERION LIBTEST TARGET test_lexer)\nadd_unit_test(CRITERION LIBTEST TARGET test_pragma)\nadd_unit_test(CRITERION TARGET test_lexer_block)\nadd_unit_test(CRITERION TARGET test_str_format)\nadd_unit_test(CRITERION TARGET test_str-utils)\nadd_unit_test(CRITERION TARGET test_string_list)\nadd_unit_test(LIBTEST CRITERION TARGET test_runid)\nadd_unit_test(CRITERION TARGET test_pathutils)\nadd_unit_test(CRITERION TARGET test_utf8utils)\nadd_unit_test(CRITERION TARGET test_userdb)\nadd_unit_test(LIBTEST CRITERION TARGET test_logqueue)\nadd_unit_test(CRITERION TARGET test_cache)\nadd_unit_test(CRITERION TARGET test_scratch_buffers)\nadd_unit_test(CRITERION TARGET test_messages)\nadd_unit_test(CRITERION TARGET test_atomic_gssize)\nadd_unit_test(CRITERION TARGET test_window_size_counter)\nadd_unit_test(CRITERION TARGET test_apphook)\nadd_unit_test(CRITERION TARGET test_dynamic_window)\nadd_unit_test(CRITERION TARGET test_logsource)\nadd_unit_test(LIBTEST CRITERION TARGET test_logscheduler)\nadd_unit_test(CRITERION LIBTEST TARGET test_persist_state)\nadd_unit_test(LIBTEST CRITERION TARGET test_matcher)\nadd_unit_test(LIBTEST CRITERION TARGET test_clone_logmsg)\nadd_unit_test(CRITERION TARGET test_serialize)\nadd_unit_test(LIBTEST CRITERION TARGET test_msgparse DEPENDS syslogformat)\nadd_unit_test(LIBTEST CRITERION TARGET test_dnscache)\nadd_unit_test(CRITERION TARGET test_findcrlf)\nadd_unit_test(CRITERION TARGET test_ringbuffer)\nadd_unit_test(CRITERION TARGET test_hostid)\nadd_unit_test(CRITERION TARGET test_zone)\nadd_unit_test(CRITERION TARGET test_logwriter DEPENDS syslogformat)\nadd_unit_test(CRITERION TARGET test_thread_wakeup)\nadd_unit_test(CRITERION TARGET test_generic_number)\n```\n\n----------------------------------------\n\nTITLE: Defining loggen Plugin Information Structure in C\nDESCRIPTION: This snippet shows how to implement the mandatory loggen_plugin_info struct for a custom plugin in C. The struct includes function pointers for plugin lifecycle management (start, stop), option registration, thread counting, a message generation callback, and a flag for framing requirements. Dependencies include loggen's plugin architecture, syslog-ng's conventions, and GModule dynamic loading. 'plugin_info' must be initialized with appropriate functions for plugin discovery and interoperability. The plugin must be built as a shared object (.so) file for use with loggen. Inputs come from loggen at runtime, outputs are managed by the provided callbacks.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/tests/loggen/loggen.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nplugin_info loggen_plugin_info =\n{\n  .name = \"my-plugin-name\",\n  .get_options_list = get_options,\n  .start_plugin = start,\n  .stop_plugin = stop,\n  .get_thread_count = get_thread_count,\n  .generate_message_func = generate_message,\n  .require_framing = FALSE\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring the `google-pubsub-grpc()` Destination in syslog-ng\nDESCRIPTION: This configuration snippet demonstrates how to set up the `google-pubsub-grpc()` destination in syslog-ng. It specifies the target Google Cloud project (`project()`), the Pub/Sub topic (`topic()`), the main log message content (`data()`), and custom message attributes (`attributes()`). Performance options like `workers()`, `batch-timeout()`, and `batch-lines()` are also configured. Note that `project()` and `topic()` options support templates.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/news/feature-5266.md#_snippet_0\n\nLANGUAGE: syslog-ng\nCODE:\n```\ngoogle-pubsub-grpc(\n  project(\"my_project\")\n  topic($topic)\n\n  data($MESSAGE)\n  attributes(\n    timestamp => $S_ISODATE,\n    host => $HOST,\n  )\n\n  workers(4)\n  batch-timeout(1000) # ms\n  batch-lines(1000)\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Python Destination Driver Class for syslog-ng\nDESCRIPTION: Provides the basic structure for a custom Python destination driver in a file (e.g., `mydestination.py`). It defines a class `MyDestination` inheriting from `syslogng.LogDestination`. The essential `send` method must be implemented; it receives a `LogMessage` object (`msg`) and should contain the logic to forward the message, returning `True` on success or `False` on failure.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/python-modules/README.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom syslogng import LogDestination\n\nclass MyDestination(LogDestination):\n    def send(self, msg):\n\treturn True\n\n```\n\n----------------------------------------\n\nTITLE: Configuring syslog-ng with TCP Source and Elasticsearch Destination\nDESCRIPTION: This syslog-ng configuration example sets up multiple sources (`s_local` using `internal()` and `s_network` using `tcp`) and an Elasticsearch destination (`d_elastic`). It configures the `elasticsearch2` driver with parameters like library directory, index/type naming patterns, time zone, client mode, and cluster URLs. A log statement directs messages from the network source to the Elasticsearch destination.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/java/README.md#_snippet_3\n\nLANGUAGE: syslog-ng\nCODE:\n```\n@version: 3.28\n\noptions {\n  threaded(yes);\n};\n\nsource s_local {\n        internal();\n};\n\nsource s_network {\n        tcp(port(5555));\n};\n\ndestination d_elastic {\n  elasticsearch2(\n    client-lib-dir(\"/usr/share/elasticsearch/lib/\")\n    index(\"syslog-${YEAR}.${MONTH}.${DAY}\")\n    type(\"syslog\")\n    time-zone(\"UTC\")\n    client-mode(\"http\")\n    cluster-url(\"http://node01:9200 http://node02:9200\")\n  );\n};\n\nlog {\n  source(s_network);\n  destination(d_elastic);\n  flags(flow-control);\n};\n\n```\n\n----------------------------------------\n\nTITLE: Configuring google-pubsub-grpc Destination with Service Account Key (syslog-ng)\nDESCRIPTION: This HOCON configuration snippet demonstrates how to define a `google-pubsub-grpc` destination in syslog-ng. It specifies the Google Cloud project ('test'), the Pub/Sub topic ('test'), and configures authentication using a service account key file via the `auth(service-account(key(...)))` directive. Unlike the `http()` destination, the audience parameter is not required as it's automatically handled by the gRPC API.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/news/feature-5270.md#_snippet_0\n\nLANGUAGE: hocon\nCODE:\n```\ndestination {\n    google-pubsub-grpc(\n        project(\"test\")\n        topic(\"test\")\n        auth(service-account(key (\"path_to_service_account_key.json\")))\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Python Template Function in External Module for syslog-ng\nDESCRIPTION: Defines a Python function `template_function` within a separate Python module file (e.g., `mytemplate.py`). This function is designed to be used as a syslog-ng template function; it accepts a `LogMessage` object (`msg`) and returns a formatted byte string. The module file should be placed in a directory included in syslog-ng's Python path, such as `${sysconfdir}/python`.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/python-modules/README.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef template_function(msg):\n    return b\"Hello World from Python! Original message: \" + msg['MSGHDR'] + msg['MESSAGE']\n```\n\n----------------------------------------\n\nTITLE: Checking Java Module Dependencies in CMake\nDESCRIPTION: Validates prerequisites for building Java modules. It first checks if Java modules are enabled (`ENABLE_JAVA_MODULES`) but the core Java plugin (`ENABLE_JAVA`) is disabled, causing a fatal error. It then finds the Gradle build tool (version 3.4 or later) and ensures it's present if Java modules are enabled, also triggering a fatal error if not found.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/java-modules/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif (ENABLE_JAVA_MODULES AND NOT ENABLE_JAVA)\n  message(FATAL_ERROR \"Java based modules enabled, but the required syslog-ng Java plugin is disabled.\")\nendif ()\n\nfind_package (Gradle 3.4)\n\nif (ENABLE_JAVA_MODULES AND NOT GRADLE_FOUND)\n  message(FATAL_ERROR \"Java based modules enabled, but the required gardle dependency is not found.\")\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring syslog-ng Destination with Template Macro (plaintext)\nDESCRIPTION: This syslog-ng configuration snippet defines a log destination (`d_special_messages`) writing to `/var/log/messages`. It employs the `template` option to format log messages using macros like `$ISODATE`, `$HOST`, and `$MSG`, along with constant characters (spaces, newline). The advisory highlights that the buffer overflow vulnerability affects the expansion of such templates due to incorrect handling of constant characters during buffer size calculation.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/doc/security/bof-2002-09-27.txt#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ndestination d_special_messages { file(\"/var/log/messages\" template(\"$ISODATE $HOST $MSG\\n\")); };\n```\n\n----------------------------------------\n\nTITLE: Formatting syslog-ng-ctl Output in Shell\nDESCRIPTION: Demonstrates the use of the new --format (-m) parameter in the syslog-ng-ctl command to control the output format for stats and query commands. This allows flexible formatting in either key-value, CSV, or Prometheus formats, depending on the needs of the user or system integration. No extra dependencies are required, but syslog-ng-ctl version must support the --format/-m option and certain formats are restricted to specific commands, such as kv being currently available for query.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/news/feature-5248.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsyslog-ng-ctl stats --format kv\n# Output example: center.queued.processed=0\n\nsyslog-ng-ctl stats --format csv\n# Output example: center;;queued;a;processed;0\n\nsyslog-ng-ctl stats --format prometheus\n# Output example: syslogng_center_processed{stat_instance=\"queued\"} 0\n```\n\n----------------------------------------\n\nTITLE: Using Persist Class for Persistent State in Python syslog-ng Fetcher\nDESCRIPTION: This snippet demonstrates how to use the `Persist` class within a custom `LogFetcher` to maintain state across syslog-ng restarts. The `init` method initializes a `Persist` object with a name and default values. The `fetch` method retrieves a persistent counter, increments it, stores the new value back into the `Persist` object, and includes it in a generated log message.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/python-modules/README.md#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n```python\nclass MyFetcher(LogFetcher):\n\n    def init(self, options):\n        self.persist = Persist(\"MyFetcher_persistent_data\", defaults={\"counter\": 1})\n        return True\n\n    def fetch(self):\n        time.sleep(1)\n        counter = self.persist['counter']\n        self.persist['counter'] += 1\n        msg = LogMessage.parse(\"<5>2022-02-02T10:23:45+02:00 HOST program[pid]: foobar %d\" % counter, self.parse_options)\n        return self.SUCCESS, msg\n\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Unit Test 'test_linux_audit_scanner' in CMake\nDESCRIPTION: Defines a unit test named 'test_linux_audit_scanner' using the `add_unit_test` CMake function. This test uses the CRITERION framework and depends on the 'kvformat' module.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/kvformat/tests/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_unit_test(CRITERION TARGET test_linux_audit_scanner DEPENDS kvformat)\n```\n\n----------------------------------------\n\nTITLE: Configuring syslog-ng with Kafka Java Destination (syslog-ng-config)\nDESCRIPTION: A sample syslog-ng configuration file (version 3.28) demonstrating how to send logs to Kafka. It defines system/internal and TCP network sources, a local file destination for backup/debugging, and a Java destination (`d_java_0`) using the `mod-java` module. The Java destination is configured with the Kafka destination class, classpath, Kafka bootstrap servers, topic name ('mytopic'), message key (using the `$HOST` macro), send mode (async), message template, and an external properties file for additional Kafka settings. The log path routes messages from both sources to both the Kafka and file destinations.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/java-modules/common/README.md#_snippet_3\n\nLANGUAGE: syslog-ng-config\nCODE:\n```\n@version: 3.28\n@include \"scl.conf\"\n@module \"mod-java\"\n\nsource s_local {\n#       system();\n        internal();\n};\n\nsource s_network {\n        tcp(port(1514));\n};\n\ndestination d_local {\n        file(\"/tmp/messages\");\n};\n\ndestination d_java_0{\n  java(\n    class_name(\"org.syslog_ng.kafka.KafkaDestination\")\n    class_path(\"/home/btibi/work/syslog-ng-pe-project-5.4/install/lib/syslog-ng/java-modules/kafka.jar\")\n    option(\"kafka_bootstrap_servers\", \"127.0.0.1:9092\")\n    option(\"topic\", \"mytopic\")\n    option(\"key\", \"$HOST\")\n    option(\"sync_send\", \"false\")\n    option(\"template\", \"$MESSAGE\")\n    option(\"properties_file\", \"/home/btibi/work/syslog-ng-pe-project-5.4/install/etc/kafka.properties\")\n  );\n};\n\nlog {\n        source(s_local);\n        source(s_network);\n        destination(d_java_0);\n        destination(d_local);\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Unit Test 'test_filterx_func_parse_kv' in CMake\nDESCRIPTION: Defines a unit test named 'test_filterx_func_parse_kv' using the `add_unit_test` CMake function. This test is categorized as LIBTEST, uses the CRITERION framework, and depends on the 'kvformat' module, likely testing key-value parsing within filter functions.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/kvformat/tests/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_unit_test(LIBTEST CRITERION TARGET test_filterx_func_parse_kv DEPENDS kvformat)\n```\n\n----------------------------------------\n\nTITLE: Defining Unit Test 'test_format_welf' in CMake\nDESCRIPTION: Defines a unit test named 'test_format_welf' using the `add_unit_test` CMake function. This test is categorized as LIBTEST, uses the CRITERION framework, and depends on the 'syslogformat' and 'kvformat' modules.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/kvformat/tests/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_unit_test(LIBTEST CRITERION TARGET test_format_welf DEPENDS syslogformat kvformat)\n```\n\n----------------------------------------\n\nTITLE: Defining Disk Queue Unit Tests using CMake `add_unit_test`\nDESCRIPTION: This CMake code defines multiple unit tests related to disk queue functionality. Each line utilizes the `add_unit_test` macro, likely specific to the syslog-ng build system, to register a unit test. It specifies the testing framework (`CRITERION`), the type of test (`LIBTEST`), the name of the test executable (`TARGET`), and its library dependencies (`DEPENDS`). Key dependencies include `disk-buffer` for all tests, `pthread` for `test_diskq`, and `m` (math library) for `test_diskq_truncate`.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/diskq/tests/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_unit_test(CRITERION LIBTEST TARGET test_diskq DEPENDS pthread disk-buffer)\nadd_unit_test(CRITERION LIBTEST TARGET test_diskq_full DEPENDS disk-buffer)\nadd_unit_test(CRITERION LIBTEST TARGET test_reliable_backlog DEPENDS disk-buffer)\nadd_unit_test(CRITERION LIBTEST TARGET test_diskq_truncate DEPENDS m disk-buffer)\nadd_unit_test(CRITERION LIBTEST TARGET test_qdisk DEPENDS disk-buffer)\nadd_unit_test(CRITERION LIBTEST TARGET test_logqueue_disk DEPENDS disk-buffer)\nadd_unit_test(CRITERION LIBTEST TARGET test_diskq_counters DEPENDS disk-buffer)\n```\n\n----------------------------------------\n\nTITLE: Initializing InstantAckTracker for Immediate Acknowledgement in Python syslog-ng\nDESCRIPTION: This snippet shows the initialization of `InstantAckTracker` in the `init` method of a `LogFetcher`. It sets `self.message_acked` as the callback, which will be called as soon as a message is delivered by a destination or disk buffer, without guaranteeing the original order.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/python-modules/README.md#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n```python\n\nclass MyFetcher(LogFetcher):\n\n    ...\n\n    def init(self, options):\n        self.ack_tracker = InstantAckTracker(ack_callback=self.message_acked)\n        return True\n\n    def message_acked(self, acked_message_bookmark):\n        pass\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Templated Header Values for OpenTelemetry Destination - Config\nDESCRIPTION: This configuration snippet demonstrates how to use a template within the header() parameter of the opentelemetry() destination in syslog-ng. Requires syslog-ng with OpenTelemetry destination support and the ability to process template strings. The primary parameter is header(), whose value can now contain macros that are evaluated per message, allowing dynamic header content. Inputs are log messages; outputs are OpenTelemetry records with headers populated from the template.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/news/feature-5184.md#_snippet_0\n\nLANGUAGE: config\nCODE:\n```\ndestination d_otlp {\n    opentelemetry(\n        url(\"https://collector.example:4317\")\n        header(\"X-Correlation-Id\", \"${correlation_id}\")\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Python Parser Class for syslog-ng\nDESCRIPTION: Shows the structure for a custom Python parser class `MyParser` inheriting from `syslogng.LogParser`. The required `parse` method receives a read-writable `LogMessage` object (`msg`), allowing modification of its contents (e.g., adding name-value pairs like `msg['name'] = 'value'`). The method should return `True` if parsing was successful or `False` to indicate failure.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/python-modules/README.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n\nfrom syslogng import LogParser\n\nclass MyParser(LogParser):\n\n    def parse(self, msg):\n        msg['name'] = 'value'\n        return True\n```\n\n----------------------------------------\n\nTITLE: Conditional Module Inclusion and Early Termination for SQL Plugin - CMake\nDESCRIPTION: This snippet uses the module_switch macro to define a user-visible toggle for SQL plugin support based on the result of LIBDBI package detection. If SQL support is not enabled, it aborts further processing for this module with return(). This approach enforces dependency-based build logic and prevents unnecessary compilation of plugin code if dependencies are missing or disabled. Requires module_switch macro, ENABLE_SQL variable, and LIBDBI_FOUND presence.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/afsql/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nmodule_switch(ENABLE_SQL \\\"Enable SQL plugin\\\" LIBDBI_FOUND)\nif (NOT ENABLE_SQL)\n  return()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Enabling/Disabling JSON Module Build in CMake\nDESCRIPTION: This snippet uses a custom `module_switch` function/macro to define a CMake option `ENABLE_JSON` with the description \"Enable JSON plugin\". The default state of this option depends on whether the JSON-C library was found (`JSONC_FOUND`). If `ENABLE_JSON` evaluates to false after this switch (either because the user disabled it or JSON-C was not found), the script returns, skipping the rest of the JSON plugin configuration.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/json/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nmodule_switch(ENABLE_JSON \"Enable JSON plugin\" JSONC_FOUND)\nif (NOT ENABLE_JSON)\n  return()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Implementing Embedded Python LogFetcher Source in syslog-ng\nDESCRIPTION: Demonstrates defining a Python source driver class `MyFetcher` derived from `syslogng.LogFetcher` and embedding it within the syslog-ng configuration using a `python {}` block. The `fetch` method is periodically called by syslog-ng; in this example, it waits for 1 second, creates a `LogMessage` by parsing a static string, and returns the message and a success status. The configuration uses this class via the `python-fetcher` source driver.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/python-modules/README.md#_snippet_8\n\nLANGUAGE: syslog-ng-config\nCODE:\n```\n@version: 4.0\n\npython {\nfrom syslogng import LogFetcher\nfrom syslogng import LogMessage\nimport time\n\nclass MyFetcher(LogFetcher):\n    def fetch(self):\n        time.sleep(1)\n        msg = LogMessage.parse(\"<5>2022-02-02T10:23:45+02:00 HOST program[pid]: foobar\", self.parse_options)\n        return self.SUCCESS, msg\n\n};\n\n\nlog {\n    source { python-fetcher(class(MyFetcher)); };\n    destination { file(\"messages\"); };\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Criterion Unit Test 'test_conv' in CMake\nDESCRIPTION: This CMake command registers the 'test_conv' unit test for the 'LIBTEST' library within the build configuration. It indicates that the Criterion testing framework should be used for this test.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/timeutils/tests/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_unit_test(LIBTEST CRITERION TARGET test_conv)\n```\n\n----------------------------------------\n\nTITLE: Registering a Criterion Unit Test Target in CMake\nDESCRIPTION: This CMake command uses the `add_unit_test` function (likely a custom function or part of a framework module) to define a unit test target named `test_metrics_probe`. It specifies Criterion as the testing framework (`CRITERION`) and declares a build dependency on the `metrics-probe` target using `DEPENDS`. This ensures `metrics-probe` is built before the `test_metrics_probe` target.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/metrics-probe/tests/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_unit_test(CRITERION TARGET test_metrics_probe DEPENDS metrics-probe)\n```\n\n----------------------------------------\n\nTITLE: Adding Unit Tests for syslog-ng OTLP Integration Using CMake - CMake Language\nDESCRIPTION: This snippet registers a CRITERION-based test, test_syslog_ng_otlp, targeting syslog-ng's OTLP integration. It uses the test-syslog-ng-otlp.cpp source and includes files from OTEL_PROTO_BUILDDIR, with otel-cpp as a build dependency. This unit test is only added if not building for Apple or FreeBSD.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/grpc/otel/tests/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_unit_test (\n  CRITERION\n  TARGET test_syslog_ng_otlp\n  SOURCES test-syslog-ng-otlp.cpp\n  INCLUDES ${OTEL_PROTO_BUILDDIR}\n  DEPENDS otel-cpp)\n\n```\n\n----------------------------------------\n\nTITLE: Linking Source and Destination with Log Statement - syslog-ng Configuration\nDESCRIPTION: This log statement defines the flow of data from the configured source (s_apache) to the configured destination (d_file). It is the final step that binds source ingestion and destination output, ensuring that parsed Apache log entries make it into the output file. There are no additional dependencies beyond correct references to existing source and destination blocks. Input and output follow from the earlier configuration; the log statement's main limitation is that it does not apply further filters or processing.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/timestamp/README.md#_snippet_3\n\nLANGUAGE: syslog-ng configuration\nCODE:\n```\nlog {\n  source(s_apache);\n  destination(d_file);\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring the Redis Module Build in CMake\nDESCRIPTION: This CMake script manages the configuration and build process for the syslog-ng Redis module. It first checks for the Hiredis library dependency if Redis support is enabled (`ENABLE_REDIS` variable). Then, it uses a custom `module_switch` macro to define a build option (`ENABLE_REDIS`) allowing users to enable or disable the module, potentially defaulting based on whether Hiredis was found (`HIREDIS_FOUND`). If the module is disabled, the script returns early. Otherwise, it defines the list of C/H source files (`REDIS_SOURCES`) and uses another custom macro `add_module` to add the `redis` target to the build. This specifies its dependencies (Hiredis library and includes via `${HIREDIS_LIBRARIES}` and `${HIREDIS_INCLUDE_DIR}`), sources (`${REDIS_SOURCES}`), and potentially a related grammar file (`redis-grammar`).\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/redis/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif (NOT DEFINED ENABLE_REDIS OR ENABLE_REDIS)\n  find_package(Hiredis)\nendif()\n```\n\nLANGUAGE: cmake\nCODE:\n```\nmodule_switch(ENABLE_REDIS \"Enable redis module\" HIREDIS_FOUND)\nif (NOT ENABLE_REDIS)\n  return()\nendif()\n```\n\nLANGUAGE: cmake\nCODE:\n```\nset(REDIS_SOURCES\n    \"redis-parser.h\"\n    \"redis.h\"\n    \"redis-worker.h\"\n    \"redis-worker.c\"\n    \"redis-parser.c\"\n    \"redis.c\"\n)\n```\n\nLANGUAGE: cmake\nCODE:\n```\nadd_module(\n  TARGET redis\n  GRAMMAR redis-grammar\n  INCLUDES ${HIREDIS_INCLUDE_DIR}\n  DEPENDS ${HIREDIS_LIBRARIES}\n  SOURCES ${REDIS_SOURCES}\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Criterion Unit Test for Log Thread Fetcher Driver in CMake\nDESCRIPTION: This CMake command adds a unit test named `test_logthrfetcherdrv` to the build system. It uses the Criterion testing framework and links against the `LIBTEST` library target. This test is intended to verify the behavior of the log thread fetcher driver component.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/logthrsource/tests/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_unit_test(CRITERION LIBTEST TARGET test_logthrfetcherdrv)\n```\n\n----------------------------------------\n\nTITLE: Setting Directory Properties for Test Clean-up - CMake\nDESCRIPTION: This snippet uses the SET_DIRECTORY_PROPERTIES command in CMake to specify files that should be cleaned when performing build system clean operations. The ADDITIONAL_MAKE_CLEAN_FILES property ensures that persistent test files generated during testing (such as test_values.persist and test_run_id.persist) are automatically removed, maintaining a clean build directory. Dependencies include CMake 2.6+ and a project structure where such files are generated; the input is a list of filenames, and the output is the adjustment of the clean rule to delete those files.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/tests/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nSET_DIRECTORY_PROPERTIES(PROPERTIES\n  ADDITIONAL_MAKE_CLEAN_FILES\n  \"test_values.persist;test_values.persist-;test_run_id.persist;test_run_id.persist-\")\n```\n\n----------------------------------------\n\nTITLE: Building and Logging an Event Record using syslog-ng Library Functions in C\nDESCRIPTION: Demonstrates the sequence of C function calls required to build and log an event using the library. First, `evt_rec_init` initializes the record. Then, `evt_tag_str`, `evt_tag_int`, or `evt_tag_printf` are used to add string, integer, or formatted tags respectively. Finally, `evt_log` sends the completed record to the configured log destination and consumes it, eliminating the need for manual freeing.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/eventlog/doc/DESIGN.txt#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nevt_rec_init(...)\nevt_tag_str(...) / evt_tag_int(...) / evt_tag_printf(...)\nevt_log(...) /* consumes the log record, no need to free it */\n```\n\n----------------------------------------\n\nTITLE: Configuring syslog-ng Azure Monitor Destination with OAuth2\nDESCRIPTION: This configuration snippet demonstrates how to set up the `azure-monitor()` destination in `syslog-ng` to send logs to Azure Monitor. It utilizes OAuth2 authentication, requiring Tenant ID, Application ID, and Application Secret, along with Azure-specific identifiers like DCR ID, DCE URI, and stream name. This feature depends on the `cloud-auth` component within `syslog-ng`.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/news/feature-5293.md#_snippet_0\n\nLANGUAGE: config\nCODE:\n```\nazure-monitor(\n     dcr-id(\"dcr id\")\n     dce-uri(\"dce uri\")\n     stream_name(\"stream name\")\n     auth(\n          tenant-id(\"tenant id\")\n          app-id(\"app id\")\n          app-secret(\"app secret\")\n     )\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Build and Tests for MongoDB Driver in syslog-ng with CMake - CMake\nDESCRIPTION: This compound snippet handles all configuration steps needed if ENABLE_MONGODB is set. It establishes include paths and library dependencies, checks for presence of required Mongoc functions or symbols, specifies driver source/header files, registers the driver as a module via add_module, and adds relevant test subdirectories. Inputs are CMake variables (like ENABLE_MONGODB, MONGOC_INCLUDE_DIRS, MONGOC_LIBRARY, BSON_LIBRARY), while outputs are build targets and test inclusions. It requires successful prior location of required MongoDB and BSON libraries, and the source code files listed. Limitations: Build will fail if some required headers, functions or symbols are missing.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/afmongodb/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif (ENABLE_MONGODB)\n\n  set(CMAKE_REQUIRED_INCLUDES ${MONGOC_INCLUDE_DIRS})\n  set(CMAKE_REQUIRED_LIBRARIES ${MONGOC_LIBRARY})\n  set(CMAKE_REQUIRED_LIBRARIES ${BSON_LIBRARY})\n  check_symbol_exists(mongoc_uri_set_option_as_int32 \"mongoc.h\" SYSLOG_NG_HAVE_DECL_MONGOC_URI_SET_OPTION_AS_INT32)\n  check_symbol_exists(MONGOC_URI_SERVERSELECTIONTIMEOUTMS \"mongoc.h\" SYSLOG_NG_HAVE_DECL_MONGOC_URI_SERVERSELECTIONTIMEOUTMS)\n\n  set(AFMONGODB_SOURCES\n    \"afmongodb.h\"\n    \"afmongodb.c\"\n    \"afmongodb-worker.h\"\n    \"afmongodb-worker.c\"\n    \"afmongodb-parser.h\"\n    \"afmongodb-parser.c\"\n    \"afmongodb-private.h\"\n  )\n\n  add_module(\n    TARGET afmongodb\n    GRAMMAR afmongodb-grammar\n    INCLUDES ${MONGOC_INCLUDE_DIRS}\n    DEPENDS ${MONGOC_LIBRARY}\n    DEPENDS ${BSON_LIBRARY}\n    SOURCES ${AFMONGODB_SOURCES}\n  )\n\n  add_test_subdirectory(tests)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Debian Packaging: Adding syslog-ng Python Module Package Metadata - syslog-ng Config\nDESCRIPTION: This configuration sample provides a template for adding package metadata for a custom Python syslog-ng module into Debian's control file. It specifies the package name, architecture, dependencies, and description. This metadata ensures the correct inclusion, dependency resolution, and description of the module in the Debian packaging system.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/python-modules/README.md#_snippet_19\n\nLANGUAGE: syslog-ng-config\nCODE:\n```\nPackage: syslog-ng-mod-<yourmodule>\nArchitecture: any\nMulti-Arch: foreign\nDepends: ${shlibs:Depends}, ${misc:Depends}, syslog-ng-core (>= ${source:Version}), syslog-ng-core (<< ${source:Version}.1~), syslog-ng-mod-python\nDescription: The short description of the package\n This is a longer description with dots separating paragraphs.\n .\n This package provides a collection of example plugins.\n\n```\n\n----------------------------------------\n\nTITLE: Defining Python Destination Drivers in syslog-ng Configuration (python() driver) - syslog-ng Config\nDESCRIPTION: This syslog-ng configuration snippet illustrates how to define a Python-based destination driver using the python() block, which specifies the Python class to use for handling log messages along with its options. This approach is compatible with syslog-ng's standard configuration files, but uses a syntax less familiar to native syslog-ng users. The snippet demonstrates including custom Python drivers in the destination statement.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/python-modules/README.md#_snippet_16\n\nLANGUAGE: syslog-ng-config\nCODE:\n```\ndestination whatever {\n    python(class(mydestination.MyDestination)\n           options(option1 => value,\n                   option2 => value));\n};\n\n```\n\n----------------------------------------\n\nTITLE: Defining the 'affile' Module Target in CMake\nDESCRIPTION: This CMake command defines a syslog-ng module named 'affile'. It uses the `add_module` custom function, specifying the target name (`affile`), the associated grammar file (`affile-grammar`), and the list of source files contained in the `${AFFILE_SOURCES}` variable (which includes both base and conditionally added files).\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/affile/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_module(\n  TARGET affile\n  GRAMMAR affile-grammar\n  SOURCES ${AFFILE_SOURCES}\n)\n```\n\n----------------------------------------\n\nTITLE: Including Tests Subdirectory in CMake Build\nDESCRIPTION: This CMake command includes the `tests` subdirectory into the build. This is used to add test targets and configurations related to the OpenTelemetry module, allowing for automated testing of its functionality.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/grpc/otel/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_test_subdirectory(tests)\n```\n\n----------------------------------------\n\nTITLE: Defining the Timestamp Module using add_module in CMake\nDESCRIPTION: Uses a custom CMake function 'add_module' to define a build target named 'timestamp'. It specifies the associated grammar file 'timestamp-grammar' and includes the source files listed in the previously defined 'TIMESTAMP_SOURCES' variable. This command configures how the timestamp module is built within the syslog-ng project, linking sources and potentially grammar definitions.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/timestamp/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_module(\n  TARGET timestamp\n  GRAMMAR timestamp-grammar\n  SOURCES ${TIMESTAMP_SOURCES}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring the regexp-parser Module Build in CMake\nDESCRIPTION: This snippet utilizes a custom CMake function `add_module` to set up the build configuration for the `regexp-parser`. It specifies the target name (`regexp-parser`), associates a grammar definition (`regexp-parser-grammar`), and provides the list of source files previously defined in the `REGEXPPARSER_SOURCES` variable. This function likely handles module-specific build steps within the syslog-ng build system.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/regexp-parser/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_module(\n  TARGET regexp-parser\n  GRAMMAR regexp-parser-grammar\n  SOURCES ${REGEXPPARSER_SOURCES}\n)\n```\n\n----------------------------------------\n\nTITLE: Defining TLS Test Validation Headers in CMake\nDESCRIPTION: This snippet defines a CMake variable `TLS_TEST_VALIDATION_HEADERS` which holds a list of header files required for the TLS test validation library. It includes both generated and source header files.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/examples/inner-destinations/tls-test-validation/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(TLS_TEST_VALIDATION_HEADERS\n    \"${CMAKE_CURRENT_BINARY_DIR}/tls-test-validation-grammar.h\"\n    \"tls-test-validation-parser.h\"\n    \"tls-test-validation.h\"\n)\n```\n\n----------------------------------------\n\nTITLE: Defining the eBPF Module Target in CMake\nDESCRIPTION: Uses the custom `add_module` function (specific to the syslog-ng build system) to define the final build target for the `ebpf` module. It specifies the target name, associated grammar file (`ebpf-grammar`), project source directory for includes, the list of source files (`EBPF_SOURCES`), and dependencies on the `libbpf` library (`LIBBPF_LIBRARIES`).\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/ebpf/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_module(\n  TARGET ebpf\n  GRAMMAR ebpf-grammar\n  INCLUDES ${PROJECT_SOURCE_DIR}\n  SOURCES ${EBPF_SOURCES}\n  DEPENDS ${LIBBPF_LIBRARIES}\n)\n```\n\n----------------------------------------\n\nTITLE: Running syslog-ng Docker Container with Default Config - Bash\nDESCRIPTION: This command runs the syslog-ng container with the bundled default configuration. It maps host UDP port 514 and TCP port 601 to the corresponding ports inside the container to receive syslog traffic. The container runs in interactive mode. Ensure these ports are not already in use on the host machine. After running, logs are forwarded to /var/log/syslog inside the container.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/docker/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo docker run -it -p 514:514/udp -p 601:601 --name syslog-ng balabit/syslog-ng:latest\n```\n\n----------------------------------------\n\nTITLE: Defining TLS Test Validation Sources in CMake\nDESCRIPTION: This snippet defines a CMake variable `TLS_TEST_VALIDATION_SOURCES` containing the list of source files for the TLS test validation library. It references C source files, including ones generated by Bison (`tls-test-validation-grammar.c`).\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/examples/inner-destinations/tls-test-validation/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(TLS_TEST_VALIDATION_SOURCES\n    \"${CMAKE_CURRENT_BINARY_DIR}/tls-test-validation-grammar.c\"\n    \"tls-test-validation-parser.c\"\n    \"tls-test-validation.c\"\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing ConsecutiveAckTracker for Sequential Acknowledgement in Python syslog-ng\nDESCRIPTION: This snippet demonstrates how to initialize the `ConsecutiveAckTracker` within the `init` method of a custom `LogFetcher`. It assigns the tracker instance to `self.ack_tracker` and specifies `self.message_acked` as the callback function to be invoked when messages are acknowledged sequentially. The `fetch` method would use `msg.set_bookmark()` to assign bookmarks.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/python-modules/README.md#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n```python\n\nclass MyFetcher(LogFetcher):\n\n    ...\n\n    def init(self, options):\n        # pass self.message_acked method as ACK callback\n        self.ack_tracker = ConsecutiveAckTracker(ack_callback=self.message_acked)\n        return True\n\n    def message_acked(self, acked_message_bookmark):\n        pass\n\n    def fetch(self):\n        ...\n        msg.set_bookmark(\"whatever-bookmark-value-that-denotes-position\")\n    ...\n\n```\n```\n\n----------------------------------------\n\nTITLE: Adding Test Subdirectory in CMake - CMake\nDESCRIPTION: Utilizes the add_test_subdirectory command to include the 'tests' subfolder as part of the build configuration, enabling the integration and discovery of test suites or test targets. Requires the presence of a proper 'tests' directory with its own CMakeLists.txt or compatible CMake setup. This facilitates modular test management and ensures that tests are built and executed as part of the overall project build.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/ack-tracker/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_test_subdirectory(tests)\n```\n\n----------------------------------------\n\nTITLE: Adding a Test Subdirectory - CMake - CMake\nDESCRIPTION: Registers the 'tests' subdirectory for building and running associated tests with the metrics-probe module. This ensures test sources are included in the build process, enabling modular test coverage for the component. Assumes a 'tests' subdirectory with its own CMakeLists.txt exists.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/metrics-probe/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_test_subdirectory(tests)\n```\n\n----------------------------------------\n\nTITLE: Setting eBPF Module Source Files Variable in CMake\nDESCRIPTION: Sets the CMake variable `EBPF_SOURCES` to a list of source (.c) and header (.h) files that constitute the user-space part of the eBPF plugin for syslog-ng.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/ebpf/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset(EBPF_SOURCES\n    ebpf-parser.h\n    ebpf-reuseport.h\n    ebpf-reuseport.c\n    ebpf-plugin.c\n    ebpf-parser.c\n)\n```\n\n----------------------------------------\n\nTITLE: Consuming Kafka Topic Messages with kafkacat (Shell)\nDESCRIPTION: This shell command uses the `kafkacat` utility to consume and display messages from the Kafka topic named `syslog-ng`. The `-C` flag indicates consumer mode, `-u` enables unbuffered output, `-b localhost` specifies the Kafka broker address, and `-t syslog-ng` names the target topic. It's useful for verifying that messages are being correctly sent to Kafka by syslog-ng.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/kafka/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n```\nkafkacat -C -u -b localhost -t syslog-ng\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Destination via http() – syslog-ng configuration\nDESCRIPTION: This snippet demonstrates how to configure syslog-ng to send logs to an HTTP server using the http() destination. It sets the HTTP endpoint URL, request method (PUT), user agent, authentication credentials, custom headers, and log message body format. Dependencies include syslog-ng version 3.28+, a valid HTTP endpoint, and necessary inclusion of 'scl.conf'. Parameters for url, method, headers, body, user, and password are configurable; method supports only POST and PUT. The input is log messages from the system and internal sources, and output is HTTP requests to the configured endpoint. Only POST and PUT methods are supported by syslog-ng's http() destination as of this configuration.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/http/README.md#_snippet_0\n\nLANGUAGE: syslog-ng config\nCODE:\n```\n@version: 3.28\n@include \"scl.conf\"\nsource      s_system { system(); internal(); };\ndestination http_des {\n    http(\n        url(\"http://127.0.0.1:8000\")\n        method(\"PUT\")\n        user_agent(\"syslog-ng User Agent\")\n        user(\"user\")\n        password(\"password\")\n        headers(\"HEADER1: header1\", \"HEADER2: header2\")\n        body(\"${ISODATE} ${MSG}\")\n    );\n};\nlog { source(s_system); destination(http_des); };\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Functional Test Target with CMake - CMake Language\nDESCRIPTION: This snippet defines a custom CMake target named 'func-test' which runs a shell script (runtests.sh) with environment variables specifying the source directory, build directory, and the Python interpreter. The dependencies include CMake, the shell environment, and an appropriately set up testing script. The command is cross-platform due to use of CMake's -E env, ensuring portability for different environments. Inputs: CMake context variables and executable paths. Outputs: Invokes the testing script with required environment, but does not capture script output within CMake. Limitations: Relies on the existence and compatibility of runtests.sh; failure in the script is not detailed by this target.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/tests/functional/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_target(func-test\n  ${CMAKE_COMMAND} -E env \"top_srcdir=${PROJECT_SOURCE_DIR}\" \"top_builddir=${PROJECT_BINARY_DIR}\" \"PYTHON=${PYTHON_EXECUTABLE}\"\n  \"${CMAKE_CURRENT_SOURCE_DIR}/runtests.sh\")\n```\n\n----------------------------------------\n\nTITLE: Checking for rd_kafka_init_transactions Symbol in CMake\nDESCRIPTION: This snippet uses CMake's `check_symbol_exists` command to determine if the `rd_kafka_init_transactions` function is available in the found `librdkafka` library. It checks within the `librdkafka/rdkafka.h` header. The result (TRUE or FALSE) is stored in the `SYSLOG_NG_HAVE_RD_KAFKA_INIT_TRANSACTIONS` variable, allowing conditional compilation of transaction-related features.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/kafka/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ncheck_symbol_exists (rd_kafka_init_transactions \"librdkafka/rdkafka.h\" SYSLOG_NG_HAVE_RD_KAFKA_INIT_TRANSACTIONS)\n```\n\n----------------------------------------\n\nTITLE: Using Embedded Python Function as syslog-ng Template Function\nDESCRIPTION: Illustrates defining a Python function (`template_function`) directly within the syslog-ng configuration using a `python {}` block, specifically for use as a template function. This function accepts a read-only `LogMessage` instance (`msg`) and returns a byte string. It is invoked within a file destination's template using `$(python template_function)`.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/python-modules/README.md#_snippet_6\n\nLANGUAGE: syslog-ng-config\nCODE:\n```\n@version: 4.0\n\npython {\n\ndef template_function(msg):\n    return b\"Hello World from Python! Original message: \" + msg['MSGHDR'] + msg['MESSAGE']\n\n};\n\n...\n\ndestination d_file {\n    file(\"/var/log/whatever\" template(\"$(python template_function)\"));\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Unit Test Target with CMake in C\nDESCRIPTION: Defines a Criterion-based unit test target named 'test_control_cmds' in the CMake configuration. The command specifies two source files ('test_control_cmds.c' and 'control-server-dummy.c') for building the test executable. Criterion and its development files must be available as dependencies, and CMake is required for processing this command. This approach facilitates automated test integration in C projects, streamlining the testing process and build flow.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/control/tests/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_unit_test(CRITERION TARGET test_control_cmds SOURCES test_control_cmds.c control-server-dummy.c)\n```\n\n----------------------------------------\n\nTITLE: Configuring syslog-ng to Use a Custom Java Class Destination\nDESCRIPTION: This syslog-ng configuration snippet demonstrates how to set up a Java destination using a compiled `.class` file. It defines a TCP source (`s_tcp`) and a `java` destination (`d_java`). The `java` destination specifies the custom class name (`TestClass`) and the directory path containing the `.class` file (`/tmp`). An example option (`key`, `value`) is also shown. A log statement connects the source to the destination.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/java/README.md#_snippet_2\n\nLANGUAGE: syslog-ng\nCODE:\n```\n@version: 3.28\n\noptions {\n  threaded(yes);\n};\n\nsource s_tcp{\n  tcp(\n    port(5555)\n  );\n};\n\ndestination d_java{\n  java(\n    class_name(\"TestClass\")\n    class_path(\"/tmp\")\n    option(\"key\", \"value\")\n  );\n};\n\nlog{\n  source(s_tcp);\n  destination(d_java);\n  flags(flow-control);\n};\n\n```\n\n----------------------------------------\n\nTITLE: Setting Sources, Headers, and Test Subdirectory - CMake - CMake Script\nDESCRIPTION: Defines CMake variables for the XML Scanner module, including header and source files required for building, and sets up the proper include directory. The use of PARENT_SCOPE ensures these variables are available in the parent scope, supporting modular usage. Finally, it adds a subdirectory containing tests, making test configuration part of the build process. Requires CMake as the build system and expects the defined folder structure under xml-scanner/ and tests/ directories.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/scanner/xml-scanner/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(XML_SCANNER_HEADERS\n    xml-scanner/xml-scanner.h\n    PARENT_SCOPE)\n\nset(XML_SCANNER_INCLUDE_DIR \"${CMAKE_CURRENT_SOURCE_DIR}\")\n\nset(XML_SCANNER_SOURCES\n    xml-scanner/xml-scanner.c\n    PARENT_SCOPE)\n\nadd_test_subdirectory(tests)\n```\n\n----------------------------------------\n\nTITLE: Creating Static Library for HTTP Test Slots and Setting Dependencies - CMake - CMake\nDESCRIPTION: Builds the actual http-test-slots static library from the collected source files, specifies include directories for both build and source files, and links the library against syslog-ng. It uses 'add_library', 'target_include_directories', and 'target_link_libraries' to manage dependencies and paths. Prerequisites include all listed header and source files, and successful previous source generation. Outputs a static library target ('http-test-slots'), properly linked and ready for integration into the syslog-ng project.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/examples/inner-destinations/http-test-slots/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(http-test-slots STATIC ${HTTP_TEST_SLOTS_SOURCES})\\n\\ntarget_include_directories(http-test-slots\\n  PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}\\n  PRIVATE ${CMAKE_CURRENT_BINARY_DIR}\\n  PUBLIC ${PROJECT_SOURCE_DIR}\\n)\\n\\ntarget_link_libraries(http-test-slots PUBLIC syslog-ng)\\n\n```\n\n----------------------------------------\n\nTITLE: Compiling eBPF Kernel Code in CMake\nDESCRIPTION: Defines a CMake custom command to compile the eBPF kernel source file (`random.kern.c`) into an object file (`random.kern.o`). It uses the eBPF C compiler specified by `${BPF_CC}` and compiler flags from `${BPF_CFLAGS}`. The compilation depends on the source file `random.kern.c` and the generated `vmlinux.h` header.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/ebpf/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(OUTPUT random.kern.o\n                   COMMAND ${BPF_CC} ${BPF_CFLAGS} -c ${CMAKE_CURRENT_SOURCE_DIR}/random.kern.c -o random.kern.o\n                   DEPENDS random.kern.c vmlinux.h)\n```\n\n----------------------------------------\n\nTITLE: Linking msg-generator Library in CMake\nDESCRIPTION: Links the 'msg-generator' library publicly against the 'syslog-ng' library. This makes 'syslog-ng' available to 'msg-generator' and also ensures that any target linking against 'msg-generator' will automatically link against 'syslog-ng'.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/examples/sources/msg-generator/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(msg-generator PUBLIC syslog-ng)\n```\n\n----------------------------------------\n\nTITLE: Generating Bison Input File (CMake)\nDESCRIPTION: This snippet calls a custom CMake function `generate_y_from_ym` to process a `.ym` file (likely a macro-extended Yacc/Bison file) located in `modules/native/` and generate the corresponding `.y` file (standard Bison input) needed for parser generation.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/native/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ngenerate_y_from_ym (modules/native/native-grammar)\n```\n\n----------------------------------------\n\nTITLE: Installing syslog-ng via APT - Shell\nDESCRIPTION: Installs the syslog-ng package using APT. Requires root privileges and network connectivity to the configured repository. Input: none; Output: syslog-ng daemon and dependencies installed on system.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/README.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt install syslog-ng\n```\n\n----------------------------------------\n\nTITLE: Retrieving syslog-ng Access Info based on Kubernetes Service Type (Shell/Helm)\nDESCRIPTION: This Helm template snippet generates shell commands to determine and display the access URL or relevant information for a deployed `syslog-ng` service within Kubernetes. It uses `kubectl` to query service and node details based on the `service.type` value (`NodePort`, `LoadBalancer`, or `ClusterIP`) defined in the Helm chart's values. For NodePort and LoadBalancer types, it outputs an access URL; for ClusterIP, it identifies a pod and indicates the listening ports.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/contrib/syslog-ng-helm-chart/templates/NOTES.txt#_snippet_0\n\nLANGUAGE: helm\nCODE:\n```\n{{- if contains \"NodePort\" .Values.service.type }}\n  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath=\"{.spec.ports[0].nodePort}\" services {{ include \"syslog-ng.fullname\" . }})\n  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath=\"{.items[0].status.addresses[0].address}\")\n  echo http://$NODE_IP:$NODE_PORT\n{{- else if contains \"LoadBalancer\" .Values.service.type }}\n     NOTE: It may take a few minutes for the LoadBalancer IP to be available.\n           You can watch the status of by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include \"syslog-ng.fullname\" . }}'\n  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include \"syslog-ng.fullname\" . }} --template \"{{\\\"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}\\\"}}\")\n  echo http://$SERVICE_IP:{{ .Values.service.port }}\n{{- else if contains \"ClusterIP\" .Values.service.type }}\n  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l \"app.kubernetes.io/name={{ include \"syslog-ng.name\" . }},app.kubernetes.io/instance={{ .Release.Name }}\" -o jsonpath=\"{.items[0].metadata.name}\")\n  echo \"Syslogng watch on tcp 601 and udp 514 port\"\n{{- end }}\n\n########################################################\n# Syslogng watch on tcp  601 and udp 514 port          #\n########################################################\n```\n\n----------------------------------------\n\nTITLE: Defining Function to Detect Curl Compile Options in CMake\nDESCRIPTION: This defines a CMake function `curl_detect_compile_option` that checks if a specific Curl symbol (passed as `NAME`) exists or is defined within the Curl headers. It sets the required include path and header file for the check. Based on the result of `check_type_size`, it adds a compile definition (`-DSYSLOG_NG_HAVE_DECL_<NAME_CAPITAL>=1` or `=0`) to the `http` target, allowing conditional compilation in the C code based on available Curl features.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/http/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nfunction (curl_detect_compile_option NAME)\n  set(CMAKE_REQUIRED_INCLUDES \"${Curl_INCLUDE_DIR}\")\n  set(CMAKE_EXTRA_INCLUDE_FILES \"curl/curl.h\")\n  string(TOUPPER ${NAME} NAME_CAPITAL)\n\n  check_type_size(${NAME} SYSLOG_NG_HAVE_DECL_${NAME_CAPITAL})\n  if (SYSLOG_NG_HAVE_DECL_${NAME_CAPITAL})\n    target_compile_definitions(http PRIVATE \"-DSYSLOG_NG_HAVE_DECL_${NAME_CAPITAL}=1\")\n  else()\n    target_compile_definitions(http PRIVATE \"-DSYSLOG_NG_HAVE_DECL_${NAME_CAPITAL}=0\")\n  endif()\nendfunction ()\n```\n\n----------------------------------------\n\nTITLE: Linking OTel Module with Filterx Library in CMake\nDESCRIPTION: This CMake command links the `otel` target privately against the `otel_filterx_logrecord_cpp` library. This indicates that the `otel` module uses functionality provided by the `otel_filterx_logrecord_cpp` target, which is likely defined within the `filterx` subdirectory.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/grpc/otel/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(otel PRIVATE otel_filterx_logrecord_cpp)\n```\n\n----------------------------------------\n\nTITLE: Installing HTTP Module Development Headers in CMake\nDESCRIPTION: This snippet uses the `install` command in CMake to copy the development header files listed in the `HTTP_MODULE_DEV_HEADERS` variable to the specified destination directory (`include/syslog-ng/modules/http/`) during the build installation phase.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/http/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES ${HTTP_MODULE_DEV_HEADERS} DESTINATION include/syslog-ng/modules/http/)\n```\n\n----------------------------------------\n\nTITLE: Defining Sources and Registering Module Target - CMake\nDESCRIPTION: Declares the 'CONFGEN_SOURCES' variable for source file aggregation, registers a CMake target named 'confgen' with those sources, and organizes the build process with clear modularity. Requires a CMake-compatible environment. Input variables such as 'CONFGEN_SOURCES' must list the exact required files. Output is a build-ready module and the registration of those sources with the build system. There are no explicit limitations, but the listed source files must exist.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/confgen/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset (CONFGEN_SOURCES\n    confgen.h\n    confgen-plugin.c\n)\n\nadd_module(\n  TARGET confgen\n  SOURCES ${CONFGEN_SOURCES}\n)\n\n```\n\n----------------------------------------\n\nTITLE: Switching azure-auth-header Module and Defining Sources - CMake\nDESCRIPTION: This snippet conditionally enables the azure-auth-header module based on the ENABLE_AZURE_AUTH_HEADER flag in a CMake build. If the module is enabled, it sets a list of required source/header files and then calls an add_module macro or function with appropriate parameters, including grammar file and includes. Dependencies include CMake 3.x and syslog-ng project directory variables; expected input is the state of ENABLE_AZURE_AUTH_HEADER and availability of source files. Output is the configuration for building the azure-auth-header plugin, assuming required macros and directory paths exist.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/azure-auth-header/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nmodule_switch(ENABLE_AZURE_AUTH_HEADER \"Enable azure-auth-header module\")\n\nif (NOT ENABLE_AZURE_AUTH_HEADER)\n  return()\nendif()\n\n\nset(AZURE_AUTH_HEADER_SOURCES\n    \"azure-auth-header-parser.h\"\n    \"azure-auth-header.h\"\n    \"azure-auth-header-plugin.c\"\n    \"azure-auth-header-parser.c\"\n    \"azure-auth-header.c\"\n)\n\nadd_module(\n  TARGET azure-auth-header\n  GRAMMAR azure-auth-header-grammar\n  INCLUDES ${PROJECT_SOURCE_DIR}\n  SOURCES ${AZURE_AUTH_HEADER_SOURCES}\n)\n\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Rate Limit Filter in CMake Language\nDESCRIPTION: Defines a CMake variable RATE_LIMIT_FILTER_SOURCES as a list containing the C and header files necessary for the rate limit filter implementation. These files are then used in subsequent targets for module building. No external dependencies are required, but the variables must match actual filenames in the project directory. The content is meant for inclusion in a CMakeLists.txt file.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/rate-limit-filter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(RATE_LIMIT_FILTER_SOURCES\n    rate-limit-parser.h\n    rate-limit-plugin.c\n    rate-limit-parser.c\n    rate-limit.c\n    rate-limit.h\n)\n\n```\n\n----------------------------------------\n\nTITLE: Defining Compatibility Header Files Set - CMake\nDESCRIPTION: This code snippet uses the CMake 'set' command to define a variable 'COMPAT_HEADERS' containing a list of compatibility header files, which are made available to the parent scope. These headers likely serve to abstract OS or library differences and are referenced elsewhere in the build system. It is required that all listed header files exist in the specified locations under the 'compat' folder; incorrect paths will cause configuration errors.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/compat/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(COMPAT_HEADERS\n    compat/compat.h\n    compat/getutent.h\n    compat/glib.h\n    compat/lfs.h\n    compat/pio.h\n    compat/socket.h\n    compat/string.h\n    compat/time.h\n    compat/openssl_support.h\n    compat/pcre.h\n    compat/getent.h\n    compat/getent-sun.h\n    compat/getent-openbsd.h\n    compat/getent-generic.h\n    compat/un.h\n    compat/cpp-start.h\n    compat/cpp-end.h\n    compat/curl.h\n    compat/json.h\n    compat/inttypes.h\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Running syslog-ng with Custom Configuration File - Bash\nDESCRIPTION: This command attaches a host syslog-ng.conf configuration file to the container, overriding the default configuration. The file is mounted from the host's current directory to /etc/syslog-ng/syslog-ng.conf inside the container. This approach allows full customization of syslog-ng's behavior without altering the image.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/docker/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo docker run -it -v \"$PWD/syslog-ng.conf\":/etc/syslog-ng/syslog-ng.conf balabit/syslog-ng:latest\n```\n\n----------------------------------------\n\nTITLE: Advanced Configuration for `hypr-audit-trail()` Source in syslog-ng\nDESCRIPTION: This snippet demonstrates a more comprehensive configuration for the `hypr-audit-trail()` source driver. It includes optional parameters like controlling the API page size (`page-size`), the initial data fetch window (`initial-hours`), excluding specific applications (`application-skip-list`), setting the log verbosity (`log-level`), passing source flags (e.g., `flags(no-parse)`), and controlling persistence (`ignore-persistence`). These options allow for fine-tuning the data retrieval process.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/python-modules/syslogng/modules/hypr/README.md#_snippet_1\n\nLANGUAGE: syslog-ng configuration\nCODE:\n```\n    source s_hypr {\n        hypr-audit-trail(\n            url('https://<custom domain>.hypr.com')\n            bearer-token('<base64 encoded bearer token>')\n            page-size(<number of results to return in a single page>)\n            initial-hours(<number of hours to search backward on initial fetch>)\n            application-skip-list('HYPRDefaultApplication', 'HYPRDefaultWorkstationApplication')\n            log-level('INFO')\n            flags(<optional flags passed to the source>)\n            ignore-persistence(<yes/no>)\n        );\n    };\n```\n\n----------------------------------------\n\nTITLE: Writing Parsed Logs to File Destination - syslog-ng Configuration\nDESCRIPTION: This snippet configures a destination block named d_file, instructing syslog-ng to write the structured log messages to '/var/log/messages'. It is intended to work in conjunction with preceding source and parser blocks, capturing and storing output from the date-parsed and CSV-parsed log records. Pre-requisites are filesystem permissions and syslog-ng configured to handle the specified logfile. The destination expects structured messages from earlier processing stages.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/timestamp/README.md#_snippet_2\n\nLANGUAGE: syslog-ng configuration\nCODE:\n```\ndestination d_file {\n  file(\"/var/log/messages\");\n};\n```\n\n----------------------------------------\n\nTITLE: Generating eBPF Skeleton C Code using bpftool in CMake\nDESCRIPTION: Defines a CMake custom command to generate the `random.skel.c` file. It uses `bpftool gen skeleton` to create C code (a skeleton) from the compiled eBPF object file `random.kern.o`. This skeleton simplifies loading and interacting with the eBPF program from user-space code. The command depends on `random.kern.o` being generated first.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/ebpf/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(OUTPUT random.skel.c\n                   COMMAND ${BPFTOOL} gen skeleton random.kern.o > random.skel.c\n\t\t   DEPENDS random.kern.o)\n```\n\n----------------------------------------\n\nTITLE: Using format-json Template Function Variations in syslog-ng (config)\nDESCRIPTION: This snippet showcases several valid usages of the $(format-json) template function in syslog-ng, illustrating that spaces around the '=' in key-value assignments are now permitted. It also demonstrates the correct way to specify empty and quoted values with proper escaping. The examples serve as a reference for formatting log message payloads as JSON using various parameter syntaxes. Inputs are template variables and static values, outputs are JSON-formatted strings for log messages.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/NEWS.md#_snippet_2\n\nLANGUAGE: config\nCODE:\n```\n$(format-json foo =alma)\n$(format-json foo= alma)\n$(format-json foo = alma)\n$(format-json foo=\\\" alma \\\" )\n$(format-json foo= \\\" alma \\\" )\n$(format-json foo1= alma foo2 =korte foo3 = szilva foo4 = \\\" meggy \\\" foo5=\\\"\\\")\n```\n\n----------------------------------------\n\nTITLE: Accessing syslog-ng flags() Option State in Python\nDESCRIPTION: This shows an example dictionary structure representing the `self.flags` variable available within a Python `syslog-ng` source driver. This variable is a `Dict[str, bool]` that maps the state of various `flags()` options (like `parse`, `syslog-protocol`, `multi-line`) configured for the source to boolean values, allowing the Python code to adapt its behavior accordingly.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/python-modules/README.md#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n```python\n{\n    'parse': True,\n    'check-hostname': False,\n    'syslog-protocol': True,\n    'assume-utf8': False,\n    'validate-utf8': False,\n    'sanitize-utf8': False,\n    'multi-line': True,\n    'store-legacy-msghdr': True,\n    'store-raw-message': False,\n    'expect-hostname': True,\n    'guess-timezone': False,\n    'header': True,\n    'rfc3164-fallback': True,\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Options for OTel Module in CMake\nDESCRIPTION: This CMake command adds specific private compile options to the `otel_filterx_logrecord_cpp` target. It suppresses warnings related to double promotion and deprecated declarations (`-Wno-double-promotion`, `-Wno-deprecated`, `-Wno-deprecated-declarations`) and defines a preprocessor macro (`PROTOBUF_ENABLE_DEBUG_LOGGING_MAY_LEAK_PII=0`) likely to disable potentially PII-leaking debug logs in Protobuf.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/grpc/otel/filterx/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_compile_options (otel_filterx_logrecord_cpp PRIVATE -Wno-double-promotion -Wno-deprecated -Wno-deprecated-declarations -DPROTOBUF_ENABLE_DEBUG_LOGGING_MAY_LEAK_PII=0)\n```\n\n----------------------------------------\n\nTITLE: Executing Gradle Task for Jest Dependencies Installation in CMake\nDESCRIPTION: Adds another custom installation step using `install(CODE ...)` to run Gradle during installation. This command executes the `copyJestRuntimeDeps` Gradle task. This task copies runtime dependencies related to the Jest framework (likely used by specific Java modules) to the final Java module destination directory (`${JAVA_MOD_DST_DIR}`).\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/java-modules/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(CODE \"execute_process(COMMAND ${GRADLE_EXECUTABLE} --project-cache-dir ${GRADLE_WORKDIR} -g ${GRADLE_WORKDIR} -p ${CMAKE_CURRENT_SOURCE_DIR} -PsyslogBuildDir=${CMAKE_CURRENT_BINARY_DIR} -PsyslogDepsDir=${SYSLOG_DEPS_DIR} -PjarDestDir=${JAVA_MOD_DST_DIR} copyJestRuntimeDeps)\")\n```\n\n----------------------------------------\n\nTITLE: Setting C Symbol Visibility for 'secret-storage' in CMake\nDESCRIPTION: Sets the C symbol visibility property for the `secret-storage` target to `hidden`. This typically means that symbols are not exported from the shared library by default, helping to reduce namespace pollution and potentially improving load times.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/secret-storage/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset_target_properties(secret-storage PROPERTIES C_VISIBILITY_PRESET hidden)\n```\n\n----------------------------------------\n\nTITLE: Running Bison to Generate Parser Code in CMake\nDESCRIPTION: Uses the 'bison_target' command (likely from CMake's FindBISON module or a custom function) to invoke the Bison parser generator. It takes the generated '.y' grammar file as input, specifies the output C source file name, and applies Bison-specific compilation flags stored in the BISON_FLAGS variable. It implicitly generates the corresponding header file (msg-generator-grammar.h).\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/examples/sources/msg-generator/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nbison_target(MsgGeneratorGrammar\n    ${CMAKE_CURRENT_BINARY_DIR}/msg-generator-grammar.y\n    ${CMAKE_CURRENT_BINARY_DIR}/msg-generator-grammar.c\n    COMPILE_FLAGS ${BISON_FLAGS})\n```\n\n----------------------------------------\n\nTITLE: Setting gRPC Schema Source Files in CMake\nDESCRIPTION: This CMake command defines the `GRPC_SCHEMA_SOURCES` variable. It assigns a list containing the paths to the gRPC schema header (`.hpp`) and source (`.cpp`) files within the syslog-ng project structure. The `PARENT_SCOPE` argument makes this variable accessible in the parent CMakeLists.txt file, typically used to add these source files to a library or executable target.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/grpc/common/schema/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(GRPC_SCHEMA_SOURCES\n    ${PROJECT_SOURCE_DIR}/modules/grpc/common/schema/grpc-schema.hpp\n    ${PROJECT_SOURCE_DIR}/modules/grpc/common/schema/grpc-schema.cpp\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Adding Test Subdirectory for Value Pairs Module - CMake\nDESCRIPTION: Invokes add_test_subdirectory to include a test directory in the project build. This command registers the 'tests' folder for build and test orchestration, enabling automated testing within the CMake framework. Assumes the existence of a tests/CMakeLists.txt file and requires CMake as a dependency.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/value-pairs/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_test_subdirectory(tests)\n```\n\n----------------------------------------\n\nTITLE: Setting Module Source Files with CMake in CMake Language\nDESCRIPTION: Defines the SYSTEM_SOURCE_SOURCES variable as a list containing 'system-source.c', representing the source files required to build the system-source module. This variable is later used in the add_module call as the SOURCES argument. There are no dependencies beyond CMake itself, and this step serves to modularize file specification in larger build scripts.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/system-source/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset (SYSTEM_SOURCE_SOURCES\n    system-source.c\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring and Running Bison Target in CMake\nDESCRIPTION: This snippet configures a Bison target named `SystemdJournalGrammar`. It uses the `bison_target` command (likely a custom macro or function) to process the generated `.y` file and produce the corresponding C source and header files (`.c`, `.h`). It applies specific Bison flags (`BISON_FLAGS`) during generation and sets compile flags (`BISON_BUILT_SOURCE_CFLAGS`) for the generated C source file using `set_source_files_properties`.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/systemd-journal/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nbison_target(SystemdJournalGrammar\n  ${CMAKE_CURRENT_BINARY_DIR}/systemd-journal-grammar.y\n  ${CMAKE_CURRENT_BINARY_DIR}/systemd-journal-grammar.c\nCOMPILE_FLAGS ${BISON_FLAGS})\nset_source_files_properties(\n  ${CMAKE_CURRENT_BINARY_DIR}/systemd-journal-grammar.c\n  PROPERTIES\n  COMPILE_FLAGS ${BISON_BUILT_SOURCE_CFLAGS}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring CTest Environment and Targets in CMake\nDESCRIPTION: Checks if `BUILD_TESTING` is ON. If criterion is not found, it issues a fatal error. Otherwise, it sets environment variables for GLib debugging (`G_SLICE`, `G_DEBUG`) for test execution, includes the CTest module (which enables testing), sets specific linker flags for macOS (`-Wl,-flat_namespace`) needed for criterion tests, and defines custom targets `check` (runs all tests) and `check_failed` (reruns failed tests) using `ctest`.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/CMakeLists.txt#_snippet_27\n\nLANGUAGE: cmake\nCODE:\n```\nif (BUILD_TESTING)\n  if (NOT CRITERION_FOUND)\n    message(FATAL_ERROR \"BUILD_TESTING is enabled (by default, or explicitely) without criterion detected! You can turn off testing via the -DBUILD_TESTING=OFF cmake option.\")\n  else()\n    set(CTEST_ENVIRONMENT\n      \"G_SLICE=always-malloc,debug-blocks\"\n      \"G_DEBUG=fatal-warnings,fatal-criticals,gc-friendly\")\n\n    # The inclusion of CTest triggers enable_testing()\n    # CMake will generate tests only if the enable_testing() command has been invoked.\n    # The CTest module invokes the command automatically when the BUILD_TESTING option is ON.\n    include(CTest)\n\n    # This flag might be a security issue, do not use in production code, unfortunately we still need it for criterion tests and the current mocking soution\n    if (APPLE)\n      SET(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} -Wl,-flat_namespace\")\n    endif()\n\n    add_custom_target(check COMMAND ${CMAKE_CTEST_COMMAND} -j $$(nproc) --output-on-failure)\n    # This one is useful to see the failed tests in details\n    add_custom_target(check_failed COMMAND ${CMAKE_CTEST_COMMAND} -j $$(nproc) --rerun-failed --output-on-failure)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Rewrite Module Source File List - CMake\nDESCRIPTION: Defines the REWRITE_SOURCES variable containing all C source files for the syslog-ng rewrite module. Like the header set, this list is stored in the parent scope and is used to streamline target creation for the rewrite functionality in the build system.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/rewrite/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(REWRITE_SOURCES\n    rewrite/rewrite-expr.c\n    rewrite/rewrite-set-tag.c\n    rewrite/rewrite-set.c\n    rewrite/rewrite-subst.c\n    rewrite/rewrite-expr-parser.c\n    rewrite/rewrite-groupset.c\n    rewrite/rewrite-unset.c\n    rewrite/rewrite-rename.c\n    rewrite/rewrite-set-matches.c\n    rewrite/rewrite-unset-matches.c\n    rewrite/rewrite-set-pri.c\n    rewrite/rewrite-set-severity.c\n    rewrite/rewrite-set-facility.c\n    PARENT_SCOPE\n    )\n```\n\n----------------------------------------\n\nTITLE: Configuring Protocol Buffer Build Directories and Sources - CMake\nDESCRIPTION: This code establishes source and build directory variables for proto files related to OpenTelemetry, Grafana Loki, Google APIs, and ClickHouse. It also lists out proto source files for each integration and separates standard and gRPC-specific proto files. These variables are prerequisites for later proto code generation steps and proper build organization.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/grpc/protos/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(OTEL_PROTO_SRCDIR \"${CMAKE_CURRENT_SOURCE_DIR}/opentelemetry-proto\")\nset(OTEL_PROTO_BUILDDIR \"${CMAKE_CURRENT_BINARY_DIR}/opentelemetry-proto\")\nset(OTEL_PROTO_BUILDDIR ${OTEL_PROTO_BUILDDIR} PARENT_SCOPE)\n\nset(LOKI_PROTO_SRCDIR \"${CMAKE_CURRENT_SOURCE_DIR}/grafana-loki\")\nset(LOKI_PROTO_BUILDDIR \"${CMAKE_CURRENT_BINARY_DIR}/grafana-loki\")\nset(LOKI_PROTO_BUILDDIR ${LOKI_PROTO_BUILDDIR} PARENT_SCOPE)\n\nset(GOOGLEAPIS_PROTO_SRCDIR \"${CMAKE_CURRENT_SOURCE_DIR}/googleapis-proto\")\nset(GOOGLEAPIS_PROTO_BUILDDIR \"${CMAKE_CURRENT_BINARY_DIR}/googleapis-proto\")\nset(GOOGLEAPIS_PROTO_BUILDDIR ${GOOGLEAPIS_PROTO_BUILDDIR} PARENT_SCOPE)\n\nset(CLICKHOUSE_PROTO_SRCDIR \"${CMAKE_CURRENT_SOURCE_DIR}/clickhouse-proto\")\nset(CLICKHOUSE_PROTO_BUILDDIR \"${CMAKE_CURRENT_BINARY_DIR}/clickhouse-proto\")\nset(CLICKHOUSE_PROTO_BUILDDIR ${CLICKHOUSE_PROTO_BUILDDIR} PARENT_SCOPE)\n\nset(OTEL_PROTO_SOURCES\n  opentelemetry/proto/common/v1/common.proto\n  opentelemetry/proto/logs/v1/logs.proto\n  opentelemetry/proto/metrics/v1/metrics.proto\n  opentelemetry/proto/trace/v1/trace.proto\n  opentelemetry/proto/resource/v1/resource.proto)\n\nset(OTEL_PROTO_GRPC_SOURCES\n  opentelemetry/proto/collector/logs/v1/logs_service.proto\n  opentelemetry/proto/collector/metrics/v1/metrics_service.proto\n  opentelemetry/proto/collector/trace/v1/trace_service.proto)\n\nset(GOOGLEAPIS_PROTO_SOURCES\n  google/api/annotations.proto\n  google/api/client.proto\n  google/api/field_behavior.proto\n  google/api/http.proto\n  google/api/launch_stage.proto\n  google/api/resource.proto\n  google/cloud/bigquery/storage/v1/annotations.proto\n  google/cloud/bigquery/storage/v1/arrow.proto\n  google/cloud/bigquery/storage/v1/avro.proto\n  google/cloud/bigquery/storage/v1/protobuf.proto\n  google/cloud/bigquery/storage/v1/stream.proto\n  google/cloud/bigquery/storage/v1/table.proto\n  google/rpc/status.proto\n)\n\nset(GOOGLEAPIS_PROTO_GRPC_SOURCES\n  google/cloud/bigquery/storage/v1/storage.proto\n  google/pubsub/v1/pubsub.proto\n  google/pubsub/v1/schema.proto\n)\n\nset(LOKI_PROTO_GRPC_SOURCES\n  push.proto)\n\nset(CLICKHOUSE_PROTO_GRPC_SOURCES\n  clickhouse_grpc.proto\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Subdirectories and Stats Module Sources - CMake\nDESCRIPTION: This CMake snippet organizes the build system by adding the 'aggregator' and 'tests' subdirectories, and by defining variables for the stats module's headers and sources. Dependencies include CMake (typically v3.0+) with variables like STATS_AGGREGATOR_HEADERS and STATS_AGGREGATOR_SOURCES available in the parent scope. It requires the stats directory structure and lists all key source/header files for downstream build steps, enabling modular inclusion via PARENT_SCOPE.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/stats/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(aggregator)\n\nset(STATS_HEADERS\n    stats/stats.h\n    stats/stats-compat.h\n    stats/stats-control.h\n    stats/stats-counter.h\n    stats/stats-cluster.h\n    stats/stats-csv.h\n    stats/stats-log.h\n    stats/stats-prometheus.h\n    stats/stats-registry.h\n    stats/stats-query.h\n    stats/stats-query-commands.h\n    stats/stats-cluster-logpipe.h\n    stats/stats-cluster-single.h\n    stats/stats-cluster-key-builder.h\n    ${STATS_AGGREGATOR_HEADERS}\n    PARENT_SCOPE)\n\nset(STATS_SOURCES\n    stats/stats.c\n    stats/stats-control.c\n    stats/stats-cluster.c\n    stats/stats-csv.c\n    stats/stats-log.c\n    stats/stats-prometheus.c\n    stats/stats-registry.c\n    stats/stats-query.c\n    stats/stats-query-commands.c\n    stats/stats-cluster-logpipe.c\n    stats/stats-cluster-single.c\n    stats/stats-cluster-key-builder.c\n    ${STATS_AGGREGATOR_SOURCES}\n    PARENT_SCOPE)\n\nadd_test_subdirectory(tests)\n```\n\n----------------------------------------\n\nTITLE: Setting Rewrite Module Header File List - CMake\nDESCRIPTION: Defines the REWRITE_HEADERS variable to aggregate all header files required by the syslog-ng rewrite module. This snippet is intended for use within a CMakeLists.txt file. It includes multiple header paths and sets the variable in the parent scope, supporting modular project organization.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/rewrite/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(REWRITE_HEADERS\n    rewrite/rewrite-expr.h\n    rewrite/rewrite-set-tag.h\n    rewrite/rewrite-set.h\n    rewrite/rewrite-subst.h\n    rewrite/rewrite-expr-parser.h\n    rewrite/rewrite-groupset.h\n    rewrite/rewrite-unset.h\n    rewrite/rewrite-rename.h\n    rewrite/rewrite-set-matches.h\n    rewrite/rewrite-unset-matches.h\n    rewrite/rewrite-set-pri.h\n    rewrite/rewrite-set-severity.h\n    rewrite/rewrite-set-facility.h\n    PARENT_SCOPE\n    )\n```\n\n----------------------------------------\n\nTITLE: Setting List Scanner Headers with CMake\nDESCRIPTION: This snippet assigns the variable LIST_SCANNER_HEADERS to a list containing the path to the list-scanner.h header file and sets its scope to PARENT_SCOPE. It ensures that the specified header file(s) are accessible for CMake operations in the parent scope, enabling modular organization of build files. Dependency is on CMake, and the key parameter is the file path, which should be correct for successful inclusion.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/scanner/list-scanner/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIST_SCANNER_HEADERS\n    list-scanner/list-scanner.h\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Linking PatternDB Library in CMake\nDESCRIPTION: Links the `patterndb` library against the `syslog-ng` target. The `PUBLIC` keyword indicates that targets linking against `patterndb` will also implicitly link against `syslog-ng` and inherit its public include directories.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/correlation/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(patterndb PUBLIC syslog-ng)\n```\n\n----------------------------------------\n\nTITLE: Installing Various syslog-ng Header Files in CMake\nDESCRIPTION: Installs collections of header files (defined in variables like LIB_HEADERS, VALUE_PAIRS_HEADERS, etc.) into specific subdirectories under 'include/syslog-ng' within the installation prefix. This organizes the public API headers by component (e.g., value-pairs, compat, control, filter, logmsg).\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES ${LIB_HEADERS} DESTINATION include/syslog-ng)\n\ninstall(FILES ${VALUE_PAIRS_HEADERS} DESTINATION include/syslog-ng/value-pairs)\ninstall(FILES ${COMPAT_HEADERS} DESTINATION include/syslog-ng/compat)\ninstall(FILES ${CONTROL_HEADERS} DESTINATION include/syslog-ng/control)\ninstall(FILES ${HEALTHCHECK_HEADERS} DESTINATION include/syslog-ng/healthcheck)\ninstall(FILES ${DEBUGGER_HEADERS} DESTINATION include/syslog-ng/debugger)\ninstall(FILES ${FILTER_HEADERS} DESTINATION include/syslog-ng/filter)\ninstall(FILES ${FILTERX_HEADERS} DESTINATION include/syslog-ng/filterx)\ninstall(FILES ${LOGMSG_HEADERS} DESTINATION include/syslog-ng/logmsg)\ninstall(FILES ${LOGPROTO_HEADERS} DESTINATION include/syslog-ng/logproto)\ninstall(FILES ${PARSER_HEADERS} DESTINATION include/syslog-ng/parser)\ninstall(FILES ${REWRITE_HEADERS} DESTINATION include/syslog-ng/rewrite)\ninstall(FILES ${STATS_HEADERS} DESTINATION include/syslog-ng/stats)\ninstall(FILES ${METRICS_HEADERS} DESTINATION include/syslog-ng/metrics)\ninstall(FILES ${TEMPLATE_HEADERS} DESTINATION include/syslog-ng/template)\ninstall(FILES ${TRANSPORT_HEADERS} DESTINATION include/syslog-ng/transport)\ninstall(FILES ${CSV_SCANNER_HEADERS} DESTINATION include/syslog-ng/scanner/csv-scanner)\ninstall(FILES ${LOGTHRDEST_HEADERS} DESTINATION include/syslog-ng/logthrdest)\ninstall(FILES ${LOGTHRSOURCE_HEADERS} DESTINATION include/syslog-ng/logthrsource)\ninstall(FILES ${SIGNAL_SLOT_CONNECTOR_HEADERS} DESTINATION include/syslog-ng/signal-slot-connector)\n```\n\n----------------------------------------\n\nTITLE: Compiling with EventLog Macro-based Syslog Compatibility - C/Shell\nDESCRIPTION: Demonstrates how to recompile a C-based application to use EventLog's macro-based syslog compatibility wrapper. By defining the EVENTLOG_SYSLOG_MACROS macro at compile time, syslog calls in the source are redirected to EventLog's compatibility functions. Requires the application source and linking against libevtlog. No changes to application logic are needed beyond recompilation.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/eventlog/doc/API.txt#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ cc -DEVENTLOG_SYSLOG_MACROS syslogapp.c -levtlog\n```\n\n----------------------------------------\n\nTITLE: Defining a Syslog-ng Plugin Build Configuration in CMake\nDESCRIPTION: This CMake code defines how to build a syslog-ng plugin. It starts with a `module_switch` to create an enable/disable option (`ENABLE_@PLUGIN_NAME_USUC@`). If enabled, it specifies the C and header source files (`@PLUGIN_NAME_USUC@_SOURCES`) and uses the `add_module` function to set up the build target (`@PLUGIN_NAME_US@`), linking it with its grammar (`@PLUGIN_NAME@-grammar`) and sources. Placeholders (`@PLUGIN_NAME_USUC@`, `@PLUGIN_NAME@`, `@PLUGIN_NAME_US@`) indicate this is a template requiring substitution before use.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/dev-utils/plugin_skeleton_creator/plugin_template_CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nmodule_switch(ENABLE_@PLUGIN_NAME_USUC@ \"Enable @PLUGIN_NAME@\")\nif (NOT ENABLE_@PLUGIN_NAME_USUC@)\n  return()\nendif()\n\nset(@PLUGIN_NAME_USUC@_SOURCES\n    @PLUGIN_NAME@-parser.h\n    @PLUGIN_NAME@-plugin.c\n    @PLUGIN_NAME@-parser.c\n)\n\nadd_module(\n  TARGET @PLUGIN_NAME_US@\n  GRAMMAR @PLUGIN_NAME@-grammar\n  SOURCES ${@PLUGIN_NAME_USUC@_SOURCES}\n)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Returning if GRPC is Disabled - CMake\nDESCRIPTION: This snippet checks if the GRPC feature is disabled (ENABLE_GRPC not set) and immediately exits the CMake processing if that's the case. This prevents further configuration and building of GRPC-dependent modules and should be placed at the top of the CMake script. No dependencies are required for this pattern, but accuracy of the ENABLE_GRPC variable is crucial.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/grpc/loki/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT ENABLE_GRPC)\n  return()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Clang Sanitizers in CMake\nDESCRIPTION: Configures Clang sanitizers based on the `SANITIZER` cache variable (string type, default OFF, allowed values: OFF, address, thread, undefined, address-all). If a sanitizer is selected, it sets necessary C compiler flags (`-fsanitize=...`, `-O1`, `-fno-omit-frame-pointer`, etc.). For `address-all`, it enables `-fsanitize-address-use-after-scope`. On Apple platforms, it also adds the sanitizer flag to the shared linker flags.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/CMakeLists.txt#_snippet_34\n\nLANGUAGE: cmake\nCODE:\n```\n# Sanatizer configuration\nset(SANITIZER \"OFF\" CACHE STRING \"Enable clang sanitizer\")\nset_property(CACHE SANITIZER PROPERTY STRINGS OFF address thread undefined address-all)\nif (SANITIZER)\n  SET(SANITIZE_MODE \"${SANITIZER}\")\n  if (SANITIZER MATCHES address-all)\n    SET(SANITIZE_MODE \"address\")\n    SET(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -fsanitize-address-use-after-scope\")\n  endif()\n  SET(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -O1 -fsanitize=${SANITIZE_MODE} -fno-omit-frame-pointer -fno-optimize-sibling-calls\")\n  if(APPLE)\n    SET(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} -fsanitize=${SANITIZE_MODE}\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Generating Configuration Header File in CMake\nDESCRIPTION: Uses `configure_file` to generate `syslog-ng-config.h` in the current binary directory from the template file `syslog-ng-config.h.in` located in the current source directory. This process substitutes `@VAR@` variables in the `.in` file with their CMake values.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/CMakeLists.txt#_snippet_37\n\nLANGUAGE: cmake\nCODE:\n```\nconfigure_file(${CMAKE_CURRENT_SOURCE_DIR}/syslog-ng-config.h.in ${CMAKE_CURRENT_BINARY_DIR}/syslog-ng-config.h)\n```\n\n----------------------------------------\n\nTITLE: Defining Interface Headers for Installation in CMake\nDESCRIPTION: Sets a CMake variable `INTERFACE_HEADERS` containing a list of header files (`loggen_plugin.h`, `loggen_helper.h`) that constitute the development interface for `loggen` components.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/tests/loggen/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nset(INTERFACE_HEADERS\n    loggen_plugin.h\n    loggen_helper.h\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Pytest Functional Test Target via CMake - CMake\nDESCRIPTION: Creates a CMake custom target called 'light-check' that executes functional tests using pytest on the specified directory. It supports additional command-line arguments via the EXTRA_ARGS variable and installs testing artifacts into the designated CMake installation prefix. The target ensures the Python virtual environment is ready before execution and gives detailed, local error reporting.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/tests/light/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_target(light-check\n   COMMAND ${PYTHON_VENV_EXECUTABLE} -m pytest ${PROJECT_SOURCE_DIR}/tests/light/functional_tests --installdir=${CMAKE_INSTALL_PREFIX} --showlocals --verbosity=3 $$EXTRA_ARGS\n   DEPENDS BuildPyVirtualEnv)\n```\n\n----------------------------------------\n\nTITLE: Defining a Criterion Unit Test for GeoIP2 Parser in CMake\nDESCRIPTION: This CMake command defines a unit test target named `test_geoip2_parser` using the `criterion` testing framework. It specifies the source file `test_geoip_parser.c`, indicates that headers from the directory defined by the `GEOIP2_INCLUDE_DIR` variable are needed, and declares a dependency on the `geoip2-plugin` target. The `LIBTEST` argument might specify the type or category of the test.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/geoip2/tests/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_unit_test(LIBTEST CRITERION\n  TARGET test_geoip2_parser\n  INCLUDES \"${GEOIP2_INCLUDE_DIR}\"\n  DEPENDS geoip2-plugin\n  SOURCES test_geoip_parser.c)\n```\n\n----------------------------------------\n\nTITLE: Defining Native Header Files (CMake)\nDESCRIPTION: This snippet sets a CMake variable `NATIVE_HEADERS` to list the C header files associated with the native bindings. It includes corresponding headers for the parser logic and the generated grammar header file.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/native/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset (NATIVE_HEADERS\n    native-parser.h\n    parser.h\n    ${CMAKE_CURRENT_BINARY_DIR}/native-grammar.h\n    )\n```\n\n----------------------------------------\n\nTITLE: Setting Version Properties for loggen_plugin Library in CMake\nDESCRIPTION: Sets the VERSION and SOVERSION properties for the `loggen_plugin` library target using the `SYSLOG_NG_VERSION` variable, similar to the `loggen_helper` target, for consistency or informational purposes.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/tests/loggen/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nset_target_properties(loggen_plugin\n    PROPERTIES VERSION ${SYSLOG_NG_VERSION}\n    SOVERSION ${SYSLOG_NG_VERSION})\n```\n\n----------------------------------------\n\nTITLE: Defining, Building, and Installing loggen_socket_plugin in CMake\nDESCRIPTION: This sequence of CMake commands defines the source file(s) for the `loggen_socket_plugin`, builds it as a shared library, links it against `loggen_plugin`, sets its version properties based on `SYSLOG_NG_VERSION`, and specifies its installation path using `LOGGEN_PLUGIN_INSTALL_DIR`. It requires CMake and assumes the `loggen_plugin` target and the variables `SYSLOG_NG_VERSION` and `LOGGEN_PLUGIN_INSTALL_DIR` are defined elsewhere.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/tests/loggen/socket_plugin/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset (LOGGEN_SOCKET_PLUGIN_SOURCE\n  socket_plugin.c)\n```\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(loggen_socket_plugin\n  SHARED\n  ${LOGGEN_SOCKET_PLUGIN_SOURCE}\n  )\n```\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(loggen_socket_plugin loggen_plugin)\n```\n\nLANGUAGE: cmake\nCODE:\n```\nset_target_properties(loggen_socket_plugin\n    PROPERTIES VERSION ${SYSLOG_NG_VERSION}\n    SOVERSION ${SYSLOG_NG_VERSION})\n```\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS loggen_socket_plugin LIBRARY DESTINATION ${LOGGEN_PLUGIN_INSTALL_DIR})\n```\n\n----------------------------------------\n\nTITLE: Handling GeoIP2 Module Prerequisite Checks in CMake\nDESCRIPTION: This block performs prerequisite checks for the GeoIP2 module. It first checks if the module is disabled (`ENABLE_GEOIP2` is false) and exits the current CMake script scope using `return()` if so. If the module is enabled but the required `libmaxminddb` library was not found (`LIBMAXMINDDB_FOUND` is false), it halts the build process with a fatal error message.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/geoip2/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif (NOT ENABLE_GEOIP2)\n  return ()\nendif ()\n\nif (NOT LIBMAXMINDDB_FOUND)\n  message(FATAL_ERROR \"GeIP2 module is enabled but libmaxminddb not found.\")\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Finding libmaxminddb Dependency for GeoIP2 in CMake\nDESCRIPTION: This snippet conditionally searches for the `libmaxminddb` package using `find_package` if the `ENABLE_GEOIP2` option is either explicitly enabled or not defined (defaulting to enabled). This is a prerequisite for building the GeoIP2 module.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/geoip2/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif (NOT DEFINED ENABLE_GEOIP2 OR ENABLE_GEOIP2)\n  find_package(LIBMAXMINDDB)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Test Subdirectory to Build - CMake\nDESCRIPTION: This code line instructs CMake to include an additional subdirectory named 'tests' during the build process. This is commonly used to integrate test targets, ensuring testing is part of the build workflow. The 'tests' directory must exist within the project structure and contain its own CMakeLists.txt for the inclusion to work.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/compat/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_test_subdirectory(tests)\n```\n\n----------------------------------------\n\nTITLE: Checking and Finding Curl Dependency in CMake\nDESCRIPTION: This snippet checks if the HTTP module (`ENABLE_CURL`) is enabled. If it is, it attempts to find the Curl library using `find_package`. If `ENABLE_CURL` is explicitly set to false, it returns early. If Curl is required but not found, it triggers a fatal error.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/http/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif (NOT DEFINED ENABLE_CURL OR ENABLE_CURL)\n  find_package(Curl)\nendif()\n\nmodule_switch(ENABLE_CURL \"Enable http destination\" Curl_FOUND)\nif (NOT ENABLE_CURL)\n  return ()\nendif ()\n\nif (NOT Curl_FOUND)\n  message(FATAL_ERROR \"HTTP module enabled, but libcurl not found\")\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Adding CRITERION Unit Test in CMake\nDESCRIPTION: This CMake command utilizes a custom function `add_unit_test` to register a unit test. It adds a test named 'test_kv_scanner' to the 'LIBTEST' target, specifies 'CRITERION' as the testing framework, and indicates that header files from the directory defined by the variable '${KV_SCANNER_INCLUDE_DIR}' are required for compilation.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/scanner/kv-scanner/tests/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_unit_test(LIBTEST CRITERION TARGET test_kv_scanner INCLUDES \"${KV_SCANNER_INCLUDE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Adding Unit Test with CMake (CMake)\nDESCRIPTION: This snippet adds a unit test to a CMake build system using the add_unit_test macro, specifying the Criterion testing framework and linking against LIBTEST for the 'test_logthrdestdrv' target. Dependencies include Criterion and the LIBTEST library. The command sets up an automated test to be run during the build process, with the 'test_logthrdestdrv' serving as the test binary. No parameters beyond those shown are required, but CMake and the specified libraries must be properly configured in the build environment.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/logthrdest/tests/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_unit_test(CRITERION LIBTEST TARGET test_logthrdestdrv)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Finding JSON-C Dependency in CMake\nDESCRIPTION: This snippet checks if the `ENABLE_JSON` variable is not defined or is set to TRUE. If the condition holds, it uses the `external_or_find_package` command (likely a custom macro or function within the syslog-ng build system) to locate the JSON-C library, which is required for JSON support.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/json/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif (NOT DEFINED ENABLE_JSON OR ENABLE_JSON)\n  external_or_find_package(JSONC)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Unit Tests with add_unit_test Macro - CMake\nDESCRIPTION: Defines unit test targets for the Eventlog module using a custom add_unit_test macro. Each invocation specifies a test target, include directories (referencing Eventlog_INCLUDE_DIR), and a source C file implementing the test logic. Suitable for inclusion in a CMakeLists.txt file, these targets allow the tests to be built and run during the build process. Dependencies include the definition of add_unit_test macro and the presence of specified source files.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/eventlog/tests/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_unit_test(TARGET test_evtrec\n  INCLUDES \"${Eventlog_INCLUDE_DIR}\"\n  SOURCES evtrec.c)\n\nadd_unit_test(TARGET test_evtfmt\n  INCLUDES \"${Eventlog_INCLUDE_DIR}\"\n  SOURCES evtfmt.c)\n\nadd_unit_test(CRITERION TARGET test_evt_tag_mem\n  INCLUDES \"${Eventlog_INCLUDE_DIR}\"\n  SOURCES evt_tag_mem.c)\n\nadd_unit_test(TARGET test_evtsyslog\n  INCLUDES \"${Eventlog_INCLUDE_DIR}\"\n  SOURCES evtsyslog.c)\n\nadd_unit_test(TARGET test_evtsyslog_macros\n  INCLUDES \"${Eventlog_INCLUDE_DIR}\"\n  SOURCES evtsyslog.c)\n```\n\n----------------------------------------\n\nTITLE: Adding Test Subdirectory for Python Module in CMake\nDESCRIPTION: Uses the `add_test_subdirectory` command (likely a custom CMake function within the project) to include and configure tests located in the 'tests' subdirectory. This integrates the Python module's tests into the overall syslog-ng build and testing framework.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/python/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_test_subdirectory(tests)\n```\n\n----------------------------------------\n\nTITLE: Defining C Source Files for BigQuery Plugin Interface (CMake)\nDESCRIPTION: Sets a CMake list variable `BIGQUERY_SOURCES` containing the C source and header files that constitute the main BigQuery plugin interface for syslog-ng, including configuration parsing.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/grpc/bigquery/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(BIGQUERY_SOURCES\n  bigquery-plugin.c\n  bigquery-parser.c\n  bigquery-parser.h\n)\n```\n\n----------------------------------------\n\nTITLE: Defining a Criterion Unit Test using add_unit_test in CMake\nDESCRIPTION: This CMake command defines a unit test named 'test_basicfuncs'. It utilizes the Criterion testing framework (specified by CRITERION) and targets the LIBTEST component. The test execution depends on the 'syslogformat' and 'basicfuncs' components or libraries being built first.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/basicfuncs/tests/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_unit_test(LIBTEST CRITERION TARGET test_basicfuncs DEPENDS syslogformat basicfuncs)\n```\n\n----------------------------------------\n\nTITLE: Adding Unit Test with CRITERION Framework in CMake\nDESCRIPTION: This CMake command registers a new unit test target named 'test_mock_transport', specifies the use of the CRITERION testing framework, and includes 'libtest' as a dependency. The target will be constructed during build and can be invoked during the CMake test phase. Ensure that both CRITERION and libtest are available and correctly linked in your project. The input is the configuration command itself, and the output is the addition of the unit test target within the CMake build setup.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/libtest/tests/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_unit_test(CRITERION LIBTEST TARGET test_mock_transport)\n```\n\n----------------------------------------\n\nTITLE: Defining the BigQuery C++ Static Library Target (CMake)\nDESCRIPTION: Defines a static library target named `bigquery-cpp` using the `add_module` CMake function/macro. It compiles the sources listed in `BIGQUERY_CPP_SOURCES`, links against gRPC-related libraries (`MODULE_GRPC_LIBS`, `grpc-protos`, `grpc-common-cpp`), and specifies include directories for Google APIs protos and the gRPC module.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/grpc/bigquery/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_module(\n  TARGET bigquery-cpp\n  SOURCES ${BIGQUERY_CPP_SOURCES}\n  DEPENDS ${MODULE_GRPC_LIBS} grpc-protos grpc-common-cpp\n  INCLUDES ${GOOGLEAPIS_PROTO_BUILDDIR} ${PROJECT_SOURCE_DIR}/modules/grpc\n  LIBRARY_TYPE STATIC\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Unit Tests with Dependencies using CMake (CMake)\nDESCRIPTION: These CMake commands define four unit test targets for different JSON-related components in syslog-ng. Each add_unit_test invocation creates a target with given dependencies, such as the json-plugin and JSON-C libraries, and specifies include directories when needed. To function, the environment must have CMake, syslog-ng source, and the corresponding JSON libraries installed. Inputs are the module names and the dependencies, and successful execution results in build targets for test suites; improper or missing dependencies will prevent test builds.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/json/tests/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_unit_test(LIBTEST CRITERION TARGET test_format_json\\n  DEPENDS syslogformat json-plugin ${JSONC_LIBRARY})\n```\n\nLANGUAGE: cmake\nCODE:\n```\nadd_unit_test(LIBTEST CRITERION TARGET test_filterx_format_json\\n  DEPENDS syslogformat json-plugin ${JSONC_LIBRARY})\n```\n\nLANGUAGE: cmake\nCODE:\n```\nadd_unit_test(LIBTEST CRITERION TARGET test_json_parser\\n  INCLUDES \\\"${JSON_INCLUDE_DIR}\\\"\\n  DEPENDS json-plugin ${JSONC_LIBRARY})\n```\n\nLANGUAGE: cmake\nCODE:\n```\nadd_unit_test(LIBTEST CRITERION TARGET test_dot_notation\\n  INCLUDES \\\"${JSON_INCLUDE_DIR}\\\" \\\"${JSONC_INCLUDE_DIR}\\\"\\n  DEPENDS json-plugin ${JSONC_LIBRARY})\n```\n\n----------------------------------------\n\nTITLE: Configuring MQTT Source Module with CMake - CMake\nDESCRIPTION: This CMake script declares sources for the MQTT source component, sets Eclipse Paho MQTT as a dependency, and defines the mqtt-source as a static module to be built as part of the project. It adjusts the include path for the target so required headers from MQTT are visible during compilation. The script requires CMake and Eclipse Paho MQTT C libraries. Key parameters include 'MQTT_SOURCE_SOURCES' (source/header files for the module), and 'MQTT_DIR' for include directories. The output is a static library for MQTT integration within syslog-ng, and this file must be processed as part of a larger CMake-based build. Limitation: Assumes variables like MQTT_DIR are defined elsewhere.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/mqtt/source/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(MQTT_SOURCE_SOURCES\n    mqtt-source.c\n    mqtt-source.h\n)\n\nadd_module(\n  TARGET mqtt-source\n  DEPENDS eclipse-paho-mqtt-c::paho-mqtt3cs\n  SOURCES ${MQTT_SOURCE_SOURCES}\n  LIBRARY_TYPE STATIC # STATIC: Built as part of a larger libmqtt module\n)\n\ntarget_include_directories(mqtt-source PUBLIC ${MQTT_DIR})\n```\n\n----------------------------------------\n\nTITLE: Adding Test Subdirectory for linux-kmsg-format - CMake\nDESCRIPTION: This snippet registers the tests directory using add_test_subdirectory, instructing CMake to process CMakeLists.txt under the tests folder. It is dependent on CMake and assumes a standard directory layout with a 'tests' subfolder. The result is that test targets or test cases defined in the referenced test CMakeLists.txt are included in the build process, enabling automated or manual testing channels.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/linux-kmsg-format/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_test_subdirectory(tests)\n\n```\n\n----------------------------------------\n\nTITLE: Adding Unit Test for systemd_journal with CMake - CMake\nDESCRIPTION: Defines a unit test target named 'test_systemd_journal' in the CMake build system, intended to test systemd journal related functionality. The test depends on the 'sdjournal' library and utilizes the 'test_systemd_journal.c', 'journald-mock.c', and 'test-source.c' sources. Requires CMake and the CRITERION testing framework; the relevant sources must be present for the build and test to succeed.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/systemd-journal/tests/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_unit_test(CRITERION\n  TARGET test_systemd_journal\n  DEPENDS sdjournal\n  SOURCES test_systemd_journal.c journald-mock.c test-source.c)\n```\n\n----------------------------------------\n\nTITLE: Adding Test Subdirectory - CMake\nDESCRIPTION: Invokes CMake's add_test_subdirectory command to include the 'tests' subdirectory in the build process, enabling integration of test targets. This ensures that all tests located in the specified subdirectory are processed when the project is built. No parameters are required other than the path, and this operation depends on the existence of a 'tests' directory with a valid CMakeLists.txt file.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/debugger/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_test_subdirectory(tests)\n```\n\n----------------------------------------\n\nTITLE: Adding Criterion Unit Tests using add_unit_test Macro in CMake\nDESCRIPTION: These CMake commands utilize the 'add_unit_test' macro to define individual unit tests. Each test is associated with the 'LIBTEST' library, uses the 'CRITERION' framework, and has a unique target name (e.g., 'test_rewrite', 'test_set_pri'). This pattern registers tests for various rewrite rule operations within the build system.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/rewrite/tests/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_unit_test(LIBTEST CRITERION TARGET test_rewrite)\nadd_unit_test(LIBTEST CRITERION TARGET test_set_pri)\nadd_unit_test(LIBTEST CRITERION TARGET test_set_matches)\nadd_unit_test(LIBTEST CRITERION TARGET test_set_tag)\nadd_unit_test(LIBTEST CRITERION TARGET test_rename)\nadd_unit_test(LIBTEST CRITERION TARGET test_set_severity)\nadd_unit_test(LIBTEST CRITERION TARGET test_set_facility)\n```\n\n----------------------------------------\n\nTITLE: Adding Criterion Library Unit Test 'test_encode' in CMake\nDESCRIPTION: This CMake command utilizes the `add_unit_test` macro or function to add a unit test named `test_encode`. It specifies `CRITERION` as the testing framework, potentially indicates a test category or type with `LIBTEST`, and associates the test with the `test_encode` target. This integrates the test into the CMake/CTest system, possibly grouping it under library tests.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/str-repr/tests/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_unit_test(CRITERION LIBTEST TARGET test_encode)\n```\n\n----------------------------------------\n\nTITLE: Conditional Enabling of Cloud Auth with C++ and cURL - CMake\nDESCRIPTION: This snippet conditionally enables the Cloud Auth feature based on C++ and cURL support within a CMake build process. It checks if Cloud Auth is enabled without C++ support, triggering a fatal error if so. It then switches modules, locates required packages like cURL, and sets sources for the module targets. Inputs involve CMake variables (ENABLE_CLOUD_AUTH, ENABLE_CPP, ENABLE_CLOUD_AUTH_CURL, Curl_FOUND) and dependencies are expected to be present before this file executes. The script outputs configured and registered syslog-ng modules while halting the build on configuration errors.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/cloud-auth/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(ENABLE_CLOUD_AUTH AND NOT ENABLE_CPP)\n  message(FATAL_ERROR \"C++ support is mandatory when the Cloud Auth module is enabled.\")\nendif()\n\nmodule_switch(ENABLE_CLOUD_AUTH \"Enable Cloud Auth\" ENABLE_CPP)\n\nif(NOT ENABLE_CLOUD_AUTH OR NOT ENABLE_CPP)\n  return()\nendif()\n\nif (NOT DEFINED ENABLE_CLOUD_AUTH_CURL OR ENABLE_CLOUD_AUTH_CURL)\n  find_package(Curl)\nendif()\n\nmodule_switch(ENABLE_CLOUD_AUTH_CURL \"Enable cURL support for cloud-auth()\" Curl_FOUND)\nif (NOT ENABLE_CLOUD_AUTH_CURL)\n  return ()\nendif ()\n\nif (NOT Curl_FOUND)\n  message(FATAL_ERROR \"cURL support for cloud-auth() enabled, but libcurl not found\")\nendif ()\n\nset(CLOUD_AUTH_CPP_SOURCES\n  cloud-auth.c\n  cloud-auth.h\n  cloud-auth.cpp\n  cloud-auth.hpp\n  google-auth.h\n  google-auth.cpp\n  google-auth.hpp\n  azure-auth.h\n  azure-auth.cpp\n  azure-auth.hpp\n)\n\nset(OTEL_SOURCES\n  cloud-auth-plugin.c\n  cloud-auth-parser.c\n  cloud-auth-parser.h\n)\n\nadd_module(\n  TARGET cloud-auth-cpp\n  SOURCES ${CLOUD_AUTH_CPP_SOURCES}\n  INCLUDES ${PROJECT_SOURCE_DIR}\n           ${PROJECT_SOURCE_DIR}/modules/cloud-auth\n           ${PROJECT_SOURCE_DIR}/modules/cloud-auth/jwt-cpp/include\n           ${Curl_INCLUDE_DIR}\n  DEPENDS ${Curl_LIBRARIES}\n  LIBRARY_TYPE STATIC\n)\n\nadd_module(\n  TARGET cloud_auth\n  GRAMMAR cloud-auth-grammar\n  DEPENDS cloud-auth-cpp\n  INCLUDES ${PROJECT_SOURCE_DIR}\n           ${PROJECT_SOURCE_DIR}/modules/cloud-auth\n  SOURCES ${OTEL_SOURCES}\n)\n\n```\n\n----------------------------------------\n\nTITLE: Defining and Installing slogverify Executable in CMake\nDESCRIPTION: This CMake script defines an executable target named 'slogverify' from the source file 'slogverify.c'. It configures public include directories, links the executable against 'eventlog', 'syslog-ng', and 'syslog-ng-secure-logging' libraries, and sets up an installation rule to place the compiled executable in the 'bin' directory. Dependencies include CMake and the linked libraries.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/secure-logging/slogverify/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(slogverify slogverify.c)\ntarget_include_directories (secure-logging PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})\t\ntarget_link_libraries(slogverify eventlog syslog-ng syslog-ng-secure-logging)\ninstall(TARGETS slogverify RUNTIME DESTINATION bin)\n```\n\n----------------------------------------\n\nTITLE: Adding Unit Test to CMake with Criterion in CMake\nDESCRIPTION: Adds the 'test_instant_ack_tracker' unit test target through CMake using the Criterion framework. Prerequisites include CMake setup and prior inclusion of the target test code in the build system. This command automates the integration of the test into continuous integration pipelines or local development workflows.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/ack-tracker/tests/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_unit_test(CRITERION TARGET test_instant_ack_tracker)\n```\n\n----------------------------------------\n\nTITLE: Adding Unit Test to CMake with Criterion in CMake\nDESCRIPTION: Registers the 'test_consecutive_ack_record_container' unit test as a build target using the Criterion test framework in CMake. Requires CMake and the Criterion testing library to be available and configured. No arguments are passed; the test is assumed to be defined elsewhere in the project and will be available after building. The command expects the target to be correctly implemented for integration with the overall testing suite.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/ack-tracker/tests/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_unit_test(CRITERION TARGET test_consecutive_ack_record_container)\n```\n\n----------------------------------------\n\nTITLE: Adding Criterion Unit Test 'test_misc' in CMake\nDESCRIPTION: Registers the 'test_misc' unit test targeting the 'LIBTEST' library with the Criterion framework in the CMake build system. This command ensures the miscellaneous tests are included in the build.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/timeutils/tests/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nadd_unit_test(LIBTEST CRITERION TARGET test_misc)\n```\n\n----------------------------------------\n\nTITLE: Detecting systemd Library Dependency with find_package in CMake Language\nDESCRIPTION: Utilizes the CMake find_package command to locate the systemd library dependency. This enables subsequent retrieval of systemd-associated include directories and libraries, referenced via variables such as Libsystemd_INCLUDE_DIRS and Libsystemd_LIBRARIES. This step is essential to ensure availability of necessary headers and libraries for building modules dependent on systemd features.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/system-source/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package (systemd)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for kvformat Module - CMake\nDESCRIPTION: This snippet defines a CMake list variable KVFORMAT_SOURCES, which aggregates all C and header files required to build the kvformat module used for key-value parsing and formatting within syslog-ng. This is foundational for modular build processes and allows easier management of source inclusion when setting up the build target. No direct parameters are accepted; dependencies are the existence of the listed C and header source files in the relevant directories.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/kvformat/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(KVFORMAT_SOURCES\n    format-welf.c\n    format-welf.h\n    kv-parser.c\n    kv-parser.h\n    linux-audit-parser.c\n    linux-audit-parser.h\n    kv-parser-parser.c\n    kv-parser-parser.h\n    kvformat-plugin.c\n    filterx-func-parse-kv.h\n    filterx-func-parse-kv.c\n    filterx-func-format-kv.h\n    filterx-func-format-kv.c\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Unit Tests using add_unit_test in CMake\nDESCRIPTION: This CMake code defines multiple unit tests for the `syslog-ng` library using the `add_unit_test` macro/function and the Criterion testing framework. Each line defines a test case targeting a specific aspect of the library (e.g., `test_filterx_expr`, `test_object_datetime`, `test_expr_comparison`). All these tests are part of the `LIBTEST` group, use `CRITERION`, and require the `json-plugin` and the JSON-C library (`${JSONC_LIBRARY}`) as dependencies.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/filterx/tests/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_unit_test(LIBTEST CRITERION TARGET test_filterx_expr DEPENDS syslogformat json-plugin ${JSONC_LIBRARY})\nadd_unit_test(LIBTEST CRITERION TARGET test_object_datetime DEPENDS json-plugin ${JSONC_LIBRARY})\nadd_unit_test(LIBTEST CRITERION TARGET test_object_json DEPENDS json-plugin ${JSONC_LIBRARY})\nadd_unit_test(LIBTEST CRITERION TARGET test_object_message DEPENDS json-plugin ${JSONC_LIBRARY})\nadd_unit_test(LIBTEST CRITERION TARGET test_object_null DEPENDS json-plugin ${JSONC_LIBRARY})\nadd_unit_test(LIBTEST CRITERION TARGET test_object_primitive DEPENDS json-plugin ${JSONC_LIBRARY})\nadd_unit_test(LIBTEST CRITERION TARGET test_object_string DEPENDS json-plugin ${JSONC_LIBRARY})\nadd_unit_test(LIBTEST CRITERION TARGET test_expr_comparison DEPENDS json-plugin ${JSONC_LIBRARY})\nadd_unit_test(LIBTEST CRITERION TARGET test_expr_condition DEPENDS json-plugin ${JSONC_LIBRARY})\nadd_unit_test(LIBTEST CRITERION TARGET test_builtin_functions DEPENDS json-plugin ${JSONC_LIBRARY})\nadd_unit_test(LIBTEST CRITERION TARGET test_object_bytes DEPENDS json-plugin ${JSONC_LIBRARY})\nadd_unit_test(LIBTEST CRITERION TARGET test_object_protobuf DEPENDS json-plugin ${JSONC_LIBRARY})\nadd_unit_test(LIBTEST CRITERION TARGET test_object_boolean DEPENDS json-plugin ${JSONC_LIBRARY})\nadd_unit_test(LIBTEST CRITERION TARGET test_object_integer DEPENDS json-plugin ${JSONC_LIBRARY})\nadd_unit_test(LIBTEST CRITERION TARGET test_object_double DEPENDS json-plugin ${JSONC_LIBRARY})\nadd_unit_test(LIBTEST CRITERION TARGET test_type_registry DEPENDS json-plugin ${JSONC_LIBRARY})\nadd_unit_test(LIBTEST CRITERION TARGET test_func_istype DEPENDS json-plugin ${JSONC_LIBRARY})\nadd_unit_test(LIBTEST CRITERION TARGET test_expr_function DEPENDS json-plugin ${JSONC_LIBRARY})\nadd_unit_test(LIBTEST CRITERION TARGET test_expr_regexp DEPENDS json-plugin ${JSONC_LIBRARY})\n```\n\n----------------------------------------\n\nTITLE: Installing Empty 'var' Directory in CMake\nDESCRIPTION: Specifies the installation of a directory named `var` relative to the installation prefix. Since no files or patterns are specified, this typically creates an empty directory structure needed at runtime.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/CMakeLists.txt#_snippet_39\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(DIRECTORY DESTINATION var)\n```\n\n----------------------------------------\n\nTITLE: Adding the afsnmp Module Target in CMake\nDESCRIPTION: This CMake snippet uses a custom function `add_module` (presumably defined elsewhere in the build system) to create the build target for the `afsnmp` module. It specifies the target name (`afsnmp`), potentially a grammar file (`afsnmp-grammar`), the required Net-SNMP libraries (`${NETSNMP_LIBS}`), and the list of source files (`${afsnmp_SOURCES}`) defined previously.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/afsnmp/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_module(\n  TARGET afsnmp\n  GRAMMAR afsnmp-grammar\n  DEPENDS ${NETSNMP_LIBS}\n  SOURCES ${afsnmp_SOURCES}\n)\n```\n\n----------------------------------------\n\nTITLE: Printing Build Configuration Summary in CMake\nDESCRIPTION: Includes a CMake script named `print_config_summary.cmake` and then calls the `print_config_summary()` function defined within it. This function likely prints a summary of the enabled features and configuration choices to the console during the CMake configuration phase.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/CMakeLists.txt#_snippet_43\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(print_config_summary)\nprint_config_summary()\n```\n\n----------------------------------------\n\nTITLE: Adding Unit Test with CRITERION Using CMake - CMake\nDESCRIPTION: This CMake snippet registers a new unit test called 'test_csv_scanner' for the syslog-ng project. It uses the custom 'add_unit_test' function to associate the test with the 'LIBTEST' library, specifies 'CRITERION' as the test framework, and sets the include directory needed for the test with the 'CSV_SCANNER_INCLUDE_DIR' variable. Prerequisites include a build system supporting CMake and existence of the relevant target, library, and test framework. The snippet expects include directories and library dependencies to be properly defined beforehand. The macro facilitates automated building and test execution as part of the CI/CD process.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/scanner/csv-scanner/tests/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_unit_test(LIBTEST CRITERION TARGET test_csv_scanner INCLUDES \"${CSV_SCANNER_INCLUDE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Adding Context Unit Test with add_unit_test - CMake\nDESCRIPTION: Configures a unit test target named test_appmodel_context using a similar pattern as other unit tests in this file. The test is set up with the Criterion framework, includes the APPMODEL_INCLUDE_DIR headers, and depends on the appmodel component for correct compilation. Suitable for context-level validation within the appmodel module.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/appmodel/tests/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_unit_test(CRITERION TARGET test_appmodel_context INCLUDES \"${APPMODEL_INCLUDE_DIR}\" DEPENDS appmodel)\n```\n\n----------------------------------------\n\nTITLE: Registering and Configuring Unit Tests in CMake - CMake\nDESCRIPTION: These CMake code snippets define and configure C unit test targets for syslog-ng using a probable custom macro (add_unit_test). Each invocation registers a test executable, specifies dependencies (such as libraries 'patterndb', 'basicfuncs', or 'syslogformat'), and, in some cases, applies specific compiler options via target_compile_options to handle particular warnings (e.g., pointer-sign issues). Required dependencies must be available in the build tree. Expected input is a list of test executables and their dependencies, outputting targets that CMake can build and run under the test framework. The limitation is that the macro add_unit_test and variables (e.g., PATTERNDB_INCLUDE_DIR) must be previously defined elsewhere in the CMake project for these commands to function.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/correlation/tests/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_unit_test(CRITERION TARGET test_timer_wheel DEPENDS patterndb)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nadd_unit_test(CRITERION TARGET test_patternize DEPENDS patterndb syslogformat)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nadd_unit_test(CRITERION LIBTEST TARGET test_patterndb DEPENDS patterndb basicfuncs syslogformat)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nadd_unit_test(CRITERION TARGET test_parsers_e2e DEPENDS patterndb basicfuncs syslogformat)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nadd_unit_test(CRITERION TARGET test_radix DEPENDS patterndb)\n```\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_options(test_radix PRIVATE \"-Wno-error=pointer-sign\")\n```\n\nLANGUAGE: CMake\nCODE:\n```\n# test_parsers includes a .c file\nadd_unit_test(CRITERION TARGET test_parsers INCLUDES ${PATTERNDB_INCLUDE_DIR})\n```\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_options(test_parsers PRIVATE \"-Wno-error=pointer-sign\")\n```\n\nLANGUAGE: CMake\nCODE:\n```\nadd_unit_test(CRITERION LIBTEST TARGET test_grouping_by DEPENDS correlation basicfuncs)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Enabling Extra Compiler Warnings in CMake\nDESCRIPTION: Defines an option `ENABLE_EXTRA_WARNINGS` (default ON). If enabled, it populates the `EXTRA_WARNINGS` variable with a comprehensive list of warning flags, including C-specific ones using generator expressions (`$<$<COMPILE_LANGUAGE:C>:...>`). It adds compiler-specific flags depending on whether Clang or another compiler (assumed GCC-like) is being used.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/CMakeLists.txt#_snippet_29\n\nLANGUAGE: cmake\nCODE:\n```\noption(ENABLE_EXTRA_WARNINGS \"Enable extra warnings\" ON)\nif (ENABLE_EXTRA_WARNINGS)\n  set(EXTRA_WARNINGS\n    $<$<COMPILE_LANGUAGE:C>:-Wimplicit-function-declaration>\n    $<$<COMPILE_LANGUAGE:C>:-Wnested-externs>\n    $<$<COMPILE_LANGUAGE:C>:-Wstrict-prototypes>\n    -Wswitch-default\n    $<$<COMPILE_LANGUAGE:C>:-Wimplicit-int>\n    -Wall\n    -Wuninitialized\n    -Wdeprecated\n    -Wdeprecated-declarations\n    -Woverflow\n    -Wdouble-promotion\n    -Wfloat-equal\n    -Wpointer-arith\n    $<$<COMPILE_LANGUAGE:C>:-Wpointer-sign>\n    -Wmissing-format-attribute\n    $<$<COMPILE_LANGUAGE:C>:-Wold-style-definition>\n    -Wundef\n    -Wignored-qualifiers\n    -Wfloat-conversion\n    $<$<COMPILE_LANGUAGE:C>:-Wbad-function-cast>)\n\n  if (\"${CMAKE_C_COMPILER_ID}\" MATCHES \"Clang\")\n    set(EXTRA_WARNINGS\n      ${EXTRA_WARNINGS}\n      )\n  else()\n    set(EXTRA_WARNINGS\n      $<$<COMPILE_LANGUAGE:C>:-Wold-style-declaration>\n      -Wunused-but-set-parameter\n      $<$<COMPILE_LANGUAGE:C>:-Woverride-init>\n      ${EXTRA_WARNINGS}\n      )\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Enforcing GNU99 C Standard Optionally in CMake\nDESCRIPTION: Provides an option `ENABLE_FORCE_GNU99` (default OFF). If enabled, it adds the `-std=gnu99` flag to `CMAKE_C_FLAGS` to enforce the C99 standard with GNU extensions.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/CMakeLists.txt#_snippet_31\n\nLANGUAGE: cmake\nCODE:\n```\noption (ENABLE_FORCE_GNU99 \"Enforce C99 with gnu extensions\" OFF)\nif (ENABLE_FORCE_GNU99)\n  set (CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -std=gnu99\")\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Adding a Simple Unit Test Target in CMake - CMake\nDESCRIPTION: This code registers a separate unit test target named test_findeom for execution with the Criterion framework. It utilizes the add_unit_test macro with only the target name specified, implying default source and library configurations. Use of this snippet requires that the corresponding test_findeom target exists or is defined elsewhere in the build to avoid CMake errors.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/logproto/tests/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_unit_test(CRITERION TARGET test_findeom)\n```\n\n----------------------------------------\n\nTITLE: Adding Unit Test with CMake - CMake - C\nDESCRIPTION: This CMake command registers a unit test target named 'test_xml_scanner' under the 'LIBTEST' group, utilizing the 'Criterion' testing framework. It specifies the include directories through the 'XML_SCANNER_INCLUDE_DIR' variable to provide necessary headers during test compilation. Dependencies include CMake, the Criterion library, and available XML scanner sources; outputs are test executables integrated into the project's test suite. The code is expected to be placed in a CMakeLists.txt file and presumes that Criterion and source files are configured in the build environment.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/scanner/xml-scanner/tests/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_unit_test(LIBTEST CRITERION TARGET test_xml_scanner INCLUDES \"${XML_SCANNER_INCLUDE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Detecting and Enabling SQL Plugin Dependencies Using CMake - CMake\nDESCRIPTION: This snippet checks whether SQL plugin support should be enabled via the ENABLE_SQL variable, and attempts to find the required LIBDBI and OpenSSL packages if so. It ensures build-time dependency checking for optional SQL features. The main prerequisites are correct definitions of ENABLE_SQL, plus availability of LIBDBI and OpenSSL packages (including any pkg-config or cmake configuration files). ENABLE_SQL controls whether to proceed with plugin module configuration.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/afsql/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT DEFINED ENABLE_SQL OR ENABLE_SQL)\n  find_package(LIBDBI)\n  find_package(OpenSSL)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Structured Logging via JSON - syslog-ng Config\nDESCRIPTION: Configures syslog-ng to process logs from the local system and output them in a key=value format using the WELF template. Suitable for structured application logging; expects log messages (like CIM) in JSON format and outputs to /var/log/app.log. Dependencies: 'scl.conf', syslog-ng with format-welf template support. Key parameters: template(\\\"$(format-welf --subkeys .cim.)\\n\\\"); Output: log lines in key=value format from structured input.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/README.md#_snippet_2\n\nLANGUAGE: config\nCODE:\n```\n@version: current\\n@include \\\"scl.conf\\\"\\n\\nlog {\\n\\tsource { system(); };\\n\\tdestination { file(\\\"/var/log/app.log\\\" template(\\\"$(format-welf --subkeys .cim.)\\\\n\\\")); };\\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing a Simple Java Log Destination for syslog-ng\nDESCRIPTION: This Java code defines a class `TestClass` that extends `TextLogDestination` (related to `SyslogNgDestination`). It serves as a basic example for a custom syslog-ng destination, overriding methods like `init`, `deinit`, `queue`, and `flush` to print status messages and received log messages to standard output. It requires the `syslog-ng-core.jar` for the base class.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/java/README.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport org.syslog_ng.*;\n\npublic class TestClass extends TextLogDestination {\n\n  public TestClass(long handle) {\n    super(handle);\n  }\n\n  public boolean init()\n  {\n    System.out.println(\"START\");\n    System.out.println(\"Initialize test destination\");\n    return true;\n  }\n\n  public void deinit()\n  {\n    System.out.println(\"Deinitialize object\");\n  }\n\n  public boolean queue(String message)\n  {\n    System.out.println(\"This is queue!\" + message);\n    return true;\n  }\n\n  public boolean flush()\n  {\n    return true;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Unit Test for Value Pairs with CMake - CMake\nDESCRIPTION: This snippet adds a unit test target named 'test_value_pairs' using the add_unit_test macro in CMake. It specifies the CRITERION test framework and declares a dependency on 'syslogformat', ensuring that this library or component is built prior to executing the test. This configuration is used for automating tests and integrating them into the build process. Requires syslog-ng build environment, Criterion as the test framework, and ensures that all test dependencies are handled by CMake.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/value-pairs/tests/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_unit_test(CRITERION TARGET test_value_pairs DEPENDS syslogformat)\n```\n\n----------------------------------------\n\nTITLE: Finding Riemann Client Library and Setting Definitions in CMake\nDESCRIPTION: This CMake snippet conditionally searches for the Riemann C client library using `find_package(RiemannClient)` if the `ENABLE_RIEMANN` variable is not defined or is true. It also adds the `SYSLOG_NG_HAVE_RIEMANN_MICROSECONDS` preprocessor definition if the `HAVE_RIEMANN_MICROSECONDS` variable is true, enabling microsecond precision support in the Riemann destination.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/riemann/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif (NOT DEFINED ENABLE_RIEMANN OR ENABLE_RIEMANN)\n  find_package(RiemannClient)\nendif()\n\nif (HAVE_RIEMANN_MICROSECONDS)\n  add_definitions(\"-DSYSLOG_NG_HAVE_RIEMANN_MICROSECONDS\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Implementing Sequential Bookmarking with ConsecutiveAckTracker in Python syslog-ng Fetcher\nDESCRIPTION: This example shows how to implement message bookmarking using `ConsecutiveAckTracker`. In `init`, it initializes `Persist` to store the last acknowledged position and sets up `ConsecutiveAckTracker` with `message_acked` as the callback. The `fetch` method generates messages, setting a bookmark with the current counter using `msg.set_bookmark()`. The `message_acked` callback updates the persistent position only when syslog-ng confirms sequential delivery.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/python-modules/README.md#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n```python\n\nclass MyFetcher(LogFetcher):\n    counter = 0\n\n    def init(self, options):\n        self.persist = Persist(\"MyFetcher_persistent_data\", defaults={\"position\": 0})\n        self.counter = self.persist['position']\n\n\t# pass self.message_acked method as ACK callback\n        self.ack_tracker = ConsecutiveAckTracker(ack_callback=self.message_acked)\n        return True\n\n    def message_acked(self, acked_message_bookmark):\n\t# update current persisted position when syslog-ng delivered the\n\t# message, but only then.\n        self.persist['position'] = acked_message_bookmark\n\n    def fetch(self):\n        time.sleep(1)\n        self.counter += 1\n\n\t# depending on the speed of our consumer and the setting of\n\t# flags(flow-control), the current counter and the acked value may\n\t# differ in the messages generated.\n        msg = LogMessage.parse(\"<5>2022-02-02T10:23:45+02:00 HOST program[pid]: foobar %d (acked so far %d)\" % (self.counter, self.persist['position']), self.parse_options)\n\n\t# this is where we set the bookmark for the message\n        msg.set_bookmark(self.counter)\n        return self.SUCCESS, msg\n\n```\n```\n\n----------------------------------------\n\nTITLE: Patching Buffer Overflow in Macro Expansion Logic (diff/C)\nDESCRIPTION: This diff patch corrects a buffer overflow vulnerability in the `affile.c` source file of syslog-ng, specifically within the macro expansion logic. The vulnerability occurred because the `left` variable, which tracks remaining buffer space, was not decremented when constant characters were copied. The patch ensures `left` is initialized correctly (accounting for the null terminator) and is decremented after appending each constant character, thus enforcing proper bounds checking.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/doc/security/bof-2002-09-27.txt#_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\ndiff -u -r1.52 -r1.53\n--- affile.c    21 Aug 2002 14:03:50 -0000      1.52\n+++ affile.c    27 Sep 2002 09:11:33 -0000      1.53\n@@ -859,7 +859,7 @@\n                { \"SOURCEIP\", M_SOURCE_IP }\n        };\n        char format[cfg->log_msg_size + 1], *format_ptr = format;\n-       int left = sizeof(format);\n+       int left = sizeof(format) - 1;\n        int i, j;\n \n        i = 0;\n@@ -888,6 +888,7 @@\n                        *format_ptr = template->data[i];\n                        format_ptr++;\n                        i++;\n+                       left--;\n                }\n        }\n        *format_ptr = 0;\n```\n\n----------------------------------------\n\nTITLE: Setting Lists of Header and Source Files for libtest - CMake\nDESCRIPTION: These snippets use the 'set' command to define 'LIBTEST_HEADERS' and 'LIBTEST_SOURCES', which collect all relevant header and source files required for the 'libtest' static library. The lists are referenced later in the build process for compilation and IDE integration. No external dependencies are required, and there are no outputs aside from setting the variables for subsequent use.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/libtest/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIBTEST_HEADERS\n    config_parse_lib.h\n    fake-time.h\n    mock-transport.h\n    mock-cfg-parser.h\n    mock-logpipe.h\n    msg_parse_lib.h\n    persist_lib.h\n    proto_lib.h\n    queue_utils_lib.h\n    stopwatch.h\n    cr_template.h\n    grab-logging.h\n    filterx-lib.h\n)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIBTEST_SOURCES\n    config_parse_lib.c\n    fake-time.c\n    libtest.c\n    mock-transport.c\n    mock-cfg-parser.c\n    mock-logpipe.c\n    msg_parse_lib.c\n    persist_lib.c\n    proto_lib.c\n    queue_utils_lib.c\n    stopwatch.c\n    cr_template.c\n    grab-logging.c\n    filterx-lib.c\n)\n```\n\n----------------------------------------\n\nTITLE: Installing SQLite Support for syslog-ng - Bash\nDESCRIPTION: Demonstrates the installation of SQLite support and driver packages for syslog-ng on Solaris 10. The process involves installing the required sqlite package from sunfreeware.com and the syslog-ng SQLite database driver, using gunzip and pkgadd. Ensure you have appropriate gzip-compressed packages for your architecture. Outcomes are an operational SQLite installation and syslog-ng ability to write to SQLite databases.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/contrib/solaris-packaging/solaris10_install.txt#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# gunzip sqlite-3.3.6-sol9-sparc-local.gz \n# pkgadd -d sqlite-3.3.6-sol9-sparc-local\n# gunzip libdbd8-sqlite_<version>_<arch>.gz\n# pkgadd -d libdbd8-sqlite_<version>_<arch>.pkg\n```\n\n----------------------------------------\n\nTITLE: Checking for TCP Keepalive Socket Options\nDESCRIPTION: Uses `check_symbol_exists` to determine if the TCP keepalive timer socket options (`TCP_KEEPIDLE`, `TCP_KEEPINTVL`, `TCP_KEEPCNT`) are defined in the system headers (`sys/socket.h`, `netinet/in.h`, `netinet/tcp.h`). If all three symbols exist, it sets the `SYSLOG_NG_HAVE_TCP_KEEPALIVE_TIMERS` variable to 1, indicating support for fine-grained TCP keepalive configuration.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\ncheck_symbol_exists(TCP_KEEPIDLE  \"sys/socket.h;netinet/in.h;netinet/tcp.h\" HAVE_TCP_KEEPIDLE)\ncheck_symbol_exists(TCP_KEEPINTVL \"sys/socket.h;netinet/in.h;netinet/tcp.h\" HAVE_TCP_KEEPINTVL)\ncheck_symbol_exists(TCP_KEEPCNT   \"sys/socket.h;netinet/in.h;netinet/tcp.h\" HAVE_TCP_KEEPCNT)\nif (HAVE_TCP_KEEPIDLE AND HAVE_TCP_KEEPINTVL AND HAVE_TCP_KEEPCNT)\n  set(SYSLOG_NG_HAVE_TCP_KEEPALIVE_TIMERS 1)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Including Test Subdirectory in CMake\nDESCRIPTION: This snippet uses the `add_test_subdirectory` command (potentially a custom wrapper around CMake's standard `add_subdirectory`) to include and process the `CMakeLists.txt` file located within the `tests` subdirectory. This is typically done to configure and build tests associated with the `cryptofuncs` module.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/cryptofuncs/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_test_subdirectory(tests)\n```\n\n----------------------------------------\n\nTITLE: Adding Static Library Target and Linking Dependencies - CMake\nDESCRIPTION: This group of snippets creates the 'libtest' static library from the specified source list, links it against the syslog-ng and Criterion libraries, and sets up the include directories. Dependencies include syslog-ng and CRITERION_LIBRARIES, and the PROJECT_SOURCE_DIR for header inclusion. Parameters include the target name, library/static/shared type, associated sources, libraries to link, and INTERFACE include directories. Output is a configured static library ready for compilation and linkage in further build steps.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/libtest/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(libtest STATIC ${LIBTEST_SOURCES})\n```\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(libtest syslog-ng ${CRITERION_LIBRARIES})\n```\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(libtest INTERFACE ${PROJECT_SOURCE_DIR})\n```\n\n----------------------------------------\n\nTITLE: Adding Module Build Target with Grammar Support - CMake\nDESCRIPTION: This snippet creates a new build module (add_contextual_data) using the add_module command, sets a custom grammar (add-contextual-data-grammar), and specifies source files with the previously defined CMake variable. Dependencies include the defined source list variable and optional grammar processing tools, as supported by the build infrastructure. Key parameters are TARGET (module name), GRAMMAR (grammar configuration), and SOURCES (source file list). Outputs are the compiled build target and any artifacts required for grammar-based parsing. Usage is constrained to CMake version/features supporting add_module.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/add-contextual-data/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_module(\n  TARGET add_contextual_data\n  GRAMMAR add-contextual-data-grammar\n  SOURCES ${add_contextual_data_SOURCES}\n)\n```\n\n----------------------------------------\n\nTITLE: Compiling a Custom Java Destination for syslog-ng (Shell)\nDESCRIPTION: This shell command uses `javac` to compile the `TestClass.java` file. It includes the `syslog-ng-core.jar` file in the classpath (`-cp`) which is necessary because the `TestClass` extends a class from this JAR. The command assumes `syslog-ng-core.jar` is located in `/usr/lib/syslog-ng/`.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/java/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\njavac -cp /usr/lib/syslog-ng/syslog-ng-core.jar TestClass.java\n```\n\n----------------------------------------\n\nTITLE: Checking Kafka Dependency Availability in CMake\nDESCRIPTION: This conditional block checks if the Kafka module has been enabled (`ENABLE_KAFKA` is TRUE) but the required `librdkafka` dependency was not found (`RDKAFKA_FOUND` is FALSE). If this inconsistency occurs, it halts the CMake configuration process with a fatal error message, preventing build failures later.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/kafka/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif (ENABLE_KAFKA AND NOT RDKAFKA_FOUND)\n  message (FATAL_ERROR \"Kafka enabled but no librdkafka found\")\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Including System Check Modules and Adding Definitions in CMake\nDESCRIPTION: Includes several CMake modules for checking system characteristics like type sizes (`CheckTypeSize`), structure members (`CheckStructMember`, `CheckStructHasMember`), symbol existence (`CheckSymbolExists`), and source compilability (`CheckCSourceCompiles`). It also includes a custom module `GenerateYFromYm`. Additionally, it adds common preprocessor definitions `_GNU_SOURCE=1`, `_LARGEFILE64_SOURCE=1`, and `__APPLE_USE_RFC_3542` required for certain system APIs.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(CheckTypeSize)\ninclude(CheckStructMember)\ninclude(CheckSymbolExists)\ninclude(GenerateYFromYm)\ninclude(CheckStructHasMember)\ninclude(CheckCSourceCompiles)\n\nadd_definitions(-D_GNU_SOURCE=1)\nadd_definitions(-D_LARGEFILE64_SOURCE=1)\nadd_definitions(-D__APPLE_USE_RFC_3542)\n```\n\n----------------------------------------\n\nTITLE: Adding Test Subdirectory - CMake Script\nDESCRIPTION: This snippet adds the 'tests' subdirectory to the build process, enabling integration and compilation of test suites for log message components. It requires the existence of a 'tests' subdirectory with its own CMakeLists.txt file. This helps structure the project by separating test code from production code and automating test discovery in the build process.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/logmsg/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_test_subdirectory(tests)\n```\n\n----------------------------------------\n\nTITLE: Defining test_python_logmsg Unit Test in CMake\nDESCRIPTION: This CMake snippet defines a unit test named `test_python_logmsg` using the `add_unit_test` command with the `CRITERION` framework. It specifies necessary include directories using `${PYTHON_INCLUDE_DIR}` and `${PYTHON_INCLUDE_DIRS}` variables. The test depends on the `syslogformat`, `mod-python`, and `${PYTHON_LIBRARIES}` targets or libraries. Additionally, it sets the `PYTHONMALLOC` environment variable to `malloc_debug` for this specific test to aid in debugging memory allocation issues.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/python/tests/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_unit_test(LIBTEST CRITERION\n  TARGET test_python_logmsg\n  INCLUDES \"${PYTHON_INCLUDE_DIR}\" \"${PYTHON_INCLUDE_DIRS}\"\n  DEPENDS syslogformat mod-python \"${PYTHON_LIBRARIES}\")\n\nset_property(TEST test_python_logmsg APPEND PROPERTY ENVIRONMENT \"PYTHONMALLOC=malloc_debug\")\n```\n\n----------------------------------------\n\nTITLE: Adding Conditional Build Dependency in Debian Control File\nDESCRIPTION: This snippet shows how to add a versioned build dependency (`libriemann-client-dev`) and a conditional build dependency (`librdkafka-dev`) to a Debian `control` file. The conditional dependency is controlled by a build profile `<!sng-nokafka>`, meaning it's included unless the `sng-nokafka` profile is active.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/packaging/README.md#_snippet_0\n\nLANGUAGE: debian-control\nCODE:\n```\nBuild-Depends: ...\n               libriemann-client-dev (>= 1.6.0~)\n```\n\nLANGUAGE: debian-control\nCODE:\n```\nBuild-Depends: ...\n               librdkafka-dev (>= 1.0.0) <!sng-nokafka>\n```\n\n----------------------------------------\n\nTITLE: Adding Kafka Module Build Target in CMake\nDESCRIPTION: This command uses a custom `add_module` macro (likely defined elsewhere) to create the build target for the Kafka module. It specifies the target name (`kafka`), potentially related grammar files (`kafka-grammar`), declares a dependency on `rdkafka` (ensuring linking against librdkafka), and provides the list of source files (`${KAFKA_SOURCES}`) to be compiled.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/kafka/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_module(\n  TARGET kafka\n  GRAMMAR kafka-grammar\n  DEPENDS rdkafka\n  SOURCES ${KAFKA_SOURCES}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring macOS Specific Features (OSLog, Objective-C) in CMake\nDESCRIPTION: On Apple platforms (macOS), defines an option `ENABLE_DARWIN_OSL` to enable OSLog support (ON by default). It also conditionally defines an `ENABLE_OBJC` option based on `ENABLE_DARWIN_OSL`. If Objective-C is enabled, it forces the use of the Clang compiler and sets the required Objective-C standard to 11.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(APPLE)\n  module_switch(ENABLE_DARWIN_OSL \"Enable OSLog\" ON)\n  option(ENABLE_OBJC \"Enable ObjC\" ${ENABLE_DARWIN_OSL})\nendif()\n\nif(ENABLE_OBJC)\n  # Turned out that even the latest gcc has no proper support of the required ObjC version\n  # Once gcc was able to compile our ObjC modules properly this requirement could be removed again\n  set(CMAKE_OBJC_COMPILER clang)\n\n  set_property(GLOBAL PROPERTY OBJC_STANDARD 11)\n  set_property(GLOBAL PROPERTY OBJC_STANDARD_REQUIRED ON)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Initializing BatchedAckTracker for Batched Acknowledgement in Python syslog-ng\nDESCRIPTION: This snippet demonstrates initializing `BatchedAckTracker` in the `init` method. It configures a `timeout` (in milliseconds) and `batch_size` to control when the `batched_ack_callback` (`self.messages_acked`) is invoked with a list of acknowledged bookmarks. This strategy is suitable for APIs requiring individual message acknowledgements.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/python-modules/README.md#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n```python\n\nclass MyFetcher(LogFetcher):\n\n    ...\n\n    def init(self, options):\n        self.ack_tracker = BatchedAckTracker(timeout=500, batch_size=100,\n                                             batched_ack_callback=self.messages_acked)\n        return True\n\n    def messages_acked(self, acked_message_bookmarks):\n        pass\n```\n```\n\n----------------------------------------\n\nTITLE: Renaming syslog-ng Configuration File - Bash\nDESCRIPTION: This shell command renames the syslog-ng default sample configuration file to activate it as the live configuration. It uses the mv command and is executed from the command line. The source must exist at /opt/syslog-ng/etc/syslog-ng.conf.sample; the command produces /opt/syslog-ng/etc/syslog-ng.conf as the active syslog-ng configuration.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/contrib/solaris-packaging/solaris10_install.txt#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# mv /opt/syslog-ng/etc/syslog-ng.conf.sample \\ \n            /opt/syslog-ng/etc/syslog-ng.conf\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files and Adding SQL Module to Build - CMake\nDESCRIPTION: This snippet assigns the required implementation and header files for the SQL plugin to the AFSQL_SOURCES variable and uses add_module to register the 'afsql' plugin target with its grammar, include directories, dependencies (LIBDBI libraries and OpenSSL), and source files. It depends on variables populated by previous package detection steps and relies on syslog-ng's build macros. The expected input is that all source files and dependencies are available; this snippet outputs an appropriately configured plugin module in the build.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/afsql/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(AFSQL_SOURCES\n    afsql.c\n    afsql.h\n    afsql-parser.c\n    afsql-parser.h\n    afsql-plugin.c\n)\n\nadd_module(\n  TARGET afsql\n  GRAMMAR afsql-grammar\n  INCLUDES ${LIBDBI_INCLUDE_DIRS}\n  DEPENDS ${LIBDBI_LIBRARIES} OpenSSL::SSL\n  SOURCES ${AFSQL_SOURCES}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring and Installing update-patterndb Script with CMake\nDESCRIPTION: This CMake code defines standard installation path variables (prefix, exec_prefix, bindir, sysconfdir, localstatedir) based on CMake defaults and syslog-ng specific settings. It then uses `configure_file` to process the `update-patterndb.in` template, substituting variables, and creating the `update-patterndb` script in the build directory. Finally, it installs this script into the `bin` directory (relative to `exec_prefix`) and creates an empty `etc/patterndb.d` directory during installation. Key dependencies include CMake variables like `CMAKE_INSTALL_PREFIX` and syslog-ng specific path variables.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/scripts/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(prefix ${CMAKE_INSTALL_PREFIX})\nset(exec_prefix ${SYSLOG_NG_PATH_EXECPREFIX})\nset(bindir \"\\${exec_prefix}/bin\")\nset(sysconfdir ${SYSLOG_NG_PATH_SYSCONFDIR})\nset(localstatedir ${SYSLOG_NG_PATH_LOCALSTATEDIR})\n\nconfigure_file (${CMAKE_CURRENT_SOURCE_DIR}/update-patterndb.in ${CMAKE_CURRENT_BINARY_DIR}/update-patterndb)\ninstall(PROGRAMS ${CMAKE_CURRENT_BINARY_DIR}/update-patterndb DESTINATION bin)\ninstall(DIRECTORY DESTINATION etc/patterndb.d)\n```\n\n----------------------------------------\n\nTITLE: Adding syslog-ng APT Repository - Shell\nDESCRIPTION: Appends the syslog-ng repository URL to the APT sources list for Ubuntu 24.04 (component: ubuntu-noble). Requires echo and sudo privileges. Modify 'ubuntu-noble' as appropriate for other distributions. Input: none; Output: new entry in /etc/apt/sources.list.d/syslog-ng-ose.list.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/README.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\necho \"deb https://ose-repo.syslog-ng.com/apt/ stable ubuntu-noble\" | sudo tee -a /etc/apt/sources.list.d/syslog-ng-ose.list\n```\n\n----------------------------------------\n\nTITLE: Sending Test Messages using loggen (Shell)\nDESCRIPTION: Shell command using the `loggen` utility to send test log messages. It sends 10 messages (`-n 10`) via TCP (`-S`) to the syslog-ng server listening on `localhost` port `1514`. This is used to verify that syslog-ng receives messages on the network source and forwards them according to its configuration (e.g., to Kafka).\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/java-modules/common/README.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nloggen -S -n 10 localhost 1514\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for syslog-ng Disk Buffer Library (CMake)\nDESCRIPTION: Defines a CMake variable `SYSLOG_NG_DISK_BUFFER_SOURCES` listing the C source (.c) and header (.h) files that constitute the core disk buffer functionality. This variable is used later to create a static library.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/diskq/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SYSLOG_NG_DISK_BUFFER_SOURCES\n    diskq-options.h\n    diskq-options.c\n    diskq-config.h\n    diskq-config.c\n    logqueue-disk.c\n    logqueue-disk.h\n    logqueue-disk-non-reliable.c\n    logqueue-disk-non-reliable.h\n    logqueue-disk-reliable.c\n    logqueue-disk-reliable.h\n    qdisk.h\n    qdisk.c\n    diskq-global-metrics.h\n    diskq-global-metrics.c\n)\n```\n\n----------------------------------------\n\nTITLE: Module Switch for Enabling MongoDB Driver in CMake - CMake\nDESCRIPTION: This snippet leverages the custom module_switch CMake macro to enable or disable the MongoDB driver based on whether the libmongoc dependency was found. It operates on the ENABLE_MONGODB variable and the libmongoc-1.0_FOUND result from find_package. The snippet ensures that configuration options reflect available packages and intended build options. Inputs include ENABLE_MONGODB and libmongoc-1.0_FOUND; outputs are configuration flags and build-time logic switching.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/afmongodb/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nmodule_switch(ENABLE_MONGODB \"Enable mongodb destination driver\" libmongoc-1.0_FOUND)\n```\n\n----------------------------------------\n\nTITLE: Querying Next Pull Request ID with Python Script - Python\nDESCRIPTION: This snippet references the use of the `next_pr_id.py` Python script to retrieve the next available pull request ID during the creation of a newsfile entry. To use, run the script from the command line in the project root. Requires Python 3 installed and access to the correct project directory. Input: N/A, Output: Prints or returns the next available PR ID. Limitation: Script must be present in the project.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/news/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnext_pr_id.py\n```\n\n----------------------------------------\n\nTITLE: Defining Source File List for Pseudofile Module - CMake\nDESCRIPTION: This CMake snippet aggregates all relevant source (C) and header (H) files for the pseudofile module into the variable PSEUDOFILE_SOURCES. This approach centralizes file references, making it easy to maintain and use lists of files across build instructions. All filenames must exist in the directory structure and are assumed to be required for module compilation.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/pseudofile/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(PSEUDOFILE_SOURCES\n    pseudofile.c\n    pseudofile.h\n    pseudofile-parser.c\n    pseudofile-parser.h\n    pseudofile-plugin.c\n)\n```\n\n----------------------------------------\n\nTITLE: Adding the Pseudofile Module to Build System - CMake\nDESCRIPTION: This CMake command adds a module named pseudofile with associated grammar support and uses the previously defined file list via PSEUDOFILE_SOURCES. The GRAMMAR parameter connects this module to a grammar definition that is likely required for parsers, while SOURCES references all module source and header files. It depends on prior definitions of module macros/functions such as add_module, CMake version compatibility, and the presence of correct file paths.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/pseudofile/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_module(\n  TARGET pseudofile\n  GRAMMAR pseudofile-grammar\n  SOURCES ${PSEUDOFILE_SOURCES}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Compile Flags for afsnmp Module in CMake\nDESCRIPTION: This CMake command sets target-specific properties for the `afsnmp` module. Specifically, it applies the compile flags retrieved from the Net-SNMP package (`${NETSNMP_CFLAGS}`) to the `COMPILE_FLAGS` property of the `afsnmp` target, ensuring the module is compiled with the necessary flags for Net-SNMP integration.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/afsnmp/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset_target_properties(afsnmp PROPERTIES COMPILE_FLAGS ${NETSNMP_CFLAGS})\n```\n\n----------------------------------------\n\nTITLE: Configuring pacct-format Module with Conditional Linux Support - CMake\nDESCRIPTION: This snippet defines source files for the pacct-format module, checks if the build is targeting a Linux system, and enables or disables experimental support for reading Process Accounting files accordingly. It uses custom CMake macros and standard CMake conditional logic to append the relevant source files to the build pipeline when support is enabled. Dependencies include CMake and any custom macros or functions (such as module_switch and add_module) defined elsewhere in the build system. Main parameters are CMAKE_SYSTEM_NAME and ENABLE_PACCT, with expected behavior that the module is built only on Linux if enabled. Outputs are compile-time configuration and inclusion of the pacct-format sources in the build; it is limited to Linux environments and controlled by the ENABLE_PACCT feature toggle.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/pacctformat/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(PACCT_FORMAT_SOURCES\n  pacct-format.c\n  pacct-format.h\n  pacct-format-plugin.c\n)\n\nif (CMAKE_SYSTEM_NAME STREQUAL Linux)\n  set(IS_LINUX \"ON\")\nelse()\n  set(IS_LINUX \"OFF\")\nendif()\nmodule_switch(ENABLE_PACCT \"Enable support for reading Process Accounting files (EXPERIMENTAL, Linux only).\" IS_LINUX)\n\nif (ENABLE_PACCT)\n    add_module(\n      TARGET pacctformat\n      SOURCES ${PACCT_FORMAT_SOURCES}\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Java Module Build Capability Flag in CMake\nDESCRIPTION: Defines a CMake variable `CAN_ENABLE_JAVA_MODULES`, initially set to `OFF`. This variable is updated to `ON` only if both the Gradle build tool is found (`GRADLE_FOUND`) and the core syslog-ng Java plugin is enabled (`ENABLE_JAVA`). This flag determines if the option to build Java modules should be presented.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/java-modules/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset (CAN_ENABLE_JAVA_MODULES OFF)\nif ((GRADLE_FOUND AND ENABLE_JAVA))\n  set (CAN_ENABLE_JAVA_MODULES ON)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Linking and Including Dependencies for Threaded Disk Queue Source - CMake\nDESCRIPTION: Specifies the library and include directory dependencies for 'threaded-diskq-source'. The PUBLIC and PRIVATE keywords control visibility to dependent targets. 'syslog-ng' is linked as a public dependency, while 'syslog-ng-disk-buffer' is private. Include directories are set for both source and binary directories, enabling access to both original and generated headers and sources.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/examples/sources/threaded-diskq-source/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(threaded-diskq-source PUBLIC syslog-ng PRIVATE syslog-ng-disk-buffer)\ntarget_include_directories(threaded-diskq-source\n  PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}\n  PRIVATE ${CMAKE_CURRENT_BINARY_DIR}\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Unit Test with CMake - CMake\nDESCRIPTION: Adds a unit test target called 'test_stardate' to the build system using the 'add_unit_test' macro or function in CMake. The test uses the Criterion test framework (indicated by 'CRITERION'), depends on the 'syslogformat' and 'stardate' components, and is associated with the syslog-ng project. CMake and the Criterion testing framework must be installed, and the mentioned dependencies must exist as buildable targets. The main parameters are the test framework, target name, and dependencies. No output is produced unless the test is executed via CTest or another CMake test runner.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/stardate/tests/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_unit_test(LIBTEST CRITERION TARGET test_stardate DEPENDS syslogformat stardate)\n```\n\n----------------------------------------\n\nTITLE: Configuring Apache Log Source and Date Parsing - syslog-ng Configuration\nDESCRIPTION: This code snippet shows how to set up a source block that reads from the Apache access log file, disables built-in parsing, and attaches a custom parser. The channel block enables chaining of the source and the parsing logic. The configuration demonstrates how to leverage syslog-ng's flexibility in structuring incoming logs using sources, channels, and parsers. Pre-requisites include syslog-ng with csv-parser and date-parser support, access permissions to the log file, and correct path configurations. Expected input is Apache log lines; output is parsed log messages accessible via syslog-ng macros.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/timestamp/README.md#_snippet_0\n\nLANGUAGE: syslog-ng configuration\nCODE:\n```\nsource s_apache {\n  channel {\n    source {\n      file(\"/var/log/apache/access.log\" flags(no-parse));\n     };\n     parser(p_apache_parser);\n    };\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Native-Looking Destination Drivers Using Blocks - syslog-ng Config\nDESCRIPTION: This syslog-ng block configuration sample wraps a Python-based destination inside a custom syslog-ng block for more native syntax. It allows users to configure their destination using typical syslog-ng parameter/option patterns while the underlying implementation remains Python-based. This pattern hides Python configuration details and improves readability. The block would be placed in an SCL directory and included as a .conf file in the syslog-ng module structure.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/python-modules/README.md#_snippet_17\n\nLANGUAGE: syslog-ng-config\nCODE:\n```\nblock destination my-destination(option1(value)\n                                 option2(value)) {\n    python(class(mydestination.MyDestination)\n                 options(option1 => `option1`,\n                         option2 => `option2`));\n};\n\n```\n\n----------------------------------------\n\nTITLE: Defining Gradle Build and Installation Paths in CMake\nDESCRIPTION: Sets CMake variables defining key directories for the Gradle build. `GRADLE_WORKDIR` specifies a project-specific Gradle cache/working directory within the build tree. `SYSLOG_DEPS_DIR` points to a location for syslog-ng dependencies potentially needed by the Java build. `JAVA_MOD_DST_DIR` defines the final installation path for the built Java module JARs.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/java-modules/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(GRADLE_WORKDIR ${CMAKE_CURRENT_BINARY_DIR}/.gradle)\nset(SYSLOG_DEPS_DIR ${PROJECT_BINARY_DIR}/modules/java)\nset(JAVA_MOD_DST_DIR \"${CMAKE_INSTALL_PREFIX}/lib/syslog-ng/java-modules\")\n```\n\n----------------------------------------\n\nTITLE: Conditionally Enabling Python Module Build in CMake\nDESCRIPTION: This snippet uses the `module_switch` command to define a CMake option `ENABLE_PYTHON_MODULES`. If this option is disabled, the rest of the script is skipped using `return()`. It also checks if the main `ENABLE_PYTHON` option (presumably for the core syslog-ng Python plugin) is enabled; if not, it triggers a fatal error, as Python modules depend on the core plugin.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/python-modules/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nmodule_switch(ENABLE_PYTHON_MODULES \"Enable Python based modules\" ENABLE_PYTHON)\n\nif (NOT ENABLE_PYTHON_MODULES)\n  return()\nendif ()\n\nif (NOT ENABLE_PYTHON)\n  message(FATAL_ERROR \"Python based modules enabled, but the required syslog-ng Python plugin is disabled.\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Finding librdkafka Dependency with CMake\nDESCRIPTION: This snippet uses the CMake `find_package` command to locate the `librdkafka` library, requiring at least version 1.1.0. It only executes if the `ENABLE_KAFKA` variable is not defined or is set to TRUE. This ensures the dependency check happens only when Kafka support might be needed.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/kafka/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif (NOT DEFINED ENABLE_KAFKA OR ENABLE_KAFKA)\n  find_package(rdkafka 1.1.0)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Conditionally Including XML Module in syslog-ng (CMake)\nDESCRIPTION: This snippet implements the conditional compilation and inclusion of the XML parsing module in the syslog-ng project using CMake. It checks the ENABLE_XML flag and, if enabled, defines a set of source and header files associated with the module, configures the module target, grammar integration, and test subdirectory addition. Dependencies include presence of required XML source files and CMake 3.x or later compatibility. The ENABLE_XML option is the key parameter controlling module activation; disabling it skips the module and related build steps.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/xml/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nmodule_switch(ENABLE_XML \\\"Enable xml\\\")\\n\\nif (NOT ENABLE_XML)\\n  return()\\nendif()\\n\\nset(xml_SOURCES\\n    \\\"xml-parser.h\\\"\\n    \\\"xml.h\\\"\\n    \\\"xml-private.h\\\"\\n    \\\"windows-eventlog-xml-parser.h\\\"\\n\\n    \\\"xml-plugin.c\\\"\\n    \\\"xml-parser.c\\\"\\n    \\\"xml.c\\\"\\n    \\\"windows-eventlog-xml-parser.c\\\"\\n)\\n\\n\\nadd_module(\\n  TARGET xml\\n  GRAMMAR xml-grammar\\n  SOURCES ${xml_SOURCES}\\n)\\n\\nadd_test_subdirectory(tests)\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building OpenBSD System Driver in syslog-ng - CMake\nDESCRIPTION: This CMake script snippet manages the detection of the OpenBSD environment and configures conditional compilation of the OpenBSD system driver for syslog-ng. It checks the target OS, enables or disables the feature, prepares headers and sources, runs bison to generate grammar files, and configures library building options including linking dependencies and install targets. Required dependencies include bison for grammar generation, syslog-ng core libraries, and an OpenBSD or compatible build environment. Key parameters handled include CMAKE_SYSTEM_NAME for platform detection, IS_OPENBSD for conditional logic, source and header lists, and various target properties. The script outputs a shared library for the OpenBSD driver, but will terminate the build process with an error if enabled on the wrong platform.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/openbsd/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif (CMAKE_SYSTEM_NAME EQUAL \"OpenBSD\")\n  set(IS_OPENBSD \"ON\")\nelse()\n  set(IS_OPENBSD \"OFF\")\nendif()\nmodule_switch(ENABLE_OPENBSD_SYS_DRIVER \"Enable openBSD system source driver\" IS_OPENBSD)\n\nif (ENABLE_OPENBSD_SYS_DRIVER AND NOT CMAKE_SYSTEM_NAME EQUAL \"OpenBSD\")\n    message(FATAL_ERROR \"OpenBSD source was explicitly enabled, but OS is not OpenBSD\")\nendif()\n\nif (NOT ENABLE_OPENBSD_SYS_DRIVER)\n    return()\nendif()\n\nset(OPENBSD_SYS_DRIVER_HEADERS\n    \"openbsd-parser.h\"\n    \"${CMAKE_CURRENT_BINARY_DIR}/openbsd-grammar.h\"\n)\n\nset(OPENBSD_SYS_DRIVER_SOURCES\n    \"openbsd-parser.c\"\n    \"openbsd-plugin.c\"\n    \"openbsd-driver.c\"\n    \"openbsd-grammar.y\"\n    \"${CMAKE_CURRENT_BINARY_DIR}/openbsd-grammar.c\"\n)\n\ngenerate_y_from_ym(modules/openbsd/openbsd-grammar)\n\nbison_target(openbsdGrammar\n    ${CMAKE_CURRENT_BINARY_DIR}/openbsd-grammar.y\n    ${CMAKE_CURRENT_BINARY_DIR}/openbsd-grammar.c\n    COMPILE_FLAGS ${BISON_FLAGS})\nset_source_files_properties(\n    ${CMAKE_CURRENT_BINARY_DIR}/openbsd-grammar.c\n    PROPERTIES\n    COMPILE_FLAGS ${BISON_BUILT_SOURCE_CFLAGS}\n)\n\nadd_library(openbsd SHARED ${openbsd_SOURCES})\ntarget_include_directories(openbsd\n  PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}\n  PRIVATE ${CMAKE_CURRENT_BINARY_DIR}\n)\ntarget_link_libraries(openbsd PRIVATE syslog-ng)\n\ninstall(TARGETS openbsd LIBRARY DESTINATION lib/syslog-ng/ COMPONENT openbsd)\n```\n\n----------------------------------------\n\nTITLE: Setting Required Includes and Libraries for Kafka Checks in CMake\nDESCRIPTION: These commands set the `CMAKE_REQUIRED_INCLUDES` and `CMAKE_REQUIRED_LIBRARIES` variables to the include directory and library path found for `librdkafka` by `find_package`. These variables are used by subsequent checks, such as `check_symbol_exists`, to ensure the test compilations have the necessary context.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/kafka/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_REQUIRED_INCLUDES ${RDKAFKA_INCLUDE_DIR})\nset(CMAKE_REQUIRED_LIBRARIES ${RDKAFKA_LIBRARY})\n```\n\n----------------------------------------\n\nTITLE: Exiting Configuration if Kafka Module is Disabled in CMake\nDESCRIPTION: If the `ENABLE_KAFKA` option is set to FALSE, this `return()` command stops further processing within the current CMake script file. This prevents unnecessary configuration steps related to the Kafka module (like source file definitions, target creation) when it's not going to be built.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/kafka/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif (NOT ENABLE_KAFKA)\n  return()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Generating Yacc File from Custom Format in CMake\nDESCRIPTION: Calls a custom CMake function 'generate_y_from_ym' to process a file named 'threaded-random-generator-grammar.ym' located in a subdirectory. This likely converts a custom grammar format (.ym) into a standard Yacc/Bison grammar file (.y).\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/examples/sources/threaded-random-generator/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ngenerate_y_from_ym(modules/examples/sources/threaded-random-generator/threaded-random-generator-grammar)\n```\n\n----------------------------------------\n\nTITLE: Configuring GRPC Metrics Sources with CMake - CMake\nDESCRIPTION: This CMake snippet sets the GRPC_METRICS_SOURCES variable to include header and implementation files for GRPC metrics functionality, and marks the variable for export to the parent directory scope. Dependencies include the presence of CMake, correct setup of the PROJECT_SOURCE_DIR variable, and the referenced GRPC metrics files existing at the specified locations. This enables higher-level CMake scripts to reference GRPC metrics sources when configuring build targets. No input is required, but correct paths and inclusion in the parent CMake script are prerequisites.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/grpc/common/metrics/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(GRPC_METRICS_SOURCES\n    ${PROJECT_SOURCE_DIR}/modules/grpc/common/metrics/grpc-metrics.hpp\n    ${PROJECT_SOURCE_DIR}/modules/grpc/common/metrics/grpc-metrics.cpp\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories for Scanner Modules - CMake\nDESCRIPTION: This snippet uses CMake's add_subdirectory function to include four subproject directories: csv-scanner, list-scanner, kv-scanner, and xml-scanner. It ensures each scanner module is built as part of the main project, allowing their CMakeLists.txt files to contribute targets and settings. No external dependencies are required beyond the existence of these subdirectories.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/scanner/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(csv-scanner)\nadd_subdirectory(list-scanner)\nadd_subdirectory(kv-scanner)\nadd_subdirectory(xml-scanner)\n```\n\n----------------------------------------\n\nTITLE: Adding Unit Test Targets with Dependencies in syslog-ng via CMake\nDESCRIPTION: Invokes the add_unit_test macro/function to define various unit test targets, specifying the test framework (e.g., CRITERION) and dependencies (such as syslogformat) for each logical test. The SOURCES argument links previously defined source lists, enabling modular and reusable test configurations. An if/endif block enables the IPv6 netmask test target conditionally, ensuring features only build if supported. This pattern facilitates consistent and extensible test integration.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/filter/tests/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_unit_test(CRITERION TARGET test_filters_facility SOURCES ${TEST_FILTERS_FACILITY_SOURCE} DEPENDS syslogformat)\nadd_unit_test(CRITERION TARGET test_filters_level_new SOURCES ${TEST_FILTERS_LEVEL_NEW_SOURCE} DEPENDS syslogformat)\nadd_unit_test(LIBTEST CRITERION TARGET test_filters_regexp SOURCES ${TEST_FILTERS_REGEXP_SOURCE} DEPENDS syslogformat)\nadd_unit_test(LIBTEST CRITERION TARGET test_filters_fop_cmp SOURCES ${TEST_FILTERS_FOP_CMP_SOURCE})\nadd_unit_test(CRITERION TARGET test_filters_fop SOURCES ${TEST_FILTERS_FOP_SOURCE} DEPENDS syslogformat)\nadd_unit_test(CRITERION TARGET test_filters_netmask SOURCES ${TEST_FILTERS_NETMASK_SOURCE} DEPENDS syslogformat)\n\nadd_unit_test(CRITERION TARGET test_filters_in_list DEPENDS syslogformat)\n\nif (ENABLE_IPV6)\nadd_unit_test(CRITERION TARGET test_filters_netmask6 SOURCES ${TEST_FILTERS_NETMASK6_SOURCE} DEPENDS syslogformat)\nendif()\n\nadd_unit_test(CRITERION TARGET test_filters_statistics DEPENDS syslogformat)\n\nadd_unit_test(CRITERION TARGET test_filter_call)\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Wildcard File Sources and Destinations in syslog-ng (config)\nDESCRIPTION: This configuration snippet sets up two separate file sources using wildcards to monitor files matching /path/*.log, each with a distinct persist-name. Both sources are routed to a stdout() destination using separate log blocks. This setup is used to demonstrate and verify fixes for crashes that occur when the same wildcard pattern is used in multiple log sources. The sample requires syslog-ng configuration context with version and includes, and the use of persist-name() for disambiguation. Inputs are log files; output is logs to stdout.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/NEWS.md#_snippet_1\n\nLANGUAGE: config\nCODE:\n```\n@version: current\n\n@include \"scl.conf\"\n\nsource s_files1 {\n    file(\"/path/*.log\"\n        persist-name(\"p1\")\n    );\n};\n\nsource s_files2 {\n    file(\"/path/*.log\"\n        persist-name(\"p2\")\n    );\n};\n\ndestination s_stdout {\n    stdout();\n};\n\nlog {\n    source(s_files1);\n    destination(s_stdout);\n};\n\nlog {\n    source(s_files2);\n    destination(s_stdout);\n};\n```\n\n----------------------------------------\n\nTITLE: Conditionally Building, Linking, and Installing sdjournal Library in CMake\nDESCRIPTION: This block conditionally executes build steps for the `sdjournal` library based on the `ENABLE_JOURNALD` CMake variable. If enabled, it creates a shared library (`add_library`), sets public and private include directories (`target_include_directories`), links against libsystemd and the main syslog-ng library (`target_link_libraries`), installs the resulting library (`install`), and adds a test subdirectory (`add_test_subdirectory`).\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/systemd-journal/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif (ENABLE_JOURNALD)\n    add_library(sdjournal SHARED ${JOURNALD_SOURCES})\n    target_include_directories(sdjournal\n      PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}\n      PRIVATE ${CMAKE_CURRENT_BINARY_DIR}\n    )\n    target_link_libraries(sdjournal PRIVATE ${Libsystemd_LIBRARIES})\n    target_link_libraries(sdjournal PRIVATE syslog-ng)\n    target_include_directories(sdjournal PRIVATE SYSTEM ${Libsystemd_INCLUDE_DIRS})\n\n    install(TARGETS sdjournal LIBRARY DESTINATION lib/syslog-ng/)\n\n    add_test_subdirectory(tests)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Riemann Module Build Target in CMake\nDESCRIPTION: This snippet uses a custom `add_module` CMake function to define the build target named `riemann`. It specifies the grammar file (`riemann-grammar`), necessary include directories (`${Riemann_INCLUDE_DIR}`), dependent libraries (`${Riemann_LIBRARIES}`), and the source files defined in the `RIEMANN_SOURCES` variable.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/riemann/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_module(\n  TARGET riemann\n  GRAMMAR riemann-grammar\n  INCLUDES ${Riemann_INCLUDE_DIR}\n  DEPENDS ${Riemann_LIBRARIES}\n  SOURCES ${RIEMANN_SOURCES}\n)\n```\n\n----------------------------------------\n\nTITLE: Installing PostgreSQL Support for syslog-ng - Bash\nDESCRIPTION: Commands for enabling PostgreSQL database support for syslog-ng on Solaris 10. Checks for the SUNWpostgr-libs prerequisite from the Solaris installation DVD, unpacks, and installs the PostgreSQL driver package. All commands require root privileges. Input is a gzipped PostgreSQL driver file; output is the corresponding installed package enabling syslog-ng to use PostgreSQL as a destination.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/contrib/solaris-packaging/solaris10_install.txt#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# gunzip libdbd8-pgsql_<version>_<arch>.gz\n# pkgadd -d libdbd8-pgsql_<version>_<arch>.pkg\n```\n\n----------------------------------------\n\nTITLE: Submitting Structured Logs via logger - Shell\nDESCRIPTION: Demonstrates the use of the 'logger' command to submit a structured JSON log entry to syslog-ng. The message is prefixed with '@cim:' to denote its structured content, compatible with earlier configuration. Dependency: logger utility, syslog-ng. Input: Structured JSON as command argument; Output: message routed and parsed by syslog-ng. Limitation: The command must conform to logger syntax and json structure for correct parsing.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ logger '@cim: {\"name1\":\"value1\", \"name2\":\"value2\"}'\n```\n\n----------------------------------------\n\nTITLE: Enabling Java Modules and Conditional Exit in CMake\nDESCRIPTION: Uses a custom `module_switch` macro (presumably defined elsewhere) to provide a user-configurable option `ENABLE_JAVA_MODULES`. The availability of this option is controlled by the `CAN_ENABLE_JAVA_MODULES` flag. If `ENABLE_JAVA_MODULES` is not enabled after this check (either because the dependencies weren't met or the user disabled it), the script returns, preventing further Java module build steps.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/java-modules/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nmodule_switch (ENABLE_JAVA_MODULES \"Enable Java modules\" CAN_ENABLE_JAVA_MODULES)\n\nif (NOT ENABLE_JAVA_MODULES)\n  return ()\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Defining loggen Plugin Command Line Options with GOptionEntry in C\nDESCRIPTION: This code demonstrates how a loggen plugin declares its custom command line options by defining a static GOptionEntry array in C. Each entry specifies the long name, short name, flags, argument type, pointer to destination variable, a help description, and an optional argument. These are required for loggen to parse plugin-specific options at runtime and integrate them into the overall command-line interface. The get_options_list() function must return this array. Dependencies are GLib's GOptionEntry and function pointers registered in the loggen_plugin_info struct. The options control plugin activation and behavior.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/tests/loggen/loggen.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nstatic GOptionEntry loggen_options[] =\n{\n  { \"inet\", 'i', 0,   G_OPTION_ARG_NONE, &inet_socket_i, \"Use IP-based transport (TCP, UDP)\", NULL },\n  { \"unix\", 'x', 0,   G_OPTION_ARG_NONE, &unix_socket_x, \"Use UNIX domain socket transport\", NULL },\n  { \"stream\", 'S', 0, G_OPTION_ARG_NONE, &sock_type_s,   \"Use stream socket (TCP and unix-stream)\", NULL },\n  { \"ipv6\", '6', 0,   G_OPTION_ARG_NONE, &use_ipv6,      \"Use AF_INET6 sockets instead of AF_INET (can use both IPv4 & IPv6)\", NULL },\n  { \"dgram\", 'D', 0,  G_OPTION_ARG_NONE, &sock_type_d,   \"Use datagram socket (UDP and unix-dgram)\", NULL },\n  { NULL }\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling Optional C++ Support in CMake\nDESCRIPTION: Provides an option `ENABLE_CPP` (defaulting to ON) to include C++ support. If enabled, it activates the CXX language, sets the C++ standard to 14 (required), disables compiler-specific extensions, and sets a CMake variable `SYSLOG_NG_ENABLE_CPP` based on the option's value.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\noption(ENABLE_CPP \"Enable C++\" ON)\nif (ENABLE_CPP)\n  enable_language(CXX)\n  set(CMAKE_CXX_STANDARD 14 CACHE STRING \"C++ standard\")\n  set(CMAKE_CXX_STANDARD_REQUIRED ON CACHE BOOL \"C++ standard is a requirement\")\n  set(CMAKE_CXX_EXTENSIONS OFF CACHE BOOL \"C++ compiler specific extensions\")\n  set(SYSLOG_NG_ENABLE_CPP ${ENABLE_CPP})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Test Subdirectory in CMake\nDESCRIPTION: This CMake command includes the `tests` subdirectory into the build configuration, specifically marking it for testing purposes. CMake will recursively process the `CMakeLists.txt` file within the `tests` directory, typically used to define and configure tests using CTest or a similar framework.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/control/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_test_subdirectory(tests)\n```\n\n----------------------------------------\n\nTITLE: Defining, Linking, and Installing pdbtool in CMake\nDESCRIPTION: This CMake code defines an executable named 'pdbtool' using the source file 'pdbtool.c'. It links the executable with the 'patterndb' and 'eventlog' libraries, which must be defined elsewhere in the build system. It also sets a specific compiler flag ('-Wno-pointer-sign') to suppress warnings related to pointer signs for this target only. Finally, it specifies that the compiled 'pdbtool' executable should be installed into the 'bin' destination directory during the installation process.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/correlation/pdbtool/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(pdbtool pdbtool.c)\ntarget_link_libraries(pdbtool patterndb eventlog)\nset_target_properties(pdbtool PROPERTIES COMPILE_FLAGS \"-Wno-pointer-sign\")\ninstall(TARGETS pdbtool RUNTIME DESTINATION bin)\n```\n\n----------------------------------------\n\nTITLE: Setting Install RPATH for OTel Module in CMake\nDESCRIPTION: This CMake command sets the runtime path (RPATH) property for the `otel` target. This ensures that the installed module can find its dynamic library dependencies located in the specified installation prefix directories within the syslog-ng installation.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/grpc/otel/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset_target_properties(otel PROPERTIES INSTALL_RPATH \"${CMAKE_INSTALL_PREFIX}/lib;${CMAKE_INSTALL_PREFIX}/lib/syslog-ng\")\n```\n\n----------------------------------------\n\nTITLE: Setting and Registering Source Files for a Custom Module - CMake\nDESCRIPTION: Defines a list of source and header files for the 'example_destination' module using set(), then registers the module as a statically-linked target using add_module(). The SOURCES property expects a list of file paths; the GRAMMAR property may reference a grammar source required for parsers. The code snippet is intended for use in syslog-ng's build system to modularize and build custom destinations as part of a static library. Requires CMake to run, with static linkage and subsystem compatibility dependent on the syslog-ng build environment.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/examples/destinations/example_destination/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(example_destination_SOURCES\n    \"example_destination-parser.h\"\n    \"example_destination-plugin.c\"\n    \"example_destination-parser.c\"\n    \"example_destination.h\"\n    \"example_destination.c\"\n    \"example_destination_worker.h\"\n    \"example_destination_worker.c\"\n)\n\nadd_module(\n  TARGET example_destination\n  GRAMMAR example_destination-grammar\n  SOURCES ${example_destination_SOURCES}\n  LIBRARY_TYPE STATIC # STATIC: Built as part of a larger libexamples module\n)\n\n```\n\n----------------------------------------\n\nTITLE: Adding the GeoIP2 Plugin Build Target in CMake\nDESCRIPTION: This snippet uses the `add_module` function (likely a custom macro or function defined within the syslog-ng build system) to define the build target named `geoip2-plugin`. It specifies the grammar file (`geoip-parser-grammar`), required include directories (`LIBMAXMINDDB_INCLUDE_DIR`), library dependencies (`LIBMAXMINDDB_LIBRARY`), and the source files (`GEOIP2_SOURCES`) needed to compile and link the plugin.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/geoip2/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nadd_module(\n  TARGET geoip2-plugin\n  GRAMMAR geoip-parser-grammar\n  INCLUDES ${LIBMAXMINDDB_INCLUDE_DIR}\n  DEPENDS ${LIBMAXMINDDB_LIBRARY}\n  SOURCES ${GEOIP2_SOURCES}\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Criterion Unit Test with Dependency - CMake\nDESCRIPTION: This snippet adds a unit test target named 'test_cryptofuncs' to the CMake configuration, linking it to the 'cryptofuncs' build target and marking it to use the 'CRITERION' unit testing framework. It requires CMake and the Criterion framework to be available and expects a buildable 'cryptofuncs' component within the project. No inputs or outputs are specified directly; its effect is to enable running this unit test during the build/test process.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/cryptofuncs/tests/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_unit_test(LIBTEST CRITERION TARGET test_cryptofuncs DEPENDS cryptofuncs)\n```\n\n----------------------------------------\n\nTITLE: Adding Unit Test Targets with add_unit_test - CMake\nDESCRIPTION: Defines a unit test target named test_appmodel using the add_unit_test macro with the CRITERION test framework. It sets the required include path via the APPMODEL_INCLUDE_DIR variable and establishes a dependency on the appmodel component. This ensures that the test target will only build and execute after the appmodel dependency is satisfied. Criterion is required as the test framework dependency.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/appmodel/tests/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_unit_test(LIBTEST CRITERION TARGET test_appmodel INCLUDES \"${APPMODEL_INCLUDE_DIR}\" DEPENDS appmodel)\n```\n\n----------------------------------------\n\nTITLE: Installing FSM Pattern Files for syslog-ng (CMake)\nDESCRIPTION: Uses the install command to copy the smart-multi-line.fsm file into the share/syslog-ng directory during the installation phase. This deployment ensures state machine definitions required for advanced multi-line processing are available after build/install, which is essential for the runtime functioning of multi-line log parsing. No other dependencies are needed aside from the CMake installation logic and the existence of the referenced .fsm file.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/multi-line/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(FILES smart-multi-line.fsm DESTINATION share/syslog-ng)\n```\n\n----------------------------------------\n\nTITLE: Starting Kafka Console Producer (Shell)\nDESCRIPTION: Shell command to start a Kafka console producer. This producer connects to the Kafka broker at 'localhost:9092', sends messages synchronously ('--sync') to the 'mytopic' topic. This is typically used for manual testing of the Kafka topic.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/java-modules/common/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nbin/kafka-console-producer.sh --broker-list localhost:9092 --sync --topic mytopic\n```\n\n----------------------------------------\n\nTITLE: Performing an official syslog-ng release using dbld/rules release - Bash\nDESCRIPTION: This Bash command executes the full release automation process: creating a tarball, generating packaging, building rpm/deb packages, and tagging the release in git, targeting the specified version. It is to be run after manual version bumps and commits. Dependencies are Docker, dbld/rules, and a committed, prepared source tree. The outputs include all artifacts under a dedicated release directory, with manual steps needed for artifact/publication.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/dbld/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ ./dbld/rules release VERSION=3.28.1\n```\n\n----------------------------------------\n\nTITLE: Adding Unconditional Build Dependency in RHEL Spec File\nDESCRIPTION: This snippet demonstrates how to add a required build dependency (`librdkafka-devel`) to an RPM spec file (`syslog-ng.spec`) for RHEL-based distributions. This ensures the specified development package is available during the build process.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/packaging/README.md#_snippet_1\n\nLANGUAGE: rpm-spec\nCODE:\n```\nBuildRequires: librdkafka-devel\n```\n\n----------------------------------------\n\nTITLE: Defining CMake Target for Pylint Static Analysis\nDESCRIPTION: Creates a CMake custom target `pymodules-pylint` for static code analysis using `pylint`. It runs `pylint` against the Python source directory (`syslogng`) using a specific configuration file (`pylintrc`) and the Python executable from the virtual environment. It depends on the `BuildPyVirtualEnv` target.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/python-modules/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(pymodules-pylint\n                  COMMAND ${CMAKE_COMMAND} -E env ${PYTHON_VENV_EXECUTABLE} -m pylint -r n --rcfile=${CMAKE_CURRENT_SOURCE_DIR}/pylintrc ${CMAKE_CURRENT_SOURCE_DIR}/syslogng\n                  DEPENDS BuildPyVirtualEnv\n                  VERBATIM)\n```\n\n----------------------------------------\n\nTITLE: Defining Criterion Unit Test for KMSG Formatting in CMake\nDESCRIPTION: This CMake command adds a unit test named `test_linux_format_kmsg` to the `LIBTEST` build target. It utilizes the Criterion testing framework and specifies that the test depends on the `linux-kmsg-format` target, ensuring the necessary components are built before the test. This test likely validates the functionality related to formatting Linux kernel messages (kmsg).\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/linux-kmsg-format/tests/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_unit_test(LIBTEST CRITERION TARGET test_linux_format_kmsg DEPENDS linux-kmsg-format)\n```\n\n----------------------------------------\n\nTITLE: Building syslog-ng DEB package using dbld/rules for Ubuntu Focal - Bash\nDESCRIPTION: This Bash snippet illustrates the process of building a Debian package for syslog-ng targeting Ubuntu Focal, using the Dockerized dbld environment. Running the command creates .deb packages, which are then made available in the build directory. It requires the syslog-ng source, dbld tool, and Docker. Outputs are the generated .deb packages.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/dbld/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ dbld/rules deb-ubuntu-focal\n```\n\n----------------------------------------\n\nTITLE: Setting Header File List for Log Messages - CMake Script\nDESCRIPTION: This snippet defines the LOGMSG_HEADERS variable, listing all required header files for log message serialization, type hinting, tags, and network address handling in syslog-ng. By using the 'PARENT_SCOPE' flag, these headers become available to the parent CMake scope for inclusion or configuration. No external dependencies are required other than the header files resolved correctly in the source tree. This setup enables modular control over which headers are included in broader builds or targets.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/logmsg/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(LOGMSG_HEADERS\n    logmsg/gsockaddr-serialize.h\n    logmsg/logmsg.h\n    logmsg/logmsg-serialize.h\n    logmsg/logmsg-serialize-fixup.h\n    logmsg/nvhandle-descriptors.h\n    logmsg/nvtable.h\n    logmsg/nvtable-serialize.h\n    logmsg/nvtable-serialize-endianutils.h\n    logmsg/nvtable-serialize-legacy.h\n    logmsg/tags-serialize.h\n    logmsg/timestamp-serialize.h\n    logmsg/tags.h\n    logmsg/type-hinting.h\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Defining Criterion Unit Test for Log Thread Source Driver in CMake\nDESCRIPTION: This CMake command adds a unit test named `test_logthrsourcedrv` to the build system. It specifies that the test uses the Criterion testing framework and depends on the `LIBTEST` library target. The test likely targets the functionality of the log thread source driver component.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/logthrsource/tests/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_unit_test(CRITERION LIBTEST TARGET test_logthrsourcedrv)\n```\n\n----------------------------------------\n\nTITLE: Adding Rate Limit Filter Module Target in CMake Language\nDESCRIPTION: Uses the add_module macro to define a new build target named rate_limit_filter, associated with the specified grammar (rate-limit-grammar) and source files. This setup supports modular compilation, making it possible to enable or disable the rate limit filter as a plugin. It depends on the prior definition of RATE_LIMIT_FILTER_SOURCES and the existence of the add_module macro or function.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/rate-limit-filter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_module(\n  TARGET rate_limit_filter\n  GRAMMAR rate-limit-grammar\n  SOURCES ${RATE_LIMIT_FILTER_SOURCES}\n)\n\n```\n\n----------------------------------------\n\nTITLE: Configuring the 'afsocket' Module Build in CMake\nDESCRIPTION: This command utilizes a custom CMake function or macro named `add_module` to define the `afsocket` build target. It specifies the target name, an associated grammar file (`afsocket-grammar`), required include directories (from ZLIB, systemd, and potentially others like WRAP), library dependencies (WRAP, ZLIB, OpenSSL, libnet, systemd), and the source files previously collected in the `AFSOCKET_SOURCES` variable.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/afsocket/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_module(\n  TARGET afsocket\n  GRAMMAR afsocket-grammar\n  INCLUDES ${ZLIB_INCLUDE_DIRS}\n           ${WRAP_INCLUDE_DIRS}\n           ${Libsystemd_INCLUDE_DIRS}\n  DEPENDS ${WRAP_LIBRARIES}\n          ${ZLIB_LIBRARIES}\n          OpenSSL::SSL\n          OpenSSL::Crypto\n          libnet\n          ${Libsystemd_LIBRARIES}\n  SOURCES ${AFSOCKET_SOURCES}\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Unit Test Targets with Dependencies - CMake\nDESCRIPTION: Registers unit test targets for the syslog-ng project using CMake's add_unit_test macro. Each command specifies the use of the CRITERION test framework, the test target name, and its dependencies (xml and syslog-ng). To function correctly, CMake should be available as the build system and the macro/function add_unit_test must be defined. All dependencies must be present in the build environment. The main input is the target name, and the outputs are registered test targets in the build system. This setup is standard for C++ projects that use automated testing with external test frameworks.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/xml/tests/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_unit_test(CRITERION TARGET test_xml_parser DEPENDS xml syslog-ng)\nadd_unit_test(CRITERION TARGET test_windows_eventlog_xml_parser DEPENDS xml syslog-ng)\n```\n\n----------------------------------------\n\nTITLE: Adding JSON Plugin Module Target in CMake\nDESCRIPTION: This snippet uses a custom `add_module` function/macro to define the build target for the JSON plugin, named `json-plugin`. It specifies dependencies on a grammar target (`json-parser-grammar`), includes directories required by JSON-C (`${JSONC_INCLUDE_DIR}`), links against the JSON-C library (`${JSONC_LIBRARY}`), and uses the source files listed in the `JSON_SOURCES` variable.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/json/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_module(\n  TARGET json-plugin\n  GRAMMAR json-parser-grammar\n  INCLUDES ${JSONC_INCLUDE_DIR}\n  DEPENDS ${JSONC_LIBRARY}\n  SOURCES ${JSON_SOURCES}\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Unit Tests Using add_unit_test Macro in CMake Language\nDESCRIPTION: This snippet defines individual unit tests in a CMake file by invoking the add_unit_test macro for several targets. Each line specifies a test target, its dependencies, and occasionally a test framework or library such as CRITERION or LIBTEST. Dependencies like add_contextual_data, syslogformat, and basicfuncs must be available targets within the build. The expected input is CMake configuration at the project level, and the effect is to configure and register these tests with the build process. It assumes that the add_unit_test macro is predefined and that all specified dependencies are properly declared elsewhere in the build system.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/add-contextual-data/tests/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_unit_test(LIBTEST CRITERION TARGET test_context_info_db DEPENDS add_contextual_data syslogformat basicfuncs)\nadd_unit_test(CRITERION TARGET test_template_selector DEPENDS add_contextual_data)\nadd_unit_test(CRITERION TARGET test_filter_selector DEPENDS add_contextual_data)\nadd_unit_test(CRITERION TARGET test_glob_selector DEPENDS add_contextual_data)\n```\n\n----------------------------------------\n\nTITLE: Defining a Conditional Subpackage in RHEL Spec File\nDESCRIPTION: This snippet demonstrates defining a conditional subpackage (`kafka`) within an RPM spec file. The `%package kafka` directive, along with its Summary, Group, Requires, and Description, is enclosed in an `%if %{with kafka}` block, meaning this subpackage is only defined and built if the 'kafka' feature is enabled during the RPM build.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/packaging/README.md#_snippet_5\n\nLANGUAGE: rpm-spec\nCODE:\n```\n%if %{with kafka}\n%package kafka\nSummary: kafka support for %{name}\nGroup: Development/Libraries\nRequires: %{name}%{?_isa} = %{version}-%{release}\n\n%description kafka\nThis module supports sending logs to kafka through librdkafka.\n%endif\n```\n\n----------------------------------------\n\nTITLE: Generating vmlinux.h using bpftool in CMake\nDESCRIPTION: Defines a CMake custom command that generates the `vmlinux.h` header file. It executes the `bpftool` command to dump BPF Type Format (BTF) information from the kernel's BTF file (`/sys/kernel/btf/vmlinux`) and formats it as a C header. This header is needed for compiling eBPF programs.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/ebpf/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(OUTPUT vmlinux.h\n                   COMMAND ${BPFTOOL} btf dump file /sys/kernel/btf/vmlinux format c >vmlinux.h)\n```\n\n----------------------------------------\n\nTITLE: Switching and Conditionally Building the hook-commands Module - CMake\nDESCRIPTION: This snippet enables or disables the 'hook-commands' module based on the ENABLE_HOOK_COMMANDS option, returning early if the module is not enabled. It sets a variable for the list of source files required for building the module, and ultimately registers the module using the custom add_module command, specifying both the target and its associated grammar. Dependencies include CMake (with add_module macro or function defined elsewhere) and the source/header files. The ENABLE_HOOK_COMMANDS flag is the key parameter that toggles inclusion, and the output is a hooked-commands build artifact, provided that requirements are met.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/hook-commands/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nmodule_switch(ENABLE_HOOK_COMMANDS \"Enable hook-commands module\")\n\nif (NOT ENABLE_HOOK_COMMANDS)\n  return()\nendif()\n\nset(HOOK_COMMANDS_SOURCES\n    \"hook-commands-parser.h\"\n    \"hook-commands.h\"\n    \"hook-commands-plugin.c\"\n    \"hook-commands-parser.c\"\n    \"hook-commands.c\"\n)\n\nadd_module(\n  TARGET hook-commands\n  GRAMMAR hook-commands-grammar\n  SOURCES ${HOOK_COMMANDS_SOURCES}\n)\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Debugger Header and Source Files - CMake\nDESCRIPTION: Defines two CMake variables, DEBUGGER_HEADERS and DEBUGGER_SOURCES, listing all relevant header (.h) and source (.c) files for the syslog-ng debugger component. The PARENT_SCOPE keyword exports these lists to the parent CMake context, making them available for higher-level configuration. No external dependencies beyond CMake itself are required, and the expected inputs are lists of filenames which will be used in the build process.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/debugger/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(DEBUGGER_HEADERS\n    debugger/debugger.h\n    debugger/tracer.h\n    debugger/debugger-main.h\n    PARENT_SCOPE)\n\nset(DEBUGGER_SOURCES\n    debugger/debugger.c\n    debugger/tracer.c\n    debugger/debugger-main.c\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Defining and Building the afamqp Module in CMake\nDESCRIPTION: This CMake script conditionally builds the 'afamqp' module. The `module_switch` command likely sets the `ENABLE_AFAMQP` variable based on whether `RabbitMQ_FOUND` is true. If `ENABLE_AFAMQP` is true, it defines a list of source files (`AFAMQP_SOURCES`) and then invokes the custom `add_module` function. This function configures the 'afamqp' target, specifies its associated grammar file, sets include directories based on `${RabbitMQ_INCLUDE_DIR}`, links against `${RabbitMQ_LIBRARY}`, and uses the defined source files.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/afamqp/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nmodule_switch(ENABLE_AFAMQP \"Enable afamqp module\" RabbitMQ_FOUND)\nif (ENABLE_AFAMQP)\n\nset(AFAMQP_SOURCES\n    \"afamqp-parser.h\"\n    \"afamqp.h\"\n    \"compat/amqp-compat.h\"\n    \"afamqp-parser.c\"\n    \"afamqp-plugin.c\"\n    \"afamqp.c\"\n    \"compat/amqp-compat.c\"\n)\n\nadd_module(\n  TARGET afamqp\n  GRAMMAR afamqp-grammar\n  INCLUDES ${RabbitMQ_INCLUDE_DIR}\n  DEPENDS ${RabbitMQ_LIBRARY}\n  SOURCES ${AFAMQP_SOURCES}\n)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Criterion Unit Tests for HTTP Functionality in CMake\nDESCRIPTION: This CMake code defines multiple unit tests for the HTTP component using the `add_unit_test` macro, likely provided by the project's build system or the Criterion framework integration. It registers tests like `test_http`, `test_http-loadbalancer`, `test_http-response_handlers`, `test_http-signal_slot`, and `test_compression`, specifying their type (LIBTEST or CRITERION) and dependencies (e.g., 'http', 'basicfuncs'). These definitions integrate the tests into the build and testing process.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/http/tests/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_unit_test(LIBTEST CRITERION TARGET test_http DEPENDS http basicfuncs)\nadd_unit_test(LIBTEST CRITERION TARGET test_http-loadbalancer DEPENDS http)\nadd_unit_test(CRITERION TARGET test_http-response_handlers DEPENDS http)\nadd_unit_test(CRITERION TARGET test_http-signal_slot DEPENDS http)\nadd_unit_test(CRITERION TARGET test_compression DEPENDS http)\n```\n\n----------------------------------------\n\nTITLE: Setting CSV Scanner Source Files Variable in CMake\nDESCRIPTION: Defines a CMake variable named `CSV_SCANNER_SOURCES` containing the path to the source file (`csv-scanner/csv-scanner.c`) for the CSV scanner component. The `PARENT_SCOPE` argument ensures this variable is accessible in the including CMake script.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/scanner/csv-scanner/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(CSV_SCANNER_SOURCES\n    csv-scanner/csv-scanner.c\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Setting Source File Variables with CMake - CMake\nDESCRIPTION: Defines a CMake variable for all value-pairs source files needed for module compilation. KEY: PARENT_SCOPE exports the list for use in parent CMake files. These entries are used in add_library or add_executable commands elsewhere in the project.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/value-pairs/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(VALUE_PAIRS_SOURCES\n    value-pairs/value-pairs.c\n    value-pairs/transforms.c\n    value-pairs/cmdline.c\n    value-pairs/evttag.c\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Defining C++ Source Files for BigQuery gRPC Logic (CMake)\nDESCRIPTION: Sets a CMake list variable `BIGQUERY_CPP_SOURCES` containing the C++ source and header files required for the BigQuery destination's core logic, including gRPC communication and metrics. It depends on the `GRPC_METRICS_SOURCES` variable being previously defined.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/grpc/bigquery/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(BIGQUERY_CPP_SOURCES\n  ${GRPC_METRICS_SOURCES}\n  bigquery-dest.hpp\n  bigquery-dest.cpp\n  bigquery-dest.h\n  bigquery-worker.hpp\n  bigquery-worker.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Unit Test for VarBindList Scanner - CMake\nDESCRIPTION: Registers a Criterion-based unit test called test_varbindlist_scanner dependent on the afsnmp module. Ensures SNMP VarBindList scanner logic is validated. Assumes Criterion framework is set up and afsnmp is available. Adds this test to the CMake-configured test targets.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/afsnmp/tests/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_unit_test(CRITERION TARGET test_varbindlist_scanner DEPENDS afsnmp)\n```\n\n----------------------------------------\n\nTITLE: Adding afsmtp Module Build Target in CMake\nDESCRIPTION: Uses a custom CMake function or macro `add_module` to define the build target for the `afsmtp` module. It specifies the target name (`afsmtp`), refers to a grammar definition (`afsmtp-grammar`), sets necessary include paths using `ESMTP_INCLUDE_DIR`, links required libraries using `ESMTP_LIBRARIES`, and provides the list of source files defined in `AFSMTP_SOURCES`.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/afsmtp/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nadd_module(\n  TARGET afsmtp\n  GRAMMAR afsmtp-grammar\n  INCLUDES ${ESMTP_INCLUDE_DIR}\n  DEPENDS ${ESMTP_LIBRARIES}\n  SOURCES ${AFSMTP_SOURCES}\n)\n```\n\n----------------------------------------\n\nTITLE: Adding the Correlation Module Target in CMake\nDESCRIPTION: Uses a custom CMake function `add_module` to define the `correlation` module. It specifies the target name (`correlation`), an associated grammar file (`correlation-grammar`), include directories (`CMAKE_CURRENT_SOURCE_DIR` and `PATTERNDB_INCLUDE_DIR`), dependencies (it depends on the `patterndb` target), and the source files (`CORRELATION_SOURCES`).\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/correlation/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_module(\n  TARGET correlation\n  GRAMMAR correlation-grammar\n  INCLUDES ${CMAKE_CURRENT_SOURCE_DIR} ${PATTERNDB_INCLUDE_DIR}\n  DEPENDS patterndb\n  SOURCES ${CORRELATION_SOURCES}\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Application Unit Test with add_unit_test - CMake\nDESCRIPTION: Defines a test target called test_application utilizing the add_unit_test macro and the Criterion framework. It configures the target to include headers from APPMODEL_INCLUDE_DIR and sets a build dependency on the appmodel module. This facilitates automated testing for overall application-level logic.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/appmodel/tests/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_unit_test(CRITERION TARGET test_application INCLUDES \"${APPMODEL_INCLUDE_DIR}\" DEPENDS appmodel)\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files and Creating Secure Logging Static Library - CMake\nDESCRIPTION: Defines the list of source/header files to be included in the syslog-ng secure logging library. Creates a static library (syslog-ng-secure-logging) and configures the include directories and library dependencies, including both interface and private directories, as well as necessary linkage with syslog-ng and OpenSSL libraries. Requires prior definition of OPENSSL_INCLUDE_DIR, OPENSSL_LIBRARIES, and syslog-ng targets in the CMake environment.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/secure-logging/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SECURE_LOGGING_SOURCES\n  slog.c\n  slog.h\n  )\n\nadd_library(syslog-ng-secure-logging STATIC ${SECURE_LOGGING_SOURCES})\ntarget_include_directories(syslog-ng-secure-logging INTERFACE ${CMAKE_CURRENT_SOURCE_DIR})\ntarget_include_directories(syslog-ng-secure-logging PRIVATE SYSTEM ${OPENSSL_INCLUDE_DIR})\ntarget_link_libraries(syslog-ng-secure-logging PUBLIC syslog-ng ${OPENSSL_LIBRARIES})\n```\n\n----------------------------------------\n\nTITLE: Installing Python Requirements File via CMake\nDESCRIPTION: Uses the CMake `install(FILES ...)` command to copy the `requirements.txt` file from the project source directory to the Python module directory within the final installation path (`${CMAKE_INSTALL_PREFIX}/${SYSLOG_NG_PYTHON_MODULE_DIR}`). This ensures the requirements file is available in the installed package.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/python-modules/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES ${PROJECT_SOURCE_DIR}/requirements.txt DESTINATION \"${CMAKE_INSTALL_PREFIX}/${SYSLOG_NG_PYTHON_MODULE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Adding Build Dependency for eBPF Module in CMake\nDESCRIPTION: Specifies a build dependency using `add_dependencies`. It ensures that the `generate_ebpf_skeletons` custom target (which generates `random.skel.c`) is built before the main `ebpf` module target starts building. This guarantees the generated skeleton code is available when the module compiles.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/ebpf/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_dependencies(ebpf generate_ebpf_skeletons)\n```\n\n----------------------------------------\n\nTITLE: Specifying Files for a Debian Subpackage\nDESCRIPTION: This snippet shows the content of a `.install` file (e.g., `syslog-ng-mod-slog.install`) used by debhelper in Debian packaging. Each line specifies files or shell wildcard patterns matching files that should be included in the corresponding binary package. Here, it includes a shared library and related binaries.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/packaging/README.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nusr/lib/syslog-ng/*/libsecure-logging.so\nusr/bin/slog*\n```\n\n----------------------------------------\n\nTITLE: Adding Dependency to Custom Build Target in CMake\nDESCRIPTION: Establishes a dependency for the `BuildJavaModules` target. It specifies that `BuildJavaModules` depends on `mod-java`, ensuring that the core syslog-ng Java module/plugin infrastructure is built before attempting to build the specific Java modules.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/java-modules/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nadd_dependencies(BuildJavaModules mod-java)\n```\n\n----------------------------------------\n\nTITLE: Defining Log Protocol Source Files in CMake\nDESCRIPTION: This snippet employs the CMake `set` command to define the `LOGPROTO_SOURCES` variable. This variable lists the C source files (.c) located in the 'logproto' subdirectory, required to build the log protocol component. Similar to the headers, the `PARENT_SCOPE` argument propagates this variable to the calling CMake script.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/logproto/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(LOGPROTO_SOURCES\n    logproto/logproto-buffered-server.c\n    logproto/logproto-builtins.c\n    logproto/logproto-client.c\n    logproto/logproto-dgram-server.c\n    logproto/logproto-framed-client.c\n    logproto/logproto-framed-server.c\n    logproto/logproto-multiline-server.c\n    logproto/logproto-record-server.c\n    logproto/logproto-server.c\n    logproto/logproto-text-client.c\n    logproto/logproto-text-server.c\n    logproto/logproto-auto-server.c\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Linking 'secret-storage' Against GLib in CMake\nDESCRIPTION: Links the `secret-storage` library privately against the GLib library (`GLib::GLib`). This makes GLib functions available to the `secret-storage` library but doesn't expose this dependency to targets linking against `secret-storage`.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/secret-storage/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(secret-storage PRIVATE GLib::GLib)\n```\n\n----------------------------------------\n\nTITLE: Adding Static C++ OTel Module in CMake\nDESCRIPTION: This CMake command defines a static library module named `otel-cpp`. It uses the source files listed in `OTEL_CPP_SOURCES`, depends on gRPC libraries (`MODULE_GRPC_LIBS`, `grpc-protos`, `grpc-common-cpp`), and includes necessary directories for protobuf generated files and gRPC module sources.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/grpc/otel/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_module(\n  TARGET otel-cpp\n  SOURCES ${OTEL_CPP_SOURCES}\n  DEPENDS ${MODULE_GRPC_LIBS} grpc-protos grpc-common-cpp\n  INCLUDES ${OTEL_PROTO_BUILDDIR} ${PROJECT_SOURCE_DIR}/modules/grpc\n  LIBRARY_TYPE STATIC\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Signal-Slot Connector Header Files in CMake - CMake\nDESCRIPTION: Defines the SIGNAL_SLOT_CONNECTOR_HEADERS variable listing the required header file for the Signal-Slot Connector component and makes it available to the parent scope. This enables parent CMake files to consume these header file paths, facilitating modular build configuration. There are no required parameters for this snippet; the path specified should exist relative to the project structure.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/signal-slot-connector/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SIGNAL_SLOT_CONNECTOR_HEADERS\n    signal-slot-connector/signal-slot-connector.h\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Adding the system-source Module with Dependencies in CMake Language\nDESCRIPTION: Configures and registers a new build module named 'system-source' using the add_module macro, which specifies include directories, library dependencies, and associated source files. It references previously set variables for maximum configurability. This step requires CMake, the located systemd development files, and defines the actual module to be built with proper linkage to systemd.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/system-source/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_module(\n  TARGET system-source\n  INCLUDES ${Libsystemd_INCLUDE_DIRS}\n  DEPENDS ${Libsystemd_LIBRARIES}\n  SOURCES ${SYSTEM_SOURCE_SOURCES}\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Criterion Unit Test 'test_regexp_parser' in CMake\nDESCRIPTION: This CMake command utilizes a custom or framework-provided function `add_unit_test` to register a unit test. It specifies `CRITERION` as the testing framework, names the test target `test_regexp_parser`, and declares that this test depends on the `regexp-parser` and `syslogformat` components or libraries. These dependencies likely need to be built before the test can be compiled or run.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/regexp-parser/tests/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_unit_test(CRITERION TARGET test_regexp_parser DEPENDS regexp-parser syslogformat)\n```\n\n----------------------------------------\n\nTITLE: Setting and Exporting Aggregator Headers - CMake\nDESCRIPTION: Defines a list variable (STATS_AGGREGATOR_HEADERS) containing header file paths for the stats aggregator, and exports it to the parent CMake scope. Requires CMake to be present as the build system. This variable is meant to be used for later inclusion in larger build rules. No other parameters are needed; the output is the variable's availability in the parent scope.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/stats/aggregator/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(STATS_AGGREGATOR_HEADERS\n    stats/aggregator/stats-aggregator.h\n    stats/aggregator/stats-aggregator-registry.h\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Building and Configuring the dqtool Executable (CMake)\nDESCRIPTION: Creates an executable target named `dqtool` from the `dqtool.c` source file. It links `dqtool` privately against the math library (`m`), the `eventlog` library, and the `syslog-ng-disk-buffer` static library. It also adds the current binary directory (`CMAKE_CURRENT_BINARY_DIR`) to the private include directories for `dqtool`, which is likely needed for generated headers or files.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/diskq/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(dqtool dqtool.c)\ntarget_link_libraries(dqtool PRIVATE m eventlog syslog-ng-disk-buffer)\ntarget_include_directories(dqtool PRIVATE ${CMAKE_CURRENT_BINARY_DIR})\n```\n\n----------------------------------------\n\nTITLE: Adding the Tags Parser Module Target in CMake\nDESCRIPTION: This snippet utilizes a custom CMake function `add_module` to define a build target named 'tags-parser'. It specifies the target name, references a grammar file 'tags-parser-grammar', and provides the list of source files previously defined in the `TAGPARSER_SOURCES` variable. This function likely handles the specifics of compiling and linking the module, potentially generating code from the grammar file.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/tagsparser/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_module(\n  TARGET tags-parser\n  GRAMMAR tags-parser-grammar\n  SOURCES ${TAGPARSER_SOURCES}\n)\n```\n\n----------------------------------------\n\nTITLE: Adding the Disk Buffer Module to syslog-ng Build (CMake)\nDESCRIPTION: Uses a custom `add_module` CMake function (presumably defined elsewhere in the project) to define a loadable syslog-ng module named `disk-buffer`. It specifies the associated grammar file (`diskq-grammar`), its dependency on the `syslog-ng-disk-buffer` static library, and the source files defined in the `DISKBUFFER_SOURCES` variable.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/diskq/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_module(\n  TARGET disk-buffer\n  GRAMMAR diskq-grammar\n  DEPENDS syslog-ng-disk-buffer\n  SOURCES ${DISKBUFFER_SOURCES}\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Target for eBPF Skeleton Generation in CMake\nDESCRIPTION: Creates a CMake custom target named `generate_ebpf_skeletons`. This target serves as a dependency anchor point and depends on the successful generation of the `random.skel.c` file (defined by a previous `add_custom_command`).\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/ebpf/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(generate_ebpf_skeletons DEPENDS \"random.skel.c\")\n```\n\n----------------------------------------\n\nTITLE: Adding Unit Tests for OTEL Protobuf Formatter Using CMake - CMake Language\nDESCRIPTION: This snippet defines a unit test target, test_otel_protobuf_formatter, for verifying OTEL Protobuf formatting. It uses CRITERION as the test framework, lists the relevant source (*.cpp) file, specifies additional include directories, and sets otel-cpp as a dependency. This test is configured to build only outside Apple and FreeBSD platforms.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/grpc/otel/tests/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_unit_test (\n  CRITERION\n  TARGET test_otel_protobuf_formatter\n  SOURCES test-otel-protobuf-formatter.cpp\n  INCLUDES ${OTEL_PROTO_BUILDDIR}\n  DEPENDS otel-cpp)\n\n```\n\n----------------------------------------\n\nTITLE: Including Kafka Module Tests Subdirectory in CMake\nDESCRIPTION: This command instructs CMake to process the `CMakeLists.txt` file located within the `tests` subdirectory relative to the current file. This is used to include and configure the build process for tests specifically related to the Kafka module.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/kafka/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_test_subdirectory(tests)\n```\n\n----------------------------------------\n\nTITLE: Finding the Required ZLIB Library in CMake\nDESCRIPTION: This CMake command searches for the ZLIB compression library. The `REQUIRED` keyword ensures that CMake will stop with an error if ZLIB cannot be found. Successful execution sets variables like `ZLIB_INCLUDE_DIRS` and `ZLIB_LIBRARIES` for use in compiling and linking.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/afsocket/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(ZLIB REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: Setting Header and Source File Lists for http-test-slots - CMake - CMake\nDESCRIPTION: Defines CMake variables 'HTTP_TEST_SLOTS_HEADERS' and 'HTTP_TEST_SLOTS_SOURCES' to collect all the necessary header (.h) and source (.c) files for the http-test-slots static library. These lists are used later for specifying sources when creating the library, and they reference both generated and static files. No dependencies are required beyond CMake and a correctly set ${CMAKE_CURRENT_BINARY_DIR} variable. The variables facilitate modular build specification and maintain a clear separation between generated and static files.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/examples/inner-destinations/http-test-slots/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(HTTP_TEST_SLOTS_HEADERS\\n    \"${CMAKE_CURRENT_BINARY_DIR}/http-test-slots-grammar.h\"\\n    \"http-test-slots-parser.h\"\\n    \"http-test-slots.h\"\\n)\\n\\nset(HTTP_TEST_SLOTS_SOURCES\\n    \"${CMAKE_CURRENT_BINARY_DIR}/http-test-slots-grammar.c\"\\n    \"http-test-slots-parser.c\"\\n    \"http-test-slots.c\"\\n)\\n\n```\n\n----------------------------------------\n\nTITLE: Adding Graphite Module Target with Custom CMake Function\nDESCRIPTION: This snippet utilizes a likely custom CMake function or macro named `add_module`. It configures a build target named \"graphite\", specifying its source files by referencing the `GRAPHITE_SOURCES` variable (previously defined). This command integrates the defined source files into the build process for the graphite module.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/graphite/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_module(\n  TARGET graphite\n  SOURCES ${GRAPHITE_SOURCES}\n)\n```\n\n----------------------------------------\n\nTITLE: Including Filterx Subdirectory in CMake Build\nDESCRIPTION: This CMake command includes the `filterx` subdirectory into the current build process. This typically means CMake will process the `CMakeLists.txt` file within the `filterx` directory, defining its own targets and dependencies.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/grpc/otel/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(filterx)\n```\n\n----------------------------------------\n\nTITLE: Handling Disabled Module or Missing Dependency in CMake\nDESCRIPTION: This CMake snippet checks if the `ENABLE_AFSNMP` flag is false. If it is, the script returns, effectively skipping the rest of the module build process. If the flag is true but the `NETSNMP_FOUND` variable is false (meaning `find_package(NETSNMP)` failed), it triggers a fatal error, stopping the CMake configuration process because the required dependency is missing.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/afsnmp/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif (NOT ENABLE_AFSNMP)\n  return ()\nendif()\n\nif (NOT NETSNMP_FOUND)\n  message(FATAL_ERROR \"SNMP module enabled, but Net-SNMP not found\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Sources and Adding the map-value-pairs Module in CMake\nDESCRIPTION: This snippet sets a CMake variable `MAP_VALUE_PAIRS_SOURCES` containing the list of C source files required for the 'map-value-pairs' module. It then calls the custom CMake function `add_module` to define the module target named `map_value_pairs`. This function likely handles the compilation and linking specifics for syslog-ng modules, taking the target name, grammar file, and source file list as arguments. This code block is only executed if the `ENABLE_MAP_VALUE_PAIRS` option was previously evaluated as true.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/map-value-pairs/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(MAP_VALUE_PAIRS_SOURCES\n  map-value-pairs-grammar.c\n  map-value-pairs-parser.c\n  map-value-pairs-plugin.c\n  map-value-pairs.c)\n\nadd_module(\n  TARGET map_value_pairs\n  GRAMMAR map-value-pairs-grammar\n  SOURCES ${MAP_VALUE_PAIRS_SOURCES}\n)\n```\n\n----------------------------------------\n\nTITLE: Defining a Criterion Unit Test in CMake\nDESCRIPTION: This CMake command adds a unit test named `test_stomp_proto` using the CRITERION testing framework. The test targets `LIBTEST`, depends on the `afstomp` library, and includes headers from the directory specified by the `AFSTOMP_INCLUDE_DIR` variable. This is part of the build configuration for the syslog-ng project.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/afstomp/tests/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_unit_test(LIBTEST CRITERION TARGET test_stomp_proto DEPENDS afstomp INCLUDES \"${AFSTOMP_INCLUDE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Adding New Syslog-ng Macro for Source Port - Plain Text\nDESCRIPTION: This documentation snippet notes the addition of a new runtime macro, $SOURCEPORT, in syslog-ng. The $SOURCEPORT macro expands to the source port of the connection's peer. There are no code dependencies; this is an internal configuration feature available at runtime for log formatting and filtering.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/news/feature-5305.md#_snippet_1\n\nLANGUAGE: plain text\nCODE:\n```\n`$SOURCEPORT`: added new macro which expands to the source port of the peer.\n```\n\n----------------------------------------\n\nTITLE: Defining CMake Target for Python Unit Tests (Conditional)\nDESCRIPTION: Conditionally defines a CMake custom target `pymodules-unit` if the `BUILD_TESTING` option is enabled. This target runs Python unit tests using `pytest` executed via the virtual environment's Python (`PYTHON_VENV_EXECUTABLE`). It depends on the `BuildPyVirtualEnv` target and is added as a dependency to the main `check` target, integrating Python tests into the overall test suite.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/python-modules/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif (BUILD_TESTING)\n    add_custom_target(pymodules-unit\n                      COMMAND ${CMAKE_COMMAND} -E env ${PYTHON_VENV_EXECUTABLE} -m pytest ${CMAKE_CURRENT_SOURCE_DIR}/syslogng\n                      DEPENDS BuildPyVirtualEnv\n                      VERBATIM)\n    add_dependencies(check pymodules-unit)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining CMake Target to Build Python Modules\nDESCRIPTION: Creates a CMake custom target named `BuildPyModules`. This target executes the `setup.py build` command using the Python executable from a predefined virtual environment (`PYTHON_VENV_EXECUTABLE`). The build artifacts are placed in a specific directory within the CMake build tree. This target depends on `BuildPyVirtualEnv`, ensuring the virtual environment is set up first.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/python-modules/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(BuildPyModules\n    COMMAND ${PYTHON_VENV_EXECUTABLE} setup.py build --build-base=${CMAKE_CURRENT_BINARY_DIR}/build\n    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}\n    DEPENDS BuildPyVirtualEnv\n    VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Including pdbtool Subdirectory Build in CMake\nDESCRIPTION: Instructs CMake to process the `CMakeLists.txt` file located in the `pdbtool` subdirectory, adding any targets or build steps defined there to the overall project build.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/correlation/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(pdbtool)\n```\n\n----------------------------------------\n\nTITLE: Defining Compatibility Source Files Set - CMake\nDESCRIPTION: This snippet defines a CMake variable 'COMPAT_SOURCES' as a set of C source files responsible for compatibility features, exporting it to the parent scope. These sources likely implement interfaces or functions declared in the corresponding compatibility headers, and ensure platform portability. All referenced source files must exist under the 'compat' directory for the build to succeed.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/compat/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(COMPAT_SOURCES\n    compat/getutent.c\n    compat/glib.c\n    compat/inet_aton.c\n    compat/memrchr.c\n    compat/pio.c\n    compat/strcasestr.c\n    compat/strtok_r.c\n    compat/strnlen.c\n    compat/getline.c\n    compat/time.c\n    compat/openssl_support.c\n    compat/getent-sun.c\n    compat/getent-openbsd.c\n    compat/getent-generic.c\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Adding Linters and Pre-commit Hooks via CMake - CMake\nDESCRIPTION: Defines a CMake custom target 'light-linters' to perform linting on Python files using pre-commit. It finds all Python files in the light tests directory (excluding 'reports' and 'tox' paths), then runs pre-commit checks in batch mode with detailed diffs on failure and a specified configuration YAML file. The target relies on the Python virtual environment and operates in the correct working directory for consistent configuration resolution.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/tests/light/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_target(light-linters\n   COMMAND find ${PROJECT_SOURCE_DIR}/tests/light/ -name \"*.py\" -not -path \"*reports*\" -not -path \"*tox*\" -print0 | xargs -0 ${PYTHON_VENV_EXECUTABLE} -m pre_commit run --show-diff-on-failure --config=${PROJECT_SOURCE_DIR}/tests/light/.pre-commit-config.yaml --files WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}\n   DEPENDS BuildPyVirtualEnv)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Building example-filterx-func Module in CMake\nDESCRIPTION: This CMake code defines an option `ENABLE_EXAMPLE_FILTERX_FUNC` to control the inclusion of an example filter function module. If the option is enabled (set to ON), it specifies the source file (`example-filterx-func-plugin.c`) and uses the `add_module` command to configure the build for a static library named `example_filterx_func`. The `add_module` function is likely a custom macro or function within the syslog-ng build system.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/examples/filterx/example-filterx-func/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nmodule_switch(ENABLE_EXAMPLE_FILTERX_FUNC \"Enable example-filterx-func\")\nif (NOT ENABLE_EXAMPLE_FILTERX_FUNC)\n  return()\nendif()\n\nset(EXAMPLE_FILTERX_FUNC_SOURCES\n    example-filterx-func-plugin.c\n)\n\nadd_module(\n  TARGET example_filterx_func\n  SOURCES ${EXAMPLE_FILTERX_FUNC_SOURCES}\n  LIBRARY_TYPE STATIC\n)\n```\n\n----------------------------------------\n\nTITLE: Generating Grammar Source Files for HTTP Test Slots - CMake - CMake\nDESCRIPTION: Invokes a custom CMake function or macro 'generate_y_from_ym' to generate source files from grammar definitions, specifically for 'http-test-slots-grammar'. This step is required before invoking tools like bison and ensures that all required .y files exist. The only prerequisites are the presence of the 'generate_y_from_ym' command and the source grammar file. The output is typically a .y file ready for further parsing by bison.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/examples/inner-destinations/http-test-slots/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ngenerate_y_from_ym(modules/examples/inner-destinations/http-test-slots/http-test-slots-grammar)\\n\n```\n\n----------------------------------------\n\nTITLE: Defining and Exporting Source and Header Variables with CMake (CMake)\nDESCRIPTION: These CMake commands define variables listing the headers and sources for the Key-Value Scanner module, and set an include directory variable. The variables are promoted to the parent scope to make them accessible to parent CMake files, facilitating modular project organization. add_test_subdirectory(tests) adds the tests subdirectory, ensuring automated testing is incorporated during the build process. Dependencies: CMake build system. Parameters: file paths for sources and headers, directory paths. Inputs: None (configured by CMake). Outputs: Configured build environment with proper source/header inclusion and tests registration. Requires CMake to be invoked from the root project.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/scanner/kv-scanner/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(KV_SCANNER_HEADERS\n    kv-scanner/kv-scanner.h\n    PARENT_SCOPE)\n\nset(KV_SCANNER_INCLUDE_DIR \"${CMAKE_CURRENT_SOURCE_DIR}\")\n\nset(KV_SCANNER_SOURCES\n    kv-scanner/kv-scanner.c\n    PARENT_SCOPE)\n\nadd_test_subdirectory(tests)\n```\n\n----------------------------------------\n\nTITLE: Setting List Scanner Sources with CMake\nDESCRIPTION: This snippet sets the LIST_SCANNER_SOURCES variable to include the path to the list-scanner.c source file, with the scope set to PARENT_SCOPE. It prepares the source file(s) for use in the parent CMake scope, aiding modular build configuration. CMake is required, and the key parameter is the source file path, which must be accurate for proper compilation.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/scanner/list-scanner/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIST_SCANNER_SOURCES\n    list-scanner/list-scanner.c\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Registering a Criterion Unit Test in Build System (CMake)\nDESCRIPTION: This command registers a unit test named 'test_confgen' using the CRITERION testing framework within the project's build system (likely CMake). It specifies that the test links against 'LIBTEST', sets the build target name to 'test_confgen', and declares a dependency on the 'confgen' target or component. 'add_unit_test' is likely a custom function or macro defined within the syslog-ng build environment.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/confgen/tests/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_unit_test(CRITERION LIBTEST TARGET test_confgen DEPENDS confgen)\n```\n\n----------------------------------------\n\nTITLE: Including Test Subdirectory in CMake\nDESCRIPTION: This command adds the `tests` subdirectory to the build process. CMake will look for a `CMakeLists.txt` file within the `tests` directory and process it, presumably to define and configure tests related to the JSON plugin.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/json/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nadd_test_subdirectory(tests)\n```\n\n----------------------------------------\n\nTITLE: Specifying Include Directories for PatternDB Target in CMake\nDESCRIPTION: Specifies that the directory defined by `CMAKE_CURRENT_SOURCE_DIR` should be added as an include directory for targets that link against `patterndb`. The `INTERFACE` keyword means this applies to consumers of the library, not the library itself during its build.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/correlation/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(patterndb INTERFACE ${CMAKE_CURRENT_SOURCE_DIR})\n```\n\n----------------------------------------\n\nTITLE: Configuring Build and Dependency Management for Java Native Modules - CMake\nDESCRIPTION: This CMake snippet configures source file lists, variables for Java and native compilation, and automates code generation via Bison and custom macros. It defines dependencies for the Java extension modules, groups native C/C++ sources and Java files, and controls build logic for enabling Java support in syslog-ng. Prerequisites include CMake, the Bison parser generator, a functional Java 1.8+ environment, and JNI headers. Key parameters include toggles such as ENABLE_JAVA, paths for Java and native headers, and logic for linking and installation. Inputs are source file lists and detected toolchain paths; outputs are configured build targets and installed binaries. The snippet is constrained to projects conforming to syslog-ng's directory structure and expects properly prepared source and header files.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/java/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset (SYSLOG_NG_CORE_SRC_DIR ${CMAKE_CURRENT_SOURCE_DIR}/src/main/java/org/syslog_ng)\n\nset (NATIVE_SOURCES\n    native/java_machine.c\n    native/java_machine.h\n    native/java-class-loader.c\n    native/java-class-loader.h\n    native/java-destination.c\n    native/java-destination.h\n    native/java-parser.c\n    native/java-parser.h\n    native/java-plugin.c\n    native/java-config.c\n    native/java-config.h\n    ${CMAKE_CURRENT_BINARY_DIR}/java-grammar.c\n    ${CMAKE_CURRENT_BINARY_DIR}/java-grammar.h\n)\n\nset (PROXIES_SOURCES\n    proxies/internal-message-sender-proxy.c\n    proxies/java-destination-proxy.c\n    proxies/java-destination-proxy.h\n    proxies/java-logmsg-proxy.c\n    proxies/java-logmsg-proxy.h\n    proxies/java-template-proxy.c\n    proxies/java-template-proxy.h\n)\n\nset (JAVA_SOURCES\n  ${SYSLOG_NG_CORE_SRC_DIR}/InternalMessageSender.java\n  ${SYSLOG_NG_CORE_SRC_DIR}/SyslogNgClassLoader.java\n  ${SYSLOG_NG_CORE_SRC_DIR}/LogMessage.java\n  ${SYSLOG_NG_CORE_SRC_DIR}/LogTemplate.java\n  ${SYSLOG_NG_CORE_SRC_DIR}/LogPipe.java\n  ${SYSLOG_NG_CORE_SRC_DIR}/LogDestination.java\n  ${SYSLOG_NG_CORE_SRC_DIR}/TextLogDestination.java\n  ${SYSLOG_NG_CORE_SRC_DIR}/StructuredLogDestination.java\n  ${SYSLOG_NG_CORE_SRC_DIR}/DummyTextDestination.java\n  ${SYSLOG_NG_CORE_SRC_DIR}/DummyStructuredDestination.java\n)\n\ngenerate_y_from_ym(modules/java/native/java-grammar modules/java/java-grammar)\n\nbison_target(ModJavaGrammar\n    ${CMAKE_CURRENT_BINARY_DIR}/java-grammar.y\n    ${CMAKE_CURRENT_BINARY_DIR}/java-grammar.c\n    COMPILE_FLAGS ${BISON_FLAGS})\nset_source_files_properties(\n    ${CMAKE_CURRENT_BINARY_DIR}/java-grammar.c\n    PROPERTIES\n    COMPILE_FLAGS ${BISON_BUILT_SOURCE_CFLAGS}\n)\n\nfind_package(Java 1.8)\n\nmodule_switch(ENABLE_JAVA \"Enable java module\" JAVA_FOUND)\nif (ENABLE_JAVA)\n\n  find_package(JNI)\n  include(UseJava)\n\n  include(syslog_ng_core_java_native)\n  create_syslog_ng_core_java_native()\n\n  add_library(mod-java SHARED ${NATIVE_SOURCES} ${PROXIES_SOURCES})\n  target_include_directories (mod-java\n      PRIVATE\n      ${CMAKE_CURRENT_BINARY_DIR}\n      ${CMAKE_CURRENT_SOURCE_DIR}\n      ${CMAKE_CURRENT_SOURCE_DIR}/native\n  )\n  target_include_directories (mod-java SYSTEM PRIVATE ${JAVA_INCLUDE_PATH} ${JAVA_INCLUDE_PATH2})\n  target_link_libraries(mod-java PRIVATE syslog-ng ${JAVA_JVM_LIBRARY} syslog-ng-core-java-native)\n  install(FILES ${CMAKE_CURRENT_BINARY_DIR}/syslog-ng-core.jar DESTINATION lib/syslog-ng/java-modules)\n  install(TARGETS mod-java LIBRARY DESTINATION lib/syslog-ng COMPONENT java)\nendif()\n\n```\n\n----------------------------------------\n\nTITLE: Including Tests for the csvparser Module - CMake\nDESCRIPTION: Adds the tests subdirectory to the current CMake build, allowing the integration and execution of tests associated with the csvparser module. Requires a 'tests' subdirectory containing a valid CMakeLists.txt or similar configuration. This ensures comprehensive test coverage as part of the main build pipeline.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/csvparser/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_test_subdirectory(tests)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Building and Installing Native Connector Library (CMake)\nDESCRIPTION: This block conditionally executes if the `ENABLE_NATIVE` option is ON. It configures and installs a pkg-config file (`syslog-ng-native-connector.pc`) for the native connector. It then defines a static library target `syslog-ng-native-connector` using the previously defined sources and headers, sets include directories, links it against the main `syslog-ng` library, and finally installs the built static library archive (`.a` or `.lib`) to the `lib/` directory.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/native/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif (ENABLE_NATIVE)\n  set(PKG_CONFIG_EXEC_PREFIX \"\\${prefix}\")\n  set(PKG_CONFIG_LIBDIR \"\\${exec_prefix}/lib\")\n  set(PKG_CONFIG_LIBS \"-L\\${libdir} -lsyslog-ng-native-connector\")\n\n  configure_file (${PROJECT_SOURCE_DIR}/syslog-ng-native-connector.pc.cmake ${PROJECT_BINARY_DIR}/syslog-ng-native-connector.pc)\n  install(FILES ${PROJECT_BINARY_DIR}/syslog-ng-native-connector.pc\n          DESTINATION lib/pkgconfig\n          COMPONENT native-connector)\n\n  add_library(syslog-ng-native-connector STATIC ${NATIVE_SOURCES} ${NATIVE_HEADERS})\n  target_include_directories (syslog-ng-native-connector PRIVATE ${CMAKE_CURRENT_BINARY_DIR})\n  target_include_directories (syslog-ng-native-connector PRIVATE ${CMAKE_CURRENT_SOURCE_DIR})\n\n  target_link_libraries(syslog-ng-native-connector PRIVATE syslog-ng)\n\n  install(TARGETS syslog-ng-native-connector ARCHIVE DESTINATION lib/ COMPONENT native-connector)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Kafka Producer Properties Configuration (Properties)\nDESCRIPTION: Content for an external Kafka properties file (e.g., `kafka.properties`), referenced by the syslog-ng Java destination. It configures Kafka producer settings: `acks=all` ensures highest durability, `metadata.fetch.timeout.ms` sets the timeout for fetching metadata, and `retry.backoff.ms` / `reconnect.backoff.ms` define delays for retrying sends and reconnecting.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/java-modules/common/README.md#_snippet_4\n\nLANGUAGE: properties\nCODE:\n```\nacks=all\nmetadata.fetch.timeout.ms=5000\nretry.backoff.ms=1000\nreconnect.backoff.ms=1000\n```\n\n----------------------------------------\n\nTITLE: Defining String Representation Headers Variable in CMake\nDESCRIPTION: This CMake command defines the variable `STR_REPR_HEADERS`. It assigns a list containing the paths to header files `str-repr/encode.h` and `str-repr/decode.h` to this variable. The `PARENT_SCOPE` argument makes this variable accessible in the scope of the parent CMakeLists.txt file that included this one.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/str-repr/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(STR_REPR_HEADERS\n    str-repr/encode.h\n    str-repr/decode.h\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Adding Test Subdirectory in CMake\nDESCRIPTION: This snippet uses the `add_test_subdirectory` CMake command (likely a custom function or macro within the syslog-ng build framework) to include the `tests` subdirectory in the build process. CMake will process the `CMakeLists.txt` file within the `tests` directory, setting up associated test targets.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/basicfuncs/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_test_subdirectory(tests)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for afsnmp Module in CMake\nDESCRIPTION: This CMake code defines a variable `afsnmp_SOURCES` containing a list of all C header (.h) and source (.c) files required to build the `afsnmp` module for syslog-ng. This variable will be used later when defining the module target.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/afsnmp/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(afsnmp_SOURCES\n    \"afsnmpdest.h\"\n    \"afsnmpdest.c\"\n    \"afsnmp-parser.h\"\n    \"afsnmp-parser.c\"\n    \"afsnmp-plugin.c\"\n    \"snmptrapd-header-parser.h\"\n    \"snmptrapd-header-parser.c\"\n    \"snmptrapd-nv-context.h\"\n    \"snmptrapd-parser.h\"\n    \"snmptrapd-parser.c\"\n    \"varbindlist-scanner.h\"\n    \"varbindlist-scanner.c\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating OTel LogRecord Static Library Module in CMake\nDESCRIPTION: This CMake command defines a static library target named `otel_filterx_logrecord_cpp`. It uses the source files listed in `OTEL_LOGRECORD_CPP_SOURCES`, links against gRPC libraries (`MODULE_GRPC_LIBS`) and generated Protobuf code (`grpc-protos`), and specifies include directories required for OTel Protobuf definitions and gRPC modules.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/grpc/otel/filterx/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_module(\n  TARGET otel_filterx_logrecord_cpp\n  SOURCES ${OTEL_LOGRECORD_CPP_SOURCES}\n  DEPENDS ${MODULE_GRPC_LIBS} grpc-protos\n  INCLUDES ${OTEL_PROTO_BUILDDIR} ${PROJECT_SOURCE_DIR}/modules/grpc\n  LIBRARY_TYPE STATIC\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Unit Test 'test_kv_parser' in CMake\nDESCRIPTION: Defines a unit test named 'test_kv_parser' using the `add_unit_test` CMake function. This test is categorized as LIBTEST, uses the CRITERION framework, and depends on the 'kvformat' module.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/kvformat/tests/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_unit_test(LIBTEST CRITERION TARGET test_kv_parser DEPENDS kvformat)\n```\n\n----------------------------------------\n\nTITLE: Creating Main Pub/Sub Module in CMake\nDESCRIPTION: This CMake `add_module` command defines the main `pubsub` module target (likely a shared library plugin for syslog-ng). It compiles the C sources listed in `PUBSUB_SOURCES`, links against the previously defined `pubsub-cpp` static library and `grpc-common-cpp`. It also specifies grammar dependencies (`pubsub-grammar`, `GRPC_COMMON_GRAMMAR`) and includes necessary header directories.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/grpc/pubsub/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nadd_module(\n  TARGET pubsub\n  GRAMMAR pubsub-grammar\n  DEPENDS pubsub-cpp grpc-common-cpp\n  GRAMMAR_DEPENDS ${GRPC_COMMON_GRAMMAR}\n  INCLUDES ${PROJECT_SOURCE_DIR}/modules/grpc\n  SOURCES ${PUBSUB_SOURCES}\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Main OTel Module in CMake\nDESCRIPTION: This CMake command defines the main syslog-ng module named `otel`. It uses the C source files from `OTEL_SOURCES`, depends on the `otel-cpp` static library and `grpc-common-cpp`, specifies grammar files (`otel-grammar`) and their dependencies, and includes the gRPC module source directory.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/grpc/otel/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nadd_module(\n  TARGET otel\n  GRAMMAR otel-grammar\n  GRAMMAR_DEPENDS ${GRPC_COMMON_GRAMMAR}\n  DEPENDS otel-cpp grpc-common-cpp\n  INCLUDES ${PROJECT_SOURCE_DIR}/modules/grpc\n  SOURCES ${OTEL_SOURCES}\n)\n```\n\n----------------------------------------\n\nTITLE: Adding light Subdirectory with CMake - CMake - Plain Text\nDESCRIPTION: Instructs CMake to include the 'light' subdirectory, processing its own CMakeLists.txt and integrating its components into the build system. Requires a directory named 'light' present alongside this file and a working CMake environment. This directive is parameterless and its effect is to modularly add 'light' functionality to the project.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/tests/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(light)\n```\n\n----------------------------------------\n\nTITLE: Adding Test Subdirectory Recursively - CMake\nDESCRIPTION: This snippet adds a test subdirectory named 'tests' to the current CMake project, allowing its own CMakeLists logic to be evaluated. Any test cases and supporting files within that directory become part of the build's test infrastructure. No external dependencies are required beyond the directory existing. The parameter to the function is the name of the subdirectory.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/libtest/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_test_subdirectory(tests)\n```\n\n----------------------------------------\n\nTITLE: Checking and Finding ZLIB Dependency in CMake\nDESCRIPTION: This snippet finds the ZLIB library using `find_package`. If ZLIB is found (`ZLIB_FOUND` is true), it adds the `SYSLOG_NG_HAVE_ZLIB` preprocessor definition to the compile commands, enabling ZLIB-related features in the C code.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/http/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(ZLIB)\nif(ZLIB_FOUND)\n    add_compile_definitions(SYSLOG_NG_HAVE_ZLIB)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining FilterX Source Files with set() - CMake\nDESCRIPTION: This snippet creates a FILTERX_SOURCES variable in CMake, listing all C source (.c) files used in the FilterX subsystem. Using the set() command, it organizes relevant source files and makes the variable visible to the parent build scope with PARENT_SCOPE. Ensuring centralized management allows efficient inclusion and compilation of FilterX within syslog-ng's overall build process.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/filterx/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(FILTERX_SOURCES\n    filterx/expr-assign.c\n    filterx/expr-boolalg.c\n    filterx/expr-comparison.c\n    filterx/expr-function.c\n    filterx/expr-getattr.c\n    filterx/expr-get-subscript.c\n    filterx/expr-literal.c\n    filterx/expr-variable.c\n    filterx/expr-setattr.c\n    filterx/expr-set-subscript.c\n    filterx/expr-template.c\n    filterx/filterx-config.c\n    filterx/filterx-eval.c\n    filterx/filterx-expr.c\n    filterx/filterx-globals.c\n    filterx/filterx-object.c\n    filterx/filterx-parser.c\n    filterx/filterx-pipe.c\n    filterx/filterx-scope.c\n    filterx/filterx-weakrefs.c\n    filterx/object-datetime.c\n    filterx/object-json.c\n    filterx/object-json-object.c\n    filterx/object-json-array.c\n    filterx/object-message-value.c\n    filterx/object-null.c\n    filterx/object-primitive.c\n    filterx/object-string.c\n    filterx/object-list-interface.c\n    filterx/object-dict-interface.c\n    filterx/expr-condition.c\n    filterx/expr-isset.c\n    filterx/expr-unset.c\n    filterx/expr-shorthand.c\n    filterx/expr-generator.c\n    filterx/expr-literal-generator.c\n    filterx/expr-regexp.c\n    filterx/func-istype.c\n    filterx/func-len.c\n    filterx/filterx-private.c\n    PARENT_SCOPE\n    )\n```\n\n----------------------------------------\n\nTITLE: Configuring Debug Build Settings in CMake\nDESCRIPTION: Checks the value of `CMAKE_BUILD_TYPE`. If it matches 'Debug' or 'RelWithDebInfo', it sets the `SYSLOG_NG_ENABLE_DEBUG` variable to ON and adds the `YYDEBUG=1` preprocessor definition (likely for Bison/Yacc debugging). Otherwise, `SYSLOG_NG_ENABLE_DEBUG` is set to OFF.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nIF(CMAKE_BUILD_TYPE MATCHES Debug OR CMAKE_BUILD_TYPE MATCHES RelWithDebInfo)\n  set(SYSLOG_NG_ENABLE_DEBUG ON)\n  add_definitions(-DYYDEBUG=1)\nELSE()\n  set(SYSLOG_NG_ENABLE_DEBUG OFF)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries to slogkey Executable in CMake\nDESCRIPTION: Specifies the link dependencies for the `slogkey` executable target. It links `slogkey` against the `eventlog`, `syslog-ng`, and `syslog-ng-secure-logging` libraries, making their functionalities available during the link phase. These library targets must be defined elsewhere in the CMake project.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/secure-logging/slogkey/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(slogkey eventlog syslog-ng syslog-ng-secure-logging)\n```\n\n----------------------------------------\n\nTITLE: Installing slogkey Executable with CMake\nDESCRIPTION: Defines the installation rule for the `slogkey` target. It specifies that the compiled executable (RUNTIME artifact) should be installed into the `bin` directory relative to the `CMAKE_INSTALL_PREFIX` when the install process (e.g., `make install`) is invoked.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/secure-logging/slogkey/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS slogkey RUNTIME DESTINATION bin)\n```\n\n----------------------------------------\n\nTITLE: Checking for `struct sockaddr_storage` Availability in CMake\nDESCRIPTION: Includes a custom CMake module `CheckSockaddrStorage` to determine if the `struct sockaddr_storage` type is available on the system. Sets the `SYSLOG_NG_HAVE_STRUCT_SOCKADDR_STORAGE` variable to 1 if available, 0 otherwise. This structure is important for handling both IPv4 and IPv6 socket addresses.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(CheckSockaddrStorage)\nif (HAVE_STRUCT_SOCKADDR_STORAGE)\n  set(SYSLOG_NG_HAVE_STRUCT_SOCKADDR_STORAGE 1)\nelse()\n  set(SYSLOG_NG_HAVE_STRUCT_SOCKADDR_STORAGE 0)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for loggen_helper Static Library in CMake\nDESCRIPTION: Sets a CMake variable `LOGGEN_HELPER_SOURCE` containing a list of source files required to build the `loggen_helper` static library. This includes its own C source and header, as well as crypto, OpenSSL support, and GLib compatibility files from the main project library directory.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/tests/loggen/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(LOGGEN_HELPER_SOURCE\n  loggen_helper.c\n  loggen_helper.h\n  ${PROJECT_SOURCE_DIR}/lib/crypto.c\n  ${PROJECT_SOURCE_DIR}/lib/compat/openssl_support.c\n  ${PROJECT_SOURCE_DIR}/lib/compat/glib.c\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Wrapper Option based on LD_LIBRARY_PATH\nDESCRIPTION: Provides an option `ENV_LD_LIBRARY_PATH` to specify a value for `LD_LIBRARY_PATH` to be set at runtime. It then defines `ENABLE_ENV_WRAPPER`, defaulting it to OFF unless `ENV_LD_LIBRARY_PATH` is set, in which case it defaults to ON. This allows enabling a wrapper script that sets the environment before running syslog-ng. The final state is stored in `SYSLOG_NG_ENABLE_ENV_WRAPPER`.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/CMakeLists.txt#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\noption(ENV_LD_LIBRARY_PATH \"Set LD_LIBRARY_PATH during runtime to the value given\" \"\")\nif(NOT DEFINED ENABLE_ENV_WRAPPER)\n  set (ENABLE_ENV_WRAPPER OFF)\n  if (ENV_LD_LIBRARY_PATH)\n    set (ENABLE_ENV_WRAPPER ON)\n  endif ()\nendif ()\nset(SYSLOG_NG_ENABLE_ENV_WRAPPER ${ENABLE_ENV_WRAPPER})\n```\n\n----------------------------------------\n\nTITLE: Adding the Test Subdirectory for Disk Buffer (CMake)\nDESCRIPTION: Adds the `tests` subdirectory to the CMake build process. CMake will descend into this directory and process its `CMakeLists.txt` file, which is expected to contain definitions for tests related to the disk buffer functionality built in this file.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/diskq/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nadd_test_subdirectory(tests)\n```\n\n----------------------------------------\n\nTITLE: Linking Library and Setting Include Directories in CMake\nDESCRIPTION: Links the 'threaded-random-generator' library publicly against the 'syslog-ng' target, ensuring that consumers of 'threaded-random-generator' also link against 'syslog-ng'. It also specifies public include directories (from the source directory) and private include directories (from the binary directory) for the target.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/examples/sources/threaded-random-generator/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(threaded-random-generator PUBLIC syslog-ng)\ntarget_include_directories(threaded-random-generator\n  PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}\n  PRIVATE ${CMAKE_CURRENT_BINARY_DIR}\n)\n```\n\n----------------------------------------\n\nTITLE: Installing the dqtool Executable (CMake)\nDESCRIPTION: Specifies installation rules for the `dqtool` target. It instructs CMake to install the compiled `dqtool` executable into the `bin` directory relative to the installation prefix. This installation is associated with the `diskq` component.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/diskq/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS dqtool RUNTIME DESTINATION bin COMPONENT diskq)\n```\n\n----------------------------------------\n\nTITLE: Defining PatternDB Source Files in CMake\nDESCRIPTION: Defines a CMake variable `PATTERNDB_SOURCES` containing a list of C and header (.c, .h) files that constitute the source code for the `patterndb` library.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/correlation/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(PATTERNDB_SOURCES\n    radix.c\n    radix.h\n    patterndb.c\n    patterndb.h\n    pdb-load.c\n    pdb-load.h\n    pdb-rule.c\n    pdb-rule.h\n    pdb-file.c\n    pdb-file.h\n    pdb-error.c\n    pdb-error.h\n    pdb-action.c\n    pdb-action.h\n    pdb-program.c\n    pdb-program.h\n    pdb-example.c\n    pdb-example.h\n    pdb-ruleset.c\n    pdb-ruleset.h\n    pdb-context.c\n    pdb-context.h\n    pdb-ratelimit.c\n    pdb-ratelimit.h\n    pdb-lookup-params.h\n    pdb-lookup-params.c\n    correlation.c\n    correlation.h\n    correlation-key.c\n    correlation-key.h\n    correlation-context.c\n    correlation-context.h\n    synthetic-message.c\n    synthetic-message.h\n    synthetic-context.c\n    synthetic-context.h\n    timerwheel.c\n    timerwheel.h\n    patternize.c\n    patternize.h\n    id-counter.h\n    id-counter.c\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing C Module for Random Choice Generator with C++ Dependency (CMake)\nDESCRIPTION: This snippet defines a list of source files for the C implementation of the random-choice-generator and creates a static module for it, specifying a GRAMMAR dependency for parser generation and depending on the C++ random-choice-generator-cpp module. The configuration ensures that the C component is built as part of a larger examples module only if its dependencies are satisfied. Key parameters include the GRAMMAR, DEPENDS, and SOURCES, which control the inputs and linkage of the resulting library.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/examples/sources/random-choice-generator/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# C code\\n\\nset(RANDOM_CHOICE_GENERATOR_SOURCES\\n  random-choice-generator-parser.c\\n  random-choice-generator-parser.h\\n)\\n\\nadd_module(\\n  TARGET random-choice-generator\\n  GRAMMAR random-choice-generator-grammar\\n  DEPENDS random-choice-generator-cpp\\n  SOURCES ${RANDOM_CHOICE_GENERATOR_SOURCES}\\n  LIBRARY_TYPE STATIC # STATIC: Built as part of a larger libexamples module\\n)\\n\n```\n\n----------------------------------------\n\nTITLE: Enabling Code Coverage (gcov) Optionally in CMake\nDESCRIPTION: Provides an option `ENABLE_GCOV` (default OFF). If enabled, it adds the `-fprofile-arcs` and `-ftest-coverage` flags to both C and C++ compiler flags (`CMAKE_C_FLAGS`, `CMAKE_CXX_FLAGS`) to enable code coverage analysis instrumentation compatible with `gcov`. It also sets the `SYSLOG_NG_ENABLE_GPROF` variable (likely a typo, should be GCOV).\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/CMakeLists.txt#_snippet_33\n\nLANGUAGE: cmake\nCODE:\n```\noption (ENABLE_GCOV \"Enable code coverage analysis (like gcov) support\" OFF)\nif (ENABLE_GCOV)\n  set (CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -fprofile-arcs -ftest-coverage\")\n  set (CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fprofile-arcs -ftest-coverage\")\nendif ()\nset (SYSLOG_NG_ENABLE_GPROF ${ENABLE_GCOV}) # Note: Variable name seems incorrect, likely should be SYSLOG_NG_ENABLE_GCOV\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding Platform-Specific Monitoring Files in CMake\nDESCRIPTION: This CMake snippet checks for the availability of specific file system monitoring mechanisms. If `SYSLOG_NG_HAVE_INOTIFY` is true, it appends inotify-specific source files to the `AFFILE_SOURCES` list. Otherwise, if `SYSLOG_NG_HAVE_KQUEUE` is true, it appends kqueue-specific source files. This allows the build to adapt to different operating system capabilities for directory monitoring.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/affile/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(SYSLOG_NG_HAVE_INOTIFY)\n  list(APPEND AFFILE_SOURCES\n    \"directory-monitor-inotify.h\"\n    \"directory-monitor-inotify.c\"\n  )\nelseif(SYSLOG_NG_HAVE_KQUEUE)\n  list(APPEND AFFILE_SOURCES\n    \"directory-monitor-kqueue.h\"\n    \"directory-monitor-kqueue.c\"\n  )\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Defining and Checking Example Module Build Option in CMake\nDESCRIPTION: Defines a CMake option `ENABLE_EXAMPLE_MODULES` with a description, defaulting to ON. This allows users to choose whether to build the example modules. If this option is set to OFF (or FALSE), the script execution stops at this point, preventing the examples from being built.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/examples/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nmodule_switch(ENABLE_EXAMPLE_MODULES \"Enable example modules\" ON)\n\nif(NOT ENABLE_EXAMPLE_MODULES)\n  return()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Including Test Subdirectory in CMake\nDESCRIPTION: This CMake command adds a subdirectory named 'tests' to the build process. This indicates that tests related to the 'affile' module (or the current directory's scope) are located within that subdirectory and should be configured and potentially built/run as part of the overall build process.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/affile/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_test_subdirectory(tests)\n```\n\n----------------------------------------\n\nTITLE: Installing syslog-ng via pacman (Arch Linux) - Shell\nDESCRIPTION: Shows the Arch Linux command to install syslog-ng using pacman. Requires root privileges. Input: none; Output: syslog-ng installed on Arch Linux system.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/README.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n# pacman -S syslog-ng\n```\n\n----------------------------------------\n\nTITLE: Defining Build Testing Option in CMake\nDESCRIPTION: Declares a CMake option `BUILD_TESTING` to control whether unit tests should be built and enabled. It defaults to ON.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/CMakeLists.txt#_snippet_24\n\nLANGUAGE: cmake\nCODE:\n```\noption(BUILD_TESTING \"Enable unit tests\" ON)\n```\n\n----------------------------------------\n\nTITLE: Defining slogkey Executable Target in CMake\nDESCRIPTION: Defines a CMake executable target named `slogkey` to be built from the source file `slogkey.c`. This is the first step in specifying how to build the executable within the CMake build system.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/secure-logging/slogkey/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(slogkey slogkey.c)\n```\n\n----------------------------------------\n\nTITLE: Configuring an Example Random Byte Generator Source in syslog-ng (syslog-ng configuration)\nDESCRIPTION: This syslog-ng configuration snippet demonstrates how to define a source using the example random generator plugin. The source, 's_generator', emits a hexadecimal-encoded random string of 32 bytes every 0.5 seconds, using the system's random entropy source. The generated messages are directed to '/dev/stdout' via a log pipeline. Dependencies include the availability and correct installation of the example plugin and syslog-ng's threaded source framework. Key parameters are 'bytes' (specifies output byte length), 'freq' (interval in seconds between messages), and 'type' (entropy source; 'random' or 'urandom').\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/examples/sources/threaded-random-generator/README.md#_snippet_0\n\nLANGUAGE: syslog-ng\nCODE:\n```\nsource s_generator {\n  example-random-generator(\n    bytes(32)\n    freq(0.5)\n    type(random)\n  );\n};\n\nlog {\n  source(s_generator);\n\n  destination {\n    file(\"/dev/stdout\");\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Gradle Build Target in CMake\nDESCRIPTION: Defines a custom CMake target `BuildJavaModules` that runs as part of the `ALL` target (default build). It executes the Gradle wrapper (`${GRADLE_EXECUTABLE}`) pointing to the project source directory (`CMAKE_CURRENT_SOURCE_DIR`). Specific Gradle tasks (`build`, `copyJars`) are invoked, and necessary paths (cache, build, dependencies) are passed as Gradle properties (`-P`).\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/java-modules/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(BuildJavaModules ALL\n  COMMAND ${GRADLE_EXECUTABLE} --project-cache-dir ${GRADLE_WORKDIR} -g ${GRADLE_WORKDIR} -p ${CMAKE_CURRENT_SOURCE_DIR} -PsyslogBuildDir=${CMAKE_CURRENT_BINARY_DIR} -PsyslogDepsDir=${SYSLOG_DEPS_DIR} build copyJars\n)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Compiling tfgetent Module in CMake\nDESCRIPTION: This CMake script defines a conditional build for the `tfgetent` module. It uses the `ENABLE_GETENT` variable, toggled by `module_switch`, to determine whether to include the `tfgetent.c` source file and create the `tfgetent` module target using the `add_module` command. Requires the CMake build system and assumes the definition of `module_switch` and `add_module` macros or functions within the project's build environment.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/getent/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nmodule_switch(ENABLE_GETENT \"Enable getent\")\n\nif (NOT ENABLE_GETENT)\n  return ()\nendif()\n\nset(GETENT_SOURCES\n  tfgetent.c)\n\nadd_module(\n  TARGET tfgetent\n  SOURCES ${GETENT_SOURCES}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building Persist-Tool Executable Using CMake - CMake - Build Configuration\nDESCRIPTION: This snippet defines the entire build process for the 'persist-tool' application using CMake syntax. It specifies the source files required for compilation, sets up include directories needed for correct header resolution (including project and third-party dependencies), links necessary libraries such as GLib and syslog-ng, and defines the installation path for the resulting binary. Prerequisites include having CMake, the specified libraries, and all referenced source files available. The main output is a compiled executable ('persist-tool') placed in the bin directory.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/persist-tool/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(PERSIST-TOOL_SOURCE\n  \tadd.c\n\tdump.c\n\tgenerate.c\n\tpersist-tool.c\n  )\n\nadd_executable(persist-tool ${PERSIST-TOOL_SOURCE})\n\ninclude_directories(persist-tool\n  ${CORE_INCLUDE_DIRS}\n  ${CMAKE_CURRENT_SOURCE_DIR}\n  ${PROJECT_SOURCE_DIR}/lib\n  ${PROJECT_SOURCE_DIR}/lib/eventlog/src\n  )\n\ntarget_link_libraries(persist-tool\n  GLib::GLib\n  GLib::GModule\n  GLib::GThread\n  syslog-ng\n  )\n\ninstall(TARGETS persist-tool RUNTIME DESTINATION bin)\n```\n\n----------------------------------------\n\nTITLE: Enabling syslog-ng Solaris Service - Bash\nDESCRIPTION: Shell command to activate the syslog-ng service on Solaris using svcadm. It enables syslog-ng to run automatically under the SMF framework. Requires service registration and root privileges. Output is an enabled and running syslog-ng instance.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/contrib/solaris-packaging/solaris10_install.txt#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# svcadm enable -t svc:/system/syslog-ng:default\n```\n\n----------------------------------------\n\nTITLE: Setting Filter Module Headers and Sources - CMake\nDESCRIPTION: Defines two lists, FILTER_HEADERS and FILTER_SOURCES, each containing header (.h) and source (.c) files relevant to the filter module. These lists are made available to the parent CMake scope, allowing for modular and reusable build configuration. The configuration assumes that filter components are organized into header and implementation files under a common 'filter' directory. Dependencies include a CMake build system, proper file structure, and a parent CMakeLists.txt that utilizes these lists. There are no executable outcomes; the effect is seen during the CMake configuration & build phase.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/filter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(FILTER_HEADERS\n    filter/filter-expr.h\n    filter/filter-op.h\n    filter/filter-cmp.h\n    filter/filter-in-list.h\n    filter/filter-tags.h\n    filter/filter-netmask.h\n    filter/filter-netmask6.h\n    filter/filter-call.h\n    filter/filter-re.h\n    filter/filter-pri.h\n    filter/filter-pipe.h\n    filter/filter-expr-parser.h\n    PARENT_SCOPE\n    )\n\nset(FILTER_SOURCES\n    filter/filter-expr.c\n    filter/filter-op.c\n    filter/filter-cmp.c\n    filter/filter-in-list.c\n    filter/filter-tags.c\n    filter/filter-netmask.c\n    filter/filter-netmask6.c\n    filter/filter-call.c\n    filter/filter-re.c\n    filter/filter-pri.c\n    filter/filter-pipe.c\n    filter/filter-expr-parser.c\n    PARENT_SCOPE\n    )\n```\n\nLANGUAGE: CMake\nCODE:\n```\nadd_test_subdirectory(tests)\n```\n\n----------------------------------------\n\nTITLE: Running Applications with EventLog Linker-based Syslog Compatibility - Shell\nDESCRIPTION: Shows how to leverage dynamic linker symbol overloading to insert EventLog syslog compatibility into an existing application binary, without recompilation. Requires EventLog to be configured with the --enable-dlsym-wrapper option. The application is invoked with LD_PRELOAD specifying the EventLog shared library, which causes syslog symbol references to be routed to EventLog at runtime. This approach works on platforms supporting dlsym and RTLD_NEXT (e.g. Linux, Solaris).\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/eventlog/doc/API.txt#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ LD_PRELOAD=/usr/lib/libeventlog.so.0 syslogapp\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring the syslog-ng Disk Buffer Static Library (CMake)\nDESCRIPTION: Creates a static library named `syslog-ng-disk-buffer` using the source files listed in the `SYSLOG_NG_DISK_BUFFER_SOURCES` variable. It specifies that targets linking against this library should include the current source directory and links the library publicly against the math library (`m`) and the main `syslog-ng` target.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/diskq/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(syslog-ng-disk-buffer STATIC ${SYSLOG_NG_DISK_BUFFER_SOURCES})\ntarget_include_directories(syslog-ng-disk-buffer INTERFACE ${CMAKE_CURRENT_SOURCE_DIR})\ntarget_link_libraries(syslog-ng-disk-buffer PUBLIC m syslog-ng)\n```\n\n----------------------------------------\n\nTITLE: Defining the 'stardate' Module Build Target in CMake\nDESCRIPTION: This CMake code snippet defines the build configuration for the 'stardate' module. It first checks a CMake option `ENABLE_STARDATE`; if the option is false, the configuration for this module is skipped. If enabled, it sets the source file `stardate-plugin.c`, uses a custom `add_module` function to create the build target named 'stardate' with a dependency on the math library ('m'), and finally adds the 'tests' subdirectory to the build process.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/stardate/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nmodule_switch(ENABLE_STARDATE \"Enable stardate\")\nif (NOT ENABLE_STARDATE)\n  return()\nendif()\n\nset(stardate_SOURCES\n    stardate-plugin.c)\n\nadd_module(\n  TARGET stardate\n  DEPENDS m\n  SOURCES ${stardate_SOURCES}\n)\n\nadd_test_subdirectory(tests)\n```\n\n----------------------------------------\n\nTITLE: Setting Version Properties for loggen_helper Library in CMake\nDESCRIPTION: Sets the VERSION and SOVERSION properties for the `loggen_helper` library target using the `SYSLOG_NG_VERSION` variable. This is typically used for shared library versioning, but CMake allows setting it for static libraries as well, potentially for informational purposes or consistency.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/tests/loggen/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset_target_properties(loggen_helper\n    PROPERTIES VERSION ${SYSLOG_NG_VERSION}\n    SOVERSION ${SYSLOG_NG_VERSION})\n```\n\n----------------------------------------\n\nTITLE: Linking Dependencies for loggen Executable in CMake\nDESCRIPTION: Links the `loggen` executable target against the `loggen_helper` static library. This makes the functionality defined in `loggen_helper` (and its dependencies like GLib and OpenSSL) available to the `loggen` executable.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/tests/loggen/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(\n  loggen\n  loggen_helper)\n```\n\n----------------------------------------\n\nTITLE: Adding Criterion Unit Test for test_aux_data in CMake\nDESCRIPTION: This command utilizes a custom `add_unit_test` CMake function or macro to define a unit test target named `test_aux_data`. It specifies that the Criterion testing framework should be used for this test. Dependencies include the Criterion framework itself and the definition of the `add_unit_test` function/macro.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/transport/tests/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_unit_test(CRITERION TARGET test_aux_data)\n```\n\n----------------------------------------\n\nTITLE: Linking Dependencies for loggen_helper Library in CMake\nDESCRIPTION: Links the `loggen_helper` library target publicly against required external libraries: GLib (including GModule and GThread components) and OpenSSL (SSL component). This ensures that targets linking against `loggen_helper` also link against these dependencies.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/tests/loggen/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(\n  loggen_helper\n  PUBLIC\n  GLib::GLib\n  GLib::GModule\n  GLib::GThread\n  OpenSSL::SSL\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Loggen Include Directory Variable in CMake\nDESCRIPTION: Sets a CMake variable `LOGGEN_INCLUDE_DIR` to the path of the current source directory (`CMAKE_CURRENT_SOURCE_DIR`). This variable is likely used by the subdirectories added later (e.g., plugins) to locate necessary headers within the loggen source tree.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/tests/loggen/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\nset(LOGGEN_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR})\n```\n\n----------------------------------------\n\nTITLE: Adding Criterion Unit Test for test_transport_stack in CMake\nDESCRIPTION: This command uses the `add_unit_test` CMake function/macro to register a unit test target called `test_transport_stack`. It designates the Criterion framework as the testing engine for this specific target. Requires the Criterion framework and the `add_unit_test` definition.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/transport/tests/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_unit_test(CRITERION TARGET test_transport_stack)\n```\n\n----------------------------------------\n\nTITLE: Setting Eventlog Include Directory in CMake\nDESCRIPTION: Sets the `Eventlog_INCLUDE_DIR` CMake variable to point to the source directory of the embedded eventlog library.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/CMakeLists.txt#_snippet_22\n\nLANGUAGE: cmake\nCODE:\n```\nset(Eventlog_INCLUDE_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/lib/eventlog/src\")\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for the GeoIP2 Module in CMake\nDESCRIPTION: This snippet sets the `GEOIP2_SOURCES` CMake variable to a list of C source files (`.c`) that constitute the GeoIP2 module. These source files will be compiled to create the module library or executable.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/geoip2/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(GEOIP2_SOURCES\n  geoip-parser.c\n  geoip-parser-parser.c\n  geoip-plugin.c\n  maxminddb-helper.c\n)\n```\n\n----------------------------------------\n\nTITLE: Setting logthrsource Header Files in CMake - CMake\nDESCRIPTION: This snippet defines the CMake variable LOGTHRSOURCE_HEADERS containing the header files for the 'logthrsource' module. The PARENT_SCOPE argument ensures the variable is defined in the parent CMake scope, making these headers available for inclusion elsewhere in the build process. No external dependencies beyond CMake itself are required.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/logthrsource/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(LOGTHRSOURCE_HEADERS\n    logthrsource/logthrsourcedrv.h\n    logthrsource/logthrfetcherdrv.h\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Exiting Configuration if Module Disabled in CMake\nDESCRIPTION: Checks the value of the `ENABLE_AFSMTP` variable. If it evaluates to FALSE (meaning the module is disabled), the `return()` command halts further processing within the current CMake script file, effectively skipping the build configuration for the `afsmtp` module.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/afsmtp/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif (NOT ENABLE_AFSMTP)\n  return()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Project Name, Language, and Module Path in CMake\nDESCRIPTION: Declares the project name as 'syslog-ng' and specifies 'C' as the primary language. It also sets the CMake module path to include custom modules located in the project's 'cmake/Modules' and 'cmake' directories.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nproject(syslog-ng C)\n\nset(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake/Modules ${PROJECT_SOURCE_DIR}/cmake/)\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories to the Build in CMake\nDESCRIPTION: Includes several subdirectories (`Mk`, `scl`, `lib`, `modules`, `scripts`, `syslog-ng`, `syslog-ng-ctl`, `persist-tool`, `tests`, `libtest`) into the build process. CMake will look for `CMakeLists.txt` files within each of these directories and process them.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/CMakeLists.txt#_snippet_36\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(Mk)\nadd_subdirectory(scl)\nadd_subdirectory(lib)\nadd_subdirectory(modules)\nadd_subdirectory(scripts)\nadd_subdirectory(syslog-ng)\nadd_subdirectory(syslog-ng-ctl)\nadd_subdirectory(persist-tool)\nadd_subdirectory(tests)\nadd_subdirectory(libtest)\n```\n\n----------------------------------------\n\nTITLE: Aggregating Scanner Source Files into Parent Scope - CMake\nDESCRIPTION: This snippet sets the SCANNER_SOURCES variable to collect all source file variables from the respective scanner submodules and exposes them in the parent CMake scope. It references build variables from the subdirectories, ensuring all necessary source files are accessible for higher-level targets. The variables CSV_SCANNER_SOURCES, KV_SCANNER_SOURCES, LIST_SCANNER_SOURCES, and XML_SCANNER_SOURCES must be defined in their respective modules.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/scanner/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(SCANNER_SOURCES\n    scanner/${CSV_SCANNER_SOURCES}\n    scanner/${KV_SCANNER_SOURCES}\n    scanner/${LIST_SCANNER_SOURCES}\n    scanner/${XML_SCANNER_SOURCES}\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version and RPATH Configuration\nDESCRIPTION: Specifies the minimum required CMake version (3.14) and configures Runtime Path (RPATH) settings for the build and installation phases. Ensures the build tree uses full RPATH, prevents using install RPATH during build, sets the install RPATH relative to the installation prefix, enables RPATH on macOS, and includes linked library paths in the install RPATH.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n\n# use, i.e. don't skip the full RPATH for the build tree\nset(CMAKE_SKIP_BUILD_RPATH  FALSE)\n\n# when building, don't use the install RPATH already\n# (but later on when installing)\nset(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE)\n\nset(CMAKE_INSTALL_RPATH \"${CMAKE_INSTALL_PREFIX}/lib\")\nset(CMAKE_MACOSX_RPATH 1)\n\n# add the automatically determined parts of the RPATH\n# which point to directories outside the build tree to the install RPATH\nset(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)\n```\n\n----------------------------------------\n\nTITLE: Aggregating Scanner Header Files into Parent Scope - CMake\nDESCRIPTION: This snippet configures the SCANNER_HEADERS variable, aggregating all header file variables from the scanner modules and making them available to the parent scope in CMake. Like the sources snippet, it expects each submodule to define its own header variables. This organization allows centralized handling of scanner-related headers in the overall build process.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/scanner/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(SCANNER_HEADERS\n    scanner/${CSV_SCANNER_HEADERS}\n    scanner/${KV_SCANNER_HEADERS}\n    scanner/${LIST_SCANNER_HEADERS}\n    scanner/${XML_SCANNER_HEADERS}\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Defining Control Header Files List in CMake\nDESCRIPTION: This CMake command defines the `CONTROL_HEADERS` variable, populating it with a list of C header files located in the `control/` directory. These files likely constitute the public interface or internal headers for a control module. The `PARENT_SCOPE` option ensures the variable is available in the parent scope where this script might be included.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/control/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(CONTROL_HEADERS\n    control/control.h\n    control/control-commands.h\n    control/control-command-thread.h\n    control/control-main.h\n    control/control-server.h\n    control/control-server-unix.h\n    control/control-connection.h\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Finding Gettext Package with Optional Path Hint in CMake\nDESCRIPTION: Locates the Gettext package required for internationalization. If the `WITH_GETTEXT` variable is set, it uses that path as a prefix hint for `find_package`. Otherwise, it performs a standard search. The package is marked as REQUIRED, causing a fatal error if not found.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/CMakeLists.txt#_snippet_21\n\nLANGUAGE: cmake\nCODE:\n```\nif (WITH_GETTEXT)\n    set(CMAKE_PREFIX_PATH ${WITH_GETTEXT})\n    find_package(Gettext REQUIRED QUIET)\n    set(CMAKE_PREFIX_PATH \"\")\nelse()\n    find_package(Gettext REQUIRED QUIET)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating the 'secret-storage' Shared Library Target in CMake\nDESCRIPTION: Adds a shared library target named `secret-storage` to the build system using the source files previously defined in the `SECRET_STORAGE_SOURCES` variable.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/secret-storage/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(secret-storage SHARED ${SECRET_STORAGE_SOURCES})\n```\n\n----------------------------------------\n\nTITLE: Conditionally Returning Early Based on BUILD_TESTING Flag - CMake\nDESCRIPTION: This snippet checks if the 'BUILD_TESTING' variable is not set and, if so, causes CMake to return immediately, skipping the rest of the configuration for this file. It ensures test-related build logic is only processed when testing is enabled. No dependencies are required, but the surrounding CMake logic depends on this for conditional processing. The input is the 'BUILD_TESTING' variable, and the output is a conditional exit from further CMake commands in this file.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/libtest/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT BUILD_TESTING)\n    return ()\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring Secure Logging Executable with CMake - CMake\nDESCRIPTION: This snippet configures the build and installation of the \"slogencrypt\" executable using CMake. It specifies that the executable is compiled from \"slogencrypt.c\", includes the current source directory for headers, and links against the \"eventlog\", \"syslog-ng\", and \"syslog-ng-secure-logging\" libraries. The target is then installed into the \"bin\" directory. Requires CMake and access to the specified libraries; inputs are source files and dependencies; output is a compiled binary for secure logging.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/secure-logging/slogencrypt/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(slogencrypt slogencrypt.c)\ntarget_include_directories (secure-logging PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})\ntarget_link_libraries(slogencrypt eventlog syslog-ng syslog-ng-secure-logging)\ninstall(TARGETS slogencrypt RUNTIME DESTINATION bin)\n```\n\n----------------------------------------\n\nTITLE: Configuring and Installing Python Virtualenv Update Script with CMake\nDESCRIPTION: This CMake snippet sets variables related to Python integration: the virtual environment directory (`python_venvdir`), the Python module directory (`python_moduledir`), and the path to the Python executable (`PYTHON`). It then configures the `syslog-ng-update-virtualenv.in` template file using `configure_file` with the `@ONLY` option (meaning only `@VAR@` variables are replaced, not `${VAR}`), creating the final script in the build directory. Lastly, it installs the generated `syslog-ng-update-virtualenv` script into the `bin` directory (relative to `exec_prefix`). Dependencies include syslog-ng specific variables (`SYSLOG_NG_PYTHON_VENV_DIR`, `SYSLOG_NG_PYTHON_MODULE_DIR`), the standard CMake `PYTHON_EXECUTABLE` variable, and the input template file `syslog-ng-update-virtualenv.in`.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/scripts/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(python_venvdir ${SYSLOG_NG_PYTHON_VENV_DIR})\nset(python_moduledir ${SYSLOG_NG_PYTHON_MODULE_DIR})\nset(PYTHON ${PYTHON_EXECUTABLE})\n\nconfigure_file (${CMAKE_CURRENT_SOURCE_DIR}/syslog-ng-update-virtualenv.in\n                ${CMAKE_CURRENT_BINARY_DIR}/syslog-ng-update-virtualenv\n                @ONLY)\ninstall(PROGRAMS ${CMAKE_CURRENT_BINARY_DIR}/syslog-ng-update-virtualenv DESTINATION bin)\n```\n\n----------------------------------------\n\nTITLE: Adding basicfuncs Module Target in CMake\nDESCRIPTION: This snippet utilizes a custom `add_module` CMake function (presumably defined elsewhere in the syslog-ng build system) to define a build target named `basicfuncs`. It specifies the source files using the `${BASICFUNCS_SOURCES}` variable and declares a dependency on the standard math library (`m`).\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/basicfuncs/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_module(\n  TARGET basicfuncs\n  SOURCES ${BASICFUNCS_SOURCES}\n  DEPENDS m\n)\n```\n\n----------------------------------------\n\nTITLE: Adding cryptofuncs Module Target with OpenSSL Dependency in CMake\nDESCRIPTION: This snippet utilizes a custom CMake function `add_module` (likely defined elsewhere in the syslog-ng build system) to create a module target named `cryptofuncs`. It specifies that this module depends on the OpenSSL library targets `OpenSSL::SSL` and `OpenSSL::Crypto`. The source files for the module are provided via the previously defined `CRYPTOFUNCS_SOURCES` variable.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/cryptofuncs/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_module(\n  TARGET cryptofuncs\n  DEPENDS OpenSSL::SSL\n          OpenSSL::Crypto\n  SOURCES ${CRYPTOFUNCS_SOURCES}\n)\n```\n\n----------------------------------------\n\nTITLE: Including Tests Subdirectory for GeoIP2 Module in CMake\nDESCRIPTION: This snippet uses the `add_test_subdirectory` function (presumably another custom function/macro within the project's build system) to include the `tests` subdirectory located within the current source directory into the build process. This command likely configures and adds tests specific to the GeoIP2 module.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/geoip2/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nadd_test_subdirectory(tests)\n```\n\n----------------------------------------\n\nTITLE: Setting Variables for pkg-config File Generation in CMake\nDESCRIPTION: Sets various `PKG_CONFIG_*` CMake variables based on other CMake variables (like installation paths, version, and Ivykis include directories). These variables will be substituted into the `syslog-ng.pc.cmake` template. Note the escaping of `${libdir}` and `${includedir}` to ensure they appear literally in the final `.pc` file.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/CMakeLists.txt#_snippet_40\n\nLANGUAGE: cmake\nCODE:\n```\n# Package Information for pkg-config\nset(PKG_CONFIG_EXEC_PREFIX ${SYSLOG_NG_PATH_EXECPREFIX})\nset(PKG_CONFIG_DATAROOTDIR ${SYSLOG_NG_PATH_DATAROOTDIR})\nset(PKG_CONFIG_DATADIR ${SYSLOG_NG_PATH_DATAROOTDIR})\nset(PKG_CONFIG_LIBDIR ${LIBDIR})\nset(PKG_CONFIG_INCLUDEDIR ${INCLUDEDIR})\nset(PKG_CONFIG_TOOLSDIR ${TOOLSDIR})\nset(PKG_CONFIG_MODULEDIR ${SYSLOG_NG_PATH_MODULEDIR})\nset(PKG_CONFIG_CONFIG_INCLUDEDIR ${SYSLOG_NG_PATH_CONFIG_INCLUDEDIR})\nset(PKG_CONFIG_SCLDIR ${SYSLOG_NG_PATH_SCLDIR})\nset(PKG_CONFIG_IVYKIS ${IVYKIS_INCLUDE_DIRS})\nset(PKG_CONFIG_PACKAGE_VERSION ${SYSLOG_NG_VERSION})\nset(PKG_CONFIG_INTERNAL_IVYKIS_CFLAGS ${IVYKIS_INCLUDE_DIRS})\nset(libdir \"\\${libdir}\")\nset(includedir \"\\${includedir}\")\n```\n\n----------------------------------------\n\nTITLE: Creating Static Library (tls-test-validation) in CMake\nDESCRIPTION: This command creates a static library target named `tls-test-validation`. The library is built from the source files listed in the `TLS_TEST_VALIDATION_SOURCES` variable defined earlier.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/examples/inner-destinations/tls-test-validation/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(tls-test-validation STATIC ${TLS_TEST_VALIDATION_SOURCES})\n```\n\n----------------------------------------\n\nTITLE: Setting Signal-Slot Connector Source Files in CMake - CMake\nDESCRIPTION: Defines the SIGNAL_SLOT_CONNECTOR_SOURCES variable listing the required source file for the Signal-Slot Connector component and exports this variable to the parent CMake scope. This supports modular inclusion and compilation of the connector within larger builds. No additional dependencies or parameters are required, but the source file path must be accurate.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/signal-slot-connector/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(SIGNAL_SLOT_CONNECTOR_SOURCES\n    signal-slot-connector/signal-slot-connector.c\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Setting and Exporting Aggregator Sources - CMake\nDESCRIPTION: Creates a variable (STATS_AGGREGATOR_SOURCES) holding the list of C source files for the stats aggregator module and exports it to the parent CMake scope. This snippet is used to centralize the source files for compilation and linking, supporting modular build setups. It assumes the files listed exist in the specified paths; output is variable export to the parent build scope.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/stats/aggregator/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(STATS_AGGREGATOR_SOURCES\n    stats/aggregator/stats-aggregator.c\n    stats/aggregator/stats-average.c\n    stats/aggregator/stats-maximum.c\n    stats/aggregator/stats-change-per-second.c\n    stats/aggregator/stats-aggregator-registry.c\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Defining Multi-Line Source Files for syslog-ng (CMake)\nDESCRIPTION: Defines a CMake variable MULTI_LINE_SOURCES with a set of C source files that implement multi-line log processing features in syslog-ng. Like the header list, this uses PARENT_SCOPE to propagate the variable up the scope chain. This setup is necessary for organizing source compilation and for selective component builds; only static paths and basic variables are involved, making it simple to integrate into larger CMake workflows.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/multi-line/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(MULTI_LINE_SOURCES\n    multi-line/indented-multi-line.c\n    multi-line/multi-line-factory.c\n    multi-line/multi-line-logic.c\n    multi-line/multi-line-pattern.c\n    multi-line/smart-multi-line.c\n    multi-line/regexp-multi-line.c\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Determining and Setting Project Version Information in CMake\nDESCRIPTION: Executes an external script (`scripts/version.sh`) to determine the syslog-ng version and stores it in the `SYSLOG_NG_VERSION` variable. It then sets related variables `SYSLOG_NG_COMBINED_VERSION` and `SYSLOG_NG_SOURCE_REVISION` to this determined version.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nexecute_process(COMMAND ${PROJECT_SOURCE_DIR}/scripts/version.sh SET OUTPUT_VARIABLE SYSLOG_NG_VERSION)\nset(SYSLOG_NG_COMBINED_VERSION ${SYSLOG_NG_VERSION})\nset(SYSLOG_NG_SOURCE_REVISION ${SYSLOG_NG_VERSION})\n```\n\n----------------------------------------\n\nTITLE: Basic Configuration for `hypr-audit-trail()` Source in syslog-ng\nDESCRIPTION: This configuration snippet defines a basic syslog-ng source named `s_hypr` using the `hypr-audit-trail()` driver. It requires the Hypr API endpoint URL and a base64 encoded bearer token for authentication. This driver automatically discovers and monitors audit trails for all detected RP applications at startup.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/python-modules/syslogng/modules/hypr/README.md#_snippet_0\n\nLANGUAGE: syslog-ng configuration\nCODE:\n```\n    source s_hypr {\n        hypr-audit-trail(\n            url('https://<custom domain>.hypr.com')\n            bearer-token('<base64 encoded bearer token>')\n        );\n    };\n```\n\n----------------------------------------\n\nTITLE: Adding Test Subdirectory with add_test_subdirectory() - CMake\nDESCRIPTION: This snippet uses add_test_subdirectory(tests) to incorporate a test directory into the CMake project. This command signals that CMake should process the CMakeLists.txt within the 'tests' subdirectory, which typically contains unit or integration tests for validating FilterX components. There are no parameters beyond the folder name and it assumes the relative path 'tests' exists.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/filterx/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_test_subdirectory(tests)\n```\n\n----------------------------------------\n\nTITLE: Checking for Socket Credentials Structures and Control Messages\nDESCRIPTION: Includes a custom `CheckCreds` module to check for specific credential structures (`struct ucred`, `struct cmsgcred`). It sets `SYSLOG_NG_HAVE_STRUCT_UCRED` if either structure is found. Additionally, it uses `check_struct_member` to verify if the `struct msghdr` has the `msg_control` member, which is necessary for ancillary data (like credentials) over sockets, and sets `SYSLOG_NG_HAVE_CTRLBUF_IN_MSGHDR` accordingly.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(CheckCreds)\nset(SYSLOG_NG_HAVE_STRUCT_UCRED (HAVE_STRUCT_UCRED OR HAVE_STRUCT_CMSGCRED))\ncheck_struct_member (\"struct msghdr\" \"msg_control\" \"sys/types.h;sys/socket.h\" SYSLOG_NG_HAVE_CTRLBUF_IN_MSGHDR)\n```\n\n----------------------------------------\n\nTITLE: Defining CMake Target to Install Python Modules\nDESCRIPTION: Creates a CMake custom target named `SetupPyModules`. This target executes the `setup.py install` command using the Python executable from the virtual environment (`PYTHON_VENV_EXECUTABLE`). It installs the Python modules into a specific path within the CMake build directory (`CMAKE_CURRENT_BINARY_DIR/install/lib/syslog-ng/python`). This target depends on `BuildPyModules`, ensuring the modules are built before installation.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/python-modules/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(SetupPyModules\n    COMMAND ${PYTHON_VENV_EXECUTABLE} setup.py install --root=/ --install-lib=${CMAKE_CURRENT_BINARY_DIR}/install/lib/syslog-ng/python\n    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}\n    DEPENDS BuildPyModules\n    VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Disabling the Original Solaris syslogd Service - Bash\nDESCRIPTION: This command disables the default syslogd service on Solaris using svcadm. It prevents service conflicts with syslog-ng, and must be run with administrator privileges. No input other than root access is required. Output is a stopped syslogd service, clearing the way for syslog-ng.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/contrib/solaris-packaging/solaris10_install.txt#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# svcadm -v disable svc:/system/system-log\n```\n\n----------------------------------------\n\nTITLE: Running a development shell and manually building syslog-ng in Docker - Bash\nDESCRIPTION: This snippet sequence shows how to start a Docker-based development shell with dbld/rules, including optional ARM-64 support, then manually run autogen.sh, configuration, compilation, tests, and installation inside the container. The approach supports experimentation and hacking, requiring dbld, Docker, and syslog-ng source code. Results include built binaries and test output, with flexibility for alternative build systems such as CMake.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/dbld/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ ./dbld/rules shell-devshell\n# or, for ARM-64 builds\n#$ ./dbld/rules shell-devshell-arm64\n\n# inside the container\n$ cd /source/\n# autogen.sh generates the configure script using autotools, you could also\n# use cmake (alternative build system, experimental) here.\n$ ./autogen.sh\n$ cd /build/\n# run the configure script, there's a wrapper for this in /dbld/bootstrap\n# that will include extra options exported by dbld/rules.\n$ /source/configure --enable-debug --prefix=/install\n$ make\n$ make check\n$ make install\n```\n\n----------------------------------------\n\nTITLE: Defining test_python_bookmark Unit Test in CMake\nDESCRIPTION: This CMake snippet defines a unit test named `test_python_bookmark` using the `add_unit_test` command with the `CRITERION` framework. It specifies Python include directories (`${PYTHON_INCLUDE_DIR}`, `${PYTHON_INCLUDE_DIRS}`) and depends on `mod-python` and `${PYTHON_LIBRARIES}`. Like other Python tests, it sets the `PYTHONMALLOC` environment variable to `malloc_debug`.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/python/tests/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nadd_unit_test(LIBTEST CRITERION\n  TARGET test_python_bookmark\n  INCLUDES \"${PYTHON_INCLUDE_DIR}\" \"${PYTHON_INCLUDE_DIRS}\"\n  DEPENDS mod-python \"${PYTHON_LIBRARIES}\")\n\nset_property(TEST test_python_bookmark APPEND PROPERTY ENVIRONMENT \"PYTHONMALLOC=malloc_debug\")\n```\n\n----------------------------------------\n\nTITLE: Adding Threaded Disk Queue Source Library - CMake\nDESCRIPTION: Defines a static library target named 'threaded-diskq-source' with associated source and header files, including both manually written files and those generated during the build process. The command leverages CMake variables for binary directory handling, supporting modular and reusable source file referencing. The resulting library is intended for use within the syslog-ng logging framework.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/examples/sources/threaded-diskq-source/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(threaded-diskq-source STATIC\n  threaded-diskq-source-parser.c\n  threaded-diskq-source-parser.h\n  threaded-diskq-source.c\n  threaded-diskq-source.h\n  ${CMAKE_CURRENT_BINARY_DIR}/threaded-diskq-source-grammar.c\n  ${CMAKE_CURRENT_BINARY_DIR}/threaded-diskq-source-grammar.h\n)\n```\n\n----------------------------------------\n\nTITLE: Running Bison and Setting Compile Flags in CMake\nDESCRIPTION: This block uses the `bison_target` function (likely provided by FindBison) to generate C source and header files (`tls-test-validation-grammar.c`, implicitly `tls-test-validation-grammar.h`) from the specified Bison grammar file (`.y`). It then uses `set_source_files_properties` to apply specific compile flags (`BISON_BUILT_SOURCE_CFLAGS`) to the generated C source file.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/examples/inner-destinations/tls-test-validation/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nbison_target(HttpTestSlotsGrammar\n      ${CMAKE_CURRENT_BINARY_DIR}/tls-test-validation-grammar.y\n      ${CMAKE_CURRENT_BINARY_DIR}/tls-test-validation-grammar.c\n      COMPILE_FLAGS ${BISON_FLAGS})\nset_source_files_properties(\n      ${CMAKE_CURRENT_BINARY_DIR}/tls-test-validation-grammar.c\n      PROPERTIES\n      COMPILE_FLAGS ${BISON_BUILT_SOURCE_CFLAGS}\n)\n```\n\n----------------------------------------\n\nTITLE: Generating Header File with gperf in CMake\nDESCRIPTION: Uses the 'gperf_generate' function (presumably a custom CMake function or macro) to generate a header file named 'severity-aliases.h' in the current binary directory from the input file 'severity-aliases.table'. The output is associated with the 'syslog-ng' target.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ngperf_generate(severity-aliases.table ${CMAKE_CURRENT_BINARY_DIR}/severity-aliases.h syslog-ng)\n```\n\n----------------------------------------\n\nTITLE: Adding Test Subdirectory to Build - CMake\nDESCRIPTION: Adds the 'tests' subdirectory to the current CMake project, enabling compilation and integration of test suites. This facilitates automated or manual testing of the transport modules and ensures the build process includes relevant test targets. There are no parameters other than the directory name; prerequisites include a valid 'tests' CMakeLists.txt file.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/transport/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_test_subdirectory(tests)\n```\n\n----------------------------------------\n\nTITLE: Setting Compile Flags for Bison-Generated Source in CMake\nDESCRIPTION: Sets specific C compiler flags for the source file generated by Bison ('msg-generator-grammar.c'). The flags, stored in the BISON_BUILT_SOURCE_CFLAGS variable, are often used to suppress warnings common in generated code or to define necessary preprocessor macros.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/examples/sources/msg-generator/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset_source_files_properties(\n    ${CMAKE_CURRENT_BINARY_DIR}/msg-generator-grammar.c\n    PROPERTIES\n    COMPILE_FLAGS ${BISON_BUILT_SOURCE_CFLAGS}\n)\n```\n\n----------------------------------------\n\nTITLE: Recursively Adding a Test Subdirectory in CMake (CMake)\nDESCRIPTION: This snippet includes test sources by directing CMake to scan and include the 'tests' subdirectory in the build process. No parameters are required beyond the subdirectory name. Its purpose is to incorporate test targets into the syslog-ng build, ensuring test coverage for the syslog format module.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/syslogformat/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_test_subdirectory(tests)\n```\n\n----------------------------------------\n\nTITLE: Setting Compile Flags for Generated Source File in CMake\nDESCRIPTION: Sets specific compile flags for the C source file generated by Bison ('threaded-random-generator-grammar.c'). The flags are taken from the 'BISON_BUILT_SOURCE_CFLAGS' variable, which likely contains flags necessary to suppress warnings or ensure compatibility for code generated by Bison.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/examples/sources/threaded-random-generator/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset_source_files_properties(\n    ${CMAKE_CURRENT_BINARY_DIR}/threaded-random-generator-grammar.c\n    PROPERTIES\n    COMPILE_FLAGS ${BISON_BUILT_SOURCE_CFLAGS}\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Binary Directory to Include Path in CMake\nDESCRIPTION: Adds the current CMake binary directory (`CMAKE_CURRENT_BINARY_DIR`), where generated files like configuration headers reside, to the list of directories searched for include files.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/CMakeLists.txt#_snippet_35\n\nLANGUAGE: cmake\nCODE:\n```\ninclude_directories(${CMAKE_CURRENT_BINARY_DIR})\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for JSON Plugin in CMake\nDESCRIPTION: This CMake code defines a variable named `JSON_SOURCES` containing a list of all C source (.c) and header (.h) files that constitute the JSON plugin. This variable will be used later when defining the build target for the plugin.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/json/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(JSON_SOURCES\n    format-json.c\n    format-json.h\n    json-parser.c\n    json-parser.h\n    json-parser-parser.c\n    json-parser-parser.h\n    dot-notation.c\n    dot-notation.h\n    filterx-format-json.c\n    filterx-format-json.h\n    filterx-cache-json-file.c\n    filterx-cache-json-file.h\n    json-plugin.c\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring IPv6 Support Based on System Check\nDESCRIPTION: Includes a custom `CheckIPv6` module to detect system support for IPv6. Uses the custom `module_switch` function to define an `ENABLE_IPV6` option, defaulting to the value of `HAVE_IPV6` (determined by `CheckIPv6`). Finally, sets the `SYSLOG_NG_ENABLE_IPV6` variable based on the state of the `ENABLE_IPV6` option.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(CheckIPv6)\nmodule_switch(ENABLE_IPV6 \"Enable IPv6\" HAVE_IPV6)\nset(SYSLOG_NG_ENABLE_IPV6 ${ENABLE_IPV6})\n```\n\n----------------------------------------\n\nTITLE: Installing pkg-config File in CMake\nDESCRIPTION: Installs the generated `syslog-ng.pc` file from the binary directory into the `lib/pkgconfig` directory relative to the installation prefix, making it discoverable by the `pkg-config` tool.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/CMakeLists.txt#_snippet_42\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES ${CMAKE_CURRENT_BINARY_DIR}/syslog-ng.pc DESTINATION lib/pkgconfig)\n```\n\n----------------------------------------\n\nTITLE: Defining test_python_persist Unit Test in CMake\nDESCRIPTION: This CMake snippet defines a unit test named `test_python_persist` using the `add_unit_test` command with the `CRITERION` framework. It sets up Python include directories (`${PYTHON_INCLUDE_DIR}`, `${PYTHON_INCLUDE_DIRS}`) and lists `syslogformat`, `mod-python`, and `${PYTHON_LIBRARIES}` as dependencies. The `PYTHONMALLOC` environment variable is set to `malloc_debug` for memory debugging during the test run.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/python/tests/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nadd_unit_test(LIBTEST CRITERION\n  TARGET test_python_persist\n  INCLUDES \"${PYTHON_INCLUDE_DIR}\" \"${PYTHON_INCLUDE_DIRS}\"\n  DEPENDS syslogformat mod-python \"${PYTHON_LIBRARIES}\")\n\nset_property(TEST test_python_persist APPEND PROPERTY ENVIRONMENT \"PYTHONMALLOC=malloc_debug\")\n```\n\n----------------------------------------\n\nTITLE: Checking Riemann Module Enablement and Dependency Status in CMake\nDESCRIPTION: This snippet uses a custom `module_switch` function to handle the `ENABLE_RIEMANN` configuration option, providing a user message. If the module is disabled (`ENABLE_RIEMANN` is false), it exits the current script processing using `return()`. If the module is enabled but the Riemann C client library was not found (`Riemann_FOUND` is false), it halts the CMake configuration process with a fatal error message.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/riemann/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nmodule_switch(ENABLE_RIEMANN \"Enable riemann destination\" Riemann_FOUND)\nif (NOT ENABLE_RIEMANN)\n  return()\nendif()\n\nif (NOT Riemann_FOUND)\n  message(FATAL_ERROR \"Riemann enabled but riemann-c-client is missing!\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Module Source Files and Defining Module Target - CMake\nDESCRIPTION: This snippet defines a list variable (LINUX_KMSG_FORMAT_SOURCES) with the module's header and source files. It then creates a module target named linux-kmsg-format using these sources via add_module. This requires CMake as the build tool, and assumes the add_module macro or function is available in the CMake workspace. The SOURCES parameter expects a variable expanded into a list of filenames. This process sets up the component for later inclusion or linking.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/linux-kmsg-format/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(LINUX_KMSG_FORMAT_SOURCES\n    linux-kmsg-format.c\n    linux-kmsg-format.h\n    linux-kmsg-format-plugin.c\n)\n\nadd_module(\n  TARGET linux-kmsg-format\n  SOURCES ${LINUX_KMSG_FORMAT_SOURCES}\n)\n\n```\n\n----------------------------------------\n\nTITLE: Adding Test Subdirectory to Build in CMake\nDESCRIPTION: This command tells CMake to process the `CMakeLists.txt` file located within the `tests` subdirectory, incorporating the tests defined there into the overall build process.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/http/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_test_subdirectory(tests)\n```\n\n----------------------------------------\n\nTITLE: Creating and Linking syslog-ng-ctl Executable - CMake - CMake\nDESCRIPTION: Adds the syslog-ng-ctl executable target using the files listed in SYSLOG_NG_CTL_SOURCES and sets up linkage with internal and third-party libraries such as syslog-ng, secret-storage, and GLib. It also configures private include directories for proper header resolution and installs the resulting binary in the 'sbin' directory. This snippet integrates all sources, dependencies, and installation rules into the CMake build process, requiring those libraries (and their CMake targets) to be available during configuration.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/syslog-ng-ctl/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(syslog-ng-ctl ${SYSLOG_NG_CTL_SOURCES})\ntarget_link_libraries(syslog-ng-ctl PRIVATE\n    syslog-ng\n    secret-storage\n    GLib::GLib\n    ${RESOLV_LIBS})\ntarget_include_directories(syslog-ng-ctl PRIVATE ${CMAKE_CURRENT_SOURCE_DIR})\ninstall(TARGETS syslog-ng-ctl RUNTIME DESTINATION sbin)\n```\n\n----------------------------------------\n\nTITLE: Generating Parser Code with Bison (CMake)\nDESCRIPTION: This block uses the `bison_target` CMake function to invoke Bison. It processes the generated `native-grammar.y` file to create the C source file `native-grammar.c`. Custom Bison flags (`BISON_FLAGS`) are passed to the Bison execution. Subsequently, specific compile flags (`BISON_BUILT_SOURCE_CFLAGS`) are set for the generated C source file.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/native/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nbison_target(NativeGrammar\n    ${CMAKE_CURRENT_BINARY_DIR}/native-grammar.y\n    ${CMAKE_CURRENT_BINARY_DIR}/native-grammar.c\n    COMPILE_FLAGS ${BISON_FLAGS})\nset_source_files_properties(\n    ${CMAKE_CURRENT_BINARY_DIR}/native-grammar.c\n    PROPERTIES\n    COMPILE_FLAGS ${BISON_BUILT_SOURCE_CFLAGS}\n)\n```\n\n----------------------------------------\n\nTITLE: Detecting Specific Curl Features using Custom Function in CMake\nDESCRIPTION: This section calls the previously defined `curl_detect_compile_option` function multiple times to check for the availability of various Curl features and constants. It checks for different TLS versions (TLSv1.0 to TLSv1.3), specific options like `CURLOPT_TLS13_CIPHERS`, `CURLOPT_SSL_VERIFYSTATUS`, `CURLOPT_REDIR_PROTOCOLS_STR`, and features related to the modern `curl_url` API for URL parsing.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/http/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\ncurl_detect_compile_option(CURL_SSLVERSION_TLSv1_0)\ncurl_detect_compile_option(CURL_SSLVERSION_TLSv1_1)\ncurl_detect_compile_option(CURL_SSLVERSION_TLSv1_2)\ncurl_detect_compile_option(CURL_SSLVERSION_TLSv1_3)\ncurl_detect_compile_option(CURLOPT_TLS13_CIPHERS)\ncurl_detect_compile_option(CURLOPT_SSL_VERIFYSTATUS)\ncurl_detect_compile_option(CURLOPT_REDIR_PROTOCOLS_STR)\n\n# Full URL parsing support\ncurl_detect_compile_option(curl_url)\ncurl_detect_compile_option(CURLU_ALLOW_SPACE)\ncurl_detect_compile_option(CURLUE_BAD_SCHEME)\ncurl_detect_compile_option(CURLUE_BAD_HOSTNAME)\ncurl_detect_compile_option(CURLUE_BAD_PORT_NUMBER)\ncurl_detect_compile_option(CURLUE_BAD_USER)\ncurl_detect_compile_option(CURLUE_BAD_PASSWORD)\ncurl_detect_compile_option(CURLUE_MALFORMED_INPUT)\ncurl_detect_compile_option(CURLUE_LAST)\ncurl_detect_compile_option(CURLUPART_SCHEME)\ncurl_detect_compile_option(CURLUPART_HOST)\ncurl_detect_compile_option(CURLUPART_PORT)\ncurl_detect_compile_option(CURLUPART_USER)\ncurl_detect_compile_option(CURLUPART_PASSWORD)\ncurl_detect_compile_option(CURLUPART_URL)\n```\n\n----------------------------------------\n\nTITLE: Defining MQTT Destination Sources List - CMake\nDESCRIPTION: Initializes the CMake variable MQTT_DEST_SOURCES with a list of C source and header files necessary for building the MQTT destination component of syslog-ng. This variable bundles together related implementation and header files, allowing for easier module definition and dependency management during the build process. No external dependencies are required at this point, but these files will later be compiled as part of a module.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/mqtt/destination/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(MQTT_DEST_SOURCES\n    mqtt-destination.c\n    mqtt-destination.h\n    mqtt-worker.c\n    mqtt-worker.h\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Module Target with Grammar and Source Files in CMake (CMake)\nDESCRIPTION: Configures a syslogformat module build target using CMake, assigning it the sources defined in SYSLOGFORMAT_SOURCES and associating it with a grammar file. Prerequisites are the presence of variables and grammar definitions in the project structure. Inputs are the target name (syslogformat), a grammar resource, and a source file list; output is the build rule for the corresponding module. Assumes supporting CMake macros are present.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/syslogformat/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_module(\n  TARGET syslogformat\n  GRAMMAR syslog-parser-grammar\n  SOURCES ${SYSLOGFORMAT_SOURCES}\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Graphite Module Source Files in CMake\nDESCRIPTION: This CMake snippet uses the `set` command to define a variable named `GRAPHITE_SOURCES`. This variable holds a list of C source (`.c`) and header (`.h`) files which constitute the Graphite module within the syslog-ng project. This variable is typically used later in the build script to specify sources for a library or executable target.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/graphite/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset (GRAPHITE_SOURCES\n    graphite-plugin.c\n    graphite-output.h\n    graphite-output.c\n)\n```\n\n----------------------------------------\n\nTITLE: Adding a Module Target for Metrics-Probe - CMake - CMake\nDESCRIPTION: Adds a new module target named 'metrics-probe' to the build system, specifying the module's grammar and source files. This step integrates the defined sources and custom grammar into the CMake project and is essential for compilation. Depends on 'METRICS_PROBE_SOURCES' being set; expects CMake 3.x+.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/metrics-probe/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_module(\n  TARGET metrics-probe\n  GRAMMAR metrics-probe-grammar\n  SOURCES ${METRICS_PROBE_SOURCES}\n)\n```\n\n----------------------------------------\n\nTITLE: Defining the eventlog Shared Library in CMake\nDESCRIPTION: This CMake command defines a shared library target named 'eventlog'. It compiles the specified C source files (evtctx.c, evtfmt.c, etc.) into a shared library (.so or .dll depending on the platform).\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/eventlog/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(eventlog SHARED\n  src/evtctx.c\n  src/evtfmt.c\n  src/evtout.c\n  src/evtrec.c\n  src/evtstr.c\n  src/evtsyslog.c\n  src/evttags.c\n)\n```\n\n----------------------------------------\n\nTITLE: Handling Unsupported ENABLE_PERF Option in CMake\nDESCRIPTION: Checks if the `ENABLE_PERF` option is defined. If it is, it throws a fatal error because performance analysis is not currently supported by the CMake build system. Regardless, it sets the `ENABLE_PERF` variable to OFF and mirrors this to `SYSLOG_NG_ENABLE_PERF`.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/CMakeLists.txt#_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\n# TODO: This one does not seem to be used at all, add the missing configure option handling if needed in the future\nif (DEFINED ENABLE_PERF)\n  message (FATAL_ERROR \"ENABLE_PERF is defined, but the cmake build system does not support it currently.\")\nendif ()\nset (ENABLE_PERF OFF)\nset (SYSLOG_NG_ENABLE_PERF ${ENABLE_PERF})\n```\n\n----------------------------------------\n\nTITLE: Defining CEF Module Source Files in CMake\nDESCRIPTION: This CMake snippet uses the `set` command to define a variable named `CEF_SOURCES`. This variable holds a list of C source (.c) and header (.h) files required to build the CEF (Common Event Format) module within the syslog-ng project.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/cef/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(CEF_SOURCES\n    format-cef-extension.c\n    format-cef-extension.h\n    cef-plugin.c\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Source File List in CMakeLists - CMake\nDESCRIPTION: This snippet defines a CMake list variable (add_contextual_data_SOURCES) containing all source and header files that are part of the add_contextual_data module. This variable is later referenced for build configuration. There are no external dependencies besides standard CMake syntax; file paths are relative to the project root. The list includes source (.c) and header (.h) files required for compilation. No inputs or outputs are directly managed, but this list is necessary for subsequent build target commands.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/add-contextual-data/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(add_contextual_data_SOURCES\n    add-contextual-data.c\n    add-contextual-data.h\n    add-contextual-data-parser.c\n    add-contextual-data-parser.h\n    add-contextual-data-plugin.c\n    context-info-db.h\n    context-info-db.c\n    contextual-data-record.h\n    contextual-data-record.c\n    contextual-data-record-scanner.h\n    contextual-data-record-scanner.c\n    add-contextual-data-selector.h\n    add-contextual-data-template-selector.h\n    add-contextual-data-template-selector.c\n    add-contextual-data-filter-selector.h\n    add-contextual-data-filter-selector.c\n    add-contextual-data-glob-selector.h\n    add-contextual-data-glob-selector.c\n)\n```\n\n----------------------------------------\n\nTITLE: Toggling GeoIP2 Module Enablement Based on Dependency in CMake\nDESCRIPTION: This snippet utilizes a `module_switch` function (presumably defined elsewhere in the build system) to control the `ENABLE_GEOIP2` build option. The option is enabled only if the required `libmaxminddb` library (`LIBMAXMINDDB_FOUND` is true) was successfully located by `find_package`. It also provides a description for the build option presented to the user.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/geoip2/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nmodule_switch(ENABLE_GEOIP2 \"Enable geoip2 parser and template function\" LIBMAXMINDDB_FOUND)\n```\n\n----------------------------------------\n\nTITLE: Defining C Source Files for Pub/Sub Module in CMake\nDESCRIPTION: This CMake code defines a variable `PUBSUB_SOURCES` containing the list of C source and header files required for the core `pubsub` plugin logic. These files likely handle the main plugin interface, parsing, and interaction with the C++ backend.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/grpc/pubsub/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(PUBSUB_SOURCES\n  pubsub-plugin.c\n  pubsub-parser.c\n  pubsub-parser.h\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for a Module - CMake - CMake\nDESCRIPTION: Declares a CMake variable listing all source and header files associated with the metrics-probe component. This variable is used in subsequent commands to reference these files collectively when adding modules or targets. Required by later build steps.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/metrics-probe/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(METRICS_PROBE_SOURCES\n    metrics-probe.c\n    metrics-probe.h\n    metrics-probe-parser.c\n    metrics-probe-parser.h\n    metrics-probe-plugin.c\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Correlation Module Source Files in CMake\nDESCRIPTION: Defines a CMake variable `CORRELATION_SOURCES` containing a list of C and header (.c, .h) files that constitute the source code for the `correlation` module.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/correlation/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(CORRELATION_SOURCES\n    stateful-parser.c\n    stateful-parser.h\n    dbparser.c\n    dbparser.h\n    correlation-parser.c\n    correlation-parser.h\n    correlation-plugin.c\n    groupingby.c\n    groupingby.h\n    grouping-parser.c\n    grouping-parser.h\n    group-lines.c\n    group-lines.h\n)\n```\n\n----------------------------------------\n\nTITLE: Linking Dependencies for Loggen SSL Plugin (CMake)\nDESCRIPTION: This command links the `loggen_ssl_plugin` target against its required dependencies. These include the `loggen_helper` library, various GLib components (`GLib::GLib`, `GLib::GModule`, `GLib::GThread`), and the OpenSSL library (`OpenSSL::SSL`).\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/tests/loggen/ssl_plugin/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(\n  loggen_ssl_plugin\n  loggen_helper\n  GLib::GLib\n  GLib::GModule\n  GLib::GThread\n  OpenSSL::SSL\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining Compiler Warning Sets in CMake\nDESCRIPTION: Defines CMake variables `IMPORTANT_WARNINGS` and `ACCEPTABLE_WARNINGS` containing lists of compiler warning flags. `IMPORTANT_WARNINGS` includes flags like `-Wshadow`, while `ACCEPTABLE_WARNINGS` includes flags to suppress specific warnings like `-Wno-unused-parameter`.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/CMakeLists.txt#_snippet_28\n\nLANGUAGE: cmake\nCODE:\n```\nset(IMPORTANT_WARNINGS\n  -Wshadow)\n\nset(ACCEPTABLE_WARNINGS\n  -Wno-stack-protector\n  -Wno-unused-parameter\n  -Wno-variadic-macros)\n```\n\n----------------------------------------\n\nTITLE: Installing the Loggen SSL Plugin Library (CMake)\nDESCRIPTION: This command defines the installation rule for the compiled `loggen_ssl_plugin` library. It specifies that the `TARGETS loggen_ssl_plugin` should be installed as a `LIBRARY` to the destination directory defined by the `LOGGEN_PLUGIN_INSTALL_DIR` variable.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/tests/loggen/ssl_plugin/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS loggen_ssl_plugin LIBRARY DESTINATION ${LOGGEN_PLUGIN_INSTALL_DIR})\n```\n\n----------------------------------------\n\nTITLE: Linking Target Library (tls-test-validation) in CMake\nDESCRIPTION: Links the `tls-test-validation` library against the `syslog-ng` library. The `PUBLIC` keyword indicates that any target linking against `tls-test-validation` will also implicitly link against `syslog-ng`.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/examples/inner-destinations/tls-test-validation/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(tls-test-validation PUBLIC syslog-ng)\n```\n\n----------------------------------------\n\nTITLE: Configuring AppModel Module with CMake - CMake\nDESCRIPTION: This snippet demonstrates how to configure the AppModel module using CMake in a C/C++ project. It starts by checking if the AppModel feature is enabled, returning early if not, then specifies relevant source files and sets up the build target and related grammar. It also ensures the test suite in the 'tests' subdirectory is included. Dependencies include an existing CMake build environment, appropriate source files as listed, and support for custom module and testing functions.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/appmodel/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nmodule_switch(ENABLE_APPMODEL \\\"Enable AppModel\\\")\n\nif (NOT ENABLE_APPMODEL)\n  return()\nendif()\n\nset (APPMODEL_SOURCES\n    appmodel.c\n    appmodel-parser.c\n    appmodel-plugin.c\n    appmodel-context.c\n    app-parser-generator.c\n    application.c\n)\n\nadd_module(\n  TARGET appmodel\n  GRAMMAR appmodel-grammar\n  SOURCES ${APPMODEL_SOURCES}\n)\n\nadd_test_subdirectory(tests)\n\n```\n\n----------------------------------------\n\nTITLE: Adding Unit Tests for Kafka Integration with Criterion - CMake\nDESCRIPTION: Defines three Criterion-based unit test targets for verifying Kafka integration within syslog-ng, ensuring they depend on the appropriate libraries (kafka and rdkafka). Each add_unit_test() command adds a test target and specifies required dependencies so that the corresponding components are built and linked correctly. All snippets assume Criterion, kafka, and rdkafka are available in the build environment, and the file must be processed by CMake as part of the build configuration.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/kafka/tests/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_unit_test(CRITERION LIBTEST TARGET test_kafka-props DEPENDS kafka)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nadd_unit_test(CRITERION LIBTEST TARGET test_kafka_topic DEPENDS kafka rdkafka)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nadd_unit_test(CRITERION LIBTEST TARGET test_kafka_config DEPENDS kafka rdkafka)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Installing syslog-ng.conf using CMake\nDESCRIPTION: Checks if the main `syslog-ng.conf` file already exists at the target installation path `${CMAKE_INSTALL_PREFIX}/etc/syslog-ng.conf`. If the file does not exist, it proceeds to install the `syslog-ng.conf` file from the source directory into the `etc` directory within the installation prefix. This prevents overwriting an existing user configuration during installation.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/scl/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif (NOT EXISTS ${CMAKE_INSTALL_PREFIX}/etc/syslog-ng.conf)\n    install(FILES syslog-ng.conf DESTINATION etc)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Module Enable Switch in CMake\nDESCRIPTION: Uses a custom CMake function or macro named `module_switch` to define a build option `ENABLE_AFSMTP`. This option allows users to control whether the SMTP destination module is included in the build. The third argument, `ESMTP_FOUND`, likely influences the default state or availability of the switch based on whether the ESMTP dependency was found.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/afsmtp/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nmodule_switch(ENABLE_AFSMTP \"Enable SMTP destination\" ESMTP_FOUND)\n```\n\n----------------------------------------\n\nTITLE: Adding socket_plugin Subdirectory to Build in CMake\nDESCRIPTION: Includes the `socket_plugin` subdirectory in the CMake build process. CMake will look for a `CMakeLists.txt` file within that subdirectory and process it, likely building a plugin for `loggen` related to socket communication.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/tests/loggen/CMakeLists.txt#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(socket_plugin)\n```\n\n----------------------------------------\n\nTITLE: Adding Pytest Self-Check Target via CMake - CMake\nDESCRIPTION: Defines a CMake custom target named 'light-self-check' to run pytest on the src directory of light tests. It depends on a Python virtual environment being built and uses the Python executable to invoke pytest with verbose output and local context enabled. The command integrates with the overall build process, ensuring test coverage as part of validation.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/tests/light/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_target(light-self-check\n   COMMAND ${PYTHON_VENV_EXECUTABLE} -m pytest ${PROJECT_SOURCE_DIR}/tests/light/src --showlocals --verbosity=3\n   DEPENDS BuildPyVirtualEnv)\n```\n\n----------------------------------------\n\nTITLE: Creating the loggen Executable Target in CMake\nDESCRIPTION: Defines an executable target named `loggen` using the source files listed in the `LOGGEN_SOURCE` variable.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/tests/loggen/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(loggen ${LOGGEN_SOURCE})\n```\n\n----------------------------------------\n\nTITLE: Conditionally Skipping Build if gRPC is Disabled (CMake)\nDESCRIPTION: Checks the value of the CMake variable `ENABLE_GRPC`. If it is false or undefined, the script immediately returns, preventing the subsequent definitions for the BigQuery module (which depends on gRPC) from being processed.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/grpc/bigquery/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT ENABLE_GRPC)\n  return()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing lex-rules.am with Build System Install Command\nDESCRIPTION: This command uses the 'install' function, common in build systems like CMake, to copy the 'lex-rules.am' file to the 'share/syslog-ng/tools' directory during the installation phase of the syslog-ng build process. 'FILES' specifies the file to install, and 'DESTINATION' indicates the target directory relative to the installation prefix.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/Mk/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES lex-rules.am DESTINATION share/syslog-ng/tools)\n```\n\n----------------------------------------\n\nTITLE: Validating and Importing syslog-ng SMF Manifest - Bash\nDESCRIPTION: Commands for running svccfg to validate and import the syslog-ng Solaris SMF (Service Management Facility) manifest file. Steps are performed in a svccfg subsystem shell. The input is the manifest XML; output is a registered and validated SMF manifest, allowing syslog-ng to be managed as a Solaris service.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/contrib/solaris-packaging/solaris10_install.txt#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# svccfg\nsvc:> validate /var/svc/manifest/system/syslog-ng.xml\nsvc:> import /var/svc/manifest/system/syslog-ng.xml\nsvc:> quit\n```\n\n----------------------------------------\n\nTITLE: Conditionally Initializing C++ Module for Random Choice Generator (CMake)\nDESCRIPTION: This snippet checks if the C++ components should be enabled via the ENABLE_CPP flag before proceeding. It then defines a list of source files for the C++ random-choice-generator and adds a static module for it using add_module. Dependencies include the specified C++ source and header files, and it is intended for use in the syslog-ng's build process where optional C++ extensions may be enabled or disabled. Inputs include the ENABLE_CPP variable; outputs are static libraries prepared for linking in the larger build.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/examples/sources/random-choice-generator/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT ENABLE_CPP)\\n  return()\\nendif()\\n\\n# C++ code\\n\\nset(RANDOM_CHOICE_GENERATOR_CPP_SOURCES\\n  random-choice-generator.cpp\\n  random-choice-generator.hpp\\n  random-choice-generator.h\\n)\\n\\nadd_module(\\n  TARGET random-choice-generator-cpp\\n  SOURCES ${RANDOM_CHOICE_GENERATOR_CPP_SOURCES}\\n  LIBRARY_TYPE STATIC\\n)\\n\n```\n\n----------------------------------------\n\nTITLE: Defining Log Protocol Header Files in CMake\nDESCRIPTION: This snippet uses the CMake `set` command to define the `LOGPROTO_HEADERS` variable. This variable holds a list of header files (.h) located in the 'logproto' subdirectory, associated with the log protocol functionality. The `PARENT_SCOPE` option ensures this variable is available to the parent CMake script that included this file.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/logproto/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(LOGPROTO_HEADERS\n    logproto/logproto-buffered-server.h\n    logproto/logproto-builtins.h\n    logproto/logproto-client.h\n    logproto/logproto-dgram-server.h\n    logproto/logproto-framed-client.h\n    logproto/logproto-framed-server.h\n    logproto/logproto.h\n    logproto/logproto-multiline-server.h\n    logproto/logproto-record-server.h\n    logproto/logproto-server.h\n    logproto/logproto-text-client.h\n    logproto/logproto-text-server.h\n    logproto/logproto-auto-server.h\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Adding a Test Subdirectory in CMake\nDESCRIPTION: This command adds the 'tests' subdirectory to the build. CMake will process the CMakeLists.txt file located within the 'tests' directory. This is typically used to define build targets and tests related to the project's testing infrastructure (e.g., using CTest). The function 'add_test_subdirectory' might be a custom macro or function defined within the syslog-ng build system, potentially wrapping 'add_subdirectory' and 'enable_testing'.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/eventlog/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nadd_test_subdirectory(tests)\n```\n\n----------------------------------------\n\nTITLE: Generating pkg-config File in CMake\nDESCRIPTION: Uses `configure_file` to generate the `syslog-ng.pc` file in the current binary directory from the template `syslog-ng.pc.cmake`. It substitutes the `PKG_CONFIG_*` variables set previously.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/CMakeLists.txt#_snippet_41\n\nLANGUAGE: cmake\nCODE:\n```\nconfigure_file(${CMAKE_CURRENT_SOURCE_DIR}/syslog-ng.pc.cmake ${CMAKE_CURRENT_BINARY_DIR}/syslog-ng.pc)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Finding libbpf Dependency in CMake\nDESCRIPTION: Checks if the `ENABLE_EBPF` CMake option is defined and true (or undefined, implying default true). If the condition holds, it attempts to locate the `libbpf` library and headers using the `find_package` command. This is a prerequisite for building the eBPF module.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/ebpf/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif (NOT DEFINED ENABLE_EBPF OR ENABLE_EBPF)\n  find_package(LIBBPF)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Up Sun Streams Module with CMake - CMake\nDESCRIPTION: This snippet initializes a source file list variable for the afstreams module, checks for the presence of the sys/strlog.h and stropts.h system headers, and conditionally adds the afstreams module to the build if these dependencies are met. It uses CMake-specific macros and conditional logic to ensure platform compatibility. Key variables include AFSTREAMS_SOURCES (source files list), HAVE_STRLOG/HAVE_STROPTS (header availability flags), and ENABLE_SUN_STREAMS (control flag for module inclusion). The output controls which portions of the code base are compiled, depending on system support.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/afstreams/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(AFSTREAMS_SOURCES\n    afstreams.c\n    afstreams.h\n    afstreams-parser.c\n    afstreams-parser.h\n    afstreams-plugin.c\n)\n\ninclude (CheckIncludeFile)\ncheck_include_file(sys/strlog.h HAVE_STRLOG)\ncheck_include_file(stropts.h HAVE_STROPTS)\n\nmodule_switch(ENABLE_SUN_STREAMS \"Enable Sun Streams source\" HAVE_STRLOG HAVE_STROPTS)\nif (ENABLE_SUN_STREAMS)\n  add_module(\n    TARGET afstreams\n    GRAMMAR afstreams-grammar\n    SOURCES ${AFSTREAMS_SOURCES}\n  )\nendif()\n\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting Missing libjvm.so Error in syslog-ng Java Module\nDESCRIPTION: This snippet shows a common error message encountered when the syslog-ng Java module (`mod-java`) cannot load the Java Virtual Machine shared library (`libjvm.so`). This typically occurs because the directory containing `libjvm.so` is not included in the `LD_LIBRARY_PATH` environment variable.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/java/README.md#_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nError opening plugin module; module='mod-java', error='libjvm.so: cannot open shared object file: No such file or directory'\n```\n\n----------------------------------------\n\nTITLE: Linking Example Module Dependencies in CMake\nDESCRIPTION: Links various compiled example module targets (e.g., `msg-generator`, `threaded-random-generator`, `example_destination`) as private dependencies to the main `examples` shared library. It also links the core `syslog-ng` library itself. The `random-choice-generator` module is linked conditionally based on whether C++ support (`ENABLE_CPP`) is enabled in the build.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/examples/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(examples PRIVATE msg-generator)\ntarget_link_libraries(examples PRIVATE threaded-random-generator)\ntarget_link_libraries(examples PRIVATE threaded-diskq-source)\ntarget_link_libraries(examples PRIVATE example_filterx_func)\n\nif(ENABLE_CPP)\n  target_link_libraries(examples PRIVATE random-choice-generator)\nendif()\n\ntarget_link_libraries(examples PRIVATE http-test-slots)\ntarget_link_libraries(examples PRIVATE tls-test-validation)\ntarget_link_libraries(examples PRIVATE example_destination)\n\ntarget_link_libraries(examples PRIVATE syslog-ng)\n```\n\n----------------------------------------\n\nTITLE: Adding csvparser Module with Grammar and Sources - CMake\nDESCRIPTION: Invokes a custom add_module CMake function to build the csvparser target, attaching a specified grammar file and all previously defined source files. This abstracts module creation and includes integration with code generation steps if required by the grammar argument. Prerequisite is the presence of add_module macro/function (presumably defined elsewhere) and the grammar and source file dependencies.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/csvparser/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_module(\n  TARGET csvparser\n  GRAMMAR csvparser-grammar\n  SOURCES ${CSVPARSER_SOURCES}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring gRPC and ProtoBuf Dependencies in CMake (CMake Language)\nDESCRIPTION: This CMake script snippet checks, finds, and configures required dependencies for gRPC and ProtoBuf based on project options (ENABLE_GRPC, ENABLE_CPP), and sets up standard imports for C++17 if dependencies are available. It includes logic for conditional inclusion, custom error messages, workarounds for protobuf library issues with BSD systems, and adds module subdirectories as appropriate. Key parameters are ENABLE_GRPC, ENABLE_CPP, and GRPC_DEPS_FOUND; dependencies include gRPC, Protobuf, and proper C++ toolchain configuration. Inputs are build configuration options, and outputs are a configured CMake build tree; limitations include required minimum versions for libraries and workaround paths for specific upstream bugs.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/grpc/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(GRPC_DEPS_FOUND FALSE)\n\nif (NOT DEFINED ENABLE_GRPC OR ENABLE_GRPC)\n  set(GRPC_DEPS_FOUND TRUE)\n\n  if (NOT ENABLE_CPP)\n    if (ENABLE_GRPC)\n      message(FATAL_ERROR \"C++ support is mandatory when the GRPC modules are enabled.\")\n    endif()\n\n    set(GRPC_DEPS_FOUND FALSE)\n  endif()\n\n  if (GRPC_DEPS_FOUND)\n    find_package(Protobuf 3.6.1 QUIET)\n\n    if (NOT Protobuf_FOUND)\n      if (ENABLE_GRPC)\n        message(FATAL_ERROR \"ProtoBuf libraries not found.\")\n      endif()\n\n      set(GRPC_DEPS_FOUND FALSE)\n    else()\n      message(STATUS \"Found ProtoBuf: ${PROTOBUF_LIBRARIES}\")\n    endif()\n  endif()\n\n  if (GRPC_DEPS_FOUND)\n    find_library(GRPC++_LIBRARIES NAMES grpc++)\n\n    if (NOT GRPC++_LIBRARIES)\n      if (ENABLE_GRPC)\n        message(FATAL_ERROR \"gRPC++ libraries not found.\")\n      endif()\n\n      set(GRPC_DEPS_FOUND FALSE)\n    else()\n      message(STATUS \"Found gRPC++: ${GRPC++_LIBRARIES}\")\n    endif()\n  endif()\n\n  if (GRPC_DEPS_FOUND)\n    # Workaround of https://github.com/protocolbuffers/protobuf/issues/18307\n    # The latest (BSD variants) protobuf builds are forcibly bound to libupd, so\n    # find_package(gRPC...) will fail with\n    #     Targets not yet defined: protobuf::libupb, protobuf::protoc-gen-upb,\n    #     protobuf::protoc-gen-upbdefs, protobuf::protoc-gen-upb_minitable\n    # Try to satisfy it temporally.\n    #\n    find_library (UPB_LIBRARIES NAMES upb)\n    if (UPB_LIBRARIES)\n      add_library(protobuf::libupb STATIC IMPORTED)\n      add_executable(protobuf::protoc-gen-upb IMPORTED)\n      add_executable(protobuf::protoc-gen-upbdefs IMPORTED)\n      add_executable(protobuf::protoc-gen-upb_minitable IMPORTED)\n    endif()\n\n    find_package(gRPC 1.16.1 QUIET)\n\n    if (NOT gRPC_FOUND)\n      if (ENABLE_GRPC)\n        message(FATAL_ERROR \"gRPC libraries not found.\")\n      endif()\n\n      set(GRPC_DEPS_FOUND FALSE)\n    else()\n      message(STATUS \"Found gRPC: ${GRPC_LIBRARIES}\")\n    endif()\n  endif()\nendif()\n\nmodule_switch(ENABLE_GRPC \"Enable GRPC\" GRPC_DEPS_FOUND)\n\nif (ENABLE_GRPC)\n  set (CMAKE_CXX_STANDARD 17 CACHE STRING \"C++ standard\" FORCE)\n  set (CMAKE_CXX_STANDARD_REQUIRED ON CACHE BOOL \"C++ standard is a requirement\" FORCE)\n\n  include(ProtobufGenerateCpp)\n\n  set(MODULE_GRPC_LIBS\n    gRPC::grpc\n    gRPC::grpc++\n    protobuf::libprotobuf)\n\n  add_subdirectory(common)\n  add_subdirectory(protos)\nendif()\n\n# These are intentionally not inside the above if (ENABLE_GRPC) block\n# Let any other possible module_switch-es take effect and is being always visible\n# (all modules are protected via ENABLE_GRPC as well)\nadd_subdirectory(loki)\nadd_subdirectory(otel)\nadd_subdirectory(bigquery)\nadd_subdirectory(pubsub)\nadd_subdirectory(clickhouse)\n\n```\n\n----------------------------------------\n\nTITLE: Defining the ENABLE_EBPF Build Option in CMake\nDESCRIPTION: Uses the custom `module_switch` function (specific to the syslog-ng build system) to define a CMake build option named `ENABLE_EBPF`. The option's description is provided, and its availability in the build configuration is conditional on whether the `libbpf` package was successfully found (`LIBBPF_FOUND` is true).\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/ebpf/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nmodule_switch(ENABLE_EBPF \"Enable ebpf module (requires ebpf toolchain)\" LIBBPF_FOUND)\n```\n\n----------------------------------------\n\nTITLE: Defining `test-mongodb-config` Unit Test with CMake\nDESCRIPTION: This CMake code defines a unit test target named `test-mongodb-config` using the `add_unit_test` function, likely a custom macro within the syslog-ng build system. It specifies that the test requires include files from the directory defined by `${AFMONGODB_INCLUDE_DIR}`, depends on the `afmongodb` target (presumably a library), and is built from the `test-mongodb-config.c` source file. This test aims to verify MongoDB configuration functionalities within syslog-ng.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/afmongodb/tests/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_unit_test(LIBTEST\n  TARGET test-mongodb-config\n  INCLUDES \"${AFMONGODB_INCLUDE_DIR}\"\n  DEPENDS afmongodb\n  SOURCES test-mongodb-config.c\n)\n```\n\n----------------------------------------\n\nTITLE: Adding the Python Module Target using add_module in CMake\nDESCRIPTION: Defines the build target for the Python module named `mod-python` using a custom `add_module` function. It specifies the associated grammar file (`python-grammar`), necessary include directories (`PYTHON_INCLUDE_DIRS`, project source), library dependencies (`PYTHON_LIBRARIES`, `Eventlog_LIBRARIES`, `IVYKIS_LIBRARIES`), and the source files listed in the `PYTHON_SOURCES` variable.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/python/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_module(\n  TARGET mod-python\n  GRAMMAR python-grammar\n  INCLUDES ${PYTHON_INCLUDE_DIRS}\n           ${PROJECT_SOURCE_DIR}\n  DEPENDS ${PYTHON_LIBRARIES}\n          ${Eventlog_LIBRARIES}\n          ${IVYKIS_LIBRARIES}\n  SOURCES ${PYTHON_SOURCES}\n)\n```\n\n----------------------------------------\n\nTITLE: Installing loggen_plugin Library Archive in CMake\nDESCRIPTION: Installs the archive file (e.g., `.a` or `.lib`) generated for the `loggen_plugin` static library target into the directory specified by the `LOGGEN_PLUGIN_INSTALL_DIR` variable.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/tests/loggen/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS loggen_plugin ARCHIVE DESTINATION ${LOGGEN_PLUGIN_INSTALL_DIR})\n```\n\n----------------------------------------\n\nTITLE: Conditionally Enabling and Adding afuser Module - CMake\nDESCRIPTION: This snippet checks whether the afuser module should be enabled using the ENABLE_AFUSER variable. If the module is enabled, it sets the list of relevant source and header files and invokes add_module to register it with specific grammar and source files for building. Requires CMake and a compatible syslog-ng project structure; ENABLE_AFUSER should be set prior to inclusion. Inputs include the ENABLE_AFUSER flag, and outputs are the configuration of target 'afuser' if enabled.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/afuser/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nmodule_switch(ENABLE_AFUSER \\\"Enable afuser module\\\")\\n\\nif (NOT ENABLE_AFUSER)\\n  return()\\nendif()\\n\\nset(AFUSER_SOURCES\\n  \\\"afuser-parser.h\\\"\\n  \\\"afuser.h\\\"\\n\\t\\\"afuser-plugin.c\\\"\\n\\t\\\"afuser.c\\\"\\n  \\\"afuser-parser.c\\\"\\n  )\\n\\nadd_module(\\n  TARGET afuser\\n  GRAMMAR afuser-grammar\\n  SOURCES ${AFUSER_SOURCES}\\n)\\n\n```\n\n----------------------------------------\n\nTITLE: Applying Compiler Warning Flags in CMake\nDESCRIPTION: Applies the compiler warning flags defined in the `IMPORTANT_WARNINGS`, `ACCEPTABLE_WARNINGS`, and potentially populated `EXTRA_WARNINGS` variables to the build using `add_compile_options`.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/CMakeLists.txt#_snippet_30\n\nLANGUAGE: cmake\nCODE:\n```\nadd_compile_options (${IMPORTANT_WARNINGS} ${ACCEPTABLE_WARNINGS} ${EXTRA_WARNINGS})\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for loggen_helper Library in CMake\nDESCRIPTION: Specifies the public include directories required by the `loggen_helper` library target. This includes core syslog-ng include directories, the current source directory, and the main project library directory, making headers available to targets linking against `loggen_helper`.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/tests/loggen/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(loggen_helper PUBLIC\n  ${CORE_INCLUDE_DIRS}\n  ${CMAKE_CURRENT_SOURCE_DIR}\n  ${PROJECT_SOURCE_DIR}/lib\n  )\n```\n\n----------------------------------------\n\nTITLE: Creating the loggen_helper Static Library Target in CMake\nDESCRIPTION: Defines a static library target named `loggen_helper` using the source files listed in the `LOGGEN_HELPER_SOURCE` variable.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/tests/loggen/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(loggen_helper STATIC ${LOGGEN_HELPER_SOURCE})\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for the 'afsocket' Module in CMake\nDESCRIPTION: This CMake code defines the variable `AFSOCKET_SOURCES` which contains a list of all C source (`.c`) and header (`.h`) files, along with a grammar file (`.y`), that constitute the `afsocket` module. This variable is later used to specify the source files when building the module target.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/afsocket/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(AFSOCKET_SOURCES\n    afsocket.c\n    afsocket.h\n    afsocket-source.c\n    afsocket-source.h\n    afsocket-dest.c\n    afsocket-dest.h\n    afsocket-signals.h\n    socket-options.c\n    socket-options.h\n    transport-mapper.c\n    transport-mapper.h\n    afinet.c\n    afinet.h\n    afinet-source.c\n    afinet-source.h\n    afinet-dest-failover.c\n    afinet-dest-failover.h\n    afinet-dest.c\n    afinet-dest.h\n    socket-options-inet.c\n    socket-options-inet.h\n    transport-mapper-inet.c\n    transport-mapper-inet.h\n    afunix-source.c\n    afunix-source.h\n    afunix-dest.c\n    afunix-dest.h\n    transport-mapper-unix.c\n    transport-mapper-unix.h\n    socket-options-unix.c\n    socket-options-unix.h\n    transport-unix-socket.c\n    transport-unix-socket.h\n    compat-unix-creds.c\n    compat-unix-creds.h\n    afsocket-grammar.y\n    afsocket-parser.c\n    afsocket-parser.h\n    afsocket-plugin.c\n    systemd-syslog-source.h\n    systemd-syslog-source.c\n    afsocket-systemd-override.h\n)\n```\n\n----------------------------------------\n\nTITLE: Installing loggen_helper Library Archive in CMake\nDESCRIPTION: Installs the archive file (e.g., `.a` or `.lib`) generated for the `loggen_helper` static library target. The destination directory is specified by the `LOGGEN_PLUGIN_INSTALL_DIR` variable.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/tests/loggen/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS loggen_helper ARCHIVE DESTINATION ${LOGGEN_PLUGIN_INSTALL_DIR})\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for 'secret-storage' in CMake\nDESCRIPTION: Specifies private include directories for the `secret-storage` target. It adds the project's main `lib` directory, noting this is a workaround and ideally 'compat' should be a separate static library. This ensures the compiler can find necessary headers during compilation.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/secret-storage/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(secret-storage\n  PRIVATE\n    # workaround, \"compat\" should be a separate static library\n    ${PROJECT_SOURCE_DIR}/lib\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Compile Definitions for loggen Executable in CMake\nDESCRIPTION: Adds a public compile definition to the `loggen` target. It defines the preprocessor macro `SYSLOG_NG_PATH_LOGGENPLUGINDIR` with the value of the `LOGGEN_PLUGIN_INSTALL_DIR` CMake variable, allowing the executable to know where its plugins are installed at compile time.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/tests/loggen/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_compile_definitions(loggen PUBLIC\n  SYSLOG_NG_PATH_LOGGENPLUGINDIR=\"${LOGGEN_PLUGIN_INSTALL_DIR}\"\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building syslog-ng-binary - CMake\nDESCRIPTION: This CMake script sets up source files for the syslog-ng binary, creates an executable, sets output properties, links with the syslog-ng library, and defines installation parameters. It depends on CMake being installed and a proper project structure with main.c and the syslog-ng library available; it assumes that the required build directories and targets are present. Key parameters include the use of main.c as the entry point and specifying ${CMAKE_CURRENT_BINARY_DIR}/lib/ as the library directory, and the binary is installed to the sbin directory.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/syslog-ng/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(syslog_ng_bin_sources\n    main.c)\n\nadd_executable(syslog-ng-bin ${syslog_ng_bin_sources})\nSET_TARGET_PROPERTIES(syslog-ng-bin PROPERTIES OUTPUT_NAME syslog-ng)\n\nlink_directories(${CMAKE_CURRENT_BINARY_DIR}/lib/)\ntarget_link_libraries(syslog-ng-bin syslog-ng)\n\ninstall(TARGETS syslog-ng-bin RUNTIME DESTINATION sbin)\n```\n\n----------------------------------------\n\nTITLE: Formatting Commit Messages for syslog-ng in Markdown\nDESCRIPTION: This snippet demonstrates the required commit message format for syslog-ng, which is validated by the CI. The format includes a module prefix, a short description, an optional long description (which may utilize markdown formatting), and a signed-off-by line. Formatting consistency is necessary for commit acceptance, and the author should include either their personal or GitHub-generated email address depending on privacy preferences. Inputs are freeform commit details, outputs are properly formatted commit messages as expected by the project’s CI system.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nThe commit messages be formatted according to this:\n\nmodule: short description\n\nLong description, that may be\nformatted in markdown.\n\nSigned-off-by: your name <youremail@address.com>\n```\n\n----------------------------------------\n\nTITLE: Installing Built Java Module JARs in CMake\nDESCRIPTION: Configures the installation of Java modules built by Gradle. It installs the contents of the `${CMAKE_CURRENT_BINARY_DIR}/built-jars/` directory (where Gradle's `copyJars` task places the output) into the `lib/syslog-ng/java-modules` subdirectory relative to the CMake installation prefix (`CMAKE_INSTALL_PREFIX`).\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/java-modules/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/built-jars/ DESTINATION lib/syslog-ng/java-modules)\n```\n\n----------------------------------------\n\nTITLE: Generating Grammar Source and Setting Build Properties - CMake\nDESCRIPTION: Generates and integrates parser sources from a Bison grammar for the 'threaded-diskq-source', using helper macros/functions such as 'generate_y_from_ym' and 'bison_target'. These commands output the proper .c and .h files in the build directory and adjust compile flags as necessary for the generated C source. This ensures up-to-date grammar parsing and correct compilation settings during the build process.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/examples/sources/threaded-diskq-source/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ngenerate_y_from_ym(modules/examples/sources/threaded-diskq-source/threaded-diskq-source-grammar)\nbison_target(MsgGeneratorGrammar\n    ${CMAKE_CURRENT_BINARY_DIR}/threaded-diskq-source-grammar.y\n    ${CMAKE_CURRENT_BINARY_DIR}/threaded-diskq-source-grammar.c\n    COMPILE_FLAGS ${BISON_FLAGS})\nset_source_files_properties(\n    ${CMAKE_CURRENT_BINARY_DIR}/threaded-diskq-source-grammar.c\n    PROPERTIES\n    COMPILE_FLAGS ${BISON_BUILT_SOURCE_CFLAGS}\n)\n```\n\n----------------------------------------\n\nTITLE: Defining CMake Option for Native Bindings\nDESCRIPTION: This snippet defines a CMake option named `ENABLE_NATIVE`. This option allows users to enable or disable the build process for native bindings (intended for Rust, C++) during the CMake configuration phase. The option defaults to OFF unless explicitly enabled.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/native/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nmodule_switch(ENABLE_NATIVE \"Enable to build native bindings (for Rust, C++)\")\n```\n\n----------------------------------------\n\nTITLE: Adding Unit Tests for Statistics using CMake `add_unit_test` Macro\nDESCRIPTION: This CMake code utilizes the `add_unit_test` macro, likely defined elsewhere in the build system, to declare several unit tests for syslog-ng's statistics components. Most tests specify `CRITERION` as the testing framework. One test, `test_stats_prometheus`, additionally includes `LIBTEST`, suggesting it might have specific library dependencies or use a combination of frameworks. The `TARGET` parameter specifies the name of the test executable or target to be built and run.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/stats/tests/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_unit_test(CRITERION TARGET test_stats_cluster)\nadd_unit_test(CRITERION TARGET test_stats_query)\nadd_unit_test(CRITERION TARGET test_dynamic_ctr_reg)\nadd_unit_test(CRITERION TARGET test_external_ctr_reg)\nadd_unit_test(CRITERION TARGET test_alias_ctr_reg)\nadd_unit_test(LIBTEST CRITERION TARGET test_stats_prometheus)\nadd_unit_test(CRITERION TARGET test_stats_cluster_key_builder)\n```\n\n----------------------------------------\n\nTITLE: Installing Development Headers in CMake\nDESCRIPTION: Installs the header files listed in the `INTERFACE_HEADERS` variable into the `include/syslog-ng` directory relative to the installation prefix. This makes the headers available for developers building against the installed `loggen` libraries.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/tests/loggen/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES ${INTERFACE_HEADERS} DESTINATION include/syslog-ng)\n```\n\n----------------------------------------\n\nTITLE: Setting Ack Tracker Headers and Sources in CMake - CMake\nDESCRIPTION: Defines two CMake variables, ACK_TRACKER_HEADERS and ACK_TRACKER_SOURCES, containing relevant header and source files for the Ack Tracker subsystem. Uses the PARENT_SCOPE attribute to propagate these variables to the parent CMake context. This enables modular organization of build components for the ack-tracker functionality and is essential for projects structured with submodules or components. Requires CMake as a build system, and includes all key header and source files that need to be compiled or included during the build process.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/ack-tracker/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(ACK_TRACKER_HEADERS\n    ack-tracker/ack_tracker.h\n    ack-tracker/ack_tracker_factory.h\n    ack-tracker/ack_tracker_types.h\n    ack-tracker/batched_ack_tracker.h\n    ack-tracker/bookmark.h\n    ack-tracker/consecutive_ack_record_container.h\n    ack-tracker/consecutive_ack_tracker.h\n    ack-tracker/instant_ack_tracker.h\n    PARENT_SCOPE)\n\n  set(ACK_TRACKER_SOURCES\n    ack-tracker/ack_tracker_factory.c\n    ack-tracker/batched_ack_tracker.c\n    ack-tracker/batched_ack_tracker_factory.c\n    ack-tracker/instant_ack_tracker.c\n    ack-tracker/instant_ack_tracker_bookmarkless.c\n    ack-tracker/consecutive_ack_tracker.c\n    ack-tracker/consecutive_ack_tracker_factory.c\n    ack-tracker/consecutive_ack_record_container_static.c\n    ack-tracker/consecutive_ack_record_container_dynamic.c\n    ack-tracker/instant_ack_tracker_factory.c\n    ack-tracker/instant_ack_tracker_bookmarkless_factory.c\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Defining HTTP Module Source Files in CMake\nDESCRIPTION: This snippet defines a CMake variable `HTTP_DESTINATION_SOURCES` containing a list of all C (.c) and header (.h) files that constitute the source code for the syslog-ng HTTP destination module.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/http/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(HTTP_DESTINATION_SOURCES\n    http.h\n    http.c\n    http-worker.h\n    http-worker.c\n    http-loadbalancer.h\n    http-loadbalancer.c\n    http-curl-header-list.h\n    http-curl-header-list.c\n    http-parser.c\n    http-parser.h\n    http-plugin.c\n    response-handler.h\n    response-handler.c\n    http-signals.h\n    autodetect-ca-location.h\n    autodetect-ca-location.c\n    compression.h\n    compression.c\n)\n```\n\n----------------------------------------\n\nTITLE: Exiting eBPF Configuration if Disabled in CMake\nDESCRIPTION: Checks the value of the `ENABLE_EBPF` variable. If it evaluates to false (meaning the eBPF module is disabled either by the user or because dependencies were not met), the `return()` command is executed, causing CMake to stop processing the remainder of the current file.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/ebpf/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif (NOT ENABLE_EBPF)\n  return()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Test Subdirectory in CMake\nDESCRIPTION: This snippet calls add_test_subdirectory with 'tests' as the argument, instructing CMake to include the tests subdirectory as part of the test build process. This enables testing by integrating any CMake-defined tests within the specified directory. Prerequisites include the presence of a 'tests' subdirectory with its own CMakeLists.txt, and CMake as the build system.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/scanner/list-scanner/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_test_subdirectory(tests)\n```\n\n----------------------------------------\n\nTITLE: Installing loggen Executable in CMake\nDESCRIPTION: Installs the `loggen` executable target to the `bin` directory relative to the installation prefix. The `RUNTIME` keyword specifies that this is a runtime artifact.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/tests/loggen/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS loggen RUNTIME DESTINATION bin)\n```\n\n----------------------------------------\n\nTITLE: Defining Timestamp Source Files in CMake\nDESCRIPTION: Sets a CMake variable named 'TIMESTAMP_SOURCES' to a list of C source (.c) and header (.h) files. These files implement timestamp parsing, timezone handling (fixing, setting, guessing), and date formatting functionalities for the syslog-ng project. This variable groups related source files for easier management.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/timestamp/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(TIMESTAMP_SOURCES\n    timestamp-plugin.c\n    timestamp-parser.c\n    timestamp-parser.h\n    date-parser.c\n    date-parser.h\n    rewrite-fix-timezone.c\n    rewrite-fix-timezone.h\n    rewrite-set-timezone.c\n    rewrite-set-timezone.h\n    rewrite-guess-timezone.c\n    rewrite-guess-timezone.h\n    tf-format-date.c\n    tf-format-date.h\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Target Properties for Loggen SSL Plugin (CMake)\nDESCRIPTION: This command sets properties for the `loggen_ssl_plugin` target. It assigns the project's version (`SYSLOG_NG_VERSION`) to both the `VERSION` and `SOVERSION` properties, which are important for library versioning.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/tests/loggen/ssl_plugin/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset_target_properties(loggen_ssl_plugin\n    PROPERTIES VERSION ${SYSLOG_NG_VERSION}\n    SOVERSION ${SYSLOG_NG_VERSION})\n```\n\n----------------------------------------\n\nTITLE: Adding Module Subdirectories in CMake Build Configuration - CMake\nDESCRIPTION: This snippet uses the CMake add_subdirectory command to include multiple project and module directories within the syslog-ng build process. Each add_subdirectory statement instructs CMake to descend into the specified directory and process its own CMakeLists.txt, ensuring that all relevant modules or subsystems (such as afamqp, affile, kafka, python, etc.) are built. There are no specific external dependencies besides a working CMake environment and the module directories being present. The input is a set of predefined directory paths; no outputs are produced directly, but downstream build targets are configured as a result. The modular approach requires each directory to be properly structured for CMake.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(add-contextual-data)\nadd_subdirectory(afamqp)\nadd_subdirectory(affile)\nadd_subdirectory(afmongodb)\nadd_subdirectory(afprog)\nadd_subdirectory(afsmtp)\nadd_subdirectory(afsocket)\nadd_subdirectory(afsql)\nadd_subdirectory(afstomp)\nadd_subdirectory(afstreams)\nadd_subdirectory(afuser)\nadd_subdirectory(appmodel)\nadd_subdirectory(azure-auth-header)\nadd_subdirectory(basicfuncs)\nadd_subdirectory(cef)\nadd_subdirectory(confgen)\nadd_subdirectory(cryptofuncs)\nadd_subdirectory(csvparser)\nadd_subdirectory(correlation)\nadd_subdirectory(darwinosl)\nadd_subdirectory(diskq)\nadd_subdirectory(examples)\nadd_subdirectory(ebpf)\nadd_subdirectory(geoip2)\nadd_subdirectory(getent)\nadd_subdirectory(graphite)\nadd_subdirectory(hook-commands)\nadd_subdirectory(http)\nadd_subdirectory(java)\nadd_subdirectory(java-modules)\nadd_subdirectory(json)\nadd_subdirectory(kafka)\nadd_subdirectory(kvformat)\nadd_subdirectory(linux-kmsg-format)\nadd_subdirectory(map-value-pairs)\nadd_subdirectory(mqtt)\nadd_subdirectory(native)\nadd_subdirectory(openbsd)\nadd_subdirectory(pacctformat)\nadd_subdirectory(pseudofile)\nadd_subdirectory(python)\nadd_subdirectory(python-modules)\nadd_subdirectory(redis)\nadd_subdirectory(riemann)\nadd_subdirectory(afsnmp)\nadd_subdirectory(secure-logging)\nadd_subdirectory(stardate)\nadd_subdirectory(syslogformat)\nadd_subdirectory(systemd-journal)\nadd_subdirectory(system-source)\nadd_subdirectory(tagsparser)\nadd_subdirectory(timestamp)\nadd_subdirectory(xml)\nadd_subdirectory(regexp-parser)\nadd_subdirectory(rate-limit-filter)\nadd_subdirectory(metrics-probe)\nadd_subdirectory(grpc)\nadd_subdirectory(cloud-auth)\n\n```\n\n----------------------------------------\n\nTITLE: Defining HTTP Module Development Headers in CMake\nDESCRIPTION: This snippet defines a CMake variable `HTTP_MODULE_DEV_HEADERS` listing header files (`http-signals.h`) associated with the HTTP module that are intended for development use or installation.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/http/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(HTTP_MODULE_DEV_HEADERS\n  http-signals.h\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Riemann Module in CMake\nDESCRIPTION: This CMake code defines a variable named `RIEMANN_SOURCES` which lists all the C source (.c) and header (.h) files, along with a grammar file (.y), required to build the Riemann destination module for syslog-ng.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/riemann/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset (RIEMANN_SOURCES\n    riemann-grammar.y\n    riemann.c\n    riemann.h\n    riemann-worker.c\n    riemann-worker.h\n    riemann-parser.c\n    riemann-parser.h\n    riemann-plugin.c\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Nightly syslog-ng APT Repository - Shell\nDESCRIPTION: Demonstrates how to add the nightly build repository for syslog-ng using echo and sudo. The 'nightly' channel provides daily builds from the develop branch. Requires sudo privilege. Input: none; Output: new repository entry for nightly builds.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/README.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\necho \"deb https://ose-repo.syslog-ng.com/apt/ nightly ubuntu-noble\" | sudo tee -a /etc/apt/sources.list.d/syslog-ng-ose.list\n```\n\n----------------------------------------\n\nTITLE: Generating Parser with Bison in CMake\nDESCRIPTION: Uses the 'bison_target' CMake function (presumably defined elsewhere, often via FindBison) to generate C source and header files ('threaded-random-generator-grammar.c' and implicitly a header) from the Yacc grammar file ('threaded-random-generator-grammar.y') located in the build directory. It passes specific Bison compilation flags stored in the 'BISON_FLAGS' variable.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/examples/sources/threaded-random-generator/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nbison_target(MsgGeneratorGrammar\n    ${CMAKE_CURRENT_BINARY_DIR}/threaded-random-generator-grammar.y\n    ${CMAKE_CURRENT_BINARY_DIR}/threaded-random-generator-grammar.c\n    COMPILE_FLAGS ${BISON_FLAGS})\n```\n\n----------------------------------------\n\nTITLE: Including Standard and Custom CMake Modules\nDESCRIPTION: Includes several standard CMake modules (`CheckIncludeFiles`, `CheckFunctionExists`, `ExternalProject`) and custom modules (`external_or_find_package`, `add_module`, `module_switch`, `FindGperf`) to provide additional functionality for checking system features, managing external dependencies, and defining project-specific build logic.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(CheckIncludeFiles)\ninclude(CheckFunctionExists)\ninclude(ExternalProject)\ninclude(external_or_find_package)\ninclude(add_module)\ninclude(module_switch)\ninclude(FindGperf)\n```\n\n----------------------------------------\n\nTITLE: Creating the PatternDB Library Target in CMake\nDESCRIPTION: Creates a library target named `patterndb` using the source files listed in the `PATTERNDB_SOURCES` variable.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/correlation/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(patterndb ${PATTERNDB_SOURCES})\n```\n\n----------------------------------------\n\nTITLE: Adding Unit Test for AFSNMP Destination - CMake\nDESCRIPTION: Declares a Criterion-based unit test named test_afsnmp_dest with a dependency on the afsnmp module. This ensures the relevant SNMP destination component is built before running the test. Requires CMake and the Criterion unit testing framework; afsnmp must be available in the build tree. Input is the test definition, and the output is the registration of the test in the CMake test suite.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/afsnmp/tests/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_unit_test(CRITERION TARGET test_afsnmp_dest DEPENDS afsnmp)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for 'afprog' Module in CMake\nDESCRIPTION: This CMake code defines a variable named `AFPROG_SOURCES` which holds a list of source and header files (`afprog.h`, `afprog-parser.h`, `afprog.c`, `afprog-parser.c`, `afprog-plugin.c`). This variable is typically used later in the build process to specify the files needed to compile the 'afprog' module.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/afprog/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(AFPROG_SOURCES\n    \"afprog.h\"\n    \"afprog-parser.h\"\n    \"afprog.c\"\n    \"afprog-parser.c\"\n    \"afprog-plugin.c\"\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Unit Tests using add_unit_test in CMake\nDESCRIPTION: This CMake code defines multiple unit tests for the syslog-ng project using a custom `add_unit_test` function. It specifies the Criterion testing framework (`CRITERION`) and the test target name (e.g., `test_wildcard_source`, `test_directory_monitor`). Some tests are marked as `LIBTEST`. All defined tests depend on the `affile` target, indicating a dependency on a library or module related to file operations. These tests cover functionalities like wildcard file sources, directory monitoring, collection comparison, file writing/opening, wildcard file reading, and file lists.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/affile/tests/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_unit_test(CRITERION LIBTEST TARGET test_wildcard_source DEPENDS affile)\nadd_unit_test(CRITERION TARGET test_directory_monitor DEPENDS affile)\nadd_unit_test(CRITERION TARGET test_collection_comparator DEPENDS affile)\nadd_unit_test(CRITERION LIBTEST TARGET test_file_writer DEPENDS affile)\nadd_unit_test(CRITERION TARGET test_file_opener DEPENDS affile)\nadd_unit_test(CRITERION TARGET test_wildcard_file_reader DEPENDS affile)\nadd_unit_test(CRITERION TARGET test_file_list DEPENDS affile)\n```\n\n----------------------------------------\n\nTITLE: Defining Time Utility Source Files in CMake\nDESCRIPTION: This CMake code snippet utilizes the `set` command to define a variable named `TIMEUTILS_SOURCES`. This variable contains a list of source (.c) files for the 'timeutils' component. Similar to the headers definition, the `PARENT_SCOPE` argument ensures the variable is available in the parent CMake scope.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/timeutils/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(TIMEUTILS_SOURCES\n    timeutils/cache.c\n    timeutils/conv.c\n    timeutils/scan-timestamp.c\n    timeutils/format.c\n    timeutils/misc.c\n    timeutils/names.c\n    timeutils/timeutils.c\n    timeutils/unixtime.c\n    timeutils/zonecache.c\n    timeutils/zonedb.c\n    timeutils/zoneinfo.c\n    timeutils/wallclocktime.c\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Adding functional Subdirectory with CMake - CMake - Plain Text\nDESCRIPTION: Includes the 'functional' subdirectory into the current CMake project using add_subdirectory, ensuring its source and configuration are incorporated into the build. Depends on CMake and expects a valid 'functional' directory. No parameters are used; as a result, all targets and code within 'functional' are added to the build.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/tests/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(functional)\n```\n\n----------------------------------------\n\nTITLE: Adding Test Subdirectory in CMake Build - CMake\nDESCRIPTION: Adds the 'tests' subdirectory to the current CMake project, enabling separate test build configuration and integration. This allows the test targets to be included in the overall build. The target subdirectory 'tests' should contain its own CMakeLists.txt for this to function without errors.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/signal-slot-connector/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_test_subdirectory(tests)\n```\n\n----------------------------------------\n\nTITLE: Setting Header File Variables with CMake - CMake\nDESCRIPTION: Defines a CMake variable to group all header files related to value-pairs for scoped build inclusion. Files listed are used in compilation and IDE generation. PARENT_SCOPE ensures the variable is available outside this file, supporting modular CMake file structure.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/value-pairs/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(VALUE_PAIRS_HEADERS\n    value-pairs/value-pairs.h\n    value-pairs/transforms.h\n    value-pairs/cmdline.h\n    value-pairs/internals.h\n    value-pairs/evttag.h\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Adding Unit Tests for OTEL Protobuf Parser Using CMake - CMake Language\nDESCRIPTION: This snippet defines a CRITERION-based unit test named test_otel_protobuf_parser. It specifies the test's source file, include directory for OTEL_PROTO_BUILDDIR, and the otel-cpp dependency. Inputs include CMake variables for includes and dependencies; output is the corresponding unit test target. The snippet works only when not building for Apple or FreeBSD systems.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/grpc/otel/tests/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_unit_test (\n  CRITERION\n  TARGET test_otel_protobuf_parser\n  SOURCES test-otel-protobuf-parser.cpp\n  INCLUDES ${OTEL_PROTO_BUILDDIR}\n  DEPENDS otel-cpp)\n\n```\n\n----------------------------------------\n\nTITLE: Preparing a release version using dbld/rules prepare-release - Bash\nDESCRIPTION: This snippet illustrates how to bump syslog-ng version numbers and prepare release metadata using the prepare-release target in dbld/rules. It takes a VERSION argument, adjusts all version files, and leaves changes uncommitted for review. Prerequisites include a clean working git state, dbld, Docker, and intended release number as input. The output is a set of updated files for later manual commit.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/dbld/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ ./dbld/rules prepare-release VERSION=3.28.1\n```\n\n----------------------------------------\n\nTITLE: Adding Unit Test with add_unit_test Macro in CMake (CMake)\nDESCRIPTION: This snippet uses the add_unit_test macro in CMake to register a unit test (test_smart_multi_line) with the LIBTEST framework, specifying CRITERION as the test driver. This allows CMake to recognize and execute the test as part of the project's automation. Dependencies include CMake, the Criterion test framework, and the test_smart_multi_line target; the input is the name of the test target and framework. The output is a configured test within the CMake build system. This approach is limited to projects using CMake and compatible test frameworks.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/multi-line/tests/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_unit_test(LIBTEST CRITERION TARGET test_smart_multi_line)\n```\n\n----------------------------------------\n\nTITLE: Installing Helper Script with install in CMake Language\nDESCRIPTION: Specifies installation rules for deploying the 'system-expand.sh' script to the 'share/syslog-ng/tools/' directory within the installation prefix. Uses the install(FILES ...) command for resource deployment in the final software package. This step is dependent on CMake and ensures auxiliary tools are available post-installation.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/system-source/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(FILES system-expand.sh DESTINATION share/syslog-ng/tools/)\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Flags and Build Tool Options in CMake\nDESCRIPTION: Enables Position Independent Code (PIC) for shared libraries or position-independent executables. Sets specific flags for the Bison parser generator, suppressing certain warnings while treating specific conflicts as errors, and adding flags for the C code generated by Bison.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_POSITION_INDEPENDENT_CODE 1)\nset(BISON_FLAGS \"-Wno-other -Werror=conflicts-sr -Werror=conflicts-rr -Wcounterexamples\")\nset(BISON_BUILT_SOURCE_CFLAGS \"-Wno-unused-but-set-variable\")\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for eventlog Target in CMake\nDESCRIPTION: This CMake command specifies the include directories for the 'eventlog' target. It adds the 'src' directory within the current source directory (${CMAKE_CURRENT_SOURCE_DIR}) as an INTERFACE include directory. This means that targets linking against 'eventlog' will automatically have this directory added to their include paths. The SYSTEM keyword suggests treating headers from this directory as system headers, potentially suppressing compiler warnings.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/eventlog/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(eventlog\n  SYSTEM\n  INTERFACE\n    ${CMAKE_CURRENT_SOURCE_DIR}/src\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Unit Tests with Criterion in CMake\nDESCRIPTION: These CMake commands register two unit test targets, 'test_secret_storage' and 'test_nondumpable_allocator', and declare that both have a dependency on the 'secret-storage' component. The 'CRITERION' keyword specifies the use of the Criterion testing framework, which must be integrated with the project. This approach ensures that the tests are only executed once the required dependencies are built, supporting modular and maintainable test setups.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/secret-storage/tests/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_unit_test(CRITERION TARGET test_secret_storage DEPENDS secret-storage)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nadd_unit_test(CRITERION TARGET test_nondumpable_allocator DEPENDS secret-storage)\n```\n\n----------------------------------------\n\nTITLE: Defining Time Utility Header Files in CMake\nDESCRIPTION: This CMake code snippet uses the `set` command to define a variable named `TIMEUTILS_HEADERS`. This variable holds a list of header (.h) files belonging to the 'timeutils' component. The `PARENT_SCOPE` argument makes this variable accessible in the CMake scope of the parent directory.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/timeutils/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(TIMEUTILS_HEADERS\n    timeutils/cache.h\n    timeutils/conv.h\n    timeutils/scan-timestamp.h\n    timeutils/format.h\n    timeutils/misc.h\n    timeutils/names.h\n    timeutils/timeutils.h\n    timeutils/unixtime.h\n    timeutils/zonecache.h\n    timeutils/zonedb.h\n    timeutils/zoneinfo.h\n    timeutils/wallclocktime.h\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Adding Unit Tests for OTEL FilterX Logic Using CMake - CMake Language\nDESCRIPTION: This snippet defines a Criterion-based test target, test_otel_filterx, for testing OTEL FilterX logic. It lists test-otel-filterx.cpp as the source, includes the OTEL_PROTO_BUILDDIR directory, and depends on both otel-cpp and otel_filterx_logrecord_cpp libraries. The platform check ensures this is excluded on Apple and FreeBSD.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/grpc/otel/tests/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_unit_test (\n  CRITERION\n  TARGET test_otel_filterx\n  SOURCES test-otel-filterx.cpp\n  INCLUDES ${OTEL_PROTO_BUILDDIR}\n  DEPENDS otel-cpp otel_filterx_logrecord_cpp)\n\n```\n\n----------------------------------------\n\nTITLE: Debian Packaging: Defining Install Patterns for syslog-ng Python Modules - syslog-ng Config\nDESCRIPTION: This snippet shows how to specify installed file patterns for packaging a custom Python syslog-ng module within a Debian package. The pattern ensures that after installation, all files under the module's directory are included, suitable for the .install file under packaging/debian/. This is essential for correct integration of Python modules into the package build system.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/python-modules/README.md#_snippet_18\n\nLANGUAGE: syslog-ng-config\nCODE:\n```\nusr/lib/syslog-ng/python/syslogng/modules/<yourmodule>/*\n\n```\n\n----------------------------------------\n\nTITLE: Defining a Criterion Unit Test for syslogformat in CMake\nDESCRIPTION: This CMake command defines a unit test target named `test_syslog_format`. It uses the Criterion testing framework (`CRITERION`) and specifies that this test depends on the `syslogformat` library (`DEPENDS syslogformat`). The `LIBTEST` argument likely indicates the type or source location for this test, managed by a custom CMake function `add_unit_test`.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/syslogformat/tests/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_unit_test(LIBTEST CRITERION TARGET test_syslog_format DEPENDS syslogformat)\n```\n\n----------------------------------------\n\nTITLE: Defining Kafka Module Switch Option in CMake\nDESCRIPTION: This command utilizes a custom `module_switch` macro (presumably defined elsewhere in the syslog-ng build system) to create a CMake option named `ENABLE_KAFKA`. The option allows users to explicitly enable or disable the Kafka module during configuration. Its default state depends on whether `librdkafka` was successfully found (`RDKAFKA_FOUND` variable).\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/kafka/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nmodule_switch (ENABLE_KAFKA \"Enable kafka module\" RDKAFKA_FOUND)\n```\n\n----------------------------------------\n\nTITLE: Including Tests Subdirectory Build in CMake\nDESCRIPTION: Instructs CMake to process the `CMakeLists.txt` file located in the `tests` subdirectory. This typically adds test targets using CTest or a similar framework.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/correlation/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_test_subdirectory(tests)\n```\n\n----------------------------------------\n\nTITLE: Configuring Module Build with Conditional gRPC and Source Definitions - CMake\nDESCRIPTION: This CMake snippet checks if gRPC is enabled and returns early if it is not. It then declares variables for C++ and C source files of the ClickHouse modules, including headers and additional dependencies. The script uses add_module to define both C++ and C ClickHouse modules with their required target dependencies, inclusion directories, and grammar files. It finally sets the RPATH for the install target. It requires CMake (likely version 3.x or greater), and dependencies referenced by variables such as MODULE_GRPC_LIBS must be resolved in the wider project configuration. Input variables such as GRPC_METRICS_SOURCES and PROJECT_SOURCE_DIR must be defined elsewhere. The output is the configuration of static library targets which will be included in the syslog-ng build process.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/grpc/clickhouse/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT ENABLE_GRPC)\n  return()\nendif()\n\nset(CLICKHOUSE_CPP_SOURCES\n  ${GRPC_METRICS_SOURCES}\n  clickhouse-dest.hpp\n  clickhouse-dest.cpp\n  clickhouse-dest.h\n  clickhouse-dest-worker.hpp\n  clickhouse-dest-worker.cpp\n)\n\nset(CLICKHOUSE_SOURCES\n  clickhouse-plugin.c\n  clickhouse-parser.c\n  clickhouse-parser.h\n)\n\nadd_module(\n  TARGET clickhouse-cpp\n  SOURCES ${CLICKHOUSE_CPP_SOURCES}\n  DEPENDS ${MODULE_GRPC_LIBS} grpc-protos grpc-common-cpp\n  INCLUDES ${CLICKHOUSE_PROTO_BUILDDIR} ${PROJECT_SOURCE_DIR}/modules/grpc\n  LIBRARY_TYPE STATIC\n)\n\nadd_module(\n  TARGET clickhouse\n  GRAMMAR clickhouse-grammar\n  GRAMMAR_DEPENDS ${GRPC_COMMON_GRAMMAR}\n  DEPENDS clickhouse-cpp grpc-common-cpp\n  INCLUDES ${PROJECT_SOURCE_DIR}/modules/grpc\n  SOURCES ${CLICKHOUSE_SOURCES}\n)\n\nset_target_properties(clickhouse PROPERTIES INSTALL_RPATH \"${CMAKE_INSTALL_PREFIX}/lib;${CMAKE_INSTALL_PREFIX}/lib/syslog-ng\")\n```\n\n----------------------------------------\n\nTITLE: Defining Criterion Unit Tests using add_unit_test in CMake\nDESCRIPTION: These CMake commands define individual unit tests for different syslog-ng components using the custom 'add_unit_test' function. The 'CRITERION' argument specifies the use of the Criterion testing framework. The 'TARGET' argument defines the name of the test executable (e.g., 'test_logmsg_serialize', 'test_tags'). The optional 'LIBTEST' flag likely signifies a test related to a specific library component. The 'DEPENDS' argument lists any libraries the test target depends on, such as 'syslogformat' for the 'test_logmsg_serialize' test.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/logmsg/tests/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_unit_test(CRITERION LIBTEST TARGET test_logmsg_serialize DEPENDS syslogformat)\n```\n\nLANGUAGE: cmake\nCODE:\n```\nadd_unit_test(CRITERION LIBTEST TARGET test_timestamp_serialize)\n```\n\nLANGUAGE: cmake\nCODE:\n```\nadd_unit_test(CRITERION TARGET test_tags)\n```\n\nLANGUAGE: cmake\nCODE:\n```\nadd_unit_test(CRITERION TARGET test_nvtable)\n```\n\nLANGUAGE: cmake\nCODE:\n```\nadd_unit_test(CRITERION TARGET test_gsockaddr_serialize)\n```\n\nLANGUAGE: cmake\nCODE:\n```\nadd_unit_test(CRITERION LIBTEST TARGET test_log_message)\n```\n\nLANGUAGE: cmake\nCODE:\n```\nadd_unit_test(CRITERION TARGET test_logmsg_ack)\n```\n\nLANGUAGE: cmake\nCODE:\n```\nadd_unit_test(CRITERION TARGET test_nvhandle_desc_array)\n```\n\nLANGUAGE: cmake\nCODE:\n```\nadd_unit_test(CRITERION TARGET test_type_hints)\n```\n\n----------------------------------------\n\nTITLE: Defining test_python_tf Unit Test in CMake\nDESCRIPTION: This CMake snippet defines a unit test named `test_python_tf` (likely related to template functions) using the `add_unit_test` command with the `CRITERION` framework. It specifies Python include directories (`${PYTHON_INCLUDE_DIR}`, `${PYTHON_INCLUDE_DIRS}`) and depends on `mod-python`, `${PYTHON_LIBRARIES}`, and `syslogformat`. The `PYTHONMALLOC` environment variable is set to `malloc_debug` for this test.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/python/tests/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_unit_test(LIBTEST CRITERION\n  TARGET test_python_tf\n  INCLUDES \"${PYTHON_INCLUDE_DIR}\" \"${PYTHON_INCLUDE_DIRS}\"\n  DEPENDS mod-python \"${PYTHON_LIBRARIES}\" syslogformat)\n\nset_property(TEST test_python_tf APPEND PROPERTY ENVIRONMENT \"PYTHONMALLOC=malloc_debug\")\n```\n\n----------------------------------------\n\nTITLE: Defining test_python_persist_name Unit Test in CMake\nDESCRIPTION: This CMake snippet defines a unit test named `test_python_persist_name` using the `add_unit_test` command with the `CRITERION` framework. It configures Python include paths (`${PYTHON_INCLUDE_DIR}`, `${PYTHON_INCLUDE_DIRS}`) and specifies dependencies on `syslogformat`, `mod-python`, and `${PYTHON_LIBRARIES}`. The test environment is configured with `PYTHONMALLOC=malloc_debug`.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/python/tests/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nadd_unit_test(LIBTEST CRITERION\n  TARGET test_python_persist_name\n  INCLUDES \"${PYTHON_INCLUDE_DIR}\" \"${PYTHON_INCLUDE_DIRS}\"\n  DEPENDS syslogformat mod-python \"${PYTHON_LIBRARIES}\")\n\nset_property(TEST test_python_persist_name APPEND PROPERTY ENVIRONMENT \"PYTHONMALLOC=malloc_debug\")\n```\n\n----------------------------------------\n\nTITLE: Defining test_python_reloc Unit Test in CMake\nDESCRIPTION: This CMake snippet defines a unit test named `test_python_reloc` using the `add_unit_test` command with the `CRITERION` framework. It sets up Python include paths (`${PYTHON_INCLUDE_DIR}`, `${PYTHON_INCLUDE_DIRS}`) and depends on `mod-python` and `${PYTHON_LIBRARIES}`. The environment variable `PYTHONMALLOC` is set to `malloc_debug` to enable Python's memory allocation debugging during the test.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/python/tests/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_unit_test(LIBTEST CRITERION\n  TARGET test_python_reloc\n  INCLUDES \"${PYTHON_INCLUDE_DIR}\" \"${PYTHON_INCLUDE_DIRS}\"\n  DEPENDS mod-python \"${PYTHON_LIBRARIES}\")\n\nset_property(TEST test_python_reloc APPEND PROPERTY ENVIRONMENT \"PYTHONMALLOC=malloc_debug\")\n```\n\n----------------------------------------\n\nTITLE: Defining test_python_ack_tracker Unit Test in CMake\nDESCRIPTION: This CMake snippet defines a unit test named `test_python_ack_tracker` using the `add_unit_test` command with the `CRITERION` framework. It includes necessary Python headers (`${PYTHON_INCLUDE_DIR}`, `${PYTHON_INCLUDE_DIRS}`) and depends on `syslogformat`, `mod-python`, and `${PYTHON_LIBRARIES}`. The test environment variable `PYTHONMALLOC` is set to `malloc_debug`.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/python/tests/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_unit_test(LIBTEST CRITERION\n  TARGET test_python_ack_tracker\n  INCLUDES \"${PYTHON_INCLUDE_DIR}\" \"${PYTHON_INCLUDE_DIRS}\"\n  DEPENDS syslogformat mod-python \"${PYTHON_LIBRARIES}\")\n\nset_property(TEST test_python_ack_tracker APPEND PROPERTY ENVIRONMENT \"PYTHONMALLOC=malloc_debug\")\n```\n\n----------------------------------------\n\nTITLE: Formatting News Files for syslog-ng in Markdown\nDESCRIPTION: This snippet provides the template for writing news entries required for each significant pull request or change merged into syslog-ng. The file name should conform to 'news/type-PR_ID.md' (e.g., news/bugfix-1234.md). The template includes a short description prefixed by the affected module and a longer description, both in markdown. This ensures standardized, concise, and informative news logs for project releases. Inputs are change details per pull request, outputs are news markdown files compatible with the project’s news generation system.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n`module`: short description\n\nlong description\n```\n\n----------------------------------------\n\nTITLE: Finding MongoDB and BSON Dependencies with CMake - CMake\nDESCRIPTION: This snippet searches for libmongoc and libbson development libraries using CMake's find_package command. It is essential as a prerequisite for building any MongoDB-related driver functionality. There are no explicit input parameters, but proper installation of the respective libraries is a requirement. If the packages are found, CMake sets up necessary variables for later use; if not, subsequent configuration steps may be skipped or fail.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/afmongodb/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(libmongoc-1.0)\nfind_package(libbson-1.0)\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for Test Targets in syslog-ng (CMake)\nDESCRIPTION: This CMake snippet configures include directories for the 'test_loggen_filereader' target, making project-wide headers available during compilation. It uses the target_include_directories command to set include paths as PUBLIC, ensuring that any projects linking against this target will also inherit the directories. The main parameter is the include path, which in this case is the variable 'PROJECT_SOURCE_DIR'.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/tests/loggen/tests/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(test_loggen_filereader PUBLIC\n  ${PROJECT_SOURCE_DIR}\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining 'test_format_date' Unit Test with Criterion in CMake\nDESCRIPTION: This CMake command defines a unit test named `test_format_date`. It belongs to the `LIBTEST` group, uses the Criterion testing framework (`CRITERION`), is identified by the `TARGET` named `test_format_date`, and depends on the `timestamp` target for building (`DEPENDS timestamp`).\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/timestamp/tests/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_unit_test(LIBTEST CRITERION TARGET test_format_date DEPENDS timestamp)\n```\n\n----------------------------------------\n\nTITLE: Building the 'afprog' Module with Custom 'add_module' Function in CMake\nDESCRIPTION: This CMake command utilizes a custom `add_module` function or macro (specific to the syslog-ng project) to define the build rules for a target named `afprog`. It specifies a grammar file `afprog-grammar` for potential processing and uses the previously defined `AFPROG_SOURCES` variable to include the necessary source files for compilation and linking. The exact behavior depends on the implementation of the `add_module` macro/function.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/afprog/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_module(\n  TARGET afprog\n  GRAMMAR afprog-grammar\n  SOURCES ${AFPROG_SOURCES}\n)\n```\n\n----------------------------------------\n\nTITLE: Defining the msg-generator Static Library in CMake\nDESCRIPTION: This snippet defines a static library target named 'msg-generator'. It lists the C source and header files, including generated files from Bison (msg-generator-grammar.c/h), that comprise the library.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/examples/sources/msg-generator/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(msg-generator STATIC\n  msg-generator-parser.c\n  msg-generator-parser.h\n  msg-generator.c\n  msg-generator.h\n  msg-generator-source.c\n  msg-generator-source.h\n  msg-generator-source-options.h\n  ${CMAKE_CURRENT_BINARY_DIR}/msg-generator-grammar.c\n  ${CMAKE_CURRENT_BINARY_DIR}/msg-generator-grammar.h\n)\n```\n\n----------------------------------------\n\nTITLE: Defining a Criterion Unit Test in CMake\nDESCRIPTION: This CMake command defines a unit test named `test_secure_logging` for the `LIBTEST` target, utilizing the Criterion testing framework. The `DEPENDS` keyword specifies that the `secure-logging` and `syslogformat` targets must be built before this test can be compiled or run.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/secure-logging/tests/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_unit_test(LIBTEST CRITERION TARGET test_secure_logging DEPENDS secure-logging syslogformat)\n```\n\n----------------------------------------\n\nTITLE: Adding Unit Test to CMake with Criterion in CMake\nDESCRIPTION: This statement adds 'test_batched_ack_tracker' as a unit test build target via the Criterion framework in CMake. It assumes that the target test source is available and compatible with the test infrastructure. This setup promotes systematic test registration and execution for the acknowledgment tracker components.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/ack-tracker/tests/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_unit_test(CRITERION TARGET test_batched_ack_tracker)\n```\n\n----------------------------------------\n\nTITLE: Finding Criterion Testing Framework in CMake\nDESCRIPTION: If the `BUILD_TESTING` option is enabled, this snippet attempts to find the `criterion` testing framework package.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/CMakeLists.txt#_snippet_25\n\nLANGUAGE: cmake\nCODE:\n```\nif (BUILD_TESTING)\n  find_package (criterion)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Test Subdirectory for Test Builds - CMake\nDESCRIPTION: Appends the 'tests' subdirectory to the build, ensuring that any CMakeLists.txt in 'tests' is executed as part of the build. Requires test definitions within the 'tests' directory. Enhances test discovery and organization by making test scripts part of the default build sequence. Expected input is the path to a directory containing CMake-based test definitions; output is the integration of those tests into the build.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/confgen/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_test_subdirectory(tests)\n\n```\n\n----------------------------------------\n\nTITLE: Conditionally Enabling Pub/Sub Module Build in CMake\nDESCRIPTION: This CMake snippet checks if the `ENABLE_GRPC` variable is false. If it is, the script returns immediately, skipping the build configuration for the Pub/Sub module. This ensures the module is only built if gRPC support is explicitly enabled.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/grpc/pubsub/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT ENABLE_GRPC)\n  return()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Memory Checking with Valgrind in CMake\nDESCRIPTION: Sets CMake variables for memory checking, likely used with CTest and Valgrind. It specifies the path to a Valgrind suppressions file (`unit-test-leak.supp`) and defines detailed command-line options for Valgrind execution, focusing on leak checking and suppression generation.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset(MEMORYCHECK_SUPPRESSIONS_FILE \"${PROJECT_SOURCE_DIR}/tests/valgrind/unit-test-leak.supp\")\nset(MEMORYCHECK_COMMAND_OPTIONS \"--num-callers=30 --sim-hints=no-nptl-pthread-stackcache --gen-suppressions=all --leak-check=full --trace-children=yes --freelist-vol=200000000 --freelist-big-blocks=10000000 --malloc-fill=55 --free-fill=AA\")\n```\n\n----------------------------------------\n\nTITLE: Adding Unit Test Targets with Custom Macro in CMake - CMake\nDESCRIPTION: Defines test targets using the add_unit_test macro in a CMake-based build system. Each invocation registers a test with the build system, associating it with the LIBTEST component and the Criterion testing framework. For some tests, dependencies such as syslogformat and basicfuncs are specified to ensure proper linking and execution order. Inputs include the target test name and optional dependencies; output is the registered test available for running with CTest or similar. Requires CMake, the Criterion framework, and declared dependencies to be available in the build environment.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/template/tests/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_unit_test(LIBTEST CRITERION TARGET test_template_compile)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nadd_unit_test(LIBTEST CRITERION TARGET test_template_on_error)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nadd_unit_test(LIBTEST CRITERION TARGET test_template DEPENDS syslogformat basicfuncs)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nadd_unit_test(LIBTEST CRITERION TARGET test_template_speed DEPENDS syslogformat basicfuncs)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nadd_unit_test(LIBTEST CRITERION TARGET test_macro)\n```\n\n----------------------------------------\n\nTITLE: Adding Parser Generator Unit Test with add_unit_test - CMake\nDESCRIPTION: Sets up a unit test target named test_app_parser_generator using the Criterion test framework. The test includes application model headers specified by APPMODEL_INCLUDE_DIR and depends on the appmodel component, ensuring proper linkage and build order. Used to validate the application parser generator functionality in isolation.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/appmodel/tests/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_unit_test(LIBTEST CRITERION TARGET test_app_parser_generator INCLUDES \"${APPMODEL_INCLUDE_DIR}\" DEPENDS appmodel)\n```\n\n----------------------------------------\n\nTITLE: Configuring Clean Targets for Java Build Artifacts in CMake\nDESCRIPTION: Specifies additional files and directories to be removed when the `make clean` or equivalent command is executed. It adds the Gradle working directory (`.gradle`) and the directory containing the JARs copied by Gradle (`built-jars`) within the build directory to the `ADDITIONAL_MAKE_CLEAN_FILES` property, ensuring a cleaner build environment.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/java-modules/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nset_directory_properties(PROPERTIES ADDITIONAL_MAKE_CLEAN_FILES \".gradle\")\nset_directory_properties(PROPERTIES ADDITIONAL_MAKE_CLEAN_FILES \"built-jars\")\n```\n\n----------------------------------------\n\nTITLE: Running syslog-ng and Mounting Apache Logs from Another Container - Bash\nDESCRIPTION: This command starts syslog-ng in a container, mounting Apache logs from another running container and overriding the syslog-ng configuration with a host file. The '--volumes-from' option grants access to the apache2 container's log directory, and the custom configuration is supplied by a bind mount. Replace [containerID for apache2] with the actual Apache container's ID.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/docker/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo docker run -it --volumes-from [containerID for apache2] -v \"$PWD/syslog-ng.conf\":/etc/syslog-ng/syslog-ng.conf balabit/syslog-ng:latest\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Output for syslog-ng in Docker - Bash\nDESCRIPTION: This command starts the syslog-ng container with additional '-edv' flags, enabling extended debug and verbose logging to the console for troubleshooting. Usage is identical to running with the default configuration, and ports are mapped as before. Use when debug information is required; otherwise, default containers hide debug messages.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/docker/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo docker run -it -p 514:514/udp -p 601:601 --name syslog-ng balabit/syslog-ng:latest -edv\n```\n\n----------------------------------------\n\nTITLE: Installing syslog-ng Library Target in CMake\nDESCRIPTION: Installs the compiled 'syslog-ng' library target (likely a shared or static library) into the 'lib' directory relative to the installation prefix.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS syslog-ng LIBRARY DESTINATION lib)\n```\n\n----------------------------------------\n\nTITLE: Adding HTTP Module Target in CMake\nDESCRIPTION: This snippet uses a custom CMake function `add_module` (presumably defined elsewhere in the build system) to define the build target for the HTTP module. It specifies the target name (`http`), associated grammar file (`http-grammar`), required include directories (for Curl and ZLIB), library dependencies (Curl and ZLIB), and the source files defined previously.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/http/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nadd_module(\n  TARGET http\n  GRAMMAR http-grammar\n  INCLUDES ${Curl_INCLUDE_DIR}\n           ${ZLIB_INCLUDE_DIRS}\n  DEPENDS ${Curl_LIBRARIES}\n          ${ZLIB_LIBRARIES}\n  SOURCES ${HTTP_DESTINATION_SOURCES}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Target Properties for syslog-ng in CMake\nDESCRIPTION: Sets the VERSION and SOVERSION properties for the CMake target named 'syslog-ng'. The values are taken from the CMake variable SYSLOG_NG_VERSION.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset_target_properties(syslog-ng\n    PROPERTIES VERSION ${SYSLOG_NG_VERSION}\n    SOVERSION ${SYSLOG_NG_VERSION})\n```\n\n----------------------------------------\n\nTITLE: Adding tests Subdirectory to Build in CMake\nDESCRIPTION: Includes the `tests` subdirectory in the CMake build process using a potentially custom `add_test_subdirectory` command or macro. CMake will process the `CMakeLists.txt` (or equivalent logic defined by the macro) within that subdirectory, presumably to configure and build tests for the `loggen` utility and its components.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/tests/loggen/CMakeLists.txt#_snippet_20\n\nLANGUAGE: cmake\nCODE:\n```\nadd_test_subdirectory(tests)\n```\n\n----------------------------------------\n\nTITLE: Checking Net-SNMP Dependency for afsnmp Module in CMake\nDESCRIPTION: This CMake snippet conditionally finds the NETSNMP package. It checks if the `ENABLE_AFSNMP` variable is defined and true (or if it's undefined, defaulting to true). If the condition is met, it attempts to find the NETSNMP package using `find_package`. It then defines a module switch using a custom `module_switch` function, likely controlling the build based on the `ENABLE_AFSNMP` flag and whether `NETSNMP_FOUND` is true.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/afsnmp/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif (NOT DEFINED ENABLE_AFSNMP OR ENABLE_AFSNMP)\n  find_package(NETSNMP)\nendif()\n\nmodule_switch(ENABLE_AFSNMP \"Enable afsnmp module\" NETSNMP_FOUND)\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files for csvparser Module - CMake\nDESCRIPTION: Defines a CMake variable CSVPARSER_SOURCES as a list containing all source and header files needed for compiling the csvparser module. This enables easier reuse and structured inclusion of multiple related files in later build commands. There are no external dependencies required beyond a working CMake setup and access to the specified files; the list may be referenced by other CMake commands for build automation.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/csvparser/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(CSVPARSER_SOURCES\n    csvparser.c\n    csvparser.h\n    csvparser-parser.c\n    csvparser-parser.h\n    csvparser-plugin.c\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Criterion Unit Test 'test_unixtime' in CMake\nDESCRIPTION: Adds the 'test_unixtime' unit test for the 'LIBTEST' library using the Criterion framework via this CMake command. This integrates the specified test into the project's build and test process.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/timeutils/tests/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_unit_test(LIBTEST CRITERION TARGET test_unixtime)\n```\n\n----------------------------------------\n\nTITLE: Adding Unit Test for INET Transport Mapper (CMake)\nDESCRIPTION: This CMake snippet defines a unit test named 'test-transport-mapper-inet', specifying its dependency on 'afsocket' and its source files as 'test-transport-mapper-inet.c' and 'transport-mapper-lib.c'. Requires Criterion and the afsocket component. This test is designed for INET-specific transport mapper functionality, and is integrated into the overall test suite initiated by CMake.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/afsocket/tests/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_unit_test(CRITERION\n  TARGET test-transport-mapper-inet\n  DEPENDS afsocket\n  SOURCES test-transport-mapper-inet.c transport-mapper-lib.c)\n```\n\n----------------------------------------\n\nTITLE: Setting Preprocessor Definitions for Test Targets - CMake\nDESCRIPTION: Applies the EVENTLOG_SYSLOG_MACROS preprocessor definition to the test_evtsyslog_macros target using CMake's target_compile_definitions command. Ensures that when building the test_evtsyslog_macros test, the EVENTLOG_SYSLOG_MACROS macro is defined with value 1, which may alter code behavior for testing purposes. Use within a CMake file after the corresponding target has been created.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/eventlog/tests/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(test_evtsyslog_macros PRIVATE EVENTLOG_SYSLOG_MACROS=1)\n```\n\n----------------------------------------\n\nTITLE: Adding LIBTEST/Criterion Unit Test for test_transport_haproxy in CMake\nDESCRIPTION: This command employs the `add_unit_test` CMake function/macro to set up a unit test target named `test_transport_haproxy`. It indicates that this test potentially uses a combination of a custom testing library or setup (LIBTEST) along with the Criterion framework. Dependencies include LIBTEST, Criterion, and the `add_unit_test` definition.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/transport/tests/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_unit_test(LIBTEST CRITERION TARGET test_transport_haproxy)\n```\n\n----------------------------------------\n\nTITLE: Setting gRPC Grammar File Path in CMake\nDESCRIPTION: Defines the CMake variable `GRPC_COMMON_GRAMMAR` with the path to the `grpc-grammar.ym` file located within the `modules/grpc/common` directory. The `PARENT_SCOPE` argument makes this variable available in the parent `CMakeLists.txt` file that included this one.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/grpc/common/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(GRPC_COMMON_GRAMMAR ${PROJECT_SOURCE_DIR}/modules/grpc/common/grpc-grammar.ym PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Building and Installing gRPC Protobuf Shared Library - CMake\nDESCRIPTION: The code defines the 'grpc-protos' shared library target, aggregating all generated proto and gRPC sources (standard and Google APIs) along with additional application code. It specifies necessary link-time dependencies, include directories (for both source and build trees), compile options, and finally provides an installation rule. Dependencies include CMake, syslog-ng, grpc, and all generated code artifacts. Output is a shared library suitable for use with syslog-ng's modular architecture.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/grpc/protos/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(grpc-protos SHARED\n  ${OTEL_PROTO_GENERATED_SOURCES}\n  ${OTEL_PROTO_GENERATED_GRPC_SOURCES}\n  ${LOKI_PROTO_GENERATED_GRPC_SOURCES}\n  ${GOOGLEAPIS_PROTO_GENERATED_SOURCES}\n  ${GOOGLEAPIS_PROTO_GENERATED_GRPC_SOURCES}\n  ${CLICKHOUSE_PROTO_GENERATED_SOURCES}\n  ${CLICKHOUSE_PROTO_GENERATED_GRPC_SOURCES}\n  apphook.cpp\n)\n\ntarget_link_libraries(grpc-protos PRIVATE ${MODULE_GRPC_LIBS} syslog-ng)\ntarget_include_directories(grpc-protos\n  PUBLIC ${OTEL_PROTO_BUILDDIR} ${LOKI_PROTO_BUILDDIR} ${GOOGLEAPIS_PROTO_BUILDDIR} ${CLICKHOUSE_PROTO_BUILDDIR}\n  PUBLIC ${CMAKE_CURRENT_SOURCE_DIR} ${PROJECT_SOURCE_DIR}/modules/grpc\n  PRIVATE ${CMAKE_CURRENT_BINARY_DIR} ${PROJECT_SOURCE_DIR}\n)\n\ntarget_compile_options(grpc-protos PRIVATE -Wno-switch-default -Wno-double-promotion -Wno-deprecated -DPROTOBUF_ENABLE_DEBUG_LOGGING_MAY_LEAK_PII=0)\ninstall(TARGETS grpc-protos LIBRARY DESTINATION lib/syslog-ng COMPONENT grpc-protos)\n```\n\n----------------------------------------\n\nTITLE: Defining Static Library in CMake\nDESCRIPTION: Defines 'threaded-random-generator' as a STATIC library using the specified source (.c, .h) and generated grammar files (.c, .h from Bison). This block is executed only if the condition in the preceding 'if' statement (NOT SYSLOG_NG_HAVE_GETRANDOM) is false.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/examples/sources/threaded-random-generator/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(threaded-random-generator STATIC\n  threaded-random-generator-parser.c\n  threaded-random-generator-parser.h\n  threaded-random-generator.c\n  threaded-random-generator.h\n  ${CMAKE_CURRENT_BINARY_DIR}/threaded-random-generator-grammar.c\n  ${CMAKE_CURRENT_BINARY_DIR}/threaded-random-generator-grammar.h\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Pub/Sub C++ Static Library Module in CMake\nDESCRIPTION: This CMake `add_module` command defines a static library target named `pubsub-cpp`. It compiles the sources listed in `PUBSUB_CPP_SOURCES`, links against necessary gRPC libraries (`MODULE_GRPC_LIBS`, `grpc-protos`, `grpc-common-cpp`), and includes directories required for protobuf generated files and common gRPC headers. This library likely encapsulates the core gRPC communication logic.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/grpc/pubsub/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_module(\n  TARGET pubsub-cpp\n  SOURCES ${PUBSUB_CPP_SOURCES}\n  DEPENDS ${MODULE_GRPC_LIBS} grpc-protos grpc-common-cpp\n  INCLUDES ${PUBSUB_PROTO_BUILDDIR} ${PROJECT_SOURCE_DIR}/modules/grpc\n  LIBRARY_TYPE STATIC\n)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Enabling the map-value-pairs Module in CMake\nDESCRIPTION: This snippet defines a CMake option `ENABLE_MAP_VALUE_PAIRS` using the `module_switch` macro, allowing users to enable or disable the 'map-value-pairs' module during configuration. It then checks if this option is disabled (evaluates to false). If it is disabled, the `return()` command halts further processing within this specific CMake file, preventing the module from being configured or built.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/map-value-pairs/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nmodule_switch(ENABLE_MAP_VALUE_PAIRS \"Enable map-value-pairs\")\n\nif (NOT ENABLE_MAP_VALUE_PAIRS)\n  return()\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Loki GRPC Modules - CMake\nDESCRIPTION: This snippet sets CMake variables (LOKI_CPP_SOURCES and LOKI_SOURCES) to list all relevant source files for the Loki GRPC C++ and C modules, respectively. It aggregates sources from other variables and directly specifies header and implementation files for explicit module configuration. This must precede any build or module instructions relying on these variables.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/grpc/loki/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(LOKI_CPP_SOURCES\n  ${GRPC_CREDENTIALS_SOURCES}\n  ${GRPC_METRICS_SOURCES}\n  loki-dest.hpp\n  loki-dest.cpp\n  loki-dest.h\n  loki-worker.hpp\n  loki-worker.cpp\n)\n\nset(LOKI_SOURCES\n  loki-parser.h\n  loki-plugin.c\n  loki-parser.c\n)\n```\n\n----------------------------------------\n\nTITLE: Executing Gradle Task for Log4j Installation in CMake\nDESCRIPTION: Adds a custom installation step executed via CMake's `install(CODE ...)` mechanism. This step runs the Gradle wrapper during the installation phase to execute the `copyLog4j` task. This task is responsible for copying necessary Log4j logging framework JARs to the final Java module destination directory (`${JAVA_MOD_DST_DIR}`).\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/java-modules/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(CODE \"execute_process(COMMAND ${GRADLE_EXECUTABLE} --project-cache-dir ${GRADLE_WORKDIR} -g ${GRADLE_WORKDIR} -p ${CMAKE_CURRENT_SOURCE_DIR} -PsyslogBuildDir=${CMAKE_CURRENT_BINARY_DIR} -PsyslogDepsDir=${SYSLOG_DEPS_DIR} -PjarDestDir=${JAVA_MOD_DST_DIR} copyLog4j)\")\n```\n\n----------------------------------------\n\nTITLE: Adding Criterion Unit Test Target in CMake\nDESCRIPTION: This CMake command utilizes a custom function or macro `add_unit_test` to define a unit test target named `test_signal_slots`. It explicitly specifies `CRITERION` as the testing framework. This command integrates the specified test into the CMake build system, enabling it to be compiled and executed through standard testing procedures like `ctest`. Requires the prior definition of the `add_unit_test` function/macro and proper integration of the Criterion framework within the CMake environment.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/signal-slot-connector/tests/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_unit_test(CRITERION TARGET test_signal_slots)\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Install RPATH for Loki Module - CMake\nDESCRIPTION: This snippet customizes the runtime path (RPATH) for the loki module, specifying where the linker should look for shared libraries upon execution. It ensures that the installed Loki and syslog-ng libraries are discoverable at runtime, using CMake variables for flexibility. This must be used after the loki target is defined.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/grpc/loki/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset_target_properties(loki PROPERTIES INSTALL_RPATH \"${CMAKE_INSTALL_PREFIX}/lib;${CMAKE_INSTALL_PREFIX}/lib/syslog-ng\")\n```\n\n----------------------------------------\n\nTITLE: Defining test_python_options Unit Test in CMake\nDESCRIPTION: This CMake snippet defines a unit test named `test_python_options` using the `add_unit_test` command with the `CRITERION` framework. It specifies Python include directories (`${PYTHON_INCLUDE_DIR}`, `${PYTHON_INCLUDE_DIRS}`) and has dependencies on `mod-python` and `${PYTHON_LIBRARIES}`. The `PYTHONMALLOC` environment variable is configured to `malloc_debug` for the test execution.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/python/tests/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_unit_test(LIBTEST CRITERION\n  TARGET test_python_options\n  INCLUDES \"${PYTHON_INCLUDE_DIR}\" \"${PYTHON_INCLUDE_DIRS}\"\n  DEPENDS mod-python \"${PYTHON_LIBRARIES}\")\n\nset_property(TEST test_python_options APPEND PROPERTY ENVIRONMENT \"PYTHONMALLOC=malloc_debug\")\n```\n\n----------------------------------------\n\nTITLE: Generating C++ and gRPC Sources from Proto Files - CMake\nDESCRIPTION: This segment invokes custom CMake functions to generate C++ and gRPC source/header files from specified proto files for each integration. 'protobuf_generate_cpp' and 'protobuf_generate_cpp_grpc' macros are used for standard proto and gRPC service file generation respectively. Output directories, proto paths, and lists of files to generate are specified for precise control of code generation. Dependencies include the protobuf and gRPC CMake integration modules.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/grpc/protos/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nprotobuf_generate_cpp(\n  PROTO_PATH ${OTEL_PROTO_SRCDIR}\n  CPP_OUT ${OTEL_PROTO_BUILDDIR}\n  OUT_SRCS OTEL_PROTO_GENERATED_SOURCES\n  PROTOS ${OTEL_PROTO_SOURCES})\n\nprotobuf_generate_cpp_grpc(\n  PROTO_PATH ${OTEL_PROTO_SRCDIR}\n  CPP_OUT ${OTEL_PROTO_BUILDDIR}\n  OUT_SRCS OTEL_PROTO_GENERATED_GRPC_SOURCES\n  PROTOS ${OTEL_PROTO_GRPC_SOURCES})\n\nprotobuf_generate_cpp_grpc(\n  PROTO_PATH ${LOKI_PROTO_SRCDIR}\n  CPP_OUT ${LOKI_PROTO_BUILDDIR}\n  OUT_SRCS LOKI_PROTO_GENERATED_GRPC_SOURCES\n  PROTOS ${LOKI_PROTO_GRPC_SOURCES})\n\nprotobuf_generate_cpp(\n  PROTO_PATH ${GOOGLEAPIS_PROTO_SRCDIR}\n  CPP_OUT ${GOOGLEAPIS_PROTO_BUILDDIR}\n  OUT_SRCS GOOGLEAPIS_PROTO_GENERATED_SOURCES\n  PROTOS ${GOOGLEAPIS_PROTO_SOURCES})\n\nprotobuf_generate_cpp_grpc(\n  PROTO_PATH ${GOOGLEAPIS_PROTO_SRCDIR}\n  CPP_OUT ${GOOGLEAPIS_PROTO_BUILDDIR}\n  OUT_SRCS GOOGLEAPIS_PROTO_GENERATED_GRPC_SOURCES\n  PROTOS ${GOOGLEAPIS_PROTO_GRPC_SOURCES})\n\nprotobuf_generate_cpp(\n  PROTO_PATH ${CLICKHOUSE_PROTO_SRCDIR}\n  CPP_OUT ${CLICKHOUSE_PROTO_BUILDDIR}\n  OUT_SRCS CLICKHOUSE_PROTO_GENERATED_SOURCES\n  PROTOS ${CLICKHOUSE_PROTO_SOURCES})\n\nprotobuf_generate_cpp_grpc(\n  PROTO_PATH ${CLICKHOUSE_PROTO_SRCDIR}\n  CPP_OUT ${CLICKHOUSE_PROTO_BUILDDIR}\n  OUT_SRCS CLICKHOUSE_PROTO_GENERATED_GRPC_SOURCES\n  PROTOS ${CLICKHOUSE_PROTO_GRPC_SOURCES})\n```\n\n----------------------------------------\n\nTITLE: Conditionally Defining Interface Library in CMake\nDESCRIPTION: Checks if the 'SYSLOG_NG_HAVE_GETRANDOM' CMake variable is false. If it is, it defines 'threaded-random-generator' as an INTERFACE library, meaning it doesn't compile sources itself but provides usage requirements to consumers. This is likely a fallback or stub when the primary implementation dependency (getrandom) is missing.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/examples/sources/threaded-random-generator/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif (NOT SYSLOG_NG_HAVE_GETRANDOM)\n  add_library(threaded-random-generator INTERFACE)\n  return()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Loki GRPC C++ and C Modules with Dependencies - CMake\nDESCRIPTION: This snippet defines two modules using add_module for syslog-ng: a GRPC-focused static C++ module (loki-cpp) and a traditional Loki module (loki) with parser and grammar support. It specifies source lists, dependencies on other modules and libraries, include paths for headers and generated files, linking modes, and grammars. To function, add_module() must be available (as a custom macro or from a syslog-ng CMake include), and related dependency variables must be correctly set.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/grpc/loki/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_module(\n  TARGET loki-cpp\n  SOURCES ${LOKI_CPP_SOURCES}\n  DEPENDS ${MODULE_GRPC_LIBS} grpc-protos grpc-common-cpp\n  INCLUDES ${LOKI_PROTO_BUILDDIR} ${PROJECT_SOURCE_DIR}/modules/grpc\n  LIBRARY_TYPE STATIC\n)\n\nadd_module(\n  TARGET loki\n  GRAMMAR loki-grammar\n  GRAMMAR_DEPENDS ${GRPC_COMMON_GRAMMAR}\n  DEPENDS loki-cpp grpc-common-cpp\n  INCLUDES ${PROJECT_SOURCE_DIR}/modules/grpc\n  SOURCES ${LOKI_SOURCES}\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Source and Header Files for 'secret-storage' in CMake\nDESCRIPTION: Sets CMake variables `SECRET_STORAGE_SOURCES` and `SECRET_STORAGE_HEADERS` to list the C source files and header files respectively, which constitute the `secret-storage` library.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/secret-storage/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SECRET_STORAGE_SOURCES\n  secret-storage.c\n  nondumpable-allocator.c)\nset(SECRET_STORAGE_HEADERS\n  secret-storage.h\n  nondumpable-allocator.h)\n```\n\n----------------------------------------\n\nTITLE: Adding Unit Test to CMake with Criterion in CMake\nDESCRIPTION: Integrates the 'test_ack_tracker_factory' unit test as a CMake target employing the Criterion testing framework. The test should be pre-defined elsewhere, and the use of this command simplifies managing and executing tests consistently. Key dependencies are CMake and an installed Criterion library.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/ack-tracker/tests/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_unit_test(CRITERION TARGET test_ack_tracker_factory)\n```\n\n----------------------------------------\n\nTITLE: Adding Unit Test Target Using Criterion with CMake (CMake)\nDESCRIPTION: This snippet adds a Criterion-based unit test target named 'test_strtok_r' to the current CMake project. It assumes that Criterion is available as a testing framework dependency. The macro 'add_unit_test' is used, where 'CRITERION' indicates the test driver and 'TARGET' specifies the name of the new test. No explicit parameters or sources are shown, so configuration details would be inherited or specified elsewhere. The output is an executable test registered with the build system. It will only function if Criterion is installed and properly configured.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/compat/tests/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_unit_test(CRITERION TARGET test_strtok_r)\n```\n\n----------------------------------------\n\nTITLE: Creating the loggen_plugin Static Library Target in CMake\nDESCRIPTION: Defines a static library target named `loggen_plugin` using its corresponding C source and header files. This library likely provides common functionality for loggen plugins.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/tests/loggen/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(loggen_plugin STATIC\n  loggen_plugin.c\n  loggen_plugin.h\n)\n```\n\n----------------------------------------\n\nTITLE: Adding the CEF Module Target in CMake\nDESCRIPTION: This snippet utilizes a presumably custom CMake function `add_module` specific to the syslog-ng build system. It defines a build target named `cef` and specifies that it should be built using the source files listed in the previously defined `CEF_SOURCES` variable. This command configures the build system to compile these sources into the module.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/cef/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_module(\n  TARGET cef\n  SOURCES ${CEF_SOURCES}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Logthrdest Source and Header Variables with Scope - CMake\nDESCRIPTION: This snippet demonstrates the use of the CMake set() command to assign lists of header and source files (logthrdest/logthrdestdrv.h and logthrdest/logthrdestdrv.c) to the variables LOGTHRDEST_HEADERS and LOGTHRDEST_SOURCES, respectively. The PARENT_SCOPE argument makes these variables accessible to parent scopes, which is necessary for modular CMake setups. No external dependencies are required beyond standard CMake. This is typically used for modularizing build definitions in larger CMake-based projects.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/logthrdest/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(LOGTHRDEST_HEADERS\n    logthrdest/logthrdestdrv.h\n    PARENT_SCOPE)\n\nset(LOGTHRDEST_SOURCES\n    logthrdest/logthrdestdrv.c\n    PARENT_SCOPE)\n\n```\n\n----------------------------------------\n\nTITLE: Registering Criterion Unit Test Target with Sources - CMake\nDESCRIPTION: This snippet registers a Criterion-based unit test target named test_logproto using the CMake macro add_unit_test. It references the previously defined TEST_LOGPROTO_SOURCES for its input C source files, establishing a relationship between grouped sources and the resulting test binary. This requires both the Criterion test framework and the specified source files to function correctly, ensuring that all relevant tests are included in the build process.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/logproto/tests/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_unit_test(LIBTEST CRITERION\n  TARGET test_logproto\n  SOURCES \"${TEST_LOGPROTO_SOURCES}\")\n```\n\n----------------------------------------\n\nTITLE: Adding Criterion Unit Test 'test_scan-timestamp' in CMake\nDESCRIPTION: This CMake command adds a unit test named 'test_scan-timestamp' to the build system. It targets the 'LIBTEST' library and specifies the use of the Criterion testing framework.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/timeutils/tests/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_unit_test(LIBTEST CRITERION TARGET test_scan-timestamp)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for systemd-journal Module in CMake\nDESCRIPTION: This snippet defines a CMake variable `JOURNALD_SOURCES` that lists all the source (.c), header (.h), and grammar (.y) files required to build the systemd-journal module. It also includes generated grammar files located in the CMake binary directory.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/systemd-journal/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset (JOURNALD_SOURCES\n    systemd-journal.c\n    systemd-journal.h\n    systemd-journal-grammar.y\n    systemd-journal-parser.c\n    systemd-journal-parser.h\n    systemd-journal-plugin.c\n    journal-reader.c\n    journal-reader.h\n    journald-subsystem.c\n    journald-subsystem.h\n    journald-helper.c\n    journald-helper.h\n    ${CMAKE_CURRENT_BINARY_DIR}/systemd-journal-grammar.c\n    ${CMAKE_CURRENT_BINARY_DIR}/systemd-journal-grammar.h\n)\n```\n\n----------------------------------------\n\nTITLE: Finding the systemd Library in CMake\nDESCRIPTION: This CMake command attempts to find the systemd library and its associated header files. Unlike the ZLIB search, it's not marked as `REQUIRED`, implying the build might proceed differently or conditionally if systemd is not found. It sets variables like `Libsystemd_INCLUDE_DIRS` and `Libsystemd_LIBRARIES`.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/afsocket/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(systemd)\n```\n\n----------------------------------------\n\nTITLE: Configuring syslog-ng Destination with Host Macro in Filename (plaintext)\nDESCRIPTION: This syslog-ng configuration snippet demonstrates defining a log destination (`d_messages_by_host`) using the `file` driver. It utilizes the `$HOST` macro within the file path (`/var/log/$HOST/messages`) to dynamically create log files based on the hostname of the message source. This pattern is relevant to the described vulnerability as macro expansion combined with constant path components could trigger the overflow.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/doc/security/bof-2002-09-27.txt#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndestination d_messages_by_host { file(\"/var/log/$HOST/messages\"); };\n```\n\n----------------------------------------\n\nTITLE: Defining OTel LogRecord C++ Source Files in CMake\nDESCRIPTION: This CMake snippet defines a variable `OTEL_LOGRECORD_CPP_SOURCES` containing a list of C++ header (.h, .hpp) and source (.cpp) files. These files implement functionalities related to OpenTelemetry log records, resources, scope, key-value lists, arrays, and Protobuf fields within the syslog-ng project.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/grpc/otel/filterx/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n# C++ code\n\nset(OTEL_LOGRECORD_CPP_SOURCES\n  object-otel.h\n  object-otel-logrecord.cpp\n  object-otel-logrecord.hpp\n  object-otel-resource.cpp\n  object-otel-resource.hpp\n  object-otel-scope.cpp\n  object-otel-scope.hpp\n  object-otel-kvlist.cpp\n  object-otel-kvlist.hpp\n  object-otel-array.cpp\n  object-otel-array.hpp\n  protobuf-field.cpp\n  protobuf-field.hpp\n  otel-field.hpp\n  otel-field.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Adding kvformat Module and Test Directories - CMake\nDESCRIPTION: This snippet defines the build rules to create the kvformat module by specifying the target name, grammar file for parsing, and the previously listed source files. It also instructs CMake to add a subdirectory named 'tests' for test targets, integrating automated testing into the build process. Dependencies include the proper definition of the KVFORMAT_SOURCES variable and the existence of a 'tests' directory. No input parameters are required, and the output is an updated build configuration.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/kvformat/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_module(\n  TARGET kvformat\n  GRAMMAR kv-parser-grammar\n  SOURCES ${KVFORMAT_SOURCES}\n)\n\nadd_test_subdirectory(tests)\n```\n\n----------------------------------------\n\nTITLE: Conditional Return for MongoDB Driver in CMake - CMake\nDESCRIPTION: This snippet checks if the MongoDB driver is explicitly disabled by inspecting the ENABLE_MONGODB variable. If so, it immediately returns from the script, preventing further configuration. No external dependencies are required beyond setting ENABLE_MONGODB prior to execution. The primary input is the value of ENABLE_MONGODB, and the output is early script termination, ensuring downstream logic is skipped when MongoDB support is not needed.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/afmongodb/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (ENABLE_MONGODB STREQUAL OFF)\n  return()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring and Conditionally Initializing STOMP Module with CMake\nDESCRIPTION: This CMake snippet checks for the ENABLE_STOMP flag to determine whether to include the STOMP module for syslog-ng. It aggregates source and header files, adds the module and its grammar, and includes a test subdirectory if enabled. Dependencies include a CMake-based syslog-ng build system and the ENABLE_STOMP option; key parameters are the ENABLE_STOMP flag and AFSTOMP_SOURCES list. Inputs include the availability of sources and the option flag, while outputs are the inclusion or exclusion of the afstomp target and tests. Only effective in a compatible CMake project.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/afstomp/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nmodule_switch(ENABLE_STOMP \\\"Enable STOMP destination\\\")\n\nif (NOT ENABLE_STOMP)\n  return()\nendif()\n\nset(AFSTOMP_SOURCES\n    afstomp.c\n    afstomp.h\n    afstomp-parser.c\n    afstomp-parser.h\n    stomp.c\n    stomp.h\n)\n\n\nadd_module(\n  TARGET afstomp\n  GRAMMAR afstomp-grammar\n  SOURCES ${AFSTOMP_SOURCES}\n)\n\nadd_test_subdirectory(tests)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Disk Buffer Module (CMake)\nDESCRIPTION: Defines a CMake variable `DISKBUFFER_SOURCES` listing the C source (.c) and header (.h) files required specifically for the syslog-ng disk buffer *module*. This likely contains the plugin interface code.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/diskq/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(DISKBUFFER_SOURCES\n    diskq.c\n    diskq.h\n    diskq-parser.c\n    diskq-parser.h\n    diskq-plugin.c\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring MQTT Module Dependencies and Source Files with CMake - CMake\nDESCRIPTION: This snippet enables or disables MQTT integration in the build by checking the ENABLE_MQTT variable, attempts to locate the Eclipse Paho MQTT C library, and manages fatal error reporting if the library is missing when MQTT is enabled. It also defines source and header files for both common and module-specific code, adds destination and source subdirectories, and sets up the mqtt module with relevant sources and dependencies. Requires CMake and the eclipse-paho-mqtt-c library; parameters like ENABLE_MQTT and discovered source files control build behavior. Outputs are the organized compiled modules for MQTT destination and source components.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/mqtt/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT DEFINED ENABLE_MQTT OR ENABLE_MQTT)\n  find_package(eclipse-paho-mqtt-c)\nendif()\n\nmodule_switch(ENABLE_MQTT \"Enable mqtt\" eclipse-paho-mqtt-c_FOUND)\n\nif (ENABLE_MQTT AND NOT eclipse-paho-mqtt-c_FOUND)\n  message (FATAL_ERROR \"MQTT enabled but no eclipse-paho-mqtt-c library found\")\nendif ()\n\nif (NOT ENABLE_MQTT)\n  return()\nendif()\n\nCHECK_STRUCT_HAS_MEMBER(\"MQTTClient_connectOptions\" \"httpProxy\" \"MQTTClient.h\" SYSLOG_NG_HAVE_PAHO_HTTP_PROXY)\n\nset(MQTT_DIR ${CMAKE_CURRENT_SOURCE_DIR})\n\nset(MQTT_COMMON\n    mqtt-options.c\n    mqtt-options.h\n)\n\nadd_subdirectory(destination)\nadd_subdirectory(source)\n\nset(MQTT_SOURCES\n    mqtt-parser.c\n    mqtt-parser.h\n    mqtt-plugins.c\n)\n\nadd_module(\n  TARGET mqtt\n  GRAMMAR mqtt-grammar\n  DEPENDS mqtt-destination\n  DEPENDS mqtt-source\n  SOURCES ${MQTT_SOURCES} ${MQTT_COMMON}\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Installation Rules for 'secret-storage' in CMake\nDESCRIPTION: Specifies rules for installing the `secret-storage` library and its header files. The compiled shared library (`secret-storage`) is installed to the destination `lib` directory, and the header files listed in `SECRET_STORAGE_HEADERS` are installed into the `include/syslog-ng` directory.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/secret-storage/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS secret-storage LIBRARY DESTINATION lib)\ninstall(FILES ${SECRET_STORAGE_HEADERS} DESTINATION include/syslog-ng)\n```\n\n----------------------------------------\n\nTITLE: Starting Kafka Services and Creating Topic (Shell)\nDESCRIPTION: Sequence of shell commands to start the Zookeeper server, the Kafka broker, create a Kafka topic named 'mytopic' with specific replication and partition settings, and finally start a console consumer to listen to messages on 'mytopic' from the beginning. These commands assume Kafka is installed and the user is in the Kafka installation directory.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/java-modules/common/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nstentor@stentor-x201:~/work/kafka/kafka$ bin/zookeeper-server-start.sh config/zookeeper.properties\nstentor@stentor-x201:~/work/kafka/kafka$ bin/kafka-server-start.sh config/server.properties\nstentor@stentor-x201:~/work/kafka/kafka$ bin/kafka-topics.sh --create --zookeeper 127.0.0.1:2181 --replication-factor 1 --partitions 1 --topic mytopic\nstentor@stentor-x201:~/work/kafka/kafka$ bin/kafka-console-consumer.sh --zookeeper localhost:2181 --topic mytopic --from-beginning\n```\n\n----------------------------------------\n\nTITLE: Linking eventlog Library against GLib in CMake\nDESCRIPTION: This CMake command links the 'eventlog' target privately against the GLib library (specified as GLib::GLib, likely an imported target). The PRIVATE keyword means that GLib is a dependency needed only for building 'eventlog' itself and is not propagated to targets that link against 'eventlog'.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/eventlog/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(eventlog\n  PRIVATE\n    GLib::GLib\n)\n```\n\n----------------------------------------\n\nTITLE: Defining C Source Files for OTel Plugin in CMake\nDESCRIPTION: This snippet defines a CMake variable `OTEL_SOURCES` containing a list of C source (.c) and header (.h) files for the syslog-ng OpenTelemetry plugin. These files likely provide the C interface and integration points with the core syslog-ng framework.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/grpc/otel/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(OTEL_SOURCES\n  otel-plugin.c\n  otel-parser.c\n  otel-parser.h\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Source File List for Log Messages - CMake Script\nDESCRIPTION: This snippet defines the LOGMSG_SOURCES variable, enumerating all source files implementing log message management, serialization, networking, tagging, and type hinting components. The 'PARENT_SCOPE' argument exposes these source file lists to a higher-level scope for modular inclusion or compilation. No special dependencies are needed, as it refers to local source files, and it assumes these paths are valid in the project directory structure.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/logmsg/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(LOGMSG_SOURCES\n    logmsg/gsockaddr-serialize.c\n    logmsg/logmsg.c\n    logmsg/logmsg-serialize.c\n    logmsg/logmsg-serialize-fixup.c\n    logmsg/nvhandle-descriptors.c\n    logmsg/nvtable.c\n    logmsg/nvtable-serialize.c\n    logmsg/nvtable-serialize-legacy.c\n    logmsg/tags-serialize.c\n    logmsg/timestamp-serialize.c\n    logmsg/tags.c\n    logmsg/type-hinting.c\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Including OTel Build in CMake\nDESCRIPTION: This snippet checks if the `ENABLE_GRPC` CMake option is set. If it's not true (i.e., gRPC support is disabled), the script exits early, skipping the definition and building of the OpenTelemetry module which depends on gRPC.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/grpc/otel/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT ENABLE_GRPC)\n  return()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Unit Test for UNIX Transport Mapper (CMake)\nDESCRIPTION: This CMake snippet adds a unit test named 'test-transport-mapper-unix', declares its dependency on 'afsocket', and specifies its sources as 'test-transport-mapper-unix.c' and 'transport-mapper-lib.c'. Like the previous snippets, it requires the Criterion framework and the afsocket module to be present in the build. This registration enables UNIX-specific transport mapper tests to be managed by CMake's test system.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/afsocket/tests/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_unit_test(CRITERION\n  TARGET test-transport-mapper-unix\n  DEPENDS afsocket\n  SOURCES test-transport-mapper-unix.c transport-mapper-lib.c)\n```\n\n----------------------------------------\n\nTITLE: Defining C++ Source Files for OTel Module in CMake\nDESCRIPTION: This snippet defines a CMake variable `OTEL_CPP_SOURCES` containing a list of C++ header (.hpp, .h) and source (.cpp) files required for the C++ parts of the syslog-ng OpenTelemetry module, likely handling the core OTel logic and gRPC interactions.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/grpc/otel/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(OTEL_CPP_SOURCES\n  otel-source.cpp\n  otel-source.hpp\n  otel-source.h\n  otel-source-services.hpp\n  otel-servicecall.hpp\n  otel-logmsg-handles.cpp\n  otel-logmsg-handles.hpp\n  otel-logmsg-handles.h\n  otel-protobuf-parser.hpp\n  otel-protobuf-parser.cpp\n  otel-protobuf-parser.h\n  otel-protobuf-formatter.hpp\n  otel-protobuf-formatter.cpp\n  otel-dest.hpp\n  otel-dest.cpp\n  otel-dest.h\n  otel-dest-worker.hpp\n  otel-dest-worker.cpp\n  syslog-ng-otlp-dest.hpp\n  syslog-ng-otlp-dest.cpp\n  syslog-ng-otlp-dest.h\n  syslog-ng-otlp-dest-worker.hpp\n  syslog-ng-otlp-dest-worker.cpp)\n```\n\n----------------------------------------\n\nTITLE: Installing Built Python Modules via CMake\nDESCRIPTION: Uses the CMake `install(DIRECTORY ...)` command to copy the contents of the temporary installation directory created by `SetupPyModules` (`${CMAKE_CURRENT_BINARY_DIR}/install/`) to the final installation destination specified by `CMAKE_INSTALL_PREFIX`. It specifically patterns matches to include `.py` files.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/python-modules/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/install/ DESTINATION ${CMAKE_INSTALL_PREFIX}\n    PATTERN \"*.py\"\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Secure Logging Module and Subdirectories - CMake\nDESCRIPTION: Creates and configures a secure logging module with specified dependencies on both the static library and OpenSSL components. Also adds associated subdirectories (slogencrypt, slogkey, slogverify) and the test suite to the build tree, ensuring modular organization and test integration. Relies on the previous definitions for targets and external dependencies, and expects those directories to exist with their own CMake configurations.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/secure-logging/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(SECURE_LOGGING_MODULE_SOURCES\n  secure-logging.c\n  )\n\nadd_module(\n  TARGET secure-logging\n  DEPENDS syslog-ng-secure-logging\n          OpenSSL::SSL\n          OpenSSL::Crypto\n  SOURCES ${SECURE_LOGGING_MODULE_SOURCES}\n)\n\nadd_subdirectory(slogencrypt)\nadd_subdirectory(slogkey)\nadd_subdirectory(slogverify)\nadd_test_subdirectory(tests)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for afsmtp Module in CMake\nDESCRIPTION: Defines a CMake variable `AFSMTP_SOURCES` that lists all the C source (.c) and header (.h) files required to compile the `afsmtp` module. This variable is later used when defining the build target.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/afsmtp/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(AFSMTP_SOURCES\n    afsmtp.c\n    afsmtp.h\n    afsmtp-parser.c\n    afsmtp-parser.h\n)\n```\n\n----------------------------------------\n\nTITLE: Installing SCL Directories using CMake\nDESCRIPTION: Uses the CMake `install(DIRECTORY ...)` command to copy the directories listed in the `${SCL_DIRS}` variable into the installation destination path `share/syslog-ng/include/scl`. This ensures the SCL component directories are available in the final installation.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/scl/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(DIRECTORY ${SCL_DIRS} DESTINATION share/syslog-ng/include/scl)\n```\n\n----------------------------------------\n\nTITLE: Defining 'test_date' Unit Test with Criterion in CMake\nDESCRIPTION: This CMake command defines a unit test named `test_date`. It specifies that the test belongs to the `LIBTEST` group, uses the Criterion testing framework (`CRITERION`), is identified by the `TARGET` named `test_date`, and has a build dependency on the `timestamp` target (`DEPENDS timestamp`).\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/timestamp/tests/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_unit_test(LIBTEST CRITERION TARGET test_date DEPENDS timestamp)\n```\n\n----------------------------------------\n\nTITLE: Executing `syslog-ng-ctl` with `--reset` Option (Shell)\nDESCRIPTION: This shell command invokes the syslog-ng control utility (`syslog-ng-ctl`) with the `--reset` flag. According to the context, this command's execution will no longer result in the resetting of Prometheus metrics exposed by syslog-ng. It requires the `syslog-ng` package to be installed and assumes appropriate permissions to execute the control command.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/news/bugfix-5261.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsyslog-ng-ctl --reset\n```\n\n----------------------------------------\n\nTITLE: Generating Bison Input File (.y) in CMake\nDESCRIPTION: Invokes a custom CMake function or macro named 'generate_y_from_ym'. This function is expected to process the input '.ym' file (likely a pre-processed grammar file) located at 'modules/examples/sources/msg-generator/msg-generator-grammar.ym' and generate a standard Bison grammar file ('.y') in the build directory.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/examples/sources/msg-generator/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ngenerate_y_from_ym(modules/examples/sources/msg-generator/msg-generator-grammar)\n```\n\n----------------------------------------\n\nTITLE: Defining Native Source Files (CMake)\nDESCRIPTION: This snippet sets a CMake variable `NATIVE_SOURCES` to list the C source files required for building the native bindings. It includes core parser logic and a generated grammar source file located in the CMake binary directory.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/native/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset (NATIVE_SOURCES\n    native-parser.c\n    parser.c\n    ${CMAKE_CURRENT_BINARY_DIR}/native-grammar.c\n    )\n```\n\n----------------------------------------\n\nTITLE: Specifying Include Directories for Loggen SSL Plugin (CMake)\nDESCRIPTION: This command adds necessary include directories for compiling the `loggen_ssl_plugin`. It includes core syslog-ng include directories (`CORE_INCLUDE_DIRS`) and loggen-specific include directories (`LOGGEN_INCLUDE_DIR`).\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/tests/loggen/ssl_plugin/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude_directories(loggen_ssl_plugin\n  ${CORE_INCLUDE_DIRS}\n  ${LOGGEN_INCLUDE_DIR}\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Unit Tests with Criterion in syslog-ng (CMake)\nDESCRIPTION: This CMake snippet adds a unit test named 'test_loggen_filereader' using the Criterion test framework. It specifies dependencies, requiring the 'loggen_helper' target to be present before this test is built. The snippet enables automated testing as part of syslog-ng's CMake-based build system. Inputs include the test target name, dependency list, and test framework.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/tests/loggen/tests/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_unit_test(CRITERION TARGET test_loggen_filereader DEPENDS loggen_helper)\n```\n\n----------------------------------------\n\nTITLE: Building and Installing syslog-ng (Shell)\nDESCRIPTION: Shell command using the Python build script `sbuild.py` to compile and install syslog-ng from its source code. This step is necessary after obtaining the syslog-ng source and before running a custom configuration.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/java-modules/common/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./sbuild.py make install\n```\n\n----------------------------------------\n\nTITLE: Including Test Subdirectory for CTest Integration - CMake\nDESCRIPTION: This snippet adds a tests subdirectory to the CMake build process using add_test_subdirectory. It enables separation and organization of test code, facilitating automated test builds and integration with CTest. The only dependency is that a tests directory must exist and contain a valid CMakeLists.txt. No parameters are required beyond the directory path; no direct output is produced except enabling test target builds within the project.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/add-contextual-data/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_test_subdirectory(tests)\n```\n\n----------------------------------------\n\nTITLE: Adding gRPC Common C++ Static Library Target in CMake\nDESCRIPTION: Defines a build target named `grpc-common-cpp` using a custom `add_module` function or macro. It specifies the source files using the `GRPC_COMMON_CPP_SOURCES` variable, sets the include directory path, and defines the library type as STATIC.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/grpc/common/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_module(\n  TARGET grpc-common-cpp\n  SOURCES ${GRPC_COMMON_CPP_SOURCES}\n  INCLUDES ${PROJECT_SOURCE_DIR}/modules/grpc/common\n  LIBRARY_TYPE STATIC\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Source File Variables in CMake (CMake)\nDESCRIPTION: This snippet declares the SYSLOGFORMAT_SOURCES variable as a list of C and header files corresponding to syslog format components in the syslog-ng project. It sets up which files are included for subsequent build steps. Dependencies include CMake itself, and accurately named source/header files. Takes no parameters, but will be used by later commands in the CMakeLists file.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/syslogformat/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SYSLOGFORMAT_SOURCES\n    syslog-format.c\n    syslog-format.h\n    syslog-format-plugin.c\n    syslog-parser-parser.c\n    syslog-parser-parser.h\n    syslog-parser.c\n    syslog-parser.h\n    sdata-parser.c\n    sdata-parser.h\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for msg-generator in CMake\nDESCRIPTION: Specifies the include directories for the 'msg-generator' target. The current source directory is added as a PUBLIC include directory (available to consumers), while the current binary directory (containing generated headers) is added as a PRIVATE include directory (used only for compiling the library itself).\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/examples/sources/msg-generator/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(msg-generator\n  PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}\n  PRIVATE ${CMAKE_CURRENT_BINARY_DIR}\n)\n```\n\n----------------------------------------\n\nTITLE: Defining test_python_template Unit Test in CMake\nDESCRIPTION: This CMake snippet defines a unit test named `test_python_template` using the `add_unit_test` command with the `CRITERION` framework. It includes Python headers via `${PYTHON_INCLUDE_DIR}` and `${PYTHON_INCLUDE_DIRS}`. The test depends on `mod-python`, `${PYTHON_LIBRARIES}`, and `syslogformat`. It also sets the `PYTHONMALLOC` environment variable to `malloc_debug` for the test execution environment.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/python/tests/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_unit_test(LIBTEST CRITERION\n  TARGET test_python_template\n  INCLUDES \"${PYTHON_INCLUDE_DIR}\" \"${PYTHON_INCLUDE_DIRS}\"\n  DEPENDS mod-python \"${PYTHON_LIBRARIES}\" syslogformat)\n\nset_property(TEST test_python_template APPEND PROPERTY ENVIRONMENT \"PYTHONMALLOC=malloc_debug\")\n```\n\n----------------------------------------\n\nTITLE: Including Test Definitions in CMake\nDESCRIPTION: Includes the `add_tests.cmake` file, which presumably contains the logic for defining specific unit tests using the found testing framework.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/CMakeLists.txt#_snippet_26\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(add_tests)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for gRPC Common C++ Module in CMake\nDESCRIPTION: Sets the CMake variable `GRPC_COMMON_CPP_SOURCES` to a list of C++ source (.cpp) and header (.h, .hpp) files. This list aggregates files from variables defined in subdirectories (`GRPC_CREDENTIALS_SOURCES`, etc.) and includes specific files related to gRPC parsing, destination, and source components.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/grpc/common/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(GRPC_COMMON_CPP_SOURCES\n  ${GRPC_CREDENTIALS_SOURCES}\n  ${GRPC_METRICS_SOURCES}\n  ${GRPC_SCHEMA_SOURCES}\n  grpc-parser.h\n  grpc-dest.hpp\n  grpc-dest.cpp\n  grpc-dest.h\n  grpc-dest-worker.hpp\n  grpc-dest-worker.cpp\n  grpc-source.hpp\n  grpc-source.cpp\n  grpc-source.h\n  grpc-source-worker.hpp\n  grpc-source-worker.cpp)\n```\n\n----------------------------------------\n\nTITLE: Specifying Parser Source Files with CMake - CMake - CMake\nDESCRIPTION: Sets the PARSER_SOURCES CMake variable to include source files necessary for building the parser module. By using PARENT_SCOPE, these source file references are made available to the parent CMake process for inclusion in larger targets. The source files must exist at the specified locations; this supports a modular project structure and relies on the CMake build system.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/parser/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(PARSER_SOURCES\n    parser/parser-expr.c\n    parser/parser-expr-parser.c\n    PARENT_SCOPE\n    )\n```\n\n----------------------------------------\n\nTITLE: Setting Compile Options for the BigQuery C++ Library (CMake)\nDESCRIPTION: Applies specific private compile options to the `bigquery-cpp` target. It disables warnings for double promotion (`-Wno-double-promotion`) and deprecated features (`-Wno-deprecated`), and defines a Protobuf macro (`PROTOBUF_ENABLE_DEBUG_LOGGING_MAY_LEAK_PII=0`) likely to suppress debug logs that might contain Personally Identifiable Information (PII).\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/grpc/bigquery/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_compile_options(bigquery-cpp PRIVATE -Wno-double-promotion -Wno-deprecated -DPROTOBUF_ENABLE_DEBUG_LOGGING_MAY_LEAK_PII=0)\n```\n\n----------------------------------------\n\nTITLE: Adding Mock Journald Unit Test with CMake - CMake\nDESCRIPTION: Sets up a unit test named 'test_journald_mock' using CMake, targeting mock components of journald functionality. This test target depends on the 'sdjournal' library and requires the 'test-journald-mock.c' and 'journald-mock.c' source files. This configuration assumes use of the CRITERION test suite and the presence of the stated sources and dependencies at build time.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/systemd-journal/tests/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_unit_test(CRITERION\n  TARGET test_journald_mock\n  DEPENDS sdjournal\n  SOURCES test-journald-mock.c journald-mock.c)\n```\n\n----------------------------------------\n\nTITLE: Registering Test Subdirectory with add_test_subdirectory - CMake\nDESCRIPTION: This line adds the 'tests' subdirectory to the CMake build process by invoking add_test_subdirectory. It enables inclusion and configuration of unit or integration tests defined in that directory. Prerequisite: the tests directory must contain its own CMakeLists.txt. Outputs depend on the test scripts within the added subdirectory.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/template/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_test_subdirectory(tests)\n```\n\n----------------------------------------\n\nTITLE: Defining the Main BigQuery Shared Module Target (CMake)\nDESCRIPTION: Defines the final shared library target named `bigquery` using the `add_module` function/macro. It compiles the C sources listed in `BIGQUERY_SOURCES`, depends on the `bigquery-cpp` static library and `grpc-common-cpp`, specifies grammar dependencies for configuration parsing (`bigquery-grammar`, `GRPC_COMMON_GRAMMAR`), and sets the necessary include directory for the gRPC module.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/grpc/bigquery/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nadd_module(\n  TARGET bigquery\n  GRAMMAR bigquery-grammar\n  GRAMMAR_DEPENDS ${GRPC_COMMON_GRAMMAR}\n  DEPENDS bigquery-cpp grpc-common-cpp\n  INCLUDES ${PROJECT_SOURCE_DIR}/modules/grpc\n  SOURCES ${BIGQUERY_SOURCES}\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Test Subdirectory in CMake\nDESCRIPTION: Includes the 'tests' subdirectory in the CMake build process. This command likely references another CMakeLists.txt file within the 'tests' directory, which defines test targets and configurations.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_test_subdirectory(tests)\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for MQTT Module - CMake\nDESCRIPTION: Sets the include directory for the mqtt-destination target to the path specified in the MQTT_DIR variable. This ensures that all source files in the module have access to necessary MQTT headers and dependencies during compilation. Correct include path configuration is essential for successful module builds in CMake-based projects.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/mqtt/destination/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(mqtt-destination PUBLIC ${MQTT_DIR})\n```\n\n----------------------------------------\n\nTITLE: Setting gRPC Credential Sources with CMake - CMake\nDESCRIPTION: This snippet uses the CMake set() command to define the GRPC_CREDENTIALS_SOURCES variable, containing paths to header and source files for gRPC credentials. The PARENT_SCOPE argument ensures that this variable is accessible in the scope of the calling CMake script, which is essential in modular projects or when source lists need to be managed across multiple CMake files. No external dependencies beyond CMake's scripting requirements are present, and file paths are dynamically constructed using the PROJECT_SOURCE_DIR variable. There are no input parameters, and the variable is meant for internal build configuration.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/grpc/common/credentials/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(GRPC_CREDENTIALS_SOURCES\n    ${PROJECT_SOURCE_DIR}/modules/grpc/common/credentials/grpc-credentials-builder.h\n    ${PROJECT_SOURCE_DIR}/modules/grpc/common/credentials/grpc-credentials-builder.hpp\n    ${PROJECT_SOURCE_DIR}/modules/grpc/common/credentials/grpc-credentials-builder.cpp\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring Compile Options for C++ OTel Module in CMake\nDESCRIPTION: This CMake command adds specific private compile options to the `otel-cpp` target. It suppresses warnings related to double promotion (`-Wno-double-promotion`) and deprecated features (`-Wno-deprecated`), and defines a preprocessor macro `PROTOBUF_ENABLE_DEBUG_LOGGING_MAY_LEAK_PII` to 0, likely to disable potentially sensitive protobuf debug logging.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/grpc/otel/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_compile_options (otel-cpp PRIVATE -Wno-double-promotion -Wno-deprecated -DPROTOBUF_ENABLE_DEBUG_LOGGING_MAY_LEAK_PII=0)\n```\n\n----------------------------------------\n\nTITLE: Adding Unit Test for SNMP Trap Parser Using LibTest - CMake\nDESCRIPTION: Adds a unit test named test_snmptrapd_parser with the LIBTEST CRITERION testing framework, enforcing a dependency on the afsnmp module. This test targets SNMP trap parsing functionality. Requires presence of both libtest and Criterion frameworks as well as the afsnmp module. Input is the test config; output is integration into the CMake-driven test set.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/afsnmp/tests/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_unit_test(LIBTEST CRITERION TARGET test_snmptrapd_parser DEPENDS afsnmp)\n```\n\n----------------------------------------\n\nTITLE: Including Test Subdirectory for regexp-parser in CMake\nDESCRIPTION: This command uses the standard CMake function `add_test_subdirectory` to include the build definitions located within the `tests` subdirectory. This is typically used to build and potentially run tests associated with the current module (`regexp-parser`).\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/regexp-parser/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_test_subdirectory(tests)\n```\n\n----------------------------------------\n\nTITLE: Defining Healthcheck Source Files Variable in CMake\nDESCRIPTION: This CMake snippet defines the `HEALTHCHECK_SOURCES` variable, populating it with a list of C source files (.c) implementing the healthcheck functionality. Similar to the headers variable, `PARENT_SCOPE` makes this variable available to the parent CMake script, typically for adding these sources to a library or executable target.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/healthcheck/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEALTHCHECK_SOURCES\n    healthcheck/healthcheck.c\n    healthcheck/healthcheck-control.c\n    healthcheck/healthcheck-stats.c\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Defining Tool Files List in CMake\nDESCRIPTION: Defines a CMake list variable named 'TOOLS' containing the filenames 'merge-grammar.py' and 'cfg-grammar.y'. These are likely utility scripts or grammar files used by or related to syslog-ng.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(TOOLS\n    merge-grammar.py\n    cfg-grammar.y\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Options for gRPC Common C++ Target in CMake\nDESCRIPTION: Applies specific compiler options privately to the `grpc-common-cpp` target. These options suppress warnings related to inconsistent missing overrides, double promotion, and deprecated features, and define a macro `PROTOBUF_ENABLE_DEBUG_LOGGING_MAY_LEAK_PII` to control Protobuf logging behavior.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/grpc/common/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_compile_options(grpc-common-cpp PRIVATE -Wno-inconsistent-missing-override -Wno-double-promotion -Wno-deprecated -DPROTOBUF_ENABLE_DEBUG_LOGGING_MAY_LEAK_PII=0)\n```\n\n----------------------------------------\n\nTITLE: Adding Criterion Unit Test 'test_decode' in CMake\nDESCRIPTION: This CMake command uses the `add_unit_test` macro or function to register a unit test named `test_decode`. It specifies `CRITERION` as the testing framework and `test_decode` as the target associated with this test. This command integrates the specified test into the CMake/CTest testing infrastructure.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/str-repr/tests/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_unit_test(CRITERION TARGET test_decode)\n```\n\n----------------------------------------\n\nTITLE: Adding Test Subdirectory in CMake\nDESCRIPTION: This CMake command includes a subdirectory named `tests` into the build. This typically means that the `CMakeLists.txt` file within the `tests` directory will be processed, adding any tests associated with the `afsnmp` module to the build system's test suite (e.g., using CTest).\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/afsnmp/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nadd_test_subdirectory(tests)\n```\n\n----------------------------------------\n\nTITLE: Adding a Test Subdirectory in CMake\nDESCRIPTION: This CMake command, `add_test_subdirectory`, is used to include the 'tests' subdirectory into the build process. This command is likely a custom function or macro defined within the syslog-ng CMake framework, intended specifically for handling test directories.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/timeutils/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_test_subdirectory(tests)\n```\n\n----------------------------------------\n\nTITLE: Defining Control Source Files List in CMake\nDESCRIPTION: This CMake command defines the `CONTROL_SOURCES` variable, listing the C source files found in the `control/` directory that implement the control functionality. The `PARENT_SCOPE` option makes this variable accessible in the parent CMake scope, typically used for compiling these sources into a library or executable.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/control/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(CONTROL_SOURCES\n    control/control-commands.c\n    control/control-command-thread.c\n    control/control-main.c\n    control/control-server.c\n    control/control-server-unix.c\n    control/control-connection.c\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Including Subdirectories for gRPC Components in CMake\nDESCRIPTION: Adds the 'credentials', 'metrics', and 'schema' subdirectories to the CMake build process. This command instructs CMake to process the `CMakeLists.txt` files located within these subdirectories, incorporating their targets and settings into the main build.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/grpc/common/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(credentials)\nadd_subdirectory(metrics)\nadd_subdirectory(schema)\n```\n\n----------------------------------------\n\nTITLE: Defining Unit Test 'test_filterx_func_format_kv' in CMake\nDESCRIPTION: Defines a unit test named 'test_filterx_func_format_kv' using the `add_unit_test` CMake function. This test is categorized as LIBTEST, uses the CRITERION framework, and depends on the 'kvformat' module, likely testing key-value formatting within filter functions.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/kvformat/tests/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nadd_unit_test(LIBTEST CRITERION TARGET test_filterx_func_format_kv DEPENDS kvformat)\n```\n\n----------------------------------------\n\nTITLE: Including Test Subdirectory in CMake Build\nDESCRIPTION: This CMake command, `add_test_subdirectory` (potentially a wrapper around the standard `add_subdirectory`), instructs CMake to include the `tests` subdirectory in the build. CMake will process the `CMakeLists.txt` file located within the `tests` directory, incorporating any targets or tests defined there into the overall project build.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/graphite/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_test_subdirectory(tests)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for loggen Executable in CMake\nDESCRIPTION: Sets a CMake variable `LOGGEN_SOURCE` containing a list of source files required to build the `loggen` executable. This includes its main C file, plugin header, file reader implementation, log line generator, and relocation/cache utility code from the main project library.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/tests/loggen/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nset(LOGGEN_SOURCE\n    loggen.c\n    loggen_plugin.h\n    file_reader.c\n    file_reader.h\n    logline_generator.c\n    logline_generator.h\n    ${PROJECT_SOURCE_DIR}/lib/reloc.c\n    ${PROJECT_SOURCE_DIR}/lib/cache.c\n    )\n```\n\n----------------------------------------\n\nTITLE: Setting CSV Scanner Include Directory Variable in CMake\nDESCRIPTION: Defines a CMake variable named `CSV_SCANNER_INCLUDE_DIR`. It is set to the value of the built-in CMake variable `CMAKE_CURRENT_SOURCE_DIR`, which represents the full path to the directory where this CMakeLists.txt file resides. This variable is likely used later to add an include directory for compiling the CSV scanner sources.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/scanner/csv-scanner/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(CSV_SCANNER_INCLUDE_DIR \"${CMAKE_CURRENT_SOURCE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Adding Unit Test with Criterion Framework in CMake\nDESCRIPTION: This code snippet uses the add_unit_test macro in CMake to register a unit test named 'test-format-cef-extension' with the CRITERION test framework. The DEPENDS argument indicates the test relies on the 'cef' component, ensuring the test is only run if the dependency is correctly built. To use this, the CMakeLists.txt file must include the definition of the add_unit_test macro, and the build environment must have CMake and any necessary dependencies (including 'cef' and the Criterion framework) available. No explicit input or output is involved—the macro integrates the test into the project's build and test infrastructure.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/cef/tests/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_unit_test(LIBTEST CRITERION TARGET test-format-cef-extension DEPENDS cef)\n```\n\n----------------------------------------\n\nTITLE: Including the Test Subdirectory in CMake Build\nDESCRIPTION: This command, likely a custom function or macro (`add_test_subdirectory`), instructs CMake to descend into the `tests` subdirectory and process its `CMakeLists.txt` file. This is typically used to configure and build tests associated with the current module or project.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/afsocket/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nadd_test_subdirectory(tests)\n```\n\n----------------------------------------\n\nTITLE: Adding ssl_plugin Subdirectory to Build in CMake\nDESCRIPTION: Includes the `ssl_plugin` subdirectory in the CMake build process. CMake will look for a `CMakeLists.txt` file within that subdirectory and process it, likely building a plugin for `loggen` related to SSL/TLS communication.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/tests/loggen/CMakeLists.txt#_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(ssl_plugin)\n```\n\n----------------------------------------\n\nTITLE: Adding Tests Subdirectory in CMake - CMake\nDESCRIPTION: This short CMake snippet adds the 'tests' subdirectory to the build process, allowing test cases or test targets to be built along with the primary components. It presumes the existence of a subdirectory named 'tests' with its own CMake configuration and is commonly used for modular CMake project organization.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/logthrsource/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_test_subdirectory(tests)\n```\n\n----------------------------------------\n\nTITLE: Setting Parser Header Files with CMake - CMake - CMake\nDESCRIPTION: Defines a CMake variable PARSER_HEADERS that lists header files for the parser module. The PARENT_SCOPE argument ensures these file paths propagate to the parent CMake context for reuse. This is typically used for modular CMake projects where components expose interface information to the main build script; no additional dependencies are required, but these header files must exist in the specified relative paths.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/parser/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(PARSER_HEADERS\n    parser/parser-expr.h\n    parser/parser-expr-parser.h\n    PARENT_SCOPE\n    )\n```\n\n----------------------------------------\n\nTITLE: Adding Unit Test for Graphite Output in CMake (CMake Language)\nDESCRIPTION: This CMake command registers a unit test called 'test_graphite_output' with the build system using the 'add_unit_test' macro. It assigns the test to the LIBTEST group, sets the test runner to CRITERION (a C/C++ unit testing framework), and declares an explicit dependency on the 'graphite' component. The command expects that 'add_unit_test' and the 'graphite' component are properly defined elsewhere in the build system. The primary input is the test target name, and the output is an integrated unit test within the automatic test suite.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/graphite/tests/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_unit_test(LIBTEST CRITERION TARGET test_graphite_output DEPENDS graphite)\n```\n\n----------------------------------------\n\nTITLE: Adding Criterion Unit Test Target in CMake\nDESCRIPTION: This CMake command utilizes a custom function `add_unit_test` to define a unit test target named `test_list_scanner`. It specifies `CRITERION` as the testing framework to be used for this target. This integrates the test into the build system, likely compiling and linking associated source files for the test.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/scanner/list-scanner/tests/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_unit_test(CRITERION TARGET test_list_scanner)\n```\n\n----------------------------------------\n\nTITLE: Adding MQTT Destination Module and Setting Dependency - CMake\nDESCRIPTION: Defines a new module target named mqtt-destination in CMake, associating it with the previously defined MQTT_DEST_SOURCES variable. Declares a dependency on the Eclipse Paho MQTT C library and sets the library type to STATIC, indicating it will be linked into a larger MQTT module. This process ensures the correct build order and linkage for MQTT support in syslog-ng.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/mqtt/destination/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_module(\n  TARGET mqtt-destination\n  DEPENDS eclipse-paho-mqtt-c::paho-mqtt3cs\n  SOURCES ${MQTT_DEST_SOURCES}\n  LIBRARY_TYPE STATIC # STATIC: Built as part of a larger libmqtt module\n)\n```\n\n----------------------------------------\n\nTITLE: Interactive Bash Access to a Running syslog-ng Container - Bash\nDESCRIPTION: This command opens a bash shell inside a running syslog-ng container for troubleshooting or direct management. Replace 'syslog-ng' with the correct container name if it differs. Requires an already running container and access permissions.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/docker/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsudo docker exec -it syslog-ng /bin/bash\n```\n\n----------------------------------------\n\nTITLE: Adding Test Subdirectory - CMake\nDESCRIPTION: Invokes add_test_subdirectory to include tests for the rewrite module. This command adds the contents of the 'tests' directory as a separate test build target, assuming that directory is structured with its own CMakeLists.txt for test configuration.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/rewrite/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_test_subdirectory(tests)\n```\n\n----------------------------------------\n\nTITLE: Defining Multi-Line Header Files for syslog-ng (CMake)\nDESCRIPTION: Defines a CMake variable MULTI_LINE_HEADERS containing a list of C/C++ header files relevant to multi-line log processing components in syslog-ng. Uses the PARENT_SCOPE option to ensure the variable is set in the calling CMake context, enabling modular inclusion of these headers in higher-level build scripts. There are no required dependencies beyond standard CMake, and the input is a static list of header paths used later in build configuration or dependency registration.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/multi-line/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(MULTI_LINE_HEADERS\n    multi-line/indented-multi-line.h\n    multi-line/multi-line-factory.h\n    multi-line/multi-line-logic.h\n    multi-line/multi-line-pattern.h\n    multi-line/smart-multi-line.h\n    multi-line/regexp-multi-line.h\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Managing Git Submodules during Build in CMake\nDESCRIPTION: Attempts to find the Git executable. If Git is found and a `.git` directory exists, it provides an option `GIT_SUBMODULE` (default ON) to automatically update Git submodules. If the option is enabled, it executes `git submodule update --init --recursive`. A failure in the submodule update process results in a fatal error.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(Git QUIET)\nif(GIT_FOUND AND EXISTS \"${PROJECT_SOURCE_DIR}/.git\")\n    option(GIT_SUBMODULE \"Checkout submodules during build\" ON)\n    if(GIT_SUBMODULE)\n        message(STATUS \"Submodule update\")\n        execute_process(COMMAND ${GIT_EXECUTABLE} submodule update --init --recursive\n                        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}\n                        RESULT_VARIABLE GIT_SUBMOD_RESULT)\n        if(NOT GIT_SUBMOD_RESULT EQUAL \"0\")\n            message(FATAL_ERROR \"git submodule update --init --recursive failed with ${GIT_SUBMOD_RESULT}, please checkout submodules\")\n        endif()\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Criterion Unit Test for tags-parser in CMake\nDESCRIPTION: This CMake command defines a unit test named `test_tagsparser` using the Criterion testing framework. It specifies that the test belongs to the `LIBTEST` category, targets `test_tagsparser`, and depends on the `tags-parser` build target. This likely invokes a custom macro or function (`add_unit_test`) within the syslog-ng build system.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/tagsparser/tests/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_unit_test(LIBTEST CRITERION TARGET test_tagsparser DEPENDS tags-parser)\n```\n\n----------------------------------------\n\nTITLE: Adding loggen Subdirectory with CMake - CMake - Plain Text\nDESCRIPTION: Adds the 'loggen' subdirectory to the current CMake build, allowing its CMakeLists.txt and source files to be included as part of the project's compilation process. Requires a standard CMake installation and assumes a 'loggen' directory exists relative to this file. No input parameters are needed; output is the inclusion of 'loggen' in the build tree.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/tests/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(loggen)\n```\n\n----------------------------------------\n\nTITLE: Setting Transport Header Files for Build Configuration - CMake\nDESCRIPTION: Defines the TRANSPORT_HEADERS list variable with paths to various transport-related header files, organized under the 'transport' directory. These headers cover diverse transport implementations such as log transport, adapters, TLS handling, sockets, files, pipes, and related utilities required to build transport modules in syslog-ng. The 'PARENT_SCOPE' argument makes this list available to the parent scope, allowing modular CMake inclusion.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/transport/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(TRANSPORT_HEADERS\n    transport/logtransport.h\n    transport/transport-aux-data.h\n    transport/transport-adapter.h\n    transport/transport-tls.h\n    transport/transport-file.h\n    transport/transport-pipe.h\n    transport/transport-socket.h\n    transport/transport-haproxy.h\n    transport/transport-udp-socket.h\n    transport/transport-stack.h\n    transport/transport-factory-tls.h\n    transport/transport-factory-haproxy.h\n    transport/transport-globals.h\n    transport/tls-context.h\n    transport/tls-verifier.h\n    transport/tls-session.h\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Adding Libtest Unit Test Walk for Value Pairs with CMake - CMake\nDESCRIPTION: This snippet registers a unit test called 'test_value_pairs_walk' with CMake using the add_unit_test macro. The test is marked with both 'CRITERION' and 'LIBTEST', indicating the use of the Criterion framework and a specific test library setup. It is standalone and does not declare explicit dependencies. This setup enables modular and automated execution of targeted unit tests in the syslog-ng project using CMake infrastructure.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/value-pairs/tests/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_unit_test(CRITERION LIBTEST TARGET test_value_pairs_walk)\n```\n\n----------------------------------------\n\nTITLE: Setting Test Source File Lists for syslog-ng Test Targets - CMake\nDESCRIPTION: Defines variable lists of source files for different filter-related test cases in syslog-ng. Each set() command constructs a logical grouping of source, header, and shared test code, to be referenced when declaring unit tests. These groupings promote reuse of test helpers and maintain clear organization for each test scenario.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/filter/tests/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(TEST_FILTERS_FACILITY_SOURCE\n  test_filters_facility.c\n  test_filters_common.c\n  test_filters_common.h\n  )\n\nset(TEST_FILTERS_LEVEL_NEW_SOURCE\n  test_filters_level_new.c\n  test_filters_common.c\n  test_filters_common.h\n  )\n\nset(TEST_FILTERS_REGEXP_SOURCE\n  test_filters_regexp.c\n  test_filters_common.c\n  test_filters_common.h\n  )\n\nset(TEST_FILTERS_FOP_CMP_SOURCE\n  test_filters_fop_cmp.c\n  test_filters_common.c\n  test_filters_common.h\n  )\n\nset(TEST_FILTERS_FOP_SOURCE\n  test_filters_fop.c\n  test_filters_common.c\n  test_filters_common.h\n  )\n\nset(TEST_FILTERS_NETMASK_SOURCE\n  test_filters_netmask.c\n  test_filters_common.c\n  test_filters_common.h\n  )\n\nset(TEST_FILTERS_NETMASK6_SOURCE\n  test_filters_netmask6.c\n  test_filters_common.c\n  test_filters_common.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Copying syslog-ng Service/Init Files - Bash\nDESCRIPTION: Series of commands that copy syslog-ng related manifest, method, and default files into their proper Solaris system directories. These files are necessary for SMF (Service Management Facility) integration. Each copy must have the valid source directory and root access. Result is that syslog-ng can be managed as a Solaris service.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/contrib/solaris-packaging/solaris10_install.txt#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# cp <sourcedir>/contrib/solaris-packaging/syslog-ng.example.xml /var/svc/manifest/system/syslog-ng.xml\n# cp <sourcedir>/contrib/solaris-packaging/syslog-ng.method /lib/svc/method/syslog-ng\n# cp <sourcedir>/contrib/solaris-packaging/syslog-ng@default /etc/default/syslog-ng@default\n```\n\n----------------------------------------\n\nTITLE: Setting Transport Source Files for Build Configuration - CMake\nDESCRIPTION: Defines the TRANSPORT_SOURCES list variable with paths to C source files implementing various transport modules in syslog-ng. This includes modules for different transport mechanisms (socket, file, pipe, TLS, etc.) and supporting utilities. The 'PARENT_SCOPE' option exports this list to the parent CMake scope for flexible inclusion in targets or higher-level build operations.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/transport/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(TRANSPORT_SOURCES\n    transport/logtransport.c\n    transport/transport-aux-data.c\n    transport/transport-adapter.c\n    transport/transport-file.c\n    transport/transport-pipe.c\n    transport/transport-socket.c\n    transport/transport-haproxy.c\n    transport/transport-udp-socket.c\n    transport/transport-tls.c\n    transport/transport-stack.c\n    transport/transport-factory-tls.c\n    transport/transport-factory-haproxy.c\n    transport/transport-globals.c\n    transport/tls-context.c\n    transport/tls-verifier.c\n    transport/tls-session.c\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Defining CMake Target for PEP8 Style Checking\nDESCRIPTION: Creates a CMake custom target `pymodules-pep8` to perform Python style checking using the `pep8` tool (now known as `pycodestyle`). It runs the check against the Python source directory (`syslogng`), ignoring error E501 (line too long), using the Python executable from the virtual environment. It depends on the `BuildPyVirtualEnv` target.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/python-modules/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(pymodules-pep8\n                  COMMAND ${CMAKE_COMMAND} -E env ${PYTHON_VENV_EXECUTABLE} -m pep8 --ignore=E501 ${CMAKE_CURRENT_SOURCE_DIR}/syslogng\n                  DEPENDS BuildPyVirtualEnv\n                  VERBATIM)\n```\n\n----------------------------------------\n\nTITLE: Adding Criterion Unit Test 'test_wallclocktime' in CMake\nDESCRIPTION: Defines the 'test_wallclocktime' unit test within the CMake build, targeting the 'LIBTEST' library. This command specifies Criterion as the testing framework for this particular test.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/timeutils/tests/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_unit_test(LIBTEST CRITERION TARGET test_wallclocktime)\n```\n\n----------------------------------------\n\nTITLE: Checking OSLog Framework Support with CMake - CMake\nDESCRIPTION: This snippet uses CMake's check_objc_source_compiles to determine if the OSLog Objective-C framework is available for use. It attempts to compile a minimal Objective-C main function that includes the OSLog header, setting the HAVE_OSLOG variable accordingly. The check enables conditional compilation steps and ensures that OSLog-dependent features are only enabled if the library is present, providing portability and robust handling across platforms.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/darwinosl/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncheck_objc_source_compiles(\"\n  #include <OSLog/OSLog.h>\n  int main(int, char**)\n  { return 0; }\n\" HAVE_OSLOG)\n```\n\n----------------------------------------\n\nTITLE: Defining String Representation Sources Variable in CMake\nDESCRIPTION: This CMake command defines the variable `STR_REPR_SOURCES`. It assigns a list containing the paths to source files `str-repr/encode.c` and `str-repr/decode.c` to this variable. Similar to the headers variable, `PARENT_SCOPE` makes this variable available in the parent directory's CMake scope.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/str-repr/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(STR_REPR_SOURCES\n    str-repr/encode.c\n    str-repr/decode.c\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Target Dependencies for Python Modules\nDESCRIPTION: Uses the `add_dependencies` command to specify that the `mod-python` target (presumably the main target for the core Python module/plugin) depends on the `SetupPyModules` target. This ensures that the Python modules defined in this file are fully installed before the `mod-python` target proceeds.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/python-modules/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_dependencies(mod-python SetupPyModules)\n```\n\n----------------------------------------\n\nTITLE: Configuring Forced Server Mode Option\nDESCRIPTION: Sets the `ENABLE_FORCED_SERVER_MODE` variable, defaulting it to ON if not already defined externally. This likely controls a specific operational mode within syslog-ng. The final value is stored in `SYSLOG_NG_ENABLE_FORCED_SERVER_MODE`.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT DEFINED ENABLE_FORCED_SERVER_MODE)\n  set(ENABLE_FORCED_SERVER_MODE ON)\nendif()\nset(SYSLOG_NG_ENABLE_FORCED_SERVER_MODE ${ENABLE_FORCED_SERVER_MODE})\n```\n\n----------------------------------------\n\nTITLE: Updating APT Repositories - Shell\nDESCRIPTION: Runs 'sudo apt update' to refresh the list of available packages after adding syslog-ng repositories. Requires sudo privilege. No key parameters. Input: none; Output: updated APT package lists.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/README.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt update\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for regexp-parser Module in CMake\nDESCRIPTION: This CMake snippet uses the `set` command to create a variable named `REGEXPPARSER_SOURCES`. This variable holds a list of C source and header files required to build the `regexp-parser` functionality within the syslog-ng project.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/regexp-parser/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(REGEXPPARSER_SOURCES\n    regexp-parser.c\n    regexp-parser.h\n    regexp-parser-parser.c\n    regexp-parser-parser.h\n    regexp-parser-plugin.c\n)\n```\n\n----------------------------------------\n\nTITLE: Generating Bison Grammar File from .ym in CMake\nDESCRIPTION: Calls a custom CMake function `generate_y_from_ym` to process a `.ym` file (likely a macro-expanded grammar file) and generate the corresponding `.y` Bison grammar file for the systemd-journal module.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/systemd-journal/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ngenerate_y_from_ym(modules/systemd-journal/systemd-journal-grammar)\n```\n\n----------------------------------------\n\nTITLE: Configuring Stack Dump Feature (libunwind) in CMake\nDESCRIPTION: Defines an option `ENABLE_STACKDUMP` (default OFF) to enable stack dumps using libunwind. If enabled, it checks if the system is Linux and if the `libunwind` package can be found. If prerequisites are met, it configures required include directories and libraries for the compiler and linker. Finally, it sets `SYSLOG_NG_ENABLE_STACKDUMP` based on the option.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/CMakeLists.txt#_snippet_20\n\nLANGUAGE: cmake\nCODE:\n```\noption(ENABLE_STACKDUMP \"Enable stackdump using libunwind\" OFF)\nif (ENABLE_STACKDUMP)\n  if (NOT CMAKE_SYSTEM_NAME STREQUAL \"Linux\")\n    message (FATAL_ERROR \"ENABLE_STACKDUMP is defined, but it is only supported on Linux currently.\")\n  endif ()\n  find_package (LIBUNWIND)\n  if (NOT LIBUNWIND_FOUND)\n    message (FATAL_ERROR \"ENABLE_STACKDUMP is defined, but the libunwind library could not be found.\")\n  endif ()\n  set (CMAKE_REQUIRED_INCLUDES ${LIBUNWIND_INCLUDE_DIR})\n  if (NOT APPLE)\n    set (CMAKE_REQUIRED_LIBRARIES ${LIBUNWIND_LIBRARY})\n  endif ()\nendif ()\nset (SYSLOG_NG_ENABLE_STACKDUMP ${ENABLE_STACKDUMP})\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files Variable for Tags Parser in CMake\nDESCRIPTION: This snippet uses the CMake `set` command to define a variable named `TAGPARSER_SOURCES`. This variable holds a list of C source (.c) and header (.h) files that constitute the 'tags-parser' component. This variable is likely used later in the build process to specify the source files for compiling the module.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/tagsparser/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(TAGPARSER_SOURCES\n    tags-parser.c\n    tags-parser.h\n    tags-parser-parser.c\n    tags-parser-parser.h\n    tags-parser-plugin.c\n)\n```\n\n----------------------------------------\n\nTITLE: Applying Compiler Options for Loki C++ Module - CMake\nDESCRIPTION: This snippet enforces specific compiler flags for the loki-cpp target: disables 'double-promotion' and deprecated warnings and sets a protobuf debug macro. It standardizes build output and suppresses unwanted compiler diagnostics for cleaner builds. The directive must be run after the loki-cpp target is added.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/grpc/loki/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_options(loki-cpp PRIVATE -Wno-double-promotion -Wno-deprecated -DPROTOBUF_ENABLE_DEBUG_LOGGING_MAY_LEAK_PII=0)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Finding ESMTP Package in CMake\nDESCRIPTION: Checks if the `ENABLE_AFSMTP` CMake variable is not defined or is set to TRUE. If the condition holds, it attempts to locate the ESMTP library and header files using the `find_package` command. This sets variables like `ESMTP_FOUND`, `ESMTP_INCLUDE_DIR`, and `ESMTP_LIBRARIES` based on the result.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/afsmtp/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif (NOT DEFINED ENABLE_AFSMTP OR ENABLE_AFSMTP)\n  find_package(ESMTP)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building syslog-ng tarball using dbld/rules in Docker - Bash\nDESCRIPTION: This code demonstrates a step-by-step process to build a syslog-ng tarball using the dbld Docker-based environment. It begins with running the tarball build, then extracts and configures the source, and culminates with compiling with make. This is suited for users needing an isolated, reproducible build. Dependencies include Docker, a functional dbld setup, and source access. Inputs are implicit from the directory structure; outputs are the tarball and built binaries, found in mapped build directories.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/dbld/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ dbld/rules tarball\n$ Your tarball is in /build, also available on the host in $(top_srcdir)/dbld/build\n$ cd dbld/build\n$ tar -xzvf syslog-ng*.tar.gz\n$ ./syslog-ng-*/configure\n$ make\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for cryptofuncs Module in CMake\nDESCRIPTION: This snippet uses the CMake `set` command to define a variable named `CRYPTOFUNCS_SOURCES`. This variable holds a list containing the source file (`cryptofuncs.c`) required to build the `cryptofuncs` module.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/cryptofuncs/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset (CRYPTOFUNCS_SOURCES\n    cryptofuncs.c\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Loggen SSL Plugin (CMake)\nDESCRIPTION: This command sets a CMake variable `LOGGEN_SSL_PLUGIN_SOURCE` containing the list of source files required to build the `loggen_ssl_plugin`. It includes the main plugin implementation (`ssl_plugin.c`) and common loggen plugin headers and source files.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/tests/loggen/ssl_plugin/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset (LOGGEN_SSL_PLUGIN_SOURCE\n  ssl_plugin.c\n  ${LOGGEN_INCLUDE_DIR}/loggen_plugin.h\n  ${LOGGEN_INCLUDE_DIR}/loggen_plugin.c\n  )\n```\n\n----------------------------------------\n\nTITLE: Enabling GCC Profiling (gprof) Optionally in CMake\nDESCRIPTION: Provides an option `ENABLE_GPROF` (default OFF). If enabled, it adds the `-pg` flag to both C and C++ compiler flags (`CMAKE_C_FLAGS`, `CMAKE_CXX_FLAGS`) to enable profiling support compatible with `gprof`. It also sets the `SYSLOG_NG_ENABLE_GCOV` variable (likely a typo, should be GPROF).\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/CMakeLists.txt#_snippet_32\n\nLANGUAGE: cmake\nCODE:\n```\noption (ENABLE_GPROF \"Enable gcc profiling\" OFF)\nif (ENABLE_GPROF)\n  set (CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -pg\")\n  set (CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -pg\")\nendif ()\nset (SYSLOG_NG_ENABLE_GCOV ${ENABLE_GPROF}) # Note: Variable name seems incorrect, likely should be SYSLOG_NG_ENABLE_GPROF\n```\n\n----------------------------------------\n\nTITLE: Adding Test Subdirectory in CMake\nDESCRIPTION: Uses the `add_test_subdirectory` command (likely a custom function or macro defined within the syslog-ng build system) to process the CMakeLists.txt file located in the `tests` subdirectory. This is used to configure and include tests related to the current component (CSV Scanner).\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/scanner/csv-scanner/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_test_subdirectory(tests)\n```\n\n----------------------------------------\n\nTITLE: Creating the Loggen SSL Shared Library (CMake)\nDESCRIPTION: This command defines a shared library target named `loggen_ssl_plugin` using the source files specified in the `LOGGEN_SSL_PLUGIN_SOURCE` variable. The `SHARED` keyword indicates that a shared library (e.g., .so or .dll) should be built.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/tests/loggen/ssl_plugin/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(loggen_ssl_plugin\n  SHARED\n  ${LOGGEN_SSL_PLUGIN_SOURCE}\n  )\n```\n\n----------------------------------------\n\nTITLE: Creating Example Library and Including Module Subdirectories in CMake\nDESCRIPTION: Creates a shared library named `examples` using the source file `example-plugins.c`. It then includes several subdirectories, each containing the CMake configuration for a specific example module (like message generators, destinations, and filters). These subdirectories will define their own targets.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/examples/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(examples SHARED example-plugins.c)\n\nadd_subdirectory(sources/msg-generator)\nadd_subdirectory(sources/threaded-random-generator)\nadd_subdirectory(sources/threaded-diskq-source)\nadd_subdirectory(sources/random-choice-generator)\n\nadd_subdirectory(inner-destinations/http-test-slots)\nadd_subdirectory(inner-destinations/tls-test-validation)\nadd_subdirectory(destinations/example_destination)\nadd_subdirectory(filterx/example-filterx-func)\n```\n\n----------------------------------------\n\nTITLE: Including Test Subdirectory in CMake Build\nDESCRIPTION: This snippet uses the `add_test_subdirectory` command (likely a custom function or macro wrapping `add_subdirectory` and CTest setup) to include the 'tests' subdirectory in the CMake build process. This command instructs CMake to process the `CMakeLists.txt` file located within the 'tests' directory, which presumably contains definitions for building and registering tests related to the 'tags-parser' module.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/tagsparser/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_test_subdirectory(tests)\n```\n\n----------------------------------------\n\nTITLE: Adding a Test Subdirectory in CMake\nDESCRIPTION: Includes the `tests` subdirectory in the build process. CMake will look for a `CMakeLists.txt` file within the `tests` directory and process it, typically used to define and build tests associated with the `secret-storage` library.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/secret-storage/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nadd_test_subdirectory(tests)\n```\n\n----------------------------------------\n\nTITLE: Generating Bison Grammar File (.y) in CMake\nDESCRIPTION: Invokes a custom CMake function `generate_y_from_ym` to process a `.ym` file and generate a corresponding `.y` Bison grammar file. The input file path is relative to the 'modules/examples/inner-destinations/tls-test-validation/' directory.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/examples/inner-destinations/tls-test-validation/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ngenerate_y_from_ym(modules/examples/inner-destinations/tls-test-validation/tls-test-validation-grammar)\n```\n\n----------------------------------------\n\nTITLE: Installing Tool Files in CMake\nDESCRIPTION: Installs the files listed in the 'TOOLS' variable into the 'share/syslog-ng/tools' directory relative to the installation prefix.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES ${TOOLS} DESTINATION share/syslog-ng/tools)\n```\n\n----------------------------------------\n\nTITLE: Including Tests for the Timestamp Module in CMake\nDESCRIPTION: Uses a custom CMake function 'add_test_subdirectory' to incorporate tests located within the 'tests' subdirectory into the build process. This ensures that the tests related to the timestamp module (or the current project scope) are discovered, built, and potentially executed as part of the overall testing phase.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/timestamp/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_test_subdirectory(tests)\n```\n\n----------------------------------------\n\nTITLE: Installing scl.conf using CMake\nDESCRIPTION: Uses the CMake `install(FILES ...)` command to copy the `scl.conf` file to the installation destination path `share/syslog-ng/include`. This file likely serves as the main include or configuration file for the SCL components.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/scl/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES scl.conf DESTINATION share/syslog-ng/include)\n```\n\n----------------------------------------\n\nTITLE: Generating and Configuring Bison Parser Sources - CMake - CMake\nDESCRIPTION: Uses the 'bison_target' macro to generate parser C source files from the .y grammar file, producing an output C file for the http-test-slots grammar. It also sets properties and compile flags on the generated source for correct compilation. Dependencies include the CMake Bison module, a valid .y grammar file, and any specified compile flags. Behavior: Takes an input .y file and compiles it to a .c parser, updating compile flags as determined by bison.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/examples/inner-destinations/http-test-slots/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nbison_target(HttpTestSlotsGrammar\\n      ${CMAKE_CURRENT_BINARY_DIR}/http-test-slots-grammar.y\\n      ${CMAKE_CURRENT_BINARY_DIR}/http-test-slots-grammar.c\\n      COMPILE_FLAGS ${BISON_FLAGS})\\nset_source_files_properties(\\n      ${CMAKE_CURRENT_BINARY_DIR}/http-test-slots-grammar.c\\n      PROPERTIES\\n      COMPILE_FLAGS ${BISON_BUILT_SOURCE_CFLAGS}\\n)\\n\n```\n\n----------------------------------------\n\nTITLE: Adding Conditional Build Dependencies in RHEL Spec File\nDESCRIPTION: This example shows how to conditionally include build dependencies (`librdkafka-devel`, `zlib-devel`) in an RPM spec file using `%if %{with kafka}`. These dependencies are only required if the build is configured 'with kafka', typically controlled via an `rpmbuild` command-line option like `--with kafka`.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/packaging/README.md#_snippet_2\n\nLANGUAGE: rpm-spec\nCODE:\n```\n%if %{with kafka}\nBuildRequires: librdkafka-devel\nBuildRequires: zlib-devel\n%endif\n```\n\n----------------------------------------\n\nTITLE: Adding Test Subdirectory - CMake\nDESCRIPTION: This snippet uses the add_test_subdirectory() command in CMake to include the 'tests' directory in the build. This allows test cases and testing infrastructure contained in the tests directory to be built and managed as part of the project. It requires that a properly structured tests CMake subdirectory exists. No special configuration is needed beyond standard CMake support for subdirectories.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/logthrdest/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_test_subdirectory(tests)\n\n```\n\n----------------------------------------\n\nTITLE: Setting Installation Directory for Loggen Plugins in CMake\nDESCRIPTION: Defines the installation directory specifically for loggen plugins. This path is set relative to the `CMAKE_INSTALL_PREFIX` under `lib/syslog-ng/loggen`.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nset (LOGGEN_PLUGIN_INSTALL_DIR \"${CMAKE_INSTALL_PREFIX}/lib/syslog-ng/loggen\")\n```\n\n----------------------------------------\n\nTITLE: Including Test Subdirectory in CMake Build\nDESCRIPTION: This CMake command `add_test_subdirectory` adds the `tests` directory located in the current source directory to the build process. This typically integrates the tests defined within that subdirectory, likely using CMake's CTest framework or a custom testing setup specific to syslog-ng, ensuring tests for the CEF module are included.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/cef/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_test_subdirectory(tests)\n```\n\n----------------------------------------\n\nTITLE: Defining Unit Test Source Files with CMake - CMake\nDESCRIPTION: This snippet defines a variable (TEST_LOGPROTO_SOURCES) listing all the C source files used for log protocol unit tests. It is intended to simplify management of source files required to build unit tests, facilitating reuse and maintainability. The syntax is specific to the CMake build system, and this variable is referenced elsewhere in the configuration to provide source code to test targets.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/logproto/tests/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(TEST_LOGPROTO_SOURCES\n  test_logproto.c\n  test-server-options.c\n  test-record-server.c\n  test-text-server.c\n  test-dgram-server.c\n  test-framed-server.c\n  test-auto-server.c\n  test-indented-multiline-server.c\n  test-regexp-multiline-server.c)\n```\n\n----------------------------------------\n\nTITLE: Setting Installation RPATH for Pub/Sub Module in CMake\nDESCRIPTION: This CMake command sets the runtime path (RPATH) property for the `pubsub` target. It ensures that when the module is installed, the dynamic linker can find its dependencies located in the main library directory (`${CMAKE_INSTALL_PREFIX}/lib`) and the syslog-ng specific library directory (`${CMAKE_INSTALL_PREFIX}/lib/syslog-ng`).\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/grpc/pubsub/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset_target_properties(pubsub PROPERTIES INSTALL_RPATH \"${CMAKE_INSTALL_PREFIX}/lib;${CMAKE_INSTALL_PREFIX}/lib/syslog-ng\")\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectory Tests for syslog-ng Multi-Line Components (CMake)\nDESCRIPTION: Executes the add_test_subdirectory command to include the tests subdirectory in the test target. This enables modularized testing of multi-line log processing code in syslog-ng during the build/test cycles. The snippet expects a tests directory to be present and CMake's add_test_subdirectory command to be available, with input/output tightly coupled to the overall build testing routines.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/multi-line/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_test_subdirectory(tests)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Enabling Python Tests in CMake\nDESCRIPTION: This snippet checks if the `ENABLE_PYTHON` CMake variable is set. If not, it exits the current script scope, preventing the subsequent Python test definitions from being processed. This ensures Python tests are only configured when Python support is explicitly enabled in the build.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/python/tests/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif (NOT ENABLE_PYTHON)\n  return()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding syslog-ng Signing Key for APT Repository - Shell\nDESCRIPTION: Downloads the syslog-ng release signing key and adds it to apt-key for repository authentication. Requires wget and sudo privileges. Key parameter: expected syslog-ng APT signing key URL. Input: none; Output: updated system keyring. Limitation: apt-key is deprecated on some newer systems.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/README.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nwget -qO - https://ose-repo.syslog-ng.com/apt/syslog-ng-ose-pub.asc | sudo apt-key add -\n```\n\n----------------------------------------\n\nTITLE: Setting logthrsource Source Files in CMake - CMake\nDESCRIPTION: This snippet declares the LOGTHRSOURCE_SOURCES CMake variable, listing the C source files for the 'logthrsource' component. By setting this variable with PARENT_SCOPE, it makes the source list accessible to parent directories and modules within the build. This is essential for properly compiling the 'logthrsource' component as part of the syslog-ng project.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/logthrsource/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(LOGTHRSOURCE_SOURCES\n    logthrsource/logthrsourcedrv.c\n    logthrsource/logthrfetcherdrv.c\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Setting Compile Flags for PatternDB Target in CMake\nDESCRIPTION: Sets compile flags for the `patterndb` target. It adds `-fPIC` for position-independent code, suitable for shared libraries, and `-Wno-pointer-sign` to suppress specific compiler warnings related to pointer sign mismatches, particularly noted in the radix tree implementation.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/correlation/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n# The radix tree uses unsigned char internally but passes these values to\n# string.h functions, which trigger a lot of harmless warnings.  Of course\n# these could be fixed by adding a lot of casts to the code, but I\n# considered these to be less readable, than simply adding -Wno-pointer-sign\n# warning option.\n#\nset_target_properties(patterndb PROPERTIES COMPILE_FLAGS \"-fPIC -Wno-pointer-sign\")\n```\n\n----------------------------------------\n\nTITLE: Conditionally Enabling syslog-ng Python Module in CMake\nDESCRIPTION: Checks if the Python module is enabled via the `ENABLE_PYTHON` variable (set by `module_switch`). If not enabled, the script returns. If enabled but the required Python libraries (`PYTHONLIBS_FOUND`) are not found, it terminates the build process with a fatal error.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/python/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nmodule_switch(ENABLE_PYTHON \"Enable Python module\" PYTHONLIBS_FOUND)\nif (NOT ENABLE_PYTHON)\n  return()\nendif ()\n\nif (NOT PYTHONLIBS_FOUND)\n  message(FATAL_ERROR \"Python module enabled, but python library not found.\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining FilterX Header Files with set() - CMake\nDESCRIPTION: This snippet uses the CMake set() command to assemble a list variable named FILTERX_HEADERS populated with the relevant FilterX header (.h) files, and exports this variable to the parent scope with PARENT_SCOPE. These headers are part of the syslog-ng FilterX module. This enables other CMake files to include the correct headers during compilation, with each entry referencing a relative path to a header required for FilterX's implementation.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/filterx/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(FILTERX_HEADERS\n    filterx/expr-assign.h\n    filterx/expr-boolalg.h\n    filterx/expr-comparison.h\n    filterx/expr-function.h\n    filterx/expr-getattr.h\n    filterx/expr-get-subscript.h\n    filterx/expr-literal.h\n    filterx/expr-variable.h\n    filterx/expr-setattr.h\n    filterx/expr-set-subscript.h\n    filterx/expr-template.h\n    filterx/filterx-config.h\n    filterx/filterx-eval.h\n    filterx/filterx-expr.h\n    filterx/filterx-globals.h\n    filterx/filterx-object.h\n    filterx/filterx-parser.h\n    filterx/filterx-pipe.h\n    filterx/filterx-scope.h\n    filterx/filterx-weakrefs.h\n    filterx/object-datetime.h\n    filterx/object-json.h\n    filterx/object-json-internal.h\n    filterx/object-message-value.h\n    filterx/object-null.h\n    filterx/object-primitive.h\n    filterx/object-string.h\n    filterx/object-list-interface.h\n    filterx/object-dict-interface.h\n    filterx/expr-condition.h\n    filterx/expr-isset.h\n    filterx/expr-unset.h\n    filterx/expr-shorthand.h\n    filterx/expr-generator.h\n    filterx/expr-literal-generator.h\n    filterx/expr-regexp.h\n    filterx/filterx-private.h\n    filterx/func-istype.h\n    filterx/func-len.h\n    PARENT_SCOPE\n    )\n```\n\n----------------------------------------\n\nTITLE: Adding Test Subdirectory in CMake\nDESCRIPTION: This command invokes `add_test_subdirectory` to include the 'tests' subdirectory in the build. This typically means CMake will process the `CMakeLists.txt` file within the 'tests' directory, which likely defines test targets using CTest or a similar framework, intended for testing the log protocol library.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/logproto/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_test_subdirectory(tests)\n```\n\n----------------------------------------\n\nTITLE: Adding Test Subdirectory in CMake\nDESCRIPTION: This CMake command adds the subdirectory named 'tests' to the build configuration. CMake will process the CMakeLists.txt file located within the 'tests' directory, typically used for setting up unit tests or integration tests for the project, likely using CTest.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/str-repr/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_test_subdirectory(tests)\n```\n\n----------------------------------------\n\nTITLE: Specifying Files for a Conditional RHEL Subpackage\nDESCRIPTION: This snippet shows the `%files` section for the conditional `kafka` subpackage in an RPM spec file. It lists the files (in this case, the shared library `libkafka.so`) that belong to this subpackage. The entire section is enclosed in an `%if %{with kafka}` block, ensuring these files are only packaged when the 'kafka' feature is enabled.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/packaging/README.md#_snippet_6\n\nLANGUAGE: rpm-spec\nCODE:\n```\n%if %{with kafka}\n%files kafka\n%{_libdir}/%{name}/libkafka.so\n%endif\n```\n\n----------------------------------------\n\nTITLE: Defining Template Header Files with set - CMake\nDESCRIPTION: This snippet creates a CMake variable TEMPLATE_HEADERS containing a list of header files used by the template modules. The PARENT_SCOPE argument exports the variable to the parent directory, making it accessible in outer CMake scopes. The header files listed must exist under the specified relative paths. This snippet helps centralize declarations for inclusion elsewhere in the build configuration.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/template/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(TEMPLATE_HEADERS\n    template/templates.h\n    template/macros.h\n    template/function.h\n    template/globals.h\n    template/eval.h\n    template/simple-function.h\n    template/repr.h\n    template/compiler.h\n    template/user-function.h\n    template/escaping.h\n    template/common-template-typedefs.h\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Running built syslog-ng directly from installation in Docker - Bash\nDESCRIPTION: This Bash command runs the syslog-ng binary just built and installed in the Docker container, using all verbose/debug flags (-Fedv). It presumes previous successful compilation and installation steps. The input is the installed syslog-ng binary at the expected Docker-mapped path, output is runtime logging/debug information.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/dbld/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ /install/syslog-ng/sbin/syslog-ng -Fedv\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Check Targets (Style, Commits, Copyright) in CMake\nDESCRIPTION: Adds several custom targets using external shell scripts: `style-check` and `style-format` for code style, `check-commits` for commit message validation, and `check-copyright` for verifying copyright notices. Working directories are set appropriately, and clean files are specified for the copyright check.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/CMakeLists.txt#_snippet_23\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(style-check  COMMAND ${PROJECT_SOURCE_DIR}/scripts/style-checker.sh check  ${PROJECT_SOURCE_DIR} ${PROJECT_BINARY_DIR})\nadd_custom_target(style-format COMMAND ${PROJECT_SOURCE_DIR}/scripts/style-checker.sh format ${PROJECT_SOURCE_DIR} ${PROJECT_BINARY_DIR})\nadd_custom_target(check-commits\n  COMMAND ${PROJECT_SOURCE_DIR}/tests/commits/check.sh\n  WORKING_DIRECTORY ${PROJECT_SOURCE_DIR})\nadd_custom_target(check-copyright\n  COMMAND ${PROJECT_SOURCE_DIR}/tests/copyright/check.sh . ${PROJECT_BINARY_DIR} policy\n  WORKING_DIRECTORY ${PROJECT_SOURCE_DIR})\nset_target_properties(check-copyright PROPERTIES\n  ADDITIONAL_MAKE_CLEAN_FILES\n  \"copyright-run.log;copyright-err.log\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Local and Network Logging - syslog-ng Config\nDESCRIPTION: Extends the syslog-ng configuration to accept both local system logs and log messages from the network (listening on TCP port 514 by default). Maintains the same output destination file. Dependencies: 'scl.conf', syslog-ng with networking (network() source) enabled. Key parameters: system() and network() as sources; file() as destination. Input: local and remote syslog messages; Output: unified log file. Constraints: No filtering by source; all logs written to the same file.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/README.md#_snippet_1\n\nLANGUAGE: config\nCODE:\n```\n@version: current\\n@include \\\"scl.conf\\\"\\n\\nlog {\\n\\tsource {\\n\\t\\tsystem();\\n\\t\\tnetwork();\\n\\t};\\n\\tdestination { file(\\\"/var/log/syslog\\\"); };\\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Base Source Files for 'affile' Module in CMake\nDESCRIPTION: This snippet initializes a CMake variable named `AFFILE_SOURCES` with a list of C header (.h) and source (.c) files. These files constitute the core components of the 'affile' module, handling various file-related operations like reading, writing, monitoring, and parsing within syslog-ng.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/affile/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset (AFFILE_SOURCES\n  \"affile-dest.h\"\n  \"affile-dest-internal-queue-filter.h\"\n  \"affile-parser.h\"\n  \"affile-source.h\"\n  \"collection-comparator.h\"\n  \"directory-monitor-factory.h\"\n  \"directory-monitor.h\"\n  \"directory-monitor-content-comparator.h\"\n  \"directory-monitor-poll.h\"\n  \"file-opener.h\"\n  \"file-reader.h\"\n  \"file-specializations.h\"\n  \"logproto-file-reader.h\"\n  \"logproto-file-writer.h\"\n  \"named-pipe.h\"\n  \"poll-file-changes.h\"\n  \"poll-multiline-file-changes.h\"\n  \"stdin.h\"\n  \"stdout.h\"\n  \"transport-prockmsg.h\"\n  \"wildcard-source.h\"\n  \"wildcard-file-reader.h\"\n  \"file-list.h\"\n  \"affile-dest.c\"\n  \"affile-parser.c\"\n  \"affile-plugin.c\"\n  \"affile-source.c\"\n  \"collection-comparator.c\"\n  \"directory-monitor.c\"\n  \"directory-monitor-factory.c\"\n  \"directory-monitor-content-comparator.c\"\n  \"directory-monitor-poll.c\"\n  \"file-opener.c\"\n  \"file-reader.c\"\n  \"linux-kmsg.c\"\n  \"logproto-file-reader.c\"\n  \"logproto-file-writer.c\"\n  \"named-pipe.c\"\n  \"poll-file-changes.c\"\n  \"poll-multiline-file-changes.c\"\n  \"regular-files.c\"\n  \"stdin.c\"\n  \"stdout.c\"\n  \"transport-prockmsg.c\"\n  \"wildcard-source.c\"\n  \"wildcard-file-reader.c\"\n  \"file-list.c\"\n)\n```\n\n----------------------------------------\n\nTITLE: Checking C++ Enablement in CMake\nDESCRIPTION: This CMake code block checks if the `ENABLE_CPP` variable is false. If C++ support is not enabled, it immediately returns, skipping the subsequent C++ related configuration steps in this file.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/grpc/otel/filterx/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT ENABLE_CPP)\n  return()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Healthcheck Header Files Variable in CMake\nDESCRIPTION: This CMake snippet defines the `HEALTHCHECK_HEADERS` variable, populating it with a list of header files (.h) associated with the healthcheck functionality. The `PARENT_SCOPE` argument ensures this variable is accessible in the parent `CMakeLists.txt` file that includes this script, typically for use in defining build targets.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/healthcheck/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEALTHCHECK_HEADERS\n    healthcheck/healthcheck.h\n    healthcheck/healthcheck-control.h\n    healthcheck/healthcheck-stats.h\n    healthcheck/stopwatch.h\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Defining Installation Paths for Syslog-ng Components in CMake\nDESCRIPTION: Sets numerous CMake variables defining the installation directory structure for various syslog-ng components. These paths are often relative to `CMAKE_INSTALL_PREFIX` and use standard GNU directory variables (like `prefix`, `datarootdir`, `localstatedir`, `exec_prefix`). Paths cover configuration files, data files, modules (core, Java, Python), executables, libraries, includes, SCL files, tools, PID files, and source directory reference.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nset(SYSLOG_NG_PATH_PREFIX ${CMAKE_INSTALL_PREFIX})\nset(SYSLOG_NG_PATH_SYSCONFDIR \"\\${prefix}/etc\")\nset(SYSLOG_NG_PATH_DATADIR \"\\${datarootdir}\")\nset(SYSLOG_NG_PATH_PKGDATADIR \"\\${datarootdir}/syslog-ng\")\nset(SYSLOG_NG_PATH_PIDFILEDIR \"\\${localstatedir}\")\nset(SYSLOG_NG_PATH_LOCALSTATEDIR \"\\${prefix}/var\")\nset(SYSLOG_NG_MODULE_PATH \"\\${exec_prefix}/lib/syslog-ng\")\nset(SYSLOG_NG_PATH_EXECPREFIX \"\\${prefix}\")\nset(SYSLOG_NG_PATH_CONFIG_INCLUDEDIR \"\\${datadir}/syslog-ng/include\")\nset(SYSLOG_NG_PATH_SCLDIR \"\\${datadir}/syslog-ng/include/scl\")\nset(SYSLOG_NG_PATH_LIBEXECDIR \"\\${exec_prefix}/libexec\")\nset(SYSLOG_NG_PATH_DATAROOTDIR \"\\${prefix}/share\")\nset(SYSLOG_NG_PATH_MODULEDIR \"\\${exec_prefix}/lib/syslog-ng\")\nset(SYSLOG_NG_PACKAGE_NAME \"${CMAKE_PROJECT_NAME}\")\nset(SYSLOG_NG_PATH_XSDDIR \"\\${datadir}/syslog-ng/xsd\")\nset(SYSLOG_NG_JAVA_MODULE_PATH \"\\${exec_prefix}/lib/syslog-ng/java-modules\")\nset(SYSLOG_NG_PYTHON_MODULE_DIR \"\\${exec_prefix}/lib/syslog-ng/python\")\nset(SYSLOG_NG_PYTHON_SYSCONF_MODULE_DIR \"\\${prefix}/etc/python\")\nset(SYSLOG_NG_PYTHON_VENV_DIR \"\\${localstatedir}/python-venv\")\nset(SYSLOG_NG_PATH_TOPSRC_DIR \"${PROJECT_SOURCE_DIR}\")\nset(LIBDIR \"\\${exec_prefix}/lib\")\nset(INCLUDEDIR \"\\${prefix}/include\")\nset(TOOLSDIR \"\\${datadir}/syslog-ng/tools\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Files for syslog-ng-ctl - CMake - CMake\nDESCRIPTION: Defines a CMake variable SYSLOG_NG_CTL_SOURCES listing all C and header files needed to build the syslog-ng-ctl executable. This modular list organizes the source code by commands and components, acting as input to the build process. The variable is later used to specify sources for the build target, and assumes all files exist in the current project directory structure.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/syslog-ng-ctl/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SYSLOG_NG_CTL_SOURCES\n    syslog-ng-ctl.c\n    control-client.h\n    commands/attach.h\n    commands/attach.c\n    commands/commands.h\n    commands/commands.c\n    commands/credentials.h\n    commands/credentials.c\n    commands/verbose.h\n    commands/verbose.c\n    commands/log-level.h\n    commands/log-level.c\n    commands/ctl-stats.h\n    commands/ctl-stats.c\n    commands/query.h\n    commands/query.c\n    commands/license.h\n    commands/license.c\n    commands/config.h\n    commands/config.c\n    commands/healthcheck.h\n    commands/healthcheck.c\n    control-client.c\n)\n```\n\n----------------------------------------\n\nTITLE: Defining C++ Source Files for Pub/Sub Module in CMake\nDESCRIPTION: This CMake code defines a variable `PUBSUB_CPP_SOURCES` that lists all the C++ source and header files required for the `pubsub-cpp` component of the module. It includes metrics sources defined elsewhere (`GRPC_METRICS_SOURCES`) and specific files related to the Pub/Sub destination implementation.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/grpc/pubsub/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(PUBSUB_CPP_SOURCES\n  ${GRPC_METRICS_SOURCES}\n  pubsub-dest.hpp\n  pubsub-dest.cpp\n  pubsub-dest.h\n  pubsub-dest-worker.hpp\n  pubsub-dest-worker.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for secure-logging Target in CMake\nDESCRIPTION: Configures the include paths for the `secure-logging` CMake target by adding the current source directory (`${CMAKE_CURRENT_SOURCE_DIR}`) as a PUBLIC include directory. This allows sources associated with `secure-logging` or targets linking to it to find necessary headers located in the specified directory.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/secure-logging/slogkey/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories (secure-logging PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})\t\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for syslog-ng Python Module in CMake\nDESCRIPTION: Defines a CMake variable `PYTHON_SOURCES` containing a list of all C and header (.c, .h) files required to build the syslog-ng Python module. This variable centralizes the source file list for use in the module's build target definition.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/python/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(PYTHON_SOURCES\n    python-module.h\n    python-config.h\n    python-config.c\n    python-confgen.h\n    python-confgen.c\n    python-persist.h\n    python-persist.c\n    python-helpers.h\n    python-helpers.c\n    python-http-header.h\n    python-http-header.c\n    python-main.h\n    python-main.c\n    python-plugin.c\n    python-value-pairs.c\n    python-value-pairs.h\n    python-dest.c\n    python-dest.h\n    python-tf.c\n    python-tf.h\n    python-parser.c\n    python-parser.h\n    python-logmsg.h\n    python-logmsg.c\n    python-logtemplate.h\n    python-logtemplate.c\n    python-logtemplate-options.h\n    python-logtemplate-options.c\n    python-global-code-loader.h\n    python-global-code-loader.c\n    python-binding.h\n    python-binding.c\n    python-startup.h\n    python-startup.c\n    python-global.h\n    python-global.c\n    python-debugger.c\n    python-debugger.h\n    python-logparser.h\n    python-logparser.c\n    python-integerpointer.h\n    python-integerpointer.c\n    python-logger.h\n    python-logger.c\n    python-source.h\n    python-source.c\n    python-fetcher.h\n    python-fetcher.c\n    python-bookmark.h\n    python-bookmark.c\n    python-ack-tracker.h\n    python-ack-tracker.c\n    python-types.h\n    python-types.c\n    python-options.h\n    python-options.c\n    compat/compat-python.c\n    python-flags.h\n    python-flags.c\n    python-reloc.h\n    python-reloc.c\n)\n```\n\n----------------------------------------\n\nTITLE: Setting PatternDB Include Directory in CMake\nDESCRIPTION: Defines a CMake variable `PATTERNDB_INCLUDE_DIR` and sets its value to the path of the current source directory (`CMAKE_CURRENT_SOURCE_DIR`). This is likely used later to specify include paths for compilation.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/correlation/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(PATTERNDB_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR})\n```\n\n----------------------------------------\n\nTITLE: Verifying syslog-ng System Service Status - Bash\nDESCRIPTION: Shell command to check if the syslog-ng service is active using svcs and grep. Filters the output to only lines mentioning syslog. Input is none; output is a list of syslog-ng service status lines, confirming its current state. Requires no extra dependencies beyond the standard Solaris tools.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/contrib/solaris-packaging/solaris10_install.txt#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n# svcs -a | grep syslog\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Kafka Module in CMake\nDESCRIPTION: This snippet defines a CMake variable `KAFKA_SOURCES` which holds a list of all C source (.c) and header (.h) files required to build the syslog-ng Kafka module. This variable is later used when defining the module's build target.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/kafka/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(KAFKA_SOURCES\n  kafka-parser.c\n  kafka-parser.h\n  kafka-plugin.c\n  kafka-dest-driver.c\n  kafka-dest-worker.c\n  kafka-props.c\n  kafka-internal.h\n)\n```\n\n----------------------------------------\n\nTITLE: Running Newsfile Creation Script for Releases - Python\nDESCRIPTION: This snippet shows how to generate the NEWS.md file by running the `news/create-newsfile.py` Python script. Ensure Python 3 is available and the version has been bumped in the VERSION file before executing. Input: No arguments required; reads project state. Output: Creates or updates NEWS.md with collated news entries. Limitation: Must be executed from the correct directory and after updating version number.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/news/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython3 news/create-newsfile.py\n```\n\n----------------------------------------\n\nTITLE: Installing Generated Configuration Header in CMake\nDESCRIPTION: Installs the generated `syslog-ng-config.h` file from the binary directory into the `include/syslog-ng` directory relative to the installation prefix.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/CMakeLists.txt#_snippet_38\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES ${CMAKE_CURRENT_BINARY_DIR}/syslog-ng-config.h DESTINATION include/syslog-ng)\n```\n\n----------------------------------------\n\nTITLE: Linking loggen_plugin Library to loggen_helper in CMake\nDESCRIPTION: Links the `loggen_plugin` static library target publicly against the `loggen_helper` library. This establishes a dependency and ensures that `loggen_plugin` can use symbols from `loggen_helper`, and that targets linking `loggen_plugin` also implicitly link `loggen_helper` and its dependencies.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/tests/loggen/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(loggen_plugin PUBLIC loggen_helper)\n```\n\n----------------------------------------\n\nTITLE: Installing the Built Example Library in CMake\nDESCRIPTION: Specifies installation rules for the `examples` target. The compiled shared library (`examples.so` or `examples.dll`) will be installed into the `lib/syslog-ng` directory relative to the installation prefix. This installation is associated with the `examples` component, allowing for component-based installation.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/examples/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS examples LIBRARY DESTINATION lib/syslog-ng COMPONENT examples)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Target in CMake\nDESCRIPTION: Specifies the include directories for the `tls-test-validation` target. It adds the current source directory, current binary directory (for generated headers), and the main project source directory as public or private include paths, making headers available during compilation.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/examples/inner-destinations/tls-test-validation/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(tls-test-validation\n  PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}\n  PRIVATE ${CMAKE_CURRENT_BINARY_DIR}\n  PUBLIC ${PROJECT_SOURCE_DIR}\n)\n```\n\n----------------------------------------\n\nTITLE: Installing MySQL Support for syslog-ng - Bash\nDESCRIPTION: This snippet shows shell commands to enable MySQL database support for syslog-ng on Solaris 10. It involves downloading and installing MySQL and OpenSSL packages from sunfreeware.com, extracting and installing the MySQL database driver library for syslog-ng (libdbd8-mysql). Prerequisites include the correct versioned package files and administrative privileges. Inputs include gzipped package archive files; outputs are installed packages and database connectivity support for syslog-ng SQL destinations.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/contrib/solaris-packaging/solaris10_install.txt#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# gunzip <pkg>.gz; pkgadd -d <pkg> \n# gunzip libdbd8-mysql_<version>_<arch>.gz\n# pkgadd -d libdbd8-mysql_<version>_<arch>.pkg\n```\n\n----------------------------------------\n\nTITLE: Setting Install RPATH for the BigQuery Module (CMake)\nDESCRIPTION: Sets the runtime search path (RPATH) for the installed `bigquery` module target. This ensures the module can find its shared library dependencies (like syslog-ng core libraries) located within the CMake installation prefix directories (`lib` and `lib/syslog-ng`).\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/grpc/bigquery/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset_target_properties(bigquery PROPERTIES INSTALL_RPATH \"${CMAKE_INSTALL_PREFIX}/lib;${CMAKE_INSTALL_PREFIX}/lib/syslog-ng\")\n```\n\n----------------------------------------\n\nTITLE: Installing the eventlog Library Target in CMake\nDESCRIPTION: This CMake command sets up the installation rule for the 'eventlog' target. When the 'install' target is built (e.g., using 'make install' or 'cmake --install'), the compiled 'eventlog' shared library will be copied to the 'lib' directory relative to the CMAKE_INSTALL_PREFIX.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/eventlog/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS eventlog DESTINATION lib)\n```\n\n----------------------------------------\n\nTITLE: Defining SCL Directories List in CMake\nDESCRIPTION: Defines a CMake variable `SCL_DIRS` which holds a list of directory names. These directories correspond to various modules or components within the syslog-ng Configuration Library (SCL). This variable is subsequently used by installation commands.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/scl/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SCL_DIRS\n    apache\n    arr\n    cee\n    cim\n    checkpoint\n    cisco\n    collectd\n    default-network-drivers\n    darwinosl\n    discord\n    elasticsearch\n    ewmm\n    fortigate\n    google\n    graphite\n    graylog2\n    hdfs\n    iptables\n    jellyfin\n    junos\n    kafka\n    linux-audit\n    loadbalancer\n    loggly\n    logmatic\n    logscale\n    mariadb\n    mbox\n    netskope\n    nodejs\n    openobserve\n    opensearch\n    osquery\n    pacct\n    paloalto\n    pihole\n    pgsql\n    python\n    qbittorrent\n    rewrite\n    slack\n    snmptrap\n    solaris\n    splunk\n    sudo\n    sumologic\n    syslogconf\n    system\n    telegram\n    websense\n    windowseventlog\n    azure\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Metrics Headers and Sources with Parent Scope - CMake - CMakeLists.txt\nDESCRIPTION: These CMake code snippets create two variable lists, METRICS_HEADERS and METRICS_SOURCES, populated with relevant header (.h) and source (.c) files for the metrics subsystem of syslog-ng. The PARENT_SCOPE argument is used so the variables propagate to parent CMake scopes, making these file lists accessible in higher-level build configurations. The commented-out add_test_subdirectory(tests) line indicates optional inclusion of a test suite, but it is not activated by default. There are no external dependencies for these snippets apart from having the referenced files present; they primarily structure build information for subsequent CMake processing.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/metrics/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(METRICS_HEADERS\n    metrics/metrics.h\n    metrics/dyn-metrics-store.h\n    metrics/dyn-metrics-cache.h\n    metrics/dyn-metrics-template.h\n    metrics/label-template.h\n    PARENT_SCOPE)\n\nset(METRICS_SOURCES\n    metrics/metrics.c\n    metrics/dyn-metrics-store.c\n    metrics/dyn-metrics-cache.c\n    metrics/dyn-metrics-template.c\n    metrics/label-template.c\n    PARENT_SCOPE)\n\n#add_test_subdirectory(tests)\n\n```\n\n----------------------------------------\n\nTITLE: Extracting and Installing syslog-ng and Dependencies - Bash\nDESCRIPTION: These shell command snippets unpack and install primary syslog-ng Premium Edition packages and required dependencies (libiconv, libgcc, libdbi8) on Solaris 10. They use standard Unix tools such as gunzip for extraction and pkgadd for package installation. Required are gzip-compressed Solaris package files (.gz), proper user permissions (root), and awareness of architecture-specific filenames. Inputs are gzipped pkg files; the outputs are installed software. All commands must be run in a command line terminal.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/contrib/solaris-packaging/solaris10_install.txt#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# libiconv-1.11-sol9-sparc-local.gz\n# libgcc-3.4.6-sol9-sparc-local.gz\n# gunzip syslog-ng_<version_number>_sparc.pkg.gz\n# gunzip libdbi8_<version>_<arch>.gz\n# pkgadd -d libiconv-1.11-sol9-sparc-local\n# pkgadd -d libgcc-3.4.6-sol9-sparc-local\n# pkgadd -d syslog-ng_<version_number>_sparc.pkg\n# pkgadd -d libdbi8_<version>_<arch>.pkg\n```\n\n----------------------------------------\n\nTITLE: Expected Structured Log Output - Text\nDESCRIPTION: Shows the expected output of a structured log message submitted as JSON and reformatted by syslog-ng's WELF template. No dependencies required; output is produced by previous logger/config example. Input: Structured log event; Output: log line in key=value format.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/README.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nname1=value1 name2=value2\n```\n\n----------------------------------------\n\nTITLE: Defining Template Source Files with set - CMake\nDESCRIPTION: This block sets the CMake variable TEMPLATE_SOURCES with a list of C source files relating to template functionalities. The PARENT_SCOPE option again promotes the variable to the calling scope, facilitating use in higher-level CMakeLists.txt files. All listed files must be present in the expected subdirectories and will typically be compiled into a target library or executable.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/template/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(TEMPLATE_SOURCES\n    template/templates.c\n    template/macros.c\n    template/eval.c\n    template/globals.c\n    template/simple-function.c\n    template/repr.c\n    template/compiler.c\n    template/user-function.c\n    template/escaping.c\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Installing syslog-ng via brew (macOS) - Shell\nDESCRIPTION: Displays the Homebrew command to install syslog-ng on macOS. Prerequisite: Homebrew installed and command must be run as administrator. Input: none; Output: syslog-ng installed on macOS system.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/README.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n# brew install syslog-ng\n```\n\n----------------------------------------\n\nTITLE: Setting CSV Scanner Header Files Variable in CMake\nDESCRIPTION: Defines a CMake variable named `CSV_SCANNER_HEADERS` containing the path to the header file (`csv-scanner/csv-scanner.h`) for the CSV scanner component. The `PARENT_SCOPE` argument makes this variable available in the parent CMakeLists.txt file that included this one.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/scanner/csv-scanner/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(CSV_SCANNER_HEADERS\n    csv-scanner/csv-scanner.h\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files Variable for basicfuncs Module in CMake\nDESCRIPTION: This snippet uses the `set` command in CMake to define a variable named `BASICFUNCS_SOURCES`. This variable holds a list containing the source file `basic-funcs.c`, which will be used when defining the `basicfuncs` module target.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/modules/basicfuncs/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset (BASICFUNCS_SOURCES\n  basic-funcs.c\n)\n```\n\n----------------------------------------\n\nTITLE: Querying available dbld/rules commands - Bash\nDESCRIPTION: This Bash snippet demonstrates how to invoke the dbld/rules tool with an optional help parameter to list available targets and usage instructions. The command runs in the host shell and typically provides an overview of build, package, and release options for syslog-ng. No special dependencies beyond an installed dbld/rules script are required. The output is informational and has no side effects if run without parameters.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/dbld/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwhoami@host:~/syslog-ng$ dbld/rules [help]\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding IVYKIS Dependency in CMake\nDESCRIPTION: Adds a build dependency on the 'IVYKIS' target for the 'syslog-ng' target, but only if the CMake variable 'IVYKIS_INTERNAL' is true. This ensures syslog-ng builds after IVYKIS if IVYKIS is being built as part of the same project.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/lib/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif (${IVYKIS_INTERNAL})\n   add_dependencies(syslog-ng IVYKIS)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining a New Subpackage in Debian Control File\nDESCRIPTION: This snippet illustrates how to define a new binary subpackage (`syslog-ng-mod-slog`) within the Debian `control` file. It includes metadata like architecture, dependencies (`${shlibs:Depends}`, `${misc:Depends}`), and a multi-line description detailing the package's purpose and contents (slog template functions and utilities).\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/packaging/README.md#_snippet_3\n\nLANGUAGE: debian-control\nCODE:\n```\nPackage: syslog-ng-mod-slog\nArchitecture: any\nMulti-Arch: foreign\nDepends: ${shlibs:Depends}, ${misc:Depends}\nDescription: Enhanced system logging daemon (slog)\n syslog-ng is an enhanced log daemon, supporting a wide range of input\n and output methods: syslog, unstructured text, message queues,\n databases (SQL and NoSQL alike) and more.\n .\n Key features:\n .\n  * receive and send RFC3164 and RFC5424 style syslog messages\n  * work with any kind of unstructured data\n  * receive and send JSON formatted messages\n  * classify and structure logs with builtin parsers (csv-parser(),\n    db-parser(), etc.)\n  * normalize, crunch and process logs as they flow through the system\n  * hand on messages for further processing using message queues (like\n    AMQP), files or databases (like PostgreSQL or MongoDB).\n .\n This package provides the $(slog) template functions and command\n line utilities (slogencrypt, slogverify, slogkey).\n```\n\n----------------------------------------\n\nTITLE: Using Standard Macros in Syslog-ng for HAProxy Transport - Plain Text\nDESCRIPTION: This snippet documents the change of variable names in syslog-ng's handling of HAProxy transport, replacing previously dedicated PROXIED_* macros with standard macros such as $SOURCEIP, $SOURCEPORT, $DESTIP, and $DESTPORT. No direct dependencies are required since this is a documentation change. These macros are expanded at runtime to the respective values when parsing logs transported via HAProxy. Note that this change unifies the macro usage to simplify handling proxied connections.\nSOURCE: https://github.com/syslog-ng/syslog-ng/blob/develop/news/feature-5305.md#_snippet_0\n\nLANGUAGE: plain text\nCODE:\n```\n`syslog(transport(proxied-*)))` and `network(transport(proxied-*))`: changed\nwhere HAProxy transport saved the original source and destination addresses.\nInstead of using dedicated `PROXIED_*` name-value pairs, use the usual\n`$SOURCEIP`, `$SOURCEPORT`, `$DESTIP` and `$DESTPORT` macros, making haproxy\nbased connections just like native ones.\n```"
  }
]